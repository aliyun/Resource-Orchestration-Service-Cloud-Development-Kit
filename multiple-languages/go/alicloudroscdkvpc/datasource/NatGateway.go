package datasource

import (
	_init_ "github.com/alibabacloud-go/ros-cdk/alicloudroscdkvpc/jsii"
	_jsii_ "github.com/aws/jsii-runtime-go/runtime"

	"github.com/alibabacloud-go/ros-cdk/alicloudroscdkcore"
	"github.com/alibabacloud-go/ros-cdk/alicloudroscdkvpc/datasource/internal"
	"github.com/aws/constructs-go/constructs/v3"
)

// This class encapsulates and extends the ROS resource type `DATASOURCE::VPC::NatGateway`.
type NatGateway interface {
	alicloudroscdkcore.Resource
	// Attribute AutoPay: Indicates whether automatic payment is enabled.
	//
	// Valid values:
	// false: no
	// true: yes.
	AttrAutoPay() alicloudroscdkcore.IResolvable
	// Attribute BusinessStatus: The status of the NAT gateway.
	//
	// Valid values:
	// Normal: normal
	// FinancialLocked: locked due to overdue payments.
	AttrBusinessStatus() alicloudroscdkcore.IResolvable
	// Attribute CreateTime: The time when the NAT gateway was created.
	//
	// The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
	AttrCreateTime() alicloudroscdkcore.IResolvable
	// Attribute DeletionProtection: Indicates whether the deletion protection feature is enabled.
	//
	// Valid values:
	// true: yes
	// false: no.
	AttrDeletionProtection() alicloudroscdkcore.IResolvable
	// Attribute Description: The description of the NAT gateway.
	AttrDescription() alicloudroscdkcore.IResolvable
	// Attribute EipBindMode: The mode in which the NAT gateway is associated with an elastic IP address (EIP).
	//
	// Valid values:
	// MULTI_BINDED: multi-EIP-to-ENI mode* NAT: NAT mode, which is compatible with IPv4 addresses.
	AttrEipBindMode() alicloudroscdkcore.IResolvable
	// Attribute ExpiredTime: The time when the NAT gateway expires.
	AttrExpiredTime() alicloudroscdkcore.IResolvable
	// Attribute ForwardTableIds: The ID of the Destination Network Address Translation (DNAT) table.
	AttrForwardTableIds() alicloudroscdkcore.IResolvable
	// Attribute IcmpReplyEnabled: Indicates whether the ICMP non-retrieval feature is enabled.
	//
	// Valid values:
	// true: yes
	// false: no.
	AttrIcmpReplyEnabled() alicloudroscdkcore.IResolvable
	// Attribute InternetChargeType: The metering method of the NAT gateway.
	//
	// Valid values:
	// PayBySpec: pay-by-specification
	// PayByLcu: pay-by-CU.
	AttrInternetChargeType() alicloudroscdkcore.IResolvable
	// Attribute IpLists: The list of elastic IP addresses (EIPs) that are associated with the Internet NAT gateway.
	AttrIpLists() alicloudroscdkcore.IResolvable
	// Attribute NatGatewayId: The ID of the NAT gateway.
	AttrNatGatewayId() alicloudroscdkcore.IResolvable
	// Attribute NatGatewayName: The name of the NAT gateway.
	//
	// The name must be 1 to 128 characters in length, and cannot start with http:// or https://. If this parameter is not set, the system automatically assigns a name to the NAT gateway.
	AttrNatGatewayName() alicloudroscdkcore.IResolvable
	// Attribute NatGatewayPrivateInfo: The private network information about the enhanced Internet NAT gateway.
	AttrNatGatewayPrivateInfo() alicloudroscdkcore.IResolvable
	// Attribute NatType: The type of the NAT gateway.
	//
	// The value is set to Enhanced (enhanced NAT gateway).
	AttrNatType() alicloudroscdkcore.IResolvable
	// Attribute NetworkType: The type of NAT gateway.
	//
	// Valid values:
	// internet: an Internet NAT gateway
	// intranet: a VPC NAT gateway.
	AttrNetworkType() alicloudroscdkcore.IResolvable
	// Attribute PaymentType: The billing method of the NAT gateway.
	//
	// Valid values:  PrePaid: subscription PostPaid: pay-as-you-go.
	AttrPaymentType() alicloudroscdkcore.IResolvable
	// Attribute SecurityProtectionEnabled: Indicates whether the firewall feature is enabled.
	//
	// Valid values:
	// false: no
	// true: yes.
	AttrSecurityProtectionEnabled() alicloudroscdkcore.IResolvable
	// Attribute SnatTableIds: The ID of the SNAT table of the NAT gateway.
	AttrSnatTableIds() alicloudroscdkcore.IResolvable
	// Attribute Spec: The size of the NAT gateway.
	//
	// An empty value is returned for the parameter. If InternetChargeType is set to PayByLcu, an empty value is returned.
	AttrSpec() alicloudroscdkcore.IResolvable
	// Attribute VpcId: The ID of the VPC where the NAT gateway is deployed.
	AttrVpcId() alicloudroscdkcore.IResolvable
	EnableResourcePropertyConstraint() *bool
	SetEnableResourcePropertyConstraint(val *bool)
	Id() *string
	SetId(val *string)
	// The construct tree node associated with this construct.
	Node() alicloudroscdkcore.ConstructNode
	// Returns a string-encoded token that resolves to the physical name that should be passed to the ROS resource.
	//
	// This value will resolve to one of the following:
	// - a concrete value (e.g. `"my-awesome-bucket"`)
	// - `undefined`, when a name should be generated by ROS
	// - a concrete name generated automatically during synthesis, in
	//    cross-environment scenarios.
	// Experimental.
	PhysicalName() *string
	Props() *NatGatewayProps
	SetProps(val *NatGatewayProps)
	Ref() *string
	Resource() alicloudroscdkcore.RosResource
	SetResource(val alicloudroscdkcore.RosResource)
	Scope() alicloudroscdkcore.Construct
	SetScope(val alicloudroscdkcore.Construct)
	// The stack in which this resource is defined.
	Stack() alicloudroscdkcore.Stack
	AddCondition(condition alicloudroscdkcore.RosCondition)
	AddCount(count interface{})
	AddDependency(resource alicloudroscdkcore.Resource)
	AddResourceDesc(desc *string)
	ApplyRemovalPolicy(policy alicloudroscdkcore.RemovalPolicy)
	GeneratePhysicalName() *string
	GetAtt(name *string) alicloudroscdkcore.IResolvable
	// Perform final modifications before synthesis.
	//
	// This method can be implemented by derived constructs in order to perform
	// final changes before synthesis. prepare() will be called after child
	// constructs have been prepared.
	//
	// This is an advanced framework feature. Only use this if you
	// understand the implications.
	OnPrepare()
	// Allows this construct to emit artifacts into the cloud assembly during synthesis.
	//
	// This method is usually implemented by framework-level constructs such as `Stack` and `Asset`
	// as they participate in synthesizing the cloud assembly.
	OnSynthesize(session constructs.ISynthesisSession)
	// Validate the current construct.
	//
	// This method can be implemented by derived constructs in order to perform
	// validation logic. It is called on all constructs before synthesis.
	//
	// Returns: An array of validation error messages, or an empty array if the construct is valid.
	OnValidate() *[]*string
	// Perform final modifications before synthesis.
	//
	// This method can be implemented by derived constructs in order to perform
	// final changes before synthesis. prepare() will be called after child
	// constructs have been prepared.
	//
	// This is an advanced framework feature. Only use this if you
	// understand the implications.
	Prepare()
	SetMetadata(key *string, value interface{})
	// Allows this construct to emit artifacts into the cloud assembly during synthesis.
	//
	// This method is usually implemented by framework-level constructs such as `Stack` and `Asset`
	// as they participate in synthesizing the cloud assembly.
	Synthesize(session alicloudroscdkcore.ISynthesisSession)
	// Returns a string representation of this construct.
	ToString() *string
	// Validate the current construct.
	//
	// This method can be implemented by derived constructs in order to perform
	// validation logic. It is called on all constructs before synthesis.
	//
	// Returns: An array of validation error messages, or an empty array if the construct is valid.
	Validate() *[]*string
}

// The jsii proxy struct for NatGateway
type jsiiProxy_NatGateway struct {
	internal.Type__alicloudroscdkcoreResource
}

func (j *jsiiProxy_NatGateway) AttrAutoPay() alicloudroscdkcore.IResolvable {
	var returns alicloudroscdkcore.IResolvable
	_jsii_.Get(
		j,
		"attrAutoPay",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_NatGateway) AttrBusinessStatus() alicloudroscdkcore.IResolvable {
	var returns alicloudroscdkcore.IResolvable
	_jsii_.Get(
		j,
		"attrBusinessStatus",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_NatGateway) AttrCreateTime() alicloudroscdkcore.IResolvable {
	var returns alicloudroscdkcore.IResolvable
	_jsii_.Get(
		j,
		"attrCreateTime",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_NatGateway) AttrDeletionProtection() alicloudroscdkcore.IResolvable {
	var returns alicloudroscdkcore.IResolvable
	_jsii_.Get(
		j,
		"attrDeletionProtection",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_NatGateway) AttrDescription() alicloudroscdkcore.IResolvable {
	var returns alicloudroscdkcore.IResolvable
	_jsii_.Get(
		j,
		"attrDescription",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_NatGateway) AttrEipBindMode() alicloudroscdkcore.IResolvable {
	var returns alicloudroscdkcore.IResolvable
	_jsii_.Get(
		j,
		"attrEipBindMode",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_NatGateway) AttrExpiredTime() alicloudroscdkcore.IResolvable {
	var returns alicloudroscdkcore.IResolvable
	_jsii_.Get(
		j,
		"attrExpiredTime",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_NatGateway) AttrForwardTableIds() alicloudroscdkcore.IResolvable {
	var returns alicloudroscdkcore.IResolvable
	_jsii_.Get(
		j,
		"attrForwardTableIds",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_NatGateway) AttrIcmpReplyEnabled() alicloudroscdkcore.IResolvable {
	var returns alicloudroscdkcore.IResolvable
	_jsii_.Get(
		j,
		"attrIcmpReplyEnabled",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_NatGateway) AttrInternetChargeType() alicloudroscdkcore.IResolvable {
	var returns alicloudroscdkcore.IResolvable
	_jsii_.Get(
		j,
		"attrInternetChargeType",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_NatGateway) AttrIpLists() alicloudroscdkcore.IResolvable {
	var returns alicloudroscdkcore.IResolvable
	_jsii_.Get(
		j,
		"attrIpLists",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_NatGateway) AttrNatGatewayId() alicloudroscdkcore.IResolvable {
	var returns alicloudroscdkcore.IResolvable
	_jsii_.Get(
		j,
		"attrNatGatewayId",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_NatGateway) AttrNatGatewayName() alicloudroscdkcore.IResolvable {
	var returns alicloudroscdkcore.IResolvable
	_jsii_.Get(
		j,
		"attrNatGatewayName",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_NatGateway) AttrNatGatewayPrivateInfo() alicloudroscdkcore.IResolvable {
	var returns alicloudroscdkcore.IResolvable
	_jsii_.Get(
		j,
		"attrNatGatewayPrivateInfo",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_NatGateway) AttrNatType() alicloudroscdkcore.IResolvable {
	var returns alicloudroscdkcore.IResolvable
	_jsii_.Get(
		j,
		"attrNatType",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_NatGateway) AttrNetworkType() alicloudroscdkcore.IResolvable {
	var returns alicloudroscdkcore.IResolvable
	_jsii_.Get(
		j,
		"attrNetworkType",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_NatGateway) AttrPaymentType() alicloudroscdkcore.IResolvable {
	var returns alicloudroscdkcore.IResolvable
	_jsii_.Get(
		j,
		"attrPaymentType",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_NatGateway) AttrSecurityProtectionEnabled() alicloudroscdkcore.IResolvable {
	var returns alicloudroscdkcore.IResolvable
	_jsii_.Get(
		j,
		"attrSecurityProtectionEnabled",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_NatGateway) AttrSnatTableIds() alicloudroscdkcore.IResolvable {
	var returns alicloudroscdkcore.IResolvable
	_jsii_.Get(
		j,
		"attrSnatTableIds",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_NatGateway) AttrSpec() alicloudroscdkcore.IResolvable {
	var returns alicloudroscdkcore.IResolvable
	_jsii_.Get(
		j,
		"attrSpec",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_NatGateway) AttrVpcId() alicloudroscdkcore.IResolvable {
	var returns alicloudroscdkcore.IResolvable
	_jsii_.Get(
		j,
		"attrVpcId",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_NatGateway) EnableResourcePropertyConstraint() *bool {
	var returns *bool
	_jsii_.Get(
		j,
		"enableResourcePropertyConstraint",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_NatGateway) Id() *string {
	var returns *string
	_jsii_.Get(
		j,
		"id",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_NatGateway) Node() alicloudroscdkcore.ConstructNode {
	var returns alicloudroscdkcore.ConstructNode
	_jsii_.Get(
		j,
		"node",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_NatGateway) PhysicalName() *string {
	var returns *string
	_jsii_.Get(
		j,
		"physicalName",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_NatGateway) Props() *NatGatewayProps {
	var returns *NatGatewayProps
	_jsii_.Get(
		j,
		"props",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_NatGateway) Ref() *string {
	var returns *string
	_jsii_.Get(
		j,
		"ref",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_NatGateway) Resource() alicloudroscdkcore.RosResource {
	var returns alicloudroscdkcore.RosResource
	_jsii_.Get(
		j,
		"resource",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_NatGateway) Scope() alicloudroscdkcore.Construct {
	var returns alicloudroscdkcore.Construct
	_jsii_.Get(
		j,
		"scope",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_NatGateway) Stack() alicloudroscdkcore.Stack {
	var returns alicloudroscdkcore.Stack
	_jsii_.Get(
		j,
		"stack",
		&returns,
	)
	return returns
}


// Param scope - scope in which this resource is defined Param id    - scoped id of the resource Param props - resource properties.
func NewNatGateway(scope alicloudroscdkcore.Construct, id *string, props *NatGatewayProps, enableResourcePropertyConstraint *bool) NatGateway {
	_init_.Initialize()

	if err := validateNewNatGatewayParameters(scope, id, props); err != nil {
		panic(err)
	}
	j := jsiiProxy_NatGateway{}

	_jsii_.Create(
		"@alicloud/ros-cdk-vpc.datasource.NatGateway",
		[]interface{}{scope, id, props, enableResourcePropertyConstraint},
		&j,
	)

	return &j
}

// Param scope - scope in which this resource is defined Param id    - scoped id of the resource Param props - resource properties.
func NewNatGateway_Override(n NatGateway, scope alicloudroscdkcore.Construct, id *string, props *NatGatewayProps, enableResourcePropertyConstraint *bool) {
	_init_.Initialize()

	_jsii_.Create(
		"@alicloud/ros-cdk-vpc.datasource.NatGateway",
		[]interface{}{scope, id, props, enableResourcePropertyConstraint},
		n,
	)
}

func (j *jsiiProxy_NatGateway)SetEnableResourcePropertyConstraint(val *bool) {
	if err := j.validateSetEnableResourcePropertyConstraintParameters(val); err != nil {
		panic(err)
	}
	_jsii_.Set(
		j,
		"enableResourcePropertyConstraint",
		val,
	)
}

func (j *jsiiProxy_NatGateway)SetId(val *string) {
	if err := j.validateSetIdParameters(val); err != nil {
		panic(err)
	}
	_jsii_.Set(
		j,
		"id",
		val,
	)
}

func (j *jsiiProxy_NatGateway)SetProps(val *NatGatewayProps) {
	if err := j.validateSetPropsParameters(val); err != nil {
		panic(err)
	}
	_jsii_.Set(
		j,
		"props",
		val,
	)
}

func (j *jsiiProxy_NatGateway)SetResource(val alicloudroscdkcore.RosResource) {
	_jsii_.Set(
		j,
		"resource",
		val,
	)
}

func (j *jsiiProxy_NatGateway)SetScope(val alicloudroscdkcore.Construct) {
	if err := j.validateSetScopeParameters(val); err != nil {
		panic(err)
	}
	_jsii_.Set(
		j,
		"scope",
		val,
	)
}

// Return whether the given object is a Construct.
func NatGateway_IsConstruct(x interface{}) *bool {
	_init_.Initialize()

	if err := validateNatGateway_IsConstructParameters(x); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"@alicloud/ros-cdk-vpc.datasource.NatGateway",
		"isConstruct",
		[]interface{}{x},
		&returns,
	)

	return returns
}

func (n *jsiiProxy_NatGateway) AddCondition(condition alicloudroscdkcore.RosCondition) {
	if err := n.validateAddConditionParameters(condition); err != nil {
		panic(err)
	}
	_jsii_.InvokeVoid(
		n,
		"addCondition",
		[]interface{}{condition},
	)
}

func (n *jsiiProxy_NatGateway) AddCount(count interface{}) {
	if err := n.validateAddCountParameters(count); err != nil {
		panic(err)
	}
	_jsii_.InvokeVoid(
		n,
		"addCount",
		[]interface{}{count},
	)
}

func (n *jsiiProxy_NatGateway) AddDependency(resource alicloudroscdkcore.Resource) {
	if err := n.validateAddDependencyParameters(resource); err != nil {
		panic(err)
	}
	_jsii_.InvokeVoid(
		n,
		"addDependency",
		[]interface{}{resource},
	)
}

func (n *jsiiProxy_NatGateway) AddResourceDesc(desc *string) {
	if err := n.validateAddResourceDescParameters(desc); err != nil {
		panic(err)
	}
	_jsii_.InvokeVoid(
		n,
		"addResourceDesc",
		[]interface{}{desc},
	)
}

func (n *jsiiProxy_NatGateway) ApplyRemovalPolicy(policy alicloudroscdkcore.RemovalPolicy) {
	if err := n.validateApplyRemovalPolicyParameters(policy); err != nil {
		panic(err)
	}
	_jsii_.InvokeVoid(
		n,
		"applyRemovalPolicy",
		[]interface{}{policy},
	)
}

func (n *jsiiProxy_NatGateway) GeneratePhysicalName() *string {
	var returns *string

	_jsii_.Invoke(
		n,
		"generatePhysicalName",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (n *jsiiProxy_NatGateway) GetAtt(name *string) alicloudroscdkcore.IResolvable {
	if err := n.validateGetAttParameters(name); err != nil {
		panic(err)
	}
	var returns alicloudroscdkcore.IResolvable

	_jsii_.Invoke(
		n,
		"getAtt",
		[]interface{}{name},
		&returns,
	)

	return returns
}

func (n *jsiiProxy_NatGateway) OnPrepare() {
	_jsii_.InvokeVoid(
		n,
		"onPrepare",
		nil, // no parameters
	)
}

func (n *jsiiProxy_NatGateway) OnSynthesize(session constructs.ISynthesisSession) {
	if err := n.validateOnSynthesizeParameters(session); err != nil {
		panic(err)
	}
	_jsii_.InvokeVoid(
		n,
		"onSynthesize",
		[]interface{}{session},
	)
}

func (n *jsiiProxy_NatGateway) OnValidate() *[]*string {
	var returns *[]*string

	_jsii_.Invoke(
		n,
		"onValidate",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (n *jsiiProxy_NatGateway) Prepare() {
	_jsii_.InvokeVoid(
		n,
		"prepare",
		nil, // no parameters
	)
}

func (n *jsiiProxy_NatGateway) SetMetadata(key *string, value interface{}) {
	if err := n.validateSetMetadataParameters(key, value); err != nil {
		panic(err)
	}
	_jsii_.InvokeVoid(
		n,
		"setMetadata",
		[]interface{}{key, value},
	)
}

func (n *jsiiProxy_NatGateway) Synthesize(session alicloudroscdkcore.ISynthesisSession) {
	if err := n.validateSynthesizeParameters(session); err != nil {
		panic(err)
	}
	_jsii_.InvokeVoid(
		n,
		"synthesize",
		[]interface{}{session},
	)
}

func (n *jsiiProxy_NatGateway) ToString() *string {
	var returns *string

	_jsii_.Invoke(
		n,
		"toString",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (n *jsiiProxy_NatGateway) Validate() *[]*string {
	var returns *[]*string

	_jsii_.Invoke(
		n,
		"validate",
		nil, // no parameters
		&returns,
	)

	return returns
}

