package datasource

import (
	_init_ "github.com/alibabacloud-go/ros-cdk/alicloudroscdkdrds/jsii"
	_jsii_ "github.com/aws/jsii-runtime-go/runtime"

	"github.com/alibabacloud-go/ros-cdk/alicloudroscdkcore"
	"github.com/alibabacloud-go/ros-cdk/alicloudroscdkdrds/datasource/internal"
	"github.com/aws/constructs-go/constructs/v3"
)

// This class encapsulates and extends the ROS resource type `DATASOURCE::DRDS::DrdsInstance`, which is used to query the information about a PolarDB-X 1.0 instance.
type DrdsInstance interface {
	alicloudroscdkcore.Resource
	IDrdsInstance
	// Attribute CommodityCode: The commodity code of the service.
	AttrCommodityCode() interface{}
	// Attribute CreateTime: The timestamp that indicates when the instance is created.
	AttrCreateTime() interface{}
	// Attribute Description: The description of the instance.
	AttrDescription() interface{}
	// Attribute DrdsInstanceId: The ID of the Drds instance.
	AttrDrdsInstanceId() interface{}
	// Attribute ExpireDate: The timestamp that indicates when the instance expires.
	AttrExpireDate() interface{}
	// Attribute InstanceSeries: The edition of the instance.
	//
	// Valid values:
	// starter: Starter Edition
	// enterprise: Enterprise Edition
	// standard: Standard Edition.
	AttrInstanceSeries() interface{}
	// Attribute InstanceSpec: The specification of the instance.
	AttrInstanceSpec() interface{}
	// Attribute InstRole: The role of the instance.
	//
	// Valid values:
	// MASTER: The instance is a primary instance.
	// SLAVE: The instance is a read-only instance to analyze complex queries.
	// SLAVE_FLOW: The instance is a read-only instance for high-concurrency scenarios.
	AttrInstRole() interface{}
	// Attribute Label: The tag of the instance.
	//
	// Valid values:
	// NORMAL: The instance is a standard instance.
	// HA: The instance is a high-availability (HA) instance.
	// VPC: The instance is a VPC-based instance.
	AttrLabel() interface{}
	// Attribute MachineType: The machine type of the instance.
	//
	// Valid value: ecs.
	AttrMachineType() interface{}
	// Attribute MasterInstanceId: The ID of the primary instance.
	AttrMasterInstanceId() interface{}
	// Attribute MysqlVersion: Engine version.
	AttrMysqlVersion() interface{}
	// Attribute NetworkType: The network type of the instance.
	//
	// Valid values:
	// CLASSIC
	// VPC.
	AttrNetworkType() interface{}
	// Attribute OrderInstanceId: The ID of the purchased instance.
	AttrOrderInstanceId() interface{}
	// Attribute ReadOnlyDBInstanceIds: The IDs of read-only instances that are associated with the instance.
	AttrReadOnlyDbInstanceIds() interface{}
	// Attribute ResourceGroupId: The ID of the resource group to which the instance belongs.
	AttrResourceGroupId() interface{}
	// Attribute StorageType: The storage type of the Drds database.
	//
	// Valid values:
	// RDS
	// PolarDB.
	AttrStorageType() interface{}
	// Attribute Type: The type of the instance.
	//
	// Valid values:
	// PUBLIC: The returned instance is a shared instance.
	// PRIVATE: The returned instance is a dedicated instance.
	AttrType() interface{}
	// Attribute Version: The version of the instance.
	AttrVersion() interface{}
	// Attribute VersionAction: Indicates whether the version of the instance can be upgraded.
	AttrVersionAction() interface{}
	// Attribute Vips: The list of returned virtual IP addresses (VIPs).
	AttrVips() interface{}
	// Attribute VpcCloudInstanceId: The ID of the instance that is deployed in the VPC.
	AttrVpcCloudInstanceId() interface{}
	// Attribute ZoneId: The ID of the zone in which the resource is located.
	AttrZoneId() interface{}
	EnableResourcePropertyConstraint() *bool
	SetEnableResourcePropertyConstraint(val *bool)
	// The environment this resource belongs to.
	//
	// For resources that are created and managed by the CDK
	// (generally, those created by creating new class instances like Role, Bucket, etc.),
	// this is always the same as the environment of the stack they belong to;
	// however, for imported resources
	// (those obtained from static methods like fromRoleArn, fromBucketName, etc.),
	// that might be different than the stack they were imported into.
	Env() *alicloudroscdkcore.ResourceEnvironment
	Id() *string
	SetId(val *string)
	// The construct tree node associated with this construct.
	Node() alicloudroscdkcore.ConstructNode
	// Returns a string-encoded token that resolves to the physical name that should be passed to the ROS resource.
	//
	// This value will resolve to one of the following:
	// - a concrete value (e.g. `"my-awesome-bucket"`)
	// - `undefined`, when a name should be generated by ROS
	// - a concrete name generated automatically during synthesis, in
	//    cross-environment scenarios.
	// Experimental.
	PhysicalName() *string
	Props() *DrdsInstanceProps
	Ref() *string
	Resource() alicloudroscdkcore.RosResource
	SetResource(val alicloudroscdkcore.RosResource)
	Scope() alicloudroscdkcore.Construct
	SetScope(val alicloudroscdkcore.Construct)
	// The stack in which this resource is defined.
	Stack() alicloudroscdkcore.Stack
	AddCondition(condition alicloudroscdkcore.RosCondition)
	AddCount(count interface{})
	AddDependency(resource alicloudroscdkcore.Resource)
	AddResourceDesc(desc *string)
	ApplyRemovalPolicy(policy alicloudroscdkcore.RemovalPolicy)
	FetchCondition() alicloudroscdkcore.RosCondition
	FetchDependency() *[]*string
	FetchResourceDesc() *string
	GeneratePhysicalName() *string
	GetAtt(name *string) alicloudroscdkcore.IResolvable
	// Perform final modifications before synthesis.
	//
	// This method can be implemented by derived constructs in order to perform
	// final changes before synthesis. prepare() will be called after child
	// constructs have been prepared.
	//
	// This is an advanced framework feature. Only use this if you
	// understand the implications.
	OnPrepare()
	// Allows this construct to emit artifacts into the cloud assembly during synthesis.
	//
	// This method is usually implemented by framework-level constructs such as `Stack` and `Asset`
	// as they participate in synthesizing the cloud assembly.
	OnSynthesize(session constructs.ISynthesisSession)
	// Validate the current construct.
	//
	// This method can be implemented by derived constructs in order to perform
	// validation logic. It is called on all constructs before synthesis.
	//
	// Returns: An array of validation error messages, or an empty array if the construct is valid.
	OnValidate() *[]*string
	// Perform final modifications before synthesis.
	//
	// This method can be implemented by derived constructs in order to perform
	// final changes before synthesis. prepare() will be called after child
	// constructs have been prepared.
	//
	// This is an advanced framework feature. Only use this if you
	// understand the implications.
	Prepare()
	SetMetadata(key *string, value interface{})
	// Allows this construct to emit artifacts into the cloud assembly during synthesis.
	//
	// This method is usually implemented by framework-level constructs such as `Stack` and `Asset`
	// as they participate in synthesizing the cloud assembly.
	Synthesize(session alicloudroscdkcore.ISynthesisSession)
	// Returns a string representation of this construct.
	ToString() *string
	// Validate the current construct.
	//
	// This method can be implemented by derived constructs in order to perform
	// validation logic. It is called on all constructs before synthesis.
	//
	// Returns: An array of validation error messages, or an empty array if the construct is valid.
	Validate() *[]*string
}

// The jsii proxy struct for DrdsInstance
type jsiiProxy_DrdsInstance struct {
	internal.Type__alicloudroscdkcoreResource
	jsiiProxy_IDrdsInstance
}

func (j *jsiiProxy_DrdsInstance) AttrCommodityCode() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"attrCommodityCode",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DrdsInstance) AttrCreateTime() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"attrCreateTime",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DrdsInstance) AttrDescription() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"attrDescription",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DrdsInstance) AttrDrdsInstanceId() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"attrDrdsInstanceId",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DrdsInstance) AttrExpireDate() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"attrExpireDate",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DrdsInstance) AttrInstanceSeries() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"attrInstanceSeries",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DrdsInstance) AttrInstanceSpec() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"attrInstanceSpec",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DrdsInstance) AttrInstRole() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"attrInstRole",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DrdsInstance) AttrLabel() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"attrLabel",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DrdsInstance) AttrMachineType() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"attrMachineType",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DrdsInstance) AttrMasterInstanceId() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"attrMasterInstanceId",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DrdsInstance) AttrMysqlVersion() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"attrMysqlVersion",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DrdsInstance) AttrNetworkType() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"attrNetworkType",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DrdsInstance) AttrOrderInstanceId() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"attrOrderInstanceId",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DrdsInstance) AttrReadOnlyDbInstanceIds() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"attrReadOnlyDbInstanceIds",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DrdsInstance) AttrResourceGroupId() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"attrResourceGroupId",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DrdsInstance) AttrStorageType() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"attrStorageType",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DrdsInstance) AttrType() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"attrType",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DrdsInstance) AttrVersion() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"attrVersion",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DrdsInstance) AttrVersionAction() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"attrVersionAction",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DrdsInstance) AttrVips() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"attrVips",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DrdsInstance) AttrVpcCloudInstanceId() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"attrVpcCloudInstanceId",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DrdsInstance) AttrZoneId() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"attrZoneId",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DrdsInstance) EnableResourcePropertyConstraint() *bool {
	var returns *bool
	_jsii_.Get(
		j,
		"enableResourcePropertyConstraint",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DrdsInstance) Env() *alicloudroscdkcore.ResourceEnvironment {
	var returns *alicloudroscdkcore.ResourceEnvironment
	_jsii_.Get(
		j,
		"env",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DrdsInstance) Id() *string {
	var returns *string
	_jsii_.Get(
		j,
		"id",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DrdsInstance) Node() alicloudroscdkcore.ConstructNode {
	var returns alicloudroscdkcore.ConstructNode
	_jsii_.Get(
		j,
		"node",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DrdsInstance) PhysicalName() *string {
	var returns *string
	_jsii_.Get(
		j,
		"physicalName",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DrdsInstance) Props() *DrdsInstanceProps {
	var returns *DrdsInstanceProps
	_jsii_.Get(
		j,
		"props",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DrdsInstance) Ref() *string {
	var returns *string
	_jsii_.Get(
		j,
		"ref",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DrdsInstance) Resource() alicloudroscdkcore.RosResource {
	var returns alicloudroscdkcore.RosResource
	_jsii_.Get(
		j,
		"resource",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DrdsInstance) Scope() alicloudroscdkcore.Construct {
	var returns alicloudroscdkcore.Construct
	_jsii_.Get(
		j,
		"scope",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DrdsInstance) Stack() alicloudroscdkcore.Stack {
	var returns alicloudroscdkcore.Stack
	_jsii_.Get(
		j,
		"stack",
		&returns,
	)
	return returns
}


// Param scope - scope in which this resource is defined Param id    - scoped id of the resource Param props - resource properties.
func NewDrdsInstance(scope alicloudroscdkcore.Construct, id *string, props *DrdsInstanceProps, enableResourcePropertyConstraint *bool) DrdsInstance {
	_init_.Initialize()

	if err := validateNewDrdsInstanceParameters(scope, id, props); err != nil {
		panic(err)
	}
	j := jsiiProxy_DrdsInstance{}

	_jsii_.Create(
		"@alicloud/ros-cdk-drds.datasource.DrdsInstance",
		[]interface{}{scope, id, props, enableResourcePropertyConstraint},
		&j,
	)

	return &j
}

// Param scope - scope in which this resource is defined Param id    - scoped id of the resource Param props - resource properties.
func NewDrdsInstance_Override(d DrdsInstance, scope alicloudroscdkcore.Construct, id *string, props *DrdsInstanceProps, enableResourcePropertyConstraint *bool) {
	_init_.Initialize()

	_jsii_.Create(
		"@alicloud/ros-cdk-drds.datasource.DrdsInstance",
		[]interface{}{scope, id, props, enableResourcePropertyConstraint},
		d,
	)
}

func (j *jsiiProxy_DrdsInstance)SetEnableResourcePropertyConstraint(val *bool) {
	if err := j.validateSetEnableResourcePropertyConstraintParameters(val); err != nil {
		panic(err)
	}
	_jsii_.Set(
		j,
		"enableResourcePropertyConstraint",
		val,
	)
}

func (j *jsiiProxy_DrdsInstance)SetId(val *string) {
	if err := j.validateSetIdParameters(val); err != nil {
		panic(err)
	}
	_jsii_.Set(
		j,
		"id",
		val,
	)
}

func (j *jsiiProxy_DrdsInstance)SetResource(val alicloudroscdkcore.RosResource) {
	_jsii_.Set(
		j,
		"resource",
		val,
	)
}

func (j *jsiiProxy_DrdsInstance)SetScope(val alicloudroscdkcore.Construct) {
	if err := j.validateSetScopeParameters(val); err != nil {
		panic(err)
	}
	_jsii_.Set(
		j,
		"scope",
		val,
	)
}

// Return whether the given object is a Construct.
func DrdsInstance_IsConstruct(x interface{}) *bool {
	_init_.Initialize()

	if err := validateDrdsInstance_IsConstructParameters(x); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"@alicloud/ros-cdk-drds.datasource.DrdsInstance",
		"isConstruct",
		[]interface{}{x},
		&returns,
	)

	return returns
}

func (d *jsiiProxy_DrdsInstance) AddCondition(condition alicloudroscdkcore.RosCondition) {
	if err := d.validateAddConditionParameters(condition); err != nil {
		panic(err)
	}
	_jsii_.InvokeVoid(
		d,
		"addCondition",
		[]interface{}{condition},
	)
}

func (d *jsiiProxy_DrdsInstance) AddCount(count interface{}) {
	if err := d.validateAddCountParameters(count); err != nil {
		panic(err)
	}
	_jsii_.InvokeVoid(
		d,
		"addCount",
		[]interface{}{count},
	)
}

func (d *jsiiProxy_DrdsInstance) AddDependency(resource alicloudroscdkcore.Resource) {
	if err := d.validateAddDependencyParameters(resource); err != nil {
		panic(err)
	}
	_jsii_.InvokeVoid(
		d,
		"addDependency",
		[]interface{}{resource},
	)
}

func (d *jsiiProxy_DrdsInstance) AddResourceDesc(desc *string) {
	if err := d.validateAddResourceDescParameters(desc); err != nil {
		panic(err)
	}
	_jsii_.InvokeVoid(
		d,
		"addResourceDesc",
		[]interface{}{desc},
	)
}

func (d *jsiiProxy_DrdsInstance) ApplyRemovalPolicy(policy alicloudroscdkcore.RemovalPolicy) {
	if err := d.validateApplyRemovalPolicyParameters(policy); err != nil {
		panic(err)
	}
	_jsii_.InvokeVoid(
		d,
		"applyRemovalPolicy",
		[]interface{}{policy},
	)
}

func (d *jsiiProxy_DrdsInstance) FetchCondition() alicloudroscdkcore.RosCondition {
	var returns alicloudroscdkcore.RosCondition

	_jsii_.Invoke(
		d,
		"fetchCondition",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (d *jsiiProxy_DrdsInstance) FetchDependency() *[]*string {
	var returns *[]*string

	_jsii_.Invoke(
		d,
		"fetchDependency",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (d *jsiiProxy_DrdsInstance) FetchResourceDesc() *string {
	var returns *string

	_jsii_.Invoke(
		d,
		"fetchResourceDesc",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (d *jsiiProxy_DrdsInstance) GeneratePhysicalName() *string {
	var returns *string

	_jsii_.Invoke(
		d,
		"generatePhysicalName",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (d *jsiiProxy_DrdsInstance) GetAtt(name *string) alicloudroscdkcore.IResolvable {
	if err := d.validateGetAttParameters(name); err != nil {
		panic(err)
	}
	var returns alicloudroscdkcore.IResolvable

	_jsii_.Invoke(
		d,
		"getAtt",
		[]interface{}{name},
		&returns,
	)

	return returns
}

func (d *jsiiProxy_DrdsInstance) OnPrepare() {
	_jsii_.InvokeVoid(
		d,
		"onPrepare",
		nil, // no parameters
	)
}

func (d *jsiiProxy_DrdsInstance) OnSynthesize(session constructs.ISynthesisSession) {
	if err := d.validateOnSynthesizeParameters(session); err != nil {
		panic(err)
	}
	_jsii_.InvokeVoid(
		d,
		"onSynthesize",
		[]interface{}{session},
	)
}

func (d *jsiiProxy_DrdsInstance) OnValidate() *[]*string {
	var returns *[]*string

	_jsii_.Invoke(
		d,
		"onValidate",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (d *jsiiProxy_DrdsInstance) Prepare() {
	_jsii_.InvokeVoid(
		d,
		"prepare",
		nil, // no parameters
	)
}

func (d *jsiiProxy_DrdsInstance) SetMetadata(key *string, value interface{}) {
	if err := d.validateSetMetadataParameters(key, value); err != nil {
		panic(err)
	}
	_jsii_.InvokeVoid(
		d,
		"setMetadata",
		[]interface{}{key, value},
	)
}

func (d *jsiiProxy_DrdsInstance) Synthesize(session alicloudroscdkcore.ISynthesisSession) {
	if err := d.validateSynthesizeParameters(session); err != nil {
		panic(err)
	}
	_jsii_.InvokeVoid(
		d,
		"synthesize",
		[]interface{}{session},
	)
}

func (d *jsiiProxy_DrdsInstance) ToString() *string {
	var returns *string

	_jsii_.Invoke(
		d,
		"toString",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (d *jsiiProxy_DrdsInstance) Validate() *[]*string {
	var returns *[]*string

	_jsii_.Invoke(
		d,
		"validate",
		nil, // no parameters
		&returns,
	)

	return returns
}

