package datasource

import (
	_init_ "github.com/alibabacloud-go/ros-cdk/alicloudroscdkarms/jsii"
	_jsii_ "github.com/aws/jsii-runtime-go/runtime"

	"github.com/alibabacloud-go/ros-cdk/alicloudroscdkarms/datasource/internal"
	"github.com/alibabacloud-go/ros-cdk/alicloudroscdkcore"
	"github.com/aws/constructs-go/constructs/v3"
)

// This class encapsulates and extends the ROS resource type `DATASOURCE::ARMS::PrometheusUrl`, which is used to query all URLs of a cluster, including the URLs for remote read, remote write, Pushgateway, and Grafana.
type PrometheusUrl interface {
	alicloudroscdkcore.Resource
	IPrometheusUrl
	// Attribute ClusterId: Cluster ID.
	AttrClusterId() interface{}
	// Attribute ClusterType: Cluster type.
	AttrClusterType() interface{}
	// Attribute GrafanaUrl: Internal HTTP API URL (Grafana read URL).
	AttrGrafanaUrl() interface{}
	// Attribute InternetGrafanaUrl: Internet HTTP API URL (Grafana read URL).
	AttrInternetGrafanaUrl() interface{}
	// Attribute InternetOpenTelemetryUrl: Internet OpenTelemetry URL.
	AttrInternetOpenTelemetryUrl() interface{}
	// Attribute InternetPushGatewayUrl: Internet push gateway URL.
	AttrInternetPushGatewayUrl() interface{}
	// Attribute InternetRemoteReadUrl: Internet remote read URL.
	AttrInternetRemoteReadUrl() interface{}
	// Attribute InternetRemoteWriteUrl: Internet remote write URL.
	AttrInternetRemoteWriteUrl() interface{}
	// Attribute OpenTelemetryUrl: Internal OpenTelemetry URL.
	AttrOpenTelemetryUrl() interface{}
	// Attribute PushGatewayUrl: Internal push gateway URL.
	AttrPushGatewayUrl() interface{}
	// Attribute RemoteReadUrl: Internal remote read URL.
	AttrRemoteReadUrl() interface{}
	// Attribute RemoteWriteUrl: Internal remote write URL.
	AttrRemoteWriteUrl() interface{}
	// Attribute Token: The token for Grafana read URL.
	AttrToken() interface{}
	EnableResourcePropertyConstraint() *bool
	SetEnableResourcePropertyConstraint(val *bool)
	// The environment this resource belongs to.
	//
	// For resources that are created and managed by the CDK
	// (generally, those created by creating new class instances like Role, Bucket, etc.),
	// this is always the same as the environment of the stack they belong to;
	// however, for imported resources
	// (those obtained from static methods like fromRoleArn, fromBucketName, etc.),
	// that might be different than the stack they were imported into.
	Env() *alicloudroscdkcore.ResourceEnvironment
	Id() *string
	SetId(val *string)
	// The construct tree node associated with this construct.
	Node() alicloudroscdkcore.ConstructNode
	// Returns a string-encoded token that resolves to the physical name that should be passed to the ROS resource.
	//
	// This value will resolve to one of the following:
	// - a concrete value (e.g. `"my-awesome-bucket"`)
	// - `undefined`, when a name should be generated by ROS
	// - a concrete name generated automatically during synthesis, in
	//    cross-environment scenarios.
	// Experimental.
	PhysicalName() *string
	Props() *PrometheusUrlProps
	Ref() *string
	Resource() alicloudroscdkcore.RosResource
	SetResource(val alicloudroscdkcore.RosResource)
	Scope() alicloudroscdkcore.Construct
	SetScope(val alicloudroscdkcore.Construct)
	// The stack in which this resource is defined.
	Stack() alicloudroscdkcore.Stack
	AddCondition(condition alicloudroscdkcore.RosCondition)
	AddCount(count interface{})
	AddDependency(resource alicloudroscdkcore.Resource)
	AddResourceDesc(desc *string)
	ApplyRemovalPolicy(policy alicloudroscdkcore.RemovalPolicy)
	FetchCondition() alicloudroscdkcore.RosCondition
	FetchDependency() *[]*string
	FetchResourceDesc() *string
	GeneratePhysicalName() *string
	GetAtt(name *string) alicloudroscdkcore.IResolvable
	// Perform final modifications before synthesis.
	//
	// This method can be implemented by derived constructs in order to perform
	// final changes before synthesis. prepare() will be called after child
	// constructs have been prepared.
	//
	// This is an advanced framework feature. Only use this if you
	// understand the implications.
	OnPrepare()
	// Allows this construct to emit artifacts into the cloud assembly during synthesis.
	//
	// This method is usually implemented by framework-level constructs such as `Stack` and `Asset`
	// as they participate in synthesizing the cloud assembly.
	OnSynthesize(session constructs.ISynthesisSession)
	// Validate the current construct.
	//
	// This method can be implemented by derived constructs in order to perform
	// validation logic. It is called on all constructs before synthesis.
	//
	// Returns: An array of validation error messages, or an empty array if the construct is valid.
	OnValidate() *[]*string
	// Perform final modifications before synthesis.
	//
	// This method can be implemented by derived constructs in order to perform
	// final changes before synthesis. prepare() will be called after child
	// constructs have been prepared.
	//
	// This is an advanced framework feature. Only use this if you
	// understand the implications.
	Prepare()
	SetMetadata(key *string, value interface{})
	// Allows this construct to emit artifacts into the cloud assembly during synthesis.
	//
	// This method is usually implemented by framework-level constructs such as `Stack` and `Asset`
	// as they participate in synthesizing the cloud assembly.
	Synthesize(session alicloudroscdkcore.ISynthesisSession)
	// Returns a string representation of this construct.
	ToString() *string
	// Validate the current construct.
	//
	// This method can be implemented by derived constructs in order to perform
	// validation logic. It is called on all constructs before synthesis.
	//
	// Returns: An array of validation error messages, or an empty array if the construct is valid.
	Validate() *[]*string
}

// The jsii proxy struct for PrometheusUrl
type jsiiProxy_PrometheusUrl struct {
	internal.Type__alicloudroscdkcoreResource
	jsiiProxy_IPrometheusUrl
}

func (j *jsiiProxy_PrometheusUrl) AttrClusterId() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"attrClusterId",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_PrometheusUrl) AttrClusterType() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"attrClusterType",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_PrometheusUrl) AttrGrafanaUrl() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"attrGrafanaUrl",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_PrometheusUrl) AttrInternetGrafanaUrl() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"attrInternetGrafanaUrl",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_PrometheusUrl) AttrInternetOpenTelemetryUrl() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"attrInternetOpenTelemetryUrl",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_PrometheusUrl) AttrInternetPushGatewayUrl() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"attrInternetPushGatewayUrl",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_PrometheusUrl) AttrInternetRemoteReadUrl() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"attrInternetRemoteReadUrl",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_PrometheusUrl) AttrInternetRemoteWriteUrl() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"attrInternetRemoteWriteUrl",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_PrometheusUrl) AttrOpenTelemetryUrl() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"attrOpenTelemetryUrl",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_PrometheusUrl) AttrPushGatewayUrl() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"attrPushGatewayUrl",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_PrometheusUrl) AttrRemoteReadUrl() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"attrRemoteReadUrl",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_PrometheusUrl) AttrRemoteWriteUrl() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"attrRemoteWriteUrl",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_PrometheusUrl) AttrToken() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"attrToken",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_PrometheusUrl) EnableResourcePropertyConstraint() *bool {
	var returns *bool
	_jsii_.Get(
		j,
		"enableResourcePropertyConstraint",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_PrometheusUrl) Env() *alicloudroscdkcore.ResourceEnvironment {
	var returns *alicloudroscdkcore.ResourceEnvironment
	_jsii_.Get(
		j,
		"env",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_PrometheusUrl) Id() *string {
	var returns *string
	_jsii_.Get(
		j,
		"id",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_PrometheusUrl) Node() alicloudroscdkcore.ConstructNode {
	var returns alicloudroscdkcore.ConstructNode
	_jsii_.Get(
		j,
		"node",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_PrometheusUrl) PhysicalName() *string {
	var returns *string
	_jsii_.Get(
		j,
		"physicalName",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_PrometheusUrl) Props() *PrometheusUrlProps {
	var returns *PrometheusUrlProps
	_jsii_.Get(
		j,
		"props",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_PrometheusUrl) Ref() *string {
	var returns *string
	_jsii_.Get(
		j,
		"ref",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_PrometheusUrl) Resource() alicloudroscdkcore.RosResource {
	var returns alicloudroscdkcore.RosResource
	_jsii_.Get(
		j,
		"resource",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_PrometheusUrl) Scope() alicloudroscdkcore.Construct {
	var returns alicloudroscdkcore.Construct
	_jsii_.Get(
		j,
		"scope",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_PrometheusUrl) Stack() alicloudroscdkcore.Stack {
	var returns alicloudroscdkcore.Stack
	_jsii_.Get(
		j,
		"stack",
		&returns,
	)
	return returns
}


// Param scope - scope in which this resource is defined Param id    - scoped id of the resource Param props - resource properties.
func NewPrometheusUrl(scope alicloudroscdkcore.Construct, id *string, props *PrometheusUrlProps, enableResourcePropertyConstraint *bool) PrometheusUrl {
	_init_.Initialize()

	if err := validateNewPrometheusUrlParameters(scope, id, props); err != nil {
		panic(err)
	}
	j := jsiiProxy_PrometheusUrl{}

	_jsii_.Create(
		"@alicloud/ros-cdk-arms.datasource.PrometheusUrl",
		[]interface{}{scope, id, props, enableResourcePropertyConstraint},
		&j,
	)

	return &j
}

// Param scope - scope in which this resource is defined Param id    - scoped id of the resource Param props - resource properties.
func NewPrometheusUrl_Override(p PrometheusUrl, scope alicloudroscdkcore.Construct, id *string, props *PrometheusUrlProps, enableResourcePropertyConstraint *bool) {
	_init_.Initialize()

	_jsii_.Create(
		"@alicloud/ros-cdk-arms.datasource.PrometheusUrl",
		[]interface{}{scope, id, props, enableResourcePropertyConstraint},
		p,
	)
}

func (j *jsiiProxy_PrometheusUrl)SetEnableResourcePropertyConstraint(val *bool) {
	if err := j.validateSetEnableResourcePropertyConstraintParameters(val); err != nil {
		panic(err)
	}
	_jsii_.Set(
		j,
		"enableResourcePropertyConstraint",
		val,
	)
}

func (j *jsiiProxy_PrometheusUrl)SetId(val *string) {
	if err := j.validateSetIdParameters(val); err != nil {
		panic(err)
	}
	_jsii_.Set(
		j,
		"id",
		val,
	)
}

func (j *jsiiProxy_PrometheusUrl)SetResource(val alicloudroscdkcore.RosResource) {
	_jsii_.Set(
		j,
		"resource",
		val,
	)
}

func (j *jsiiProxy_PrometheusUrl)SetScope(val alicloudroscdkcore.Construct) {
	if err := j.validateSetScopeParameters(val); err != nil {
		panic(err)
	}
	_jsii_.Set(
		j,
		"scope",
		val,
	)
}

// Return whether the given object is a Construct.
func PrometheusUrl_IsConstruct(x interface{}) *bool {
	_init_.Initialize()

	if err := validatePrometheusUrl_IsConstructParameters(x); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"@alicloud/ros-cdk-arms.datasource.PrometheusUrl",
		"isConstruct",
		[]interface{}{x},
		&returns,
	)

	return returns
}

func (p *jsiiProxy_PrometheusUrl) AddCondition(condition alicloudroscdkcore.RosCondition) {
	if err := p.validateAddConditionParameters(condition); err != nil {
		panic(err)
	}
	_jsii_.InvokeVoid(
		p,
		"addCondition",
		[]interface{}{condition},
	)
}

func (p *jsiiProxy_PrometheusUrl) AddCount(count interface{}) {
	if err := p.validateAddCountParameters(count); err != nil {
		panic(err)
	}
	_jsii_.InvokeVoid(
		p,
		"addCount",
		[]interface{}{count},
	)
}

func (p *jsiiProxy_PrometheusUrl) AddDependency(resource alicloudroscdkcore.Resource) {
	if err := p.validateAddDependencyParameters(resource); err != nil {
		panic(err)
	}
	_jsii_.InvokeVoid(
		p,
		"addDependency",
		[]interface{}{resource},
	)
}

func (p *jsiiProxy_PrometheusUrl) AddResourceDesc(desc *string) {
	if err := p.validateAddResourceDescParameters(desc); err != nil {
		panic(err)
	}
	_jsii_.InvokeVoid(
		p,
		"addResourceDesc",
		[]interface{}{desc},
	)
}

func (p *jsiiProxy_PrometheusUrl) ApplyRemovalPolicy(policy alicloudroscdkcore.RemovalPolicy) {
	if err := p.validateApplyRemovalPolicyParameters(policy); err != nil {
		panic(err)
	}
	_jsii_.InvokeVoid(
		p,
		"applyRemovalPolicy",
		[]interface{}{policy},
	)
}

func (p *jsiiProxy_PrometheusUrl) FetchCondition() alicloudroscdkcore.RosCondition {
	var returns alicloudroscdkcore.RosCondition

	_jsii_.Invoke(
		p,
		"fetchCondition",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (p *jsiiProxy_PrometheusUrl) FetchDependency() *[]*string {
	var returns *[]*string

	_jsii_.Invoke(
		p,
		"fetchDependency",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (p *jsiiProxy_PrometheusUrl) FetchResourceDesc() *string {
	var returns *string

	_jsii_.Invoke(
		p,
		"fetchResourceDesc",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (p *jsiiProxy_PrometheusUrl) GeneratePhysicalName() *string {
	var returns *string

	_jsii_.Invoke(
		p,
		"generatePhysicalName",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (p *jsiiProxy_PrometheusUrl) GetAtt(name *string) alicloudroscdkcore.IResolvable {
	if err := p.validateGetAttParameters(name); err != nil {
		panic(err)
	}
	var returns alicloudroscdkcore.IResolvable

	_jsii_.Invoke(
		p,
		"getAtt",
		[]interface{}{name},
		&returns,
	)

	return returns
}

func (p *jsiiProxy_PrometheusUrl) OnPrepare() {
	_jsii_.InvokeVoid(
		p,
		"onPrepare",
		nil, // no parameters
	)
}

func (p *jsiiProxy_PrometheusUrl) OnSynthesize(session constructs.ISynthesisSession) {
	if err := p.validateOnSynthesizeParameters(session); err != nil {
		panic(err)
	}
	_jsii_.InvokeVoid(
		p,
		"onSynthesize",
		[]interface{}{session},
	)
}

func (p *jsiiProxy_PrometheusUrl) OnValidate() *[]*string {
	var returns *[]*string

	_jsii_.Invoke(
		p,
		"onValidate",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (p *jsiiProxy_PrometheusUrl) Prepare() {
	_jsii_.InvokeVoid(
		p,
		"prepare",
		nil, // no parameters
	)
}

func (p *jsiiProxy_PrometheusUrl) SetMetadata(key *string, value interface{}) {
	if err := p.validateSetMetadataParameters(key, value); err != nil {
		panic(err)
	}
	_jsii_.InvokeVoid(
		p,
		"setMetadata",
		[]interface{}{key, value},
	)
}

func (p *jsiiProxy_PrometheusUrl) Synthesize(session alicloudroscdkcore.ISynthesisSession) {
	if err := p.validateSynthesizeParameters(session); err != nil {
		panic(err)
	}
	_jsii_.InvokeVoid(
		p,
		"synthesize",
		[]interface{}{session},
	)
}

func (p *jsiiProxy_PrometheusUrl) ToString() *string {
	var returns *string

	_jsii_.Invoke(
		p,
		"toString",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (p *jsiiProxy_PrometheusUrl) Validate() *[]*string {
	var returns *[]*string

	_jsii_.Invoke(
		p,
		"validate",
		nil, // no parameters
		&returns,
	)

	return returns
}

