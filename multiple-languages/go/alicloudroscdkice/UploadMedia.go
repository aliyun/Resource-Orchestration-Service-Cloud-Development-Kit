package alicloudroscdkice

import (
	_init_ "github.com/alibabacloud-go/ros-cdk/alicloudroscdkice/jsii"
	_jsii_ "github.com/aws/jsii-runtime-go/runtime"

	"github.com/alibabacloud-go/ros-cdk/alicloudroscdkcore"
	"github.com/alibabacloud-go/ros-cdk/alicloudroscdkice/internal"
	"github.com/aws/constructs-go/constructs/v3"
)

// This class encapsulates and extends the ROS resource type `ALIYUN::ICE::UploadMedia`, which is used to query the upload address and credential of a media asset.
type UploadMedia interface {
	alicloudroscdkcore.Resource
	IUploadMedia
	// Attribute FileURL: The OSS URL of the file.
	//
	// The URL does not contain the information used for authentication.
	AttrFileUrl() interface{}
	// Attribute MediaId: The ID of the media asset.
	AttrMediaId() interface{}
	// Attribute MediaURL: The URL of the media asset.
	//
	// Note If a domain name for Alibaba Cloud CDN (CDN) is specified, a CDN URL is returned. Otherwise, an OSS URL is returned. If the HTTP status code 403 is returned when you access the URL from your browser, the URL authentication feature of ApsaraVideo VOD is enabled. To resolve this issue, disable URL authentication or generate an authentication signature.
	AttrMediaUrl() interface{}
	// Attribute UploadAddress: The upload URL.
	//
	// Note The returned upload URL is a Base64-encoded URL. You must decode the Base64-encoded upload URL before you use an SDK or call an API operation to upload media files. You need to parse UploadAddress only if you use OSS SDK or call an OSS API operation to upload media files.
	AttrUploadAddress() interface{}
	// Attribute UploadAuth: The upload credential.
	//
	// Note The returned upload credential is a Base64-encoded value. You must decode the Base64-encoded upload URL before you use an SDK or call an API operation to upload media files. You need to parse UploadAuth only if you use OSS SDK or call an OSS API operation to upload media files.
	AttrUploadAuth() interface{}
	EnableResourcePropertyConstraint() *bool
	SetEnableResourcePropertyConstraint(val *bool)
	// The environment this resource belongs to.
	//
	// For resources that are created and managed by the CDK
	// (generally, those created by creating new class instances like Role, Bucket, etc.),
	// this is always the same as the environment of the stack they belong to;
	// however, for imported resources
	// (those obtained from static methods like fromRoleArn, fromBucketName, etc.),
	// that might be different than the stack they were imported into.
	Env() alicloudroscdkcore.IResourceEnvironment
	Id() *string
	SetId(val *string)
	// The construct tree node associated with this construct.
	Node() alicloudroscdkcore.ConstructNode
	// Returns a string-encoded token that resolves to the physical name that should be passed to the ROS resource.
	//
	// This value will resolve to one of the following:
	// - a concrete value (e.g. `"my-awesome-bucket"`)
	// - `undefined`, when a name should be generated by ROS
	// - a concrete name generated automatically during synthesis, in
	//    cross-environment scenarios.
	// Experimental.
	PhysicalName() *string
	Props() *UploadMediaProps
	Ref() *string
	Resource() alicloudroscdkcore.RosResource
	SetResource(val alicloudroscdkcore.RosResource)
	Scope() alicloudroscdkcore.Construct
	SetScope(val alicloudroscdkcore.Construct)
	// The stack in which this resource is defined.
	Stack() alicloudroscdkcore.Stack
	AddCondition(condition alicloudroscdkcore.RosCondition)
	AddCount(count interface{})
	AddDependency(resource alicloudroscdkcore.Resource)
	AddResourceDesc(desc *string)
	ApplyRemovalPolicy(policy alicloudroscdkcore.RemovalPolicy)
	FetchCondition() alicloudroscdkcore.RosCondition
	FetchDependency() *[]*string
	FetchResourceDesc() *string
	GeneratePhysicalName() *string
	GetAtt(name *string) alicloudroscdkcore.IResolvable
	// Perform final modifications before synthesis.
	//
	// This method can be implemented by derived constructs in order to perform
	// final changes before synthesis. prepare() will be called after child
	// constructs have been prepared.
	//
	// This is an advanced framework feature. Only use this if you
	// understand the implications.
	OnPrepare()
	// Allows this construct to emit artifacts into the cloud assembly during synthesis.
	//
	// This method is usually implemented by framework-level constructs such as `Stack` and `Asset`
	// as they participate in synthesizing the cloud assembly.
	OnSynthesize(session constructs.ISynthesisSession)
	// Validate the current construct.
	//
	// This method can be implemented by derived constructs in order to perform
	// validation logic. It is called on all constructs before synthesis.
	//
	// Returns: An array of validation error messages, or an empty array if the construct is valid.
	OnValidate() *[]*string
	// Perform final modifications before synthesis.
	//
	// This method can be implemented by derived constructs in order to perform
	// final changes before synthesis. prepare() will be called after child
	// constructs have been prepared.
	//
	// This is an advanced framework feature. Only use this if you
	// understand the implications.
	Prepare()
	SetMetadata(key *string, value interface{})
	// Allows this construct to emit artifacts into the cloud assembly during synthesis.
	//
	// This method is usually implemented by framework-level constructs such as `Stack` and `Asset`
	// as they participate in synthesizing the cloud assembly.
	Synthesize(session alicloudroscdkcore.ISynthesisSession)
	// Returns a string representation of this construct.
	ToString() *string
	// Validate the current construct.
	//
	// This method can be implemented by derived constructs in order to perform
	// validation logic. It is called on all constructs before synthesis.
	//
	// Returns: An array of validation error messages, or an empty array if the construct is valid.
	Validate() *[]*string
}

// The jsii proxy struct for UploadMedia
type jsiiProxy_UploadMedia struct {
	internal.Type__alicloudroscdkcoreResource
	jsiiProxy_IUploadMedia
}

func (j *jsiiProxy_UploadMedia) AttrFileUrl() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"attrFileUrl",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_UploadMedia) AttrMediaId() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"attrMediaId",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_UploadMedia) AttrMediaUrl() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"attrMediaUrl",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_UploadMedia) AttrUploadAddress() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"attrUploadAddress",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_UploadMedia) AttrUploadAuth() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"attrUploadAuth",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_UploadMedia) EnableResourcePropertyConstraint() *bool {
	var returns *bool
	_jsii_.Get(
		j,
		"enableResourcePropertyConstraint",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_UploadMedia) Env() alicloudroscdkcore.IResourceEnvironment {
	var returns alicloudroscdkcore.IResourceEnvironment
	_jsii_.Get(
		j,
		"env",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_UploadMedia) Id() *string {
	var returns *string
	_jsii_.Get(
		j,
		"id",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_UploadMedia) Node() alicloudroscdkcore.ConstructNode {
	var returns alicloudroscdkcore.ConstructNode
	_jsii_.Get(
		j,
		"node",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_UploadMedia) PhysicalName() *string {
	var returns *string
	_jsii_.Get(
		j,
		"physicalName",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_UploadMedia) Props() *UploadMediaProps {
	var returns *UploadMediaProps
	_jsii_.Get(
		j,
		"props",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_UploadMedia) Ref() *string {
	var returns *string
	_jsii_.Get(
		j,
		"ref",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_UploadMedia) Resource() alicloudroscdkcore.RosResource {
	var returns alicloudroscdkcore.RosResource
	_jsii_.Get(
		j,
		"resource",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_UploadMedia) Scope() alicloudroscdkcore.Construct {
	var returns alicloudroscdkcore.Construct
	_jsii_.Get(
		j,
		"scope",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_UploadMedia) Stack() alicloudroscdkcore.Stack {
	var returns alicloudroscdkcore.Stack
	_jsii_.Get(
		j,
		"stack",
		&returns,
	)
	return returns
}


// Param scope - scope in which this resource is defined Param id    - scoped id of the resource Param props - resource properties.
func NewUploadMedia(scope alicloudroscdkcore.Construct, id *string, props *UploadMediaProps, enableResourcePropertyConstraint *bool) UploadMedia {
	_init_.Initialize()

	if err := validateNewUploadMediaParameters(scope, id, props); err != nil {
		panic(err)
	}
	j := jsiiProxy_UploadMedia{}

	_jsii_.Create(
		"@alicloud/ros-cdk-ice.UploadMedia",
		[]interface{}{scope, id, props, enableResourcePropertyConstraint},
		&j,
	)

	return &j
}

// Param scope - scope in which this resource is defined Param id    - scoped id of the resource Param props - resource properties.
func NewUploadMedia_Override(u UploadMedia, scope alicloudroscdkcore.Construct, id *string, props *UploadMediaProps, enableResourcePropertyConstraint *bool) {
	_init_.Initialize()

	_jsii_.Create(
		"@alicloud/ros-cdk-ice.UploadMedia",
		[]interface{}{scope, id, props, enableResourcePropertyConstraint},
		u,
	)
}

func (j *jsiiProxy_UploadMedia)SetEnableResourcePropertyConstraint(val *bool) {
	if err := j.validateSetEnableResourcePropertyConstraintParameters(val); err != nil {
		panic(err)
	}
	_jsii_.Set(
		j,
		"enableResourcePropertyConstraint",
		val,
	)
}

func (j *jsiiProxy_UploadMedia)SetId(val *string) {
	if err := j.validateSetIdParameters(val); err != nil {
		panic(err)
	}
	_jsii_.Set(
		j,
		"id",
		val,
	)
}

func (j *jsiiProxy_UploadMedia)SetResource(val alicloudroscdkcore.RosResource) {
	_jsii_.Set(
		j,
		"resource",
		val,
	)
}

func (j *jsiiProxy_UploadMedia)SetScope(val alicloudroscdkcore.Construct) {
	if err := j.validateSetScopeParameters(val); err != nil {
		panic(err)
	}
	_jsii_.Set(
		j,
		"scope",
		val,
	)
}

// Return whether the given object is a Construct.
func UploadMedia_IsConstruct(x interface{}) *bool {
	_init_.Initialize()

	if err := validateUploadMedia_IsConstructParameters(x); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"@alicloud/ros-cdk-ice.UploadMedia",
		"isConstruct",
		[]interface{}{x},
		&returns,
	)

	return returns
}

func (u *jsiiProxy_UploadMedia) AddCondition(condition alicloudroscdkcore.RosCondition) {
	if err := u.validateAddConditionParameters(condition); err != nil {
		panic(err)
	}
	_jsii_.InvokeVoid(
		u,
		"addCondition",
		[]interface{}{condition},
	)
}

func (u *jsiiProxy_UploadMedia) AddCount(count interface{}) {
	if err := u.validateAddCountParameters(count); err != nil {
		panic(err)
	}
	_jsii_.InvokeVoid(
		u,
		"addCount",
		[]interface{}{count},
	)
}

func (u *jsiiProxy_UploadMedia) AddDependency(resource alicloudroscdkcore.Resource) {
	if err := u.validateAddDependencyParameters(resource); err != nil {
		panic(err)
	}
	_jsii_.InvokeVoid(
		u,
		"addDependency",
		[]interface{}{resource},
	)
}

func (u *jsiiProxy_UploadMedia) AddResourceDesc(desc *string) {
	if err := u.validateAddResourceDescParameters(desc); err != nil {
		panic(err)
	}
	_jsii_.InvokeVoid(
		u,
		"addResourceDesc",
		[]interface{}{desc},
	)
}

func (u *jsiiProxy_UploadMedia) ApplyRemovalPolicy(policy alicloudroscdkcore.RemovalPolicy) {
	if err := u.validateApplyRemovalPolicyParameters(policy); err != nil {
		panic(err)
	}
	_jsii_.InvokeVoid(
		u,
		"applyRemovalPolicy",
		[]interface{}{policy},
	)
}

func (u *jsiiProxy_UploadMedia) FetchCondition() alicloudroscdkcore.RosCondition {
	var returns alicloudroscdkcore.RosCondition

	_jsii_.Invoke(
		u,
		"fetchCondition",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (u *jsiiProxy_UploadMedia) FetchDependency() *[]*string {
	var returns *[]*string

	_jsii_.Invoke(
		u,
		"fetchDependency",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (u *jsiiProxy_UploadMedia) FetchResourceDesc() *string {
	var returns *string

	_jsii_.Invoke(
		u,
		"fetchResourceDesc",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (u *jsiiProxy_UploadMedia) GeneratePhysicalName() *string {
	var returns *string

	_jsii_.Invoke(
		u,
		"generatePhysicalName",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (u *jsiiProxy_UploadMedia) GetAtt(name *string) alicloudroscdkcore.IResolvable {
	if err := u.validateGetAttParameters(name); err != nil {
		panic(err)
	}
	var returns alicloudroscdkcore.IResolvable

	_jsii_.Invoke(
		u,
		"getAtt",
		[]interface{}{name},
		&returns,
	)

	return returns
}

func (u *jsiiProxy_UploadMedia) OnPrepare() {
	_jsii_.InvokeVoid(
		u,
		"onPrepare",
		nil, // no parameters
	)
}

func (u *jsiiProxy_UploadMedia) OnSynthesize(session constructs.ISynthesisSession) {
	if err := u.validateOnSynthesizeParameters(session); err != nil {
		panic(err)
	}
	_jsii_.InvokeVoid(
		u,
		"onSynthesize",
		[]interface{}{session},
	)
}

func (u *jsiiProxy_UploadMedia) OnValidate() *[]*string {
	var returns *[]*string

	_jsii_.Invoke(
		u,
		"onValidate",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (u *jsiiProxy_UploadMedia) Prepare() {
	_jsii_.InvokeVoid(
		u,
		"prepare",
		nil, // no parameters
	)
}

func (u *jsiiProxy_UploadMedia) SetMetadata(key *string, value interface{}) {
	if err := u.validateSetMetadataParameters(key, value); err != nil {
		panic(err)
	}
	_jsii_.InvokeVoid(
		u,
		"setMetadata",
		[]interface{}{key, value},
	)
}

func (u *jsiiProxy_UploadMedia) Synthesize(session alicloudroscdkcore.ISynthesisSession) {
	if err := u.validateSynthesizeParameters(session); err != nil {
		panic(err)
	}
	_jsii_.InvokeVoid(
		u,
		"synthesize",
		[]interface{}{session},
	)
}

func (u *jsiiProxy_UploadMedia) ToString() *string {
	var returns *string

	_jsii_.Invoke(
		u,
		"toString",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (u *jsiiProxy_UploadMedia) Validate() *[]*string {
	var returns *[]*string

	_jsii_.Invoke(
		u,
		"validate",
		nil, // no parameters
		&returns,
	)

	return returns
}

