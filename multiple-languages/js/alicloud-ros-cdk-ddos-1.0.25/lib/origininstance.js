"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OriginInstance = exports.OriginInstanceProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ddos_generated_1 = require("./ddos.generated");
Object.defineProperty(exports, "OriginInstanceProperty", { enumerable: true, get: function () { return ddos_generated_1.RosOriginInstance; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::DDoS::OriginInstance`, which is used to create an Anti-DDoS Origin instance.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosOriginInstance`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-ddos-origininstance
 */
class OriginInstance extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosOriginInstance = new ddos_generated_1.RosOriginInstance(this, id, {
            ipAddresses: props.ipAddresses,
            chargeType: props.chargeType === undefined || props.chargeType === null ? 'POSTPAY' : props.chargeType,
            period: props.period,
            enableLog: props.enableLog,
            networkProtocol: props.networkProtocol,
            cleanBandwidth: props.cleanBandwidth,
            tags: props.tags,
            edition: props.edition,
            periodUnit: props.periodUnit,
            protectionMode: props.protectionMode,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosOriginInstance;
        this.attrInstanceId = rosOriginInstance.attrInstanceId;
    }
}
exports.OriginInstance = OriginInstance;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3JpZ2luaW5zdGFuY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJvcmlnaW5pbnN0YW5jZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw4Q0FBOEM7QUFDOUMscURBQXFEO0FBRXZCLHVHQUZyQixrQ0FBaUIsT0FFMEI7QUF3RXBEOzs7O0dBSUc7QUFDSCxNQUFhLGNBQWUsU0FBUSxHQUFHLENBQUMsUUFBUTtJQVc1Qzs7OztPQUlHO0lBQ0gsWUFBWSxLQUFvQixFQUFFLEVBQVUsRUFBRSxLQUEwQixFQUFFLG1DQUEyQyxJQUFJO1FBQ3JILEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDakIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUM7UUFDYixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsZ0NBQWdDLEdBQUcsZ0NBQWdDLENBQUM7UUFFekUsTUFBTSxpQkFBaUIsR0FBRyxJQUFJLGtDQUFpQixDQUFDLElBQUksRUFBRSxFQUFFLEVBQUc7WUFDdkQsV0FBVyxFQUFFLEtBQUssQ0FBQyxXQUFXO1lBQzlCLFVBQVUsRUFBRSxLQUFLLENBQUMsVUFBVSxLQUFLLFNBQVMsSUFBSSxLQUFLLENBQUMsVUFBVSxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsVUFBVTtZQUN0RyxNQUFNLEVBQUUsS0FBSyxDQUFDLE1BQU07WUFDcEIsU0FBUyxFQUFFLEtBQUssQ0FBQyxTQUFTO1lBQzFCLGVBQWUsRUFBRSxLQUFLLENBQUMsZUFBZTtZQUN0QyxjQUFjLEVBQUUsS0FBSyxDQUFDLGNBQWM7WUFDcEMsSUFBSSxFQUFFLEtBQUssQ0FBQyxJQUFJO1lBQ2hCLE9BQU8sRUFBRSxLQUFLLENBQUMsT0FBTztZQUN0QixVQUFVLEVBQUUsS0FBSyxDQUFDLFVBQVU7WUFDNUIsY0FBYyxFQUFFLEtBQUssQ0FBQyxjQUFjO1NBQ3ZDLEVBQUUsZ0NBQWdDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO1FBQ3BGLElBQUksQ0FBQyxRQUFRLEdBQUcsaUJBQWlCLENBQUM7UUFDbEMsSUFBSSxDQUFDLGNBQWMsR0FBRyxpQkFBaUIsQ0FBQyxjQUFjLENBQUM7SUFDM0QsQ0FBQztDQUNKO0FBdENELHdDQXNDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHJvcyBmcm9tICdAYWxpY2xvdWQvcm9zLWNkay1jb3JlJztcbmltcG9ydCB7IFJvc09yaWdpbkluc3RhbmNlIH0gZnJvbSAnLi9kZG9zLmdlbmVyYXRlZCc7XG4vLyBHZW5lcmF0ZWQgZnJvbSB0aGUgQWxpQ2xvdWQgUk9TIFJlc291cmNlIFNwZWNpZmljYXRpb25cbmV4cG9ydCB7IFJvc09yaWdpbkluc3RhbmNlIGFzIE9yaWdpbkluc3RhbmNlUHJvcGVydHkgfTtcblxuLyoqXG4gKiBQcm9wZXJ0aWVzIGZvciBkZWZpbmluZyBhIGBPcmlnaW5JbnN0YW5jZWAuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2FsaXl1bi1kZG9zLW9yaWdpbmluc3RhbmNlXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgT3JpZ2luSW5zdGFuY2VQcm9wcyB7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBlZGl0aW9uOiBFZGl0aW9uIG9mIHRoZSBpbnN0YW5jZS4gVmFsaWQgdmFsdWVzOlxuICAgICAqICAtIGVudGVycHJpc2U6IEVudGVycHJpc2UgRWRpdGlvbi5cbiAgICAgKiAtIHNtYjogQWZmb3JkYWJsZSBhbmQgZ2VuZXJhbCBlZGl0aW9uIGZvciBzbWFsbCBhbmQgbWVkaXVtLXNpemVkIGVudGVycHJpc2VzLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGVkaXRpb246IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHByb3RlY3Rpb25Nb2RlOiBUaGUgbW9kZSBvZiB0aGUgcHJvdGVjdGlvbi4gVmFsaWQgdmFsdWVzOlxuICAgICAqIHVubGltaXRlZDogVGhlIFVubGltaXRlZCBwcm90ZWN0aW9uIG1vZGUgaXMgaW50ZW5kZWQgZm9yIGludGVybmFsIHVzZSB3aXRoaW4gZW50ZXJwcmlzZXMuXG4gICAgICovXG4gICAgcmVhZG9ubHkgcHJvdGVjdGlvbk1vZGU6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGNoYXJnZVR5cGU6IFRoZSBjaGFyZ2UgdHlwZSBvZiB0aGUgaW5zdGFuY2UuIFZhbGlkIHZhbHVlczpcbiAgICAgKiBQb3N0UGFpZDogUGF5LWFzLXlvdS1nby5cbiAgICAgKiBQcmVQYWlkOiBTdWJzY3JpcHRpb24uXG4gICAgICovXG4gICAgcmVhZG9ubHkgY2hhcmdlVHlwZT86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGNsZWFuQmFuZHdpZHRoOiBUaGUgbWl0aWdhdGlvbiBjYXBhYmlsaXR5IG9mIEFudGktRERvUyBpcyBtZWFzdXJlZCBieSB0aGUgaW5ib3VuZCBvciBvdXRib3VuZCBjbGVhbiBiYW5kd2lkdGguXG4gICAgICogV2hlbiBFZGl0aW9uIGlzIGVudGVycHJpc2UsIENsZWFuQmFuZHdpZHRoIHJhbmdlcyBmcm9tIDEwMCB0byAxMDAwIE1iaXRcXC9zLldoZW4gRWRpdGlvbiBpcyBzbWLvvIwgQ2xlYW5CYW5kd2lkdGggcmFuZ2VzIGZyb20gNTAgdG8gMTAwMCBNYml0XFwvcy5cbiAgICAgKi9cbiAgICByZWFkb25seSBjbGVhbkJhbmR3aWR0aD86IG51bWJlciB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGVuYWJsZUxvZzogV2hldGhlciB0byBlbmFibGUgcHJvdGVjdGlvbiBsb2dzLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGVuYWJsZUxvZz86IGJvb2xlYW4gfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBpcEFkZHJlc3NlczogVGhlIG51bWJlciBvZiBpcCBhZGRyZXNzZXMuXG4gICAgICogV2hlbiBFZGl0aW9uIGlzIHNtYu+8jCBJUCBBZGRyZXNzZXMgcmFuZ2VzIGZyb20gMSB0byAyOS5cbiAgICAgKiBXaGVuIEVkaXRpb24gaXMgZW50ZXJwcmlzZSwgVGhlIG1pbmltdW0gbnVtYmVyIG9mIElQIEFkZHJlc3NlcyBpcyAzMC5cbiAgICAgKi9cbiAgICByZWFkb25seSBpcEFkZHJlc3Nlcz86IG51bWJlciB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IG5ldHdvcmtQcm90b2NvbDogVGhlIG5ldHdvcmsgcHJvdG9jb2wgb2YgdGhlIGluc3RhbmNlLiBWYWxpZCB2YWx1ZXM6XG4gICAgICogdjQ6IElQdjQuXG4gICAgICogdjY6IElQdjYuXG4gICAgICogdjRfNjogSVB2NCtJUHY2LlxuICAgICAqL1xuICAgIHJlYWRvbmx5IG5ldHdvcmtQcm90b2NvbD86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHBlcmlvZDogVGhlIHBlcmlvZCBvZiB0aGUgaW5zdGFuY2UuXG4gICAgICovXG4gICAgcmVhZG9ubHkgcGVyaW9kPzogbnVtYmVyIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgcGVyaW9kVW5pdDogVGhlIHBlcmlvZCB1bml0IG9mIHRoZSBpbnN0YW5jZS4gVmFsaWQgdmFsdWVzOlxuICAgICAqIE1vbnRoOiBNb250aC5cbiAgICAgKiBZZWFyOiBZZWFyLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHBlcmlvZFVuaXQ/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSB0YWdzOiBUYWdzIHRvIGF0dGFjaCB0byBpbnN0YW5jZS4gTWF4IHN1cHBvcnQgMjAgdGFncyB0byBhZGQgZHVyaW5nIGNyZWF0ZSBpbnN0YW5jZS4gRWFjaCB0YWcgd2l0aCB0d28gcHJvcGVydGllcyBLZXkgYW5kIFZhbHVlLCBhbmQgS2V5IGlzIHJlcXVpcmVkLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHRhZ3M/OiBSb3NPcmlnaW5JbnN0YW5jZS5UYWdzUHJvcGVydHlbXTtcbn1cblxuLyoqXG4gKiBUaGlzIGNsYXNzIGVuY2Fwc3VsYXRlcyBhbmQgZXh0ZW5kcyB0aGUgUk9TIHJlc291cmNlIHR5cGUgYEFMSVlVTjo6RERvUzo6T3JpZ2luSW5zdGFuY2VgLCB3aGljaCBpcyB1c2VkIHRvIGNyZWF0ZSBhbiBBbnRpLUREb1MgT3JpZ2luIGluc3RhbmNlLlxuICogQE5vdGUgVGhpcyBjbGFzcyBtYXkgaGF2ZSBzb21lIG5ldyBmdW5jdGlvbnMgdG8gZmFjaWxpdGF0ZSBkZXZlbG9wbWVudCwgc28gaXQgaXMgcmVjb21tZW5kZWQgdG8gdXNlIHRoaXMgY2xhc3MgaW5zdGVhZCBvZiBgUm9zT3JpZ2luSW5zdGFuY2VgZm9yIGEgbW9yZSBjb252ZW5pZW50IGRldmVsb3BtZW50IGV4cGVyaWVuY2UuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2FsaXl1bi1kZG9zLW9yaWdpbmluc3RhbmNlXG4gKi9cbmV4cG9ydCBjbGFzcyBPcmlnaW5JbnN0YW5jZSBleHRlbmRzIHJvcy5SZXNvdXJjZSB7XG4gICAgcHJvdGVjdGVkIHNjb3BlOiByb3MuQ29uc3RydWN0O1xuICAgIHByb3RlY3RlZCBpZDogc3RyaW5nO1xuICAgIHByb3RlY3RlZCBwcm9wczogT3JpZ2luSW5zdGFuY2VQcm9wcztcbiAgICBwcm90ZWN0ZWQgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6IGJvb2xlYW47XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgSW5zdGFuY2VJZDogVGhlIElEIG9mIHRoZSBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckluc3RhbmNlSWQ6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFBhcmFtIHNjb3BlIC0gc2NvcGUgaW4gd2hpY2ggdGhpcyByZXNvdXJjZSBpcyBkZWZpbmVkXG4gICAgICogUGFyYW0gaWQgICAgLSBzY29wZWQgaWQgb2YgdGhlIHJlc291cmNlXG4gICAgICogUGFyYW0gcHJvcHMgLSByZXNvdXJjZSBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IHJvcy5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBPcmlnaW5JbnN0YW5jZVByb3BzLCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDpib29sZWFuID0gdHJ1ZSkge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQpO1xuICAgICAgICB0aGlzLnNjb3BlID0gc2NvcGU7XG4gICAgICAgIHRoaXMuaWQgPSBpZDtcbiAgICAgICAgdGhpcy5wcm9wcyA9IHByb3BzO1xuICAgICAgICB0aGlzLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ID0gZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ7XG5cbiAgICAgICAgY29uc3Qgcm9zT3JpZ2luSW5zdGFuY2UgPSBuZXcgUm9zT3JpZ2luSW5zdGFuY2UodGhpcywgaWQsICB7XG4gICAgICAgICAgICBpcEFkZHJlc3NlczogcHJvcHMuaXBBZGRyZXNzZXMsXG4gICAgICAgICAgICBjaGFyZ2VUeXBlOiBwcm9wcy5jaGFyZ2VUeXBlID09PSB1bmRlZmluZWQgfHwgcHJvcHMuY2hhcmdlVHlwZSA9PT0gbnVsbCA/ICdQT1NUUEFZJyA6IHByb3BzLmNoYXJnZVR5cGUsXG4gICAgICAgICAgICBwZXJpb2Q6IHByb3BzLnBlcmlvZCxcbiAgICAgICAgICAgIGVuYWJsZUxvZzogcHJvcHMuZW5hYmxlTG9nLFxuICAgICAgICAgICAgbmV0d29ya1Byb3RvY29sOiBwcm9wcy5uZXR3b3JrUHJvdG9jb2wsXG4gICAgICAgICAgICBjbGVhbkJhbmR3aWR0aDogcHJvcHMuY2xlYW5CYW5kd2lkdGgsXG4gICAgICAgICAgICB0YWdzOiBwcm9wcy50YWdzLFxuICAgICAgICAgICAgZWRpdGlvbjogcHJvcHMuZWRpdGlvbixcbiAgICAgICAgICAgIHBlcmlvZFVuaXQ6IHByb3BzLnBlcmlvZFVuaXQsXG4gICAgICAgICAgICBwcm90ZWN0aW9uTW9kZTogcHJvcHMucHJvdGVjdGlvbk1vZGUsXG4gICAgICAgIH0sIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ICYmIHRoaXMuc3RhY2suZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQpO1xuICAgICAgICB0aGlzLnJlc291cmNlID0gcm9zT3JpZ2luSW5zdGFuY2U7XG4gICAgICAgIHRoaXMuYXR0ckluc3RhbmNlSWQgPSByb3NPcmlnaW5JbnN0YW5jZS5hdHRySW5zdGFuY2VJZDtcbiAgICB9XG59XG4iXX0=