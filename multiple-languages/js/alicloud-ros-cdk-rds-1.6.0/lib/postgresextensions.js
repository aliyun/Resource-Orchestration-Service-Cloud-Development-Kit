"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PostgresExtensions = exports.PostgresExtensionsProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const rds_generated_1 = require("./rds.generated");
Object.defineProperty(exports, "PostgresExtensionsProperty", { enumerable: true, get: function () { return rds_generated_1.RosPostgresExtensions; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::RDS::PostgresExtensions`, which is used to install extensions on a database.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosPostgresExtensions`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-rds-postgresextensions
 */
class PostgresExtensions extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosPostgresExtensions = new rds_generated_1.RosPostgresExtensions(this, id, {
            resourceGroupId: props.resourceGroupId,
            dbInstanceId: props.dbInstanceId,
            riskConfirmed: props.riskConfirmed,
            dbName: props.dbName,
            sourceDatabase: props.sourceDatabase,
            extensions: props.extensions,
            accountName: props.accountName,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosPostgresExtensions;
        this.attrInstalledExtensionNames = rosPostgresExtensions.attrInstalledExtensionNames;
    }
}
exports.PostgresExtensions = PostgresExtensions;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9zdGdyZXNleHRlbnNpb25zLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicG9zdGdyZXNleHRlbnNpb25zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDhDQUE4QztBQUM5QyxtREFBd0Q7QUFFdEIsMkdBRnpCLHFDQUFxQixPQUU4QjtBQTBENUQ7Ozs7R0FJRztBQUNILE1BQWEsa0JBQW1CLFNBQVEsR0FBRyxDQUFDLFFBQVE7SUFXaEQ7Ozs7T0FJRztJQUNILFlBQVksS0FBb0IsRUFBRSxFQUFVLEVBQUUsS0FBOEIsRUFBRSxtQ0FBMkMsSUFBSTtRQUN6SCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ2pCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQ2IsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLGdDQUFnQyxHQUFHLGdDQUFnQyxDQUFDO1FBRXpFLE1BQU0scUJBQXFCLEdBQUcsSUFBSSxxQ0FBcUIsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFHO1lBQy9ELGVBQWUsRUFBRSxLQUFLLENBQUMsZUFBZTtZQUN0QyxZQUFZLEVBQUUsS0FBSyxDQUFDLFlBQVk7WUFDaEMsYUFBYSxFQUFFLEtBQUssQ0FBQyxhQUFhO1lBQ2xDLE1BQU0sRUFBRSxLQUFLLENBQUMsTUFBTTtZQUNwQixjQUFjLEVBQUUsS0FBSyxDQUFDLGNBQWM7WUFDcEMsVUFBVSxFQUFFLEtBQUssQ0FBQyxVQUFVO1lBQzVCLFdBQVcsRUFBRSxLQUFLLENBQUMsV0FBVztTQUNqQyxFQUFFLGdDQUFnQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztRQUNwRixJQUFJLENBQUMsUUFBUSxHQUFHLHFCQUFxQixDQUFDO1FBQ3RDLElBQUksQ0FBQywyQkFBMkIsR0FBRyxxQkFBcUIsQ0FBQywyQkFBMkIsQ0FBQztJQUN6RixDQUFDO0NBQ0o7QUFuQ0QsZ0RBbUNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcm9zIGZyb20gJ0BhbGljbG91ZC9yb3MtY2RrLWNvcmUnO1xuaW1wb3J0IHsgUm9zUG9zdGdyZXNFeHRlbnNpb25zIH0gZnJvbSAnLi9yZHMuZ2VuZXJhdGVkJztcbi8vIEdlbmVyYXRlZCBmcm9tIHRoZSBBbGlDbG91ZCBST1MgUmVzb3VyY2UgU3BlY2lmaWNhdGlvblxuZXhwb3J0IHsgUm9zUG9zdGdyZXNFeHRlbnNpb25zIGFzIFBvc3RncmVzRXh0ZW5zaW9uc1Byb3BlcnR5IH07XG5cbi8qKlxuICogUHJvcGVydGllcyBmb3IgZGVmaW5pbmcgYSBgUG9zdGdyZXNFeHRlbnNpb25zYC5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvYWxpeXVuLXJkcy1wb3N0Z3Jlc2V4dGVuc2lvbnNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBQb3N0Z3Jlc0V4dGVuc2lvbnNQcm9wcyB7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBhY2NvdW50TmFtZTogVGhlIGFjY291bnQgb2YgdGhlIHVzZXIgd2hvIG93bnMgdGhlIGV4dGVuc2lvbi4gT25seSBwcml2aWxlZ2VkIGFjY291bnRzIGFyZSBzdXBwb3J0ZWQuXG4gICAgICovXG4gICAgcmVhZG9ubHkgYWNjb3VudE5hbWU6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGRiSW5zdGFuY2VJZDogVGhlIGluc3RhbmNlIElELiBZb3UgY2FuIGNhbGwgdGhlIERlc2NyaWJlREJJbnN0YW5jZXMgb3BlcmF0aW9uIHRvIHF1ZXJ5IHRoZSBpbnN0YW5jZSBJRC5cbiAgICAgKi9cbiAgICByZWFkb25seSBkYkluc3RhbmNlSWQ6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGRiTmFtZTogVGhlIGRhdGFiYXNlIG5hbWUuIFlvdSBjYW4gY2FsbCB0aGUgRGVzY3JpYmVEYXRhYmFzZXMgb3BlcmF0aW9uIHRvIHF1ZXJ5IHRoZSBkYXRhYmFzZSBuYW1lLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGRiTmFtZTogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgZXh0ZW5zaW9uczogVGhlIGV4dGVuc2lvbnMgdGhhdCB5b3Ugd2FudCB0byBpbnN0YWxsLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGV4dGVuc2lvbnM/OiBBcnJheTxzdHJpbmcgfCByb3MuSVJlc29sdmFibGU+IHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgcmVzb3VyY2VHcm91cElkOiBUaGUgSUQgb2YgdGhlIHJlc291cmNlIGdyb3VwLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHJlc291cmNlR3JvdXBJZD86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHJpc2tDb25maXJtZWQ6IFRoZSByaXNrIGRlc2NyaXB0aW9uIHRoYXQgeW91IG5lZWQgdG8gY29uZmlybS4gSWYgeW91ciBpbnN0YW5jZSBydW5zIGFuIG91dGRhdGVkIG1pbm9yIGVuZ2luZSB2ZXJzaW9uLCBpbnN0YWxsaW5nIHNwZWNpZmljIGV4dGVuc2lvbnMgb24gdGhlIGluc3RhbmNlIHBvc2VzIHNlY3VyaXR5IHJpc2tzLiBQcm9jZWVkIHdpdGggdGhlIGluc3RhbGxhdGlvbiBvbmx5IGFmdGVyIHlvdSBhY2tub3dsZWRnZSB0aGVzZSByaXNrcy4gVmFsaWQgdmFsdWVzOlxuICAgICAqIHRydWVcbiAgICAgKiBmYWxzZVxuICAgICAqIE5vdGUgRm9yIG1vcmUgaW5mb3JtYXRpb24gYWJvdXQgdGhlIHJpc2tzLCBzZWUgTGltaXRzIG9uIGV4dGVuc2lvbiBjcmVhdGlvbiBmb3IgQXBzYXJhREIgUkRTIGZvciBQb3N0Z3JlU1FMIGluc3RhbmNlcy5cbiAgICAgKi9cbiAgICByZWFkb25seSByaXNrQ29uZmlybWVkPzogYm9vbGVhbiB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHNvdXJjZURhdGFiYXNlOiBUaGUgc291cmNlIGRhdGFiYXNlIGZyb20gd2hpY2ggeW91IHdhbnQgdG8gc3luY2hyb25pemUgdGhlIGV4dGVuc2lvbiB0byB0aGUgZGVzdGluYXRpb24gZGF0YWJhc2UuIElmIHlvdSBkbyBub3Qgc3BlY2lmeSB0aGUgRXh0ZW5zaW9ucyBwYXJhbWV0ZXIsIHlvdSBtdXN0IHNwZWNpZnkgdGhpcyBwYXJhbWV0ZXIuXG4gICAgICovXG4gICAgcmVhZG9ubHkgc291cmNlRGF0YWJhc2U/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG59XG5cbi8qKlxuICogUmVwcmVzZW50cyBhIGBQb3N0Z3Jlc0V4dGVuc2lvbnNgLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIElQb3N0Z3Jlc0V4dGVuc2lvbnMgZXh0ZW5kcyByb3MuSVJlc291cmNlIHtcbiAgICByZWFkb25seSBwcm9wczogUG9zdGdyZXNFeHRlbnNpb25zUHJvcHM7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgSW5zdGFsbGVkRXh0ZW5zaW9uTmFtZXM6IEV4dGVuc2lvbiBuYW1lcyBpbnN0YWxsZWQgdmlhIFJPU1xuICAgICAqL1xuICAgIHJlYWRvbmx5IGF0dHJJbnN0YWxsZWRFeHRlbnNpb25OYW1lczogcm9zLklSZXNvbHZhYmxlIHwgc3RyaW5nO1xufVxuLyoqXG4gKiBUaGlzIGNsYXNzIGVuY2Fwc3VsYXRlcyBhbmQgZXh0ZW5kcyB0aGUgUk9TIHJlc291cmNlIHR5cGUgYEFMSVlVTjo6UkRTOjpQb3N0Z3Jlc0V4dGVuc2lvbnNgLCB3aGljaCBpcyB1c2VkIHRvIGluc3RhbGwgZXh0ZW5zaW9ucyBvbiBhIGRhdGFiYXNlLlxuICogQE5vdGUgVGhpcyBjbGFzcyBtYXkgaGF2ZSBzb21lIG5ldyBmdW5jdGlvbnMgdG8gZmFjaWxpdGF0ZSBkZXZlbG9wbWVudCwgc28gaXQgaXMgcmVjb21tZW5kZWQgdG8gdXNlIHRoaXMgY2xhc3MgaW5zdGVhZCBvZiBgUm9zUG9zdGdyZXNFeHRlbnNpb25zYGZvciBhIG1vcmUgY29udmVuaWVudCBkZXZlbG9wbWVudCBleHBlcmllbmNlLlxuICogU2VlIGh0dHBzOi8vd3d3LmFsaWJhYmFjbG91ZC5jb20vaGVscC9yb3MvZGV2ZWxvcGVyLXJlZmVyZW5jZS9hbGl5dW4tcmRzLXBvc3RncmVzZXh0ZW5zaW9uc1xuICovXG5leHBvcnQgY2xhc3MgUG9zdGdyZXNFeHRlbnNpb25zIGV4dGVuZHMgcm9zLlJlc291cmNlIGltcGxlbWVudHMgSVBvc3RncmVzRXh0ZW5zaW9ucyB7XG4gICAgcHJvdGVjdGVkIHNjb3BlOiByb3MuQ29uc3RydWN0O1xuICAgIHByb3RlY3RlZCBpZDogc3RyaW5nO1xuICAgIHB1YmxpYyByZWFkb25seSBwcm9wczogUG9zdGdyZXNFeHRlbnNpb25zUHJvcHM7XG4gICAgcHJvdGVjdGVkIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OiBib29sZWFuO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIEluc3RhbGxlZEV4dGVuc2lvbk5hbWVzOiBFeHRlbnNpb24gbmFtZXMgaW5zdGFsbGVkIHZpYSBST1NcbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckluc3RhbGxlZEV4dGVuc2lvbk5hbWVzOiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBQYXJhbSBzY29wZSAtIHNjb3BlIGluIHdoaWNoIHRoaXMgcmVzb3VyY2UgaXMgZGVmaW5lZFxuICAgICAqIFBhcmFtIGlkICAgIC0gc2NvcGVkIGlkIG9mIHRoZSByZXNvdXJjZVxuICAgICAqIFBhcmFtIHByb3BzIC0gcmVzb3VyY2UgcHJvcGVydGllc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiByb3MuQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogUG9zdGdyZXNFeHRlbnNpb25zUHJvcHMsIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OmJvb2xlYW4gPSB0cnVlKSB7XG4gICAgICAgIHN1cGVyKHNjb3BlLCBpZCk7XG4gICAgICAgIHRoaXMuc2NvcGUgPSBzY29wZTtcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xuICAgICAgICB0aGlzLnByb3BzID0gcHJvcHM7XG4gICAgICAgIHRoaXMuZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgPSBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDtcblxuICAgICAgICBjb25zdCByb3NQb3N0Z3Jlc0V4dGVuc2lvbnMgPSBuZXcgUm9zUG9zdGdyZXNFeHRlbnNpb25zKHRoaXMsIGlkLCAge1xuICAgICAgICAgICAgcmVzb3VyY2VHcm91cElkOiBwcm9wcy5yZXNvdXJjZUdyb3VwSWQsXG4gICAgICAgICAgICBkYkluc3RhbmNlSWQ6IHByb3BzLmRiSW5zdGFuY2VJZCxcbiAgICAgICAgICAgIHJpc2tDb25maXJtZWQ6IHByb3BzLnJpc2tDb25maXJtZWQsXG4gICAgICAgICAgICBkYk5hbWU6IHByb3BzLmRiTmFtZSxcbiAgICAgICAgICAgIHNvdXJjZURhdGFiYXNlOiBwcm9wcy5zb3VyY2VEYXRhYmFzZSxcbiAgICAgICAgICAgIGV4dGVuc2lvbnM6IHByb3BzLmV4dGVuc2lvbnMsXG4gICAgICAgICAgICBhY2NvdW50TmFtZTogcHJvcHMuYWNjb3VudE5hbWUsXG4gICAgICAgIH0sIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ICYmIHRoaXMuc3RhY2suZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQpO1xuICAgICAgICB0aGlzLnJlc291cmNlID0gcm9zUG9zdGdyZXNFeHRlbnNpb25zO1xuICAgICAgICB0aGlzLmF0dHJJbnN0YWxsZWRFeHRlbnNpb25OYW1lcyA9IHJvc1Bvc3RncmVzRXh0ZW5zaW9ucy5hdHRySW5zdGFsbGVkRXh0ZW5zaW9uTmFtZXM7XG4gICAgfVxufVxuIl19