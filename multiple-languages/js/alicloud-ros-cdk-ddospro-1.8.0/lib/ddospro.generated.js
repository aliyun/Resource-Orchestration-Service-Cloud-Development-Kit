"use strict";
// Generated from the AliCloud ROS Resource Specification
Object.defineProperty(exports, "__esModule", { value: true });
exports.RosWebRule = exports.RosSchedulerRule = exports.RosSceneDefensePolicy = exports.RosProInstance = exports.RosPremiumInstance = exports.RosPort = void 0;
const ros = require("@alicloud/ros-cdk-core");
/**
 * Determine whether the given properties match those of a `RosPortProps`
 *
 * @param properties - the TypeScript properties of a `RosPortProps`
 *
 * @returns the result of the validation.
 */
function RosPortPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('backendPort', ros.validateString)(properties.backendPort));
    errors.collect(ros.propertyValidator('instanceId', ros.requiredValidator)(properties.instanceId));
    errors.collect(ros.propertyValidator('instanceId', ros.validateString)(properties.instanceId));
    errors.collect(ros.propertyValidator('realServers', ros.requiredValidator)(properties.realServers));
    if (properties.realServers && (Array.isArray(properties.realServers) || (typeof properties.realServers) === 'string')) {
        errors.collect(ros.propertyValidator('realServers', ros.validateLength)({
            data: properties.realServers.length,
            min: 0,
            max: 20,
        }));
    }
    errors.collect(ros.propertyValidator('realServers', ros.listValidator(ros.validateString))(properties.realServers));
    errors.collect(ros.propertyValidator('frontendPort', ros.validateString)(properties.frontendPort));
    errors.collect(ros.propertyValidator('frontendProtocol', ros.requiredValidator)(properties.frontendProtocol));
    if (properties.frontendProtocol && (typeof properties.frontendProtocol) !== 'object') {
        errors.collect(ros.propertyValidator('frontendProtocol', ros.validateAllowedValues)({
            data: properties.frontendProtocol,
            allowedValues: ["tcp", "udp"],
        }));
    }
    errors.collect(ros.propertyValidator('frontendProtocol', ros.validateString)(properties.frontendProtocol));
    return errors.wrap('supplied properties not correct for "RosPortProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::DDoSPro::Port` resource
 *
 * @param properties - the TypeScript properties of a `RosPortProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::DDoSPro::Port` resource.
 */
// @ts-ignore TS6133
function rosPortPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosPortPropsValidator(properties).assertSuccess();
    }
    return {
        'FrontendProtocol': ros.stringToRosTemplate(properties.frontendProtocol),
        'InstanceId': ros.stringToRosTemplate(properties.instanceId),
        'RealServers': ros.listMapper(ros.stringToRosTemplate)(properties.realServers),
        'BackendPort': ros.stringToRosTemplate(properties.backendPort),
        'FrontendPort': ros.stringToRosTemplate(properties.frontendPort),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::DDoSPro::Port`, which is used to create a port forwarding rule for an Anti-DDoS Proxy instance.
 * @Note This class does not contain additional functions, so it is recommended to use the `Port` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-ddospro-port
 */
class RosPort extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosPort.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrFrontendPort = this.getAtt('FrontendPort');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.frontendProtocol = props.frontendProtocol;
        this.instanceId = props.instanceId;
        this.realServers = props.realServers;
        this.backendPort = props.backendPort;
        this.frontendPort = props.frontendPort;
    }
    get rosProperties() {
        return {
            frontendProtocol: this.frontendProtocol,
            instanceId: this.instanceId,
            realServers: this.realServers,
            backendPort: this.backendPort,
            frontendPort: this.frontendPort,
        };
    }
    renderProperties(props) {
        return rosPortPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosPort = RosPort;
/**
 * The resource type name for this resource class.
 */
RosPort.ROS_RESOURCE_TYPE_NAME = "ALIYUN::DDoSPro::Port";
/**
 * Determine whether the given properties match those of a `RosPremiumInstanceProps`
 *
 * @param properties - the TypeScript properties of a `RosPremiumInstanceProps`
 *
 * @returns the result of the validation.
 */
function RosPremiumInstancePropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    if (properties.normalQps && (typeof properties.normalQps) !== 'object') {
        errors.collect(ros.propertyValidator('normalQps', ros.validateRange)({
            data: properties.normalQps,
            min: 500,
            max: 100000,
        }));
    }
    errors.collect(ros.propertyValidator('normalQps', ros.validateNumber)(properties.normalQps));
    if (properties.normalBandwidth && (typeof properties.normalBandwidth) !== 'object') {
        errors.collect(ros.propertyValidator('normalBandwidth', ros.validateRange)({
            data: properties.normalBandwidth,
            min: 10,
            max: 300,
        }));
    }
    errors.collect(ros.propertyValidator('normalBandwidth', ros.validateNumber)(properties.normalBandwidth));
    if (properties.functionVersion && (typeof properties.functionVersion) !== 'object') {
        errors.collect(ros.propertyValidator('functionVersion', ros.validateAllowedValues)({
            data: properties.functionVersion,
            allowedValues: ["0", "1"],
        }));
    }
    errors.collect(ros.propertyValidator('functionVersion', ros.validateString)(properties.functionVersion));
    if (properties.productPlan && (typeof properties.productPlan) !== 'object') {
        errors.collect(ros.propertyValidator('productPlan', ros.validateAllowedValues)({
            data: properties.productPlan,
            allowedValues: ["0", "1", "2", "3"],
        }));
    }
    errors.collect(ros.propertyValidator('productPlan', ros.validateString)(properties.productPlan));
    if (properties.period && (typeof properties.period) !== 'object') {
        errors.collect(ros.propertyValidator('period', ros.validateAllowedValues)({
            data: properties.period,
            allowedValues: [1, 2, 3, 4, 5, 6, 12, 24],
        }));
    }
    errors.collect(ros.propertyValidator('period', ros.validateNumber)(properties.period));
    if (properties.portCount && (typeof properties.portCount) !== 'object') {
        errors.collect(ros.propertyValidator('portCount', ros.validateRange)({
            data: properties.portCount,
            min: 5,
            max: 400,
        }));
    }
    errors.collect(ros.propertyValidator('portCount', ros.validateNumber)(properties.portCount));
    if (properties.tags && (Array.isArray(properties.tags) || (typeof properties.tags) === 'string')) {
        errors.collect(ros.propertyValidator('tags', ros.validateLength)({
            data: properties.tags.length,
            min: undefined,
            max: 20,
        }));
    }
    errors.collect(ros.propertyValidator('tags', ros.listValidator(RosPremiumInstance_TagsPropertyValidator))(properties.tags));
    if (properties.burstBandwidthMode && (typeof properties.burstBandwidthMode) !== 'object') {
        errors.collect(ros.propertyValidator('burstBandwidthMode', ros.validateAllowedValues)({
            data: properties.burstBandwidthMode,
            allowedValues: ["0", "1", "2"],
        }));
    }
    errors.collect(ros.propertyValidator('burstBandwidthMode', ros.validateString)(properties.burstBandwidthMode));
    if (properties.periodUnit && (typeof properties.periodUnit) !== 'object') {
        errors.collect(ros.propertyValidator('periodUnit', ros.validateAllowedValues)({
            data: properties.periodUnit,
            allowedValues: ["Month", "Year", "month", "year"],
        }));
    }
    errors.collect(ros.propertyValidator('periodUnit', ros.validateString)(properties.periodUnit));
    if (properties.domainCount && (typeof properties.domainCount) !== 'object') {
        errors.collect(ros.propertyValidator('domainCount', ros.validateRange)({
            data: properties.domainCount,
            min: 10,
            max: 200,
        }));
    }
    errors.collect(ros.propertyValidator('domainCount', ros.validateNumber)(properties.domainCount));
    return errors.wrap('supplied properties not correct for "RosPremiumInstanceProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::DDoSPro::PremiumInstance` resource
 *
 * @param properties - the TypeScript properties of a `RosPremiumInstanceProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::DDoSPro::PremiumInstance` resource.
 */
// @ts-ignore TS6133
function rosPremiumInstancePropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosPremiumInstancePropsValidator(properties).assertSuccess();
    }
    return {
        'BurstBandwidthMode': ros.stringToRosTemplate(properties.burstBandwidthMode),
        'DomainCount': ros.numberToRosTemplate(properties.domainCount),
        'FunctionVersion': ros.stringToRosTemplate(properties.functionVersion),
        'NormalBandwidth': ros.numberToRosTemplate(properties.normalBandwidth),
        'NormalQps': ros.numberToRosTemplate(properties.normalQps),
        'Period': ros.numberToRosTemplate(properties.period),
        'PeriodUnit': ros.stringToRosTemplate(properties.periodUnit),
        'PortCount': ros.numberToRosTemplate(properties.portCount),
        'ProductPlan': ros.stringToRosTemplate(properties.productPlan),
        'Tags': ros.listMapper(rosPremiumInstanceTagsPropertyToRosTemplate)(properties.tags),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::DDoSPro::PremiumInstance`, which is used to create an Anti-DDoS Proxy (Outside Chinese Mainland) instance.
 * @Note This class does not contain additional functions, so it is recommended to use the `PremiumInstance` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-ddospro-premiuminstance
 */
class RosPremiumInstance extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosPremiumInstance.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrArn = this.getAtt('Arn');
        this.attrInstanceId = this.getAtt('InstanceId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.burstBandwidthMode = props.burstBandwidthMode;
        this.domainCount = props.domainCount;
        this.functionVersion = props.functionVersion;
        this.normalBandwidth = props.normalBandwidth;
        this.normalQps = props.normalQps;
        this.period = props.period;
        this.periodUnit = props.periodUnit;
        this.portCount = props.portCount;
        this.productPlan = props.productPlan;
        this.tags = props.tags;
    }
    get rosProperties() {
        return {
            burstBandwidthMode: this.burstBandwidthMode,
            domainCount: this.domainCount,
            functionVersion: this.functionVersion,
            normalBandwidth: this.normalBandwidth,
            normalQps: this.normalQps,
            period: this.period,
            periodUnit: this.periodUnit,
            portCount: this.portCount,
            productPlan: this.productPlan,
            tags: this.tags,
        };
    }
    renderProperties(props) {
        return rosPremiumInstancePropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosPremiumInstance = RosPremiumInstance;
/**
 * The resource type name for this resource class.
 */
RosPremiumInstance.ROS_RESOURCE_TYPE_NAME = "ALIYUN::DDoSPro::PremiumInstance";
/**
 * Determine whether the given properties match those of a `TagsProperty`
 *
 * @param properties - the TypeScript properties of a `TagsProperty`
 *
 * @returns the result of the validation.
 */
function RosPremiumInstance_TagsPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('value', ros.validateString)(properties.value));
    errors.collect(ros.propertyValidator('key', ros.requiredValidator)(properties.key));
    errors.collect(ros.propertyValidator('key', ros.validateString)(properties.key));
    return errors.wrap('supplied properties not correct for "TagsProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::DDoSPro::PremiumInstance.Tags` resource
 *
 * @param properties - the TypeScript properties of a `TagsProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::DDoSPro::PremiumInstance.Tags` resource.
 */
// @ts-ignore TS6133
function rosPremiumInstanceTagsPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosPremiumInstance_TagsPropertyValidator(properties).assertSuccess();
    return {
        'Value': ros.stringToRosTemplate(properties.value),
        'Key': ros.stringToRosTemplate(properties.key),
    };
}
/**
 * Determine whether the given properties match those of a `RosProInstanceProps`
 *
 * @param properties - the TypeScript properties of a `RosProInstanceProps`
 *
 * @returns the result of the validation.
 */
function RosProInstancePropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    if (properties.normalQps && (typeof properties.normalQps) !== 'object') {
        errors.collect(ros.propertyValidator('normalQps', ros.validateRange)({
            data: properties.normalQps,
            min: 3000,
            max: 100000,
        }));
    }
    errors.collect(ros.propertyValidator('normalQps', ros.validateNumber)(properties.normalQps));
    if (properties.period && (typeof properties.period) !== 'object') {
        errors.collect(ros.propertyValidator('period', ros.validateAllowedValues)({
            data: properties.period,
            allowedValues: [1, 2, 3, 4, 5, 6, 12, 24],
        }));
    }
    errors.collect(ros.propertyValidator('period', ros.validateNumber)(properties.period));
    if (properties.portCount && (typeof properties.portCount) !== 'object') {
        errors.collect(ros.propertyValidator('portCount', ros.validateRange)({
            data: properties.portCount,
            min: 50,
            max: 400,
        }));
    }
    errors.collect(ros.propertyValidator('portCount', ros.validateNumber)(properties.portCount));
    errors.collect(ros.propertyValidator('edition', ros.validateString)(properties.edition));
    if (properties.burstBandwidthMode && (typeof properties.burstBandwidthMode) !== 'object') {
        errors.collect(ros.propertyValidator('burstBandwidthMode', ros.validateAllowedValues)({
            data: properties.burstBandwidthMode,
            allowedValues: ["0", "1", "2"],
        }));
    }
    errors.collect(ros.propertyValidator('burstBandwidthMode', ros.validateString)(properties.burstBandwidthMode));
    if (properties.serviceBandwidth && (typeof properties.serviceBandwidth) !== 'object') {
        errors.collect(ros.propertyValidator('serviceBandwidth', ros.validateRange)({
            data: properties.serviceBandwidth,
            min: 100,
            max: 5000,
        }));
    }
    errors.collect(ros.propertyValidator('serviceBandwidth', ros.validateNumber)(properties.serviceBandwidth));
    errors.collect(ros.propertyValidator('servicePartner', ros.validateString)(properties.servicePartner));
    if (properties.baseBandwidth && (typeof properties.baseBandwidth) !== 'object') {
        errors.collect(ros.propertyValidator('baseBandwidth', ros.validateAllowedValues)({
            data: properties.baseBandwidth,
            allowedValues: [30, 60, 100, 300, 400, 500, 600],
        }));
    }
    errors.collect(ros.propertyValidator('baseBandwidth', ros.validateNumber)(properties.baseBandwidth));
    if (properties.functionVersion && (typeof properties.functionVersion) !== 'object') {
        errors.collect(ros.propertyValidator('functionVersion', ros.validateAllowedValues)({
            data: properties.functionVersion,
            allowedValues: ["0", "1"],
        }));
    }
    errors.collect(ros.propertyValidator('functionVersion', ros.validateString)(properties.functionVersion));
    errors.collect(ros.propertyValidator('bandwidth', ros.validateNumber)(properties.bandwidth));
    if (properties.addressType && (typeof properties.addressType) !== 'object') {
        errors.collect(ros.propertyValidator('addressType', ros.validateAllowedValues)({
            data: properties.addressType,
            allowedValues: ["Ipv4", "Ipv6"],
        }));
    }
    errors.collect(ros.propertyValidator('addressType', ros.validateString)(properties.addressType));
    if (properties.tags && (Array.isArray(properties.tags) || (typeof properties.tags) === 'string')) {
        errors.collect(ros.propertyValidator('tags', ros.validateLength)({
            data: properties.tags.length,
            min: undefined,
            max: 20,
        }));
    }
    errors.collect(ros.propertyValidator('tags', ros.listValidator(RosProInstance_TagsPropertyValidator))(properties.tags));
    if (properties.periodUnit && (typeof properties.periodUnit) !== 'object') {
        errors.collect(ros.propertyValidator('periodUnit', ros.validateAllowedValues)({
            data: properties.periodUnit,
            allowedValues: ["Month", "Year", "month", "year"],
        }));
    }
    errors.collect(ros.propertyValidator('periodUnit', ros.validateString)(properties.periodUnit));
    if (properties.domainCount && (typeof properties.domainCount) !== 'object') {
        errors.collect(ros.propertyValidator('domainCount', ros.validateRange)({
            data: properties.domainCount,
            min: 50,
            max: 2000,
        }));
    }
    errors.collect(ros.propertyValidator('domainCount', ros.validateNumber)(properties.domainCount));
    return errors.wrap('supplied properties not correct for "RosProInstanceProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::DDoSPro::ProInstance` resource
 *
 * @param properties - the TypeScript properties of a `RosProInstanceProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::DDoSPro::ProInstance` resource.
 */
// @ts-ignore TS6133
function rosProInstancePropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosProInstancePropsValidator(properties).assertSuccess();
    }
    return {
        'AddressType': ros.stringToRosTemplate(properties.addressType),
        'Bandwidth': ros.numberToRosTemplate(properties.bandwidth),
        'BaseBandwidth': ros.numberToRosTemplate(properties.baseBandwidth),
        'BurstBandwidthMode': ros.stringToRosTemplate(properties.burstBandwidthMode),
        'DomainCount': ros.numberToRosTemplate(properties.domainCount),
        'Edition': ros.stringToRosTemplate(properties.edition),
        'FunctionVersion': ros.stringToRosTemplate(properties.functionVersion),
        'NormalQps': ros.numberToRosTemplate(properties.normalQps),
        'Period': ros.numberToRosTemplate(properties.period),
        'PeriodUnit': ros.stringToRosTemplate(properties.periodUnit),
        'PortCount': ros.numberToRosTemplate(properties.portCount),
        'ServiceBandwidth': ros.numberToRosTemplate(properties.serviceBandwidth),
        'ServicePartner': ros.stringToRosTemplate(properties.servicePartner),
        'Tags': ros.listMapper(rosProInstanceTagsPropertyToRosTemplate)(properties.tags),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::DDoSPro::ProInstance`, which is used to create an Anti-DDoS Proxy (Chinese Mainland) instance.
 * @Note This class does not contain additional functions, so it is recommended to use the `ProInstance` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-ddospro-proinstance
 */
class RosProInstance extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosProInstance.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrArn = this.getAtt('Arn');
        this.attrInstanceId = this.getAtt('InstanceId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.addressType = props.addressType;
        this.bandwidth = props.bandwidth;
        this.baseBandwidth = props.baseBandwidth;
        this.burstBandwidthMode = props.burstBandwidthMode;
        this.domainCount = props.domainCount;
        this.edition = props.edition;
        this.functionVersion = props.functionVersion;
        this.normalQps = props.normalQps;
        this.period = props.period;
        this.periodUnit = props.periodUnit;
        this.portCount = props.portCount;
        this.serviceBandwidth = props.serviceBandwidth;
        this.servicePartner = props.servicePartner;
        this.tags = props.tags;
    }
    get rosProperties() {
        return {
            addressType: this.addressType,
            bandwidth: this.bandwidth,
            baseBandwidth: this.baseBandwidth,
            burstBandwidthMode: this.burstBandwidthMode,
            domainCount: this.domainCount,
            edition: this.edition,
            functionVersion: this.functionVersion,
            normalQps: this.normalQps,
            period: this.period,
            periodUnit: this.periodUnit,
            portCount: this.portCount,
            serviceBandwidth: this.serviceBandwidth,
            servicePartner: this.servicePartner,
            tags: this.tags,
        };
    }
    renderProperties(props) {
        return rosProInstancePropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosProInstance = RosProInstance;
/**
 * The resource type name for this resource class.
 */
RosProInstance.ROS_RESOURCE_TYPE_NAME = "ALIYUN::DDoSPro::ProInstance";
/**
 * Determine whether the given properties match those of a `TagsProperty`
 *
 * @param properties - the TypeScript properties of a `TagsProperty`
 *
 * @returns the result of the validation.
 */
function RosProInstance_TagsPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('value', ros.validateString)(properties.value));
    errors.collect(ros.propertyValidator('key', ros.requiredValidator)(properties.key));
    errors.collect(ros.propertyValidator('key', ros.validateString)(properties.key));
    return errors.wrap('supplied properties not correct for "TagsProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::DDoSPro::ProInstance.Tags` resource
 *
 * @param properties - the TypeScript properties of a `TagsProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::DDoSPro::ProInstance.Tags` resource.
 */
// @ts-ignore TS6133
function rosProInstanceTagsPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosProInstance_TagsPropertyValidator(properties).assertSuccess();
    return {
        'Value': ros.stringToRosTemplate(properties.value),
        'Key': ros.stringToRosTemplate(properties.key),
    };
}
/**
 * Determine whether the given properties match those of a `RosSceneDefensePolicyProps`
 *
 * @param properties - the TypeScript properties of a `RosSceneDefensePolicyProps`
 *
 * @returns the result of the validation.
 */
function RosSceneDefensePolicyPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('endTime', ros.requiredValidator)(properties.endTime));
    errors.collect(ros.propertyValidator('endTime', ros.validateNumber)(properties.endTime));
    errors.collect(ros.propertyValidator('startTime', ros.requiredValidator)(properties.startTime));
    errors.collect(ros.propertyValidator('startTime', ros.validateNumber)(properties.startTime));
    errors.collect(ros.propertyValidator('name', ros.requiredValidator)(properties.name));
    errors.collect(ros.propertyValidator('name', ros.validateString)(properties.name));
    errors.collect(ros.propertyValidator('template', ros.requiredValidator)(properties.template));
    if (properties.template && (typeof properties.template) !== 'object') {
        errors.collect(ros.propertyValidator('template', ros.validateAllowedValues)({
            data: properties.template,
            allowedValues: ["promotion", "bypass"],
        }));
    }
    errors.collect(ros.propertyValidator('template', ros.validateString)(properties.template));
    return errors.wrap('supplied properties not correct for "RosSceneDefensePolicyProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::DDoSPro::SceneDefensePolicy` resource
 *
 * @param properties - the TypeScript properties of a `RosSceneDefensePolicyProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::DDoSPro::SceneDefensePolicy` resource.
 */
// @ts-ignore TS6133
function rosSceneDefensePolicyPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosSceneDefensePolicyPropsValidator(properties).assertSuccess();
    }
    return {
        'EndTime': ros.numberToRosTemplate(properties.endTime),
        'Name': ros.stringToRosTemplate(properties.name),
        'StartTime': ros.numberToRosTemplate(properties.startTime),
        'Template': ros.stringToRosTemplate(properties.template),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::DDoSPro::SceneDefensePolicy`, which is used to create a scenario-specific custom policy.
 * @Note This class does not contain additional functions, so it is recommended to use the `SceneDefensePolicy` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-ddospro-scenedefensepolicy
 */
class RosSceneDefensePolicy extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosSceneDefensePolicy.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrName = this.getAtt('Name');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.endTime = props.endTime;
        this.name = props.name;
        this.startTime = props.startTime;
        this.template = props.template;
    }
    get rosProperties() {
        return {
            endTime: this.endTime,
            name: this.name,
            startTime: this.startTime,
            template: this.template,
        };
    }
    renderProperties(props) {
        return rosSceneDefensePolicyPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosSceneDefensePolicy = RosSceneDefensePolicy;
/**
 * The resource type name for this resource class.
 */
RosSceneDefensePolicy.ROS_RESOURCE_TYPE_NAME = "ALIYUN::DDoSPro::SceneDefensePolicy";
/**
 * Determine whether the given properties match those of a `RosSchedulerRuleProps`
 *
 * @param properties - the TypeScript properties of a `RosSchedulerRuleProps`
 *
 * @returns the result of the validation.
 */
function RosSchedulerRulePropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('resourceGroupId', ros.validateString)(properties.resourceGroupId));
    errors.collect(ros.propertyValidator('param', ros.validateString)(properties.param));
    errors.collect(ros.propertyValidator('ruleType', ros.requiredValidator)(properties.ruleType));
    if (properties.ruleType && (typeof properties.ruleType) !== 'object') {
        errors.collect(ros.propertyValidator('ruleType', ros.validateAllowedValues)({
            data: properties.ruleType,
            allowedValues: [2, 3, 5, 6, 8],
        }));
    }
    errors.collect(ros.propertyValidator('ruleType', ros.validateNumber)(properties.ruleType));
    errors.collect(ros.propertyValidator('rules', ros.requiredValidator)(properties.rules));
    errors.collect(ros.propertyValidator('rules', ros.validateString)(properties.rules));
    errors.collect(ros.propertyValidator('ruleName', ros.requiredValidator)(properties.ruleName));
    errors.collect(ros.propertyValidator('ruleName', ros.validateString)(properties.ruleName));
    return errors.wrap('supplied properties not correct for "RosSchedulerRuleProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::DDoSPro::SchedulerRule` resource
 *
 * @param properties - the TypeScript properties of a `RosSchedulerRuleProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::DDoSPro::SchedulerRule` resource.
 */
// @ts-ignore TS6133
function rosSchedulerRulePropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosSchedulerRulePropsValidator(properties).assertSuccess();
    }
    return {
        'RuleName': ros.stringToRosTemplate(properties.ruleName),
        'Rules': ros.stringToRosTemplate(properties.rules),
        'RuleType': ros.numberToRosTemplate(properties.ruleType),
        'Param': ros.stringToRosTemplate(properties.param),
        'ResourceGroupId': ros.stringToRosTemplate(properties.resourceGroupId),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::DDoSPro::SchedulerRule`, which is used to create a scheduling rule for Sec-Traffic Manager.
 * @Note This class does not contain additional functions, so it is recommended to use the `SchedulerRule` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-ddospro-schedulerrule
 */
class RosSchedulerRule extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosSchedulerRule.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrRuleName = this.getAtt('RuleName');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.ruleName = props.ruleName;
        this.rules = props.rules;
        this.ruleType = props.ruleType;
        this.param = props.param;
        this.resourceGroupId = props.resourceGroupId;
    }
    get rosProperties() {
        return {
            ruleName: this.ruleName,
            rules: this.rules,
            ruleType: this.ruleType,
            param: this.param,
            resourceGroupId: this.resourceGroupId,
        };
    }
    renderProperties(props) {
        return rosSchedulerRulePropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosSchedulerRule = RosSchedulerRule;
/**
 * The resource type name for this resource class.
 */
RosSchedulerRule.ROS_RESOURCE_TYPE_NAME = "ALIYUN::DDoSPro::SchedulerRule";
/**
 * Determine whether the given properties match those of a `RosWebRuleProps`
 *
 * @param properties - the TypeScript properties of a `RosWebRuleProps`
 *
 * @returns the result of the validation.
 */
function RosWebRulePropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('rsType', ros.requiredValidator)(properties.rsType));
    if (properties.rsType && (typeof properties.rsType) !== 'object') {
        errors.collect(ros.propertyValidator('rsType', ros.validateAllowedValues)({
            data: properties.rsType,
            allowedValues: [0, 1],
        }));
    }
    errors.collect(ros.propertyValidator('rsType', ros.validateNumber)(properties.rsType));
    errors.collect(ros.propertyValidator('resourceGroupId', ros.validateString)(properties.resourceGroupId));
    errors.collect(ros.propertyValidator('defenseId', ros.validateString)(properties.defenseId));
    errors.collect(ros.propertyValidator('domain', ros.requiredValidator)(properties.domain));
    errors.collect(ros.propertyValidator('domain', ros.validateString)(properties.domain));
    if (properties.instanceIds && (Array.isArray(properties.instanceIds) || (typeof properties.instanceIds) === 'string')) {
        errors.collect(ros.propertyValidator('instanceIds', ros.validateLength)({
            data: properties.instanceIds.length,
            min: 0,
            max: 100,
        }));
    }
    errors.collect(ros.propertyValidator('instanceIds', ros.listValidator(ros.validateString))(properties.instanceIds));
    errors.collect(ros.propertyValidator('rules', ros.requiredValidator)(properties.rules));
    errors.collect(ros.propertyValidator('rules', ros.validateString)(properties.rules));
    errors.collect(ros.propertyValidator('httpsExt', ros.validateString)(properties.httpsExt));
    return errors.wrap('supplied properties not correct for "RosWebRuleProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::DDoSPro::WebRule` resource
 *
 * @param properties - the TypeScript properties of a `RosWebRuleProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::DDoSPro::WebRule` resource.
 */
// @ts-ignore TS6133
function rosWebRulePropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosWebRulePropsValidator(properties).assertSuccess();
    }
    return {
        'Domain': ros.stringToRosTemplate(properties.domain),
        'RsType': ros.numberToRosTemplate(properties.rsType),
        'Rules': ros.stringToRosTemplate(properties.rules),
        'DefenseId': ros.stringToRosTemplate(properties.defenseId),
        'HttpsExt': ros.stringToRosTemplate(properties.httpsExt),
        'InstanceIds': ros.listMapper(ros.stringToRosTemplate)(properties.instanceIds),
        'ResourceGroupId': ros.stringToRosTemplate(properties.resourceGroupId),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::DDoSPro::WebRule`, which is used to create a forwarding rule for a website.
 * @Note This class does not contain additional functions, so it is recommended to use the `WebRule` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-ddospro-webrule
 */
class RosWebRule extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosWebRule.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrDomain = this.getAtt('Domain');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.domain = props.domain;
        this.rsType = props.rsType;
        this.rules = props.rules;
        this.defenseId = props.defenseId;
        this.httpsExt = props.httpsExt;
        this.instanceIds = props.instanceIds;
        this.resourceGroupId = props.resourceGroupId;
    }
    get rosProperties() {
        return {
            domain: this.domain,
            rsType: this.rsType,
            rules: this.rules,
            defenseId: this.defenseId,
            httpsExt: this.httpsExt,
            instanceIds: this.instanceIds,
            resourceGroupId: this.resourceGroupId,
        };
    }
    renderProperties(props) {
        return rosWebRulePropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosWebRule = RosWebRule;
/**
 * The resource type name for this resource class.
 */
RosWebRule.ROS_RESOURCE_TYPE_NAME = "ALIYUN::DDoSPro::WebRule";
//# sourceMappingURL=data:application/json;base64,