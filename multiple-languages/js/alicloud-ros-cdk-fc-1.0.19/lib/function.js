"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Function = exports.FunctionProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const fc_generated_1 = require("./fc.generated");
Object.defineProperty(exports, "FunctionProperty", { enumerable: true, get: function () { return fc_generated_1.RosFunction; } });
/**
 * A ROS resource type:  `ALIYUN::FC::Function`
 */
class Function extends ros.Resource {
    /**
     * Create a new `ALIYUN::FC::Function`.
     *
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosFunction = new fc_generated_1.RosFunction(this, id, {
            memorySize: props.memorySize === undefined || props.memorySize === null ? 128 : props.memorySize,
            description: props.description,
            timeout: props.timeout === undefined || props.timeout === null ? 3 : props.timeout,
            instanceLifecycleConfig: props.instanceLifecycleConfig,
            handler: props.handler,
            cpu: props.cpu,
            customHealthCheckConfig: props.customHealthCheckConfig,
            customContainerConfig: props.customContainerConfig,
            code: props.code,
            asyncConfiguration: props.asyncConfiguration,
            caPort: props.caPort === undefined || props.caPort === null ? 9000 : props.caPort,
            functionName: props.functionName,
            runtime: props.runtime,
            environmentVariables: props.environmentVariables,
            customRuntimeConfig: props.customRuntimeConfig,
            initializationTimeout: props.initializationTimeout,
            serviceName: props.serviceName,
            initializer: props.initializer,
            gpuMemorySize: props.gpuMemorySize,
            diskSize: props.diskSize,
            customDns: props.customDns,
            instanceConcurrency: props.instanceConcurrency,
            instanceType: props.instanceType,
            instanceSoftConcurrency: props.instanceSoftConcurrency,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosFunction;
        this.attrArn = rosFunction.attrArn;
        this.attrFunctionId = rosFunction.attrFunctionId;
        this.attrFunctionName = rosFunction.attrFunctionName;
        this.attrServiceId = rosFunction.attrServiceId;
        this.attrServiceName = rosFunction.attrServiceName;
    }
}
exports.Function = Function;
//# sourceMappingURL=data:application/json;base64,