"use strict";
// Generated from the AliCloud ROS Resource Specification
Object.defineProperty(exports, "__esModule", { value: true });
exports.RosProjects = exports.RosLogstores = void 0;
const ros = require("@alicloud/ros-cdk-core");
/**
 * Determine whether the given properties match those of a `RosLogstoresProps`
 *
 * @param properties - the TypeScript properties of a `RosLogstoresProps`
 *
 * @returns the result of the validation.
 */
function RosLogstoresPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('project', ros.requiredValidator)(properties.project));
    errors.collect(ros.propertyValidator('project', ros.validateString)(properties.project));
    errors.collect(ros.propertyValidator('logstoreName', ros.validateString)(properties.logstoreName));
    return errors.wrap('supplied properties not correct for "RosLogstoresProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `DATASOURCE::SLS::Logstores` resource
 *
 * @param properties - the TypeScript properties of a `RosLogstoresProps`
 *
 * @returns the AliCloud ROS Resource properties of an `DATASOURCE::SLS::Logstores` resource.
 */
// @ts-ignore TS6133
function rosLogstoresPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosLogstoresPropsValidator(properties).assertSuccess();
    }
    return {
        Project: ros.stringToRosTemplate(properties.project),
        LogstoreName: ros.stringToRosTemplate(properties.logstoreName),
    };
}
/**
 * A ROS template type:  `DATASOURCE::SLS::Logstores`
 */
class RosLogstores extends ros.RosResource {
    /**
     * Create a new `DATASOURCE::SLS::Logstores`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosLogstores.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrLogstores = this.getAtt('Logstores');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.project = props.project;
        this.logstoreName = props.logstoreName;
    }
    get rosProperties() {
        return {
            project: this.project,
            logstoreName: this.logstoreName,
        };
    }
    renderProperties(props) {
        return rosLogstoresPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosLogstores = RosLogstores;
/**
 * The resource type name for this resource class.
 */
RosLogstores.ROS_RESOURCE_TYPE_NAME = "DATASOURCE::SLS::Logstores";
/**
 * Determine whether the given properties match those of a `RosProjectsProps`
 *
 * @param properties - the TypeScript properties of a `RosProjectsProps`
 *
 * @returns the result of the validation.
 */
function RosProjectsPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    return errors.wrap('supplied properties not correct for "RosProjectsProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `DATASOURCE::SLS::Projects` resource
 *
 * @param properties - the TypeScript properties of a `RosProjectsProps`
 *
 * @returns the AliCloud ROS Resource properties of an `DATASOURCE::SLS::Projects` resource.
 */
// @ts-ignore TS6133
function rosProjectsPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosProjectsPropsValidator(properties).assertSuccess();
    }
    return {};
}
/**
 * A ROS template type:  `DATASOURCE::SLS::Projects`
 */
class RosProjects extends ros.RosResource {
    /**
     * Create a new `DATASOURCE::SLS::Projects`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosProjects.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrProjectNames = this.getAtt('ProjectNames');
        this.attrProjects = this.getAtt('Projects');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
    }
    get rosProperties() {
        return {};
    }
    renderProperties(props) {
        return rosProjectsPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosProjects = RosProjects;
/**
 * The resource type name for this resource class.
 */
RosProjects.ROS_RESOURCE_TYPE_NAME = "DATASOURCE::SLS::Projects";
//# sourceMappingURL=data:application/json;base64,