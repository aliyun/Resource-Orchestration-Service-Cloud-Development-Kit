"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Secret = exports.SecretProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const kms_generated_1 = require("./kms.generated");
Object.defineProperty(exports, "SecretProperty", { enumerable: true, get: function () { return kms_generated_1.RosSecret; } });
/**
 * This class encapsulates and extends the ROS resource type `DATASOURCE::KMS::Secret`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosSecret`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/datasource-kms-secret
 */
class Secret extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosSecret = new kms_generated_1.RosSecret(this, id, {
            secretName: props.secretName,
            refreshOptions: props.refreshOptions === undefined || props.refreshOptions === null ? 'Never' : props.refreshOptions,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosSecret;
        this.attrArn = rosSecret.attrArn;
        this.attrAutomaticRotation = rosSecret.attrAutomaticRotation;
        this.attrCreateTime = rosSecret.attrCreateTime;
        this.attrDkmsInstanceId = rosSecret.attrDkmsInstanceId;
        this.attrDescription = rosSecret.attrDescription;
        this.attrEncryptionKeyId = rosSecret.attrEncryptionKeyId;
        this.attrExtendedConfig = rosSecret.attrExtendedConfig;
        this.attrLastRotationDate = rosSecret.attrLastRotationDate;
        this.attrNextRotationDate = rosSecret.attrNextRotationDate;
        this.attrPlannedDeleteTime = rosSecret.attrPlannedDeleteTime;
        this.attrRotationInterval = rosSecret.attrRotationInterval;
        this.attrSecretName = rosSecret.attrSecretName;
        this.attrSecretType = rosSecret.attrSecretType;
        this.attrUpdateTime = rosSecret.attrUpdateTime;
    }
}
exports.Secret = Secret;
//# sourceMappingURL=data:application/json;base64,