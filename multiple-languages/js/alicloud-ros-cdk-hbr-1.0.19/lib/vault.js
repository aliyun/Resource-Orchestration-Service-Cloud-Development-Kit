"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Vault = exports.VaultProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const hbr_generated_1 = require("./hbr.generated");
Object.defineProperty(exports, "VaultProperty", { enumerable: true, get: function () { return hbr_generated_1.RosVault; } });
/**
 * A ROS resource type:  `ALIYUN::HBR::Vault`
 */
class Vault extends ros.Resource {
    /**
     * Create a new `ALIYUN::HBR::Vault`.
     *
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosVault = new hbr_generated_1.RosVault(this, id, {
            vaultType: props.vaultType,
            description: props.description,
            encryptType: props.encryptType,
            resourceGroupId: props.resourceGroupId,
            kmsKeyId: props.kmsKeyId,
            vaultName: props.vaultName,
            redundancyType: props.redundancyType,
            vaultStorageClass: props.vaultStorageClass,
            tags: props.tags,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosVault;
        this.attrBackupPlanStatistics = rosVault.attrBackupPlanStatistics;
        this.attrBytesDone = rosVault.attrBytesDone;
        this.attrCreateTime = rosVault.attrCreateTime;
        this.attrDedup = rosVault.attrDedup;
        this.attrDescription = rosVault.attrDescription;
        this.attrIndexAvailable = rosVault.attrIndexAvailable;
        this.attrIndexLevel = rosVault.attrIndexLevel;
        this.attrIndexUpdateTime = rosVault.attrIndexUpdateTime;
        this.attrLatestReplicationTime = rosVault.attrLatestReplicationTime;
        this.attrPaymentType = rosVault.attrPaymentType;
        this.attrRedundancyType = rosVault.attrRedundancyType;
        this.attrReplication = rosVault.attrReplication;
        this.attrReplicationProgress = rosVault.attrReplicationProgress;
        this.attrReplicationSourceRegionId = rosVault.attrReplicationSourceRegionId;
        this.attrReplicationSourceVaultId = rosVault.attrReplicationSourceVaultId;
        this.attrResourceGroupId = rosVault.attrResourceGroupId;
        this.attrRetention = rosVault.attrRetention;
        this.attrSearchEnabled = rosVault.attrSearchEnabled;
        this.attrSourceTypes = rosVault.attrSourceTypes;
        this.attrStorageSize = rosVault.attrStorageSize;
        this.attrTags = rosVault.attrTags;
        this.attrTrialInfo = rosVault.attrTrialInfo;
        this.attrUpdatedTime = rosVault.attrUpdatedTime;
        this.attrVaultId = rosVault.attrVaultId;
        this.attrVaultName = rosVault.attrVaultName;
        this.attrVaultStatusMessage = rosVault.attrVaultStatusMessage;
        this.attrVaultStorageClass = rosVault.attrVaultStorageClass;
        this.attrVaultType = rosVault.attrVaultType;
    }
}
exports.Vault = Vault;
//# sourceMappingURL=data:application/json;base64,