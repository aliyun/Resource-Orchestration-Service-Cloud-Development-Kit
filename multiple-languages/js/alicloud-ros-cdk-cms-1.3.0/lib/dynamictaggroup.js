"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DynamicTagGroup = exports.DynamicTagGroupProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const cms_generated_1 = require("./cms.generated");
Object.defineProperty(exports, "DynamicTagGroupProperty", { enumerable: true, get: function () { return cms_generated_1.RosDynamicTagGroup; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::CMS::DynamicTagGroup`, which is used to create a tag rule based on which cloud resources are automatically added to an application group.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosDynamicTagGroup`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-cms-dynamictaggroup
 */
class DynamicTagGroup extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosDynamicTagGroup = new cms_generated_1.RosDynamicTagGroup(this, id, {
            contactGroupList: props.contactGroupList,
            matchExpressFilterRelation: props.matchExpressFilterRelation,
            enableSubscribeEvent: props.enableSubscribeEvent,
            templateIdList: props.templateIdList,
            tagKey: props.tagKey,
            enableInstallAgent: props.enableInstallAgent,
            matchExpress: props.matchExpress,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosDynamicTagGroup;
        this.attrDynamicTagRuleId = rosDynamicTagGroup.attrDynamicTagRuleId;
        this.attrTagKey = rosDynamicTagGroup.attrTagKey;
    }
}
exports.DynamicTagGroup = DynamicTagGroup;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pY3RhZ2dyb3VwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZHluYW1pY3RhZ2dyb3VwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDhDQUE4QztBQUM5QyxtREFBcUQ7QUFFdEIsd0dBRnRCLGtDQUFrQixPQUUyQjtBQXFEdEQ7Ozs7R0FJRztBQUNILE1BQWEsZUFBZ0IsU0FBUSxHQUFHLENBQUMsUUFBUTtJQWdCN0M7Ozs7T0FJRztJQUNILFlBQVksS0FBb0IsRUFBRSxFQUFVLEVBQUUsS0FBMkIsRUFBRSxtQ0FBMkMsSUFBSTtRQUN0SCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ2pCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQ2IsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLGdDQUFnQyxHQUFHLGdDQUFnQyxDQUFDO1FBRXpFLE1BQU0sa0JBQWtCLEdBQUcsSUFBSSxrQ0FBa0IsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFHO1lBQ3pELGdCQUFnQixFQUFFLEtBQUssQ0FBQyxnQkFBZ0I7WUFDeEMsMEJBQTBCLEVBQUUsS0FBSyxDQUFDLDBCQUEwQjtZQUM1RCxvQkFBb0IsRUFBRSxLQUFLLENBQUMsb0JBQW9CO1lBQ2hELGNBQWMsRUFBRSxLQUFLLENBQUMsY0FBYztZQUNwQyxNQUFNLEVBQUUsS0FBSyxDQUFDLE1BQU07WUFDcEIsa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGtCQUFrQjtZQUM1QyxZQUFZLEVBQUUsS0FBSyxDQUFDLFlBQVk7U0FDbkMsRUFBRSxnQ0FBZ0MsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7UUFDcEYsSUFBSSxDQUFDLFFBQVEsR0FBRyxrQkFBa0IsQ0FBQztRQUNuQyxJQUFJLENBQUMsb0JBQW9CLEdBQUcsa0JBQWtCLENBQUMsb0JBQW9CLENBQUM7UUFDcEUsSUFBSSxDQUFDLFVBQVUsR0FBRyxrQkFBa0IsQ0FBQyxVQUFVLENBQUM7SUFDcEQsQ0FBQztDQUNKO0FBekNELDBDQXlDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHJvcyBmcm9tICdAYWxpY2xvdWQvcm9zLWNkay1jb3JlJztcbmltcG9ydCB7IFJvc0R5bmFtaWNUYWdHcm91cCB9IGZyb20gJy4vY21zLmdlbmVyYXRlZCc7XG4vLyBHZW5lcmF0ZWQgZnJvbSB0aGUgQWxpQ2xvdWQgUk9TIFJlc291cmNlIFNwZWNpZmljYXRpb25cbmV4cG9ydCB7IFJvc0R5bmFtaWNUYWdHcm91cCBhcyBEeW5hbWljVGFnR3JvdXBQcm9wZXJ0eSB9O1xuXG4vKipcbiAqIFByb3BlcnRpZXMgZm9yIGRlZmluaW5nIGEgYER5bmFtaWNUYWdHcm91cGAuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2FsaXl1bi1jbXMtZHluYW1pY3RhZ2dyb3VwXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRHluYW1pY1RhZ0dyb3VwUHJvcHMge1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgY29udGFjdEdyb3VwTGlzdDogQWxhcm0gY29udGFjdHMuXG4gICAgICovXG4gICAgcmVhZG9ubHkgY29udGFjdEdyb3VwTGlzdDogQXJyYXk8c3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlPiB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHRhZ0tleTogVGFnIGtleS5cbiAgICAgKi9cbiAgICByZWFkb25seSB0YWdLZXk6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGVuYWJsZUluc3RhbGxBZ2VudDogV2hldGhlciB0byBlbmFibGUgaW5pdGlhbCBpbnN0YWxsYXRpb24gbW9uaXRvcmluZyBwbHVnLCBub3QgaW5zdGFsbGVkIGJ5IGRlZmF1bHQuIFZhbHVlcyBhcmU6XG4gICAgICogdHJ1ZTogZW5hYmxlIGluc3RhbGxhdGlvblxuICAgICAqIE5vdGUgSWYgRUNTIGdlbmVyYXRlZCBpbnN0YW5jZXMgZ3JvdXAgZG9lcyBub3QgbW9uaXRvciBwbHVnLWluIGluc3RhbGxlZCB3aWxsIGF0dGVtcHQgdG8gYXV0b21hdGljYWxseSBpbnN0YWxsLlxuICAgICAqIGZhbHNlOiBkaXNhYmxlIGluc3RhbGxhdGlvblxuICAgICAqL1xuICAgIHJlYWRvbmx5IGVuYWJsZUluc3RhbGxBZ2VudD86IGJvb2xlYW4gfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBlbmFibGVTdWJzY3JpYmVFdmVudDogV2hldGhlciB0aGUgZXZlbnQgc3Vic2NyaXB0aW9uIGlzIGVuYWJsZWQuIFZhbHVlcyBhcmVcbiAgICAgKiA6dHJ1ZTogZW5hYmxlIGV2ZW50IHN1YnNjcmlwdGlvblxuICAgICAqIGZhbHNlOiBkaXNhYmxlIGV2ZW50IHN1YnNjcmlwdGlvblxuICAgICAqL1xuICAgIHJlYWRvbmx5IGVuYWJsZVN1YnNjcmliZUV2ZW50PzogYm9vbGVhbiB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IG1hdGNoRXhwcmVzczogTWF0Y2hpbmcgbGlzdC4gT25seSBzdXBwb3J0cyBvbmUgY3VycmVudGx5LlxuICAgICAqL1xuICAgIHJlYWRvbmx5IG1hdGNoRXhwcmVzcz86IEFycmF5PFJvc0R5bmFtaWNUYWdHcm91cC5NYXRjaEV4cHJlc3NQcm9wZXJ0eSB8IHJvcy5JUmVzb2x2YWJsZT4gfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBtYXRjaEV4cHJlc3NGaWx0ZXJSZWxhdGlvbjogVGhlIHJlbGF0aW9uc2hpcCBiZXR3ZWVuIHRoZSBjb25kaXRpb25hbCBleHByZXNzaW9ucy4gVmFsdWVzIGFyZTpcbiAgICAgKiBhbmQ6IHRoZSByZWxhdGlvbnNoaXAgYmV0d2VlblxuICAgICAqIG9yOiB0aGUgcmVsYXRpb25zaGlwIG9yIHRoZVxuICAgICAqIERlc2NyaXB0aW9uIGN1cnJlbnRseSBzdXBwb3J0cyBvbmx5IG9uZSBjb21iaW5hdGlvbiBvZiBjb25kaXRpb25zLCB0aGUgZm9sbG93LXVwIEFsaSBjbG91ZCB3aWxsIHN1cHBvcnQgYSB2YXJpZXR5IG9mIGNvbWJpbmF0aW9ucyBvZiBjb25kaXRpb25zLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IG1hdGNoRXhwcmVzc0ZpbHRlclJlbGF0aW9uPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgdGVtcGxhdGVJZExpc3Q6IEFsYXJtIHRlbXBsYXRlIElEIGxpc3QuXG4gICAgICogV2hlbiB0aGUgYXV0b21hdGljYWxseSBnZW5lcmF0ZWQgYXBwbGljYXRpb24gZ3JvdXAgc3luY2hyb25pemVzIHRhZ3MsIGl0IHdpbGwgZ2VuZXJhdGUgYWxhcm0gcnVsZXMgYWNjb3JkaW5nIHRvIHRoZSBzcGVjaWZpZWQgYWxhcm0gdGVtcGxhdGUuXG4gICAgICovXG4gICAgcmVhZG9ubHkgdGVtcGxhdGVJZExpc3Q/OiBBcnJheTxzdHJpbmcgfCByb3MuSVJlc29sdmFibGU+IHwgcm9zLklSZXNvbHZhYmxlO1xufVxuXG4vKipcbiAqIFRoaXMgY2xhc3MgZW5jYXBzdWxhdGVzIGFuZCBleHRlbmRzIHRoZSBST1MgcmVzb3VyY2UgdHlwZSBgQUxJWVVOOjpDTVM6OkR5bmFtaWNUYWdHcm91cGAsIHdoaWNoIGlzIHVzZWQgdG8gY3JlYXRlIGEgdGFnIHJ1bGUgYmFzZWQgb24gd2hpY2ggY2xvdWQgcmVzb3VyY2VzIGFyZSBhdXRvbWF0aWNhbGx5IGFkZGVkIHRvIGFuIGFwcGxpY2F0aW9uIGdyb3VwLlxuICogQE5vdGUgVGhpcyBjbGFzcyBtYXkgaGF2ZSBzb21lIG5ldyBmdW5jdGlvbnMgdG8gZmFjaWxpdGF0ZSBkZXZlbG9wbWVudCwgc28gaXQgaXMgcmVjb21tZW5kZWQgdG8gdXNlIHRoaXMgY2xhc3MgaW5zdGVhZCBvZiBgUm9zRHluYW1pY1RhZ0dyb3VwYGZvciBhIG1vcmUgY29udmVuaWVudCBkZXZlbG9wbWVudCBleHBlcmllbmNlLlxuICogU2VlIGh0dHBzOi8vd3d3LmFsaWJhYmFjbG91ZC5jb20vaGVscC9yb3MvZGV2ZWxvcGVyLXJlZmVyZW5jZS9hbGl5dW4tY21zLWR5bmFtaWN0YWdncm91cFxuICovXG5leHBvcnQgY2xhc3MgRHluYW1pY1RhZ0dyb3VwIGV4dGVuZHMgcm9zLlJlc291cmNlIHtcbiAgICBwcm90ZWN0ZWQgc2NvcGU6IHJvcy5Db25zdHJ1Y3Q7XG4gICAgcHJvdGVjdGVkIGlkOiBzdHJpbmc7XG4gICAgcHJvdGVjdGVkIHByb3BzOiBEeW5hbWljVGFnR3JvdXBQcm9wcztcbiAgICBwcm90ZWN0ZWQgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6IGJvb2xlYW47XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgRHluYW1pY1RhZ1J1bGVJZDogRHluYW1pYyB0YWcgcnVsZSBJRC5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckR5bmFtaWNUYWdSdWxlSWQ6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBUYWdLZXk6IFRhZyBrZXkuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJUYWdLZXk6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFBhcmFtIHNjb3BlIC0gc2NvcGUgaW4gd2hpY2ggdGhpcyByZXNvdXJjZSBpcyBkZWZpbmVkXG4gICAgICogUGFyYW0gaWQgICAgLSBzY29wZWQgaWQgb2YgdGhlIHJlc291cmNlXG4gICAgICogUGFyYW0gcHJvcHMgLSByZXNvdXJjZSBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IHJvcy5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBEeW5hbWljVGFnR3JvdXBQcm9wcywgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6Ym9vbGVhbiA9IHRydWUpIHtcbiAgICAgICAgc3VwZXIoc2NvcGUsIGlkKTtcbiAgICAgICAgdGhpcy5zY29wZSA9IHNjb3BlO1xuICAgICAgICB0aGlzLmlkID0gaWQ7XG4gICAgICAgIHRoaXMucHJvcHMgPSBwcm9wcztcbiAgICAgICAgdGhpcy5lbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCA9IGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50O1xuXG4gICAgICAgIGNvbnN0IHJvc0R5bmFtaWNUYWdHcm91cCA9IG5ldyBSb3NEeW5hbWljVGFnR3JvdXAodGhpcywgaWQsICB7XG4gICAgICAgICAgICBjb250YWN0R3JvdXBMaXN0OiBwcm9wcy5jb250YWN0R3JvdXBMaXN0LFxuICAgICAgICAgICAgbWF0Y2hFeHByZXNzRmlsdGVyUmVsYXRpb246IHByb3BzLm1hdGNoRXhwcmVzc0ZpbHRlclJlbGF0aW9uLFxuICAgICAgICAgICAgZW5hYmxlU3Vic2NyaWJlRXZlbnQ6IHByb3BzLmVuYWJsZVN1YnNjcmliZUV2ZW50LFxuICAgICAgICAgICAgdGVtcGxhdGVJZExpc3Q6IHByb3BzLnRlbXBsYXRlSWRMaXN0LFxuICAgICAgICAgICAgdGFnS2V5OiBwcm9wcy50YWdLZXksXG4gICAgICAgICAgICBlbmFibGVJbnN0YWxsQWdlbnQ6IHByb3BzLmVuYWJsZUluc3RhbGxBZ2VudCxcbiAgICAgICAgICAgIG1hdGNoRXhwcmVzczogcHJvcHMubWF0Y2hFeHByZXNzLFxuICAgICAgICB9LCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCAmJiB0aGlzLnN0YWNrLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50KTtcbiAgICAgICAgdGhpcy5yZXNvdXJjZSA9IHJvc0R5bmFtaWNUYWdHcm91cDtcbiAgICAgICAgdGhpcy5hdHRyRHluYW1pY1RhZ1J1bGVJZCA9IHJvc0R5bmFtaWNUYWdHcm91cC5hdHRyRHluYW1pY1RhZ1J1bGVJZDtcbiAgICAgICAgdGhpcy5hdHRyVGFnS2V5ID0gcm9zRHluYW1pY1RhZ0dyb3VwLmF0dHJUYWdLZXk7XG4gICAgfVxufVxuIl19