"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Ipv4Gateway = exports.Ipv4GatewayProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const vpc_generated_1 = require("./vpc.generated");
Object.defineProperty(exports, "Ipv4GatewayProperty", { enumerable: true, get: function () { return vpc_generated_1.RosIpv4Gateway; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::VPC::Ipv4Gateway`, which is used to create an IPv4 gateway.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosIpv4Gateway`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-vpc-ipv4gateway
 */
class Ipv4Gateway extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosIpv4Gateway = new vpc_generated_1.RosIpv4Gateway(this, id, {
            ipv4GatewayName: props.ipv4GatewayName,
            vpcId: props.vpcId,
            ipv4GatewayDescription: props.ipv4GatewayDescription,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosIpv4Gateway;
        this.attrCreateTime = rosIpv4Gateway.attrCreateTime;
        this.attrIpv4GatewayDescription = rosIpv4Gateway.attrIpv4GatewayDescription;
        this.attrIpv4GatewayId = rosIpv4Gateway.attrIpv4GatewayId;
        this.attrIpv4GatewayName = rosIpv4Gateway.attrIpv4GatewayName;
        this.attrIpv4GatewayRouteTableId = rosIpv4Gateway.attrIpv4GatewayRouteTableId;
        this.attrVpcId = rosIpv4Gateway.attrVpcId;
    }
}
exports.Ipv4Gateway = Ipv4Gateway;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXB2NGdhdGV3YXkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpcHY0Z2F0ZXdheS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw4Q0FBOEM7QUFDOUMsbURBQWlEO0FBRXRCLG9HQUZsQiw4QkFBYyxPQUV1QjtBQXdCOUM7Ozs7R0FJRztBQUNILE1BQWEsV0FBWSxTQUFRLEdBQUcsQ0FBQyxRQUFRO0lBZ0N6Qzs7OztPQUlHO0lBQ0gsWUFBWSxLQUFvQixFQUFFLEVBQVUsRUFBRSxLQUF1QixFQUFFLG1DQUEyQyxJQUFJO1FBQ2xILEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFakIsTUFBTSxjQUFjLEdBQUcsSUFBSSw4QkFBYyxDQUFDLElBQUksRUFBRSxFQUFFLEVBQUc7WUFDakQsZUFBZSxFQUFFLEtBQUssQ0FBQyxlQUFlO1lBQ3RDLEtBQUssRUFBRSxLQUFLLENBQUMsS0FBSztZQUNsQixzQkFBc0IsRUFBRSxLQUFLLENBQUMsc0JBQXNCO1NBQ3ZELEVBQUUsZ0NBQWdDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO1FBQ3BGLElBQUksQ0FBQyxRQUFRLEdBQUcsY0FBYyxDQUFDO1FBQy9CLElBQUksQ0FBQyxjQUFjLEdBQUcsY0FBYyxDQUFDLGNBQWMsQ0FBQztRQUNwRCxJQUFJLENBQUMsMEJBQTBCLEdBQUcsY0FBYyxDQUFDLDBCQUEwQixDQUFDO1FBQzVFLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxjQUFjLENBQUMsaUJBQWlCLENBQUM7UUFDMUQsSUFBSSxDQUFDLG1CQUFtQixHQUFHLGNBQWMsQ0FBQyxtQkFBbUIsQ0FBQztRQUM5RCxJQUFJLENBQUMsMkJBQTJCLEdBQUcsY0FBYyxDQUFDLDJCQUEyQixDQUFDO1FBQzlFLElBQUksQ0FBQyxTQUFTLEdBQUcsY0FBYyxDQUFDLFNBQVMsQ0FBQztJQUM5QyxDQUFDO0NBQ0o7QUFyREQsa0NBcURDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcm9zIGZyb20gJ0BhbGljbG91ZC9yb3MtY2RrLWNvcmUnO1xuaW1wb3J0IHsgUm9zSXB2NEdhdGV3YXkgfSBmcm9tICcuL3ZwYy5nZW5lcmF0ZWQnO1xuLy8gR2VuZXJhdGVkIGZyb20gdGhlIEFsaUNsb3VkIFJPUyBSZXNvdXJjZSBTcGVjaWZpY2F0aW9uXG5leHBvcnQgeyBSb3NJcHY0R2F0ZXdheSBhcyBJcHY0R2F0ZXdheVByb3BlcnR5IH07XG5cbi8qKlxuICogUHJvcGVydGllcyBmb3IgZGVmaW5pbmcgYSBgSXB2NEdhdGV3YXlgLlxuICogU2VlIGh0dHBzOi8vd3d3LmFsaWJhYmFjbG91ZC5jb20vaGVscC9yb3MvZGV2ZWxvcGVyLXJlZmVyZW5jZS9hbGl5dW4tdnBjLWlwdjRnYXRld2F5XG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSXB2NEdhdGV3YXlQcm9wcyB7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSB2cGNJZDogVGhlIElEIG9mIHRoZSBWUEMgYXNzb2NpYXRlZCB3aXRoIHRoZSBJUHY0IEdhdGV3YXkuXG4gICAgICovXG4gICAgcmVhZG9ubHkgdnBjSWQ6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGlwdjRHYXRld2F5RGVzY3JpcHRpb246IERlc2NyaXB0aW9uIGluZm9ybWF0aW9uLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGlwdjRHYXRld2F5RGVzY3JpcHRpb24/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBpcHY0R2F0ZXdheU5hbWU6IFJlc291cmNlIG5hbWUuXG4gICAgICovXG4gICAgcmVhZG9ubHkgaXB2NEdhdGV3YXlOYW1lPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xufVxuXG4vKipcbiAqIFRoaXMgY2xhc3MgZW5jYXBzdWxhdGVzIGFuZCBleHRlbmRzIHRoZSBST1MgcmVzb3VyY2UgdHlwZSBgQUxJWVVOOjpWUEM6OklwdjRHYXRld2F5YCwgd2hpY2ggaXMgdXNlZCB0byBjcmVhdGUgYW4gSVB2NCBnYXRld2F5LlxuICogQE5vdGUgVGhpcyBjbGFzcyBtYXkgaGF2ZSBzb21lIG5ldyBmdW5jdGlvbnMgdG8gZmFjaWxpdGF0ZSBkZXZlbG9wbWVudCwgc28gaXQgaXMgcmVjb21tZW5kZWQgdG8gdXNlIHRoaXMgY2xhc3MgaW5zdGVhZCBvZiBgUm9zSXB2NEdhdGV3YXlgZm9yIGEgbW9yZSBjb252ZW5pZW50IGRldmVsb3BtZW50IGV4cGVyaWVuY2UuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2FsaXl1bi12cGMtaXB2NGdhdGV3YXlcbiAqL1xuZXhwb3J0IGNsYXNzIElwdjRHYXRld2F5IGV4dGVuZHMgcm9zLlJlc291cmNlIHtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBDcmVhdGVUaW1lOiBUaGUgY3JlYXRpb24gdGltZSBvZiB0aGUgcmVzb3VyY2UuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJDcmVhdGVUaW1lOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgSXB2NEdhdGV3YXlEZXNjcmlwdGlvbjogRGVzY3JpcHRpb24gaW5mb3JtYXRpb24uXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJJcHY0R2F0ZXdheURlc2NyaXB0aW9uOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgSXB2NEdhdGV3YXlJZDogVGhlIHJlc291cmNlIGF0dHJpYnV0ZSBmaWVsZCB0aGF0IHJlcHJlc2VudHMgdGhlIHJlc291cmNlIGxldmVsIDEgSUQuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJJcHY0R2F0ZXdheUlkOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgSXB2NEdhdGV3YXlOYW1lOiBSZXNvdXJjZSBuYW1lLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRySXB2NEdhdGV3YXlOYW1lOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgSXB2NEdhdGV3YXlSb3V0ZVRhYmxlSWQ6IElEIG9mIHRoZSByb3V0ZSB0YWJsZSBhc3NvY2lhdGVkIHdpdGggSVB2NCBHYXRld2F5LlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRySXB2NEdhdGV3YXlSb3V0ZVRhYmxlSWQ6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBWcGNJZDogVGhlIElEIG9mIHRoZSBWUEMgYXNzb2NpYXRlZCB3aXRoIHRoZSBJUHY0IEdhdGV3YXkuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJWcGNJZDogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUGFyYW0gc2NvcGUgLSBzY29wZSBpbiB3aGljaCB0aGlzIHJlc291cmNlIGlzIGRlZmluZWRcbiAgICAgKiBQYXJhbSBpZCAgICAtIHNjb3BlZCBpZCBvZiB0aGUgcmVzb3VyY2VcbiAgICAgKiBQYXJhbSBwcm9wcyAtIHJlc291cmNlIHByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihzY29wZTogcm9zLkNvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IElwdjRHYXRld2F5UHJvcHMsIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OmJvb2xlYW4gPSB0cnVlKSB7XG4gICAgICAgIHN1cGVyKHNjb3BlLCBpZCk7XG5cbiAgICAgICAgY29uc3Qgcm9zSXB2NEdhdGV3YXkgPSBuZXcgUm9zSXB2NEdhdGV3YXkodGhpcywgaWQsICB7XG4gICAgICAgICAgICBpcHY0R2F0ZXdheU5hbWU6IHByb3BzLmlwdjRHYXRld2F5TmFtZSxcbiAgICAgICAgICAgIHZwY0lkOiBwcm9wcy52cGNJZCxcbiAgICAgICAgICAgIGlwdjRHYXRld2F5RGVzY3JpcHRpb246IHByb3BzLmlwdjRHYXRld2F5RGVzY3JpcHRpb24sXG4gICAgICAgIH0sIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ICYmIHRoaXMuc3RhY2suZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQpO1xuICAgICAgICB0aGlzLnJlc291cmNlID0gcm9zSXB2NEdhdGV3YXk7XG4gICAgICAgIHRoaXMuYXR0ckNyZWF0ZVRpbWUgPSByb3NJcHY0R2F0ZXdheS5hdHRyQ3JlYXRlVGltZTtcbiAgICAgICAgdGhpcy5hdHRySXB2NEdhdGV3YXlEZXNjcmlwdGlvbiA9IHJvc0lwdjRHYXRld2F5LmF0dHJJcHY0R2F0ZXdheURlc2NyaXB0aW9uO1xuICAgICAgICB0aGlzLmF0dHJJcHY0R2F0ZXdheUlkID0gcm9zSXB2NEdhdGV3YXkuYXR0cklwdjRHYXRld2F5SWQ7XG4gICAgICAgIHRoaXMuYXR0cklwdjRHYXRld2F5TmFtZSA9IHJvc0lwdjRHYXRld2F5LmF0dHJJcHY0R2F0ZXdheU5hbWU7XG4gICAgICAgIHRoaXMuYXR0cklwdjRHYXRld2F5Um91dGVUYWJsZUlkID0gcm9zSXB2NEdhdGV3YXkuYXR0cklwdjRHYXRld2F5Um91dGVUYWJsZUlkO1xuICAgICAgICB0aGlzLmF0dHJWcGNJZCA9IHJvc0lwdjRHYXRld2F5LmF0dHJWcGNJZDtcbiAgICB9XG59XG4iXX0=