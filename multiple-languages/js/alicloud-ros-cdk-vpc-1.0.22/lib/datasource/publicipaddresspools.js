"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PublicIpAddressPools = exports.PublicIpAddressPoolsProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const vpc_generated_1 = require("./vpc.generated");
Object.defineProperty(exports, "PublicIpAddressPoolsProperty", { enumerable: true, get: function () { return vpc_generated_1.RosPublicIpAddressPools; } });
/**
 * This class encapsulates and extends the ROS resource type `DATASOURCE::VPC::PublicIpAddressPools`, which is used to query available IP address pools.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosPublicIpAddressPools`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/datasource-vpc-publicipaddresspools
 */
class PublicIpAddressPools extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props = {}, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosPublicIpAddressPools = new vpc_generated_1.RosPublicIpAddressPools(this, id, {
            resourceGroupId: props.resourceGroupId,
            publicIpAddressPoolName: props.publicIpAddressPoolName,
            isp: props.isp,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosPublicIpAddressPools;
        this.attrPublicIpAddressPoolIds = rosPublicIpAddressPools.attrPublicIpAddressPoolIds;
        this.attrPublicIpAddressPools = rosPublicIpAddressPools.attrPublicIpAddressPools;
    }
}
exports.PublicIpAddressPools = PublicIpAddressPools;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVibGljaXBhZGRyZXNzcG9vbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJwdWJsaWNpcGFkZHJlc3Nwb29scy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw4Q0FBOEM7QUFDOUMsbURBQTBEO0FBRXRCLDZHQUYzQix1Q0FBdUIsT0FFZ0M7QUF1Q2hFOzs7O0dBSUc7QUFDSCxNQUFhLG9CQUFxQixTQUFRLEdBQUcsQ0FBQyxRQUFRO0lBWWxEOzs7O09BSUc7SUFDSCxZQUFZLEtBQW9CLEVBQUUsRUFBVSxFQUFFLFFBQW1DLEVBQUUsRUFBRSxtQ0FBMkMsSUFBSTtRQUNoSSxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRWpCLE1BQU0sdUJBQXVCLEdBQUcsSUFBSSx1Q0FBdUIsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFHO1lBQ25FLGVBQWUsRUFBRSxLQUFLLENBQUMsZUFBZTtZQUN0Qyx1QkFBdUIsRUFBRSxLQUFLLENBQUMsdUJBQXVCO1lBQ3RELEdBQUcsRUFBRSxLQUFLLENBQUMsR0FBRztTQUNqQixFQUFFLGdDQUFnQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztRQUNwRixJQUFJLENBQUMsUUFBUSxHQUFHLHVCQUF1QixDQUFDO1FBQ3hDLElBQUksQ0FBQywwQkFBMEIsR0FBRyx1QkFBdUIsQ0FBQywwQkFBMEIsQ0FBQztRQUNyRixJQUFJLENBQUMsd0JBQXdCLEdBQUcsdUJBQXVCLENBQUMsd0JBQXdCLENBQUM7SUFDckYsQ0FBQztDQUNKO0FBN0JELG9EQTZCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHJvcyBmcm9tICdAYWxpY2xvdWQvcm9zLWNkay1jb3JlJztcbmltcG9ydCB7IFJvc1B1YmxpY0lwQWRkcmVzc1Bvb2xzIH0gZnJvbSAnLi92cGMuZ2VuZXJhdGVkJztcbi8vIEdlbmVyYXRlZCBmcm9tIHRoZSBBbGlDbG91ZCBST1MgUmVzb3VyY2UgU3BlY2lmaWNhdGlvblxuZXhwb3J0IHsgUm9zUHVibGljSXBBZGRyZXNzUG9vbHMgYXMgUHVibGljSXBBZGRyZXNzUG9vbHNQcm9wZXJ0eSB9O1xuXG4vKipcbiAqIFByb3BlcnRpZXMgZm9yIGRlZmluaW5nIGEgYFB1YmxpY0lwQWRkcmVzc1Bvb2xzYC5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvZGF0YXNvdXJjZS12cGMtcHVibGljaXBhZGRyZXNzcG9vbHNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBQdWJsaWNJcEFkZHJlc3NQb29sc1Byb3BzIHtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGlzcDogVGhlIGxpbmUgdHlwZS4gVmFsaWQgdmFsdWVzOlxuICAgICAqIEJHUCAoZGVmYXVsdCk6IEJHUCAoTXVsdGktSVNQKSBsaW5lc1xuICAgICAqIEJHUF9QUk86IEJHUCAoTXVsdGktSVNQKSBQcm8gbGluZXNcbiAgICAgKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiBhYm91dCBCR1AgKE11bHRpLUlTUCkgYW5kIEJHUCAoTXVsdGktSVNQKSBQcm8sIHNlZSBFSVAgbGluZSB0eXBlcy5cbiAgICAgKiBJZiB5b3UgYXJlIGFsbG93ZWQgdG8gdXNlIHNpbmdsZS1JU1AgYmFuZHdpZHRoLCB5b3UgY2FuIGFsc28gY2hvb3NlIG9uZSBvZiB0aGUgZm9sbG93aW5nIHZhbHVlczpcbiAgICAgKiBDaGluYVRlbGVjb206IENoaW5hIFRlbGVjb21cbiAgICAgKiBDaGluYVVuaWNvbTogQ2hpbmEgVW5pY29tXG4gICAgICogQ2hpbmFNb2JpbGU6IENoaW5hIE1vYmlsZVxuICAgICAqIENoaW5hVGVsZWNvbV9MMjogQ2hpbmEgVGVsZWNvbSBMMlxuICAgICAqIENoaW5hVW5pY29tX0wyOiBDaGluYSBVbmljb20gTDJcbiAgICAgKiBDaGluYU1vYmlsZV9MMjogQ2hpbmEgTW9iaWxlIEwyXG4gICAgICogSWYgeW91ciBzZXJ2aWNlcyBhcmUgZGVwbG95ZWQgaW4gQ2hpbmEgRWFzdCAxIEZpbmFuY2UsIFxuICAgICAqIHRoaXMgcGFyYW1ldGVyIGlzIHJlcXVpcmVkIGFuZCB5b3UgbXVzdCBzZXQgdGhlIHZhbHVlIHRvIEJHUF9GaW5hbmNlQ2xvdWQuXG4gICAgICovXG4gICAgcmVhZG9ubHkgaXNwPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgcHVibGljSXBBZGRyZXNzUG9vbE5hbWU6IFRoZSBuYW1lIG9mIHRoZSBJUCBhZGRyZXNzIHBvb2wuXG4gICAgICogVGhpcyBwYXJhbWV0ZXIgaXMgb3B0aW9uYWwuIFRoZSBuYW1lIG11c3QgYmUgMSB0byAxMjggY2hhcmFjdGVycyBpbiBsZW5ndGgsIFxuICAgICAqIGFuZCBjYW4gY29udGFpbiBkaWdpdHMsIHBlcmlvZHMgKC4pLCB1bmRlcnNjb3JlcyAoXyksIGFuZCBoeXBoZW5zICgtKS4gXG4gICAgICogVGhlIG5hbWUgbXVzdCBzdGFydCB3aXRoIGEgbGV0dGVyIGJ1dCBjYW5ub3Qgc3RhcnQgd2l0aCBodHRwOlxcL1xcLyBvciBodHRwczpcXC9cXC8uXG4gICAgICovXG4gICAgcmVhZG9ubHkgcHVibGljSXBBZGRyZXNzUG9vbE5hbWU/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSByZXNvdXJjZUdyb3VwSWQ6IFRoZSBJRCBvZiB0aGUgcmVzb3VyY2UgZ3JvdXAgdG8gd2hpY2ggdGhlIElQIGFkZHJlc3MgcG9vbCBiZWxvbmdzLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHJlc291cmNlR3JvdXBJZD86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcbn1cblxuLyoqXG4gKiBUaGlzIGNsYXNzIGVuY2Fwc3VsYXRlcyBhbmQgZXh0ZW5kcyB0aGUgUk9TIHJlc291cmNlIHR5cGUgYERBVEFTT1VSQ0U6OlZQQzo6UHVibGljSXBBZGRyZXNzUG9vbHNgLCB3aGljaCBpcyB1c2VkIHRvIHF1ZXJ5IGF2YWlsYWJsZSBJUCBhZGRyZXNzIHBvb2xzLlxuICogQE5vdGUgVGhpcyBjbGFzcyBtYXkgaGF2ZSBzb21lIG5ldyBmdW5jdGlvbnMgdG8gZmFjaWxpdGF0ZSBkZXZlbG9wbWVudCwgc28gaXQgaXMgcmVjb21tZW5kZWQgdG8gdXNlIHRoaXMgY2xhc3MgaW5zdGVhZCBvZiBgUm9zUHVibGljSXBBZGRyZXNzUG9vbHNgZm9yIGEgbW9yZSBjb252ZW5pZW50IGRldmVsb3BtZW50IGV4cGVyaWVuY2UuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2RhdGFzb3VyY2UtdnBjLXB1YmxpY2lwYWRkcmVzc3Bvb2xzXG4gKi9cbmV4cG9ydCBjbGFzcyBQdWJsaWNJcEFkZHJlc3NQb29scyBleHRlbmRzIHJvcy5SZXNvdXJjZSB7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgUHVibGljSXBBZGRyZXNzUG9vbElkczogVGhlIGxpc3Qgb2YgcHVibGljIGlwIGFkZHJlc3MgcG9vbCBJRHMuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJQdWJsaWNJcEFkZHJlc3NQb29sSWRzOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgUHVibGljSXBBZGRyZXNzUG9vbHM6IFRoZSBsaXN0IG9mIHB1YmxpYyBpcCBhZGRyZXNzIHBvb2xzLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyUHVibGljSXBBZGRyZXNzUG9vbHM6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFBhcmFtIHNjb3BlIC0gc2NvcGUgaW4gd2hpY2ggdGhpcyByZXNvdXJjZSBpcyBkZWZpbmVkXG4gICAgICogUGFyYW0gaWQgICAgLSBzY29wZWQgaWQgb2YgdGhlIHJlc291cmNlXG4gICAgICogUGFyYW0gcHJvcHMgLSByZXNvdXJjZSBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IHJvcy5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBQdWJsaWNJcEFkZHJlc3NQb29sc1Byb3BzID0ge30sIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OmJvb2xlYW4gPSB0cnVlKSB7XG4gICAgICAgIHN1cGVyKHNjb3BlLCBpZCk7XG5cbiAgICAgICAgY29uc3Qgcm9zUHVibGljSXBBZGRyZXNzUG9vbHMgPSBuZXcgUm9zUHVibGljSXBBZGRyZXNzUG9vbHModGhpcywgaWQsICB7XG4gICAgICAgICAgICByZXNvdXJjZUdyb3VwSWQ6IHByb3BzLnJlc291cmNlR3JvdXBJZCxcbiAgICAgICAgICAgIHB1YmxpY0lwQWRkcmVzc1Bvb2xOYW1lOiBwcm9wcy5wdWJsaWNJcEFkZHJlc3NQb29sTmFtZSxcbiAgICAgICAgICAgIGlzcDogcHJvcHMuaXNwLFxuICAgICAgICB9LCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCAmJiB0aGlzLnN0YWNrLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50KTtcbiAgICAgICAgdGhpcy5yZXNvdXJjZSA9IHJvc1B1YmxpY0lwQWRkcmVzc1Bvb2xzO1xuICAgICAgICB0aGlzLmF0dHJQdWJsaWNJcEFkZHJlc3NQb29sSWRzID0gcm9zUHVibGljSXBBZGRyZXNzUG9vbHMuYXR0clB1YmxpY0lwQWRkcmVzc1Bvb2xJZHM7XG4gICAgICAgIHRoaXMuYXR0clB1YmxpY0lwQWRkcmVzc1Bvb2xzID0gcm9zUHVibGljSXBBZGRyZXNzUG9vbHMuYXR0clB1YmxpY0lwQWRkcmVzc1Bvb2xzO1xuICAgIH1cbn1cbiJdfQ==