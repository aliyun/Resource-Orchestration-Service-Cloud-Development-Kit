"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RouteEntries = exports.RouteEntriesProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const vpc_generated_1 = require("./vpc.generated");
Object.defineProperty(exports, "RouteEntriesProperty", { enumerable: true, get: function () { return vpc_generated_1.RosRouteEntries; } });
/**
 * This class encapsulates and extends the ROS resource type `DATASOURCE::VPC::RouteEntries`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosRouteEntries`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/datasource-vpc-routeentries
 */
class RouteEntries extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosRouteEntries = new vpc_generated_1.RosRouteEntries(this, id, {
            nextHopType: props.nextHopType,
            routeEntryId: props.routeEntryId,
            routeTableId: props.routeTableId,
            ipVersion: props.ipVersion,
            routeEntryName: props.routeEntryName,
            routeEntryType: props.routeEntryType,
            nextHopId: props.nextHopId,
            destinationCidrBlock: props.destinationCidrBlock,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosRouteEntries;
        this.attrRouteEntries = rosRouteEntries.attrRouteEntries;
        this.attrRouteEntryIds = rosRouteEntries.attrRouteEntryIds;
    }
}
exports.RouteEntries = RouteEntries;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGVlbnRyaWVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicm91dGVlbnRyaWVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDhDQUE4QztBQUM5QyxtREFBa0Q7QUFFdEIscUdBRm5CLCtCQUFlLE9BRXdCO0FBK0RoRDs7OztHQUlHO0FBQ0gsTUFBYSxZQUFhLFNBQVEsR0FBRyxDQUFDLFFBQVE7SUFZMUM7Ozs7T0FJRztJQUNILFlBQVksS0FBb0IsRUFBRSxFQUFVLEVBQUUsS0FBd0IsRUFBRSxtQ0FBMkMsSUFBSTtRQUNuSCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRWpCLE1BQU0sZUFBZSxHQUFHLElBQUksK0JBQWUsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFHO1lBQ25ELFdBQVcsRUFBRSxLQUFLLENBQUMsV0FBVztZQUM5QixZQUFZLEVBQUUsS0FBSyxDQUFDLFlBQVk7WUFDaEMsWUFBWSxFQUFFLEtBQUssQ0FBQyxZQUFZO1lBQ2hDLFNBQVMsRUFBRSxLQUFLLENBQUMsU0FBUztZQUMxQixjQUFjLEVBQUUsS0FBSyxDQUFDLGNBQWM7WUFDcEMsY0FBYyxFQUFFLEtBQUssQ0FBQyxjQUFjO1lBQ3BDLFNBQVMsRUFBRSxLQUFLLENBQUMsU0FBUztZQUMxQixvQkFBb0IsRUFBRSxLQUFLLENBQUMsb0JBQW9CO1NBQ25ELEVBQUUsZ0NBQWdDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO1FBQ3BGLElBQUksQ0FBQyxRQUFRLEdBQUcsZUFBZSxDQUFDO1FBQ2hDLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxlQUFlLENBQUMsZ0JBQWdCLENBQUM7UUFDekQsSUFBSSxDQUFDLGlCQUFpQixHQUFHLGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQztJQUMvRCxDQUFDO0NBQ0o7QUFsQ0Qsb0NBa0NDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcm9zIGZyb20gJ0BhbGljbG91ZC9yb3MtY2RrLWNvcmUnO1xuaW1wb3J0IHsgUm9zUm91dGVFbnRyaWVzIH0gZnJvbSAnLi92cGMuZ2VuZXJhdGVkJztcbi8vIEdlbmVyYXRlZCBmcm9tIHRoZSBBbGlDbG91ZCBST1MgUmVzb3VyY2UgU3BlY2lmaWNhdGlvblxuZXhwb3J0IHsgUm9zUm91dGVFbnRyaWVzIGFzIFJvdXRlRW50cmllc1Byb3BlcnR5IH07XG5cbi8qKlxuICogUHJvcGVydGllcyBmb3IgZGVmaW5pbmcgYSBgUm91dGVFbnRyaWVzYC5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvZGF0YXNvdXJjZS12cGMtcm91dGVlbnRyaWVzXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUm91dGVFbnRyaWVzUHJvcHMge1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgcm91dGVUYWJsZUlkOiBUaGUgSUQgb2YgdGhlIHJvdXRlIHRhYmxlLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHJvdXRlVGFibGVJZDogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgZGVzdGluYXRpb25DaWRyQmxvY2s6IFRoZSBkZXN0aW5hdGlvbiBDSURSIGJsb2NrIG9mIHRoZSByb3V0ZS4gSVB2NCBhbmQgSVB2NiBDSURSIGJsb2NrcyBhcmUgc3VwcG9ydGVkLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGRlc3RpbmF0aW9uQ2lkckJsb2NrPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgaXBWZXJzaW9uOiBUaGUgSVAgdmVyc2lvbi4gVmFsaWQgdmFsdWVzOlxuICAgICAqIElQdjQ6IElQdjRcbiAgICAgKiBJUHY2OiBJUHY2XG4gICAgICovXG4gICAgcmVhZG9ubHkgaXBWZXJzaW9uPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgbmV4dEhvcElkOiBUaGUgSUQgb2YgdGhlIG5leHQgaG9wLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IG5leHRIb3BJZD86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IG5leHRIb3BUeXBlOiBUaGUgdHlwZSBvZiB0aGUgbmV4dCBob3AuIFZhbGlkIHZhbHVlczpcbiAgICAgKiBJbnN0YW5jZSAoZGVmYXVsdCk6IGFuIEVsYXN0aWMgQ29tcHV0ZSBTZXJ2aWNlIChFQ1MpIGluc3RhbmNlXG4gICAgICogSGFWaXA6IGEgaGlnaC1hdmFpbGFiaWxpdHkgdmlydHVhbCBJUCBhZGRyZXNzIChIQVZJUClcbiAgICAgKiBWcG5HYXRld2F5OiBhIFZQTiBnYXRld2F5XG4gICAgICogTmF0R2F0ZXdheTogYSBOQVQgZ2F0ZXdheVxuICAgICAqIE5ldHdvcmtJbnRlcmZhY2U6IGEgc2Vjb25kYXJ5IGVsYXN0aWMgbmV0d29yayBpbnRlcmZhY2UgKEVOSSlcbiAgICAgKiBSb3V0ZXJJbnRlcmZhY2U6IGEgcm91dGVyIGludGVyZmFjZVxuICAgICAqIElQdjZHYXRld2F5OiBhbiBJUHY2IGdhdGV3YXlcbiAgICAgKiBBdHRhY2htZW50OiBhIHRyYW5zaXQgcm91dGVyXG4gICAgICovXG4gICAgcmVhZG9ubHkgbmV4dEhvcFR5cGU/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSByb3V0ZUVudHJ5SWQ6IFRoZSBJRCBvZiB0aGUgcm91dGUuXG4gICAgICovXG4gICAgcmVhZG9ubHkgcm91dGVFbnRyeUlkPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgcm91dGVFbnRyeU5hbWU6IFRoZSBuYW1lIG9mIHRoZSByb3V0ZS5cbiAgICAgKi9cbiAgICByZWFkb25seSByb3V0ZUVudHJ5TmFtZT86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHJvdXRlRW50cnlUeXBlOiBUaGUgdHlwZSBvZiB0aGUgcm91dGUuIFZhbGlkIHZhbHVlczpcbiAgICAgKiBDdXN0b206IGEgY3VzdG9tIHJvdXRlXG4gICAgICogU3lzdGVtOiBhIHN5c3RlbSByb3V0ZVxuICAgICAqIEJHUDogYSBCb3JkZXIgR2F0ZXdheSBQcm90b2NvbCAoQkdQKSByb3V0ZVxuICAgICAqIENFTjogYSBDbG91ZCBFbnRlcnByaXNlIE5ldHdvcmsgKENFTikgcm91dGVcbiAgICAgKi9cbiAgICByZWFkb25seSByb3V0ZUVudHJ5VHlwZT86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcbn1cblxuLyoqXG4gKiBUaGlzIGNsYXNzIGVuY2Fwc3VsYXRlcyBhbmQgZXh0ZW5kcyB0aGUgUk9TIHJlc291cmNlIHR5cGUgYERBVEFTT1VSQ0U6OlZQQzo6Um91dGVFbnRyaWVzYC5cbiAqIEBOb3RlIFRoaXMgY2xhc3MgbWF5IGhhdmUgc29tZSBuZXcgZnVuY3Rpb25zIHRvIGZhY2lsaXRhdGUgZGV2ZWxvcG1lbnQsIHNvIGl0IGlzIHJlY29tbWVuZGVkIHRvIHVzZSB0aGlzIGNsYXNzIGluc3RlYWQgb2YgYFJvc1JvdXRlRW50cmllc2Bmb3IgYSBtb3JlIGNvbnZlbmllbnQgZGV2ZWxvcG1lbnQgZXhwZXJpZW5jZS5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvZGF0YXNvdXJjZS12cGMtcm91dGVlbnRyaWVzXG4gKi9cbmV4cG9ydCBjbGFzcyBSb3V0ZUVudHJpZXMgZXh0ZW5kcyByb3MuUmVzb3VyY2Uge1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIFJvdXRlRW50cmllczogVGhlIGxpc3Qgb2YgVGhlIHJvdXRlIGVudHJpZXMuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJSb3V0ZUVudHJpZXM6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBSb3V0ZUVudHJ5SWRzOiB0aGUgbGlzdCBvZiB0aGUgcm91dGUgZW50cnkgaWRzLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyUm91dGVFbnRyeUlkczogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUGFyYW0gc2NvcGUgLSBzY29wZSBpbiB3aGljaCB0aGlzIHJlc291cmNlIGlzIGRlZmluZWRcbiAgICAgKiBQYXJhbSBpZCAgICAtIHNjb3BlZCBpZCBvZiB0aGUgcmVzb3VyY2VcbiAgICAgKiBQYXJhbSBwcm9wcyAtIHJlc291cmNlIHByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihzY29wZTogcm9zLkNvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IFJvdXRlRW50cmllc1Byb3BzLCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDpib29sZWFuID0gdHJ1ZSkge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQpO1xuXG4gICAgICAgIGNvbnN0IHJvc1JvdXRlRW50cmllcyA9IG5ldyBSb3NSb3V0ZUVudHJpZXModGhpcywgaWQsICB7XG4gICAgICAgICAgICBuZXh0SG9wVHlwZTogcHJvcHMubmV4dEhvcFR5cGUsXG4gICAgICAgICAgICByb3V0ZUVudHJ5SWQ6IHByb3BzLnJvdXRlRW50cnlJZCxcbiAgICAgICAgICAgIHJvdXRlVGFibGVJZDogcHJvcHMucm91dGVUYWJsZUlkLFxuICAgICAgICAgICAgaXBWZXJzaW9uOiBwcm9wcy5pcFZlcnNpb24sXG4gICAgICAgICAgICByb3V0ZUVudHJ5TmFtZTogcHJvcHMucm91dGVFbnRyeU5hbWUsXG4gICAgICAgICAgICByb3V0ZUVudHJ5VHlwZTogcHJvcHMucm91dGVFbnRyeVR5cGUsXG4gICAgICAgICAgICBuZXh0SG9wSWQ6IHByb3BzLm5leHRIb3BJZCxcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uQ2lkckJsb2NrOiBwcm9wcy5kZXN0aW5hdGlvbkNpZHJCbG9jayxcbiAgICAgICAgfSwgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgJiYgdGhpcy5zdGFjay5lbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCk7XG4gICAgICAgIHRoaXMucmVzb3VyY2UgPSByb3NSb3V0ZUVudHJpZXM7XG4gICAgICAgIHRoaXMuYXR0clJvdXRlRW50cmllcyA9IHJvc1JvdXRlRW50cmllcy5hdHRyUm91dGVFbnRyaWVzO1xuICAgICAgICB0aGlzLmF0dHJSb3V0ZUVudHJ5SWRzID0gcm9zUm91dGVFbnRyaWVzLmF0dHJSb3V0ZUVudHJ5SWRzO1xuICAgIH1cbn1cbiJdfQ==