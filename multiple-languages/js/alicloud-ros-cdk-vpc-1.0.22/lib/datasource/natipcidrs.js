"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NatIpCidrs = exports.NatIpCidrsProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const vpc_generated_1 = require("./vpc.generated");
Object.defineProperty(exports, "NatIpCidrsProperty", { enumerable: true, get: function () { return vpc_generated_1.RosNatIpCidrs; } });
/**
 * This class encapsulates and extends the ROS resource type `DATASOURCE::VPC::NatIpCidrs`, which is used to query the CIDR blocks of a NAT gateway.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosNatIpCidrs`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/datasource-vpc-natipcidrs
 */
class NatIpCidrs extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosNatIpCidrs = new vpc_generated_1.RosNatIpCidrs(this, id, {
            natIpCidr: props.natIpCidr,
            natGatewayId: props.natGatewayId,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosNatIpCidrs;
        this.attrNatIpCidrIds = rosNatIpCidrs.attrNatIpCidrIds;
        this.attrNatIpCidrs = rosNatIpCidrs.attrNatIpCidrs;
    }
}
exports.NatIpCidrs = NatIpCidrs;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF0aXBjaWRycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm5hdGlwY2lkcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsOENBQThDO0FBQzlDLG1EQUFnRDtBQUV0QixtR0FGakIsNkJBQWEsT0FFc0I7QUFtQjVDOzs7O0dBSUc7QUFDSCxNQUFhLFVBQVcsU0FBUSxHQUFHLENBQUMsUUFBUTtJQVl4Qzs7OztPQUlHO0lBQ0gsWUFBWSxLQUFvQixFQUFFLEVBQVUsRUFBRSxLQUFzQixFQUFFLG1DQUEyQyxJQUFJO1FBQ2pILEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFakIsTUFBTSxhQUFhLEdBQUcsSUFBSSw2QkFBYSxDQUFDLElBQUksRUFBRSxFQUFFLEVBQUc7WUFDL0MsU0FBUyxFQUFFLEtBQUssQ0FBQyxTQUFTO1lBQzFCLFlBQVksRUFBRSxLQUFLLENBQUMsWUFBWTtTQUNuQyxFQUFFLGdDQUFnQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztRQUNwRixJQUFJLENBQUMsUUFBUSxHQUFHLGFBQWEsQ0FBQztRQUM5QixJQUFJLENBQUMsZ0JBQWdCLEdBQUcsYUFBYSxDQUFDLGdCQUFnQixDQUFDO1FBQ3ZELElBQUksQ0FBQyxjQUFjLEdBQUcsYUFBYSxDQUFDLGNBQWMsQ0FBQztJQUN2RCxDQUFDO0NBQ0o7QUE1QkQsZ0NBNEJDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcm9zIGZyb20gJ0BhbGljbG91ZC9yb3MtY2RrLWNvcmUnO1xuaW1wb3J0IHsgUm9zTmF0SXBDaWRycyB9IGZyb20gJy4vdnBjLmdlbmVyYXRlZCc7XG4vLyBHZW5lcmF0ZWQgZnJvbSB0aGUgQWxpQ2xvdWQgUk9TIFJlc291cmNlIFNwZWNpZmljYXRpb25cbmV4cG9ydCB7IFJvc05hdElwQ2lkcnMgYXMgTmF0SXBDaWRyc1Byb3BlcnR5IH07XG5cbi8qKlxuICogUHJvcGVydGllcyBmb3IgZGVmaW5pbmcgYSBgTmF0SXBDaWRyc2AuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2RhdGFzb3VyY2UtdnBjLW5hdGlwY2lkcnNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBOYXRJcENpZHJzUHJvcHMge1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgbmF0R2F0ZXdheUlkOiBOQVQgSVAgQUREUkVTUyByYW5nZSB0byB0aGUgc2VjdXJpdHkgZ3JvdXAgb2YgdGhlIEthZmthIFZQQyBOQVQgZ2F0ZXdheSBpbnN0YW5jZSBJRC5cbiAgICAgKi9cbiAgICByZWFkb25seSBuYXRHYXRld2F5SWQ6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IG5hdElwQ2lkcjogQ3JlYXRlIGEgTkFUIElQIEFERFJFU1MuIFRoZSBuZXcgYWRkcmVzcyBzZWdtZW50IG11c3QgbWVldCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6IGJlbG9uZyB0byAxMC4wLjAuMFxcLzgsIDE3Mi4xNi4wLjBcXC8xMiBvciAxOTIuMTY4LjAuMFxcLzE2IG5ldHdvcmsgc2VnbWVudCBhbmQgaXRzIHN1Ym5ldC4gU3VwcG9ydCB0aGUgc3VibmV0IG1hc2sgb2YgdGhlIG51bWJlciBvZiBiaXRzIGluIHRoZSByYW5nZSBvZiAxNiB0byAzMi1iaXQuIElmIHlvdSB3YW50IHRvIHVzZSB0aGUgSVAgYWRkcmVzcyBvZiBhIHB1YmxpYyBuZXR3b3JrIHNlZ21lbnQgYXMgdGhlIE5BVCBJUCBBRERSRVNTLCB0aGUgVmlydHVhbCBQcml2YXRlIENsb3VkIChWUEMgTkFUIGlzIGFscmVhZHkgdXNpbmcgdGhlIElQIGFkZHJlc3Mgb2YgYSBwdWJsaWMgbmV0d29yayBvZiBwZXJtaXNzaW9ucy4gRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSBjcmVhdGUgYSB2aXJ0dWFsIHByaXZhdGUgY2xvdWQgKFZQQyBOQVQgZ2F0ZXdheSBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICByZWFkb25seSBuYXRJcENpZHI/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG59XG5cbi8qKlxuICogVGhpcyBjbGFzcyBlbmNhcHN1bGF0ZXMgYW5kIGV4dGVuZHMgdGhlIFJPUyByZXNvdXJjZSB0eXBlIGBEQVRBU09VUkNFOjpWUEM6Ok5hdElwQ2lkcnNgLCB3aGljaCBpcyB1c2VkIHRvIHF1ZXJ5IHRoZSBDSURSIGJsb2NrcyBvZiBhIE5BVCBnYXRld2F5LlxuICogQE5vdGUgVGhpcyBjbGFzcyBtYXkgaGF2ZSBzb21lIG5ldyBmdW5jdGlvbnMgdG8gZmFjaWxpdGF0ZSBkZXZlbG9wbWVudCwgc28gaXQgaXMgcmVjb21tZW5kZWQgdG8gdXNlIHRoaXMgY2xhc3MgaW5zdGVhZCBvZiBgUm9zTmF0SXBDaWRyc2Bmb3IgYSBtb3JlIGNvbnZlbmllbnQgZGV2ZWxvcG1lbnQgZXhwZXJpZW5jZS5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvZGF0YXNvdXJjZS12cGMtbmF0aXBjaWRyc1xuICovXG5leHBvcnQgY2xhc3MgTmF0SXBDaWRycyBleHRlbmRzIHJvcy5SZXNvdXJjZSB7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgTmF0SXBDaWRySWRzOiBUaGUgbGlzdCBvZiBuYXQgaXAgY2lkciBJRHMuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJOYXRJcENpZHJJZHM6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBOYXRJcENpZHJzOiBUaGUgbGlzdCBvZiBuYXQgaXAgY2lkcnMuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJOYXRJcENpZHJzOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQYXJhbSBzY29wZSAtIHNjb3BlIGluIHdoaWNoIHRoaXMgcmVzb3VyY2UgaXMgZGVmaW5lZFxuICAgICAqIFBhcmFtIGlkICAgIC0gc2NvcGVkIGlkIG9mIHRoZSByZXNvdXJjZVxuICAgICAqIFBhcmFtIHByb3BzIC0gcmVzb3VyY2UgcHJvcGVydGllc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiByb3MuQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogTmF0SXBDaWRyc1Byb3BzLCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDpib29sZWFuID0gdHJ1ZSkge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQpO1xuXG4gICAgICAgIGNvbnN0IHJvc05hdElwQ2lkcnMgPSBuZXcgUm9zTmF0SXBDaWRycyh0aGlzLCBpZCwgIHtcbiAgICAgICAgICAgIG5hdElwQ2lkcjogcHJvcHMubmF0SXBDaWRyLFxuICAgICAgICAgICAgbmF0R2F0ZXdheUlkOiBwcm9wcy5uYXRHYXRld2F5SWQsXG4gICAgICAgIH0sIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ICYmIHRoaXMuc3RhY2suZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQpO1xuICAgICAgICB0aGlzLnJlc291cmNlID0gcm9zTmF0SXBDaWRycztcbiAgICAgICAgdGhpcy5hdHRyTmF0SXBDaWRySWRzID0gcm9zTmF0SXBDaWRycy5hdHRyTmF0SXBDaWRySWRzO1xuICAgICAgICB0aGlzLmF0dHJOYXRJcENpZHJzID0gcm9zTmF0SXBDaWRycy5hdHRyTmF0SXBDaWRycztcbiAgICB9XG59XG4iXX0=