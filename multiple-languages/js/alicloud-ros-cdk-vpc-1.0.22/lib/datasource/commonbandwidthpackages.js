"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CommonBandwidthPackages = exports.CommonBandwidthPackagesProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const vpc_generated_1 = require("./vpc.generated");
Object.defineProperty(exports, "CommonBandwidthPackagesProperty", { enumerable: true, get: function () { return vpc_generated_1.RosCommonBandwidthPackages; } });
/**
 * This class encapsulates and extends the ROS resource type `DATASOURCE::VPC::CommonBandwidthPackages`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosCommonBandwidthPackages`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/datasource-vpc-commonbandwidthpackages
 */
class CommonBandwidthPackages extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props = {}, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosCommonBandwidthPackages = new vpc_generated_1.RosCommonBandwidthPackages(this, id, {
            resourceGroupId: props.resourceGroupId,
            commonBandwidthPackageName: props.commonBandwidthPackageName,
            commonBandwidthPackageId: props.commonBandwidthPackageId,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosCommonBandwidthPackages;
        this.attrCommonBandwidthPackageIds = rosCommonBandwidthPackages.attrCommonBandwidthPackageIds;
        this.attrCommonBandwidthPackages = rosCommonBandwidthPackages.attrCommonBandwidthPackages;
    }
}
exports.CommonBandwidthPackages = CommonBandwidthPackages;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbW9uYmFuZHdpZHRocGFja2FnZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjb21tb25iYW5kd2lkdGhwYWNrYWdlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw4Q0FBOEM7QUFDOUMsbURBQTZEO0FBRXRCLGdIQUY5QiwwQ0FBMEIsT0FFbUM7QUF3QnRFOzs7O0dBSUc7QUFDSCxNQUFhLHVCQUF3QixTQUFRLEdBQUcsQ0FBQyxRQUFRO0lBWXJEOzs7O09BSUc7SUFDSCxZQUFZLEtBQW9CLEVBQUUsRUFBVSxFQUFFLFFBQXNDLEVBQUUsRUFBRSxtQ0FBMkMsSUFBSTtRQUNuSSxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRWpCLE1BQU0sMEJBQTBCLEdBQUcsSUFBSSwwQ0FBMEIsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFHO1lBQ3pFLGVBQWUsRUFBRSxLQUFLLENBQUMsZUFBZTtZQUN0QywwQkFBMEIsRUFBRSxLQUFLLENBQUMsMEJBQTBCO1lBQzVELHdCQUF3QixFQUFFLEtBQUssQ0FBQyx3QkFBd0I7U0FDM0QsRUFBRSxnQ0FBZ0MsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7UUFDcEYsSUFBSSxDQUFDLFFBQVEsR0FBRywwQkFBMEIsQ0FBQztRQUMzQyxJQUFJLENBQUMsNkJBQTZCLEdBQUcsMEJBQTBCLENBQUMsNkJBQTZCLENBQUM7UUFDOUYsSUFBSSxDQUFDLDJCQUEyQixHQUFHLDBCQUEwQixDQUFDLDJCQUEyQixDQUFDO0lBQzlGLENBQUM7Q0FDSjtBQTdCRCwwREE2QkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyByb3MgZnJvbSAnQGFsaWNsb3VkL3Jvcy1jZGstY29yZSc7XG5pbXBvcnQgeyBSb3NDb21tb25CYW5kd2lkdGhQYWNrYWdlcyB9IGZyb20gJy4vdnBjLmdlbmVyYXRlZCc7XG4vLyBHZW5lcmF0ZWQgZnJvbSB0aGUgQWxpQ2xvdWQgUk9TIFJlc291cmNlIFNwZWNpZmljYXRpb25cbmV4cG9ydCB7IFJvc0NvbW1vbkJhbmR3aWR0aFBhY2thZ2VzIGFzIENvbW1vbkJhbmR3aWR0aFBhY2thZ2VzUHJvcGVydHkgfTtcblxuLyoqXG4gKiBQcm9wZXJ0aWVzIGZvciBkZWZpbmluZyBhIGBDb21tb25CYW5kd2lkdGhQYWNrYWdlc2AuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2RhdGFzb3VyY2UtdnBjLWNvbW1vbmJhbmR3aWR0aHBhY2thZ2VzXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQ29tbW9uQmFuZHdpZHRoUGFja2FnZXNQcm9wcyB7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBjb21tb25CYW5kd2lkdGhQYWNrYWdlSWQ6IFRoZSBJRCBvZiB0aGUgSW50ZXJuZXQgc2hhcmVkIGJhbmR3aWR0aC5cbiAgICAgKi9cbiAgICByZWFkb25seSBjb21tb25CYW5kd2lkdGhQYWNrYWdlSWQ/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBjb21tb25CYW5kd2lkdGhQYWNrYWdlTmFtZTogVGhlIG5hbWUgb2YgdGhlIEludGVybmV0IFNoYXJlZCBCYW5kd2lkdGggaW5zdGFuY2UuXG4gICAgICovXG4gICAgcmVhZG9ubHkgY29tbW9uQmFuZHdpZHRoUGFja2FnZU5hbWU/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSByZXNvdXJjZUdyb3VwSWQ6IFRoZSBJRCBvZiB0aGUgcmVzb3VyY2UgZ3JvdXAuXG4gICAgICovXG4gICAgcmVhZG9ubHkgcmVzb3VyY2VHcm91cElkPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xufVxuXG4vKipcbiAqIFRoaXMgY2xhc3MgZW5jYXBzdWxhdGVzIGFuZCBleHRlbmRzIHRoZSBST1MgcmVzb3VyY2UgdHlwZSBgREFUQVNPVVJDRTo6VlBDOjpDb21tb25CYW5kd2lkdGhQYWNrYWdlc2AuXG4gKiBATm90ZSBUaGlzIGNsYXNzIG1heSBoYXZlIHNvbWUgbmV3IGZ1bmN0aW9ucyB0byBmYWNpbGl0YXRlIGRldmVsb3BtZW50LCBzbyBpdCBpcyByZWNvbW1lbmRlZCB0byB1c2UgdGhpcyBjbGFzcyBpbnN0ZWFkIG9mIGBSb3NDb21tb25CYW5kd2lkdGhQYWNrYWdlc2Bmb3IgYSBtb3JlIGNvbnZlbmllbnQgZGV2ZWxvcG1lbnQgZXhwZXJpZW5jZS5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvZGF0YXNvdXJjZS12cGMtY29tbW9uYmFuZHdpZHRocGFja2FnZXNcbiAqL1xuZXhwb3J0IGNsYXNzIENvbW1vbkJhbmR3aWR0aFBhY2thZ2VzIGV4dGVuZHMgcm9zLlJlc291cmNlIHtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBDb21tb25CYW5kd2lkdGhQYWNrYWdlSWRzOiBUaGUgbGlzdCBvZiBjb21tb24gYmFuZHdpZHRoIHBhY2thZ2UgSURzLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyQ29tbW9uQmFuZHdpZHRoUGFja2FnZUlkczogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIENvbW1vbkJhbmR3aWR0aFBhY2thZ2VzOiBUaGUgbGlzdCBvZiBjb21tb24gYmFuZHdpZHRoIHBhY2thZ2VzLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyQ29tbW9uQmFuZHdpZHRoUGFja2FnZXM6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFBhcmFtIHNjb3BlIC0gc2NvcGUgaW4gd2hpY2ggdGhpcyByZXNvdXJjZSBpcyBkZWZpbmVkXG4gICAgICogUGFyYW0gaWQgICAgLSBzY29wZWQgaWQgb2YgdGhlIHJlc291cmNlXG4gICAgICogUGFyYW0gcHJvcHMgLSByZXNvdXJjZSBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IHJvcy5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBDb21tb25CYW5kd2lkdGhQYWNrYWdlc1Byb3BzID0ge30sIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OmJvb2xlYW4gPSB0cnVlKSB7XG4gICAgICAgIHN1cGVyKHNjb3BlLCBpZCk7XG5cbiAgICAgICAgY29uc3Qgcm9zQ29tbW9uQmFuZHdpZHRoUGFja2FnZXMgPSBuZXcgUm9zQ29tbW9uQmFuZHdpZHRoUGFja2FnZXModGhpcywgaWQsICB7XG4gICAgICAgICAgICByZXNvdXJjZUdyb3VwSWQ6IHByb3BzLnJlc291cmNlR3JvdXBJZCxcbiAgICAgICAgICAgIGNvbW1vbkJhbmR3aWR0aFBhY2thZ2VOYW1lOiBwcm9wcy5jb21tb25CYW5kd2lkdGhQYWNrYWdlTmFtZSxcbiAgICAgICAgICAgIGNvbW1vbkJhbmR3aWR0aFBhY2thZ2VJZDogcHJvcHMuY29tbW9uQmFuZHdpZHRoUGFja2FnZUlkLFxuICAgICAgICB9LCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCAmJiB0aGlzLnN0YWNrLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50KTtcbiAgICAgICAgdGhpcy5yZXNvdXJjZSA9IHJvc0NvbW1vbkJhbmR3aWR0aFBhY2thZ2VzO1xuICAgICAgICB0aGlzLmF0dHJDb21tb25CYW5kd2lkdGhQYWNrYWdlSWRzID0gcm9zQ29tbW9uQmFuZHdpZHRoUGFja2FnZXMuYXR0ckNvbW1vbkJhbmR3aWR0aFBhY2thZ2VJZHM7XG4gICAgICAgIHRoaXMuYXR0ckNvbW1vbkJhbmR3aWR0aFBhY2thZ2VzID0gcm9zQ29tbW9uQmFuZHdpZHRoUGFja2FnZXMuYXR0ckNvbW1vbkJhbmR3aWR0aFBhY2thZ2VzO1xuICAgIH1cbn1cbiJdfQ==