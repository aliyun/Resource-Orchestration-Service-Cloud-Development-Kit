"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DrdsInstance = exports.DrdsInstanceProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const drds_generated_1 = require("./drds.generated");
Object.defineProperty(exports, "DrdsInstanceProperty", { enumerable: true, get: function () { return drds_generated_1.RosDrdsInstance; } });
/**
 * This class encapsulates and extends the ROS resource type `DATASOURCE::DRDS::DrdsInstance`, which is used to query the information about a PolarDB-X 1.0 instance.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosDrdsInstance`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/datasource-drds-drdsinstance
 */
class DrdsInstance extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosDrdsInstance = new drds_generated_1.RosDrdsInstance(this, id, {
            drdsInstanceId: props.drdsInstanceId,
            refreshOptions: props.refreshOptions === undefined || props.refreshOptions === null ? 'Never' : props.refreshOptions,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosDrdsInstance;
        this.attrCommodityCode = rosDrdsInstance.attrCommodityCode;
        this.attrCreateTime = rosDrdsInstance.attrCreateTime;
        this.attrDescription = rosDrdsInstance.attrDescription;
        this.attrDrdsInstanceId = rosDrdsInstance.attrDrdsInstanceId;
        this.attrExpireDate = rosDrdsInstance.attrExpireDate;
        this.attrInstRole = rosDrdsInstance.attrInstRole;
        this.attrInstanceSeries = rosDrdsInstance.attrInstanceSeries;
        this.attrInstanceSpec = rosDrdsInstance.attrInstanceSpec;
        this.attrLabel = rosDrdsInstance.attrLabel;
        this.attrMachineType = rosDrdsInstance.attrMachineType;
        this.attrMasterInstanceId = rosDrdsInstance.attrMasterInstanceId;
        this.attrMysqlVersion = rosDrdsInstance.attrMysqlVersion;
        this.attrNetworkType = rosDrdsInstance.attrNetworkType;
        this.attrOrderInstanceId = rosDrdsInstance.attrOrderInstanceId;
        this.attrReadOnlyDbInstanceIds = rosDrdsInstance.attrReadOnlyDbInstanceIds;
        this.attrResourceGroupId = rosDrdsInstance.attrResourceGroupId;
        this.attrStorageType = rosDrdsInstance.attrStorageType;
        this.attrType = rosDrdsInstance.attrType;
        this.attrVersion = rosDrdsInstance.attrVersion;
        this.attrVersionAction = rosDrdsInstance.attrVersionAction;
        this.attrVips = rosDrdsInstance.attrVips;
        this.attrVpcCloudInstanceId = rosDrdsInstance.attrVpcCloudInstanceId;
        this.attrZoneId = rosDrdsInstance.attrZoneId;
    }
}
exports.DrdsInstance = DrdsInstance;
//# sourceMappingURL=data:application/json;base64,