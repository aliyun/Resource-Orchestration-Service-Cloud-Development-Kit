"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MediaWorkflow = exports.MediaWorkflowProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const mps_generated_1 = require("./mps.generated");
Object.defineProperty(exports, "MediaWorkflowProperty", { enumerable: true, get: function () { return mps_generated_1.RosMediaWorkflow; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::MPS::MediaWorkflow`, which is used to add a media workflow.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosMediaWorkflow`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-mps-mediaworkflow
 */
class MediaWorkflow extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosMediaWorkflow = new mps_generated_1.RosMediaWorkflow(this, id, {
            triggerMode: props.triggerMode,
            topology: props.topology,
            name: props.name,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosMediaWorkflow;
        this.attrCreationTime = rosMediaWorkflow.attrCreationTime;
        this.attrMediaWorkflowId = rosMediaWorkflow.attrMediaWorkflowId;
        this.attrName = rosMediaWorkflow.attrName;
        this.attrState = rosMediaWorkflow.attrState;
        this.attrTopology = rosMediaWorkflow.attrTopology;
        this.attrTriggerMode = rosMediaWorkflow.attrTriggerMode;
    }
}
exports.MediaWorkflow = MediaWorkflow;
//# sourceMappingURL=data:application/json;base64,