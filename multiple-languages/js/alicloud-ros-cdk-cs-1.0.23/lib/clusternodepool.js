"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClusterNodePool = exports.ClusterNodePoolProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const cs_generated_1 = require("./cs.generated");
Object.defineProperty(exports, "ClusterNodePoolProperty", { enumerable: true, get: function () { return cs_generated_1.RosClusterNodePool; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::CS::ClusterNodePool`, which is used to create a node pool for a Container Service for Kubernetes (ACK) cluster.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosClusterNodePool`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-cs-clusternodepool
 */
class ClusterNodePool extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosClusterNodePool = new cs_generated_1.RosClusterNodePool(this, id, {
            teeConfig: props.teeConfig,
            clusterId: props.clusterId,
            nodePoolInfo: props.nodePoolInfo,
            kubernetesConfig: props.kubernetesConfig,
            count: props.count,
            management: props.management,
            autoScaling: props.autoScaling,
            scalingGroup: props.scalingGroup,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosClusterNodePool;
        this.attrNodePoolId = rosClusterNodePool.attrNodePoolId;
    }
}
exports.ClusterNodePool = ClusterNodePool;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2x1c3Rlcm5vZGVwb29sLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY2x1c3Rlcm5vZGVwb29sLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDhDQUE4QztBQUM5QyxpREFBb0Q7QUFFckIsd0dBRnRCLGlDQUFrQixPQUUyQjtBQWlEdEQ7Ozs7R0FJRztBQUNILE1BQWEsZUFBZ0IsU0FBUSxHQUFHLENBQUMsUUFBUTtJQVc3Qzs7OztPQUlHO0lBQ0gsWUFBWSxLQUFvQixFQUFFLEVBQVUsRUFBRSxLQUEyQixFQUFFLG1DQUEyQyxJQUFJO1FBQ3RILEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDakIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUM7UUFDYixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsZ0NBQWdDLEdBQUcsZ0NBQWdDLENBQUM7UUFFekUsTUFBTSxrQkFBa0IsR0FBRyxJQUFJLGlDQUFrQixDQUFDLElBQUksRUFBRSxFQUFFLEVBQUc7WUFDekQsU0FBUyxFQUFFLEtBQUssQ0FBQyxTQUFTO1lBQzFCLFNBQVMsRUFBRSxLQUFLLENBQUMsU0FBUztZQUMxQixZQUFZLEVBQUUsS0FBSyxDQUFDLFlBQVk7WUFDaEMsZ0JBQWdCLEVBQUUsS0FBSyxDQUFDLGdCQUFnQjtZQUN4QyxLQUFLLEVBQUUsS0FBSyxDQUFDLEtBQUs7WUFDbEIsVUFBVSxFQUFFLEtBQUssQ0FBQyxVQUFVO1lBQzVCLFdBQVcsRUFBRSxLQUFLLENBQUMsV0FBVztZQUM5QixZQUFZLEVBQUUsS0FBSyxDQUFDLFlBQVk7U0FDbkMsRUFBRSxnQ0FBZ0MsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7UUFDcEYsSUFBSSxDQUFDLFFBQVEsR0FBRyxrQkFBa0IsQ0FBQztRQUNuQyxJQUFJLENBQUMsY0FBYyxHQUFHLGtCQUFrQixDQUFDLGNBQWMsQ0FBQztJQUM1RCxDQUFDO0NBQ0o7QUFwQ0QsMENBb0NDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcm9zIGZyb20gJ0BhbGljbG91ZC9yb3MtY2RrLWNvcmUnO1xuaW1wb3J0IHsgUm9zQ2x1c3Rlck5vZGVQb29sIH0gZnJvbSAnLi9jcy5nZW5lcmF0ZWQnO1xuLy8gR2VuZXJhdGVkIGZyb20gdGhlIEFsaUNsb3VkIFJPUyBSZXNvdXJjZSBTcGVjaWZpY2F0aW9uXG5leHBvcnQgeyBSb3NDbHVzdGVyTm9kZVBvb2wgYXMgQ2x1c3Rlck5vZGVQb29sUHJvcGVydHkgfTtcblxuLyoqXG4gKiBQcm9wZXJ0aWVzIGZvciBkZWZpbmluZyBhIGBDbHVzdGVyTm9kZVBvb2xgLlxuICogU2VlIGh0dHBzOi8vd3d3LmFsaWJhYmFjbG91ZC5jb20vaGVscC9yb3MvZGV2ZWxvcGVyLXJlZmVyZW5jZS9hbGl5dW4tY3MtY2x1c3Rlcm5vZGVwb29sXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQ2x1c3Rlck5vZGVQb29sUHJvcHMge1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgY2x1c3RlcklkOiBDbHVzdGVyIElELlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGNsdXN0ZXJJZDogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgc2NhbGluZ0dyb3VwOiBUaGUgY29uZmlndXJhdGlvbnMgb2YgdGhlIHNjYWxpbmcgZ3JvdXAgdXNlZCBieSB0aGUgbm9kZSBwb29sLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHNjYWxpbmdHcm91cDogUm9zQ2x1c3Rlck5vZGVQb29sLlNjYWxpbmdHcm91cFByb3BlcnR5IHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgYXV0b1NjYWxpbmc6IFRoZSBjb25maWd1cmF0aW9ucyBvZiBhdXRvIHNjYWxpbmcuXG4gICAgICovXG4gICAgcmVhZG9ubHkgYXV0b1NjYWxpbmc/OiBSb3NDbHVzdGVyTm9kZVBvb2wuQXV0b1NjYWxpbmdQcm9wZXJ0eSB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGNvdW50OiBUaGUgbnVtYmVyIG9mIG5vZGVzIGluIHRoZSBub2RlIHBvb2wuXG4gICAgICovXG4gICAgcmVhZG9ubHkgY291bnQ/OiBudW1iZXIgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBrdWJlcm5ldGVzQ29uZmlnOiBUaGUgY29uZmlndXJhdGlvbnMgb2YgdGhlIEFDSyBjbHVzdGVyLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGt1YmVybmV0ZXNDb25maWc/OiBSb3NDbHVzdGVyTm9kZVBvb2wuS3ViZXJuZXRlc0NvbmZpZ1Byb3BlcnR5IHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgbWFuYWdlbWVudDogVGhlIGNvbmZpZ3VyYXRpb25zIG9mIHRoZSBtYW5hZ2VkIG5vZGUgcG9vbC5cbiAgICAgKi9cbiAgICByZWFkb25seSBtYW5hZ2VtZW50PzogUm9zQ2x1c3Rlck5vZGVQb29sLk1hbmFnZW1lbnRQcm9wZXJ0eSB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IG5vZGVQb29sSW5mbzogVGhlIGNvbmZpZ3VyYXRpb25zIG9mIHRoZSBub2RlIHBvb2wuXG4gICAgICovXG4gICAgcmVhZG9ubHkgbm9kZVBvb2xJbmZvPzogUm9zQ2x1c3Rlck5vZGVQb29sLk5vZGVQb29sSW5mb1Byb3BlcnR5IHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgdGVlQ29uZmlnOiBUaGUgY29uZmlndXJhdGlvbnMgb2YgY29uZmlkZW50aWFsIGNvbXB1dGluZy5cbiAgICAgKi9cbiAgICByZWFkb25seSB0ZWVDb25maWc/OiBSb3NDbHVzdGVyTm9kZVBvb2wuVGVlQ29uZmlnUHJvcGVydHkgfCByb3MuSVJlc29sdmFibGU7XG59XG5cbi8qKlxuICogVGhpcyBjbGFzcyBlbmNhcHN1bGF0ZXMgYW5kIGV4dGVuZHMgdGhlIFJPUyByZXNvdXJjZSB0eXBlIGBBTElZVU46OkNTOjpDbHVzdGVyTm9kZVBvb2xgLCB3aGljaCBpcyB1c2VkIHRvIGNyZWF0ZSBhIG5vZGUgcG9vbCBmb3IgYSBDb250YWluZXIgU2VydmljZSBmb3IgS3ViZXJuZXRlcyAoQUNLKSBjbHVzdGVyLlxuICogQE5vdGUgVGhpcyBjbGFzcyBtYXkgaGF2ZSBzb21lIG5ldyBmdW5jdGlvbnMgdG8gZmFjaWxpdGF0ZSBkZXZlbG9wbWVudCwgc28gaXQgaXMgcmVjb21tZW5kZWQgdG8gdXNlIHRoaXMgY2xhc3MgaW5zdGVhZCBvZiBgUm9zQ2x1c3Rlck5vZGVQb29sYGZvciBhIG1vcmUgY29udmVuaWVudCBkZXZlbG9wbWVudCBleHBlcmllbmNlLlxuICogU2VlIGh0dHBzOi8vd3d3LmFsaWJhYmFjbG91ZC5jb20vaGVscC9yb3MvZGV2ZWxvcGVyLXJlZmVyZW5jZS9hbGl5dW4tY3MtY2x1c3Rlcm5vZGVwb29sXG4gKi9cbmV4cG9ydCBjbGFzcyBDbHVzdGVyTm9kZVBvb2wgZXh0ZW5kcyByb3MuUmVzb3VyY2Uge1xuICAgIHByb3RlY3RlZCBzY29wZTogcm9zLkNvbnN0cnVjdDtcbiAgICBwcm90ZWN0ZWQgaWQ6IHN0cmluZztcbiAgICBwcm90ZWN0ZWQgcHJvcHM6IENsdXN0ZXJOb2RlUG9vbFByb3BzO1xuICAgIHByb3RlY3RlZCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBOb2RlUG9vbElkOiBDbHVzdGVyIG5vZGUgcG9vbCBJRC5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ck5vZGVQb29sSWQ6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFBhcmFtIHNjb3BlIC0gc2NvcGUgaW4gd2hpY2ggdGhpcyByZXNvdXJjZSBpcyBkZWZpbmVkXG4gICAgICogUGFyYW0gaWQgICAgLSBzY29wZWQgaWQgb2YgdGhlIHJlc291cmNlXG4gICAgICogUGFyYW0gcHJvcHMgLSByZXNvdXJjZSBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IHJvcy5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBDbHVzdGVyTm9kZVBvb2xQcm9wcywgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6Ym9vbGVhbiA9IHRydWUpIHtcbiAgICAgICAgc3VwZXIoc2NvcGUsIGlkKTtcbiAgICAgICAgdGhpcy5zY29wZSA9IHNjb3BlO1xuICAgICAgICB0aGlzLmlkID0gaWQ7XG4gICAgICAgIHRoaXMucHJvcHMgPSBwcm9wcztcbiAgICAgICAgdGhpcy5lbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCA9IGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50O1xuXG4gICAgICAgIGNvbnN0IHJvc0NsdXN0ZXJOb2RlUG9vbCA9IG5ldyBSb3NDbHVzdGVyTm9kZVBvb2wodGhpcywgaWQsICB7XG4gICAgICAgICAgICB0ZWVDb25maWc6IHByb3BzLnRlZUNvbmZpZyxcbiAgICAgICAgICAgIGNsdXN0ZXJJZDogcHJvcHMuY2x1c3RlcklkLFxuICAgICAgICAgICAgbm9kZVBvb2xJbmZvOiBwcm9wcy5ub2RlUG9vbEluZm8sXG4gICAgICAgICAgICBrdWJlcm5ldGVzQ29uZmlnOiBwcm9wcy5rdWJlcm5ldGVzQ29uZmlnLFxuICAgICAgICAgICAgY291bnQ6IHByb3BzLmNvdW50LFxuICAgICAgICAgICAgbWFuYWdlbWVudDogcHJvcHMubWFuYWdlbWVudCxcbiAgICAgICAgICAgIGF1dG9TY2FsaW5nOiBwcm9wcy5hdXRvU2NhbGluZyxcbiAgICAgICAgICAgIHNjYWxpbmdHcm91cDogcHJvcHMuc2NhbGluZ0dyb3VwLFxuICAgICAgICB9LCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCAmJiB0aGlzLnN0YWNrLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50KTtcbiAgICAgICAgdGhpcy5yZXNvdXJjZSA9IHJvc0NsdXN0ZXJOb2RlUG9vbDtcbiAgICAgICAgdGhpcy5hdHRyTm9kZVBvb2xJZCA9IHJvc0NsdXN0ZXJOb2RlUG9vbC5hdHRyTm9kZVBvb2xJZDtcbiAgICB9XG59XG4iXX0=