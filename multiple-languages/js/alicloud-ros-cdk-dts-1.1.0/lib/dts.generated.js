"use strict";
// Generated from the AliCloud ROS Resource Specification
Object.defineProperty(exports, "__esModule", { value: true });
exports.RosSynchronizationJob2 = exports.RosSubscriptionJob2 = exports.RosMigrationJob2 = exports.RosInstance = exports.RosConsumerGroup = void 0;
const ros = require("@alicloud/ros-cdk-core");
/**
 * Determine whether the given properties match those of a `RosConsumerGroupProps`
 *
 * @param properties - the TypeScript properties of a `RosConsumerGroupProps`
 *
 * @returns the result of the validation.
 */
function RosConsumerGroupPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('consumerGroupPassword', ros.requiredValidator)(properties.consumerGroupPassword));
    errors.collect(ros.propertyValidator('consumerGroupPassword', ros.validateString)(properties.consumerGroupPassword));
    errors.collect(ros.propertyValidator('consumerGroupUserName', ros.requiredValidator)(properties.consumerGroupUserName));
    errors.collect(ros.propertyValidator('consumerGroupUserName', ros.validateString)(properties.consumerGroupUserName));
    errors.collect(ros.propertyValidator('consumerGroupName', ros.requiredValidator)(properties.consumerGroupName));
    errors.collect(ros.propertyValidator('consumerGroupName', ros.validateString)(properties.consumerGroupName));
    errors.collect(ros.propertyValidator('subscriptionInstanceId', ros.requiredValidator)(properties.subscriptionInstanceId));
    errors.collect(ros.propertyValidator('subscriptionInstanceId', ros.validateString)(properties.subscriptionInstanceId));
    return errors.wrap('supplied properties not correct for "RosConsumerGroupProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::DTS::ConsumerGroup` resource
 *
 * @param properties - the TypeScript properties of a `RosConsumerGroupProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::DTS::ConsumerGroup` resource.
 */
// @ts-ignore TS6133
function rosConsumerGroupPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosConsumerGroupPropsValidator(properties).assertSuccess();
    }
    return {
        'ConsumerGroupName': ros.stringToRosTemplate(properties.consumerGroupName),
        'ConsumerGroupPassword': ros.stringToRosTemplate(properties.consumerGroupPassword),
        'ConsumerGroupUserName': ros.stringToRosTemplate(properties.consumerGroupUserName),
        'SubscriptionInstanceId': ros.stringToRosTemplate(properties.subscriptionInstanceId),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::DTS::ConsumerGroup`, which is used to create a consumer group for a change tracking instance.
 * @Note This class does not contain additional functions, so it is recommended to use the `ConsumerGroup` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-dts-consumergroup
 */
class RosConsumerGroup extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosConsumerGroup.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrConsumerGroupId = this.getAtt('ConsumerGroupID');
        this.attrConsumerGroupName = this.getAtt('ConsumerGroupName');
        this.attrSubscriptionInstanceId = this.getAtt('SubscriptionInstanceId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.consumerGroupName = props.consumerGroupName;
        this.consumerGroupPassword = props.consumerGroupPassword;
        this.consumerGroupUserName = props.consumerGroupUserName;
        this.subscriptionInstanceId = props.subscriptionInstanceId;
    }
    get rosProperties() {
        return {
            consumerGroupName: this.consumerGroupName,
            consumerGroupPassword: this.consumerGroupPassword,
            consumerGroupUserName: this.consumerGroupUserName,
            subscriptionInstanceId: this.subscriptionInstanceId,
        };
    }
    renderProperties(props) {
        return rosConsumerGroupPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosConsumerGroup = RosConsumerGroup;
/**
 * The resource type name for this resource class.
 */
RosConsumerGroup.ROS_RESOURCE_TYPE_NAME = "ALIYUN::DTS::ConsumerGroup";
/**
 * Determine whether the given properties match those of a `RosInstanceProps`
 *
 * @param properties - the TypeScript properties of a `RosInstanceProps`
 *
 * @returns the result of the validation.
 */
function RosInstancePropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('resourceGroupId', ros.validateString)(properties.resourceGroupId));
    errors.collect(ros.propertyValidator('feeType', ros.validateString)(properties.feeType));
    errors.collect(ros.propertyValidator('computeUnit', ros.validateNumber)(properties.computeUnit));
    if (properties.period && (typeof properties.period) !== 'object') {
        errors.collect(ros.propertyValidator('period', ros.validateAllowedValues)({
            data: properties.period,
            allowedValues: ["Month", "Year"],
        }));
    }
    errors.collect(ros.propertyValidator('period', ros.validateString)(properties.period));
    errors.collect(ros.propertyValidator('destinationRegion', ros.validateString)(properties.destinationRegion));
    errors.collect(ros.propertyValidator('instanceClass', ros.requiredValidator)(properties.instanceClass));
    if (properties.instanceClass && (typeof properties.instanceClass) !== 'object') {
        errors.collect(ros.propertyValidator('instanceClass', ros.validateAllowedValues)({
            data: properties.instanceClass,
            allowedValues: ["xxlarge", "xlarge", "large", "medium", "small", "micro"],
        }));
    }
    errors.collect(ros.propertyValidator('instanceClass', ros.validateString)(properties.instanceClass));
    errors.collect(ros.propertyValidator('sourceEndpointEngineName', ros.validateString)(properties.sourceEndpointEngineName));
    errors.collect(ros.propertyValidator('payType', ros.requiredValidator)(properties.payType));
    if (properties.payType && (typeof properties.payType) !== 'object') {
        errors.collect(ros.propertyValidator('payType', ros.validateAllowedValues)({
            data: properties.payType,
            allowedValues: ["PayAsYouGo", "PostPaid", "PayOnDemand", "Postpaid", "PostPay", "Postpay", "POSTPAY", "POST", "Subscription", "PrePaid", "Prepaid", "PrePay", "Prepay", "PREPAY", "PRE"],
        }));
    }
    errors.collect(ros.propertyValidator('payType', ros.validateString)(properties.payType));
    errors.collect(ros.propertyValidator('autoPay', ros.validateBoolean)(properties.autoPay));
    errors.collect(ros.propertyValidator('destinationEndpointEngineName', ros.validateString)(properties.destinationEndpointEngineName));
    errors.collect(ros.propertyValidator('sourceRegion', ros.validateString)(properties.sourceRegion));
    if (properties.du && (typeof properties.du) !== 'object') {
        errors.collect(ros.propertyValidator('du', ros.validateRange)({
            data: properties.du,
            min: 1,
            max: 100,
        }));
    }
    errors.collect(ros.propertyValidator('du', ros.validateNumber)(properties.du));
    errors.collect(ros.propertyValidator('type', ros.requiredValidator)(properties.type));
    if (properties.type && (typeof properties.type) !== 'object') {
        errors.collect(ros.propertyValidator('type', ros.validateAllowedValues)({
            data: properties.type,
            allowedValues: ["MIGRATION", "SYNC", "SUBSCRIBE"],
        }));
    }
    errors.collect(ros.propertyValidator('type', ros.validateString)(properties.type));
    errors.collect(ros.propertyValidator('databaseCount', ros.validateNumber)(properties.databaseCount));
    if (properties.usedTime && (typeof properties.usedTime) !== 'object') {
        errors.collect(ros.propertyValidator('usedTime', ros.validateAllowedValues)({
            data: properties.usedTime,
            allowedValues: [1, 2, 3, 4, 5, 6, 7, 8, 9],
        }));
    }
    errors.collect(ros.propertyValidator('usedTime', ros.validateNumber)(properties.usedTime));
    errors.collect(ros.propertyValidator('autoStart', ros.validateBoolean)(properties.autoStart));
    errors.collect(ros.propertyValidator('jobId', ros.validateString)(properties.jobId));
    if (properties.syncArchitecture && (typeof properties.syncArchitecture) !== 'object') {
        errors.collect(ros.propertyValidator('syncArchitecture', ros.validateAllowedValues)({
            data: properties.syncArchitecture,
            allowedValues: ["oneway", "bidirectional"],
        }));
    }
    errors.collect(ros.propertyValidator('syncArchitecture', ros.validateString)(properties.syncArchitecture));
    return errors.wrap('supplied properties not correct for "RosInstanceProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::DTS::Instance` resource
 *
 * @param properties - the TypeScript properties of a `RosInstanceProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::DTS::Instance` resource.
 */
// @ts-ignore TS6133
function rosInstancePropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosInstancePropsValidator(properties).assertSuccess();
    }
    return {
        'InstanceClass': ros.stringToRosTemplate(properties.instanceClass),
        'PayType': ros.stringToRosTemplate(properties.payType),
        'Type': ros.stringToRosTemplate(properties.type),
        'AutoPay': ros.booleanToRosTemplate(properties.autoPay),
        'AutoStart': ros.booleanToRosTemplate(properties.autoStart),
        'ComputeUnit': ros.numberToRosTemplate(properties.computeUnit),
        'DatabaseCount': ros.numberToRosTemplate(properties.databaseCount),
        'DestinationEndpointEngineName': ros.stringToRosTemplate(properties.destinationEndpointEngineName),
        'DestinationRegion': ros.stringToRosTemplate(properties.destinationRegion),
        'Du': ros.numberToRosTemplate(properties.du),
        'FeeType': ros.stringToRosTemplate(properties.feeType),
        'JobId': ros.stringToRosTemplate(properties.jobId),
        'Period': ros.stringToRosTemplate(properties.period),
        'ResourceGroupId': ros.stringToRosTemplate(properties.resourceGroupId),
        'SourceEndpointEngineName': ros.stringToRosTemplate(properties.sourceEndpointEngineName),
        'SourceRegion': ros.stringToRosTemplate(properties.sourceRegion),
        'SyncArchitecture': ros.stringToRosTemplate(properties.syncArchitecture),
        'UsedTime': ros.numberToRosTemplate(properties.usedTime),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::DTS::Instance`, which is a new resource type that is used to create a Data Transmission Service (DTS) instance.
 * @Note This class does not contain additional functions, so it is recommended to use the `Instance` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-dts-instance
 */
class RosInstance extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosInstance.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrInstanceId = this.getAtt('InstanceId');
        this.attrJobId = this.getAtt('JobId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.instanceClass = props.instanceClass;
        this.payType = props.payType;
        this.type = props.type;
        this.autoPay = props.autoPay;
        this.autoStart = props.autoStart;
        this.computeUnit = props.computeUnit;
        this.databaseCount = props.databaseCount;
        this.destinationEndpointEngineName = props.destinationEndpointEngineName;
        this.destinationRegion = props.destinationRegion;
        this.du = props.du;
        this.feeType = props.feeType;
        this.jobId = props.jobId;
        this.period = props.period;
        this.resourceGroupId = props.resourceGroupId;
        this.sourceEndpointEngineName = props.sourceEndpointEngineName;
        this.sourceRegion = props.sourceRegion;
        this.syncArchitecture = props.syncArchitecture;
        this.usedTime = props.usedTime;
    }
    get rosProperties() {
        return {
            instanceClass: this.instanceClass,
            payType: this.payType,
            type: this.type,
            autoPay: this.autoPay,
            autoStart: this.autoStart,
            computeUnit: this.computeUnit,
            databaseCount: this.databaseCount,
            destinationEndpointEngineName: this.destinationEndpointEngineName,
            destinationRegion: this.destinationRegion,
            du: this.du,
            feeType: this.feeType,
            jobId: this.jobId,
            period: this.period,
            resourceGroupId: this.resourceGroupId,
            sourceEndpointEngineName: this.sourceEndpointEngineName,
            sourceRegion: this.sourceRegion,
            syncArchitecture: this.syncArchitecture,
            usedTime: this.usedTime,
        };
    }
    renderProperties(props) {
        return rosInstancePropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosInstance = RosInstance;
/**
 * The resource type name for this resource class.
 */
RosInstance.ROS_RESOURCE_TYPE_NAME = "ALIYUN::DTS::Instance";
/**
 * Determine whether the given properties match those of a `RosMigrationJob2Props`
 *
 * @param properties - the TypeScript properties of a `RosMigrationJob2Props`
 *
 * @returns the result of the validation.
 */
function RosMigrationJob2PropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    if (properties.status && (typeof properties.status) !== 'object') {
        errors.collect(ros.propertyValidator('status', ros.validateAllowedValues)({
            data: properties.status,
            allowedValues: ["Migrating", "Suspending", "Stopping"],
        }));
    }
    errors.collect(ros.propertyValidator('status', ros.validateString)(properties.status));
    errors.collect(ros.propertyValidator('reserve', ros.hashValidator(ros.validateAny))(properties.reserve));
    errors.collect(ros.propertyValidator('dataSynchronization', ros.requiredValidator)(properties.dataSynchronization));
    errors.collect(ros.propertyValidator('dataSynchronization', ros.validateBoolean)(properties.dataSynchronization));
    errors.collect(ros.propertyValidator('dedicatedClusterId', ros.validateString)(properties.dedicatedClusterId));
    errors.collect(ros.propertyValidator('delayPhone', ros.validateString)(properties.delayPhone));
    errors.collect(ros.propertyValidator('errorNotice', ros.validateBoolean)(properties.errorNotice));
    errors.collect(ros.propertyValidator('dtsJobName', ros.requiredValidator)(properties.dtsJobName));
    errors.collect(ros.propertyValidator('dtsJobName', ros.validateString)(properties.dtsJobName));
    errors.collect(ros.propertyValidator('delayRuleTime', ros.validateNumber)(properties.delayRuleTime));
    errors.collect(ros.propertyValidator('dtsInstanceId', ros.validateString)(properties.dtsInstanceId));
    errors.collect(ros.propertyValidator('dbList', ros.requiredValidator)(properties.dbList));
    errors.collect(ros.propertyValidator('dbList', ros.hashValidator(ros.validateAny))(properties.dbList));
    errors.collect(ros.propertyValidator('fileOssUrl', ros.validateString)(properties.fileOssUrl));
    errors.collect(ros.propertyValidator('dataCheckConfigure', RosMigrationJob2_DataCheckConfigurePropertyValidator)(properties.dataCheckConfigure));
    errors.collect(ros.propertyValidator('dtsBisLabel', ros.validateString)(properties.dtsBisLabel));
    errors.collect(ros.propertyValidator('checkpoint', ros.validateString)(properties.checkpoint));
    errors.collect(ros.propertyValidator('disasterRecoveryJob', ros.validateBoolean)(properties.disasterRecoveryJob));
    errors.collect(ros.propertyValidator('dtsJobId', ros.validateString)(properties.dtsJobId));
    errors.collect(ros.propertyValidator('delayNotice', ros.validateBoolean)(properties.delayNotice));
    errors.collect(ros.propertyValidator('dataInitialization', ros.requiredValidator)(properties.dataInitialization));
    errors.collect(ros.propertyValidator('dataInitialization', ros.validateBoolean)(properties.dataInitialization));
    errors.collect(ros.propertyValidator('destinationEndpoint', ros.requiredValidator)(properties.destinationEndpoint));
    errors.collect(ros.propertyValidator('destinationEndpoint', RosMigrationJob2_DestinationEndpointPropertyValidator)(properties.destinationEndpoint));
    errors.collect(ros.propertyValidator('sourceEndpoint', ros.requiredValidator)(properties.sourceEndpoint));
    errors.collect(ros.propertyValidator('sourceEndpoint', RosMigrationJob2_SourceEndpointPropertyValidator)(properties.sourceEndpoint));
    errors.collect(ros.propertyValidator('errorPhone', ros.validateString)(properties.errorPhone));
    errors.collect(ros.propertyValidator('structureInitialization', ros.requiredValidator)(properties.structureInitialization));
    errors.collect(ros.propertyValidator('structureInitialization', ros.validateBoolean)(properties.structureInitialization));
    return errors.wrap('supplied properties not correct for "RosMigrationJob2Props"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::DTS::MigrationJob2` resource
 *
 * @param properties - the TypeScript properties of a `RosMigrationJob2Props`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::DTS::MigrationJob2` resource.
 */
// @ts-ignore TS6133
function rosMigrationJob2PropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosMigrationJob2PropsValidator(properties).assertSuccess();
    }
    return {
        'DataInitialization': ros.booleanToRosTemplate(properties.dataInitialization),
        'DataSynchronization': ros.booleanToRosTemplate(properties.dataSynchronization),
        'DbList': ros.hashMapper(ros.objectToRosTemplate)(properties.dbList),
        'DestinationEndpoint': rosMigrationJob2DestinationEndpointPropertyToRosTemplate(properties.destinationEndpoint),
        'DtsJobName': ros.stringToRosTemplate(properties.dtsJobName),
        'SourceEndpoint': rosMigrationJob2SourceEndpointPropertyToRosTemplate(properties.sourceEndpoint),
        'StructureInitialization': ros.booleanToRosTemplate(properties.structureInitialization),
        'Checkpoint': ros.stringToRosTemplate(properties.checkpoint),
        'DataCheckConfigure': rosMigrationJob2DataCheckConfigurePropertyToRosTemplate(properties.dataCheckConfigure),
        'DedicatedClusterId': ros.stringToRosTemplate(properties.dedicatedClusterId),
        'DelayNotice': ros.booleanToRosTemplate(properties.delayNotice),
        'DelayPhone': ros.stringToRosTemplate(properties.delayPhone),
        'DelayRuleTime': ros.numberToRosTemplate(properties.delayRuleTime),
        'DisasterRecoveryJob': ros.booleanToRosTemplate(properties.disasterRecoveryJob),
        'DtsBisLabel': ros.stringToRosTemplate(properties.dtsBisLabel),
        'DtsInstanceId': ros.stringToRosTemplate(properties.dtsInstanceId),
        'DtsJobId': ros.stringToRosTemplate(properties.dtsJobId),
        'ErrorNotice': ros.booleanToRosTemplate(properties.errorNotice),
        'ErrorPhone': ros.stringToRosTemplate(properties.errorPhone),
        'FileOssUrl': ros.stringToRosTemplate(properties.fileOssUrl),
        'Reserve': ros.hashMapper(ros.objectToRosTemplate)(properties.reserve),
        'Status': ros.stringToRosTemplate(properties.status),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::DTS::MigrationJob2`, which is used to purchase a data migration instance and configure a data migration task of the new version.
 * @Note This class does not contain additional functions, so it is recommended to use the `MigrationJob2` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-dts-migrationjob2
 */
class RosMigrationJob2 extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosMigrationJob2.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrDtsInstanceId = this.getAtt('DtsInstanceId');
        this.attrDtsJobId = this.getAtt('DtsJobId');
        this.attrDtsJobName = this.getAtt('DtsJobName');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.dataInitialization = props.dataInitialization;
        this.dataSynchronization = props.dataSynchronization;
        this.dbList = props.dbList;
        this.destinationEndpoint = props.destinationEndpoint;
        this.dtsJobName = props.dtsJobName;
        this.sourceEndpoint = props.sourceEndpoint;
        this.structureInitialization = props.structureInitialization;
        this.checkpoint = props.checkpoint;
        this.dataCheckConfigure = props.dataCheckConfigure;
        this.dedicatedClusterId = props.dedicatedClusterId;
        this.delayNotice = props.delayNotice;
        this.delayPhone = props.delayPhone;
        this.delayRuleTime = props.delayRuleTime;
        this.disasterRecoveryJob = props.disasterRecoveryJob;
        this.dtsBisLabel = props.dtsBisLabel;
        this.dtsInstanceId = props.dtsInstanceId;
        this.dtsJobId = props.dtsJobId;
        this.errorNotice = props.errorNotice;
        this.errorPhone = props.errorPhone;
        this.fileOssUrl = props.fileOssUrl;
        this.reserve = props.reserve;
        this.status = props.status;
    }
    get rosProperties() {
        return {
            dataInitialization: this.dataInitialization,
            dataSynchronization: this.dataSynchronization,
            dbList: this.dbList,
            destinationEndpoint: this.destinationEndpoint,
            dtsJobName: this.dtsJobName,
            sourceEndpoint: this.sourceEndpoint,
            structureInitialization: this.structureInitialization,
            checkpoint: this.checkpoint,
            dataCheckConfigure: this.dataCheckConfigure,
            dedicatedClusterId: this.dedicatedClusterId,
            delayNotice: this.delayNotice,
            delayPhone: this.delayPhone,
            delayRuleTime: this.delayRuleTime,
            disasterRecoveryJob: this.disasterRecoveryJob,
            dtsBisLabel: this.dtsBisLabel,
            dtsInstanceId: this.dtsInstanceId,
            dtsJobId: this.dtsJobId,
            errorNotice: this.errorNotice,
            errorPhone: this.errorPhone,
            fileOssUrl: this.fileOssUrl,
            reserve: this.reserve,
            status: this.status,
        };
    }
    renderProperties(props) {
        return rosMigrationJob2PropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosMigrationJob2 = RosMigrationJob2;
/**
 * The resource type name for this resource class.
 */
RosMigrationJob2.ROS_RESOURCE_TYPE_NAME = "ALIYUN::DTS::MigrationJob2";
/**
 * Determine whether the given properties match those of a `DataCheckConfigureProperty`
 *
 * @param properties - the TypeScript properties of a `DataCheckConfigureProperty`
 *
 * @returns the result of the validation.
 */
function RosMigrationJob2_DataCheckConfigurePropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    if (properties.fullCheckMaxReadRps && (typeof properties.fullCheckMaxReadRps) !== 'object') {
        errors.collect(ros.propertyValidator('fullCheckMaxReadRps', ros.validateRange)({
            data: properties.fullCheckMaxReadRps,
            min: 0,
            max: 9007199254740991,
        }));
    }
    errors.collect(ros.propertyValidator('fullCheckMaxReadRps', ros.validateNumber)(properties.fullCheckMaxReadRps));
    errors.collect(ros.propertyValidator('dataCheckNoticePhone', ros.validateString)(properties.dataCheckNoticePhone));
    errors.collect(ros.propertyValidator('incrementalCheckDelayNotice', ros.validateBoolean)(properties.incrementalCheckDelayNotice));
    errors.collect(ros.propertyValidator('incrementalCheckDelayNoticeValue', ros.validateNumber)(properties.incrementalCheckDelayNoticeValue));
    if (properties.incrementalCheckDelayNoticePeriod && (typeof properties.incrementalCheckDelayNoticePeriod) !== 'object') {
        errors.collect(ros.propertyValidator('incrementalCheckDelayNoticePeriod', ros.validateAllowedValues)({
            data: properties.incrementalCheckDelayNoticePeriod,
            allowedValues: [1, 2, 3, 4],
        }));
    }
    errors.collect(ros.propertyValidator('incrementalCheckDelayNoticePeriod', ros.validateNumber)(properties.incrementalCheckDelayNoticePeriod));
    errors.collect(ros.propertyValidator('dataCheckDbList', ros.validateString)(properties.dataCheckDbList));
    if (properties.checkMaximumHourEnable && (typeof properties.checkMaximumHourEnable) !== 'object') {
        errors.collect(ros.propertyValidator('checkMaximumHourEnable', ros.validateAllowedValues)({
            data: properties.checkMaximumHourEnable,
            allowedValues: [0, 1],
        }));
    }
    errors.collect(ros.propertyValidator('checkMaximumHourEnable', ros.validateNumber)(properties.checkMaximumHourEnable));
    if (properties.fullCheckRatio && (typeof properties.fullCheckRatio) !== 'object') {
        errors.collect(ros.propertyValidator('fullCheckRatio', ros.validateRange)({
            data: properties.fullCheckRatio,
            min: 10,
            max: 100,
        }));
    }
    errors.collect(ros.propertyValidator('fullCheckRatio', ros.validateNumber)(properties.fullCheckRatio));
    if (properties.checkMaximumHour && (typeof properties.checkMaximumHour) !== 'object') {
        errors.collect(ros.propertyValidator('checkMaximumHour', ros.validateRange)({
            data: properties.checkMaximumHour,
            min: 1,
            max: 72,
        }));
    }
    errors.collect(ros.propertyValidator('checkMaximumHour', ros.validateNumber)(properties.checkMaximumHour));
    errors.collect(ros.propertyValidator('fullCheckFixData', ros.validateBoolean)(properties.fullCheckFixData));
    if (properties.fullCheckModel && (typeof properties.fullCheckModel) !== 'object') {
        errors.collect(ros.propertyValidator('fullCheckModel', ros.validateAllowedValues)({
            data: properties.fullCheckModel,
            allowedValues: [1, 2],
        }));
    }
    errors.collect(ros.propertyValidator('fullCheckModel', ros.validateNumber)(properties.fullCheckModel));
    errors.collect(ros.propertyValidator('incrementalCheckValidFailNoticeValue', ros.validateNumber)(properties.incrementalCheckValidFailNoticeValue));
    errors.collect(ros.propertyValidator('incrementalDataCheck', ros.validateBoolean)(properties.incrementalDataCheck));
    errors.collect(ros.propertyValidator('incrementalCheckValidFailNoticeTimes', ros.validateNumber)(properties.incrementalCheckValidFailNoticeTimes));
    if (properties.fullCheckMaxReadBps && (typeof properties.fullCheckMaxReadBps) !== 'object') {
        errors.collect(ros.propertyValidator('fullCheckMaxReadBps', ros.validateRange)({
            data: properties.fullCheckMaxReadBps,
            min: 0,
            max: 9007199254740991,
        }));
    }
    errors.collect(ros.propertyValidator('fullCheckMaxReadBps', ros.validateNumber)(properties.fullCheckMaxReadBps));
    errors.collect(ros.propertyValidator('fullCheckValidFailNotice', ros.validateBoolean)(properties.fullCheckValidFailNotice));
    errors.collect(ros.propertyValidator('fullCheckErrorNotice', ros.validateBoolean)(properties.fullCheckErrorNotice));
    if (properties.incrementalCheckValidFailNoticePeriod && (typeof properties.incrementalCheckValidFailNoticePeriod) !== 'object') {
        errors.collect(ros.propertyValidator('incrementalCheckValidFailNoticePeriod', ros.validateAllowedValues)({
            data: properties.incrementalCheckValidFailNoticePeriod,
            allowedValues: [1, 2, 3, 4],
        }));
    }
    errors.collect(ros.propertyValidator('incrementalCheckValidFailNoticePeriod', ros.validateNumber)(properties.incrementalCheckValidFailNoticePeriod));
    errors.collect(ros.propertyValidator('incrementalCheckDelayNoticeTimes', ros.validateNumber)(properties.incrementalCheckDelayNoticeTimes));
    errors.collect(ros.propertyValidator('fullCheckReferEndpoint', ros.validateString)(properties.fullCheckReferEndpoint));
    errors.collect(ros.propertyValidator('fullDataCheck', ros.validateBoolean)(properties.fullDataCheck));
    errors.collect(ros.propertyValidator('incrementalCheckValidFailNotice', ros.validateBoolean)(properties.incrementalCheckValidFailNotice));
    errors.collect(ros.propertyValidator('fullCheckNoticeValue', ros.validateNumber)(properties.fullCheckNoticeValue));
    errors.collect(ros.propertyValidator('incrementalCheckErrorNotice', ros.validateBoolean)(properties.incrementalCheckErrorNotice));
    return errors.wrap('supplied properties not correct for "DataCheckConfigureProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::DTS::MigrationJob2.DataCheckConfigure` resource
 *
 * @param properties - the TypeScript properties of a `DataCheckConfigureProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::DTS::MigrationJob2.DataCheckConfigure` resource.
 */
// @ts-ignore TS6133
function rosMigrationJob2DataCheckConfigurePropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosMigrationJob2_DataCheckConfigurePropertyValidator(properties).assertSuccess();
    return {
        'fullCheckMaxReadRps': ros.numberToRosTemplate(properties.fullCheckMaxReadRps),
        'dataCheckNoticePhone': ros.stringToRosTemplate(properties.dataCheckNoticePhone),
        'incrementalCheckDelayNotice': ros.booleanToRosTemplate(properties.incrementalCheckDelayNotice),
        'incrementalCheckDelayNoticeValue': ros.numberToRosTemplate(properties.incrementalCheckDelayNoticeValue),
        'incrementalCheckDelayNoticePeriod': ros.numberToRosTemplate(properties.incrementalCheckDelayNoticePeriod),
        'dataCheckDbList': ros.stringToRosTemplate(properties.dataCheckDbList),
        'checkMaximumHourEnable': ros.numberToRosTemplate(properties.checkMaximumHourEnable),
        'fullCheckRatio': ros.numberToRosTemplate(properties.fullCheckRatio),
        'checkMaximumHour': ros.numberToRosTemplate(properties.checkMaximumHour),
        'fullCheckFixData': ros.booleanToRosTemplate(properties.fullCheckFixData),
        'fullCheckModel': ros.numberToRosTemplate(properties.fullCheckModel),
        'incrementalCheckValidFailNoticeValue': ros.numberToRosTemplate(properties.incrementalCheckValidFailNoticeValue),
        'incrementalDataCheck': ros.booleanToRosTemplate(properties.incrementalDataCheck),
        'incrementalCheckValidFailNoticeTimes': ros.numberToRosTemplate(properties.incrementalCheckValidFailNoticeTimes),
        'fullCheckMaxReadBps': ros.numberToRosTemplate(properties.fullCheckMaxReadBps),
        'fullCheckValidFailNotice': ros.booleanToRosTemplate(properties.fullCheckValidFailNotice),
        'fullCheckErrorNotice': ros.booleanToRosTemplate(properties.fullCheckErrorNotice),
        'incrementalCheckValidFailNoticePeriod': ros.numberToRosTemplate(properties.incrementalCheckValidFailNoticePeriod),
        'incrementalCheckDelayNoticeTimes': ros.numberToRosTemplate(properties.incrementalCheckDelayNoticeTimes),
        'fullCheckReferEndpoint': ros.stringToRosTemplate(properties.fullCheckReferEndpoint),
        'fullDataCheck': ros.booleanToRosTemplate(properties.fullDataCheck),
        'incrementalCheckValidFailNotice': ros.booleanToRosTemplate(properties.incrementalCheckValidFailNotice),
        'fullCheckNoticeValue': ros.numberToRosTemplate(properties.fullCheckNoticeValue),
        'incrementalCheckErrorNotice': ros.booleanToRosTemplate(properties.incrementalCheckErrorNotice),
    };
}
/**
 * Determine whether the given properties match those of a `DestinationEndpointProperty`
 *
 * @param properties - the TypeScript properties of a `DestinationEndpointProperty`
 *
 * @returns the result of the validation.
 */
function RosMigrationJob2_DestinationEndpointPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('role', ros.validateString)(properties.role));
    errors.collect(ros.propertyValidator('oracleSid', ros.validateString)(properties.oracleSid));
    errors.collect(ros.propertyValidator('userName', ros.validateString)(properties.userName));
    errors.collect(ros.propertyValidator('ownerId', ros.validateString)(properties.ownerId));
    errors.collect(ros.propertyValidator('instanceId', ros.validateString)(properties.instanceId));
    errors.collect(ros.propertyValidator('ip', ros.validateString)(properties.ip));
    errors.collect(ros.propertyValidator('port', ros.validateString)(properties.port));
    errors.collect(ros.propertyValidator('databaseName', ros.validateString)(properties.databaseName));
    errors.collect(ros.propertyValidator('region', ros.validateString)(properties.region));
    errors.collect(ros.propertyValidator('instanceType', ros.requiredValidator)(properties.instanceType));
    errors.collect(ros.propertyValidator('instanceType', ros.validateString)(properties.instanceType));
    errors.collect(ros.propertyValidator('engineName', ros.validateString)(properties.engineName));
    errors.collect(ros.propertyValidator('password', ros.validateString)(properties.password));
    return errors.wrap('supplied properties not correct for "DestinationEndpointProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::DTS::MigrationJob2.DestinationEndpoint` resource
 *
 * @param properties - the TypeScript properties of a `DestinationEndpointProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::DTS::MigrationJob2.DestinationEndpoint` resource.
 */
// @ts-ignore TS6133
function rosMigrationJob2DestinationEndpointPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosMigrationJob2_DestinationEndpointPropertyValidator(properties).assertSuccess();
    return {
        'Role': ros.stringToRosTemplate(properties.role),
        'OracleSID': ros.stringToRosTemplate(properties.oracleSid),
        'UserName': ros.stringToRosTemplate(properties.userName),
        'OwnerID': ros.stringToRosTemplate(properties.ownerId),
        'InstanceID': ros.stringToRosTemplate(properties.instanceId),
        'IP': ros.stringToRosTemplate(properties.ip),
        'Port': ros.stringToRosTemplate(properties.port),
        'DatabaseName': ros.stringToRosTemplate(properties.databaseName),
        'Region': ros.stringToRosTemplate(properties.region),
        'InstanceType': ros.stringToRosTemplate(properties.instanceType),
        'EngineName': ros.stringToRosTemplate(properties.engineName),
        'Password': ros.stringToRosTemplate(properties.password),
    };
}
/**
 * Determine whether the given properties match those of a `SourceEndpointProperty`
 *
 * @param properties - the TypeScript properties of a `SourceEndpointProperty`
 *
 * @returns the result of the validation.
 */
function RosMigrationJob2_SourceEndpointPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('oracleSid', ros.validateString)(properties.oracleSid));
    errors.collect(ros.propertyValidator('userName', ros.validateString)(properties.userName));
    errors.collect(ros.propertyValidator('instanceId', ros.validateString)(properties.instanceId));
    errors.collect(ros.propertyValidator('ip', ros.validateString)(properties.ip));
    errors.collect(ros.propertyValidator('port', ros.validateString)(properties.port));
    errors.collect(ros.propertyValidator('vSwitchId', ros.validateString)(properties.vSwitchId));
    errors.collect(ros.propertyValidator('databaseName', ros.validateString)(properties.databaseName));
    errors.collect(ros.propertyValidator('engineName', ros.validateString)(properties.engineName));
    errors.collect(ros.propertyValidator('role', ros.validateString)(properties.role));
    errors.collect(ros.propertyValidator('ownerId', ros.validateString)(properties.ownerId));
    errors.collect(ros.propertyValidator('region', ros.validateString)(properties.region));
    errors.collect(ros.propertyValidator('instanceType', ros.requiredValidator)(properties.instanceType));
    errors.collect(ros.propertyValidator('instanceType', ros.validateString)(properties.instanceType));
    errors.collect(ros.propertyValidator('password', ros.validateString)(properties.password));
    return errors.wrap('supplied properties not correct for "SourceEndpointProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::DTS::MigrationJob2.SourceEndpoint` resource
 *
 * @param properties - the TypeScript properties of a `SourceEndpointProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::DTS::MigrationJob2.SourceEndpoint` resource.
 */
// @ts-ignore TS6133
function rosMigrationJob2SourceEndpointPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosMigrationJob2_SourceEndpointPropertyValidator(properties).assertSuccess();
    return {
        'OracleSID': ros.stringToRosTemplate(properties.oracleSid),
        'UserName': ros.stringToRosTemplate(properties.userName),
        'InstanceID': ros.stringToRosTemplate(properties.instanceId),
        'IP': ros.stringToRosTemplate(properties.ip),
        'Port': ros.stringToRosTemplate(properties.port),
        'VSwitchID': ros.stringToRosTemplate(properties.vSwitchId),
        'DatabaseName': ros.stringToRosTemplate(properties.databaseName),
        'EngineName': ros.stringToRosTemplate(properties.engineName),
        'Role': ros.stringToRosTemplate(properties.role),
        'OwnerID': ros.stringToRosTemplate(properties.ownerId),
        'Region': ros.stringToRosTemplate(properties.region),
        'InstanceType': ros.stringToRosTemplate(properties.instanceType),
        'Password': ros.stringToRosTemplate(properties.password),
    };
}
/**
 * Determine whether the given properties match those of a `RosSubscriptionJob2Props`
 *
 * @param properties - the TypeScript properties of a `RosSubscriptionJob2Props`
 *
 * @returns the result of the validation.
 */
function RosSubscriptionJob2PropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    if (properties.status && (typeof properties.status) !== 'object') {
        errors.collect(ros.propertyValidator('status', ros.validateAllowedValues)({
            data: properties.status,
            allowedValues: ["Subscribing", "Suspending", "Stopping"],
        }));
    }
    errors.collect(ros.propertyValidator('status', ros.validateString)(properties.status));
    errors.collect(ros.propertyValidator('reserve', ros.hashValidator(ros.validateAny))(properties.reserve));
    errors.collect(ros.propertyValidator('delayPhone', ros.validateString)(properties.delayPhone));
    errors.collect(ros.propertyValidator('dedicatedClusterId', ros.validateString)(properties.dedicatedClusterId));
    errors.collect(ros.propertyValidator('errorNotice', ros.validateBoolean)(properties.errorNotice));
    errors.collect(ros.propertyValidator('dtsJobName', ros.requiredValidator)(properties.dtsJobName));
    errors.collect(ros.propertyValidator('dtsJobName', ros.validateString)(properties.dtsJobName));
    errors.collect(ros.propertyValidator('delayRuleTime', ros.validateNumber)(properties.delayRuleTime));
    errors.collect(ros.propertyValidator('dtsInstanceId', ros.validateString)(properties.dtsInstanceId));
    errors.collect(ros.propertyValidator('dbList', ros.requiredValidator)(properties.dbList));
    errors.collect(ros.propertyValidator('dbList', ros.hashValidator(ros.validateAny))(properties.dbList));
    errors.collect(ros.propertyValidator('dtsBisLabel', ros.validateString)(properties.dtsBisLabel));
    errors.collect(ros.propertyValidator('subscriptionDataType', RosSubscriptionJob2_SubscriptionDataTypePropertyValidator)(properties.subscriptionDataType));
    errors.collect(ros.propertyValidator('checkpoint', ros.validateString)(properties.checkpoint));
    errors.collect(ros.propertyValidator('delayNotice', ros.validateBoolean)(properties.delayNotice));
    errors.collect(ros.propertyValidator('dtsJobId', ros.validateString)(properties.dtsJobId));
    errors.collect(ros.propertyValidator('subscriptionInstance', ros.requiredValidator)(properties.subscriptionInstance));
    errors.collect(ros.propertyValidator('subscriptionInstance', RosSubscriptionJob2_SubscriptionInstancePropertyValidator)(properties.subscriptionInstance));
    errors.collect(ros.propertyValidator('sourceEndpoint', ros.requiredValidator)(properties.sourceEndpoint));
    errors.collect(ros.propertyValidator('sourceEndpoint', RosSubscriptionJob2_SourceEndpointPropertyValidator)(properties.sourceEndpoint));
    errors.collect(ros.propertyValidator('errorPhone', ros.validateString)(properties.errorPhone));
    return errors.wrap('supplied properties not correct for "RosSubscriptionJob2Props"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::DTS::SubscriptionJob2` resource
 *
 * @param properties - the TypeScript properties of a `RosSubscriptionJob2Props`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::DTS::SubscriptionJob2` resource.
 */
// @ts-ignore TS6133
function rosSubscriptionJob2PropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosSubscriptionJob2PropsValidator(properties).assertSuccess();
    }
    return {
        'DbList': ros.hashMapper(ros.objectToRosTemplate)(properties.dbList),
        'DtsJobName': ros.stringToRosTemplate(properties.dtsJobName),
        'SourceEndpoint': rosSubscriptionJob2SourceEndpointPropertyToRosTemplate(properties.sourceEndpoint),
        'SubscriptionInstance': rosSubscriptionJob2SubscriptionInstancePropertyToRosTemplate(properties.subscriptionInstance),
        'Checkpoint': ros.stringToRosTemplate(properties.checkpoint),
        'DedicatedClusterId': ros.stringToRosTemplate(properties.dedicatedClusterId),
        'DelayNotice': ros.booleanToRosTemplate(properties.delayNotice),
        'DelayPhone': ros.stringToRosTemplate(properties.delayPhone),
        'DelayRuleTime': ros.numberToRosTemplate(properties.delayRuleTime),
        'DtsBisLabel': ros.stringToRosTemplate(properties.dtsBisLabel),
        'DtsInstanceId': ros.stringToRosTemplate(properties.dtsInstanceId),
        'DtsJobId': ros.stringToRosTemplate(properties.dtsJobId),
        'ErrorNotice': ros.booleanToRosTemplate(properties.errorNotice),
        'ErrorPhone': ros.stringToRosTemplate(properties.errorPhone),
        'Reserve': ros.hashMapper(ros.objectToRosTemplate)(properties.reserve),
        'Status': ros.stringToRosTemplate(properties.status),
        'SubscriptionDataType': rosSubscriptionJob2SubscriptionDataTypePropertyToRosTemplate(properties.subscriptionDataType),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::DTS::SubscriptionJob2`, which is used to configure a change tracking task.
 * @Note This class does not contain additional functions, so it is recommended to use the `SubscriptionJob2` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-dts-subscriptionjob2
 */
class RosSubscriptionJob2 extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosSubscriptionJob2.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrDtsInstanceId = this.getAtt('DtsInstanceId');
        this.attrDtsJobId = this.getAtt('DtsJobId');
        this.attrDtsJobName = this.getAtt('DtsJobName');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.dbList = props.dbList;
        this.dtsJobName = props.dtsJobName;
        this.sourceEndpoint = props.sourceEndpoint;
        this.subscriptionInstance = props.subscriptionInstance;
        this.checkpoint = props.checkpoint;
        this.dedicatedClusterId = props.dedicatedClusterId;
        this.delayNotice = props.delayNotice;
        this.delayPhone = props.delayPhone;
        this.delayRuleTime = props.delayRuleTime;
        this.dtsBisLabel = props.dtsBisLabel;
        this.dtsInstanceId = props.dtsInstanceId;
        this.dtsJobId = props.dtsJobId;
        this.errorNotice = props.errorNotice;
        this.errorPhone = props.errorPhone;
        this.reserve = props.reserve;
        this.status = props.status;
        this.subscriptionDataType = props.subscriptionDataType;
    }
    get rosProperties() {
        return {
            dbList: this.dbList,
            dtsJobName: this.dtsJobName,
            sourceEndpoint: this.sourceEndpoint,
            subscriptionInstance: this.subscriptionInstance,
            checkpoint: this.checkpoint,
            dedicatedClusterId: this.dedicatedClusterId,
            delayNotice: this.delayNotice,
            delayPhone: this.delayPhone,
            delayRuleTime: this.delayRuleTime,
            dtsBisLabel: this.dtsBisLabel,
            dtsInstanceId: this.dtsInstanceId,
            dtsJobId: this.dtsJobId,
            errorNotice: this.errorNotice,
            errorPhone: this.errorPhone,
            reserve: this.reserve,
            status: this.status,
            subscriptionDataType: this.subscriptionDataType,
        };
    }
    renderProperties(props) {
        return rosSubscriptionJob2PropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosSubscriptionJob2 = RosSubscriptionJob2;
/**
 * The resource type name for this resource class.
 */
RosSubscriptionJob2.ROS_RESOURCE_TYPE_NAME = "ALIYUN::DTS::SubscriptionJob2";
/**
 * Determine whether the given properties match those of a `SourceEndpointProperty`
 *
 * @param properties - the TypeScript properties of a `SourceEndpointProperty`
 *
 * @returns the result of the validation.
 */
function RosSubscriptionJob2_SourceEndpointPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('oracleSid', ros.validateString)(properties.oracleSid));
    errors.collect(ros.propertyValidator('userName', ros.validateString)(properties.userName));
    errors.collect(ros.propertyValidator('instanceId', ros.validateString)(properties.instanceId));
    errors.collect(ros.propertyValidator('ip', ros.validateString)(properties.ip));
    errors.collect(ros.propertyValidator('port', ros.validateString)(properties.port));
    errors.collect(ros.propertyValidator('vSwitchId', ros.validateString)(properties.vSwitchId));
    errors.collect(ros.propertyValidator('databaseName', ros.validateString)(properties.databaseName));
    errors.collect(ros.propertyValidator('engineName', ros.validateString)(properties.engineName));
    errors.collect(ros.propertyValidator('role', ros.validateString)(properties.role));
    errors.collect(ros.propertyValidator('ownerId', ros.validateString)(properties.ownerId));
    errors.collect(ros.propertyValidator('region', ros.validateString)(properties.region));
    errors.collect(ros.propertyValidator('instanceType', ros.validateString)(properties.instanceType));
    errors.collect(ros.propertyValidator('password', ros.validateString)(properties.password));
    return errors.wrap('supplied properties not correct for "SourceEndpointProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::DTS::SubscriptionJob2.SourceEndpoint` resource
 *
 * @param properties - the TypeScript properties of a `SourceEndpointProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::DTS::SubscriptionJob2.SourceEndpoint` resource.
 */
// @ts-ignore TS6133
function rosSubscriptionJob2SourceEndpointPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosSubscriptionJob2_SourceEndpointPropertyValidator(properties).assertSuccess();
    return {
        'OracleSID': ros.stringToRosTemplate(properties.oracleSid),
        'UserName': ros.stringToRosTemplate(properties.userName),
        'InstanceID': ros.stringToRosTemplate(properties.instanceId),
        'IP': ros.stringToRosTemplate(properties.ip),
        'Port': ros.stringToRosTemplate(properties.port),
        'VSwitchID': ros.stringToRosTemplate(properties.vSwitchId),
        'DatabaseName': ros.stringToRosTemplate(properties.databaseName),
        'EngineName': ros.stringToRosTemplate(properties.engineName),
        'Role': ros.stringToRosTemplate(properties.role),
        'OwnerID': ros.stringToRosTemplate(properties.ownerId),
        'Region': ros.stringToRosTemplate(properties.region),
        'InstanceType': ros.stringToRosTemplate(properties.instanceType),
        'Password': ros.stringToRosTemplate(properties.password),
    };
}
/**
 * Determine whether the given properties match those of a `SubscriptionDataTypeProperty`
 *
 * @param properties - the TypeScript properties of a `SubscriptionDataTypeProperty`
 *
 * @returns the result of the validation.
 */
function RosSubscriptionJob2_SubscriptionDataTypePropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('dml', ros.validateBoolean)(properties.dml));
    errors.collect(ros.propertyValidator('ddl', ros.validateBoolean)(properties.ddl));
    return errors.wrap('supplied properties not correct for "SubscriptionDataTypeProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::DTS::SubscriptionJob2.SubscriptionDataType` resource
 *
 * @param properties - the TypeScript properties of a `SubscriptionDataTypeProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::DTS::SubscriptionJob2.SubscriptionDataType` resource.
 */
// @ts-ignore TS6133
function rosSubscriptionJob2SubscriptionDataTypePropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosSubscriptionJob2_SubscriptionDataTypePropertyValidator(properties).assertSuccess();
    return {
        'DML': ros.booleanToRosTemplate(properties.dml),
        'DDL': ros.booleanToRosTemplate(properties.ddl),
    };
}
/**
 * Determine whether the given properties match those of a `SubscriptionInstanceProperty`
 *
 * @param properties - the TypeScript properties of a `SubscriptionInstanceProperty`
 *
 * @returns the result of the validation.
 */
function RosSubscriptionJob2_SubscriptionInstancePropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('vpcId', ros.validateString)(properties.vpcId));
    errors.collect(ros.propertyValidator('networkType', ros.requiredValidator)(properties.networkType));
    errors.collect(ros.propertyValidator('networkType', ros.validateString)(properties.networkType));
    errors.collect(ros.propertyValidator('vSwitchId', ros.validateString)(properties.vSwitchId));
    return errors.wrap('supplied properties not correct for "SubscriptionInstanceProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::DTS::SubscriptionJob2.SubscriptionInstance` resource
 *
 * @param properties - the TypeScript properties of a `SubscriptionInstanceProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::DTS::SubscriptionJob2.SubscriptionInstance` resource.
 */
// @ts-ignore TS6133
function rosSubscriptionJob2SubscriptionInstancePropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosSubscriptionJob2_SubscriptionInstancePropertyValidator(properties).assertSuccess();
    return {
        'VPCId': ros.stringToRosTemplate(properties.vpcId),
        'NetworkType': ros.stringToRosTemplate(properties.networkType),
        'VSwitchId': ros.stringToRosTemplate(properties.vSwitchId),
    };
}
/**
 * Determine whether the given properties match those of a `RosSynchronizationJob2Props`
 *
 * @param properties - the TypeScript properties of a `RosSynchronizationJob2Props`
 *
 * @returns the result of the validation.
 */
function RosSynchronizationJob2PropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    if (properties.status && (typeof properties.status) !== 'object') {
        errors.collect(ros.propertyValidator('status', ros.validateAllowedValues)({
            data: properties.status,
            allowedValues: ["Synchronizing", "Suspending", "Stopping"],
        }));
    }
    errors.collect(ros.propertyValidator('status', ros.validateString)(properties.status));
    errors.collect(ros.propertyValidator('reserve', ros.hashValidator(ros.validateAny))(properties.reserve));
    errors.collect(ros.propertyValidator('dataSynchronization', ros.requiredValidator)(properties.dataSynchronization));
    errors.collect(ros.propertyValidator('dataSynchronization', ros.validateBoolean)(properties.dataSynchronization));
    errors.collect(ros.propertyValidator('delayPhone', ros.validateString)(properties.delayPhone));
    errors.collect(ros.propertyValidator('dedicatedClusterId', ros.validateString)(properties.dedicatedClusterId));
    errors.collect(ros.propertyValidator('errorNotice', ros.validateBoolean)(properties.errorNotice));
    errors.collect(ros.propertyValidator('dtsJobName', ros.requiredValidator)(properties.dtsJobName));
    errors.collect(ros.propertyValidator('dtsJobName', ros.validateString)(properties.dtsJobName));
    errors.collect(ros.propertyValidator('delayRuleTime', ros.validateNumber)(properties.delayRuleTime));
    errors.collect(ros.propertyValidator('dtsInstanceId', ros.validateString)(properties.dtsInstanceId));
    errors.collect(ros.propertyValidator('dbList', ros.requiredValidator)(properties.dbList));
    errors.collect(ros.propertyValidator('dbList', ros.hashValidator(ros.validateAny))(properties.dbList));
    errors.collect(ros.propertyValidator('fileOssUrl', ros.validateString)(properties.fileOssUrl));
    errors.collect(ros.propertyValidator('dataCheckConfigure', RosSynchronizationJob2_DataCheckConfigurePropertyValidator)(properties.dataCheckConfigure));
    errors.collect(ros.propertyValidator('dtsBisLabel', ros.validateString)(properties.dtsBisLabel));
    errors.collect(ros.propertyValidator('checkpoint', ros.validateString)(properties.checkpoint));
    errors.collect(ros.propertyValidator('disasterRecoveryJob', ros.validateBoolean)(properties.disasterRecoveryJob));
    errors.collect(ros.propertyValidator('dtsJobId', ros.validateString)(properties.dtsJobId));
    errors.collect(ros.propertyValidator('delayNotice', ros.validateBoolean)(properties.delayNotice));
    errors.collect(ros.propertyValidator('dataInitialization', ros.requiredValidator)(properties.dataInitialization));
    errors.collect(ros.propertyValidator('dataInitialization', ros.validateBoolean)(properties.dataInitialization));
    errors.collect(ros.propertyValidator('destinationEndpoint', ros.requiredValidator)(properties.destinationEndpoint));
    errors.collect(ros.propertyValidator('destinationEndpoint', RosSynchronizationJob2_DestinationEndpointPropertyValidator)(properties.destinationEndpoint));
    errors.collect(ros.propertyValidator('sourceEndpoint', ros.requiredValidator)(properties.sourceEndpoint));
    errors.collect(ros.propertyValidator('sourceEndpoint', RosSynchronizationJob2_SourceEndpointPropertyValidator)(properties.sourceEndpoint));
    errors.collect(ros.propertyValidator('errorPhone', ros.validateString)(properties.errorPhone));
    errors.collect(ros.propertyValidator('structureInitialization', ros.requiredValidator)(properties.structureInitialization));
    errors.collect(ros.propertyValidator('structureInitialization', ros.validateBoolean)(properties.structureInitialization));
    errors.collect(ros.propertyValidator('synchronizationDirection', ros.validateString)(properties.synchronizationDirection));
    return errors.wrap('supplied properties not correct for "RosSynchronizationJob2Props"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::DTS::SynchronizationJob2` resource
 *
 * @param properties - the TypeScript properties of a `RosSynchronizationJob2Props`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::DTS::SynchronizationJob2` resource.
 */
// @ts-ignore TS6133
function rosSynchronizationJob2PropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosSynchronizationJob2PropsValidator(properties).assertSuccess();
    }
    return {
        'DataInitialization': ros.booleanToRosTemplate(properties.dataInitialization),
        'DataSynchronization': ros.booleanToRosTemplate(properties.dataSynchronization),
        'DbList': ros.hashMapper(ros.objectToRosTemplate)(properties.dbList),
        'DestinationEndpoint': rosSynchronizationJob2DestinationEndpointPropertyToRosTemplate(properties.destinationEndpoint),
        'DtsJobName': ros.stringToRosTemplate(properties.dtsJobName),
        'SourceEndpoint': rosSynchronizationJob2SourceEndpointPropertyToRosTemplate(properties.sourceEndpoint),
        'StructureInitialization': ros.booleanToRosTemplate(properties.structureInitialization),
        'Checkpoint': ros.stringToRosTemplate(properties.checkpoint),
        'DataCheckConfigure': rosSynchronizationJob2DataCheckConfigurePropertyToRosTemplate(properties.dataCheckConfigure),
        'DedicatedClusterId': ros.stringToRosTemplate(properties.dedicatedClusterId),
        'DelayNotice': ros.booleanToRosTemplate(properties.delayNotice),
        'DelayPhone': ros.stringToRosTemplate(properties.delayPhone),
        'DelayRuleTime': ros.numberToRosTemplate(properties.delayRuleTime),
        'DisasterRecoveryJob': ros.booleanToRosTemplate(properties.disasterRecoveryJob),
        'DtsBisLabel': ros.stringToRosTemplate(properties.dtsBisLabel),
        'DtsInstanceId': ros.stringToRosTemplate(properties.dtsInstanceId),
        'DtsJobId': ros.stringToRosTemplate(properties.dtsJobId),
        'ErrorNotice': ros.booleanToRosTemplate(properties.errorNotice),
        'ErrorPhone': ros.stringToRosTemplate(properties.errorPhone),
        'FileOssUrl': ros.stringToRosTemplate(properties.fileOssUrl),
        'Reserve': ros.hashMapper(ros.objectToRosTemplate)(properties.reserve),
        'Status': ros.stringToRosTemplate(properties.status),
        'SynchronizationDirection': ros.stringToRosTemplate(properties.synchronizationDirection),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::DTS::SynchronizationJob2`, which is used to configure a data synchronization task.
 * @Note This class does not contain additional functions, so it is recommended to use the `SynchronizationJob2` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-dts-synchronizationjob2
 */
class RosSynchronizationJob2 extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosSynchronizationJob2.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrDtsInstanceId = this.getAtt('DtsInstanceId');
        this.attrDtsJobId = this.getAtt('DtsJobId');
        this.attrDtsJobName = this.getAtt('DtsJobName');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.dataInitialization = props.dataInitialization;
        this.dataSynchronization = props.dataSynchronization;
        this.dbList = props.dbList;
        this.destinationEndpoint = props.destinationEndpoint;
        this.dtsJobName = props.dtsJobName;
        this.sourceEndpoint = props.sourceEndpoint;
        this.structureInitialization = props.structureInitialization;
        this.checkpoint = props.checkpoint;
        this.dataCheckConfigure = props.dataCheckConfigure;
        this.dedicatedClusterId = props.dedicatedClusterId;
        this.delayNotice = props.delayNotice;
        this.delayPhone = props.delayPhone;
        this.delayRuleTime = props.delayRuleTime;
        this.disasterRecoveryJob = props.disasterRecoveryJob;
        this.dtsBisLabel = props.dtsBisLabel;
        this.dtsInstanceId = props.dtsInstanceId;
        this.dtsJobId = props.dtsJobId;
        this.errorNotice = props.errorNotice;
        this.errorPhone = props.errorPhone;
        this.fileOssUrl = props.fileOssUrl;
        this.reserve = props.reserve;
        this.status = props.status;
        this.synchronizationDirection = props.synchronizationDirection;
    }
    get rosProperties() {
        return {
            dataInitialization: this.dataInitialization,
            dataSynchronization: this.dataSynchronization,
            dbList: this.dbList,
            destinationEndpoint: this.destinationEndpoint,
            dtsJobName: this.dtsJobName,
            sourceEndpoint: this.sourceEndpoint,
            structureInitialization: this.structureInitialization,
            checkpoint: this.checkpoint,
            dataCheckConfigure: this.dataCheckConfigure,
            dedicatedClusterId: this.dedicatedClusterId,
            delayNotice: this.delayNotice,
            delayPhone: this.delayPhone,
            delayRuleTime: this.delayRuleTime,
            disasterRecoveryJob: this.disasterRecoveryJob,
            dtsBisLabel: this.dtsBisLabel,
            dtsInstanceId: this.dtsInstanceId,
            dtsJobId: this.dtsJobId,
            errorNotice: this.errorNotice,
            errorPhone: this.errorPhone,
            fileOssUrl: this.fileOssUrl,
            reserve: this.reserve,
            status: this.status,
            synchronizationDirection: this.synchronizationDirection,
        };
    }
    renderProperties(props) {
        return rosSynchronizationJob2PropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosSynchronizationJob2 = RosSynchronizationJob2;
/**
 * The resource type name for this resource class.
 */
RosSynchronizationJob2.ROS_RESOURCE_TYPE_NAME = "ALIYUN::DTS::SynchronizationJob2";
/**
 * Determine whether the given properties match those of a `DataCheckConfigureProperty`
 *
 * @param properties - the TypeScript properties of a `DataCheckConfigureProperty`
 *
 * @returns the result of the validation.
 */
function RosSynchronizationJob2_DataCheckConfigurePropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    if (properties.fullCheckMaxReadRps && (typeof properties.fullCheckMaxReadRps) !== 'object') {
        errors.collect(ros.propertyValidator('fullCheckMaxReadRps', ros.validateRange)({
            data: properties.fullCheckMaxReadRps,
            min: 0,
            max: 9007199254740991,
        }));
    }
    errors.collect(ros.propertyValidator('fullCheckMaxReadRps', ros.validateNumber)(properties.fullCheckMaxReadRps));
    errors.collect(ros.propertyValidator('dataCheckNoticePhone', ros.validateString)(properties.dataCheckNoticePhone));
    errors.collect(ros.propertyValidator('incrementalCheckDelayNotice', ros.validateBoolean)(properties.incrementalCheckDelayNotice));
    errors.collect(ros.propertyValidator('incrementalCheckDelayNoticeValue', ros.validateNumber)(properties.incrementalCheckDelayNoticeValue));
    if (properties.incrementalCheckDelayNoticePeriod && (typeof properties.incrementalCheckDelayNoticePeriod) !== 'object') {
        errors.collect(ros.propertyValidator('incrementalCheckDelayNoticePeriod', ros.validateAllowedValues)({
            data: properties.incrementalCheckDelayNoticePeriod,
            allowedValues: [1, 2, 3, 4],
        }));
    }
    errors.collect(ros.propertyValidator('incrementalCheckDelayNoticePeriod', ros.validateNumber)(properties.incrementalCheckDelayNoticePeriod));
    errors.collect(ros.propertyValidator('dataCheckDbList', ros.validateString)(properties.dataCheckDbList));
    if (properties.checkMaximumHourEnable && (typeof properties.checkMaximumHourEnable) !== 'object') {
        errors.collect(ros.propertyValidator('checkMaximumHourEnable', ros.validateAllowedValues)({
            data: properties.checkMaximumHourEnable,
            allowedValues: [0, 1],
        }));
    }
    errors.collect(ros.propertyValidator('checkMaximumHourEnable', ros.validateNumber)(properties.checkMaximumHourEnable));
    if (properties.fullCheckRatio && (typeof properties.fullCheckRatio) !== 'object') {
        errors.collect(ros.propertyValidator('fullCheckRatio', ros.validateRange)({
            data: properties.fullCheckRatio,
            min: 10,
            max: 100,
        }));
    }
    errors.collect(ros.propertyValidator('fullCheckRatio', ros.validateNumber)(properties.fullCheckRatio));
    if (properties.checkMaximumHour && (typeof properties.checkMaximumHour) !== 'object') {
        errors.collect(ros.propertyValidator('checkMaximumHour', ros.validateRange)({
            data: properties.checkMaximumHour,
            min: 1,
            max: 72,
        }));
    }
    errors.collect(ros.propertyValidator('checkMaximumHour', ros.validateNumber)(properties.checkMaximumHour));
    errors.collect(ros.propertyValidator('fullCheckFixData', ros.validateBoolean)(properties.fullCheckFixData));
    if (properties.fullCheckModel && (typeof properties.fullCheckModel) !== 'object') {
        errors.collect(ros.propertyValidator('fullCheckModel', ros.validateAllowedValues)({
            data: properties.fullCheckModel,
            allowedValues: [1, 2],
        }));
    }
    errors.collect(ros.propertyValidator('fullCheckModel', ros.validateNumber)(properties.fullCheckModel));
    errors.collect(ros.propertyValidator('incrementalCheckValidFailNoticeValue', ros.validateNumber)(properties.incrementalCheckValidFailNoticeValue));
    errors.collect(ros.propertyValidator('incrementalDataCheck', ros.validateBoolean)(properties.incrementalDataCheck));
    errors.collect(ros.propertyValidator('incrementalCheckValidFailNoticeTimes', ros.validateNumber)(properties.incrementalCheckValidFailNoticeTimes));
    if (properties.fullCheckMaxReadBps && (typeof properties.fullCheckMaxReadBps) !== 'object') {
        errors.collect(ros.propertyValidator('fullCheckMaxReadBps', ros.validateRange)({
            data: properties.fullCheckMaxReadBps,
            min: 0,
            max: 9007199254740991,
        }));
    }
    errors.collect(ros.propertyValidator('fullCheckMaxReadBps', ros.validateNumber)(properties.fullCheckMaxReadBps));
    errors.collect(ros.propertyValidator('fullCheckValidFailNotice', ros.validateBoolean)(properties.fullCheckValidFailNotice));
    errors.collect(ros.propertyValidator('fullCheckErrorNotice', ros.validateBoolean)(properties.fullCheckErrorNotice));
    if (properties.incrementalCheckValidFailNoticePeriod && (typeof properties.incrementalCheckValidFailNoticePeriod) !== 'object') {
        errors.collect(ros.propertyValidator('incrementalCheckValidFailNoticePeriod', ros.validateAllowedValues)({
            data: properties.incrementalCheckValidFailNoticePeriod,
            allowedValues: [1, 2, 3, 4],
        }));
    }
    errors.collect(ros.propertyValidator('incrementalCheckValidFailNoticePeriod', ros.validateNumber)(properties.incrementalCheckValidFailNoticePeriod));
    errors.collect(ros.propertyValidator('incrementalCheckDelayNoticeTimes', ros.validateNumber)(properties.incrementalCheckDelayNoticeTimes));
    errors.collect(ros.propertyValidator('fullCheckReferEndpoint', ros.validateString)(properties.fullCheckReferEndpoint));
    errors.collect(ros.propertyValidator('fullDataCheck', ros.validateBoolean)(properties.fullDataCheck));
    errors.collect(ros.propertyValidator('incrementalCheckValidFailNotice', ros.validateBoolean)(properties.incrementalCheckValidFailNotice));
    errors.collect(ros.propertyValidator('fullCheckNoticeValue', ros.validateNumber)(properties.fullCheckNoticeValue));
    errors.collect(ros.propertyValidator('incrementalCheckErrorNotice', ros.validateBoolean)(properties.incrementalCheckErrorNotice));
    return errors.wrap('supplied properties not correct for "DataCheckConfigureProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::DTS::SynchronizationJob2.DataCheckConfigure` resource
 *
 * @param properties - the TypeScript properties of a `DataCheckConfigureProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::DTS::SynchronizationJob2.DataCheckConfigure` resource.
 */
// @ts-ignore TS6133
function rosSynchronizationJob2DataCheckConfigurePropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosSynchronizationJob2_DataCheckConfigurePropertyValidator(properties).assertSuccess();
    return {
        'fullCheckMaxReadRps': ros.numberToRosTemplate(properties.fullCheckMaxReadRps),
        'dataCheckNoticePhone': ros.stringToRosTemplate(properties.dataCheckNoticePhone),
        'incrementalCheckDelayNotice': ros.booleanToRosTemplate(properties.incrementalCheckDelayNotice),
        'incrementalCheckDelayNoticeValue': ros.numberToRosTemplate(properties.incrementalCheckDelayNoticeValue),
        'incrementalCheckDelayNoticePeriod': ros.numberToRosTemplate(properties.incrementalCheckDelayNoticePeriod),
        'dataCheckDbList': ros.stringToRosTemplate(properties.dataCheckDbList),
        'checkMaximumHourEnable': ros.numberToRosTemplate(properties.checkMaximumHourEnable),
        'fullCheckRatio': ros.numberToRosTemplate(properties.fullCheckRatio),
        'checkMaximumHour': ros.numberToRosTemplate(properties.checkMaximumHour),
        'fullCheckFixData': ros.booleanToRosTemplate(properties.fullCheckFixData),
        'fullCheckModel': ros.numberToRosTemplate(properties.fullCheckModel),
        'incrementalCheckValidFailNoticeValue': ros.numberToRosTemplate(properties.incrementalCheckValidFailNoticeValue),
        'incrementalDataCheck': ros.booleanToRosTemplate(properties.incrementalDataCheck),
        'incrementalCheckValidFailNoticeTimes': ros.numberToRosTemplate(properties.incrementalCheckValidFailNoticeTimes),
        'fullCheckMaxReadBps': ros.numberToRosTemplate(properties.fullCheckMaxReadBps),
        'fullCheckValidFailNotice': ros.booleanToRosTemplate(properties.fullCheckValidFailNotice),
        'fullCheckErrorNotice': ros.booleanToRosTemplate(properties.fullCheckErrorNotice),
        'incrementalCheckValidFailNoticePeriod': ros.numberToRosTemplate(properties.incrementalCheckValidFailNoticePeriod),
        'incrementalCheckDelayNoticeTimes': ros.numberToRosTemplate(properties.incrementalCheckDelayNoticeTimes),
        'fullCheckReferEndpoint': ros.stringToRosTemplate(properties.fullCheckReferEndpoint),
        'fullDataCheck': ros.booleanToRosTemplate(properties.fullDataCheck),
        'incrementalCheckValidFailNotice': ros.booleanToRosTemplate(properties.incrementalCheckValidFailNotice),
        'fullCheckNoticeValue': ros.numberToRosTemplate(properties.fullCheckNoticeValue),
        'incrementalCheckErrorNotice': ros.booleanToRosTemplate(properties.incrementalCheckErrorNotice),
    };
}
/**
 * Determine whether the given properties match those of a `DestinationEndpointProperty`
 *
 * @param properties - the TypeScript properties of a `DestinationEndpointProperty`
 *
 * @returns the result of the validation.
 */
function RosSynchronizationJob2_DestinationEndpointPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('role', ros.validateString)(properties.role));
    errors.collect(ros.propertyValidator('oracleSid', ros.validateString)(properties.oracleSid));
    errors.collect(ros.propertyValidator('userName', ros.validateString)(properties.userName));
    errors.collect(ros.propertyValidator('ownerId', ros.validateString)(properties.ownerId));
    errors.collect(ros.propertyValidator('instanceId', ros.validateString)(properties.instanceId));
    errors.collect(ros.propertyValidator('ip', ros.validateString)(properties.ip));
    errors.collect(ros.propertyValidator('port', ros.validateString)(properties.port));
    errors.collect(ros.propertyValidator('databaseName', ros.validateString)(properties.databaseName));
    errors.collect(ros.propertyValidator('region', ros.validateString)(properties.region));
    errors.collect(ros.propertyValidator('instanceType', ros.requiredValidator)(properties.instanceType));
    errors.collect(ros.propertyValidator('instanceType', ros.validateString)(properties.instanceType));
    errors.collect(ros.propertyValidator('engineName', ros.validateString)(properties.engineName));
    errors.collect(ros.propertyValidator('password', ros.validateString)(properties.password));
    return errors.wrap('supplied properties not correct for "DestinationEndpointProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::DTS::SynchronizationJob2.DestinationEndpoint` resource
 *
 * @param properties - the TypeScript properties of a `DestinationEndpointProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::DTS::SynchronizationJob2.DestinationEndpoint` resource.
 */
// @ts-ignore TS6133
function rosSynchronizationJob2DestinationEndpointPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosSynchronizationJob2_DestinationEndpointPropertyValidator(properties).assertSuccess();
    return {
        'Role': ros.stringToRosTemplate(properties.role),
        'OracleSID': ros.stringToRosTemplate(properties.oracleSid),
        'UserName': ros.stringToRosTemplate(properties.userName),
        'OwnerID': ros.stringToRosTemplate(properties.ownerId),
        'InstanceID': ros.stringToRosTemplate(properties.instanceId),
        'IP': ros.stringToRosTemplate(properties.ip),
        'Port': ros.stringToRosTemplate(properties.port),
        'DatabaseName': ros.stringToRosTemplate(properties.databaseName),
        'Region': ros.stringToRosTemplate(properties.region),
        'InstanceType': ros.stringToRosTemplate(properties.instanceType),
        'EngineName': ros.stringToRosTemplate(properties.engineName),
        'Password': ros.stringToRosTemplate(properties.password),
    };
}
/**
 * Determine whether the given properties match those of a `SourceEndpointProperty`
 *
 * @param properties - the TypeScript properties of a `SourceEndpointProperty`
 *
 * @returns the result of the validation.
 */
function RosSynchronizationJob2_SourceEndpointPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('oracleSid', ros.validateString)(properties.oracleSid));
    errors.collect(ros.propertyValidator('userName', ros.validateString)(properties.userName));
    errors.collect(ros.propertyValidator('instanceId', ros.validateString)(properties.instanceId));
    errors.collect(ros.propertyValidator('ip', ros.validateString)(properties.ip));
    errors.collect(ros.propertyValidator('port', ros.validateString)(properties.port));
    errors.collect(ros.propertyValidator('vSwitchId', ros.validateString)(properties.vSwitchId));
    errors.collect(ros.propertyValidator('databaseName', ros.validateString)(properties.databaseName));
    errors.collect(ros.propertyValidator('engineName', ros.validateString)(properties.engineName));
    errors.collect(ros.propertyValidator('role', ros.validateString)(properties.role));
    errors.collect(ros.propertyValidator('ownerId', ros.validateString)(properties.ownerId));
    errors.collect(ros.propertyValidator('region', ros.validateString)(properties.region));
    errors.collect(ros.propertyValidator('instanceType', ros.requiredValidator)(properties.instanceType));
    errors.collect(ros.propertyValidator('instanceType', ros.validateString)(properties.instanceType));
    errors.collect(ros.propertyValidator('password', ros.validateString)(properties.password));
    return errors.wrap('supplied properties not correct for "SourceEndpointProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::DTS::SynchronizationJob2.SourceEndpoint` resource
 *
 * @param properties - the TypeScript properties of a `SourceEndpointProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::DTS::SynchronizationJob2.SourceEndpoint` resource.
 */
// @ts-ignore TS6133
function rosSynchronizationJob2SourceEndpointPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosSynchronizationJob2_SourceEndpointPropertyValidator(properties).assertSuccess();
    return {
        'OracleSID': ros.stringToRosTemplate(properties.oracleSid),
        'UserName': ros.stringToRosTemplate(properties.userName),
        'InstanceID': ros.stringToRosTemplate(properties.instanceId),
        'IP': ros.stringToRosTemplate(properties.ip),
        'Port': ros.stringToRosTemplate(properties.port),
        'VSwitchID': ros.stringToRosTemplate(properties.vSwitchId),
        'DatabaseName': ros.stringToRosTemplate(properties.databaseName),
        'EngineName': ros.stringToRosTemplate(properties.engineName),
        'Role': ros.stringToRosTemplate(properties.role),
        'OwnerID': ros.stringToRosTemplate(properties.ownerId),
        'Region': ros.stringToRosTemplate(properties.region),
        'InstanceType': ros.stringToRosTemplate(properties.instanceType),
        'Password': ros.stringToRosTemplate(properties.password),
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHRzLmdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImR0cy5nZW5lcmF0ZWQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLHlEQUF5RDs7O0FBRXpELDhDQUE4QztBQTZCOUM7Ozs7OztHQU1HO0FBQ0gsU0FBUyw4QkFBOEIsQ0FBQyxVQUFlO0lBQ25ELElBQUksQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxFQUFFO1FBQUUsT0FBTyxHQUFHLENBQUMsa0JBQWtCLENBQUM7S0FBRTtJQUNuRSxNQUFNLE1BQU0sR0FBRyxJQUFJLEdBQUcsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO0lBQzNDLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLHVCQUF1QixFQUFFLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLENBQUM7SUFDeEgsTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUJBQWlCLENBQUMsdUJBQXVCLEVBQUUsR0FBRyxDQUFDLGNBQWMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLENBQUM7SUFDckgsTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUJBQWlCLENBQUMsdUJBQXVCLEVBQUUsR0FBRyxDQUFDLGlCQUFpQixDQUFDLENBQUMsVUFBVSxDQUFDLHFCQUFxQixDQUFDLENBQUMsQ0FBQztJQUN4SCxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyx1QkFBdUIsRUFBRSxHQUFHLENBQUMsY0FBYyxDQUFDLENBQUMsVUFBVSxDQUFDLHFCQUFxQixDQUFDLENBQUMsQ0FBQztJQUNySCxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxtQkFBbUIsRUFBRSxHQUFHLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxVQUFVLENBQUMsaUJBQWlCLENB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Q0FBQyxRQUFRLENBQUM7S0FDekQsQ0FBQztBQUNOLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBHZW5lcmF0ZWQgZnJvbSB0aGUgQWxpQ2xvdWQgUk9TIFJlc291cmNlIFNwZWNpZmljYXRpb25cblxuaW1wb3J0ICogYXMgcm9zIGZyb20gJ0BhbGljbG91ZC9yb3MtY2RrLWNvcmUnO1xuXG4vKipcbiAqIFByb3BlcnRpZXMgZm9yIGRlZmluaW5nIGEgYFJvc0NvbnN1bWVyR3JvdXBgLlxuICogU2VlIGh0dHBzOi8vd3d3LmFsaWJhYmFjbG91ZC5jb20vaGVscC9yb3MvZGV2ZWxvcGVyLXJlZmVyZW5jZS9hbGl5dW4tZHRzLWNvbnN1bWVyZ3JvdXBcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBSb3NDb25zdW1lckdyb3VwUHJvcHMge1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IGNvbnN1bWVyR3JvdXBOYW1lOiBDb25zdW1lciBncm91cCBuYW1lLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGNvbnN1bWVyR3JvdXBOYW1lOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgY29uc3VtZXJHcm91cFBhc3N3b3JkOiBQYXNzd29yZCBvZiBjb25zdW1lciBncm91cC5cbiAgICAgKi9cbiAgICByZWFkb25seSBjb25zdW1lckdyb3VwUGFzc3dvcmQ6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBjb25zdW1lckdyb3VwVXNlck5hbWU6IFVzZXIgbmFtZSBvZiBjb25zdW1lciBncm91cC5cbiAgICAgKi9cbiAgICByZWFkb25seSBjb25zdW1lckdyb3VwVXNlck5hbWU6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBzdWJzY3JpcHRpb25JbnN0YW5jZUlkOiBTdWJzY3JpcHRpb24gaW5zdGFuY2UgSUQuXG4gICAgICovXG4gICAgcmVhZG9ubHkgc3Vic2NyaXB0aW9uSW5zdGFuY2VJZDogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xufVxuXG4vKipcbiAqIERldGVybWluZSB3aGV0aGVyIHRoZSBnaXZlbiBwcm9wZXJ0aWVzIG1hdGNoIHRob3NlIG9mIGEgYFJvc0NvbnN1bWVyR3JvdXBQcm9wc2BcbiAqXG4gKiBAcGFyYW0gcHJvcGVydGllcyAtIHRoZSBUeXBlU2NyaXB0IHByb3BlcnRpZXMgb2YgYSBgUm9zQ29uc3VtZXJHcm91cFByb3BzYFxuICpcbiAqIEByZXR1cm5zIHRoZSByZXN1bHQgb2YgdGhlIHZhbGlkYXRpb24uXG4gKi9cbmZ1bmN0aW9uIFJvc0NvbnN1bWVyR3JvdXBQcm9wc1ZhbGlkYXRvcihwcm9wZXJ0aWVzOiBhbnkpOiByb3MuVmFsaWRhdGlvblJlc3VsdCB7XG4gICAgaWYgKCFyb3MuY2FuSW5zcGVjdChwcm9wZXJ0aWVzKSkgeyByZXR1cm4gcm9zLlZBTElEQVRJT05fU1VDQ0VTUzsgfVxuICAgIGNvbnN0IGVycm9ycyA9IG5ldyByb3MuVmFsaWRhdGlvblJlc3VsdHMoKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ2NvbnN1bWVyR3JvdXBQYXNzd29yZCcsIHJvcy5yZXF1aXJlZFZhbGlkYXRvcikocHJvcGVydGllcy5jb25zdW1lckdyb3VwUGFzc3dvcmQpKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ2NvbnN1bWVyR3JvdXBQYXNzd29yZCcsIHJvcy52YWxpZGF0ZVN0cmluZykocHJvcGVydGllcy5jb25zdW1lckdyb3VwUGFzc3dvcmQpKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ2NvbnN1bWVyR3JvdXBVc2VyTmFtZScsIHJvcy5yZXF1aXJlZFZhbGlkYXRvcikocHJvcGVydGllcy5jb25zdW1lckdyb3VwVXNlck5hbWUpKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ2NvbnN1bWVyR3JvdXBVc2VyTmFtZScsIHJvcy52YWxpZGF0ZVN0cmluZykocHJvcGVydGllcy5jb25zdW1lckdyb3VwVXNlck5hbWUpKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ2NvbnN1bWVyR3JvdXBOYW1lJywgcm9zLnJlcXVpcmVkVmFsaWRhdG9yKShwcm9wZXJ0aWVzLmNvbnN1bWVyR3JvdXBOYW1lKSk7XG4gICAgZXJyb3JzLmNvbGxlY3Qocm9zLnByb3BlcnR5VmFsaWRhdG9yKCdjb25zdW1lckdyb3VwTmFtZScsIHJvcy52YWxpZGF0ZVN0cmluZykocHJvcGVydGllcy5jb25zdW1lckdyb3VwTmFtZSkpO1xuICAgIGVycm9ycy5jb2xsZWN0KHJvcy5wcm9wZXJ0eVZhbGlkYXRvcignc3Vic2NyaXB0aW9uSW5zdGFuY2VJZCcsIHJvcy5yZXF1aXJlZFZhbGlkYXRvcikocHJvcGVydGllcy5zdWJzY3JpcHRpb25JbnN0YW5jZUlkKSk7XG4gICAgZXJyb3JzLmNvbGxlY3Qocm9zLnByb3BlcnR5VmFsaWRhdG9yKCdzdWJzY3JpcHRpb25JbnN0YW5jZUlkJywgcm9zLnZhbGlkYXRlU3RyaW5nKShwcm9wZXJ0aWVzLnN1YnNjcmlwdGlvbkluc3RhbmNlSWQpKTtcbiAgICByZXR1cm4gZXJyb3JzLndyYXAoJ3N1cHBsaWVkIHByb3BlcnRpZXMgbm90IGNvcnJlY3QgZm9yIFwiUm9zQ29uc3VtZXJHcm91cFByb3BzXCInKTtcbn1cblxuLyoqXG4gKiBSZW5kZXJzIHRoZSBBbGlDbG91ZCBST1MgUmVzb3VyY2UgcHJvcGVydGllcyBvZiBhbiBgQUxJWVVOOjpEVFM6OkNvbnN1bWVyR3JvdXBgIHJlc291cmNlXG4gKlxuICogQHBhcmFtIHByb3BlcnRpZXMgLSB0aGUgVHlwZVNjcmlwdCBwcm9wZXJ0aWVzIG9mIGEgYFJvc0NvbnN1bWVyR3JvdXBQcm9wc2BcbiAqXG4gKiBAcmV0dXJucyB0aGUgQWxpQ2xvdWQgUk9TIFJlc291cmNlIHByb3BlcnRpZXMgb2YgYW4gYEFMSVlVTjo6RFRTOjpDb25zdW1lckdyb3VwYCByZXNvdXJjZS5cbiAqL1xuLy8gQHRzLWlnbm9yZSBUUzYxMzNcbmZ1bmN0aW9uIHJvc0NvbnN1bWVyR3JvdXBQcm9wc1RvUm9zVGVtcGxhdGUocHJvcGVydGllczogYW55LCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDogYm9vbGVhbik6IGFueSB7XG4gICAgaWYgKCFyb3MuY2FuSW5zcGVjdChwcm9wZXJ0aWVzKSkgeyByZXR1cm4gcHJvcGVydGllczsgfVxuICAgIGlmKGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50KSB7XG4gICAgICAgIFJvc0NvbnN1bWVyR3JvdXBQcm9wc1ZhbGlkYXRvcihwcm9wZXJ0aWVzKS5hc3NlcnRTdWNjZXNzKCk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAnQ29uc3VtZXJHcm91cE5hbWUnOiByb3Muc3RyaW5nVG9Sb3NUZW1wbGF0ZShwcm9wZXJ0aWVzLmNvbnN1bWVyR3JvdXBOYW1lKSxcbiAgICAgICdDb25zdW1lckdyb3VwUGFzc3dvcmQnOiByb3Muc3RyaW5nVG9Sb3NUZW1wbGF0ZShwcm9wZXJ0aWVzLmNvbnN1bWVyR3JvdXBQYXNzd29yZCksXG4gICAgICAnQ29uc3VtZXJHcm91cFVzZXJOYW1lJzogcm9zLnN0cmluZ1RvUm9zVGVtcGxhdGUocHJvcGVydGllcy5jb25zdW1lckdyb3VwVXNlck5hbWUpLFxuICAgICAgJ1N1YnNjcmlwdGlvbkluc3RhbmNlSWQnOiByb3Muc3RyaW5nVG9Sb3NUZW1wbGF0ZShwcm9wZXJ0aWVzLnN1YnNjcmlwdGlvbkluc3RhbmNlSWQpLFxuICAgIH07XG59XG5cbi8qKlxuICogVGhpcyBjbGFzcyBpcyBhIGJhc2UgZW5jYXBzdWxhdGlvbiBhcm91bmQgdGhlIFJPUyByZXNvdXJjZSB0eXBlIGBBTElZVU46OkRUUzo6Q29uc3VtZXJHcm91cGAsIHdoaWNoIGlzIHVzZWQgdG8gY3JlYXRlIGEgY29uc3VtZXIgZ3JvdXAgZm9yIGEgY2hhbmdlIHRyYWNraW5nIGluc3RhbmNlLlxuICogQE5vdGUgVGhpcyBjbGFzcyBkb2VzIG5vdCBjb250YWluIGFkZGl0aW9uYWwgZnVuY3Rpb25zLCBzbyBpdCBpcyByZWNvbW1lbmRlZCB0byB1c2UgdGhlIGBDb25zdW1lckdyb3VwYCBjbGFzcyBpbnN0ZWFkIG9mIHRoaXMgY2xhc3MgZm9yIGEgbW9yZSBjb252ZW5pZW50IGRldmVsb3BtZW50IGV4cGVyaWVuY2UuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2FsaXl1bi1kdHMtY29uc3VtZXJncm91cFxuICovXG5leHBvcnQgY2xhc3MgUm9zQ29uc3VtZXJHcm91cCBleHRlbmRzIHJvcy5Sb3NSZXNvdXJjZSB7XG4gICAgLyoqXG4gICAgICogVGhlIHJlc291cmNlIHR5cGUgbmFtZSBmb3IgdGhpcyByZXNvdXJjZSBjbGFzcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IFJPU19SRVNPVVJDRV9UWVBFX05BTUUgPSBcIkFMSVlVTjo6RFRTOjpDb25zdW1lckdyb3VwXCI7XG5cbiAgICAvKipcbiAgICAgKiBAQXR0cmlidXRlIENvbnN1bWVyR3JvdXBJRDogQ29uc3VtZXIgZ3JvdXAgSURcbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckNvbnN1bWVyR3JvdXBJZDogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQEF0dHJpYnV0ZSBDb25zdW1lckdyb3VwTmFtZTogQ29uc3VtZXIgZ3JvdXAgbmFtZVxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyQ29uc3VtZXJHcm91cE5hbWU6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEBBdHRyaWJ1dGUgU3Vic2NyaXB0aW9uSW5zdGFuY2VJZDogU3Vic2NyaXB0aW9uIGluc3RhbmNlIElEXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJTdWJzY3JpcHRpb25JbnN0YW5jZUlkOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICBwdWJsaWMgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6IGJvb2xlYW47XG5cblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBjb25zdW1lckdyb3VwTmFtZTogQ29uc3VtZXIgZ3JvdXAgbmFtZS5cbiAgICAgKi9cbiAgICBwdWJsaWMgY29uc3VtZXJHcm91cE5hbWU6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBjb25zdW1lckdyb3VwUGFzc3dvcmQ6IFBhc3N3b3JkIG9mIGNvbnN1bWVyIGdyb3VwLlxuICAgICAqL1xuICAgIHB1YmxpYyBjb25zdW1lckdyb3VwUGFzc3dvcmQ6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBjb25zdW1lckdyb3VwVXNlck5hbWU6IFVzZXIgbmFtZSBvZiBjb25zdW1lciBncm91cC5cbiAgICAgKi9cbiAgICBwdWJsaWMgY29uc3VtZXJHcm91cFVzZXJOYW1lOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgc3Vic2NyaXB0aW9uSW5zdGFuY2VJZDogU3Vic2NyaXB0aW9uIGluc3RhbmNlIElELlxuICAgICAqL1xuICAgIHB1YmxpYyBzdWJzY3JpcHRpb25JbnN0YW5jZUlkOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gc2NvcGUgLSBzY29wZSBpbiB3aGljaCB0aGlzIHJlc291cmNlIGlzIGRlZmluZWRcbiAgICAgKiBAcGFyYW0gaWQgICAgLSBzY29wZWQgaWQgb2YgdGhlIHJlc291cmNlXG4gICAgICogQHBhcmFtIHByb3BzIC0gcmVzb3VyY2UgcHJvcGVydGllc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiByb3MuQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogUm9zQ29uc3VtZXJHcm91cFByb3BzLCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDogYm9vbGVhbikge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQsIHsgdHlwZTogUm9zQ29uc3VtZXJHcm91cC5ST1NfUkVTT1VSQ0VfVFlQRV9OQU1FLCBwcm9wZXJ0aWVzOiBwcm9wcyB9KTtcbiAgICAgICAgdGhpcy5hdHRyQ29uc3VtZXJHcm91cElkID0gdGhpcy5nZXRBdHQoJ0NvbnN1bWVyR3JvdXBJRCcpO1xuICAgICAgICB0aGlzLmF0dHJDb25zdW1lckdyb3VwTmFtZSA9IHRoaXMuZ2V0QXR0KCdDb25zdW1lckdyb3VwTmFtZScpO1xuICAgICAgICB0aGlzLmF0dHJTdWJzY3JpcHRpb25JbnN0YW5jZUlkID0gdGhpcy5nZXRBdHQoJ1N1YnNjcmlwdGlvbkluc3RhbmNlSWQnKTtcblxuICAgICAgICB0aGlzLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ID0gZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ7XG4gICAgICAgIHRoaXMuY29uc3VtZXJHcm91cE5hbWUgPSBwcm9wcy5jb25zdW1lckdyb3VwTmFtZTtcbiAgICAgICAgdGhpcy5jb25zdW1lckdyb3VwUGFzc3dvcmQgPSBwcm9wcy5jb25zdW1lckdyb3VwUGFzc3dvcmQ7XG4gICAgICAgIHRoaXMuY29uc3VtZXJHcm91cFVzZXJOYW1lID0gcHJvcHMuY29uc3VtZXJHcm91cFVzZXJOYW1lO1xuICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbkluc3RhbmNlSWQgPSBwcm9wcy5zdWJzY3JpcHRpb25JbnN0YW5jZUlkO1xuICAgIH1cblxuXG4gICAgcHJvdGVjdGVkIGdldCByb3NQcm9wZXJ0aWVzKCk6IHsgW2tleTogc3RyaW5nXTogYW55IH0gIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGNvbnN1bWVyR3JvdXBOYW1lOiB0aGlzLmNvbnN1bWVyR3JvdXBOYW1lLFxuICAgICAgICAgICAgY29uc3VtZXJHcm91cFBhc3N3b3JkOiB0aGlzLmNvbnN1bWVyR3JvdXBQYXNzd29yZCxcbiAgICAgICAgICAgIGNvbnN1bWVyR3JvdXBVc2VyTmFtZTogdGhpcy5jb25zdW1lckdyb3VwVXNlck5hbWUsXG4gICAgICAgICAgICBzdWJzY3JpcHRpb25JbnN0YW5jZUlkOiB0aGlzLnN1YnNjcmlwdGlvbkluc3RhbmNlSWQsXG4gICAgICAgIH07XG4gICAgfVxuICAgIHByb3RlY3RlZCByZW5kZXJQcm9wZXJ0aWVzKHByb3BzOiB7W2tleTogc3RyaW5nXTogYW55fSk6IHsgW2tleTogc3RyaW5nXTogYW55IH0gIHtcbiAgICAgICAgcmV0dXJuIHJvc0NvbnN1bWVyR3JvdXBQcm9wc1RvUm9zVGVtcGxhdGUocHJvcHMsIHRoaXMuZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBQcm9wZXJ0aWVzIGZvciBkZWZpbmluZyBhIGBSb3NJbnN0YW5jZWAuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2FsaXl1bi1kdHMtaW5zdGFuY2VcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBSb3NJbnN0YW5jZVByb3BzIHtcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBpbnN0YW5jZUNsYXNzOiBUaGUgaW5zdGFuY2UgY2xhc3MuXG4gICAgICogLSBEVFMgc3VwcG9ydHMgdGhlIGZvbGxvd2luZyBpbnN0YW5jZSBjbGFzc2VzIGZvciBhIGRhdGEgbWlncmF0aW9uIGluc3RhbmNlOiAqKnh4bGFyZ2UqKiwgKip4bGFyZ2UqKiwgKipsYXJnZSoqLCAqKm1lZGl1bSoqLCBhbmQgKipzbWFsbCoqLlxuICAgICAqIC0gRFRTIHN1cHBvcnRzIHRoZSBmb2xsb3dpbmcgaW5zdGFuY2UgY2xhc3NlcyBmb3IgYSBkYXRhIHN5bmNocm9uaXphdGlvbiBpbnN0YW5jZTogKipsYXJnZSoqLCAqKm1lZGl1bSoqLCAqKnNtYWxsKiosIGFuZCAqKm1pY3JvKiouXG4gICAgICogKipOb3RlKio6IEFsdGhvdWdoIHRoZSBpbnN0YW5jZSBzcGVjaWZpY2F0aW9uIHN1cHBvcnRzIG1vZGlmaWNhdGlvbiBhZnRlciBjcmVhdGlvbiwgdGhlIGRvd25ncmFkZSBpbnN0YW5jZSBmZWF0dXJlIGlzIGN1cnJlbnRseSBpbiBjYW5hcnkgcmVsZWFzZSBhbmQgYXZhaWxhYmxlIG9ubHkgZm9yIHNwZWNpZmljIHVzZXJzLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGluc3RhbmNlQ2xhc3M6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBwYXlUeXBlOiBUaGUgYmlsbGluZyBtZXRob2QuIFZhbGlkIHZhbHVlczpcbiAgICAgKiAtICoqUHJlUGFpZCoqOiBzdWJzY3JpcHRpb25cbiAgICAgKiAtICoqUG9zdFBhaWQqKjogcGF5LWFzLXlvdS1nb1xuICAgICAqL1xuICAgIHJlYWRvbmx5IHBheVR5cGU6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSB0eXBlOiBUaGUgdHlwZSBvZiB0aGUgRFRTIGluc3RhbmNlLiBWYWxpZCB2YWx1ZXM6XG4gICAgICogLSAqKk1JR1JBVElPTio6IGRhdGEgbWlncmF0aW9uIGluc3RhbmNlXG4gICAgICogLSAqKlNZTkMqKjogZGF0YSBzeW5jaHJvbml6YXRpb24gaW5zdGFuY2VcbiAgICAgKiAtICoqU1VCU0NSSUJFKio6IGNoYW5nZSB0cmFja2luZyBpbnN0YW5jZVxuICAgICAqL1xuICAgIHJlYWRvbmx5IHR5cGU6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBhdXRvUGF5OiBTcGVjaWZpZXMgd2hldGhlciB0byBhdXRvbWF0aWNhbGx5IHJlbmV3IHRoZSBEVFMgaW5zdGFuY2Ugd2hlbiBpdCBleHBpcmVzLiBWYWxpZCB2YWx1ZXM6XG4gICAgICogLSAqKmZhbHNlKio6IGRvZXMgbm90IGF1dG9tYXRpY2FsbHkgcmVuZXcgdGhlIERUUyBpbnN0YW5jZSB3aGVuIGl0IGV4cGlyZXMuIFRoaXMgaXMgdGhlIGRlZmF1bHQgdmFsdWUuXG4gICAgICogLSAqKnRydWUqKjogYXV0b21hdGljYWxseSByZW5ld3MgdGhlIERUUyBpbnN0YW5jZSB3aGVuIGl0IGV4cGlyZXMuXG4gICAgICovXG4gICAgcmVhZG9ubHkgYXV0b1BheT86IGJvb2xlYW4gfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgYXV0b1N0YXJ0OiBTcGVjaWZpZXMgd2hldGhlciB0byBhdXRvbWF0aWNhbGx5IHN0YXJ0IHRoZSB0YXNrIGFmdGVyIHRoZSBEVFMgaW5zdGFuY2UgaXMgcHVyY2hhc2VkLiBWYWxpZCB2YWx1ZXM6XG4gICAgICogLSAqKmZhbHNlKio6IGRvZXMgbm90IGF1dG9tYXRpY2FsbHkgc3RhcnQgdGhlIHRhc2sgYWZ0ZXIgdGhlIERUUyBpbnN0YW5jZSBpcyBwdXJjaGFzZWQuIFRoaXMgaXMgdGhlIGRlZmF1bHQgdmFsdWUuXG4gICAgICogLSAqKnRydWUqKjogYXV0b21hdGljYWxseSBzdGFydHMgdGhlIHRhc2sgYWZ0ZXIgdGhlIERUUyBpbnN0YW5jZSBpcyBwdXJjaGFzZWQuXG4gICAgICovXG4gICAgcmVhZG9ubHkgYXV0b1N0YXJ0PzogYm9vbGVhbiB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBjb21wdXRlVW5pdDogVGhlIHNwZWNpZmljYXRpb25zIG9mIHRoZSBleHRyYWN0LCB0cmFuc2Zvcm0sIGFuZCBsb2FkIChFVEwpIGluc3RhbmNlLiBUaGUgdW5pdCBpcyBjb21wdXRlIHVuaXQgKENVKS4gT25lIENVIGlzIGVxdWFsIHRvIDEgdkNQVSBhbmQgNCBHQiBvZiBtZW1vcnkuIFRoZSB2YWx1ZSBvZiB0aGlzIHBhcmFtZXRlciBtdXN0IGJlIGFuIGludGVnZXIgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIDIuXG4gICAgICovXG4gICAgcmVhZG9ubHkgY29tcHV0ZVVuaXQ/OiBudW1iZXIgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgZGF0YWJhc2VDb3VudDogVGhlIG51bWJlciBvZiBwcml2YXRlIGN1c3RvbSBBcHNhcmFEQiBSRFMgaW5zdGFuY2VzIGluIGEgUG9sYXJEQi1YIGluc3RhbmNlLiBEZWZhdWx0IHZhbHVlOiAqKjEqKi5cbiAgICAgKiAqKk5vdGUqKjogWW91IG11c3Qgc3BlY2lmeSB0aGlzIHBhcmFtZXRlciBvbmx5IGlmIHRoZSAqKlNvdXJjZUVuZHBvaW50RW5naW5lTmFtZSoqIHBhcmFtZXRlciBpcyBzZXQgdG8gKipkcmRzKiouXG4gICAgICovXG4gICAgcmVhZG9ubHkgZGF0YWJhc2VDb3VudD86IG51bWJlciB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBkZXN0aW5hdGlvbkVuZHBvaW50RW5naW5lTmFtZTogVGhlIGRhdGFiYXNlIGVuZ2luZSBvZiB0aGUgZGVzdGluYXRpb24gaW5zdGFuY2UuIFZhbGlkIHZhbHVlczpcbiAgICAgKiAtICoqTXlTUUwqKjogQXBzYXJhREIgUkRTIGZvciBNeVNRTCBpbnN0YW5jZSBvciBzZWxmLW1hbmFnZWQgTXlTUUwgZGF0YWJhc2VcbiAgICAgKiAtICoqUG9sYXJEQioqOiBQb2xhckRCIGZvciBNeVNRTCBjbHVzdGVyXG4gICAgICogLSAqKnBvbGFyZGJfbyoqOiBQb2xhckRCIGZvciBPcmFjbGUgY2x1c3RlclxuICAgICAqIC0gKipwb2xhcmRiX3BnKio6IFBvbGFyREIgZm9yIFBvc3RncmVTUUwgY2x1c3RlclxuICAgICAqIC0gKipSZWRpcyoqOiBBcHNhcmFEQiBmb3IgUmVkaXMgaW5zdGFuY2Ugb3Igc2VsZi1tYW5hZ2VkIFJlZGlzIGRhdGFiYXNlXG4gICAgICogLSAqKkRSRFMqKjogUG9sYXJEQi1YIDEuMCBvciBQb2xhckRCLVggMi4wIGluc3RhbmNlXG4gICAgICogLSAqKlBvc3RncmVTUUwqKjogc2VsZi1tYW5hZ2VkIFBvc3RncmVTUUwgZGF0YWJhc2VcbiAgICAgKiAtICoqb2RwcyoqOiBNYXhDb21wdXRlIHByb2plY3RcbiAgICAgKiAtICoqb3JhY2xlKio6IHNlbGYtbWFuYWdlZCBPcmFjbGUgZGF0YWJhc2VcbiAgICAgKiAtICoqbW9uZ29kYioqOiBBcHNhcmFEQiBmb3IgTW9uZ29EQiBpbnN0YW5jZSBvciBzZWxmLW1hbmFnZWQgTW9uZ29EQiBkYXRhYmFzZVxuICAgICAqIC0gKip0aWRiKio6IFRpREIgZGF0YWJhc2VcbiAgICAgKiAtICoqQURTKio6IEFuYWx5dGljREIgZm9yIE15U1FMIFYyLjAgY2x1c3RlclxuICAgICAqIC0gKipBREIzMCoqOiBBbmFseXRpY0RCIGZvciBNeVNRTCBWMy4wIGNsdXN0ZXJcbiAgICAgKiAtICoqR3JlZW5wbHVtKio6IEFuYWx5dGljREIgZm9yIFBvc3RncmVTUUwgaW5zdGFuY2VcbiAgICAgKiAtICoqTVNTUUwqKjogQXBzYXJhREIgUkRTIGZvciBTUUwgU2VydmVyIGluc3RhbmNlIG9yIHNlbGYtbWFuYWdlZCBTUUwgU2VydmVyIGRhdGFiYXNlXG4gICAgICogLSAqKmthZmthKio6IE1lc3NhZ2UgUXVldWUgZm9yIEFwYWNoZSBLYWZrYSBpbnN0YW5jZSBvciBzZWxmLW1hbmFnZWQgS2Fma2EgY2x1c3RlclxuICAgICAqIC0gKipEYXRhSHViKio6IERhdGFIdWIgcHJvamVjdFxuICAgICAqIC0gKipEQjIqKjogc2VsZi1tYW5hZ2VkIERiMiBmb3IgTFVXIGRhdGFiYXNlXG4gICAgICogLSAqKmFzNDAwKio6IEFTXFwvNDAwXG4gICAgICogLSAqKlRhYmxlc3RvcmUqKjogVGFibGVzdG9yZSBpbnN0YW5jZVxuICAgICAqICoqTm90ZSoqOiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyAqKk15U1FMKiouIFlvdSBtdXN0IHNwZWNpZnkgb25lIG9mIHRoaXMgcGFyYW1ldGVyIGFuZCB0aGUgKipKb2JJZCoqIHBhcmFtZXRlci5cbiAgICAgKi9cbiAgICByZWFkb25seSBkZXN0aW5hdGlvbkVuZHBvaW50RW5naW5lTmFtZT86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBkZXN0aW5hdGlvblJlZ2lvbjogVGhlIElEIG9mIHRoZSByZWdpb24gaW4gd2hpY2ggdGhlIGRlc3RpbmF0aW9uIGluc3RhbmNlIHJlc2lkZXMuXG4gICAgICogKipOb3RlKio6IFlvdSBtdXN0IHNwZWNpZnkgb25lIG9mIHRoaXMgcGFyYW1ldGVyIGFuZCB0aGUgKipKb2JJZCoqIHBhcmFtZXRlci5cbiAgICAgKi9cbiAgICByZWFkb25seSBkZXN0aW5hdGlvblJlZ2lvbj86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBkdTogVGhlIG51bWJlciBvZiBEVFMgdW5pdHMgKERVcykgdGhhdCBhcmUgYXNzaWduZWQgdG8gYSBEVFMgdGFzayB0aGF0IGlzIHJ1biBvbiBhIERUUyBkZWRpY2F0ZWQgY2x1c3Rlci4gVmFsaWQgdmFsdWVzOiAqKjEqKiB0byAqKjEwMCoqLlxuICAgICAqICoqTm90ZSoqOiBUaGUgdmFsdWUgb2YgdGhpcyBwYXJhbWV0ZXIgbXVzdCBiZSB3aXRoaW4gdGhlIHJhbmdlIG9mIHRoZSBudW1iZXIgb2YgRFVzIGF2YWlsYWJsZSBmb3IgdGhlIERUUyBkZWRpY2F0ZWQgY2x1c3Rlci5cbiAgICAgKi9cbiAgICByZWFkb25seSBkdT86IG51bWJlciB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBmZWVUeXBlOiBUaGUgYmlsbGluZyB0eXBlIGZvciBhIGNoYW5nZSB0cmFja2luZyBpbnN0YW5jZS4gVmFsaWQgdmFsdWVzOiBPTkxZX0NPTkZJR1VSQVRJT05fRkVFIGFuZCBDT05GSUdVUkFUSU9OX0ZFRV9BTkRfREFUQV9GRUUuIFxuICAgICAqIC0gKipPTkxZX0NPTkZJR1VSQVRJT05fRkVFKio6IGNoYXJnZXMgb25seSBjb25maWd1cmF0aW9uIGZlZXMuIFxuICAgICAqIC0gKipDT05GSUdVUkFUSU9OX0ZFRV9BTkRfREFUQV9GRUUqKjogY2hhcmdlcyBjb25maWd1cmF0aW9uIGZlZXMgYW5kIGRhdGEgdHJhZmZpYyBmZWVzLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGZlZVR5cGU/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgam9iSWQ6IFRoZSBJRCBvZiB0aGUgdGFzay5cbiAgICAgKiAqKk5vdGUqKjogSWYgdGhpcyBwYXJhbWV0ZXIgaXMgc3BlY2lmaWVkLCB5b3UgZG8gbm90IG5lZWQgdG8gc3BlY2lmeSB0aGUgU291cmNlUmVnaW9uLCBEZXN0aW5hdGlvblJlZ2lvbiwgU291cmNlRW5kcG9pbnRFbmdpbmVOYW1lLCBvciBEZXN0aW5hdGlvbkVuZHBvaW50RW5naW5lTmFtZSBwYXJhbWV0ZXIuIEV2ZW4gaWYgdGhlc2UgcGFyYW1ldGVycyBhcmUgc3BlY2lmaWVkLCB0aGUgdmFsdWUgb2YgdGhlIEpvYklkIHBhcmFtZXRlciB0YWtlcyBwcmVjZWRlbmNlLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGpvYklkPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IHBlcmlvZDogVGhlIHVuaXQgb2YgdGhlIHN1YnNjcmlwdGlvbiBkdXJhdGlvbi4gVmFsaWQgdmFsdWVzOiAqKlllYXIqKiBhbmQgKipNb250aCoqLlxuICAgICAqICoqTm90ZSoqOiBZb3UgbXVzdCBzcGVjaWZ5IHRoaXMgcGFyYW1ldGVyIG9ubHkgaWYgdGhlICoqUGF5VHlwZSoqIHBhcmFtZXRlciBpcyBzZXQgdG8gKipQcmVQYWlkKiouXG4gICAgICovXG4gICAgcmVhZG9ubHkgcGVyaW9kPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IHJlc291cmNlR3JvdXBJZDogVGhlIElEIG9mIHRoZSByZXNvdXJjZSBncm91cC5cbiAgICAgKi9cbiAgICByZWFkb25seSByZXNvdXJjZUdyb3VwSWQ/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgc291cmNlRW5kcG9pbnRFbmdpbmVOYW1lOiBUaGUgZGF0YWJhc2UgZW5naW5lIG9mIHRoZSBzb3VyY2UgaW5zdGFuY2UuIFZhbGlkIHZhbHVlczpcbiAgICAgKiAtICoqTXlTUUwqKjogQXBzYXJhREIgUkRTIGZvciBNeVNRTCBpbnN0YW5jZSBvciBzZWxmLW1hbmFnZWQgTXlTUUwgZGF0YWJhc2VcbiAgICAgKiAtICoqUG9sYXJEQioqOiBQb2xhckRCIGZvciBNeVNRTCBjbHVzdGVyXG4gICAgICogLSAqKnBvbGFyZGJfbyoqOiBQb2xhckRCIGZvciBPcmFjbGUgY2x1c3RlclxuICAgICAqIC0gKipwb2xhcmRiX3BnKio6IFBvbGFyREIgZm9yIFBvc3RncmVTUUwgY2x1c3RlclxuICAgICAqIC0gKipSZWRpcyoqOiBBcHNhcmFEQiBmb3IgUmVkaXMgaW5zdGFuY2Ugb3Igc2VsZi1tYW5hZ2VkIFJlZGlzIGRhdGFiYXNlXG4gICAgICogLSAqKkRSRFMqKjogUG9sYXJEQi1YIDEuMCBvciBQb2xhckRCLVggMi4wIGluc3RhbmNlXG4gICAgICogLSAqKlBvc3RncmVTUUwqKjogc2VsZi1tYW5hZ2VkIFBvc3RncmVTUUwgZGF0YWJhc2VcbiAgICAgKiAtICoqb2RwcyoqOiBNYXhDb21wdXRlIHByb2plY3RcbiAgICAgKiAtICoqb3JhY2xlKio6IHNlbGYtbWFuYWdlZCBPcmFjbGUgZGF0YWJhc2VcbiAgICAgKiAtICoqbW9uZ29kYioqOiBBcHNhcmFEQiBmb3IgTW9uZ29EQiBpbnN0YW5jZSBvciBzZWxmLW1hbmFnZWQgTW9uZ29EQiBkYXRhYmFzZVxuICAgICAqIC0gKip0aWRiKio6IFRpREIgZGF0YWJhc2VcbiAgICAgKiAtICoqQURTKio6IEFuYWx5dGljREIgZm9yIE15U1FMIFYyLjAgY2x1c3RlclxuICAgICAqIC0gKipBREIzMCoqOiBBbmFseXRpY0RCIGZvciBNeVNRTCBWMy4wIGNsdXN0ZXJcbiAgICAgKiAtICoqR3JlZW5wbHVtKio6IEFuYWx5dGljREIgZm9yIFBvc3RncmVTUUwgaW5zdGFuY2VcbiAgICAgKiAtICoqTVNTUUwqKjogQXBzYXJhREIgUkRTIGZvciBTUUwgU2VydmVyIGluc3RhbmNlIG9yIHNlbGYtbWFuYWdlZCBTUUwgU2VydmVyIGRhdGFiYXNlXG4gICAgICogLSAqKmthZmthKio6IE1lc3NhZ2UgUXVldWUgZm9yIEFwYWNoZSBLYWZrYSBpbnN0YW5jZSBvciBzZWxmLW1hbmFnZWQgS2Fma2EgY2x1c3RlclxuICAgICAqIC0gKipEYXRhSHViKio6IERhdGFIdWIgcHJvamVjdFxuICAgICAqIC0gKipEQjIqKjogc2VsZi1tYW5hZ2VkIERiMiBmb3IgTFVXIGRhdGFiYXNlXG4gICAgICogLSAqKmFzNDAwKio6IEFTXFwvNDAwXG4gICAgICogLSAqKlRhYmxlc3RvcmUqKjogVGFibGVzdG9yZSBpbnN0YW5jZVxuICAgICAqICoqTm90ZSoqOiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyAqKk15U1FMKiouIFlvdSBtdXN0IHNwZWNpZnkgb25lIG9mIHRoaXMgcGFyYW1ldGVyIGFuZCB0aGUgKipKb2JJZCoqIHBhcmFtZXRlci5cbiAgICAgKi9cbiAgICByZWFkb25seSBzb3VyY2VFbmRwb2ludEVuZ2luZU5hbWU/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgc291cmNlUmVnaW9uOiBUaGUgSUQgb2YgdGhlIHJlZ2lvbiBpbiB3aGljaCB0aGUgc291cmNlIGluc3RhbmNlIHJlc2lkZXMuXG4gICAgICogKipOb3RlKio6IFlvdSBtdXN0IHNwZWNpZnkgb25lIG9mIHRoaXMgcGFyYW1ldGVyIGFuZCB0aGUgKipKb2JJZCoqIHBhcmFtZXRlci5cbiAgICAgKi9cbiAgICByZWFkb25seSBzb3VyY2VSZWdpb24/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgc3luY0FyY2hpdGVjdHVyZTogVGhlIHN5bmNocm9uaXphdGlvbiB0b3BvbG9neS4gVmFsaWQgdmFsdWVzOlxuICAgICAqIC0gKipvbmV3YXkqKjogb25lLXdheSBzeW5jaHJvbml6YXRpb24uIFRoaXMgaXMgdGhlIGRlZmF1bHQgdmFsdWUuXG4gICAgICogLSAqKmJpZGlyZWN0aW9uYWwqKjogdHdvLXdheSBzeW5jaHJvbml6YXRpb24uXG4gICAgICovXG4gICAgcmVhZG9ubHkgc3luY0FyY2hpdGVjdHVyZT86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSB1c2VkVGltZTogVGhlIHN1YnNjcmlwdGlvbiBkdXJhdGlvbi5cbiAgICAgKiAtIFZhbGlkIHZhbHVlcyBpZiB0aGUgKipQZXJpb2QqKiBwYXJhbWV0ZXIgaXMgc2V0IHRvICoqTW9udGgqKjogMSwgMiwgMywgNCwgNSwgNiwgNywgOCwgYW5kIDkuXG4gICAgICogLSBWYWxpZCB2YWx1ZXMgaWYgdGhlICoqUGVyaW9kKiogcGFyYW1ldGVyIGlzIHNldCB0byAqKlllYXIqKjogMSwgMiwgMywgYW5kIDUuXG4gICAgICogKipOb3RlKio6IFlvdSBtdXN0IHNwZWNpZnkgdGhpcyBwYXJhbWV0ZXIgb25seSBpZiB0aGUgKipQYXlUeXBlKiogcGFyYW1ldGVyIGlzIHNldCB0byAqKlByZVBhaWQqKi4gWW91IGNhbiBzZXQgdGhlICoqUGVyaW9kKiogcGFyYW1ldGVyIHRvIHNwZWNpZnkgdGhlIHVuaXQgb2YgdGhlIHN1YnNjcmlwdGlvbiBkdXJhdGlvbi5cbiAgICAgKi9cbiAgICByZWFkb25seSB1c2VkVGltZT86IG51bWJlciB8IHJvcy5JUmVzb2x2YWJsZTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgd2hldGhlciB0aGUgZ2l2ZW4gcHJvcGVydGllcyBtYXRjaCB0aG9zZSBvZiBhIGBSb3NJbnN0YW5jZVByb3BzYFxuICpcbiAqIEBwYXJhbSBwcm9wZXJ0aWVzIC0gdGhlIFR5cGVTY3JpcHQgcHJvcGVydGllcyBvZiBhIGBSb3NJbnN0YW5jZVByb3BzYFxuICpcbiAqIEByZXR1cm5zIHRoZSByZXN1bHQgb2YgdGhlIHZhbGlkYXRpb24uXG4gKi9cbmZ1bmN0aW9uIFJvc0luc3RhbmNlUHJvcHNWYWxpZGF0b3IocHJvcGVydGllczogYW55KTogcm9zLlZhbGlkYXRpb25SZXN1bHQge1xuICAgIGlmICghcm9zLmNhbkluc3BlY3QocHJvcGVydGllcykpIHsgcmV0dXJuIHJvcy5WQUxJREFUSU9OX1NVQ0NFU1M7IH1cbiAgICBjb25zdCBlcnJvcnMgPSBuZXcgcm9zLlZhbGlkYXRpb25SZXN1bHRzKCk7XG4gICAgZXJyb3JzLmNvbGxlY3Qocm9zLnByb3BlcnR5VmFsaWRhdG9yKCdyZXNvdXJjZUdyb3VwSWQnLCByb3MudmFsaWRhdGVTdHJpbmcpKHByb3BlcnRpZXMucmVzb3VyY2VHcm91cElkKSk7XG4gICAgZXJyb3JzLmNvbGxlY3Qocm9zLnByb3BlcnR5VmFsaWRhdG9yKCdmZWVUeXBlJywgcm9zLnZhbGlkYXRlU3RyaW5nKShwcm9wZXJ0aWVzLmZlZVR5cGUpKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ2NvbXB1dGVVbml0Jywgcm9zLnZhbGlkYXRlTnVtYmVyKShwcm9wZXJ0aWVzLmNvbXB1dGVVbml0KSk7XG4gICAgaWYocHJvcGVydGllcy5wZXJpb2QgJiYgKHR5cGVvZiBwcm9wZXJ0aWVzLnBlcmlvZCkgIT09ICdvYmplY3QnKSB7XG4gICAgICAgIGVycm9ycy5jb2xsZWN0KHJvcy5wcm9wZXJ0eVZhbGlkYXRvcigncGVyaW9kJywgcm9zLnZhbGlkYXRlQWxsb3dlZFZhbHVlcykoe1xuICAgICAgICAgIGRhdGE6IHByb3BlcnRpZXMucGVyaW9kLFxuICAgICAgICAgIGFsbG93ZWRWYWx1ZXM6IFtcIk1vbnRoXCIsXCJZZWFyXCJdLFxuICAgICAgICB9KSk7XG4gICAgfVxuICAgIGVycm9ycy5jb2xsZWN0KHJvcy5wcm9wZXJ0eVZhbGlkYXRvcigncGVyaW9kJywgcm9zLnZhbGlkYXRlU3RyaW5nKShwcm9wZXJ0aWVzLnBlcmlvZCkpO1xuICAgIGVycm9ycy5jb2xsZWN0KHJvcy5wcm9wZXJ0eVZhbGlkYXRvcignZGVzdGluYXRpb25SZWdpb24nLCByb3MudmFsaWRhdGVTdHJpbmcpKHByb3BlcnRpZXMuZGVzdGluYXRpb25SZWdpb24pKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ2luc3RhbmNlQ2xhc3MnLCByb3MucmVxdWlyZWRWYWxpZGF0b3IpKHByb3BlcnRpZXMuaW5zdGFuY2VDbGFzcykpO1xuICAgIGlmKHByb3BlcnRpZXMuaW5zdGFuY2VDbGFzcyAmJiAodHlwZW9mIHByb3BlcnRpZXMuaW5zdGFuY2VDbGFzcykgIT09ICdvYmplY3QnKSB7XG4gICAgICAgIGVycm9ycy5jb2xsZWN0KHJvcy5wcm9wZXJ0eVZhbGlkYXRvcignaW5zdGFuY2VDbGFzcycsIHJvcy52YWxpZGF0ZUFsbG93ZWRWYWx1ZXMpKHtcbiAgICAgICAgICBkYXRhOiBwcm9wZXJ0aWVzLmluc3RhbmNlQ2xhc3MsXG4gICAgICAgICAgYWxsb3dlZFZhbHVlczogW1wieHhsYXJnZVwiLFwieGxhcmdlXCIsXCJsYXJnZVwiLFwibWVkaXVtXCIsXCJzbWFsbFwiLFwibWljcm9cIl0sXG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgZXJyb3JzLmNvbGxlY3Qocm9zLnByb3BlcnR5VmFsaWRhdG9yKCdpbnN0YW5jZUNsYXNzJywgcm9zLnZhbGlkYXRlU3RyaW5nKShwcm9wZXJ0aWVzLmluc3RhbmNlQ2xhc3MpKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ3NvdXJjZUVuZHBvaW50RW5naW5lTmFtZScsIHJvcy52YWxpZGF0ZVN0cmluZykocHJvcGVydGllcy5zb3VyY2VFbmRwb2ludEVuZ2luZU5hbWUpKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ3BheVR5cGUnLCByb3MucmVxdWlyZWRWYWxpZGF0b3IpKHByb3BlcnRpZXMucGF5VHlwZSkpO1xuICAgIGlmKHByb3BlcnRpZXMucGF5VHlwZSAmJiAodHlwZW9mIHByb3BlcnRpZXMucGF5VHlwZSkgIT09ICdvYmplY3QnKSB7XG4gICAgICAgIGVycm9ycy5jb2xsZWN0KHJvcy5wcm9wZXJ0eVZhbGlkYXRvcigncGF5VHlwZScsIHJvcy52YWxpZGF0ZUFsbG93ZWRWYWx1ZXMpKHtcbiAgICAgICAgICBkYXRhOiBwcm9wZXJ0aWVzLnBheVR5cGUsXG4gICAgICAgICAgYWxsb3dlZFZhbHVlczogW1wiUGF5QXNZb3VHb1wiLFwiUG9zdFBhaWRcIixcIlBheU9uRGVtYW5kXCIsXCJQb3N0cGFpZFwiLFwiUG9zdFBheVwiLFwiUG9zdHBheVwiLFwiUE9TVFBBWVwiLFwiUE9TVFwiLFwiU3Vic2NyaXB0aW9uXCIsXCJQcmVQYWlkXCIsXCJQcmVwYWlkXCIsXCJQcmVQYXlcIixcIlByZXBheVwiLFwiUFJFUEFZXCIsXCJQUkVcIl0sXG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgZXJyb3JzLmNvbGxlY3Qocm9zLnByb3BlcnR5VmFsaWRhdG9yKCdwYXlUeXBlJywgcm9zLnZhbGlkYXRlU3RyaW5nKShwcm9wZXJ0aWVzLnBheVR5cGUpKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ2F1dG9QYXknLCByb3MudmFsaWRhdGVCb29sZWFuKShwcm9wZXJ0aWVzLmF1dG9QYXkpKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ2Rlc3RpbmF0aW9uRW5kcG9pbnRFbmdpbmVOYW1lJywgcm9zLnZhbGlkYXRlU3RyaW5nKShwcm9wZXJ0aWVzLmRlc3RpbmF0aW9uRW5kcG9pbnRFbmdpbmVOYW1lKSk7XG4gICAgZXJyb3JzLmNvbGxlY3Qocm9zLnByb3BlcnR5VmFsaWRhdG9yKCdzb3VyY2VSZWdpb24nLCByb3MudmFsaWRhdGVTdHJpbmcpKHByb3BlcnRpZXMuc291cmNlUmVnaW9uKSk7XG4gICAgaWYocHJvcGVydGllcy5kdSAmJiAodHlwZW9mIHByb3BlcnRpZXMuZHUpICE9PSAnb2JqZWN0Jykge1xuICAgICAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ2R1Jywgcm9zLnZhbGlkYXRlUmFuZ2UpKHtcbiAgICAgICAgICAgIGRhdGE6IHByb3BlcnRpZXMuZHUsXG4gICAgICAgICAgICBtaW46IDEsXG4gICAgICAgICAgICBtYXg6IDEwMCxcbiAgICAgICAgICB9KSk7XG4gICAgfVxuICAgIGVycm9ycy5jb2xsZWN0KHJvcy5wcm9wZXJ0eVZhbGlkYXRvcignZHUnLCByb3MudmFsaWRhdGVOdW1iZXIpKHByb3BlcnRpZXMuZHUpKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ3R5cGUnLCByb3MucmVxdWlyZWRWYWxpZGF0b3IpKHByb3BlcnRpZXMudHlwZSkpO1xuICAgIGlmKHByb3BlcnRpZXMudHlwZSAmJiAodHlwZW9mIHByb3BlcnRpZXMudHlwZSkgIT09ICdvYmplY3QnKSB7XG4gICAgICAgIGVycm9ycy5jb2xsZWN0KHJvcy5wcm9wZXJ0eVZhbGlkYXRvcigndHlwZScsIHJvcy52YWxpZGF0ZUFsbG93ZWRWYWx1ZXMpKHtcbiAgICAgICAgICBkYXRhOiBwcm9wZXJ0aWVzLnR5cGUsXG4gICAgICAgICAgYWxsb3dlZFZhbHVlczogW1wiTUlHUkFUSU9OXCIsXCJTWU5DXCIsXCJTVUJTQ1JJQkVcIl0sXG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgZXJyb3JzLmNvbGxlY3Qocm9zLnByb3BlcnR5VmFsaWRhdG9yKCd0eXBlJywgcm9zLnZhbGlkYXRlU3RyaW5nKShwcm9wZXJ0aWVzLnR5cGUpKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ2RhdGFiYXNlQ291bnQnLCByb3MudmFsaWRhdGVOdW1iZXIpKHByb3BlcnRpZXMuZGF0YWJhc2VDb3VudCkpO1xuICAgIGlmKHByb3BlcnRpZXMudXNlZFRpbWUgJiYgKHR5cGVvZiBwcm9wZXJ0aWVzLnVzZWRUaW1lKSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgZXJyb3JzLmNvbGxlY3Qocm9zLnByb3BlcnR5VmFsaWRhdG9yKCd1c2VkVGltZScsIHJvcy52YWxpZGF0ZUFsbG93ZWRWYWx1ZXMpKHtcbiAgICAgICAgICBkYXRhOiBwcm9wZXJ0aWVzLnVzZWRUaW1lLFxuICAgICAgICAgIGFsbG93ZWRWYWx1ZXM6IFsxLDIsMyw0LDUsNiw3LDgsOV0sXG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgZXJyb3JzLmNvbGxlY3Qocm9zLnByb3BlcnR5VmFsaWRhdG9yKCd1c2VkVGltZScsIHJvcy52YWxpZGF0ZU51bWJlcikocHJvcGVydGllcy51c2VkVGltZSkpO1xuICAgIGVycm9ycy5jb2xsZWN0KHJvcy5wcm9wZXJ0eVZhbGlkYXRvcignYXV0b1N0YXJ0Jywgcm9zLnZhbGlkYXRlQm9vbGVhbikocHJvcGVydGllcy5hdXRvU3RhcnQpKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ2pvYklkJywgcm9zLnZhbGlkYXRlU3RyaW5nKShwcm9wZXJ0aWVzLmpvYklkKSk7XG4gICAgaWYocHJvcGVydGllcy5zeW5jQXJjaGl0ZWN0dXJlICYmICh0eXBlb2YgcHJvcGVydGllcy5zeW5jQXJjaGl0ZWN0dXJlKSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgZXJyb3JzLmNvbGxlY3Qocm9zLnByb3BlcnR5VmFsaWRhdG9yKCdzeW5jQXJjaGl0ZWN0dXJlJywgcm9zLnZhbGlkYXRlQWxsb3dlZFZhbHVlcykoe1xuICAgICAgICAgIGRhdGE6IHByb3BlcnRpZXMuc3luY0FyY2hpdGVjdHVyZSxcbiAgICAgICAgICBhbGxvd2VkVmFsdWVzOiBbXCJvbmV3YXlcIixcImJpZGlyZWN0aW9uYWxcIl0sXG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgZXJyb3JzLmNvbGxlY3Qocm9zLnByb3BlcnR5VmFsaWRhdG9yKCdzeW5jQXJjaGl0ZWN0dXJlJywgcm9zLnZhbGlkYXRlU3RyaW5nKShwcm9wZXJ0aWVzLnN5bmNBcmNoaXRlY3R1cmUpKTtcbiAgICByZXR1cm4gZXJyb3JzLndyYXAoJ3N1cHBsaWVkIHByb3BlcnRpZXMgbm90IGNvcnJlY3QgZm9yIFwiUm9zSW5zdGFuY2VQcm9wc1wiJyk7XG59XG5cbi8qKlxuICogUmVuZGVycyB0aGUgQWxpQ2xvdWQgUk9TIFJlc291cmNlIHByb3BlcnRpZXMgb2YgYW4gYEFMSVlVTjo6RFRTOjpJbnN0YW5jZWAgcmVzb3VyY2VcbiAqXG4gKiBAcGFyYW0gcHJvcGVydGllcyAtIHRoZSBUeXBlU2NyaXB0IHByb3BlcnRpZXMgb2YgYSBgUm9zSW5zdGFuY2VQcm9wc2BcbiAqXG4gKiBAcmV0dXJucyB0aGUgQWxpQ2xvdWQgUk9TIFJlc291cmNlIHByb3BlcnRpZXMgb2YgYW4gYEFMSVlVTjo6RFRTOjpJbnN0YW5jZWAgcmVzb3VyY2UuXG4gKi9cbi8vIEB0cy1pZ25vcmUgVFM2MTMzXG5mdW5jdGlvbiByb3NJbnN0YW5jZVByb3BzVG9Sb3NUZW1wbGF0ZShwcm9wZXJ0aWVzOiBhbnksIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OiBib29sZWFuKTogYW55IHtcbiAgICBpZiAoIXJvcy5jYW5JbnNwZWN0KHByb3BlcnRpZXMpKSB7IHJldHVybiBwcm9wZXJ0aWVzOyB9XG4gICAgaWYoZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQpIHtcbiAgICAgICAgUm9zSW5zdGFuY2VQcm9wc1ZhbGlkYXRvcihwcm9wZXJ0aWVzKS5hc3NlcnRTdWNjZXNzKCk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAnSW5zdGFuY2VDbGFzcyc6IHJvcy5zdHJpbmdUb1Jvc1RlbXBsYXRlKHByb3BlcnRpZXMuaW5zdGFuY2VDbGFzcyksXG4gICAgICAnUGF5VHlwZSc6IHJvcy5zdHJpbmdUb1Jvc1RlbXBsYXRlKHByb3BlcnRpZXMucGF5VHlwZSksXG4gICAgICAnVHlwZSc6IHJvcy5zdHJpbmdUb1Jvc1RlbXBsYXRlKHByb3BlcnRpZXMudHlwZSksXG4gICAgICAnQXV0b1BheSc6IHJvcy5ib29sZWFuVG9Sb3NUZW1wbGF0ZShwcm9wZXJ0aWVzLmF1dG9QYXkpLFxuICAgICAgJ0F1dG9TdGFydCc6IHJvcy5ib29sZWFuVG9Sb3NUZW1wbGF0ZShwcm9wZXJ0aWVzLmF1dG9TdGFydCksXG4gICAgICAnQ29tcHV0ZVVuaXQnOiByb3MubnVtYmVyVG9Sb3NUZW1wbGF0ZShwcm9wZXJ0aWVzLmNvbXB1dGVVbml0KSxcbiAgICAgICdEYXRhYmFzZUNvdW50Jzogcm9zLm51bWJlclRvUm9zVGVtcGxhdGUocHJvcGVydGllcy5kYXRhYmFzZUNvdW50KSxcbiAgICAgICdEZXN0aW5hdGlvbkVuZHBvaW50RW5naW5lTmFtZSc6IHJvcy5zdHJpbmdUb1Jvc1RlbXBsYXRlKHByb3BlcnRpZXMuZGVzdGluYXRpb25FbmRwb2ludEVuZ2luZU5hbWUpLFxuICAgICAgJ0Rlc3RpbmF0aW9uUmVnaW9uJzogcm9zLnN0cmluZ1RvUm9zVGVtcGxhdGUocHJvcGVydGllcy5kZXN0aW5hdGlvblJlZ2lvbiksXG4gICAgICAnRHUnOiByb3MubnVtYmVyVG9Sb3NUZW1wbGF0ZShwcm9wZXJ0aWVzLmR1KSxcbiAgICAgICdGZWVUeXBlJzogcm9zLnN0cmluZ1RvUm9zVGVtcGxhdGUocHJvcGVydGllcy5mZWVUeXBlKSxcbiAgICAgICdKb2JJZCc6IHJvcy5zdHJpbmdUb1Jvc1RlbXBsYXRlKHByb3BlcnRpZXMuam9iSWQpLFxuICAgICAgJ1BlcmlvZCc6IHJvcy5zdHJpbmdUb1Jvc1RlbXBsYXRlKHByb3BlcnRpZXMucGVyaW9kKSxcbiAgICAgICdSZXNvdXJjZUdyb3VwSWQnOiByb3Muc3RyaW5nVG9Sb3NUZW1wbGF0ZShwcm9wZXJ0aWVzLnJlc291cmNlR3JvdXBJZCksXG4gICAgICAnU291cmNlRW5kcG9pbnRFbmdpbmVOYW1lJzogcm9zLnN0cmluZ1RvUm9zVGVtcGxhdGUocHJvcGVydGllcy5zb3VyY2VFbmRwb2ludEVuZ2luZU5hbWUpLFxuICAgICAgJ1NvdXJjZVJlZ2lvbic6IHJvcy5zdHJpbmdUb1Jvc1RlbXBsYXRlKHByb3BlcnRpZXMuc291cmNlUmVnaW9uKSxcbiAgICAgICdTeW5jQXJjaGl0ZWN0dXJlJzogcm9zLnN0cmluZ1RvUm9zVGVtcGxhdGUocHJvcGVydGllcy5zeW5jQXJjaGl0ZWN0dXJlKSxcbiAgICAgICdVc2VkVGltZSc6IHJvcy5udW1iZXJUb1Jvc1RlbXBsYXRlKHByb3BlcnRpZXMudXNlZFRpbWUpLFxuICAgIH07XG59XG5cbi8qKlxuICogVGhpcyBjbGFzcyBpcyBhIGJhc2UgZW5jYXBzdWxhdGlvbiBhcm91bmQgdGhlIFJPUyByZXNvdXJjZSB0eXBlIGBBTElZVU46OkRUUzo6SW5zdGFuY2VgLCB3aGljaCBpcyBhIG5ldyByZXNvdXJjZSB0eXBlIHRoYXQgaXMgdXNlZCB0byBjcmVhdGUgYSBEYXRhIFRyYW5zbWlzc2lvbiBTZXJ2aWNlIChEVFMpIGluc3RhbmNlLlxuICogQE5vdGUgVGhpcyBjbGFzcyBkb2VzIG5vdCBjb250YWluIGFkZGl0aW9uYWwgZnVuY3Rpb25zLCBzbyBpdCBpcyByZWNvbW1lbmRlZCB0byB1c2UgdGhlIGBJbnN0YW5jZWAgY2xhc3MgaW5zdGVhZCBvZiB0aGlzIGNsYXNzIGZvciBhIG1vcmUgY29udmVuaWVudCBkZXZlbG9wbWVudCBleHBlcmllbmNlLlxuICogU2VlIGh0dHBzOi8vd3d3LmFsaWJhYmFjbG91ZC5jb20vaGVscC9yb3MvZGV2ZWxvcGVyLXJlZmVyZW5jZS9hbGl5dW4tZHRzLWluc3RhbmNlXG4gKi9cbmV4cG9ydCBjbGFzcyBSb3NJbnN0YW5jZSBleHRlbmRzIHJvcy5Sb3NSZXNvdXJjZSB7XG4gICAgLyoqXG4gICAgICogVGhlIHJlc291cmNlIHR5cGUgbmFtZSBmb3IgdGhpcyByZXNvdXJjZSBjbGFzcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IFJPU19SRVNPVVJDRV9UWVBFX05BTUUgPSBcIkFMSVlVTjo6RFRTOjpJbnN0YW5jZVwiO1xuXG4gICAgLyoqXG4gICAgICogQEF0dHJpYnV0ZSBJbnN0YW5jZUlkOiBUaGUgSUQgb2YgdGhlIERUUyBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckluc3RhbmNlSWQ6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEBBdHRyaWJ1dGUgSm9iSWQ6IFRoZSBJRCBvZiB0aGUgdGFzay5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckpvYklkOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICBwdWJsaWMgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6IGJvb2xlYW47XG5cblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBpbnN0YW5jZUNsYXNzOiBUaGUgaW5zdGFuY2UgY2xhc3MuXG4gICAgICogLSBEVFMgc3VwcG9ydHMgdGhlIGZvbGxvd2luZyBpbnN0YW5jZSBjbGFzc2VzIGZvciBhIGRhdGEgbWlncmF0aW9uIGluc3RhbmNlOiAqKnh4bGFyZ2UqKiwgKip4bGFyZ2UqKiwgKipsYXJnZSoqLCAqKm1lZGl1bSoqLCBhbmQgKipzbWFsbCoqLlxuICAgICAqIC0gRFRTIHN1cHBvcnRzIHRoZSBmb2xsb3dpbmcgaW5zdGFuY2UgY2xhc3NlcyBmb3IgYSBkYXRhIHN5bmNocm9uaXphdGlvbiBpbnN0YW5jZTogKipsYXJnZSoqLCAqKm1lZGl1bSoqLCAqKnNtYWxsKiosIGFuZCAqKm1pY3JvKiouXG4gICAgICogKipOb3RlKio6IEFsdGhvdWdoIHRoZSBpbnN0YW5jZSBzcGVjaWZpY2F0aW9uIHN1cHBvcnRzIG1vZGlmaWNhdGlvbiBhZnRlciBjcmVhdGlvbiwgdGhlIGRvd25ncmFkZSBpbnN0YW5jZSBmZWF0dXJlIGlzIGN1cnJlbnRseSBpbiBjYW5hcnkgcmVsZWFzZSBhbmQgYXZhaWxhYmxlIG9ubHkgZm9yIHNwZWNpZmljIHVzZXJzLlxuICAgICAqL1xuICAgIHB1YmxpYyBpbnN0YW5jZUNsYXNzOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgcGF5VHlwZTogVGhlIGJpbGxpbmcgbWV0aG9kLiBWYWxpZCB2YWx1ZXM6XG4gICAgICogLSAqKlByZVBhaWQqKjogc3Vic2NyaXB0aW9uXG4gICAgICogLSAqKlBvc3RQYWlkKio6IHBheS1hcy15b3UtZ29cbiAgICAgKi9cbiAgICBwdWJsaWMgcGF5VHlwZTogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IHR5cGU6IFRoZSB0eXBlIG9mIHRoZSBEVFMgaW5zdGFuY2UuIFZhbGlkIHZhbHVlczpcbiAgICAgKiAtICoqTUlHUkFUSU9OKjogZGF0YSBtaWdyYXRpb24gaW5zdGFuY2VcbiAgICAgKiAtICoqU1lOQyoqOiBkYXRhIHN5bmNocm9uaXphdGlvbiBpbnN0YW5jZVxuICAgICAqIC0gKipTVUJTQ1JJQkUqKjogY2hhbmdlIHRyYWNraW5nIGluc3RhbmNlXG4gICAgICovXG4gICAgcHVibGljIHR5cGU6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBhdXRvUGF5OiBTcGVjaWZpZXMgd2hldGhlciB0byBhdXRvbWF0aWNhbGx5IHJlbmV3IHRoZSBEVFMgaW5zdGFuY2Ugd2hlbiBpdCBleHBpcmVzLiBWYWxpZCB2YWx1ZXM6XG4gICAgICogLSAqKmZhbHNlKio6IGRvZXMgbm90IGF1dG9tYXRpY2FsbHkgcmVuZXcgdGhlIERUUyBpbnN0YW5jZSB3aGVuIGl0IGV4cGlyZXMuIFRoaXMgaXMgdGhlIGRlZmF1bHQgdmFsdWUuXG4gICAgICogLSAqKnRydWUqKjogYXV0b21hdGljYWxseSByZW5ld3MgdGhlIERUUyBpbnN0YW5jZSB3aGVuIGl0IGV4cGlyZXMuXG4gICAgICovXG4gICAgcHVibGljIGF1dG9QYXk6IGJvb2xlYW4gfCByb3MuSVJlc29sdmFibGUgfCB1bmRlZmluZWQ7XG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgYXV0b1N0YXJ0OiBTcGVjaWZpZXMgd2hldGhlciB0byBhdXRvbWF0aWNhbGx5IHN0YXJ0IHRoZSB0YXNrIGFmdGVyIHRoZSBEVFMgaW5zdGFuY2UgaXMgcHVyY2hhc2VkLiBWYWxpZCB2YWx1ZXM6XG4gICAgICogLSAqKmZhbHNlKio6IGRvZXMgbm90IGF1dG9tYXRpY2FsbHkgc3RhcnQgdGhlIHRhc2sgYWZ0ZXIgdGhlIERUUyBpbnN0YW5jZSBpcyBwdXJjaGFzZWQuIFRoaXMgaXMgdGhlIGRlZmF1bHQgdmFsdWUuXG4gICAgICogLSAqKnRydWUqKjogYXV0b21hdGljYWxseSBzdGFydHMgdGhlIHRhc2sgYWZ0ZXIgdGhlIERUUyBpbnN0YW5jZSBpcyBwdXJjaGFzZWQuXG4gICAgICovXG4gICAgcHVibGljIGF1dG9TdGFydDogYm9vbGVhbiB8IHJvcy5JUmVzb2x2YWJsZSB8IHVuZGVmaW5lZDtcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBjb21wdXRlVW5pdDogVGhlIHNwZWNpZmljYXRpb25zIG9mIHRoZSBleHRyYWN0LCB0cmFuc2Zvcm0sIGFuZCBsb2FkIChFVEwpIGluc3RhbmNlLiBUaGUgdW5pdCBpcyBjb21wdXRlIHVuaXQgKENVKS4gT25lIENVIGlzIGVxdWFsIHRvIDEgdkNQVSBhbmQgNCBHQiBvZiBtZW1vcnkuIFRoZSB2YWx1ZSBvZiB0aGlzIHBhcmFtZXRlciBtdXN0IGJlIGFuIGludGVnZXIgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIDIuXG4gICAgICovXG4gICAgcHVibGljIGNvbXB1dGVVbml0OiBudW1iZXIgfCByb3MuSVJlc29sdmFibGUgfCB1bmRlZmluZWQ7XG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgZGF0YWJhc2VDb3VudDogVGhlIG51bWJlciBvZiBwcml2YXRlIGN1c3RvbSBBcHNhcmFEQiBSRFMgaW5zdGFuY2VzIGluIGEgUG9sYXJEQi1YIGluc3RhbmNlLiBEZWZhdWx0IHZhbHVlOiAqKjEqKi5cbiAgICAgKiAqKk5vdGUqKjogWW91IG11c3Qgc3BlY2lmeSB0aGlzIHBhcmFtZXRlciBvbmx5IGlmIHRoZSAqKlNvdXJjZUVuZHBvaW50RW5naW5lTmFtZSoqIHBhcmFtZXRlciBpcyBzZXQgdG8gKipkcmRzKiouXG4gICAgICovXG4gICAgcHVibGljIGRhdGFiYXNlQ291bnQ6IG51bWJlciB8IHJvcy5JUmVzb2x2YWJsZSB8IHVuZGVmaW5lZDtcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBkZXN0aW5hdGlvbkVuZHBvaW50RW5naW5lTmFtZTogVGhlIGRhdGFiYXNlIGVuZ2luZSBvZiB0aGUgZGVzdGluYXRpb24gaW5zdGFuY2UuIFZhbGlkIHZhbHVlczpcbiAgICAgKiAtICoqTXlTUUwqKjogQXBzYXJhREIgUkRTIGZvciBNeVNRTCBpbnN0YW5jZSBvciBzZWxmLW1hbmFnZWQgTXlTUUwgZGF0YWJhc2VcbiAgICAgKiAtICoqUG9sYXJEQioqOiBQb2xhckRCIGZvciBNeVNRTCBjbHVzdGVyXG4gICAgICogLSAqKnBvbGFyZGJfbyoqOiBQb2xhckRCIGZvciBPcmFjbGUgY2x1c3RlclxuICAgICAqIC0gKipwb2xhcmRiX3BnKio6IFBvbGFyREIgZm9yIFBvc3RncmVTUUwgY2x1c3RlclxuICAgICAqIC0gKipSZWRpcyoqOiBBcHNhcmFEQiBmb3IgUmVkaXMgaW5zdGFuY2Ugb3Igc2VsZi1tYW5hZ2VkIFJlZGlzIGRhdGFiYXNlXG4gICAgICogLSAqKkRSRFMqKjogUG9sYXJEQi1YIDEuMCBvciBQb2xhckRCLVggMi4wIGluc3RhbmNlXG4gICAgICogLSAqKlBvc3RncmVTUUwqKjogc2VsZi1tYW5hZ2VkIFBvc3RncmVTUUwgZGF0YWJhc2VcbiAgICAgKiAtICoqb2RwcyoqOiBNYXhDb21wdXRlIHByb2plY3RcbiAgICAgKiAtICoqb3JhY2xlKio6IHNlbGYtbWFuYWdlZCBPcmFjbGUgZGF0YWJhc2VcbiAgICAgKiAtICoqbW9uZ29kYioqOiBBcHNhcmFEQiBmb3IgTW9uZ29EQiBpbnN0YW5jZSBvciBzZWxmLW1hbmFnZWQgTW9uZ29EQiBkYXRhYmFzZVxuICAgICAqIC0gKip0aWRiKio6IFRpREIgZGF0YWJhc2VcbiAgICAgKiAtICoqQURTKio6IEFuYWx5dGljREIgZm9yIE15U1FMIFYyLjAgY2x1c3RlclxuICAgICAqIC0gKipBREIzMCoqOiBBbmFseXRpY0RCIGZvciBNeVNRTCBWMy4wIGNsdXN0ZXJcbiAgICAgKiAtICoqR3JlZW5wbHVtKio6IEFuYWx5dGljREIgZm9yIFBvc3RncmVTUUwgaW5zdGFuY2VcbiAgICAgKiAtICoqTVNTUUwqKjogQXBzYXJhREIgUkRTIGZvciBTUUwgU2VydmVyIGluc3RhbmNlIG9yIHNlbGYtbWFuYWdlZCBTUUwgU2VydmVyIGRhdGFiYXNlXG4gICAgICogLSAqKmthZmthKio6IE1lc3NhZ2UgUXVldWUgZm9yIEFwYWNoZSBLYWZrYSBpbnN0YW5jZSBvciBzZWxmLW1hbmFnZWQgS2Fma2EgY2x1c3RlclxuICAgICAqIC0gKipEYXRhSHViKio6IERhdGFIdWIgcHJvamVjdFxuICAgICAqIC0gKipEQjIqKjogc2VsZi1tYW5hZ2VkIERiMiBmb3IgTFVXIGRhdGFiYXNlXG4gICAgICogLSAqKmFzNDAwKio6IEFTXFwvNDAwXG4gICAgICogLSAqKlRhYmxlc3RvcmUqKjogVGFibGVzdG9yZSBpbnN0YW5jZVxuICAgICAqICoqTm90ZSoqOiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyAqKk15U1FMKiouIFlvdSBtdXN0IHNwZWNpZnkgb25lIG9mIHRoaXMgcGFyYW1ldGVyIGFuZCB0aGUgKipKb2JJZCoqIHBhcmFtZXRlci5cbiAgICAgKi9cbiAgICBwdWJsaWMgZGVzdGluYXRpb25FbmRwb2ludEVuZ2luZU5hbWU6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZSB8IHVuZGVmaW5lZDtcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBkZXN0aW5hdGlvblJlZ2lvbjogVGhlIElEIG9mIHRoZSByZWdpb24gaW4gd2hpY2ggdGhlIGRlc3RpbmF0aW9uIGluc3RhbmNlIHJlc2lkZXMuXG4gICAgICogKipOb3RlKio6IFlvdSBtdXN0IHNwZWNpZnkgb25lIG9mIHRoaXMgcGFyYW1ldGVyIGFuZCB0aGUgKipKb2JJZCoqIHBhcmFtZXRlci5cbiAgICAgKi9cbiAgICBwdWJsaWMgZGVzdGluYXRpb25SZWdpb246IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZSB8IHVuZGVmaW5lZDtcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBkdTogVGhlIG51bWJlciBvZiBEVFMgdW5pdHMgKERVcykgdGhhdCBhcmUgYXNzaWduZWQgdG8gYSBEVFMgdGFzayB0aGF0IGlzIHJ1biBvbiBhIERUUyBkZWRpY2F0ZWQgY2x1c3Rlci4gVmFsaWQgdmFsdWVzOiAqKjEqKiB0byAqKjEwMCoqLlxuICAgICAqICoqTm90ZSoqOiBUaGUgdmFsdWUgb2YgdGhpcyBwYXJhbWV0ZXIgbXVzdCBiZSB3aXRoaW4gdGhlIHJhbmdlIG9mIHRoZSBudW1iZXIgb2YgRFVzIGF2YWlsYWJsZSBmb3IgdGhlIERUUyBkZWRpY2F0ZWQgY2x1c3Rlci5cbiAgICAgKi9cbiAgICBwdWJsaWMgZHU6IG51bWJlciB8IHJvcy5JUmVzb2x2YWJsZSB8IHVuZGVmaW5lZDtcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBmZWVUeXBlOiBUaGUgYmlsbGluZyB0eXBlIGZvciBhIGNoYW5nZSB0cmFja2luZyBpbnN0YW5jZS4gVmFsaWQgdmFsdWVzOiBPTkxZX0NPTkZJR1VSQVRJT05fRkVFIGFuZCBDT05GSUdVUkFUSU9OX0ZFRV9BTkRfREFUQV9GRUUuIFxuICAgICAqIC0gKipPTkxZX0NPTkZJR1VSQVRJT05fRkVFKio6IGNoYXJnZXMgb25seSBjb25maWd1cmF0aW9uIGZlZXMuIFxuICAgICAqIC0gKipDT05GSUdVUkFUSU9OX0ZFRV9BTkRfREFUQV9GRUUqKjogY2hhcmdlcyBjb25maWd1cmF0aW9uIGZlZXMgYW5kIGRhdGEgdHJhZmZpYyBmZWVzLlxuICAgICAqL1xuICAgIHB1YmxpYyBmZWVUeXBlOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGUgfCB1bmRlZmluZWQ7XG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgam9iSWQ6IFRoZSBJRCBvZiB0aGUgdGFzay5cbiAgICAgKiAqKk5vdGUqKjogSWYgdGhpcyBwYXJhbWV0ZXIgaXMgc3BlY2lmaWVkLCB5b3UgZG8gbm90IG5lZWQgdG8gc3BlY2lmeSB0aGUgU291cmNlUmVnaW9uLCBEZXN0aW5hdGlvblJlZ2lvbiwgU291cmNlRW5kcG9pbnRFbmdpbmVOYW1lLCBvciBEZXN0aW5hdGlvbkVuZHBvaW50RW5naW5lTmFtZSBwYXJhbWV0ZXIuIEV2ZW4gaWYgdGhlc2UgcGFyYW1ldGVycyBhcmUgc3BlY2lmaWVkLCB0aGUgdmFsdWUgb2YgdGhlIEpvYklkIHBhcmFtZXRlciB0YWtlcyBwcmVjZWRlbmNlLlxuICAgICAqL1xuICAgIHB1YmxpYyBqb2JJZDogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlIHwgdW5kZWZpbmVkO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IHBlcmlvZDogVGhlIHVuaXQgb2YgdGhlIHN1YnNjcmlwdGlvbiBkdXJhdGlvbi4gVmFsaWQgdmFsdWVzOiAqKlllYXIqKiBhbmQgKipNb250aCoqLlxuICAgICAqICoqTm90ZSoqOiBZb3UgbXVzdCBzcGVjaWZ5IHRoaXMgcGFyYW1ldGVyIG9ubHkgaWYgdGhlICoqUGF5VHlwZSoqIHBhcmFtZXRlciBpcyBzZXQgdG8gKipQcmVQYWlkKiouXG4gICAgICovXG4gICAgcHVibGljIHBlcmlvZDogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlIHwgdW5kZWZpbmVkO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IHJlc291cmNlR3JvdXBJZDogVGhlIElEIG9mIHRoZSByZXNvdXJjZSBncm91cC5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVzb3VyY2VHcm91cElkOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGUgfCB1bmRlZmluZWQ7XG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgc291cmNlRW5kcG9pbnRFbmdpbmVOYW1lOiBUaGUgZGF0YWJhc2UgZW5naW5lIG9mIHRoZSBzb3VyY2UgaW5zdGFuY2UuIFZhbGlkIHZhbHVlczpcbiAgICAgKiAtICoqTXlTUUwqKjogQXBzYXJhREIgUkRTIGZvciBNeVNRTCBpbnN0YW5jZSBvciBzZWxmLW1hbmFnZWQgTXlTUUwgZGF0YWJhc2VcbiAgICAgKiAtICoqUG9sYXJEQioqOiBQb2xhckRCIGZvciBNeVNRTCBjbHVzdGVyXG4gICAgICogLSAqKnBvbGFyZGJfbyoqOiBQb2xhckRCIGZvciBPcmFjbGUgY2x1c3RlclxuICAgICAqIC0gKipwb2xhcmRiX3BnKio6IFBvbGFyREIgZm9yIFBvc3RncmVTUUwgY2x1c3RlclxuICAgICAqIC0gKipSZWRpcyoqOiBBcHNhcmFEQiBmb3IgUmVkaXMgaW5zdGFuY2Ugb3Igc2VsZi1tYW5hZ2VkIFJlZGlzIGRhdGFiYXNlXG4gICAgICogLSAqKkRSRFMqKjogUG9sYXJEQi1YIDEuMCBvciBQb2xhckRCLVggMi4wIGluc3RhbmNlXG4gICAgICogLSAqKlBvc3RncmVTUUwqKjogc2VsZi1tYW5hZ2VkIFBvc3RncmVTUUwgZGF0YWJhc2VcbiAgICAgKiAtICoqb2RwcyoqOiBNYXhDb21wdXRlIHByb2plY3RcbiAgICAgKiAtICoqb3JhY2xlKio6IHNlbGYtbWFuYWdlZCBPcmFjbGUgZGF0YWJhc2VcbiAgICAgKiAtICoqbW9uZ29kYioqOiBBcHNhcmFEQiBmb3IgTW9uZ29EQiBpbnN0YW5jZSBvciBzZWxmLW1hbmFnZWQgTW9uZ29EQiBkYXRhYmFzZVxuICAgICAqIC0gKip0aWRiKio6IFRpREIgZGF0YWJhc2VcbiAgICAgKiAtICoqQURTKio6IEFuYWx5dGljREIgZm9yIE15U1FMIFYyLjAgY2x1c3RlclxuICAgICAqIC0gKipBREIzMCoqOiBBbmFseXRpY0RCIGZvciBNeVNRTCBWMy4wIGNsdXN0ZXJcbiAgICAgKiAtICoqR3JlZW5wbHVtKio6IEFuYWx5dGljREIgZm9yIFBvc3RncmVTUUwgaW5zdGFuY2VcbiAgICAgKiAtICoqTVNTUUwqKjogQXBzYXJhREIgUkRTIGZvciBTUUwgU2VydmVyIGluc3RhbmNlIG9yIHNlbGYtbWFuYWdlZCBTUUwgU2VydmVyIGRhdGFiYXNlXG4gICAgICogLSAqKmthZmthKio6IE1lc3NhZ2UgUXVldWUgZm9yIEFwYWNoZSBLYWZrYSBpbnN0YW5jZSBvciBzZWxmLW1hbmFnZWQgS2Fma2EgY2x1c3RlclxuICAgICAqIC0gKipEYXRhSHViKio6IERhdGFIdWIgcHJvamVjdFxuICAgICAqIC0gKipEQjIqKjogc2VsZi1tYW5hZ2VkIERiMiBmb3IgTFVXIGRhdGFiYXNlXG4gICAgICogLSAqKmFzNDAwKio6IEFTXFwvNDAwXG4gICAgICogLSAqKlRhYmxlc3RvcmUqKjogVGFibGVzdG9yZSBpbnN0YW5jZVxuICAgICAqICoqTm90ZSoqOiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyAqKk15U1FMKiouIFlvdSBtdXN0IHNwZWNpZnkgb25lIG9mIHRoaXMgcGFyYW1ldGVyIGFuZCB0aGUgKipKb2JJZCoqIHBhcmFtZXRlci5cbiAgICAgKi9cbiAgICBwdWJsaWMgc291cmNlRW5kcG9pbnRFbmdpbmVOYW1lOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGUgfCB1bmRlZmluZWQ7XG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgc291cmNlUmVnaW9uOiBUaGUgSUQgb2YgdGhlIHJlZ2lvbiBpbiB3aGljaCB0aGUgc291cmNlIGluc3RhbmNlIHJlc2lkZXMuXG4gICAgICogKipOb3RlKio6IFlvdSBtdXN0IHNwZWNpZnkgb25lIG9mIHRoaXMgcGFyYW1ldGVyIGFuZCB0aGUgKipKb2JJZCoqIHBhcmFtZXRlci5cbiAgICAgKi9cbiAgICBwdWJsaWMgc291cmNlUmVnaW9uOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGUgfCB1bmRlZmluZWQ7XG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgc3luY0FyY2hpdGVjdHVyZTogVGhlIHN5bmNocm9uaXphdGlvbiB0b3BvbG9neS4gVmFsaWQgdmFsdWVzOlxuICAgICAqIC0gKipvbmV3YXkqKjogb25lLXdheSBzeW5jaHJvbml6YXRpb24uIFRoaXMgaXMgdGhlIGRlZmF1bHQgdmFsdWUuXG4gICAgICogLSAqKmJpZGlyZWN0aW9uYWwqKjogdHdvLXdheSBzeW5jaHJvbml6YXRpb24uXG4gICAgICovXG4gICAgcHVibGljIHN5bmNBcmNoaXRlY3R1cmU6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZSB8IHVuZGVmaW5lZDtcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSB1c2VkVGltZTogVGhlIHN1YnNjcmlwdGlvbiBkdXJhdGlvbi5cbiAgICAgKiAtIFZhbGlkIHZhbHVlcyBpZiB0aGUgKipQZXJpb2QqKiBwYXJhbWV0ZXIgaXMgc2V0IHRvICoqTW9udGgqKjogMSwgMiwgMywgNCwgNSwgNiwgNywgOCwgYW5kIDkuXG4gICAgICogLSBWYWxpZCB2YWx1ZXMgaWYgdGhlICoqUGVyaW9kKiogcGFyYW1ldGVyIGlzIHNldCB0byAqKlllYXIqKjogMSwgMiwgMywgYW5kIDUuXG4gICAgICogKipOb3RlKio6IFlvdSBtdXN0IHNwZWNpZnkgdGhpcyBwYXJhbWV0ZXIgb25seSBpZiB0aGUgKipQYXlUeXBlKiogcGFyYW1ldGVyIGlzIHNldCB0byAqKlByZVBhaWQqKi4gWW91IGNhbiBzZXQgdGhlICoqUGVyaW9kKiogcGFyYW1ldGVyIHRvIHNwZWNpZnkgdGhlIHVuaXQgb2YgdGhlIHN1YnNjcmlwdGlvbiBkdXJhdGlvbi5cbiAgICAgKi9cbiAgICBwdWJsaWMgdXNlZFRpbWU6IG51bWJlciB8IHJvcy5JUmVzb2x2YWJsZSB8IHVuZGVmaW5lZDtcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSBzY29wZSAtIHNjb3BlIGluIHdoaWNoIHRoaXMgcmVzb3VyY2UgaXMgZGVmaW5lZFxuICAgICAqIEBwYXJhbSBpZCAgICAtIHNjb3BlZCBpZCBvZiB0aGUgcmVzb3VyY2VcbiAgICAgKiBAcGFyYW0gcHJvcHMgLSByZXNvdXJjZSBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IHJvcy5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBSb3NJbnN0YW5jZVByb3BzLCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDogYm9vbGVhbikge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQsIHsgdHlwZTogUm9zSW5zdGFuY2UuUk9TX1JFU09VUkNFX1RZUEVfTkFNRSwgcHJvcGVydGllczogcHJvcHMgfSk7XG4gICAgICAgIHRoaXMuYXR0ckluc3RhbmNlSWQgPSB0aGlzLmdldEF0dCgnSW5zdGFuY2VJZCcpO1xuICAgICAgICB0aGlzLmF0dHJKb2JJZCA9IHRoaXMuZ2V0QXR0KCdKb2JJZCcpO1xuXG4gICAgICAgIHRoaXMuZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgPSBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDtcbiAgICAgICAgdGhpcy5pbnN0YW5jZUNsYXNzID0gcHJvcHMuaW5zdGFuY2VDbGFzcztcbiAgICAgICAgdGhpcy5wYXlUeXBlID0gcHJvcHMucGF5VHlwZTtcbiAgICAgICAgdGhpcy50eXBlID0gcHJvcHMudHlwZTtcbiAgICAgICAgdGhpcy5hdXRvUGF5ID0gcHJvcHMuYXV0b1BheTtcbiAgICAgICAgdGhpcy5hdXRvU3RhcnQgPSBwcm9wcy5hdXRvU3RhcnQ7XG4gICAgICAgIHRoaXMuY29tcHV0ZVVuaXQgPSBwcm9wcy5jb21wdXRlVW5pdDtcbiAgICAgICAgdGhpcy5kYXRhYmFzZUNvdW50ID0gcHJvcHMuZGF0YWJhc2VDb3VudDtcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbkVuZHBvaW50RW5naW5lTmFtZSA9IHByb3BzLmRlc3RpbmF0aW9uRW5kcG9pbnRFbmdpbmVOYW1lO1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uUmVnaW9uID0gcHJvcHMuZGVzdGluYXRpb25SZWdpb247XG4gICAgICAgIHRoaXMuZHUgPSBwcm9wcy5kdTtcbiAgICAgICAgdGhpcy5mZWVUeXBlID0gcHJvcHMuZmVlVHlwZTtcbiAgICAgICAgdGhpcy5qb2JJZCA9IHByb3BzLmpvYklkO1xuICAgICAgICB0aGlzLnBlcmlvZCA9IHByb3BzLnBlcmlvZDtcbiAgICAgICAgdGhpcy5yZXNvdXJjZUdyb3VwSWQgPSBwcm9wcy5yZXNvdXJjZUdyb3VwSWQ7XG4gICAgICAgIHRoaXMuc291cmNlRW5kcG9pbnRFbmdpbmVOYW1lID0gcHJvcHMuc291cmNlRW5kcG9pbnRFbmdpbmVOYW1lO1xuICAgICAgICB0aGlzLnNvdXJjZVJlZ2lvbiA9IHByb3BzLnNvdXJjZVJlZ2lvbjtcbiAgICAgICAgdGhpcy5zeW5jQXJjaGl0ZWN0dXJlID0gcHJvcHMuc3luY0FyY2hpdGVjdHVyZTtcbiAgICAgICAgdGhpcy51c2VkVGltZSA9IHByb3BzLnVzZWRUaW1lO1xuICAgIH1cblxuXG4gICAgcHJvdGVjdGVkIGdldCByb3NQcm9wZXJ0aWVzKCk6IHsgW2tleTogc3RyaW5nXTogYW55IH0gIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGluc3RhbmNlQ2xhc3M6IHRoaXMuaW5zdGFuY2VDbGFzcyxcbiAgICAgICAgICAgIHBheVR5cGU6IHRoaXMucGF5VHlwZSxcbiAgICAgICAgICAgIHR5cGU6IHRoaXMudHlwZSxcbiAgICAgICAgICAgIGF1dG9QYXk6IHRoaXMuYXV0b1BheSxcbiAgICAgICAgICAgIGF1dG9TdGFydDogdGhpcy5hdXRvU3RhcnQsXG4gICAgICAgICAgICBjb21wdXRlVW5pdDogdGhpcy5jb21wdXRlVW5pdCxcbiAgICAgICAgICAgIGRhdGFiYXNlQ291bnQ6IHRoaXMuZGF0YWJhc2VDb3VudCxcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uRW5kcG9pbnRFbmdpbmVOYW1lOiB0aGlzLmRlc3RpbmF0aW9uRW5kcG9pbnRFbmdpbmVOYW1lLFxuICAgICAgICAgICAgZGVzdGluYXRpb25SZWdpb246IHRoaXMuZGVzdGluYXRpb25SZWdpb24sXG4gICAgICAgICAgICBkdTogdGhpcy5kdSxcbiAgICAgICAgICAgIGZlZVR5cGU6IHRoaXMuZmVlVHlwZSxcbiAgICAgICAgICAgIGpvYklkOiB0aGlzLmpvYklkLFxuICAgICAgICAgICAgcGVyaW9kOiB0aGlzLnBlcmlvZCxcbiAgICAgICAgICAgIHJlc291cmNlR3JvdXBJZDogdGhpcy5yZXNvdXJjZUdyb3VwSWQsXG4gICAgICAgICAgICBzb3VyY2VFbmRwb2ludEVuZ2luZU5hbWU6IHRoaXMuc291cmNlRW5kcG9pbnRFbmdpbmVOYW1lLFxuICAgICAgICAgICAgc291cmNlUmVnaW9uOiB0aGlzLnNvdXJjZVJlZ2lvbixcbiAgICAgICAgICAgIHN5bmNBcmNoaXRlY3R1cmU6IHRoaXMuc3luY0FyY2hpdGVjdHVyZSxcbiAgICAgICAgICAgIHVzZWRUaW1lOiB0aGlzLnVzZWRUaW1lLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBwcm90ZWN0ZWQgcmVuZGVyUHJvcGVydGllcyhwcm9wczoge1trZXk6IHN0cmluZ106IGFueX0pOiB7IFtrZXk6IHN0cmluZ106IGFueSB9ICB7XG4gICAgICAgIHJldHVybiByb3NJbnN0YW5jZVByb3BzVG9Sb3NUZW1wbGF0ZShwcm9wcywgdGhpcy5lbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCk7XG4gICAgfVxufVxuXG4vKipcbiAqIFByb3BlcnRpZXMgZm9yIGRlZmluaW5nIGEgYFJvc01pZ3JhdGlvbkpvYjJgLlxuICogU2VlIGh0dHBzOi8vd3d3LmFsaWJhYmFjbG91ZC5jb20vaGVscC9yb3MvZGV2ZWxvcGVyLXJlZmVyZW5jZS9hbGl5dW4tZHRzLW1pZ3JhdGlvbmpvYjJcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBSb3NNaWdyYXRpb25Kb2IyUHJvcHMge1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IGRhdGFJbml0aWFsaXphdGlvbjogU3BlY2lmaWVzIHdoZXRoZXIgdG8gcGVyZm9ybSBmdWxsIGRhdGEgbWlncmF0aW9uIG9yIGZ1bGwgZGF0YSBzeW5jaHJvbml6YXRpb24uIERlZmF1bHQgdmFsdWU6ICoqdHJ1ZSoqLiBWYWxpZCB2YWx1ZXM6ICoqdHJ1ZSoqIGFuZCAqKmZhbHNlKiouXG4gICAgICovXG4gICAgcmVhZG9ubHkgZGF0YUluaXRpYWxpemF0aW9uOiBib29sZWFuIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IGRhdGFTeW5jaHJvbml6YXRpb246IFNwZWNpZmllcyB3aGV0aGVyIHRvIHBlcmZvcm0gaW5jcmVtZW50YWwgZGF0YSBtaWdyYXRpb24gb3IgaW5jcmVtZW50YWwgZGF0YSBzeW5jaHJvbml6YXRpb24uIERlZmF1bHQgdmFsdWU6ICoqZmFsc2UqKi4gVmFsaWQgdmFsdWVzOiAqKnRydWUqKiBhbmQgKipmYWxzZSoqLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGRhdGFTeW5jaHJvbml6YXRpb246IGJvb2xlYW4gfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgZGJMaXN0OiBUaGUgb2JqZWN0cyB0aGF0IHlvdSB3YW50IHRvIG1pZ3JhdGUgb3Igc3luY2hyb25pemUuXG4gICAgICovXG4gICAgcmVhZG9ubHkgZGJMaXN0OiB7IFtrZXk6IHN0cmluZ106IChhbnkgfCByb3MuSVJlc29sdmFibGUpIH0gfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgZGVzdGluYXRpb25FbmRwb2ludDogRGVzdGluYXRpb24gaW5zdGFuY2UgY29uZmlndXJhdGlvbi5cbiAgICAgKi9cbiAgICByZWFkb25seSBkZXN0aW5hdGlvbkVuZHBvaW50OiBSb3NNaWdyYXRpb25Kb2IyLkRlc3RpbmF0aW9uRW5kcG9pbnRQcm9wZXJ0eSB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBkdHNKb2JOYW1lOiBUaGUgbmFtZSBvZiB0aGUgRFRTIGluc3RhbmNlLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGR0c0pvYk5hbWU6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBzb3VyY2VFbmRwb2ludDogU291cmNlIGluc3RhbmNlIGNvbmZpZ3VyYXRpb24uXG4gICAgICovXG4gICAgcmVhZG9ubHkgc291cmNlRW5kcG9pbnQ6IFJvc01pZ3JhdGlvbkpvYjIuU291cmNlRW5kcG9pbnRQcm9wZXJ0eSB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBzdHJ1Y3R1cmVJbml0aWFsaXphdGlvbjogU3BlY2lmaWVzIHdoZXRoZXIgdG8gcGVyZm9ybSBzY2hlbWEgbWlncmF0aW9uIG9yIHNjaGVtYSBzeW5jaHJvbml6YXRpb24uIERlZmF1bHQgdmFsdWU6IHRydWUuIFZhbGlkIHZhbHVlczogKip0cnVlKiogYW5kICoqZmFsc2UqKi5cbiAgICAgKi9cbiAgICByZWFkb25seSBzdHJ1Y3R1cmVJbml0aWFsaXphdGlvbjogYm9vbGVhbiB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBjaGVja3BvaW50OiBUaGUgc3RhcnQgb2Zmc2V0IG9mIGluY3JlbWVudGFsIGRhdGEgbWlncmF0aW9uIG9yIHN5bmNocm9uaXphdGlvbi4gVGhpcyB2YWx1ZSBpcyBhIFVOSVggdGltZXN0YW1wIHJlcHJlc2VudGluZyB0aGUgbnVtYmVyIG9mIHNlY29uZHMgdGhhdCBoYXZlIGVsYXBzZWQgc2luY2UgSmFudWFyeSAxLCAxOTcwLCAwMDowMDowMCBVVEMuXG4gICAgICovXG4gICAgcmVhZG9ubHkgY2hlY2twb2ludD86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBkYXRhQ2hlY2tDb25maWd1cmU6IFRoZSBkYXRhIHZlcmlmaWNhdGlvbiB0YXNrIGZvciBhIGRhdGEgbWlncmF0aW9uIG9yIHN5bmNocm9uaXphdGlvbiBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICByZWFkb25seSBkYXRhQ2hlY2tDb25maWd1cmU/OiBSb3NNaWdyYXRpb25Kb2IyLkRhdGFDaGVja0NvbmZpZ3VyZVByb3BlcnR5IHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IGRlZGljYXRlZENsdXN0ZXJJZDogVGhlIElEIG9mIHRoZSBEVFMgZGVkaWNhdGVkIGNsdXN0ZXIgb24gd2hpY2ggdGhlIHRhc2sgcnVucy5cbiAgICAgKi9cbiAgICByZWFkb25seSBkZWRpY2F0ZWRDbHVzdGVySWQ/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgZGVsYXlOb3RpY2U6IFNwZWNpZmllcyB3aGV0aGVyIHRvIG1vbml0b3IgdGhlIHRhc2sgbGF0ZW5jeS4gVmFsaWQgdmFsdWVzOiAqKnRydWUqKiBhbmQgKipmYWxzZSoqXG4gICAgICovXG4gICAgcmVhZG9ubHkgZGVsYXlOb3RpY2U/OiBib29sZWFuIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IGRlbGF5UGhvbmU6IFRoZSBtb2JpbGUgbnVtYmVycyB0aGF0IHJlY2VpdmUgbGF0ZW5jeS1yZWxhdGVkIGFsZXJ0cy4gU2VwYXJhdGUgbXVsdGlwbGUgbW9iaWxlIG51bWJlcnMgd2l0aCBjb21tYXMgKCwpLlxuICAgICAqICoqTm90ZSoqOiBUaGlzIHBhcmFtZXRlciBpcyBhdmFpbGFibGUgb25seSBmb3IgdXNlcnMgb2YgdGhlIENoaW5hIHNpdGUgKGFsaXl1bi5jb20pLiBPbmx5IG1vYmlsZSBudW1iZXJzIGluIHRoZSBDaGluZXNlIG1haW5sYW5kIGFyZSBzdXBwb3J0ZWQuIFlvdSBjYW4gc3BlY2lmeSB1cCB0byAxMCBtb2JpbGUgbnVtYmVycy4gVXNlcnMgb2YgdGhlIGludGVybmF0aW9uYWwgc2l0ZSAoYWxpYmFiYWNsb3VkLmNvbSkgY2Fubm90IHJlY2VpdmUgYWxlcnRzIGJ5IHVzaW5nIG1vYmlsZSBudW1iZXJzLCBidXQgY2FuIGNvbmZpZ3VyZSBhbGVydCBydWxlcyBmb3IgRFRTIHRhc2tzIGluIHRoZSBDbG91ZE1vbml0b3IgY29uc29sZS5cbiAgICAgKi9cbiAgICByZWFkb25seSBkZWxheVBob25lPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IGRlbGF5UnVsZVRpbWU6IFRoZSB0aHJlc2hvbGQgZm9yIGxhdGVuY3kgYWxlcnRzLiBVbml0OiBzZWNvbmRzLiBZb3UgY2FuIHNldCB0aGUgdGhyZXNob2xkIGJhc2VkIG9uIHlvdXIgYnVzaW5lc3MgcmVxdWlyZW1lbnRzLiBUbyBwcmV2ZW50IGppdHRlcnMgY2F1c2VkIGJ5IG5ldHdvcmsgYW5kIGRhdGFiYXNlIG92ZXJsb2Fkcywgd2UgcmVjb21tZW5kIHRoYXQgeW91IHNldCB0aGUgdGhyZXNob2xkIHRvIG1vcmUgdGhhbiAxMCBzZWNvbmRzLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGRlbGF5UnVsZVRpbWU/OiBudW1iZXIgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgZGlzYXN0ZXJSZWNvdmVyeUpvYjogU3BlY2lmaWVzIHdoZXRoZXIgdGhlIGluc3RhbmNlIGlzIGEgZGlzYXN0ZXIgcmVjb3ZlcnkgaW5zdGFuY2UuIFZhbGlkIHZhbHVlczogKip0cnVlKiogYW5kICoqZmFsc2UqKlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGRpc2FzdGVyUmVjb3ZlcnlKb2I/OiBib29sZWFuIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IGR0c0Jpc0xhYmVsOiBUaGUgZW52aXJvbm1lbnQgdGFnIG9mIHRoZSBEVFMgaW5zdGFuY2UuIFZhbGlkIHZhbHVlczogKipub3JtYWwqKiBhbmQgKipvbmxpbmUqKi5cbiAgICAgKi9cbiAgICByZWFkb25seSBkdHNCaXNMYWJlbD86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBkdHNJbnN0YW5jZUlkOiBUaGUgSUQgb2YgdGhlIERUUyBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICByZWFkb25seSBkdHNJbnN0YW5jZUlkPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IGR0c0pvYklkOiBUaGUgSUQgb2YgdGhlIERUUyB0YXNrLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGR0c0pvYklkPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IGVycm9yTm90aWNlOiBTcGVjaWZpZXMgd2hldGhlciB0byBtb25pdG9yIHRoZSB0YXNrIHN0YXR1cy4gVmFsaWQgdmFsdWVzOiAqKnRydWUqKiBhbmQgKipmYWxzZSoqLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGVycm9yTm90aWNlPzogYm9vbGVhbiB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBlcnJvclBob25lOiBUaGUgbW9iaWxlIG51bWJlcnMgdGhhdCByZWNlaXZlIHN0YXR1cy1yZWxhdGVkIGFsZXJ0cy4gU2VwYXJhdGUgbXVsdGlwbGUgbW9iaWxlIG51bWJlcnMgd2l0aCBjb21tYXMgKCwpLlxuICAgICAqICoqTm90ZSoqOiBUaGlzIHBhcmFtZXRlciBpcyBhdmFpbGFibGUgb25seSBmb3IgdXNlcnMgb2YgdGhlIENoaW5hIHNpdGUgKGFsaXl1bi5jb20pLiBPbmx5IG1vYmlsZSBudW1iZXJzIGluIHRoZSBDaGluZXNlIG1haW5sYW5kIGFyZSBzdXBwb3J0ZWQuIFlvdSBjYW4gc3BlY2lmeSB1cCB0byAxMCBtb2JpbGUgbnVtYmVycy4gVXNlcnMgb2YgdGhlIGludGVybmF0aW9uYWwgc2l0ZSAoYWxpYmFiYWNsb3VkLmNvbSkgY2Fubm90IHJlY2VpdmUgYWxlcnRzIGJ5IHVzaW5nIG1vYmlsZSBudW1iZXJzLCBidXQgY2FuIGNvbmZpZ3VyZSBhbGVydCBydWxlcyBmb3IgRFRTIHRhc2tzIGluIHRoZSBDbG91ZE1vbml0b3IgY29uc29sZS5cbiAgICAgKi9cbiAgICByZWFkb25seSBlcnJvclBob25lPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IGZpbGVPc3NVcmw6IFRoZSBVUkwgb2YgdGhlIE9iamVjdCBTdG9yYWdlIFNlcnZpY2UgKE9TUykgYnVja2V0IHRoYXQgc3RvcmVzIHRoZSBmaWxlcyByZWxhdGVkIHRvIHRoZSBEVFMgdGFzay5cbiAgICAgKi9cbiAgICByZWFkb25seSBmaWxlT3NzVXJsPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IHJlc2VydmU6IFRoZSByZXNlcnZlZCBwYXJhbWV0ZXIgb2YgRFRTLiBZb3UgY2FuIHNwZWNpZnkgdGhpcyBwYXJhbWV0ZXIgdG8gYWRkIG1vcmUgY29uZmlndXJhdGlvbnMgb2YgdGhlIHNvdXJjZSBvciBkZXN0aW5hdGlvbiBpbnN0YW5jZSB0byB0aGUgRFRTIHRhc2suIEZvciBleGFtcGxlLCB5b3UgY2FuIHNwZWNpZnkgdGhlIGRhdGEgc3RvcmFnZSBmb3JtYXQgb2YgdGhlIGRlc3RpbmF0aW9uIEthZmthIGRhdGFiYXNlIGFuZCB0aGUgSUQgb2YgdGhlIENFTiBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICByZWFkb25seSByZXNlcnZlPzogeyBba2V5OiBzdHJpbmddOiAoYW55IHwgcm9zLklSZXNvbHZhYmxlKSB9IHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IHN0YXR1czogVGhlIHN0YXR1cyBvZiB0aGUgcmVzb3VyY2UuIFZhbGlkIHZhbHVlczpcbiAgICAgKiAtICoqTWlncmF0aW5nKio6IFN0YXJ0IHRoZSB0YXNrLlxuICAgICAqIC0gKipTdXNwZW5kaW5nKio6IFN1c3BlbmQgdGhlIHRhc2suXG4gICAgICogLSAqKlN0b3BwaW5nKio6IFN0b3AgdGhlIHRhc2suXG4gICAgICovXG4gICAgcmVhZG9ubHkgc3RhdHVzPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xufVxuXG4vKipcbiAqIERldGVybWluZSB3aGV0aGVyIHRoZSBnaXZlbiBwcm9wZXJ0aWVzIG1hdGNoIHRob3NlIG9mIGEgYFJvc01pZ3JhdGlvbkpvYjJQcm9wc2BcbiAqXG4gKiBAcGFyYW0gcHJvcGVydGllcyAtIHRoZSBUeXBlU2NyaXB0IHByb3BlcnRpZXMgb2YgYSBgUm9zTWlncmF0aW9uSm9iMlByb3BzYFxuICpcbiAqIEByZXR1cm5zIHRoZSByZXN1bHQgb2YgdGhlIHZhbGlkYXRpb24uXG4gKi9cbmZ1bmN0aW9uIFJvc01pZ3JhdGlvbkpvYjJQcm9wc1ZhbGlkYXRvcihwcm9wZXJ0aWVzOiBhbnkpOiByb3MuVmFsaWRhdGlvblJlc3VsdCB7XG4gICAgaWYgKCFyb3MuY2FuSW5zcGVjdChwcm9wZXJ0aWVzKSkgeyByZXR1cm4gcm9zLlZBTElEQVRJT05fU1VDQ0VTUzsgfVxuICAgIGNvbnN0IGVycm9ycyA9IG5ldyByb3MuVmFsaWRhdGlvblJlc3VsdHMoKTtcbiAgICBpZihwcm9wZXJ0aWVzLnN0YXR1cyAmJiAodHlwZW9mIHByb3BlcnRpZXMuc3RhdHVzKSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgZXJyb3JzLmNvbGxlY3Qocm9zLnByb3BlcnR5VmFsaWRhdG9yKCdzdGF0dXMnLCByb3MudmFsaWRhdGVBbGxvd2VkVmFsdWVzKSh7XG4gICAgICAgICAgZGF0YTogcHJvcGVydGllcy5zdGF0dXMsXG4gICAgICAgICAgYWxsb3dlZFZhbHVlczogW1wiTWlncmF0aW5nXCIsXCJTdXNwZW5kaW5nXCIsXCJTdG9wcGluZ1wiXSxcbiAgICAgICAgfSkpO1xuICAgIH1cbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ3N0YXR1cycsIHJvcy52YWxpZGF0ZVN0cmluZykocHJvcGVydGllcy5zdGF0dXMpKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ3Jlc2VydmUnLCByb3MuaGFzaFZhbGlkYXRvcihyb3MudmFsaWRhdGVBbnkpKShwcm9wZXJ0aWVzLnJlc2VydmUpKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ2RhdGFTeW5jaHJvbml6YXRpb24nLCByb3MucmVxdWlyZWRWYWxpZGF0b3IpKHByb3BlcnRpZXMuZGF0YVN5bmNocm9uaXphdGlvbikpO1xuICAgIGVycm9ycy5jb2xsZWN0KHJvcy5wcm9wZXJ0eVZhbGlkYXRvcignZGF0YVN5bmNocm9uaXphdGlvbicsIHJvcy52YWxpZGF0ZUJvb2xlYW4pKHByb3BlcnRpZXMuZGF0YVN5bmNocm9uaXphdGlvbikpO1xuICAgIGVycm9ycy5jb2xsZWN0KHJvcy5wcm9wZXJ0eVZhbGlkYXRvcignZGVkaWNhdGVkQ2x1c3RlcklkJywgcm9zLnZhbGlkYXRlU3RyaW5nKShwcm9wZXJ0aWVzLmRlZGljYXRlZENsdXN0ZXJJZCkpO1xuICAgIGVycm9ycy5jb2xsZWN0KHJvcy5wcm9wZXJ0eVZhbGlkYXRvcignZGVsYXlQaG9uZScsIHJvcy52YWxpZGF0ZVN0cmluZykocHJvcGVydGllcy5kZWxheVBob25lKSk7XG4gICAgZXJyb3JzLmNvbGxlY3Qocm9zLnByb3BlcnR5VmFsaWRhdG9yKCdlcnJvck5vdGljZScsIHJvcy52YWxpZGF0ZUJvb2xlYW4pKHByb3BlcnRpZXMuZXJyb3JOb3RpY2UpKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ2R0c0pvYk5hbWUnLCByb3MucmVxdWlyZWRWYWxpZGF0b3IpKHByb3BlcnRpZXMuZHRzSm9iTmFtZSkpO1xuICAgIGVycm9ycy5jb2xsZWN0KHJvcy5wcm9wZXJ0eVZhbGlkYXRvcignZHRzSm9iTmFtZScsIHJvcy52YWxpZGF0ZVN0cmluZykocHJvcGVydGllcy5kdHNKb2JOYW1lKSk7XG4gICAgZXJyb3JzLmNvbGxlY3Qocm9zLnByb3BlcnR5VmFsaWRhdG9yKCdkZWxheVJ1bGVUaW1lJywgcm9zLnZhbGlkYXRlTnVtYmVyKShwcm9wZXJ0aWVzLmRlbGF5UnVsZVRpbWUpKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ2R0c0luc3RhbmNlSWQnLCByb3MudmFsaWRhdGVTdHJpbmcpKHByb3BlcnRpZXMuZHRzSW5zdGFuY2VJZCkpO1xuICAgIGVycm9ycy5jb2xsZWN0KHJvcy5wcm9wZXJ0eVZhbGlkYXRvcignZGJMaXN0Jywgcm9zLnJlcXVpcmVkVmFsaWRhdG9yKShwcm9wZXJ0aWVzLmRiTGlzdCkpO1xuICAgIGVycm9ycy5jb2xsZWN0KHJvcy5wcm9wZXJ0eVZhbGlkYXRvcignZGJMaXN0Jywgcm9zLmhhc2hWYWxpZGF0b3Iocm9zLnZhbGlkYXRlQW55KSkocHJvcGVydGllcy5kYkxpc3QpKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ2ZpbGVPc3NVcmwnLCByb3MudmFsaWRhdGVTdHJpbmcpKHByb3BlcnRpZXMuZmlsZU9zc1VybCkpO1xuICAgIGVycm9ycy5jb2xsZWN0KHJvcy5wcm9wZXJ0eVZhbGlkYXRvcignZGF0YUNoZWNrQ29uZmlndXJlJywgUm9zTWlncmF0aW9uSm9iMl9EYXRhQ2hlY2tDb25maWd1cmVQcm9wZXJ0eVZhbGlkYXRvcikocHJvcGVydGllcy5kYXRhQ2hlY2tDb25maWd1cmUpKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ2R0c0Jpc0xhYmVsJywgcm9zLnZhbGlkYXRlU3RyaW5nKShwcm9wZXJ0aWVzLmR0c0Jpc0xhYmVsKSk7XG4gICAgZXJyb3JzLmNvbGxlY3Qocm9zLnByb3BlcnR5VmFsaWRhdG9yKCdjaGVja3BvaW50Jywgcm9zLnZhbGlkYXRlU3RyaW5nKShwcm9wZXJ0aWVzLmNoZWNrcG9pbnQpKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ2Rpc2FzdGVyUmVjb3ZlcnlKb2InLCByb3MudmFsaWRhdGVCb29sZWFuKShwcm9wZXJ0aWVzLmRpc2FzdGVyUmVjb3ZlcnlKb2IpKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ2R0c0pvYklkJywgcm9zLnZhbGlkYXRlU3RyaW5nKShwcm9wZXJ0aWVzLmR0c0pvYklkKSk7XG4gICAgZXJyb3JzLmNvbGxlY3Qocm9zLnByb3BlcnR5VmFsaWRhdG9yKCdkZWxheU5vdGljZScsIHJvcy52YWxpZGF0ZUJvb2xlYW4pKHByb3BlcnRpZXMuZGVsYXlOb3RpY2UpKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ2RhdGFJbml0aWFsaXphdGlvbicsIHJvcy5yZXF1aXJlZFZhbGlkYXRvcikocHJvcGVydGllcy5kYXRhSW5pdGlhbGl6YXRpb24pKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ2RhdGFJbml0aWFsaXphdGlvbicsIHJvcy52YWxpZGF0ZUJvb2xlYW4pKHByb3BlcnRpZXMuZGF0YUluaXRpYWxpemF0aW9uKSk7XG4gICAgZXJyb3JzLmNvbGxlY3Qocm9zLnByb3BlcnR5VmFsaWRhdG9yKCdkZXN0aW5hdGlvbkVuZHBvaW50Jywgcm9zLnJlcXVpcmVkVmFsaWRhdG9yKShwcm9wZXJ0aWVzLmRlc3RpbmF0aW9uRW5kcG9pbnQpKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ2Rlc3RpbmF0aW9uRW5kcG9pbnQnLCBSb3NNaWdyYXRpb25Kb2IyX0Rlc3RpbmF0aW9uRW5kcG9pbnRQcm9wZXJ0eVZhbGlkYXRvcikocHJvcGVydGllcy5kZXN0aW5hdGlvbkVuZHBvaW50KSk7XG4gICAgZXJyb3JzLmNvbGxlY3Qocm9zLnByb3BlcnR5VmFsaWRhdG9yKCdzb3VyY2VFbmRwb2ludCcsIHJvcy5yZXF1aXJlZFZhbGlkYXRvcikocHJvcGVydGllcy5zb3VyY2VFbmRwb2ludCkpO1xuICAgIGVycm9ycy5jb2xsZWN0KHJvcy5wcm9wZXJ0eVZhbGlkYXRvcignc291cmNlRW5kcG9pbnQnLCBSb3NNaWdyYXRpb25Kb2IyX1NvdXJjZUVuZHBvaW50UHJvcGVydHlWYWxpZGF0b3IpKHByb3BlcnRpZXMuc291cmNlRW5kcG9pbnQpKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ2Vycm9yUGhvbmUnLCByb3MudmFsaWRhdGVTdHJpbmcpKHByb3BlcnRpZXMuZXJyb3JQaG9uZSkpO1xuICAgIGVycm9ycy5jb2xsZWN0KHJvcy5wcm9wZXJ0eVZhbGlkYXRvcignc3RydWN0dXJlSW5pdGlhbGl6YXRpb24nLCByb3MucmVxdWlyZWRWYWxpZGF0b3IpKHByb3BlcnRpZXMuc3RydWN0dXJlSW5pdGlhbGl6YXRpb24pKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ3N0cnVjdHVyZUluaXRpYWxpemF0aW9uJywgcm9zLnZhbGlkYXRlQm9vbGVhbikocHJvcGVydGllcy5zdHJ1Y3R1cmVJbml0aWFsaXphdGlvbikpO1xuICAgIHJldHVybiBlcnJvcnMud3JhcCgnc3VwcGxpZWQgcHJvcGVydGllcyBub3QgY29ycmVjdCBmb3IgXCJSb3NNaWdyYXRpb25Kb2IyUHJvcHNcIicpO1xufVxuXG4vKipcbiAqIFJlbmRlcnMgdGhlIEFsaUNsb3VkIFJPUyBSZXNvdXJjZSBwcm9wZXJ0aWVzIG9mIGFuIGBBTElZVU46OkRUUzo6TWlncmF0aW9uSm9iMmAgcmVzb3VyY2VcbiAqXG4gKiBAcGFyYW0gcHJvcGVydGllcyAtIHRoZSBUeXBlU2NyaXB0IHByb3BlcnRpZXMgb2YgYSBgUm9zTWlncmF0aW9uSm9iMlByb3BzYFxuICpcbiAqIEByZXR1cm5zIHRoZSBBbGlDbG91ZCBST1MgUmVzb3VyY2UgcHJvcGVydGllcyBvZiBhbiBgQUxJWVVOOjpEVFM6Ok1pZ3JhdGlvbkpvYjJgIHJlc291cmNlLlxuICovXG4vLyBAdHMtaWdub3JlIFRTNjEzM1xuZnVuY3Rpb24gcm9zTWlncmF0aW9uSm9iMlByb3BzVG9Sb3NUZW1wbGF0ZShwcm9wZXJ0aWVzOiBhbnksIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OiBib29sZWFuKTogYW55IHtcbiAgICBpZiAoIXJvcy5jYW5JbnNwZWN0KHByb3BlcnRpZXMpKSB7IHJldHVybiBwcm9wZXJ0aWVzOyB9XG4gICAgaWYoZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQpIHtcbiAgICAgICAgUm9zTWlncmF0aW9uSm9iMlByb3BzVmFsaWRhdG9yKHByb3BlcnRpZXMpLmFzc2VydFN1Y2Nlc3MoKTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICdEYXRhSW5pdGlhbGl6YXRpb24nOiByb3MuYm9vbGVhblRvUm9zVGVtcGxhdGUocHJvcGVydGllcy5kYXRhSW5pdGlhbGl6YXRpb24pLFxuICAgICAgJ0RhdGFTeW5jaHJvbml6YXRpb24nOiByb3MuYm9vbGVhblRvUm9zVGVtcGxhdGUocHJvcGVydGllcy5kYXRhU3luY2hyb25pemF0aW9uKSxcbiAgICAgICdEYkxpc3QnOiByb3MuaGFzaE1hcHBlcihyb3Mub2JqZWN0VG9Sb3NUZW1wbGF0ZSkocHJvcGVydGllcy5kYkxpc3QpLFxuICAgICAgJ0Rlc3RpbmF0aW9uRW5kcG9pbnQnOiByb3NNaWdyYXRpb25Kb2IyRGVzdGluYXRpb25FbmRwb2ludFByb3BlcnR5VG9Sb3NUZW1wbGF0ZShwcm9wZXJ0aWVzLmRlc3RpbmF0aW9uRW5kcG9pbnQpLFxuICAgICAgJ0R0c0pvYk5hbWUnOiByb3Muc3RyaW5nVG9Sb3NUZW1wbGF0ZShwcm9wZXJ0aWVzLmR0c0pvYk5hbWUpLFxuICAgICAgJ1NvdXJjZUVuZHBvaW50Jzogcm9zTWlncmF0aW9uSm9iMlNvdXJjZUVuZHBvaW50UHJvcGVydHlUb1Jvc1RlbXBsYXRlKHByb3BlcnRpZXMuc291cmNlRW5kcG9pbnQpLFxuICAgICAgJ1N0cnVjdHVyZUluaXRpYWxpemF0aW9uJzogcm9zLmJvb2xlYW5Ub1Jvc1RlbXBsYXRlKHByb3BlcnRpZXMuc3RydWN0dXJlSW5pdGlhbGl6YXRpb24pLFxuICAgICAgJ0NoZWNrcG9pbnQnOiByb3Muc3RyaW5nVG9Sb3NUZW1wbGF0ZShwcm9wZXJ0aWVzLmNoZWNrcG9pbnQpLFxuICAgICAgJ0RhdGFDaGVja0NvbmZpZ3VyZSc6IHJvc01pZ3JhdGlvbkpvYjJEYXRhQ2hlY2tDb25maWd1cmVQcm9wZXJ0eVRvUm9zVGVtcGxhdGUocHJvcGVydGllcy5kYXRhQ2hlY2tDb25maWd1cmUpLFxuICAgICAgJ0RlZGljYXRlZENsdXN0ZXJJZCc6IHJvcy5zdHJpbmdUb1Jvc1RlbXBsYXRlKHByb3BlcnRpZXMuZGVkaWNhdGVkQ2x1c3RlcklkKSxcbiAgICAgICdEZWxheU5vdGljZSc6IHJvcy5ib29sZWFuVG9Sb3NUZW1wbGF0ZShwcm9wZXJ0aWVzLmRlbGF5Tm90aWNlKSxcbiAgICAgICdEZWxheVBob25lJzogcm9zLnN0cmluZ1RvUm9zVGVtcGxhdGUocHJvcGVydGllcy5kZWxheVBob25lKSxcbiAgICAgICdEZWxheVJ1bGVUaW1lJzogcm9zLm51bWJlclRvUm9zVGVtcGxhdGUocHJvcGVydGllcy5kZWxheVJ1bGVUaW1lKSxcbiAgICAgICdEaXNhc3RlclJlY292ZXJ5Sm9iJzogcm9zLmJvb2xlYW5Ub1Jvc1RlbXBsYXRlKHByb3BlcnRpZXMuZGlzYXN0ZXJSZWNvdmVyeUpvYiksXG4gICAgICAnRHRzQmlzTGFiZWwnOiByb3Muc3RyaW5nVG9Sb3NUZW1wbGF0ZShwcm9wZXJ0aWVzLmR0c0Jpc0xhYmVsKSxcbiAgICAgICdEdHNJbnN0YW5jZUlkJzogcm9zLnN0cmluZ1RvUm9zVGVtcGxhdGUocHJvcGVydGllcy5kdHNJbnN0YW5jZUlkKSxcbiAgICAgICdEdHNKb2JJZCc6IHJvcy5zdHJpbmdUb1Jvc1RlbXBsYXRlKHByb3BlcnRpZXMuZHRzSm9iSWQpLFxuICAgICAgJ0Vycm9yTm90aWNlJzogcm9zLmJvb2xlYW5Ub1Jvc1RlbXBsYXRlKHByb3BlcnRpZXMuZXJyb3JOb3RpY2UpLFxuICAgICAgJ0Vycm9yUGhvbmUnOiByb3Muc3RyaW5nVG9Sb3NUZW1wbGF0ZShwcm9wZXJ0aWVzLmVycm9yUGhvbmUpLFxuICAgICAgJ0ZpbGVPc3NVcmwnOiByb3Muc3RyaW5nVG9Sb3NUZW1wbGF0ZShwcm9wZXJ0aWVzLmZpbGVPc3NVcmwpLFxuICAgICAgJ1Jlc2VydmUnOiByb3MuaGFzaE1hcHBlcihyb3Mub2JqZWN0VG9Sb3NUZW1wbGF0ZSkocHJvcGVydGllcy5yZXNlcnZlKSxcbiAgICAgICdTdGF0dXMnOiByb3Muc3RyaW5nVG9Sb3NUZW1wbGF0ZShwcm9wZXJ0aWVzLnN0YXR1cyksXG4gICAgfTtcbn1cblxuLyoqXG4gKiBUaGlzIGNsYXNzIGlzIGEgYmFzZSBlbmNhcHN1bGF0aW9uIGFyb3VuZCB0aGUgUk9TIHJlc291cmNlIHR5cGUgYEFMSVlVTjo6RFRTOjpNaWdyYXRpb25Kb2IyYCwgd2hpY2ggaXMgdXNlZCB0byBwdXJjaGFzZSBhIGRhdGEgbWlncmF0aW9uIGluc3RhbmNlIGFuZCBjb25maWd1cmUgYSBkYXRhIG1pZ3JhdGlvbiB0YXNrIG9mIHRoZSBuZXcgdmVyc2lvbi5cbiAqIEBOb3RlIFRoaXMgY2xhc3MgZG9lcyBub3QgY29udGFpbiBhZGRpdGlvbmFsIGZ1bmN0aW9ucywgc28gaXQgaXMgcmVjb21tZW5kZWQgdG8gdXNlIHRoZSBgTWlncmF0aW9uSm9iMmAgY2xhc3MgaW5zdGVhZCBvZiB0aGlzIGNsYXNzIGZvciBhIG1vcmUgY29udmVuaWVudCBkZXZlbG9wbWVudCBleHBlcmllbmNlLlxuICogU2VlIGh0dHBzOi8vd3d3LmFsaWJhYmFjbG91ZC5jb20vaGVscC9yb3MvZGV2ZWxvcGVyLXJlZmVyZW5jZS9hbGl5dW4tZHRzLW1pZ3JhdGlvbmpvYjJcbiAqL1xuZXhwb3J0IGNsYXNzIFJvc01pZ3JhdGlvbkpvYjIgZXh0ZW5kcyByb3MuUm9zUmVzb3VyY2Uge1xuICAgIC8qKlxuICAgICAqIFRoZSByZXNvdXJjZSB0eXBlIG5hbWUgZm9yIHRoaXMgcmVzb3VyY2UgY2xhc3MuXG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyByZWFkb25seSBST1NfUkVTT1VSQ0VfVFlQRV9OQU1FID0gXCJBTElZVU46OkRUUzo6TWlncmF0aW9uSm9iMlwiO1xuXG4gICAgLyoqXG4gICAgICogQEF0dHJpYnV0ZSBEdHNJbnN0YW5jZUlkOiBUaGUgSUQgb2YgdGhlIERUUyBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckR0c0luc3RhbmNlSWQ6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEBBdHRyaWJ1dGUgRHRzSm9iSWQ6IFRoZSBJRCBvZiB0aGUgdGFzay5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckR0c0pvYklkOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBAQXR0cmlidXRlIER0c0pvYk5hbWU6IFRoZSBuYW1lIG9mIHRoZSBEVFMgam9iLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyRHRzSm9iTmFtZTogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgcHVibGljIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OiBib29sZWFuO1xuXG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgZGF0YUluaXRpYWxpemF0aW9uOiBTcGVjaWZpZXMgd2hldGhlciB0byBwZXJmb3JtIGZ1bGwgZGF0YSBtaWdyYXRpb24gb3IgZnVsbCBkYXRhIHN5bmNocm9uaXphdGlvbi4gRGVmYXVsdCB2YWx1ZTogKip0cnVlKiouIFZhbGlkIHZhbHVlczogKip0cnVlKiogYW5kICoqZmFsc2UqKi5cbiAgICAgKi9cbiAgICBwdWJsaWMgZGF0YUluaXRpYWxpemF0aW9uOiBib29sZWFuIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IGRhdGFTeW5jaHJvbml6YXRpb246IFNwZWNpZmllcyB3aGV0aGVyIHRvIHBlcmZvcm0gaW5jcmVtZW50YWwgZGF0YSBtaWdyYXRpb24gb3IgaW5jcmVtZW50YWwgZGF0YSBzeW5jaHJvbml6YXRpb24uIERlZmF1bHQgdmFsdWU6ICoqZmFsc2UqKi4gVmFsaWQgdmFsdWVzOiAqKnRydWUqKiBhbmQgKipmYWxzZSoqLlxuICAgICAqL1xuICAgIHB1YmxpYyBkYXRhU3luY2hyb25pemF0aW9uOiBib29sZWFuIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IGRiTGlzdDogVGhlIG9iamVjdHMgdGhhdCB5b3Ugd2FudCB0byBtaWdyYXRlIG9yIHN5bmNocm9uaXplLlxuICAgICAqL1xuICAgIHB1YmxpYyBkYkxpc3Q6IHsgW2tleTogc3RyaW5nXTogKGFueSB8IHJvcy5JUmVzb2x2YWJsZSkgfSB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBkZXN0aW5hdGlvbkVuZHBvaW50OiBEZXN0aW5hdGlvbiBpbnN0YW5jZSBjb25maWd1cmF0aW9uLlxuICAgICAqL1xuICAgIHB1YmxpYyBkZXN0aW5hdGlvbkVuZHBvaW50OiBSb3NNaWdyYXRpb25Kb2IyLkRlc3RpbmF0aW9uRW5kcG9pbnRQcm9wZXJ0eSB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBkdHNKb2JOYW1lOiBUaGUgbmFtZSBvZiB0aGUgRFRTIGluc3RhbmNlLlxuICAgICAqL1xuICAgIHB1YmxpYyBkdHNKb2JOYW1lOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgc291cmNlRW5kcG9pbnQ6IFNvdXJjZSBpbnN0YW5jZSBjb25maWd1cmF0aW9uLlxuICAgICAqL1xuICAgIHB1YmxpYyBzb3VyY2VFbmRwb2ludDogUm9zTWlncmF0aW9uSm9iMi5Tb3VyY2VFbmRwb2ludFByb3BlcnR5IHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IHN0cnVjdHVyZUluaXRpYWxpemF0aW9uOiBTcGVjaWZpZXMgd2hldGhlciB0byBwZXJmb3JtIHNjaGVtYSBtaWdyYXRpb24gb3Igc2NoZW1hIHN5bmNocm9uaXphdGlvbi4gRGVmYXVsdCB2YWx1ZTogdHJ1ZS4gVmFsaWQgdmFsdWVzOiAqKnRydWUqKiBhbmQgKipmYWxzZSoqLlxuICAgICAqL1xuICAgIHB1YmxpYyBzdHJ1Y3R1cmVJbml0aWFsaXphdGlvbjogYm9vbGVhbiB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBjaGVja3BvaW50OiBUaGUgc3RhcnQgb2Zmc2V0IG9mIGluY3JlbWVudGFsIGRhdGEgbWlncmF0aW9uIG9yIHN5bmNocm9uaXphdGlvbi4gVGhpcyB2YWx1ZSBpcyBhIFVOSVggdGltZXN0YW1wIHJlcHJlc2VudGluZyB0aGUgbnVtYmVyIG9mIHNlY29uZHMgdGhhdCBoYXZlIGVsYXBzZWQgc2luY2UgSmFudWFyeSAxLCAxOTcwLCAwMDowMDowMCBVVEMuXG4gICAgICovXG4gICAgcHVibGljIGNoZWNrcG9pbnQ6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZSB8IHVuZGVmaW5lZDtcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBkYXRhQ2hlY2tDb25maWd1cmU6IFRoZSBkYXRhIHZlcmlmaWNhdGlvbiB0YXNrIGZvciBhIGRhdGEgbWlncmF0aW9uIG9yIHN5bmNocm9uaXphdGlvbiBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBwdWJsaWMgZGF0YUNoZWNrQ29uZmlndXJlOiBSb3NNaWdyYXRpb25Kb2IyLkRhdGFDaGVja0NvbmZpZ3VyZVByb3BlcnR5IHwgcm9zLklSZXNvbHZhYmxlIHwgdW5kZWZpbmVkO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IGRlZGljYXRlZENsdXN0ZXJJZDogVGhlIElEIG9mIHRoZSBEVFMgZGVkaWNhdGVkIGNsdXN0ZXIgb24gd2hpY2ggdGhlIHRhc2sgcnVucy5cbiAgICAgKi9cbiAgICBwdWJsaWMgZGVkaWNhdGVkQ2x1c3RlcklkOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGUgfCB1bmRlZmluZWQ7XG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgZGVsYXlOb3RpY2U6IFNwZWNpZmllcyB3aGV0aGVyIHRvIG1vbml0b3IgdGhlIHRhc2sgbGF0ZW5jeS4gVmFsaWQgdmFsdWVzOiAqKnRydWUqKiBhbmQgKipmYWxzZSoqXG4gICAgICovXG4gICAgcHVibGljIGRlbGF5Tm90aWNlOiBib29sZWFuIHwgcm9zLklSZXNvbHZhYmxlIHwgdW5kZWZpbmVkO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IGRlbGF5UGhvbmU6IFRoZSBtb2JpbGUgbnVtYmVycyB0aGF0IHJlY2VpdmUgbGF0ZW5jeS1yZWxhdGVkIGFsZXJ0cy4gU2VwYXJhdGUgbXVsdGlwbGUgbW9iaWxlIG51bWJlcnMgd2l0aCBjb21tYXMgKCwpLlxuICAgICAqICoqTm90ZSoqOiBUaGlzIHBhcmFtZXRlciBpcyBhdmFpbGFibGUgb25seSBmb3IgdXNlcnMgb2YgdGhlIENoaW5hIHNpdGUgKGFsaXl1bi5jb20pLiBPbmx5IG1vYmlsZSBudW1iZXJzIGluIHRoZSBDaGluZXNlIG1haW5sYW5kIGFyZSBzdXBwb3J0ZWQuIFlvdSBjYW4gc3BlY2lmeSB1cCB0byAxMCBtb2JpbGUgbnVtYmVycy4gVXNlcnMgb2YgdGhlIGludGVybmF0aW9uYWwgc2l0ZSAoYWxpYmFiYWNsb3VkLmNvbSkgY2Fubm90IHJlY2VpdmUgYWxlcnRzIGJ5IHVzaW5nIG1vYmlsZSBudW1iZXJzLCBidXQgY2FuIGNvbmZpZ3VyZSBhbGVydCBydWxlcyBmb3IgRFRTIHRhc2tzIGluIHRoZSBDbG91ZE1vbml0b3IgY29uc29sZS5cbiAgICAgKi9cbiAgICBwdWJsaWMgZGVsYXlQaG9uZTogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlIHwgdW5kZWZpbmVkO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IGRlbGF5UnVsZVRpbWU6IFRoZSB0aHJlc2hvbGQgZm9yIGxhdGVuY3kgYWxlcnRzLiBVbml0OiBzZWNvbmRzLiBZb3UgY2FuIHNldCB0aGUgdGhyZXNob2xkIGJhc2VkIG9uIHlvdXIgYnVzaW5lc3MgcmVxdWlyZW1lbnRzLiBUbyBwcmV2ZW50IGppdHRlcnMgY2F1c2VkIGJ5IG5ldHdvcmsgYW5kIGRhdGFiYXNlIG92ZXJsb2Fkcywgd2UgcmVjb21tZW5kIHRoYXQgeW91IHNldCB0aGUgdGhyZXNob2xkIHRvIG1vcmUgdGhhbiAxMCBzZWNvbmRzLlxuICAgICAqL1xuICAgIHB1YmxpYyBkZWxheVJ1bGVUaW1lOiBudW1iZXIgfCByb3MuSVJlc29sdmFibGUgfCB1bmRlZmluZWQ7XG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgZGlzYXN0ZXJSZWNvdmVyeUpvYjogU3BlY2lmaWVzIHdoZXRoZXIgdGhlIGluc3RhbmNlIGlzIGEgZGlzYXN0ZXIgcmVjb3ZlcnkgaW5zdGFuY2UuIFZhbGlkIHZhbHVlczogKip0cnVlKiogYW5kICoqZmFsc2UqKlxuICAgICAqL1xuICAgIHB1YmxpYyBkaXNhc3RlclJlY292ZXJ5Sm9iOiBib29sZWFuIHwgcm9zLklSZXNvbHZhYmxlIHwgdW5kZWZpbmVkO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IGR0c0Jpc0xhYmVsOiBUaGUgZW52aXJvbm1lbnQgdGFnIG9mIHRoZSBEVFMgaW5zdGFuY2UuIFZhbGlkIHZhbHVlczogKipub3JtYWwqKiBhbmQgKipvbmxpbmUqKi5cbiAgICAgKi9cbiAgICBwdWJsaWMgZHRzQmlzTGFiZWw6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZSB8IHVuZGVmaW5lZDtcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBkdHNJbnN0YW5jZUlkOiBUaGUgSUQgb2YgdGhlIERUUyBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBwdWJsaWMgZHRzSW5zdGFuY2VJZDogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlIHwgdW5kZWZpbmVkO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IGR0c0pvYklkOiBUaGUgSUQgb2YgdGhlIERUUyB0YXNrLlxuICAgICAqL1xuICAgIHB1YmxpYyBkdHNKb2JJZDogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlIHwgdW5kZWZpbmVkO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IGVycm9yTm90aWNlOiBTcGVjaWZpZXMgd2hldGhlciB0byBtb25pdG9yIHRoZSB0YXNrIHN0YXR1cy4gVmFsaWQgdmFsdWVzOiAqKnRydWUqKiBhbmQgKipmYWxzZSoqLlxuICAgICAqL1xuICAgIHB1YmxpYyBlcnJvck5vdGljZTogYm9vbGVhbiB8IHJvcy5JUmVzb2x2YWJsZSB8IHVuZGVmaW5lZDtcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBlcnJvclBob25lOiBUaGUgbW9iaWxlIG51bWJlcnMgdGhhdCByZWNlaXZlIHN0YXR1cy1yZWxhdGVkIGFsZXJ0cy4gU2VwYXJhdGUgbXVsdGlwbGUgbW9iaWxlIG51bWJlcnMgd2l0aCBjb21tYXMgKCwpLlxuICAgICAqICoqTm90ZSoqOiBUaGlzIHBhcmFtZXRlciBpcyBhdmFpbGFibGUgb25seSBmb3IgdXNlcnMgb2YgdGhlIENoaW5hIHNpdGUgKGFsaXl1bi5jb20pLiBPbmx5IG1vYmlsZSBudW1iZXJzIGluIHRoZSBDaGluZXNlIG1haW5sYW5kIGFyZSBzdXBwb3J0ZWQuIFlvdSBjYW4gc3BlY2lmeSB1cCB0byAxMCBtb2JpbGUgbnVtYmVycy4gVXNlcnMgb2YgdGhlIGludGVybmF0aW9uYWwgc2l0ZSAoYWxpYmFiYWNsb3VkLmNvbSkgY2Fubm90IHJlY2VpdmUgYWxlcnRzIGJ5IHVzaW5nIG1vYmlsZSBudW1iZXJzLCBidXQgY2FuIGNvbmZpZ3VyZSBhbGVydCBydWxlcyBmb3IgRFRTIHRhc2tzIGluIHRoZSBDbG91ZE1vbml0b3IgY29uc29sZS5cbiAgICAgKi9cbiAgICBwdWJsaWMgZXJyb3JQaG9uZTogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlIHwgdW5kZWZpbmVkO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IGZpbGVPc3NVcmw6IFRoZSBVUkwgb2YgdGhlIE9iamVjdCBTdG9yYWdlIFNlcnZpY2UgKE9TUykgYnVja2V0IHRoYXQgc3RvcmVzIHRoZSBmaWxlcyByZWxhdGVkIHRvIHRoZSBEVFMgdGFzay5cbiAgICAgKi9cbiAgICBwdWJsaWMgZmlsZU9zc1VybDogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlIHwgdW5kZWZpbmVkO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IHJlc2VydmU6IFRoZSByZXNlcnZlZCBwYXJhbWV0ZXIgb2YgRFRTLiBZb3UgY2FuIHNwZWNpZnkgdGhpcyBwYXJhbWV0ZXIgdG8gYWRkIG1vcmUgY29uZmlndXJhdGlvbnMgb2YgdGhlIHNvdXJjZSBvciBkZXN0aW5hdGlvbiBpbnN0YW5jZSB0byB0aGUgRFRTIHRhc2suIEZvciBleGFtcGxlLCB5b3UgY2FuIHNwZWNpZnkgdGhlIGRhdGEgc3RvcmFnZSBmb3JtYXQgb2YgdGhlIGRlc3RpbmF0aW9uIEthZmthIGRhdGFiYXNlIGFuZCB0aGUgSUQgb2YgdGhlIENFTiBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVzZXJ2ZTogeyBba2V5OiBzdHJpbmddOiAoYW55IHwgcm9zLklSZXNvbHZhYmxlKSB9IHwgcm9zLklSZXNvbHZhYmxlIHwgdW5kZWZpbmVkO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IHN0YXR1czogVGhlIHN0YXR1cyBvZiB0aGUgcmVzb3VyY2UuIFZhbGlkIHZhbHVlczpcbiAgICAgKiAtICoqTWlncmF0aW5nKio6IFN0YXJ0IHRoZSB0YXNrLlxuICAgICAqIC0gKipTdXNwZW5kaW5nKio6IFN1c3BlbmQgdGhlIHRhc2suXG4gICAgICogLSAqKlN0b3BwaW5nKio6IFN0b3AgdGhlIHRhc2suXG4gICAgICovXG4gICAgcHVibGljIHN0YXR1czogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlIHwgdW5kZWZpbmVkO1xuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHNjb3BlIC0gc2NvcGUgaW4gd2hpY2ggdGhpcyByZXNvdXJjZSBpcyBkZWZpbmVkXG4gICAgICogQHBhcmFtIGlkICAgIC0gc2NvcGVkIGlkIG9mIHRoZSByZXNvdXJjZVxuICAgICAqIEBwYXJhbSBwcm9wcyAtIHJlc291cmNlIHByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihzY29wZTogcm9zLkNvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IFJvc01pZ3JhdGlvbkpvYjJQcm9wcywgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6IGJvb2xlYW4pIHtcbiAgICAgICAgc3VwZXIoc2NvcGUsIGlkLCB7IHR5cGU6IFJvc01pZ3JhdGlvbkpvYjIuUk9TX1JFU09VUkNFX1RZUEVfTkFNRSwgcHJvcGVydGllczogcHJvcHMgfSk7XG4gICAgICAgIHRoaXMuYXR0ckR0c0luc3RhbmNlSWQgPSB0aGlzLmdldEF0dCgnRHRzSW5zdGFuY2VJZCcpO1xuICAgICAgICB0aGlzLmF0dHJEdHNKb2JJZCA9IHRoaXMuZ2V0QXR0KCdEdHNKb2JJZCcpO1xuICAgICAgICB0aGlzLmF0dHJEdHNKb2JOYW1lID0gdGhpcy5nZXRBdHQoJ0R0c0pvYk5hbWUnKTtcblxuICAgICAgICB0aGlzLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ID0gZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ7XG4gICAgICAgIHRoaXMuZGF0YUluaXRpYWxpemF0aW9uID0gcHJvcHMuZGF0YUluaXRpYWxpemF0aW9uO1xuICAgICAgICB0aGlzLmRhdGFTeW5jaHJvbml6YXRpb24gPSBwcm9wcy5kYXRhU3luY2hyb25pemF0aW9uO1xuICAgICAgICB0aGlzLmRiTGlzdCA9IHByb3BzLmRiTGlzdDtcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbkVuZHBvaW50ID0gcHJvcHMuZGVzdGluYXRpb25FbmRwb2ludDtcbiAgICAgICAgdGhpcy5kdHNKb2JOYW1lID0gcHJvcHMuZHRzSm9iTmFtZTtcbiAgICAgICAgdGhpcy5zb3VyY2VFbmRwb2ludCA9IHByb3BzLnNvdXJjZUVuZHBvaW50O1xuICAgICAgICB0aGlzLnN0cnVjdHVyZUluaXRpYWxpemF0aW9uID0gcHJvcHMuc3RydWN0dXJlSW5pdGlhbGl6YXRpb247XG4gICAgICAgIHRoaXMuY2hlY2twb2ludCA9IHByb3BzLmNoZWNrcG9pbnQ7XG4gICAgICAgIHRoaXMuZGF0YUNoZWNrQ29uZmlndXJlID0gcHJvcHMuZGF0YUNoZWNrQ29uZmlndXJlO1xuICAgICAgICB0aGlzLmRlZGljYXRlZENsdXN0ZXJJZCA9IHByb3BzLmRlZGljYXRlZENsdXN0ZXJJZDtcbiAgICAgICAgdGhpcy5kZWxheU5vdGljZSA9IHByb3BzLmRlbGF5Tm90aWNlO1xuICAgICAgICB0aGlzLmRlbGF5UGhvbmUgPSBwcm9wcy5kZWxheVBob25lO1xuICAgICAgICB0aGlzLmRlbGF5UnVsZVRpbWUgPSBwcm9wcy5kZWxheVJ1bGVUaW1lO1xuICAgICAgICB0aGlzLmRpc2FzdGVyUmVjb3ZlcnlKb2IgPSBwcm9wcy5kaXNhc3RlclJlY292ZXJ5Sm9iO1xuICAgICAgICB0aGlzLmR0c0Jpc0xhYmVsID0gcHJvcHMuZHRzQmlzTGFiZWw7XG4gICAgICAgIHRoaXMuZHRzSW5zdGFuY2VJZCA9IHByb3BzLmR0c0luc3RhbmNlSWQ7XG4gICAgICAgIHRoaXMuZHRzSm9iSWQgPSBwcm9wcy5kdHNKb2JJZDtcbiAgICAgICAgdGhpcy5lcnJvck5vdGljZSA9IHByb3BzLmVycm9yTm90aWNlO1xuICAgICAgICB0aGlzLmVycm9yUGhvbmUgPSBwcm9wcy5lcnJvclBob25lO1xuICAgICAgICB0aGlzLmZpbGVPc3NVcmwgPSBwcm9wcy5maWxlT3NzVXJsO1xuICAgICAgICB0aGlzLnJlc2VydmUgPSBwcm9wcy5yZXNlcnZlO1xuICAgICAgICB0aGlzLnN0YXR1cyA9IHByb3BzLnN0YXR1cztcbiAgICB9XG5cblxuICAgIHByb3RlY3RlZCBnZXQgcm9zUHJvcGVydGllcygpOiB7IFtrZXk6IHN0cmluZ106IGFueSB9ICB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBkYXRhSW5pdGlhbGl6YXRpb246IHRoaXMuZGF0YUluaXRpYWxpemF0aW9uLFxuICAgICAgICAgICAgZGF0YVN5bmNocm9uaXphdGlvbjogdGhpcy5kYXRhU3luY2hyb25pemF0aW9uLFxuICAgICAgICAgICAgZGJMaXN0OiB0aGlzLmRiTGlzdCxcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uRW5kcG9pbnQ6IHRoaXMuZGVzdGluYXRpb25FbmRwb2ludCxcbiAgICAgICAgICAgIGR0c0pvYk5hbWU6IHRoaXMuZHRzSm9iTmFtZSxcbiAgICAgICAgICAgIHNvdXJjZUVuZHBvaW50OiB0aGlzLnNvdXJjZUVuZHBvaW50LFxuICAgICAgICAgICAgc3RydWN0dXJlSW5pdGlhbGl6YXRpb246IHRoaXMuc3RydWN0dXJlSW5pdGlhbGl6YXRpb24sXG4gICAgICAgICAgICBjaGVja3BvaW50OiB0aGlzLmNoZWNrcG9pbnQsXG4gICAgICAgICAgICBkYXRhQ2hlY2tDb25maWd1cmU6IHRoaXMuZGF0YUNoZWNrQ29uZmlndXJlLFxuICAgICAgICAgICAgZGVkaWNhdGVkQ2x1c3RlcklkOiB0aGlzLmRlZGljYXRlZENsdXN0ZXJJZCxcbiAgICAgICAgICAgIGRlbGF5Tm90aWNlOiB0aGlzLmRlbGF5Tm90aWNlLFxuICAgICAgICAgICAgZGVsYXlQaG9uZTogdGhpcy5kZWxheVBob25lLFxuICAgICAgICAgICAgZGVsYXlSdWxlVGltZTogdGhpcy5kZWxheVJ1bGVUaW1lLFxuICAgICAgICAgICAgZGlzYXN0ZXJSZWNvdmVyeUpvYjogdGhpcy5kaXNhc3RlclJlY292ZXJ5Sm9iLFxuICAgICAgICAgICAgZHRzQmlzTGFiZWw6IHRoaXMuZHRzQmlzTGFiZWwsXG4gICAgICAgICAgICBkdHNJbnN0YW5jZUlkOiB0aGlzLmR0c0luc3RhbmNlSWQsXG4gICAgICAgICAgICBkdHNKb2JJZDogdGhpcy5kdHNKb2JJZCxcbiAgICAgICAgICAgIGVycm9yTm90aWNlOiB0aGlzLmVycm9yTm90aWNlLFxuICAgICAgICAgICAgZXJyb3JQaG9uZTogdGhpcy5lcnJvclBob25lLFxuICAgICAgICAgICAgZmlsZU9zc1VybDogdGhpcy5maWxlT3NzVXJsLFxuICAgICAgICAgICAgcmVzZXJ2ZTogdGhpcy5yZXNlcnZlLFxuICAgICAgICAgICAgc3RhdHVzOiB0aGlzLnN0YXR1cyxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcHJvdGVjdGVkIHJlbmRlclByb3BlcnRpZXMocHJvcHM6IHtba2V5OiBzdHJpbmddOiBhbnl9KTogeyBba2V5OiBzdHJpbmddOiBhbnkgfSAge1xuICAgICAgICByZXR1cm4gcm9zTWlncmF0aW9uSm9iMlByb3BzVG9Sb3NUZW1wbGF0ZShwcm9wcywgdGhpcy5lbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCk7XG4gICAgfVxufVxuXG5leHBvcnQgbmFtZXNwYWNlIFJvc01pZ3JhdGlvbkpvYjIge1xuICAgIC8qKlxuICAgICAqIEBzdGFiaWxpdHkgZXh0ZXJuYWxcbiAgICAgKi9cbiAgICBleHBvcnQgaW50ZXJmYWNlIERhdGFDaGVja0NvbmZpZ3VyZVByb3BlcnR5IHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBQcm9wZXJ0eSBmdWxsQ2hlY2tNYXhSZWFkUnBzOiBUaGUgbWF4aW11bSBudW1iZXIgb2YgZGF0YSByb3dzIHRoYXQgYXJlIHJlYWQgcGVyIHNlY29uZC4gVmFsaWQgdmFsdWVzOiBpbnRlZ2VycyBmcm9tIDAgdG8gOTAwNzE5OTI1NDc0MDk5MS5cbiAgICAgICAgICovXG4gICAgICAgIHJlYWRvbmx5IGZ1bGxDaGVja01heFJlYWRScHM/OiBudW1iZXIgfCByb3MuSVJlc29sdmFibGU7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAUHJvcGVydHkgZGF0YUNoZWNrTm90aWNlUGhvbmU6IFRoZSBtb2JpbGUgbnVtYmVyIG9mIHRoZSBhbGVydCBjb250YWN0IGZvciBhIGZ1bGwgb3IgaW5jcmVtZW50YWwgZGF0YSB2ZXJpZmljYXRpb24gdGFzay4gSWYgYW4gYWxlcnQgaXMgdHJpZ2dlcmVkIGZvciBhIHZlcmlmaWNhdGlvbiB0YXNrLCBhIHRleHQgbWVzc2FnZSBpcyBzZW50IHRvIG5vdGlmeSB0aGUgYWxlcnQgY29udGFjdC5cbiAgICAgICAgICovXG4gICAgICAgIHJlYWRvbmx5IGRhdGFDaGVja05vdGljZVBob25lPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuICAgICAgICAvKipcbiAgICAgICAgICogQFByb3BlcnR5IGluY3JlbWVudGFsQ2hlY2tEZWxheU5vdGljZTogU3BlY2lmaWVzIHdoZXRoZXIgdG8gdHJpZ2dlciBhbiBhbGVydCBvbiB0aGUgZGF0YSBsYXRlbmN5IG9mIHRoZSBpbmNyZW1lbnRhbCBkYXRhIHZlcmlmaWNhdGlvbiB0YXNrLiBWYWxpZCB2YWx1ZXM6ICoqdHJ1ZSoqIGFuZCAqKmZhbHNlKiouXG4gICAgICogKipOb3RlKio6IEZvciBleGFtcGxlLCB5b3Ugc2V0IHRoaXMgcGFyYW1ldGVyIHRvICoqdHJ1ZSoqLiBJZiB0aGUgY3VtdWxhdGl2ZSBsYXRlbmN5IG9mIHRoZSBpbmNyZW1lbnRhbCBkYXRhIHZlcmlmaWNhdGlvbiB0YXNrIGluIHNldmVyYWwgc3RhdGlzdGljYWwgcGVyaW9kcyBpcyBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gdGhlIHRocmVzaG9sZCB0aGF0IHlvdSBzcGVjaWZpZWQsIGFuIGFsZXJ0IGlzIHRyaWdnZXJlZC5cbiAgICAgICAgICovXG4gICAgICAgIHJlYWRvbmx5IGluY3JlbWVudGFsQ2hlY2tEZWxheU5vdGljZT86IGJvb2xlYW4gfCByb3MuSVJlc29sdmFibGU7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAUHJvcGVydHkgaW5jcmVtZW50YWxDaGVja0RlbGF5Tm90aWNlVmFsdWU6IFRoZSBhbGVydCB0aHJlc2hvbGQgZm9yIHRoZSBkYXRhIGxhdGVuY3kgb2YgdGhlIGluY3JlbWVudGFsIGRhdGEgdmVyaWZpY2F0aW9uIHRhc2suIFVuaXQ6IHNlY29uZHMuXG4gICAgICogKipOb3RlKio6IFRoaXMgcGFyYW1ldGVyIGlzIHJlcXVpcmVkIGlmIHRoZSAqKmluY3JlbWVudGFsQ2hlY2tEZWxheU5vdGljZSoqIHBhcmFtZXRlciBpcyBzZXQgdG8gKip0cnVlKiouXG4gICAgICAgICAqL1xuICAgICAgICByZWFkb25seSBpbmNyZW1lbnRhbENoZWNrRGVsYXlOb3RpY2VWYWx1ZT86IG51bWJlciB8IHJvcy5JUmVzb2x2YWJsZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBQcm9wZXJ0eSBpbmNyZW1lbnRhbENoZWNrRGVsYXlOb3RpY2VQZXJpb2Q6IFRoZSBzdGF0aXN0aWNhbCBwZXJpb2Qgb2YgYW4gYWxlcnQgb24gdGhlIGRhdGEgbGF0ZW5jeSBvZiB0aGUgaW5jcmVtZW50YWwgZGF0YSB2ZXJpZmljYXRpb24gdGFzay4gVmFsaWQgdmFsdWVzOlxuICAgICAqIC0gKioxKio6IDEgbWludXRlXG4gICAgICogLSAqKjIqKjogNSBtaW51dGVzXG4gICAgICogLSAqKjMqKjogMTAgbWludXRlc1xuICAgICAqIC0gKio0Kio6IDMwIG1pbnV0ZXNcbiAgICAgKiAqKk5vdGUqKjogVGhpcyBwYXJhbWV0ZXIgaXMgcmVxdWlyZWQgaWYgdGhlICoqaW5jcmVtZW50YWxDaGVja0RlbGF5Tm90aWNlKiogcGFyYW1ldGVyIGlzIHNldCB0byAqKnRydWUqKi5cbiAgICAgICAgICovXG4gICAgICAgIHJlYWRvbmx5IGluY3JlbWVudGFsQ2hlY2tEZWxheU5vdGljZVBlcmlvZD86IG51bWJlciB8IHJvcy5JUmVzb2x2YWJsZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBQcm9wZXJ0eSBkYXRhQ2hlY2tEYkxpc3Q6IFRoZSBvYmplY3RzIHdob3NlIGRhdGEgaXMgdG8gYmUgdmVyaWZpZWQuIFRoZSB2YWx1ZSBtdXN0IGJlIGEgSlNPTiBzdHJpbmcuXG4gICAgICAgICAqL1xuICAgICAgICByZWFkb25seSBkYXRhQ2hlY2tEYkxpc3Q/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAUHJvcGVydHkgY2hlY2tNYXhpbXVtSG91ckVuYWJsZTogU3BlY2lmaWVzIHdoZXRoZXIgdG8gY29uZmlndXJlIGEgdGltZW91dCBwZXJpb2QgZm9yIHRoZSBmdWxsIGRhdGEgdmVyaWZpY2F0aW9uIHRhc2suVmFsaWQgdmFsdWVzOlxuICAgICAqIC0gKiowKio6IGRvZXMgbm90IGNvbmZpZ3VyZSBhIHRpbWVvdXQgcGVyaW9kIGZvciB0aGUgZnVsbCBkYXRhIHZlcmlmaWNhdGlvbiB0YXNrLlxuICAgICAqIC0gKioxKio6IGNvbmZpZ3VyZXMgYSB0aW1lb3V0IHBlcmlvZCBmb3IgdGhlIGZ1bGwgZGF0YSB2ZXJpZmljYXRpb24gdGFzay5cbiAgICAgKiAqKk5vdGUqKjogVGhpcyBwYXJhbWV0ZXIgaXMgcmVxdWlyZWQgaWYgdGhlIGZ1bGxDaGVja01vZGVsIHBhcmFtZXRlciBpcyBzZXQgdG8gMS5cbiAgICAgICAgICovXG4gICAgICAgIHJlYWRvbmx5IGNoZWNrTWF4aW11bUhvdXJFbmFibGU/OiBudW1iZXIgfCByb3MuSVJlc29sdmFibGU7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAUHJvcGVydHkgZnVsbENoZWNrUmF0aW86IFRoZSBzYW1wbGluZyByYXRpbyBvZiB0aGUgZnVsbCBkYXRhIHZlcmlmaWNhdGlvbiB0YXNrLiBWYWxpZCB2YWx1ZXM6IGludGVnZXJzIGZyb20gMTAgdG8gMTAwLiBVbml0OiBwZXJjZW50LlxuICAgICAqICoqTm90ZSoqOiBUaGlzIHBhcmFtZXRlciBpcyByZXF1aXJlZCBpZiB0aGUgKipmdWxsQ2hlY2tNb2RlbCoqIHBhcmFtZXRlciBpcyBzZXQgdG8gMS5cbiAgICAgICAgICovXG4gICAgICAgIHJlYWRvbmx5IGZ1bGxDaGVja1JhdGlvPzogbnVtYmVyIHwgcm9zLklSZXNvbHZhYmxlO1xuICAgICAgICAvKipcbiAgICAgICAgICogQFByb3BlcnR5IGNoZWNrTWF4aW11bUhvdXI6IFRoZSB0aW1lb3V0IHBlcmlvZCBvZiB0aGUgZnVsbCBkYXRhIHZlcmlmaWNhdGlvbiB0YXNrLiBWYWxpZCB2YWx1ZXM6IGludGVnZXJzIGZyb20gMSB0byA3Mi4gQ291bnRkb3duIGJlZ2lucyB0aGUgbW9tZW50IHRoZSBmdWxsIGRhdGEgdmVyaWZpY2F0aW9uIHRhc2sgaXMgc3RhcnRlZC4gSWYgdGhlIHRhc2sgaXMgbm90IGNvbXBsZXRlIHdpdGhpbiB0aGUgc3BlY2lmaWVkIHRpbWVvdXQgcGVyaW9kLCB0aGUgdGFzayBpcyBmb3JjaWJseSBzdG9wcGVkLlxuICAgICAgICAgKi9cbiAgICAgICAgcmVhZG9ubHkgY2hlY2tNYXhpbXVtSG91cj86IG51bWJlciB8IHJvcy5JUmVzb2x2YWJsZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBQcm9wZXJ0eSBmdWxsQ2hlY2tGaXhEYXRhOiBTcGVjaWZpZXMgd2hldGhlciB0byByZXBsYWNlIHRoZSBpbmNvbnNpc3RlbnQgZGF0YS4gVmFsaWQgdmFsdWVzOiAqKnRydWUqKiBhbmQgKipmYWxzZSoqLiBEZWZhdWx0IHZhbHVlOiBmYWxzZS5cbiAgICAgKiAqKk5vdGUqKjogRm9yIGV4YW1wbGUsIHlvdSBzZXQgdGhpcyBwYXJhbWV0ZXIgdG8gdHJ1ZS4gSWYgdGhlIGRlc3RpbmF0aW9uIGRhdGFiYXNlIGhhcyBkYXRhIHRoYXQgaXMgaW5jb25zaXN0ZW50IHdpdGggdGhlIGRhdGEgaW4gdGhlIHNvdXJjZSBkYXRhYmFzZSwgdGhlIGRhdGEgdmFsdWVzIG9mIHRoZSBkZXN0aW5hdGlvbiBkYXRhYmFzZSBhcmUgcmVwbGFjZWQgd2l0aCB0aG9zZSBvZiB0aGUgc291cmNlIGRhdGFiYXNlLlxuICAgICAgICAgKi9cbiAgICAgICAgcmVhZG9ubHkgZnVsbENoZWNrRml4RGF0YT86IGJvb2xlYW4gfCByb3MuSVJlc29sdmFibGU7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAUHJvcGVydHkgZnVsbENoZWNrTW9kZWw6IFRoZSBtb2RlIG9mIHRoZSBmdWxsIGRhdGEgdmVyaWZpY2F0aW9uIHRhc2suIFZhbGlkIHZhbHVlczpcbiAgICAgKiAtICoqMSoqOiB2ZXJpZmllcyB0aGUgZGF0YSBieSBzYW1wbGluZyByYXRpby5cbiAgICAgKiAtICoqMioqOiB2ZXJpZmllcyB0aGUgZGF0YSBieSByb3cuXG4gICAgICAgICAqL1xuICAgICAgICByZWFkb25seSBmdWxsQ2hlY2tNb2RlbD86IG51bWJlciB8IHJvcy5JUmVzb2x2YWJsZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBQcm9wZXJ0eSBpbmNyZW1lbnRhbENoZWNrVmFsaWRGYWlsTm90aWNlVmFsdWU6IFRoZSBhbGVydCB0aHJlc2hvbGQgZm9yIGluY29uc2lzdGVudCBkYXRhIGVudHJpZXMgZGV0ZWN0ZWQgYnkgdGhlIGluY3JlbWVudGFsIGRhdGEgdmVyaWZpY2F0aW9uIHRhc2suXG4gICAgICogKipOb3RlKio6IFRoaXMgcGFyYW1ldGVyIGlzIHJlcXVpcmVkIGlmIHRoZSAqKmluY3JlbWVudGFsQ2hlY2tWYWxpZEZhaWxOb3RpY2UqKiBwYXJhbWV0ZXIgaXMgc2V0IHRvICoqdHJ1ZSoqLlxuICAgICAgICAgKi9cbiAgICAgICAgcmVhZG9ubHkgaW5jcmVtZW50YWxDaGVja1ZhbGlkRmFpbE5vdGljZVZhbHVlPzogbnVtYmVyIHwgcm9zLklSZXNvbHZhYmxlO1xuICAgICAgICAvKipcbiAgICAgICAgICogQFByb3BlcnR5IGluY3JlbWVudGFsRGF0YUNoZWNrOiBTcGVjaWZpZXMgd2hldGhlciB0byBwZXJmb3JtIGFuIGluY3JlbWVudGFsIGRhdGEgdmVyaWZpY2F0aW9uIHRhc2suIFZhbGlkIHZhbHVlczogKip0cnVlKiogYW5kICoqZmFsc2UqKi5cbiAgICAgICAgICovXG4gICAgICAgIHJlYWRvbmx5IGluY3JlbWVudGFsRGF0YUNoZWNrPzogYm9vbGVhbiB8IHJvcy5JUmVzb2x2YWJsZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBQcm9wZXJ0eSBpbmNyZW1lbnRhbENoZWNrVmFsaWRGYWlsTm90aWNlVGltZXM6IFRoZSBudW1iZXIgb2Ygc3RhdGlzdGljYWwgcGVyaW9kcyBvZiBhbiBhbGVydCBvbiBpbmNvbnNpc3RlbnQgZGF0YSBlbnRyaWVzIGRldGVjdGVkIGJ5IHRoZSBpbmNyZW1lbnRhbCBkYXRhIHZlcmlmaWNhdGlvbiB0YXNrLlxuICAgICAqICoqTm90ZSoqOiBUaGlzIHBhcmFtZXRlciBpcyByZXF1aXJlZCBpZiB0aGUgKippbmNyZW1lbnRhbENoZWNrVmFsaWRGYWlsTm90aWNlKiogcGFyYW1ldGVyIGlzIHNldCB0byAqKnRydWUqKi5cbiAgICAgICAgICovXG4gICAgICAgIHJlYWRvbmx5IGluY3JlbWVudGFsQ2hlY2tWYWxpZEZhaWxOb3RpY2VUaW1lcz86IG51bWJlciB8IHJvcy5JUmVzb2x2YWJsZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBQcm9wZXJ0eSBmdWxsQ2hlY2tNYXhSZWFkQnBzOiBUaGUgbWF4aW11bSBudW1iZXIgb2YgYnl0ZXMgdGhhdCBhcmUgcmVhZCBwZXIgc2Vjb25kLiBWYWxpZCB2YWx1ZXM6IGludGVnZXJzIGZyb20gMCB0byA5MDA3MTk5MjU0NzQwOTkxLlxuICAgICAgICAgKi9cbiAgICAgICAgcmVhZG9ubHkgZnVsbENoZWNrTWF4UmVhZEJwcz86IG51bWJlciB8IHJvcy5JUmVzb2x2YWJsZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBQcm9wZXJ0eSBmdWxsQ2hlY2tWYWxpZEZhaWxOb3RpY2U6IFNwZWNpZmllcyB3aGV0aGVyIHRvIHRyaWdnZXIgYW4gYWxlcnQgaWYgaW5jb25zaXN0ZW50IGRhdGEgaXMgZGV0ZWN0ZWQgYnkgdGhlIGZ1bGwgZGF0YSB2ZXJpZmljYXRpb24gdGFzay4gVmFsaWQgdmFsdWVzOiAqKnRydWUqKiBhbmQgKipmYWxzZSoqLlxuICAgICAqICoqTm90ZSoqOiBGb3IgZXhhbXBsZSwgeW91IHNldCB0aGlzIHBhcmFtZXRlciB0byB0cnVlLiBJZiB0aGUgbnVtYmVyIG9mIGluY29uc2lzdGVudCBkYXRhIGVudHJpZXMgZGV0ZWN0ZWQgYnkgdGhlIGZ1bGwgZGF0YSB2ZXJpZmljYXRpb24gdGFzayBpcyBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gdGhlIHRocmVzaG9sZCB0aGF0IHlvdSBzcGVjaWZpZWQsIGFuIGFsZXJ0IGlzIHRyaWdnZXJlZC5cbiAgICAgICAgICovXG4gICAgICAgIHJlYWRvbmx5IGZ1bGxDaGVja1ZhbGlkRmFpbE5vdGljZT86IGJvb2xlYW4gfCByb3MuSVJlc29sdmFibGU7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAUHJvcGVydHkgZnVsbENoZWNrRXJyb3JOb3RpY2U6IFNwZWNpZmllcyB3aGV0aGVyIHRvIHRyaWdnZXIgYW4gYWxlcnQgaWYgdGhlIGZ1bGwgZGF0YSB2ZXJpZmljYXRpb24gdGFzayBmYWlscy4gVmFsaWQgdmFsdWVzOiAqKnRydWUqKiBhbmQgKipmYWxzZSoqLlxuICAgICAqICoqTm90ZSoqOiBGb3IgZXhhbXBsZSwgeW91IHNldCB0aGlzIHBhcmFtZXRlciB0byAqKnRydWUqKi4gSWYgdGhlIGZ1bGwgZGF0YSB2ZXJpZmljYXRpb24gdGFzayBmYWlscywgYW4gYWxlcnQgaXMgdHJpZ2dlcmVkLlxuICAgICAgICAgKi9cbiAgICAgICAgcmVhZG9ubHkgZnVsbENoZWNrRXJyb3JOb3RpY2U/OiBib29sZWFuIHwgcm9zLklSZXNvbHZhYmxlO1xuICAgICAgICAvKipcbiAgICAgICAgICogQFByb3BlcnR5IGluY3JlbWVudGFsQ2hlY2tWYWxpZEZhaWxOb3RpY2VQZXJpb2Q6IFRoZSBzdGF0aXN0aWNhbCBwZXJpb2Qgb2YgYW4gYWxlcnQgb24gaW5jb25zaXN0ZW50IGRhdGEgZW50cmllcyBkZXRlY3RlZCBieSB0aGUgaW5jcmVtZW50YWwgZGF0YSB2ZXJpZmljYXRpb24gdGFzay4gVmFsaWQgdmFsdWVzOlxuICAgICAqIC0gKioxKio6IDEgbWludXRlXG4gICAgICogLSAqKjIqKjogNSBtaW51dGVzXG4gICAgICogLSAqKjMqKjogMTAgbWludXRlc1xuICAgICAqIC0gKio0Kio6IDMwIG1pbnV0ZXNcbiAgICAgKiAqKk5vdGUqKjogVGhpcyBwYXJhbWV0ZXIgaXMgcmVxdWlyZWQgaWYgdGhlICoqaW5jcmVtZW50YWxDaGVja1ZhbGlkRmFpbE5vdGljZSoqIHBhcmFtZXRlciBpcyBzZXQgdG8gKip0cnVlKiouXG4gICAgICAgICAqL1xuICAgICAgICByZWFkb25seSBpbmNyZW1lbnRhbENoZWNrVmFsaWRGYWlsTm90aWNlUGVyaW9kPzogbnVtYmVyIHwgcm9zLklSZXNvbHZhYmxlO1xuICAgICAgICAvKipcbiAgICAgICAgICogQFByb3BlcnR5IGluY3JlbWVudGFsQ2hlY2tEZWxheU5vdGljZVRpbWVzOiBUaGUgbnVtYmVyIG9mIHN0YXRpc3RpY2FsIHBlcmlvZHMgb2YgYW4gYWxlcnQgb24gdGhlIGRhdGEgbGF0ZW5jeSBvZiB0aGUgaW5jcmVtZW50YWwgZGF0YSB2ZXJpZmljYXRpb24gdGFzay5cbiAgICAgKiAqKk5vdGUqKjogVGhpcyBwYXJhbWV0ZXIgaXMgcmVxdWlyZWQgaWYgdGhlICoqaW5jcmVtZW50YWxDaGVja0RlbGF5Tm90aWNlKiogcGFyYW1ldGVyIGlzIHNldCB0byAqKnRydWUqKi5cbiAgICAgICAgICovXG4gICAgICAgIHJlYWRvbmx5IGluY3JlbWVudGFsQ2hlY2tEZWxheU5vdGljZVRpbWVzPzogbnVtYmVyIHwgcm9zLklSZXNvbHZhYmxlO1xuICAgICAgICAvKipcbiAgICAgICAgICogQFByb3BlcnR5IGZ1bGxDaGVja1JlZmVyRW5kcG9pbnQ6IFRoZSBiZW5jaG1hcmsgZm9yIGZ1bGwgZGF0YSB2ZXJpZmljYXRpb24uIFZhbGlkIHZhbHVlczpcbiAgICAgKiAtICoqYWxsKio6IGNoZWNrcyB0aGUgZGF0YSBjb25zaXN0ZW5jeSBiZXR3ZWVuIHRoZSBzb3VyY2UgYW5kIGRlc3RpbmF0aW9uIGRhdGFiYXNlcyBiYXNlZCBvbiB0aGUgc291cmNlIGFuZCBkZXN0aW5hdGlvbiBkYXRhYmFzZXMuXG4gICAgICogLSAqKnNyYyoqOiBjaGVja3MgdGhlIGRhdGEgY29uc2lzdGVuY3kgYmV0d2VlbiB0aGUgc291cmNlIGFuZCBkZXN0aW5hdGlvbiBkYXRhYmFzZXMgYmFzZWQgb24gdGhlIHNvdXJjZSBkYXRhYmFzZS4gT2JqZWN0cyB0aGF0IGV4aXN0IGluIHRoZSBkZXN0aW5hdGlvbiBkYXRhYmFzZSBidXQgZG8gbm90IGV4aXN0IGluIHRoZSBzb3VyY2UgZGF0YWJhc2UgYXJlIG5vdCBjaGVja2VkLlxuICAgICAqIC0gKipkZXN0Kio6IGNoZWNrcyB0aGUgZGF0YSBjb25zaXN0ZW5jeSBiZXR3ZWVuIHRoZSBzb3VyY2UgYW5kIGRlc3RpbmF0aW9uIGRhdGFiYXNlcyBiYXNlZCBvbiB0aGUgZGVzdGluYXRpb24gZGF0YWJhc2UuIE9iamVjdHMgdGhhdCBleGlzdCBpbiB0aGUgc291cmNlIGRhdGFiYXNlIGJ1dCBkbyBub3QgZXhpc3QgaW4gdGhlIGRlc3RpbmF0aW9uIGRhdGFiYXNlIGFyZSBub3QgY2hlY2tlZC5cbiAgICAgICAgICovXG4gICAgICAgIHJlYWRvbmx5IGZ1bGxDaGVja1JlZmVyRW5kcG9pbnQ/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAUHJvcGVydHkgZnVsbERhdGFDaGVjazogU3BlY2lmaWVzIHdoZXRoZXIgdG8gcGVyZm9ybSBhIGZ1bGwgZGF0YSB2ZXJpZmljYXRpb24gdGFzay4gVmFsaWQgdmFsdWVzOiAqKnRydWUqKiBhbmQgKipmYWxzZSoqLlxuICAgICAgICAgKi9cbiAgICAgICAgcmVhZG9ubHkgZnVsbERhdGFDaGVjaz86IGJvb2xlYW4gfCByb3MuSVJlc29sdmFibGU7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAUHJvcGVydHkgaW5jcmVtZW50YWxDaGVja1ZhbGlkRmFpbE5vdGljZTogU3BlY2lmaWVzIHdoZXRoZXIgdG8gdHJpZ2dlciBhbiBhbGVydCBpZiBpbmNvbnNpc3RlbnQgZGF0YSBpcyBkZXRlY3RlZCBieSB0aGUgaW5jcmVtZW50YWwgZGF0YSB2ZXJpZmljYXRpb24gdGFzay4gVmFsaWQgdmFsdWVzOiAqKnRydWUqKiBhbmQgKipmYWxzZSoqLlxuICAgICAqICoqTm90ZSoqOiBGb3IgZXhhbXBsZSwgeW91IHNldCB0aGlzIHBhcmFtZXRlciB0byAqKnRydWUqKi4gSWYgdGhlIGN1bXVsYXRpdmUgbnVtYmVyIG9mIGluY29uc2lzdGVudCBkYXRhIGVudHJpZXMgZGV0ZWN0ZWQgYnkgdGhlIGluY3JlbWVudGFsIGRhdGEgdmVyaWZpY2F0aW9uIHRhc2sgaW4gc2V2ZXJhbCBzdGF0aXN0aWNhbCBwZXJpb2RzIGlzIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byB0aGUgdGhyZXNob2xkIHRoYXQgeW91IHNwZWNpZmllZCwgYW4gYWxlcnQgaXMgdHJpZ2dlcmVkLlxuICAgICAgICAgKi9cbiAgICAgICAgcmVhZG9ubHkgaW5jcmVtZW50YWxDaGVja1ZhbGlkRmFpbE5vdGljZT86IGJvb2xlYW4gfCByb3MuSVJlc29sdmFibGU7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAUHJvcGVydHkgZnVsbENoZWNrTm90aWNlVmFsdWU6IFRoZSBhbGVydCB0aHJlc2hvbGQgZm9yIGluY29uc2lzdGVudCBkYXRhIGVudHJpZXMgZGV0ZWN0ZWQgYnkgdGhlIGZ1bGwgZGF0YSB2ZXJpZmljYXRpb24gdGFzay5cbiAgICAgKiAqKk5vdGUqKjogVGhpcyBwYXJhbWV0ZXIgaXMgcmVxdWlyZWQgaWYgdGhlICoqZnVsbENoZWNrVmFsaWRGYWlsTm90aWNlKiogcGFyYW1ldGVyIGlzIHNldCB0byAqKnRydWUqKi5cbiAgICAgICAgICovXG4gICAgICAgIHJlYWRvbmx5IGZ1bGxDaGVja05vdGljZVZhbHVlPzogbnVtYmVyIHwgcm9zLklSZXNvbHZhYmxlO1xuICAgICAgICAvKipcbiAgICAgICAgICogQFByb3BlcnR5IGluY3JlbWVudGFsQ2hlY2tFcnJvck5vdGljZTogU3BlY2lmaWVzIHdoZXRoZXIgdG8gdHJpZ2dlciBhbiBhbGVydCBpZiB0aGUgaW5jcmVtZW50YWwgZGF0YSB2ZXJpZmljYXRpb24gdGFzayBmYWlscy4gVmFsaWQgdmFsdWVzOiAqKnRydWUqKiBhbmQgKipmYWxzZSoqLlxuICAgICAqIE5vdGU6IEZvciBleGFtcGxlLCB5b3Ugc2V0IHRoaXMgcGFyYW1ldGVyIHRvICoqdHJ1ZSoqLiBJZiB0aGUgaW5jcmVtZW50YWwgZGF0YSB2ZXJpZmljYXRpb24gdGFzayBmYWlscywgYW4gYWxlcnQgaXMgdHJpZ2dlcmVkLlxuICAgICAgICAgKi9cbiAgICAgICAgcmVhZG9ubHkgaW5jcmVtZW50YWxDaGVja0Vycm9yTm90aWNlPzogYm9vbGVhbiB8IHJvcy5JUmVzb2x2YWJsZTtcbiAgICB9XG59XG4vKipcbiAqIERldGVybWluZSB3aGV0aGVyIHRoZSBnaXZlbiBwcm9wZXJ0aWVzIG1hdGNoIHRob3NlIG9mIGEgYERhdGFDaGVja0NvbmZpZ3VyZVByb3BlcnR5YFxuICpcbiAqIEBwYXJhbSBwcm9wZXJ0aWVzIC0gdGhlIFR5cGVTY3JpcHQgcHJvcGVydGllcyBvZiBhIGBEYXRhQ2hlY2tDb25maWd1cmVQcm9wZXJ0eWBcbiAqXG4gKiBAcmV0dXJucyB0aGUgcmVzdWx0IG9mIHRoZSB2YWxpZGF0aW9uLlxuICovXG5mdW5jdGlvbiBSb3NNaWdyYXRpb25Kb2IyX0RhdGFDaGVja0NvbmZpZ3VyZVByb3BlcnR5VmFsaWRhdG9yKHByb3BlcnRpZXM6IGFueSk6IHJvcy5WYWxpZGF0aW9uUmVzdWx0IHtcbiAgICBpZiAoIXJvcy5jYW5JbnNwZWN0KHByb3BlcnRpZXMpKSB7IHJldHVybiByb3MuVkFMSURBVElPTl9TVUNDRVNTOyB9XG4gICAgY29uc3QgZXJyb3JzID0gbmV3IHJvcy5WYWxpZGF0aW9uUmVzdWx0cygpO1xuICAgIGlmKHByb3BlcnRpZXMuZnVsbENoZWNrTWF4UmVhZFJwcyAmJiAodHlwZW9mIHByb3BlcnRpZXMuZnVsbENoZWNrTWF4UmVhZFJwcykgIT09ICdvYmplY3QnKSB7XG4gICAgICAgIGVycm9ycy5jb2xsZWN0KHJvcy5wcm9wZXJ0eVZhbGlkYXRvcignZnVsbENoZWNrTWF4UmVhZFJwcycsIHJvcy52YWxpZGF0ZVJhbmdlKSh7XG4gICAgICAgICAgICBkYXRhOiBwcm9wZXJ0aWVzLmZ1bGxDaGVja01heFJlYWRScHMsXG4gICAgICAgICAgICBtaW46IDAsXG4gICAgICAgICAgICBtYXg6IDkwMDcxOTkyNTQ3NDA5OTEsXG4gICAgICAgICAgfSkpO1xuICAgIH1cbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ2Z1bGxDaGVja01heFJlYWRScHMnLCByb3MudmFsaWRhdGVOdW1iZXIpKHByb3BlcnRpZXMuZnVsbENoZWNrTWF4UmVhZFJwcykpO1xuICAgIGVycm9ycy5jb2xsZWN0KHJvcy5wcm9wZXJ0eVZhbGlkYXRvcignZGF0YUNoZWNrTm90aWNlUGhvbmUnLCByb3MudmFsaWRhdGVTdHJpbmcpKHByb3BlcnRpZXMuZGF0YUNoZWNrTm90aWNlUGhvbmUpKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ2luY3JlbWVudGFsQ2hlY2tEZWxheU5vdGljZScsIHJvcy52YWxpZGF0ZUJvb2xlYW4pKHByb3BlcnRpZXMuaW5jcmVtZW50YWxDaGVja0RlbGF5Tm90aWNlKSk7XG4gICAgZXJyb3JzLmNvbGxlY3Qocm9zLnByb3BlcnR5VmFsaWRhdG9yKCdpbmNyZW1lbnRhbENoZWNrRGVsYXlOb3RpY2VWYWx1ZScsIHJvcy52YWxpZGF0ZU51bWJlcikocHJvcGVydGllcy5pbmNyZW1lbnRhbENoZWNrRGVsYXlOb3RpY2VWYWx1ZSkpO1xuICAgIGlmKHByb3BlcnRpZXMuaW5jcmVtZW50YWxDaGVja0RlbGF5Tm90aWNlUGVyaW9kICYmICh0eXBlb2YgcHJvcGVydGllcy5pbmNyZW1lbnRhbENoZWNrRGVsYXlOb3RpY2VQZXJpb2QpICE9PSAnb2JqZWN0Jykge1xuICAgICAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ2luY3JlbWVudGFsQ2hlY2tEZWxheU5vdGljZVBlcmlvZCcsIHJvcy52YWxpZGF0ZUFsbG93ZWRWYWx1ZXMpKHtcbiAgICAgICAgICBkYXRhOiBwcm9wZXJ0aWVzLmluY3JlbWVudGFsQ2hlY2tEZWxheU5vdGljZVBlcmlvZCxcbiAgICAgICAgICBhbGxvd2VkVmFsdWVzOiBbMSwyLDMsNF0sXG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgZXJyb3JzLmNvbGxlY3Qocm9zLnByb3BlcnR5VmFsaWRhdG9yKCdpbmNyZW1lbnRhbENoZWNrRGVsYXlOb3RpY2VQZXJpb2QnLCByb3MudmFsaWRhdGVOdW1iZXIpKHByb3BlcnRpZXMuaW5jcmVtZW50YWxDaGVja0RlbGF5Tm90aWNlUGVyaW9kKSk7XG4gICAgZXJyb3JzLmNvbGxlY3Qocm9zLnByb3BlcnR5VmFsaWRhdG9yKCdkYXRhQ2hlY2tEYkxpc3QnLCByb3MudmFsaWRhdGVTdHJpbmcpKHByb3BlcnRpZXMuZGF0YUNoZWNrRGJMaXN0KSk7XG4gICAgaWYocHJvcGVydGllcy5jaGVja01heGltdW1Ib3VyRW5hYmxlICYmICh0eXBlb2YgcHJvcGVydGllcy5jaGVja01heGltdW1Ib3VyRW5hYmxlKSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgZXJyb3JzLmNvbGxlY3Qocm9zLnByb3BlcnR5VmFsaWRhdG9yKCdjaGVja01heGltdW1Ib3VyRW5hYmxlJywgcm9zLnZhbGlkYXRlQWxsb3dlZFZhbHVlcykoe1xuICAgICAgICAgIGRhdGE6IHByb3BlcnRpZXMuY2hlY2tNYXhpbXVtSG91ckVuYWJsZSxcbiAgICAgICAgICBhbGxvd2VkVmFsdWVzOiBbMCwxXSxcbiAgICAgICAgfSkpO1xuICAgIH1cbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ2NoZWNrTWF4aW11bUhvdXJFbmFibGUnLCByb3MudmFsaWRhdGVOdW1iZXIpKHByb3BlcnRpZXMuY2hlY2tNYXhpbXVtSG91ckVuYWJsZSkpO1xuICAgIGlmKHByb3BlcnRpZXMuZnVsbENoZWNrUmF0aW8gJiYgKHR5cGVvZiBwcm9wZXJ0aWVzLmZ1bGxDaGVja1JhdGlvKSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgZXJyb3JzLmNvbGxlY3Qocm9zLnByb3BlcnR5VmFsaWRhdG9yKCdmdWxsQ2hlY2tSYXRpbycsIHJvcy52YWxpZGF0ZVJhbmdlKSh7XG4gICAgICAgICAgICBkYXRhOiBwcm9wZXJ0aWVzLmZ1bGxDaGVja1JhdGlvLFxuICAgICAgICAgICAgbWluOiAxMCxcbiAgICAgICAgICAgIG1heDogMTAwLFxuICAgICAgICAgIH0pKTtcbiAgICB9XG4gICAgZXJyb3JzLmNvbGxlY3Qocm9zLnByb3BlcnR5VmFsaWRhdG9yKCdmdWxsQ2hlY2tSYXRpbycsIHJvcy52YWxpZGF0ZU51bWJlcikocHJvcGVydGllcy5mdWxsQ2hlY2tSYXRpbykpO1xuICAgIGlmKHByb3BlcnRpZXMuY2hlY2tNYXhpbXVtSG91ciAmJiAodHlwZW9mIHByb3BlcnRpZXMuY2hlY2tNYXhpbXVtSG91cikgIT09ICdvYmplY3QnKSB7XG4gICAgICAgIGVycm9ycy5jb2xsZWN0KHJvcy5wcm9wZXJ0eVZhbGlkYXRvcignY2hlY2tNYXhpbXVtSG91cicsIHJvcy52YWxpZGF0ZVJhbmdlKSh7XG4gICAgICAgICAgICBkYXRhOiBwcm9wZXJ0aWVzLmNoZWNrTWF4aW11bUhvdXIsXG4gICAgICAgICAgICBtaW46IDEsXG4gICAgICAgICAgICBtYXg6IDcyLFxuICAgICAgICAgIH0pKTtcbiAgICB9XG4gICAgZXJyb3JzLmNvbGxlY3Qocm9zLnByb3BlcnR5VmFsaWRhdG9yKCdjaGVja01heGltdW1Ib3VyJywgcm9zLnZhbGlkYXRlTnVtYmVyKShwcm9wZXJ0aWVzLmNoZWNrTWF4aW11bUhvdXIpKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ2Z1bGxDaGVja0ZpeERhdGEnLCByb3MudmFsaWRhdGVCb29sZWFuKShwcm9wZXJ0aWVzLmZ1bGxDaGVja0ZpeERhdGEpKTtcbiAgICBpZihwcm9wZXJ0aWVzLmZ1bGxDaGVja01vZGVsICYmICh0eXBlb2YgcHJvcGVydGllcy5mdWxsQ2hlY2tNb2RlbCkgIT09ICdvYmplY3QnKSB7XG4gICAgICAgIGVycm9ycy5jb2xsZWN0KHJvcy5wcm9wZXJ0eVZhbGlkYXRvcignZnVsbENoZWNrTW9kZWwnLCByb3MudmFsaWRhdGVBbGxvd2VkVmFsdWVzKSh7XG4gICAgICAgICAgZGF0YTogcHJvcGVydGllcy5mdWxsQ2hlY2tNb2RlbCxcbiAgICAgICAgICBhbGxvd2VkVmFsdWVzOiBbMSwyXSxcbiAgICAgICAgfSkpO1xuICAgIH1cbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ2Z1bGxDaGVja01vZGVsJywgcm9zLnZhbGlkYXRlTnVtYmVyKShwcm9wZXJ0aWVzLmZ1bGxDaGVja01vZGVsKSk7XG4gICAgZXJyb3JzLmNvbGxlY3Qocm9zLnByb3BlcnR5VmFsaWRhdG9yKCdpbmNyZW1lbnRhbENoZWNrVmFsaWRGYWlsTm90aWNlVmFsdWUnLCByb3MudmFsaWRhdGVOdW1iZXIpKHByb3BlcnRpZXMuaW5jcmVtZW50YWxDaGVja1ZhbGlkRmFpbE5vdGljZVZhbHVlKSk7XG4gICAgZXJyb3JzLmNvbGxlY3Qocm9zLnByb3BlcnR5VmFsaWRhdG9yKCdpbmNyZW1lbnRhbERhdGFDaGVjaycsIHJvcy52YWxpZGF0ZUJvb2xlYW4pKHByb3BlcnRpZXMuaW5jcmVtZW50YWxEYXRhQ2hlY2spKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ2luY3JlbWVudGFsQ2hlY2tWYWxpZEZhaWxOb3RpY2VUaW1lcycsIHJvcy52YWxpZGF0ZU51bWJlcikocHJvcGVydGllcy5pbmNyZW1lbnRhbENoZWNrVmFsaWRGYWlsTm90aWNlVGltZXMpKTtcbiAgICBpZihwcm9wZXJ0aWVzLmZ1bGxDaGVja01heFJlYWRCcHMgJiYgKHR5cGVvZiBwcm9wZXJ0aWVzLmZ1bGxDaGVja01heFJlYWRCcHMpICE9PSAnb2JqZWN0Jykge1xuICAgICAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ2Z1bGxDaGVja01heFJlYWRCcHMnLCByb3MudmFsaWRhdGVSYW5nZSkoe1xuICAgICAgICAgICAgZGF0YTogcHJvcGVydGllcy5mdWxsQ2hlY2tNYXhSZWFkQnBzLFxuICAgICAgICAgICAgbWluOiAwLFxuICAgICAgICAgICAgbWF4OiA5MDA3MTk5MjU0NzQwOTkxLFxuICAgICAgICAgIH0pKTtcbiAgICB9XG4gICAgZXJyb3JzLmNvbGxlY3Qocm9zLnByb3BlcnR5VmFsaWRhdG9yKCdmdWxsQ2hlY2tNYXhSZWFkQnBzJywgcm9zLnZhbGlkYXRlTnVtYmVyKShwcm9wZXJ0aWVzLmZ1bGxDaGVja01heFJlYWRCcHMpKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ2Z1bGxDaGVja1ZhbGlkRmFpbE5vdGljZScsIHJvcy52YWxpZGF0ZUJvb2xlYW4pKHByb3BlcnRpZXMuZnVsbENoZWNrVmFsaWRGYWlsTm90aWNlKSk7XG4gICAgZXJyb3JzLmNvbGxlY3Qocm9zLnByb3BlcnR5VmFsaWRhdG9yKCdmdWxsQ2hlY2tFcnJvck5vdGljZScsIHJvcy52YWxpZGF0ZUJvb2xlYW4pKHByb3BlcnRpZXMuZnVsbENoZWNrRXJyb3JOb3RpY2UpKTtcbiAgICBpZihwcm9wZXJ0aWVzLmluY3JlbWVudGFsQ2hlY2tWYWxpZEZhaWxOb3RpY2VQZXJpb2QgJiYgKHR5cGVvZiBwcm9wZXJ0aWVzLmluY3JlbWVudGFsQ2hlY2tWYWxpZEZhaWxOb3RpY2VQZXJpb2QpICE9PSAnb2JqZWN0Jykge1xuICAgICAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ2luY3JlbWVudGFsQ2hlY2tWYWxpZEZhaWxOb3RpY2VQZXJpb2QnLCByb3MudmFsaWRhdGVBbGxvd2VkVmFsdWVzKSh7XG4gICAgICAgICAgZGF0YTogcHJvcGVydGllcy5pbmNyZW1lbnRhbENoZWNrVmFsaWRGYWlsTm90aWNlUGVyaW9kLFxuICAgICAgICAgIGFsbG93ZWRWYWx1ZXM6IFsxLDIsMyw0XSxcbiAgICAgICAgfSkpO1xuICAgIH1cbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ2luY3JlbWVudGFsQ2hlY2tWYWxpZEZhaWxOb3RpY2VQZXJpb2QnLCByb3MudmFsaWRhdGVOdW1iZXIpKHByb3BlcnRpZXMuaW5jcmVtZW50YWxDaGVja1ZhbGlkRmFpbE5vdGljZVBlcmlvZCkpO1xuICAgIGVycm9ycy5jb2xsZWN0KHJvcy5wcm9wZXJ0eVZhbGlkYXRvcignaW5jcmVtZW50YWxDaGVja0RlbGF5Tm90aWNlVGltZXMnLCByb3MudmFsaWRhdGVOdW1iZXIpKHByb3BlcnRpZXMuaW5jcmVtZW50YWxDaGVja0RlbGF5Tm90aWNlVGltZXMpKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ2Z1bGxDaGVja1JlZmVyRW5kcG9pbnQnLCByb3MudmFsaWRhdGVTdHJpbmcpKHByb3BlcnRpZXMuZnVsbENoZWNrUmVmZXJFbmRwb2ludCkpO1xuICAgIGVycm9ycy5jb2xsZWN0KHJvcy5wcm9wZXJ0eVZhbGlkYXRvcignZnVsbERhdGFDaGVjaycsIHJvcy52YWxpZGF0ZUJvb2xlYW4pKHByb3BlcnRpZXMuZnVsbERhdGFDaGVjaykpO1xuICAgIGVycm9ycy5jb2xsZWN0KHJvcy5wcm9wZXJ0eVZhbGlkYXRvcignaW5jcmVtZW50YWxDaGVja1ZhbGlkRmFpbE5vdGljZScsIHJvcy52YWxpZGF0ZUJvb2xlYW4pKHByb3BlcnRpZXMuaW5jcmVtZW50YWxDaGVja1ZhbGlkRmFpbE5vdGljZSkpO1xuICAgIGVycm9ycy5jb2xsZWN0KHJvcy5wcm9wZXJ0eVZhbGlkYXRvcignZnVsbENoZWNrTm90aWNlVmFsdWUnLCByb3MudmFsaWRhdGVOdW1iZXIpKHByb3BlcnRpZXMuZnVsbENoZWNrTm90aWNlVmFsdWUpKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ2luY3JlbWVudGFsQ2hlY2tFcnJvck5vdGljZScsIHJvcy52YWxpZGF0ZUJvb2xlYW4pKHByb3BlcnRpZXMuaW5jcmVtZW50YWxDaGVja0Vycm9yTm90aWNlKSk7XG4gICAgcmV0dXJuIGVycm9ycy53cmFwKCdzdXBwbGllZCBwcm9wZXJ0aWVzIG5vdCBjb3JyZWN0IGZvciBcIkRhdGFDaGVja0NvbmZpZ3VyZVByb3BlcnR5XCInKTtcbn1cblxuLyoqXG4gKiBSZW5kZXJzIHRoZSBBbGlDbG91ZCBST1MgUmVzb3VyY2UgcHJvcGVydGllcyBvZiBhbiBgQUxJWVVOOjpEVFM6Ok1pZ3JhdGlvbkpvYjIuRGF0YUNoZWNrQ29uZmlndXJlYCByZXNvdXJjZVxuICpcbiAqIEBwYXJhbSBwcm9wZXJ0aWVzIC0gdGhlIFR5cGVTY3JpcHQgcHJvcGVydGllcyBvZiBhIGBEYXRhQ2hlY2tDb25maWd1cmVQcm9wZXJ0eWBcbiAqXG4gKiBAcmV0dXJucyB0aGUgQWxpQ2xvdWQgUk9TIFJlc291cmNlIHByb3BlcnRpZXMgb2YgYW4gYEFMSVlVTjo6RFRTOjpNaWdyYXRpb25Kb2IyLkRhdGFDaGVja0NvbmZpZ3VyZWAgcmVzb3VyY2UuXG4gKi9cbi8vIEB0cy1pZ25vcmUgVFM2MTMzXG5mdW5jdGlvbiByb3NNaWdyYXRpb25Kb2IyRGF0YUNoZWNrQ29uZmlndXJlUHJvcGVydHlUb1Jvc1RlbXBsYXRlKHByb3BlcnRpZXM6IGFueSk6IGFueSB7XG4gICAgaWYgKCFyb3MuY2FuSW5zcGVjdChwcm9wZXJ0aWVzKSkgeyByZXR1cm4gcHJvcGVydGllczsgfVxuICAgIFJvc01pZ3JhdGlvbkpvYjJfRGF0YUNoZWNrQ29uZmlndXJlUHJvcGVydHlWYWxpZGF0b3IocHJvcGVydGllcykuYXNzZXJ0U3VjY2VzcygpO1xuICAgIHJldHVybiB7XG4gICAgICAnZnVsbENoZWNrTWF4UmVhZFJwcyc6IHJvcy5udW1iZXJUb1Jvc1RlbXBsYXRlKHByb3BlcnRpZXMuZnVsbENoZWNrTWF4UmVhZFJwcyksXG4gICAgICAnZGF0YUNoZWNrTm90aWNlUGhvbmUnOiByb3Muc3RyaW5nVG9Sb3NUZW1wbGF0ZShwcm9wZXJ0aWVzLmRhdGFDaGVja05vdGljZVBob25lKSxcbiAgICAgICdpbmNyZW1lbnRhbENoZWNrRGVsYXlOb3RpY2UnOiByb3MuYm9vbGVhblRvUm9zVGVtcGxhdGUocHJvcGVydGllcy5pbmNyZW1lbnRhbENoZWNrRGVsYXlOb3RpY2UpLFxuICAgICAgJ2luY3JlbWVudGFsQ2hlY2tEZWxheU5vdGljZVZhbHVlJzogcm9zLm51bWJlclRvUm9zVGVtcGxhdGUocHJvcGVydGllcy5pbmNyZW1lbnRhbENoZWNrRGVsYXlOb3RpY2VWYWx1ZSksXG4gICAgICAnaW5jcmVtZW50YWxDaGVja0RlbGF5Tm90aWNlUGVyaW9kJzogcm9zLm51bWJlclRvUm9zVGVtcGxhdGUocHJvcGVydGllcy5pbmNyZW1lbnRhbENoZWNrRGVsYXlOb3RpY2VQZXJpb2QpLFxuICAgICAgJ2RhdGFDaGVja0RiTGlzdCc6IHJvcy5zdHJpbmdUb1Jvc1RlbXBsYXRlKHByb3BlcnRpZXMuZGF0YUNoZWNrRGJMaXN0KSxcbiAgICAgICdjaGVja01heGltdW1Ib3VyRW5hYmxlJzogcm9zLm51bWJlclRvUm9zVGVtcGxhdGUocHJvcGVydGllcy5jaGVja01heGltdW1Ib3VyRW5hYmxlKSxcbiAgICAgICdmdWxsQ2hlY2tSYXRpbyc6IHJvcy5udW1iZXJUb1Jvc1RlbXBsYXRlKHByb3BlcnRpZXMuZnVsbENoZWNrUmF0aW8pLFxuICAgICAgJ2NoZWNrTWF4aW11bUhvdXInOiByb3MubnVtYmVyVG9Sb3NUZW1wbGF0ZShwcm9wZXJ0aWVzLmNoZWNrTWF4aW11bUhvdXIpLFxuICAgICAgJ2Z1bGxDaGVja0ZpeERhdGEnOiByb3MuYm9vbGVhblRvUm9zVGVtcGxhdGUocHJvcGVydGllcy5mdWxsQ2hlY2tGaXhEYXRhKSxcbiAgICAgICdmdWxsQ2hlY2tNb2RlbCc6IHJvcy5udW1iZXJUb1Jvc1RlbXBsYXRlKHByb3BlcnRpZXMuZnVsbENoZWNrTW9kZWwpLFxuICAgICAgJ2luY3JlbWVudGFsQ2hlY2tWYWxpZEZhaWxOb3RpY2VWYWx1ZSc6IHJvcy5udW1iZXJUb1Jvc1RlbXBsYXRlKHByb3BlcnRpZXMuaW5jcmVtZW50YWxDaGVja1ZhbGlkRmFpbE5vdGljZVZhbHVlKSxcbiAgICAgICdpbmNyZW1lbnRhbERhdGFDaGVjayc6IHJvcy5ib29sZWFuVG9Sb3NUZW1wbGF0ZShwcm9wZXJ0aWVzLmluY3JlbWVudGFsRGF0YUNoZWNrKSxcbiAgICAgICdpbmNyZW1lbnRhbENoZWNrVmFsaWRGYWlsTm90aWNlVGltZXMnOiByb3MubnVtYmVyVG9Sb3NUZW1wbGF0ZShwcm9wZXJ0aWVzLmluY3JlbWVudGFsQ2hlY2tWYWxpZEZhaWxOb3RpY2VUaW1lcyksXG4gICAgICAnZnVsbENoZWNrTWF4UmVhZEJwcyc6IHJvcy5udW1iZXJUb1Jvc1RlbXBsYXRlKHByb3BlcnRpZXMuZnVsbENoZWNrTWF4UmVhZEJwcyksXG4gICAgICAnZnVsbENoZWNrVmFsaWRGYWlsTm90aWNlJzogcm9zLmJvb2xlYW5Ub1Jvc1RlbXBsYXRlKHByb3BlcnRpZXMuZnVsbENoZWNrVmFsaWRGYWlsTm90aWNlKSxcbiAgICAgICdmdWxsQ2hlY2tFcnJvck5vdGljZSc6IHJvcy5ib29sZWFuVG9Sb3NUZW1wbGF0ZShwcm9wZXJ0aWVzLmZ1bGxDaGVja0Vycm9yTm90aWNlKSxcbiAgICAgICdpbmNyZW1lbnRhbENoZWNrVmFsaWRGYWlsTm90aWNlUGVyaW9kJzogcm9zLm51bWJlclRvUm9zVGVtcGxhdGUocHJvcGVydGllcy5pbmNyZW1lbnRhbENoZWNrVmFsaWRGYWlsTm90aWNlUGVyaW9kKSxcbiAgICAgICdpbmNyZW1lbnRhbENoZWNrRGVsYXlOb3RpY2VUaW1lcyc6IHJvcy5udW1iZXJUb1Jvc1RlbXBsYXRlKHByb3BlcnRpZXMuaW5jcmVtZW50YWxDaGVja0RlbGF5Tm90aWNlVGltZXMpLFxuICAgICAgJ2Z1bGxDaGVja1JlZmVyRW5kcG9pbnQnOiByb3Muc3RyaW5nVG9Sb3NUZW1wbGF0ZShwcm9wZXJ0aWVzLmZ1bGxDaGVja1JlZmVyRW5kcG9pbnQpLFxuICAgICAgJ2Z1bGxEYXRhQ2hlY2snOiByb3MuYm9vbGVhblRvUm9zVGVtcGxhdGUocHJvcGVydGllcy5mdWxsRGF0YUNoZWNrKSxcbiAgICAgICdpbmNyZW1lbnRhbENoZWNrVmFsaWRGYWlsTm90aWNlJzogcm9zLmJvb2xlYW5Ub1Jvc1RlbXBsYXRlKHByb3BlcnRpZXMuaW5jcmVtZW50YWxDaGVja1ZhbGlkRmFpbE5vdGljZSksXG4gICAgICAnZnVsbENoZWNrTm90aWNlVmFsdWUnOiByb3MubnVtYmVyVG9Sb3NUZW1wbGF0ZShwcm9wZXJ0aWVzLmZ1bGxDaGVja05vdGljZVZhbHVlKSxcbiAgICAgICdpbmNyZW1lbnRhbENoZWNrRXJyb3JOb3RpY2UnOiByb3MuYm9vbGVhblRvUm9zVGVtcGxhdGUocHJvcGVydGllcy5pbmNyZW1lbnRhbENoZWNrRXJyb3JOb3RpY2UpLFxuICAgIH07XG59XG5cbmV4cG9ydCBuYW1lc3BhY2UgUm9zTWlncmF0aW9uSm9iMiB7XG4gICAgLyoqXG4gICAgICogQHN0YWJpbGl0eSBleHRlcm5hbFxuICAgICAqL1xuICAgIGV4cG9ydCBpbnRlcmZhY2UgRGVzdGluYXRpb25FbmRwb2ludFByb3BlcnR5IHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBQcm9wZXJ0eSByb2xlOiBUaGUgbmFtZSBvZiB0aGUgUmVzb3VyY2UgQWNjZXNzIE1hbmFnZW1lbnQgKFJBTSkgcm9sZSBjb25maWd1cmVkIGZvciB0aGUgQWxpYmFiYSBDbG91ZCBhY2NvdW50IHRoYXQgb3ducyB0aGUgZGVzdGluYXRpb24gaW5zdGFuY2UuXG4gICAgICogKipOb3RlKio6IFRoaXMgcGFyYW1ldGVyIGlzIHJlcXVpcmVkIHdoZW4geW91IG1pZ3JhdGUgb3Igc3luY2hyb25pemUgZGF0YSBhY3Jvc3MgZGlmZmVyZW50IEFsaWJhYmEgQ2xvdWQgYWNjb3VudHMuXG4gICAgICAgICAqL1xuICAgICAgICByZWFkb25seSByb2xlPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuICAgICAgICAvKipcbiAgICAgICAgICogQFByb3BlcnR5IG9yYWNsZVNpZDogVGhlIHN5c3RlbSBJRCAoU0lEKSBvZiB0aGUgT3JhY2xlIGRhdGFiYXNlLlxuICAgICAqICoqTm90ZSoqOiBUaGlzIHBhcmFtZXRlciBpcyByZXF1aXJlZCBvbmx5IHdoZW4gKipFbmdpbmVOYW1lKiogaXMgc2V0IHRvICoqT1JBQ0xFKiogYW5kIHRoZSBPcmFjbGUgZGF0YWJhc2UgaXMgZGVwbG95ZWQgaW4gYW4gYXJjaGl0ZWN0dXJlIHRoYXQgaXMgbm90IGEgUmVhbCBBcHBsaWNhdGlvbiBDbHVzdGVyIChSQUMpLlxuICAgICAgICAgKi9cbiAgICAgICAgcmVhZG9ubHkgb3JhY2xlU2lkPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuICAgICAgICAvKipcbiAgICAgICAgICogQFByb3BlcnR5IHVzZXJOYW1lOiBUaGUgZGF0YWJhc2UgYWNjb3VudCBvZiB0aGUgZGVzdGluYXRpb24gZGF0YWJhc2UuXG4gICAgICogKipOb3RlKio6IEluIG1vc3QgY2FzZXMsIHRoaXMgcGFyYW1ldGVyIGlzIHJlcXVpcmVkLiBUaGUgcGVybWlzc2lvbnMgdGhhdCBhcmUgcmVxdWlyZWQgZm9yIHRoZSBkYXRhYmFzZSBhY2NvdW50IHZhcnkgd2l0aCB0aGUgbWlncmF0aW9uIG9yIHN5bmNocm9uaXphdGlvbiBzY2VuYXJpby5cbiAgICAgICAgICovXG4gICAgICAgIHJlYWRvbmx5IHVzZXJOYW1lPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuICAgICAgICAvKipcbiAgICAgICAgICogQFByb3BlcnR5IG93bmVySWQ6IFRoZSBJRCBvZiB0aGUgQWxpYmFiYSBDbG91ZCBhY2NvdW50IHRvIHdoaWNoIHRoZSBkZXN0aW5hdGlvbiBkYXRhYmFzZSBiZWxvbmdzLlxuICAgICAqICoqTm90ZSoqOiBZb3UgY2FuIHNwZWNpZnkgdGhpcyBwYXJhbWV0ZXIgdG8gbWlncmF0ZSBvciBzeW5jaHJvbml6ZSBkYXRhIGFjcm9zcyBkaWZmZXJlbnQgQWxpYmFiYSBDbG91ZCBhY2NvdW50cy4gSW4gdGhpcyBjYXNlLCB5b3UgbXVzdCBzcGVjaWZ5ICoqUm9sZSoqLlxuICAgICAgICAgKi9cbiAgICAgICAgcmVhZG9ubHkgb3duZXJJZD86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBQcm9wZXJ0eSBpbnN0YW5jZUlkOiBUaGUgSUQgb2YgdGhlIGRlc3RpbmF0aW9uIGluc3RhbmNlLiBJZiB0aGUgZGVzdGluYXRpb24gaW5zdGFuY2UgaXMgYW4gQWxpYmFiYSBDbG91ZCBkYXRhYmFzZSBpbnN0YW5jZSwgeW91IG11c3Qgc3BlY2lmeSB0aGUgSUQgb2YgdGhlIGRhdGFiYXNlIGluc3RhbmNlLiBGb3IgZXhhbXBsZSwgXG4gICAgICogLSBJZiB0aGUgZGVzdGluYXRpb24gaW5zdGFuY2UgaXMgYW4gQXBzYXJhREIgUkRTIGZvciBNeVNRTCBpbnN0YW5jZSwgeW91IG11c3Qgc3BlY2lmeSB0aGUgSUQgb2YgdGhlIEFwc2FyYURCIFJEUyBmb3IgTXlTUUwgaW5zdGFuY2UuIFxuICAgICAqIC0gSWYgdGhlIGRlc3RpbmF0aW9uIGluc3RhbmNlIGlzIGEgc2VsZi1tYW5hZ2VkIGRhdGFiYXNlLCB0aGUgdmFsdWUgb2YgdGhpcyBwYXJhbWV0ZXIgdmFyaWVzIHdpdGggdGhlIHZhbHVlIG9mIFNvdXJjZUVuZHBvaW50SW5zdGFuY2VUeXBlLlxuICAgICAqIC0gSWYgSW5zdGFuY2VUeXBlIGlzIHNldCB0byBFQ1MsIHlvdSBtdXN0IHNwZWNpZnkgdGhlIElEIG9mIHRoZSBFQ1MgaW5zdGFuY2UuXG4gICAgICogLSBJZiBJbnN0YW5jZVR5cGUgaXMgc2V0IHRvIERHLCB5b3UgbXVzdCBzcGVjaWZ5IHRoZSBJRCBvZiB0aGUgZGF0YWJhc2UgZ2F0ZXdheS5cbiAgICAgKiAtIElmIEluc3RhbmNlVHlwZSBpcyBzZXQgdG8gRVhQUkVTUyBvciBDRU4sIHlvdSBtdXN0IHNwZWNpZnkgdGhlIElEIG9mIHRoZSBWUEMgdGhhdCBpcyBjb25uZWN0ZWQgdG8gdGhlIGRlc3RpbmF0aW9uIGluc3RhbmNlLlxuICAgICAqICoqTm90ZSoqOiBJZiBEZXN0aW5hdGlvbkVuZHBvaW50SW5zdGFuY2VUeXBlIGlzIHNldCB0byBDRU4sIHlvdSBtdXN0IGFsc28gc3BlY2lmeSB0aGUgSUQgb2YgdGhlIENFTiBpbnN0YW5jZSBpbiB0aGUgUmVzZXJ2ZSBwYXJhbWV0ZXIuXG4gICAgICAgICAqL1xuICAgICAgICByZWFkb25seSBpbnN0YW5jZUlkPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuICAgICAgICAvKipcbiAgICAgICAgICogQFByb3BlcnR5IGlwOiBUaGUgSVAgYWRkcmVzcyBvZiB0aGUgZGVzdGluYXRpb24gaW5zdGFuY2UuIFxuICAgICAqICoqTm90ZSoqOiBUaGlzIHBhcmFtZXRlciBpcyByZXF1aXJlZCBvbmx5IHdoZW4gKipJbnN0YW5jZVR5cGUqKiBpcyBzZXQgdG8gKipPVEhFUioqLCAqKkVYUFJFU1MqKiwgKipERyoqLCBvciAqKkNFTioqLlxuICAgICAgICAgKi9cbiAgICAgICAgcmVhZG9ubHkgaXA/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAUHJvcGVydHkgcG9ydDogVGhlIHBvcnQgbnVtYmVyIG9mIHRoZSBkZXN0aW5hdGlvbiBpbnN0YW5jZS5cbiAgICAgKiAqKk5vdGUqKjogVGhpcyBwYXJhbWV0ZXIgaXMgcmVxdWlyZWQgb25seSB3aGVuIHRoZSBkZXN0aW5hdGlvbiBpbnN0YW5jZSBpcyBhIHNlbGYtbWFuYWdlZCBkYXRhYmFzZS5cbiAgICAgICAgICovXG4gICAgICAgIHJlYWRvbmx5IHBvcnQ/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAUHJvcGVydHkgZGF0YWJhc2VOYW1lOiBUaGUgbmFtZSBvZiB0aGUgZGF0YWJhc2Ugd2hpY2ggY29udGFpbnMgdGhlIG9iamVjdHMgdG8gYmUgbWlncmF0ZWQgaW4gdGhlIGRlc3RpbmF0aW9uIGluc3RhbmNlLlxuICAgICAqICoqTm90ZSoqOiBUaGlzIHBhcmFtZXRlciBpcyByZXF1aXJlZCBvbmx5IHdoZW4gdGhlIGRlc3RpbmF0aW9uIGluc3RhbmNlIGlzIGEgUG9sYXJEQiBmb3IgUG9zdGdyZVNRTCBjbHVzdGVyIChjb21wYXRpYmxlIHdpdGggT3JhY2xlKSwgYSBQb3N0Z3JlU1FMIGRhdGFiYXNlLCBvciBhIE1vbmdvREIgZGF0YWJhc2UuXG4gICAgICAgICAqL1xuICAgICAgICByZWFkb25seSBkYXRhYmFzZU5hbWU/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAUHJvcGVydHkgcmVnaW9uOiBUaGUgSUQgb2YgdGhlIHJlZ2lvbiBpbiB3aGljaCB0aGUgZGVzdGluYXRpb24gaW5zdGFuY2UgcmVzaWRlcy5cbiAgICAgKiAqKk5vdGUqKjogSWYgdGhlIHNvdXJjZSBpbnN0YW5jZSBpcyBhbiBBbGliYWJhIENsb3VkIGRhdGFiYXNlIGluc3RhbmNlLCB0aGlzIHBhcmFtZXRlciBpcyByZXF1aXJlZC5cbiAgICAgICAgICovXG4gICAgICAgIHJlYWRvbmx5IHJlZ2lvbj86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBQcm9wZXJ0eSBpbnN0YW5jZVR5cGU6IFRoZSB0eXBlIG9mIHRoZSBkZXN0aW5hdGlvbiBpbnN0YW5jZS4gVmFsaWQgdmFsdWVzOlxuICAgICAqIEFsaWJhYmEgQ2xvdWQgZGF0YWJhc2UgaW5zdGFuY2VzXG4gICAgICogLSAqKlJEUyoqOiBBcHNhcmFEQiBSRFMgZm9yIE15U1FMIGluc3RhbmNlLCBBcHNhcmFEQiBSRFMgZm9yIFNRTCBTZXJ2ZXIgaW5zdGFuY2UsIEFwc2FyYURCIFJEUyBmb3IgUG9zdGdyZVNRTCBpbnN0YW5jZSwgb3IgQXBzYXJhREIgUkRTIGZvciBNYXJpYURCIFRYIGluc3RhbmNlXG4gICAgICogLSAqKlBvbGFyREIqKjogUG9sYXJEQiBmb3IgTXlTUUwgY2x1c3RlclxuICAgICAqIC0gKipESVNUUklCVVRFRF9QT0xBUkRCWDEwKio6IFBvbGFyREItWCAxLjAgKGZvcm1lcmx5IERSRFMpIGluc3RhbmNlXG4gICAgICogLSAqKlBPTEFSREJYMjAqKjogUG9sYXJEQi1YIDIuMCBpbnN0YW5jZVxuICAgICAqIC0gKipSRURJUyoqOiBBcHNhcmFEQiBmb3IgUmVkaXMgaW5zdGFuY2VcbiAgICAgKiAtICoqQURTKio6IEFuYWx5dGljREIgZm9yIE15U1FMIFYyLjAgY2x1c3RlciBvciBBbmFseXRpY0RCIGZvciBNeVNRTCBWMy4wIGNsdXN0ZXJcbiAgICAgKiAtICoqTU9OR09EQioqOiBBcHNhcmFEQiBmb3IgTW9uZ29EQiBpbnN0YW5jZVxuICAgICAqIC0gKipHUkVFTlBMVU0qKjogQW5hbHl0aWNEQiBmb3IgUG9zdGdyZVNRTCBpbnN0YW5jZVxuICAgICAqIC0gKipEQVRBSFVCKio6IERhdGFIdWIgcHJvamVjdFxuICAgICAqIC0gKipFTEsqKjogRWxhc3RpY3NlYXJjaCBjbHVzdGVyXG4gICAgICogLSAqKlRhYmxlc3RvcmUqKjogVGFibGVzdG9yZSBpbnN0YW5jZVxuICAgICAqIC0gKipPRFBTKio6IE1heENvbXB1dGUgcHJvamVjdFxuICAgICAqIFNlbGYtbWFuYWdlZCBkYXRhYmFzZXNcbiAgICAgKiAtICoqT1RIRVIqKjogc2VsZi1tYW5hZ2VkIGRhdGFiYXNlIHdpdGggYSBwdWJsaWMgSVAgYWRkcmVzc1xuICAgICAqIC0gKipFQ1MqKjogc2VsZi1tYW5hZ2VkIGRhdGFiYXNlIGhvc3RlZCBvbiBhbiBFQ1MgaW5zdGFuY2VcbiAgICAgKiAtICoqRVhQUkVTUyoqOiBzZWxmLW1hbmFnZWQgZGF0YWJhc2UgY29ubmVjdGVkIG92ZXIgRXhwcmVzcyBDb25uZWN0XG4gICAgICogLSAqKkNFTioqOiBzZWxmLW1hbmFnZWQgZGF0YWJhc2UgY29ubmVjdGVkIG92ZXIgQ0VOXG4gICAgICogLSAqKkRHKio6IHNlbGYtbWFuYWdlZCBkYXRhYmFzZSBjb25uZWN0ZWQgb3ZlciBEYXRhYmFzZSBHYXRld2F5XG4gICAgICogKipOb3RlKio6IElmIHRoZSBkZXN0aW5hdGlvbiBpbnN0YW5jZSBpcyBhIFBvbGFyREIgZm9yIFBvc3RncmVTUUwgY2x1c3RlciAoY29tcGF0aWJsZSB3aXRoIE9yYWNsZSksIHlvdSBtdXN0IHNldCB0aGlzIHBhcmFtZXRlciB0byBPVEhFUiBvciBFWFBSRVNTLiBUaGVuLCB5b3UgY2FuIGNvbm5lY3QgdGhlIFBvbGFyREIgZm9yIFBvc3RncmVTUUwgY2x1c3RlciAoY29tcGF0aWJsZSB3aXRoIE9yYWNsZSkgdG8gRFRTIGFzIGEgc2VsZi1tYW5hZ2VkIGRhdGFiYXNlIGJ5IHVzaW5nIGEgcHVibGljIElQIGFkZHJlc3Mgb3IgRXhwcmVzcyBDb25uZWN0LlxuICAgICAqIElmIHRoZSBkZXN0aW5hdGlvbiBpbnN0YW5jZSBpcyBhIE1lc3NhZ2UgUXVldWUgZm9yIEFwYWNoZSBLYWZrYSBpbnN0YW5jZSwgeW91IG11c3Qgc2V0IHRoaXMgcGFyYW1ldGVyIHRvIEVDUyBvciBFWFBSRVNTLiBUaGVuLCB5b3UgY2FuIGNvbm5lY3QgdGhlIE1lc3NhZ2UgUXVldWUgZm9yIEFwYWNoZSBLYWZrYSBpbnN0YW5jZSB0byBEVFMgYXMgYSBzZWxmLW1hbmFnZWQgZGF0YWJhc2UgY29ubmVjdGVkIG92ZXIgRUNTIG9yIEV4cHJlc3MgQ29ubmVjdC5cbiAgICAgKiBJZiB0aGUgZGVzdGluYXRpb24gaW5zdGFuY2UgaXMgYSBzZWxmLW1hbmFnZWQgZGF0YWJhc2UsIHlvdSBtdXN0IGRlcGxveSB0aGUgbmV0d29yayBlbnZpcm9ubWVudCBmb3IgdGhlIGRhdGFiYXNlLlxuICAgICAgICAgKi9cbiAgICAgICAgcmVhZG9ubHkgaW5zdGFuY2VUeXBlOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAUHJvcGVydHkgZW5naW5lTmFtZTogVGhlIGRhdGFiYXNlIGVuZ2luZSBvZiB0aGUgZGVzdGluYXRpb24gaW5zdGFuY2UuIFZhbGlkIHZhbHVlczpcbiAgICAgKiAtICoqTVlTUUwqKjogQXBzYXJhREIgUkRTIGZvciBNeVNRTCBpbnN0YW5jZSBvciBzZWxmLW1hbmFnZWQgTXlTUUwgZGF0YWJhc2VcbiAgICAgKiAtICoqTUFSSUFEQioqOiBBcHNhcmFEQiBSRFMgZm9yIE1hcmlhREIgVFggaW5zdGFuY2VcbiAgICAgKiAtICoqUG9sYXJEQioqOiBQb2xhckRCIGZvciBNeVNRTCBjbHVzdGVyXG4gICAgICogLSAqKlBPTEFSREJfTyoqOiBQb2xhckRCIGZvciBQb3N0Z3JlU1FMIGNsdXN0ZXIgKGNvbXBhdGlibGUgd2l0aCBPcmFjbGUpXG4gICAgICogLSAqKlBPTEFSREJYMTAqKjogUG9sYXJEQi1YIDEuMCBpbnN0YW5jZVxuICAgICAqIC0gKipQT0xBUkRCWDIwKio6IFBvbGFyREItWCAyLjAgaW5zdGFuY2VcbiAgICAgKiAtICoqT1JBQ0xFKio6IHNlbGYtbWFuYWdlZCBPcmFjbGUgZGF0YWJhc2VcbiAgICAgKiAtICoqUE9TVEdSRVNRTCoqOiBBcHNhcmFEQiBSRFMgZm9yIFBvc3RncmVTUUwgaW5zdGFuY2Ugb3Igc2VsZi1tYW5hZ2VkIFBvc3RncmVTUUwgZGF0YWJhc2VcbiAgICAgKiAtICoqTVNTUUwqKjogQXBzYXJhREIgUkRTIGZvciBTUUwgU2VydmVyIGluc3RhbmNlIG9yIHNlbGYtbWFuYWdlZCBTUUwgU2VydmVyIGRhdGFiYXNlXG4gICAgICogLSAqKkFEUyoqOiBBbmFseXRpY0RCIGZvciBNeVNRTCBWMi4wIGNsdXN0ZXJcbiAgICAgKiAtICoqQURCMzAqKjogQW5hbHl0aWNEQiBmb3IgTXlTUUwgVjMuMCBjbHVzdGVyLSAqKk1PTkdPREIqKjogQXBzYXJhREIgZm9yIE1vbmdvREIgaW5zdGFuY2Ugb3Igc2VsZi1tYW5hZ2VkIE1vbmdvREIgZGF0YWJhc2VcbiAgICAgKiAtICoqR1JFRU5QTFVNKio6IEFuYWx5dGljREIgZm9yIFBvc3RncmVTUUwgaW5zdGFuY2VcbiAgICAgKiAtICoqS0FGS0EqKjogTWVzc2FnZSBRdWV1ZSBmb3IgQXBhY2hlIEthZmthIGluc3RhbmNlIG9yIHNlbGYtbWFuYWdlZCBLYWZrYSBjbHVzdGVyXG4gICAgICogLSAqKkRBVEFIVUIqKjogRGF0YUh1YiBwcm9qZWN0LSAqKkRCMioqOiBzZWxmLW1hbmFnZWQgRGIyIGZvciBMVVcgZGF0YWJhc2VcbiAgICAgKiAtICoqQVM0MDAqKjogc2VsZi1tYW5hZ2VkIERiMiBmb3IgaSBkYXRhYmFzZVxuICAgICAqIC0gKipPRFBTKio6IE1heENvbXB1dGUgcHJvamVjdFxuICAgICAqIC0gKipUYWJsZXN0b3JlKio6IFRhYmxlc3RvcmUgaW5zdGFuY2VcbiAgICAgKiAtICoqRUxLKio6IEVsYXN0aWNzZWFyY2ggY2x1c3RlclxuICAgICAqIC0gKipSRURJUyoqOiBBcHNhcmFEQiBmb3IgUmVkaXMgaW5zdGFuY2Ugb3Igc2VsZi1tYW5hZ2VkIFJlZGlzIGRhdGFiYXNlXG4gICAgICogKipOb3RlKio6IERlZmF1bHQgdmFsdWU6ICoqTVlTUUwqKi5cbiAgICAgKiBJZiB0aGlzIHBhcmFtZXRlciBpcyBzZXQgdG8gKipLQUZLQSoqLCAqKk1PTkdPREIqKiwgb3IgKipQb2xhckRCKiosIHlvdSBtdXN0IGFsc28gc3BlY2lmeSB0aGUgZGF0YWJhc2UgaW5mb3JtYXRpb24gaW4gdGhlIFJlc2VydmUgcGFyYW1ldGVyLlxuICAgICAgICAgKi9cbiAgICAgICAgcmVhZG9ubHkgZW5naW5lTmFtZT86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBQcm9wZXJ0eSBwYXNzd29yZDogVGhlIHBhc3N3b3JkIG9mIHRoZSBkZXN0aW5hdGlvbiBkYXRhYmFzZSBhY2NvdW50LlxuICAgICAgICAgKi9cbiAgICAgICAgcmVhZG9ubHkgcGFzc3dvcmQ/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG4gICAgfVxufVxuLyoqXG4gKiBEZXRlcm1pbmUgd2hldGhlciB0aGUgZ2l2ZW4gcHJvcGVydGllcyBtYXRjaCB0aG9zZSBvZiBhIGBEZXN0aW5hdGlvbkVuZHBvaW50UHJvcGVydHlgXG4gKlxuICogQHBhcmFtIHByb3BlcnRpZXMgLSB0aGUgVHlwZVNjcmlwdCBwcm9wZXJ0aWVzIG9mIGEgYERlc3RpbmF0aW9uRW5kcG9pbnRQcm9wZXJ0eWBcbiAqXG4gKiBAcmV0dXJucyB0aGUgcmVzdWx0IG9mIHRoZSB2YWxpZGF0aW9uLlxuICovXG5mdW5jdGlvbiBSb3NNaWdyYXRpb25Kb2IyX0Rlc3RpbmF0aW9uRW5kcG9pbnRQcm9wZXJ0eVZhbGlkYXRvcihwcm9wZXJ0aWVzOiBhbnkpOiByb3MuVmFsaWRhdGlvblJlc3VsdCB7XG4gICAgaWYgKCFyb3MuY2FuSW5zcGVjdChwcm9wZXJ0aWVzKSkgeyByZXR1cm4gcm9zLlZBTElEQVRJT05fU1VDQ0VTUzsgfVxuICAgIGNvbnN0IGVycm9ycyA9IG5ldyByb3MuVmFsaWRhdGlvblJlc3VsdHMoKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ3JvbGUnLCByb3MudmFsaWRhdGVTdHJpbmcpKHByb3BlcnRpZXMucm9sZSkpO1xuICAgIGVycm9ycy5jb2xsZWN0KHJvcy5wcm9wZXJ0eVZhbGlkYXRvcignb3JhY2xlU2lkJywgcm9zLnZhbGlkYXRlU3RyaW5nKShwcm9wZXJ0aWVzLm9yYWNsZVNpZCkpO1xuICAgIGVycm9ycy5jb2xsZWN0KHJvcy5wcm9wZXJ0eVZhbGlkYXRvcigndXNlck5hbWUnLCByb3MudmFsaWRhdGVTdHJpbmcpKHByb3BlcnRpZXMudXNlck5hbWUpKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ293bmVySWQnLCByb3MudmFsaWRhdGVTdHJpbmcpKHByb3BlcnRpZXMub3duZXJJZCkpO1xuICAgIGVycm9ycy5jb2xsZWN0KHJvcy5wcm9wZXJ0eVZhbGlkYXRvcignaW5zdGFuY2VJZCcsIHJvcy52YWxpZGF0ZVN0cmluZykocHJvcGVydGllcy5pbnN0YW5jZUlkKSk7XG4gICAgZXJyb3JzLmNvbGxlY3Qocm9zLnByb3BlcnR5VmFsaWRhdG9yKCdpcCcsIHJvcy52YWxpZGF0ZVN0cmluZykocHJvcGVydGllcy5pcCkpO1xuICAgIGVycm9ycy5jb2xsZWN0KHJvcy5wcm9wZXJ0eVZhbGlkYXRvcigncG9ydCcsIHJvcy52YWxpZGF0ZVN0cmluZykocHJvcGVydGllcy5wb3J0KSk7XG4gICAgZXJyb3JzLmNvbGxlY3Qocm9zLnByb3BlcnR5VmFsaWRhdG9yKCdkYXRhYmFzZU5hbWUnLCByb3MudmFsaWRhdGVTdHJpbmcpKHByb3BlcnRpZXMuZGF0YWJhc2VOYW1lKSk7XG4gICAgZXJyb3JzLmNvbGxlY3Qocm9zLnByb3BlcnR5VmFsaWRhdG9yKCdyZWdpb24nLCByb3MudmFsaWRhdGVTdHJpbmcpKHByb3BlcnRpZXMucmVnaW9uKSk7XG4gICAgZXJyb3JzLmNvbGxlY3Qocm9zLnByb3BlcnR5VmFsaWRhdG9yKCdpbnN0YW5jZVR5cGUnLCByb3MucmVxdWlyZWRWYWxpZGF0b3IpKHByb3BlcnRpZXMuaW5zdGFuY2VUeXBlKSk7XG4gICAgZXJyb3JzLmNvbGxlY3Qocm9zLnByb3BlcnR5VmFsaWRhdG9yKCdpbnN0YW5jZVR5cGUnLCByb3MudmFsaWRhdGVTdHJpbmcpKHByb3BlcnRpZXMuaW5zdGFuY2VUeXBlKSk7XG4gICAgZXJyb3JzLmNvbGxlY3Qocm9zLnByb3BlcnR5VmFsaWRhdG9yKCdlbmdpbmVOYW1lJywgcm9zLnZhbGlkYXRlU3RyaW5nKShwcm9wZXJ0aWVzLmVuZ2luZU5hbWUpKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ3Bhc3N3b3JkJywgcm9zLnZhbGlkYXRlU3RyaW5nKShwcm9wZXJ0aWVzLnBhc3N3b3JkKSk7XG4gICAgcmV0dXJuIGVycm9ycy53cmFwKCdzdXBwbGllZCBwcm9wZXJ0aWVzIG5vdCBjb3JyZWN0IGZvciBcIkRlc3RpbmF0aW9uRW5kcG9pbnRQcm9wZXJ0eVwiJyk7XG59XG5cbi8qKlxuICogUmVuZGVycyB0aGUgQWxpQ2xvdWQgUk9TIFJlc291cmNlIHByb3BlcnRpZXMgb2YgYW4gYEFMSVlVTjo6RFRTOjpNaWdyYXRpb25Kb2IyLkRlc3RpbmF0aW9uRW5kcG9pbnRgIHJlc291cmNlXG4gKlxuICogQHBhcmFtIHByb3BlcnRpZXMgLSB0aGUgVHlwZVNjcmlwdCBwcm9wZXJ0aWVzIG9mIGEgYERlc3RpbmF0aW9uRW5kcG9pbnRQcm9wZXJ0eWBcbiAqXG4gKiBAcmV0dXJucyB0aGUgQWxpQ2xvdWQgUk9TIFJlc291cmNlIHByb3BlcnRpZXMgb2YgYW4gYEFMSVlVTjo6RFRTOjpNaWdyYXRpb25Kb2IyLkRlc3RpbmF0aW9uRW5kcG9pbnRgIHJlc291cmNlLlxuICovXG4vLyBAdHMtaWdub3JlIFRTNjEzM1xuZnVuY3Rpb24gcm9zTWlncmF0aW9uSm9iMkRlc3RpbmF0aW9uRW5kcG9pbnRQcm9wZXJ0eVRvUm9zVGVtcGxhdGUocHJvcGVydGllczogYW55KTogYW55IHtcbiAgICBpZiAoIXJvcy5jYW5JbnNwZWN0KHByb3BlcnRpZXMpKSB7IHJldHVybiBwcm9wZXJ0aWVzOyB9XG4gICAgUm9zTWlncmF0aW9uSm9iMl9EZXN0aW5hdGlvbkVuZHBvaW50UHJvcGVydHlWYWxpZGF0b3IocHJvcGVydGllcykuYXNzZXJ0U3VjY2VzcygpO1xuICAgIHJldHVybiB7XG4gICAgICAnUm9sZSc6IHJvcy5zdHJpbmdUb1Jvc1RlbXBsYXRlKHByb3BlcnRpZXMucm9sZSksXG4gICAgICAnT3JhY2xlU0lEJzogcm9zLnN0cmluZ1RvUm9zVGVtcGxhdGUocHJvcGVydGllcy5vcmFjbGVTaWQpLFxuICAgICAgJ1VzZXJOYW1lJzogcm9zLnN0cmluZ1RvUm9zVGVtcGxhdGUocHJvcGVydGllcy51c2VyTmFtZSksXG4gICAgICAnT3duZXJJRCc6IHJvcy5zdHJpbmdUb1Jvc1RlbXBsYXRlKHByb3BlcnRpZXMub3duZXJJZCksXG4gICAgICAnSW5zdGFuY2VJRCc6IHJvcy5zdHJpbmdUb1Jvc1RlbXBsYXRlKHByb3BlcnRpZXMuaW5zdGFuY2VJZCksXG4gICAgICAnSVAnOiByb3Muc3RyaW5nVG9Sb3NUZW1wbGF0ZShwcm9wZXJ0aWVzLmlwKSxcbiAgICAgICdQb3J0Jzogcm9zLnN0cmluZ1RvUm9zVGVtcGxhdGUocHJvcGVydGllcy5wb3J0KSxcbiAgICAgICdEYXRhYmFzZU5hbWUnOiByb3Muc3RyaW5nVG9Sb3NUZW1wbGF0ZShwcm9wZXJ0aWVzLmRhdGFiYXNlTmFtZSksXG4gICAgICAnUmVnaW9uJzogcm9zLnN0cmluZ1RvUm9zVGVtcGxhdGUocHJvcGVydGllcy5yZWdpb24pLFxuICAgICAgJ0luc3RhbmNlVHlwZSc6IHJvcy5zdHJpbmdUb1Jvc1RlbXBsYXRlKHByb3BlcnRpZXMuaW5zdGFuY2VUeXBlKSxcbiAgICAgICdFbmdpbmVOYW1lJzogcm9zLnN0cmluZ1RvUm9zVGVtcGxhdGUocHJvcGVydGllcy5lbmdpbmVOYW1lKSxcbiAgICAgICdQYXNzd29yZCc6IHJvcy5zdHJpbmdUb1Jvc1RlbXBsYXRlKHByb3BlcnRpZXMucGFzc3dvcmQpLFxuICAgIH07XG59XG5cbmV4cG9ydCBuYW1lc3BhY2UgUm9zTWlncmF0aW9uSm9iMiB7XG4gICAgLyoqXG4gICAgICogQHN0YWJpbGl0eSBleHRlcm5hbFxuICAgICAqL1xuICAgIGV4cG9ydCBpbnRlcmZhY2UgU291cmNlRW5kcG9pbnRQcm9wZXJ0eSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAUHJvcGVydHkgb3JhY2xlU2lkOiBUaGUgc3lzdGVtIElEIChTSUQpIG9mIHRoZSBPcmFjbGUgZGF0YWJhc2UuXG4gICAgICogKipOb3RlKio6IFRoaXMgcGFyYW1ldGVyIGlzIHJlcXVpcmVkIG9ubHkgd2hlbiAqKkVuZ2luZU5hbWUqKiBpcyBzZXQgdG8gKipPUkFDTEUqKiBhbmQgdGhlIE9yYWNsZSBkYXRhYmFzZSBpcyBkZXBsb3llZCBpbiBhbiBhcmNoaXRlY3R1cmUgdGhhdCBpcyBub3QgYSBSZWFsIEFwcGxpY2F0aW9uIENsdXN0ZXIgKFJBQykuXG4gICAgICAgICAqL1xuICAgICAgICByZWFkb25seSBvcmFjbGVTaWQ/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAUHJvcGVydHkgdXNlck5hbWU6IFRoZSBkYXRhYmFzZSBhY2NvdW50IG9mIHRoZSBzb3VyY2UgZGF0YWJhc2UuXG4gICAgICogKipOb3RlKio6IEluIG1vc3QgY2FzZXMsIHRoaXMgcGFyYW1ldGVyIGlzIHJlcXVpcmVkLiBUaGUgcGVybWlzc2lvbnMgdGhhdCBhcmUgcmVxdWlyZWQgZm9yIHRoZSBkYXRhYmFzZSBhY2NvdW50IHZhcnkgd2l0aCB0aGUgbWlncmF0aW9uIG9yIHN5bmNocm9uaXphdGlvbiBzY2VuYXJpby5cbiAgICAgICAgICovXG4gICAgICAgIHJlYWRvbmx5IHVzZXJOYW1lPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuICAgICAgICAvKipcbiAgICAgICAgICogQFByb3BlcnR5IGluc3RhbmNlSWQ6IFRoZSBJRCBvZiB0aGUgc291cmNlIGluc3RhbmNlLiBJZiB0aGUgc291cmNlIGluc3RhbmNlIGlzIGFuIEFsaWJhYmEgQ2xvdWQgZGF0YWJhc2UgaW5zdGFuY2UsIHlvdSBtdXN0IHNwZWNpZnkgdGhlIElEIG9mIHRoZSBkYXRhYmFzZSBpbnN0YW5jZS4gRm9yIGV4YW1wbGUsIFxuICAgICAqIC0gSWYgdGhlIHNvdXJjZSBpbnN0YW5jZSBpcyBhbiBBcHNhcmFEQiBSRFMgZm9yIE15U1FMIGluc3RhbmNlLCB5b3UgbXVzdCBzcGVjaWZ5IHRoZSBJRCBvZiB0aGUgQXBzYXJhREIgUkRTIGZvciBNeVNRTCBpbnN0YW5jZS4gXG4gICAgICogLSBJZiB0aGUgc291cmNlIGluc3RhbmNlIGlzIGEgc2VsZi1tYW5hZ2VkIGRhdGFiYXNlLCB0aGUgdmFsdWUgb2YgdGhpcyBwYXJhbWV0ZXIgdmFyaWVzIHdpdGggdGhlIHZhbHVlIG9mIFNvdXJjZUVuZHBvaW50SW5zdGFuY2VUeXBlLlxuICAgICAqIC0gSWYgSW5zdGFuY2VUeXBlIGlzIHNldCB0byBFQ1MsIHlvdSBtdXN0IHNwZWNpZnkgdGhlIElEIG9mIHRoZSBFQ1MgaW5zdGFuY2UuXG4gICAgICogLSBJZiBJbnN0YW5jZVR5cGUgaXMgc2V0IHRvIERHLCB5b3UgbXVzdCBzcGVjaWZ5IHRoZSBJRCBvZiB0aGUgZGF0YWJhc2UgZ2F0ZXdheS5cbiAgICAgKiAtIElmIEluc3RhbmNlVHlwZSBpcyBzZXQgdG8gRVhQUkVTUyBvciBDRU4sIHlvdSBtdXN0IHNwZWNpZnkgdGhlIElEIG9mIHRoZSBWUEMgdGhhdCBpcyBjb25uZWN0ZWQgdG8gdGhlIHNvdXJjZSBpbnN0YW5jZS5cbiAgICAgKiAqKk5vdGUqKjogSWYgRGVzdGluYXRpb25FbmRwb2ludEluc3RhbmNlVHlwZSBpcyBzZXQgdG8gQ0VOLCB5b3UgbXVzdCBhbHNvIHNwZWNpZnkgdGhlIElEIG9mIHRoZSBDRU4gaW5zdGFuY2UgaW4gdGhlIFJlc2VydmUgcGFyYW1ldGVyLlxuICAgICAgICAgKi9cbiAgICAgICAgcmVhZG9ubHkgaW5zdGFuY2VJZD86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBQcm9wZXJ0eSBpcDogVGhlIElQIGFkZHJlc3Mgb2YgdGhlIHNvdXJjZSBpbnN0YW5jZS4gXG4gICAgICogKipOb3RlKio6IFRoaXMgcGFyYW1ldGVyIGlzIHJlcXVpcmVkIG9ubHkgd2hlbiAqKkluc3RhbmNlVHlwZSoqIGlzIHNldCB0byAqKk9USEVSKiosICoqRVhQUkVTUyoqLCAqKkRHKiosIG9yICoqQ0VOKiouXG4gICAgICAgICAqL1xuICAgICAgICByZWFkb25seSBpcD86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBQcm9wZXJ0eSBwb3J0OiBUaGUgcG9ydCBudW1iZXIgb2YgdGhlIHNvdXJjZSBpbnN0YW5jZS5cbiAgICAgKiAqKk5vdGUqKjogVGhpcyBwYXJhbWV0ZXIgaXMgcmVxdWlyZWQgb25seSB3aGVuIHRoZSBzb3VyY2UgaW5zdGFuY2UgaXMgYSBzZWxmLW1hbmFnZWQgZGF0YWJhc2UuXG4gICAgICAgICAqL1xuICAgICAgICByZWFkb25seSBwb3J0Pzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuICAgICAgICAvKipcbiAgICAgICAgICogQFByb3BlcnR5IHZTd2l0Y2hJZDogVGhlIElEIG9mIHRoZSB2U3dpdGNoIHVzZWQgZm9yIHRoZSBkYXRhIHNoaXBwaW5nIGxpbmsuXG4gICAgICAgICAqL1xuICAgICAgICByZWFkb25seSB2U3dpdGNoSWQ/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAUHJvcGVydHkgZGF0YWJhc2VOYW1lOiBUaGUgbmFtZSBvZiB0aGUgZGF0YWJhc2Ugd2hpY2ggY29udGFpbnMgdGhlIG9iamVjdHMgdG8gYmUgbWlncmF0ZWQgaW4gdGhlIHNvdXJjZSBpbnN0YW5jZS5cbiAgICAgKiAqKk5vdGUqKjogVGhpcyBwYXJhbWV0ZXIgaXMgcmVxdWlyZWQgb25seSB3aGVuIHRoZSBzb3VyY2UgaW5zdGFuY2UgaXMgYSBQb2xhckRCIGZvciBQb3N0Z3JlU1FMIGNsdXN0ZXIgKGNvbXBhdGlibGUgd2l0aCBPcmFjbGUpLCBhIFBvc3RncmVTUUwgZGF0YWJhc2UsIG9yIGEgTW9uZ29EQiBkYXRhYmFzZS5cbiAgICAgICAgICovXG4gICAgICAgIHJlYWRvbmx5IGRhdGFiYXNlTmFtZT86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBQcm9wZXJ0eSBlbmdpbmVOYW1lOiBUaGUgZGF0YWJhc2UgZW5naW5lIG9mIHRoZSBzb3VyY2UgaW5zdGFuY2UuIFZhbGlkIHZhbHVlczpcbiAgICAgKiAtICoqTVlTUUwqKjogQXBzYXJhREIgUkRTIGZvciBNeVNRTCBpbnN0YW5jZSBvciBzZWxmLW1hbmFnZWQgTXlTUUwgZGF0YWJhc2VcbiAgICAgKiAtICoqTUFSSUFEQioqOiBBcHNhcmFEQiBSRFMgZm9yIE1hcmlhREIgVFggaW5zdGFuY2VcbiAgICAgKiAtICoqUG9sYXJEQioqOiBQb2xhckRCIGZvciBNeVNRTCBjbHVzdGVyXG4gICAgICogLSAqKlBPTEFSREJfTyoqOiBQb2xhckRCIGZvciBQb3N0Z3JlU1FMIGNsdXN0ZXIgKGNvbXBhdGlibGUgd2l0aCBPcmFjbGUpXG4gICAgICogLSAqKlBPTEFSREJYMTAqKjogUG9sYXJEQi1YIDEuMCBpbnN0YW5jZVxuICAgICAqIC0gKipQT0xBUkRCWDIwKio6IFBvbGFyREItWCAyLjAgaW5zdGFuY2VcbiAgICAgKiAtICoqT1JBQ0xFKio6IHNlbGYtbWFuYWdlZCBPcmFjbGUgZGF0YWJhc2VcbiAgICAgKiAtICoqUE9TVEdSRVNRTCoqOiBBcHNhcmFEQiBSRFMgZm9yIFBvc3RncmVTUUwgaW5zdGFuY2Ugb3Igc2VsZi1tYW5hZ2VkIFBvc3RncmVTUUwgZGF0YWJhc2VcbiAgICAgKiAtICoqTVNTUUwqKjogQXBzYXJhREIgUkRTIGZvciBTUUwgU2VydmVyIGluc3RhbmNlIG9yIHNlbGYtbWFuYWdlZCBTUUwgU2VydmVyIGRhdGFiYXNlXG4gICAgICogLSAqKk1PTkdPREIqKjogQXBzYXJhREIgZm9yIE1vbmdvREIgaW5zdGFuY2Ugb3Igc2VsZi1tYW5hZ2VkIE1vbmdvREIgZGF0YWJhc2VcbiAgICAgKiAtICoqREIyKio6IHNlbGYtbWFuYWdlZCBEYjIgZm9yIExVVyBkYXRhYmFzZVxuICAgICAqIC0gKipBUzQwMCoqOiBzZWxmLW1hbmFnZWQgRGIyIGZvciBpIGRhdGFiYXNlXG4gICAgICogLSAqKkRNU1BPTEFSREIqKjogRE1TIGxvZ2ljYWwgZGF0YWJhc2VcbiAgICAgKiAtICoqSEJBU0UqKjogc2VsZi1tYW5hZ2VkIEhCYXNlIGRhdGFiYXNlXG4gICAgICogLSAqKlRFUkFEQVRBKio6IFRlcmFkYXRhIGRhdGFiYXNlXG4gICAgICogLSAqKlRpREIqKjogVGlEQiBkYXRhYmFzZVxuICAgICAqIC0gKipSRURJUyoqOiBBcHNhcmFEQiBmb3IgUmVkaXMgaW5zdGFuY2Ugb3Igc2VsZi1tYW5hZ2VkIFJlZGlzIGRhdGFiYXNlXG4gICAgICogKipOb3RlKio6IERlZmF1bHQgdmFsdWU6ICoqTVlTUUwqKi5cbiAgICAgKiBJZiBFbmdpbmVOYW1lIGlzIHNldCB0byAqKk1PTkdPREIqKiwgeW91IG11c3QgYWxzbyBzcGVjaWZ5IHRoZSBhcmNoaXRlY3R1cmUgdHlwZSBvZiB0aGUgKipNb25nb0RCKiogZGF0YWJhc2UgaW4gdGhlICoqUmVzZXJ2ZSoqIHBhcmFtZXRlci5cbiAgICAgICAgICovXG4gICAgICAgIHJlYWRvbmx5IGVuZ2luZU5hbWU/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAUHJvcGVydHkgcm9sZTogVGhlIG5hbWUgb2YgdGhlIFJlc291cmNlIEFjY2VzcyBNYW5hZ2VtZW50IChSQU0pIHJvbGUgY29uZmlndXJlZCBmb3IgdGhlIEFsaWJhYmEgQ2xvdWQgYWNjb3VudCB0aGF0IG93bnMgdGhlIHNvdXJjZSBpbnN0YW5jZS5cbiAgICAgKiAqKk5vdGUqKjogVGhpcyBwYXJhbWV0ZXIgaXMgcmVxdWlyZWQgd2hlbiB5b3UgbWlncmF0ZSBvciBzeW5jaHJvbml6ZSBkYXRhIGFjcm9zcyBkaWZmZXJlbnQgQWxpYmFiYSBDbG91ZCBhY2NvdW50cy5cbiAgICAgICAgICovXG4gICAgICAgIHJlYWRvbmx5IHJvbGU/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAUHJvcGVydHkgb3duZXJJZDogVGhlIElEIG9mIHRoZSBBbGliYWJhIENsb3VkIGFjY291bnQgdG8gd2hpY2ggdGhlIHNvdXJjZSBkYXRhYmFzZSBiZWxvbmdzLlxuICAgICAqICoqTm90ZSoqOiBZb3UgY2FuIHNwZWNpZnkgdGhpcyBwYXJhbWV0ZXIgdG8gbWlncmF0ZSBvciBzeW5jaHJvbml6ZSBkYXRhIGFjcm9zcyBkaWZmZXJlbnQgQWxpYmFiYSBDbG91ZCBhY2NvdW50cy4gSW4gdGhpcyBjYXNlLCB5b3UgbXVzdCBzcGVjaWZ5ICoqUm9sZSoqLlxuICAgICAgICAgKi9cbiAgICAgICAgcmVhZG9ubHkgb3duZXJJZD86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBQcm9wZXJ0eSByZWdpb246IFRoZSBJRCBvZiB0aGUgcmVnaW9uIGluIHdoaWNoIHRoZSBzb3VyY2UgaW5zdGFuY2UgcmVzaWRlcy5cbiAgICAgKiAqKk5vdGUqKjogSWYgdGhlIHNvdXJjZSBpbnN0YW5jZSBpcyBhbiBBbGliYWJhIENsb3VkIGRhdGFiYXNlIGluc3RhbmNlLCB0aGlzIHBhcmFtZXRlciBpcyByZXF1aXJlZC5cbiAgICAgICAgICovXG4gICAgICAgIHJlYWRvbmx5IHJlZ2lvbj86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBQcm9wZXJ0eSBpbnN0YW5jZVR5cGU6IFRoZSB0eXBlIG9mIHRoZSBzb3VyY2UgaW5zdGFuY2UuIFZhbGlkIHZhbHVlczpcbiAgICAgKiBBbGliYWJhIENsb3VkIGRhdGFiYXNlIGluc3RhbmNlczpcbiAgICAgKiAtICoqUkRTKio6IEFwc2FyYURCIFJEUyBmb3IgTXlTUUwgaW5zdGFuY2UsIEFwc2FyYURCIFJEUyBmb3IgU1FMIFNlcnZlciBpbnN0YW5jZSwgQXBzYXJhREIgUkRTIGZvciBQb3N0Z3JlU1FMIGluc3RhbmNlLCBvciBBcHNhcmFEQiBSRFMgZm9yIE1hcmlhREIgVFggaW5zdGFuY2VcbiAgICAgKiAtICoqUG9sYXJEQioqOiBQb2xhckRCIGZvciBNeVNRTCBjbHVzdGVyXG4gICAgICogLSAqKlJFRElTKio6IEFwc2FyYURCIGZvciBSZWRpcyBpbnN0YW5jZVxuICAgICAqIC0gKipESVNUUklCVVRFRF9QT0xBUkRCWDEwKio6IFBvbGFyREItWCAxLjAgKGZvcm1lcmx5IERSRFMpIGluc3RhbmNlXG4gICAgICogLSAqKlBPTEFSREJYMjAqKjogUG9sYXJEQi1YIDIuMCBpbnN0YW5jZVxuICAgICAqIC0gKipNT05HT0RCKio6IEFwc2FyYURCIGZvciBNb25nb0RCIGluc3RhbmNlXG4gICAgICogLSAqKkRJU1RSSUJVVEVEX0RNU0xPR0lDREIqKjogRGF0YSBNYW5hZ2VtZW50IChETVMpIGxvZ2ljYWwgZGF0YWJhc2VcbiAgICAgKiBTZWxmLW1hbmFnZWQgZGF0YWJhc2VzOlxuICAgICAqIC0gKipPVEhFUioqOiBzZWxmLW1hbmFnZWQgZGF0YWJhc2Ugd2l0aCBhIHB1YmxpYyBJUCBhZGRyZXNzXG4gICAgICogLSAqKkVDUyoqOiBzZWxmLW1hbmFnZWQgZGF0YWJhc2UgaG9zdGVkIG9uIGFuIEVsYXN0aWMgQ29tcHV0ZSBTZXJ2aWNlIChFQ1MpIGluc3RhbmNlXG4gICAgICogLSAqKkVYUFJFU1MqKjogc2VsZi1tYW5hZ2VkIGRhdGFiYXNlIGNvbm5lY3RlZCBvdmVyIEV4cHJlc3MgQ29ubmVjdFxuICAgICAqIC0gKipDRU4qKjogc2VsZi1tYW5hZ2VkIGRhdGFiYXNlIGNvbm5lY3RlZCBvdmVyIENsb3VkIEVudGVycHJpc2UgTmV0d29yayAoQ0VOKVxuICAgICAqIC0gKipERyoqOiBzZWxmLW1hbmFnZWQgZGF0YWJhc2UgY29ubmVjdGVkIG92ZXIgRGF0YWJhc2UgR2F0ZXdheVxuICAgICAqICoqTm90ZSoqOiBJZiB0aGUgc291cmNlIGluc3RhbmNlIGlzIGEgUG9sYXJEQiBmb3IgUG9zdGdyZVNRTCBjbHVzdGVyIChjb21wYXRpYmxlIHdpdGggT3JhY2xlKSwgeW91IG11c3Qgc2V0IHRoaXMgcGFyYW1ldGVyIHRvICoqT1RIRVIqKiBvciAqKkVYUFJFU1MqKi4gVGhlbiwgeW91IGNhbiBjb25uZWN0IHRoZSBQb2xhckRCIGZvciBQb3N0Z3JlU1FMIGNsdXN0ZXIgdG8gRFRTIGFzIGEgc2VsZi1tYW5hZ2VkIGRhdGFiYXNlIGJ5IHVzaW5nIGEgcHVibGljIElQIGFkZHJlc3Mgb3IgRXhwcmVzcyBDb25uZWN0LiBJZiB0aGUgc291cmNlIGluc3RhbmNlIGlzIGEgc2VsZi1tYW5hZ2VkIGRhdGFiYXNlLCB5b3UgbXVzdCBkZXBsb3kgdGhlIG5ldHdvcmsgZW52aXJvbm1lbnQgZm9yIHRoZSBkYXRhYmFzZS5cbiAgICAgICAgICovXG4gICAgICAgIHJlYWRvbmx5IGluc3RhbmNlVHlwZTogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuICAgICAgICAvKipcbiAgICAgICAgICogQFByb3BlcnR5IHBhc3N3b3JkOiBUaGUgcGFzc3dvcmQgb2YgdGhlIHNvdXJjZSBkYXRhYmFzZSBhY2NvdW50LlxuICAgICAgICAgKi9cbiAgICAgICAgcmVhZG9ubHkgcGFzc3dvcmQ/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG4gICAgfVxufVxuLyoqXG4gKiBEZXRlcm1pbmUgd2hldGhlciB0aGUgZ2l2ZW4gcHJvcGVydGllcyBtYXRjaCB0aG9zZSBvZiBhIGBTb3VyY2VFbmRwb2ludFByb3BlcnR5YFxuICpcbiAqIEBwYXJhbSBwcm9wZXJ0aWVzIC0gdGhlIFR5cGVTY3JpcHQgcHJvcGVydGllcyBvZiBhIGBTb3VyY2VFbmRwb2ludFByb3BlcnR5YFxuICpcbiAqIEByZXR1cm5zIHRoZSByZXN1bHQgb2YgdGhlIHZhbGlkYXRpb24uXG4gKi9cbmZ1bmN0aW9uIFJvc01pZ3JhdGlvbkpvYjJfU291cmNlRW5kcG9pbnRQcm9wZXJ0eVZhbGlkYXRvcihwcm9wZXJ0aWVzOiBhbnkpOiByb3MuVmFsaWRhdGlvblJlc3VsdCB7XG4gICAgaWYgKCFyb3MuY2FuSW5zcGVjdChwcm9wZXJ0aWVzKSkgeyByZXR1cm4gcm9zLlZBTElEQVRJT05fU1VDQ0VTUzsgfVxuICAgIGNvbnN0IGVycm9ycyA9IG5ldyByb3MuVmFsaWRhdGlvblJlc3VsdHMoKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ29yYWNsZVNpZCcsIHJvcy52YWxpZGF0ZVN0cmluZykocHJvcGVydGllcy5vcmFjbGVTaWQpKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ3VzZXJOYW1lJywgcm9zLnZhbGlkYXRlU3RyaW5nKShwcm9wZXJ0aWVzLnVzZXJOYW1lKSk7XG4gICAgZXJyb3JzLmNvbGxlY3Qocm9zLnByb3BlcnR5VmFsaWRhdG9yKCdpbnN0YW5jZUlkJywgcm9zLnZhbGlkYXRlU3RyaW5nKShwcm9wZXJ0aWVzLmluc3RhbmNlSWQpKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ2lwJywgcm9zLnZhbGlkYXRlU3RyaW5nKShwcm9wZXJ0aWVzLmlwKSk7XG4gICAgZXJyb3JzLmNvbGxlY3Qocm9zLnByb3BlcnR5VmFsaWRhdG9yKCdwb3J0Jywgcm9zLnZhbGlkYXRlU3RyaW5nKShwcm9wZXJ0aWVzLnBvcnQpKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ3ZTd2l0Y2hJZCcsIHJvcy52YWxpZGF0ZVN0cmluZykocHJvcGVydGllcy52U3dpdGNoSWQpKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ2RhdGFiYXNlTmFtZScsIHJvcy52YWxpZGF0ZVN0cmluZykocHJvcGVydGllcy5kYXRhYmFzZU5hbWUpKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ2VuZ2luZU5hbWUnLCByb3MudmFsaWRhdGVTdHJpbmcpKHByb3BlcnRpZXMuZW5naW5lTmFtZSkpO1xuICAgIGVycm9ycy5jb2xsZWN0KHJvcy5wcm9wZXJ0eVZhbGlkYXRvcigncm9sZScsIHJvcy52YWxpZGF0ZVN0cmluZykocHJvcGVydGllcy5yb2xlKSk7XG4gICAgZXJyb3JzLmNvbGxlY3Qocm9zLnByb3BlcnR5VmFsaWRhdG9yKCdvd25lcklkJywgcm9zLnZhbGlkYXRlU3RyaW5nKShwcm9wZXJ0aWVzLm93bmVySWQpKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ3JlZ2lvbicsIHJvcy52YWxpZGF0ZVN0cmluZykocHJvcGVydGllcy5yZWdpb24pKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ2luc3RhbmNlVHlwZScsIHJvcy5yZXF1aXJlZFZhbGlkYXRvcikocHJvcGVydGllcy5pbnN0YW5jZVR5cGUpKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ2luc3RhbmNlVHlwZScsIHJvcy52YWxpZGF0ZVN0cmluZykocHJvcGVydGllcy5pbnN0YW5jZVR5cGUpKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ3Bhc3N3b3JkJywgcm9zLnZhbGlkYXRlU3RyaW5nKShwcm9wZXJ0aWVzLnBhc3N3b3JkKSk7XG4gICAgcmV0dXJuIGVycm9ycy53cmFwKCdzdXBwbGllZCBwcm9wZXJ0aWVzIG5vdCBjb3JyZWN0IGZvciBcIlNvdXJjZUVuZHBvaW50UHJvcGVydHlcIicpO1xufVxuXG4vKipcbiAqIFJlbmRlcnMgdGhlIEFsaUNsb3VkIFJPUyBSZXNvdXJjZSBwcm9wZXJ0aWVzIG9mIGFuIGBBTElZVU46OkRUUzo6TWlncmF0aW9uSm9iMi5Tb3VyY2VFbmRwb2ludGAgcmVzb3VyY2VcbiAqXG4gKiBAcGFyYW0gcHJvcGVydGllcyAtIHRoZSBUeXBlU2NyaXB0IHByb3BlcnRpZXMgb2YgYSBgU291cmNlRW5kcG9pbnRQcm9wZXJ0eWBcbiAqXG4gKiBAcmV0dXJucyB0aGUgQWxpQ2xvdWQgUk9TIFJlc291cmNlIHByb3BlcnRpZXMgb2YgYW4gYEFMSVlVTjo6RFRTOjpNaWdyYXRpb25Kb2IyLlNvdXJjZUVuZHBvaW50YCByZXNvdXJjZS5cbiAqL1xuLy8gQHRzLWlnbm9yZSBUUzYxMzNcbmZ1bmN0aW9uIHJvc01pZ3JhdGlvbkpvYjJTb3VyY2VFbmRwb2ludFByb3BlcnR5VG9Sb3NUZW1wbGF0ZShwcm9wZXJ0aWVzOiBhbnkpOiBhbnkge1xuICAgIGlmICghcm9zLmNhbkluc3BlY3QocHJvcGVydGllcykpIHsgcmV0dXJuIHByb3BlcnRpZXM7IH1cbiAgICBSb3NNaWdyYXRpb25Kb2IyX1NvdXJjZUVuZHBvaW50UHJvcGVydHlWYWxpZGF0b3IocHJvcGVydGllcykuYXNzZXJ0U3VjY2VzcygpO1xuICAgIHJldHVybiB7XG4gICAgICAnT3JhY2xlU0lEJzogcm9zLnN0cmluZ1RvUm9zVGVtcGxhdGUocHJvcGVydGllcy5vcmFjbGVTaWQpLFxuICAgICAgJ1VzZXJOYW1lJzogcm9zLnN0cmluZ1RvUm9zVGVtcGxhdGUocHJvcGVydGllcy51c2VyTmFtZSksXG4gICAgICAnSW5zdGFuY2VJRCc6IHJvcy5zdHJpbmdUb1Jvc1RlbXBsYXRlKHByb3BlcnRpZXMuaW5zdGFuY2VJZCksXG4gICAgICAnSVAnOiByb3Muc3RyaW5nVG9Sb3NUZW1wbGF0ZShwcm9wZXJ0aWVzLmlwKSxcbiAgICAgICdQb3J0Jzogcm9zLnN0cmluZ1RvUm9zVGVtcGxhdGUocHJvcGVydGllcy5wb3J0KSxcbiAgICAgICdWU3dpdGNoSUQnOiByb3Muc3RyaW5nVG9Sb3NUZW1wbGF0ZShwcm9wZXJ0aWVzLnZTd2l0Y2hJZCksXG4gICAgICAnRGF0YWJhc2VOYW1lJzogcm9zLnN0cmluZ1RvUm9zVGVtcGxhdGUocHJvcGVydGllcy5kYXRhYmFzZU5hbWUpLFxuICAgICAgJ0VuZ2luZU5hbWUnOiByb3Muc3RyaW5nVG9Sb3NUZW1wbGF0ZShwcm9wZXJ0aWVzLmVuZ2luZU5hbWUpLFxuICAgICAgJ1JvbGUnOiByb3Muc3RyaW5nVG9Sb3NUZW1wbGF0ZShwcm9wZXJ0aWVzLnJvbGUpLFxuICAgICAgJ093bmVySUQnOiByb3Muc3RyaW5nVG9Sb3NUZW1wbGF0ZShwcm9wZXJ0aWVzLm93bmVySWQpLFxuICAgICAgJ1JlZ2lvbic6IHJvcy5zdHJpbmdUb1Jvc1RlbXBsYXRlKHByb3BlcnRpZXMucmVnaW9uKSxcbiAgICAgICdJbnN0YW5jZVR5cGUnOiByb3Muc3RyaW5nVG9Sb3NUZW1wbGF0ZShwcm9wZXJ0aWVzLmluc3RhbmNlVHlwZSksXG4gICAgICAnUGFzc3dvcmQnOiByb3Muc3RyaW5nVG9Sb3NUZW1wbGF0ZShwcm9wZXJ0aWVzLnBhc3N3b3JkKSxcbiAgICB9O1xufVxuXG4vKipcbiAqIFByb3BlcnRpZXMgZm9yIGRlZmluaW5nIGEgYFJvc1N1YnNjcmlwdGlvbkpvYjJgLlxuICogU2VlIGh0dHBzOi8vd3d3LmFsaWJhYmFjbG91ZC5jb20vaGVscC9yb3MvZGV2ZWxvcGVyLXJlZmVyZW5jZS9hbGl5dW4tZHRzLXN1YnNjcmlwdGlvbmpvYjJcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBSb3NTdWJzY3JpcHRpb25Kb2IyUHJvcHMge1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IGRiTGlzdDogVGhlIG9iamVjdHMgZm9yIHdoaWNoIHlvdSB3YW50IHRvIHRyYWNrIGRhdGEgY2hhbmdlcy5cbiAgICAgKi9cbiAgICByZWFkb25seSBkYkxpc3Q6IHsgW2tleTogc3RyaW5nXTogKGFueSB8IHJvcy5JUmVzb2x2YWJsZSkgfSB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBkdHNKb2JOYW1lOiBUaGUgbmFtZSBvZiB0aGUgRFRTIGluc3RhbmNlLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGR0c0pvYk5hbWU6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBzb3VyY2VFbmRwb2ludDogU291cmNlIGluc3RhbmNlIGNvbmZpZ3VyYXRpb24uXG4gICAgICovXG4gICAgcmVhZG9ubHkgc291cmNlRW5kcG9pbnQ6IFJvc1N1YnNjcmlwdGlvbkpvYjIuU291cmNlRW5kcG9pbnRQcm9wZXJ0eSB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBzdWJzY3JpcHRpb25JbnN0YW5jZTogU3Vic2NyaXB0aW9uIGluc3RhbmNlIGNvbmZpZ3VyYXRpb24uXG4gICAgICovXG4gICAgcmVhZG9ubHkgc3Vic2NyaXB0aW9uSW5zdGFuY2U6IFJvc1N1YnNjcmlwdGlvbkpvYjIuU3Vic2NyaXB0aW9uSW5zdGFuY2VQcm9wZXJ0eSB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBjaGVja3BvaW50OiBUaGUgc3RhcnQgb2Zmc2V0IG9mIGluY3JlbWVudGFsIGRhdGEgbWlncmF0aW9uIG9yIHN5bmNocm9uaXphdGlvbi4gVGhpcyB2YWx1ZSBpcyBhIFVOSVggdGltZXN0YW1wIHJlcHJlc2VudGluZyB0aGUgbnVtYmVyIG9mIHNlY29uZHMgdGhhdCBoYXZlIGVsYXBzZWQgc2luY2UgSmFudWFyeSAxLCAxOTcwLCAwMDowMDowMCBVVEMuXG4gICAgICovXG4gICAgcmVhZG9ubHkgY2hlY2twb2ludD86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBkZWRpY2F0ZWRDbHVzdGVySWQ6IFRoZSBJRCBvZiB0aGUgRFRTIGRlZGljYXRlZCBjbHVzdGVyIG9uIHdoaWNoIHRoZSB0YXNrIHJ1bnMuXG4gICAgICovXG4gICAgcmVhZG9ubHkgZGVkaWNhdGVkQ2x1c3RlcklkPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IGRlbGF5Tm90aWNlOiBTcGVjaWZpZXMgd2hldGhlciB0byBtb25pdG9yIHRoZSB0YXNrIGxhdGVuY3kuIFZhbGlkIHZhbHVlczogKip0cnVlKiogYW5kICoqZmFsc2UqKlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGRlbGF5Tm90aWNlPzogYm9vbGVhbiB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBkZWxheVBob25lOiBUaGUgbW9iaWxlIG51bWJlcnMgdGhhdCByZWNlaXZlIGxhdGVuY3ktcmVsYXRlZCBhbGVydHMuIFNlcGFyYXRlIG11bHRpcGxlIG1vYmlsZSBudW1iZXJzIHdpdGggY29tbWFzICgsKS5cbiAgICAgKiAqKk5vdGUqKjogVGhpcyBwYXJhbWV0ZXIgaXMgYXZhaWxhYmxlIG9ubHkgZm9yIHVzZXJzIG9mIHRoZSBDaGluYSBzaXRlIChhbGl5dW4uY29tKS4gT25seSBtb2JpbGUgbnVtYmVycyBpbiB0aGUgQ2hpbmVzZSBtYWlubGFuZCBhcmUgc3VwcG9ydGVkLiBZb3UgY2FuIHNwZWNpZnkgdXAgdG8gMTAgbW9iaWxlIG51bWJlcnMuIFVzZXJzIG9mIHRoZSBpbnRlcm5hdGlvbmFsIHNpdGUgKGFsaWJhYmFjbG91ZC5jb20pIGNhbm5vdCByZWNlaXZlIGFsZXJ0cyBieSB1c2luZyBtb2JpbGUgbnVtYmVycywgYnV0IGNhbiBjb25maWd1cmUgYWxlcnQgcnVsZXMgZm9yIERUUyB0YXNrcyBpbiB0aGUgQ2xvdWRNb25pdG9yIGNvbnNvbGUuXG4gICAgICovXG4gICAgcmVhZG9ubHkgZGVsYXlQaG9uZT86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBkZWxheVJ1bGVUaW1lOiBUaGUgdGhyZXNob2xkIGZvciBsYXRlbmN5IGFsZXJ0cy4gVW5pdDogc2Vjb25kcy4gWW91IGNhbiBzZXQgdGhlIHRocmVzaG9sZCBiYXNlZCBvbiB5b3VyIGJ1c2luZXNzIHJlcXVpcmVtZW50cy4gVG8gcHJldmVudCBqaXR0ZXJzIGNhdXNlZCBieSBuZXR3b3JrIGFuZCBkYXRhYmFzZSBvdmVybG9hZHMsIHdlIHJlY29tbWVuZCB0aGF0IHlvdSBzZXQgdGhlIHRocmVzaG9sZCB0byBtb3JlIHRoYW4gMTAgc2Vjb25kcy5cbiAgICAgKi9cbiAgICByZWFkb25seSBkZWxheVJ1bGVUaW1lPzogbnVtYmVyIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IGR0c0Jpc0xhYmVsOiBUaGUgZW52aXJvbm1lbnQgdGFnIG9mIHRoZSBEVFMgaW5zdGFuY2UuIFZhbGlkIHZhbHVlczogKipub3JtYWwqKiBhbmQgKipvbmxpbmUqKi5cbiAgICAgKi9cbiAgICByZWFkb25seSBkdHNCaXNMYWJlbD86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBkdHNJbnN0YW5jZUlkOiBUaGUgSUQgb2YgdGhlIERUUyBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICByZWFkb25seSBkdHNJbnN0YW5jZUlkPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IGR0c0pvYklkOiBUaGUgSUQgb2YgdGhlIERUUyB0YXNrLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGR0c0pvYklkPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IGVycm9yTm90aWNlOiBTcGVjaWZpZXMgd2hldGhlciB0byBtb25pdG9yIHRoZSB0YXNrIHN0YXR1cy4gVmFsaWQgdmFsdWVzOiAqKnRydWUqKiBhbmQgKipmYWxzZSoqLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGVycm9yTm90aWNlPzogYm9vbGVhbiB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBlcnJvclBob25lOiBUaGUgbW9iaWxlIG51bWJlcnMgdGhhdCByZWNlaXZlIHN0YXR1cy1yZWxhdGVkIGFsZXJ0cy4gU2VwYXJhdGUgbXVsdGlwbGUgbW9iaWxlIG51bWJlcnMgd2l0aCBjb21tYXMgKCwpLlxuICAgICAqICoqTm90ZSoqOiBUaGlzIHBhcmFtZXRlciBpcyBhdmFpbGFibGUgb25seSBmb3IgdXNlcnMgb2YgdGhlIENoaW5hIHNpdGUgKGFsaXl1bi5jb20pLiBPbmx5IG1vYmlsZSBudW1iZXJzIGluIHRoZSBDaGluZXNlIG1haW5sYW5kIGFyZSBzdXBwb3J0ZWQuIFlvdSBjYW4gc3BlY2lmeSB1cCB0byAxMCBtb2JpbGUgbnVtYmVycy4gVXNlcnMgb2YgdGhlIGludGVybmF0aW9uYWwgc2l0ZSAoYWxpYmFiYWNsb3VkLmNvbSkgY2Fubm90IHJlY2VpdmUgYWxlcnRzIGJ5IHVzaW5nIG1vYmlsZSBudW1iZXJzLCBidXQgY2FuIGNvbmZpZ3VyZSBhbGVydCBydWxlcyBmb3IgRFRTIHRhc2tzIGluIHRoZSBDbG91ZE1vbml0b3IgY29uc29sZS5cbiAgICAgKi9cbiAgICByZWFkb25seSBlcnJvclBob25lPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IHJlc2VydmU6IFRoZSByZXNlcnZlZCBwYXJhbWV0ZXIgb2YgRFRTLiBZb3UgY2FuIHNwZWNpZnkgdGhpcyBwYXJhbWV0ZXIgdG8gYWRkIG1vcmUgY29uZmlndXJhdGlvbnMgb2YgdGhlIHNvdXJjZSBvciBkZXN0aW5hdGlvbiBpbnN0YW5jZSB0byB0aGUgRFRTIHRhc2suIEZvciBleGFtcGxlLCB5b3UgY2FuIHNwZWNpZnkgdGhlIGRhdGEgc3RvcmFnZSBmb3JtYXQgb2YgdGhlIGRlc3RpbmF0aW9uIEthZmthIGRhdGFiYXNlIGFuZCB0aGUgSUQgb2YgdGhlIENFTiBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICByZWFkb25seSByZXNlcnZlPzogeyBba2V5OiBzdHJpbmddOiAoYW55IHwgcm9zLklSZXNvbHZhYmxlKSB9IHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IHN0YXR1czogVGhlIHN0YXR1cyBvZiB0aGUgcmVzb3VyY2UuIFZhbGlkIHZhbHVlczpcbiAgICAgKiAtICoqU3Vic2NyaWJpbmcqKjogU3RhcnQgdGhlIHRhc2suXG4gICAgICogLSAqKlN1c3BlbmRpbmcqKjogU3VzcGVuZCB0aGUgdGFzay5cbiAgICAgKiAtICoqU3RvcHBpbmcqKjogU3RvcCB0aGUgdGFzay5cbiAgICAgKi9cbiAgICByZWFkb25seSBzdGF0dXM/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgc3Vic2NyaXB0aW9uRGF0YVR5cGU6IFN1YnNjcmlwdGlvbiBkYXRhIHR5cGUuXG4gICAgICovXG4gICAgcmVhZG9ubHkgc3Vic2NyaXB0aW9uRGF0YVR5cGU/OiBSb3NTdWJzY3JpcHRpb25Kb2IyLlN1YnNjcmlwdGlvbkRhdGFUeXBlUHJvcGVydHkgfCByb3MuSVJlc29sdmFibGU7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIHdoZXRoZXIgdGhlIGdpdmVuIHByb3BlcnRpZXMgbWF0Y2ggdGhvc2Ugb2YgYSBgUm9zU3Vic2NyaXB0aW9uSm9iMlByb3BzYFxuICpcbiAqIEBwYXJhbSBwcm9wZXJ0aWVzIC0gdGhlIFR5cGVTY3JpcHQgcHJvcGVydGllcyBvZiBhIGBSb3NTdWJzY3JpcHRpb25Kb2IyUHJvcHNgXG4gKlxuICogQHJldHVybnMgdGhlIHJlc3VsdCBvZiB0aGUgdmFsaWRhdGlvbi5cbiAqL1xuZnVuY3Rpb24gUm9zU3Vic2NyaXB0aW9uSm9iMlByb3BzVmFsaWRhdG9yKHByb3BlcnRpZXM6IGFueSk6IHJvcy5WYWxpZGF0aW9uUmVzdWx0IHtcbiAgICBpZiAoIXJvcy5jYW5JbnNwZWN0KHByb3BlcnRpZXMpKSB7IHJldHVybiByb3MuVkFMSURBVElPTl9TVUNDRVNTOyB9XG4gICAgY29uc3QgZXJyb3JzID0gbmV3IHJvcy5WYWxpZGF0aW9uUmVzdWx0cygpO1xuICAgIGlmKHByb3BlcnRpZXMuc3RhdHVzICYmICh0eXBlb2YgcHJvcGVydGllcy5zdGF0dXMpICE9PSAnb2JqZWN0Jykge1xuICAgICAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ3N0YXR1cycsIHJvcy52YWxpZGF0ZUFsbG93ZWRWYWx1ZXMpKHtcbiAgICAgICAgICBkYXRhOiBwcm9wZXJ0aWVzLnN0YXR1cyxcbiAgICAgICAgICBhbGxvd2VkVmFsdWVzOiBbXCJTdWJzY3JpYmluZ1wiLFwiU3VzcGVuZGluZ1wiLFwiU3RvcHBpbmdcIl0sXG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgZXJyb3JzLmNvbGxlY3Qocm9zLnByb3BlcnR5VmFsaWRhdG9yKCdzdGF0dXMnLCByb3MudmFsaWRhdGVTdHJpbmcpKHByb3BlcnRpZXMuc3RhdHVzKSk7XG4gICAgZXJyb3JzLmNvbGxlY3Qocm9zLnByb3BlcnR5VmFsaWRhdG9yKCdyZXNlcnZlJywgcm9zLmhhc2hWYWxpZGF0b3Iocm9zLnZhbGlkYXRlQW55KSkocHJvcGVydGllcy5yZXNlcnZlKSk7XG4gICAgZXJyb3JzLmNvbGxlY3Qocm9zLnByb3BlcnR5VmFsaWRhdG9yKCdkZWxheVBob25lJywgcm9zLnZhbGlkYXRlU3RyaW5nKShwcm9wZXJ0aWVzLmRlbGF5UGhvbmUpKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ2RlZGljYXRlZENsdXN0ZXJJZCcsIHJvcy52YWxpZGF0ZVN0cmluZykocHJvcGVydGllcy5kZWRpY2F0ZWRDbHVzdGVySWQpKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ2Vycm9yTm90aWNlJywgcm9zLnZhbGlkYXRlQm9vbGVhbikocHJvcGVydGllcy5lcnJvck5vdGljZSkpO1xuICAgIGVycm9ycy5jb2xsZWN0KHJvcy5wcm9wZXJ0eVZhbGlkYXRvcignZHRzSm9iTmFtZScsIHJvcy5yZXF1aXJlZFZhbGlkYXRvcikocHJvcGVydGllcy5kdHNKb2JOYW1lKSk7XG4gICAgZXJyb3JzLmNvbGxlY3Qocm9zLnByb3BlcnR5VmFsaWRhdG9yKCdkdHNKb2JOYW1lJywgcm9zLnZhbGlkYXRlU3RyaW5nKShwcm9wZXJ0aWVzLmR0c0pvYk5hbWUpKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ2RlbGF5UnVsZVRpbWUnLCByb3MudmFsaWRhdGVOdW1iZXIpKHByb3BlcnRpZXMuZGVsYXlSdWxlVGltZSkpO1xuICAgIGVycm9ycy5jb2xsZWN0KHJvcy5wcm9wZXJ0eVZhbGlkYXRvcignZHRzSW5zdGFuY2VJZCcsIHJvcy52YWxpZGF0ZVN0cmluZykocHJvcGVydGllcy5kdHNJbnN0YW5jZUlkKSk7XG4gICAgZXJyb3JzLmNvbGxlY3Qocm9zLnByb3BlcnR5VmFsaWRhdG9yKCdkYkxpc3QnLCByb3MucmVxdWlyZWRWYWxpZGF0b3IpKHByb3BlcnRpZXMuZGJMaXN0KSk7XG4gICAgZXJyb3JzLmNvbGxlY3Qocm9zLnByb3BlcnR5VmFsaWRhdG9yKCdkYkxpc3QnLCByb3MuaGFzaFZhbGlkYXRvcihyb3MudmFsaWRhdGVBbnkpKShwcm9wZXJ0aWVzLmRiTGlzdCkpO1xuICAgIGVycm9ycy5jb2xsZWN0KHJvcy5wcm9wZXJ0eVZhbGlkYXRvcignZHRzQmlzTGFiZWwnLCByb3MudmFsaWRhdGVTdHJpbmcpKHByb3BlcnRpZXMuZHRzQmlzTGFiZWwpKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ3N1YnNjcmlwdGlvbkRhdGFUeXBlJywgUm9zU3Vic2NyaXB0aW9uSm9iMl9TdWJzY3JpcHRpb25EYXRhVHlwZVByb3BlcnR5VmFsaWRhdG9yKShwcm9wZXJ0aWVzLnN1YnNjcmlwdGlvbkRhdGFUeXBlKSk7XG4gICAgZXJyb3JzLmNvbGxlY3Qocm9zLnByb3BlcnR5VmFsaWRhdG9yKCdjaGVja3BvaW50Jywgcm9zLnZhbGlkYXRlU3RyaW5nKShwcm9wZXJ0aWVzLmNoZWNrcG9pbnQpKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ2RlbGF5Tm90aWNlJywgcm9zLnZhbGlkYXRlQm9vbGVhbikocHJvcGVydGllcy5kZWxheU5vdGljZSkpO1xuICAgIGVycm9ycy5jb2xsZWN0KHJvcy5wcm9wZXJ0eVZhbGlkYXRvcignZHRzSm9iSWQnLCByb3MudmFsaWRhdGVTdHJpbmcpKHByb3BlcnRpZXMuZHRzSm9iSWQpKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ3N1YnNjcmlwdGlvbkluc3RhbmNlJywgcm9zLnJlcXVpcmVkVmFsaWRhdG9yKShwcm9wZXJ0aWVzLnN1YnNjcmlwdGlvbkluc3RhbmNlKSk7XG4gICAgZXJyb3JzLmNvbGxlY3Qocm9zLnByb3BlcnR5VmFsaWRhdG9yKCdzdWJzY3JpcHRpb25JbnN0YW5jZScsIFJvc1N1YnNjcmlwdGlvbkpvYjJfU3Vic2NyaXB0aW9uSW5zdGFuY2VQcm9wZXJ0eVZhbGlkYXRvcikocHJvcGVydGllcy5zdWJzY3JpcHRpb25JbnN0YW5jZSkpO1xuICAgIGVycm9ycy5jb2xsZWN0KHJvcy5wcm9wZXJ0eVZhbGlkYXRvcignc291cmNlRW5kcG9pbnQnLCByb3MucmVxdWlyZWRWYWxpZGF0b3IpKHByb3BlcnRpZXMuc291cmNlRW5kcG9pbnQpKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ3NvdXJjZUVuZHBvaW50JywgUm9zU3Vic2NyaXB0aW9uSm9iMl9Tb3VyY2VFbmRwb2ludFByb3BlcnR5VmFsaWRhdG9yKShwcm9wZXJ0aWVzLnNvdXJjZUVuZHBvaW50KSk7XG4gICAgZXJyb3JzLmNvbGxlY3Qocm9zLnByb3BlcnR5VmFsaWRhdG9yKCdlcnJvclBob25lJywgcm9zLnZhbGlkYXRlU3RyaW5nKShwcm9wZXJ0aWVzLmVycm9yUGhvbmUpKTtcbiAgICByZXR1cm4gZXJyb3JzLndyYXAoJ3N1cHBsaWVkIHByb3BlcnRpZXMgbm90IGNvcnJlY3QgZm9yIFwiUm9zU3Vic2NyaXB0aW9uSm9iMlByb3BzXCInKTtcbn1cblxuLyoqXG4gKiBSZW5kZXJzIHRoZSBBbGlDbG91ZCBST1MgUmVzb3VyY2UgcHJvcGVydGllcyBvZiBhbiBgQUxJWVVOOjpEVFM6OlN1YnNjcmlwdGlvbkpvYjJgIHJlc291cmNlXG4gKlxuICogQHBhcmFtIHByb3BlcnRpZXMgLSB0aGUgVHlwZVNjcmlwdCBwcm9wZXJ0aWVzIG9mIGEgYFJvc1N1YnNjcmlwdGlvbkpvYjJQcm9wc2BcbiAqXG4gKiBAcmV0dXJucyB0aGUgQWxpQ2xvdWQgUk9TIFJlc291cmNlIHByb3BlcnRpZXMgb2YgYW4gYEFMSVlVTjo6RFRTOjpTdWJzY3JpcHRpb25Kb2IyYCByZXNvdXJjZS5cbiAqL1xuLy8gQHRzLWlnbm9yZSBUUzYxMzNcbmZ1bmN0aW9uIHJvc1N1YnNjcmlwdGlvbkpvYjJQcm9wc1RvUm9zVGVtcGxhdGUocHJvcGVydGllczogYW55LCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDogYm9vbGVhbik6IGFueSB7XG4gICAgaWYgKCFyb3MuY2FuSW5zcGVjdChwcm9wZXJ0aWVzKSkgeyByZXR1cm4gcHJvcGVydGllczsgfVxuICAgIGlmKGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50KSB7XG4gICAgICAgIFJvc1N1YnNjcmlwdGlvbkpvYjJQcm9wc1ZhbGlkYXRvcihwcm9wZXJ0aWVzKS5hc3NlcnRTdWNjZXNzKCk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAnRGJMaXN0Jzogcm9zLmhhc2hNYXBwZXIocm9zLm9iamVjdFRvUm9zVGVtcGxhdGUpKHByb3BlcnRpZXMuZGJMaXN0KSxcbiAgICAgICdEdHNKb2JOYW1lJzogcm9zLnN0cmluZ1RvUm9zVGVtcGxhdGUocHJvcGVydGllcy5kdHNKb2JOYW1lKSxcbiAgICAgICdTb3VyY2VFbmRwb2ludCc6IHJvc1N1YnNjcmlwdGlvbkpvYjJTb3VyY2VFbmRwb2ludFByb3BlcnR5VG9Sb3NUZW1wbGF0ZShwcm9wZXJ0aWVzLnNvdXJjZUVuZHBvaW50KSxcbiAgICAgICdTdWJzY3JpcHRpb25JbnN0YW5jZSc6IHJvc1N1YnNjcmlwdGlvbkpvYjJTdWJzY3JpcHRpb25JbnN0YW5jZVByb3BlcnR5VG9Sb3NUZW1wbGF0ZShwcm9wZXJ0aWVzLnN1YnNjcmlwdGlvbkluc3RhbmNlKSxcbiAgICAgICdDaGVja3BvaW50Jzogcm9zLnN0cmluZ1RvUm9zVGVtcGxhdGUocHJvcGVydGllcy5jaGVja3BvaW50KSxcbiAgICAgICdEZWRpY2F0ZWRDbHVzdGVySWQnOiByb3Muc3RyaW5nVG9Sb3NUZW1wbGF0ZShwcm9wZXJ0aWVzLmRlZGljYXRlZENsdXN0ZXJJZCksXG4gICAgICAnRGVsYXlOb3RpY2UnOiByb3MuYm9vbGVhblRvUm9zVGVtcGxhdGUocHJvcGVydGllcy5kZWxheU5vdGljZSksXG4gICAgICAnRGVsYXlQaG9uZSc6IHJvcy5zdHJpbmdUb1Jvc1RlbXBsYXRlKHByb3BlcnRpZXMuZGVsYXlQaG9uZSksXG4gICAgICAnRGVsYXlSdWxlVGltZSc6IHJvcy5udW1iZXJUb1Jvc1RlbXBsYXRlKHByb3BlcnRpZXMuZGVsYXlSdWxlVGltZSksXG4gICAgICAnRHRzQmlzTGFiZWwnOiByb3Muc3RyaW5nVG9Sb3NUZW1wbGF0ZShwcm9wZXJ0aWVzLmR0c0Jpc0xhYmVsKSxcbiAgICAgICdEdHNJbnN0YW5jZUlkJzogcm9zLnN0cmluZ1RvUm9zVGVtcGxhdGUocHJvcGVydGllcy5kdHNJbnN0YW5jZUlkKSxcbiAgICAgICdEdHNKb2JJZCc6IHJvcy5zdHJpbmdUb1Jvc1RlbXBsYXRlKHByb3BlcnRpZXMuZHRzSm9iSWQpLFxuICAgICAgJ0Vycm9yTm90aWNlJzogcm9zLmJvb2xlYW5Ub1Jvc1RlbXBsYXRlKHByb3BlcnRpZXMuZXJyb3JOb3RpY2UpLFxuICAgICAgJ0Vycm9yUGhvbmUnOiByb3Muc3RyaW5nVG9Sb3NUZW1wbGF0ZShwcm9wZXJ0aWVzLmVycm9yUGhvbmUpLFxuICAgICAgJ1Jlc2VydmUnOiByb3MuaGFzaE1hcHBlcihyb3Mub2JqZWN0VG9Sb3NUZW1wbGF0ZSkocHJvcGVydGllcy5yZXNlcnZlKSxcbiAgICAgICdTdGF0dXMnOiByb3Muc3RyaW5nVG9Sb3NUZW1wbGF0ZShwcm9wZXJ0aWVzLnN0YXR1cyksXG4gICAgICAnU3Vic2NyaXB0aW9uRGF0YVR5cGUnOiByb3NTdWJzY3JpcHRpb25Kb2IyU3Vic2NyaXB0aW9uRGF0YVR5cGVQcm9wZXJ0eVRvUm9zVGVtcGxhdGUocHJvcGVydGllcy5zdWJzY3JpcHRpb25EYXRhVHlwZSksXG4gICAgfTtcbn1cblxuLyoqXG4gKiBUaGlzIGNsYXNzIGlzIGEgYmFzZSBlbmNhcHN1bGF0aW9uIGFyb3VuZCB0aGUgUk9TIHJlc291cmNlIHR5cGUgYEFMSVlVTjo6RFRTOjpTdWJzY3JpcHRpb25Kb2IyYCwgd2hpY2ggaXMgdXNlZCB0byBjb25maWd1cmUgYSBjaGFuZ2UgdHJhY2tpbmcgdGFzay5cbiAqIEBOb3RlIFRoaXMgY2xhc3MgZG9lcyBub3QgY29udGFpbiBhZGRpdGlvbmFsIGZ1bmN0aW9ucywgc28gaXQgaXMgcmVjb21tZW5kZWQgdG8gdXNlIHRoZSBgU3Vic2NyaXB0aW9uSm9iMmAgY2xhc3MgaW5zdGVhZCBvZiB0aGlzIGNsYXNzIGZvciBhIG1vcmUgY29udmVuaWVudCBkZXZlbG9wbWVudCBleHBlcmllbmNlLlxuICogU2VlIGh0dHBzOi8vd3d3LmFsaWJhYmFjbG91ZC5jb20vaGVscC9yb3MvZGV2ZWxvcGVyLXJlZmVyZW5jZS9hbGl5dW4tZHRzLXN1YnNjcmlwdGlvbmpvYjJcbiAqL1xuZXhwb3J0IGNsYXNzIFJvc1N1YnNjcmlwdGlvbkpvYjIgZXh0ZW5kcyByb3MuUm9zUmVzb3VyY2Uge1xuICAgIC8qKlxuICAgICAqIFRoZSByZXNvdXJjZSB0eXBlIG5hbWUgZm9yIHRoaXMgcmVzb3VyY2UgY2xhc3MuXG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyByZWFkb25seSBST1NfUkVTT1VSQ0VfVFlQRV9OQU1FID0gXCJBTElZVU46OkRUUzo6U3Vic2NyaXB0aW9uSm9iMlwiO1xuXG4gICAgLyoqXG4gICAgICogQEF0dHJpYnV0ZSBEdHNJbnN0YW5jZUlkOiBUaGUgSUQgb2YgdGhlIERUUyBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckR0c0luc3RhbmNlSWQ6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEBBdHRyaWJ1dGUgRHRzSm9iSWQ6IFRoZSBJRCBvZiB0aGUgdGFzay5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckR0c0pvYklkOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBAQXR0cmlidXRlIER0c0pvYk5hbWU6IFRoZSBuYW1lIG9mIHRoZSBEVFMgam9iLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyRHRzSm9iTmFtZTogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgcHVibGljIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OiBib29sZWFuO1xuXG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgZGJMaXN0OiBUaGUgb2JqZWN0cyBmb3Igd2hpY2ggeW91IHdhbnQgdG8gdHJhY2sgZGF0YSBjaGFuZ2VzLlxuICAgICAqL1xuICAgIHB1YmxpYyBkYkxpc3Q6IHsgW2tleTogc3RyaW5nXTogKGFueSB8IHJvcy5JUmVzb2x2YWJsZSkgfSB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBkdHNKb2JOYW1lOiBUaGUgbmFtZSBvZiB0aGUgRFRTIGluc3RhbmNlLlxuICAgICAqL1xuICAgIHB1YmxpYyBkdHNKb2JOYW1lOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgc291cmNlRW5kcG9pbnQ6IFNvdXJjZSBpbnN0YW5jZSBjb25maWd1cmF0aW9uLlxuICAgICAqL1xuICAgIHB1YmxpYyBzb3VyY2VFbmRwb2ludDogUm9zU3Vic2NyaXB0aW9uSm9iMi5Tb3VyY2VFbmRwb2ludFByb3BlcnR5IHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IHN1YnNjcmlwdGlvbkluc3RhbmNlOiBTdWJzY3JpcHRpb24gaW5zdGFuY2UgY29uZmlndXJhdGlvbi5cbiAgICAgKi9cbiAgICBwdWJsaWMgc3Vic2NyaXB0aW9uSW5zdGFuY2U6IFJvc1N1YnNjcmlwdGlvbkpvYjIuU3Vic2NyaXB0aW9uSW5zdGFuY2VQcm9wZXJ0eSB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBjaGVja3BvaW50OiBUaGUgc3RhcnQgb2Zmc2V0IG9mIGluY3JlbWVudGFsIGRhdGEgbWlncmF0aW9uIG9yIHN5bmNocm9uaXphdGlvbi4gVGhpcyB2YWx1ZSBpcyBhIFVOSVggdGltZXN0YW1wIHJlcHJlc2VudGluZyB0aGUgbnVtYmVyIG9mIHNlY29uZHMgdGhhdCBoYXZlIGVsYXBzZWQgc2luY2UgSmFudWFyeSAxLCAxOTcwLCAwMDowMDowMCBVVEMuXG4gICAgICovXG4gICAgcHVibGljIGNoZWNrcG9pbnQ6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZSB8IHVuZGVmaW5lZDtcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBkZWRpY2F0ZWRDbHVzdGVySWQ6IFRoZSBJRCBvZiB0aGUgRFRTIGRlZGljYXRlZCBjbHVzdGVyIG9uIHdoaWNoIHRoZSB0YXNrIHJ1bnMuXG4gICAgICovXG4gICAgcHVibGljIGRlZGljYXRlZENsdXN0ZXJJZDogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlIHwgdW5kZWZpbmVkO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IGRlbGF5Tm90aWNlOiBTcGVjaWZpZXMgd2hldGhlciB0byBtb25pdG9yIHRoZSB0YXNrIGxhdGVuY3kuIFZhbGlkIHZhbHVlczogKip0cnVlKiogYW5kICoqZmFsc2UqKlxuICAgICAqL1xuICAgIHB1YmxpYyBkZWxheU5vdGljZTogYm9vbGVhbiB8IHJvcy5JUmVzb2x2YWJsZSB8IHVuZGVmaW5lZDtcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBkZWxheVBob25lOiBUaGUgbW9iaWxlIG51bWJlcnMgdGhhdCByZWNlaXZlIGxhdGVuY3ktcmVsYXRlZCBhbGVydHMuIFNlcGFyYXRlIG11bHRpcGxlIG1vYmlsZSBudW1iZXJzIHdpdGggY29tbWFzICgsKS5cbiAgICAgKiAqKk5vdGUqKjogVGhpcyBwYXJhbWV0ZXIgaXMgYXZhaWxhYmxlIG9ubHkgZm9yIHVzZXJzIG9mIHRoZSBDaGluYSBzaXRlIChhbGl5dW4uY29tKS4gT25seSBtb2JpbGUgbnVtYmVycyBpbiB0aGUgQ2hpbmVzZSBtYWlubGFuZCBhcmUgc3VwcG9ydGVkLiBZb3UgY2FuIHNwZWNpZnkgdXAgdG8gMTAgbW9iaWxlIG51bWJlcnMuIFVzZXJzIG9mIHRoZSBpbnRlcm5hdGlvbmFsIHNpdGUgKGFsaWJhYmFjbG91ZC5jb20pIGNhbm5vdCByZWNlaXZlIGFsZXJ0cyBieSB1c2luZyBtb2JpbGUgbnVtYmVycywgYnV0IGNhbiBjb25maWd1cmUgYWxlcnQgcnVsZXMgZm9yIERUUyB0YXNrcyBpbiB0aGUgQ2xvdWRNb25pdG9yIGNvbnNvbGUuXG4gICAgICovXG4gICAgcHVibGljIGRlbGF5UGhvbmU6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZSB8IHVuZGVmaW5lZDtcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBkZWxheVJ1bGVUaW1lOiBUaGUgdGhyZXNob2xkIGZvciBsYXRlbmN5IGFsZXJ0cy4gVW5pdDogc2Vjb25kcy4gWW91IGNhbiBzZXQgdGhlIHRocmVzaG9sZCBiYXNlZCBvbiB5b3VyIGJ1c2luZXNzIHJlcXVpcmVtZW50cy4gVG8gcHJldmVudCBqaXR0ZXJzIGNhdXNlZCBieSBuZXR3b3JrIGFuZCBkYXRhYmFzZSBvdmVybG9hZHMsIHdlIHJlY29tbWVuZCB0aGF0IHlvdSBzZXQgdGhlIHRocmVzaG9sZCB0byBtb3JlIHRoYW4gMTAgc2Vjb25kcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgZGVsYXlSdWxlVGltZTogbnVtYmVyIHwgcm9zLklSZXNvbHZhYmxlIHwgdW5kZWZpbmVkO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IGR0c0Jpc0xhYmVsOiBUaGUgZW52aXJvbm1lbnQgdGFnIG9mIHRoZSBEVFMgaW5zdGFuY2UuIFZhbGlkIHZhbHVlczogKipub3JtYWwqKiBhbmQgKipvbmxpbmUqKi5cbiAgICAgKi9cbiAgICBwdWJsaWMgZHRzQmlzTGFiZWw6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZSB8IHVuZGVmaW5lZDtcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBkdHNJbnN0YW5jZUlkOiBUaGUgSUQgb2YgdGhlIERUUyBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBwdWJsaWMgZHRzSW5zdGFuY2VJZDogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlIHwgdW5kZWZpbmVkO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IGR0c0pvYklkOiBUaGUgSUQgb2YgdGhlIERUUyB0YXNrLlxuICAgICAqL1xuICAgIHB1YmxpYyBkdHNKb2JJZDogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlIHwgdW5kZWZpbmVkO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IGVycm9yTm90aWNlOiBTcGVjaWZpZXMgd2hldGhlciB0byBtb25pdG9yIHRoZSB0YXNrIHN0YXR1cy4gVmFsaWQgdmFsdWVzOiAqKnRydWUqKiBhbmQgKipmYWxzZSoqLlxuICAgICAqL1xuICAgIHB1YmxpYyBlcnJvck5vdGljZTogYm9vbGVhbiB8IHJvcy5JUmVzb2x2YWJsZSB8IHVuZGVmaW5lZDtcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBlcnJvclBob25lOiBUaGUgbW9iaWxlIG51bWJlcnMgdGhhdCByZWNlaXZlIHN0YXR1cy1yZWxhdGVkIGFsZXJ0cy4gU2VwYXJhdGUgbXVsdGlwbGUgbW9iaWxlIG51bWJlcnMgd2l0aCBjb21tYXMgKCwpLlxuICAgICAqICoqTm90ZSoqOiBUaGlzIHBhcmFtZXRlciBpcyBhdmFpbGFibGUgb25seSBmb3IgdXNlcnMgb2YgdGhlIENoaW5hIHNpdGUgKGFsaXl1bi5jb20pLiBPbmx5IG1vYmlsZSBudW1iZXJzIGluIHRoZSBDaGluZXNlIG1haW5sYW5kIGFyZSBzdXBwb3J0ZWQuIFlvdSBjYW4gc3BlY2lmeSB1cCB0byAxMCBtb2JpbGUgbnVtYmVycy4gVXNlcnMgb2YgdGhlIGludGVybmF0aW9uYWwgc2l0ZSAoYWxpYmFiYWNsb3VkLmNvbSkgY2Fubm90IHJlY2VpdmUgYWxlcnRzIGJ5IHVzaW5nIG1vYmlsZSBudW1iZXJzLCBidXQgY2FuIGNvbmZpZ3VyZSBhbGVydCBydWxlcyBmb3IgRFRTIHRhc2tzIGluIHRoZSBDbG91ZE1vbml0b3IgY29uc29sZS5cbiAgICAgKi9cbiAgICBwdWJsaWMgZXJyb3JQaG9uZTogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlIHwgdW5kZWZpbmVkO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IHJlc2VydmU6IFRoZSByZXNlcnZlZCBwYXJhbWV0ZXIgb2YgRFRTLiBZb3UgY2FuIHNwZWNpZnkgdGhpcyBwYXJhbWV0ZXIgdG8gYWRkIG1vcmUgY29uZmlndXJhdGlvbnMgb2YgdGhlIHNvdXJjZSBvciBkZXN0aW5hdGlvbiBpbnN0YW5jZSB0byB0aGUgRFRTIHRhc2suIEZvciBleGFtcGxlLCB5b3UgY2FuIHNwZWNpZnkgdGhlIGRhdGEgc3RvcmFnZSBmb3JtYXQgb2YgdGhlIGRlc3RpbmF0aW9uIEthZmthIGRhdGFiYXNlIGFuZCB0aGUgSUQgb2YgdGhlIENFTiBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVzZXJ2ZTogeyBba2V5OiBzdHJpbmddOiAoYW55IHwgcm9zLklSZXNvbHZhYmxlKSB9IHwgcm9zLklSZXNvbHZhYmxlIHwgdW5kZWZpbmVkO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IHN0YXR1czogVGhlIHN0YXR1cyBvZiB0aGUgcmVzb3VyY2UuIFZhbGlkIHZhbHVlczpcbiAgICAgKiAtICoqU3Vic2NyaWJpbmcqKjogU3RhcnQgdGhlIHRhc2suXG4gICAgICogLSAqKlN1c3BlbmRpbmcqKjogU3VzcGVuZCB0aGUgdGFzay5cbiAgICAgKiAtICoqU3RvcHBpbmcqKjogU3RvcCB0aGUgdGFzay5cbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdHVzOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGUgfCB1bmRlZmluZWQ7XG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgc3Vic2NyaXB0aW9uRGF0YVR5cGU6IFN1YnNjcmlwdGlvbiBkYXRhIHR5cGUuXG4gICAgICovXG4gICAgcHVibGljIHN1YnNjcmlwdGlvbkRhdGFUeXBlOiBSb3NTdWJzY3JpcHRpb25Kb2IyLlN1YnNjcmlwdGlvbkRhdGFUeXBlUHJvcGVydHkgfCByb3MuSVJlc29sdmFibGUgfCB1bmRlZmluZWQ7XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gc2NvcGUgLSBzY29wZSBpbiB3aGljaCB0aGlzIHJlc291cmNlIGlzIGRlZmluZWRcbiAgICAgKiBAcGFyYW0gaWQgICAgLSBzY29wZWQgaWQgb2YgdGhlIHJlc291cmNlXG4gICAgICogQHBhcmFtIHByb3BzIC0gcmVzb3VyY2UgcHJvcGVydGllc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiByb3MuQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogUm9zU3Vic2NyaXB0aW9uSm9iMlByb3BzLCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDogYm9vbGVhbikge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQsIHsgdHlwZTogUm9zU3Vic2NyaXB0aW9uSm9iMi5ST1NfUkVTT1VSQ0VfVFlQRV9OQU1FLCBwcm9wZXJ0aWVzOiBwcm9wcyB9KTtcbiAgICAgICAgdGhpcy5hdHRyRHRzSW5zdGFuY2VJZCA9IHRoaXMuZ2V0QXR0KCdEdHNJbnN0YW5jZUlkJyk7XG4gICAgICAgIHRoaXMuYXR0ckR0c0pvYklkID0gdGhpcy5nZXRBdHQoJ0R0c0pvYklkJyk7XG4gICAgICAgIHRoaXMuYXR0ckR0c0pvYk5hbWUgPSB0aGlzLmdldEF0dCgnRHRzSm9iTmFtZScpO1xuXG4gICAgICAgIHRoaXMuZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgPSBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDtcbiAgICAgICAgdGhpcy5kYkxpc3QgPSBwcm9wcy5kYkxpc3Q7XG4gICAgICAgIHRoaXMuZHRzSm9iTmFtZSA9IHByb3BzLmR0c0pvYk5hbWU7XG4gICAgICAgIHRoaXMuc291cmNlRW5kcG9pbnQgPSBwcm9wcy5zb3VyY2VFbmRwb2ludDtcbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25JbnN0YW5jZSA9IHByb3BzLnN1YnNjcmlwdGlvbkluc3RhbmNlO1xuICAgICAgICB0aGlzLmNoZWNrcG9pbnQgPSBwcm9wcy5jaGVja3BvaW50O1xuICAgICAgICB0aGlzLmRlZGljYXRlZENsdXN0ZXJJZCA9IHByb3BzLmRlZGljYXRlZENsdXN0ZXJJZDtcbiAgICAgICAgdGhpcy5kZWxheU5vdGljZSA9IHByb3BzLmRlbGF5Tm90aWNlO1xuICAgICAgICB0aGlzLmRlbGF5UGhvbmUgPSBwcm9wcy5kZWxheVBob25lO1xuICAgICAgICB0aGlzLmRlbGF5UnVsZVRpbWUgPSBwcm9wcy5kZWxheVJ1bGVUaW1lO1xuICAgICAgICB0aGlzLmR0c0Jpc0xhYmVsID0gcHJvcHMuZHRzQmlzTGFiZWw7XG4gICAgICAgIHRoaXMuZHRzSW5zdGFuY2VJZCA9IHByb3BzLmR0c0luc3RhbmNlSWQ7XG4gICAgICAgIHRoaXMuZHRzSm9iSWQgPSBwcm9wcy5kdHNKb2JJZDtcbiAgICAgICAgdGhpcy5lcnJvck5vdGljZSA9IHByb3BzLmVycm9yTm90aWNlO1xuICAgICAgICB0aGlzLmVycm9yUGhvbmUgPSBwcm9wcy5lcnJvclBob25lO1xuICAgICAgICB0aGlzLnJlc2VydmUgPSBwcm9wcy5yZXNlcnZlO1xuICAgICAgICB0aGlzLnN0YXR1cyA9IHByb3BzLnN0YXR1cztcbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25EYXRhVHlwZSA9IHByb3BzLnN1YnNjcmlwdGlvbkRhdGFUeXBlO1xuICAgIH1cblxuXG4gICAgcHJvdGVjdGVkIGdldCByb3NQcm9wZXJ0aWVzKCk6IHsgW2tleTogc3RyaW5nXTogYW55IH0gIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGRiTGlzdDogdGhpcy5kYkxpc3QsXG4gICAgICAgICAgICBkdHNKb2JOYW1lOiB0aGlzLmR0c0pvYk5hbWUsXG4gICAgICAgICAgICBzb3VyY2VFbmRwb2ludDogdGhpcy5zb3VyY2VFbmRwb2ludCxcbiAgICAgICAgICAgIHN1YnNjcmlwdGlvbkluc3RhbmNlOiB0aGlzLnN1YnNjcmlwdGlvbkluc3RhbmNlLFxuICAgICAgICAgICAgY2hlY2twb2ludDogdGhpcy5jaGVja3BvaW50LFxuICAgICAgICAgICAgZGVkaWNhdGVkQ2x1c3RlcklkOiB0aGlzLmRlZGljYXRlZENsdXN0ZXJJZCxcbiAgICAgICAgICAgIGRlbGF5Tm90aWNlOiB0aGlzLmRlbGF5Tm90aWNlLFxuICAgICAgICAgICAgZGVsYXlQaG9uZTogdGhpcy5kZWxheVBob25lLFxuICAgICAgICAgICAgZGVsYXlSdWxlVGltZTogdGhpcy5kZWxheVJ1bGVUaW1lLFxuICAgICAgICAgICAgZHRzQmlzTGFiZWw6IHRoaXMuZHRzQmlzTGFiZWwsXG4gICAgICAgICAgICBkdHNJbnN0YW5jZUlkOiB0aGlzLmR0c0luc3RhbmNlSWQsXG4gICAgICAgICAgICBkdHNKb2JJZDogdGhpcy5kdHNKb2JJZCxcbiAgICAgICAgICAgIGVycm9yTm90aWNlOiB0aGlzLmVycm9yTm90aWNlLFxuICAgICAgICAgICAgZXJyb3JQaG9uZTogdGhpcy5lcnJvclBob25lLFxuICAgICAgICAgICAgcmVzZXJ2ZTogdGhpcy5yZXNlcnZlLFxuICAgICAgICAgICAgc3RhdHVzOiB0aGlzLnN0YXR1cyxcbiAgICAgICAgICAgIHN1YnNjcmlwdGlvbkRhdGFUeXBlOiB0aGlzLnN1YnNjcmlwdGlvbkRhdGFUeXBlLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBwcm90ZWN0ZWQgcmVuZGVyUHJvcGVydGllcyhwcm9wczoge1trZXk6IHN0cmluZ106IGFueX0pOiB7IFtrZXk6IHN0cmluZ106IGFueSB9ICB7XG4gICAgICAgIHJldHVybiByb3NTdWJzY3JpcHRpb25Kb2IyUHJvcHNUb1Jvc1RlbXBsYXRlKHByb3BzLCB0aGlzLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50KTtcbiAgICB9XG59XG5cbmV4cG9ydCBuYW1lc3BhY2UgUm9zU3Vic2NyaXB0aW9uSm9iMiB7XG4gICAgLyoqXG4gICAgICogQHN0YWJpbGl0eSBleHRlcm5hbFxuICAgICAqL1xuICAgIGV4cG9ydCBpbnRlcmZhY2UgU291cmNlRW5kcG9pbnRQcm9wZXJ0eSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAUHJvcGVydHkgb3JhY2xlU2lkOiBUaGUgc3lzdGVtIElEIChTSUQpIG9mIHRoZSBPcmFjbGUgZGF0YWJhc2UuXG4gICAgICogKipOb3RlKio6IFRoaXMgcGFyYW1ldGVyIGlzIHJlcXVpcmVkIG9ubHkgd2hlbiAqKkVuZ2luZU5hbWUqKiBpcyBzZXQgdG8gKipPUkFDTEUqKiBhbmQgdGhlIE9yYWNsZSBkYXRhYmFzZSBpcyBkZXBsb3llZCBpbiBhbiBhcmNoaXRlY3R1cmUgdGhhdCBpcyBub3QgYSBSZWFsIEFwcGxpY2F0aW9uIENsdXN0ZXIgKFJBQykuXG4gICAgICAgICAqL1xuICAgICAgICByZWFkb25seSBvcmFjbGVTaWQ/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAUHJvcGVydHkgdXNlck5hbWU6IFRoZSBkYXRhYmFzZSBhY2NvdW50IG9mIHRoZSBzb3VyY2UgZGF0YWJhc2UuXG4gICAgICogKipOb3RlKio6IEluIG1vc3QgY2FzZXMsIHRoaXMgcGFyYW1ldGVyIGlzIHJlcXVpcmVkLiBUaGUgcGVybWlzc2lvbnMgdGhhdCBhcmUgcmVxdWlyZWQgZm9yIHRoZSBkYXRhYmFzZSBhY2NvdW50IHZhcnkgd2l0aCB0aGUgbWlncmF0aW9uIG9yIHN5bmNocm9uaXphdGlvbiBzY2VuYXJpby5cbiAgICAgICAgICovXG4gICAgICAgIHJlYWRvbmx5IHVzZXJOYW1lPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuICAgICAgICAvKipcbiAgICAgICAgICogQFByb3BlcnR5IGluc3RhbmNlSWQ6IFRoZSBJRCBvZiB0aGUgc291cmNlIGluc3RhbmNlLiBJZiB0aGUgc291cmNlIGluc3RhbmNlIGlzIGFuIEFsaWJhYmEgQ2xvdWQgZGF0YWJhc2UgaW5zdGFuY2UsIHlvdSBtdXN0IHNwZWNpZnkgdGhlIElEIG9mIHRoZSBkYXRhYmFzZSBpbnN0YW5jZS4gRm9yIGV4YW1wbGUsIFxuICAgICAqIC0gSWYgdGhlIHNvdXJjZSBpbnN0YW5jZSBpcyBhbiBBcHNhcmFEQiBSRFMgZm9yIE15U1FMIGluc3RhbmNlLCB5b3UgbXVzdCBzcGVjaWZ5IHRoZSBJRCBvZiB0aGUgQXBzYXJhREIgUkRTIGZvciBNeVNRTCBpbnN0YW5jZS4gXG4gICAgICogLSBJZiB0aGUgc291cmNlIGluc3RhbmNlIGlzIGEgc2VsZi1tYW5hZ2VkIGRhdGFiYXNlLCB0aGUgdmFsdWUgb2YgdGhpcyBwYXJhbWV0ZXIgdmFyaWVzIHdpdGggdGhlIHZhbHVlIG9mIFNvdXJjZUVuZHBvaW50SW5zdGFuY2VUeXBlLlxuICAgICAqIC0gSWYgSW5zdGFuY2VUeXBlIGlzIHNldCB0byBFQ1MsIHlvdSBtdXN0IHNwZWNpZnkgdGhlIElEIG9mIHRoZSBFQ1MgaW5zdGFuY2UuXG4gICAgICogLSBJZiBJbnN0YW5jZVR5cGUgaXMgc2V0IHRvIERHLCB5b3UgbXVzdCBzcGVjaWZ5IHRoZSBJRCBvZiB0aGUgZGF0YWJhc2UgZ2F0ZXdheS5cbiAgICAgKiAtIElmIEluc3RhbmNlVHlwZSBpcyBzZXQgdG8gRVhQUkVTUyBvciBDRU4sIHlvdSBtdXN0IHNwZWNpZnkgdGhlIElEIG9mIHRoZSBWUEMgdGhhdCBpcyBjb25uZWN0ZWQgdG8gdGhlIHNvdXJjZSBpbnN0YW5jZS5cbiAgICAgKiAqKk5vdGUqKjogSWYgRGVzdGluYXRpb25FbmRwb2ludEluc3RhbmNlVHlwZSBpcyBzZXQgdG8gQ0VOLCB5b3UgbXVzdCBhbHNvIHNwZWNpZnkgdGhlIElEIG9mIHRoZSBDRU4gaW5zdGFuY2UgaW4gdGhlIFJlc2VydmUgcGFyYW1ldGVyLlxuICAgICAgICAgKi9cbiAgICAgICAgcmVhZG9ubHkgaW5zdGFuY2VJZD86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBQcm9wZXJ0eSBpcDogVGhlIElQIGFkZHJlc3Mgb2YgdGhlIHNvdXJjZSBpbnN0YW5jZS4gXG4gICAgICogKipOb3RlKio6IFRoaXMgcGFyYW1ldGVyIGlzIHJlcXVpcmVkIG9ubHkgd2hlbiAqKkluc3RhbmNlVHlwZSoqIGlzIHNldCB0byAqKk9USEVSKiosICoqRVhQUkVTUyoqLCAqKkRHKiosIG9yICoqQ0VOKiouXG4gICAgICAgICAqL1xuICAgICAgICByZWFkb25seSBpcD86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBQcm9wZXJ0eSBwb3J0OiBUaGUgcG9ydCBudW1iZXIgb2YgdGhlIHNvdXJjZSBpbnN0YW5jZS5cbiAgICAgKiAqKk5vdGUqKjogVGhpcyBwYXJhbWV0ZXIgaXMgcmVxdWlyZWQgb25seSB3aGVuIHRoZSBzb3VyY2UgaW5zdGFuY2UgaXMgYSBzZWxmLW1hbmFnZWQgZGF0YWJhc2UuXG4gICAgICAgICAqL1xuICAgICAgICByZWFkb25seSBwb3J0Pzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuICAgICAgICAvKipcbiAgICAgICAgICogQFByb3BlcnR5IHZTd2l0Y2hJZDogVGhlIElEIG9mIHRoZSB2U3dpdGNoIHVzZWQgZm9yIHRoZSBkYXRhIHNoaXBwaW5nIGxpbmsuXG4gICAgICAgICAqL1xuICAgICAgICByZWFkb25seSB2U3dpdGNoSWQ/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAUHJvcGVydHkgZGF0YWJhc2VOYW1lOiBUaGUgbmFtZSBvZiB0aGUgZGF0YWJhc2Ugd2hpY2ggY29udGFpbnMgdGhlIG9iamVjdHMgdG8gYmUgbWlncmF0ZWQgaW4gdGhlIHNvdXJjZSBpbnN0YW5jZS5cbiAgICAgKiAqKk5vdGUqKjogVGhpcyBwYXJhbWV0ZXIgaXMgcmVxdWlyZWQgb25seSB3aGVuIHRoZSBzb3VyY2UgaW5zdGFuY2UgaXMgYSBQb2xhckRCIGZvciBQb3N0Z3JlU1FMIGNsdXN0ZXIgKGNvbXBhdGlibGUgd2l0aCBPcmFjbGUpLCBhIFBvc3RncmVTUUwgZGF0YWJhc2UsIG9yIGEgTW9uZ29EQiBkYXRhYmFzZS5cbiAgICAgICAgICovXG4gICAgICAgIHJlYWRvbmx5IGRhdGFiYXNlTmFtZT86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBQcm9wZXJ0eSBlbmdpbmVOYW1lOiBUaGUgZW5naW5lIG9mIHRoZSBzb3VyY2UgZGF0YWJhc2UuIFZhbGlkIHZhbHVlczogKipNeVNRTCoqLCAqKlBvc3RncmVTUUwqKiwgYW5kICoqT3JhY2xlKiouXG4gICAgICogKipOb3RlKio6IElmIHRoZSBzb3VyY2UgZGF0YWJhc2UgaXMgYSBzZWxmLW1hbmFnZWQgZGF0YWJhc2UsIHlvdSBtdXN0IHNwZWNpZnkgdGhpcyBwYXJhbWV0ZXIuXG4gICAgICAgICAqL1xuICAgICAgICByZWFkb25seSBlbmdpbmVOYW1lPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuICAgICAgICAvKipcbiAgICAgICAgICogQFByb3BlcnR5IHJvbGU6IFRoZSBuYW1lIG9mIHRoZSBSZXNvdXJjZSBBY2Nlc3MgTWFuYWdlbWVudCAoUkFNKSByb2xlIGNvbmZpZ3VyZWQgZm9yIHRoZSBBbGliYWJhIENsb3VkIGFjY291bnQgdGhhdCBvd25zIHRoZSBzb3VyY2UgaW5zdGFuY2UuXG4gICAgICogKipOb3RlKio6IFRoaXMgcGFyYW1ldGVyIGlzIHJlcXVpcmVkIHdoZW4geW91IG1pZ3JhdGUgb3Igc3luY2hyb25pemUgZGF0YSBhY3Jvc3MgZGlmZmVyZW50IEFsaWJhYmEgQ2xvdWQgYWNjb3VudHMuXG4gICAgICAgICAqL1xuICAgICAgICByZWFkb25seSByb2xlPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuICAgICAgICAvKipcbiAgICAgICAgICogQFByb3BlcnR5IG93bmVySWQ6IFRoZSBJRCBvZiB0aGUgQWxpYmFiYSBDbG91ZCBhY2NvdW50IHRvIHdoaWNoIHRoZSBzb3VyY2UgZGF0YWJhc2UgYmVsb25ncy5cbiAgICAgKiAqKk5vdGUqKjogWW91IGNhbiBzcGVjaWZ5IHRoaXMgcGFyYW1ldGVyIHRvIG1pZ3JhdGUgb3Igc3luY2hyb25pemUgZGF0YSBhY3Jvc3MgZGlmZmVyZW50IEFsaWJhYmEgQ2xvdWQgYWNjb3VudHMuIEluIHRoaXMgY2FzZSwgeW91IG11c3Qgc3BlY2lmeSAqKlJvbGUqKi5cbiAgICAgICAgICovXG4gICAgICAgIHJlYWRvbmx5IG93bmVySWQ/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAUHJvcGVydHkgcmVnaW9uOiBUaGUgSUQgb2YgdGhlIHJlZ2lvbiBpbiB3aGljaCB0aGUgc291cmNlIGluc3RhbmNlIHJlc2lkZXMuXG4gICAgICogKipOb3RlKio6IElmIHRoZSBzb3VyY2UgaW5zdGFuY2UgaXMgYW4gQWxpYmFiYSBDbG91ZCBkYXRhYmFzZSBpbnN0YW5jZSwgdGhpcyBwYXJhbWV0ZXIgaXMgcmVxdWlyZWQuXG4gICAgICAgICAqL1xuICAgICAgICByZWFkb25seSByZWdpb24/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAUHJvcGVydHkgaW5zdGFuY2VUeXBlOiBUaGUgdHlwZSBvZiB0aGUgc291cmNlIGluc3RhbmNlLiBWYWxpZCB2YWx1ZXM6XG4gICAgICogLSAqKlJEUyoqOiBBcHNhcmFEQiBSRFMgZm9yIE15U1FMIGluc3RhbmNlXG4gICAgICogLSAqKlBvbGFyREIqKjogUG9sYXJEQiBmb3IgTXlTUUwgY2x1c3RlclxuICAgICAqIC0gKipEUkRTKio6IFBvbGFyREItWCAxLjAgaW5zdGFuY2VcbiAgICAgKiAtICoqTG9jYWxJbnN0YW5jZSoqOiBzZWxmLW1hbmFnZWQgZGF0YWJhc2Ugd2l0aCBhIHB1YmxpYyBJUCBhZGRyZXNzXG4gICAgICogLSAqKkVDUyoqOiBzZWxmLW1hbmFnZWQgZGF0YWJhc2UgaG9zdGVkIG9uIGFuIEVsYXN0aWMgQ29tcHV0ZSBTZXJ2aWNlIChFQ1MpIGluc3RhbmNlXG4gICAgICogLSAqKkV4cHJlc3MqKjogc2VsZi1tYW5hZ2VkIGRhdGFiYXNlIGNvbm5lY3RlZCBvdmVyIEV4cHJlc3MgQ29ubmVjdFxuICAgICAqIC0gKipDRU4qKjogc2VsZi1tYW5hZ2VkIGRhdGFiYXNlIGNvbm5lY3RlZCBvdmVyIENsb3VkIEVudGVycHJpc2UgTmV0d29yayAoQ0VOKVxuICAgICAqIC0gKipkZyoqOiBzZWxmLW1hbmFnZWQgZGF0YWJhc2UgY29ubmVjdGVkIG92ZXIgRGF0YWJhc2UgR2F0ZXdheVxuICAgICAgICAgKi9cbiAgICAgICAgcmVhZG9ubHkgaW5zdGFuY2VUeXBlPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuICAgICAgICAvKipcbiAgICAgICAgICogQFByb3BlcnR5IHBhc3N3b3JkOiBUaGUgcGFzc3dvcmQgb2YgdGhlIHNvdXJjZSBkYXRhYmFzZSBhY2NvdW50LlxuICAgICAgICAgKi9cbiAgICAgICAgcmVhZG9ubHkgcGFzc3dvcmQ/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG4gICAgfVxufVxuLyoqXG4gKiBEZXRlcm1pbmUgd2hldGhlciB0aGUgZ2l2ZW4gcHJvcGVydGllcyBtYXRjaCB0aG9zZSBvZiBhIGBTb3VyY2VFbmRwb2ludFByb3BlcnR5YFxuICpcbiAqIEBwYXJhbSBwcm9wZXJ0aWVzIC0gdGhlIFR5cGVTY3JpcHQgcHJvcGVydGllcyBvZiBhIGBTb3VyY2VFbmRwb2ludFByb3BlcnR5YFxuICpcbiAqIEByZXR1cm5zIHRoZSByZXN1bHQgb2YgdGhlIHZhbGlkYXRpb24uXG4gKi9cbmZ1bmN0aW9uIFJvc1N1YnNjcmlwdGlvbkpvYjJfU291cmNlRW5kcG9pbnRQcm9wZXJ0eVZhbGlkYXRvcihwcm9wZXJ0aWVzOiBhbnkpOiByb3MuVmFsaWRhdGlvblJlc3VsdCB7XG4gICAgaWYgKCFyb3MuY2FuSW5zcGVjdChwcm9wZXJ0aWVzKSkgeyByZXR1cm4gcm9zLlZBTElEQVRJT05fU1VDQ0VTUzsgfVxuICAgIGNvbnN0IGVycm9ycyA9IG5ldyByb3MuVmFsaWRhdGlvblJlc3VsdHMoKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ29yYWNsZVNpZCcsIHJvcy52YWxpZGF0ZVN0cmluZykocHJvcGVydGllcy5vcmFjbGVTaWQpKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ3VzZXJOYW1lJywgcm9zLnZhbGlkYXRlU3RyaW5nKShwcm9wZXJ0aWVzLnVzZXJOYW1lKSk7XG4gICAgZXJyb3JzLmNvbGxlY3Qocm9zLnByb3BlcnR5VmFsaWRhdG9yKCdpbnN0YW5jZUlkJywgcm9zLnZhbGlkYXRlU3RyaW5nKShwcm9wZXJ0aWVzLmluc3RhbmNlSWQpKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ2lwJywgcm9zLnZhbGlkYXRlU3RyaW5nKShwcm9wZXJ0aWVzLmlwKSk7XG4gICAgZXJyb3JzLmNvbGxlY3Qocm9zLnByb3BlcnR5VmFsaWRhdG9yKCdwb3J0Jywgcm9zLnZhbGlkYXRlU3RyaW5nKShwcm9wZXJ0aWVzLnBvcnQpKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ3ZTd2l0Y2hJZCcsIHJvcy52YWxpZGF0ZVN0cmluZykocHJvcGVydGllcy52U3dpdGNoSWQpKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ2RhdGFiYXNlTmFtZScsIHJvcy52YWxpZGF0ZVN0cmluZykocHJvcGVydGllcy5kYXRhYmFzZU5hbWUpKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ2VuZ2luZU5hbWUnLCByb3MudmFsaWRhdGVTdHJpbmcpKHByb3BlcnRpZXMuZW5naW5lTmFtZSkpO1xuICAgIGVycm9ycy5jb2xsZWN0KHJvcy5wcm9wZXJ0eVZhbGlkYXRvcigncm9sZScsIHJvcy52YWxpZGF0ZVN0cmluZykocHJvcGVydGllcy5yb2xlKSk7XG4gICAgZXJyb3JzLmNvbGxlY3Qocm9zLnByb3BlcnR5VmFsaWRhdG9yKCdvd25lcklkJywgcm9zLnZhbGlkYXRlU3RyaW5nKShwcm9wZXJ0aWVzLm93bmVySWQpKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ3JlZ2lvbicsIHJvcy52YWxpZGF0ZVN0cmluZykocHJvcGVydGllcy5yZWdpb24pKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ2luc3RhbmNlVHlwZScsIHJvcy52YWxpZGF0ZVN0cmluZykocHJvcGVydGllcy5pbnN0YW5jZVR5cGUpKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ3Bhc3N3b3JkJywgcm9zLnZhbGlkYXRlU3RyaW5nKShwcm9wZXJ0aWVzLnBhc3N3b3JkKSk7XG4gICAgcmV0dXJuIGVycm9ycy53cmFwKCdzdXBwbGllZCBwcm9wZXJ0aWVzIG5vdCBjb3JyZWN0IGZvciBcIlNvdXJjZUVuZHBvaW50UHJvcGVydHlcIicpO1xufVxuXG4vKipcbiAqIFJlbmRlcnMgdGhlIEFsaUNsb3VkIFJPUyBSZXNvdXJjZSBwcm9wZXJ0aWVzIG9mIGFuIGBBTElZVU46OkRUUzo6U3Vic2NyaXB0aW9uSm9iMi5Tb3VyY2VFbmRwb2ludGAgcmVzb3VyY2VcbiAqXG4gKiBAcGFyYW0gcHJvcGVydGllcyAtIHRoZSBUeXBlU2NyaXB0IHByb3BlcnRpZXMgb2YgYSBgU291cmNlRW5kcG9pbnRQcm9wZXJ0eWBcbiAqXG4gKiBAcmV0dXJucyB0aGUgQWxpQ2xvdWQgUk9TIFJlc291cmNlIHByb3BlcnRpZXMgb2YgYW4gYEFMSVlVTjo6RFRTOjpTdWJzY3JpcHRpb25Kb2IyLlNvdXJjZUVuZHBvaW50YCByZXNvdXJjZS5cbiAqL1xuLy8gQHRzLWlnbm9yZSBUUzYxMzNcbmZ1bmN0aW9uIHJvc1N1YnNjcmlwdGlvbkpvYjJTb3VyY2VFbmRwb2ludFByb3BlcnR5VG9Sb3NUZW1wbGF0ZShwcm9wZXJ0aWVzOiBhbnkpOiBhbnkge1xuICAgIGlmICghcm9zLmNhbkluc3BlY3QocHJvcGVydGllcykpIHsgcmV0dXJuIHByb3BlcnRpZXM7IH1cbiAgICBSb3NTdWJzY3JpcHRpb25Kb2IyX1NvdXJjZUVuZHBvaW50UHJvcGVydHlWYWxpZGF0b3IocHJvcGVydGllcykuYXNzZXJ0U3VjY2VzcygpO1xuICAgIHJldHVybiB7XG4gICAgICAnT3JhY2xlU0lEJzogcm9zLnN0cmluZ1RvUm9zVGVtcGxhdGUocHJvcGVydGllcy5vcmFjbGVTaWQpLFxuICAgICAgJ1VzZXJOYW1lJzogcm9zLnN0cmluZ1RvUm9zVGVtcGxhdGUocHJvcGVydGllcy51c2VyTmFtZSksXG4gICAgICAnSW5zdGFuY2VJRCc6IHJvcy5zdHJpbmdUb1Jvc1RlbXBsYXRlKHByb3BlcnRpZXMuaW5zdGFuY2VJZCksXG4gICAgICAnSVAnOiByb3Muc3RyaW5nVG9Sb3NUZW1wbGF0ZShwcm9wZXJ0aWVzLmlwKSxcbiAgICAgICdQb3J0Jzogcm9zLnN0cmluZ1RvUm9zVGVtcGxhdGUocHJvcGVydGllcy5wb3J0KSxcbiAgICAgICdWU3dpdGNoSUQnOiByb3Muc3RyaW5nVG9Sb3NUZW1wbGF0ZShwcm9wZXJ0aWVzLnZTd2l0Y2hJZCksXG4gICAgICAnRGF0YWJhc2VOYW1lJzogcm9zLnN0cmluZ1RvUm9zVGVtcGxhdGUocHJvcGVydGllcy5kYXRhYmFzZU5hbWUpLFxuICAgICAgJ0VuZ2luZU5hbWUnOiByb3Muc3RyaW5nVG9Sb3NUZW1wbGF0ZShwcm9wZXJ0aWVzLmVuZ2luZU5hbWUpLFxuICAgICAgJ1JvbGUnOiByb3Muc3RyaW5nVG9Sb3NUZW1wbGF0ZShwcm9wZXJ0aWVzLnJvbGUpLFxuICAgICAgJ093bmVySUQnOiByb3Muc3RyaW5nVG9Sb3NUZW1wbGF0ZShwcm9wZXJ0aWVzLm93bmVySWQpLFxuICAgICAgJ1JlZ2lvbic6IHJvcy5zdHJpbmdUb1Jvc1RlbXBsYXRlKHByb3BlcnRpZXMucmVnaW9uKSxcbiAgICAgICdJbnN0YW5jZVR5cGUnOiByb3Muc3RyaW5nVG9Sb3NUZW1wbGF0ZShwcm9wZXJ0aWVzLmluc3RhbmNlVHlwZSksXG4gICAgICAnUGFzc3dvcmQnOiByb3Muc3RyaW5nVG9Sb3NUZW1wbGF0ZShwcm9wZXJ0aWVzLnBhc3N3b3JkKSxcbiAgICB9O1xufVxuXG5leHBvcnQgbmFtZXNwYWNlIFJvc1N1YnNjcmlwdGlvbkpvYjIge1xuICAgIC8qKlxuICAgICAqIEBzdGFiaWxpdHkgZXh0ZXJuYWxcbiAgICAgKi9cbiAgICBleHBvcnQgaW50ZXJmYWNlIFN1YnNjcmlwdGlvbkRhdGFUeXBlUHJvcGVydHkge1xuICAgICAgICAvKipcbiAgICAgICAgICogQFByb3BlcnR5IGRtbDogU3BlY2lmaWVzIHdoZXRoZXIgdG8gdHJhY2sgRE1MIHN0YXRlbWVudHMuIERlZmF1bHQgdmFsdWU6IHRydWUuIFZhbGlkIHZhbHVlczpcbiAgICAgKiAtICoqdHJ1ZSoqOiB0cmFja3MgRE1MIHN0YXRlbWVudHMuXG4gICAgICogLSAqKmZhbHNlKio6IGRvZXMgbm90IHRyYWNrIERNTCBzdGF0ZW1lbnRzLlxuICAgICAgICAgKi9cbiAgICAgICAgcmVhZG9ubHkgZG1sPzogYm9vbGVhbiB8IHJvcy5JUmVzb2x2YWJsZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBQcm9wZXJ0eSBkZGw6IFNwZWNpZmllcyB3aGV0aGVyIHRvIHRyYWNrIERETCBzdGF0ZW1lbnRzLiBEZWZhdWx0IHZhbHVlOiB0cnVlLiBWYWxpZCB2YWx1ZXM6XG4gICAgICogLSAqKnRydWUqKjogdHJhY2tzIERETCBzdGF0ZW1lbnRzLlxuICAgICAqIC0gKipmYWxzZSoqOiBkb2VzIG5vdCB0cmFjayBEREwgc3RhdGVtZW50cy5cbiAgICAgICAgICovXG4gICAgICAgIHJlYWRvbmx5IGRkbD86IGJvb2xlYW4gfCByb3MuSVJlc29sdmFibGU7XG4gICAgfVxufVxuLyoqXG4gKiBEZXRlcm1pbmUgd2hldGhlciB0aGUgZ2l2ZW4gcHJvcGVydGllcyBtYXRjaCB0aG9zZSBvZiBhIGBTdWJzY3JpcHRpb25EYXRhVHlwZVByb3BlcnR5YFxuICpcbiAqIEBwYXJhbSBwcm9wZXJ0aWVzIC0gdGhlIFR5cGVTY3JpcHQgcHJvcGVydGllcyBvZiBhIGBTdWJzY3JpcHRpb25EYXRhVHlwZVByb3BlcnR5YFxuICpcbiAqIEByZXR1cm5zIHRoZSByZXN1bHQgb2YgdGhlIHZhbGlkYXRpb24uXG4gKi9cbmZ1bmN0aW9uIFJvc1N1YnNjcmlwdGlvbkpvYjJfU3Vic2NyaXB0aW9uRGF0YVR5cGVQcm9wZXJ0eVZhbGlkYXRvcihwcm9wZXJ0aWVzOiBhbnkpOiByb3MuVmFsaWRhdGlvblJlc3VsdCB7XG4gICAgaWYgKCFyb3MuY2FuSW5zcGVjdChwcm9wZXJ0aWVzKSkgeyByZXR1cm4gcm9zLlZBTElEQVRJT05fU1VDQ0VTUzsgfVxuICAgIGNvbnN0IGVycm9ycyA9IG5ldyByb3MuVmFsaWRhdGlvblJlc3VsdHMoKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ2RtbCcsIHJvcy52YWxpZGF0ZUJvb2xlYW4pKHByb3BlcnRpZXMuZG1sKSk7XG4gICAgZXJyb3JzLmNvbGxlY3Qocm9zLnByb3BlcnR5VmFsaWRhdG9yKCdkZGwnLCByb3MudmFsaWRhdGVCb29sZWFuKShwcm9wZXJ0aWVzLmRkbCkpO1xuICAgIHJldHVybiBlcnJvcnMud3JhcCgnc3VwcGxpZWQgcHJvcGVydGllcyBub3QgY29ycmVjdCBmb3IgXCJTdWJzY3JpcHRpb25EYXRhVHlwZVByb3BlcnR5XCInKTtcbn1cblxuLyoqXG4gKiBSZW5kZXJzIHRoZSBBbGlDbG91ZCBST1MgUmVzb3VyY2UgcHJvcGVydGllcyBvZiBhbiBgQUxJWVVOOjpEVFM6OlN1YnNjcmlwdGlvbkpvYjIuU3Vic2NyaXB0aW9uRGF0YVR5cGVgIHJlc291cmNlXG4gKlxuICogQHBhcmFtIHByb3BlcnRpZXMgLSB0aGUgVHlwZVNjcmlwdCBwcm9wZXJ0aWVzIG9mIGEgYFN1YnNjcmlwdGlvbkRhdGFUeXBlUHJvcGVydHlgXG4gKlxuICogQHJldHVybnMgdGhlIEFsaUNsb3VkIFJPUyBSZXNvdXJjZSBwcm9wZXJ0aWVzIG9mIGFuIGBBTElZVU46OkRUUzo6U3Vic2NyaXB0aW9uSm9iMi5TdWJzY3JpcHRpb25EYXRhVHlwZWAgcmVzb3VyY2UuXG4gKi9cbi8vIEB0cy1pZ25vcmUgVFM2MTMzXG5mdW5jdGlvbiByb3NTdWJzY3JpcHRpb25Kb2IyU3Vic2NyaXB0aW9uRGF0YVR5cGVQcm9wZXJ0eVRvUm9zVGVtcGxhdGUocHJvcGVydGllczogYW55KTogYW55IHtcbiAgICBpZiAoIXJvcy5jYW5JbnNwZWN0KHByb3BlcnRpZXMpKSB7IHJldHVybiBwcm9wZXJ0aWVzOyB9XG4gICAgUm9zU3Vic2NyaXB0aW9uSm9iMl9TdWJzY3JpcHRpb25EYXRhVHlwZVByb3BlcnR5VmFsaWRhdG9yKHByb3BlcnRpZXMpLmFzc2VydFN1Y2Nlc3MoKTtcbiAgICByZXR1cm4ge1xuICAgICAgJ0RNTCc6IHJvcy5ib29sZWFuVG9Sb3NUZW1wbGF0ZShwcm9wZXJ0aWVzLmRtbCksXG4gICAgICAnRERMJzogcm9zLmJvb2xlYW5Ub1Jvc1RlbXBsYXRlKHByb3BlcnRpZXMuZGRsKSxcbiAgICB9O1xufVxuXG5leHBvcnQgbmFtZXNwYWNlIFJvc1N1YnNjcmlwdGlvbkpvYjIge1xuICAgIC8qKlxuICAgICAqIEBzdGFiaWxpdHkgZXh0ZXJuYWxcbiAgICAgKi9cbiAgICBleHBvcnQgaW50ZXJmYWNlIFN1YnNjcmlwdGlvbkluc3RhbmNlUHJvcGVydHkge1xuICAgICAgICAvKipcbiAgICAgICAgICogQFByb3BlcnR5IHZwY0lkOiBUaGUgSUQgb2YgdGhlIFZQQyBpbiB3aGljaCB0aGUgY2hhbmdlIHRyYWNraW5nIGluc3RhbmNlIGlzIGRlcGxveWVkLlxuICAgICAqICoqTm90ZSoqOiBUaGlzIHBhcmFtZXRlciB0YWtlcyBlZmZlY3QgYW5kIGlzIHJlcXVpcmVkIG9ubHkgd2hlbiAqKk5ldHdvcmtUeXBlKiogaXMgc2V0IHRvICoqdnBjKiouXG4gICAgICAgICAqL1xuICAgICAgICByZWFkb25seSB2cGNJZD86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBQcm9wZXJ0eSBuZXR3b3JrVHlwZTogVGhlIG5ldHdvcmsgdHlwZSBvZiB0aGUgY2hhbmdlIHRyYWNraW5nIHRhc2suIFNldCB0aGUgdmFsdWUgdG8gKip2cGMqKi4gQSB2YWx1ZSBvZiB2cGMgaW5kaWNhdGVzIHRoZSBWaXJ0dWFsIFByaXZhdGUgQ2xvdWQgKFZQQykgbmV0d29yayB0eXBlLioqTm90ZSoqOlxuICAgICAqIC0gVG8gdXNlIHRoZSBuZXcgdmVyc2lvbiBvZiB0aGUgY2hhbmdlIHRyYWNraW5nIGZlYXR1cmUsIHlvdSBtdXN0IHNwZWNpZnkgKipOZXR3b3JrVHlwZSoqLiBZb3UgbXVzdCBhbHNvIHNwZWNpZnkgKipWUENJZCoqIGFuZCAqKlZTd2l0Y2hJRCoqLiBJZiB5b3UgZG8gbm90IHNwZWNpZnkgKipOZXR3b3JrVHlwZSoqLCB0aGUgcHJldmlvdXMgdmVyc2lvbiBvZiB0aGUgY2hhbmdlIHRyYWNraW5nIGZlYXR1cmUgaXMgdXNlZC5cbiAgICAgKiAtIFRoZSBwcmV2aW91cyB2ZXJzaW9uIG9mIHRoZSBjaGFuZ2UgdHJhY2tpbmcgZmVhdHVyZSBzdXBwb3J0cyBzZWxmLW1hbmFnZWQgTXlTUUwgZGF0YWJhc2VzLCBBcHNhcmFEQiBSRFMgZm9yIE15U1FMIGluc3RhbmNlcywgYW5kIFBvbGFyREItWCAxLjAgaW5zdGFuY2VzLiBUaGUgbmV3IHZlcnNpb24gb2YgdGhlIGNoYW5nZSB0cmFja2luZyBmZWF0dXJlIHN1cHBvcnRzIHNlbGYtbWFuYWdlZCBNeVNRTCBkYXRhYmFzZXMsIEFwc2FyYURCIFJEUyBmb3IgTXlTUUwgaW5zdGFuY2VzLCBQb2xhckRCIGZvciBNeVNRTCBjbHVzdGVycywgYW5kIE9yYWNsZSBkYXRhYmFzZXMuXG4gICAgICAgICAqL1xuICAgICAgICByZWFkb25seSBuZXR3b3JrVHlwZTogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuICAgICAgICAvKipcbiAgICAgICAgICogQFByb3BlcnR5IHZTd2l0Y2hJZDogVGhlIElEIG9mIHRoZSB2U3dpdGNoIGluIHRoZSBzcGVjaWZpZWQgVlBDLlxuICAgICAqICoqTm90ZSoqOiBUaGlzIHBhcmFtZXRlciB0YWtlcyBlZmZlY3QgYW5kIGlzIHJlcXVpcmVkIG9ubHkgd2hlbiAqKk5ldHdvcmtUeXBlKiogaXMgc2V0IHRvICoqdnBjKiouXG4gICAgICAgICAqL1xuICAgICAgICByZWFkb25seSB2U3dpdGNoSWQ/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG4gICAgfVxufVxuLyoqXG4gKiBEZXRlcm1pbmUgd2hldGhlciB0aGUgZ2l2ZW4gcHJvcGVydGllcyBtYXRjaCB0aG9zZSBvZiBhIGBTdWJzY3JpcHRpb25JbnN0YW5jZVByb3BlcnR5YFxuICpcbiAqIEBwYXJhbSBwcm9wZXJ0aWVzIC0gdGhlIFR5cGVTY3JpcHQgcHJvcGVydGllcyBvZiBhIGBTdWJzY3JpcHRpb25JbnN0YW5jZVByb3BlcnR5YFxuICpcbiAqIEByZXR1cm5zIHRoZSByZXN1bHQgb2YgdGhlIHZhbGlkYXRpb24uXG4gKi9cbmZ1bmN0aW9uIFJvc1N1YnNjcmlwdGlvbkpvYjJfU3Vic2NyaXB0aW9uSW5zdGFuY2VQcm9wZXJ0eVZhbGlkYXRvcihwcm9wZXJ0aWVzOiBhbnkpOiByb3MuVmFsaWRhdGlvblJlc3VsdCB7XG4gICAgaWYgKCFyb3MuY2FuSW5zcGVjdChwcm9wZXJ0aWVzKSkgeyByZXR1cm4gcm9zLlZBTElEQVRJT05fU1VDQ0VTUzsgfVxuICAgIGNvbnN0IGVycm9ycyA9IG5ldyByb3MuVmFsaWRhdGlvblJlc3VsdHMoKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ3ZwY0lkJywgcm9zLnZhbGlkYXRlU3RyaW5nKShwcm9wZXJ0aWVzLnZwY0lkKSk7XG4gICAgZXJyb3JzLmNvbGxlY3Qocm9zLnByb3BlcnR5VmFsaWRhdG9yKCduZXR3b3JrVHlwZScsIHJvcy5yZXF1aXJlZFZhbGlkYXRvcikocHJvcGVydGllcy5uZXR3b3JrVHlwZSkpO1xuICAgIGVycm9ycy5jb2xsZWN0KHJvcy5wcm9wZXJ0eVZhbGlkYXRvcignbmV0d29ya1R5cGUnLCByb3MudmFsaWRhdGVTdHJpbmcpKHByb3BlcnRpZXMubmV0d29ya1R5cGUpKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ3ZTd2l0Y2hJZCcsIHJvcy52YWxpZGF0ZVN0cmluZykocHJvcGVydGllcy52U3dpdGNoSWQpKTtcbiAgICByZXR1cm4gZXJyb3JzLndyYXAoJ3N1cHBsaWVkIHByb3BlcnRpZXMgbm90IGNvcnJlY3QgZm9yIFwiU3Vic2NyaXB0aW9uSW5zdGFuY2VQcm9wZXJ0eVwiJyk7XG59XG5cbi8qKlxuICogUmVuZGVycyB0aGUgQWxpQ2xvdWQgUk9TIFJlc291cmNlIHByb3BlcnRpZXMgb2YgYW4gYEFMSVlVTjo6RFRTOjpTdWJzY3JpcHRpb25Kb2IyLlN1YnNjcmlwdGlvbkluc3RhbmNlYCByZXNvdXJjZVxuICpcbiAqIEBwYXJhbSBwcm9wZXJ0aWVzIC0gdGhlIFR5cGVTY3JpcHQgcHJvcGVydGllcyBvZiBhIGBTdWJzY3JpcHRpb25JbnN0YW5jZVByb3BlcnR5YFxuICpcbiAqIEByZXR1cm5zIHRoZSBBbGlDbG91ZCBST1MgUmVzb3VyY2UgcHJvcGVydGllcyBvZiBhbiBgQUxJWVVOOjpEVFM6OlN1YnNjcmlwdGlvbkpvYjIuU3Vic2NyaXB0aW9uSW5zdGFuY2VgIHJlc291cmNlLlxuICovXG4vLyBAdHMtaWdub3JlIFRTNjEzM1xuZnVuY3Rpb24gcm9zU3Vic2NyaXB0aW9uSm9iMlN1YnNjcmlwdGlvbkluc3RhbmNlUHJvcGVydHlUb1Jvc1RlbXBsYXRlKHByb3BlcnRpZXM6IGFueSk6IGFueSB7XG4gICAgaWYgKCFyb3MuY2FuSW5zcGVjdChwcm9wZXJ0aWVzKSkgeyByZXR1cm4gcHJvcGVydGllczsgfVxuICAgIFJvc1N1YnNjcmlwdGlvbkpvYjJfU3Vic2NyaXB0aW9uSW5zdGFuY2VQcm9wZXJ0eVZhbGlkYXRvcihwcm9wZXJ0aWVzKS5hc3NlcnRTdWNjZXNzKCk7XG4gICAgcmV0dXJuIHtcbiAgICAgICdWUENJZCc6IHJvcy5zdHJpbmdUb1Jvc1RlbXBsYXRlKHByb3BlcnRpZXMudnBjSWQpLFxuICAgICAgJ05ldHdvcmtUeXBlJzogcm9zLnN0cmluZ1RvUm9zVGVtcGxhdGUocHJvcGVydGllcy5uZXR3b3JrVHlwZSksXG4gICAgICAnVlN3aXRjaElkJzogcm9zLnN0cmluZ1RvUm9zVGVtcGxhdGUocHJvcGVydGllcy52U3dpdGNoSWQpLFxuICAgIH07XG59XG5cbi8qKlxuICogUHJvcGVydGllcyBmb3IgZGVmaW5pbmcgYSBgUm9zU3luY2hyb25pemF0aW9uSm9iMmAuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2FsaXl1bi1kdHMtc3luY2hyb25pemF0aW9uam9iMlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFJvc1N5bmNocm9uaXphdGlvbkpvYjJQcm9wcyB7XG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgZGF0YUluaXRpYWxpemF0aW9uOiBTcGVjaWZpZXMgd2hldGhlciB0byBwZXJmb3JtIGZ1bGwgZGF0YSBtaWdyYXRpb24gb3IgZnVsbCBkYXRhIHN5bmNocm9uaXphdGlvbi4gRGVmYXVsdCB2YWx1ZTogKip0cnVlKiouIFZhbGlkIHZhbHVlczogKip0cnVlKiogYW5kICoqZmFsc2UqKi5cbiAgICAgKi9cbiAgICByZWFkb25seSBkYXRhSW5pdGlhbGl6YXRpb246IGJvb2xlYW4gfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgZGF0YVN5bmNocm9uaXphdGlvbjogU3BlY2lmaWVzIHdoZXRoZXIgdG8gcGVyZm9ybSBpbmNyZW1lbnRhbCBkYXRhIG1pZ3JhdGlvbiBvciBpbmNyZW1lbnRhbCBkYXRhIHN5bmNocm9uaXphdGlvbi4gRGVmYXVsdCB2YWx1ZTogKipmYWxzZSoqLiBWYWxpZCB2YWx1ZXM6ICoqdHJ1ZSoqIGFuZCAqKmZhbHNlKiouXG4gICAgICovXG4gICAgcmVhZG9ubHkgZGF0YVN5bmNocm9uaXphdGlvbjogYm9vbGVhbiB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBkYkxpc3Q6IFRoZSBvYmplY3RzIHRoYXQgeW91IHdhbnQgdG8gbWlncmF0ZSBvciBzeW5jaHJvbml6ZS5cbiAgICAgKi9cbiAgICByZWFkb25seSBkYkxpc3Q6IHsgW2tleTogc3RyaW5nXTogKGFueSB8IHJvcy5JUmVzb2x2YWJsZSkgfSB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBkZXN0aW5hdGlvbkVuZHBvaW50OiBEZXN0aW5hdGlvbiBpbnN0YW5jZSBjb25maWd1cmF0aW9uLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGRlc3RpbmF0aW9uRW5kcG9pbnQ6IFJvc1N5bmNocm9uaXphdGlvbkpvYjIuRGVzdGluYXRpb25FbmRwb2ludFByb3BlcnR5IHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IGR0c0pvYk5hbWU6IFRoZSBuYW1lIG9mIHRoZSBEVFMgaW5zdGFuY2UuXG4gICAgICovXG4gICAgcmVhZG9ubHkgZHRzSm9iTmFtZTogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IHNvdXJjZUVuZHBvaW50OiBTb3VyY2UgaW5zdGFuY2UgY29uZmlndXJhdGlvbi5cbiAgICAgKi9cbiAgICByZWFkb25seSBzb3VyY2VFbmRwb2ludDogUm9zU3luY2hyb25pemF0aW9uSm9iMi5Tb3VyY2VFbmRwb2ludFByb3BlcnR5IHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IHN0cnVjdHVyZUluaXRpYWxpemF0aW9uOiBTcGVjaWZpZXMgd2hldGhlciB0byBwZXJmb3JtIHNjaGVtYSBtaWdyYXRpb24gb3Igc2NoZW1hIHN5bmNocm9uaXphdGlvbi4gRGVmYXVsdCB2YWx1ZTogdHJ1ZS4gVmFsaWQgdmFsdWVzOiAqKnRydWUqKiBhbmQgKipmYWxzZSoqLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHN0cnVjdHVyZUluaXRpYWxpemF0aW9uOiBib29sZWFuIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IGNoZWNrcG9pbnQ6IFRoZSBzdGFydCBvZmZzZXQgb2YgaW5jcmVtZW50YWwgZGF0YSBtaWdyYXRpb24gb3Igc3luY2hyb25pemF0aW9uLiBUaGlzIHZhbHVlIGlzIGEgVU5JWCB0aW1lc3RhbXAgcmVwcmVzZW50aW5nIHRoZSBudW1iZXIgb2Ygc2Vjb25kcyB0aGF0IGhhdmUgZWxhcHNlZCBzaW5jZSBKYW51YXJ5IDEsIDE5NzAsIDAwOjAwOjAwIFVUQy5cbiAgICAgKi9cbiAgICByZWFkb25seSBjaGVja3BvaW50Pzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IGRhdGFDaGVja0NvbmZpZ3VyZTogVGhlIGRhdGEgdmVyaWZpY2F0aW9uIHRhc2sgZm9yIGEgZGF0YSBtaWdyYXRpb24gb3Igc3luY2hyb25pemF0aW9uIGluc3RhbmNlLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGRhdGFDaGVja0NvbmZpZ3VyZT86IFJvc1N5bmNocm9uaXphdGlvbkpvYjIuRGF0YUNoZWNrQ29uZmlndXJlUHJvcGVydHkgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgZGVkaWNhdGVkQ2x1c3RlcklkOiBUaGUgSUQgb2YgdGhlIERUUyBkZWRpY2F0ZWQgY2x1c3RlciBvbiB3aGljaCB0aGUgdGFzayBydW5zLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGRlZGljYXRlZENsdXN0ZXJJZD86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBkZWxheU5vdGljZTogU3BlY2lmaWVzIHdoZXRoZXIgdG8gbW9uaXRvciB0aGUgdGFzayBsYXRlbmN5LiBWYWxpZCB2YWx1ZXM6ICoqdHJ1ZSoqIGFuZCAqKmZhbHNlKipcbiAgICAgKi9cbiAgICByZWFkb25seSBkZWxheU5vdGljZT86IGJvb2xlYW4gfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgZGVsYXlQaG9uZTogVGhlIG1vYmlsZSBudW1iZXJzIHRoYXQgcmVjZWl2ZSBsYXRlbmN5LXJlbGF0ZWQgYWxlcnRzLiBTZXBhcmF0ZSBtdWx0aXBsZSBtb2JpbGUgbnVtYmVycyB3aXRoIGNvbW1hcyAoLCkuXG4gICAgICogKipOb3RlKio6IFRoaXMgcGFyYW1ldGVyIGlzIGF2YWlsYWJsZSBvbmx5IGZvciB1c2VycyBvZiB0aGUgQ2hpbmEgc2l0ZSAoYWxpeXVuLmNvbSkuIE9ubHkgbW9iaWxlIG51bWJlcnMgaW4gdGhlIENoaW5lc2UgbWFpbmxhbmQgYXJlIHN1cHBvcnRlZC4gWW91IGNhbiBzcGVjaWZ5IHVwIHRvIDEwIG1vYmlsZSBudW1iZXJzLiBVc2VycyBvZiB0aGUgaW50ZXJuYXRpb25hbCBzaXRlIChhbGliYWJhY2xvdWQuY29tKSBjYW5ub3QgcmVjZWl2ZSBhbGVydHMgYnkgdXNpbmcgbW9iaWxlIG51bWJlcnMsIGJ1dCBjYW4gY29uZmlndXJlIGFsZXJ0IHJ1bGVzIGZvciBEVFMgdGFza3MgaW4gdGhlIENsb3VkTW9uaXRvciBjb25zb2xlLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGRlbGF5UGhvbmU/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgZGVsYXlSdWxlVGltZTogVGhlIHRocmVzaG9sZCBmb3IgbGF0ZW5jeSBhbGVydHMuIFVuaXQ6IHNlY29uZHMuIFlvdSBjYW4gc2V0IHRoZSB0aHJlc2hvbGQgYmFzZWQgb24geW91ciBidXNpbmVzcyByZXF1aXJlbWVudHMuIFRvIHByZXZlbnQgaml0dGVycyBjYXVzZWQgYnkgbmV0d29yayBhbmQgZGF0YWJhc2Ugb3ZlcmxvYWRzLCB3ZSByZWNvbW1lbmQgdGhhdCB5b3Ugc2V0IHRoZSB0aHJlc2hvbGQgdG8gbW9yZSB0aGFuIDEwIHNlY29uZHMuXG4gICAgICovXG4gICAgcmVhZG9ubHkgZGVsYXlSdWxlVGltZT86IG51bWJlciB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBkaXNhc3RlclJlY292ZXJ5Sm9iOiBTcGVjaWZpZXMgd2hldGhlciB0aGUgaW5zdGFuY2UgaXMgYSBkaXNhc3RlciByZWNvdmVyeSBpbnN0YW5jZS4gVmFsaWQgdmFsdWVzOiAqKnRydWUqKiBhbmQgKipmYWxzZSoqXG4gICAgICovXG4gICAgcmVhZG9ubHkgZGlzYXN0ZXJSZWNvdmVyeUpvYj86IGJvb2xlYW4gfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgZHRzQmlzTGFiZWw6IFRoZSBlbnZpcm9ubWVudCB0YWcgb2YgdGhlIERUUyBpbnN0YW5jZS4gVmFsaWQgdmFsdWVzOiAqKm5vcm1hbCoqIGFuZCAqKm9ubGluZSoqLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGR0c0Jpc0xhYmVsPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IGR0c0luc3RhbmNlSWQ6IFRoZSBJRCBvZiB0aGUgRFRTIGluc3RhbmNlLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGR0c0luc3RhbmNlSWQ/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgZHRzSm9iSWQ6IFRoZSBJRCBvZiB0aGUgRFRTIHRhc2suXG4gICAgICovXG4gICAgcmVhZG9ubHkgZHRzSm9iSWQ/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgZXJyb3JOb3RpY2U6IFNwZWNpZmllcyB3aGV0aGVyIHRvIG1vbml0b3IgdGhlIHRhc2sgc3RhdHVzLiBWYWxpZCB2YWx1ZXM6ICoqdHJ1ZSoqIGFuZCAqKmZhbHNlKiouXG4gICAgICovXG4gICAgcmVhZG9ubHkgZXJyb3JOb3RpY2U/OiBib29sZWFuIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IGVycm9yUGhvbmU6IFRoZSBtb2JpbGUgbnVtYmVycyB0aGF0IHJlY2VpdmUgc3RhdHVzLXJlbGF0ZWQgYWxlcnRzLiBTZXBhcmF0ZSBtdWx0aXBsZSBtb2JpbGUgbnVtYmVycyB3aXRoIGNvbW1hcyAoLCkuXG4gICAgICogKipOb3RlKio6IFRoaXMgcGFyYW1ldGVyIGlzIGF2YWlsYWJsZSBvbmx5IGZvciB1c2VycyBvZiB0aGUgQ2hpbmEgc2l0ZSAoYWxpeXVuLmNvbSkuIE9ubHkgbW9iaWxlIG51bWJlcnMgaW4gdGhlIENoaW5lc2UgbWFpbmxhbmQgYXJlIHN1cHBvcnRlZC4gWW91IGNhbiBzcGVjaWZ5IHVwIHRvIDEwIG1vYmlsZSBudW1iZXJzLiBVc2VycyBvZiB0aGUgaW50ZXJuYXRpb25hbCBzaXRlIChhbGliYWJhY2xvdWQuY29tKSBjYW5ub3QgcmVjZWl2ZSBhbGVydHMgYnkgdXNpbmcgbW9iaWxlIG51bWJlcnMsIGJ1dCBjYW4gY29uZmlndXJlIGFsZXJ0IHJ1bGVzIGZvciBEVFMgdGFza3MgaW4gdGhlIENsb3VkTW9uaXRvciBjb25zb2xlLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGVycm9yUGhvbmU/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgZmlsZU9zc1VybDogVGhlIFVSTCBvZiB0aGUgT2JqZWN0IFN0b3JhZ2UgU2VydmljZSAoT1NTKSBidWNrZXQgdGhhdCBzdG9yZXMgdGhlIGZpbGVzIHJlbGF0ZWQgdG8gdGhlIERUUyB0YXNrLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGZpbGVPc3NVcmw/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgcmVzZXJ2ZTogVGhlIHJlc2VydmVkIHBhcmFtZXRlciBvZiBEVFMuIFlvdSBjYW4gc3BlY2lmeSB0aGlzIHBhcmFtZXRlciB0byBhZGQgbW9yZSBjb25maWd1cmF0aW9ucyBvZiB0aGUgc291cmNlIG9yIGRlc3RpbmF0aW9uIGluc3RhbmNlIHRvIHRoZSBEVFMgdGFzay4gRm9yIGV4YW1wbGUsIHlvdSBjYW4gc3BlY2lmeSB0aGUgZGF0YSBzdG9yYWdlIGZvcm1hdCBvZiB0aGUgZGVzdGluYXRpb24gS2Fma2EgZGF0YWJhc2UgYW5kIHRoZSBJRCBvZiB0aGUgQ0VOIGluc3RhbmNlLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHJlc2VydmU/OiB7IFtrZXk6IHN0cmluZ106IChhbnkgfCByb3MuSVJlc29sdmFibGUpIH0gfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgc3RhdHVzOiBUaGUgc3RhdHVzIG9mIHRoZSByZXNvdXJjZS4gVmFsaWQgdmFsdWVzOlxuICAgICAqIC0gKipTeW5jaHJvbml6aW5nKio6IFN0YXJ0IHRoZSB0YXNrLlxuICAgICAqIC0gKipTdXNwZW5kaW5nKio6IFN1c3BlbmQgdGhlIHRhc2suXG4gICAgICogLSAqKlN0b3BwaW5nKio6IFN0b3AgdGhlIHRhc2suXG4gICAgICovXG4gICAgcmVhZG9ubHkgc3RhdHVzPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IHN5bmNocm9uaXphdGlvbkRpcmVjdGlvbjogVGhlIHN5bmNocm9uaXphdGlvbiBkaXJlY3Rpb24uIERlZmF1bHQgdmFsdWU6IEZvcndhcmQuIFZhbGlkIHZhbHVlczpcbiAgICAgKiAtICoqRm9yd2FyZCoqOiBEYXRhIGlzIHN5bmNocm9uaXplZCBmcm9tIHRoZSBzb3VyY2UgZGF0YWJhc2UgdG8gdGhlIGRlc3RpbmF0aW9uIGRhdGFiYXNlLlxuICAgICAqIC0gKipSZXZlcnNlKio6IERhdGEgaXMgc3luY2hyb25pemVkIGZyb20gdGhlIGRlc3RpbmF0aW9uIGRhdGFiYXNlIHRvIHRoZSBzb3VyY2UgZGF0YWJhc2UuXG4gICAgICogKipOb3RlKio6IFRoZSBkZWZhdWx0IHZhbHVlIGlzICoqRm9yd2FyZCoqLlxuICAgICAqIFRoZSB2YWx1ZSBSZXZlcnNlIHRha2VzIGVmZmVjdCBvbmx5IGlmIHRoZSB0b3BvbG9neSBvZiB0aGUgZGF0YSBzeW5jaHJvbml6YXRpb24gdGFzayBpcyB0d28td2F5IHN5bmNocm9uaXphdGlvbi5cbiAgICAgKi9cbiAgICByZWFkb25seSBzeW5jaHJvbml6YXRpb25EaXJlY3Rpb24/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIHdoZXRoZXIgdGhlIGdpdmVuIHByb3BlcnRpZXMgbWF0Y2ggdGhvc2Ugb2YgYSBgUm9zU3luY2hyb25pemF0aW9uSm9iMlByb3BzYFxuICpcbiAqIEBwYXJhbSBwcm9wZXJ0aWVzIC0gdGhlIFR5cGVTY3JpcHQgcHJvcGVydGllcyBvZiBhIGBSb3NTeW5jaHJvbml6YXRpb25Kb2IyUHJvcHNgXG4gKlxuICogQHJldHVybnMgdGhlIHJlc3VsdCBvZiB0aGUgdmFsaWRhdGlvbi5cbiAqL1xuZnVuY3Rpb24gUm9zU3luY2hyb25pemF0aW9uSm9iMlByb3BzVmFsaWRhdG9yKHByb3BlcnRpZXM6IGFueSk6IHJvcy5WYWxpZGF0aW9uUmVzdWx0IHtcbiAgICBpZiAoIXJvcy5jYW5JbnNwZWN0KHByb3BlcnRpZXMpKSB7IHJldHVybiByb3MuVkFMSURBVElPTl9TVUNDRVNTOyB9XG4gICAgY29uc3QgZXJyb3JzID0gbmV3IHJvcy5WYWxpZGF0aW9uUmVzdWx0cygpO1xuICAgIGlmKHByb3BlcnRpZXMuc3RhdHVzICYmICh0eXBlb2YgcHJvcGVydGllcy5zdGF0dXMpICE9PSAnb2JqZWN0Jykge1xuICAgICAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ3N0YXR1cycsIHJvcy52YWxpZGF0ZUFsbG93ZWRWYWx1ZXMpKHtcbiAgICAgICAgICBkYXRhOiBwcm9wZXJ0aWVzLnN0YXR1cyxcbiAgICAgICAgICBhbGxvd2VkVmFsdWVzOiBbXCJTeW5jaHJvbml6aW5nXCIsXCJTdXNwZW5kaW5nXCIsXCJTdG9wcGluZ1wiXSxcbiAgICAgICAgfSkpO1xuICAgIH1cbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ3N0YXR1cycsIHJvcy52YWxpZGF0ZVN0cmluZykocHJvcGVydGllcy5zdGF0dXMpKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ3Jlc2VydmUnLCByb3MuaGFzaFZhbGlkYXRvcihyb3MudmFsaWRhdGVBbnkpKShwcm9wZXJ0aWVzLnJlc2VydmUpKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ2RhdGFTeW5jaHJvbml6YXRpb24nLCByb3MucmVxdWlyZWRWYWxpZGF0b3IpKHByb3BlcnRpZXMuZGF0YVN5bmNocm9uaXphdGlvbikpO1xuICAgIGVycm9ycy5jb2xsZWN0KHJvcy5wcm9wZXJ0eVZhbGlkYXRvcignZGF0YVN5bmNocm9uaXphdGlvbicsIHJvcy52YWxpZGF0ZUJvb2xlYW4pKHByb3BlcnRpZXMuZGF0YVN5bmNocm9uaXphdGlvbikpO1xuICAgIGVycm9ycy5jb2xsZWN0KHJvcy5wcm9wZXJ0eVZhbGlkYXRvcignZGVsYXlQaG9uZScsIHJvcy52YWxpZGF0ZVN0cmluZykocHJvcGVydGllcy5kZWxheVBob25lKSk7XG4gICAgZXJyb3JzLmNvbGxlY3Qocm9zLnByb3BlcnR5VmFsaWRhdG9yKCdkZWRpY2F0ZWRDbHVzdGVySWQnLCByb3MudmFsaWRhdGVTdHJpbmcpKHByb3BlcnRpZXMuZGVkaWNhdGVkQ2x1c3RlcklkKSk7XG4gICAgZXJyb3JzLmNvbGxlY3Qocm9zLnByb3BlcnR5VmFsaWRhdG9yKCdlcnJvck5vdGljZScsIHJvcy52YWxpZGF0ZUJvb2xlYW4pKHByb3BlcnRpZXMuZXJyb3JOb3RpY2UpKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ2R0c0pvYk5hbWUnLCByb3MucmVxdWlyZWRWYWxpZGF0b3IpKHByb3BlcnRpZXMuZHRzSm9iTmFtZSkpO1xuICAgIGVycm9ycy5jb2xsZWN0KHJvcy5wcm9wZXJ0eVZhbGlkYXRvcignZHRzSm9iTmFtZScsIHJvcy52YWxpZGF0ZVN0cmluZykocHJvcGVydGllcy5kdHNKb2JOYW1lKSk7XG4gICAgZXJyb3JzLmNvbGxlY3Qocm9zLnByb3BlcnR5VmFsaWRhdG9yKCdkZWxheVJ1bGVUaW1lJywgcm9zLnZhbGlkYXRlTnVtYmVyKShwcm9wZXJ0aWVzLmRlbGF5UnVsZVRpbWUpKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ2R0c0luc3RhbmNlSWQnLCByb3MudmFsaWRhdGVTdHJpbmcpKHByb3BlcnRpZXMuZHRzSW5zdGFuY2VJZCkpO1xuICAgIGVycm9ycy5jb2xsZWN0KHJvcy5wcm9wZXJ0eVZhbGlkYXRvcignZGJMaXN0Jywgcm9zLnJlcXVpcmVkVmFsaWRhdG9yKShwcm9wZXJ0aWVzLmRiTGlzdCkpO1xuICAgIGVycm9ycy5jb2xsZWN0KHJvcy5wcm9wZXJ0eVZhbGlkYXRvcignZGJMaXN0Jywgcm9zLmhhc2hWYWxpZGF0b3Iocm9zLnZhbGlkYXRlQW55KSkocHJvcGVydGllcy5kYkxpc3QpKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ2ZpbGVPc3NVcmwnLCByb3MudmFsaWRhdGVTdHJpbmcpKHByb3BlcnRpZXMuZmlsZU9zc1VybCkpO1xuICAgIGVycm9ycy5jb2xsZWN0KHJvcy5wcm9wZXJ0eVZhbGlkYXRvcignZGF0YUNoZWNrQ29uZmlndXJlJywgUm9zU3luY2hyb25pemF0aW9uSm9iMl9EYXRhQ2hlY2tDb25maWd1cmVQcm9wZXJ0eVZhbGlkYXRvcikocHJvcGVydGllcy5kYXRhQ2hlY2tDb25maWd1cmUpKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ2R0c0Jpc0xhYmVsJywgcm9zLnZhbGlkYXRlU3RyaW5nKShwcm9wZXJ0aWVzLmR0c0Jpc0xhYmVsKSk7XG4gICAgZXJyb3JzLmNvbGxlY3Qocm9zLnByb3BlcnR5VmFsaWRhdG9yKCdjaGVja3BvaW50Jywgcm9zLnZhbGlkYXRlU3RyaW5nKShwcm9wZXJ0aWVzLmNoZWNrcG9pbnQpKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ2Rpc2FzdGVyUmVjb3ZlcnlKb2InLCByb3MudmFsaWRhdGVCb29sZWFuKShwcm9wZXJ0aWVzLmRpc2FzdGVyUmVjb3ZlcnlKb2IpKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ2R0c0pvYklkJywgcm9zLnZhbGlkYXRlU3RyaW5nKShwcm9wZXJ0aWVzLmR0c0pvYklkKSk7XG4gICAgZXJyb3JzLmNvbGxlY3Qocm9zLnByb3BlcnR5VmFsaWRhdG9yKCdkZWxheU5vdGljZScsIHJvcy52YWxpZGF0ZUJvb2xlYW4pKHByb3BlcnRpZXMuZGVsYXlOb3RpY2UpKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ2RhdGFJbml0aWFsaXphdGlvbicsIHJvcy5yZXF1aXJlZFZhbGlkYXRvcikocHJvcGVydGllcy5kYXRhSW5pdGlhbGl6YXRpb24pKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ2RhdGFJbml0aWFsaXphdGlvbicsIHJvcy52YWxpZGF0ZUJvb2xlYW4pKHByb3BlcnRpZXMuZGF0YUluaXRpYWxpemF0aW9uKSk7XG4gICAgZXJyb3JzLmNvbGxlY3Qocm9zLnByb3BlcnR5VmFsaWRhdG9yKCdkZXN0aW5hdGlvbkVuZHBvaW50Jywgcm9zLnJlcXVpcmVkVmFsaWRhdG9yKShwcm9wZXJ0aWVzLmRlc3RpbmF0aW9uRW5kcG9pbnQpKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ2Rlc3RpbmF0aW9uRW5kcG9pbnQnLCBSb3NTeW5jaHJvbml6YXRpb25Kb2IyX0Rlc3RpbmF0aW9uRW5kcG9pbnRQcm9wZXJ0eVZhbGlkYXRvcikocHJvcGVydGllcy5kZXN0aW5hdGlvbkVuZHBvaW50KSk7XG4gICAgZXJyb3JzLmNvbGxlY3Qocm9zLnByb3BlcnR5VmFsaWRhdG9yKCdzb3VyY2VFbmRwb2ludCcsIHJvcy5yZXF1aXJlZFZhbGlkYXRvcikocHJvcGVydGllcy5zb3VyY2VFbmRwb2ludCkpO1xuICAgIGVycm9ycy5jb2xsZWN0KHJvcy5wcm9wZXJ0eVZhbGlkYXRvcignc291cmNlRW5kcG9pbnQnLCBSb3NTeW5jaHJvbml6YXRpb25Kb2IyX1NvdXJjZUVuZHBvaW50UHJvcGVydHlWYWxpZGF0b3IpKHByb3BlcnRpZXMuc291cmNlRW5kcG9pbnQpKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ2Vycm9yUGhvbmUnLCByb3MudmFsaWRhdGVTdHJpbmcpKHByb3BlcnRpZXMuZXJyb3JQaG9uZSkpO1xuICAgIGVycm9ycy5jb2xsZWN0KHJvcy5wcm9wZXJ0eVZhbGlkYXRvcignc3RydWN0dXJlSW5pdGlhbGl6YXRpb24nLCByb3MucmVxdWlyZWRWYWxpZGF0b3IpKHByb3BlcnRpZXMuc3RydWN0dXJlSW5pdGlhbGl6YXRpb24pKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ3N0cnVjdHVyZUluaXRpYWxpemF0aW9uJywgcm9zLnZhbGlkYXRlQm9vbGVhbikocHJvcGVydGllcy5zdHJ1Y3R1cmVJbml0aWFsaXphdGlvbikpO1xuICAgIGVycm9ycy5jb2xsZWN0KHJvcy5wcm9wZXJ0eVZhbGlkYXRvcignc3luY2hyb25pemF0aW9uRGlyZWN0aW9uJywgcm9zLnZhbGlkYXRlU3RyaW5nKShwcm9wZXJ0aWVzLnN5bmNocm9uaXphdGlvbkRpcmVjdGlvbikpO1xuICAgIHJldHVybiBlcnJvcnMud3JhcCgnc3VwcGxpZWQgcHJvcGVydGllcyBub3QgY29ycmVjdCBmb3IgXCJSb3NTeW5jaHJvbml6YXRpb25Kb2IyUHJvcHNcIicpO1xufVxuXG4vKipcbiAqIFJlbmRlcnMgdGhlIEFsaUNsb3VkIFJPUyBSZXNvdXJjZSBwcm9wZXJ0aWVzIG9mIGFuIGBBTElZVU46OkRUUzo6U3luY2hyb25pemF0aW9uSm9iMmAgcmVzb3VyY2VcbiAqXG4gKiBAcGFyYW0gcHJvcGVydGllcyAtIHRoZSBUeXBlU2NyaXB0IHByb3BlcnRpZXMgb2YgYSBgUm9zU3luY2hyb25pemF0aW9uSm9iMlByb3BzYFxuICpcbiAqIEByZXR1cm5zIHRoZSBBbGlDbG91ZCBST1MgUmVzb3VyY2UgcHJvcGVydGllcyBvZiBhbiBgQUxJWVVOOjpEVFM6OlN5bmNocm9uaXphdGlvbkpvYjJgIHJlc291cmNlLlxuICovXG4vLyBAdHMtaWdub3JlIFRTNjEzM1xuZnVuY3Rpb24gcm9zU3luY2hyb25pemF0aW9uSm9iMlByb3BzVG9Sb3NUZW1wbGF0ZShwcm9wZXJ0aWVzOiBhbnksIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OiBib29sZWFuKTogYW55IHtcbiAgICBpZiAoIXJvcy5jYW5JbnNwZWN0KHByb3BlcnRpZXMpKSB7IHJldHVybiBwcm9wZXJ0aWVzOyB9XG4gICAgaWYoZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQpIHtcbiAgICAgICAgUm9zU3luY2hyb25pemF0aW9uSm9iMlByb3BzVmFsaWRhdG9yKHByb3BlcnRpZXMpLmFzc2VydFN1Y2Nlc3MoKTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICdEYXRhSW5pdGlhbGl6YXRpb24nOiByb3MuYm9vbGVhblRvUm9zVGVtcGxhdGUocHJvcGVydGllcy5kYXRhSW5pdGlhbGl6YXRpb24pLFxuICAgICAgJ0RhdGFTeW5jaHJvbml6YXRpb24nOiByb3MuYm9vbGVhblRvUm9zVGVtcGxhdGUocHJvcGVydGllcy5kYXRhU3luY2hyb25pemF0aW9uKSxcbiAgICAgICdEYkxpc3QnOiByb3MuaGFzaE1hcHBlcihyb3Mub2JqZWN0VG9Sb3NUZW1wbGF0ZSkocHJvcGVydGllcy5kYkxpc3QpLFxuICAgICAgJ0Rlc3RpbmF0aW9uRW5kcG9pbnQnOiByb3NTeW5jaHJvbml6YXRpb25Kb2IyRGVzdGluYXRpb25FbmRwb2ludFByb3BlcnR5VG9Sb3NUZW1wbGF0ZShwcm9wZXJ0aWVzLmRlc3RpbmF0aW9uRW5kcG9pbnQpLFxuICAgICAgJ0R0c0pvYk5hbWUnOiByb3Muc3RyaW5nVG9Sb3NUZW1wbGF0ZShwcm9wZXJ0aWVzLmR0c0pvYk5hbWUpLFxuICAgICAgJ1NvdXJjZUVuZHBvaW50Jzogcm9zU3luY2hyb25pemF0aW9uSm9iMlNvdXJjZUVuZHBvaW50UHJvcGVydHlUb1Jvc1RlbXBsYXRlKHByb3BlcnRpZXMuc291cmNlRW5kcG9pbnQpLFxuICAgICAgJ1N0cnVjdHVyZUluaXRpYWxpemF0aW9uJzogcm9zLmJvb2xlYW5Ub1Jvc1RlbXBsYXRlKHByb3BlcnRpZXMuc3RydWN0dXJlSW5pdGlhbGl6YXRpb24pLFxuICAgICAgJ0NoZWNrcG9pbnQnOiByb3Muc3RyaW5nVG9Sb3NUZW1wbGF0ZShwcm9wZXJ0aWVzLmNoZWNrcG9pbnQpLFxuICAgICAgJ0RhdGFDaGVja0NvbmZpZ3VyZSc6IHJvc1N5bmNocm9uaXphdGlvbkpvYjJEYXRhQ2hlY2tDb25maWd1cmVQcm9wZXJ0eVRvUm9zVGVtcGxhdGUocHJvcGVydGllcy5kYXRhQ2hlY2tDb25maWd1cmUpLFxuICAgICAgJ0RlZGljYXRlZENsdXN0ZXJJZCc6IHJvcy5zdHJpbmdUb1Jvc1RlbXBsYXRlKHByb3BlcnRpZXMuZGVkaWNhdGVkQ2x1c3RlcklkKSxcbiAgICAgICdEZWxheU5vdGljZSc6IHJvcy5ib29sZWFuVG9Sb3NUZW1wbGF0ZShwcm9wZXJ0aWVzLmRlbGF5Tm90aWNlKSxcbiAgICAgICdEZWxheVBob25lJzogcm9zLnN0cmluZ1RvUm9zVGVtcGxhdGUocHJvcGVydGllcy5kZWxheVBob25lKSxcbiAgICAgICdEZWxheVJ1bGVUaW1lJzogcm9zLm51bWJlclRvUm9zVGVtcGxhdGUocHJvcGVydGllcy5kZWxheVJ1bGVUaW1lKSxcbiAgICAgICdEaXNhc3RlclJlY292ZXJ5Sm9iJzogcm9zLmJvb2xlYW5Ub1Jvc1RlbXBsYXRlKHByb3BlcnRpZXMuZGlzYXN0ZXJSZWNvdmVyeUpvYiksXG4gICAgICAnRHRzQmlzTGFiZWwnOiByb3Muc3RyaW5nVG9Sb3NUZW1wbGF0ZShwcm9wZXJ0aWVzLmR0c0Jpc0xhYmVsKSxcbiAgICAgICdEdHNJbnN0YW5jZUlkJzogcm9zLnN0cmluZ1RvUm9zVGVtcGxhdGUocHJvcGVydGllcy5kdHNJbnN0YW5jZUlkKSxcbiAgICAgICdEdHNKb2JJZCc6IHJvcy5zdHJpbmdUb1Jvc1RlbXBsYXRlKHByb3BlcnRpZXMuZHRzSm9iSWQpLFxuICAgICAgJ0Vycm9yTm90aWNlJzogcm9zLmJvb2xlYW5Ub1Jvc1RlbXBsYXRlKHByb3BlcnRpZXMuZXJyb3JOb3RpY2UpLFxuICAgICAgJ0Vycm9yUGhvbmUnOiByb3Muc3RyaW5nVG9Sb3NUZW1wbGF0ZShwcm9wZXJ0aWVzLmVycm9yUGhvbmUpLFxuICAgICAgJ0ZpbGVPc3NVcmwnOiByb3Muc3RyaW5nVG9Sb3NUZW1wbGF0ZShwcm9wZXJ0aWVzLmZpbGVPc3NVcmwpLFxuICAgICAgJ1Jlc2VydmUnOiByb3MuaGFzaE1hcHBlcihyb3Mub2JqZWN0VG9Sb3NUZW1wbGF0ZSkocHJvcGVydGllcy5yZXNlcnZlKSxcbiAgICAgICdTdGF0dXMnOiByb3Muc3RyaW5nVG9Sb3NUZW1wbGF0ZShwcm9wZXJ0aWVzLnN0YXR1cyksXG4gICAgICAnU3luY2hyb25pemF0aW9uRGlyZWN0aW9uJzogcm9zLnN0cmluZ1RvUm9zVGVtcGxhdGUocHJvcGVydGllcy5zeW5jaHJvbml6YXRpb25EaXJlY3Rpb24pLFxuICAgIH07XG59XG5cbi8qKlxuICogVGhpcyBjbGFzcyBpcyBhIGJhc2UgZW5jYXBzdWxhdGlvbiBhcm91bmQgdGhlIFJPUyByZXNvdXJjZSB0eXBlIGBBTElZVU46OkRUUzo6U3luY2hyb25pemF0aW9uSm9iMmAsIHdoaWNoIGlzIHVzZWQgdG8gY29uZmlndXJlIGEgZGF0YSBzeW5jaHJvbml6YXRpb24gdGFzay5cbiAqIEBOb3RlIFRoaXMgY2xhc3MgZG9lcyBub3QgY29udGFpbiBhZGRpdGlvbmFsIGZ1bmN0aW9ucywgc28gaXQgaXMgcmVjb21tZW5kZWQgdG8gdXNlIHRoZSBgU3luY2hyb25pemF0aW9uSm9iMmAgY2xhc3MgaW5zdGVhZCBvZiB0aGlzIGNsYXNzIGZvciBhIG1vcmUgY29udmVuaWVudCBkZXZlbG9wbWVudCBleHBlcmllbmNlLlxuICogU2VlIGh0dHBzOi8vd3d3LmFsaWJhYmFjbG91ZC5jb20vaGVscC9yb3MvZGV2ZWxvcGVyLXJlZmVyZW5jZS9hbGl5dW4tZHRzLXN5bmNocm9uaXphdGlvbmpvYjJcbiAqL1xuZXhwb3J0IGNsYXNzIFJvc1N5bmNocm9uaXphdGlvbkpvYjIgZXh0ZW5kcyByb3MuUm9zUmVzb3VyY2Uge1xuICAgIC8qKlxuICAgICAqIFRoZSByZXNvdXJjZSB0eXBlIG5hbWUgZm9yIHRoaXMgcmVzb3VyY2UgY2xhc3MuXG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyByZWFkb25seSBST1NfUkVTT1VSQ0VfVFlQRV9OQU1FID0gXCJBTElZVU46OkRUUzo6U3luY2hyb25pemF0aW9uSm9iMlwiO1xuXG4gICAgLyoqXG4gICAgICogQEF0dHJpYnV0ZSBEdHNJbnN0YW5jZUlkOiBUaGUgSUQgb2YgdGhlIERUUyBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckR0c0luc3RhbmNlSWQ6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEBBdHRyaWJ1dGUgRHRzSm9iSWQ6IFRoZSBJRCBvZiB0aGUgdGFzay5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckR0c0pvYklkOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBAQXR0cmlidXRlIER0c0pvYk5hbWU6IFRoZSBuYW1lIG9mIHRoZSBEVFMgam9iLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyRHRzSm9iTmFtZTogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgcHVibGljIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OiBib29sZWFuO1xuXG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgZGF0YUluaXRpYWxpemF0aW9uOiBTcGVjaWZpZXMgd2hldGhlciB0byBwZXJmb3JtIGZ1bGwgZGF0YSBtaWdyYXRpb24gb3IgZnVsbCBkYXRhIHN5bmNocm9uaXphdGlvbi4gRGVmYXVsdCB2YWx1ZTogKip0cnVlKiouIFZhbGlkIHZhbHVlczogKip0cnVlKiogYW5kICoqZmFsc2UqKi5cbiAgICAgKi9cbiAgICBwdWJsaWMgZGF0YUluaXRpYWxpemF0aW9uOiBib29sZWFuIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IGRhdGFTeW5jaHJvbml6YXRpb246IFNwZWNpZmllcyB3aGV0aGVyIHRvIHBlcmZvcm0gaW5jcmVtZW50YWwgZGF0YSBtaWdyYXRpb24gb3IgaW5jcmVtZW50YWwgZGF0YSBzeW5jaHJvbml6YXRpb24uIERlZmF1bHQgdmFsdWU6ICoqZmFsc2UqKi4gVmFsaWQgdmFsdWVzOiAqKnRydWUqKiBhbmQgKipmYWxzZSoqLlxuICAgICAqL1xuICAgIHB1YmxpYyBkYXRhU3luY2hyb25pemF0aW9uOiBib29sZWFuIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IGRiTGlzdDogVGhlIG9iamVjdHMgdGhhdCB5b3Ugd2FudCB0byBtaWdyYXRlIG9yIHN5bmNocm9uaXplLlxuICAgICAqL1xuICAgIHB1YmxpYyBkYkxpc3Q6IHsgW2tleTogc3RyaW5nXTogKGFueSB8IHJvcy5JUmVzb2x2YWJsZSkgfSB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBkZXN0aW5hdGlvbkVuZHBvaW50OiBEZXN0aW5hdGlvbiBpbnN0YW5jZSBjb25maWd1cmF0aW9uLlxuICAgICAqL1xuICAgIHB1YmxpYyBkZXN0aW5hdGlvbkVuZHBvaW50OiBSb3NTeW5jaHJvbml6YXRpb25Kb2IyLkRlc3RpbmF0aW9uRW5kcG9pbnRQcm9wZXJ0eSB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBkdHNKb2JOYW1lOiBUaGUgbmFtZSBvZiB0aGUgRFRTIGluc3RhbmNlLlxuICAgICAqL1xuICAgIHB1YmxpYyBkdHNKb2JOYW1lOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgc291cmNlRW5kcG9pbnQ6IFNvdXJjZSBpbnN0YW5jZSBjb25maWd1cmF0aW9uLlxuICAgICAqL1xuICAgIHB1YmxpYyBzb3VyY2VFbmRwb2ludDogUm9zU3luY2hyb25pemF0aW9uSm9iMi5Tb3VyY2VFbmRwb2ludFByb3BlcnR5IHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IHN0cnVjdHVyZUluaXRpYWxpemF0aW9uOiBTcGVjaWZpZXMgd2hldGhlciB0byBwZXJmb3JtIHNjaGVtYSBtaWdyYXRpb24gb3Igc2NoZW1hIHN5bmNocm9uaXphdGlvbi4gRGVmYXVsdCB2YWx1ZTogdHJ1ZS4gVmFsaWQgdmFsdWVzOiAqKnRydWUqKiBhbmQgKipmYWxzZSoqLlxuICAgICAqL1xuICAgIHB1YmxpYyBzdHJ1Y3R1cmVJbml0aWFsaXphdGlvbjogYm9vbGVhbiB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBjaGVja3BvaW50OiBUaGUgc3RhcnQgb2Zmc2V0IG9mIGluY3JlbWVudGFsIGRhdGEgbWlncmF0aW9uIG9yIHN5bmNocm9uaXphdGlvbi4gVGhpcyB2YWx1ZSBpcyBhIFVOSVggdGltZXN0YW1wIHJlcHJlc2VudGluZyB0aGUgbnVtYmVyIG9mIHNlY29uZHMgdGhhdCBoYXZlIGVsYXBzZWQgc2luY2UgSmFudWFyeSAxLCAxOTcwLCAwMDowMDowMCBVVEMuXG4gICAgICovXG4gICAgcHVibGljIGNoZWNrcG9pbnQ6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZSB8IHVuZGVmaW5lZDtcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBkYXRhQ2hlY2tDb25maWd1cmU6IFRoZSBkYXRhIHZlcmlmaWNhdGlvbiB0YXNrIGZvciBhIGRhdGEgbWlncmF0aW9uIG9yIHN5bmNocm9uaXphdGlvbiBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBwdWJsaWMgZGF0YUNoZWNrQ29uZmlndXJlOiBSb3NTeW5jaHJvbml6YXRpb25Kb2IyLkRhdGFDaGVja0NvbmZpZ3VyZVByb3BlcnR5IHwgcm9zLklSZXNvbHZhYmxlIHwgdW5kZWZpbmVkO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IGRlZGljYXRlZENsdXN0ZXJJZDogVGhlIElEIG9mIHRoZSBEVFMgZGVkaWNhdGVkIGNsdXN0ZXIgb24gd2hpY2ggdGhlIHRhc2sgcnVucy5cbiAgICAgKi9cbiAgICBwdWJsaWMgZGVkaWNhdGVkQ2x1c3RlcklkOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGUgfCB1bmRlZmluZWQ7XG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgZGVsYXlOb3RpY2U6IFNwZWNpZmllcyB3aGV0aGVyIHRvIG1vbml0b3IgdGhlIHRhc2sgbGF0ZW5jeS4gVmFsaWQgdmFsdWVzOiAqKnRydWUqKiBhbmQgKipmYWxzZSoqXG4gICAgICovXG4gICAgcHVibGljIGRlbGF5Tm90aWNlOiBib29sZWFuIHwgcm9zLklSZXNvbHZhYmxlIHwgdW5kZWZpbmVkO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IGRlbGF5UGhvbmU6IFRoZSBtb2JpbGUgbnVtYmVycyB0aGF0IHJlY2VpdmUgbGF0ZW5jeS1yZWxhdGVkIGFsZXJ0cy4gU2VwYXJhdGUgbXVsdGlwbGUgbW9iaWxlIG51bWJlcnMgd2l0aCBjb21tYXMgKCwpLlxuICAgICAqICoqTm90ZSoqOiBUaGlzIHBhcmFtZXRlciBpcyBhdmFpbGFibGUgb25seSBmb3IgdXNlcnMgb2YgdGhlIENoaW5hIHNpdGUgKGFsaXl1bi5jb20pLiBPbmx5IG1vYmlsZSBudW1iZXJzIGluIHRoZSBDaGluZXNlIG1haW5sYW5kIGFyZSBzdXBwb3J0ZWQuIFlvdSBjYW4gc3BlY2lmeSB1cCB0byAxMCBtb2JpbGUgbnVtYmVycy4gVXNlcnMgb2YgdGhlIGludGVybmF0aW9uYWwgc2l0ZSAoYWxpYmFiYWNsb3VkLmNvbSkgY2Fubm90IHJlY2VpdmUgYWxlcnRzIGJ5IHVzaW5nIG1vYmlsZSBudW1iZXJzLCBidXQgY2FuIGNvbmZpZ3VyZSBhbGVydCBydWxlcyBmb3IgRFRTIHRhc2tzIGluIHRoZSBDbG91ZE1vbml0b3IgY29uc29sZS5cbiAgICAgKi9cbiAgICBwdWJsaWMgZGVsYXlQaG9uZTogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlIHwgdW5kZWZpbmVkO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IGRlbGF5UnVsZVRpbWU6IFRoZSB0aHJlc2hvbGQgZm9yIGxhdGVuY3kgYWxlcnRzLiBVbml0OiBzZWNvbmRzLiBZb3UgY2FuIHNldCB0aGUgdGhyZXNob2xkIGJhc2VkIG9uIHlvdXIgYnVzaW5lc3MgcmVxdWlyZW1lbnRzLiBUbyBwcmV2ZW50IGppdHRlcnMgY2F1c2VkIGJ5IG5ldHdvcmsgYW5kIGRhdGFiYXNlIG92ZXJsb2Fkcywgd2UgcmVjb21tZW5kIHRoYXQgeW91IHNldCB0aGUgdGhyZXNob2xkIHRvIG1vcmUgdGhhbiAxMCBzZWNvbmRzLlxuICAgICAqL1xuICAgIHB1YmxpYyBkZWxheVJ1bGVUaW1lOiBudW1iZXIgfCByb3MuSVJlc29sdmFibGUgfCB1bmRlZmluZWQ7XG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgZGlzYXN0ZXJSZWNvdmVyeUpvYjogU3BlY2lmaWVzIHdoZXRoZXIgdGhlIGluc3RhbmNlIGlzIGEgZGlzYXN0ZXIgcmVjb3ZlcnkgaW5zdGFuY2UuIFZhbGlkIHZhbHVlczogKip0cnVlKiogYW5kICoqZmFsc2UqKlxuICAgICAqL1xuICAgIHB1YmxpYyBkaXNhc3RlclJlY292ZXJ5Sm9iOiBib29sZWFuIHwgcm9zLklSZXNvbHZhYmxlIHwgdW5kZWZpbmVkO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IGR0c0Jpc0xhYmVsOiBUaGUgZW52aXJvbm1lbnQgdGFnIG9mIHRoZSBEVFMgaW5zdGFuY2UuIFZhbGlkIHZhbHVlczogKipub3JtYWwqKiBhbmQgKipvbmxpbmUqKi5cbiAgICAgKi9cbiAgICBwdWJsaWMgZHRzQmlzTGFiZWw6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZSB8IHVuZGVmaW5lZDtcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBkdHNJbnN0YW5jZUlkOiBUaGUgSUQgb2YgdGhlIERUUyBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBwdWJsaWMgZHRzSW5zdGFuY2VJZDogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlIHwgdW5kZWZpbmVkO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IGR0c0pvYklkOiBUaGUgSUQgb2YgdGhlIERUUyB0YXNrLlxuICAgICAqL1xuICAgIHB1YmxpYyBkdHNKb2JJZDogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlIHwgdW5kZWZpbmVkO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IGVycm9yTm90aWNlOiBTcGVjaWZpZXMgd2hldGhlciB0byBtb25pdG9yIHRoZSB0YXNrIHN0YXR1cy4gVmFsaWQgdmFsdWVzOiAqKnRydWUqKiBhbmQgKipmYWxzZSoqLlxuICAgICAqL1xuICAgIHB1YmxpYyBlcnJvck5vdGljZTogYm9vbGVhbiB8IHJvcy5JUmVzb2x2YWJsZSB8IHVuZGVmaW5lZDtcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBlcnJvclBob25lOiBUaGUgbW9iaWxlIG51bWJlcnMgdGhhdCByZWNlaXZlIHN0YXR1cy1yZWxhdGVkIGFsZXJ0cy4gU2VwYXJhdGUgbXVsdGlwbGUgbW9iaWxlIG51bWJlcnMgd2l0aCBjb21tYXMgKCwpLlxuICAgICAqICoqTm90ZSoqOiBUaGlzIHBhcmFtZXRlciBpcyBhdmFpbGFibGUgb25seSBmb3IgdXNlcnMgb2YgdGhlIENoaW5hIHNpdGUgKGFsaXl1bi5jb20pLiBPbmx5IG1vYmlsZSBudW1iZXJzIGluIHRoZSBDaGluZXNlIG1haW5sYW5kIGFyZSBzdXBwb3J0ZWQuIFlvdSBjYW4gc3BlY2lmeSB1cCB0byAxMCBtb2JpbGUgbnVtYmVycy4gVXNlcnMgb2YgdGhlIGludGVybmF0aW9uYWwgc2l0ZSAoYWxpYmFiYWNsb3VkLmNvbSkgY2Fubm90IHJlY2VpdmUgYWxlcnRzIGJ5IHVzaW5nIG1vYmlsZSBudW1iZXJzLCBidXQgY2FuIGNvbmZpZ3VyZSBhbGVydCBydWxlcyBmb3IgRFRTIHRhc2tzIGluIHRoZSBDbG91ZE1vbml0b3IgY29uc29sZS5cbiAgICAgKi9cbiAgICBwdWJsaWMgZXJyb3JQaG9uZTogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlIHwgdW5kZWZpbmVkO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IGZpbGVPc3NVcmw6IFRoZSBVUkwgb2YgdGhlIE9iamVjdCBTdG9yYWdlIFNlcnZpY2UgKE9TUykgYnVja2V0IHRoYXQgc3RvcmVzIHRoZSBmaWxlcyByZWxhdGVkIHRvIHRoZSBEVFMgdGFzay5cbiAgICAgKi9cbiAgICBwdWJsaWMgZmlsZU9zc1VybDogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlIHwgdW5kZWZpbmVkO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IHJlc2VydmU6IFRoZSByZXNlcnZlZCBwYXJhbWV0ZXIgb2YgRFRTLiBZb3UgY2FuIHNwZWNpZnkgdGhpcyBwYXJhbWV0ZXIgdG8gYWRkIG1vcmUgY29uZmlndXJhdGlvbnMgb2YgdGhlIHNvdXJjZSBvciBkZXN0aW5hdGlvbiBpbnN0YW5jZSB0byB0aGUgRFRTIHRhc2suIEZvciBleGFtcGxlLCB5b3UgY2FuIHNwZWNpZnkgdGhlIGRhdGEgc3RvcmFnZSBmb3JtYXQgb2YgdGhlIGRlc3RpbmF0aW9uIEthZmthIGRhdGFiYXNlIGFuZCB0aGUgSUQgb2YgdGhlIENFTiBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVzZXJ2ZTogeyBba2V5OiBzdHJpbmddOiAoYW55IHwgcm9zLklSZXNvbHZhYmxlKSB9IHwgcm9zLklSZXNvbHZhYmxlIHwgdW5kZWZpbmVkO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IHN0YXR1czogVGhlIHN0YXR1cyBvZiB0aGUgcmVzb3VyY2UuIFZhbGlkIHZhbHVlczpcbiAgICAgKiAtICoqU3luY2hyb25pemluZyoqOiBTdGFydCB0aGUgdGFzay5cbiAgICAgKiAtICoqU3VzcGVuZGluZyoqOiBTdXNwZW5kIHRoZSB0YXNrLlxuICAgICAqIC0gKipTdG9wcGluZyoqOiBTdG9wIHRoZSB0YXNrLlxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0dXM6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZSB8IHVuZGVmaW5lZDtcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBzeW5jaHJvbml6YXRpb25EaXJlY3Rpb246IFRoZSBzeW5jaHJvbml6YXRpb24gZGlyZWN0aW9uLiBEZWZhdWx0IHZhbHVlOiBGb3J3YXJkLiBWYWxpZCB2YWx1ZXM6XG4gICAgICogLSAqKkZvcndhcmQqKjogRGF0YSBpcyBzeW5jaHJvbml6ZWQgZnJvbSB0aGUgc291cmNlIGRhdGFiYXNlIHRvIHRoZSBkZXN0aW5hdGlvbiBkYXRhYmFzZS5cbiAgICAgKiAtICoqUmV2ZXJzZSoqOiBEYXRhIGlzIHN5bmNocm9uaXplZCBmcm9tIHRoZSBkZXN0aW5hdGlvbiBkYXRhYmFzZSB0byB0aGUgc291cmNlIGRhdGFiYXNlLlxuICAgICAqICoqTm90ZSoqOiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyAqKkZvcndhcmQqKi5cbiAgICAgKiBUaGUgdmFsdWUgUmV2ZXJzZSB0YWtlcyBlZmZlY3Qgb25seSBpZiB0aGUgdG9wb2xvZ3kgb2YgdGhlIGRhdGEgc3luY2hyb25pemF0aW9uIHRhc2sgaXMgdHdvLXdheSBzeW5jaHJvbml6YXRpb24uXG4gICAgICovXG4gICAgcHVibGljIHN5bmNocm9uaXphdGlvbkRpcmVjdGlvbjogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlIHwgdW5kZWZpbmVkO1xuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHNjb3BlIC0gc2NvcGUgaW4gd2hpY2ggdGhpcyByZXNvdXJjZSBpcyBkZWZpbmVkXG4gICAgICogQHBhcmFtIGlkICAgIC0gc2NvcGVkIGlkIG9mIHRoZSByZXNvdXJjZVxuICAgICAqIEBwYXJhbSBwcm9wcyAtIHJlc291cmNlIHByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihzY29wZTogcm9zLkNvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IFJvc1N5bmNocm9uaXphdGlvbkpvYjJQcm9wcywgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6IGJvb2xlYW4pIHtcbiAgICAgICAgc3VwZXIoc2NvcGUsIGlkLCB7IHR5cGU6IFJvc1N5bmNocm9uaXphdGlvbkpvYjIuUk9TX1JFU09VUkNFX1RZUEVfTkFNRSwgcHJvcGVydGllczogcHJvcHMgfSk7XG4gICAgICAgIHRoaXMuYXR0ckR0c0luc3RhbmNlSWQgPSB0aGlzLmdldEF0dCgnRHRzSW5zdGFuY2VJZCcpO1xuICAgICAgICB0aGlzLmF0dHJEdHNKb2JJZCA9IHRoaXMuZ2V0QXR0KCdEdHNKb2JJZCcpO1xuICAgICAgICB0aGlzLmF0dHJEdHNKb2JOYW1lID0gdGhpcy5nZXRBdHQoJ0R0c0pvYk5hbWUnKTtcblxuICAgICAgICB0aGlzLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ID0gZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ7XG4gICAgICAgIHRoaXMuZGF0YUluaXRpYWxpemF0aW9uID0gcHJvcHMuZGF0YUluaXRpYWxpemF0aW9uO1xuICAgICAgICB0aGlzLmRhdGFTeW5jaHJvbml6YXRpb24gPSBwcm9wcy5kYXRhU3luY2hyb25pemF0aW9uO1xuICAgICAgICB0aGlzLmRiTGlzdCA9IHByb3BzLmRiTGlzdDtcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbkVuZHBvaW50ID0gcHJvcHMuZGVzdGluYXRpb25FbmRwb2ludDtcbiAgICAgICAgdGhpcy5kdHNKb2JOYW1lID0gcHJvcHMuZHRzSm9iTmFtZTtcbiAgICAgICAgdGhpcy5zb3VyY2VFbmRwb2ludCA9IHByb3BzLnNvdXJjZUVuZHBvaW50O1xuICAgICAgICB0aGlzLnN0cnVjdHVyZUluaXRpYWxpemF0aW9uID0gcHJvcHMuc3RydWN0dXJlSW5pdGlhbGl6YXRpb247XG4gICAgICAgIHRoaXMuY2hlY2twb2ludCA9IHByb3BzLmNoZWNrcG9pbnQ7XG4gICAgICAgIHRoaXMuZGF0YUNoZWNrQ29uZmlndXJlID0gcHJvcHMuZGF0YUNoZWNrQ29uZmlndXJlO1xuICAgICAgICB0aGlzLmRlZGljYXRlZENsdXN0ZXJJZCA9IHByb3BzLmRlZGljYXRlZENsdXN0ZXJJZDtcbiAgICAgICAgdGhpcy5kZWxheU5vdGljZSA9IHByb3BzLmRlbGF5Tm90aWNlO1xuICAgICAgICB0aGlzLmRlbGF5UGhvbmUgPSBwcm9wcy5kZWxheVBob25lO1xuICAgICAgICB0aGlzLmRlbGF5UnVsZVRpbWUgPSBwcm9wcy5kZWxheVJ1bGVUaW1lO1xuICAgICAgICB0aGlzLmRpc2FzdGVyUmVjb3ZlcnlKb2IgPSBwcm9wcy5kaXNhc3RlclJlY292ZXJ5Sm9iO1xuICAgICAgICB0aGlzLmR0c0Jpc0xhYmVsID0gcHJvcHMuZHRzQmlzTGFiZWw7XG4gICAgICAgIHRoaXMuZHRzSW5zdGFuY2VJZCA9IHByb3BzLmR0c0luc3RhbmNlSWQ7XG4gICAgICAgIHRoaXMuZHRzSm9iSWQgPSBwcm9wcy5kdHNKb2JJZDtcbiAgICAgICAgdGhpcy5lcnJvck5vdGljZSA9IHByb3BzLmVycm9yTm90aWNlO1xuICAgICAgICB0aGlzLmVycm9yUGhvbmUgPSBwcm9wcy5lcnJvclBob25lO1xuICAgICAgICB0aGlzLmZpbGVPc3NVcmwgPSBwcm9wcy5maWxlT3NzVXJsO1xuICAgICAgICB0aGlzLnJlc2VydmUgPSBwcm9wcy5yZXNlcnZlO1xuICAgICAgICB0aGlzLnN0YXR1cyA9IHByb3BzLnN0YXR1cztcbiAgICAgICAgdGhpcy5zeW5jaHJvbml6YXRpb25EaXJlY3Rpb24gPSBwcm9wcy5zeW5jaHJvbml6YXRpb25EaXJlY3Rpb247XG4gICAgfVxuXG5cbiAgICBwcm90ZWN0ZWQgZ2V0IHJvc1Byb3BlcnRpZXMoKTogeyBba2V5OiBzdHJpbmddOiBhbnkgfSAge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZGF0YUluaXRpYWxpemF0aW9uOiB0aGlzLmRhdGFJbml0aWFsaXphdGlvbixcbiAgICAgICAgICAgIGRhdGFTeW5jaHJvbml6YXRpb246IHRoaXMuZGF0YVN5bmNocm9uaXphdGlvbixcbiAgICAgICAgICAgIGRiTGlzdDogdGhpcy5kYkxpc3QsXG4gICAgICAgICAgICBkZXN0aW5hdGlvbkVuZHBvaW50OiB0aGlzLmRlc3RpbmF0aW9uRW5kcG9pbnQsXG4gICAgICAgICAgICBkdHNKb2JOYW1lOiB0aGlzLmR0c0pvYk5hbWUsXG4gICAgICAgICAgICBzb3VyY2VFbmRwb2ludDogdGhpcy5zb3VyY2VFbmRwb2ludCxcbiAgICAgICAgICAgIHN0cnVjdHVyZUluaXRpYWxpemF0aW9uOiB0aGlzLnN0cnVjdHVyZUluaXRpYWxpemF0aW9uLFxuICAgICAgICAgICAgY2hlY2twb2ludDogdGhpcy5jaGVja3BvaW50LFxuICAgICAgICAgICAgZGF0YUNoZWNrQ29uZmlndXJlOiB0aGlzLmRhdGFDaGVja0NvbmZpZ3VyZSxcbiAgICAgICAgICAgIGRlZGljYXRlZENsdXN0ZXJJZDogdGhpcy5kZWRpY2F0ZWRDbHVzdGVySWQsXG4gICAgICAgICAgICBkZWxheU5vdGljZTogdGhpcy5kZWxheU5vdGljZSxcbiAgICAgICAgICAgIGRlbGF5UGhvbmU6IHRoaXMuZGVsYXlQaG9uZSxcbiAgICAgICAgICAgIGRlbGF5UnVsZVRpbWU6IHRoaXMuZGVsYXlSdWxlVGltZSxcbiAgICAgICAgICAgIGRpc2FzdGVyUmVjb3ZlcnlKb2I6IHRoaXMuZGlzYXN0ZXJSZWNvdmVyeUpvYixcbiAgICAgICAgICAgIGR0c0Jpc0xhYmVsOiB0aGlzLmR0c0Jpc0xhYmVsLFxuICAgICAgICAgICAgZHRzSW5zdGFuY2VJZDogdGhpcy5kdHNJbnN0YW5jZUlkLFxuICAgICAgICAgICAgZHRzSm9iSWQ6IHRoaXMuZHRzSm9iSWQsXG4gICAgICAgICAgICBlcnJvck5vdGljZTogdGhpcy5lcnJvck5vdGljZSxcbiAgICAgICAgICAgIGVycm9yUGhvbmU6IHRoaXMuZXJyb3JQaG9uZSxcbiAgICAgICAgICAgIGZpbGVPc3NVcmw6IHRoaXMuZmlsZU9zc1VybCxcbiAgICAgICAgICAgIHJlc2VydmU6IHRoaXMucmVzZXJ2ZSxcbiAgICAgICAgICAgIHN0YXR1czogdGhpcy5zdGF0dXMsXG4gICAgICAgICAgICBzeW5jaHJvbml6YXRpb25EaXJlY3Rpb246IHRoaXMuc3luY2hyb25pemF0aW9uRGlyZWN0aW9uLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBwcm90ZWN0ZWQgcmVuZGVyUHJvcGVydGllcyhwcm9wczoge1trZXk6IHN0cmluZ106IGFueX0pOiB7IFtrZXk6IHN0cmluZ106IGFueSB9ICB7XG4gICAgICAgIHJldHVybiByb3NTeW5jaHJvbml6YXRpb25Kb2IyUHJvcHNUb1Jvc1RlbXBsYXRlKHByb3BzLCB0aGlzLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50KTtcbiAgICB9XG59XG5cbmV4cG9ydCBuYW1lc3BhY2UgUm9zU3luY2hyb25pemF0aW9uSm9iMiB7XG4gICAgLyoqXG4gICAgICogQHN0YWJpbGl0eSBleHRlcm5hbFxuICAgICAqL1xuICAgIGV4cG9ydCBpbnRlcmZhY2UgRGF0YUNoZWNrQ29uZmlndXJlUHJvcGVydHkge1xuICAgICAgICAvKipcbiAgICAgICAgICogQFByb3BlcnR5IGZ1bGxDaGVja01heFJlYWRScHM6IFRoZSBtYXhpbXVtIG51bWJlciBvZiBkYXRhIHJvd3MgdGhhdCBhcmUgcmVhZCBwZXIgc2Vjb25kLiBWYWxpZCB2YWx1ZXM6IGludGVnZXJzIGZyb20gMCB0byA5MDA3MTk5MjU0NzQwOTkxLlxuICAgICAgICAgKi9cbiAgICAgICAgcmVhZG9ubHkgZnVsbENoZWNrTWF4UmVhZFJwcz86IG51bWJlciB8IHJvcy5JUmVzb2x2YWJsZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBQcm9wZXJ0eSBkYXRhQ2hlY2tOb3RpY2VQaG9uZTogVGhlIG1vYmlsZSBudW1iZXIgb2YgdGhlIGFsZXJ0IGNvbnRhY3QgZm9yIGEgZnVsbCBvciBpbmNyZW1lbnRhbCBkYXRhIHZlcmlmaWNhdGlvbiB0YXNrLiBJZiBhbiBhbGVydCBpcyB0cmlnZ2VyZWQgZm9yIGEgdmVyaWZpY2F0aW9uIHRhc2ssIGEgdGV4dCBtZXNzYWdlIGlzIHNlbnQgdG8gbm90aWZ5IHRoZSBhbGVydCBjb250YWN0LlxuICAgICAgICAgKi9cbiAgICAgICAgcmVhZG9ubHkgZGF0YUNoZWNrTm90aWNlUGhvbmU/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAUHJvcGVydHkgaW5jcmVtZW50YWxDaGVja0RlbGF5Tm90aWNlOiBTcGVjaWZpZXMgd2hldGhlciB0byB0cmlnZ2VyIGFuIGFsZXJ0IG9uIHRoZSBkYXRhIGxhdGVuY3kgb2YgdGhlIGluY3JlbWVudGFsIGRhdGEgdmVyaWZpY2F0aW9uIHRhc2suIFZhbGlkIHZhbHVlczogKip0cnVlKiogYW5kICoqZmFsc2UqKi5cbiAgICAgKiAqKk5vdGUqKjogRm9yIGV4YW1wbGUsIHlvdSBzZXQgdGhpcyBwYXJhbWV0ZXIgdG8gKip0cnVlKiouIElmIHRoZSBjdW11bGF0aXZlIGxhdGVuY3kgb2YgdGhlIGluY3JlbWVudGFsIGRhdGEgdmVyaWZpY2F0aW9uIHRhc2sgaW4gc2V2ZXJhbCBzdGF0aXN0aWNhbCBwZXJpb2RzIGlzIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byB0aGUgdGhyZXNob2xkIHRoYXQgeW91IHNwZWNpZmllZCwgYW4gYWxlcnQgaXMgdHJpZ2dlcmVkLlxuICAgICAgICAgKi9cbiAgICAgICAgcmVhZG9ubHkgaW5jcmVtZW50YWxDaGVja0RlbGF5Tm90aWNlPzogYm9vbGVhbiB8IHJvcy5JUmVzb2x2YWJsZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBQcm9wZXJ0eSBpbmNyZW1lbnRhbENoZWNrRGVsYXlOb3RpY2VWYWx1ZTogVGhlIGFsZXJ0IHRocmVzaG9sZCBmb3IgdGhlIGRhdGEgbGF0ZW5jeSBvZiB0aGUgaW5jcmVtZW50YWwgZGF0YSB2ZXJpZmljYXRpb24gdGFzay4gVW5pdDogc2Vjb25kcy5cbiAgICAgKiAqKk5vdGUqKjogVGhpcyBwYXJhbWV0ZXIgaXMgcmVxdWlyZWQgaWYgdGhlICoqaW5jcmVtZW50YWxDaGVja0RlbGF5Tm90aWNlKiogcGFyYW1ldGVyIGlzIHNldCB0byAqKnRydWUqKi5cbiAgICAgICAgICovXG4gICAgICAgIHJlYWRvbmx5IGluY3JlbWVudGFsQ2hlY2tEZWxheU5vdGljZVZhbHVlPzogbnVtYmVyIHwgcm9zLklSZXNvbHZhYmxlO1xuICAgICAgICAvKipcbiAgICAgICAgICogQFByb3BlcnR5IGluY3JlbWVudGFsQ2hlY2tEZWxheU5vdGljZVBlcmlvZDogVGhlIHN0YXRpc3RpY2FsIHBlcmlvZCBvZiBhbiBhbGVydCBvbiB0aGUgZGF0YSBsYXRlbmN5IG9mIHRoZSBpbmNyZW1lbnRhbCBkYXRhIHZlcmlmaWNhdGlvbiB0YXNrLiBWYWxpZCB2YWx1ZXM6XG4gICAgICogLSAqKjEqKjogMSBtaW51dGVcbiAgICAgKiAtICoqMioqOiA1IG1pbnV0ZXNcbiAgICAgKiAtICoqMyoqOiAxMCBtaW51dGVzXG4gICAgICogLSAqKjQqKjogMzAgbWludXRlc1xuICAgICAqICoqTm90ZSoqOiBUaGlzIHBhcmFtZXRlciBpcyByZXF1aXJlZCBpZiB0aGUgKippbmNyZW1lbnRhbENoZWNrRGVsYXlOb3RpY2UqKiBwYXJhbWV0ZXIgaXMgc2V0IHRvICoqdHJ1ZSoqLlxuICAgICAgICAgKi9cbiAgICAgICAgcmVhZG9ubHkgaW5jcmVtZW50YWxDaGVja0RlbGF5Tm90aWNlUGVyaW9kPzogbnVtYmVyIHwgcm9zLklSZXNvbHZhYmxlO1xuICAgICAgICAvKipcbiAgICAgICAgICogQFByb3BlcnR5IGRhdGFDaGVja0RiTGlzdDogVGhlIG9iamVjdHMgd2hvc2UgZGF0YSBpcyB0byBiZSB2ZXJpZmllZC4gVGhlIHZhbHVlIG11c3QgYmUgYSBKU09OIHN0cmluZy5cbiAgICAgICAgICovXG4gICAgICAgIHJlYWRvbmx5IGRhdGFDaGVja0RiTGlzdD86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBQcm9wZXJ0eSBjaGVja01heGltdW1Ib3VyRW5hYmxlOiBTcGVjaWZpZXMgd2hldGhlciB0byBjb25maWd1cmUgYSB0aW1lb3V0IHBlcmlvZCBmb3IgdGhlIGZ1bGwgZGF0YSB2ZXJpZmljYXRpb24gdGFzay5WYWxpZCB2YWx1ZXM6XG4gICAgICogLSAqKjAqKjogZG9lcyBub3QgY29uZmlndXJlIGEgdGltZW91dCBwZXJpb2QgZm9yIHRoZSBmdWxsIGRhdGEgdmVyaWZpY2F0aW9uIHRhc2suXG4gICAgICogLSAqKjEqKjogY29uZmlndXJlcyBhIHRpbWVvdXQgcGVyaW9kIGZvciB0aGUgZnVsbCBkYXRhIHZlcmlmaWNhdGlvbiB0YXNrLlxuICAgICAqICoqTm90ZSoqOiBUaGlzIHBhcmFtZXRlciBpcyByZXF1aXJlZCBpZiB0aGUgZnVsbENoZWNrTW9kZWwgcGFyYW1ldGVyIGlzIHNldCB0byAxLlxuICAgICAgICAgKi9cbiAgICAgICAgcmVhZG9ubHkgY2hlY2tNYXhpbXVtSG91ckVuYWJsZT86IG51bWJlciB8IHJvcy5JUmVzb2x2YWJsZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBQcm9wZXJ0eSBmdWxsQ2hlY2tSYXRpbzogVGhlIHNhbXBsaW5nIHJhdGlvIG9mIHRoZSBmdWxsIGRhdGEgdmVyaWZpY2F0aW9uIHRhc2suIFZhbGlkIHZhbHVlczogaW50ZWdlcnMgZnJvbSAxMCB0byAxMDAuIFVuaXQ6IHBlcmNlbnQuXG4gICAgICogKipOb3RlKio6IFRoaXMgcGFyYW1ldGVyIGlzIHJlcXVpcmVkIGlmIHRoZSAqKmZ1bGxDaGVja01vZGVsKiogcGFyYW1ldGVyIGlzIHNldCB0byAxLlxuICAgICAgICAgKi9cbiAgICAgICAgcmVhZG9ubHkgZnVsbENoZWNrUmF0aW8/OiBudW1iZXIgfCByb3MuSVJlc29sdmFibGU7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAUHJvcGVydHkgY2hlY2tNYXhpbXVtSG91cjogVGhlIHRpbWVvdXQgcGVyaW9kIG9mIHRoZSBmdWxsIGRhdGEgdmVyaWZpY2F0aW9uIHRhc2suIFZhbGlkIHZhbHVlczogaW50ZWdlcnMgZnJvbSAxIHRvIDcyLiBDb3VudGRvd24gYmVnaW5zIHRoZSBtb21lbnQgdGhlIGZ1bGwgZGF0YSB2ZXJpZmljYXRpb24gdGFzayBpcyBzdGFydGVkLiBJZiB0aGUgdGFzayBpcyBub3QgY29tcGxldGUgd2l0aGluIHRoZSBzcGVjaWZpZWQgdGltZW91dCBwZXJpb2QsIHRoZSB0YXNrIGlzIGZvcmNpYmx5IHN0b3BwZWQuXG4gICAgICAgICAqL1xuICAgICAgICByZWFkb25seSBjaGVja01heGltdW1Ib3VyPzogbnVtYmVyIHwgcm9zLklSZXNvbHZhYmxlO1xuICAgICAgICAvKipcbiAgICAgICAgICogQFByb3BlcnR5IGZ1bGxDaGVja0ZpeERhdGE6IFNwZWNpZmllcyB3aGV0aGVyIHRvIHJlcGxhY2UgdGhlIGluY29uc2lzdGVudCBkYXRhLiBWYWxpZCB2YWx1ZXM6ICoqdHJ1ZSoqIGFuZCAqKmZhbHNlKiouIERlZmF1bHQgdmFsdWU6IGZhbHNlLlxuICAgICAqICoqTm90ZSoqOiBGb3IgZXhhbXBsZSwgeW91IHNldCB0aGlzIHBhcmFtZXRlciB0byB0cnVlLiBJZiB0aGUgZGVzdGluYXRpb24gZGF0YWJhc2UgaGFzIGRhdGEgdGhhdCBpcyBpbmNvbnNpc3RlbnQgd2l0aCB0aGUgZGF0YSBpbiB0aGUgc291cmNlIGRhdGFiYXNlLCB0aGUgZGF0YSB2YWx1ZXMgb2YgdGhlIGRlc3RpbmF0aW9uIGRhdGFiYXNlIGFyZSByZXBsYWNlZCB3aXRoIHRob3NlIG9mIHRoZSBzb3VyY2UgZGF0YWJhc2UuXG4gICAgICAgICAqL1xuICAgICAgICByZWFkb25seSBmdWxsQ2hlY2tGaXhEYXRhPzogYm9vbGVhbiB8IHJvcy5JUmVzb2x2YWJsZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBQcm9wZXJ0eSBmdWxsQ2hlY2tNb2RlbDogVGhlIG1vZGUgb2YgdGhlIGZ1bGwgZGF0YSB2ZXJpZmljYXRpb24gdGFzay4gVmFsaWQgdmFsdWVzOlxuICAgICAqIC0gKioxKio6IHZlcmlmaWVzIHRoZSBkYXRhIGJ5IHNhbXBsaW5nIHJhdGlvLlxuICAgICAqIC0gKioyKio6IHZlcmlmaWVzIHRoZSBkYXRhIGJ5IHJvdy5cbiAgICAgICAgICovXG4gICAgICAgIHJlYWRvbmx5IGZ1bGxDaGVja01vZGVsPzogbnVtYmVyIHwgcm9zLklSZXNvbHZhYmxlO1xuICAgICAgICAvKipcbiAgICAgICAgICogQFByb3BlcnR5IGluY3JlbWVudGFsQ2hlY2tWYWxpZEZhaWxOb3RpY2VWYWx1ZTogVGhlIGFsZXJ0IHRocmVzaG9sZCBmb3IgaW5jb25zaXN0ZW50IGRhdGEgZW50cmllcyBkZXRlY3RlZCBieSB0aGUgaW5jcmVtZW50YWwgZGF0YSB2ZXJpZmljYXRpb24gdGFzay5cbiAgICAgKiAqKk5vdGUqKjogVGhpcyBwYXJhbWV0ZXIgaXMgcmVxdWlyZWQgaWYgdGhlICoqaW5jcmVtZW50YWxDaGVja1ZhbGlkRmFpbE5vdGljZSoqIHBhcmFtZXRlciBpcyBzZXQgdG8gKip0cnVlKiouXG4gICAgICAgICAqL1xuICAgICAgICByZWFkb25seSBpbmNyZW1lbnRhbENoZWNrVmFsaWRGYWlsTm90aWNlVmFsdWU/OiBudW1iZXIgfCByb3MuSVJlc29sdmFibGU7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAUHJvcGVydHkgaW5jcmVtZW50YWxEYXRhQ2hlY2s6IFNwZWNpZmllcyB3aGV0aGVyIHRvIHBlcmZvcm0gYW4gaW5jcmVtZW50YWwgZGF0YSB2ZXJpZmljYXRpb24gdGFzay4gVmFsaWQgdmFsdWVzOiAqKnRydWUqKiBhbmQgKipmYWxzZSoqLlxuICAgICAgICAgKi9cbiAgICAgICAgcmVhZG9ubHkgaW5jcmVtZW50YWxEYXRhQ2hlY2s/OiBib29sZWFuIHwgcm9zLklSZXNvbHZhYmxlO1xuICAgICAgICAvKipcbiAgICAgICAgICogQFByb3BlcnR5IGluY3JlbWVudGFsQ2hlY2tWYWxpZEZhaWxOb3RpY2VUaW1lczogVGhlIG51bWJlciBvZiBzdGF0aXN0aWNhbCBwZXJpb2RzIG9mIGFuIGFsZXJ0IG9uIGluY29uc2lzdGVudCBkYXRhIGVudHJpZXMgZGV0ZWN0ZWQgYnkgdGhlIGluY3JlbWVudGFsIGRhdGEgdmVyaWZpY2F0aW9uIHRhc2suXG4gICAgICogKipOb3RlKio6IFRoaXMgcGFyYW1ldGVyIGlzIHJlcXVpcmVkIGlmIHRoZSAqKmluY3JlbWVudGFsQ2hlY2tWYWxpZEZhaWxOb3RpY2UqKiBwYXJhbWV0ZXIgaXMgc2V0IHRvICoqdHJ1ZSoqLlxuICAgICAgICAgKi9cbiAgICAgICAgcmVhZG9ubHkgaW5jcmVtZW50YWxDaGVja1ZhbGlkRmFpbE5vdGljZVRpbWVzPzogbnVtYmVyIHwgcm9zLklSZXNvbHZhYmxlO1xuICAgICAgICAvKipcbiAgICAgICAgICogQFByb3BlcnR5IGZ1bGxDaGVja01heFJlYWRCcHM6IFRoZSBtYXhpbXVtIG51bWJlciBvZiBieXRlcyB0aGF0IGFyZSByZWFkIHBlciBzZWNvbmQuIFZhbGlkIHZhbHVlczogaW50ZWdlcnMgZnJvbSAwIHRvIDkwMDcxOTkyNTQ3NDA5OTEuXG4gICAgICAgICAqL1xuICAgICAgICByZWFkb25seSBmdWxsQ2hlY2tNYXhSZWFkQnBzPzogbnVtYmVyIHwgcm9zLklSZXNvbHZhYmxlO1xuICAgICAgICAvKipcbiAgICAgICAgICogQFByb3BlcnR5IGZ1bGxDaGVja1ZhbGlkRmFpbE5vdGljZTogU3BlY2lmaWVzIHdoZXRoZXIgdG8gdHJpZ2dlciBhbiBhbGVydCBpZiBpbmNvbnNpc3RlbnQgZGF0YSBpcyBkZXRlY3RlZCBieSB0aGUgZnVsbCBkYXRhIHZlcmlmaWNhdGlvbiB0YXNrLiBWYWxpZCB2YWx1ZXM6ICoqdHJ1ZSoqIGFuZCAqKmZhbHNlKiouXG4gICAgICogKipOb3RlKio6IEZvciBleGFtcGxlLCB5b3Ugc2V0IHRoaXMgcGFyYW1ldGVyIHRvIHRydWUuIElmIHRoZSBudW1iZXIgb2YgaW5jb25zaXN0ZW50IGRhdGEgZW50cmllcyBkZXRlY3RlZCBieSB0aGUgZnVsbCBkYXRhIHZlcmlmaWNhdGlvbiB0YXNrIGlzIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byB0aGUgdGhyZXNob2xkIHRoYXQgeW91IHNwZWNpZmllZCwgYW4gYWxlcnQgaXMgdHJpZ2dlcmVkLlxuICAgICAgICAgKi9cbiAgICAgICAgcmVhZG9ubHkgZnVsbENoZWNrVmFsaWRGYWlsTm90aWNlPzogYm9vbGVhbiB8IHJvcy5JUmVzb2x2YWJsZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBQcm9wZXJ0eSBmdWxsQ2hlY2tFcnJvck5vdGljZTogU3BlY2lmaWVzIHdoZXRoZXIgdG8gdHJpZ2dlciBhbiBhbGVydCBpZiB0aGUgZnVsbCBkYXRhIHZlcmlmaWNhdGlvbiB0YXNrIGZhaWxzLiBWYWxpZCB2YWx1ZXM6ICoqdHJ1ZSoqIGFuZCAqKmZhbHNlKiouXG4gICAgICogKipOb3RlKio6IEZvciBleGFtcGxlLCB5b3Ugc2V0IHRoaXMgcGFyYW1ldGVyIHRvICoqdHJ1ZSoqLiBJZiB0aGUgZnVsbCBkYXRhIHZlcmlmaWNhdGlvbiB0YXNrIGZhaWxzLCBhbiBhbGVydCBpcyB0cmlnZ2VyZWQuXG4gICAgICAgICAqL1xuICAgICAgICByZWFkb25seSBmdWxsQ2hlY2tFcnJvck5vdGljZT86IGJvb2xlYW4gfCByb3MuSVJlc29sdmFibGU7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAUHJvcGVydHkgaW5jcmVtZW50YWxDaGVja1ZhbGlkRmFpbE5vdGljZVBlcmlvZDogVGhlIHN0YXRpc3RpY2FsIHBlcmlvZCBvZiBhbiBhbGVydCBvbiBpbmNvbnNpc3RlbnQgZGF0YSBlbnRyaWVzIGRldGVjdGVkIGJ5IHRoZSBpbmNyZW1lbnRhbCBkYXRhIHZlcmlmaWNhdGlvbiB0YXNrLiBWYWxpZCB2YWx1ZXM6XG4gICAgICogLSAqKjEqKjogMSBtaW51dGVcbiAgICAgKiAtICoqMioqOiA1IG1pbnV0ZXNcbiAgICAgKiAtICoqMyoqOiAxMCBtaW51dGVzXG4gICAgICogLSAqKjQqKjogMzAgbWludXRlc1xuICAgICAqICoqTm90ZSoqOiBUaGlzIHBhcmFtZXRlciBpcyByZXF1aXJlZCBpZiB0aGUgKippbmNyZW1lbnRhbENoZWNrVmFsaWRGYWlsTm90aWNlKiogcGFyYW1ldGVyIGlzIHNldCB0byAqKnRydWUqKi5cbiAgICAgICAgICovXG4gICAgICAgIHJlYWRvbmx5IGluY3JlbWVudGFsQ2hlY2tWYWxpZEZhaWxOb3RpY2VQZXJpb2Q/OiBudW1iZXIgfCByb3MuSVJlc29sdmFibGU7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAUHJvcGVydHkgaW5jcmVtZW50YWxDaGVja0RlbGF5Tm90aWNlVGltZXM6IFRoZSBudW1iZXIgb2Ygc3RhdGlzdGljYWwgcGVyaW9kcyBvZiBhbiBhbGVydCBvbiB0aGUgZGF0YSBsYXRlbmN5IG9mIHRoZSBpbmNyZW1lbnRhbCBkYXRhIHZlcmlmaWNhdGlvbiB0YXNrLlxuICAgICAqICoqTm90ZSoqOiBUaGlzIHBhcmFtZXRlciBpcyByZXF1aXJlZCBpZiB0aGUgKippbmNyZW1lbnRhbENoZWNrRGVsYXlOb3RpY2UqKiBwYXJhbWV0ZXIgaXMgc2V0IHRvICoqdHJ1ZSoqLlxuICAgICAgICAgKi9cbiAgICAgICAgcmVhZG9ubHkgaW5jcmVtZW50YWxDaGVja0RlbGF5Tm90aWNlVGltZXM/OiBudW1iZXIgfCByb3MuSVJlc29sdmFibGU7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAUHJvcGVydHkgZnVsbENoZWNrUmVmZXJFbmRwb2ludDogVGhlIGJlbmNobWFyayBmb3IgZnVsbCBkYXRhIHZlcmlmaWNhdGlvbi4gVmFsaWQgdmFsdWVzOlxuICAgICAqIC0gKiphbGwqKjogY2hlY2tzIHRoZSBkYXRhIGNvbnNpc3RlbmN5IGJldHdlZW4gdGhlIHNvdXJjZSBhbmQgZGVzdGluYXRpb24gZGF0YWJhc2VzIGJhc2VkIG9uIHRoZSBzb3VyY2UgYW5kIGRlc3RpbmF0aW9uIGRhdGFiYXNlcy5cbiAgICAgKiAtICoqc3JjKio6IGNoZWNrcyB0aGUgZGF0YSBjb25zaXN0ZW5jeSBiZXR3ZWVuIHRoZSBzb3VyY2UgYW5kIGRlc3RpbmF0aW9uIGRhdGFiYXNlcyBiYXNlZCBvbiB0aGUgc291cmNlIGRhdGFiYXNlLiBPYmplY3RzIHRoYXQgZXhpc3QgaW4gdGhlIGRlc3RpbmF0aW9uIGRhdGFiYXNlIGJ1dCBkbyBub3QgZXhpc3QgaW4gdGhlIHNvdXJjZSBkYXRhYmFzZSBhcmUgbm90IGNoZWNrZWQuXG4gICAgICogLSAqKmRlc3QqKjogY2hlY2tzIHRoZSBkYXRhIGNvbnNpc3RlbmN5IGJldHdlZW4gdGhlIHNvdXJjZSBhbmQgZGVzdGluYXRpb24gZGF0YWJhc2VzIGJhc2VkIG9uIHRoZSBkZXN0aW5hdGlvbiBkYXRhYmFzZS4gT2JqZWN0cyB0aGF0IGV4aXN0IGluIHRoZSBzb3VyY2UgZGF0YWJhc2UgYnV0IGRvIG5vdCBleGlzdCBpbiB0aGUgZGVzdGluYXRpb24gZGF0YWJhc2UgYXJlIG5vdCBjaGVja2VkLlxuICAgICAgICAgKi9cbiAgICAgICAgcmVhZG9ubHkgZnVsbENoZWNrUmVmZXJFbmRwb2ludD86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBQcm9wZXJ0eSBmdWxsRGF0YUNoZWNrOiBTcGVjaWZpZXMgd2hldGhlciB0byBwZXJmb3JtIGEgZnVsbCBkYXRhIHZlcmlmaWNhdGlvbiB0YXNrLiBWYWxpZCB2YWx1ZXM6ICoqdHJ1ZSoqIGFuZCAqKmZhbHNlKiouXG4gICAgICAgICAqL1xuICAgICAgICByZWFkb25seSBmdWxsRGF0YUNoZWNrPzogYm9vbGVhbiB8IHJvcy5JUmVzb2x2YWJsZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBQcm9wZXJ0eSBpbmNyZW1lbnRhbENoZWNrVmFsaWRGYWlsTm90aWNlOiBTcGVjaWZpZXMgd2hldGhlciB0byB0cmlnZ2VyIGFuIGFsZXJ0IGlmIGluY29uc2lzdGVudCBkYXRhIGlzIGRldGVjdGVkIGJ5IHRoZSBpbmNyZW1lbnRhbCBkYXRhIHZlcmlmaWNhdGlvbiB0YXNrLiBWYWxpZCB2YWx1ZXM6ICoqdHJ1ZSoqIGFuZCAqKmZhbHNlKiouXG4gICAgICogKipOb3RlKio6IEZvciBleGFtcGxlLCB5b3Ugc2V0IHRoaXMgcGFyYW1ldGVyIHRvICoqdHJ1ZSoqLiBJZiB0aGUgY3VtdWxhdGl2ZSBudW1iZXIgb2YgaW5jb25zaXN0ZW50IGRhdGEgZW50cmllcyBkZXRlY3RlZCBieSB0aGUgaW5jcmVtZW50YWwgZGF0YSB2ZXJpZmljYXRpb24gdGFzayBpbiBzZXZlcmFsIHN0YXRpc3RpY2FsIHBlcmlvZHMgaXMgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIHRoZSB0aHJlc2hvbGQgdGhhdCB5b3Ugc3BlY2lmaWVkLCBhbiBhbGVydCBpcyB0cmlnZ2VyZWQuXG4gICAgICAgICAqL1xuICAgICAgICByZWFkb25seSBpbmNyZW1lbnRhbENoZWNrVmFsaWRGYWlsTm90aWNlPzogYm9vbGVhbiB8IHJvcy5JUmVzb2x2YWJsZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBQcm9wZXJ0eSBmdWxsQ2hlY2tOb3RpY2VWYWx1ZTogVGhlIGFsZXJ0IHRocmVzaG9sZCBmb3IgaW5jb25zaXN0ZW50IGRhdGEgZW50cmllcyBkZXRlY3RlZCBieSB0aGUgZnVsbCBkYXRhIHZlcmlmaWNhdGlvbiB0YXNrLlxuICAgICAqICoqTm90ZSoqOiBUaGlzIHBhcmFtZXRlciBpcyByZXF1aXJlZCBpZiB0aGUgKipmdWxsQ2hlY2tWYWxpZEZhaWxOb3RpY2UqKiBwYXJhbWV0ZXIgaXMgc2V0IHRvICoqdHJ1ZSoqLlxuICAgICAgICAgKi9cbiAgICAgICAgcmVhZG9ubHkgZnVsbENoZWNrTm90aWNlVmFsdWU/OiBudW1iZXIgfCByb3MuSVJlc29sdmFibGU7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAUHJvcGVydHkgaW5jcmVtZW50YWxDaGVja0Vycm9yTm90aWNlOiBTcGVjaWZpZXMgd2hldGhlciB0byB0cmlnZ2VyIGFuIGFsZXJ0IGlmIHRoZSBpbmNyZW1lbnRhbCBkYXRhIHZlcmlmaWNhdGlvbiB0YXNrIGZhaWxzLiBWYWxpZCB2YWx1ZXM6ICoqdHJ1ZSoqIGFuZCAqKmZhbHNlKiouXG4gICAgICogTm90ZTogRm9yIGV4YW1wbGUsIHlvdSBzZXQgdGhpcyBwYXJhbWV0ZXIgdG8gKip0cnVlKiouIElmIHRoZSBpbmNyZW1lbnRhbCBkYXRhIHZlcmlmaWNhdGlvbiB0YXNrIGZhaWxzLCBhbiBhbGVydCBpcyB0cmlnZ2VyZWQuXG4gICAgICAgICAqL1xuICAgICAgICByZWFkb25seSBpbmNyZW1lbnRhbENoZWNrRXJyb3JOb3RpY2U/OiBib29sZWFuIHwgcm9zLklSZXNvbHZhYmxlO1xuICAgIH1cbn1cbi8qKlxuICogRGV0ZXJtaW5lIHdoZXRoZXIgdGhlIGdpdmVuIHByb3BlcnRpZXMgbWF0Y2ggdGhvc2Ugb2YgYSBgRGF0YUNoZWNrQ29uZmlndXJlUHJvcGVydHlgXG4gKlxuICogQHBhcmFtIHByb3BlcnRpZXMgLSB0aGUgVHlwZVNjcmlwdCBwcm9wZXJ0aWVzIG9mIGEgYERhdGFDaGVja0NvbmZpZ3VyZVByb3BlcnR5YFxuICpcbiAqIEByZXR1cm5zIHRoZSByZXN1bHQgb2YgdGhlIHZhbGlkYXRpb24uXG4gKi9cbmZ1bmN0aW9uIFJvc1N5bmNocm9uaXphdGlvbkpvYjJfRGF0YUNoZWNrQ29uZmlndXJlUHJvcGVydHlWYWxpZGF0b3IocHJvcGVydGllczogYW55KTogcm9zLlZhbGlkYXRpb25SZXN1bHQge1xuICAgIGlmICghcm9zLmNhbkluc3BlY3QocHJvcGVydGllcykpIHsgcmV0dXJuIHJvcy5WQUxJREFUSU9OX1NVQ0NFU1M7IH1cbiAgICBjb25zdCBlcnJvcnMgPSBuZXcgcm9zLlZhbGlkYXRpb25SZXN1bHRzKCk7XG4gICAgaWYocHJvcGVydGllcy5mdWxsQ2hlY2tNYXhSZWFkUnBzICYmICh0eXBlb2YgcHJvcGVydGllcy5mdWxsQ2hlY2tNYXhSZWFkUnBzKSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgZXJyb3JzLmNvbGxlY3Qocm9zLnByb3BlcnR5VmFsaWRhdG9yKCdmdWxsQ2hlY2tNYXhSZWFkUnBzJywgcm9zLnZhbGlkYXRlUmFuZ2UpKHtcbiAgICAgICAgICAgIGRhdGE6IHByb3BlcnRpZXMuZnVsbENoZWNrTWF4UmVhZFJwcyxcbiAgICAgICAgICAgIG1pbjogMCxcbiAgICAgICAgICAgIG1heDogOTAwNzE5OTI1NDc0MDk5MSxcbiAgICAgICAgICB9KSk7XG4gICAgfVxuICAgIGVycm9ycy5jb2xsZWN0KHJvcy5wcm9wZXJ0eVZhbGlkYXRvcignZnVsbENoZWNrTWF4UmVhZFJwcycsIHJvcy52YWxpZGF0ZU51bWJlcikocHJvcGVydGllcy5mdWxsQ2hlY2tNYXhSZWFkUnBzKSk7XG4gICAgZXJyb3JzLmNvbGxlY3Qocm9zLnByb3BlcnR5VmFsaWRhdG9yKCdkYXRhQ2hlY2tOb3RpY2VQaG9uZScsIHJvcy52YWxpZGF0ZVN0cmluZykocHJvcGVydGllcy5kYXRhQ2hlY2tOb3RpY2VQaG9uZSkpO1xuICAgIGVycm9ycy5jb2xsZWN0KHJvcy5wcm9wZXJ0eVZhbGlkYXRvcignaW5jcmVtZW50YWxDaGVja0RlbGF5Tm90aWNlJywgcm9zLnZhbGlkYXRlQm9vbGVhbikocHJvcGVydGllcy5pbmNyZW1lbnRhbENoZWNrRGVsYXlOb3RpY2UpKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ2luY3JlbWVudGFsQ2hlY2tEZWxheU5vdGljZVZhbHVlJywgcm9zLnZhbGlkYXRlTnVtYmVyKShwcm9wZXJ0aWVzLmluY3JlbWVudGFsQ2hlY2tEZWxheU5vdGljZVZhbHVlKSk7XG4gICAgaWYocHJvcGVydGllcy5pbmNyZW1lbnRhbENoZWNrRGVsYXlOb3RpY2VQZXJpb2QgJiYgKHR5cGVvZiBwcm9wZXJ0aWVzLmluY3JlbWVudGFsQ2hlY2tEZWxheU5vdGljZVBlcmlvZCkgIT09ICdvYmplY3QnKSB7XG4gICAgICAgIGVycm9ycy5jb2xsZWN0KHJvcy5wcm9wZXJ0eVZhbGlkYXRvcignaW5jcmVtZW50YWxDaGVja0RlbGF5Tm90aWNlUGVyaW9kJywgcm9zLnZhbGlkYXRlQWxsb3dlZFZhbHVlcykoe1xuICAgICAgICAgIGRhdGE6IHByb3BlcnRpZXMuaW5jcmVtZW50YWxDaGVja0RlbGF5Tm90aWNlUGVyaW9kLFxuICAgICAgICAgIGFsbG93ZWRWYWx1ZXM6IFsxLDIsMyw0XSxcbiAgICAgICAgfSkpO1xuICAgIH1cbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ2luY3JlbWVudGFsQ2hlY2tEZWxheU5vdGljZVBlcmlvZCcsIHJvcy52YWxpZGF0ZU51bWJlcikocHJvcGVydGllcy5pbmNyZW1lbnRhbENoZWNrRGVsYXlOb3RpY2VQZXJpb2QpKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ2RhdGFDaGVja0RiTGlzdCcsIHJvcy52YWxpZGF0ZVN0cmluZykocHJvcGVydGllcy5kYXRhQ2hlY2tEYkxpc3QpKTtcbiAgICBpZihwcm9wZXJ0aWVzLmNoZWNrTWF4aW11bUhvdXJFbmFibGUgJiYgKHR5cGVvZiBwcm9wZXJ0aWVzLmNoZWNrTWF4aW11bUhvdXJFbmFibGUpICE9PSAnb2JqZWN0Jykge1xuICAgICAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ2NoZWNrTWF4aW11bUhvdXJFbmFibGUnLCByb3MudmFsaWRhdGVBbGxvd2VkVmFsdWVzKSh7XG4gICAgICAgICAgZGF0YTogcHJvcGVydGllcy5jaGVja01heGltdW1Ib3VyRW5hYmxlLFxuICAgICAgICAgIGFsbG93ZWRWYWx1ZXM6IFswLDFdLFxuICAgICAgICB9KSk7XG4gICAgfVxuICAgIGVycm9ycy5jb2xsZWN0KHJvcy5wcm9wZXJ0eVZhbGlkYXRvcignY2hlY2tNYXhpbXVtSG91ckVuYWJsZScsIHJvcy52YWxpZGF0ZU51bWJlcikocHJvcGVydGllcy5jaGVja01heGltdW1Ib3VyRW5hYmxlKSk7XG4gICAgaWYocHJvcGVydGllcy5mdWxsQ2hlY2tSYXRpbyAmJiAodHlwZW9mIHByb3BlcnRpZXMuZnVsbENoZWNrUmF0aW8pICE9PSAnb2JqZWN0Jykge1xuICAgICAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ2Z1bGxDaGVja1JhdGlvJywgcm9zLnZhbGlkYXRlUmFuZ2UpKHtcbiAgICAgICAgICAgIGRhdGE6IHByb3BlcnRpZXMuZnVsbENoZWNrUmF0aW8sXG4gICAgICAgICAgICBtaW46IDEwLFxuICAgICAgICAgICAgbWF4OiAxMDAsXG4gICAgICAgICAgfSkpO1xuICAgIH1cbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ2Z1bGxDaGVja1JhdGlvJywgcm9zLnZhbGlkYXRlTnVtYmVyKShwcm9wZXJ0aWVzLmZ1bGxDaGVja1JhdGlvKSk7XG4gICAgaWYocHJvcGVydGllcy5jaGVja01heGltdW1Ib3VyICYmICh0eXBlb2YgcHJvcGVydGllcy5jaGVja01heGltdW1Ib3VyKSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgZXJyb3JzLmNvbGxlY3Qocm9zLnByb3BlcnR5VmFsaWRhdG9yKCdjaGVja01heGltdW1Ib3VyJywgcm9zLnZhbGlkYXRlUmFuZ2UpKHtcbiAgICAgICAgICAgIGRhdGE6IHByb3BlcnRpZXMuY2hlY2tNYXhpbXVtSG91cixcbiAgICAgICAgICAgIG1pbjogMSxcbiAgICAgICAgICAgIG1heDogNzIsXG4gICAgICAgICAgfSkpO1xuICAgIH1cbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ2NoZWNrTWF4aW11bUhvdXInLCByb3MudmFsaWRhdGVOdW1iZXIpKHByb3BlcnRpZXMuY2hlY2tNYXhpbXVtSG91cikpO1xuICAgIGVycm9ycy5jb2xsZWN0KHJvcy5wcm9wZXJ0eVZhbGlkYXRvcignZnVsbENoZWNrRml4RGF0YScsIHJvcy52YWxpZGF0ZUJvb2xlYW4pKHByb3BlcnRpZXMuZnVsbENoZWNrRml4RGF0YSkpO1xuICAgIGlmKHByb3BlcnRpZXMuZnVsbENoZWNrTW9kZWwgJiYgKHR5cGVvZiBwcm9wZXJ0aWVzLmZ1bGxDaGVja01vZGVsKSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgZXJyb3JzLmNvbGxlY3Qocm9zLnByb3BlcnR5VmFsaWRhdG9yKCdmdWxsQ2hlY2tNb2RlbCcsIHJvcy52YWxpZGF0ZUFsbG93ZWRWYWx1ZXMpKHtcbiAgICAgICAgICBkYXRhOiBwcm9wZXJ0aWVzLmZ1bGxDaGVja01vZGVsLFxuICAgICAgICAgIGFsbG93ZWRWYWx1ZXM6IFsxLDJdLFxuICAgICAgICB9KSk7XG4gICAgfVxuICAgIGVycm9ycy5jb2xsZWN0KHJvcy5wcm9wZXJ0eVZhbGlkYXRvcignZnVsbENoZWNrTW9kZWwnLCByb3MudmFsaWRhdGVOdW1iZXIpKHByb3BlcnRpZXMuZnVsbENoZWNrTW9kZWwpKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ2luY3JlbWVudGFsQ2hlY2tWYWxpZEZhaWxOb3RpY2VWYWx1ZScsIHJvcy52YWxpZGF0ZU51bWJlcikocHJvcGVydGllcy5pbmNyZW1lbnRhbENoZWNrVmFsaWRGYWlsTm90aWNlVmFsdWUpKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ2luY3JlbWVudGFsRGF0YUNoZWNrJywgcm9zLnZhbGlkYXRlQm9vbGVhbikocHJvcGVydGllcy5pbmNyZW1lbnRhbERhdGFDaGVjaykpO1xuICAgIGVycm9ycy5jb2xsZWN0KHJvcy5wcm9wZXJ0eVZhbGlkYXRvcignaW5jcmVtZW50YWxDaGVja1ZhbGlkRmFpbE5vdGljZVRpbWVzJywgcm9zLnZhbGlkYXRlTnVtYmVyKShwcm9wZXJ0aWVzLmluY3JlbWVudGFsQ2hlY2tWYWxpZEZhaWxOb3RpY2VUaW1lcykpO1xuICAgIGlmKHByb3BlcnRpZXMuZnVsbENoZWNrTWF4UmVhZEJwcyAmJiAodHlwZW9mIHByb3BlcnRpZXMuZnVsbENoZWNrTWF4UmVhZEJwcykgIT09ICdvYmplY3QnKSB7XG4gICAgICAgIGVycm9ycy5jb2xsZWN0KHJvcy5wcm9wZXJ0eVZhbGlkYXRvcignZnVsbENoZWNrTWF4UmVhZEJwcycsIHJvcy52YWxpZGF0ZVJhbmdlKSh7XG4gICAgICAgICAgICBkYXRhOiBwcm9wZXJ0aWVzLmZ1bGxDaGVja01heFJlYWRCcHMsXG4gICAgICAgICAgICBtaW46IDAsXG4gICAgICAgICAgICBtYXg6IDkwMDcxOTkyNTQ3NDA5OTEsXG4gICAgICAgICAgfSkpO1xuICAgIH1cbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ2Z1bGxDaGVja01heFJlYWRCcHMnLCByb3MudmFsaWRhdGVOdW1iZXIpKHByb3BlcnRpZXMuZnVsbENoZWNrTWF4UmVhZEJwcykpO1xuICAgIGVycm9ycy5jb2xsZWN0KHJvcy5wcm9wZXJ0eVZhbGlkYXRvcignZnVsbENoZWNrVmFsaWRGYWlsTm90aWNlJywgcm9zLnZhbGlkYXRlQm9vbGVhbikocHJvcGVydGllcy5mdWxsQ2hlY2tWYWxpZEZhaWxOb3RpY2UpKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ2Z1bGxDaGVja0Vycm9yTm90aWNlJywgcm9zLnZhbGlkYXRlQm9vbGVhbikocHJvcGVydGllcy5mdWxsQ2hlY2tFcnJvck5vdGljZSkpO1xuICAgIGlmKHByb3BlcnRpZXMuaW5jcmVtZW50YWxDaGVja1ZhbGlkRmFpbE5vdGljZVBlcmlvZCAmJiAodHlwZW9mIHByb3BlcnRpZXMuaW5jcmVtZW50YWxDaGVja1ZhbGlkRmFpbE5vdGljZVBlcmlvZCkgIT09ICdvYmplY3QnKSB7XG4gICAgICAgIGVycm9ycy5jb2xsZWN0KHJvcy5wcm9wZXJ0eVZhbGlkYXRvcignaW5jcmVtZW50YWxDaGVja1ZhbGlkRmFpbE5vdGljZVBlcmlvZCcsIHJvcy52YWxpZGF0ZUFsbG93ZWRWYWx1ZXMpKHtcbiAgICAgICAgICBkYXRhOiBwcm9wZXJ0aWVzLmluY3JlbWVudGFsQ2hlY2tWYWxpZEZhaWxOb3RpY2VQZXJpb2QsXG4gICAgICAgICAgYWxsb3dlZFZhbHVlczogWzEsMiwzLDRdLFxuICAgICAgICB9KSk7XG4gICAgfVxuICAgIGVycm9ycy5jb2xsZWN0KHJvcy5wcm9wZXJ0eVZhbGlkYXRvcignaW5jcmVtZW50YWxDaGVja1ZhbGlkRmFpbE5vdGljZVBlcmlvZCcsIHJvcy52YWxpZGF0ZU51bWJlcikocHJvcGVydGllcy5pbmNyZW1lbnRhbENoZWNrVmFsaWRGYWlsTm90aWNlUGVyaW9kKSk7XG4gICAgZXJyb3JzLmNvbGxlY3Qocm9zLnByb3BlcnR5VmFsaWRhdG9yKCdpbmNyZW1lbnRhbENoZWNrRGVsYXlOb3RpY2VUaW1lcycsIHJvcy52YWxpZGF0ZU51bWJlcikocHJvcGVydGllcy5pbmNyZW1lbnRhbENoZWNrRGVsYXlOb3RpY2VUaW1lcykpO1xuICAgIGVycm9ycy5jb2xsZWN0KHJvcy5wcm9wZXJ0eVZhbGlkYXRvcignZnVsbENoZWNrUmVmZXJFbmRwb2ludCcsIHJvcy52YWxpZGF0ZVN0cmluZykocHJvcGVydGllcy5mdWxsQ2hlY2tSZWZlckVuZHBvaW50KSk7XG4gICAgZXJyb3JzLmNvbGxlY3Qocm9zLnByb3BlcnR5VmFsaWRhdG9yKCdmdWxsRGF0YUNoZWNrJywgcm9zLnZhbGlkYXRlQm9vbGVhbikocHJvcGVydGllcy5mdWxsRGF0YUNoZWNrKSk7XG4gICAgZXJyb3JzLmNvbGxlY3Qocm9zLnByb3BlcnR5VmFsaWRhdG9yKCdpbmNyZW1lbnRhbENoZWNrVmFsaWRGYWlsTm90aWNlJywgcm9zLnZhbGlkYXRlQm9vbGVhbikocHJvcGVydGllcy5pbmNyZW1lbnRhbENoZWNrVmFsaWRGYWlsTm90aWNlKSk7XG4gICAgZXJyb3JzLmNvbGxlY3Qocm9zLnByb3BlcnR5VmFsaWRhdG9yKCdmdWxsQ2hlY2tOb3RpY2VWYWx1ZScsIHJvcy52YWxpZGF0ZU51bWJlcikocHJvcGVydGllcy5mdWxsQ2hlY2tOb3RpY2VWYWx1ZSkpO1xuICAgIGVycm9ycy5jb2xsZWN0KHJvcy5wcm9wZXJ0eVZhbGlkYXRvcignaW5jcmVtZW50YWxDaGVja0Vycm9yTm90aWNlJywgcm9zLnZhbGlkYXRlQm9vbGVhbikocHJvcGVydGllcy5pbmNyZW1lbnRhbENoZWNrRXJyb3JOb3RpY2UpKTtcbiAgICByZXR1cm4gZXJyb3JzLndyYXAoJ3N1cHBsaWVkIHByb3BlcnRpZXMgbm90IGNvcnJlY3QgZm9yIFwiRGF0YUNoZWNrQ29uZmlndXJlUHJvcGVydHlcIicpO1xufVxuXG4vKipcbiAqIFJlbmRlcnMgdGhlIEFsaUNsb3VkIFJPUyBSZXNvdXJjZSBwcm9wZXJ0aWVzIG9mIGFuIGBBTElZVU46OkRUUzo6U3luY2hyb25pemF0aW9uSm9iMi5EYXRhQ2hlY2tDb25maWd1cmVgIHJlc291cmNlXG4gKlxuICogQHBhcmFtIHByb3BlcnRpZXMgLSB0aGUgVHlwZVNjcmlwdCBwcm9wZXJ0aWVzIG9mIGEgYERhdGFDaGVja0NvbmZpZ3VyZVByb3BlcnR5YFxuICpcbiAqIEByZXR1cm5zIHRoZSBBbGlDbG91ZCBST1MgUmVzb3VyY2UgcHJvcGVydGllcyBvZiBhbiBgQUxJWVVOOjpEVFM6OlN5bmNocm9uaXphdGlvbkpvYjIuRGF0YUNoZWNrQ29uZmlndXJlYCByZXNvdXJjZS5cbiAqL1xuLy8gQHRzLWlnbm9yZSBUUzYxMzNcbmZ1bmN0aW9uIHJvc1N5bmNocm9uaXphdGlvbkpvYjJEYXRhQ2hlY2tDb25maWd1cmVQcm9wZXJ0eVRvUm9zVGVtcGxhdGUocHJvcGVydGllczogYW55KTogYW55IHtcbiAgICBpZiAoIXJvcy5jYW5JbnNwZWN0KHByb3BlcnRpZXMpKSB7IHJldHVybiBwcm9wZXJ0aWVzOyB9XG4gICAgUm9zU3luY2hyb25pemF0aW9uSm9iMl9EYXRhQ2hlY2tDb25maWd1cmVQcm9wZXJ0eVZhbGlkYXRvcihwcm9wZXJ0aWVzKS5hc3NlcnRTdWNjZXNzKCk7XG4gICAgcmV0dXJuIHtcbiAgICAgICdmdWxsQ2hlY2tNYXhSZWFkUnBzJzogcm9zLm51bWJlclRvUm9zVGVtcGxhdGUocHJvcGVydGllcy5mdWxsQ2hlY2tNYXhSZWFkUnBzKSxcbiAgICAgICdkYXRhQ2hlY2tOb3RpY2VQaG9uZSc6IHJvcy5zdHJpbmdUb1Jvc1RlbXBsYXRlKHByb3BlcnRpZXMuZGF0YUNoZWNrTm90aWNlUGhvbmUpLFxuICAgICAgJ2luY3JlbWVudGFsQ2hlY2tEZWxheU5vdGljZSc6IHJvcy5ib29sZWFuVG9Sb3NUZW1wbGF0ZShwcm9wZXJ0aWVzLmluY3JlbWVudGFsQ2hlY2tEZWxheU5vdGljZSksXG4gICAgICAnaW5jcmVtZW50YWxDaGVja0RlbGF5Tm90aWNlVmFsdWUnOiByb3MubnVtYmVyVG9Sb3NUZW1wbGF0ZShwcm9wZXJ0aWVzLmluY3JlbWVudGFsQ2hlY2tEZWxheU5vdGljZVZhbHVlKSxcbiAgICAgICdpbmNyZW1lbnRhbENoZWNrRGVsYXlOb3RpY2VQZXJpb2QnOiByb3MubnVtYmVyVG9Sb3NUZW1wbGF0ZShwcm9wZXJ0aWVzLmluY3JlbWVudGFsQ2hlY2tEZWxheU5vdGljZVBlcmlvZCksXG4gICAgICAnZGF0YUNoZWNrRGJMaXN0Jzogcm9zLnN0cmluZ1RvUm9zVGVtcGxhdGUocHJvcGVydGllcy5kYXRhQ2hlY2tEYkxpc3QpLFxuICAgICAgJ2NoZWNrTWF4aW11bUhvdXJFbmFibGUnOiByb3MubnVtYmVyVG9Sb3NUZW1wbGF0ZShwcm9wZXJ0aWVzLmNoZWNrTWF4aW11bUhvdXJFbmFibGUpLFxuICAgICAgJ2Z1bGxDaGVja1JhdGlvJzogcm9zLm51bWJlclRvUm9zVGVtcGxhdGUocHJvcGVydGllcy5mdWxsQ2hlY2tSYXRpbyksXG4gICAgICAnY2hlY2tNYXhpbXVtSG91cic6IHJvcy5udW1iZXJUb1Jvc1RlbXBsYXRlKHByb3BlcnRpZXMuY2hlY2tNYXhpbXVtSG91ciksXG4gICAgICAnZnVsbENoZWNrRml4RGF0YSc6IHJvcy5ib29sZWFuVG9Sb3NUZW1wbGF0ZShwcm9wZXJ0aWVzLmZ1bGxDaGVja0ZpeERhdGEpLFxuICAgICAgJ2Z1bGxDaGVja01vZGVsJzogcm9zLm51bWJlclRvUm9zVGVtcGxhdGUocHJvcGVydGllcy5mdWxsQ2hlY2tNb2RlbCksXG4gICAgICAnaW5jcmVtZW50YWxDaGVja1ZhbGlkRmFpbE5vdGljZVZhbHVlJzogcm9zLm51bWJlclRvUm9zVGVtcGxhdGUocHJvcGVydGllcy5pbmNyZW1lbnRhbENoZWNrVmFsaWRGYWlsTm90aWNlVmFsdWUpLFxuICAgICAgJ2luY3JlbWVudGFsRGF0YUNoZWNrJzogcm9zLmJvb2xlYW5Ub1Jvc1RlbXBsYXRlKHByb3BlcnRpZXMuaW5jcmVtZW50YWxEYXRhQ2hlY2spLFxuICAgICAgJ2luY3JlbWVudGFsQ2hlY2tWYWxpZEZhaWxOb3RpY2VUaW1lcyc6IHJvcy5udW1iZXJUb1Jvc1RlbXBsYXRlKHByb3BlcnRpZXMuaW5jcmVtZW50YWxDaGVja1ZhbGlkRmFpbE5vdGljZVRpbWVzKSxcbiAgICAgICdmdWxsQ2hlY2tNYXhSZWFkQnBzJzogcm9zLm51bWJlclRvUm9zVGVtcGxhdGUocHJvcGVydGllcy5mdWxsQ2hlY2tNYXhSZWFkQnBzKSxcbiAgICAgICdmdWxsQ2hlY2tWYWxpZEZhaWxOb3RpY2UnOiByb3MuYm9vbGVhblRvUm9zVGVtcGxhdGUocHJvcGVydGllcy5mdWxsQ2hlY2tWYWxpZEZhaWxOb3RpY2UpLFxuICAgICAgJ2Z1bGxDaGVja0Vycm9yTm90aWNlJzogcm9zLmJvb2xlYW5Ub1Jvc1RlbXBsYXRlKHByb3BlcnRpZXMuZnVsbENoZWNrRXJyb3JOb3RpY2UpLFxuICAgICAgJ2luY3JlbWVudGFsQ2hlY2tWYWxpZEZhaWxOb3RpY2VQZXJpb2QnOiByb3MubnVtYmVyVG9Sb3NUZW1wbGF0ZShwcm9wZXJ0aWVzLmluY3JlbWVudGFsQ2hlY2tWYWxpZEZhaWxOb3RpY2VQZXJpb2QpLFxuICAgICAgJ2luY3JlbWVudGFsQ2hlY2tEZWxheU5vdGljZVRpbWVzJzogcm9zLm51bWJlclRvUm9zVGVtcGxhdGUocHJvcGVydGllcy5pbmNyZW1lbnRhbENoZWNrRGVsYXlOb3RpY2VUaW1lcyksXG4gICAgICAnZnVsbENoZWNrUmVmZXJFbmRwb2ludCc6IHJvcy5zdHJpbmdUb1Jvc1RlbXBsYXRlKHByb3BlcnRpZXMuZnVsbENoZWNrUmVmZXJFbmRwb2ludCksXG4gICAgICAnZnVsbERhdGFDaGVjayc6IHJvcy5ib29sZWFuVG9Sb3NUZW1wbGF0ZShwcm9wZXJ0aWVzLmZ1bGxEYXRhQ2hlY2spLFxuICAgICAgJ2luY3JlbWVudGFsQ2hlY2tWYWxpZEZhaWxOb3RpY2UnOiByb3MuYm9vbGVhblRvUm9zVGVtcGxhdGUocHJvcGVydGllcy5pbmNyZW1lbnRhbENoZWNrVmFsaWRGYWlsTm90aWNlKSxcbiAgICAgICdmdWxsQ2hlY2tOb3RpY2VWYWx1ZSc6IHJvcy5udW1iZXJUb1Jvc1RlbXBsYXRlKHByb3BlcnRpZXMuZnVsbENoZWNrTm90aWNlVmFsdWUpLFxuICAgICAgJ2luY3JlbWVudGFsQ2hlY2tFcnJvck5vdGljZSc6IHJvcy5ib29sZWFuVG9Sb3NUZW1wbGF0ZShwcm9wZXJ0aWVzLmluY3JlbWVudGFsQ2hlY2tFcnJvck5vdGljZSksXG4gICAgfTtcbn1cblxuZXhwb3J0IG5hbWVzcGFjZSBSb3NTeW5jaHJvbml6YXRpb25Kb2IyIHtcbiAgICAvKipcbiAgICAgKiBAc3RhYmlsaXR5IGV4dGVybmFsXG4gICAgICovXG4gICAgZXhwb3J0IGludGVyZmFjZSBEZXN0aW5hdGlvbkVuZHBvaW50UHJvcGVydHkge1xuICAgICAgICAvKipcbiAgICAgICAgICogQFByb3BlcnR5IHJvbGU6IFRoZSBuYW1lIG9mIHRoZSBSZXNvdXJjZSBBY2Nlc3MgTWFuYWdlbWVudCAoUkFNKSByb2xlIGNvbmZpZ3VyZWQgZm9yIHRoZSBBbGliYWJhIENsb3VkIGFjY291bnQgdGhhdCBvd25zIHRoZSBkZXN0aW5hdGlvbiBpbnN0YW5jZS5cbiAgICAgKiAqKk5vdGUqKjogVGhpcyBwYXJhbWV0ZXIgaXMgcmVxdWlyZWQgd2hlbiB5b3UgbWlncmF0ZSBvciBzeW5jaHJvbml6ZSBkYXRhIGFjcm9zcyBkaWZmZXJlbnQgQWxpYmFiYSBDbG91ZCBhY2NvdW50cy5cbiAgICAgICAgICovXG4gICAgICAgIHJlYWRvbmx5IHJvbGU/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAUHJvcGVydHkgb3JhY2xlU2lkOiBUaGUgc3lzdGVtIElEIChTSUQpIG9mIHRoZSBPcmFjbGUgZGF0YWJhc2UuXG4gICAgICogKipOb3RlKio6IFRoaXMgcGFyYW1ldGVyIGlzIHJlcXVpcmVkIG9ubHkgd2hlbiAqKkVuZ2luZU5hbWUqKiBpcyBzZXQgdG8gKipPUkFDTEUqKiBhbmQgdGhlIE9yYWNsZSBkYXRhYmFzZSBpcyBkZXBsb3llZCBpbiBhbiBhcmNoaXRlY3R1cmUgdGhhdCBpcyBub3QgYSBSZWFsIEFwcGxpY2F0aW9uIENsdXN0ZXIgKFJBQykuXG4gICAgICAgICAqL1xuICAgICAgICByZWFkb25seSBvcmFjbGVTaWQ/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAUHJvcGVydHkgdXNlck5hbWU6IFRoZSBkYXRhYmFzZSBhY2NvdW50IG9mIHRoZSBkZXN0aW5hdGlvbiBkYXRhYmFzZS5cbiAgICAgKiAqKk5vdGUqKjogSW4gbW9zdCBjYXNlcywgdGhpcyBwYXJhbWV0ZXIgaXMgcmVxdWlyZWQuIFRoZSBwZXJtaXNzaW9ucyB0aGF0IGFyZSByZXF1aXJlZCBmb3IgdGhlIGRhdGFiYXNlIGFjY291bnQgdmFyeSB3aXRoIHRoZSBtaWdyYXRpb24gb3Igc3luY2hyb25pemF0aW9uIHNjZW5hcmlvLlxuICAgICAgICAgKi9cbiAgICAgICAgcmVhZG9ubHkgdXNlck5hbWU/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAUHJvcGVydHkgb3duZXJJZDogVGhlIElEIG9mIHRoZSBBbGliYWJhIENsb3VkIGFjY291bnQgdG8gd2hpY2ggdGhlIGRlc3RpbmF0aW9uIGRhdGFiYXNlIGJlbG9uZ3MuXG4gICAgICogKipOb3RlKio6IFlvdSBjYW4gc3BlY2lmeSB0aGlzIHBhcmFtZXRlciB0byBtaWdyYXRlIG9yIHN5bmNocm9uaXplIGRhdGEgYWNyb3NzIGRpZmZlcmVudCBBbGliYWJhIENsb3VkIGFjY291bnRzLiBJbiB0aGlzIGNhc2UsIHlvdSBtdXN0IHNwZWNpZnkgKipSb2xlKiouXG4gICAgICAgICAqL1xuICAgICAgICByZWFkb25seSBvd25lcklkPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuICAgICAgICAvKipcbiAgICAgICAgICogQFByb3BlcnR5IGluc3RhbmNlSWQ6IFRoZSBJRCBvZiB0aGUgZGVzdGluYXRpb24gaW5zdGFuY2UuIElmIHRoZSBkZXN0aW5hdGlvbiBpbnN0YW5jZSBpcyBhbiBBbGliYWJhIENsb3VkIGRhdGFiYXNlIGluc3RhbmNlLCB5b3UgbXVzdCBzcGVjaWZ5IHRoZSBJRCBvZiB0aGUgZGF0YWJhc2UgaW5zdGFuY2UuIEZvciBleGFtcGxlLCBcbiAgICAgKiAtIElmIHRoZSBkZXN0aW5hdGlvbiBpbnN0YW5jZSBpcyBhbiBBcHNhcmFEQiBSRFMgZm9yIE15U1FMIGluc3RhbmNlLCB5b3UgbXVzdCBzcGVjaWZ5IHRoZSBJRCBvZiB0aGUgQXBzYXJhREIgUkRTIGZvciBNeVNRTCBpbnN0YW5jZS4gXG4gICAgICogLSBJZiB0aGUgZGVzdGluYXRpb24gaW5zdGFuY2UgaXMgYSBzZWxmLW1hbmFnZWQgZGF0YWJhc2UsIHRoZSB2YWx1ZSBvZiB0aGlzIHBhcmFtZXRlciB2YXJpZXMgd2l0aCB0aGUgdmFsdWUgb2YgU291cmNlRW5kcG9pbnRJbnN0YW5jZVR5cGUuXG4gICAgICogLSBJZiBJbnN0YW5jZVR5cGUgaXMgc2V0IHRvIEVDUywgeW91IG11c3Qgc3BlY2lmeSB0aGUgSUQgb2YgdGhlIEVDUyBpbnN0YW5jZS5cbiAgICAgKiAtIElmIEluc3RhbmNlVHlwZSBpcyBzZXQgdG8gREcsIHlvdSBtdXN0IHNwZWNpZnkgdGhlIElEIG9mIHRoZSBkYXRhYmFzZSBnYXRld2F5LlxuICAgICAqIC0gSWYgSW5zdGFuY2VUeXBlIGlzIHNldCB0byBFWFBSRVNTIG9yIENFTiwgeW91IG11c3Qgc3BlY2lmeSB0aGUgSUQgb2YgdGhlIFZQQyB0aGF0IGlzIGNvbm5lY3RlZCB0byB0aGUgZGVzdGluYXRpb24gaW5zdGFuY2UuXG4gICAgICogKipOb3RlKio6IElmIERlc3RpbmF0aW9uRW5kcG9pbnRJbnN0YW5jZVR5cGUgaXMgc2V0IHRvIENFTiwgeW91IG11c3QgYWxzbyBzcGVjaWZ5IHRoZSBJRCBvZiB0aGUgQ0VOIGluc3RhbmNlIGluIHRoZSBSZXNlcnZlIHBhcmFtZXRlci5cbiAgICAgICAgICovXG4gICAgICAgIHJlYWRvbmx5IGluc3RhbmNlSWQ/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAUHJvcGVydHkgaXA6IFRoZSBJUCBhZGRyZXNzIG9mIHRoZSBkZXN0aW5hdGlvbiBpbnN0YW5jZS4gXG4gICAgICogKipOb3RlKio6IFRoaXMgcGFyYW1ldGVyIGlzIHJlcXVpcmVkIG9ubHkgd2hlbiAqKkluc3RhbmNlVHlwZSoqIGlzIHNldCB0byAqKk9USEVSKiosICoqRVhQUkVTUyoqLCAqKkRHKiosIG9yICoqQ0VOKiouXG4gICAgICAgICAqL1xuICAgICAgICByZWFkb25seSBpcD86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBQcm9wZXJ0eSBwb3J0OiBUaGUgcG9ydCBudW1iZXIgb2YgdGhlIGRlc3RpbmF0aW9uIGluc3RhbmNlLlxuICAgICAqICoqTm90ZSoqOiBUaGlzIHBhcmFtZXRlciBpcyByZXF1aXJlZCBvbmx5IHdoZW4gdGhlIGRlc3RpbmF0aW9uIGluc3RhbmNlIGlzIGEgc2VsZi1tYW5hZ2VkIGRhdGFiYXNlLlxuICAgICAgICAgKi9cbiAgICAgICAgcmVhZG9ubHkgcG9ydD86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBQcm9wZXJ0eSBkYXRhYmFzZU5hbWU6IFRoZSBuYW1lIG9mIHRoZSBkYXRhYmFzZSB3aGljaCBjb250YWlucyB0aGUgb2JqZWN0cyB0byBiZSBtaWdyYXRlZCBpbiB0aGUgZGVzdGluYXRpb24gaW5zdGFuY2UuXG4gICAgICogKipOb3RlKio6IFRoaXMgcGFyYW1ldGVyIGlzIHJlcXVpcmVkIG9ubHkgd2hlbiB0aGUgZGVzdGluYXRpb24gaW5zdGFuY2UgaXMgYSBQb2xhckRCIGZvciBQb3N0Z3JlU1FMIGNsdXN0ZXIgKGNvbXBhdGlibGUgd2l0aCBPcmFjbGUpLCBhIFBvc3RncmVTUUwgZGF0YWJhc2UsIG9yIGEgTW9uZ29EQiBkYXRhYmFzZS5cbiAgICAgICAgICovXG4gICAgICAgIHJlYWRvbmx5IGRhdGFiYXNlTmFtZT86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBQcm9wZXJ0eSByZWdpb246IFRoZSBJRCBvZiB0aGUgcmVnaW9uIGluIHdoaWNoIHRoZSBkZXN0aW5hdGlvbiBpbnN0YW5jZSByZXNpZGVzLlxuICAgICAqICoqTm90ZSoqOiBJZiB0aGUgc291cmNlIGluc3RhbmNlIGlzIGFuIEFsaWJhYmEgQ2xvdWQgZGF0YWJhc2UgaW5zdGFuY2UsIHRoaXMgcGFyYW1ldGVyIGlzIHJlcXVpcmVkLlxuICAgICAgICAgKi9cbiAgICAgICAgcmVhZG9ubHkgcmVnaW9uPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuICAgICAgICAvKipcbiAgICAgICAgICogQFByb3BlcnR5IGluc3RhbmNlVHlwZTogVGhlIHR5cGUgb2YgdGhlIGRlc3RpbmF0aW9uIGluc3RhbmNlLiBWYWxpZCB2YWx1ZXM6XG4gICAgICogQWxpYmFiYSBDbG91ZCBkYXRhYmFzZSBpbnN0YW5jZXNcbiAgICAgKiAtICoqUkRTKio6IEFwc2FyYURCIFJEUyBmb3IgTXlTUUwgaW5zdGFuY2UsIEFwc2FyYURCIFJEUyBmb3IgU1FMIFNlcnZlciBpbnN0YW5jZSwgQXBzYXJhREIgUkRTIGZvciBQb3N0Z3JlU1FMIGluc3RhbmNlLCBvciBBcHNhcmFEQiBSRFMgZm9yIE1hcmlhREIgVFggaW5zdGFuY2VcbiAgICAgKiAtICoqUG9sYXJEQioqOiBQb2xhckRCIGZvciBNeVNRTCBjbHVzdGVyXG4gICAgICogLSAqKkRJU1RSSUJVVEVEX1BPTEFSREJYMTAqKjogUG9sYXJEQi1YIDEuMCAoZm9ybWVybHkgRFJEUykgaW5zdGFuY2VcbiAgICAgKiAtICoqUE9MQVJEQlgyMCoqOiBQb2xhckRCLVggMi4wIGluc3RhbmNlXG4gICAgICogLSAqKlJFRElTKio6IEFwc2FyYURCIGZvciBSZWRpcyBpbnN0YW5jZVxuICAgICAqIC0gKipBRFMqKjogQW5hbHl0aWNEQiBmb3IgTXlTUUwgVjIuMCBjbHVzdGVyIG9yIEFuYWx5dGljREIgZm9yIE15U1FMIFYzLjAgY2x1c3RlclxuICAgICAqIC0gKipNT05HT0RCKio6IEFwc2FyYURCIGZvciBNb25nb0RCIGluc3RhbmNlXG4gICAgICogLSAqKkdSRUVOUExVTSoqOiBBbmFseXRpY0RCIGZvciBQb3N0Z3JlU1FMIGluc3RhbmNlXG4gICAgICogLSAqKkRBVEFIVUIqKjogRGF0YUh1YiBwcm9qZWN0XG4gICAgICogLSAqKkVMSyoqOiBFbGFzdGljc2VhcmNoIGNsdXN0ZXJcbiAgICAgKiAtICoqVGFibGVzdG9yZSoqOiBUYWJsZXN0b3JlIGluc3RhbmNlXG4gICAgICogLSAqKk9EUFMqKjogTWF4Q29tcHV0ZSBwcm9qZWN0XG4gICAgICogU2VsZi1tYW5hZ2VkIGRhdGFiYXNlc1xuICAgICAqIC0gKipPVEhFUioqOiBzZWxmLW1hbmFnZWQgZGF0YWJhc2Ugd2l0aCBhIHB1YmxpYyBJUCBhZGRyZXNzXG4gICAgICogLSAqKkVDUyoqOiBzZWxmLW1hbmFnZWQgZGF0YWJhc2UgaG9zdGVkIG9uIGFuIEVDUyBpbnN0YW5jZVxuICAgICAqIC0gKipFWFBSRVNTKio6IHNlbGYtbWFuYWdlZCBkYXRhYmFzZSBjb25uZWN0ZWQgb3ZlciBFeHByZXNzIENvbm5lY3RcbiAgICAgKiAtICoqQ0VOKio6IHNlbGYtbWFuYWdlZCBkYXRhYmFzZSBjb25uZWN0ZWQgb3ZlciBDRU5cbiAgICAgKiAtICoqREcqKjogc2VsZi1tYW5hZ2VkIGRhdGFiYXNlIGNvbm5lY3RlZCBvdmVyIERhdGFiYXNlIEdhdGV3YXlcbiAgICAgKiAqKk5vdGUqKjogSWYgdGhlIGRlc3RpbmF0aW9uIGluc3RhbmNlIGlzIGEgUG9sYXJEQiBmb3IgUG9zdGdyZVNRTCBjbHVzdGVyIChjb21wYXRpYmxlIHdpdGggT3JhY2xlKSwgeW91IG11c3Qgc2V0IHRoaXMgcGFyYW1ldGVyIHRvIE9USEVSIG9yIEVYUFJFU1MuIFRoZW4sIHlvdSBjYW4gY29ubmVjdCB0aGUgUG9sYXJEQiBmb3IgUG9zdGdyZVNRTCBjbHVzdGVyIChjb21wYXRpYmxlIHdpdGggT3JhY2xlKSB0byBEVFMgYXMgYSBzZWxmLW1hbmFnZWQgZGF0YWJhc2UgYnkgdXNpbmcgYSBwdWJsaWMgSVAgYWRkcmVzcyBvciBFeHByZXNzIENvbm5lY3QuXG4gICAgICogSWYgdGhlIGRlc3RpbmF0aW9uIGluc3RhbmNlIGlzIGEgTWVzc2FnZSBRdWV1ZSBmb3IgQXBhY2hlIEthZmthIGluc3RhbmNlLCB5b3UgbXVzdCBzZXQgdGhpcyBwYXJhbWV0ZXIgdG8gRUNTIG9yIEVYUFJFU1MuIFRoZW4sIHlvdSBjYW4gY29ubmVjdCB0aGUgTWVzc2FnZSBRdWV1ZSBmb3IgQXBhY2hlIEthZmthIGluc3RhbmNlIHRvIERUUyBhcyBhIHNlbGYtbWFuYWdlZCBkYXRhYmFzZSBjb25uZWN0ZWQgb3ZlciBFQ1Mgb3IgRXhwcmVzcyBDb25uZWN0LlxuICAgICAqIElmIHRoZSBkZXN0aW5hdGlvbiBpbnN0YW5jZSBpcyBhIHNlbGYtbWFuYWdlZCBkYXRhYmFzZSwgeW91IG11c3QgZGVwbG95IHRoZSBuZXR3b3JrIGVudmlyb25tZW50IGZvciB0aGUgZGF0YWJhc2UuXG4gICAgICAgICAqL1xuICAgICAgICByZWFkb25seSBpbnN0YW5jZVR5cGU6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBQcm9wZXJ0eSBlbmdpbmVOYW1lOiBUaGUgZGF0YWJhc2UgZW5naW5lIG9mIHRoZSBkZXN0aW5hdGlvbiBpbnN0YW5jZS4gVmFsaWQgdmFsdWVzOlxuICAgICAqIC0gKipNWVNRTCoqOiBBcHNhcmFEQiBSRFMgZm9yIE15U1FMIGluc3RhbmNlIG9yIHNlbGYtbWFuYWdlZCBNeVNRTCBkYXRhYmFzZVxuICAgICAqIC0gKipNQVJJQURCKio6IEFwc2FyYURCIFJEUyBmb3IgTWFyaWFEQiBUWCBpbnN0YW5jZVxuICAgICAqIC0gKipQb2xhckRCKio6IFBvbGFyREIgZm9yIE15U1FMIGNsdXN0ZXJcbiAgICAgKiAtICoqUE9MQVJEQl9PKio6IFBvbGFyREIgZm9yIFBvc3RncmVTUUwgY2x1c3RlciAoY29tcGF0aWJsZSB3aXRoIE9yYWNsZSlcbiAgICAgKiAtICoqUE9MQVJEQlgxMCoqOiBQb2xhckRCLVggMS4wIGluc3RhbmNlXG4gICAgICogLSAqKlBPTEFSREJYMjAqKjogUG9sYXJEQi1YIDIuMCBpbnN0YW5jZVxuICAgICAqIC0gKipPUkFDTEUqKjogc2VsZi1tYW5hZ2VkIE9yYWNsZSBkYXRhYmFzZVxuICAgICAqIC0gKipQT1NUR1JFU1FMKio6IEFwc2FyYURCIFJEUyBmb3IgUG9zdGdyZVNRTCBpbnN0YW5jZSBvciBzZWxmLW1hbmFnZWQgUG9zdGdyZVNRTCBkYXRhYmFzZVxuICAgICAqIC0gKipNU1NRTCoqOiBBcHNhcmFEQiBSRFMgZm9yIFNRTCBTZXJ2ZXIgaW5zdGFuY2Ugb3Igc2VsZi1tYW5hZ2VkIFNRTCBTZXJ2ZXIgZGF0YWJhc2VcbiAgICAgKiAtICoqQURTKio6IEFuYWx5dGljREIgZm9yIE15U1FMIFYyLjAgY2x1c3RlclxuICAgICAqIC0gKipBREIzMCoqOiBBbmFseXRpY0RCIGZvciBNeVNRTCBWMy4wIGNsdXN0ZXItICoqTU9OR09EQioqOiBBcHNhcmFEQiBmb3IgTW9uZ29EQiBpbnN0YW5jZSBvciBzZWxmLW1hbmFnZWQgTW9uZ29EQiBkYXRhYmFzZVxuICAgICAqIC0gKipHUkVFTlBMVU0qKjogQW5hbHl0aWNEQiBmb3IgUG9zdGdyZVNRTCBpbnN0YW5jZVxuICAgICAqIC0gKipLQUZLQSoqOiBNZXNzYWdlIFF1ZXVlIGZvciBBcGFjaGUgS2Fma2EgaW5zdGFuY2Ugb3Igc2VsZi1tYW5hZ2VkIEthZmthIGNsdXN0ZXJcbiAgICAgKiAtICoqREFUQUhVQioqOiBEYXRhSHViIHByb2plY3QtICoqREIyKio6IHNlbGYtbWFuYWdlZCBEYjIgZm9yIExVVyBkYXRhYmFzZVxuICAgICAqIC0gKipBUzQwMCoqOiBzZWxmLW1hbmFnZWQgRGIyIGZvciBpIGRhdGFiYXNlXG4gICAgICogLSAqKk9EUFMqKjogTWF4Q29tcHV0ZSBwcm9qZWN0XG4gICAgICogLSAqKlRhYmxlc3RvcmUqKjogVGFibGVzdG9yZSBpbnN0YW5jZVxuICAgICAqIC0gKipFTEsqKjogRWxhc3RpY3NlYXJjaCBjbHVzdGVyXG4gICAgICogLSAqKlJFRElTKio6IEFwc2FyYURCIGZvciBSZWRpcyBpbnN0YW5jZSBvciBzZWxmLW1hbmFnZWQgUmVkaXMgZGF0YWJhc2VcbiAgICAgKiAqKk5vdGUqKjogRGVmYXVsdCB2YWx1ZTogKipNWVNRTCoqLlxuICAgICAqIElmIHRoaXMgcGFyYW1ldGVyIGlzIHNldCB0byAqKktBRktBKiosICoqTU9OR09EQioqLCBvciAqKlBvbGFyREIqKiwgeW91IG11c3QgYWxzbyBzcGVjaWZ5IHRoZSBkYXRhYmFzZSBpbmZvcm1hdGlvbiBpbiB0aGUgUmVzZXJ2ZSBwYXJhbWV0ZXIuXG4gICAgICAgICAqL1xuICAgICAgICByZWFkb25seSBlbmdpbmVOYW1lPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuICAgICAgICAvKipcbiAgICAgICAgICogQFByb3BlcnR5IHBhc3N3b3JkOiBUaGUgcGFzc3dvcmQgb2YgdGhlIGRlc3RpbmF0aW9uIGRhdGFiYXNlIGFjY291bnQuXG4gICAgICAgICAqL1xuICAgICAgICByZWFkb25seSBwYXNzd29yZD86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcbiAgICB9XG59XG4vKipcbiAqIERldGVybWluZSB3aGV0aGVyIHRoZSBnaXZlbiBwcm9wZXJ0aWVzIG1hdGNoIHRob3NlIG9mIGEgYERlc3RpbmF0aW9uRW5kcG9pbnRQcm9wZXJ0eWBcbiAqXG4gKiBAcGFyYW0gcHJvcGVydGllcyAtIHRoZSBUeXBlU2NyaXB0IHByb3BlcnRpZXMgb2YgYSBgRGVzdGluYXRpb25FbmRwb2ludFByb3BlcnR5YFxuICpcbiAqIEByZXR1cm5zIHRoZSByZXN1bHQgb2YgdGhlIHZhbGlkYXRpb24uXG4gKi9cbmZ1bmN0aW9uIFJvc1N5bmNocm9uaXphdGlvbkpvYjJfRGVzdGluYXRpb25FbmRwb2ludFByb3BlcnR5VmFsaWRhdG9yKHByb3BlcnRpZXM6IGFueSk6IHJvcy5WYWxpZGF0aW9uUmVzdWx0IHtcbiAgICBpZiAoIXJvcy5jYW5JbnNwZWN0KHByb3BlcnRpZXMpKSB7IHJldHVybiByb3MuVkFMSURBVElPTl9TVUNDRVNTOyB9XG4gICAgY29uc3QgZXJyb3JzID0gbmV3IHJvcy5WYWxpZGF0aW9uUmVzdWx0cygpO1xuICAgIGVycm9ycy5jb2xsZWN0KHJvcy5wcm9wZXJ0eVZhbGlkYXRvcigncm9sZScsIHJvcy52YWxpZGF0ZVN0cmluZykocHJvcGVydGllcy5yb2xlKSk7XG4gICAgZXJyb3JzLmNvbGxlY3Qocm9zLnByb3BlcnR5VmFsaWRhdG9yKCdvcmFjbGVTaWQnLCByb3MudmFsaWRhdGVTdHJpbmcpKHByb3BlcnRpZXMub3JhY2xlU2lkKSk7XG4gICAgZXJyb3JzLmNvbGxlY3Qocm9zLnByb3BlcnR5VmFsaWRhdG9yKCd1c2VyTmFtZScsIHJvcy52YWxpZGF0ZVN0cmluZykocHJvcGVydGllcy51c2VyTmFtZSkpO1xuICAgIGVycm9ycy5jb2xsZWN0KHJvcy5wcm9wZXJ0eVZhbGlkYXRvcignb3duZXJJZCcsIHJvcy52YWxpZGF0ZVN0cmluZykocHJvcGVydGllcy5vd25lcklkKSk7XG4gICAgZXJyb3JzLmNvbGxlY3Qocm9zLnByb3BlcnR5VmFsaWRhdG9yKCdpbnN0YW5jZUlkJywgcm9zLnZhbGlkYXRlU3RyaW5nKShwcm9wZXJ0aWVzLmluc3RhbmNlSWQpKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ2lwJywgcm9zLnZhbGlkYXRlU3RyaW5nKShwcm9wZXJ0aWVzLmlwKSk7XG4gICAgZXJyb3JzLmNvbGxlY3Qocm9zLnByb3BlcnR5VmFsaWRhdG9yKCdwb3J0Jywgcm9zLnZhbGlkYXRlU3RyaW5nKShwcm9wZXJ0aWVzLnBvcnQpKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ2RhdGFiYXNlTmFtZScsIHJvcy52YWxpZGF0ZVN0cmluZykocHJvcGVydGllcy5kYXRhYmFzZU5hbWUpKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ3JlZ2lvbicsIHJvcy52YWxpZGF0ZVN0cmluZykocHJvcGVydGllcy5yZWdpb24pKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ2luc3RhbmNlVHlwZScsIHJvcy5yZXF1aXJlZFZhbGlkYXRvcikocHJvcGVydGllcy5pbnN0YW5jZVR5cGUpKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ2luc3RhbmNlVHlwZScsIHJvcy52YWxpZGF0ZVN0cmluZykocHJvcGVydGllcy5pbnN0YW5jZVR5cGUpKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ2VuZ2luZU5hbWUnLCByb3MudmFsaWRhdGVTdHJpbmcpKHByb3BlcnRpZXMuZW5naW5lTmFtZSkpO1xuICAgIGVycm9ycy5jb2xsZWN0KHJvcy5wcm9wZXJ0eVZhbGlkYXRvcigncGFzc3dvcmQnLCByb3MudmFsaWRhdGVTdHJpbmcpKHByb3BlcnRpZXMucGFzc3dvcmQpKTtcbiAgICByZXR1cm4gZXJyb3JzLndyYXAoJ3N1cHBsaWVkIHByb3BlcnRpZXMgbm90IGNvcnJlY3QgZm9yIFwiRGVzdGluYXRpb25FbmRwb2ludFByb3BlcnR5XCInKTtcbn1cblxuLyoqXG4gKiBSZW5kZXJzIHRoZSBBbGlDbG91ZCBST1MgUmVzb3VyY2UgcHJvcGVydGllcyBvZiBhbiBgQUxJWVVOOjpEVFM6OlN5bmNocm9uaXphdGlvbkpvYjIuRGVzdGluYXRpb25FbmRwb2ludGAgcmVzb3VyY2VcbiAqXG4gKiBAcGFyYW0gcHJvcGVydGllcyAtIHRoZSBUeXBlU2NyaXB0IHByb3BlcnRpZXMgb2YgYSBgRGVzdGluYXRpb25FbmRwb2ludFByb3BlcnR5YFxuICpcbiAqIEByZXR1cm5zIHRoZSBBbGlDbG91ZCBST1MgUmVzb3VyY2UgcHJvcGVydGllcyBvZiBhbiBgQUxJWVVOOjpEVFM6OlN5bmNocm9uaXphdGlvbkpvYjIuRGVzdGluYXRpb25FbmRwb2ludGAgcmVzb3VyY2UuXG4gKi9cbi8vIEB0cy1pZ25vcmUgVFM2MTMzXG5mdW5jdGlvbiByb3NTeW5jaHJvbml6YXRpb25Kb2IyRGVzdGluYXRpb25FbmRwb2ludFByb3BlcnR5VG9Sb3NUZW1wbGF0ZShwcm9wZXJ0aWVzOiBhbnkpOiBhbnkge1xuICAgIGlmICghcm9zLmNhbkluc3BlY3QocHJvcGVydGllcykpIHsgcmV0dXJuIHByb3BlcnRpZXM7IH1cbiAgICBSb3NTeW5jaHJvbml6YXRpb25Kb2IyX0Rlc3RpbmF0aW9uRW5kcG9pbnRQcm9wZXJ0eVZhbGlkYXRvcihwcm9wZXJ0aWVzKS5hc3NlcnRTdWNjZXNzKCk7XG4gICAgcmV0dXJuIHtcbiAgICAgICdSb2xlJzogcm9zLnN0cmluZ1RvUm9zVGVtcGxhdGUocHJvcGVydGllcy5yb2xlKSxcbiAgICAgICdPcmFjbGVTSUQnOiByb3Muc3RyaW5nVG9Sb3NUZW1wbGF0ZShwcm9wZXJ0aWVzLm9yYWNsZVNpZCksXG4gICAgICAnVXNlck5hbWUnOiByb3Muc3RyaW5nVG9Sb3NUZW1wbGF0ZShwcm9wZXJ0aWVzLnVzZXJOYW1lKSxcbiAgICAgICdPd25lcklEJzogcm9zLnN0cmluZ1RvUm9zVGVtcGxhdGUocHJvcGVydGllcy5vd25lcklkKSxcbiAgICAgICdJbnN0YW5jZUlEJzogcm9zLnN0cmluZ1RvUm9zVGVtcGxhdGUocHJvcGVydGllcy5pbnN0YW5jZUlkKSxcbiAgICAgICdJUCc6IHJvcy5zdHJpbmdUb1Jvc1RlbXBsYXRlKHByb3BlcnRpZXMuaXApLFxuICAgICAgJ1BvcnQnOiByb3Muc3RyaW5nVG9Sb3NUZW1wbGF0ZShwcm9wZXJ0aWVzLnBvcnQpLFxuICAgICAgJ0RhdGFiYXNlTmFtZSc6IHJvcy5zdHJpbmdUb1Jvc1RlbXBsYXRlKHByb3BlcnRpZXMuZGF0YWJhc2VOYW1lKSxcbiAgICAgICdSZWdpb24nOiByb3Muc3RyaW5nVG9Sb3NUZW1wbGF0ZShwcm9wZXJ0aWVzLnJlZ2lvbiksXG4gICAgICAnSW5zdGFuY2VUeXBlJzogcm9zLnN0cmluZ1RvUm9zVGVtcGxhdGUocHJvcGVydGllcy5pbnN0YW5jZVR5cGUpLFxuICAgICAgJ0VuZ2luZU5hbWUnOiByb3Muc3RyaW5nVG9Sb3NUZW1wbGF0ZShwcm9wZXJ0aWVzLmVuZ2luZU5hbWUpLFxuICAgICAgJ1Bhc3N3b3JkJzogcm9zLnN0cmluZ1RvUm9zVGVtcGxhdGUocHJvcGVydGllcy5wYXNzd29yZCksXG4gICAgfTtcbn1cblxuZXhwb3J0IG5hbWVzcGFjZSBSb3NTeW5jaHJvbml6YXRpb25Kb2IyIHtcbiAgICAvKipcbiAgICAgKiBAc3RhYmlsaXR5IGV4dGVybmFsXG4gICAgICovXG4gICAgZXhwb3J0IGludGVyZmFjZSBTb3VyY2VFbmRwb2ludFByb3BlcnR5IHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBQcm9wZXJ0eSBvcmFjbGVTaWQ6IFRoZSBzeXN0ZW0gSUQgKFNJRCkgb2YgdGhlIE9yYWNsZSBkYXRhYmFzZS5cbiAgICAgKiAqKk5vdGUqKjogVGhpcyBwYXJhbWV0ZXIgaXMgcmVxdWlyZWQgb25seSB3aGVuICoqRW5naW5lTmFtZSoqIGlzIHNldCB0byAqKk9SQUNMRSoqIGFuZCB0aGUgT3JhY2xlIGRhdGFiYXNlIGlzIGRlcGxveWVkIGluIGFuIGFyY2hpdGVjdHVyZSB0aGF0IGlzIG5vdCBhIFJlYWwgQXBwbGljYXRpb24gQ2x1c3RlciAoUkFDKS5cbiAgICAgICAgICovXG4gICAgICAgIHJlYWRvbmx5IG9yYWNsZVNpZD86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBQcm9wZXJ0eSB1c2VyTmFtZTogVGhlIGRhdGFiYXNlIGFjY291bnQgb2YgdGhlIHNvdXJjZSBkYXRhYmFzZS5cbiAgICAgKiAqKk5vdGUqKjogSW4gbW9zdCBjYXNlcywgdGhpcyBwYXJhbWV0ZXIgaXMgcmVxdWlyZWQuIFRoZSBwZXJtaXNzaW9ucyB0aGF0IGFyZSByZXF1aXJlZCBmb3IgdGhlIGRhdGFiYXNlIGFjY291bnQgdmFyeSB3aXRoIHRoZSBtaWdyYXRpb24gb3Igc3luY2hyb25pemF0aW9uIHNjZW5hcmlvLlxuICAgICAgICAgKi9cbiAgICAgICAgcmVhZG9ubHkgdXNlck5hbWU/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAUHJvcGVydHkgaW5zdGFuY2VJZDogVGhlIElEIG9mIHRoZSBzb3VyY2UgaW5zdGFuY2UuIElmIHRoZSBzb3VyY2UgaW5zdGFuY2UgaXMgYW4gQWxpYmFiYSBDbG91ZCBkYXRhYmFzZSBpbnN0YW5jZSwgeW91IG11c3Qgc3BlY2lmeSB0aGUgSUQgb2YgdGhlIGRhdGFiYXNlIGluc3RhbmNlLiBGb3IgZXhhbXBsZSwgXG4gICAgICogLSBJZiB0aGUgc291cmNlIGluc3RhbmNlIGlzIGFuIEFwc2FyYURCIFJEUyBmb3IgTXlTUUwgaW5zdGFuY2UsIHlvdSBtdXN0IHNwZWNpZnkgdGhlIElEIG9mIHRoZSBBcHNhcmFEQiBSRFMgZm9yIE15U1FMIGluc3RhbmNlLiBcbiAgICAgKiAtIElmIHRoZSBzb3VyY2UgaW5zdGFuY2UgaXMgYSBzZWxmLW1hbmFnZWQgZGF0YWJhc2UsIHRoZSB2YWx1ZSBvZiB0aGlzIHBhcmFtZXRlciB2YXJpZXMgd2l0aCB0aGUgdmFsdWUgb2YgU291cmNlRW5kcG9pbnRJbnN0YW5jZVR5cGUuXG4gICAgICogLSBJZiBJbnN0YW5jZVR5cGUgaXMgc2V0IHRvIEVDUywgeW91IG11c3Qgc3BlY2lmeSB0aGUgSUQgb2YgdGhlIEVDUyBpbnN0YW5jZS5cbiAgICAgKiAtIElmIEluc3RhbmNlVHlwZSBpcyBzZXQgdG8gREcsIHlvdSBtdXN0IHNwZWNpZnkgdGhlIElEIG9mIHRoZSBkYXRhYmFzZSBnYXRld2F5LlxuICAgICAqIC0gSWYgSW5zdGFuY2VUeXBlIGlzIHNldCB0byBFWFBSRVNTIG9yIENFTiwgeW91IG11c3Qgc3BlY2lmeSB0aGUgSUQgb2YgdGhlIFZQQyB0aGF0IGlzIGNvbm5lY3RlZCB0byB0aGUgc291cmNlIGluc3RhbmNlLlxuICAgICAqICoqTm90ZSoqOiBJZiBEZXN0aW5hdGlvbkVuZHBvaW50SW5zdGFuY2VUeXBlIGlzIHNldCB0byBDRU4sIHlvdSBtdXN0IGFsc28gc3BlY2lmeSB0aGUgSUQgb2YgdGhlIENFTiBpbnN0YW5jZSBpbiB0aGUgUmVzZXJ2ZSBwYXJhbWV0ZXIuXG4gICAgICAgICAqL1xuICAgICAgICByZWFkb25seSBpbnN0YW5jZUlkPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuICAgICAgICAvKipcbiAgICAgICAgICogQFByb3BlcnR5IGlwOiBUaGUgSVAgYWRkcmVzcyBvZiB0aGUgc291cmNlIGluc3RhbmNlLiBcbiAgICAgKiAqKk5vdGUqKjogVGhpcyBwYXJhbWV0ZXIgaXMgcmVxdWlyZWQgb25seSB3aGVuICoqSW5zdGFuY2VUeXBlKiogaXMgc2V0IHRvICoqT1RIRVIqKiwgKipFWFBSRVNTKiosICoqREcqKiwgb3IgKipDRU4qKi5cbiAgICAgICAgICovXG4gICAgICAgIHJlYWRvbmx5IGlwPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuICAgICAgICAvKipcbiAgICAgICAgICogQFByb3BlcnR5IHBvcnQ6IFRoZSBwb3J0IG51bWJlciBvZiB0aGUgc291cmNlIGluc3RhbmNlLlxuICAgICAqICoqTm90ZSoqOiBUaGlzIHBhcmFtZXRlciBpcyByZXF1aXJlZCBvbmx5IHdoZW4gdGhlIHNvdXJjZSBpbnN0YW5jZSBpcyBhIHNlbGYtbWFuYWdlZCBkYXRhYmFzZS5cbiAgICAgICAgICovXG4gICAgICAgIHJlYWRvbmx5IHBvcnQ/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAUHJvcGVydHkgdlN3aXRjaElkOiBUaGUgSUQgb2YgdGhlIHZTd2l0Y2ggdXNlZCBmb3IgdGhlIGRhdGEgc2hpcHBpbmcgbGluay5cbiAgICAgICAgICovXG4gICAgICAgIHJlYWRvbmx5IHZTd2l0Y2hJZD86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBQcm9wZXJ0eSBkYXRhYmFzZU5hbWU6IFRoZSBuYW1lIG9mIHRoZSBkYXRhYmFzZSB3aGljaCBjb250YWlucyB0aGUgb2JqZWN0cyB0byBiZSBtaWdyYXRlZCBpbiB0aGUgc291cmNlIGluc3RhbmNlLlxuICAgICAqICoqTm90ZSoqOiBUaGlzIHBhcmFtZXRlciBpcyByZXF1aXJlZCBvbmx5IHdoZW4gdGhlIHNvdXJjZSBpbnN0YW5jZSBpcyBhIFBvbGFyREIgZm9yIFBvc3RncmVTUUwgY2x1c3RlciAoY29tcGF0aWJsZSB3aXRoIE9yYWNsZSksIGEgUG9zdGdyZVNRTCBkYXRhYmFzZSwgb3IgYSBNb25nb0RCIGRhdGFiYXNlLlxuICAgICAgICAgKi9cbiAgICAgICAgcmVhZG9ubHkgZGF0YWJhc2VOYW1lPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuICAgICAgICAvKipcbiAgICAgICAgICogQFByb3BlcnR5IGVuZ2luZU5hbWU6IFRoZSBkYXRhYmFzZSBlbmdpbmUgb2YgdGhlIHNvdXJjZSBpbnN0YW5jZS4gVmFsaWQgdmFsdWVzOlxuICAgICAqIC0gKipNWVNRTCoqOiBBcHNhcmFEQiBSRFMgZm9yIE15U1FMIGluc3RhbmNlIG9yIHNlbGYtbWFuYWdlZCBNeVNRTCBkYXRhYmFzZVxuICAgICAqIC0gKipNQVJJQURCKio6IEFwc2FyYURCIFJEUyBmb3IgTWFyaWFEQiBUWCBpbnN0YW5jZVxuICAgICAqIC0gKipQb2xhckRCKio6IFBvbGFyREIgZm9yIE15U1FMIGNsdXN0ZXJcbiAgICAgKiAtICoqUE9MQVJEQl9PKio6IFBvbGFyREIgZm9yIFBvc3RncmVTUUwgY2x1c3RlciAoY29tcGF0aWJsZSB3aXRoIE9yYWNsZSlcbiAgICAgKiAtICoqUE9MQVJEQlgxMCoqOiBQb2xhckRCLVggMS4wIGluc3RhbmNlXG4gICAgICogLSAqKlBPTEFSREJYMjAqKjogUG9sYXJEQi1YIDIuMCBpbnN0YW5jZVxuICAgICAqIC0gKipPUkFDTEUqKjogc2VsZi1tYW5hZ2VkIE9yYWNsZSBkYXRhYmFzZVxuICAgICAqIC0gKipQT1NUR1JFU1FMKio6IEFwc2FyYURCIFJEUyBmb3IgUG9zdGdyZVNRTCBpbnN0YW5jZSBvciBzZWxmLW1hbmFnZWQgUG9zdGdyZVNRTCBkYXRhYmFzZVxuICAgICAqIC0gKipNU1NRTCoqOiBBcHNhcmFEQiBSRFMgZm9yIFNRTCBTZXJ2ZXIgaW5zdGFuY2Ugb3Igc2VsZi1tYW5hZ2VkIFNRTCBTZXJ2ZXIgZGF0YWJhc2VcbiAgICAgKiAtICoqTU9OR09EQioqOiBBcHNhcmFEQiBmb3IgTW9uZ29EQiBpbnN0YW5jZSBvciBzZWxmLW1hbmFnZWQgTW9uZ29EQiBkYXRhYmFzZVxuICAgICAqIC0gKipEQjIqKjogc2VsZi1tYW5hZ2VkIERiMiBmb3IgTFVXIGRhdGFiYXNlXG4gICAgICogLSAqKkFTNDAwKio6IHNlbGYtbWFuYWdlZCBEYjIgZm9yIGkgZGF0YWJhc2VcbiAgICAgKiAtICoqRE1TUE9MQVJEQioqOiBETVMgbG9naWNhbCBkYXRhYmFzZVxuICAgICAqIC0gKipIQkFTRSoqOiBzZWxmLW1hbmFnZWQgSEJhc2UgZGF0YWJhc2VcbiAgICAgKiAtICoqVEVSQURBVEEqKjogVGVyYWRhdGEgZGF0YWJhc2VcbiAgICAgKiAtICoqVGlEQioqOiBUaURCIGRhdGFiYXNlXG4gICAgICogLSAqKlJFRElTKio6IEFwc2FyYURCIGZvciBSZWRpcyBpbnN0YW5jZSBvciBzZWxmLW1hbmFnZWQgUmVkaXMgZGF0YWJhc2VcbiAgICAgKiAqKk5vdGUqKjogRGVmYXVsdCB2YWx1ZTogKipNWVNRTCoqLlxuICAgICAqIElmIEVuZ2luZU5hbWUgaXMgc2V0IHRvICoqTU9OR09EQioqLCB5b3UgbXVzdCBhbHNvIHNwZWNpZnkgdGhlIGFyY2hpdGVjdHVyZSB0eXBlIG9mIHRoZSAqKk1vbmdvREIqKiBkYXRhYmFzZSBpbiB0aGUgKipSZXNlcnZlKiogcGFyYW1ldGVyLlxuICAgICAgICAgKi9cbiAgICAgICAgcmVhZG9ubHkgZW5naW5lTmFtZT86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBQcm9wZXJ0eSByb2xlOiBUaGUgbmFtZSBvZiB0aGUgUmVzb3VyY2UgQWNjZXNzIE1hbmFnZW1lbnQgKFJBTSkgcm9sZSBjb25maWd1cmVkIGZvciB0aGUgQWxpYmFiYSBDbG91ZCBhY2NvdW50IHRoYXQgb3ducyB0aGUgc291cmNlIGluc3RhbmNlLlxuICAgICAqICoqTm90ZSoqOiBUaGlzIHBhcmFtZXRlciBpcyByZXF1aXJlZCB3aGVuIHlvdSBtaWdyYXRlIG9yIHN5bmNocm9uaXplIGRhdGEgYWNyb3NzIGRpZmZlcmVudCBBbGliYWJhIENsb3VkIGFjY291bnRzLlxuICAgICAgICAgKi9cbiAgICAgICAgcmVhZG9ubHkgcm9sZT86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBQcm9wZXJ0eSBvd25lcklkOiBUaGUgSUQgb2YgdGhlIEFsaWJhYmEgQ2xvdWQgYWNjb3VudCB0byB3aGljaCB0aGUgc291cmNlIGRhdGFiYXNlIGJlbG9uZ3MuXG4gICAgICogKipOb3RlKio6IFlvdSBjYW4gc3BlY2lmeSB0aGlzIHBhcmFtZXRlciB0byBtaWdyYXRlIG9yIHN5bmNocm9uaXplIGRhdGEgYWNyb3NzIGRpZmZlcmVudCBBbGliYWJhIENsb3VkIGFjY291bnRzLiBJbiB0aGlzIGNhc2UsIHlvdSBtdXN0IHNwZWNpZnkgKipSb2xlKiouXG4gICAgICAgICAqL1xuICAgICAgICByZWFkb25seSBvd25lcklkPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuICAgICAgICAvKipcbiAgICAgICAgICogQFByb3BlcnR5IHJlZ2lvbjogVGhlIElEIG9mIHRoZSByZWdpb24gaW4gd2hpY2ggdGhlIHNvdXJjZSBpbnN0YW5jZSByZXNpZGVzLlxuICAgICAqICoqTm90ZSoqOiBJZiB0aGUgc291cmNlIGluc3RhbmNlIGlzIGFuIEFsaWJhYmEgQ2xvdWQgZGF0YWJhc2UgaW5zdGFuY2UsIHRoaXMgcGFyYW1ldGVyIGlzIHJlcXVpcmVkLlxuICAgICAgICAgKi9cbiAgICAgICAgcmVhZG9ubHkgcmVnaW9uPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuICAgICAgICAvKipcbiAgICAgICAgICogQFByb3BlcnR5IGluc3RhbmNlVHlwZTogVGhlIHR5cGUgb2YgdGhlIHNvdXJjZSBpbnN0YW5jZS4gVmFsaWQgdmFsdWVzOlxuICAgICAqIEFsaWJhYmEgQ2xvdWQgZGF0YWJhc2UgaW5zdGFuY2VzOlxuICAgICAqIC0gKipSRFMqKjogQXBzYXJhREIgUkRTIGZvciBNeVNRTCBpbnN0YW5jZSwgQXBzYXJhREIgUkRTIGZvciBTUUwgU2VydmVyIGluc3RhbmNlLCBBcHNhcmFEQiBSRFMgZm9yIFBvc3RncmVTUUwgaW5zdGFuY2UsIG9yIEFwc2FyYURCIFJEUyBmb3IgTWFyaWFEQiBUWCBpbnN0YW5jZVxuICAgICAqIC0gKipQb2xhckRCKio6IFBvbGFyREIgZm9yIE15U1FMIGNsdXN0ZXJcbiAgICAgKiAtICoqUkVESVMqKjogQXBzYXJhREIgZm9yIFJlZGlzIGluc3RhbmNlXG4gICAgICogLSAqKkRJU1RSSUJVVEVEX1BPTEFSREJYMTAqKjogUG9sYXJEQi1YIDEuMCAoZm9ybWVybHkgRFJEUykgaW5zdGFuY2VcbiAgICAgKiAtICoqUE9MQVJEQlgyMCoqOiBQb2xhckRCLVggMi4wIGluc3RhbmNlXG4gICAgICogLSAqKk1PTkdPREIqKjogQXBzYXJhREIgZm9yIE1vbmdvREIgaW5zdGFuY2VcbiAgICAgKiAtICoqRElTVFJJQlVURURfRE1TTE9HSUNEQioqOiBEYXRhIE1hbmFnZW1lbnQgKERNUykgbG9naWNhbCBkYXRhYmFzZVxuICAgICAqIFNlbGYtbWFuYWdlZCBkYXRhYmFzZXM6XG4gICAgICogLSAqKk9USEVSKio6IHNlbGYtbWFuYWdlZCBkYXRhYmFzZSB3aXRoIGEgcHVibGljIElQIGFkZHJlc3NcbiAgICAgKiAtICoqRUNTKio6IHNlbGYtbWFuYWdlZCBkYXRhYmFzZSBob3N0ZWQgb24gYW4gRWxhc3RpYyBDb21wdXRlIFNlcnZpY2UgKEVDUykgaW5zdGFuY2VcbiAgICAgKiAtICoqRVhQUkVTUyoqOiBzZWxmLW1hbmFnZWQgZGF0YWJhc2UgY29ubmVjdGVkIG92ZXIgRXhwcmVzcyBDb25uZWN0XG4gICAgICogLSAqKkNFTioqOiBzZWxmLW1hbmFnZWQgZGF0YWJhc2UgY29ubmVjdGVkIG92ZXIgQ2xvdWQgRW50ZXJwcmlzZSBOZXR3b3JrIChDRU4pXG4gICAgICogLSAqKkRHKio6IHNlbGYtbWFuYWdlZCBkYXRhYmFzZSBjb25uZWN0ZWQgb3ZlciBEYXRhYmFzZSBHYXRld2F5XG4gICAgICogKipOb3RlKio6IElmIHRoZSBzb3VyY2UgaW5zdGFuY2UgaXMgYSBQb2xhckRCIGZvciBQb3N0Z3JlU1FMIGNsdXN0ZXIgKGNvbXBhdGlibGUgd2l0aCBPcmFjbGUpLCB5b3UgbXVzdCBzZXQgdGhpcyBwYXJhbWV0ZXIgdG8gKipPVEhFUioqIG9yICoqRVhQUkVTUyoqLiBUaGVuLCB5b3UgY2FuIGNvbm5lY3QgdGhlIFBvbGFyREIgZm9yIFBvc3RncmVTUUwgY2x1c3RlciB0byBEVFMgYXMgYSBzZWxmLW1hbmFnZWQgZGF0YWJhc2UgYnkgdXNpbmcgYSBwdWJsaWMgSVAgYWRkcmVzcyBvciBFeHByZXNzIENvbm5lY3QuIElmIHRoZSBzb3VyY2UgaW5zdGFuY2UgaXMgYSBzZWxmLW1hbmFnZWQgZGF0YWJhc2UsIHlvdSBtdXN0IGRlcGxveSB0aGUgbmV0d29yayBlbnZpcm9ubWVudCBmb3IgdGhlIGRhdGFiYXNlLlxuICAgICAgICAgKi9cbiAgICAgICAgcmVhZG9ubHkgaW5zdGFuY2VUeXBlOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAUHJvcGVydHkgcGFzc3dvcmQ6IFRoZSBwYXNzd29yZCBvZiB0aGUgc291cmNlIGRhdGFiYXNlIGFjY291bnQuXG4gICAgICAgICAqL1xuICAgICAgICByZWFkb25seSBwYXNzd29yZD86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcbiAgICB9XG59XG4vKipcbiAqIERldGVybWluZSB3aGV0aGVyIHRoZSBnaXZlbiBwcm9wZXJ0aWVzIG1hdGNoIHRob3NlIG9mIGEgYFNvdXJjZUVuZHBvaW50UHJvcGVydHlgXG4gKlxuICogQHBhcmFtIHByb3BlcnRpZXMgLSB0aGUgVHlwZVNjcmlwdCBwcm9wZXJ0aWVzIG9mIGEgYFNvdXJjZUVuZHBvaW50UHJvcGVydHlgXG4gKlxuICogQHJldHVybnMgdGhlIHJlc3VsdCBvZiB0aGUgdmFsaWRhdGlvbi5cbiAqL1xuZnVuY3Rpb24gUm9zU3luY2hyb25pemF0aW9uSm9iMl9Tb3VyY2VFbmRwb2ludFByb3BlcnR5VmFsaWRhdG9yKHByb3BlcnRpZXM6IGFueSk6IHJvcy5WYWxpZGF0aW9uUmVzdWx0IHtcbiAgICBpZiAoIXJvcy5jYW5JbnNwZWN0KHByb3BlcnRpZXMpKSB7IHJldHVybiByb3MuVkFMSURBVElPTl9TVUNDRVNTOyB9XG4gICAgY29uc3QgZXJyb3JzID0gbmV3IHJvcy5WYWxpZGF0aW9uUmVzdWx0cygpO1xuICAgIGVycm9ycy5jb2xsZWN0KHJvcy5wcm9wZXJ0eVZhbGlkYXRvcignb3JhY2xlU2lkJywgcm9zLnZhbGlkYXRlU3RyaW5nKShwcm9wZXJ0aWVzLm9yYWNsZVNpZCkpO1xuICAgIGVycm9ycy5jb2xsZWN0KHJvcy5wcm9wZXJ0eVZhbGlkYXRvcigndXNlck5hbWUnLCByb3MudmFsaWRhdGVTdHJpbmcpKHByb3BlcnRpZXMudXNlck5hbWUpKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ2luc3RhbmNlSWQnLCByb3MudmFsaWRhdGVTdHJpbmcpKHByb3BlcnRpZXMuaW5zdGFuY2VJZCkpO1xuICAgIGVycm9ycy5jb2xsZWN0KHJvcy5wcm9wZXJ0eVZhbGlkYXRvcignaXAnLCByb3MudmFsaWRhdGVTdHJpbmcpKHByb3BlcnRpZXMuaXApKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ3BvcnQnLCByb3MudmFsaWRhdGVTdHJpbmcpKHByb3BlcnRpZXMucG9ydCkpO1xuICAgIGVycm9ycy5jb2xsZWN0KHJvcy5wcm9wZXJ0eVZhbGlkYXRvcigndlN3aXRjaElkJywgcm9zLnZhbGlkYXRlU3RyaW5nKShwcm9wZXJ0aWVzLnZTd2l0Y2hJZCkpO1xuICAgIGVycm9ycy5jb2xsZWN0KHJvcy5wcm9wZXJ0eVZhbGlkYXRvcignZGF0YWJhc2VOYW1lJywgcm9zLnZhbGlkYXRlU3RyaW5nKShwcm9wZXJ0aWVzLmRhdGFiYXNlTmFtZSkpO1xuICAgIGVycm9ycy5jb2xsZWN0KHJvcy5wcm9wZXJ0eVZhbGlkYXRvcignZW5naW5lTmFtZScsIHJvcy52YWxpZGF0ZVN0cmluZykocHJvcGVydGllcy5lbmdpbmVOYW1lKSk7XG4gICAgZXJyb3JzLmNvbGxlY3Qocm9zLnByb3BlcnR5VmFsaWRhdG9yKCdyb2xlJywgcm9zLnZhbGlkYXRlU3RyaW5nKShwcm9wZXJ0aWVzLnJvbGUpKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ293bmVySWQnLCByb3MudmFsaWRhdGVTdHJpbmcpKHByb3BlcnRpZXMub3duZXJJZCkpO1xuICAgIGVycm9ycy5jb2xsZWN0KHJvcy5wcm9wZXJ0eVZhbGlkYXRvcigncmVnaW9uJywgcm9zLnZhbGlkYXRlU3RyaW5nKShwcm9wZXJ0aWVzLnJlZ2lvbikpO1xuICAgIGVycm9ycy5jb2xsZWN0KHJvcy5wcm9wZXJ0eVZhbGlkYXRvcignaW5zdGFuY2VUeXBlJywgcm9zLnJlcXVpcmVkVmFsaWRhdG9yKShwcm9wZXJ0aWVzLmluc3RhbmNlVHlwZSkpO1xuICAgIGVycm9ycy5jb2xsZWN0KHJvcy5wcm9wZXJ0eVZhbGlkYXRvcignaW5zdGFuY2VUeXBlJywgcm9zLnZhbGlkYXRlU3RyaW5nKShwcm9wZXJ0aWVzLmluc3RhbmNlVHlwZSkpO1xuICAgIGVycm9ycy5jb2xsZWN0KHJvcy5wcm9wZXJ0eVZhbGlkYXRvcigncGFzc3dvcmQnLCByb3MudmFsaWRhdGVTdHJpbmcpKHByb3BlcnRpZXMucGFzc3dvcmQpKTtcbiAgICByZXR1cm4gZXJyb3JzLndyYXAoJ3N1cHBsaWVkIHByb3BlcnRpZXMgbm90IGNvcnJlY3QgZm9yIFwiU291cmNlRW5kcG9pbnRQcm9wZXJ0eVwiJyk7XG59XG5cbi8qKlxuICogUmVuZGVycyB0aGUgQWxpQ2xvdWQgUk9TIFJlc291cmNlIHByb3BlcnRpZXMgb2YgYW4gYEFMSVlVTjo6RFRTOjpTeW5jaHJvbml6YXRpb25Kb2IyLlNvdXJjZUVuZHBvaW50YCByZXNvdXJjZVxuICpcbiAqIEBwYXJhbSBwcm9wZXJ0aWVzIC0gdGhlIFR5cGVTY3JpcHQgcHJvcGVydGllcyBvZiBhIGBTb3VyY2VFbmRwb2ludFByb3BlcnR5YFxuICpcbiAqIEByZXR1cm5zIHRoZSBBbGlDbG91ZCBST1MgUmVzb3VyY2UgcHJvcGVydGllcyBvZiBhbiBgQUxJWVVOOjpEVFM6OlN5bmNocm9uaXphdGlvbkpvYjIuU291cmNlRW5kcG9pbnRgIHJlc291cmNlLlxuICovXG4vLyBAdHMtaWdub3JlIFRTNjEzM1xuZnVuY3Rpb24gcm9zU3luY2hyb25pemF0aW9uSm9iMlNvdXJjZUVuZHBvaW50UHJvcGVydHlUb1Jvc1RlbXBsYXRlKHByb3BlcnRpZXM6IGFueSk6IGFueSB7XG4gICAgaWYgKCFyb3MuY2FuSW5zcGVjdChwcm9wZXJ0aWVzKSkgeyByZXR1cm4gcHJvcGVydGllczsgfVxuICAgIFJvc1N5bmNocm9uaXphdGlvbkpvYjJfU291cmNlRW5kcG9pbnRQcm9wZXJ0eVZhbGlkYXRvcihwcm9wZXJ0aWVzKS5hc3NlcnRTdWNjZXNzKCk7XG4gICAgcmV0dXJuIHtcbiAgICAgICdPcmFjbGVTSUQnOiByb3Muc3RyaW5nVG9Sb3NUZW1wbGF0ZShwcm9wZXJ0aWVzLm9yYWNsZVNpZCksXG4gICAgICAnVXNlck5hbWUnOiByb3Muc3RyaW5nVG9Sb3NUZW1wbGF0ZShwcm9wZXJ0aWVzLnVzZXJOYW1lKSxcbiAgICAgICdJbnN0YW5jZUlEJzogcm9zLnN0cmluZ1RvUm9zVGVtcGxhdGUocHJvcGVydGllcy5pbnN0YW5jZUlkKSxcbiAgICAgICdJUCc6IHJvcy5zdHJpbmdUb1Jvc1RlbXBsYXRlKHByb3BlcnRpZXMuaXApLFxuICAgICAgJ1BvcnQnOiByb3Muc3RyaW5nVG9Sb3NUZW1wbGF0ZShwcm9wZXJ0aWVzLnBvcnQpLFxuICAgICAgJ1ZTd2l0Y2hJRCc6IHJvcy5zdHJpbmdUb1Jvc1RlbXBsYXRlKHByb3BlcnRpZXMudlN3aXRjaElkKSxcbiAgICAgICdEYXRhYmFzZU5hbWUnOiByb3Muc3RyaW5nVG9Sb3NUZW1wbGF0ZShwcm9wZXJ0aWVzLmRhdGFiYXNlTmFtZSksXG4gICAgICAnRW5naW5lTmFtZSc6IHJvcy5zdHJpbmdUb1Jvc1RlbXBsYXRlKHByb3BlcnRpZXMuZW5naW5lTmFtZSksXG4gICAgICAnUm9sZSc6IHJvcy5zdHJpbmdUb1Jvc1RlbXBsYXRlKHByb3BlcnRpZXMucm9sZSksXG4gICAgICAnT3duZXJJRCc6IHJvcy5zdHJpbmdUb1Jvc1RlbXBsYXRlKHByb3BlcnRpZXMub3duZXJJZCksXG4gICAgICAnUmVnaW9uJzogcm9zLnN0cmluZ1RvUm9zVGVtcGxhdGUocHJvcGVydGllcy5yZWdpb24pLFxuICAgICAgJ0luc3RhbmNlVHlwZSc6IHJvcy5zdHJpbmdUb1Jvc1RlbXBsYXRlKHByb3BlcnRpZXMuaW5zdGFuY2VUeXBlKSxcbiAgICAgICdQYXNzd29yZCc6IHJvcy5zdHJpbmdUb1Jvc1RlbXBsYXRlKHByb3BlcnRpZXMucGFzc3dvcmQpLFxuICAgIH07XG59XG4iXX0=