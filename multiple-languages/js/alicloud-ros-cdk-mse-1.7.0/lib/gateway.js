"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Gateway = exports.GatewayProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const mse_generated_1 = require("./mse.generated");
Object.defineProperty(exports, "GatewayProperty", { enumerable: true, get: function () { return mse_generated_1.RosGateway; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::MSE::Gateway`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosGateway`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-mse-gateway
 */
class Gateway extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosGateway = new mse_generated_1.RosGateway(this, id, {
            backupVSwitchId: props.backupVSwitchId,
            enterpriseSecurityGroup: props.enterpriseSecurityGroup,
            vpcId: props.vpcId,
            vSwitchId: props.vSwitchId,
            slbSpec: props.slbSpec,
            spec: props.spec,
            internetSlbSpec: props.internetSlbSpec,
            replica: props.replica,
            name: props.name,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosGateway;
        this.attrBackupVSwitchId = rosGateway.attrBackupVSwitchId;
        this.attrGatewayUniqueId = rosGateway.attrGatewayUniqueId;
        this.attrPaymentType = rosGateway.attrPaymentType;
        this.attrReplica = rosGateway.attrReplica;
        this.attrSpec = rosGateway.attrSpec;
        this.attrVSwitchId = rosGateway.attrVSwitchId;
        this.attrVpcId = rosGateway.attrVpcId;
    }
}
exports.Gateway = Gateway;
//# sourceMappingURL=data:application/json;base64,