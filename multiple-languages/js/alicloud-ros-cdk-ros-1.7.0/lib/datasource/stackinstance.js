"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StackInstance = exports.StackInstanceProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ros_generated_1 = require("./ros.generated");
Object.defineProperty(exports, "StackInstanceProperty", { enumerable: true, get: function () { return ros_generated_1.RosStackInstance; } });
/**
 * This class encapsulates and extends the ROS resource type `DATASOURCE::ROS::StackInstance`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosStackInstance`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/datasource-ros-stackinstance
 */
class StackInstance extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosStackInstance = new ros_generated_1.RosStackInstance(this, id, {
            stackInstanceAccountId: props.stackInstanceAccountId,
            stackGroupName: props.stackGroupName,
            stackInstanceRegionId: props.stackInstanceRegionId,
            outputOption: props.outputOption,
            refreshOptions: props.refreshOptions === undefined || props.refreshOptions === null ? 'Never' : props.refreshOptions,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosStackInstance;
        this.attrAccountId = rosStackInstance.attrAccountId;
        this.attrDriftDetectionTime = rosStackInstance.attrDriftDetectionTime;
        this.attrOutputs = rosStackInstance.attrOutputs;
        this.attrParameterOverrides = rosStackInstance.attrParameterOverrides;
        this.attrRdFolderId = rosStackInstance.attrRdFolderId;
        this.attrRegionId = rosStackInstance.attrRegionId;
        this.attrStackDriftStatus = rosStackInstance.attrStackDriftStatus;
        this.attrStackGroupId = rosStackInstance.attrStackGroupId;
        this.attrStackGroupName = rosStackInstance.attrStackGroupName;
        this.attrStackId = rosStackInstance.attrStackId;
        this.attrStatus = rosStackInstance.attrStatus;
        this.attrStatusReason = rosStackInstance.attrStatusReason;
    }
}
exports.StackInstance = StackInstance;
//# sourceMappingURL=data:application/json;base64,