"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Cluster = exports.ClusterProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const acs_generated_1 = require("./acs.generated");
Object.defineProperty(exports, "ClusterProperty", { enumerable: true, get: function () { return acs_generated_1.RosCluster; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::ACS::Cluster`, which is used to create a Container Compute Service (ACS) cluster.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosCluster`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-acs-cluster
 */
class Cluster extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosCluster = new acs_generated_1.RosCluster(this, id, {
            kubernetesVersion: props.kubernetesVersion,
            endpointPublicAccess: props.endpointPublicAccess === undefined || props.endpointPublicAccess === null ? false : props.endpointPublicAccess,
            resourceGroupId: props.resourceGroupId,
            vSwitchIds: props.vSwitchIds,
            addons: props.addons,
            podVSwitchIds: props.podVSwitchIds,
            deletionProtection: props.deletionProtection,
            clusterSpec: props.clusterSpec === undefined || props.clusterSpec === null ? 'ack.pro.small' : props.clusterSpec,
            loggingType: props.loggingType,
            ipStack: props.ipStack,
            loadBalancerSpec: props.loadBalancerSpec,
            name: props.name,
            timeZone: props.timeZone,
            serviceDiscoveryTypes: props.serviceDiscoveryTypes,
            vpcId: props.vpcId,
            slsProjectName: props.slsProjectName,
            serviceCidr: props.serviceCidr === undefined || props.serviceCidr === null ? '172.19.0.0/20' : props.serviceCidr,
            snatEntry: props.snatEntry === undefined || props.snatEntry === null ? true : props.snatEntry,
            zoneIds: props.zoneIds,
            maintenanceWindow: props.maintenanceWindow,
            tags: props.tags,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosCluster;
        this.attrApiServerSlbId = rosCluster.attrApiServerSlbId;
        this.attrClusterId = rosCluster.attrClusterId;
        this.attrDefaultUserKubeConfig = rosCluster.attrDefaultUserKubeConfig;
        this.attrIngressSlbId = rosCluster.attrIngressSlbId;
        this.attrNodes = rosCluster.attrNodes;
        this.attrPrivateUserKubConfig = rosCluster.attrPrivateUserKubConfig;
        this.attrScalingConfigurationId = rosCluster.attrScalingConfigurationId;
        this.attrScalingGroupId = rosCluster.attrScalingGroupId;
        this.attrScalingRuleId = rosCluster.attrScalingRuleId;
        this.attrTaskId = rosCluster.attrTaskId;
        this.attrWorkerRamRoleName = rosCluster.attrWorkerRamRoleName;
    }
}
exports.Cluster = Cluster;
//# sourceMappingURL=data:application/json;base64,