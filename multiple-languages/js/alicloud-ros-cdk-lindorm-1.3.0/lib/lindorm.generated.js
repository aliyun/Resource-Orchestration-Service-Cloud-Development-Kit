"use strict";
// Generated from the AliCloud ROS Resource Specification
Object.defineProperty(exports, "__esModule", { value: true });
exports.RosMultiZoneInstance = exports.RosInstance = void 0;
const ros = require("@alicloud/ros-cdk-core");
/**
 * Determine whether the given properties match those of a `RosInstanceProps`
 *
 * @param properties - the TypeScript properties of a `RosInstanceProps`
 *
 * @returns the result of the validation.
 */
function RosInstancePropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('streamSpec', ros.validateString)(properties.streamSpec));
    errors.collect(ros.propertyValidator('instanceStorage', ros.validateNumber)(properties.instanceStorage));
    errors.collect(ros.propertyValidator('resourceGroupId', ros.validateString)(properties.resourceGroupId));
    errors.collect(ros.propertyValidator('zoneId', ros.validateString)(properties.zoneId));
    if (properties.instanceChargeType && (typeof properties.instanceChargeType) !== 'object') {
        errors.collect(ros.propertyValidator('instanceChargeType', ros.validateAllowedValues)({
            data: properties.instanceChargeType,
            allowedValues: ["PayAsYouGo", "PostPaid", "PayOnDemand", "Postpaid", "PostPay", "Postpay", "POSTPAY", "POST", "Subscription", "PrePaid", "Prepaid", "PrePay", "Prepay", "PREPAY", "PRE"],
        }));
    }
    errors.collect(ros.propertyValidator('instanceChargeType', ros.validateString)(properties.instanceChargeType));
    if (properties.streamNum && (typeof properties.streamNum) !== 'object') {
        errors.collect(ros.propertyValidator('streamNum', ros.validateRange)({
            data: properties.streamNum,
            min: 0,
            max: 90,
        }));
    }
    errors.collect(ros.propertyValidator('streamNum', ros.validateNumber)(properties.streamNum));
    if (properties.coldStorage && (typeof properties.coldStorage) !== 'object') {
        errors.collect(ros.propertyValidator('coldStorage', ros.validateRange)({
            data: properties.coldStorage,
            min: 800,
            max: 1000000,
        }));
    }
    errors.collect(ros.propertyValidator('coldStorage', ros.validateNumber)(properties.coldStorage));
    errors.collect(ros.propertyValidator('vSwitchId', ros.validateString)(properties.vSwitchId));
    errors.collect(ros.propertyValidator('diskCategory', ros.requiredValidator)(properties.diskCategory));
    if (properties.diskCategory && (typeof properties.diskCategory) !== 'object') {
        errors.collect(ros.propertyValidator('diskCategory', ros.validateAllowedValues)({
            data: properties.diskCategory,
            allowedValues: ["capacity_cloud_storage", "cloud_efficiency", "cloud_ssd", "local_hdd_pro", "local_ssd_pro"],
        }));
    }
    errors.collect(ros.propertyValidator('diskCategory', ros.validateString)(properties.diskCategory));
    if (properties.period && (typeof properties.period) !== 'object') {
        errors.collect(ros.propertyValidator('period', ros.validateAllowedValues)({
            data: properties.period,
            allowedValues: [1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 24, 36],
        }));
    }
    errors.collect(ros.propertyValidator('period', ros.validateNumber)(properties.period));
    errors.collect(ros.propertyValidator('instanceName', ros.requiredValidator)(properties.instanceName));
    errors.collect(ros.propertyValidator('instanceName', ros.validateString)(properties.instanceName));
    if (properties.solrNum && (typeof properties.solrNum) !== 'object') {
        errors.collect(ros.propertyValidator('solrNum', ros.validateRange)({
            data: properties.solrNum,
            min: 0,
            max: 60,
        }));
    }
    errors.collect(ros.propertyValidator('solrNum', ros.validateNumber)(properties.solrNum));
    errors.collect(ros.propertyValidator('solrSpec', ros.validateString)(properties.solrSpec));
    if (properties.filestoreNum && (typeof properties.filestoreNum) !== 'object') {
        errors.collect(ros.propertyValidator('filestoreNum', ros.validateRange)({
            data: properties.filestoreNum,
            min: 0,
            max: 60,
        }));
    }
    errors.collect(ros.propertyValidator('filestoreNum', ros.validateNumber)(properties.filestoreNum));
    errors.collect(ros.propertyValidator('vpcId', ros.requiredValidator)(properties.vpcId));
    errors.collect(ros.propertyValidator('vpcId', ros.validateString)(properties.vpcId));
    errors.collect(ros.propertyValidator('securityIpList', ros.listValidator(ros.validateString))(properties.securityIpList));
    errors.collect(ros.propertyValidator('lindormSpec', ros.validateString)(properties.lindormSpec));
    errors.collect(ros.propertyValidator('tsdbSpec', ros.validateString)(properties.tsdbSpec));
    errors.collect(ros.propertyValidator('coreSpec', ros.validateString)(properties.coreSpec));
    if (properties.lindormNum && (typeof properties.lindormNum) !== 'object') {
        errors.collect(ros.propertyValidator('lindormNum', ros.validateRange)({
            data: properties.lindormNum,
            min: 0,
            max: 400,
        }));
    }
    errors.collect(ros.propertyValidator('lindormNum', ros.validateNumber)(properties.lindormNum));
    errors.collect(ros.propertyValidator('filestoreSpec', ros.validateString)(properties.filestoreSpec));
    if (properties.tsdbNum && (typeof properties.tsdbNum) !== 'object') {
        errors.collect(ros.propertyValidator('tsdbNum', ros.validateRange)({
            data: properties.tsdbNum,
            min: 0,
            max: 32,
        }));
    }
    errors.collect(ros.propertyValidator('tsdbNum', ros.validateNumber)(properties.tsdbNum));
    if (properties.periodUnit && (typeof properties.periodUnit) !== 'object') {
        errors.collect(ros.propertyValidator('periodUnit', ros.validateAllowedValues)({
            data: properties.periodUnit,
            allowedValues: ["Month", "Year", "month", "year"],
        }));
    }
    errors.collect(ros.propertyValidator('periodUnit', ros.validateString)(properties.periodUnit));
    return errors.wrap('supplied properties not correct for "RosInstanceProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::Lindorm::Instance` resource
 *
 * @param properties - the TypeScript properties of a `RosInstanceProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::Lindorm::Instance` resource.
 */
// @ts-ignore TS6133
function rosInstancePropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosInstancePropsValidator(properties).assertSuccess();
    }
    return {
        'DiskCategory': ros.stringToRosTemplate(properties.diskCategory),
        'InstanceName': ros.stringToRosTemplate(properties.instanceName),
        'VpcId': ros.stringToRosTemplate(properties.vpcId),
        'ColdStorage': ros.numberToRosTemplate(properties.coldStorage),
        'CoreSpec': ros.stringToRosTemplate(properties.coreSpec),
        'FilestoreNum': ros.numberToRosTemplate(properties.filestoreNum),
        'FilestoreSpec': ros.stringToRosTemplate(properties.filestoreSpec),
        'InstanceChargeType': ros.stringToRosTemplate(properties.instanceChargeType),
        'InstanceStorage': ros.numberToRosTemplate(properties.instanceStorage),
        'LindormNum': ros.numberToRosTemplate(properties.lindormNum),
        'LindormSpec': ros.stringToRosTemplate(properties.lindormSpec),
        'Period': ros.numberToRosTemplate(properties.period),
        'PeriodUnit': ros.stringToRosTemplate(properties.periodUnit),
        'ResourceGroupId': ros.stringToRosTemplate(properties.resourceGroupId),
        'SecurityIpList': ros.listMapper(ros.stringToRosTemplate)(properties.securityIpList),
        'SolrNum': ros.numberToRosTemplate(properties.solrNum),
        'SolrSpec': ros.stringToRosTemplate(properties.solrSpec),
        'StreamNum': ros.numberToRosTemplate(properties.streamNum),
        'StreamSpec': ros.stringToRosTemplate(properties.streamSpec),
        'TsdbNum': ros.numberToRosTemplate(properties.tsdbNum),
        'TsdbSpec': ros.stringToRosTemplate(properties.tsdbSpec),
        'VSwitchId': ros.stringToRosTemplate(properties.vSwitchId),
        'ZoneId': ros.stringToRosTemplate(properties.zoneId),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::Lindorm::Instance`, which is used to create a Lindorm instance.
 * @Note This class does not contain additional functions, so it is recommended to use the `Instance` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-lindorm-instance
 */
class RosInstance extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosInstance.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrAuthInfos = this.getAtt('AuthInfos');
        this.attrInstanceId = this.getAtt('InstanceId');
        this.attrJdbcUrlList = this.getAtt('JdbcUrlList');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.diskCategory = props.diskCategory;
        this.instanceName = props.instanceName;
        this.vpcId = props.vpcId;
        this.coldStorage = props.coldStorage;
        this.coreSpec = props.coreSpec;
        this.filestoreNum = props.filestoreNum;
        this.filestoreSpec = props.filestoreSpec;
        this.instanceChargeType = props.instanceChargeType;
        this.instanceStorage = props.instanceStorage;
        this.lindormNum = props.lindormNum;
        this.lindormSpec = props.lindormSpec;
        this.period = props.period;
        this.periodUnit = props.periodUnit;
        this.resourceGroupId = props.resourceGroupId;
        this.securityIpList = props.securityIpList;
        this.solrNum = props.solrNum;
        this.solrSpec = props.solrSpec;
        this.streamNum = props.streamNum;
        this.streamSpec = props.streamSpec;
        this.tsdbNum = props.tsdbNum;
        this.tsdbSpec = props.tsdbSpec;
        this.vSwitchId = props.vSwitchId;
        this.zoneId = props.zoneId;
    }
    get rosProperties() {
        return {
            diskCategory: this.diskCategory,
            instanceName: this.instanceName,
            vpcId: this.vpcId,
            coldStorage: this.coldStorage,
            coreSpec: this.coreSpec,
            filestoreNum: this.filestoreNum,
            filestoreSpec: this.filestoreSpec,
            instanceChargeType: this.instanceChargeType,
            instanceStorage: this.instanceStorage,
            lindormNum: this.lindormNum,
            lindormSpec: this.lindormSpec,
            period: this.period,
            periodUnit: this.periodUnit,
            resourceGroupId: this.resourceGroupId,
            securityIpList: this.securityIpList,
            solrNum: this.solrNum,
            solrSpec: this.solrSpec,
            streamNum: this.streamNum,
            streamSpec: this.streamSpec,
            tsdbNum: this.tsdbNum,
            tsdbSpec: this.tsdbSpec,
            vSwitchId: this.vSwitchId,
            zoneId: this.zoneId,
        };
    }
    renderProperties(props) {
        return rosInstancePropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosInstance = RosInstance;
/**
 * The resource type name for this resource class.
 */
RosInstance.ROS_RESOURCE_TYPE_NAME = "ALIYUN::Lindorm::Instance";
/**
 * Determine whether the given properties match those of a `RosMultiZoneInstanceProps`
 *
 * @param properties - the TypeScript properties of a `RosMultiZoneInstanceProps`
 *
 * @returns the result of the validation.
 */
function RosMultiZoneInstancePropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('standbyZoneId', ros.validateString)(properties.standbyZoneId));
    errors.collect(ros.propertyValidator('resourceGroupId', ros.validateString)(properties.resourceGroupId));
    if (properties.instanceChargeType && (typeof properties.instanceChargeType) !== 'object') {
        errors.collect(ros.propertyValidator('instanceChargeType', ros.validateAllowedValues)({
            data: properties.instanceChargeType,
            allowedValues: ["PayAsYouGo", "PostPaid", "PayOnDemand", "Postpaid", "PostPay", "Postpay", "POSTPAY", "POST", "Subscription", "PrePaid", "Prepaid", "PrePay", "Prepay", "PREPAY", "PRE"],
        }));
    }
    errors.collect(ros.propertyValidator('instanceChargeType', ros.validateString)(properties.instanceChargeType));
    if (properties.logDiskCategory && (typeof properties.logDiskCategory) !== 'object') {
        errors.collect(ros.propertyValidator('logDiskCategory', ros.validateAllowedValues)({
            data: properties.logDiskCategory,
            allowedValues: ["cloud_efficiency", "cloud_essd"],
        }));
    }
    errors.collect(ros.propertyValidator('logDiskCategory', ros.validateString)(properties.logDiskCategory));
    errors.collect(ros.propertyValidator('standbyVSwitchId', ros.validateString)(properties.standbyVSwitchId));
    if (properties.solrNum && (typeof properties.solrNum) !== 'object') {
        errors.collect(ros.propertyValidator('solrNum', ros.validateRange)({
            data: properties.solrNum,
            min: 0,
            max: 60,
        }));
    }
    errors.collect(ros.propertyValidator('solrNum', ros.validateNumber)(properties.solrNum));
    errors.collect(ros.propertyValidator('solrSpec', ros.validateString)(properties.solrSpec));
    errors.collect(ros.propertyValidator('coreSpec', ros.validateString)(properties.coreSpec));
    errors.collect(ros.propertyValidator('filestoreSpec', ros.validateString)(properties.filestoreSpec));
    if (properties.tsdbNum && (typeof properties.tsdbNum) !== 'object') {
        errors.collect(ros.propertyValidator('tsdbNum', ros.validateRange)({
            data: properties.tsdbNum,
            min: 0,
            max: 32,
        }));
    }
    errors.collect(ros.propertyValidator('tsdbNum', ros.validateNumber)(properties.tsdbNum));
    errors.collect(ros.propertyValidator('arbiterZoneId', ros.validateString)(properties.arbiterZoneId));
    errors.collect(ros.propertyValidator('streamSpec', ros.validateString)(properties.streamSpec));
    errors.collect(ros.propertyValidator('primaryZoneId', ros.validateString)(properties.primaryZoneId));
    errors.collect(ros.propertyValidator('multiZoneCombination', ros.validateString)(properties.multiZoneCombination));
    if (properties.coreSingleStorage && (typeof properties.coreSingleStorage) !== 'object') {
        errors.collect(ros.propertyValidator('coreSingleStorage', ros.validateRange)({
            data: properties.coreSingleStorage,
            min: 400,
            max: 64000,
        }));
    }
    errors.collect(ros.propertyValidator('coreSingleStorage', ros.validateNumber)(properties.coreSingleStorage));
    if (properties.streamNum && (typeof properties.streamNum) !== 'object') {
        errors.collect(ros.propertyValidator('streamNum', ros.validateRange)({
            data: properties.streamNum,
            min: 0,
            max: 90,
        }));
    }
    errors.collect(ros.propertyValidator('streamNum', ros.validateNumber)(properties.streamNum));
    if (properties.coldStorage && (typeof properties.coldStorage) !== 'object') {
        errors.collect(ros.propertyValidator('coldStorage', ros.validateRange)({
            data: properties.coldStorage,
            min: 800,
            max: 1000000,
        }));
    }
    errors.collect(ros.propertyValidator('coldStorage', ros.validateNumber)(properties.coldStorage));
    errors.collect(ros.propertyValidator('logSpec', ros.validateString)(properties.logSpec));
    errors.collect(ros.propertyValidator('diskCategory', ros.requiredValidator)(properties.diskCategory));
    if (properties.diskCategory && (typeof properties.diskCategory) !== 'object') {
        errors.collect(ros.propertyValidator('diskCategory', ros.validateAllowedValues)({
            data: properties.diskCategory,
            allowedValues: ["capacity_cloud_storage", "cloud_efficiency", "cloud_ssd", "local_hdd_pro", "local_ssd_pro"],
        }));
    }
    errors.collect(ros.propertyValidator('diskCategory', ros.validateString)(properties.diskCategory));
    if (properties.period && (typeof properties.period) !== 'object') {
        errors.collect(ros.propertyValidator('period', ros.validateAllowedValues)({
            data: properties.period,
            allowedValues: [1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 24, 36],
        }));
    }
    errors.collect(ros.propertyValidator('period', ros.validateNumber)(properties.period));
    errors.collect(ros.propertyValidator('primaryVSwitchId', ros.validateString)(properties.primaryVSwitchId));
    errors.collect(ros.propertyValidator('arbiterVSwitchId', ros.validateString)(properties.arbiterVSwitchId));
    errors.collect(ros.propertyValidator('instanceName', ros.requiredValidator)(properties.instanceName));
    errors.collect(ros.propertyValidator('instanceName', ros.validateString)(properties.instanceName));
    errors.collect(ros.propertyValidator('vpcId', ros.requiredValidator)(properties.vpcId));
    errors.collect(ros.propertyValidator('vpcId', ros.validateString)(properties.vpcId));
    if (properties.filestoreNum && (typeof properties.filestoreNum) !== 'object') {
        errors.collect(ros.propertyValidator('filestoreNum', ros.validateRange)({
            data: properties.filestoreNum,
            min: 0,
            max: 60,
        }));
    }
    errors.collect(ros.propertyValidator('filestoreNum', ros.validateNumber)(properties.filestoreNum));
    errors.collect(ros.propertyValidator('securityIpList', ros.listValidator(ros.validateString))(properties.securityIpList));
    errors.collect(ros.propertyValidator('lindormSpec', ros.validateString)(properties.lindormSpec));
    errors.collect(ros.propertyValidator('tsdbSpec', ros.validateString)(properties.tsdbSpec));
    if (properties.logSingleStorage && (typeof properties.logSingleStorage) !== 'object') {
        errors.collect(ros.propertyValidator('logSingleStorage', ros.validateRange)({
            data: properties.logSingleStorage,
            min: 400,
            max: 64000,
        }));
    }
    errors.collect(ros.propertyValidator('logSingleStorage', ros.validateNumber)(properties.logSingleStorage));
    if (properties.lindormNum && (typeof properties.lindormNum) !== 'object') {
        errors.collect(ros.propertyValidator('lindormNum', ros.validateRange)({
            data: properties.lindormNum,
            min: 0,
            max: 400,
        }));
    }
    errors.collect(ros.propertyValidator('lindormNum', ros.validateNumber)(properties.lindormNum));
    if (properties.logNum && (typeof properties.logNum) !== 'object') {
        errors.collect(ros.propertyValidator('logNum', ros.validateRange)({
            data: properties.logNum,
            min: 4,
            max: 400,
        }));
    }
    errors.collect(ros.propertyValidator('logNum', ros.validateNumber)(properties.logNum));
    if (properties.periodUnit && (typeof properties.periodUnit) !== 'object') {
        errors.collect(ros.propertyValidator('periodUnit', ros.validateAllowedValues)({
            data: properties.periodUnit,
            allowedValues: ["Month", "Year", "month", "year"],
        }));
    }
    errors.collect(ros.propertyValidator('periodUnit', ros.validateString)(properties.periodUnit));
    return errors.wrap('supplied properties not correct for "RosMultiZoneInstanceProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::Lindorm::MultiZoneInstance` resource
 *
 * @param properties - the TypeScript properties of a `RosMultiZoneInstanceProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::Lindorm::MultiZoneInstance` resource.
 */
// @ts-ignore TS6133
function rosMultiZoneInstancePropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosMultiZoneInstancePropsValidator(properties).assertSuccess();
    }
    return {
        'DiskCategory': ros.stringToRosTemplate(properties.diskCategory),
        'InstanceName': ros.stringToRosTemplate(properties.instanceName),
        'VpcId': ros.stringToRosTemplate(properties.vpcId),
        'ArbiterVSwitchId': ros.stringToRosTemplate(properties.arbiterVSwitchId),
        'ArbiterZoneId': ros.stringToRosTemplate(properties.arbiterZoneId),
        'ColdStorage': ros.numberToRosTemplate(properties.coldStorage),
        'CoreSingleStorage': ros.numberToRosTemplate(properties.coreSingleStorage),
        'CoreSpec': ros.stringToRosTemplate(properties.coreSpec),
        'FilestoreNum': ros.numberToRosTemplate(properties.filestoreNum),
        'FilestoreSpec': ros.stringToRosTemplate(properties.filestoreSpec),
        'InstanceChargeType': ros.stringToRosTemplate(properties.instanceChargeType),
        'LindormNum': ros.numberToRosTemplate(properties.lindormNum),
        'LindormSpec': ros.stringToRosTemplate(properties.lindormSpec),
        'LogDiskCategory': ros.stringToRosTemplate(properties.logDiskCategory),
        'LogNum': ros.numberToRosTemplate(properties.logNum),
        'LogSingleStorage': ros.numberToRosTemplate(properties.logSingleStorage),
        'LogSpec': ros.stringToRosTemplate(properties.logSpec),
        'MultiZoneCombination': ros.stringToRosTemplate(properties.multiZoneCombination),
        'Period': ros.numberToRosTemplate(properties.period),
        'PeriodUnit': ros.stringToRosTemplate(properties.periodUnit),
        'PrimaryVSwitchId': ros.stringToRosTemplate(properties.primaryVSwitchId),
        'PrimaryZoneId': ros.stringToRosTemplate(properties.primaryZoneId),
        'ResourceGroupId': ros.stringToRosTemplate(properties.resourceGroupId),
        'SecurityIpList': ros.listMapper(ros.stringToRosTemplate)(properties.securityIpList),
        'SolrNum': ros.numberToRosTemplate(properties.solrNum),
        'SolrSpec': ros.stringToRosTemplate(properties.solrSpec),
        'StandbyVSwitchId': ros.stringToRosTemplate(properties.standbyVSwitchId),
        'StandbyZoneId': ros.stringToRosTemplate(properties.standbyZoneId),
        'StreamNum': ros.numberToRosTemplate(properties.streamNum),
        'StreamSpec': ros.stringToRosTemplate(properties.streamSpec),
        'TsdbNum': ros.numberToRosTemplate(properties.tsdbNum),
        'TsdbSpec': ros.stringToRosTemplate(properties.tsdbSpec),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::Lindorm::MultiZoneInstance`, which is used to create a multi-zone Lindorm instance.
 * @Note This class does not contain additional functions, so it is recommended to use the `MultiZoneInstance` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-lindorm-multizoneinstance
 */
class RosMultiZoneInstance extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosMultiZoneInstance.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrAuthInfos = this.getAtt('AuthInfos');
        this.attrInstanceId = this.getAtt('InstanceId');
        this.attrJdbcUrlList = this.getAtt('JdbcUrlList');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.diskCategory = props.diskCategory;
        this.instanceName = props.instanceName;
        this.vpcId = props.vpcId;
        this.arbiterVSwitchId = props.arbiterVSwitchId;
        this.arbiterZoneId = props.arbiterZoneId;
        this.coldStorage = props.coldStorage;
        this.coreSingleStorage = props.coreSingleStorage;
        this.coreSpec = props.coreSpec;
        this.filestoreNum = props.filestoreNum;
        this.filestoreSpec = props.filestoreSpec;
        this.instanceChargeType = props.instanceChargeType;
        this.lindormNum = props.lindormNum;
        this.lindormSpec = props.lindormSpec;
        this.logDiskCategory = props.logDiskCategory;
        this.logNum = props.logNum;
        this.logSingleStorage = props.logSingleStorage;
        this.logSpec = props.logSpec;
        this.multiZoneCombination = props.multiZoneCombination;
        this.period = props.period;
        this.periodUnit = props.periodUnit;
        this.primaryVSwitchId = props.primaryVSwitchId;
        this.primaryZoneId = props.primaryZoneId;
        this.resourceGroupId = props.resourceGroupId;
        this.securityIpList = props.securityIpList;
        this.solrNum = props.solrNum;
        this.solrSpec = props.solrSpec;
        this.standbyVSwitchId = props.standbyVSwitchId;
        this.standbyZoneId = props.standbyZoneId;
        this.streamNum = props.streamNum;
        this.streamSpec = props.streamSpec;
        this.tsdbNum = props.tsdbNum;
        this.tsdbSpec = props.tsdbSpec;
    }
    get rosProperties() {
        return {
            diskCategory: this.diskCategory,
            instanceName: this.instanceName,
            vpcId: this.vpcId,
            arbiterVSwitchId: this.arbiterVSwitchId,
            arbiterZoneId: this.arbiterZoneId,
            coldStorage: this.coldStorage,
            coreSingleStorage: this.coreSingleStorage,
            coreSpec: this.coreSpec,
            filestoreNum: this.filestoreNum,
            filestoreSpec: this.filestoreSpec,
            instanceChargeType: this.instanceChargeType,
            lindormNum: this.lindormNum,
            lindormSpec: this.lindormSpec,
            logDiskCategory: this.logDiskCategory,
            logNum: this.logNum,
            logSingleStorage: this.logSingleStorage,
            logSpec: this.logSpec,
            multiZoneCombination: this.multiZoneCombination,
            period: this.period,
            periodUnit: this.periodUnit,
            primaryVSwitchId: this.primaryVSwitchId,
            primaryZoneId: this.primaryZoneId,
            resourceGroupId: this.resourceGroupId,
            securityIpList: this.securityIpList,
            solrNum: this.solrNum,
            solrSpec: this.solrSpec,
            standbyVSwitchId: this.standbyVSwitchId,
            standbyZoneId: this.standbyZoneId,
            streamNum: this.streamNum,
            streamSpec: this.streamSpec,
            tsdbNum: this.tsdbNum,
            tsdbSpec: this.tsdbSpec,
        };
    }
    renderProperties(props) {
        return rosMultiZoneInstancePropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosMultiZoneInstance = RosMultiZoneInstance;
/**
 * The resource type name for this resource class.
 */
RosMultiZoneInstance.ROS_RESOURCE_TYPE_NAME = "ALIYUN::Lindorm::MultiZoneInstance";
//# sourceMappingURL=data:application/json;base64,