"use strict";
// Generated from the AliCloud ROS Resource Specification
Object.defineProperty(exports, "__esModule", { value: true });
exports.RosPidProject = exports.RosPidOrganization = void 0;
const ros = require("@alicloud/ros-cdk-core");
/**
 * Determine whether the given properties match those of a `RosPidOrganizationProps`
 *
 * @param properties - the TypeScript properties of a `RosPidOrganizationProps`
 *
 * @returns the result of the validation.
 */
function RosPidOrganizationPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('pidOrganizationName', ros.requiredValidator)(properties.pidOrganizationName));
    errors.collect(ros.propertyValidator('pidOrganizationName', ros.validateString)(properties.pidOrganizationName));
    errors.collect(ros.propertyValidator('parentPidOrganizationId', ros.validateString)(properties.parentPidOrganizationId));
    return errors.wrap('supplied properties not correct for "RosPidOrganizationProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::BrainIndustrial::PidOrganization` resource
 *
 * @param properties - the TypeScript properties of a `RosPidOrganizationProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::BrainIndustrial::PidOrganization` resource.
 */
// @ts-ignore TS6133
function rosPidOrganizationPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosPidOrganizationPropsValidator(properties).assertSuccess();
    }
    return {
        PidOrganizationName: ros.stringToRosTemplate(properties.pidOrganizationName),
        ParentPidOrganizationId: ros.stringToRosTemplate(properties.parentPidOrganizationId),
    };
}
/**
 * A ROS template type:  `ALIYUN::BrainIndustrial::PidOrganization`
 */
class RosPidOrganization extends ros.RosResource {
    /**
     * Create a new `ALIYUN::BrainIndustrial::PidOrganization`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosPidOrganization.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrParentPidOrganizationId = this.getAtt('ParentPidOrganizationId');
        this.attrPidOrganizationId = this.getAtt('PidOrganizationId');
        this.attrPidOrganizationLevel = this.getAtt('PidOrganizationLevel');
        this.attrPidOrganizationName = this.getAtt('PidOrganizationName');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.pidOrganizationName = props.pidOrganizationName;
        this.parentPidOrganizationId = props.parentPidOrganizationId;
    }
    get rosProperties() {
        return {
            pidOrganizationName: this.pidOrganizationName,
            parentPidOrganizationId: this.parentPidOrganizationId,
        };
    }
    renderProperties(props) {
        return rosPidOrganizationPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosPidOrganization = RosPidOrganization;
/**
 * The resource type name for this resource class.
 */
RosPidOrganization.ROS_RESOURCE_TYPE_NAME = "ALIYUN::BrainIndustrial::PidOrganization";
/**
 * Determine whether the given properties match those of a `RosPidProjectProps`
 *
 * @param properties - the TypeScript properties of a `RosPidProjectProps`
 *
 * @returns the result of the validation.
 */
function RosPidProjectPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('pidProjectDesc', ros.validateString)(properties.pidProjectDesc));
    errors.collect(ros.propertyValidator('pidProjectName', ros.requiredValidator)(properties.pidProjectName));
    errors.collect(ros.propertyValidator('pidProjectName', ros.validateString)(properties.pidProjectName));
    errors.collect(ros.propertyValidator('pidOrganizationId', ros.requiredValidator)(properties.pidOrganizationId));
    errors.collect(ros.propertyValidator('pidOrganizationId', ros.validateString)(properties.pidOrganizationId));
    return errors.wrap('supplied properties not correct for "RosPidProjectProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::BrainIndustrial::PidProject` resource
 *
 * @param properties - the TypeScript properties of a `RosPidProjectProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::BrainIndustrial::PidProject` resource.
 */
// @ts-ignore TS6133
function rosPidProjectPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosPidProjectPropsValidator(properties).assertSuccess();
    }
    return {
        PidOrganizationId: ros.stringToRosTemplate(properties.pidOrganizationId),
        PidProjectName: ros.stringToRosTemplate(properties.pidProjectName),
        PidProjectDesc: ros.stringToRosTemplate(properties.pidProjectDesc),
    };
}
/**
 * A ROS template type:  `ALIYUN::BrainIndustrial::PidProject`
 */
class RosPidProject extends ros.RosResource {
    /**
     * Create a new `ALIYUN::BrainIndustrial::PidProject`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosPidProject.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrPidOrganizationId = this.getAtt('PidOrganizationId');
        this.attrPidProjectDesc = this.getAtt('PidProjectDesc');
        this.attrPidProjectId = this.getAtt('PidProjectId');
        this.attrPidProjectName = this.getAtt('PidProjectName');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.pidOrganizationId = props.pidOrganizationId;
        this.pidProjectName = props.pidProjectName;
        this.pidProjectDesc = props.pidProjectDesc;
    }
    get rosProperties() {
        return {
            pidOrganizationId: this.pidOrganizationId,
            pidProjectName: this.pidProjectName,
            pidProjectDesc: this.pidProjectDesc,
        };
    }
    renderProperties(props) {
        return rosPidProjectPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosPidProject = RosPidProject;
/**
 * The resource type name for this resource class.
 */
RosPidProject.ROS_RESOURCE_TYPE_NAME = "ALIYUN::BrainIndustrial::PidProject";
//# sourceMappingURL=data:application/json;base64,