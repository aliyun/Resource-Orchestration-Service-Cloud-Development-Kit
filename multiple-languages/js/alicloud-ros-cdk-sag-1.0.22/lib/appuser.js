"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppUser = exports.AppUserProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const sag_generated_1 = require("./sag.generated");
Object.defineProperty(exports, "AppUserProperty", { enumerable: true, get: function () { return sag_generated_1.RosAppUser; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::SAG::AppUser`, which is used to create a client account for a Smart Access Gateway (SAG) app instance.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosAppUser`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-sag-appuser
 */
class AppUser extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosAppUser = new sag_generated_1.RosAppUser(this, id, {
            userName: props.userName,
            userMail: props.userMail,
            bandwidth: props.bandwidth,
            smartAgId: props.smartAgId,
            clientIp: props.clientIp,
            disable: props.disable,
            password: props.password,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosAppUser;
        this.attrSmartAgId = rosAppUser.attrSmartAgId;
        this.attrUserName = rosAppUser.attrUserName;
    }
}
exports.AppUser = AppUser;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwdXNlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImFwcHVzZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsOENBQThDO0FBQzlDLG1EQUE2QztBQUV0QixnR0FGZCwwQkFBVSxPQUVtQjtBQXFEdEM7Ozs7R0FJRztBQUNILE1BQWEsT0FBUSxTQUFRLEdBQUcsQ0FBQyxRQUFRO0lBWXJDOzs7O09BSUc7SUFDSCxZQUFZLEtBQW9CLEVBQUUsRUFBVSxFQUFFLEtBQW1CLEVBQUUsbUNBQTJDLElBQUk7UUFDOUcsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUVqQixNQUFNLFVBQVUsR0FBRyxJQUFJLDBCQUFVLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRztZQUN6QyxRQUFRLEVBQUUsS0FBSyxDQUFDLFFBQVE7WUFDeEIsUUFBUSxFQUFFLEtBQUssQ0FBQyxRQUFRO1lBQ3hCLFNBQVMsRUFBRSxLQUFLLENBQUMsU0FBUztZQUMxQixTQUFTLEVBQUUsS0FBSyxDQUFDLFNBQVM7WUFDMUIsUUFBUSxFQUFFLEtBQUssQ0FBQyxRQUFRO1lBQ3hCLE9BQU8sRUFBRSxLQUFLLENBQUMsT0FBTztZQUN0QixRQUFRLEVBQUUsS0FBSyxDQUFDLFFBQVE7U0FDM0IsRUFBRSxnQ0FBZ0MsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7UUFDcEYsSUFBSSxDQUFDLFFBQVEsR0FBRyxVQUFVLENBQUM7UUFDM0IsSUFBSSxDQUFDLGFBQWEsR0FBRyxVQUFVLENBQUMsYUFBYSxDQUFDO1FBQzlDLElBQUksQ0FBQyxZQUFZLEdBQUcsVUFBVSxDQUFDLFlBQVksQ0FBQztJQUNoRCxDQUFDO0NBQ0o7QUFqQ0QsMEJBaUNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcm9zIGZyb20gJ0BhbGljbG91ZC9yb3MtY2RrLWNvcmUnO1xuaW1wb3J0IHsgUm9zQXBwVXNlciB9IGZyb20gJy4vc2FnLmdlbmVyYXRlZCc7XG4vLyBHZW5lcmF0ZWQgZnJvbSB0aGUgQWxpQ2xvdWQgUk9TIFJlc291cmNlIFNwZWNpZmljYXRpb25cbmV4cG9ydCB7IFJvc0FwcFVzZXIgYXMgQXBwVXNlclByb3BlcnR5IH07XG5cbi8qKlxuICogUHJvcGVydGllcyBmb3IgZGVmaW5pbmcgYSBgQXBwVXNlcmAuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2FsaXl1bi1zYWctYXBwdXNlclxuICovXG5leHBvcnQgaW50ZXJmYWNlIEFwcFVzZXJQcm9wcyB7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBiYW5kd2lkdGg6IFRoZSBiYW5kd2lkdGguIFVuaXQ6IEtiaXRcXC9zLiBNYXhpbXVtIGJhbmR3aWR0aDogMiwwMDAgS2JpdFxcL3MuXG4gICAgICovXG4gICAgcmVhZG9ubHkgYmFuZHdpZHRoOiBudW1iZXIgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBzbWFydEFnSWQ6IFRoZSBJRCBvZiB0aGUgU0FHIEFQUCBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICByZWFkb25seSBzbWFydEFnSWQ6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHVzZXJNYWlsOiBUaGUgZW1haWwgYWRkcmVzcyBvZiB0aGUgdXNlci4gVGhlIHVzZXJuYW1lIGFuZCBwYXNzd29yZCBhcmUgc2VudCB0byB0aGUgc3BlY2lmaWVkXG4gICAgICogZW1haWwgYWRkcmVzcy5cbiAgICAgKi9cbiAgICByZWFkb25seSB1c2VyTWFpbDogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgY2xpZW50SXA6IEFmdGVyIHRoaXMgZmVhdHVyZSBpcyBlbmFibGVkLCB5b3UgbXVzdCBzcGVjaWZ5IHRoZSBJUCBhZGRyZXNzIG9mIFNBRyBBUFAuIEluIHRoaXNcbiAgICAgKiBjYXNlLCBTQUcgQVBQIGNvbm5lY3RzIHRvIEFsaWJhYmEgQ2xvdWQgdGhyb3VnaCB0aGUgc3BlY2lmaWVkIElQIGFkZHJlc3MuXG4gICAgICogTm90ZSBUaGUgSVAgYWRkcmVzcyBtdXN0IGZhbGwgaW50byB0aGUgQ0lEUiBibG9jayBvZiB0aGUgcHJpdmF0ZSBuZXR3b3JrLlxuICAgICAqIEFmdGVyIHRoaXMgZmVhdHVyZSBpcyBkaXNhYmxlZCwgYW4gSVAgYWRkcmVzcyB3aXRoaW4gdGhlIENJRFIgYmxvY2sgb2YgdGhlIHByaXZhdGVcbiAgICAgKiBuZXR3b3JrIGlzIGFzc2lnbmVkIHRvIFNBRyBBUFAuIEVhY2ggY29ubmVjdGlvbiB0byBBbGliYWJhIENsb3VkIHVzZXMgYSBkaWZmZXJlbnRcbiAgICAgKiBJUCBhZGRyZXNzLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGNsaWVudElwPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgZGlzYWJsZTogRGlzYWJsZSB1c2VyIG9yIG5vdC5cbiAgICAgKi9cbiAgICByZWFkb25seSBkaXNhYmxlPzogYm9vbGVhbiB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHBhc3N3b3JkOiBUaGUgcGFzc3dvcmQgdXNlZCB0byBsb2cgb24gdG8gU0FHIEFQUC5cbiAgICAgKiBGb3IgYSBjbGllbnQgYWNjb3VudCwgaWYgeW91IHNwZWNpZnkgdGhlIHVzZXJuYW1lLCB5b3UgbXVzdCBhbHNvIHNwZWNpZnkgdGhlIHBhc3N3b3JkLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHBhc3N3b3JkPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgdXNlck5hbWU6IFRoZSB1c2VybmFtZSBvZiB0aGUgY2xpZW50IGFjY291bnQuIFVzZXJuYW1lcyBvZiBjbGllbnQgYWNjb3VudHMgYWRkZWQgdG8gdGhlIHNhbWVcbiAgICAgKiBTQUcgQVBQIGluc3RhbmNlIG11c3QgYmUgdW5pcXVlLlxuICAgICAqIEZvciBhIGNsaWVudCBhY2NvdW50LCBpZiB5b3Ugc3BlY2lmeSB0aGUgdXNlcm5hbWUsIHlvdSBtdXN0IGFsc28gc3BlY2lmeSB0aGUgcGFzc3dvcmQuXG4gICAgICovXG4gICAgcmVhZG9ubHkgdXNlck5hbWU/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG59XG5cbi8qKlxuICogVGhpcyBjbGFzcyBlbmNhcHN1bGF0ZXMgYW5kIGV4dGVuZHMgdGhlIFJPUyByZXNvdXJjZSB0eXBlIGBBTElZVU46OlNBRzo6QXBwVXNlcmAsIHdoaWNoIGlzIHVzZWQgdG8gY3JlYXRlIGEgY2xpZW50IGFjY291bnQgZm9yIGEgU21hcnQgQWNjZXNzIEdhdGV3YXkgKFNBRykgYXBwIGluc3RhbmNlLlxuICogQE5vdGUgVGhpcyBjbGFzcyBtYXkgaGF2ZSBzb21lIG5ldyBmdW5jdGlvbnMgdG8gZmFjaWxpdGF0ZSBkZXZlbG9wbWVudCwgc28gaXQgaXMgcmVjb21tZW5kZWQgdG8gdXNlIHRoaXMgY2xhc3MgaW5zdGVhZCBvZiBgUm9zQXBwVXNlcmBmb3IgYSBtb3JlIGNvbnZlbmllbnQgZGV2ZWxvcG1lbnQgZXhwZXJpZW5jZS5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvYWxpeXVuLXNhZy1hcHB1c2VyXG4gKi9cbmV4cG9ydCBjbGFzcyBBcHBVc2VyIGV4dGVuZHMgcm9zLlJlc291cmNlIHtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBTbWFydEFHSWQ6IFRoZSBJRCBvZiB0aGUgU0FHIEFQUCBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0clNtYXJ0QWdJZDogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIFVzZXJOYW1lOiA8aGVhdC5lbmdpbmUucHJvcGVydGllcy5TY2hlbWEgb2JqZWN0IGF0IDB4N2ZkOWI5YjZlMWQwPlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyVXNlck5hbWU6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFBhcmFtIHNjb3BlIC0gc2NvcGUgaW4gd2hpY2ggdGhpcyByZXNvdXJjZSBpcyBkZWZpbmVkXG4gICAgICogUGFyYW0gaWQgICAgLSBzY29wZWQgaWQgb2YgdGhlIHJlc291cmNlXG4gICAgICogUGFyYW0gcHJvcHMgLSByZXNvdXJjZSBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IHJvcy5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBBcHBVc2VyUHJvcHMsIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OmJvb2xlYW4gPSB0cnVlKSB7XG4gICAgICAgIHN1cGVyKHNjb3BlLCBpZCk7XG5cbiAgICAgICAgY29uc3Qgcm9zQXBwVXNlciA9IG5ldyBSb3NBcHBVc2VyKHRoaXMsIGlkLCAge1xuICAgICAgICAgICAgdXNlck5hbWU6IHByb3BzLnVzZXJOYW1lLFxuICAgICAgICAgICAgdXNlck1haWw6IHByb3BzLnVzZXJNYWlsLFxuICAgICAgICAgICAgYmFuZHdpZHRoOiBwcm9wcy5iYW5kd2lkdGgsXG4gICAgICAgICAgICBzbWFydEFnSWQ6IHByb3BzLnNtYXJ0QWdJZCxcbiAgICAgICAgICAgIGNsaWVudElwOiBwcm9wcy5jbGllbnRJcCxcbiAgICAgICAgICAgIGRpc2FibGU6IHByb3BzLmRpc2FibGUsXG4gICAgICAgICAgICBwYXNzd29yZDogcHJvcHMucGFzc3dvcmQsXG4gICAgICAgIH0sIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ICYmIHRoaXMuc3RhY2suZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQpO1xuICAgICAgICB0aGlzLnJlc291cmNlID0gcm9zQXBwVXNlcjtcbiAgICAgICAgdGhpcy5hdHRyU21hcnRBZ0lkID0gcm9zQXBwVXNlci5hdHRyU21hcnRBZ0lkO1xuICAgICAgICB0aGlzLmF0dHJVc2VyTmFtZSA9IHJvc0FwcFVzZXIuYXR0clVzZXJOYW1lO1xuICAgIH1cbn1cbiJdfQ==