"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ACLRule = exports.ACLRuleProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const sag_generated_1 = require("./sag.generated");
Object.defineProperty(exports, "ACLRuleProperty", { enumerable: true, get: function () { return sag_generated_1.RosACLRule; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::SAG::ACLRule`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosACLRule`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-sag-aclrule
 */
class ACLRule extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosACLRule = new sag_generated_1.RosACLRule(this, id, {
            policy: props.policy,
            description: props.description,
            sourcePortRange: props.sourcePortRange,
            sourceCidr: props.sourceCidr,
            priority: props.priority === undefined || props.priority === null ? 1 : props.priority,
            aclId: props.aclId,
            destPortRange: props.destPortRange,
            direction: props.direction,
            dpiGroupIds: props.dpiGroupIds,
            name: props.name,
            type: props.type,
            destCidr: props.destCidr,
            dpiSignatureIds: props.dpiSignatureIds,
            ipProtocol: props.ipProtocol,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosACLRule;
        this.attrAcrId = rosACLRule.attrAcrId;
    }
}
exports.ACLRule = ACLRule;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNscnVsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImFjbHJ1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsOENBQThDO0FBQzlDLG1EQUE2QztBQUV0QixnR0FGZCwwQkFBVSxPQUVtQjtBQXlGdEM7Ozs7R0FJRztBQUNILE1BQWEsT0FBUSxTQUFRLEdBQUcsQ0FBQyxRQUFRO0lBT3JDOzs7O09BSUc7SUFDSCxZQUFZLEtBQW9CLEVBQUUsRUFBVSxFQUFFLEtBQW1CLEVBQUUsbUNBQTJDLElBQUk7UUFDOUcsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUVqQixNQUFNLFVBQVUsR0FBRyxJQUFJLDBCQUFVLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRztZQUN6QyxNQUFNLEVBQUUsS0FBSyxDQUFDLE1BQU07WUFDcEIsV0FBVyxFQUFFLEtBQUssQ0FBQyxXQUFXO1lBQzlCLGVBQWUsRUFBRSxLQUFLLENBQUMsZUFBZTtZQUN0QyxVQUFVLEVBQUUsS0FBSyxDQUFDLFVBQVU7WUFDNUIsUUFBUSxFQUFFLEtBQUssQ0FBQyxRQUFRLEtBQUssU0FBUyxJQUFJLEtBQUssQ0FBQyxRQUFRLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxRQUFRO1lBQ3RGLEtBQUssRUFBRSxLQUFLLENBQUMsS0FBSztZQUNsQixhQUFhLEVBQUUsS0FBSyxDQUFDLGFBQWE7WUFDbEMsU0FBUyxFQUFFLEtBQUssQ0FBQyxTQUFTO1lBQzFCLFdBQVcsRUFBRSxLQUFLLENBQUMsV0FBVztZQUM5QixJQUFJLEVBQUUsS0FBSyxDQUFDLElBQUk7WUFDaEIsSUFBSSxFQUFFLEtBQUssQ0FBQyxJQUFJO1lBQ2hCLFFBQVEsRUFBRSxLQUFLLENBQUMsUUFBUTtZQUN4QixlQUFlLEVBQUUsS0FBSyxDQUFDLGVBQWU7WUFDdEMsVUFBVSxFQUFFLEtBQUssQ0FBQyxVQUFVO1NBQy9CLEVBQUUsZ0NBQWdDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO1FBQ3BGLElBQUksQ0FBQyxRQUFRLEdBQUcsVUFBVSxDQUFDO1FBQzNCLElBQUksQ0FBQyxTQUFTLEdBQUcsVUFBVSxDQUFDLFNBQVMsQ0FBQztJQUMxQyxDQUFDO0NBQ0o7QUFsQ0QsMEJBa0NDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcm9zIGZyb20gJ0BhbGljbG91ZC9yb3MtY2RrLWNvcmUnO1xuaW1wb3J0IHsgUm9zQUNMUnVsZSB9IGZyb20gJy4vc2FnLmdlbmVyYXRlZCc7XG4vLyBHZW5lcmF0ZWQgZnJvbSB0aGUgQWxpQ2xvdWQgUk9TIFJlc291cmNlIFNwZWNpZmljYXRpb25cbmV4cG9ydCB7IFJvc0FDTFJ1bGUgYXMgQUNMUnVsZVByb3BlcnR5IH07XG5cbi8qKlxuICogUHJvcGVydGllcyBmb3IgZGVmaW5pbmcgYSBgQUNMUnVsZWAuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2FsaXl1bi1zYWctYWNscnVsZVxuICovXG5leHBvcnQgaW50ZXJmYWNlIEFDTFJ1bGVQcm9wcyB7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBhY2xJZDogQWNjZXNzIGNvbnRyb2wgSUQuXG4gICAgICovXG4gICAgcmVhZG9ubHkgYWNsSWQ6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGRlc3RDaWRyOiBEZXN0aW5hdGlvbiBhZGRyZXNzLCBDSURSIGZvcm1hdCBhbmQgSVAgYWRkcmVzcyByYW5nZSBpbiBJUHY0IGZvcm1hdC5cbiAgICAgKi9cbiAgICByZWFkb25seSBkZXN0Q2lkcjogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgZGVzdFBvcnRSYW5nZTogRGVzdGluYXRpb24gcG9ydCByYW5nZSwgODBcXC84MC5cbiAgICAgKi9cbiAgICByZWFkb25seSBkZXN0UG9ydFJhbmdlOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBkaXJlY3Rpb246IFJlZ3VsYXIgZGlyZWN0aW9uLlxuICAgICAqIFZhbHVlOiBpbnxvdXRcbiAgICAgKi9cbiAgICByZWFkb25seSBkaXJlY3Rpb246IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGlwUHJvdG9jb2w6IFByb3RvY29sLCBub3QgY2FzZSBzZW5zaXRpdmUuXG4gICAgICovXG4gICAgcmVhZG9ubHkgaXBQcm90b2NvbDogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgcG9saWN5OiBBY2Nlc3M6IGFjY2VwdHxkcm9wXG4gICAgICovXG4gICAgcmVhZG9ubHkgcG9saWN5OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBzb3VyY2VDaWRyOiBTb3VyY2UgYWRkcmVzcywgQ0lEUiBmb3JtYXQgYW5kIElQIGFkZHJlc3MgcmFuZ2UgaW4gSVB2NCBmb3JtYXQuXG4gICAgICovXG4gICAgcmVhZG9ubHkgc291cmNlQ2lkcjogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgc291cmNlUG9ydFJhbmdlOiBTb3VyY2UgcG9ydCByYW5nZSwgODBcXC84MC5cbiAgICAgKi9cbiAgICByZWFkb25seSBzb3VyY2VQb3J0UmFuZ2U6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGRlc2NyaXB0aW9uOiBSdWxlIGRlc2NyaXB0aW9uIGluZm9ybWF0aW9uLCByYW5naW5nIGZyb20gMSB0byA1MTIgY2hhcmFjdGVycy5cbiAgICAgKi9cbiAgICByZWFkb25seSBkZXNjcmlwdGlvbj86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGRwaUdyb3VwSWRzOiBUaGUgSUQgb2YgdGhlIGFwcGxpY2F0aW9uIGdyb3VwLlxuICAgICAqIFlvdSBjYW4gZW50ZXIgYXQgbW9zdCAxMDAgYXBwbGljYXRpb24gZ3JvdXAgSURzIGF0IGEgdGltZS5cbiAgICAgKiBZb3UgY2FuIGNhbGwgdGhlIExpc3REcGlHcm91cHMgb3BlcmF0aW9uIHRvIHF1ZXJ5IGFwcGxpY2F0aW9uIGdyb3VwIElEcyBhbmQgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGFwcGxpY2F0aW9ucy5cbiAgICAgKi9cbiAgICByZWFkb25seSBkcGlHcm91cElkcz86IEFycmF5PHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZT4gfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBkcGlTaWduYXR1cmVJZHM6IFRoZSBJRCBvZiB0aGUgYXBwbGljYXRpb24uXG4gICAgICogWW91IGNhbiBlbnRlciBhdCBtb3N0IDEwMCBhcHBsaWNhdGlvbiBJRHMgYXQgYSB0aW1lLlxuICAgICAqIFlvdSBjYW4gY2FsbCB0aGUgTGlzdERwaVNpZ25hdHVyZXMgb3BlcmF0aW9uIHRvIHF1ZXJ5IGFwcGxpY2F0aW9uIElEcyBhbmQgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGFwcGxpY2F0aW9ucy5cbiAgICAgKi9cbiAgICByZWFkb25seSBkcGlTaWduYXR1cmVJZHM/OiBBcnJheTxzdHJpbmcgfCByb3MuSVJlc29sdmFibGU+IHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgbmFtZTogVGhlIG5hbWUgb2YgdGhlIEFDTCBydWxlLlxuICAgICAqIFRoZSBuYW1lIG11c3QgYmUgMiB0byAxMDAgY2hhcmFjdGVycyBpbiBsZW5ndGgsIGFuZCBjYW4gY29udGFpbiBkaWdpdHMsIHVuZGVyc2NvcmVzXG4gICAgICogKF8pLCBhbmQgaHlwaGVucyAoLSkuIEl0IG11c3Qgc3RhcnQgd2l0aCBhIGxldHRlci5cbiAgICAgKi9cbiAgICByZWFkb25seSBuYW1lPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgcHJpb3JpdHk6IFByaW9yaXR5LCByYW5naW5nIGZyb20gMSB0byAxMDAuXG4gICAgICogRGVmYXVsdDogMVxuICAgICAqL1xuICAgIHJlYWRvbmx5IHByaW9yaXR5PzogbnVtYmVyIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgdHlwZTogVGhlIHR5cGUgb2YgdGhlIEFDTCBydWxlOiBWYWxpZCB2YWx1ZXM6XG4gICAgICogTEFOOiBUaGUgQUNMIHJ1bGUgY29udHJvbHMgdHJhZmZpYyBvZiBwcml2YXRlIElQIGFkZHJlc3Nlcy4gVGhpcyBpcyB0aGUgZGVmYXVsdCB2YWx1ZS5cbiAgICAgKiBXQU46IFRoZSBBQ0wgcnVsZSBjb250cm9scyB0cmFmZmljIG9mIHB1YmxpYyBJUCBhZGRyZXNzZXMuXG4gICAgICovXG4gICAgcmVhZG9ubHkgdHlwZT86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcbn1cblxuLyoqXG4gKiBUaGlzIGNsYXNzIGVuY2Fwc3VsYXRlcyBhbmQgZXh0ZW5kcyB0aGUgUk9TIHJlc291cmNlIHR5cGUgYEFMSVlVTjo6U0FHOjpBQ0xSdWxlYC5cbiAqIEBOb3RlIFRoaXMgY2xhc3MgbWF5IGhhdmUgc29tZSBuZXcgZnVuY3Rpb25zIHRvIGZhY2lsaXRhdGUgZGV2ZWxvcG1lbnQsIHNvIGl0IGlzIHJlY29tbWVuZGVkIHRvIHVzZSB0aGlzIGNsYXNzIGluc3RlYWQgb2YgYFJvc0FDTFJ1bGVgZm9yIGEgbW9yZSBjb252ZW5pZW50IGRldmVsb3BtZW50IGV4cGVyaWVuY2UuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2FsaXl1bi1zYWctYWNscnVsZVxuICovXG5leHBvcnQgY2xhc3MgQUNMUnVsZSBleHRlbmRzIHJvcy5SZXNvdXJjZSB7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgQWNySWQ6IEFjY2VzcyBjb250cm9sIHJ1bGUgSUQuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJBY3JJZDogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUGFyYW0gc2NvcGUgLSBzY29wZSBpbiB3aGljaCB0aGlzIHJlc291cmNlIGlzIGRlZmluZWRcbiAgICAgKiBQYXJhbSBpZCAgICAtIHNjb3BlZCBpZCBvZiB0aGUgcmVzb3VyY2VcbiAgICAgKiBQYXJhbSBwcm9wcyAtIHJlc291cmNlIHByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihzY29wZTogcm9zLkNvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IEFDTFJ1bGVQcm9wcywgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6Ym9vbGVhbiA9IHRydWUpIHtcbiAgICAgICAgc3VwZXIoc2NvcGUsIGlkKTtcblxuICAgICAgICBjb25zdCByb3NBQ0xSdWxlID0gbmV3IFJvc0FDTFJ1bGUodGhpcywgaWQsICB7XG4gICAgICAgICAgICBwb2xpY3k6IHByb3BzLnBvbGljeSxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBwcm9wcy5kZXNjcmlwdGlvbixcbiAgICAgICAgICAgIHNvdXJjZVBvcnRSYW5nZTogcHJvcHMuc291cmNlUG9ydFJhbmdlLFxuICAgICAgICAgICAgc291cmNlQ2lkcjogcHJvcHMuc291cmNlQ2lkcixcbiAgICAgICAgICAgIHByaW9yaXR5OiBwcm9wcy5wcmlvcml0eSA9PT0gdW5kZWZpbmVkIHx8IHByb3BzLnByaW9yaXR5ID09PSBudWxsID8gMSA6IHByb3BzLnByaW9yaXR5LFxuICAgICAgICAgICAgYWNsSWQ6IHByb3BzLmFjbElkLFxuICAgICAgICAgICAgZGVzdFBvcnRSYW5nZTogcHJvcHMuZGVzdFBvcnRSYW5nZSxcbiAgICAgICAgICAgIGRpcmVjdGlvbjogcHJvcHMuZGlyZWN0aW9uLFxuICAgICAgICAgICAgZHBpR3JvdXBJZHM6IHByb3BzLmRwaUdyb3VwSWRzLFxuICAgICAgICAgICAgbmFtZTogcHJvcHMubmFtZSxcbiAgICAgICAgICAgIHR5cGU6IHByb3BzLnR5cGUsXG4gICAgICAgICAgICBkZXN0Q2lkcjogcHJvcHMuZGVzdENpZHIsXG4gICAgICAgICAgICBkcGlTaWduYXR1cmVJZHM6IHByb3BzLmRwaVNpZ25hdHVyZUlkcyxcbiAgICAgICAgICAgIGlwUHJvdG9jb2w6IHByb3BzLmlwUHJvdG9jb2wsXG4gICAgICAgIH0sIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ICYmIHRoaXMuc3RhY2suZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQpO1xuICAgICAgICB0aGlzLnJlc291cmNlID0gcm9zQUNMUnVsZTtcbiAgICAgICAgdGhpcy5hdHRyQWNySWQgPSByb3NBQ0xSdWxlLmF0dHJBY3JJZDtcbiAgICB9XG59XG4iXX0=