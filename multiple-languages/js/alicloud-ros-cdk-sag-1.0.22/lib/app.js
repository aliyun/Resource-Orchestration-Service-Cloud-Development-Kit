"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.App = exports.AppProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const sag_generated_1 = require("./sag.generated");
Object.defineProperty(exports, "AppProperty", { enumerable: true, get: function () { return sag_generated_1.RosApp; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::SAG::App`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosApp`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-sag-app
 */
class App extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosApp = new sag_generated_1.RosApp(this, id, {
            chargeType: props.chargeType === undefined || props.chargeType === null ? 'PREPAY' : props.chargeType,
            userCount: props.userCount,
            dataPlan: props.dataPlan,
            period: props.period,
            autoPay: props.autoPay,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosApp;
        this.attrOrderId = rosApp.attrOrderId;
        this.attrSmartAgId = rosApp.attrSmartAgId;
    }
}
exports.App = App;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYXBwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDhDQUE4QztBQUM5QyxtREFBeUM7QUFFdEIsNEZBRlYsc0JBQU0sT0FFZTtBQTRDOUI7Ozs7R0FJRztBQUNILE1BQWEsR0FBSSxTQUFRLEdBQUcsQ0FBQyxRQUFRO0lBWWpDOzs7O09BSUc7SUFDSCxZQUFZLEtBQW9CLEVBQUUsRUFBVSxFQUFFLEtBQWUsRUFBRSxtQ0FBMkMsSUFBSTtRQUMxRyxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRWpCLE1BQU0sTUFBTSxHQUFHLElBQUksc0JBQU0sQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFHO1lBQ2pDLFVBQVUsRUFBRSxLQUFLLENBQUMsVUFBVSxLQUFLLFNBQVMsSUFBSSxLQUFLLENBQUMsVUFBVSxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsVUFBVTtZQUNyRyxTQUFTLEVBQUUsS0FBSyxDQUFDLFNBQVM7WUFDMUIsUUFBUSxFQUFFLEtBQUssQ0FBQyxRQUFRO1lBQ3hCLE1BQU0sRUFBRSxLQUFLLENBQUMsTUFBTTtZQUNwQixPQUFPLEVBQUUsS0FBSyxDQUFDLE9BQU87U0FDekIsRUFBRSxnQ0FBZ0MsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7UUFDcEYsSUFBSSxDQUFDLFFBQVEsR0FBRyxNQUFNLENBQUM7UUFDdkIsSUFBSSxDQUFDLFdBQVcsR0FBRyxNQUFNLENBQUMsV0FBVyxDQUFDO1FBQ3RDLElBQUksQ0FBQyxhQUFhLEdBQUcsTUFBTSxDQUFDLGFBQWEsQ0FBQztJQUM5QyxDQUFDO0NBQ0o7QUEvQkQsa0JBK0JDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcm9zIGZyb20gJ0BhbGljbG91ZC9yb3MtY2RrLWNvcmUnO1xuaW1wb3J0IHsgUm9zQXBwIH0gZnJvbSAnLi9zYWcuZ2VuZXJhdGVkJztcbi8vIEdlbmVyYXRlZCBmcm9tIHRoZSBBbGlDbG91ZCBST1MgUmVzb3VyY2UgU3BlY2lmaWNhdGlvblxuZXhwb3J0IHsgUm9zQXBwIGFzIEFwcFByb3BlcnR5IH07XG5cbi8qKlxuICogUHJvcGVydGllcyBmb3IgZGVmaW5pbmcgYSBgQXBwYC5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvYWxpeXVuLXNhZy1hcHBcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBBcHBQcm9wcyB7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBhdXRvUGF5OiBTcGVjaWZpZXMgd2hldGhlciB0byBhdXRvbWF0aWNhbGx5IHBheSB0aGUgYmlsbHMgb2YgU0FHIEFQUCBpbnN0YW5jZXMuIERlZmF1bHQgdmFsdWU6XG4gICAgICogZmFsc2UuIFZhbGlkIHZhbHVlczpcbiAgICAgKiB0cnVlOiBhdXRvbWF0aWNhbGx5IHBheXMgdGhlIGJpbGxzIG9mIFNBRyBBUFAgaW5zdGFuY2VzLlxuICAgICAqIGZhbHNlOiBkb2VzIG5vdCBhdXRvbWF0aWNhbGx5IHBheSB0aGUgYmlsbHMgb2YgU0FHIEFQUCBpbnN0YW5jZXMuXG4gICAgICogSWYgeW91IHNldCB0aGUgcGFyYW1ldGVyIHRvIGZhbHNlLCBhZnRlciB5b3UgY2FsbCB0aGlzIG9wZXJhdGlvbiwgZ28gdG8gQmlsbGluZyBNYW5hZ2VtZW50XG4gICAgICogb2YgdGhlIFNBRyBjb25zb2xlIHRvIGNvbXBsZXRlIHRoZSBwYXltZW50LCB0aGUgaW5zdGFuY2UgY2FuIGJlIGNyZWF0ZWQuXG4gICAgICovXG4gICAgcmVhZG9ubHkgYXV0b1BheTogYm9vbGVhbiB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGRhdGFQbGFuOiBUaGUgcXVvdGEgb2YgdGhlIHRyYWZmaWMgcGxhbiB0aGF0IHRoZSBzeXN0ZW0gYWxsb3dzIGVhY2ggY2xpZW50IGFjY291bnQgdG8gdXNlIGZvclxuICAgICAqIGZyZWUgZWFjaCBtb250aC4gVW5pdDogR0IuIFNldCB0aGUgdmFsdWUgdG8gNS5cbiAgICAgKiBOb3RlIFRoZSBzeXN0ZW0gYWxsb3dzIGVhY2ggY2xpZW50IGFjY291bnQgdG8gdXNlIDUgR0IgdHJhZmZpYyBwbGFuIGZvciBmcmVlLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGRhdGFQbGFuOiBudW1iZXIgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBwZXJpb2Q6IFRoZSBzdWJzY3JpcHRpb24gcGVyaW9kIG9mIHRoZSBTQUcgQVBQIGluc3RhbmNlLiBVbml0OiBtb250aHMuXG4gICAgICogVmFsaWQgdmFsdWVzOiAxfjksIDEyLCAyNCwgYW5kIDM2LlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHBlcmlvZDogbnVtYmVyIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgdXNlckNvdW50OiBUaGUgcXVvdGEgb2YgY2xpZW50IGFjY291bnRzIGZvciB0aGUgU0FHIEFQUCBpbnN0YW5jZS5cbiAgICAgKiBOb3RlIFRoZSBxdW90YSBtdXN0IGJlIGEgcG9zaXRpdmUgbXVsdGlwbGUgb2YgNSwgZm9yIGV4YW1wbGUsIDUsIDEwLCBhbmQgMTUuXG4gICAgICovXG4gICAgcmVhZG9ubHkgdXNlckNvdW50OiBudW1iZXIgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBjaGFyZ2VUeXBlOiBUaGUgYmlsbGluZyBtZXRob2Qgb2YgdGhlIFNBRyBBUFAgaW5zdGFuY2UuIFNldCB0aGUgdmFsdWUgdG8gUFJFUEFZLlxuICAgICAqIFRoaXMgdmFsdWUgaW5kaWNhdGVzIHRoYXQgdGhlIFNBRyBBUFAgaW5zdGFuY2UgaXMgYSBzdWJzY3JpcHRpb24gcmVzb3VyY2UuXG4gICAgICovXG4gICAgcmVhZG9ubHkgY2hhcmdlVHlwZT86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcbn1cblxuLyoqXG4gKiBUaGlzIGNsYXNzIGVuY2Fwc3VsYXRlcyBhbmQgZXh0ZW5kcyB0aGUgUk9TIHJlc291cmNlIHR5cGUgYEFMSVlVTjo6U0FHOjpBcHBgLlxuICogQE5vdGUgVGhpcyBjbGFzcyBtYXkgaGF2ZSBzb21lIG5ldyBmdW5jdGlvbnMgdG8gZmFjaWxpdGF0ZSBkZXZlbG9wbWVudCwgc28gaXQgaXMgcmVjb21tZW5kZWQgdG8gdXNlIHRoaXMgY2xhc3MgaW5zdGVhZCBvZiBgUm9zQXBwYGZvciBhIG1vcmUgY29udmVuaWVudCBkZXZlbG9wbWVudCBleHBlcmllbmNlLlxuICogU2VlIGh0dHBzOi8vd3d3LmFsaWJhYmFjbG91ZC5jb20vaGVscC9yb3MvZGV2ZWxvcGVyLXJlZmVyZW5jZS9hbGl5dW4tc2FnLWFwcFxuICovXG5leHBvcnQgY2xhc3MgQXBwIGV4dGVuZHMgcm9zLlJlc291cmNlIHtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBPcmRlcklkOiBUaGUgSUQgb2YgdGhlIG9yZGVyIHRoYXQgeW91IHBsYWNlZCB0byBzdWJzY3JpYmUgdG8gdGhlIFNBRyBBUFAgaW5zdGFuY2UuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJPcmRlcklkOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgU21hcnRBR0lkOiBUaGUgSUQgb2YgdGhlIFNBRyBBUFAgaW5zdGFuY2UuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJTbWFydEFnSWQ6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFBhcmFtIHNjb3BlIC0gc2NvcGUgaW4gd2hpY2ggdGhpcyByZXNvdXJjZSBpcyBkZWZpbmVkXG4gICAgICogUGFyYW0gaWQgICAgLSBzY29wZWQgaWQgb2YgdGhlIHJlc291cmNlXG4gICAgICogUGFyYW0gcHJvcHMgLSByZXNvdXJjZSBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IHJvcy5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBBcHBQcm9wcywgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6Ym9vbGVhbiA9IHRydWUpIHtcbiAgICAgICAgc3VwZXIoc2NvcGUsIGlkKTtcblxuICAgICAgICBjb25zdCByb3NBcHAgPSBuZXcgUm9zQXBwKHRoaXMsIGlkLCAge1xuICAgICAgICAgICAgY2hhcmdlVHlwZTogcHJvcHMuY2hhcmdlVHlwZSA9PT0gdW5kZWZpbmVkIHx8IHByb3BzLmNoYXJnZVR5cGUgPT09IG51bGwgPyAnUFJFUEFZJyA6IHByb3BzLmNoYXJnZVR5cGUsXG4gICAgICAgICAgICB1c2VyQ291bnQ6IHByb3BzLnVzZXJDb3VudCxcbiAgICAgICAgICAgIGRhdGFQbGFuOiBwcm9wcy5kYXRhUGxhbixcbiAgICAgICAgICAgIHBlcmlvZDogcHJvcHMucGVyaW9kLFxuICAgICAgICAgICAgYXV0b1BheTogcHJvcHMuYXV0b1BheSxcbiAgICAgICAgfSwgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgJiYgdGhpcy5zdGFjay5lbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCk7XG4gICAgICAgIHRoaXMucmVzb3VyY2UgPSByb3NBcHA7XG4gICAgICAgIHRoaXMuYXR0ck9yZGVySWQgPSByb3NBcHAuYXR0ck9yZGVySWQ7XG4gICAgICAgIHRoaXMuYXR0clNtYXJ0QWdJZCA9IHJvc0FwcC5hdHRyU21hcnRBZ0lkO1xuICAgIH1cbn1cbiJdfQ==