"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SmartAccessGateway = exports.SmartAccessGatewayProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const sag_generated_1 = require("./sag.generated");
Object.defineProperty(exports, "SmartAccessGatewayProperty", { enumerable: true, get: function () { return sag_generated_1.RosSmartAccessGateway; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::SAG::SmartAccessGateway`, which is used to create a Smart Access Gateway (SAG) instance.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosSmartAccessGateway`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-sag-smartaccessgateway
 */
class SmartAccessGateway extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosSmartAccessGateway = new sag_generated_1.RosSmartAccessGateway(this, id, {
            receiverCountry: props.receiverCountry,
            description: props.description,
            receiverZip: props.receiverZip,
            buyerMessage: props.buyerMessage,
            cidrBlock: props.cidrBlock,
            receiverTown: props.receiverTown,
            hardWareSpec: props.hardWareSpec,
            name: props.name,
            receiverPhone: props.receiverPhone,
            receiverCity: props.receiverCity,
            routingStrategy: props.routingStrategy,
            securityLockThreshold: props.securityLockThreshold,
            receiverAddress: props.receiverAddress,
            alreadyHaveSag: props.alreadyHaveSag,
            haType: props.haType,
            period: props.period,
            maxBandWidth: props.maxBandWidth,
            autoPay: props.autoPay,
            receiverMobile: props.receiverMobile,
            receiverDistrict: props.receiverDistrict,
            activate: props.activate,
            chargeType: props.chargeType,
            receiverState: props.receiverState,
            receiverName: props.receiverName,
            receiverEmail: props.receiverEmail,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosSmartAccessGateway;
        this.attrOrderId = rosSmartAccessGateway.attrOrderId;
        this.attrSmartAgId = rosSmartAccessGateway.attrSmartAgId;
    }
}
exports.SmartAccessGateway = SmartAccessGateway;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic21hcnRhY2Nlc3NnYXRld2F5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic21hcnRhY2Nlc3NnYXRld2F5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDhDQUE4QztBQUM5QyxtREFBd0Q7QUFFdEIsMkdBRnpCLHFDQUFxQixPQUU4QjtBQTBLNUQ7Ozs7R0FJRztBQUNILE1BQWEsa0JBQW1CLFNBQVEsR0FBRyxDQUFDLFFBQVE7SUFZaEQ7Ozs7T0FJRztJQUNILFlBQVksS0FBb0IsRUFBRSxFQUFVLEVBQUUsS0FBOEIsRUFBRSxtQ0FBMkMsSUFBSTtRQUN6SCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRWpCLE1BQU0scUJBQXFCLEdBQUcsSUFBSSxxQ0FBcUIsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFHO1lBQy9ELGVBQWUsRUFBRSxLQUFLLENBQUMsZUFBZTtZQUN0QyxXQUFXLEVBQUUsS0FBSyxDQUFDLFdBQVc7WUFDOUIsV0FBVyxFQUFFLEtBQUssQ0FBQyxXQUFXO1lBQzlCLFlBQVksRUFBRSxLQUFLLENBQUMsWUFBWTtZQUNoQyxTQUFTLEVBQUUsS0FBSyxDQUFDLFNBQVM7WUFDMUIsWUFBWSxFQUFFLEtBQUssQ0FBQyxZQUFZO1lBQ2hDLFlBQVksRUFBRSxLQUFLLENBQUMsWUFBWTtZQUNoQyxJQUFJLEVBQUUsS0FBSyxDQUFDLElBQUk7WUFDaEIsYUFBYSxFQUFFLEtBQUssQ0FBQyxhQUFhO1lBQ2xDLFlBQVksRUFBRSxLQUFLLENBQUMsWUFBWTtZQUNoQyxlQUFlLEVBQUUsS0FBSyxDQUFDLGVBQWU7WUFDdEMscUJBQXFCLEVBQUUsS0FBSyxDQUFDLHFCQUFxQjtZQUNsRCxlQUFlLEVBQUUsS0FBSyxDQUFDLGVBQWU7WUFDdEMsY0FBYyxFQUFFLEtBQUssQ0FBQyxjQUFjO1lBQ3BDLE1BQU0sRUFBRSxLQUFLLENBQUMsTUFBTTtZQUNwQixNQUFNLEVBQUUsS0FBSyxDQUFDLE1BQU07WUFDcEIsWUFBWSxFQUFFLEtBQUssQ0FBQyxZQUFZO1lBQ2hDLE9BQU8sRUFBRSxLQUFLLENBQUMsT0FBTztZQUN0QixjQUFjLEVBQUUsS0FBSyxDQUFDLGNBQWM7WUFDcEMsZ0JBQWdCLEVBQUUsS0FBSyxDQUFDLGdCQUFnQjtZQUN4QyxRQUFRLEVBQUUsS0FBSyxDQUFDLFFBQVE7WUFDeEIsVUFBVSxFQUFFLEtBQUssQ0FBQyxVQUFVO1lBQzVCLGFBQWEsRUFBRSxLQUFLLENBQUMsYUFBYTtZQUNsQyxZQUFZLEVBQUUsS0FBSyxDQUFDLFlBQVk7WUFDaEMsYUFBYSxFQUFFLEtBQUssQ0FBQyxhQUFhO1NBQ3JDLEVBQUUsZ0NBQWdDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO1FBQ3BGLElBQUksQ0FBQyxRQUFRLEdBQUcscUJBQXFCLENBQUM7UUFDdEMsSUFBSSxDQUFDLFdBQVcsR0FBRyxxQkFBcUIsQ0FBQyxXQUFXLENBQUM7UUFDckQsSUFBSSxDQUFDLGFBQWEsR0FBRyxxQkFBcUIsQ0FBQyxhQUFhLENBQUM7SUFDN0QsQ0FBQztDQUNKO0FBbkRELGdEQW1EQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHJvcyBmcm9tICdAYWxpY2xvdWQvcm9zLWNkay1jb3JlJztcbmltcG9ydCB7IFJvc1NtYXJ0QWNjZXNzR2F0ZXdheSB9IGZyb20gJy4vc2FnLmdlbmVyYXRlZCc7XG4vLyBHZW5lcmF0ZWQgZnJvbSB0aGUgQWxpQ2xvdWQgUk9TIFJlc291cmNlIFNwZWNpZmljYXRpb25cbmV4cG9ydCB7IFJvc1NtYXJ0QWNjZXNzR2F0ZXdheSBhcyBTbWFydEFjY2Vzc0dhdGV3YXlQcm9wZXJ0eSB9O1xuXG4vKipcbiAqIFByb3BlcnRpZXMgZm9yIGRlZmluaW5nIGEgYFNtYXJ0QWNjZXNzR2F0ZXdheWAuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2FsaXl1bi1zYWctc21hcnRhY2Nlc3NnYXRld2F5XG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgU21hcnRBY2Nlc3NHYXRld2F5UHJvcHMge1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgYnV5ZXJNZXNzYWdlOiBUaGUgcmVtYXJrcyBsZWZ0IGJ5IHRoZSBidXllci5cbiAgICAgKi9cbiAgICByZWFkb25seSBidXllck1lc3NhZ2U6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGNoYXJnZVR5cGU6IFRoZSBiaWxsaW5nIG1ldGhvZCBvZiB0aGUgU0FHIGluc3RhbmNlLiBcbiAgICAgKiBTZXQgdGhlIHZhbHVlIHRvIFBSRVBBWSwgd2hpY2ggc3BlY2lmaWVzIHRoZSBzdWJzY3JpcHRpb24gYmlsbGluZyBtZXRob2QuXG4gICAgICovXG4gICAgcmVhZG9ubHkgY2hhcmdlVHlwZTogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgaGFyZFdhcmVTcGVjOiBUaGUgdHlwZSBvZiB0aGUgU0FHIGluc3RhbmNlLiBWYWxpZCB2YWx1ZXM6XG4gICAgICogc2FnLTEwMHdtXG4gICAgICogc2FnLTEwMDBcbiAgICAgKiBzYWctdmNwZVxuICAgICAqL1xuICAgIHJlYWRvbmx5IGhhcmRXYXJlU3BlYzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgaGFUeXBlOiBUaGUgZGVwbG95bWVudCBtb2RlLiBWYWxpZCB2YWx1ZXM6XG4gICAgICogbm9fYmFja3VwOiBZb3UgYnV5IG9ubHkgb25lIFNBRyBkZXZpY2UgdG8gY29ubmVjdCBwcml2YXRlIG5ldHdvcmtzIHRvIEFsaWJhYmEgQ2xvdWQuXG4gICAgICogY29sZF9iYWNrdXA6IFlvdSBidXkgdHdvIFNBRyBkZXZpY2VzIGluIGFjdGl2ZS1zdGFuZGJ5IG1vZGUuIE9uZSBTQUcgZGV2aWNlIHNlcnZlcyBhcyBhbiBhY3RpdmVcbiAgICAgKiBkZXZpY2UgYW5kIHRoZSBvdGhlciBzZXJ2ZXMgYXMgYSBzdGFuZGJ5IGRldmljZS4gT25seSB0aGUgYWN0aXZlIGRldmljZSBpcyBjb25uZWN0ZWRcbiAgICAgKiB0byBBbGliYWJhIENsb3VkLiBJZiB0aGUgYWN0aXZlIGRldmljZSBpcyBub3Qgd29ya2luZyBhcyBleHBlY3RlZCwgeW91IG11c3QgbWFudWFsbHlcbiAgICAgKiBwZXJmb3JtIGEgc3dpdGNob3Zlci5cbiAgICAgKiB3YXJtX2JhY2t1cDogWW91IGJ1eSB0d28gU0FHIGRldmljZXMgaW4gYWN0aXZlLWFjdGl2ZSBtb2RlLiBCb3RoIFNBRyBkZXZpY2VzIGFyZSBjb25uZWN0ZWQgdG9cbiAgICAgKiBBbGliYWJhIENsb3VkLiBJZiBhbiBhY3RpdmUgZGV2aWNlIGlzIG5vdCB3b3JraW5nIGFzIGV4cGVjdGVkLCBhIGZhaWxvdmVyIGlzIGF1dG9tYXRpY2FsbHlcbiAgICAgKiBwZXJmb3JtZWQuXG4gICAgICogTm90ZSBJZiB5b3Ugd2FudCB0byBjcmVhdGUgYW4gU0FHIHZDUEUgaW5zdGFuY2UsIHNldCB0aGUgdmFsdWUgdG8gd2FybV9iYWNrdXAuXG4gICAgICovXG4gICAgcmVhZG9ubHkgaGFUeXBlOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBtYXhCYW5kV2lkdGg6IFRoZSBiYW5kd2lkdGggb2YgdGhlIFNBRyBpbnN0YW5jZS5cbiAgICAgKiBJZiB5b3Ugd2FudCB0byBjcmVhdGUgYW4gU0FHIENQRSBpbnN0YW5jZSBhbmQgdGhlIG1vZGVsIGlzIHNhZy0xMDB3bSwgdmFsaWQgdmFsdWVzIG9mIHRoaXMgcGFyYW1ldGVyIGFyZSAyIHRvIDUwLiBVbml0OiBNYml0XFwvcy5cbiAgICAgKiBJZiB5b3Ugd2FudCB0byBjcmVhdGUgYW4gU0FHIENQRSBpbnN0YW5jZSBhbmQgdGhlIG1vZGVsIGlzIHNhZy0xMDAwLCB2YWxpZCB2YWx1ZXMgb2YgdGhpcyBwYXJhbWV0ZXIgYXJlIDEwIHRvIDUwMC4gVW5pdDogTWJpdFxcL3MuXG4gICAgICogSWYgeW91IHdhbnQgdG8gY3JlYXRlIGFuIFNBRyB2Q1BFIGluc3RhbmNlLCB2YWxpZCB2YWx1ZXMgb2YgdGhpcyBwYXJhbWV0ZXIgYXJlIDEwIHRvIDEwMDAuIFVuaXQ6IE1iaXRcXC9zLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IG1heEJhbmRXaWR0aDogbnVtYmVyIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgcGVyaW9kOiBUaGUgc3Vic2NyaXB0aW9uIHBlcmlvZCBvZiB0aGUgU0FHIGluc3RhbmNlLiBVbml0OiBtb250aHMuXG4gICAgICogVmFsaWQgdmFsdWVzOiAxIHRvIDksIDEyLCAyNCwgYW5kIDM2LlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHBlcmlvZDogbnVtYmVyIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgcmVjZWl2ZXJBZGRyZXNzOiBUaGUgZGV0YWlsZWQgYWRkcmVzcyBvZiB0aGUgcmVjaXBpZW50LlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHJlY2VpdmVyQWRkcmVzczogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgcmVjZWl2ZXJDaXR5OiBUaGUgY2l0eSBvZiB0aGUgcmVjaXBpZW50IGFkZHJlc3MuXG4gICAgICovXG4gICAgcmVhZG9ubHkgcmVjZWl2ZXJDaXR5OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSByZWNlaXZlckNvdW50cnk6IFRoZSBjb3VudHJ5IG9mIHRoZSByZWNpcGllbnQgYWRkcmVzcy5cbiAgICAgKi9cbiAgICByZWFkb25seSByZWNlaXZlckNvdW50cnk6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHJlY2VpdmVyRGlzdHJpY3Q6IFRoZSBkaXN0cmljdCBvZiB0aGUgcmVjaXBpZW50IGFkZHJlc3MuXG4gICAgICovXG4gICAgcmVhZG9ubHkgcmVjZWl2ZXJEaXN0cmljdDogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgcmVjZWl2ZXJFbWFpbDogVGhlIGVtYWlsIGFkZHJlc3Mgb2YgdGhlIHJlY2lwaWVudC5cbiAgICAgKi9cbiAgICByZWFkb25seSByZWNlaXZlckVtYWlsOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSByZWNlaXZlck1vYmlsZTogVGhlIG1vYmlsZSBwaG9uZSBudW1iZXIgb2YgdGhlIHJlY2lwaWVudC5cbiAgICAgKi9cbiAgICByZWFkb25seSByZWNlaXZlck1vYmlsZTogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgcmVjZWl2ZXJOYW1lOiBUaGUgbmFtZSBvZiB0aGUgcmVjaXBpZW50LlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHJlY2VpdmVyTmFtZTogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgcmVjZWl2ZXJTdGF0ZTogVGhlIHByb3ZpbmNlIG9mIHRoZSByZWNpcGllbnQgYWRkcmVzcy5cbiAgICAgKi9cbiAgICByZWFkb25seSByZWNlaXZlclN0YXRlOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSByZWNlaXZlclRvd246IFRoZSB0b3duIG9mIHRoZSByZWNpcGllbnQgYWRkcmVzcy5cbiAgICAgKi9cbiAgICByZWFkb25seSByZWNlaXZlclRvd246IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHJlY2VpdmVyWmlwOiBUaGUgcG9zdGNvZGUgb2YgdGhlIHJlY2lwaWVudCBhZGRyZXNzLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHJlY2VpdmVyWmlwOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBhY3RpdmF0ZTogQWN0aXZhdGUgU0FHIG9yIG5vdC4gRGVmYXVsdCBpcyBGYWxzZVxuICAgICAqL1xuICAgIHJlYWRvbmx5IGFjdGl2YXRlPzogYm9vbGVhbiB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGFscmVhZHlIYXZlU2FnOiBTcGVjaWZpZXMgd2hldGhlciB5b3UgYWxyZWFkeSBoYXZlIGFuIFNBRyBkZXZpY2UuIFZhbGlkIHZhbHVlczpcbiAgICAgKiB0cnVlOiB5ZXNcbiAgICAgKiBmYWxzZSAoZGVmYXVsdCk6IG5vXG4gICAgICovXG4gICAgcmVhZG9ubHkgYWxyZWFkeUhhdmVTYWc/OiBib29sZWFuIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgYXV0b1BheTogU3BlY2lmaWVzIHdoZXRoZXIgdG8gZW5hYmxlIGF1dG8tcGF5bWVudCBmb3IgdGhlIGluc3RhbmNlLiBWYWxpZCB2YWx1ZXM6XG4gICAgICogdHJ1ZTogeWVzXG4gICAgICogZmFsc2U6IG5vXG4gICAgICogSWYgeW91IHNldCB0aGUgcGFyYW1ldGVyIHRvIGZhbHNlLCBnbyB0byBCaWxsaW5nIE1hbmFnZW1lbnQgdG8gY29tcGxldGUgdGhlIHBheW1lbnRcbiAgICAgKiBhZnRlciB5b3UgY2FsbCB0aGlzIG9wZXJhdGlvbi4gQWZ0ZXIgeW91IGNvbXBsZXRlIHRoZSBwYXltZW50LCB0aGUgaW5zdGFuY2UgY2FuIGJlXG4gICAgICogY3JlYXRlZC5cbiAgICAgKi9cbiAgICByZWFkb25seSBhdXRvUGF5PzogYm9vbGVhbiB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGNpZHJCbG9jazogVGhlIENJRFIgYmxvY2tzIG9mIHRlcm1pbmFscyBpbiB0aGUgcHJpdmF0ZSBuZXR3b3JrLiBNYWtlIHN1cmUgdGhhdCB0aGUgQ0lEUiBibG9ja3NcbiAgICAgKiBkbyBub3Qgb3ZlcmxhcCB3aXRoIGVhY2ggb3RoZXIuXG4gICAgICogSWYgdGhlIExBTiBwb3J0IG9mIHRoZSBTQUcgZGV2aWNlIGR5bmFtaWNhbGx5IGFzc2lnbnMgSVAgYWRkcmVzc2VzLCBJUCBhZGRyZXNzZXMgd2l0aGluXG4gICAgICogdGhlIGZpcnN0IENJRFIgYmxvY2sgYXJlIGFzc2lnbmVkIHRvIHRlcm1pbmFscyB0aGF0IGhhdmUgdGhlIER5bmFtaWMgSG9zdCBDb25maWd1cmF0aW9uXG4gICAgICogUHJvdG9jb2wgKERIQ1ApIGVuYWJsZWQuXG4gICAgICovXG4gICAgcmVhZG9ubHkgY2lkckJsb2NrPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgZGVzY3JpcHRpb246IFRoZSBkZXNjcmlwdGlvbiBvZiB0aGUgU0FHIGluc3RhbmNlLlxuICAgICAqIFRoZSBkZXNjcmlwdGlvbiBtdXN0IGJlIDIgdG8gMjU2IGNoYXJhY3RlcnMgaW4gbGVuZ3RoLCBhbmQgY2FuIGNvbnRhaW4gZGlnaXRzLCBwZXJpb2RzXG4gICAgICogKC4pLCB1bmRlcnNjb3JlcyAoXyksIGFuZCBoeXBoZW5zICgtKS4gSXQgbXVzdCBzdGFydCB3aXRoIGEgbGV0dGVyLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGRlc2NyaXB0aW9uPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgbmFtZTogVGhlIG5hbWUgb2YgdGhlIFNBRyBpbnN0YW5jZS5cbiAgICAgKiBUaGUgbmFtZSBtdXN0IGJlIDIgdG8gMTI4IGNoYXJhY3RlcnMgaW4gbGVuZ3RoIGFuZCBjYW4gY29udGFpbiBkaWdpdHMsIHBlcmlvZHMgKC4pLFxuICAgICAqIHVuZGVyc2NvcmVzIChfKSwgYW5kIGh5cGhlbnMgKC0pLiBJdCBtdXN0IHN0YXJ0IHdpdGggYSBsZXR0ZXIuXG4gICAgICovXG4gICAgcmVhZG9ubHkgbmFtZT86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHJlY2VpdmVyUGhvbmU6IFRoZSBsYW5kbGluZSBwaG9uZSBudW1iZXIgb2YgdGhlIHJlY2lwaWVudC5cbiAgICAgKi9cbiAgICByZWFkb25seSByZWNlaXZlclBob25lPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgcm91dGluZ1N0cmF0ZWd5OiBUaGUgcG9saWN5IHRvIGFkdmVydGlzZSByb3V0ZXMgZnJvbSB0aGUgcHJpdmF0ZSBuZXR3b3JrIHRvIEFsaWJhYmEgQ2xvdWQuXG4gICAgICogc3RhdGljOiBzdGF0aWMgcm91dGluZy5cbiAgICAgKiBkeW5hbWljOiBkeW5hbWljIHJvdXRpbmcuXG4gICAgICovXG4gICAgcmVhZG9ubHkgcm91dGluZ1N0cmF0ZWd5Pzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgc2VjdXJpdHlMb2NrVGhyZXNob2xkOiBUaGUgdGltZSB0aGF0IGEgZGlzY29ubmVjdGVkIFNBRyBkZXZpY2UgcmVtYWluIGxvY2tlZC4gVGhlIHRpbWUgbXVzdCBiZSBubyBzaG9ydGVyXG4gICAgICogdGhhbiB6ZXJvIHNlY29uZC5cbiAgICAgKiBVbml0OiBzZWNvbmQuXG4gICAgICovXG4gICAgcmVhZG9ubHkgc2VjdXJpdHlMb2NrVGhyZXNob2xkPzogbnVtYmVyIHwgcm9zLklSZXNvbHZhYmxlO1xufVxuXG4vKipcbiAqIFRoaXMgY2xhc3MgZW5jYXBzdWxhdGVzIGFuZCBleHRlbmRzIHRoZSBST1MgcmVzb3VyY2UgdHlwZSBgQUxJWVVOOjpTQUc6OlNtYXJ0QWNjZXNzR2F0ZXdheWAsIHdoaWNoIGlzIHVzZWQgdG8gY3JlYXRlIGEgU21hcnQgQWNjZXNzIEdhdGV3YXkgKFNBRykgaW5zdGFuY2UuXG4gKiBATm90ZSBUaGlzIGNsYXNzIG1heSBoYXZlIHNvbWUgbmV3IGZ1bmN0aW9ucyB0byBmYWNpbGl0YXRlIGRldmVsb3BtZW50LCBzbyBpdCBpcyByZWNvbW1lbmRlZCB0byB1c2UgdGhpcyBjbGFzcyBpbnN0ZWFkIG9mIGBSb3NTbWFydEFjY2Vzc0dhdGV3YXlgZm9yIGEgbW9yZSBjb252ZW5pZW50IGRldmVsb3BtZW50IGV4cGVyaWVuY2UuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2FsaXl1bi1zYWctc21hcnRhY2Nlc3NnYXRld2F5XG4gKi9cbmV4cG9ydCBjbGFzcyBTbWFydEFjY2Vzc0dhdGV3YXkgZXh0ZW5kcyByb3MuUmVzb3VyY2Uge1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIE9yZGVySWQ6IFRoZSBJRCBvZiB0aGUgb3JkZXIuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJPcmRlcklkOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgU21hcnRBR0lkOiBUaGUgSUQgb2YgdGhlIFNBRyBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0clNtYXJ0QWdJZDogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUGFyYW0gc2NvcGUgLSBzY29wZSBpbiB3aGljaCB0aGlzIHJlc291cmNlIGlzIGRlZmluZWRcbiAgICAgKiBQYXJhbSBpZCAgICAtIHNjb3BlZCBpZCBvZiB0aGUgcmVzb3VyY2VcbiAgICAgKiBQYXJhbSBwcm9wcyAtIHJlc291cmNlIHByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihzY29wZTogcm9zLkNvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IFNtYXJ0QWNjZXNzR2F0ZXdheVByb3BzLCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDpib29sZWFuID0gdHJ1ZSkge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQpO1xuXG4gICAgICAgIGNvbnN0IHJvc1NtYXJ0QWNjZXNzR2F0ZXdheSA9IG5ldyBSb3NTbWFydEFjY2Vzc0dhdGV3YXkodGhpcywgaWQsICB7XG4gICAgICAgICAgICByZWNlaXZlckNvdW50cnk6IHByb3BzLnJlY2VpdmVyQ291bnRyeSxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBwcm9wcy5kZXNjcmlwdGlvbixcbiAgICAgICAgICAgIHJlY2VpdmVyWmlwOiBwcm9wcy5yZWNlaXZlclppcCxcbiAgICAgICAgICAgIGJ1eWVyTWVzc2FnZTogcHJvcHMuYnV5ZXJNZXNzYWdlLFxuICAgICAgICAgICAgY2lkckJsb2NrOiBwcm9wcy5jaWRyQmxvY2ssXG4gICAgICAgICAgICByZWNlaXZlclRvd246IHByb3BzLnJlY2VpdmVyVG93bixcbiAgICAgICAgICAgIGhhcmRXYXJlU3BlYzogcHJvcHMuaGFyZFdhcmVTcGVjLFxuICAgICAgICAgICAgbmFtZTogcHJvcHMubmFtZSxcbiAgICAgICAgICAgIHJlY2VpdmVyUGhvbmU6IHByb3BzLnJlY2VpdmVyUGhvbmUsXG4gICAgICAgICAgICByZWNlaXZlckNpdHk6IHByb3BzLnJlY2VpdmVyQ2l0eSxcbiAgICAgICAgICAgIHJvdXRpbmdTdHJhdGVneTogcHJvcHMucm91dGluZ1N0cmF0ZWd5LFxuICAgICAgICAgICAgc2VjdXJpdHlMb2NrVGhyZXNob2xkOiBwcm9wcy5zZWN1cml0eUxvY2tUaHJlc2hvbGQsXG4gICAgICAgICAgICByZWNlaXZlckFkZHJlc3M6IHByb3BzLnJlY2VpdmVyQWRkcmVzcyxcbiAgICAgICAgICAgIGFscmVhZHlIYXZlU2FnOiBwcm9wcy5hbHJlYWR5SGF2ZVNhZyxcbiAgICAgICAgICAgIGhhVHlwZTogcHJvcHMuaGFUeXBlLFxuICAgICAgICAgICAgcGVyaW9kOiBwcm9wcy5wZXJpb2QsXG4gICAgICAgICAgICBtYXhCYW5kV2lkdGg6IHByb3BzLm1heEJhbmRXaWR0aCxcbiAgICAgICAgICAgIGF1dG9QYXk6IHByb3BzLmF1dG9QYXksXG4gICAgICAgICAgICByZWNlaXZlck1vYmlsZTogcHJvcHMucmVjZWl2ZXJNb2JpbGUsXG4gICAgICAgICAgICByZWNlaXZlckRpc3RyaWN0OiBwcm9wcy5yZWNlaXZlckRpc3RyaWN0LFxuICAgICAgICAgICAgYWN0aXZhdGU6IHByb3BzLmFjdGl2YXRlLFxuICAgICAgICAgICAgY2hhcmdlVHlwZTogcHJvcHMuY2hhcmdlVHlwZSxcbiAgICAgICAgICAgIHJlY2VpdmVyU3RhdGU6IHByb3BzLnJlY2VpdmVyU3RhdGUsXG4gICAgICAgICAgICByZWNlaXZlck5hbWU6IHByb3BzLnJlY2VpdmVyTmFtZSxcbiAgICAgICAgICAgIHJlY2VpdmVyRW1haWw6IHByb3BzLnJlY2VpdmVyRW1haWwsXG4gICAgICAgIH0sIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ICYmIHRoaXMuc3RhY2suZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQpO1xuICAgICAgICB0aGlzLnJlc291cmNlID0gcm9zU21hcnRBY2Nlc3NHYXRld2F5O1xuICAgICAgICB0aGlzLmF0dHJPcmRlcklkID0gcm9zU21hcnRBY2Nlc3NHYXRld2F5LmF0dHJPcmRlcklkO1xuICAgICAgICB0aGlzLmF0dHJTbWFydEFnSWQgPSByb3NTbWFydEFjY2Vzc0dhdGV3YXkuYXR0clNtYXJ0QWdJZDtcbiAgICB9XG59XG4iXX0=