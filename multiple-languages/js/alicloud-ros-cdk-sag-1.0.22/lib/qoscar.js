"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.QosCar = exports.QosCarProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const sag_generated_1 = require("./sag.generated");
Object.defineProperty(exports, "QosCarProperty", { enumerable: true, get: function () { return sag_generated_1.RosQosCar; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::SAG::QosCar`, which is used to create a traffic throttling rule for a quality of service (QoS) policy.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosQosCar`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-sag-qoscar
 */
class QosCar extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosQosCar = new sag_generated_1.RosQosCar(this, id, {
            minBandwidthAbs: props.minBandwidthAbs,
            description: props.description,
            priority: props.priority,
            maxBandwidthPercent: props.maxBandwidthPercent,
            maxBandwidthAbs: props.maxBandwidthAbs,
            qosId: props.qosId,
            percentSourceType: props.percentSourceType,
            minBandwidthPercent: props.minBandwidthPercent,
            limitType: props.limitType,
            name: props.name,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosQosCar;
        this.attrQosCarId = rosQosCar.attrQosCarId;
    }
}
exports.QosCar = QosCar;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicW9zY2FyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicW9zY2FyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDhDQUE4QztBQUM5QyxtREFBNEM7QUFFdEIsK0ZBRmIseUJBQVMsT0FFa0I7QUF3RXBDOzs7O0dBSUc7QUFDSCxNQUFhLE1BQU8sU0FBUSxHQUFHLENBQUMsUUFBUTtJQU9wQzs7OztPQUlHO0lBQ0gsWUFBWSxLQUFvQixFQUFFLEVBQVUsRUFBRSxLQUFrQixFQUFFLG1DQUEyQyxJQUFJO1FBQzdHLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFakIsTUFBTSxTQUFTLEdBQUcsSUFBSSx5QkFBUyxDQUFDLElBQUksRUFBRSxFQUFFLEVBQUc7WUFDdkMsZUFBZSxFQUFFLEtBQUssQ0FBQyxlQUFlO1lBQ3RDLFdBQVcsRUFBRSxLQUFLLENBQUMsV0FBVztZQUM5QixRQUFRLEVBQUUsS0FBSyxDQUFDLFFBQVE7WUFDeEIsbUJBQW1CLEVBQUUsS0FBSyxDQUFDLG1CQUFtQjtZQUM5QyxlQUFlLEVBQUUsS0FBSyxDQUFDLGVBQWU7WUFDdEMsS0FBSyxFQUFFLEtBQUssQ0FBQyxLQUFLO1lBQ2xCLGlCQUFpQixFQUFFLEtBQUssQ0FBQyxpQkFBaUI7WUFDMUMsbUJBQW1CLEVBQUUsS0FBSyxDQUFDLG1CQUFtQjtZQUM5QyxTQUFTLEVBQUUsS0FBSyxDQUFDLFNBQVM7WUFDMUIsSUFBSSxFQUFFLEtBQUssQ0FBQyxJQUFJO1NBQ25CLEVBQUUsZ0NBQWdDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO1FBQ3BGLElBQUksQ0FBQyxRQUFRLEdBQUcsU0FBUyxDQUFDO1FBQzFCLElBQUksQ0FBQyxZQUFZLEdBQUcsU0FBUyxDQUFDLFlBQVksQ0FBQztJQUMvQyxDQUFDO0NBQ0o7QUE5QkQsd0JBOEJDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcm9zIGZyb20gJ0BhbGljbG91ZC9yb3MtY2RrLWNvcmUnO1xuaW1wb3J0IHsgUm9zUW9zQ2FyIH0gZnJvbSAnLi9zYWcuZ2VuZXJhdGVkJztcbi8vIEdlbmVyYXRlZCBmcm9tIHRoZSBBbGlDbG91ZCBST1MgUmVzb3VyY2UgU3BlY2lmaWNhdGlvblxuZXhwb3J0IHsgUm9zUW9zQ2FyIGFzIFFvc0NhclByb3BlcnR5IH07XG5cbi8qKlxuICogUHJvcGVydGllcyBmb3IgZGVmaW5pbmcgYSBgUW9zQ2FyYC5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvYWxpeXVuLXNhZy1xb3NjYXJcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBRb3NDYXJQcm9wcyB7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBsaW1pdFR5cGU6IFRoZSB0eXBlIG9mIHRoZSB0cmFmZmljIHRocm90dGxpbmcgcG9saWN5LiBWYWxpZCB2YWx1ZXM6XG4gICAgICogQWJzb2x1dGU6IHRocm90dGxlcyB0cmFmZmljIGJ5IGEgc3BlY2lmaWMgYmFuZHdpZHRoIHJhbmdlLlxuICAgICAqIFBlcmNlbnQ6IHRocm90dGxlcyB0cmFmZmljIGJ5IGEgc3BlY2lmaWMgcmFuZ2Ugb2YgYmFuZHdpZHRoIHBlcmNlbnRhZ2UuXG4gICAgICovXG4gICAgcmVhZG9ubHkgbGltaXRUeXBlOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBwcmlvcml0eTogVGhlIHByaW9yaXR5IG9mIHRoZSB0cmFmZmljIHRocm90dGxpbmcgcG9saWN5LiBBIHNtYWxsZXIgdmFsdWUgcmVwcmVzZW50cyBhIGhpZ2hlclxuICAgICAqIHByaW9yaXR5LiBJZiBwb2xpY2llcyBhcmUgYXNzaWduZWQgdGhlIHNhbWUgcHJpb3JpdHksIHRoZSBvbmUgYXBwbGllZCB0aGUgZWFybGllc3RcbiAgICAgKiBwcmV2YWlscy4gVmFsaWQgdmFsdWVzOiAxIHRvIDcuXG4gICAgICovXG4gICAgcmVhZG9ubHkgcHJpb3JpdHk6IG51bWJlciB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHFvc0lkOiBUaGUgSUQgb2YgdGhlIFFvUyBwb2xpY3kuXG4gICAgICovXG4gICAgcmVhZG9ubHkgcW9zSWQ6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGRlc2NyaXB0aW9uOiBUaGUgZGVzY3JpcHRpb24gb2YgdGhlIHRyYWZmaWMgdGhyb3R0bGluZyBwb2xpY3kuXG4gICAgICovXG4gICAgcmVhZG9ubHkgZGVzY3JpcHRpb24/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBtYXhCYW5kd2lkdGhBYnM6IFRoZSBtYXhpbXVtIGJhbmR3aWR0aC4gVGhpcyBwYXJhbWV0ZXIgaXMgcmVxdWlyZWQgd2hlbiBMaW1pdFR5cGUgaXMgc2V0IHRvIEFic29sdXRlLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IG1heEJhbmR3aWR0aEFicz86IG51bWJlciB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IG1heEJhbmR3aWR0aFBlcmNlbnQ6IFRoZSBtYXhpbXVtIHBlcmNlbnRhZ2UgdGhhdCBpcyBiYXNlZCBvbiB0aGUgbWF4aW11bSB1cHN0cmVhbSBiYW5kd2lkdGggb2YgdGhlIFNBR1xuICAgICAqIGluc3RhbmNlLlxuICAgICAqIFRoaXMgcGFyYW1ldGVyIGlzIHJlcXVpcmVkIHdoZW4gTGltaXRUeXBlIGlzIHNldCB0byBQZXJjZW50LlxuICAgICAqL1xuICAgIHJlYWRvbmx5IG1heEJhbmR3aWR0aFBlcmNlbnQ/OiBudW1iZXIgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBtaW5CYW5kd2lkdGhBYnM6IFRoZSBtaW5pbXVtIGJhbmR3aWR0aC4gVGhpcyBwYXJhbWV0ZXIgaXMgcmVxdWlyZWQgd2hlbiBMaW1pdFR5cGUgaXMgc2V0IHRvIEFic29sdXRlLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IG1pbkJhbmR3aWR0aEFicz86IG51bWJlciB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IG1pbkJhbmR3aWR0aFBlcmNlbnQ6IFRoZSBtaW5pbXVtIHBlcmNlbnRhZ2UgdGhhdCBpcyBiYXNlZCBvbiB0aGUgbWF4aW11bSB1cHN0cmVhbSBiYW5kd2lkdGggb2YgdGhlIFNBR1xuICAgICAqIGluc3RhbmNlLlxuICAgICAqIFRoaXMgcGFyYW1ldGVyIGlzIHJlcXVpcmVkIHdoZW4gTGltaXRUeXBlIGlzIHNldCB0byBQZXJjZW50LlxuICAgICAqL1xuICAgIHJlYWRvbmx5IG1pbkJhbmR3aWR0aFBlcmNlbnQ/OiBudW1iZXIgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBuYW1lOiBUaGUgbmFtZSBvZiB0aGUgdHJhZmZpYyB0aHJvdHRsaW5nIHBvbGljeS4gVGhlIG5hbWUgbXVzdCBiZSAyIHRvIDEyOCBjaGFyYWN0ZXJzIGluXG4gICAgICogbGVuZ3RoLCBhbmQgY2FuIGNvbnRhaW4gQ2hpbmVzZSBjaGFyYWN0ZXJzLCBsZXR0ZXJzLCBkaWdpdHMsIHBlcmlvZHMgKC4pLCB1bmRlcnNjb3Jlc1xuICAgICAqIChfKSwgYW5kIGh5cGhlbnMgKC0pLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IG5hbWU/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBwZXJjZW50U291cmNlVHlwZTogSWYgdGhlIHBvbGljeSB0aHJvdHRsZXMgdHJhZmZpYyBiYXNlZCBvbiBhIHNwZWNpZmllZCBiYW5kd2lkdGggcGVyY2VudGFnZSwgdGhlIGZvbGxvd2luZ1xuICAgICAqIG9wdGlvbnMgYXJlIGF2YWlsYWJsZTpcbiAgICAgKiBDY25CYW5kd2lkdGg6IENsb3VkIEVudGVycHJpc2UgTmV0d29yayAoQ0NOKSBiYW5kd2lkdGguXG4gICAgICogSW50ZXJuZXRVcEJhbmR3aWR0aDogSW50ZXJuZXQgdXBzdHJlYW0gYmFuZHdpZHRoLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHBlcmNlbnRTb3VyY2VUeXBlPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xufVxuXG4vKipcbiAqIFRoaXMgY2xhc3MgZW5jYXBzdWxhdGVzIGFuZCBleHRlbmRzIHRoZSBST1MgcmVzb3VyY2UgdHlwZSBgQUxJWVVOOjpTQUc6OlFvc0NhcmAsIHdoaWNoIGlzIHVzZWQgdG8gY3JlYXRlIGEgdHJhZmZpYyB0aHJvdHRsaW5nIHJ1bGUgZm9yIGEgcXVhbGl0eSBvZiBzZXJ2aWNlIChRb1MpIHBvbGljeS5cbiAqIEBOb3RlIFRoaXMgY2xhc3MgbWF5IGhhdmUgc29tZSBuZXcgZnVuY3Rpb25zIHRvIGZhY2lsaXRhdGUgZGV2ZWxvcG1lbnQsIHNvIGl0IGlzIHJlY29tbWVuZGVkIHRvIHVzZSB0aGlzIGNsYXNzIGluc3RlYWQgb2YgYFJvc1Fvc0NhcmBmb3IgYSBtb3JlIGNvbnZlbmllbnQgZGV2ZWxvcG1lbnQgZXhwZXJpZW5jZS5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvYWxpeXVuLXNhZy1xb3NjYXJcbiAqL1xuZXhwb3J0IGNsYXNzIFFvc0NhciBleHRlbmRzIHJvcy5SZXNvdXJjZSB7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgUW9zQ2FySWQ6IFRoZSBJRCBvZiB0aGUgdHJhZmZpYyB0aHJvdHRsaW5nIHBvbGljeS5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0clFvc0NhcklkOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQYXJhbSBzY29wZSAtIHNjb3BlIGluIHdoaWNoIHRoaXMgcmVzb3VyY2UgaXMgZGVmaW5lZFxuICAgICAqIFBhcmFtIGlkICAgIC0gc2NvcGVkIGlkIG9mIHRoZSByZXNvdXJjZVxuICAgICAqIFBhcmFtIHByb3BzIC0gcmVzb3VyY2UgcHJvcGVydGllc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiByb3MuQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogUW9zQ2FyUHJvcHMsIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OmJvb2xlYW4gPSB0cnVlKSB7XG4gICAgICAgIHN1cGVyKHNjb3BlLCBpZCk7XG5cbiAgICAgICAgY29uc3Qgcm9zUW9zQ2FyID0gbmV3IFJvc1Fvc0Nhcih0aGlzLCBpZCwgIHtcbiAgICAgICAgICAgIG1pbkJhbmR3aWR0aEFiczogcHJvcHMubWluQmFuZHdpZHRoQWJzLFxuICAgICAgICAgICAgZGVzY3JpcHRpb246IHByb3BzLmRlc2NyaXB0aW9uLFxuICAgICAgICAgICAgcHJpb3JpdHk6IHByb3BzLnByaW9yaXR5LFxuICAgICAgICAgICAgbWF4QmFuZHdpZHRoUGVyY2VudDogcHJvcHMubWF4QmFuZHdpZHRoUGVyY2VudCxcbiAgICAgICAgICAgIG1heEJhbmR3aWR0aEFiczogcHJvcHMubWF4QmFuZHdpZHRoQWJzLFxuICAgICAgICAgICAgcW9zSWQ6IHByb3BzLnFvc0lkLFxuICAgICAgICAgICAgcGVyY2VudFNvdXJjZVR5cGU6IHByb3BzLnBlcmNlbnRTb3VyY2VUeXBlLFxuICAgICAgICAgICAgbWluQmFuZHdpZHRoUGVyY2VudDogcHJvcHMubWluQmFuZHdpZHRoUGVyY2VudCxcbiAgICAgICAgICAgIGxpbWl0VHlwZTogcHJvcHMubGltaXRUeXBlLFxuICAgICAgICAgICAgbmFtZTogcHJvcHMubmFtZSxcbiAgICAgICAgfSwgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgJiYgdGhpcy5zdGFjay5lbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCk7XG4gICAgICAgIHRoaXMucmVzb3VyY2UgPSByb3NRb3NDYXI7XG4gICAgICAgIHRoaXMuYXR0clFvc0NhcklkID0gcm9zUW9zQ2FyLmF0dHJRb3NDYXJJZDtcbiAgICB9XG59XG4iXX0=