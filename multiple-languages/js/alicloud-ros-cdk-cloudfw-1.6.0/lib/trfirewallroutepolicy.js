"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TrFirewallRoutePolicy = exports.TrFirewallRoutePolicyProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const cloudfw_generated_1 = require("./cloudfw.generated");
Object.defineProperty(exports, "TrFirewallRoutePolicyProperty", { enumerable: true, get: function () { return cloudfw_generated_1.RosTrFirewallRoutePolicy; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::CLOUDFW::TrFirewallRoutePolicy`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosTrFirewallRoutePolicy`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-cloudfw-trfirewallroutepolicy
 */
class TrFirewallRoutePolicy extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosTrFirewallRoutePolicy = new cloudfw_generated_1.RosTrFirewallRoutePolicy(this, id, {
            srcCandidateList: props.srcCandidateList,
            policyType: props.policyType,
            policyDescription: props.policyDescription,
            policyName: props.policyName,
            firewallId: props.firewallId,
            destCandidateList: props.destCandidateList,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosTrFirewallRoutePolicy;
        this.attrFirewallId = rosTrFirewallRoutePolicy.attrFirewallId;
        this.attrTrFirewallRoutePolicyId = rosTrFirewallRoutePolicy.attrTrFirewallRoutePolicyId;
    }
}
exports.TrFirewallRoutePolicy = TrFirewallRoutePolicy;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJmaXJld2FsbHJvdXRlcG9saWN5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidHJmaXJld2FsbHJvdXRlcG9saWN5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDhDQUE4QztBQUM5QywyREFBK0Q7QUFFMUIsOEdBRjVCLDRDQUF3QixPQUVpQztBQTBEbEU7Ozs7R0FJRztBQUNILE1BQWEscUJBQXNCLFNBQVEsR0FBRyxDQUFDLFFBQVE7SUFnQm5EOzs7O09BSUc7SUFDSCxZQUFZLEtBQW9CLEVBQUUsRUFBVSxFQUFFLEtBQWlDLEVBQUUsbUNBQTJDLElBQUk7UUFDNUgsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNqQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUNiLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxnQ0FBZ0MsR0FBRyxnQ0FBZ0MsQ0FBQztRQUV6RSxNQUFNLHdCQUF3QixHQUFHLElBQUksNENBQXdCLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRztZQUNyRSxnQkFBZ0IsRUFBRSxLQUFLLENBQUMsZ0JBQWdCO1lBQ3hDLFVBQVUsRUFBRSxLQUFLLENBQUMsVUFBVTtZQUM1QixpQkFBaUIsRUFBRSxLQUFLLENBQUMsaUJBQWlCO1lBQzFDLFVBQVUsRUFBRSxLQUFLLENBQUMsVUFBVTtZQUM1QixVQUFVLEVBQUUsS0FBSyxDQUFDLFVBQVU7WUFDNUIsaUJBQWlCLEVBQUUsS0FBSyxDQUFDLGlCQUFpQjtTQUM3QyxFQUFFLGdDQUFnQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztRQUNwRixJQUFJLENBQUMsUUFBUSxHQUFHLHdCQUF3QixDQUFDO1FBQ3pDLElBQUksQ0FBQyxjQUFjLEdBQUcsd0JBQXdCLENBQUMsY0FBYyxDQUFDO1FBQzlELElBQUksQ0FBQywyQkFBMkIsR0FBRyx3QkFBd0IsQ0FBQywyQkFBMkIsQ0FBQztJQUM1RixDQUFDO0NBQ0o7QUF4Q0Qsc0RBd0NDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcm9zIGZyb20gJ0BhbGljbG91ZC9yb3MtY2RrLWNvcmUnO1xuaW1wb3J0IHsgUm9zVHJGaXJld2FsbFJvdXRlUG9saWN5IH0gZnJvbSAnLi9jbG91ZGZ3LmdlbmVyYXRlZCc7XG4vLyBHZW5lcmF0ZWQgZnJvbSB0aGUgQWxpQ2xvdWQgUk9TIFJlc291cmNlIFNwZWNpZmljYXRpb25cbmV4cG9ydCB7IFJvc1RyRmlyZXdhbGxSb3V0ZVBvbGljeSBhcyBUckZpcmV3YWxsUm91dGVQb2xpY3lQcm9wZXJ0eSB9O1xuXG4vKipcbiAqIFByb3BlcnRpZXMgZm9yIGRlZmluaW5nIGEgYFRyRmlyZXdhbGxSb3V0ZVBvbGljeWAuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2FsaXl1bi1jbG91ZGZ3LXRyZmlyZXdhbGxyb3V0ZXBvbGljeVxuICovXG5leHBvcnQgaW50ZXJmYWNlIFRyRmlyZXdhbGxSb3V0ZVBvbGljeVByb3BzIHtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGZpcmV3YWxsSWQ6IFRoZSBpbnN0YW5jZSBJRCBvZiB0aGUgVlBDIGZpcmV3YWxsLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGZpcmV3YWxsSWQ6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHBvbGljeURlc2NyaXB0aW9uOiBUaGUgZGVzY3JpcHRpb24gb2YgdGhlIHRyYWZmaWMgcmVkaXJlY3Rpb24gaW5zdGFuY2UuXG4gICAgICovXG4gICAgcmVhZG9ubHkgcG9saWN5RGVzY3JpcHRpb246IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHBvbGljeU5hbWU6IFRoZSBuYW1lIG9mIHRoZSB0cmFmZmljIHJlZGlyZWN0aW9uIGluc3RhbmNlLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHBvbGljeU5hbWU6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHBvbGljeVR5cGU6IFRoZSB0eXBlIG9mIHRoZSB0cmFmZmljIHJlZGlyZWN0aW9uIHNjZW5hcmlvIG9mIHRoZSBWUEMgZmlyZXdhbGwuIFZhbGlkIHZhbHVlczpcbiAgICAgKiBmdWxsbWVzaDogaW50ZXJjb25uZWN0ZWQgaW5zdGFuY2VzXG4gICAgICogb25lX3RvX29uZTogaW5zdGFuY2UgdG8gaW5zdGFuY2VcbiAgICAgKiBlbmRfdG9fZW5kOiBpbnN0YW5jZSB0byBpbnN0YW5jZXNcbiAgICAgKi9cbiAgICByZWFkb25seSBwb2xpY3lUeXBlOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBkZXN0Q2FuZGlkYXRlTGlzdDogVGhlIHNlY29uZGFyeSB0cmFmZmljIHJlZGlyZWN0aW9uIGluc3RhbmNlcy5cbiAgICAgKi9cbiAgICByZWFkb25seSBkZXN0Q2FuZGlkYXRlTGlzdD86IEFycmF5PFJvc1RyRmlyZXdhbGxSb3V0ZVBvbGljeS5EZXN0Q2FuZGlkYXRlTGlzdFByb3BlcnR5IHwgcm9zLklSZXNvbHZhYmxlPiB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHNyY0NhbmRpZGF0ZUxpc3Q6IFRoZSBwcmltYXJ5IHRyYWZmaWMgcmVkaXJlY3Rpb24gaW5zdGFuY2VzLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHNyY0NhbmRpZGF0ZUxpc3Q/OiBBcnJheTxSb3NUckZpcmV3YWxsUm91dGVQb2xpY3kuU3JjQ2FuZGlkYXRlTGlzdFByb3BlcnR5IHwgcm9zLklSZXNvbHZhYmxlPiB8IHJvcy5JUmVzb2x2YWJsZTtcbn1cblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgYFRyRmlyZXdhbGxSb3V0ZVBvbGljeWAuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSVRyRmlyZXdhbGxSb3V0ZVBvbGljeSBleHRlbmRzIHJvcy5JUmVzb3VyY2Uge1xuICAgIHJlYWRvbmx5IHByb3BzOiBUckZpcmV3YWxsUm91dGVQb2xpY3lQcm9wcztcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBGaXJld2FsbElkOiBUaGUgaW5zdGFuY2UgSUQgb2YgdGhlIFZQQyBmaXJld2FsbC5cbiAgICAgKi9cbiAgICByZWFkb25seSBhdHRyRmlyZXdhbGxJZDogcm9zLklSZXNvbHZhYmxlIHwgc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIFRyRmlyZXdhbGxSb3V0ZVBvbGljeUlkOiBUaGUgSUQgb2YgdGhlIHJvdXRpbmcgcG9saWN5LlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGF0dHJUckZpcmV3YWxsUm91dGVQb2xpY3lJZDogcm9zLklSZXNvbHZhYmxlIHwgc3RyaW5nO1xufVxuLyoqXG4gKiBUaGlzIGNsYXNzIGVuY2Fwc3VsYXRlcyBhbmQgZXh0ZW5kcyB0aGUgUk9TIHJlc291cmNlIHR5cGUgYEFMSVlVTjo6Q0xPVURGVzo6VHJGaXJld2FsbFJvdXRlUG9saWN5YC5cbiAqIEBOb3RlIFRoaXMgY2xhc3MgbWF5IGhhdmUgc29tZSBuZXcgZnVuY3Rpb25zIHRvIGZhY2lsaXRhdGUgZGV2ZWxvcG1lbnQsIHNvIGl0IGlzIHJlY29tbWVuZGVkIHRvIHVzZSB0aGlzIGNsYXNzIGluc3RlYWQgb2YgYFJvc1RyRmlyZXdhbGxSb3V0ZVBvbGljeWBmb3IgYSBtb3JlIGNvbnZlbmllbnQgZGV2ZWxvcG1lbnQgZXhwZXJpZW5jZS5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvYWxpeXVuLWNsb3VkZnctdHJmaXJld2FsbHJvdXRlcG9saWN5XG4gKi9cbmV4cG9ydCBjbGFzcyBUckZpcmV3YWxsUm91dGVQb2xpY3kgZXh0ZW5kcyByb3MuUmVzb3VyY2UgaW1wbGVtZW50cyBJVHJGaXJld2FsbFJvdXRlUG9saWN5IHtcbiAgICBwcm90ZWN0ZWQgc2NvcGU6IHJvcy5Db25zdHJ1Y3Q7XG4gICAgcHJvdGVjdGVkIGlkOiBzdHJpbmc7XG4gICAgcHVibGljIHJlYWRvbmx5IHByb3BzOiBUckZpcmV3YWxsUm91dGVQb2xpY3lQcm9wcztcbiAgICBwcm90ZWN0ZWQgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6IGJvb2xlYW47XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgRmlyZXdhbGxJZDogVGhlIGluc3RhbmNlIElEIG9mIHRoZSBWUEMgZmlyZXdhbGwuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJGaXJld2FsbElkOiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgVHJGaXJld2FsbFJvdXRlUG9saWN5SWQ6IFRoZSBJRCBvZiB0aGUgcm91dGluZyBwb2xpY3kuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJUckZpcmV3YWxsUm91dGVQb2xpY3lJZDogcm9zLklSZXNvbHZhYmxlIHwgc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogUGFyYW0gc2NvcGUgLSBzY29wZSBpbiB3aGljaCB0aGlzIHJlc291cmNlIGlzIGRlZmluZWRcbiAgICAgKiBQYXJhbSBpZCAgICAtIHNjb3BlZCBpZCBvZiB0aGUgcmVzb3VyY2VcbiAgICAgKiBQYXJhbSBwcm9wcyAtIHJlc291cmNlIHByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihzY29wZTogcm9zLkNvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IFRyRmlyZXdhbGxSb3V0ZVBvbGljeVByb3BzLCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDpib29sZWFuID0gdHJ1ZSkge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQpO1xuICAgICAgICB0aGlzLnNjb3BlID0gc2NvcGU7XG4gICAgICAgIHRoaXMuaWQgPSBpZDtcbiAgICAgICAgdGhpcy5wcm9wcyA9IHByb3BzO1xuICAgICAgICB0aGlzLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ID0gZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ7XG5cbiAgICAgICAgY29uc3Qgcm9zVHJGaXJld2FsbFJvdXRlUG9saWN5ID0gbmV3IFJvc1RyRmlyZXdhbGxSb3V0ZVBvbGljeSh0aGlzLCBpZCwgIHtcbiAgICAgICAgICAgIHNyY0NhbmRpZGF0ZUxpc3Q6IHByb3BzLnNyY0NhbmRpZGF0ZUxpc3QsXG4gICAgICAgICAgICBwb2xpY3lUeXBlOiBwcm9wcy5wb2xpY3lUeXBlLFxuICAgICAgICAgICAgcG9saWN5RGVzY3JpcHRpb246IHByb3BzLnBvbGljeURlc2NyaXB0aW9uLFxuICAgICAgICAgICAgcG9saWN5TmFtZTogcHJvcHMucG9saWN5TmFtZSxcbiAgICAgICAgICAgIGZpcmV3YWxsSWQ6IHByb3BzLmZpcmV3YWxsSWQsXG4gICAgICAgICAgICBkZXN0Q2FuZGlkYXRlTGlzdDogcHJvcHMuZGVzdENhbmRpZGF0ZUxpc3QsXG4gICAgICAgIH0sIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ICYmIHRoaXMuc3RhY2suZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQpO1xuICAgICAgICB0aGlzLnJlc291cmNlID0gcm9zVHJGaXJld2FsbFJvdXRlUG9saWN5O1xuICAgICAgICB0aGlzLmF0dHJGaXJld2FsbElkID0gcm9zVHJGaXJld2FsbFJvdXRlUG9saWN5LmF0dHJGaXJld2FsbElkO1xuICAgICAgICB0aGlzLmF0dHJUckZpcmV3YWxsUm91dGVQb2xpY3lJZCA9IHJvc1RyRmlyZXdhbGxSb3V0ZVBvbGljeS5hdHRyVHJGaXJld2FsbFJvdXRlUG9saWN5SWQ7XG4gICAgfVxufVxuIl19