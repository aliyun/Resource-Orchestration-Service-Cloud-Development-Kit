"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VpcFirewallConfigure = exports.VpcFirewallConfigureProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const cloudfw_generated_1 = require("./cloudfw.generated");
Object.defineProperty(exports, "VpcFirewallConfigureProperty", { enumerable: true, get: function () { return cloudfw_generated_1.RosVpcFirewallConfigure; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::CLOUDFW::VpcFirewallConfigure`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosVpcFirewallConfigure`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-cloudfw-vpcfirewallconfigure
 */
class VpcFirewallConfigure extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosVpcFirewallConfigure = new cloudfw_generated_1.RosVpcFirewallConfigure(this, id, {
            memberUid: props.memberUid,
            peerVpcId: props.peerVpcId,
            peerVpcRegion: props.peerVpcRegion,
            localVpcRegion: props.localVpcRegion,
            localVpcCidrTableList: props.localVpcCidrTableList,
            vpcFirewallName: props.vpcFirewallName,
            peerVpcCidrTableList: props.peerVpcCidrTableList,
            localVpcId: props.localVpcId,
            firewallSwitch: props.firewallSwitch === undefined || props.firewallSwitch === null ? 'open' : props.firewallSwitch,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosVpcFirewallConfigure;
        this.attrVpcFirewallId = rosVpcFirewallConfigure.attrVpcFirewallId;
    }
}
exports.VpcFirewallConfigure = VpcFirewallConfigure;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidnBjZmlyZXdhbGxjb25maWd1cmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ2cGNmaXJld2FsbGNvbmZpZ3VyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw4Q0FBOEM7QUFDOUMsMkRBQThEO0FBRTFCLDZHQUYzQiwyQ0FBdUIsT0FFZ0M7QUFtRWhFOzs7O0dBSUc7QUFDSCxNQUFhLG9CQUFxQixTQUFRLEdBQUcsQ0FBQyxRQUFRO0lBV2xEOzs7O09BSUc7SUFDSCxZQUFZLEtBQW9CLEVBQUUsRUFBVSxFQUFFLEtBQWdDLEVBQUUsbUNBQTJDLElBQUk7UUFDM0gsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNqQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUNiLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxnQ0FBZ0MsR0FBRyxnQ0FBZ0MsQ0FBQztRQUV6RSxNQUFNLHVCQUF1QixHQUFHLElBQUksMkNBQXVCLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRztZQUNuRSxTQUFTLEVBQUUsS0FBSyxDQUFDLFNBQVM7WUFDMUIsU0FBUyxFQUFFLEtBQUssQ0FBQyxTQUFTO1lBQzFCLGFBQWEsRUFBRSxLQUFLLENBQUMsYUFBYTtZQUNsQyxjQUFjLEVBQUUsS0FBSyxDQUFDLGNBQWM7WUFDcEMscUJBQXFCLEVBQUUsS0FBSyxDQUFDLHFCQUFxQjtZQUNsRCxlQUFlLEVBQUUsS0FBSyxDQUFDLGVBQWU7WUFDdEMsb0JBQW9CLEVBQUUsS0FBSyxDQUFDLG9CQUFvQjtZQUNoRCxVQUFVLEVBQUUsS0FBSyxDQUFDLFVBQVU7WUFDNUIsY0FBYyxFQUFFLEtBQUssQ0FBQyxjQUFjLEtBQUssU0FBUyxJQUFJLEtBQUssQ0FBQyxjQUFjLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxjQUFjO1NBQ3RILEVBQUUsZ0NBQWdDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO1FBQ3BGLElBQUksQ0FBQyxRQUFRLEdBQUcsdUJBQXVCLENBQUM7UUFDeEMsSUFBSSxDQUFDLGlCQUFpQixHQUFHLHVCQUF1QixDQUFDLGlCQUFpQixDQUFDO0lBQ3ZFLENBQUM7Q0FDSjtBQXJDRCxvREFxQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyByb3MgZnJvbSAnQGFsaWNsb3VkL3Jvcy1jZGstY29yZSc7XG5pbXBvcnQgeyBSb3NWcGNGaXJld2FsbENvbmZpZ3VyZSB9IGZyb20gJy4vY2xvdWRmdy5nZW5lcmF0ZWQnO1xuLy8gR2VuZXJhdGVkIGZyb20gdGhlIEFsaUNsb3VkIFJPUyBSZXNvdXJjZSBTcGVjaWZpY2F0aW9uXG5leHBvcnQgeyBSb3NWcGNGaXJld2FsbENvbmZpZ3VyZSBhcyBWcGNGaXJld2FsbENvbmZpZ3VyZVByb3BlcnR5IH07XG5cbi8qKlxuICogUHJvcGVydGllcyBmb3IgZGVmaW5pbmcgYSBgVnBjRmlyZXdhbGxDb25maWd1cmVgLlxuICogU2VlIGh0dHBzOi8vd3d3LmFsaWJhYmFjbG91ZC5jb20vaGVscC9yb3MvZGV2ZWxvcGVyLXJlZmVyZW5jZS9hbGl5dW4tY2xvdWRmdy12cGNmaXJld2FsbGNvbmZpZ3VyZVxuICovXG5leHBvcnQgaW50ZXJmYWNlIFZwY0ZpcmV3YWxsQ29uZmlndXJlUHJvcHMge1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgZmlyZXdhbGxTd2l0Y2g6IFRoZSBzdGF0dXMgb2YgdGhlIFZQQyBmaXJld2FsbCBhZnRlciB5b3UgY3JlYXRlIHRoZSBmaXJld2FsbC4gVmFsaWQgdmFsdWVzOlxuICAgICAqIG9wZW46IEFmdGVyIHlvdSBjcmVhdGUgdGhlIFZQQyBmaXJld2FsbCwgdGhlIFZQQyBmaXJld2FsbCBpcyBhdXRvbWF0aWNhbGx5IGVuYWJsZWQuIFRoaXMgaXMgdGhlIGRlZmF1bHQgdmFsdWUuXG4gICAgICogY2xvc2U6IEFmdGVyIHlvdSBjcmVhdGUgdGhlIFZQQyBmaXJld2FsbCwgdGhlIFZQQyBmaXJld2FsbCBpcyBkaXNhYmxlZC4gVG8gZW5hYmxlIHRoZSBmaXJld2FsbCwgeW91IGNhbiBjYWxsIHRoZSBNb2RpZnlWcGNGaXJld2FsbFN3aXRjaFN0YXR1cyBvcGVyYXRpb24uXG4gICAgICovXG4gICAgcmVhZG9ubHkgZmlyZXdhbGxTd2l0Y2g6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGxvY2FsVnBjQ2lkclRhYmxlTGlzdDogVGhlIENJRFIgYmxvY2tzIG9mIHRoZSBsb2NhbCBWUEMuXG4gICAgICovXG4gICAgcmVhZG9ubHkgbG9jYWxWcGNDaWRyVGFibGVMaXN0OiBBcnJheTxSb3NWcGNGaXJld2FsbENvbmZpZ3VyZS5Mb2NhbFZwY0NpZHJUYWJsZUxpc3RQcm9wZXJ0eSB8IHJvcy5JUmVzb2x2YWJsZT4gfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBsb2NhbFZwY0lkOiBUaGUgSUQgb2YgdGhlIGxvY2FsIFZQQy5cbiAgICAgKi9cbiAgICByZWFkb25seSBsb2NhbFZwY0lkOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBsb2NhbFZwY1JlZ2lvbjogVGhlIHJlZ2lvbiBJRCBvZiB0aGUgbG9jYWwgVlBDLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGxvY2FsVnBjUmVnaW9uOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBwZWVyVnBjQ2lkclRhYmxlTGlzdDogVGhlIENJRFIgYmxvY2tzIG9mIHRoZSBwZWVyIFZQQy5cbiAgICAgKi9cbiAgICByZWFkb25seSBwZWVyVnBjQ2lkclRhYmxlTGlzdDogQXJyYXk8Um9zVnBjRmlyZXdhbGxDb25maWd1cmUuUGVlclZwY0NpZHJUYWJsZUxpc3RQcm9wZXJ0eSB8IHJvcy5JUmVzb2x2YWJsZT4gfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBwZWVyVnBjSWQ6IFRoZSBJRCBvZiB0aGUgcGVlciBWUEMuXG4gICAgICovXG4gICAgcmVhZG9ubHkgcGVlclZwY0lkOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBwZWVyVnBjUmVnaW9uOiBUaGUgcmVnaW9uIElEIG9mIHRoZSBwZWVyIFZQQy5cbiAgICAgKi9cbiAgICByZWFkb25seSBwZWVyVnBjUmVnaW9uOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSB2cGNGaXJld2FsbE5hbWU6IFRoZSBpbnN0YW5jZSBuYW1lIG9mIHRoZSBWUEMgZmlyZXdhbGwuXG4gICAgICovXG4gICAgcmVhZG9ubHkgdnBjRmlyZXdhbGxOYW1lOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBtZW1iZXJVaWQ6IFRoZSBVSUQgb2YgdGhlIG1lbWJlciB0aGF0IGlzIG1hbmFnZWQgYnkgeW91ciBBbGliYWJhIENsb3VkIGFjY291bnQuXG4gICAgICovXG4gICAgcmVhZG9ubHkgbWVtYmVyVWlkPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xufVxuXG4vKipcbiAqIFJlcHJlc2VudHMgYSBgVnBjRmlyZXdhbGxDb25maWd1cmVgLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIElWcGNGaXJld2FsbENvbmZpZ3VyZSBleHRlbmRzIHJvcy5JUmVzb3VyY2Uge1xuICAgIHJlYWRvbmx5IHByb3BzOiBWcGNGaXJld2FsbENvbmZpZ3VyZVByb3BzO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIFZwY0ZpcmV3YWxsSWQ6IFRoZSBpbnN0YW5jZSBJRCBvZiB0aGUgVlBDIGZpcmV3YWxsLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGF0dHJWcGNGaXJld2FsbElkOiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG59XG4vKipcbiAqIFRoaXMgY2xhc3MgZW5jYXBzdWxhdGVzIGFuZCBleHRlbmRzIHRoZSBST1MgcmVzb3VyY2UgdHlwZSBgQUxJWVVOOjpDTE9VREZXOjpWcGNGaXJld2FsbENvbmZpZ3VyZWAuXG4gKiBATm90ZSBUaGlzIGNsYXNzIG1heSBoYXZlIHNvbWUgbmV3IGZ1bmN0aW9ucyB0byBmYWNpbGl0YXRlIGRldmVsb3BtZW50LCBzbyBpdCBpcyByZWNvbW1lbmRlZCB0byB1c2UgdGhpcyBjbGFzcyBpbnN0ZWFkIG9mIGBSb3NWcGNGaXJld2FsbENvbmZpZ3VyZWBmb3IgYSBtb3JlIGNvbnZlbmllbnQgZGV2ZWxvcG1lbnQgZXhwZXJpZW5jZS5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvYWxpeXVuLWNsb3VkZnctdnBjZmlyZXdhbGxjb25maWd1cmVcbiAqL1xuZXhwb3J0IGNsYXNzIFZwY0ZpcmV3YWxsQ29uZmlndXJlIGV4dGVuZHMgcm9zLlJlc291cmNlIGltcGxlbWVudHMgSVZwY0ZpcmV3YWxsQ29uZmlndXJlIHtcbiAgICBwcm90ZWN0ZWQgc2NvcGU6IHJvcy5Db25zdHJ1Y3Q7XG4gICAgcHJvdGVjdGVkIGlkOiBzdHJpbmc7XG4gICAgcHVibGljIHJlYWRvbmx5IHByb3BzOiBWcGNGaXJld2FsbENvbmZpZ3VyZVByb3BzO1xuICAgIHByb3RlY3RlZCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBWcGNGaXJld2FsbElkOiBUaGUgaW5zdGFuY2UgSUQgb2YgdGhlIFZQQyBmaXJld2FsbC5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0clZwY0ZpcmV3YWxsSWQ6IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFBhcmFtIHNjb3BlIC0gc2NvcGUgaW4gd2hpY2ggdGhpcyByZXNvdXJjZSBpcyBkZWZpbmVkXG4gICAgICogUGFyYW0gaWQgICAgLSBzY29wZWQgaWQgb2YgdGhlIHJlc291cmNlXG4gICAgICogUGFyYW0gcHJvcHMgLSByZXNvdXJjZSBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IHJvcy5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBWcGNGaXJld2FsbENvbmZpZ3VyZVByb3BzLCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDpib29sZWFuID0gdHJ1ZSkge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQpO1xuICAgICAgICB0aGlzLnNjb3BlID0gc2NvcGU7XG4gICAgICAgIHRoaXMuaWQgPSBpZDtcbiAgICAgICAgdGhpcy5wcm9wcyA9IHByb3BzO1xuICAgICAgICB0aGlzLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ID0gZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ7XG5cbiAgICAgICAgY29uc3Qgcm9zVnBjRmlyZXdhbGxDb25maWd1cmUgPSBuZXcgUm9zVnBjRmlyZXdhbGxDb25maWd1cmUodGhpcywgaWQsICB7XG4gICAgICAgICAgICBtZW1iZXJVaWQ6IHByb3BzLm1lbWJlclVpZCxcbiAgICAgICAgICAgIHBlZXJWcGNJZDogcHJvcHMucGVlclZwY0lkLFxuICAgICAgICAgICAgcGVlclZwY1JlZ2lvbjogcHJvcHMucGVlclZwY1JlZ2lvbixcbiAgICAgICAgICAgIGxvY2FsVnBjUmVnaW9uOiBwcm9wcy5sb2NhbFZwY1JlZ2lvbixcbiAgICAgICAgICAgIGxvY2FsVnBjQ2lkclRhYmxlTGlzdDogcHJvcHMubG9jYWxWcGNDaWRyVGFibGVMaXN0LFxuICAgICAgICAgICAgdnBjRmlyZXdhbGxOYW1lOiBwcm9wcy52cGNGaXJld2FsbE5hbWUsXG4gICAgICAgICAgICBwZWVyVnBjQ2lkclRhYmxlTGlzdDogcHJvcHMucGVlclZwY0NpZHJUYWJsZUxpc3QsXG4gICAgICAgICAgICBsb2NhbFZwY0lkOiBwcm9wcy5sb2NhbFZwY0lkLFxuICAgICAgICAgICAgZmlyZXdhbGxTd2l0Y2g6IHByb3BzLmZpcmV3YWxsU3dpdGNoID09PSB1bmRlZmluZWQgfHwgcHJvcHMuZmlyZXdhbGxTd2l0Y2ggPT09IG51bGwgPyAnb3BlbicgOiBwcm9wcy5maXJld2FsbFN3aXRjaCxcbiAgICAgICAgfSwgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgJiYgdGhpcy5zdGFjay5lbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCk7XG4gICAgICAgIHRoaXMucmVzb3VyY2UgPSByb3NWcGNGaXJld2FsbENvbmZpZ3VyZTtcbiAgICAgICAgdGhpcy5hdHRyVnBjRmlyZXdhbGxJZCA9IHJvc1ZwY0ZpcmV3YWxsQ29uZmlndXJlLmF0dHJWcGNGaXJld2FsbElkO1xuICAgIH1cbn1cbiJdfQ==