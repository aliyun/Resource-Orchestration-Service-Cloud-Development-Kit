"use strict";
// Generated from the AliCloud ROS Resource Specification
Object.defineProperty(exports, "__esModule", { value: true });
exports.RosZones = exports.RosFileSystems = exports.RosFileSystem = exports.RosAccessGroups = void 0;
const ros = require("@alicloud/ros-cdk-core");
/**
 * Determine whether the given properties match those of a `RosAccessGroupsProps`
 *
 * @param properties - the TypeScript properties of a `RosAccessGroupsProps`
 *
 * @returns the result of the validation.
 */
function RosAccessGroupsPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('accessGroupName', ros.validateString)(properties.accessGroupName));
    return errors.wrap('supplied properties not correct for "RosAccessGroupsProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `DATASOURCE::NAS::AccessGroups` resource
 *
 * @param properties - the TypeScript properties of a `RosAccessGroupsProps`
 *
 * @returns the AliCloud ROS Resource properties of an `DATASOURCE::NAS::AccessGroups` resource.
 */
// @ts-ignore TS6133
function rosAccessGroupsPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosAccessGroupsPropsValidator(properties).assertSuccess();
    }
    return {
        AccessGroupName: ros.stringToRosTemplate(properties.accessGroupName),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `DATASOURCE::NAS::AccessGroups`, which is used to query the details of permission groups.
 * @Note This class does not contain additional functions, so it is recommended to use the `AccessGroups` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/datasource-nas-accessgroups
 */
class RosAccessGroups extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosAccessGroups.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrAccessGroupNames = this.getAtt('AccessGroupNames');
        this.attrAccessGroups = this.getAtt('AccessGroups');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.accessGroupName = props.accessGroupName;
    }
    get rosProperties() {
        return {
            accessGroupName: this.accessGroupName,
        };
    }
    renderProperties(props) {
        return rosAccessGroupsPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosAccessGroups = RosAccessGroups;
/**
 * The resource type name for this resource class.
 */
RosAccessGroups.ROS_RESOURCE_TYPE_NAME = "DATASOURCE::NAS::AccessGroups";
/**
 * Determine whether the given properties match those of a `RosFileSystemProps`
 *
 * @param properties - the TypeScript properties of a `RosFileSystemProps`
 *
 * @returns the result of the validation.
 */
function RosFileSystemPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('fileSystemId', ros.requiredValidator)(properties.fileSystemId));
    errors.collect(ros.propertyValidator('fileSystemId', ros.validateString)(properties.fileSystemId));
    return errors.wrap('supplied properties not correct for "RosFileSystemProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `DATASOURCE::NAS::FileSystem` resource
 *
 * @param properties - the TypeScript properties of a `RosFileSystemProps`
 *
 * @returns the AliCloud ROS Resource properties of an `DATASOURCE::NAS::FileSystem` resource.
 */
// @ts-ignore TS6133
function rosFileSystemPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosFileSystemPropsValidator(properties).assertSuccess();
    }
    return {
        FileSystemId: ros.stringToRosTemplate(properties.fileSystemId),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `DATASOURCE::NAS::FileSystem`, which is used to query the information about a file system.
 * @Note This class does not contain additional functions, so it is recommended to use the `FileSystem` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/datasource-nas-filesystem
 */
class RosFileSystem extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosFileSystem.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrBandwidth = this.getAtt('Bandwidth');
        this.attrCapacity = this.getAtt('Capacity');
        this.attrCreateTime = this.getAtt('CreateTime');
        this.attrDescription = this.getAtt('Description');
        this.attrEncryptType = this.getAtt('EncryptType');
        this.attrExpiredTime = this.getAtt('ExpiredTime');
        this.attrFileSystemId = this.getAtt('FileSystemId');
        this.attrFileSystemType = this.getAtt('FileSystemType');
        this.attrKmsKeyId = this.getAtt('KmsKeyId');
        this.attrLdap = this.getAtt('Ldap');
        this.attrMeteredSize = this.getAtt('MeteredSize');
        this.attrPaymentType = this.getAtt('PaymentType');
        this.attrProtocolType = this.getAtt('ProtocolType');
        this.attrStorageType = this.getAtt('StorageType');
        this.attrTags = this.getAtt('Tags');
        this.attrZoneId = this.getAtt('ZoneId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.fileSystemId = props.fileSystemId;
    }
    get rosProperties() {
        return {
            fileSystemId: this.fileSystemId,
        };
    }
    renderProperties(props) {
        return rosFileSystemPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosFileSystem = RosFileSystem;
/**
 * The resource type name for this resource class.
 */
RosFileSystem.ROS_RESOURCE_TYPE_NAME = "DATASOURCE::NAS::FileSystem";
/**
 * Determine whether the given properties match those of a `RosFileSystemsProps`
 *
 * @param properties - the TypeScript properties of a `RosFileSystemsProps`
 *
 * @returns the result of the validation.
 */
function RosFileSystemsPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    if (properties.fileSystemType && (typeof properties.fileSystemType) !== 'object') {
        errors.collect(ros.propertyValidator('fileSystemType', ros.validateAllowedValues)({
            data: properties.fileSystemType,
            allowedValues: ["standard", "extreme", "cpfs"],
        }));
    }
    errors.collect(ros.propertyValidator('fileSystemType', ros.validateString)(properties.fileSystemType));
    errors.collect(ros.propertyValidator('fileSystemId', ros.validateString)(properties.fileSystemId));
    return errors.wrap('supplied properties not correct for "RosFileSystemsProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `DATASOURCE::NAS::FileSystems` resource
 *
 * @param properties - the TypeScript properties of a `RosFileSystemsProps`
 *
 * @returns the AliCloud ROS Resource properties of an `DATASOURCE::NAS::FileSystems` resource.
 */
// @ts-ignore TS6133
function rosFileSystemsPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosFileSystemsPropsValidator(properties).assertSuccess();
    }
    return {
        FileSystemId: ros.stringToRosTemplate(properties.fileSystemId),
        FileSystemType: ros.stringToRosTemplate(properties.fileSystemType),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `DATASOURCE::NAS::FileSystems`, which is used to query the details of file systems.
 * @Note This class does not contain additional functions, so it is recommended to use the `FileSystems` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/datasource-nas-filesystems
 */
class RosFileSystems extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosFileSystems.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrFileSystemIds = this.getAtt('FileSystemIds');
        this.attrFileSystems = this.getAtt('FileSystems');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.fileSystemId = props.fileSystemId;
        this.fileSystemType = props.fileSystemType;
    }
    get rosProperties() {
        return {
            fileSystemId: this.fileSystemId,
            fileSystemType: this.fileSystemType,
        };
    }
    renderProperties(props) {
        return rosFileSystemsPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosFileSystems = RosFileSystems;
/**
 * The resource type name for this resource class.
 */
RosFileSystems.ROS_RESOURCE_TYPE_NAME = "DATASOURCE::NAS::FileSystems";
/**
 * Determine whether the given properties match those of a `RosZonesProps`
 *
 * @param properties - the TypeScript properties of a `RosZonesProps`
 *
 * @returns the result of the validation.
 */
function RosZonesPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('fileSystemType', ros.validateString)(properties.fileSystemType));
    return errors.wrap('supplied properties not correct for "RosZonesProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `DATASOURCE::NAS::Zones` resource
 *
 * @param properties - the TypeScript properties of a `RosZonesProps`
 *
 * @returns the AliCloud ROS Resource properties of an `DATASOURCE::NAS::Zones` resource.
 */
// @ts-ignore TS6133
function rosZonesPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosZonesPropsValidator(properties).assertSuccess();
    }
    return {
        FileSystemType: ros.stringToRosTemplate(properties.fileSystemType),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `DATASOURCE::NAS::Zones`, which is used to query zones.
 * @Note This class does not contain additional functions, so it is recommended to use the `Zones` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/datasource-nas-zones
 */
class RosZones extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosZones.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrZoneIds = this.getAtt('ZoneIds');
        this.attrZones = this.getAtt('Zones');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.fileSystemType = props.fileSystemType;
    }
    get rosProperties() {
        return {
            fileSystemType: this.fileSystemType,
        };
    }
    renderProperties(props) {
        return rosZonesPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosZones = RosZones;
/**
 * The resource type name for this resource class.
 */
RosZones.ROS_RESOURCE_TYPE_NAME = "DATASOURCE::NAS::Zones";
//# sourceMappingURL=data:application/json;base64,