"use strict";
// Generated from the AliCloud ROS Resource Specification
Object.defineProperty(exports, "__esModule", { value: true });
exports.RosProtocolService = exports.RosProtocolMountTarget = exports.RosMountTarget = exports.RosFileset = exports.RosFileSystem = exports.RosDataFlow = exports.RosAccessRule = exports.RosAccessGroup = void 0;
const ros = require("@alicloud/ros-cdk-core");
/**
 * Determine whether the given properties match those of a `RosAccessGroupProps`
 *
 * @param properties - the TypeScript properties of a `RosAccessGroupProps`
 *
 * @returns the result of the validation.
 */
function RosAccessGroupPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('accessGroupType', ros.requiredValidator)(properties.accessGroupType));
    if (properties.accessGroupType && (typeof properties.accessGroupType) !== 'object') {
        errors.collect(ros.propertyValidator('accessGroupType', ros.validateAllowedValues)({
            data: properties.accessGroupType,
            allowedValues: ["Vpc", "Classic"],
        }));
    }
    errors.collect(ros.propertyValidator('accessGroupType', ros.validateString)(properties.accessGroupType));
    errors.collect(ros.propertyValidator('description', ros.validateString)(properties.description));
    if (properties.fileSystemType && (typeof properties.fileSystemType) !== 'object') {
        errors.collect(ros.propertyValidator('fileSystemType', ros.validateAllowedValues)({
            data: properties.fileSystemType,
            allowedValues: ["standard", "extreme"],
        }));
    }
    errors.collect(ros.propertyValidator('fileSystemType', ros.validateString)(properties.fileSystemType));
    errors.collect(ros.propertyValidator('accessGroupName', ros.requiredValidator)(properties.accessGroupName));
    if (properties.accessGroupName && (typeof properties.accessGroupName) !== 'object') {
        errors.collect(ros.propertyValidator('accessGroupName', ros.validateAllowedPattern)({
            data: properties.accessGroupName,
            reg: /^[_a-zA-Z0-9-]{3,64}$/
        }));
    }
    errors.collect(ros.propertyValidator('accessGroupName', ros.validateString)(properties.accessGroupName));
    return errors.wrap('supplied properties not correct for "RosAccessGroupProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::NAS::AccessGroup` resource
 *
 * @param properties - the TypeScript properties of a `RosAccessGroupProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::NAS::AccessGroup` resource.
 */
// @ts-ignore TS6133
function rosAccessGroupPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosAccessGroupPropsValidator(properties).assertSuccess();
    }
    return {
        AccessGroupName: ros.stringToRosTemplate(properties.accessGroupName),
        AccessGroupType: ros.stringToRosTemplate(properties.accessGroupType),
        Description: ros.stringToRosTemplate(properties.description),
        FileSystemType: ros.stringToRosTemplate(properties.fileSystemType),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::NAS::AccessGroup`, which is used to create a permission group.
 * @Note This class does not contain additional functions, so it is recommended to use the `AccessGroup` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-nas-accessgroup
 */
class RosAccessGroup extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosAccessGroup.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrAccessGroupName = this.getAtt('AccessGroupName');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.accessGroupName = props.accessGroupName;
        this.accessGroupType = props.accessGroupType;
        this.description = props.description;
        this.fileSystemType = props.fileSystemType;
    }
    get rosProperties() {
        return {
            accessGroupName: this.accessGroupName,
            accessGroupType: this.accessGroupType,
            description: this.description,
            fileSystemType: this.fileSystemType,
        };
    }
    renderProperties(props) {
        return rosAccessGroupPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosAccessGroup = RosAccessGroup;
/**
 * The resource type name for this resource class.
 */
RosAccessGroup.ROS_RESOURCE_TYPE_NAME = "ALIYUN::NAS::AccessGroup";
/**
 * Determine whether the given properties match those of a `RosAccessRuleProps`
 *
 * @param properties - the TypeScript properties of a `RosAccessRuleProps`
 *
 * @returns the result of the validation.
 */
function RosAccessRulePropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    if (properties.userAccessType && (typeof properties.userAccessType) !== 'object') {
        errors.collect(ros.propertyValidator('userAccessType', ros.validateAllowedValues)({
            data: properties.userAccessType,
            allowedValues: ["no_squash", "root_squash", "all_squash"],
        }));
    }
    errors.collect(ros.propertyValidator('userAccessType', ros.validateString)(properties.userAccessType));
    if (properties.priority && (typeof properties.priority) !== 'object') {
        errors.collect(ros.propertyValidator('priority', ros.validateRange)({
            data: properties.priority,
            min: 1,
            max: 100,
        }));
    }
    errors.collect(ros.propertyValidator('priority', ros.validateNumber)(properties.priority));
    if (properties.fileSystemType && (typeof properties.fileSystemType) !== 'object') {
        errors.collect(ros.propertyValidator('fileSystemType', ros.validateAllowedValues)({
            data: properties.fileSystemType,
            allowedValues: ["standard", "extreme"],
        }));
    }
    errors.collect(ros.propertyValidator('fileSystemType', ros.validateString)(properties.fileSystemType));
    errors.collect(ros.propertyValidator('sourceCidrIp', ros.validateString)(properties.sourceCidrIp));
    errors.collect(ros.propertyValidator('accessGroupName', ros.requiredValidator)(properties.accessGroupName));
    errors.collect(ros.propertyValidator('accessGroupName', ros.validateString)(properties.accessGroupName));
    errors.collect(ros.propertyValidator('ipv6SourceCidrIp', ros.validateString)(properties.ipv6SourceCidrIp));
    if (properties.rwAccessType && (typeof properties.rwAccessType) !== 'object') {
        errors.collect(ros.propertyValidator('rwAccessType', ros.validateAllowedValues)({
            data: properties.rwAccessType,
            allowedValues: ["RDWR", "RDONLY"],
        }));
    }
    errors.collect(ros.propertyValidator('rwAccessType', ros.validateString)(properties.rwAccessType));
    return errors.wrap('supplied properties not correct for "RosAccessRuleProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::NAS::AccessRule` resource
 *
 * @param properties - the TypeScript properties of a `RosAccessRuleProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::NAS::AccessRule` resource.
 */
// @ts-ignore TS6133
function rosAccessRulePropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosAccessRulePropsValidator(properties).assertSuccess();
    }
    return {
        AccessGroupName: ros.stringToRosTemplate(properties.accessGroupName),
        FileSystemType: ros.stringToRosTemplate(properties.fileSystemType),
        Ipv6SourceCidrIp: ros.stringToRosTemplate(properties.ipv6SourceCidrIp),
        Priority: ros.numberToRosTemplate(properties.priority),
        RWAccessType: ros.stringToRosTemplate(properties.rwAccessType),
        SourceCidrIp: ros.stringToRosTemplate(properties.sourceCidrIp),
        UserAccessType: ros.stringToRosTemplate(properties.userAccessType),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::NAS::AccessRule`, which is used to create a rule for a permission group.
 * @Note This class does not contain additional functions, so it is recommended to use the `AccessRule` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-nas-accessrule
 */
class RosAccessRule extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosAccessRule.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrAccessRuleId = this.getAtt('AccessRuleId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.accessGroupName = props.accessGroupName;
        this.fileSystemType = props.fileSystemType;
        this.ipv6SourceCidrIp = props.ipv6SourceCidrIp;
        this.priority = props.priority;
        this.rwAccessType = props.rwAccessType;
        this.sourceCidrIp = props.sourceCidrIp;
        this.userAccessType = props.userAccessType;
    }
    get rosProperties() {
        return {
            accessGroupName: this.accessGroupName,
            fileSystemType: this.fileSystemType,
            ipv6SourceCidrIp: this.ipv6SourceCidrIp,
            priority: this.priority,
            rwAccessType: this.rwAccessType,
            sourceCidrIp: this.sourceCidrIp,
            userAccessType: this.userAccessType,
        };
    }
    renderProperties(props) {
        return rosAccessRulePropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosAccessRule = RosAccessRule;
/**
 * The resource type name for this resource class.
 */
RosAccessRule.ROS_RESOURCE_TYPE_NAME = "ALIYUN::NAS::AccessRule";
/**
 * Determine whether the given properties match those of a `RosDataFlowProps`
 *
 * @param properties - the TypeScript properties of a `RosDataFlowProps`
 *
 * @returns the result of the validation.
 */
function RosDataFlowPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('fsetId', ros.requiredValidator)(properties.fsetId));
    errors.collect(ros.propertyValidator('fsetId', ros.validateString)(properties.fsetId));
    errors.collect(ros.propertyValidator('sourceStorage', ros.requiredValidator)(properties.sourceStorage));
    errors.collect(ros.propertyValidator('sourceStorage', ros.validateString)(properties.sourceStorage));
    if (properties.description && (typeof properties.description) !== 'object') {
        errors.collect(ros.propertyValidator('description', ros.validateAllowedPattern)({
            data: properties.description,
            reg: /^(?!http:\/\/|https:\/\/)[a-zA-Z一-龥][0-9a-zA-Z:-_]{1,127}$/
        }));
    }
    errors.collect(ros.propertyValidator('description', ros.validateString)(properties.description));
    if (properties.sourceSecurityType && (typeof properties.sourceSecurityType) !== 'object') {
        errors.collect(ros.propertyValidator('sourceSecurityType', ros.validateAllowedValues)({
            data: properties.sourceSecurityType,
            allowedValues: ["SSL"],
        }));
    }
    errors.collect(ros.propertyValidator('sourceSecurityType', ros.validateString)(properties.sourceSecurityType));
    errors.collect(ros.propertyValidator('fileSystemId', ros.requiredValidator)(properties.fileSystemId));
    errors.collect(ros.propertyValidator('fileSystemId', ros.validateString)(properties.fileSystemId));
    errors.collect(ros.propertyValidator('throughput', ros.requiredValidator)(properties.throughput));
    if (properties.throughput && (typeof properties.throughput) !== 'object') {
        errors.collect(ros.propertyValidator('throughput', ros.validateAllowedValues)({
            data: properties.throughput,
            allowedValues: [600, 1200, 1500],
        }));
    }
    errors.collect(ros.propertyValidator('throughput', ros.validateNumber)(properties.throughput));
    errors.collect(ros.propertyValidator('autoRefreshs', ros.listValidator(RosDataFlow_AutoRefreshsPropertyValidator))(properties.autoRefreshs));
    errors.collect(ros.propertyValidator('autoRefreshPolicy', ros.validateString)(properties.autoRefreshPolicy));
    if (properties.autoRefreshInterval && (typeof properties.autoRefreshInterval) !== 'object') {
        errors.collect(ros.propertyValidator('autoRefreshInterval', ros.validateRange)({
            data: properties.autoRefreshInterval,
            min: 5,
            max: 525600,
        }));
    }
    errors.collect(ros.propertyValidator('autoRefreshInterval', ros.validateNumber)(properties.autoRefreshInterval));
    return errors.wrap('supplied properties not correct for "RosDataFlowProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::NAS::DataFlow` resource
 *
 * @param properties - the TypeScript properties of a `RosDataFlowProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::NAS::DataFlow` resource.
 */
// @ts-ignore TS6133
function rosDataFlowPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosDataFlowPropsValidator(properties).assertSuccess();
    }
    return {
        FileSystemId: ros.stringToRosTemplate(properties.fileSystemId),
        FsetId: ros.stringToRosTemplate(properties.fsetId),
        SourceStorage: ros.stringToRosTemplate(properties.sourceStorage),
        Throughput: ros.numberToRosTemplate(properties.throughput),
        AutoRefreshInterval: ros.numberToRosTemplate(properties.autoRefreshInterval),
        AutoRefreshPolicy: ros.stringToRosTemplate(properties.autoRefreshPolicy),
        AutoRefreshs: ros.listMapper(rosDataFlowAutoRefreshsPropertyToRosTemplate)(properties.autoRefreshs),
        Description: ros.stringToRosTemplate(properties.description),
        SourceSecurityType: ros.stringToRosTemplate(properties.sourceSecurityType),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::NAS::DataFlow`, which is used to create a data flow between a Cloud Parallel File Storage (CPFS) file system and an Object Storage Service (OSS) bucket.
 * @Note This class does not contain additional functions, so it is recommended to use the `DataFlow` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-nas-dataflow
 */
class RosDataFlow extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosDataFlow.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrDataFlowId = this.getAtt('DataFlowId');
        this.attrFileSystemId = this.getAtt('FileSystemId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.fileSystemId = props.fileSystemId;
        this.fsetId = props.fsetId;
        this.sourceStorage = props.sourceStorage;
        this.throughput = props.throughput;
        this.autoRefreshInterval = props.autoRefreshInterval;
        this.autoRefreshPolicy = props.autoRefreshPolicy;
        this.autoRefreshs = props.autoRefreshs;
        this.description = props.description;
        this.sourceSecurityType = props.sourceSecurityType;
    }
    get rosProperties() {
        return {
            fileSystemId: this.fileSystemId,
            fsetId: this.fsetId,
            sourceStorage: this.sourceStorage,
            throughput: this.throughput,
            autoRefreshInterval: this.autoRefreshInterval,
            autoRefreshPolicy: this.autoRefreshPolicy,
            autoRefreshs: this.autoRefreshs,
            description: this.description,
            sourceSecurityType: this.sourceSecurityType,
        };
    }
    renderProperties(props) {
        return rosDataFlowPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosDataFlow = RosDataFlow;
/**
 * The resource type name for this resource class.
 */
RosDataFlow.ROS_RESOURCE_TYPE_NAME = "ALIYUN::NAS::DataFlow";
/**
 * Determine whether the given properties match those of a `AutoRefreshsProperty`
 *
 * @param properties - the TypeScript properties of a `AutoRefreshsProperty`
 *
 * @returns the result of the validation.
 */
function RosDataFlow_AutoRefreshsPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('refreshPath', ros.requiredValidator)(properties.refreshPath));
    errors.collect(ros.propertyValidator('refreshPath', ros.validateString)(properties.refreshPath));
    return errors.wrap('supplied properties not correct for "AutoRefreshsProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::NAS::DataFlow.AutoRefreshs` resource
 *
 * @param properties - the TypeScript properties of a `AutoRefreshsProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::NAS::DataFlow.AutoRefreshs` resource.
 */
// @ts-ignore TS6133
function rosDataFlowAutoRefreshsPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosDataFlow_AutoRefreshsPropertyValidator(properties).assertSuccess();
    return {
        RefreshPath: ros.stringToRosTemplate(properties.refreshPath),
    };
}
/**
 * Determine whether the given properties match those of a `RosFileSystemProps`
 *
 * @param properties - the TypeScript properties of a `RosFileSystemProps`
 *
 * @returns the result of the validation.
 */
function RosFileSystemPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('description', ros.validateString)(properties.description));
    errors.collect(ros.propertyValidator('storageType', ros.requiredValidator)(properties.storageType));
    if (properties.storageType && (typeof properties.storageType) !== 'object') {
        errors.collect(ros.propertyValidator('storageType', ros.validateAllowedValues)({
            data: properties.storageType,
            allowedValues: ["Performance", "Capacity", "standard", "advance", "advance_100", "advance_200"],
        }));
    }
    errors.collect(ros.propertyValidator('storageType', ros.validateString)(properties.storageType));
    errors.collect(ros.propertyValidator('zoneId', ros.validateString)(properties.zoneId));
    errors.collect(ros.propertyValidator('vSwitchId', ros.validateString)(properties.vSwitchId));
    errors.collect(ros.propertyValidator('duration', ros.validateNumber)(properties.duration));
    errors.collect(ros.propertyValidator('snapshotId', ros.validateString)(properties.snapshotId));
    errors.collect(ros.propertyValidator('deletionForce', ros.validateBoolean)(properties.deletionForce));
    errors.collect(ros.propertyValidator('encryptType', ros.validateNumber)(properties.encryptType));
    errors.collect(ros.propertyValidator('vpcId', ros.validateString)(properties.vpcId));
    errors.collect(ros.propertyValidator('capacity', ros.validateNumber)(properties.capacity));
    errors.collect(ros.propertyValidator('protocolType', ros.requiredValidator)(properties.protocolType));
    if (properties.protocolType && (typeof properties.protocolType) !== 'object') {
        errors.collect(ros.propertyValidator('protocolType', ros.validateAllowedValues)({
            data: properties.protocolType,
            allowedValues: ["NFS", "SMB", "cpfs"],
        }));
    }
    errors.collect(ros.propertyValidator('protocolType', ros.validateString)(properties.protocolType));
    if (properties.chargeType && (typeof properties.chargeType) !== 'object') {
        errors.collect(ros.propertyValidator('chargeType', ros.validateAllowedValues)({
            data: properties.chargeType,
            allowedValues: ["PayAsYouGo", "PostPaid", "PayOnDemand", "Postpaid", "PostPay", "Postpay", "POSTPAY", "POST", "Subscription", "PrePaid", "Prepaid", "PrePay", "Prepay", "PREPAY", "PRE"],
        }));
    }
    errors.collect(ros.propertyValidator('chargeType', ros.validateString)(properties.chargeType));
    if (properties.fileSystemType && (typeof properties.fileSystemType) !== 'object') {
        errors.collect(ros.propertyValidator('fileSystemType', ros.validateAllowedValues)({
            data: properties.fileSystemType,
            allowedValues: ["standard", "extreme", "cpfs"],
        }));
    }
    errors.collect(ros.propertyValidator('fileSystemType', ros.validateString)(properties.fileSystemType));
    errors.collect(ros.propertyValidator('bandwidth', ros.validateNumber)(properties.bandwidth));
    if (properties.tags && (Array.isArray(properties.tags) || (typeof properties.tags) === 'string')) {
        errors.collect(ros.propertyValidator('tags', ros.validateLength)({
            data: properties.tags.length,
            min: undefined,
            max: 20,
        }));
    }
    errors.collect(ros.propertyValidator('tags', ros.listValidator(RosFileSystem_TagsPropertyValidator))(properties.tags));
    return errors.wrap('supplied properties not correct for "RosFileSystemProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::NAS::FileSystem` resource
 *
 * @param properties - the TypeScript properties of a `RosFileSystemProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::NAS::FileSystem` resource.
 */
// @ts-ignore TS6133
function rosFileSystemPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosFileSystemPropsValidator(properties).assertSuccess();
    }
    return {
        ProtocolType: ros.stringToRosTemplate(properties.protocolType),
        StorageType: ros.stringToRosTemplate(properties.storageType),
        Bandwidth: ros.numberToRosTemplate(properties.bandwidth),
        Capacity: ros.numberToRosTemplate(properties.capacity),
        ChargeType: ros.stringToRosTemplate(properties.chargeType),
        DeletionForce: ros.booleanToRosTemplate(properties.deletionForce),
        Description: ros.stringToRosTemplate(properties.description),
        Duration: ros.numberToRosTemplate(properties.duration),
        EncryptType: ros.numberToRosTemplate(properties.encryptType),
        FileSystemType: ros.stringToRosTemplate(properties.fileSystemType),
        SnapshotId: ros.stringToRosTemplate(properties.snapshotId),
        Tags: ros.listMapper(rosFileSystemTagsPropertyToRosTemplate)(properties.tags),
        VpcId: ros.stringToRosTemplate(properties.vpcId),
        VSwitchId: ros.stringToRosTemplate(properties.vSwitchId),
        ZoneId: ros.stringToRosTemplate(properties.zoneId),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::NAS::FileSystem`, which is used to create a file system in Apsara File Storage NAS (NAS).
 * @Note This class does not contain additional functions, so it is recommended to use the `FileSystem` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-nas-filesystem
 */
class RosFileSystem extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosFileSystem.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrFileSystemId = this.getAtt('FileSystemId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.protocolType = props.protocolType;
        this.storageType = props.storageType;
        this.bandwidth = props.bandwidth;
        this.capacity = props.capacity;
        this.chargeType = props.chargeType;
        this.deletionForce = props.deletionForce;
        this.description = props.description;
        this.duration = props.duration;
        this.encryptType = props.encryptType;
        this.fileSystemType = props.fileSystemType;
        this.snapshotId = props.snapshotId;
        this.tags = props.tags;
        this.vpcId = props.vpcId;
        this.vSwitchId = props.vSwitchId;
        this.zoneId = props.zoneId;
    }
    get rosProperties() {
        return {
            protocolType: this.protocolType,
            storageType: this.storageType,
            bandwidth: this.bandwidth,
            capacity: this.capacity,
            chargeType: this.chargeType,
            deletionForce: this.deletionForce,
            description: this.description,
            duration: this.duration,
            encryptType: this.encryptType,
            fileSystemType: this.fileSystemType,
            snapshotId: this.snapshotId,
            tags: this.tags,
            vpcId: this.vpcId,
            vSwitchId: this.vSwitchId,
            zoneId: this.zoneId,
        };
    }
    renderProperties(props) {
        return rosFileSystemPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosFileSystem = RosFileSystem;
/**
 * The resource type name for this resource class.
 */
RosFileSystem.ROS_RESOURCE_TYPE_NAME = "ALIYUN::NAS::FileSystem";
/**
 * Determine whether the given properties match those of a `TagsProperty`
 *
 * @param properties - the TypeScript properties of a `TagsProperty`
 *
 * @returns the result of the validation.
 */
function RosFileSystem_TagsPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('value', ros.validateString)(properties.value));
    errors.collect(ros.propertyValidator('key', ros.requiredValidator)(properties.key));
    errors.collect(ros.propertyValidator('key', ros.validateString)(properties.key));
    return errors.wrap('supplied properties not correct for "TagsProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::NAS::FileSystem.Tags` resource
 *
 * @param properties - the TypeScript properties of a `TagsProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::NAS::FileSystem.Tags` resource.
 */
// @ts-ignore TS6133
function rosFileSystemTagsPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosFileSystem_TagsPropertyValidator(properties).assertSuccess();
    return {
        Value: ros.stringToRosTemplate(properties.value),
        Key: ros.stringToRosTemplate(properties.key),
    };
}
/**
 * Determine whether the given properties match those of a `RosFilesetProps`
 *
 * @param properties - the TypeScript properties of a `RosFilesetProps`
 *
 * @returns the result of the validation.
 */
function RosFilesetPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('fileSystemPath', ros.requiredValidator)(properties.fileSystemPath));
    errors.collect(ros.propertyValidator('fileSystemPath', ros.validateString)(properties.fileSystemPath));
    errors.collect(ros.propertyValidator('description', ros.validateString)(properties.description));
    errors.collect(ros.propertyValidator('fileSystemId', ros.requiredValidator)(properties.fileSystemId));
    errors.collect(ros.propertyValidator('fileSystemId', ros.validateString)(properties.fileSystemId));
    return errors.wrap('supplied properties not correct for "RosFilesetProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::NAS::Fileset` resource
 *
 * @param properties - the TypeScript properties of a `RosFilesetProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::NAS::Fileset` resource.
 */
// @ts-ignore TS6133
function rosFilesetPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosFilesetPropsValidator(properties).assertSuccess();
    }
    return {
        FileSystemId: ros.stringToRosTemplate(properties.fileSystemId),
        FileSystemPath: ros.stringToRosTemplate(properties.fileSystemPath),
        Description: ros.stringToRosTemplate(properties.description),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::NAS::Fileset`, which is used to create a fileset.
 * @Note This class does not contain additional functions, so it is recommended to use the `Fileset` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-nas-fileset
 */
class RosFileset extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosFileset.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrFileSystemId = this.getAtt('FileSystemId');
        this.attrFileSystemPath = this.getAtt('FileSystemPath');
        this.attrFsetId = this.getAtt('FsetId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.fileSystemId = props.fileSystemId;
        this.fileSystemPath = props.fileSystemPath;
        this.description = props.description;
    }
    get rosProperties() {
        return {
            fileSystemId: this.fileSystemId,
            fileSystemPath: this.fileSystemPath,
            description: this.description,
        };
    }
    renderProperties(props) {
        return rosFilesetPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosFileset = RosFileset;
/**
 * The resource type name for this resource class.
 */
RosFileset.ROS_RESOURCE_TYPE_NAME = "ALIYUN::NAS::Fileset";
/**
 * Determine whether the given properties match those of a `RosMountTargetProps`
 *
 * @param properties - the TypeScript properties of a `RosMountTargetProps`
 *
 * @returns the result of the validation.
 */
function RosMountTargetPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    if (properties.status && (typeof properties.status) !== 'object') {
        errors.collect(ros.propertyValidator('status', ros.validateAllowedValues)({
            data: properties.status,
            allowedValues: ["Active", "Inactive"],
        }));
    }
    errors.collect(ros.propertyValidator('status', ros.validateString)(properties.status));
    errors.collect(ros.propertyValidator('vpcId', ros.validateString)(properties.vpcId));
    errors.collect(ros.propertyValidator('networkType', ros.requiredValidator)(properties.networkType));
    if (properties.networkType && (typeof properties.networkType) !== 'object') {
        errors.collect(ros.propertyValidator('networkType', ros.validateAllowedValues)({
            data: properties.networkType,
            allowedValues: ["Vpc", "Classic"],
        }));
    }
    errors.collect(ros.propertyValidator('networkType', ros.validateString)(properties.networkType));
    errors.collect(ros.propertyValidator('securityGroupId', ros.validateString)(properties.securityGroupId));
    errors.collect(ros.propertyValidator('vSwitchId', ros.validateString)(properties.vSwitchId));
    errors.collect(ros.propertyValidator('accessGroupName', ros.requiredValidator)(properties.accessGroupName));
    errors.collect(ros.propertyValidator('accessGroupName', ros.validateString)(properties.accessGroupName));
    errors.collect(ros.propertyValidator('fileSystemId', ros.requiredValidator)(properties.fileSystemId));
    errors.collect(ros.propertyValidator('fileSystemId', ros.validateString)(properties.fileSystemId));
    errors.collect(ros.propertyValidator('enableIpv6', ros.validateBoolean)(properties.enableIpv6));
    return errors.wrap('supplied properties not correct for "RosMountTargetProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::NAS::MountTarget` resource
 *
 * @param properties - the TypeScript properties of a `RosMountTargetProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::NAS::MountTarget` resource.
 */
// @ts-ignore TS6133
function rosMountTargetPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosMountTargetPropsValidator(properties).assertSuccess();
    }
    return {
        AccessGroupName: ros.stringToRosTemplate(properties.accessGroupName),
        FileSystemId: ros.stringToRosTemplate(properties.fileSystemId),
        NetworkType: ros.stringToRosTemplate(properties.networkType),
        EnableIpv6: ros.booleanToRosTemplate(properties.enableIpv6),
        SecurityGroupId: ros.stringToRosTemplate(properties.securityGroupId),
        Status: ros.stringToRosTemplate(properties.status),
        VpcId: ros.stringToRosTemplate(properties.vpcId),
        VSwitchId: ros.stringToRosTemplate(properties.vSwitchId),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::NAS::MountTarget`, which is used to create a mount target.
 * @Note This class does not contain additional functions, so it is recommended to use the `MountTarget` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-nas-mounttarget
 */
class RosMountTarget extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosMountTarget.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrMountTargetDomain = this.getAtt('MountTargetDomain');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.accessGroupName = props.accessGroupName;
        this.fileSystemId = props.fileSystemId;
        this.networkType = props.networkType;
        this.enableIpv6 = props.enableIpv6;
        this.securityGroupId = props.securityGroupId;
        this.status = props.status;
        this.vpcId = props.vpcId;
        this.vSwitchId = props.vSwitchId;
    }
    get rosProperties() {
        return {
            accessGroupName: this.accessGroupName,
            fileSystemId: this.fileSystemId,
            networkType: this.networkType,
            enableIpv6: this.enableIpv6,
            securityGroupId: this.securityGroupId,
            status: this.status,
            vpcId: this.vpcId,
            vSwitchId: this.vSwitchId,
        };
    }
    renderProperties(props) {
        return rosMountTargetPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosMountTarget = RosMountTarget;
/**
 * The resource type name for this resource class.
 */
RosMountTarget.ROS_RESOURCE_TYPE_NAME = "ALIYUN::NAS::MountTarget";
/**
 * Determine whether the given properties match those of a `RosProtocolMountTargetProps`
 *
 * @param properties - the TypeScript properties of a `RosProtocolMountTargetProps`
 *
 * @returns the result of the validation.
 */
function RosProtocolMountTargetPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('fsetId', ros.validateString)(properties.fsetId));
    errors.collect(ros.propertyValidator('path', ros.validateString)(properties.path));
    errors.collect(ros.propertyValidator('description', ros.validateString)(properties.description));
    errors.collect(ros.propertyValidator('vpcId', ros.requiredValidator)(properties.vpcId));
    errors.collect(ros.propertyValidator('vpcId', ros.validateString)(properties.vpcId));
    errors.collect(ros.propertyValidator('vSwitchId', ros.requiredValidator)(properties.vSwitchId));
    errors.collect(ros.propertyValidator('vSwitchId', ros.validateString)(properties.vSwitchId));
    errors.collect(ros.propertyValidator('accessGroupName', ros.validateString)(properties.accessGroupName));
    errors.collect(ros.propertyValidator('fileSystemId', ros.requiredValidator)(properties.fileSystemId));
    errors.collect(ros.propertyValidator('fileSystemId', ros.validateString)(properties.fileSystemId));
    errors.collect(ros.propertyValidator('protocolServiceId', ros.requiredValidator)(properties.protocolServiceId));
    errors.collect(ros.propertyValidator('protocolServiceId', ros.validateString)(properties.protocolServiceId));
    return errors.wrap('supplied properties not correct for "RosProtocolMountTargetProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::NAS::ProtocolMountTarget` resource
 *
 * @param properties - the TypeScript properties of a `RosProtocolMountTargetProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::NAS::ProtocolMountTarget` resource.
 */
// @ts-ignore TS6133
function rosProtocolMountTargetPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosProtocolMountTargetPropsValidator(properties).assertSuccess();
    }
    return {
        FileSystemId: ros.stringToRosTemplate(properties.fileSystemId),
        ProtocolServiceId: ros.stringToRosTemplate(properties.protocolServiceId),
        VpcId: ros.stringToRosTemplate(properties.vpcId),
        VSwitchId: ros.stringToRosTemplate(properties.vSwitchId),
        AccessGroupName: ros.stringToRosTemplate(properties.accessGroupName),
        Description: ros.stringToRosTemplate(properties.description),
        FsetId: ros.stringToRosTemplate(properties.fsetId),
        Path: ros.stringToRosTemplate(properties.path),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::NAS::ProtocolMountTarget`, which is used to create an export directory for a protocol service.
 * @Note This class does not contain additional functions, so it is recommended to use the `ProtocolMountTarget` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-nas-protocolmounttarget
 */
class RosProtocolMountTarget extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosProtocolMountTarget.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrExportId = this.getAtt('ExportId');
        this.attrFileSystemId = this.getAtt('FileSystemId');
        this.attrProtocolMountTargetDomain = this.getAtt('ProtocolMountTargetDomain');
        this.attrProtocolServiceId = this.getAtt('ProtocolServiceId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.fileSystemId = props.fileSystemId;
        this.protocolServiceId = props.protocolServiceId;
        this.vpcId = props.vpcId;
        this.vSwitchId = props.vSwitchId;
        this.accessGroupName = props.accessGroupName;
        this.description = props.description;
        this.fsetId = props.fsetId;
        this.path = props.path;
    }
    get rosProperties() {
        return {
            fileSystemId: this.fileSystemId,
            protocolServiceId: this.protocolServiceId,
            vpcId: this.vpcId,
            vSwitchId: this.vSwitchId,
            accessGroupName: this.accessGroupName,
            description: this.description,
            fsetId: this.fsetId,
            path: this.path,
        };
    }
    renderProperties(props) {
        return rosProtocolMountTargetPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosProtocolMountTarget = RosProtocolMountTarget;
/**
 * The resource type name for this resource class.
 */
RosProtocolMountTarget.ROS_RESOURCE_TYPE_NAME = "ALIYUN::NAS::ProtocolMountTarget";
/**
 * Determine whether the given properties match those of a `RosProtocolServiceProps`
 *
 * @param properties - the TypeScript properties of a `RosProtocolServiceProps`
 *
 * @returns the result of the validation.
 */
function RosProtocolServicePropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('description', ros.validateString)(properties.description));
    errors.collect(ros.propertyValidator('vpcId', ros.requiredValidator)(properties.vpcId));
    errors.collect(ros.propertyValidator('vpcId', ros.validateString)(properties.vpcId));
    errors.collect(ros.propertyValidator('protocolType', ros.requiredValidator)(properties.protocolType));
    if (properties.protocolType && (typeof properties.protocolType) !== 'object') {
        errors.collect(ros.propertyValidator('protocolType', ros.validateAllowedValues)({
            data: properties.protocolType,
            allowedValues: ["NFS"],
        }));
    }
    errors.collect(ros.propertyValidator('protocolType', ros.validateString)(properties.protocolType));
    errors.collect(ros.propertyValidator('protocolSpec', ros.requiredValidator)(properties.protocolSpec));
    if (properties.protocolSpec && (typeof properties.protocolSpec) !== 'object') {
        errors.collect(ros.propertyValidator('protocolSpec', ros.validateAllowedValues)({
            data: properties.protocolSpec,
            allowedValues: ["General"],
        }));
    }
    errors.collect(ros.propertyValidator('protocolSpec', ros.validateString)(properties.protocolSpec));
    errors.collect(ros.propertyValidator('vSwitchId', ros.requiredValidator)(properties.vSwitchId));
    errors.collect(ros.propertyValidator('vSwitchId', ros.validateString)(properties.vSwitchId));
    errors.collect(ros.propertyValidator('fileSystemId', ros.requiredValidator)(properties.fileSystemId));
    errors.collect(ros.propertyValidator('fileSystemId', ros.validateString)(properties.fileSystemId));
    errors.collect(ros.propertyValidator('throughput', ros.validateNumber)(properties.throughput));
    return errors.wrap('supplied properties not correct for "RosProtocolServiceProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::NAS::ProtocolService` resource
 *
 * @param properties - the TypeScript properties of a `RosProtocolServiceProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::NAS::ProtocolService` resource.
 */
// @ts-ignore TS6133
function rosProtocolServicePropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosProtocolServicePropsValidator(properties).assertSuccess();
    }
    return {
        FileSystemId: ros.stringToRosTemplate(properties.fileSystemId),
        ProtocolSpec: ros.stringToRosTemplate(properties.protocolSpec),
        ProtocolType: ros.stringToRosTemplate(properties.protocolType),
        VpcId: ros.stringToRosTemplate(properties.vpcId),
        VSwitchId: ros.stringToRosTemplate(properties.vSwitchId),
        Description: ros.stringToRosTemplate(properties.description),
        Throughput: ros.numberToRosTemplate(properties.throughput),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::NAS::ProtocolService`, which is used to create a protocol service for a Cloud Paralleled File System (CPFS) file system.
 * @Note This class does not contain additional functions, so it is recommended to use the `ProtocolService` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-nas-protocolservice
 */
class RosProtocolService extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosProtocolService.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrFileSystemId = this.getAtt('FileSystemId');
        this.attrProtocolServiceId = this.getAtt('ProtocolServiceId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.fileSystemId = props.fileSystemId;
        this.protocolSpec = props.protocolSpec;
        this.protocolType = props.protocolType;
        this.vpcId = props.vpcId;
        this.vSwitchId = props.vSwitchId;
        this.description = props.description;
        this.throughput = props.throughput;
    }
    get rosProperties() {
        return {
            fileSystemId: this.fileSystemId,
            protocolSpec: this.protocolSpec,
            protocolType: this.protocolType,
            vpcId: this.vpcId,
            vSwitchId: this.vSwitchId,
            description: this.description,
            throughput: this.throughput,
        };
    }
    renderProperties(props) {
        return rosProtocolServicePropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosProtocolService = RosProtocolService;
/**
 * The resource type name for this resource class.
 */
RosProtocolService.ROS_RESOURCE_TYPE_NAME = "ALIYUN::NAS::ProtocolService";
//# sourceMappingURL=data:application/json;base64,