"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Bucket = exports.BucketProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const oss_generated_1 = require("./oss.generated");
Object.defineProperty(exports, "BucketProperty", { enumerable: true, get: function () { return oss_generated_1.RosBucket; } });
// Generated from the AliCloud ROS Resource Specification
const os_1 = require("os");
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::OSS::Bucket`, which is used to create a bucket in Object Storage Service (OSS).
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosBucket`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-oss-bucket
 */
class Bucket extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosBucket = new oss_generated_1.RosBucket(this, id, {
            policy: props.policy,
            enableOssHdfsService: props.enableOssHdfsService === undefined || props.enableOssHdfsService === null ? false : props.enableOssHdfsService,
            resourceGroupId: props.resourceGroupId,
            storageClass: props.storageClass,
            redundancyType: props.redundancyType === undefined || props.redundancyType === null ? 'LRS' : props.redundancyType,
            lifecycleConfiguration: props.lifecycleConfiguration,
            serverSideEncryptionConfiguration: props.serverSideEncryptionConfiguration,
            versioningConfiguration: props.versioningConfiguration,
            accessControl: props.accessControl === undefined || props.accessControl === null ? 'private' : props.accessControl,
            corsConfiguration: props.corsConfiguration,
            bucketName: props.bucketName,
            deletionForce: props.deletionForce === undefined || props.deletionForce === null ? false : props.deletionForce,
            loggingConfiguration: props.loggingConfiguration,
            websiteConfigurationV2: props.websiteConfigurationV2,
            refererConfiguration: props.refererConfiguration,
            tags: props.tags,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosBucket;
        this.attrArn = rosBucket.attrArn;
        this.attrDomainName = rosBucket.attrDomainName;
        this.attrInternalDomainName = rosBucket.attrInternalDomainName;
        this.attrName = rosBucket.attrName;
    }
    /**
     * Check whether the bucket exists.
     *
     * @param physicalName name of the bucket.
     */
    // public static async checkBucketExists(physicalName: string): Promise<boolean> {
    //     const config = await CdkToolkit.getConfig();
    //     let client_params;
    //     if (!config.accessKeyId || !config.accessKeySecret) {
    //         error("Please use 'ros-cdk config (-g)' or set environment to set your account configuration firstly!");
    //         exit(1);
    //     } else if (!config.securityToken) {
    //         client_params = {
    //             region: config.regionId,
    //             accessKeyId: config.accessKeyId,
    //             accessKeySecret: config.accessKeySecret
    //         };
    //     } else {
    //         client_params = {
    //             region: config.regionId,
    //             accessKeyId: config.accessKeyId,
    //             accessKeySecret: config.accessKeySecret,
    //             securityToken: config.securityToken
    //         };
    //     }
    //     const client = new ossClient(client_params);
    //     try {
    //         await client.getBucketInfo(physicalName);
    //     } catch (error) {
    //         if (error.name === 'NoSuchBucketError' || error.name === 'AccessDenied') {
    //             return true;
    //         } else {
    //             throw error;
    //         }
    //     }
    //     return false;
    // }
    /**
     * Thrown an exception if the given bucket name is not valid.
     *
     * @param physicalName name of the bucket.
     */
    static async validateBucketName(physicalName) {
        const bucketName = physicalName;
        if (!bucketName || ros.Token.isUnresolved(bucketName)) {
            // the name is a late-bound value, not a defined string,
            // so skip validation
            return;
        }
        const errors = [];
        // Rules codified from https://www.alibabacloud.com/help/oss/user-guide/bucket-naming-conventions
        if (bucketName.length < 3 || bucketName.length > 63) {
            errors.push('Bucket name must be at least 3 and no more than 63 characters');
        }
        const charsetMatch = bucketName.match(/[^a-z0-9-]/);
        if (charsetMatch) {
            errors.push('Bucket name must only contain lowercase characters and the symbols and dash (-) '
                + `(offset: ${charsetMatch.index})`);
        }
        if (!/[a-z0-9]/.test(bucketName.charAt(0))) {
            errors.push('Bucket name must start and end with a lowercase character or number '
                + '(offset: 0)');
        }
        if (!/[a-z0-9]/.test(bucketName.charAt(bucketName.length - 1))) {
            errors.push('Bucket name must start and end with a lowercase character or number '
                + `(offset: ${bucketName.length - 1})`);
        }
        // if (checkBucketExists) {
        //     const exists = await Bucket.checkBucketExists(physicalName);
        //     if (exists) {
        //         errors.push(`Bucket name ${bucketName} is already taken`);
        //     }
        // }
        if (errors.length > 0) {
            throw new Error(`Invalid OSS bucket name (value: ${bucketName})${os_1.EOL}${errors.join(os_1.EOL)}`);
        }
    }
}
exports.Bucket = Bucket;
//# sourceMappingURL=data:application/json;base64,