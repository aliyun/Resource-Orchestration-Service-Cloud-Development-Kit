"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Bucket = exports.BucketProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const oss_generated_1 = require("./oss.generated");
Object.defineProperty(exports, "BucketProperty", { enumerable: true, get: function () { return oss_generated_1.RosBucket; } });
/**
 * This class encapsulates and extends the ROS resource type `DATASOURCE::OSS::Bucket`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosBucket`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/datasource-oss-bucket
 */
class Bucket extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosBucket = new oss_generated_1.RosBucket(this, id, {
            bucketName: props.bucketName,
            refreshOptions: props.refreshOptions === undefined || props.refreshOptions === null ? 'Never' : props.refreshOptions,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosBucket;
        this.attrCreateTime = rosBucket.attrCreateTime;
        this.attrExtranetEndpoint = rosBucket.attrExtranetEndpoint;
        this.attrIntranetEndpoint = rosBucket.attrIntranetEndpoint;
        this.attrLocation = rosBucket.attrLocation;
        this.attrName = rosBucket.attrName;
        this.attrOwner = rosBucket.attrOwner;
        this.attrStorageClass = rosBucket.attrStorageClass;
    }
}
exports.Bucket = Bucket;
//# sourceMappingURL=data:application/json;base64,