"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SynchronizationJob = exports.SynchronizationJobProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const dts_generated_1 = require("./dts.generated");
Object.defineProperty(exports, "SynchronizationJobProperty", { enumerable: true, get: function () { return dts_generated_1.RosSynchronizationJob; } });
/**
 * This class encapsulates and extends the ROS resource type `DATASOURCE::DTS::SynchronizationJob`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosSynchronizationJob`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/datasource-dts-synchronizationjob
 */
class SynchronizationJob extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosSynchronizationJob = new dts_generated_1.RosSynchronizationJob(this, id, {
            dtsInstanceId: props.dtsInstanceId,
            refreshOptions: props.refreshOptions === undefined || props.refreshOptions === null ? 'Never' : props.refreshOptions,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosSynchronizationJob;
        this.attrCreateTime = rosSynchronizationJob.attrCreateTime;
        this.attrDestinationEndpointEngineName = rosSynchronizationJob.attrDestinationEndpointEngineName;
        this.attrDestinationEndpointRegion = rosSynchronizationJob.attrDestinationEndpointRegion;
        this.attrDtsInstanceId = rosSynchronizationJob.attrDtsInstanceId;
        this.attrInstanceClass = rosSynchronizationJob.attrInstanceClass;
        this.attrPaymentType = rosSynchronizationJob.attrPaymentType;
        this.attrSourceEndpointEngineName = rosSynchronizationJob.attrSourceEndpointEngineName;
        this.attrSourceEndpointRegion = rosSynchronizationJob.attrSourceEndpointRegion;
    }
}
exports.SynchronizationJob = SynchronizationJob;
//# sourceMappingURL=data:application/json;base64,