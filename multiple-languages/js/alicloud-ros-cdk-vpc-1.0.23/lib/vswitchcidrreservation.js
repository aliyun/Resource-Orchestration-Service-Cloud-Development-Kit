"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VSwitchCidrReservation = exports.VSwitchCidrReservationProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const vpc_generated_1 = require("./vpc.generated");
Object.defineProperty(exports, "VSwitchCidrReservationProperty", { enumerable: true, get: function () { return vpc_generated_1.RosVSwitchCidrReservation; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::VPC::VSwitchCidrReservation`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosVSwitchCidrReservation`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-vpc-vswitchcidrreservation
 */
class VSwitchCidrReservation extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosVSwitchCidrReservation = new vpc_generated_1.RosVSwitchCidrReservation(this, id, {
            vSwitchCidrReservationType: props.vSwitchCidrReservationType,
            vSwitchCidrReservationCidr: props.vSwitchCidrReservationCidr,
            vSwitchCidrReservationDescription: props.vSwitchCidrReservationDescription,
            ipVersion: props.ipVersion,
            vSwitchId: props.vSwitchId,
            vSwitchCidrReservationName: props.vSwitchCidrReservationName,
            tags: props.tags,
            vSwitchCidrReservationMask: props.vSwitchCidrReservationMask,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosVSwitchCidrReservation;
        this.attrVSwitchCidrReservationId = rosVSwitchCidrReservation.attrVSwitchCidrReservationId;
    }
}
exports.VSwitchCidrReservation = VSwitchCidrReservation;
//# sourceMappingURL=data:application/json;base64,