"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RouteEntries = exports.RouteEntriesProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const vpc_generated_1 = require("./vpc.generated");
Object.defineProperty(exports, "RouteEntriesProperty", { enumerable: true, get: function () { return vpc_generated_1.RosRouteEntries; } });
/**
 * This class encapsulates and extends the ROS resource type `DATASOURCE::VPC::RouteEntries`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosRouteEntries`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/datasource-vpc-routeentries
 */
class RouteEntries extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosRouteEntries = new vpc_generated_1.RosRouteEntries(this, id, {
            nextHopType: props.nextHopType,
            routeEntryId: props.routeEntryId,
            routeTableId: props.routeTableId,
            ipVersion: props.ipVersion,
            routeEntryName: props.routeEntryName,
            routeEntryType: props.routeEntryType,
            nextHopId: props.nextHopId,
            destinationCidrBlock: props.destinationCidrBlock,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosRouteEntries;
        this.attrRouteEntries = rosRouteEntries.attrRouteEntries;
        this.attrRouteEntryIds = rosRouteEntries.attrRouteEntryIds;
    }
}
exports.RouteEntries = RouteEntries;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGVlbnRyaWVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicm91dGVlbnRyaWVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDhDQUE4QztBQUM5QyxtREFBa0Q7QUFFdEIscUdBRm5CLCtCQUFlLE9BRXdCO0FBK0RoRDs7OztHQUlHO0FBQ0gsTUFBYSxZQUFhLFNBQVEsR0FBRyxDQUFDLFFBQVE7SUFnQjFDOzs7O09BSUc7SUFDSCxZQUFZLEtBQW9CLEVBQUUsRUFBVSxFQUFFLEtBQXdCLEVBQUUsbUNBQTJDLElBQUk7UUFDbkgsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNqQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUNiLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxnQ0FBZ0MsR0FBRyxnQ0FBZ0MsQ0FBQztRQUV6RSxNQUFNLGVBQWUsR0FBRyxJQUFJLCtCQUFlLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRztZQUNuRCxXQUFXLEVBQUUsS0FBSyxDQUFDLFdBQVc7WUFDOUIsWUFBWSxFQUFFLEtBQUssQ0FBQyxZQUFZO1lBQ2hDLFlBQVksRUFBRSxLQUFLLENBQUMsWUFBWTtZQUNoQyxTQUFTLEVBQUUsS0FBSyxDQUFDLFNBQVM7WUFDMUIsY0FBYyxFQUFFLEtBQUssQ0FBQyxjQUFjO1lBQ3BDLGNBQWMsRUFBRSxLQUFLLENBQUMsY0FBYztZQUNwQyxTQUFTLEVBQUUsS0FBSyxDQUFDLFNBQVM7WUFDMUIsb0JBQW9CLEVBQUUsS0FBSyxDQUFDLG9CQUFvQjtTQUNuRCxFQUFFLGdDQUFnQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztRQUNwRixJQUFJLENBQUMsUUFBUSxHQUFHLGVBQWUsQ0FBQztRQUNoQyxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsZUFBZSxDQUFDLGdCQUFnQixDQUFDO1FBQ3pELElBQUksQ0FBQyxpQkFBaUIsR0FBRyxlQUFlLENBQUMsaUJBQWlCLENBQUM7SUFDL0QsQ0FBQztDQUNKO0FBMUNELG9DQTBDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHJvcyBmcm9tICdAYWxpY2xvdWQvcm9zLWNkay1jb3JlJztcbmltcG9ydCB7IFJvc1JvdXRlRW50cmllcyB9IGZyb20gJy4vdnBjLmdlbmVyYXRlZCc7XG4vLyBHZW5lcmF0ZWQgZnJvbSB0aGUgQWxpQ2xvdWQgUk9TIFJlc291cmNlIFNwZWNpZmljYXRpb25cbmV4cG9ydCB7IFJvc1JvdXRlRW50cmllcyBhcyBSb3V0ZUVudHJpZXNQcm9wZXJ0eSB9O1xuXG4vKipcbiAqIFByb3BlcnRpZXMgZm9yIGRlZmluaW5nIGEgYFJvdXRlRW50cmllc2AuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2RhdGFzb3VyY2UtdnBjLXJvdXRlZW50cmllc1xuICovXG5leHBvcnQgaW50ZXJmYWNlIFJvdXRlRW50cmllc1Byb3BzIHtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHJvdXRlVGFibGVJZDogVGhlIElEIG9mIHRoZSByb3V0ZSB0YWJsZS5cbiAgICAgKi9cbiAgICByZWFkb25seSByb3V0ZVRhYmxlSWQ6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGRlc3RpbmF0aW9uQ2lkckJsb2NrOiBUaGUgZGVzdGluYXRpb24gQ0lEUiBibG9jayBvZiB0aGUgcm91dGUuIElQdjQgYW5kIElQdjYgQ0lEUiBibG9ja3MgYXJlIHN1cHBvcnRlZC5cbiAgICAgKi9cbiAgICByZWFkb25seSBkZXN0aW5hdGlvbkNpZHJCbG9jaz86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGlwVmVyc2lvbjogVGhlIElQIHZlcnNpb24uIFZhbGlkIHZhbHVlczpcbiAgICAgKiBJUHY0OiBJUHY0XG4gICAgICogSVB2NjogSVB2NlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGlwVmVyc2lvbj86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IG5leHRIb3BJZDogVGhlIElEIG9mIHRoZSBuZXh0IGhvcC5cbiAgICAgKi9cbiAgICByZWFkb25seSBuZXh0SG9wSWQ/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBuZXh0SG9wVHlwZTogVGhlIHR5cGUgb2YgdGhlIG5leHQgaG9wLiBWYWxpZCB2YWx1ZXM6XG4gICAgICogSW5zdGFuY2UgKGRlZmF1bHQpOiBhbiBFbGFzdGljIENvbXB1dGUgU2VydmljZSAoRUNTKSBpbnN0YW5jZVxuICAgICAqIEhhVmlwOiBhIGhpZ2gtYXZhaWxhYmlsaXR5IHZpcnR1YWwgSVAgYWRkcmVzcyAoSEFWSVApXG4gICAgICogVnBuR2F0ZXdheTogYSBWUE4gZ2F0ZXdheVxuICAgICAqIE5hdEdhdGV3YXk6IGEgTkFUIGdhdGV3YXlcbiAgICAgKiBOZXR3b3JrSW50ZXJmYWNlOiBhIHNlY29uZGFyeSBlbGFzdGljIG5ldHdvcmsgaW50ZXJmYWNlIChFTkkpXG4gICAgICogUm91dGVySW50ZXJmYWNlOiBhIHJvdXRlciBpbnRlcmZhY2VcbiAgICAgKiBJUHY2R2F0ZXdheTogYW4gSVB2NiBnYXRld2F5XG4gICAgICogQXR0YWNobWVudDogYSB0cmFuc2l0IHJvdXRlclxuICAgICAqL1xuICAgIHJlYWRvbmx5IG5leHRIb3BUeXBlPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgcm91dGVFbnRyeUlkOiBUaGUgSUQgb2YgdGhlIHJvdXRlLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHJvdXRlRW50cnlJZD86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHJvdXRlRW50cnlOYW1lOiBUaGUgbmFtZSBvZiB0aGUgcm91dGUuXG4gICAgICovXG4gICAgcmVhZG9ubHkgcm91dGVFbnRyeU5hbWU/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSByb3V0ZUVudHJ5VHlwZTogVGhlIHR5cGUgb2YgdGhlIHJvdXRlLiBWYWxpZCB2YWx1ZXM6XG4gICAgICogQ3VzdG9tOiBhIGN1c3RvbSByb3V0ZVxuICAgICAqIFN5c3RlbTogYSBzeXN0ZW0gcm91dGVcbiAgICAgKiBCR1A6IGEgQm9yZGVyIEdhdGV3YXkgUHJvdG9jb2wgKEJHUCkgcm91dGVcbiAgICAgKiBDRU46IGEgQ2xvdWQgRW50ZXJwcmlzZSBOZXR3b3JrIChDRU4pIHJvdXRlXG4gICAgICovXG4gICAgcmVhZG9ubHkgcm91dGVFbnRyeVR5cGU/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG59XG5cbi8qKlxuICogVGhpcyBjbGFzcyBlbmNhcHN1bGF0ZXMgYW5kIGV4dGVuZHMgdGhlIFJPUyByZXNvdXJjZSB0eXBlIGBEQVRBU09VUkNFOjpWUEM6OlJvdXRlRW50cmllc2AuXG4gKiBATm90ZSBUaGlzIGNsYXNzIG1heSBoYXZlIHNvbWUgbmV3IGZ1bmN0aW9ucyB0byBmYWNpbGl0YXRlIGRldmVsb3BtZW50LCBzbyBpdCBpcyByZWNvbW1lbmRlZCB0byB1c2UgdGhpcyBjbGFzcyBpbnN0ZWFkIG9mIGBSb3NSb3V0ZUVudHJpZXNgZm9yIGEgbW9yZSBjb252ZW5pZW50IGRldmVsb3BtZW50IGV4cGVyaWVuY2UuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2RhdGFzb3VyY2UtdnBjLXJvdXRlZW50cmllc1xuICovXG5leHBvcnQgY2xhc3MgUm91dGVFbnRyaWVzIGV4dGVuZHMgcm9zLlJlc291cmNlIHtcbiAgICBwcm90ZWN0ZWQgc2NvcGU6IHJvcy5Db25zdHJ1Y3Q7XG4gICAgcHJvdGVjdGVkIGlkOiBzdHJpbmc7XG4gICAgcHJvdGVjdGVkIHByb3BzOiBSb3V0ZUVudHJpZXNQcm9wcztcbiAgICBwcm90ZWN0ZWQgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6IGJvb2xlYW47XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgUm91dGVFbnRyaWVzOiBUaGUgbGlzdCBvZiBUaGUgcm91dGUgZW50cmllcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0clJvdXRlRW50cmllczogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIFJvdXRlRW50cnlJZHM6IHRoZSBsaXN0IG9mIHRoZSByb3V0ZSBlbnRyeSBpZHMuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJSb3V0ZUVudHJ5SWRzOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQYXJhbSBzY29wZSAtIHNjb3BlIGluIHdoaWNoIHRoaXMgcmVzb3VyY2UgaXMgZGVmaW5lZFxuICAgICAqIFBhcmFtIGlkICAgIC0gc2NvcGVkIGlkIG9mIHRoZSByZXNvdXJjZVxuICAgICAqIFBhcmFtIHByb3BzIC0gcmVzb3VyY2UgcHJvcGVydGllc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiByb3MuQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogUm91dGVFbnRyaWVzUHJvcHMsIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OmJvb2xlYW4gPSB0cnVlKSB7XG4gICAgICAgIHN1cGVyKHNjb3BlLCBpZCk7XG4gICAgICAgIHRoaXMuc2NvcGUgPSBzY29wZTtcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xuICAgICAgICB0aGlzLnByb3BzID0gcHJvcHM7XG4gICAgICAgIHRoaXMuZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgPSBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDtcblxuICAgICAgICBjb25zdCByb3NSb3V0ZUVudHJpZXMgPSBuZXcgUm9zUm91dGVFbnRyaWVzKHRoaXMsIGlkLCAge1xuICAgICAgICAgICAgbmV4dEhvcFR5cGU6IHByb3BzLm5leHRIb3BUeXBlLFxuICAgICAgICAgICAgcm91dGVFbnRyeUlkOiBwcm9wcy5yb3V0ZUVudHJ5SWQsXG4gICAgICAgICAgICByb3V0ZVRhYmxlSWQ6IHByb3BzLnJvdXRlVGFibGVJZCxcbiAgICAgICAgICAgIGlwVmVyc2lvbjogcHJvcHMuaXBWZXJzaW9uLFxuICAgICAgICAgICAgcm91dGVFbnRyeU5hbWU6IHByb3BzLnJvdXRlRW50cnlOYW1lLFxuICAgICAgICAgICAgcm91dGVFbnRyeVR5cGU6IHByb3BzLnJvdXRlRW50cnlUeXBlLFxuICAgICAgICAgICAgbmV4dEhvcElkOiBwcm9wcy5uZXh0SG9wSWQsXG4gICAgICAgICAgICBkZXN0aW5hdGlvbkNpZHJCbG9jazogcHJvcHMuZGVzdGluYXRpb25DaWRyQmxvY2ssXG4gICAgICAgIH0sIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ICYmIHRoaXMuc3RhY2suZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQpO1xuICAgICAgICB0aGlzLnJlc291cmNlID0gcm9zUm91dGVFbnRyaWVzO1xuICAgICAgICB0aGlzLmF0dHJSb3V0ZUVudHJpZXMgPSByb3NSb3V0ZUVudHJpZXMuYXR0clJvdXRlRW50cmllcztcbiAgICAgICAgdGhpcy5hdHRyUm91dGVFbnRyeUlkcyA9IHJvc1JvdXRlRW50cmllcy5hdHRyUm91dGVFbnRyeUlkcztcbiAgICB9XG59XG4iXX0=