"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VirtualBorderRouter = exports.VirtualBorderRouterProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const vpc_generated_1 = require("./vpc.generated");
Object.defineProperty(exports, "VirtualBorderRouterProperty", { enumerable: true, get: function () { return vpc_generated_1.RosVirtualBorderRouter; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::VPC::VirtualBorderRouter`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosVirtualBorderRouter`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-vpc-virtualborderrouter
 */
class VirtualBorderRouter extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosVirtualBorderRouter = new vpc_generated_1.RosVirtualBorderRouter(this, id, {
            peerGatewayIp: props.peerGatewayIp,
            localGatewayIp: props.localGatewayIp,
            description: props.description,
            circuitCode: props.circuitCode,
            physicalConnectionId: props.physicalConnectionId,
            peeringSubnetMask: props.peeringSubnetMask,
            vlanId: props.vlanId,
            name: props.name,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosVirtualBorderRouter;
        this.attrName = rosVirtualBorderRouter.attrName;
        this.attrRouteTableId = rosVirtualBorderRouter.attrRouteTableId;
        this.attrVbrId = rosVirtualBorderRouter.attrVbrId;
        this.attrVlanInterfaceId = rosVirtualBorderRouter.attrVlanInterfaceId;
    }
}
exports.VirtualBorderRouter = VirtualBorderRouter;
//# sourceMappingURL=data:application/json;base64,