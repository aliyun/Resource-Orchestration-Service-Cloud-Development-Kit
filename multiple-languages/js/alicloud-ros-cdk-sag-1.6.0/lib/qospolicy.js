"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.QosPolicy = exports.QosPolicyProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const sag_generated_1 = require("./sag.generated");
Object.defineProperty(exports, "QosPolicyProperty", { enumerable: true, get: function () { return sag_generated_1.RosQosPolicy; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::SAG::QosPolicy`, which is used to create a traffic classification rule for a quality of service (QoS) policy.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosQosPolicy`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-sag-qospolicy
 */
class QosPolicy extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosQosPolicy = new sag_generated_1.RosQosPolicy(this, id, {
            description: props.description,
            endTime: props.endTime,
            sourcePortRange: props.sourcePortRange,
            sourceCidr: props.sourceCidr,
            priority: props.priority,
            startTime: props.startTime,
            destPortRange: props.destPortRange,
            dpiGroupIds: props.dpiGroupIds,
            name: props.name,
            destCidr: props.destCidr,
            dpiSignatureIds: props.dpiSignatureIds,
            qosId: props.qosId,
            ipProtocol: props.ipProtocol,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosQosPolicy;
        this.attrQosPolicyId = rosQosPolicy.attrQosPolicyId;
    }
}
exports.QosPolicy = QosPolicy;
//# sourceMappingURL=data:application/json;base64,