"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppUser = exports.AppUserProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const sag_generated_1 = require("./sag.generated");
Object.defineProperty(exports, "AppUserProperty", { enumerable: true, get: function () { return sag_generated_1.RosAppUser; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::SAG::AppUser`, which is used to create a client account for a Smart Access Gateway (SAG) app instance.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosAppUser`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-sag-appuser
 */
class AppUser extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosAppUser = new sag_generated_1.RosAppUser(this, id, {
            userName: props.userName,
            userMail: props.userMail,
            bandwidth: props.bandwidth,
            smartAgId: props.smartAgId,
            clientIp: props.clientIp,
            disable: props.disable,
            password: props.password,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosAppUser;
        this.attrSmartAgId = rosAppUser.attrSmartAgId;
        this.attrUserName = rosAppUser.attrUserName;
    }
}
exports.AppUser = AppUser;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwdXNlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImFwcHVzZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsOENBQThDO0FBQzlDLG1EQUE2QztBQUV0QixnR0FGZCwwQkFBVSxPQUVtQjtBQXFFdEM7Ozs7R0FJRztBQUNILE1BQWEsT0FBUSxTQUFRLEdBQUcsQ0FBQyxRQUFRO0lBZ0JyQzs7OztPQUlHO0lBQ0gsWUFBWSxLQUFvQixFQUFFLEVBQVUsRUFBRSxLQUFtQixFQUFFLG1DQUEyQyxJQUFJO1FBQzlHLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDakIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUM7UUFDYixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsZ0NBQWdDLEdBQUcsZ0NBQWdDLENBQUM7UUFFekUsTUFBTSxVQUFVLEdBQUcsSUFBSSwwQkFBVSxDQUFDLElBQUksRUFBRSxFQUFFLEVBQUc7WUFDekMsUUFBUSxFQUFFLEtBQUssQ0FBQyxRQUFRO1lBQ3hCLFFBQVEsRUFBRSxLQUFLLENBQUMsUUFBUTtZQUN4QixTQUFTLEVBQUUsS0FBSyxDQUFDLFNBQVM7WUFDMUIsU0FBUyxFQUFFLEtBQUssQ0FBQyxTQUFTO1lBQzFCLFFBQVEsRUFBRSxLQUFLLENBQUMsUUFBUTtZQUN4QixPQUFPLEVBQUUsS0FBSyxDQUFDLE9BQU87WUFDdEIsUUFBUSxFQUFFLEtBQUssQ0FBQyxRQUFRO1NBQzNCLEVBQUUsZ0NBQWdDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO1FBQ3BGLElBQUksQ0FBQyxRQUFRLEdBQUcsVUFBVSxDQUFDO1FBQzNCLElBQUksQ0FBQyxhQUFhLEdBQUcsVUFBVSxDQUFDLGFBQWEsQ0FBQztRQUM5QyxJQUFJLENBQUMsWUFBWSxHQUFHLFVBQVUsQ0FBQyxZQUFZLENBQUM7SUFDaEQsQ0FBQztDQUNKO0FBekNELDBCQXlDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHJvcyBmcm9tICdAYWxpY2xvdWQvcm9zLWNkay1jb3JlJztcbmltcG9ydCB7IFJvc0FwcFVzZXIgfSBmcm9tICcuL3NhZy5nZW5lcmF0ZWQnO1xuLy8gR2VuZXJhdGVkIGZyb20gdGhlIEFsaUNsb3VkIFJPUyBSZXNvdXJjZSBTcGVjaWZpY2F0aW9uXG5leHBvcnQgeyBSb3NBcHBVc2VyIGFzIEFwcFVzZXJQcm9wZXJ0eSB9O1xuXG4vKipcbiAqIFByb3BlcnRpZXMgZm9yIGRlZmluaW5nIGEgYEFwcFVzZXJgLlxuICogU2VlIGh0dHBzOi8vd3d3LmFsaWJhYmFjbG91ZC5jb20vaGVscC9yb3MvZGV2ZWxvcGVyLXJlZmVyZW5jZS9hbGl5dW4tc2FnLWFwcHVzZXJcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBBcHBVc2VyUHJvcHMge1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgYmFuZHdpZHRoOiBUaGUgYmFuZHdpZHRoLiBVbml0OiBLYml0XFwvcy4gTWF4aW11bSBiYW5kd2lkdGg6IDIsMDAwIEtiaXRcXC9zLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGJhbmR3aWR0aDogbnVtYmVyIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgc21hcnRBZ0lkOiBUaGUgSUQgb2YgdGhlIFNBRyBBUFAgaW5zdGFuY2UuXG4gICAgICovXG4gICAgcmVhZG9ubHkgc21hcnRBZ0lkOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSB1c2VyTWFpbDogVGhlIGVtYWlsIGFkZHJlc3Mgb2YgdGhlIHVzZXIuIFRoZSB1c2VybmFtZSBhbmQgcGFzc3dvcmQgYXJlIHNlbnQgdG8gdGhlIHNwZWNpZmllZFxuICAgICAqIGVtYWlsIGFkZHJlc3MuXG4gICAgICovXG4gICAgcmVhZG9ubHkgdXNlck1haWw6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGNsaWVudElwOiBBZnRlciB0aGlzIGZlYXR1cmUgaXMgZW5hYmxlZCwgeW91IG11c3Qgc3BlY2lmeSB0aGUgSVAgYWRkcmVzcyBvZiBTQUcgQVBQLiBJbiB0aGlzXG4gICAgICogY2FzZSwgU0FHIEFQUCBjb25uZWN0cyB0byBBbGliYWJhIENsb3VkIHRocm91Z2ggdGhlIHNwZWNpZmllZCBJUCBhZGRyZXNzLlxuICAgICAqIE5vdGUgVGhlIElQIGFkZHJlc3MgbXVzdCBmYWxsIGludG8gdGhlIENJRFIgYmxvY2sgb2YgdGhlIHByaXZhdGUgbmV0d29yay5cbiAgICAgKiBBZnRlciB0aGlzIGZlYXR1cmUgaXMgZGlzYWJsZWQsIGFuIElQIGFkZHJlc3Mgd2l0aGluIHRoZSBDSURSIGJsb2NrIG9mIHRoZSBwcml2YXRlXG4gICAgICogbmV0d29yayBpcyBhc3NpZ25lZCB0byBTQUcgQVBQLiBFYWNoIGNvbm5lY3Rpb24gdG8gQWxpYmFiYSBDbG91ZCB1c2VzIGEgZGlmZmVyZW50XG4gICAgICogSVAgYWRkcmVzcy5cbiAgICAgKi9cbiAgICByZWFkb25seSBjbGllbnRJcD86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGRpc2FibGU6IERpc2FibGUgdXNlciBvciBub3QuXG4gICAgICovXG4gICAgcmVhZG9ubHkgZGlzYWJsZT86IGJvb2xlYW4gfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBwYXNzd29yZDogVGhlIHBhc3N3b3JkIHVzZWQgdG8gbG9nIG9uIHRvIFNBRyBBUFAuXG4gICAgICogRm9yIGEgY2xpZW50IGFjY291bnQsIGlmIHlvdSBzcGVjaWZ5IHRoZSB1c2VybmFtZSwgeW91IG11c3QgYWxzbyBzcGVjaWZ5IHRoZSBwYXNzd29yZC5cbiAgICAgKi9cbiAgICByZWFkb25seSBwYXNzd29yZD86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHVzZXJOYW1lOiBUaGUgdXNlcm5hbWUgb2YgdGhlIGNsaWVudCBhY2NvdW50LiBVc2VybmFtZXMgb2YgY2xpZW50IGFjY291bnRzIGFkZGVkIHRvIHRoZSBzYW1lXG4gICAgICogU0FHIEFQUCBpbnN0YW5jZSBtdXN0IGJlIHVuaXF1ZS5cbiAgICAgKiBGb3IgYSBjbGllbnQgYWNjb3VudCwgaWYgeW91IHNwZWNpZnkgdGhlIHVzZXJuYW1lLCB5b3UgbXVzdCBhbHNvIHNwZWNpZnkgdGhlIHBhc3N3b3JkLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHVzZXJOYW1lPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xufVxuXG4vKipcbiAqIFJlcHJlc2VudHMgYSBgQXBwVXNlcmAuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSUFwcFVzZXIgZXh0ZW5kcyByb3MuSVJlc291cmNlIHtcbiAgICByZWFkb25seSBwcm9wczogQXBwVXNlclByb3BzO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIFNtYXJ0QUdJZDogVGhlIElEIG9mIHRoZSBTQUcgQVBQIGluc3RhbmNlLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGF0dHJTbWFydEFnSWQ6IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBVc2VyTmFtZTogPGhlYXQuZW5naW5lLnByb3BlcnRpZXMuU2NoZW1hIG9iamVjdCBhdCAweDdmMWQ3NTMxNDgxMD5cbiAgICAgKi9cbiAgICByZWFkb25seSBhdHRyVXNlck5hbWU6IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcbn1cbi8qKlxuICogVGhpcyBjbGFzcyBlbmNhcHN1bGF0ZXMgYW5kIGV4dGVuZHMgdGhlIFJPUyByZXNvdXJjZSB0eXBlIGBBTElZVU46OlNBRzo6QXBwVXNlcmAsIHdoaWNoIGlzIHVzZWQgdG8gY3JlYXRlIGEgY2xpZW50IGFjY291bnQgZm9yIGEgU21hcnQgQWNjZXNzIEdhdGV3YXkgKFNBRykgYXBwIGluc3RhbmNlLlxuICogQE5vdGUgVGhpcyBjbGFzcyBtYXkgaGF2ZSBzb21lIG5ldyBmdW5jdGlvbnMgdG8gZmFjaWxpdGF0ZSBkZXZlbG9wbWVudCwgc28gaXQgaXMgcmVjb21tZW5kZWQgdG8gdXNlIHRoaXMgY2xhc3MgaW5zdGVhZCBvZiBgUm9zQXBwVXNlcmBmb3IgYSBtb3JlIGNvbnZlbmllbnQgZGV2ZWxvcG1lbnQgZXhwZXJpZW5jZS5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvYWxpeXVuLXNhZy1hcHB1c2VyXG4gKi9cbmV4cG9ydCBjbGFzcyBBcHBVc2VyIGV4dGVuZHMgcm9zLlJlc291cmNlIGltcGxlbWVudHMgSUFwcFVzZXIge1xuICAgIHByb3RlY3RlZCBzY29wZTogcm9zLkNvbnN0cnVjdDtcbiAgICBwcm90ZWN0ZWQgaWQ6IHN0cmluZztcbiAgICBwdWJsaWMgcmVhZG9ubHkgcHJvcHM6IEFwcFVzZXJQcm9wcztcbiAgICBwcm90ZWN0ZWQgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6IGJvb2xlYW47XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgU21hcnRBR0lkOiBUaGUgSUQgb2YgdGhlIFNBRyBBUFAgaW5zdGFuY2UuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJTbWFydEFnSWQ6IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBVc2VyTmFtZTogPGhlYXQuZW5naW5lLnByb3BlcnRpZXMuU2NoZW1hIG9iamVjdCBhdCAweDdmMWQ3NTMxNDgxMD5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0clVzZXJOYW1lOiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBQYXJhbSBzY29wZSAtIHNjb3BlIGluIHdoaWNoIHRoaXMgcmVzb3VyY2UgaXMgZGVmaW5lZFxuICAgICAqIFBhcmFtIGlkICAgIC0gc2NvcGVkIGlkIG9mIHRoZSByZXNvdXJjZVxuICAgICAqIFBhcmFtIHByb3BzIC0gcmVzb3VyY2UgcHJvcGVydGllc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiByb3MuQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogQXBwVXNlclByb3BzLCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDpib29sZWFuID0gdHJ1ZSkge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQpO1xuICAgICAgICB0aGlzLnNjb3BlID0gc2NvcGU7XG4gICAgICAgIHRoaXMuaWQgPSBpZDtcbiAgICAgICAgdGhpcy5wcm9wcyA9IHByb3BzO1xuICAgICAgICB0aGlzLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ID0gZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ7XG5cbiAgICAgICAgY29uc3Qgcm9zQXBwVXNlciA9IG5ldyBSb3NBcHBVc2VyKHRoaXMsIGlkLCAge1xuICAgICAgICAgICAgdXNlck5hbWU6IHByb3BzLnVzZXJOYW1lLFxuICAgICAgICAgICAgdXNlck1haWw6IHByb3BzLnVzZXJNYWlsLFxuICAgICAgICAgICAgYmFuZHdpZHRoOiBwcm9wcy5iYW5kd2lkdGgsXG4gICAgICAgICAgICBzbWFydEFnSWQ6IHByb3BzLnNtYXJ0QWdJZCxcbiAgICAgICAgICAgIGNsaWVudElwOiBwcm9wcy5jbGllbnRJcCxcbiAgICAgICAgICAgIGRpc2FibGU6IHByb3BzLmRpc2FibGUsXG4gICAgICAgICAgICBwYXNzd29yZDogcHJvcHMucGFzc3dvcmQsXG4gICAgICAgIH0sIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ICYmIHRoaXMuc3RhY2suZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQpO1xuICAgICAgICB0aGlzLnJlc291cmNlID0gcm9zQXBwVXNlcjtcbiAgICAgICAgdGhpcy5hdHRyU21hcnRBZ0lkID0gcm9zQXBwVXNlci5hdHRyU21hcnRBZ0lkO1xuICAgICAgICB0aGlzLmF0dHJVc2VyTmFtZSA9IHJvc0FwcFVzZXIuYXR0clVzZXJOYW1lO1xuICAgIH1cbn1cbiJdfQ==