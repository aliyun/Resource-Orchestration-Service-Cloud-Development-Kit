"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Schedule = exports.ScheduleProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const fnf_generated_1 = require("./fnf.generated");
Object.defineProperty(exports, "ScheduleProperty", { enumerable: true, get: function () { return fnf_generated_1.RosSchedule; } });
/**
 * This class encapsulates and extends the ROS resource type `DATASOURCE::FNF::Schedule`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosSchedule`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/datasource-fnf-schedule
 */
class Schedule extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosSchedule = new fnf_generated_1.RosSchedule(this, id, {
            flowName: props.flowName,
            refreshOptions: props.refreshOptions === undefined || props.refreshOptions === null ? 'Never' : props.refreshOptions,
            scheduleName: props.scheduleName,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosSchedule;
        this.attrCreateTime = rosSchedule.attrCreateTime;
        this.attrCronExpression = rosSchedule.attrCronExpression;
        this.attrDescription = rosSchedule.attrDescription;
        this.attrLastModifiedTime = rosSchedule.attrLastModifiedTime;
        this.attrPayload = rosSchedule.attrPayload;
        this.attrScheduleId = rosSchedule.attrScheduleId;
        this.attrScheduleName = rosSchedule.attrScheduleName;
    }
}
exports.Schedule = Schedule;
//# sourceMappingURL=data:application/json;base64,