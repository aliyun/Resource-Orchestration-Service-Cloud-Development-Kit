"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CodeSource = exports.CodeSourceProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const pai_generated_1 = require("./pai.generated");
Object.defineProperty(exports, "CodeSourceProperty", { enumerable: true, get: function () { return pai_generated_1.RosCodeSource; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::PAI::CodeSource`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosCodeSource`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-pai-codesource
 */
class CodeSource extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosCodeSource = new pai_generated_1.RosCodeSource(this, id, {
            mountPath: props.mountPath,
            codeRepo: props.codeRepo,
            description: props.description,
            codeRepoAccessToken: props.codeRepoAccessToken,
            accessibility: props.accessibility,
            codeCommit: props.codeCommit,
            displayName: props.displayName,
            workspaceId: props.workspaceId,
            codeBranch: props.codeBranch,
            codeRepoUserName: props.codeRepoUserName,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosCodeSource;
        this.attrAccessibility = rosCodeSource.attrAccessibility;
        this.attrCodeBranch = rosCodeSource.attrCodeBranch;
        this.attrCodeCommit = rosCodeSource.attrCodeCommit;
        this.attrCodeRepo = rosCodeSource.attrCodeRepo;
        this.attrCodeRepoAccessToken = rosCodeSource.attrCodeRepoAccessToken;
        this.attrCodeRepoUserName = rosCodeSource.attrCodeRepoUserName;
        this.attrCodeSourcesId = rosCodeSource.attrCodeSourcesId;
        this.attrCreateTime = rosCodeSource.attrCreateTime;
        this.attrDescription = rosCodeSource.attrDescription;
        this.attrDisplayName = rosCodeSource.attrDisplayName;
        this.attrGmtModifyTime = rosCodeSource.attrGmtModifyTime;
        this.attrMountPath = rosCodeSource.attrMountPath;
        this.attrUserId = rosCodeSource.attrUserId;
        this.attrWorkspaceId = rosCodeSource.attrWorkspaceId;
    }
}
exports.CodeSource = CodeSource;
//# sourceMappingURL=data:application/json;base64,