"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Application = exports.ApplicationProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const edas_generated_1 = require("./edas.generated");
Object.defineProperty(exports, "ApplicationProperty", { enumerable: true, get: function () { return edas_generated_1.RosApplication; } });
/**
 * A ROS resource type:  `ALIYUN::EDAS::Application`
 */
class Application extends ros.Resource {
    /**
     * Create a new `ALIYUN::EDAS::Application`.
     *
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosApplication = new edas_generated_1.RosApplication(this, id, {
            componentIds: props.componentIds,
            logicalRegionId: props.logicalRegionId,
            applicationName: props.applicationName,
            description: props.description,
            resourceGroupId: props.resourceGroupId,
            ecuInfo: props.ecuInfo,
            healthCheckUrl: props.healthCheckUrl,
            clusterId: props.clusterId,
            packageType: props.packageType === undefined || props.packageType === null ? 'war' : props.packageType,
            buildPackId: props.buildPackId,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosApplication;
        this.attrAppId = rosApplication.attrAppId;
        this.attrPort = rosApplication.attrPort;
    }
}
exports.Application = Application;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwbGljYXRpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJhcHBsaWNhdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw4Q0FBOEM7QUFDOUMscURBQWtEO0FBRXZCLG9HQUZsQiwrQkFBYyxPQUV1QjtBQThEOUM7O0dBRUc7QUFDSCxNQUFhLFdBQVksU0FBUSxHQUFHLENBQUMsUUFBUTtJQWlCekM7Ozs7OztPQU1HO0lBQ0gsWUFBWSxLQUFvQixFQUFFLEVBQVUsRUFBRSxLQUF1QixFQUFFLG1DQUEyQyxJQUFJO1FBQ2xILEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFakIsTUFBTSxjQUFjLEdBQUcsSUFBSSwrQkFBYyxDQUFDLElBQUksRUFBRSxFQUFFLEVBQUc7WUFDakQsWUFBWSxFQUFFLEtBQUssQ0FBQyxZQUFZO1lBQ2hDLGVBQWUsRUFBRSxLQUFLLENBQUMsZUFBZTtZQUN0QyxlQUFlLEVBQUUsS0FBSyxDQUFDLGVBQWU7WUFDdEMsV0FBVyxFQUFFLEtBQUssQ0FBQyxXQUFXO1lBQzlCLGVBQWUsRUFBRSxLQUFLLENBQUMsZUFBZTtZQUN0QyxPQUFPLEVBQUUsS0FBSyxDQUFDLE9BQU87WUFDdEIsY0FBYyxFQUFFLEtBQUssQ0FBQyxjQUFjO1lBQ3BDLFNBQVMsRUFBRSxLQUFLLENBQUMsU0FBUztZQUMxQixXQUFXLEVBQUUsS0FBSyxDQUFDLFdBQVcsS0FBSyxTQUFTLElBQUksS0FBSyxDQUFDLFdBQVcsS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFdBQVc7WUFDdEcsV0FBVyxFQUFFLEtBQUssQ0FBQyxXQUFXO1NBQ2pDLEVBQUUsZ0NBQWdDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO1FBQ3BGLElBQUksQ0FBQyxRQUFRLEdBQUcsY0FBYyxDQUFDO1FBQy9CLElBQUksQ0FBQyxTQUFTLEdBQUcsY0FBYyxDQUFDLFNBQVMsQ0FBQztRQUMxQyxJQUFJLENBQUMsUUFBUSxHQUFHLGNBQWMsQ0FBQyxRQUFRLENBQUM7SUFDNUMsQ0FBQztDQUNKO0FBM0NELGtDQTJDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHJvcyBmcm9tICdAYWxpY2xvdWQvcm9zLWNkay1jb3JlJztcbmltcG9ydCB7IFJvc0FwcGxpY2F0aW9uIH0gZnJvbSAnLi9lZGFzLmdlbmVyYXRlZCc7XG4vLyBHZW5lcmF0ZWQgZnJvbSB0aGUgQWxpQ2xvdWQgUk9TIFJlc291cmNlIFNwZWNpZmljYXRpb25cbmV4cG9ydCB7IFJvc0FwcGxpY2F0aW9uIGFzIEFwcGxpY2F0aW9uUHJvcGVydHkgfTtcblxuLyoqXG4gKiBQcm9wZXJ0aWVzIGZvciBkZWZpbmluZyBhIGBBTElZVU46OkVEQVM6OkFwcGxpY2F0aW9uYFxuICovXG5leHBvcnQgaW50ZXJmYWNlIEFwcGxpY2F0aW9uUHJvcHMge1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgYXBwbGljYXRpb25OYW1lOiBUaGUgYXBwbGljYXRpb24gbmFtZSAob25seSBhbGxvdyB0aGUgdXNlIG9mIG51bWJlcnMsIGxldHRlcnMsIC0sIF8sIHVwIHRvIDM2IGNoYXJhY3RlcnMpXG4gICAgICovXG4gICAgcmVhZG9ubHkgYXBwbGljYXRpb25OYW1lOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBjbHVzdGVySWQ6IENsdXN0ZXIgSUQgb2YgRUNTIGFwcGxpY2F0aW9uXG4gICAgICovXG4gICAgcmVhZG9ubHkgY2x1c3RlcklkOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBidWlsZFBhY2tJZDogRURBUy1Db250YWluZXIgY29uc3RydWN0IGEgcGFja2V0IG51bWJlciAoYXZhaWxhYmxlIHZlcnNpb24gbGlzdCBhY3F1aXJlZCB0aHJvdWdoIHRoZSBMaXN0QnVpbGRQYWNrIEFQSSAoQ29uZmlnSWQgb2YgcmVzcG9uc2UpIG9yIFwiY29udGFpbmVyIHZlcnNpb25cIiB0YWJsZSBcIkJ1aWxkaW5nIHBhY2tldCBudW1iZXJcIiBjb2x1bW4gYWNxdWlzaXRpb24pLiBXaGVuIGNyZWF0aW5nIEhTRiBhcHBsaWNhdGlvbiwgdGhpcyBwYXJhbWV0ZXIgbXVzdCBiZSBzcGVjaWZpZWRcbiAgICAgKi9cbiAgICByZWFkb25seSBidWlsZFBhY2tJZD86IG51bWJlciB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGNvbXBvbmVudElkczogQXBwbGljYXRpb24gY29tcG9uZW50IElEIChhdmFpbGFibGUgdGhyb3VnaCB0aGUgcXVlcnkgaW50ZXJmYWNlIHRvIG9idGFpbiBhIGxpc3Qgb2YgY29tcG9uZW50cyB0byB0aGUgaW50ZXJmYWNlIExpc3RDb21wb25lbnRzKSwgd2hlbiBjcmVhdGluZyB0aGUgYXBwbGljYXRpb24gcnVudGltZSBlbnZpcm9ubWVudCB1c2luZyBBcGFjaGUgVG9tY2F0ICh3YXIgcGFja2V0IGZvcm1hdCBEdWJib1xuICAgICAqIEFwcGxpY2F0aW9uIHJlcXVpcmVkKSBvciBzdGFuZGFyZCBKYXZhIGFwcGxpY2F0aW9uIChqYXIgcGFja2FnZSBmb3JtYXQgU3ByaW5nIEJvb3QgLyBTcHJpbmcgQ2xvdWQgYXBwbGljYXRpb25zIHJlcXVpcmUpIHlvdSBuZWVkIHRvIHNwZWNpZnkgd2hlbiB0aGUgb3BlcmF0aW5nIGVudmlyb25tZW50LiBDb21tb25seSB1c2VkIGFwcGxpY2F0aW9uIGNvbXBvbmVudCBJRCBhbmQgbWVhbmluZzpcbiAgICAgKiA0IHJlcHJlc2VudHMgQXBhY2hlIFRvbWNhdCA3LjAuOTEsNyByZXByZXNlbnRlZCBBcGFjaGUgVG9tY2F0IDguNS40Miw1IHJlcHJlc2VudGVkIE9wZW5KREsgMS44LngsIDYgcmVwcmVzZW50cyBPcGVuSkRLXG4gICAgICogMS43LnhcbiAgICAgKi9cbiAgICByZWFkb25seSBjb21wb25lbnRJZHM/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBkZXNjcmlwdGlvbjogRGVzY3JpcHRpdmUgaW5mb3JtYXRpb25cbiAgICAgKi9cbiAgICByZWFkb25seSBkZXNjcmlwdGlvbj86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGVjdUluZm86IE1hY2hpbmUgY2FwYWNpdHkgaXMgbmVlZGVkIGVjdV9pZCAoRUNTIEV4YW1wbGVzIGludHJvZHVjaW5nIGFub3RoZXIgdW5pcXVlIGlkZW50aXR5IEVEQVMgRURBUyksIHRoZSBwbHVyYWxpdHkgb2YgXCIsXCIgc2VwYXJhdGVkIChieSBxdWVyeWluZyBMaXN0U2NhbGVPdXRFY3Ugd2hlcmVpbiBlY3VfaWRcbiAgICAgKiBJbnRlcmZhY2UgdG8gb2J0YWluKS5cbiAgICAgKi9cbiAgICByZWFkb25seSBlY3VJbmZvPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgaGVhbHRoQ2hlY2tVcmw6IEFwcGxpY2F0aW9uIEhlYWx0aCBDaGVjayBVUkxcbiAgICAgKi9cbiAgICByZWFkb25seSBoZWFsdGhDaGVja1VybD86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGxvZ2ljYWxSZWdpb25JZDogTmFtZXNwYWNlIElEXG4gICAgICovXG4gICAgcmVhZG9ubHkgbG9naWNhbFJlZ2lvbklkPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgcGFja2FnZVR5cGU6IEFwcGxpY2F0aW9uIHBhY2tldCBmb3JtYXQsIHBvc3NpYmxlIHZhbHVlczogd2FyIG9yIGphclxuICAgICAqL1xuICAgIHJlYWRvbmx5IHBhY2thZ2VUeXBlPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgcmVzb3VyY2VHcm91cElkOiBSZXNvdXJjZSBncm91cCBpZC5cbiAgICAgKi9cbiAgICByZWFkb25seSByZXNvdXJjZUdyb3VwSWQ/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG59XG5cbi8qKlxuICogQSBST1MgcmVzb3VyY2UgdHlwZTogIGBBTElZVU46OkVEQVM6OkFwcGxpY2F0aW9uYFxuICovXG5leHBvcnQgY2xhc3MgQXBwbGljYXRpb24gZXh0ZW5kcyByb3MuUmVzb3VyY2Uge1xuXG4gICAgLyoqXG4gICAgICogQSBmYWN0b3J5IG1ldGhvZCB0aGF0IGNyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgdGhpcyBjbGFzcyBmcm9tIGFuIG9iamVjdFxuICAgICAqIGNvbnRhaW5pbmcgdGhlIHByb3BlcnRpZXMgb2YgdGhpcyBST1MgcmVzb3VyY2UsIHdoaWNoIHdpbGwgYmUgYXNzaWduZWQgdG8gUk9TIHJlc291cmNlLlxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIEFwcElkOiBBcHBsaWNhdGlvbiBJZCwgYSB1bmlxdWUgaWRlbnRpZmllciBFREFTIGFwcGxpY2F0aW9uXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJBcHBJZDogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIFBvcnQ6IEFwcGxpY2F0aW9uIHBvcnRcbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0clBvcnQ6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBgQUxJWVVOOjpFREFTOjpBcHBsaWNhdGlvbmAuXG4gICAgICpcbiAgICAgKiBQYXJhbSBzY29wZSAtIHNjb3BlIGluIHdoaWNoIHRoaXMgcmVzb3VyY2UgaXMgZGVmaW5lZFxuICAgICAqIFBhcmFtIGlkICAgIC0gc2NvcGVkIGlkIG9mIHRoZSByZXNvdXJjZVxuICAgICAqIFBhcmFtIHByb3BzIC0gcmVzb3VyY2UgcHJvcGVydGllc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiByb3MuQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogQXBwbGljYXRpb25Qcm9wcywgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6Ym9vbGVhbiA9IHRydWUpIHtcbiAgICAgICAgc3VwZXIoc2NvcGUsIGlkKTtcblxuICAgICAgICBjb25zdCByb3NBcHBsaWNhdGlvbiA9IG5ldyBSb3NBcHBsaWNhdGlvbih0aGlzLCBpZCwgIHtcbiAgICAgICAgICAgIGNvbXBvbmVudElkczogcHJvcHMuY29tcG9uZW50SWRzLFxuICAgICAgICAgICAgbG9naWNhbFJlZ2lvbklkOiBwcm9wcy5sb2dpY2FsUmVnaW9uSWQsXG4gICAgICAgICAgICBhcHBsaWNhdGlvbk5hbWU6IHByb3BzLmFwcGxpY2F0aW9uTmFtZSxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBwcm9wcy5kZXNjcmlwdGlvbixcbiAgICAgICAgICAgIHJlc291cmNlR3JvdXBJZDogcHJvcHMucmVzb3VyY2VHcm91cElkLFxuICAgICAgICAgICAgZWN1SW5mbzogcHJvcHMuZWN1SW5mbyxcbiAgICAgICAgICAgIGhlYWx0aENoZWNrVXJsOiBwcm9wcy5oZWFsdGhDaGVja1VybCxcbiAgICAgICAgICAgIGNsdXN0ZXJJZDogcHJvcHMuY2x1c3RlcklkLFxuICAgICAgICAgICAgcGFja2FnZVR5cGU6IHByb3BzLnBhY2thZ2VUeXBlID09PSB1bmRlZmluZWQgfHwgcHJvcHMucGFja2FnZVR5cGUgPT09IG51bGwgPyAnd2FyJyA6IHByb3BzLnBhY2thZ2VUeXBlLFxuICAgICAgICAgICAgYnVpbGRQYWNrSWQ6IHByb3BzLmJ1aWxkUGFja0lkLFxuICAgICAgICB9LCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCAmJiB0aGlzLnN0YWNrLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50KTtcbiAgICAgICAgdGhpcy5yZXNvdXJjZSA9IHJvc0FwcGxpY2F0aW9uO1xuICAgICAgICB0aGlzLmF0dHJBcHBJZCA9IHJvc0FwcGxpY2F0aW9uLmF0dHJBcHBJZDtcbiAgICAgICAgdGhpcy5hdHRyUG9ydCA9IHJvc0FwcGxpY2F0aW9uLmF0dHJQb3J0O1xuICAgIH1cbn1cbiJdfQ==