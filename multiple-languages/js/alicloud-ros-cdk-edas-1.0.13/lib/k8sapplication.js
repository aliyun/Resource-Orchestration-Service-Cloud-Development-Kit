"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.K8sApplication = exports.K8sApplicationProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const edas_generated_1 = require("./edas.generated");
Object.defineProperty(exports, "K8sApplicationProperty", { enumerable: true, get: function () { return edas_generated_1.RosK8sApplication; } });
/**
 * A ROS resource type:  `ALIYUN::EDAS::K8sApplication`
 */
class K8sApplication extends ros.Resource {
    /**
     * Create a new `ALIYUN::EDAS::K8sApplication`.
     *
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosK8sApplication = new edas_generated_1.RosK8sApplication(this, id, {
            logicalRegionId: props.logicalRegionId,
            nasId: props.nasId,
            liveness: props.liveness,
            intranetSlbId: props.intranetSlbId,
            webContainer: props.webContainer,
            limitCpu: props.limitCpu,
            slsConfigs: props.slsConfigs,
            intranetSlbProtocol: props.intranetSlbProtocol,
            webContainerConfig: props.webContainerConfig,
            packageVersion: props.packageVersion,
            appName: props.appName,
            jdk: props.jdk,
            internetSlbId: props.internetSlbId,
            preStop: props.preStop,
            internetSlbPort: props.internetSlbPort,
            readiness: props.readiness,
            deployAcrossNodes: props.deployAcrossNodes,
            requestsMem: props.requestsMem,
            packageType: props.packageType,
            useBodyEncoding: props.useBodyEncoding,
            javaStartUpConfig: props.javaStartUpConfig,
            isMultilingualApp: props.isMultilingualApp,
            requestsCpu: props.requestsCpu,
            commandArgs: props.commandArgs,
            storageType: props.storageType,
            clusterId: props.clusterId,
            timeout: props.timeout,
            envs: props.envs,
            imageUrl: props.imageUrl,
            deployAcrossZones: props.deployAcrossZones,
            postStart: props.postStart,
            internetTargetPort: props.internetTargetPort,
            replicas: props.replicas === undefined || props.replicas === null ? 1 : props.replicas,
            namespace: props.namespace,
            applicationDescription: props.applicationDescription,
            uriEncoding: props.uriEncoding,
            intranetTargetPort: props.intranetTargetPort,
            mountDescs: props.mountDescs,
            localVolume: props.localVolume,
            edasContainerVersion: props.edasContainerVersion,
            runtimeClassName: props.runtimeClassName,
            command: props.command,
            internetSlbProtocol: props.internetSlbProtocol,
            packageUrl: props.packageUrl,
            intranetSlbPort: props.intranetSlbPort,
            repoId: props.repoId,
            enableAhas: props.enableAhas,
            limitMem: props.limitMem,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosK8sApplication;
        this.attrAppId = rosK8sApplication.attrAppId;
        this.attrAppName = rosK8sApplication.attrAppName;
        this.attrChangeOrderId = rosK8sApplication.attrChangeOrderId;
        this.attrClusterId = rosK8sApplication.attrClusterId;
        this.attrCsClusterId = rosK8sApplication.attrCsClusterId;
    }
}
exports.K8sApplication = K8sApplication;
//# sourceMappingURL=data:application/json;base64,