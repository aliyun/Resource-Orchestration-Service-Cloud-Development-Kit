"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BasicAcceleratorIpEndpointRelation = exports.BasicAcceleratorIpEndpointRelationProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ga_generated_1 = require("./ga.generated");
Object.defineProperty(exports, "BasicAcceleratorIpEndpointRelationProperty", { enumerable: true, get: function () { return ga_generated_1.RosBasicAcceleratorIpEndpointRelation; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::GA::BasicAcceleratorIpEndpointRelation`, which is used to create a mapping between an accelerated IP address and an endpoint for a basic Global Accelerator (GA) instance.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosBasicAcceleratorIpEndpointRelation`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-ga-basicacceleratoripendpointrelation
 */
class BasicAcceleratorIpEndpointRelation extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosBasicAcceleratorIpEndpointRelation = new ga_generated_1.RosBasicAcceleratorIpEndpointRelation(this, id, {
            accelerateIpId: props.accelerateIpId,
            endpointId: props.endpointId,
            acceleratorId: props.acceleratorId,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosBasicAcceleratorIpEndpointRelation;
        this.attrAccelerateIpId = rosBasicAcceleratorIpEndpointRelation.attrAccelerateIpId;
        this.attrAcceleratorId = rosBasicAcceleratorIpEndpointRelation.attrAcceleratorId;
        this.attrEndpointId = rosBasicAcceleratorIpEndpointRelation.attrEndpointId;
    }
}
exports.BasicAcceleratorIpEndpointRelation = BasicAcceleratorIpEndpointRelation;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzaWNhY2NlbGVyYXRvcmlwZW5kcG9pbnRyZWxhdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImJhc2ljYWNjZWxlcmF0b3JpcGVuZHBvaW50cmVsYXRpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsOENBQThDO0FBQzlDLGlEQUF1RTtBQUVyQiwySEFGekMsb0RBQXFDLE9BRThDO0FBd0I1Rjs7OztHQUlHO0FBQ0gsTUFBYSxrQ0FBbUMsU0FBUSxHQUFHLENBQUMsUUFBUTtJQXFCaEU7Ozs7T0FJRztJQUNILFlBQVksS0FBb0IsRUFBRSxFQUFVLEVBQUUsS0FBOEMsRUFBRSxtQ0FBMkMsSUFBSTtRQUN6SSxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ2pCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQ2IsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLGdDQUFnQyxHQUFHLGdDQUFnQyxDQUFDO1FBRXpFLE1BQU0scUNBQXFDLEdBQUcsSUFBSSxvREFBcUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFHO1lBQy9GLGNBQWMsRUFBRSxLQUFLLENBQUMsY0FBYztZQUNwQyxVQUFVLEVBQUUsS0FBSyxDQUFDLFVBQVU7WUFDNUIsYUFBYSxFQUFFLEtBQUssQ0FBQyxhQUFhO1NBQ3JDLEVBQUUsZ0NBQWdDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO1FBQ3BGLElBQUksQ0FBQyxRQUFRLEdBQUcscUNBQXFDLENBQUM7UUFDdEQsSUFBSSxDQUFDLGtCQUFrQixHQUFHLHFDQUFxQyxDQUFDLGtCQUFrQixDQUFDO1FBQ25GLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxxQ0FBcUMsQ0FBQyxpQkFBaUIsQ0FBQztRQUNqRixJQUFJLENBQUMsY0FBYyxHQUFHLHFDQUFxQyxDQUFDLGNBQWMsQ0FBQztJQUMvRSxDQUFDO0NBQ0o7QUEzQ0QsZ0ZBMkNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcm9zIGZyb20gJ0BhbGljbG91ZC9yb3MtY2RrLWNvcmUnO1xuaW1wb3J0IHsgUm9zQmFzaWNBY2NlbGVyYXRvcklwRW5kcG9pbnRSZWxhdGlvbiB9IGZyb20gJy4vZ2EuZ2VuZXJhdGVkJztcbi8vIEdlbmVyYXRlZCBmcm9tIHRoZSBBbGlDbG91ZCBST1MgUmVzb3VyY2UgU3BlY2lmaWNhdGlvblxuZXhwb3J0IHsgUm9zQmFzaWNBY2NlbGVyYXRvcklwRW5kcG9pbnRSZWxhdGlvbiBhcyBCYXNpY0FjY2VsZXJhdG9ySXBFbmRwb2ludFJlbGF0aW9uUHJvcGVydHkgfTtcblxuLyoqXG4gKiBQcm9wZXJ0aWVzIGZvciBkZWZpbmluZyBhIGBCYXNpY0FjY2VsZXJhdG9ySXBFbmRwb2ludFJlbGF0aW9uYC5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvYWxpeXVuLWdhLWJhc2ljYWNjZWxlcmF0b3JpcGVuZHBvaW50cmVsYXRpb25cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBCYXNpY0FjY2VsZXJhdG9ySXBFbmRwb2ludFJlbGF0aW9uUHJvcHMge1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgYWNjZWxlcmF0ZUlwSWQ6IFRoZSBJRCBvZiB0aGUgYWNjZWxlcmF0ZWQgSVAgYWRkcmVzcy5cbiAgICAgKi9cbiAgICByZWFkb25seSBhY2NlbGVyYXRlSXBJZDogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgYWNjZWxlcmF0b3JJZDogVGhlIElEIG9mIHRoZSBiYXNpYyBHQSBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICByZWFkb25seSBhY2NlbGVyYXRvcklkOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBlbmRwb2ludElkOiBUaGUgSUQgb2YgdGhlIGVuZHBvaW50LlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGVuZHBvaW50SWQ6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcbn1cblxuLyoqXG4gKiBUaGlzIGNsYXNzIGVuY2Fwc3VsYXRlcyBhbmQgZXh0ZW5kcyB0aGUgUk9TIHJlc291cmNlIHR5cGUgYEFMSVlVTjo6R0E6OkJhc2ljQWNjZWxlcmF0b3JJcEVuZHBvaW50UmVsYXRpb25gLCB3aGljaCBpcyB1c2VkIHRvIGNyZWF0ZSBhIG1hcHBpbmcgYmV0d2VlbiBhbiBhY2NlbGVyYXRlZCBJUCBhZGRyZXNzIGFuZCBhbiBlbmRwb2ludCBmb3IgYSBiYXNpYyBHbG9iYWwgQWNjZWxlcmF0b3IgKEdBKSBpbnN0YW5jZS5cbiAqIEBOb3RlIFRoaXMgY2xhc3MgbWF5IGhhdmUgc29tZSBuZXcgZnVuY3Rpb25zIHRvIGZhY2lsaXRhdGUgZGV2ZWxvcG1lbnQsIHNvIGl0IGlzIHJlY29tbWVuZGVkIHRvIHVzZSB0aGlzIGNsYXNzIGluc3RlYWQgb2YgYFJvc0Jhc2ljQWNjZWxlcmF0b3JJcEVuZHBvaW50UmVsYXRpb25gZm9yIGEgbW9yZSBjb252ZW5pZW50IGRldmVsb3BtZW50IGV4cGVyaWVuY2UuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2FsaXl1bi1nYS1iYXNpY2FjY2VsZXJhdG9yaXBlbmRwb2ludHJlbGF0aW9uXG4gKi9cbmV4cG9ydCBjbGFzcyBCYXNpY0FjY2VsZXJhdG9ySXBFbmRwb2ludFJlbGF0aW9uIGV4dGVuZHMgcm9zLlJlc291cmNlIHtcbiAgICBwcm90ZWN0ZWQgc2NvcGU6IHJvcy5Db25zdHJ1Y3Q7XG4gICAgcHJvdGVjdGVkIGlkOiBzdHJpbmc7XG4gICAgcHJvdGVjdGVkIHByb3BzOiBCYXNpY0FjY2VsZXJhdG9ySXBFbmRwb2ludFJlbGF0aW9uUHJvcHM7XG4gICAgcHJvdGVjdGVkIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OiBib29sZWFuO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIEFjY2VsZXJhdGVJcElkOiBUaGUgSUQgb2YgdGhlIGFjY2VsZXJhdGVkIElQIGFkZHJlc3MuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJBY2NlbGVyYXRlSXBJZDogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIEFjY2VsZXJhdG9ySWQ6IFRoZSBJRCBvZiB0aGUgYmFzaWMgR0EgaW5zdGFuY2UuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJBY2NlbGVyYXRvcklkOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgRW5kcG9pbnRJZDogVGhlIElEIG9mIHRoZSBlbmRwb2ludC5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckVuZHBvaW50SWQ6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFBhcmFtIHNjb3BlIC0gc2NvcGUgaW4gd2hpY2ggdGhpcyByZXNvdXJjZSBpcyBkZWZpbmVkXG4gICAgICogUGFyYW0gaWQgICAgLSBzY29wZWQgaWQgb2YgdGhlIHJlc291cmNlXG4gICAgICogUGFyYW0gcHJvcHMgLSByZXNvdXJjZSBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IHJvcy5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBCYXNpY0FjY2VsZXJhdG9ySXBFbmRwb2ludFJlbGF0aW9uUHJvcHMsIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OmJvb2xlYW4gPSB0cnVlKSB7XG4gICAgICAgIHN1cGVyKHNjb3BlLCBpZCk7XG4gICAgICAgIHRoaXMuc2NvcGUgPSBzY29wZTtcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xuICAgICAgICB0aGlzLnByb3BzID0gcHJvcHM7XG4gICAgICAgIHRoaXMuZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgPSBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDtcblxuICAgICAgICBjb25zdCByb3NCYXNpY0FjY2VsZXJhdG9ySXBFbmRwb2ludFJlbGF0aW9uID0gbmV3IFJvc0Jhc2ljQWNjZWxlcmF0b3JJcEVuZHBvaW50UmVsYXRpb24odGhpcywgaWQsICB7XG4gICAgICAgICAgICBhY2NlbGVyYXRlSXBJZDogcHJvcHMuYWNjZWxlcmF0ZUlwSWQsXG4gICAgICAgICAgICBlbmRwb2ludElkOiBwcm9wcy5lbmRwb2ludElkLFxuICAgICAgICAgICAgYWNjZWxlcmF0b3JJZDogcHJvcHMuYWNjZWxlcmF0b3JJZCxcbiAgICAgICAgfSwgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgJiYgdGhpcy5zdGFjay5lbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCk7XG4gICAgICAgIHRoaXMucmVzb3VyY2UgPSByb3NCYXNpY0FjY2VsZXJhdG9ySXBFbmRwb2ludFJlbGF0aW9uO1xuICAgICAgICB0aGlzLmF0dHJBY2NlbGVyYXRlSXBJZCA9IHJvc0Jhc2ljQWNjZWxlcmF0b3JJcEVuZHBvaW50UmVsYXRpb24uYXR0ckFjY2VsZXJhdGVJcElkO1xuICAgICAgICB0aGlzLmF0dHJBY2NlbGVyYXRvcklkID0gcm9zQmFzaWNBY2NlbGVyYXRvcklwRW5kcG9pbnRSZWxhdGlvbi5hdHRyQWNjZWxlcmF0b3JJZDtcbiAgICAgICAgdGhpcy5hdHRyRW5kcG9pbnRJZCA9IHJvc0Jhc2ljQWNjZWxlcmF0b3JJcEVuZHBvaW50UmVsYXRpb24uYXR0ckVuZHBvaW50SWQ7XG4gICAgfVxufVxuIl19