"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImagePipeline = exports.ImagePipelineProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ecs_generated_1 = require("./ecs.generated");
Object.defineProperty(exports, "ImagePipelineProperty", { enumerable: true, get: function () { return ecs_generated_1.RosImagePipeline; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::ECS::ImagePipeline`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosImagePipeline`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-ecs-imagepipeline
 */
class ImagePipeline extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosImagePipeline = new ecs_generated_1.RosImagePipeline(this, id, {
            baseImageType: props.baseImageType,
            description: props.description,
            resourceGroupId: props.resourceGroupId,
            systemDiskSize: props.systemDiskSize,
            vSwitchId: props.vSwitchId,
            addAccount: props.addAccount,
            name: props.name,
            executePipeline: props.executePipeline === undefined || props.executePipeline === null ? true : props.executePipeline,
            deleteInstanceOnFailure: props.deleteInstanceOnFailure,
            imageName: props.imageName,
            toRegionId: props.toRegionId,
            internetMaxBandwidthOut: props.internetMaxBandwidthOut,
            instanceType: props.instanceType,
            tags: props.tags,
            buildContent: props.buildContent,
            baseImage: props.baseImage,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosImagePipeline;
        this.attrImagePipelineId = rosImagePipeline.attrImagePipelineId;
    }
}
exports.ImagePipeline = ImagePipeline;
//# sourceMappingURL=data:application/json;base64,