"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SecurityGroupIngress = exports.SecurityGroupIngressProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ecs_generated_1 = require("./ecs.generated");
Object.defineProperty(exports, "SecurityGroupIngressProperty", { enumerable: true, get: function () { return ecs_generated_1.RosSecurityGroupIngress; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::ECS::SecurityGroupIngress`, which is used to create an inbound rule for a security group.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosSecurityGroupIngress`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-ecs-securitygroupingress
 */
class SecurityGroupIngress extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosSecurityGroupIngress = new ecs_generated_1.RosSecurityGroupIngress(this, id, {
            sourceGroupId: props.sourceGroupId,
            policy: props.policy,
            description: props.description,
            sourcePortRange: props.sourcePortRange,
            priority: props.priority === undefined || props.priority === null ? 1 : props.priority,
            securityGroupId: props.securityGroupId,
            sourceGroupOwnerId: props.sourceGroupOwnerId,
            ipv6SourceCidrIp: props.ipv6SourceCidrIp,
            nicType: props.nicType,
            portRange: props.portRange,
            sourceCidrIp: props.sourceCidrIp,
            ipProtocol: props.ipProtocol,
            sourcePrefixListId: props.sourcePrefixListId,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosSecurityGroupIngress;
    }
}
exports.SecurityGroupIngress = SecurityGroupIngress;
//# sourceMappingURL=data:application/json;base64,