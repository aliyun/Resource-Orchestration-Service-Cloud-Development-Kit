"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ElasticityAssurance = exports.ElasticityAssuranceProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ecs_generated_1 = require("./ecs.generated");
Object.defineProperty(exports, "ElasticityAssuranceProperty", { enumerable: true, get: function () { return ecs_generated_1.RosElasticityAssurance; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::ECS::ElasticityAssurance`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosElasticityAssurance`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-ecs-elasticityassurance
 */
class ElasticityAssurance extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosElasticityAssurance = new ecs_generated_1.RosElasticityAssurance(this, id, {
            description: props.description,
            instanceAmount: props.instanceAmount,
            privatePoolOptions: props.privatePoolOptions,
            zoneId: props.zoneId,
            resourceGroupId: props.resourceGroupId,
            startTime: props.startTime,
            period: props.period,
            instanceTypes: props.instanceTypes,
            tags: props.tags,
            periodUnit: props.periodUnit,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosElasticityAssurance;
        this.attrPrivatePoolOptionsId = rosElasticityAssurance.attrPrivatePoolOptionsId;
    }
}
exports.ElasticityAssurance = ElasticityAssurance;
//# sourceMappingURL=data:application/json;base64,