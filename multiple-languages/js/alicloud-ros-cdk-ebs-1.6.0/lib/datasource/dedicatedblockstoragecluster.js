"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DedicatedBlockStorageCluster = exports.DedicatedBlockStorageClusterProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ebs_generated_1 = require("./ebs.generated");
Object.defineProperty(exports, "DedicatedBlockStorageClusterProperty", { enumerable: true, get: function () { return ebs_generated_1.RosDedicatedBlockStorageCluster; } });
/**
 * This class encapsulates and extends the ROS resource type `DATASOURCE::EBS::DedicatedBlockStorageCluster`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosDedicatedBlockStorageCluster`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/datasource-ebs-dedicatedblockstoragecluster
 */
class DedicatedBlockStorageCluster extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosDedicatedBlockStorageCluster = new ebs_generated_1.RosDedicatedBlockStorageCluster(this, id, {
            dedicatedBlockStorageClusterId: props.dedicatedBlockStorageClusterId,
            refreshOptions: props.refreshOptions === undefined || props.refreshOptions === null ? 'Never' : props.refreshOptions,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosDedicatedBlockStorageCluster;
        this.attrAvailableCapacity = rosDedicatedBlockStorageCluster.attrAvailableCapacity;
        this.attrCategory = rosDedicatedBlockStorageCluster.attrCategory;
        this.attrCreateTime = rosDedicatedBlockStorageCluster.attrCreateTime;
        this.attrDedicatedBlockStorageClusterId = rosDedicatedBlockStorageCluster.attrDedicatedBlockStorageClusterId;
        this.attrDedicatedBlockStorageClusterName = rosDedicatedBlockStorageCluster.attrDedicatedBlockStorageClusterName;
        this.attrDeliveryCapacity = rosDedicatedBlockStorageCluster.attrDeliveryCapacity;
        this.attrDescription = rosDedicatedBlockStorageCluster.attrDescription;
        this.attrExpiredTime = rosDedicatedBlockStorageCluster.attrExpiredTime;
        this.attrPerformanceLevel = rosDedicatedBlockStorageCluster.attrPerformanceLevel;
        this.attrResourceGroupId = rosDedicatedBlockStorageCluster.attrResourceGroupId;
        this.attrSupportedCategory = rosDedicatedBlockStorageCluster.attrSupportedCategory;
        this.attrTags = rosDedicatedBlockStorageCluster.attrTags;
        this.attrTotalCapacity = rosDedicatedBlockStorageCluster.attrTotalCapacity;
        this.attrType = rosDedicatedBlockStorageCluster.attrType;
        this.attrUsedCapacity = rosDedicatedBlockStorageCluster.attrUsedCapacity;
        this.attrZoneId = rosDedicatedBlockStorageCluster.attrZoneId;
    }
}
exports.DedicatedBlockStorageCluster = DedicatedBlockStorageCluster;
//# sourceMappingURL=data:application/json;base64,