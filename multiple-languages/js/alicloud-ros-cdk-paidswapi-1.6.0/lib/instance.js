"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Instance = exports.InstanceProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const paidswapi_generated_1 = require("./paidswapi.generated");
Object.defineProperty(exports, "InstanceProperty", { enumerable: true, get: function () { return paidswapi_generated_1.RosInstance; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::PaiDswApi::Instance`, which is used to create a Data Science Workshop (DSW) instance.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosInstance`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-paidswapi-instance
 */
class Instance extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosInstance = new paidswapi_generated_1.RosInstance(this, id, {
            datasets: props.datasets,
            instanceName: props.instanceName,
            environmentVariables: props.environmentVariables,
            accessibility: props.accessibility,
            workspaceId: props.workspaceId,
            imageUrl: props.imageUrl,
            ecsSpec: props.ecsSpec,
            labels: props.labels,
            saveImage: props.saveImage,
            userVpc: props.userVpc,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosInstance;
        this.attrAccessibility = rosInstance.attrAccessibility;
        this.attrDatasets = rosInstance.attrDatasets;
        this.attrEcsSpec = rosInstance.attrEcsSpec;
        this.attrEnvironmentVariables = rosInstance.attrEnvironmentVariables;
        this.attrImageUrl = rosInstance.attrImageUrl;
        this.attrInstanceId = rosInstance.attrInstanceId;
        this.attrInstanceName = rosInstance.attrInstanceName;
        this.attrInstanceUrl = rosInstance.attrInstanceUrl;
        this.attrJupyterlabUrl = rosInstance.attrJupyterlabUrl;
        this.attrLabels = rosInstance.attrLabels;
        this.attrPaymentType = rosInstance.attrPaymentType;
        this.attrTerminalUrl = rosInstance.attrTerminalUrl;
        this.attrUserVpc = rosInstance.attrUserVpc;
        this.attrWebIdeUrl = rosInstance.attrWebIdeUrl;
        this.attrWorkspaceId = rosInstance.attrWorkspaceId;
    }
}
exports.Instance = Instance;
//# sourceMappingURL=data:application/json;base64,