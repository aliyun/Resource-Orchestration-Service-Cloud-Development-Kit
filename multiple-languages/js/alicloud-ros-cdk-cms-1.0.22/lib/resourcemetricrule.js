"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResourceMetricRule = exports.ResourceMetricRuleProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const cms_generated_1 = require("./cms.generated");
Object.defineProperty(exports, "ResourceMetricRuleProperty", { enumerable: true, get: function () { return cms_generated_1.RosResourceMetricRule; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::CMS::ResourceMetricRule`, which is used to create an alert rule for a metric of a resource.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosResourceMetricRule`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-cms-resourcemetricrule
 */
class ResourceMetricRule extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosResourceMetricRule = new cms_generated_1.RosResourceMetricRule(this, id, {
            noEffectiveInterval: props.noEffectiveInterval,
            contactGroups: props.contactGroups,
            silenceTime: props.silenceTime,
            ruleId: props.ruleId,
            period: props.period,
            prometheus: props.prometheus,
            labels: props.labels,
            effectiveInterval: props.effectiveInterval,
            noDataPolicy: props.noDataPolicy,
            namespace: props.namespace,
            metricName: props.metricName,
            deletionForce: props.deletionForce === undefined || props.deletionForce === null ? false : props.deletionForce,
            escalations: props.escalations,
            emailSubject: props.emailSubject,
            compositeExpression: props.compositeExpression,
            webhook: props.webhook,
            resources: props.resources,
            ruleName: props.ruleName,
            interval: props.interval,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosResourceMetricRule;
        this.attrRuleId = rosResourceMetricRule.attrRuleId;
        this.attrRuleName = rosResourceMetricRule.attrRuleName;
    }
}
exports.ResourceMetricRule = ResourceMetricRule;
//# sourceMappingURL=data:application/json;base64,