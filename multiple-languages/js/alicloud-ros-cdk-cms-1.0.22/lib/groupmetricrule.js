"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GroupMetricRule = exports.GroupMetricRuleProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const cms_generated_1 = require("./cms.generated");
Object.defineProperty(exports, "GroupMetricRuleProperty", { enumerable: true, get: function () { return cms_generated_1.RosGroupMetricRule; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::CMS::GroupMetricRule`, which is used to create an alert rule for an application group.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosGroupMetricRule`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-cms-groupmetricrule
 */
class GroupMetricRule extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosGroupMetricRule = new cms_generated_1.RosGroupMetricRule(this, id, {
            noEffectiveInterval: props.noEffectiveInterval,
            silenceTime: props.silenceTime,
            category: props.category,
            ruleId: props.ruleId,
            dimensions: props.dimensions,
            period: props.period,
            effectiveInterval: props.effectiveInterval,
            namespace: props.namespace,
            groupId: props.groupId,
            metricName: props.metricName,
            escalations: props.escalations,
            emailSubject: props.emailSubject,
            webhook: props.webhook,
            ruleName: props.ruleName,
            interval: props.interval,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosGroupMetricRule;
        this.attrRuleId = rosGroupMetricRule.attrRuleId;
    }
}
exports.GroupMetricRule = GroupMetricRule;
//# sourceMappingURL=data:application/json;base64,