"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DynamicTagGroup = exports.DynamicTagGroupProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const cms_generated_1 = require("./cms.generated");
Object.defineProperty(exports, "DynamicTagGroupProperty", { enumerable: true, get: function () { return cms_generated_1.RosDynamicTagGroup; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::CMS::DynamicTagGroup`, which is used to create a tag rule based on which cloud resources can be automatically added to an application group.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosDynamicTagGroup`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-cms-dynamictaggroup
 */
class DynamicTagGroup extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosDynamicTagGroup = new cms_generated_1.RosDynamicTagGroup(this, id, {
            contactGroupList: props.contactGroupList,
            matchExpressFilterRelation: props.matchExpressFilterRelation,
            enableSubscribeEvent: props.enableSubscribeEvent,
            templateIdList: props.templateIdList,
            tagKey: props.tagKey,
            enableInstallAgent: props.enableInstallAgent,
            matchExpress: props.matchExpress,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosDynamicTagGroup;
        this.attrDynamicTagRuleId = rosDynamicTagGroup.attrDynamicTagRuleId;
        this.attrTagKey = rosDynamicTagGroup.attrTagKey;
    }
}
exports.DynamicTagGroup = DynamicTagGroup;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pY3RhZ2dyb3VwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZHluYW1pY3RhZ2dyb3VwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDhDQUE4QztBQUM5QyxtREFBcUQ7QUFFdEIsd0dBRnRCLGtDQUFrQixPQUUyQjtBQXFEdEQ7Ozs7R0FJRztBQUNILE1BQWEsZUFBZ0IsU0FBUSxHQUFHLENBQUMsUUFBUTtJQVk3Qzs7OztPQUlHO0lBQ0gsWUFBWSxLQUFvQixFQUFFLEVBQVUsRUFBRSxLQUEyQixFQUFFLG1DQUEyQyxJQUFJO1FBQ3RILEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFakIsTUFBTSxrQkFBa0IsR0FBRyxJQUFJLGtDQUFrQixDQUFDLElBQUksRUFBRSxFQUFFLEVBQUc7WUFDekQsZ0JBQWdCLEVBQUUsS0FBSyxDQUFDLGdCQUFnQjtZQUN4QywwQkFBMEIsRUFBRSxLQUFLLENBQUMsMEJBQTBCO1lBQzVELG9CQUFvQixFQUFFLEtBQUssQ0FBQyxvQkFBb0I7WUFDaEQsY0FBYyxFQUFFLEtBQUssQ0FBQyxjQUFjO1lBQ3BDLE1BQU0sRUFBRSxLQUFLLENBQUMsTUFBTTtZQUNwQixrQkFBa0IsRUFBRSxLQUFLLENBQUMsa0JBQWtCO1lBQzVDLFlBQVksRUFBRSxLQUFLLENBQUMsWUFBWTtTQUNuQyxFQUFFLGdDQUFnQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztRQUNwRixJQUFJLENBQUMsUUFBUSxHQUFHLGtCQUFrQixDQUFDO1FBQ25DLElBQUksQ0FBQyxvQkFBb0IsR0FBRyxrQkFBa0IsQ0FBQyxvQkFBb0IsQ0FBQztRQUNwRSxJQUFJLENBQUMsVUFBVSxHQUFHLGtCQUFrQixDQUFDLFVBQVUsQ0FBQztJQUNwRCxDQUFDO0NBQ0o7QUFqQ0QsMENBaUNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcm9zIGZyb20gJ0BhbGljbG91ZC9yb3MtY2RrLWNvcmUnO1xuaW1wb3J0IHsgUm9zRHluYW1pY1RhZ0dyb3VwIH0gZnJvbSAnLi9jbXMuZ2VuZXJhdGVkJztcbi8vIEdlbmVyYXRlZCBmcm9tIHRoZSBBbGlDbG91ZCBST1MgUmVzb3VyY2UgU3BlY2lmaWNhdGlvblxuZXhwb3J0IHsgUm9zRHluYW1pY1RhZ0dyb3VwIGFzIER5bmFtaWNUYWdHcm91cFByb3BlcnR5IH07XG5cbi8qKlxuICogUHJvcGVydGllcyBmb3IgZGVmaW5pbmcgYSBgRHluYW1pY1RhZ0dyb3VwYC5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvYWxpeXVuLWNtcy1keW5hbWljdGFnZ3JvdXBcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBEeW5hbWljVGFnR3JvdXBQcm9wcyB7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBjb250YWN0R3JvdXBMaXN0OiBBbGFybSBjb250YWN0cy5cbiAgICAgKi9cbiAgICByZWFkb25seSBjb250YWN0R3JvdXBMaXN0OiBBcnJheTxzdHJpbmcgfCByb3MuSVJlc29sdmFibGU+IHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgdGFnS2V5OiBUYWcga2V5LlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHRhZ0tleTogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgZW5hYmxlSW5zdGFsbEFnZW50OiBXaGV0aGVyIHRvIGVuYWJsZSBpbml0aWFsIGluc3RhbGxhdGlvbiBtb25pdG9yaW5nIHBsdWcsIG5vdCBpbnN0YWxsZWQgYnkgZGVmYXVsdC4gVmFsdWVzIGFyZTpcbiAgICAgKiB0cnVlOiBlbmFibGUgaW5zdGFsbGF0aW9uXG4gICAgICogTm90ZSBJZiBFQ1MgZ2VuZXJhdGVkIGluc3RhbmNlcyBncm91cCBkb2VzIG5vdCBtb25pdG9yIHBsdWctaW4gaW5zdGFsbGVkIHdpbGwgYXR0ZW1wdCB0byBhdXRvbWF0aWNhbGx5IGluc3RhbGwuXG4gICAgICogZmFsc2U6IGRpc2FibGUgaW5zdGFsbGF0aW9uXG4gICAgICovXG4gICAgcmVhZG9ubHkgZW5hYmxlSW5zdGFsbEFnZW50PzogYm9vbGVhbiB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGVuYWJsZVN1YnNjcmliZUV2ZW50OiBXaGV0aGVyIHRoZSBldmVudCBzdWJzY3JpcHRpb24gaXMgZW5hYmxlZC4gVmFsdWVzIGFyZVxuICAgICAqIDp0cnVlOiBlbmFibGUgZXZlbnQgc3Vic2NyaXB0aW9uXG4gICAgICogZmFsc2U6IGRpc2FibGUgZXZlbnQgc3Vic2NyaXB0aW9uXG4gICAgICovXG4gICAgcmVhZG9ubHkgZW5hYmxlU3Vic2NyaWJlRXZlbnQ/OiBib29sZWFuIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgbWF0Y2hFeHByZXNzOiBNYXRjaGluZyBsaXN0LiBPbmx5IHN1cHBvcnRzIG9uZSBjdXJyZW50bHkuXG4gICAgICovXG4gICAgcmVhZG9ubHkgbWF0Y2hFeHByZXNzPzogQXJyYXk8Um9zRHluYW1pY1RhZ0dyb3VwLk1hdGNoRXhwcmVzc1Byb3BlcnR5IHwgcm9zLklSZXNvbHZhYmxlPiB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IG1hdGNoRXhwcmVzc0ZpbHRlclJlbGF0aW9uOiBUaGUgcmVsYXRpb25zaGlwIGJldHdlZW4gdGhlIGNvbmRpdGlvbmFsIGV4cHJlc3Npb25zLiBWYWx1ZXMgYXJlOlxuICAgICAqIGFuZDogdGhlIHJlbGF0aW9uc2hpcCBiZXR3ZWVuXG4gICAgICogb3I6IHRoZSByZWxhdGlvbnNoaXAgb3IgdGhlXG4gICAgICogRGVzY3JpcHRpb24gY3VycmVudGx5IHN1cHBvcnRzIG9ubHkgb25lIGNvbWJpbmF0aW9uIG9mIGNvbmRpdGlvbnMsIHRoZSBmb2xsb3ctdXAgQWxpIGNsb3VkIHdpbGwgc3VwcG9ydCBhIHZhcmlldHkgb2YgY29tYmluYXRpb25zIG9mIGNvbmRpdGlvbnMuXG4gICAgICovXG4gICAgcmVhZG9ubHkgbWF0Y2hFeHByZXNzRmlsdGVyUmVsYXRpb24/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSB0ZW1wbGF0ZUlkTGlzdDogQWxhcm0gdGVtcGxhdGUgSUQgbGlzdC5cbiAgICAgKiBXaGVuIHRoZSBhdXRvbWF0aWNhbGx5IGdlbmVyYXRlZCBhcHBsaWNhdGlvbiBncm91cCBzeW5jaHJvbml6ZXMgdGFncywgaXQgd2lsbCBnZW5lcmF0ZSBhbGFybSBydWxlcyBhY2NvcmRpbmcgdG8gdGhlIHNwZWNpZmllZCBhbGFybSB0ZW1wbGF0ZS5cbiAgICAgKi9cbiAgICByZWFkb25seSB0ZW1wbGF0ZUlkTGlzdD86IEFycmF5PHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZT4gfCByb3MuSVJlc29sdmFibGU7XG59XG5cbi8qKlxuICogVGhpcyBjbGFzcyBlbmNhcHN1bGF0ZXMgYW5kIGV4dGVuZHMgdGhlIFJPUyByZXNvdXJjZSB0eXBlIGBBTElZVU46OkNNUzo6RHluYW1pY1RhZ0dyb3VwYCwgd2hpY2ggaXMgdXNlZCB0byBjcmVhdGUgYSB0YWcgcnVsZSBiYXNlZCBvbiB3aGljaCBjbG91ZCByZXNvdXJjZXMgY2FuIGJlIGF1dG9tYXRpY2FsbHkgYWRkZWQgdG8gYW4gYXBwbGljYXRpb24gZ3JvdXAuXG4gKiBATm90ZSBUaGlzIGNsYXNzIG1heSBoYXZlIHNvbWUgbmV3IGZ1bmN0aW9ucyB0byBmYWNpbGl0YXRlIGRldmVsb3BtZW50LCBzbyBpdCBpcyByZWNvbW1lbmRlZCB0byB1c2UgdGhpcyBjbGFzcyBpbnN0ZWFkIG9mIGBSb3NEeW5hbWljVGFnR3JvdXBgZm9yIGEgbW9yZSBjb252ZW5pZW50IGRldmVsb3BtZW50IGV4cGVyaWVuY2UuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2FsaXl1bi1jbXMtZHluYW1pY3RhZ2dyb3VwXG4gKi9cbmV4cG9ydCBjbGFzcyBEeW5hbWljVGFnR3JvdXAgZXh0ZW5kcyByb3MuUmVzb3VyY2Uge1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIER5bmFtaWNUYWdSdWxlSWQ6IER5bmFtaWMgdGFnIHJ1bGUgSUQuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJEeW5hbWljVGFnUnVsZUlkOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgVGFnS2V5OiBUYWcga2V5LlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyVGFnS2V5OiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQYXJhbSBzY29wZSAtIHNjb3BlIGluIHdoaWNoIHRoaXMgcmVzb3VyY2UgaXMgZGVmaW5lZFxuICAgICAqIFBhcmFtIGlkICAgIC0gc2NvcGVkIGlkIG9mIHRoZSByZXNvdXJjZVxuICAgICAqIFBhcmFtIHByb3BzIC0gcmVzb3VyY2UgcHJvcGVydGllc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiByb3MuQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogRHluYW1pY1RhZ0dyb3VwUHJvcHMsIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OmJvb2xlYW4gPSB0cnVlKSB7XG4gICAgICAgIHN1cGVyKHNjb3BlLCBpZCk7XG5cbiAgICAgICAgY29uc3Qgcm9zRHluYW1pY1RhZ0dyb3VwID0gbmV3IFJvc0R5bmFtaWNUYWdHcm91cCh0aGlzLCBpZCwgIHtcbiAgICAgICAgICAgIGNvbnRhY3RHcm91cExpc3Q6IHByb3BzLmNvbnRhY3RHcm91cExpc3QsXG4gICAgICAgICAgICBtYXRjaEV4cHJlc3NGaWx0ZXJSZWxhdGlvbjogcHJvcHMubWF0Y2hFeHByZXNzRmlsdGVyUmVsYXRpb24sXG4gICAgICAgICAgICBlbmFibGVTdWJzY3JpYmVFdmVudDogcHJvcHMuZW5hYmxlU3Vic2NyaWJlRXZlbnQsXG4gICAgICAgICAgICB0ZW1wbGF0ZUlkTGlzdDogcHJvcHMudGVtcGxhdGVJZExpc3QsXG4gICAgICAgICAgICB0YWdLZXk6IHByb3BzLnRhZ0tleSxcbiAgICAgICAgICAgIGVuYWJsZUluc3RhbGxBZ2VudDogcHJvcHMuZW5hYmxlSW5zdGFsbEFnZW50LFxuICAgICAgICAgICAgbWF0Y2hFeHByZXNzOiBwcm9wcy5tYXRjaEV4cHJlc3MsXG4gICAgICAgIH0sIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ICYmIHRoaXMuc3RhY2suZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQpO1xuICAgICAgICB0aGlzLnJlc291cmNlID0gcm9zRHluYW1pY1RhZ0dyb3VwO1xuICAgICAgICB0aGlzLmF0dHJEeW5hbWljVGFnUnVsZUlkID0gcm9zRHluYW1pY1RhZ0dyb3VwLmF0dHJEeW5hbWljVGFnUnVsZUlkO1xuICAgICAgICB0aGlzLmF0dHJUYWdLZXkgPSByb3NEeW5hbWljVGFnR3JvdXAuYXR0clRhZ0tleTtcbiAgICB9XG59XG4iXX0=