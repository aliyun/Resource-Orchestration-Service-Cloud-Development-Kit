"use strict";
// Generated from the AliCloud ROS Resource Specification
Object.defineProperty(exports, "__esModule", { value: true });
exports.RosSmartAccessGatewayBinding = exports.RosSmartAccessGateway = exports.RosSerialNumberBinding = exports.RosQosPolicy = exports.RosQosCar = exports.RosQosAssociation = exports.RosQos = exports.RosGrantCcnToCen = exports.RosCloudConnectNetwork = exports.RosAppUser = exports.RosApp = exports.RosACLRule = exports.RosACLAssociation = exports.RosACL = void 0;
const ros = require("@alicloud/ros-cdk-core");
/**
 * Determine whether the given properties match those of a `RosACLProps`
 *
 * @param properties - the TypeScript properties of a `RosACLProps`
 *
 * @returns the result of the validation.
 */
function RosACLPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('name', ros.requiredValidator)(properties.name));
    errors.collect(ros.propertyValidator('name', ros.validateString)(properties.name));
    return errors.wrap('supplied properties not correct for "RosACLProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::SAG::ACL` resource
 *
 * @param properties - the TypeScript properties of a `RosACLProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::SAG::ACL` resource.
 */
// @ts-ignore TS6133
function rosACLPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosACLPropsValidator(properties).assertSuccess();
    }
    return {
        Name: ros.stringToRosTemplate(properties.name),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::SAG::ACL`, which is used to create an access control list (ACL).
 * @Note This class does not contain additional functions, so it is recommended to use the `ACL` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-sag-acl
 */
class RosACL extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosACL.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrAclId = this.getAtt('AclId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.name = props.name;
    }
    get rosProperties() {
        return {
            name: this.name,
        };
    }
    renderProperties(props) {
        return rosACLPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosACL = RosACL;
/**
 * The resource type name for this resource class.
 */
RosACL.ROS_RESOURCE_TYPE_NAME = "ALIYUN::SAG::ACL";
/**
 * Determine whether the given properties match those of a `RosACLAssociationProps`
 *
 * @param properties - the TypeScript properties of a `RosACLAssociationProps`
 *
 * @returns the result of the validation.
 */
function RosACLAssociationPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('aclId', ros.requiredValidator)(properties.aclId));
    errors.collect(ros.propertyValidator('aclId', ros.validateString)(properties.aclId));
    errors.collect(ros.propertyValidator('smartAgId', ros.requiredValidator)(properties.smartAgId));
    errors.collect(ros.propertyValidator('smartAgId', ros.validateString)(properties.smartAgId));
    return errors.wrap('supplied properties not correct for "RosACLAssociationProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::SAG::ACLAssociation` resource
 *
 * @param properties - the TypeScript properties of a `RosACLAssociationProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::SAG::ACLAssociation` resource.
 */
// @ts-ignore TS6133
function rosACLAssociationPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosACLAssociationPropsValidator(properties).assertSuccess();
    }
    return {
        AclId: ros.stringToRosTemplate(properties.aclId),
        SmartAGId: ros.stringToRosTemplate(properties.smartAgId),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::SAG::ACLAssociation`.
 * @Note This class does not contain additional functions, so it is recommended to use the `ACLAssociation` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-sag-aclassociation
 */
class RosACLAssociation extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosACLAssociation.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.aclId = props.aclId;
        this.smartAgId = props.smartAgId;
    }
    get rosProperties() {
        return {
            aclId: this.aclId,
            smartAgId: this.smartAgId,
        };
    }
    renderProperties(props) {
        return rosACLAssociationPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosACLAssociation = RosACLAssociation;
/**
 * The resource type name for this resource class.
 */
RosACLAssociation.ROS_RESOURCE_TYPE_NAME = "ALIYUN::SAG::ACLAssociation";
/**
 * Determine whether the given properties match those of a `RosACLRuleProps`
 *
 * @param properties - the TypeScript properties of a `RosACLRuleProps`
 *
 * @returns the result of the validation.
 */
function RosACLRulePropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('policy', ros.requiredValidator)(properties.policy));
    if (properties.policy && (typeof properties.policy) !== 'object') {
        errors.collect(ros.propertyValidator('policy', ros.validateAllowedValues)({
            data: properties.policy,
            allowedValues: ["accept", "drop"],
        }));
    }
    errors.collect(ros.propertyValidator('policy', ros.validateString)(properties.policy));
    if (properties.description && (Array.isArray(properties.description) || (typeof properties.description) === 'string')) {
        errors.collect(ros.propertyValidator('description', ros.validateLength)({
            data: properties.description.length,
            min: 1,
            max: 512,
        }));
    }
    errors.collect(ros.propertyValidator('description', ros.validateString)(properties.description));
    errors.collect(ros.propertyValidator('sourcePortRange', ros.requiredValidator)(properties.sourcePortRange));
    errors.collect(ros.propertyValidator('sourcePortRange', ros.validateString)(properties.sourcePortRange));
    errors.collect(ros.propertyValidator('sourceCidr', ros.requiredValidator)(properties.sourceCidr));
    errors.collect(ros.propertyValidator('sourceCidr', ros.validateString)(properties.sourceCidr));
    if (properties.priority && (typeof properties.priority) !== 'object') {
        errors.collect(ros.propertyValidator('priority', ros.validateRange)({
            data: properties.priority,
            min: 1,
            max: 100,
        }));
    }
    errors.collect(ros.propertyValidator('priority', ros.validateNumber)(properties.priority));
    errors.collect(ros.propertyValidator('aclId', ros.requiredValidator)(properties.aclId));
    errors.collect(ros.propertyValidator('aclId', ros.validateString)(properties.aclId));
    errors.collect(ros.propertyValidator('destPortRange', ros.requiredValidator)(properties.destPortRange));
    errors.collect(ros.propertyValidator('destPortRange', ros.validateString)(properties.destPortRange));
    errors.collect(ros.propertyValidator('direction', ros.requiredValidator)(properties.direction));
    if (properties.direction && (typeof properties.direction) !== 'object') {
        errors.collect(ros.propertyValidator('direction', ros.validateAllowedValues)({
            data: properties.direction,
            allowedValues: ["in", "out"],
        }));
    }
    errors.collect(ros.propertyValidator('direction', ros.validateString)(properties.direction));
    if (properties.dpiGroupIds && (Array.isArray(properties.dpiGroupIds) || (typeof properties.dpiGroupIds) === 'string')) {
        errors.collect(ros.propertyValidator('dpiGroupIds', ros.validateLength)({
            data: properties.dpiGroupIds.length,
            min: undefined,
            max: 100,
        }));
    }
    errors.collect(ros.propertyValidator('dpiGroupIds', ros.listValidator(ros.validateString))(properties.dpiGroupIds));
    errors.collect(ros.propertyValidator('name', ros.validateString)(properties.name));
    if (properties.type && (typeof properties.type) !== 'object') {
        errors.collect(ros.propertyValidator('type', ros.validateAllowedValues)({
            data: properties.type,
            allowedValues: ["LAN", "WAN"],
        }));
    }
    errors.collect(ros.propertyValidator('type', ros.validateString)(properties.type));
    errors.collect(ros.propertyValidator('destCidr', ros.requiredValidator)(properties.destCidr));
    errors.collect(ros.propertyValidator('destCidr', ros.validateString)(properties.destCidr));
    if (properties.dpiSignatureIds && (Array.isArray(properties.dpiSignatureIds) || (typeof properties.dpiSignatureIds) === 'string')) {
        errors.collect(ros.propertyValidator('dpiSignatureIds', ros.validateLength)({
            data: properties.dpiSignatureIds.length,
            min: undefined,
            max: 100,
        }));
    }
    errors.collect(ros.propertyValidator('dpiSignatureIds', ros.listValidator(ros.validateString))(properties.dpiSignatureIds));
    errors.collect(ros.propertyValidator('ipProtocol', ros.requiredValidator)(properties.ipProtocol));
    errors.collect(ros.propertyValidator('ipProtocol', ros.validateString)(properties.ipProtocol));
    return errors.wrap('supplied properties not correct for "RosACLRuleProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::SAG::ACLRule` resource
 *
 * @param properties - the TypeScript properties of a `RosACLRuleProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::SAG::ACLRule` resource.
 */
// @ts-ignore TS6133
function rosACLRulePropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosACLRulePropsValidator(properties).assertSuccess();
    }
    return {
        AclId: ros.stringToRosTemplate(properties.aclId),
        DestCidr: ros.stringToRosTemplate(properties.destCidr),
        DestPortRange: ros.stringToRosTemplate(properties.destPortRange),
        Direction: ros.stringToRosTemplate(properties.direction),
        IpProtocol: ros.stringToRosTemplate(properties.ipProtocol),
        Policy: ros.stringToRosTemplate(properties.policy),
        SourceCidr: ros.stringToRosTemplate(properties.sourceCidr),
        SourcePortRange: ros.stringToRosTemplate(properties.sourcePortRange),
        Description: ros.stringToRosTemplate(properties.description),
        DpiGroupIds: ros.listMapper(ros.stringToRosTemplate)(properties.dpiGroupIds),
        DpiSignatureIds: ros.listMapper(ros.stringToRosTemplate)(properties.dpiSignatureIds),
        Name: ros.stringToRosTemplate(properties.name),
        Priority: ros.numberToRosTemplate(properties.priority),
        Type: ros.stringToRosTemplate(properties.type),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::SAG::ACLRule`, which is used to add an access control list (ACL) rule.
 * @Note This class does not contain additional functions, so it is recommended to use the `ACLRule` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-sag-aclrule
 */
class RosACLRule extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosACLRule.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrAcrId = this.getAtt('AcrId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.aclId = props.aclId;
        this.destCidr = props.destCidr;
        this.destPortRange = props.destPortRange;
        this.direction = props.direction;
        this.ipProtocol = props.ipProtocol;
        this.policy = props.policy;
        this.sourceCidr = props.sourceCidr;
        this.sourcePortRange = props.sourcePortRange;
        this.description = props.description;
        this.dpiGroupIds = props.dpiGroupIds;
        this.dpiSignatureIds = props.dpiSignatureIds;
        this.name = props.name;
        this.priority = props.priority;
        this.type = props.type;
    }
    get rosProperties() {
        return {
            aclId: this.aclId,
            destCidr: this.destCidr,
            destPortRange: this.destPortRange,
            direction: this.direction,
            ipProtocol: this.ipProtocol,
            policy: this.policy,
            sourceCidr: this.sourceCidr,
            sourcePortRange: this.sourcePortRange,
            description: this.description,
            dpiGroupIds: this.dpiGroupIds,
            dpiSignatureIds: this.dpiSignatureIds,
            name: this.name,
            priority: this.priority,
            type: this.type,
        };
    }
    renderProperties(props) {
        return rosACLRulePropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosACLRule = RosACLRule;
/**
 * The resource type name for this resource class.
 */
RosACLRule.ROS_RESOURCE_TYPE_NAME = "ALIYUN::SAG::ACLRule";
/**
 * Determine whether the given properties match those of a `RosAppProps`
 *
 * @param properties - the TypeScript properties of a `RosAppProps`
 *
 * @returns the result of the validation.
 */
function RosAppPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('chargeType', ros.validateString)(properties.chargeType));
    errors.collect(ros.propertyValidator('userCount', ros.requiredValidator)(properties.userCount));
    errors.collect(ros.propertyValidator('userCount', ros.validateNumber)(properties.userCount));
    errors.collect(ros.propertyValidator('dataPlan', ros.requiredValidator)(properties.dataPlan));
    errors.collect(ros.propertyValidator('dataPlan', ros.validateNumber)(properties.dataPlan));
    errors.collect(ros.propertyValidator('period', ros.requiredValidator)(properties.period));
    errors.collect(ros.propertyValidator('period', ros.validateNumber)(properties.period));
    errors.collect(ros.propertyValidator('autoPay', ros.requiredValidator)(properties.autoPay));
    errors.collect(ros.propertyValidator('autoPay', ros.validateBoolean)(properties.autoPay));
    return errors.wrap('supplied properties not correct for "RosAppProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::SAG::App` resource
 *
 * @param properties - the TypeScript properties of a `RosAppProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::SAG::App` resource.
 */
// @ts-ignore TS6133
function rosAppPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosAppPropsValidator(properties).assertSuccess();
    }
    return {
        AutoPay: ros.booleanToRosTemplate(properties.autoPay),
        DataPlan: ros.numberToRosTemplate(properties.dataPlan),
        Period: ros.numberToRosTemplate(properties.period),
        UserCount: ros.numberToRosTemplate(properties.userCount),
        ChargeType: ros.stringToRosTemplate(properties.chargeType),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::SAG::App`, which is used to create a Smart Access Gateway (SAG) app instance.
 * @Note This class does not contain additional functions, so it is recommended to use the `App` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-sag-app
 */
class RosApp extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosApp.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrOrderId = this.getAtt('OrderId');
        this.attrSmartAgId = this.getAtt('SmartAGId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.autoPay = props.autoPay;
        this.dataPlan = props.dataPlan;
        this.period = props.period;
        this.userCount = props.userCount;
        this.chargeType = props.chargeType;
    }
    get rosProperties() {
        return {
            autoPay: this.autoPay,
            dataPlan: this.dataPlan,
            period: this.period,
            userCount: this.userCount,
            chargeType: this.chargeType,
        };
    }
    renderProperties(props) {
        return rosAppPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosApp = RosApp;
/**
 * The resource type name for this resource class.
 */
RosApp.ROS_RESOURCE_TYPE_NAME = "ALIYUN::SAG::App";
/**
 * Determine whether the given properties match those of a `RosAppUserProps`
 *
 * @param properties - the TypeScript properties of a `RosAppUserProps`
 *
 * @returns the result of the validation.
 */
function RosAppUserPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('userName', ros.validateString)(properties.userName));
    errors.collect(ros.propertyValidator('userMail', ros.requiredValidator)(properties.userMail));
    errors.collect(ros.propertyValidator('userMail', ros.validateString)(properties.userMail));
    errors.collect(ros.propertyValidator('bandwidth', ros.requiredValidator)(properties.bandwidth));
    errors.collect(ros.propertyValidator('bandwidth', ros.validateNumber)(properties.bandwidth));
    errors.collect(ros.propertyValidator('smartAgId', ros.requiredValidator)(properties.smartAgId));
    errors.collect(ros.propertyValidator('smartAgId', ros.validateString)(properties.smartAgId));
    errors.collect(ros.propertyValidator('clientIp', ros.validateString)(properties.clientIp));
    errors.collect(ros.propertyValidator('disable', ros.validateBoolean)(properties.disable));
    errors.collect(ros.propertyValidator('password', ros.validateString)(properties.password));
    return errors.wrap('supplied properties not correct for "RosAppUserProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::SAG::AppUser` resource
 *
 * @param properties - the TypeScript properties of a `RosAppUserProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::SAG::AppUser` resource.
 */
// @ts-ignore TS6133
function rosAppUserPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosAppUserPropsValidator(properties).assertSuccess();
    }
    return {
        Bandwidth: ros.numberToRosTemplate(properties.bandwidth),
        SmartAGId: ros.stringToRosTemplate(properties.smartAgId),
        UserMail: ros.stringToRosTemplate(properties.userMail),
        ClientIp: ros.stringToRosTemplate(properties.clientIp),
        Disable: ros.booleanToRosTemplate(properties.disable),
        Password: ros.stringToRosTemplate(properties.password),
        UserName: ros.stringToRosTemplate(properties.userName),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::SAG::AppUser`, which is used to create a client account for a Smart Access Gateway (SAG) app instance.
 * @Note This class does not contain additional functions, so it is recommended to use the `AppUser` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-sag-appuser
 */
class RosAppUser extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosAppUser.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrSmartAgId = this.getAtt('SmartAGId');
        this.attrUserName = this.getAtt('UserName');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.bandwidth = props.bandwidth;
        this.smartAgId = props.smartAgId;
        this.userMail = props.userMail;
        this.clientIp = props.clientIp;
        this.disable = props.disable;
        this.password = props.password;
        this.userName = props.userName;
    }
    get rosProperties() {
        return {
            bandwidth: this.bandwidth,
            smartAgId: this.smartAgId,
            userMail: this.userMail,
            clientIp: this.clientIp,
            disable: this.disable,
            password: this.password,
            userName: this.userName,
        };
    }
    renderProperties(props) {
        return rosAppUserPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosAppUser = RosAppUser;
/**
 * The resource type name for this resource class.
 */
RosAppUser.ROS_RESOURCE_TYPE_NAME = "ALIYUN::SAG::AppUser";
/**
 * Determine whether the given properties match those of a `RosCloudConnectNetworkProps`
 *
 * @param properties - the TypeScript properties of a `RosCloudConnectNetworkProps`
 *
 * @returns the result of the validation.
 */
function RosCloudConnectNetworkPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('isDefault', ros.validateBoolean)(properties.isDefault));
    errors.collect(ros.propertyValidator('description', ros.validateString)(properties.description));
    if (properties.tags && (Array.isArray(properties.tags) || (typeof properties.tags) === 'string')) {
        errors.collect(ros.propertyValidator('tags', ros.validateLength)({
            data: properties.tags.length,
            min: undefined,
            max: 20,
        }));
    }
    errors.collect(ros.propertyValidator('tags', ros.listValidator(RosCloudConnectNetwork_TagsPropertyValidator))(properties.tags));
    errors.collect(ros.propertyValidator('name', ros.validateString)(properties.name));
    return errors.wrap('supplied properties not correct for "RosCloudConnectNetworkProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::SAG::CloudConnectNetwork` resource
 *
 * @param properties - the TypeScript properties of a `RosCloudConnectNetworkProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::SAG::CloudConnectNetwork` resource.
 */
// @ts-ignore TS6133
function rosCloudConnectNetworkPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosCloudConnectNetworkPropsValidator(properties).assertSuccess();
    }
    return {
        Description: ros.stringToRosTemplate(properties.description),
        IsDefault: ros.booleanToRosTemplate(properties.isDefault),
        Name: ros.stringToRosTemplate(properties.name),
        Tags: ros.listMapper(rosCloudConnectNetworkTagsPropertyToRosTemplate)(properties.tags),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::SAG::CloudConnectNetwork`, which is used to create a Cloud Connect Network (CCN) instance. CNN is a device access matrix composed of Alibaba Cloud distributed Smart Access Gateways (SAGs). You can add multiple SAGs to a CCN instance and then attach the CCN instance to a Cloud Enterprise Network (CEN) instance. In this way, you can connect your local branches to Alibaba Cloud.
 * @Note This class does not contain additional functions, so it is recommended to use the `CloudConnectNetwork` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-sag-cloudconnectnetwork
 */
class RosCloudConnectNetwork extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosCloudConnectNetwork.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrCcnId = this.getAtt('CcnId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.description = props.description;
        this.isDefault = props.isDefault;
        this.name = props.name;
        this.tags = props.tags;
    }
    get rosProperties() {
        return {
            description: this.description,
            isDefault: this.isDefault,
            name: this.name,
            tags: this.tags,
        };
    }
    renderProperties(props) {
        return rosCloudConnectNetworkPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosCloudConnectNetwork = RosCloudConnectNetwork;
/**
 * The resource type name for this resource class.
 */
RosCloudConnectNetwork.ROS_RESOURCE_TYPE_NAME = "ALIYUN::SAG::CloudConnectNetwork";
/**
 * Determine whether the given properties match those of a `TagsProperty`
 *
 * @param properties - the TypeScript properties of a `TagsProperty`
 *
 * @returns the result of the validation.
 */
function RosCloudConnectNetwork_TagsPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('value', ros.validateString)(properties.value));
    errors.collect(ros.propertyValidator('key', ros.requiredValidator)(properties.key));
    errors.collect(ros.propertyValidator('key', ros.validateString)(properties.key));
    return errors.wrap('supplied properties not correct for "TagsProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::SAG::CloudConnectNetwork.Tags` resource
 *
 * @param properties - the TypeScript properties of a `TagsProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::SAG::CloudConnectNetwork.Tags` resource.
 */
// @ts-ignore TS6133
function rosCloudConnectNetworkTagsPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosCloudConnectNetwork_TagsPropertyValidator(properties).assertSuccess();
    return {
        Value: ros.stringToRosTemplate(properties.value),
        Key: ros.stringToRosTemplate(properties.key),
    };
}
/**
 * Determine whether the given properties match those of a `RosGrantCcnToCenProps`
 *
 * @param properties - the TypeScript properties of a `RosGrantCcnToCenProps`
 *
 * @returns the result of the validation.
 */
function RosGrantCcnToCenPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('cenUid', ros.requiredValidator)(properties.cenUid));
    errors.collect(ros.propertyValidator('cenUid', ros.validateString)(properties.cenUid));
    errors.collect(ros.propertyValidator('ccnInstanceId', ros.requiredValidator)(properties.ccnInstanceId));
    errors.collect(ros.propertyValidator('ccnInstanceId', ros.validateString)(properties.ccnInstanceId));
    errors.collect(ros.propertyValidator('cenInstanceId', ros.requiredValidator)(properties.cenInstanceId));
    errors.collect(ros.propertyValidator('cenInstanceId', ros.validateString)(properties.cenInstanceId));
    return errors.wrap('supplied properties not correct for "RosGrantCcnToCenProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::SAG::GrantCcnToCen` resource
 *
 * @param properties - the TypeScript properties of a `RosGrantCcnToCenProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::SAG::GrantCcnToCen` resource.
 */
// @ts-ignore TS6133
function rosGrantCcnToCenPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosGrantCcnToCenPropsValidator(properties).assertSuccess();
    }
    return {
        CcnInstanceId: ros.stringToRosTemplate(properties.ccnInstanceId),
        CenInstanceId: ros.stringToRosTemplate(properties.cenInstanceId),
        CenUid: ros.stringToRosTemplate(properties.cenUid),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::SAG::GrantCcnToCen`.
 * @Note This class does not contain additional functions, so it is recommended to use the `GrantCcnToCen` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-sag-grantccntocen
 */
class RosGrantCcnToCen extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosGrantCcnToCen.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrCcnInstanceId = this.getAtt('CcnInstanceId');
        this.attrCenInstanceId = this.getAtt('CenInstanceId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.ccnInstanceId = props.ccnInstanceId;
        this.cenInstanceId = props.cenInstanceId;
        this.cenUid = props.cenUid;
    }
    get rosProperties() {
        return {
            ccnInstanceId: this.ccnInstanceId,
            cenInstanceId: this.cenInstanceId,
            cenUid: this.cenUid,
        };
    }
    renderProperties(props) {
        return rosGrantCcnToCenPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosGrantCcnToCen = RosGrantCcnToCen;
/**
 * The resource type name for this resource class.
 */
RosGrantCcnToCen.ROS_RESOURCE_TYPE_NAME = "ALIYUN::SAG::GrantCcnToCen";
/**
 * Determine whether the given properties match those of a `RosQosProps`
 *
 * @param properties - the TypeScript properties of a `RosQosProps`
 *
 * @returns the result of the validation.
 */
function RosQosPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('qosName', ros.requiredValidator)(properties.qosName));
    errors.collect(ros.propertyValidator('qosName', ros.validateString)(properties.qosName));
    errors.collect(ros.propertyValidator('qosDescription', ros.validateString)(properties.qosDescription));
    return errors.wrap('supplied properties not correct for "RosQosProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::SAG::Qos` resource
 *
 * @param properties - the TypeScript properties of a `RosQosProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::SAG::Qos` resource.
 */
// @ts-ignore TS6133
function rosQosPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosQosPropsValidator(properties).assertSuccess();
    }
    return {
        QosName: ros.stringToRosTemplate(properties.qosName),
        QosDescription: ros.stringToRosTemplate(properties.qosDescription),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::SAG::Qos`ALIYUN::SAG::QoS is used to create a quality of service (QoS) policy for a Smart Access Gateway (SAG) instance.
 * @Note This class does not contain additional functions, so it is recommended to use the `Qos` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-sag-qos
 */
class RosQos extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosQos.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrQosId = this.getAtt('QosId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.qosName = props.qosName;
        this.qosDescription = props.qosDescription;
    }
    get rosProperties() {
        return {
            qosName: this.qosName,
            qosDescription: this.qosDescription,
        };
    }
    renderProperties(props) {
        return rosQosPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosQos = RosQos;
/**
 * The resource type name for this resource class.
 */
RosQos.ROS_RESOURCE_TYPE_NAME = "ALIYUN::SAG::Qos";
/**
 * Determine whether the given properties match those of a `RosQosAssociationProps`
 *
 * @param properties - the TypeScript properties of a `RosQosAssociationProps`
 *
 * @returns the result of the validation.
 */
function RosQosAssociationPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('qosId', ros.requiredValidator)(properties.qosId));
    errors.collect(ros.propertyValidator('qosId', ros.validateString)(properties.qosId));
    errors.collect(ros.propertyValidator('smartAgId', ros.requiredValidator)(properties.smartAgId));
    errors.collect(ros.propertyValidator('smartAgId', ros.validateString)(properties.smartAgId));
    return errors.wrap('supplied properties not correct for "RosQosAssociationProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::SAG::QosAssociation` resource
 *
 * @param properties - the TypeScript properties of a `RosQosAssociationProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::SAG::QosAssociation` resource.
 */
// @ts-ignore TS6133
function rosQosAssociationPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosQosAssociationPropsValidator(properties).assertSuccess();
    }
    return {
        QosId: ros.stringToRosTemplate(properties.qosId),
        SmartAGId: ros.stringToRosTemplate(properties.smartAgId),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::SAG::QosAssociation`.
 * @Note This class does not contain additional functions, so it is recommended to use the `QosAssociation` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-sag-qosassociation
 */
class RosQosAssociation extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosQosAssociation.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrQosId = this.getAtt('QosId');
        this.attrSmartAgId = this.getAtt('SmartAGId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.qosId = props.qosId;
        this.smartAgId = props.smartAgId;
    }
    get rosProperties() {
        return {
            qosId: this.qosId,
            smartAgId: this.smartAgId,
        };
    }
    renderProperties(props) {
        return rosQosAssociationPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosQosAssociation = RosQosAssociation;
/**
 * The resource type name for this resource class.
 */
RosQosAssociation.ROS_RESOURCE_TYPE_NAME = "ALIYUN::SAG::QosAssociation";
/**
 * Determine whether the given properties match those of a `RosQosCarProps`
 *
 * @param properties - the TypeScript properties of a `RosQosCarProps`
 *
 * @returns the result of the validation.
 */
function RosQosCarPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('minBandwidthAbs', ros.validateNumber)(properties.minBandwidthAbs));
    errors.collect(ros.propertyValidator('description', ros.validateString)(properties.description));
    errors.collect(ros.propertyValidator('priority', ros.requiredValidator)(properties.priority));
    if (properties.priority && (typeof properties.priority) !== 'object') {
        errors.collect(ros.propertyValidator('priority', ros.validateRange)({
            data: properties.priority,
            min: 1,
            max: 7,
        }));
    }
    errors.collect(ros.propertyValidator('priority', ros.validateNumber)(properties.priority));
    errors.collect(ros.propertyValidator('maxBandwidthPercent', ros.validateNumber)(properties.maxBandwidthPercent));
    errors.collect(ros.propertyValidator('maxBandwidthAbs', ros.validateNumber)(properties.maxBandwidthAbs));
    errors.collect(ros.propertyValidator('qosId', ros.requiredValidator)(properties.qosId));
    errors.collect(ros.propertyValidator('qosId', ros.validateString)(properties.qosId));
    if (properties.percentSourceType && (typeof properties.percentSourceType) !== 'object') {
        errors.collect(ros.propertyValidator('percentSourceType', ros.validateAllowedValues)({
            data: properties.percentSourceType,
            allowedValues: ["CcnBandwidth", "InternetUpBandwidth"],
        }));
    }
    errors.collect(ros.propertyValidator('percentSourceType', ros.validateString)(properties.percentSourceType));
    errors.collect(ros.propertyValidator('minBandwidthPercent', ros.validateNumber)(properties.minBandwidthPercent));
    errors.collect(ros.propertyValidator('limitType', ros.requiredValidator)(properties.limitType));
    if (properties.limitType && (typeof properties.limitType) !== 'object') {
        errors.collect(ros.propertyValidator('limitType', ros.validateAllowedValues)({
            data: properties.limitType,
            allowedValues: ["Absolute", "Percent"],
        }));
    }
    errors.collect(ros.propertyValidator('limitType', ros.validateString)(properties.limitType));
    errors.collect(ros.propertyValidator('name', ros.validateString)(properties.name));
    return errors.wrap('supplied properties not correct for "RosQosCarProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::SAG::QosCar` resource
 *
 * @param properties - the TypeScript properties of a `RosQosCarProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::SAG::QosCar` resource.
 */
// @ts-ignore TS6133
function rosQosCarPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosQosCarPropsValidator(properties).assertSuccess();
    }
    return {
        LimitType: ros.stringToRosTemplate(properties.limitType),
        Priority: ros.numberToRosTemplate(properties.priority),
        QosId: ros.stringToRosTemplate(properties.qosId),
        Description: ros.stringToRosTemplate(properties.description),
        MaxBandwidthAbs: ros.numberToRosTemplate(properties.maxBandwidthAbs),
        MaxBandwidthPercent: ros.numberToRosTemplate(properties.maxBandwidthPercent),
        MinBandwidthAbs: ros.numberToRosTemplate(properties.minBandwidthAbs),
        MinBandwidthPercent: ros.numberToRosTemplate(properties.minBandwidthPercent),
        Name: ros.stringToRosTemplate(properties.name),
        PercentSourceType: ros.stringToRosTemplate(properties.percentSourceType),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::SAG::QosCar`.
 * @Note This class does not contain additional functions, so it is recommended to use the `QosCar` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-sag-qoscar
 */
class RosQosCar extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosQosCar.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrQosCarId = this.getAtt('QosCarId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.limitType = props.limitType;
        this.priority = props.priority;
        this.qosId = props.qosId;
        this.description = props.description;
        this.maxBandwidthAbs = props.maxBandwidthAbs;
        this.maxBandwidthPercent = props.maxBandwidthPercent;
        this.minBandwidthAbs = props.minBandwidthAbs;
        this.minBandwidthPercent = props.minBandwidthPercent;
        this.name = props.name;
        this.percentSourceType = props.percentSourceType;
    }
    get rosProperties() {
        return {
            limitType: this.limitType,
            priority: this.priority,
            qosId: this.qosId,
            description: this.description,
            maxBandwidthAbs: this.maxBandwidthAbs,
            maxBandwidthPercent: this.maxBandwidthPercent,
            minBandwidthAbs: this.minBandwidthAbs,
            minBandwidthPercent: this.minBandwidthPercent,
            name: this.name,
            percentSourceType: this.percentSourceType,
        };
    }
    renderProperties(props) {
        return rosQosCarPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosQosCar = RosQosCar;
/**
 * The resource type name for this resource class.
 */
RosQosCar.ROS_RESOURCE_TYPE_NAME = "ALIYUN::SAG::QosCar";
/**
 * Determine whether the given properties match those of a `RosQosPolicyProps`
 *
 * @param properties - the TypeScript properties of a `RosQosPolicyProps`
 *
 * @returns the result of the validation.
 */
function RosQosPolicyPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('description', ros.validateString)(properties.description));
    errors.collect(ros.propertyValidator('endTime', ros.validateString)(properties.endTime));
    errors.collect(ros.propertyValidator('sourcePortRange', ros.requiredValidator)(properties.sourcePortRange));
    errors.collect(ros.propertyValidator('sourcePortRange', ros.validateString)(properties.sourcePortRange));
    errors.collect(ros.propertyValidator('sourceCidr', ros.requiredValidator)(properties.sourceCidr));
    errors.collect(ros.propertyValidator('sourceCidr', ros.validateString)(properties.sourceCidr));
    errors.collect(ros.propertyValidator('priority', ros.requiredValidator)(properties.priority));
    errors.collect(ros.propertyValidator('priority', ros.validateNumber)(properties.priority));
    errors.collect(ros.propertyValidator('startTime', ros.validateString)(properties.startTime));
    errors.collect(ros.propertyValidator('destPortRange', ros.requiredValidator)(properties.destPortRange));
    errors.collect(ros.propertyValidator('destPortRange', ros.validateString)(properties.destPortRange));
    if (properties.dpiGroupIds && (Array.isArray(properties.dpiGroupIds) || (typeof properties.dpiGroupIds) === 'string')) {
        errors.collect(ros.propertyValidator('dpiGroupIds', ros.validateLength)({
            data: properties.dpiGroupIds.length,
            min: undefined,
            max: 100,
        }));
    }
    errors.collect(ros.propertyValidator('dpiGroupIds', ros.listValidator(ros.validateString))(properties.dpiGroupIds));
    errors.collect(ros.propertyValidator('name', ros.validateString)(properties.name));
    errors.collect(ros.propertyValidator('destCidr', ros.requiredValidator)(properties.destCidr));
    errors.collect(ros.propertyValidator('destCidr', ros.validateString)(properties.destCidr));
    if (properties.dpiSignatureIds && (Array.isArray(properties.dpiSignatureIds) || (typeof properties.dpiSignatureIds) === 'string')) {
        errors.collect(ros.propertyValidator('dpiSignatureIds', ros.validateLength)({
            data: properties.dpiSignatureIds.length,
            min: undefined,
            max: 100,
        }));
    }
    errors.collect(ros.propertyValidator('dpiSignatureIds', ros.listValidator(ros.validateString))(properties.dpiSignatureIds));
    errors.collect(ros.propertyValidator('qosId', ros.requiredValidator)(properties.qosId));
    errors.collect(ros.propertyValidator('qosId', ros.validateString)(properties.qosId));
    errors.collect(ros.propertyValidator('ipProtocol', ros.requiredValidator)(properties.ipProtocol));
    errors.collect(ros.propertyValidator('ipProtocol', ros.validateString)(properties.ipProtocol));
    return errors.wrap('supplied properties not correct for "RosQosPolicyProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::SAG::QosPolicy` resource
 *
 * @param properties - the TypeScript properties of a `RosQosPolicyProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::SAG::QosPolicy` resource.
 */
// @ts-ignore TS6133
function rosQosPolicyPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosQosPolicyPropsValidator(properties).assertSuccess();
    }
    return {
        DestCidr: ros.stringToRosTemplate(properties.destCidr),
        DestPortRange: ros.stringToRosTemplate(properties.destPortRange),
        IpProtocol: ros.stringToRosTemplate(properties.ipProtocol),
        Priority: ros.numberToRosTemplate(properties.priority),
        QosId: ros.stringToRosTemplate(properties.qosId),
        SourceCidr: ros.stringToRosTemplate(properties.sourceCidr),
        SourcePortRange: ros.stringToRosTemplate(properties.sourcePortRange),
        Description: ros.stringToRosTemplate(properties.description),
        DpiGroupIds: ros.listMapper(ros.stringToRosTemplate)(properties.dpiGroupIds),
        DpiSignatureIds: ros.listMapper(ros.stringToRosTemplate)(properties.dpiSignatureIds),
        EndTime: ros.stringToRosTemplate(properties.endTime),
        Name: ros.stringToRosTemplate(properties.name),
        StartTime: ros.stringToRosTemplate(properties.startTime),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::SAG::QosPolicy`, which is used to create a traffic classification rule for a quality of service (QoS) policy.
 * @Note This class does not contain additional functions, so it is recommended to use the `QosPolicy` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-sag-qospolicy
 */
class RosQosPolicy extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosQosPolicy.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrQosPolicyId = this.getAtt('QosPolicyId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.destCidr = props.destCidr;
        this.destPortRange = props.destPortRange;
        this.ipProtocol = props.ipProtocol;
        this.priority = props.priority;
        this.qosId = props.qosId;
        this.sourceCidr = props.sourceCidr;
        this.sourcePortRange = props.sourcePortRange;
        this.description = props.description;
        this.dpiGroupIds = props.dpiGroupIds;
        this.dpiSignatureIds = props.dpiSignatureIds;
        this.endTime = props.endTime;
        this.name = props.name;
        this.startTime = props.startTime;
    }
    get rosProperties() {
        return {
            destCidr: this.destCidr,
            destPortRange: this.destPortRange,
            ipProtocol: this.ipProtocol,
            priority: this.priority,
            qosId: this.qosId,
            sourceCidr: this.sourceCidr,
            sourcePortRange: this.sourcePortRange,
            description: this.description,
            dpiGroupIds: this.dpiGroupIds,
            dpiSignatureIds: this.dpiSignatureIds,
            endTime: this.endTime,
            name: this.name,
            startTime: this.startTime,
        };
    }
    renderProperties(props) {
        return rosQosPolicyPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosQosPolicy = RosQosPolicy;
/**
 * The resource type name for this resource class.
 */
RosQosPolicy.ROS_RESOURCE_TYPE_NAME = "ALIYUN::SAG::QosPolicy";
/**
 * Determine whether the given properties match those of a `RosSerialNumberBindingProps`
 *
 * @param properties - the TypeScript properties of a `RosSerialNumberBindingProps`
 *
 * @returns the result of the validation.
 */
function RosSerialNumberBindingPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('serialNumber', ros.requiredValidator)(properties.serialNumber));
    errors.collect(ros.propertyValidator('serialNumber', ros.validateString)(properties.serialNumber));
    errors.collect(ros.propertyValidator('smartAgId', ros.requiredValidator)(properties.smartAgId));
    errors.collect(ros.propertyValidator('smartAgId', ros.validateString)(properties.smartAgId));
    return errors.wrap('supplied properties not correct for "RosSerialNumberBindingProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::SAG::SerialNumberBinding` resource
 *
 * @param properties - the TypeScript properties of a `RosSerialNumberBindingProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::SAG::SerialNumberBinding` resource.
 */
// @ts-ignore TS6133
function rosSerialNumberBindingPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosSerialNumberBindingPropsValidator(properties).assertSuccess();
    }
    return {
        SerialNumber: ros.stringToRosTemplate(properties.serialNumber),
        SmartAGId: ros.stringToRosTemplate(properties.smartAgId),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::SAG::SerialNumberBinding`, which is used to associate a Smart Access Gateway (SAG) device with an SAG instance.
 * @Note This class does not contain additional functions, so it is recommended to use the `SerialNumberBinding` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-sag-serialnumberbinding
 */
class RosSerialNumberBinding extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosSerialNumberBinding.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrSmartAgId = this.getAtt('SmartAGId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.serialNumber = props.serialNumber;
        this.smartAgId = props.smartAgId;
    }
    get rosProperties() {
        return {
            serialNumber: this.serialNumber,
            smartAgId: this.smartAgId,
        };
    }
    renderProperties(props) {
        return rosSerialNumberBindingPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosSerialNumberBinding = RosSerialNumberBinding;
/**
 * The resource type name for this resource class.
 */
RosSerialNumberBinding.ROS_RESOURCE_TYPE_NAME = "ALIYUN::SAG::SerialNumberBinding";
/**
 * Determine whether the given properties match those of a `RosSmartAccessGatewayProps`
 *
 * @param properties - the TypeScript properties of a `RosSmartAccessGatewayProps`
 *
 * @returns the result of the validation.
 */
function RosSmartAccessGatewayPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('receiverCountry', ros.requiredValidator)(properties.receiverCountry));
    errors.collect(ros.propertyValidator('receiverCountry', ros.validateString)(properties.receiverCountry));
    errors.collect(ros.propertyValidator('description', ros.validateString)(properties.description));
    errors.collect(ros.propertyValidator('receiverZip', ros.requiredValidator)(properties.receiverZip));
    errors.collect(ros.propertyValidator('receiverZip', ros.validateString)(properties.receiverZip));
    errors.collect(ros.propertyValidator('buyerMessage', ros.requiredValidator)(properties.buyerMessage));
    errors.collect(ros.propertyValidator('buyerMessage', ros.validateString)(properties.buyerMessage));
    errors.collect(ros.propertyValidator('cidrBlock', ros.validateString)(properties.cidrBlock));
    errors.collect(ros.propertyValidator('receiverTown', ros.requiredValidator)(properties.receiverTown));
    errors.collect(ros.propertyValidator('receiverTown', ros.validateString)(properties.receiverTown));
    errors.collect(ros.propertyValidator('hardWareSpec', ros.requiredValidator)(properties.hardWareSpec));
    if (properties.hardWareSpec && (typeof properties.hardWareSpec) !== 'object') {
        errors.collect(ros.propertyValidator('hardWareSpec', ros.validateAllowedValues)({
            data: properties.hardWareSpec,
            allowedValues: ["sag-100wm", "sag-1000", "sag-vcpe"],
        }));
    }
    errors.collect(ros.propertyValidator('hardWareSpec', ros.validateString)(properties.hardWareSpec));
    errors.collect(ros.propertyValidator('name', ros.validateString)(properties.name));
    errors.collect(ros.propertyValidator('receiverPhone', ros.validateString)(properties.receiverPhone));
    errors.collect(ros.propertyValidator('receiverCity', ros.requiredValidator)(properties.receiverCity));
    errors.collect(ros.propertyValidator('receiverCity', ros.validateString)(properties.receiverCity));
    errors.collect(ros.propertyValidator('routingStrategy', ros.validateString)(properties.routingStrategy));
    errors.collect(ros.propertyValidator('securityLockThreshold', ros.validateNumber)(properties.securityLockThreshold));
    errors.collect(ros.propertyValidator('receiverAddress', ros.requiredValidator)(properties.receiverAddress));
    errors.collect(ros.propertyValidator('receiverAddress', ros.validateString)(properties.receiverAddress));
    errors.collect(ros.propertyValidator('alreadyHaveSag', ros.validateBoolean)(properties.alreadyHaveSag));
    errors.collect(ros.propertyValidator('haType', ros.requiredValidator)(properties.haType));
    if (properties.haType && (typeof properties.haType) !== 'object') {
        errors.collect(ros.propertyValidator('haType', ros.validateAllowedValues)({
            data: properties.haType,
            allowedValues: ["cold_backup", "no_backup", "warm_backup"],
        }));
    }
    errors.collect(ros.propertyValidator('haType', ros.validateString)(properties.haType));
    errors.collect(ros.propertyValidator('period', ros.requiredValidator)(properties.period));
    errors.collect(ros.propertyValidator('period', ros.validateNumber)(properties.period));
    errors.collect(ros.propertyValidator('maxBandWidth', ros.requiredValidator)(properties.maxBandWidth));
    errors.collect(ros.propertyValidator('maxBandWidth', ros.validateNumber)(properties.maxBandWidth));
    errors.collect(ros.propertyValidator('autoPay', ros.validateBoolean)(properties.autoPay));
    errors.collect(ros.propertyValidator('receiverMobile', ros.requiredValidator)(properties.receiverMobile));
    errors.collect(ros.propertyValidator('receiverMobile', ros.validateString)(properties.receiverMobile));
    errors.collect(ros.propertyValidator('receiverDistrict', ros.requiredValidator)(properties.receiverDistrict));
    errors.collect(ros.propertyValidator('receiverDistrict', ros.validateString)(properties.receiverDistrict));
    errors.collect(ros.propertyValidator('activate', ros.validateBoolean)(properties.activate));
    errors.collect(ros.propertyValidator('chargeType', ros.requiredValidator)(properties.chargeType));
    errors.collect(ros.propertyValidator('chargeType', ros.validateString)(properties.chargeType));
    errors.collect(ros.propertyValidator('receiverState', ros.requiredValidator)(properties.receiverState));
    errors.collect(ros.propertyValidator('receiverState', ros.validateString)(properties.receiverState));
    errors.collect(ros.propertyValidator('receiverName', ros.requiredValidator)(properties.receiverName));
    errors.collect(ros.propertyValidator('receiverName', ros.validateString)(properties.receiverName));
    errors.collect(ros.propertyValidator('receiverEmail', ros.requiredValidator)(properties.receiverEmail));
    errors.collect(ros.propertyValidator('receiverEmail', ros.validateString)(properties.receiverEmail));
    return errors.wrap('supplied properties not correct for "RosSmartAccessGatewayProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::SAG::SmartAccessGateway` resource
 *
 * @param properties - the TypeScript properties of a `RosSmartAccessGatewayProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::SAG::SmartAccessGateway` resource.
 */
// @ts-ignore TS6133
function rosSmartAccessGatewayPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosSmartAccessGatewayPropsValidator(properties).assertSuccess();
    }
    return {
        BuyerMessage: ros.stringToRosTemplate(properties.buyerMessage),
        ChargeType: ros.stringToRosTemplate(properties.chargeType),
        HardWareSpec: ros.stringToRosTemplate(properties.hardWareSpec),
        HaType: ros.stringToRosTemplate(properties.haType),
        MaxBandWidth: ros.numberToRosTemplate(properties.maxBandWidth),
        Period: ros.numberToRosTemplate(properties.period),
        ReceiverAddress: ros.stringToRosTemplate(properties.receiverAddress),
        ReceiverCity: ros.stringToRosTemplate(properties.receiverCity),
        ReceiverCountry: ros.stringToRosTemplate(properties.receiverCountry),
        ReceiverDistrict: ros.stringToRosTemplate(properties.receiverDistrict),
        ReceiverEmail: ros.stringToRosTemplate(properties.receiverEmail),
        ReceiverMobile: ros.stringToRosTemplate(properties.receiverMobile),
        ReceiverName: ros.stringToRosTemplate(properties.receiverName),
        ReceiverState: ros.stringToRosTemplate(properties.receiverState),
        ReceiverTown: ros.stringToRosTemplate(properties.receiverTown),
        ReceiverZip: ros.stringToRosTemplate(properties.receiverZip),
        Activate: ros.booleanToRosTemplate(properties.activate),
        AlreadyHaveSag: ros.booleanToRosTemplate(properties.alreadyHaveSag),
        AutoPay: ros.booleanToRosTemplate(properties.autoPay),
        CidrBlock: ros.stringToRosTemplate(properties.cidrBlock),
        Description: ros.stringToRosTemplate(properties.description),
        Name: ros.stringToRosTemplate(properties.name),
        ReceiverPhone: ros.stringToRosTemplate(properties.receiverPhone),
        RoutingStrategy: ros.stringToRosTemplate(properties.routingStrategy),
        SecurityLockThreshold: ros.numberToRosTemplate(properties.securityLockThreshold),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::SAG::SmartAccessGateway`.
 * @Note This class does not contain additional functions, so it is recommended to use the `SmartAccessGateway` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-sag-smartaccessgateway
 */
class RosSmartAccessGateway extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosSmartAccessGateway.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrOrderId = this.getAtt('OrderId');
        this.attrSmartAgId = this.getAtt('SmartAGId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.buyerMessage = props.buyerMessage;
        this.chargeType = props.chargeType;
        this.hardWareSpec = props.hardWareSpec;
        this.haType = props.haType;
        this.maxBandWidth = props.maxBandWidth;
        this.period = props.period;
        this.receiverAddress = props.receiverAddress;
        this.receiverCity = props.receiverCity;
        this.receiverCountry = props.receiverCountry;
        this.receiverDistrict = props.receiverDistrict;
        this.receiverEmail = props.receiverEmail;
        this.receiverMobile = props.receiverMobile;
        this.receiverName = props.receiverName;
        this.receiverState = props.receiverState;
        this.receiverTown = props.receiverTown;
        this.receiverZip = props.receiverZip;
        this.activate = props.activate;
        this.alreadyHaveSag = props.alreadyHaveSag;
        this.autoPay = props.autoPay;
        this.cidrBlock = props.cidrBlock;
        this.description = props.description;
        this.name = props.name;
        this.receiverPhone = props.receiverPhone;
        this.routingStrategy = props.routingStrategy;
        this.securityLockThreshold = props.securityLockThreshold;
    }
    get rosProperties() {
        return {
            buyerMessage: this.buyerMessage,
            chargeType: this.chargeType,
            hardWareSpec: this.hardWareSpec,
            haType: this.haType,
            maxBandWidth: this.maxBandWidth,
            period: this.period,
            receiverAddress: this.receiverAddress,
            receiverCity: this.receiverCity,
            receiverCountry: this.receiverCountry,
            receiverDistrict: this.receiverDistrict,
            receiverEmail: this.receiverEmail,
            receiverMobile: this.receiverMobile,
            receiverName: this.receiverName,
            receiverState: this.receiverState,
            receiverTown: this.receiverTown,
            receiverZip: this.receiverZip,
            activate: this.activate,
            alreadyHaveSag: this.alreadyHaveSag,
            autoPay: this.autoPay,
            cidrBlock: this.cidrBlock,
            description: this.description,
            name: this.name,
            receiverPhone: this.receiverPhone,
            routingStrategy: this.routingStrategy,
            securityLockThreshold: this.securityLockThreshold,
        };
    }
    renderProperties(props) {
        return rosSmartAccessGatewayPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosSmartAccessGateway = RosSmartAccessGateway;
/**
 * The resource type name for this resource class.
 */
RosSmartAccessGateway.ROS_RESOURCE_TYPE_NAME = "ALIYUN::SAG::SmartAccessGateway";
/**
 * Determine whether the given properties match those of a `RosSmartAccessGatewayBindingProps`
 *
 * @param properties - the TypeScript properties of a `RosSmartAccessGatewayBindingProps`
 *
 * @returns the result of the validation.
 */
function RosSmartAccessGatewayBindingPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('ccnId', ros.requiredValidator)(properties.ccnId));
    errors.collect(ros.propertyValidator('ccnId', ros.validateString)(properties.ccnId));
    errors.collect(ros.propertyValidator('smartAgId', ros.requiredValidator)(properties.smartAgId));
    errors.collect(ros.propertyValidator('smartAgId', ros.validateString)(properties.smartAgId));
    return errors.wrap('supplied properties not correct for "RosSmartAccessGatewayBindingProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::SAG::SmartAccessGatewayBinding` resource
 *
 * @param properties - the TypeScript properties of a `RosSmartAccessGatewayBindingProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::SAG::SmartAccessGatewayBinding` resource.
 */
// @ts-ignore TS6133
function rosSmartAccessGatewayBindingPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosSmartAccessGatewayBindingPropsValidator(properties).assertSuccess();
    }
    return {
        CcnId: ros.stringToRosTemplate(properties.ccnId),
        SmartAGId: ros.stringToRosTemplate(properties.smartAgId),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::SAG::SmartAccessGatewayBinding`.
 * @Note This class does not contain additional functions, so it is recommended to use the `SmartAccessGatewayBinding` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-sag-smartaccessgatewaybinding
 */
class RosSmartAccessGatewayBinding extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosSmartAccessGatewayBinding.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrSmartAgId = this.getAtt('SmartAGId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.ccnId = props.ccnId;
        this.smartAgId = props.smartAgId;
    }
    get rosProperties() {
        return {
            ccnId: this.ccnId,
            smartAgId: this.smartAgId,
        };
    }
    renderProperties(props) {
        return rosSmartAccessGatewayBindingPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosSmartAccessGatewayBinding = RosSmartAccessGatewayBinding;
/**
 * The resource type name for this resource class.
 */
RosSmartAccessGatewayBinding.ROS_RESOURCE_TYPE_NAME = "ALIYUN::SAG::SmartAccessGatewayBinding";
//# sourceMappingURL=data:application/json;base64,