"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProInstance = exports.ProInstanceProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ddospro_generated_1 = require("./ddospro.generated");
Object.defineProperty(exports, "ProInstanceProperty", { enumerable: true, get: function () { return ddospro_generated_1.RosProInstance; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::DDoSPro::ProInstance`, which is used to create an Anti-DDoS Proxy (Chinese Mainland) instance.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosProInstance`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-ddospro-proinstance
 */
class ProInstance extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props = {}, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosProInstance = new ddospro_generated_1.RosProInstance(this, id, {
            normalQps: props.normalQps,
            period: props.period,
            portCount: props.portCount,
            edition: props.edition,
            burstBandwidthMode: props.burstBandwidthMode,
            serviceBandwidth: props.serviceBandwidth,
            servicePartner: props.servicePartner,
            baseBandwidth: props.baseBandwidth,
            functionVersion: props.functionVersion,
            bandwidth: props.bandwidth,
            addressType: props.addressType,
            tags: props.tags,
            periodUnit: props.periodUnit,
            domainCount: props.domainCount,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosProInstance;
        this.attrInstanceId = rosProInstance.attrInstanceId;
    }
}
exports.ProInstance = ProInstance;
//# sourceMappingURL=data:application/json;base64,