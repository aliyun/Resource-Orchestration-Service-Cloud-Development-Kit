"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClusterHelmApplication = exports.ClusterHelmApplicationProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const cs_generated_1 = require("./cs.generated");
Object.defineProperty(exports, "ClusterHelmApplicationProperty", { enumerable: true, get: function () { return cs_generated_1.RosClusterHelmApplication; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::CS::ClusterHelmApplication`, which is used to deploy an application by using Helm.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosClusterHelmApplication`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-cs-clusterhelmapplication
 */
class ClusterHelmApplication extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosClusterHelmApplication = new cs_generated_1.RosClusterHelmApplication(this, id, {
            rolePolicy: props.rolePolicy === undefined || props.rolePolicy === null ? 'EnsureAdminRoleAndBinding' : props.rolePolicy,
            chartValues: props.chartValues,
            credential: props.credential,
            clusterId: props.clusterId,
            chartUrl: props.chartUrl,
            validationMode: props.validationMode === undefined || props.validationMode === null ? 'Strict' : props.validationMode,
            waitUntil: props.waitUntil,
            namespace: props.namespace === undefined || props.namespace === null ? 'default' : props.namespace,
            name: props.name,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosClusterHelmApplication;
        this.attrClusterId = rosClusterHelmApplication.attrClusterId;
        this.attrWaitUntilData = rosClusterHelmApplication.attrWaitUntilData;
    }
}
exports.ClusterHelmApplication = ClusterHelmApplication;
//# sourceMappingURL=data:application/json;base64,