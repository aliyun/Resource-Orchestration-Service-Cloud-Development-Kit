"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Api = exports.ApiProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const apigateway_generated_1 = require("./apigateway.generated");
Object.defineProperty(exports, "ApiProperty", { enumerable: true, get: function () { return apigateway_generated_1.RosApi; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::ApiGateway::Api`, which is used to create an API.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosApi`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-apigateway-api
 */
class Api extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosApi = new apigateway_generated_1.RosApi(this, id, {
            description: props.description,
            forceNonceCheck: props.forceNonceCheck,
            allowSignatureMethod: props.allowSignatureMethod,
            errorCodeSamples: props.errorCodeSamples,
            requestParameters: props.requestParameters,
            serviceParametersMap: props.serviceParametersMap,
            appCodeAuthType: props.appCodeAuthType,
            resultBodyModel: props.resultBodyModel,
            serviceConfig: props.serviceConfig,
            webSocketApiType: props.webSocketApiType,
            resultDescriptions: props.resultDescriptions,
            openIdConnectConfig: props.openIdConnectConfig,
            authType: props.authType,
            tags: props.tags,
            requestConfig: props.requestConfig,
            resultSample: props.resultSample,
            disableInternet: props.disableInternet,
            apiName: props.apiName,
            resultType: props.resultType === undefined || props.resultType === null ? 'JSON' : props.resultType,
            failResultSample: props.failResultSample,
            groupId: props.groupId,
            constParameters: props.constParameters,
            systemParameters: props.systemParameters,
            visibility: props.visibility,
            serviceParameters: props.serviceParameters,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosApi;
        this.attrApiId = rosApi.attrApiId;
    }
}
exports.Api = Api;
//# sourceMappingURL=data:application/json;base64,