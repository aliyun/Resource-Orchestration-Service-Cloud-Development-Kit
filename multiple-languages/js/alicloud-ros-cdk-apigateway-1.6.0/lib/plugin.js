"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Plugin = exports.PluginProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const apigateway_generated_1 = require("./apigateway.generated");
Object.defineProperty(exports, "PluginProperty", { enumerable: true, get: function () { return apigateway_generated_1.RosPlugin; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::ApiGateway::Plugin`, which is used to create an API Gateway plug-in.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosPlugin`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-apigateway-plugin
 */
class Plugin extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosPlugin = new apigateway_generated_1.RosPlugin(this, id, {
            pluginName: props.pluginName,
            description: props.description,
            pluginData: props.pluginData,
            pluginType: props.pluginType,
            tags: props.tags,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosPlugin;
        this.attrDescription = rosPlugin.attrDescription;
        this.attrPluginData = rosPlugin.attrPluginData;
        this.attrPluginId = rosPlugin.attrPluginId;
        this.attrPluginName = rosPlugin.attrPluginName;
        this.attrPluginType = rosPlugin.attrPluginType;
    }
}
exports.Plugin = Plugin;
//# sourceMappingURL=data:application/json;base64,