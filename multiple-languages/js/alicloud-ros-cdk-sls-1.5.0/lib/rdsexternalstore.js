"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RdsExternalStore = exports.RdsExternalStoreProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const sls_generated_1 = require("./sls.generated");
Object.defineProperty(exports, "RdsExternalStoreProperty", { enumerable: true, get: function () { return sls_generated_1.RosRdsExternalStore; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::SLS::RdsExternalStore`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosRdsExternalStore`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-sls-rdsexternalstore
 */
class RdsExternalStore extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosRdsExternalStore = new sls_generated_1.RosRdsExternalStore(this, id, {
            storeType: props.storeType,
            project: props.project,
            table: props.table,
            vpcId: props.vpcId,
            username: props.username,
            instanceId: props.instanceId,
            port: props.port,
            region: props.region,
            host: props.host,
            externalStoreName: props.externalStoreName,
            db: props.db,
            password: props.password,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosRdsExternalStore;
        this.attrExternalStoreName = rosRdsExternalStore.attrExternalStoreName;
        this.attrProject = rosRdsExternalStore.attrProject;
    }
}
exports.RdsExternalStore = RdsExternalStore;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmRzZXh0ZXJuYWxzdG9yZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInJkc2V4dGVybmFsc3RvcmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsOENBQThDO0FBQzlDLG1EQUFzRDtBQUV0Qix5R0FGdkIsbUNBQW1CLE9BRTRCO0FBcUV4RDs7OztHQUlHO0FBQ0gsTUFBYSxnQkFBaUIsU0FBUSxHQUFHLENBQUMsUUFBUTtJQWdCOUM7Ozs7T0FJRztJQUNILFlBQVksS0FBb0IsRUFBRSxFQUFVLEVBQUUsS0FBNEIsRUFBRSxtQ0FBMkMsSUFBSTtRQUN2SCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ2pCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQ2IsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLGdDQUFnQyxHQUFHLGdDQUFnQyxDQUFDO1FBRXpFLE1BQU0sbUJBQW1CLEdBQUcsSUFBSSxtQ0FBbUIsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFHO1lBQzNELFNBQVMsRUFBRSxLQUFLLENBQUMsU0FBUztZQUMxQixPQUFPLEVBQUUsS0FBSyxDQUFDLE9BQU87WUFDdEIsS0FBSyxFQUFFLEtBQUssQ0FBQyxLQUFLO1lBQ2xCLEtBQUssRUFBRSxLQUFLLENBQUMsS0FBSztZQUNsQixRQUFRLEVBQUUsS0FBSyxDQUFDLFFBQVE7WUFDeEIsVUFBVSxFQUFFLEtBQUssQ0FBQyxVQUFVO1lBQzVCLElBQUksRUFBRSxLQUFLLENBQUMsSUFBSTtZQUNoQixNQUFNLEVBQUUsS0FBSyxDQUFDLE1BQU07WUFDcEIsSUFBSSxFQUFFLEtBQUssQ0FBQyxJQUFJO1lBQ2hCLGlCQUFpQixFQUFFLEtBQUssQ0FBQyxpQkFBaUI7WUFDMUMsRUFBRSxFQUFFLEtBQUssQ0FBQyxFQUFFO1lBQ1osUUFBUSxFQUFFLEtBQUssQ0FBQyxRQUFRO1NBQzNCLEVBQUUsZ0NBQWdDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO1FBQ3BGLElBQUksQ0FBQyxRQUFRLEdBQUcsbUJBQW1CLENBQUM7UUFDcEMsSUFBSSxDQUFDLHFCQUFxQixHQUFHLG1CQUFtQixDQUFDLHFCQUFxQixDQUFDO1FBQ3ZFLElBQUksQ0FBQyxXQUFXLEdBQUcsbUJBQW1CLENBQUMsV0FBVyxDQUFDO0lBQ3ZELENBQUM7Q0FDSjtBQTlDRCw0Q0E4Q0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyByb3MgZnJvbSAnQGFsaWNsb3VkL3Jvcy1jZGstY29yZSc7XG5pbXBvcnQgeyBSb3NSZHNFeHRlcm5hbFN0b3JlIH0gZnJvbSAnLi9zbHMuZ2VuZXJhdGVkJztcbi8vIEdlbmVyYXRlZCBmcm9tIHRoZSBBbGlDbG91ZCBST1MgUmVzb3VyY2UgU3BlY2lmaWNhdGlvblxuZXhwb3J0IHsgUm9zUmRzRXh0ZXJuYWxTdG9yZSBhcyBSZHNFeHRlcm5hbFN0b3JlUHJvcGVydHkgfTtcblxuLyoqXG4gKiBQcm9wZXJ0aWVzIGZvciBkZWZpbmluZyBhIGBSZHNFeHRlcm5hbFN0b3JlYC5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvYWxpeXVuLXNscy1yZHNleHRlcm5hbHN0b3JlXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUmRzRXh0ZXJuYWxTdG9yZVByb3BzIHtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGRiOiBUaGUgbmFtZSBvZiB0aGUgZGF0YWJhc2UgaW4gdGhlIEFwc2FyYURCIFJEUyBmb3IgTXlTUUwgaW5zdGFuY2UuXG4gICAgICovXG4gICAgcmVhZG9ubHkgZGI6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGV4dGVybmFsU3RvcmVOYW1lOiBUaGUgbmFtZSBvZiB0aGUgZXh0ZXJuYWwgc3RvcmUuIFRoZSBuYW1lIG11c3QgYmUgdW5pcXVlIGluIGEgcHJvamVjdCBhbmQgZGlmZmVyZW50IGZyb20gTG9nc3RvcmUuXG4gICAgICovXG4gICAgcmVhZG9ubHkgZXh0ZXJuYWxTdG9yZU5hbWU6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGhvc3Q6IFRoZSBpbnRlcm5hbCBvciBwdWJsaWMgZW5kcG9pbnQgb2YgdGhlIEFwc2FyYURCIFJEUyBmb3IgTXlTUUwgaW5zdGFuY2UuXG4gICAgICovXG4gICAgcmVhZG9ubHkgaG9zdDogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgcGFzc3dvcmQ6IFRoZSBwYXNzd29yZCB0aGF0IGlzIHVzZWQgdG8gbG9nIG9uIHRvIHRoZSBBcHNhcmFEQiBSRFMgZm9yIE15U1FMIGluc3RhbmNlLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHBhc3N3b3JkOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBwb3J0OiBUaGUgaW50ZXJuYWwgb3IgcHVibGljIHBvcnQgb2YgdGhlIEFwc2FyYURCIFJEUyBmb3IgTXlTUUwgaW5zdGFuY2UuXG4gICAgICovXG4gICAgcmVhZG9ubHkgcG9ydDogbnVtYmVyIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgcHJvamVjdDogVGhlIG5hbWUgb2YgdGhlIHByb2plY3QuXG4gICAgICovXG4gICAgcmVhZG9ubHkgcHJvamVjdDogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgcmVnaW9uOiBUaGUgcmVnaW9uIHdoZXJlIHRoZSBBcHNhcmFEQiBSRFMgZm9yIE15U1FMIGluc3RhbmNlIHJlc2lkZXMuIFZhbGlkIHZhbHVlczogY24tcWluZ2RhbywgY24tYmVpamluZywgY24taGFuZ3pob3UuXG4gICAgICovXG4gICAgcmVhZG9ubHkgcmVnaW9uOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBzdG9yZVR5cGU6IFRoZSBzdG9yYWdlIHR5cGUuIFNldCB0aGUgdmFsdWUgdG8gcmRzLXZwYywgd2hpY2ggaW5kaWNhdGVzIGFuIEFwc2FyYURCIFJEUyBmb3IgTXlTUUwgZGF0YWJhc2UgaW4gYSB2aXJ0dWFsIHByaXZhdGUgY2xvdWQgKFZQQykuXG4gICAgICovXG4gICAgcmVhZG9ubHkgc3RvcmVUeXBlOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSB0YWJsZTogVGhlIG5hbWUgb2YgdGhlIGRhdGFiYXNlIHRhYmxlIGluIHRoZSBBcHNhcmFEQiBSRFMgZm9yIE15U1FMIGluc3RhbmNlLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHRhYmxlOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSB1c2VybmFtZTogVGhlIHVzZXJuYW1lIHRoYXQgaXMgdXNlZCB0byBsb2cgb24gdG8gdGhlIEFwc2FyYURCIFJEUyBmb3IgTXlTUUwgaW5zdGFuY2UuXG4gICAgICovXG4gICAgcmVhZG9ubHkgdXNlcm5hbWU6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHZwY0lkOiBUaGUgSUQgb2YgdGhlIFZQQyB0byB3aGljaCB0aGUgQXBzYXJhREIgUkRTIGZvciBNeVNRTCBpbnN0YW5jZSBiZWxvbmdzLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHZwY0lkOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBpbnN0YW5jZUlkOiBUaGUgaWQgb2YgdGhlIFJEUyBpbnN0YW5jZVxuICAgICAqL1xuICAgIHJlYWRvbmx5IGluc3RhbmNlSWQ/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG59XG5cbi8qKlxuICogVGhpcyBjbGFzcyBlbmNhcHN1bGF0ZXMgYW5kIGV4dGVuZHMgdGhlIFJPUyByZXNvdXJjZSB0eXBlIGBBTElZVU46OlNMUzo6UmRzRXh0ZXJuYWxTdG9yZWAuXG4gKiBATm90ZSBUaGlzIGNsYXNzIG1heSBoYXZlIHNvbWUgbmV3IGZ1bmN0aW9ucyB0byBmYWNpbGl0YXRlIGRldmVsb3BtZW50LCBzbyBpdCBpcyByZWNvbW1lbmRlZCB0byB1c2UgdGhpcyBjbGFzcyBpbnN0ZWFkIG9mIGBSb3NSZHNFeHRlcm5hbFN0b3JlYGZvciBhIG1vcmUgY29udmVuaWVudCBkZXZlbG9wbWVudCBleHBlcmllbmNlLlxuICogU2VlIGh0dHBzOi8vd3d3LmFsaWJhYmFjbG91ZC5jb20vaGVscC9yb3MvZGV2ZWxvcGVyLXJlZmVyZW5jZS9hbGl5dW4tc2xzLXJkc2V4dGVybmFsc3RvcmVcbiAqL1xuZXhwb3J0IGNsYXNzIFJkc0V4dGVybmFsU3RvcmUgZXh0ZW5kcyByb3MuUmVzb3VyY2Uge1xuICAgIHByb3RlY3RlZCBzY29wZTogcm9zLkNvbnN0cnVjdDtcbiAgICBwcm90ZWN0ZWQgaWQ6IHN0cmluZztcbiAgICBwcm90ZWN0ZWQgcHJvcHM6IFJkc0V4dGVybmFsU3RvcmVQcm9wcztcbiAgICBwcm90ZWN0ZWQgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6IGJvb2xlYW47XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgRXh0ZXJuYWxTdG9yZU5hbWU6IFRoZSBuYW1lIG9mIHRoZSBleHRlcm5hbCBzdG9yZS5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckV4dGVybmFsU3RvcmVOYW1lOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgUHJvamVjdDogVGhlIG5hbWUgb2YgdGhlIHByb2plY3QgdG8gd2hpY2ggdGhlIGV4dGVybmFsIHN0b3JlIGJlbG9uZ3MuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJQcm9qZWN0OiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQYXJhbSBzY29wZSAtIHNjb3BlIGluIHdoaWNoIHRoaXMgcmVzb3VyY2UgaXMgZGVmaW5lZFxuICAgICAqIFBhcmFtIGlkICAgIC0gc2NvcGVkIGlkIG9mIHRoZSByZXNvdXJjZVxuICAgICAqIFBhcmFtIHByb3BzIC0gcmVzb3VyY2UgcHJvcGVydGllc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiByb3MuQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogUmRzRXh0ZXJuYWxTdG9yZVByb3BzLCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDpib29sZWFuID0gdHJ1ZSkge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQpO1xuICAgICAgICB0aGlzLnNjb3BlID0gc2NvcGU7XG4gICAgICAgIHRoaXMuaWQgPSBpZDtcbiAgICAgICAgdGhpcy5wcm9wcyA9IHByb3BzO1xuICAgICAgICB0aGlzLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ID0gZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ7XG5cbiAgICAgICAgY29uc3Qgcm9zUmRzRXh0ZXJuYWxTdG9yZSA9IG5ldyBSb3NSZHNFeHRlcm5hbFN0b3JlKHRoaXMsIGlkLCAge1xuICAgICAgICAgICAgc3RvcmVUeXBlOiBwcm9wcy5zdG9yZVR5cGUsXG4gICAgICAgICAgICBwcm9qZWN0OiBwcm9wcy5wcm9qZWN0LFxuICAgICAgICAgICAgdGFibGU6IHByb3BzLnRhYmxlLFxuICAgICAgICAgICAgdnBjSWQ6IHByb3BzLnZwY0lkLFxuICAgICAgICAgICAgdXNlcm5hbWU6IHByb3BzLnVzZXJuYW1lLFxuICAgICAgICAgICAgaW5zdGFuY2VJZDogcHJvcHMuaW5zdGFuY2VJZCxcbiAgICAgICAgICAgIHBvcnQ6IHByb3BzLnBvcnQsXG4gICAgICAgICAgICByZWdpb246IHByb3BzLnJlZ2lvbixcbiAgICAgICAgICAgIGhvc3Q6IHByb3BzLmhvc3QsXG4gICAgICAgICAgICBleHRlcm5hbFN0b3JlTmFtZTogcHJvcHMuZXh0ZXJuYWxTdG9yZU5hbWUsXG4gICAgICAgICAgICBkYjogcHJvcHMuZGIsXG4gICAgICAgICAgICBwYXNzd29yZDogcHJvcHMucGFzc3dvcmQsXG4gICAgICAgIH0sIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ICYmIHRoaXMuc3RhY2suZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQpO1xuICAgICAgICB0aGlzLnJlc291cmNlID0gcm9zUmRzRXh0ZXJuYWxTdG9yZTtcbiAgICAgICAgdGhpcy5hdHRyRXh0ZXJuYWxTdG9yZU5hbWUgPSByb3NSZHNFeHRlcm5hbFN0b3JlLmF0dHJFeHRlcm5hbFN0b3JlTmFtZTtcbiAgICAgICAgdGhpcy5hdHRyUHJvamVjdCA9IHJvc1Jkc0V4dGVybmFsU3RvcmUuYXR0clByb2plY3Q7XG4gICAgfVxufVxuIl19