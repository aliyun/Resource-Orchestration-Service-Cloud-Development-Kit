"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConsumerGroup = exports.ConsumerGroupProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const sls_generated_1 = require("./sls.generated");
Object.defineProperty(exports, "ConsumerGroupProperty", { enumerable: true, get: function () { return sls_generated_1.RosConsumerGroup; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::SLS::ConsumerGroup`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosConsumerGroup`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-sls-consumergroup
 */
class ConsumerGroup extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosConsumerGroup = new sls_generated_1.RosConsumerGroup(this, id, {
            order: props.order,
            project: props.project,
            timeout: props.timeout,
            logstore: props.logstore,
            consumerGroup: props.consumerGroup,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosConsumerGroup;
        this.attrConsumerGroup = rosConsumerGroup.attrConsumerGroup;
        this.attrLogstore = rosConsumerGroup.attrLogstore;
        this.attrProject = rosConsumerGroup.attrProject;
    }
}
exports.ConsumerGroup = ConsumerGroup;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3VtZXJncm91cC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNvbnN1bWVyZ3JvdXAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsOENBQThDO0FBQzlDLG1EQUFtRDtBQUV0QixzR0FGcEIsZ0NBQWdCLE9BRXlCO0FBdUNsRDs7OztHQUlHO0FBQ0gsTUFBYSxhQUFjLFNBQVEsR0FBRyxDQUFDLFFBQVE7SUFxQjNDOzs7O09BSUc7SUFDSCxZQUFZLEtBQW9CLEVBQUUsRUFBVSxFQUFFLEtBQXlCLEVBQUUsbUNBQTJDLElBQUk7UUFDcEgsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNqQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUNiLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxnQ0FBZ0MsR0FBRyxnQ0FBZ0MsQ0FBQztRQUV6RSxNQUFNLGdCQUFnQixHQUFHLElBQUksZ0NBQWdCLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRztZQUNyRCxLQUFLLEVBQUUsS0FBSyxDQUFDLEtBQUs7WUFDbEIsT0FBTyxFQUFFLEtBQUssQ0FBQyxPQUFPO1lBQ3RCLE9BQU8sRUFBRSxLQUFLLENBQUMsT0FBTztZQUN0QixRQUFRLEVBQUUsS0FBSyxDQUFDLFFBQVE7WUFDeEIsYUFBYSxFQUFFLEtBQUssQ0FBQyxhQUFhO1NBQ3JDLEVBQUUsZ0NBQWdDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO1FBQ3BGLElBQUksQ0FBQyxRQUFRLEdBQUcsZ0JBQWdCLENBQUM7UUFDakMsSUFBSSxDQUFDLGlCQUFpQixHQUFHLGdCQUFnQixDQUFDLGlCQUFpQixDQUFDO1FBQzVELElBQUksQ0FBQyxZQUFZLEdBQUcsZ0JBQWdCLENBQUMsWUFBWSxDQUFDO1FBQ2xELElBQUksQ0FBQyxXQUFXLEdBQUcsZ0JBQWdCLENBQUMsV0FBVyxDQUFDO0lBQ3BELENBQUM7Q0FDSjtBQTdDRCxzQ0E2Q0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyByb3MgZnJvbSAnQGFsaWNsb3VkL3Jvcy1jZGstY29yZSc7XG5pbXBvcnQgeyBSb3NDb25zdW1lckdyb3VwIH0gZnJvbSAnLi9zbHMuZ2VuZXJhdGVkJztcbi8vIEdlbmVyYXRlZCBmcm9tIHRoZSBBbGlDbG91ZCBST1MgUmVzb3VyY2UgU3BlY2lmaWNhdGlvblxuZXhwb3J0IHsgUm9zQ29uc3VtZXJHcm91cCBhcyBDb25zdW1lckdyb3VwUHJvcGVydHkgfTtcblxuLyoqXG4gKiBQcm9wZXJ0aWVzIGZvciBkZWZpbmluZyBhIGBDb25zdW1lckdyb3VwYC5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvYWxpeXVuLXNscy1jb25zdW1lcmdyb3VwXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQ29uc3VtZXJHcm91cFByb3BzIHtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGNvbnN1bWVyR3JvdXA6IFRoZSBuYW1lIG9mIHRoZSBjb25zdW1lciBncm91cC4gVGhlIG5hbWUgbXVzdCBiZSB1bmlxdWUgaW4gYSBwcm9qZWN0LlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGNvbnN1bWVyR3JvdXA6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGxvZ3N0b3JlOiBUaGUgbmFtZSBvZiB0aGUgTG9nc3RvcmUuXG4gICAgICovXG4gICAgcmVhZG9ubHkgbG9nc3RvcmU6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IG9yZGVyOiBTcGVjaWZpZXMgd2hldGhlciB0byBjb25zdW1lIGRhdGEgaW4gc2VxdWVuY2UuIFZhbGlkIHZhbHVlczpcbiAgICAgKiB0cnVlXG4gICAgICogSW4gYSBzaGFyZCwgZGF0YSBpcyBjb25zdW1lZCBpbiBhc2NlbmRpbmcgb3JkZXIgYmFzZWQgb24gdGhlIHZhbHVlIG9mIHRoZSAqKl9fdGFnX186X19yZWNlaXZlX3RpbWVfXyoqIGZpZWxkLlxuICAgICAqIElmIGEgc2hhcmQgaXMgc3BsaXQsIGRhdGEgaW4gdGhlIG9yaWdpbmFsIHNoYXJkIGlzIGNvbnN1bWVkIGZpcnN0LiBUaGVuLCBkYXRhIGluIHRoZSBuZXcgc2hhcmRzIGlzIGNvbnN1bWVkIGF0IHRoZSBzYW1lIHRpbWUuXG4gICAgICogSWYgc2hhcmRzIGFyZSBtZXJnZWQsIGRhdGEgaW4gdGhlIG9yaWdpbmFsIHNoYXJkcyBpcyBjb25zdW1lZCBmaXJzdC4gVGhlbiwgZGF0YSBpbiB0aGUgbmV3IHNoYXJkIGlzIGNvbnN1bWVkLlxuICAgICAqIGZhbHNlIERhdGEgaW4gYWxsIHNoYXJkcyBpcyBjb25zdW1lZCBhdCB0aGUgc2FtZSB0aW1lLiBJZiBhIG5ldyBzaGFyZCBpcyBnZW5lcmF0ZWQgYWZ0ZXIgYSBzaGFyZCBpcyBzcGxpdCBvciBhZnRlciBzaGFyZHMgYXJlIG1lcmdlZCwgZGF0YSBpbiB0aGUgbmV3IHNoYXJkIGlzIGltbWVkaWF0ZWx5IGNvbnN1bWVkLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IG9yZGVyOiBib29sZWFuIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgcHJvamVjdDogVGhlIG5hbWUgb2YgdGhlIHByb2plY3QuXG4gICAgICovXG4gICAgcmVhZG9ubHkgcHJvamVjdDogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgdGltZW91dDogVGhlIHRpbWVvdXQgcGVyaW9kLiBJZiB0aGUgc2VydmVyIGRvZXMgbm90IHJlY2VpdmUgaGVhcnRiZWF0cyBmcm9tIGEgY29uc3VtZXIgd2l0aGluIHRoZSB0aW1lb3V0IHBlcmlvZCwgdGhlIHNlcnZlciBkZWxldGVzIHRoZSBjb25zdW1lci4gVW5pdDogc2Vjb25kcy5cbiAgICAgKi9cbiAgICByZWFkb25seSB0aW1lb3V0OiBudW1iZXIgfCByb3MuSVJlc29sdmFibGU7XG59XG5cbi8qKlxuICogVGhpcyBjbGFzcyBlbmNhcHN1bGF0ZXMgYW5kIGV4dGVuZHMgdGhlIFJPUyByZXNvdXJjZSB0eXBlIGBBTElZVU46OlNMUzo6Q29uc3VtZXJHcm91cGAuXG4gKiBATm90ZSBUaGlzIGNsYXNzIG1heSBoYXZlIHNvbWUgbmV3IGZ1bmN0aW9ucyB0byBmYWNpbGl0YXRlIGRldmVsb3BtZW50LCBzbyBpdCBpcyByZWNvbW1lbmRlZCB0byB1c2UgdGhpcyBjbGFzcyBpbnN0ZWFkIG9mIGBSb3NDb25zdW1lckdyb3VwYGZvciBhIG1vcmUgY29udmVuaWVudCBkZXZlbG9wbWVudCBleHBlcmllbmNlLlxuICogU2VlIGh0dHBzOi8vd3d3LmFsaWJhYmFjbG91ZC5jb20vaGVscC9yb3MvZGV2ZWxvcGVyLXJlZmVyZW5jZS9hbGl5dW4tc2xzLWNvbnN1bWVyZ3JvdXBcbiAqL1xuZXhwb3J0IGNsYXNzIENvbnN1bWVyR3JvdXAgZXh0ZW5kcyByb3MuUmVzb3VyY2Uge1xuICAgIHByb3RlY3RlZCBzY29wZTogcm9zLkNvbnN0cnVjdDtcbiAgICBwcm90ZWN0ZWQgaWQ6IHN0cmluZztcbiAgICBwcm90ZWN0ZWQgcHJvcHM6IENvbnN1bWVyR3JvdXBQcm9wcztcbiAgICBwcm90ZWN0ZWQgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6IGJvb2xlYW47XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgQ29uc3VtZXJHcm91cDogVGhlIG5hbWUgb2YgdGhlIGNvbnN1bWVyIGdyb3VwLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyQ29uc3VtZXJHcm91cDogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIExvZ3N0b3JlOiBUaGUgbmFtZSBvZiB0aGUgbG9nc3RvcmUgdG8gd2hpY2ggdGhpcyBjb25zdW1lciBncm91cCBiZWxvbmdzLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyTG9nc3RvcmU6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBQcm9qZWN0OiBUaGUgbmFtZSBvZiB0aGUgcHJvamVjdCB0byB3aGljaCB0aGUgbG9nc3RvcmUgYmVsb25ncy5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0clByb2plY3Q6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFBhcmFtIHNjb3BlIC0gc2NvcGUgaW4gd2hpY2ggdGhpcyByZXNvdXJjZSBpcyBkZWZpbmVkXG4gICAgICogUGFyYW0gaWQgICAgLSBzY29wZWQgaWQgb2YgdGhlIHJlc291cmNlXG4gICAgICogUGFyYW0gcHJvcHMgLSByZXNvdXJjZSBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IHJvcy5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBDb25zdW1lckdyb3VwUHJvcHMsIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OmJvb2xlYW4gPSB0cnVlKSB7XG4gICAgICAgIHN1cGVyKHNjb3BlLCBpZCk7XG4gICAgICAgIHRoaXMuc2NvcGUgPSBzY29wZTtcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xuICAgICAgICB0aGlzLnByb3BzID0gcHJvcHM7XG4gICAgICAgIHRoaXMuZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgPSBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDtcblxuICAgICAgICBjb25zdCByb3NDb25zdW1lckdyb3VwID0gbmV3IFJvc0NvbnN1bWVyR3JvdXAodGhpcywgaWQsICB7XG4gICAgICAgICAgICBvcmRlcjogcHJvcHMub3JkZXIsXG4gICAgICAgICAgICBwcm9qZWN0OiBwcm9wcy5wcm9qZWN0LFxuICAgICAgICAgICAgdGltZW91dDogcHJvcHMudGltZW91dCxcbiAgICAgICAgICAgIGxvZ3N0b3JlOiBwcm9wcy5sb2dzdG9yZSxcbiAgICAgICAgICAgIGNvbnN1bWVyR3JvdXA6IHByb3BzLmNvbnN1bWVyR3JvdXAsXG4gICAgICAgIH0sIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ICYmIHRoaXMuc3RhY2suZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQpO1xuICAgICAgICB0aGlzLnJlc291cmNlID0gcm9zQ29uc3VtZXJHcm91cDtcbiAgICAgICAgdGhpcy5hdHRyQ29uc3VtZXJHcm91cCA9IHJvc0NvbnN1bWVyR3JvdXAuYXR0ckNvbnN1bWVyR3JvdXA7XG4gICAgICAgIHRoaXMuYXR0ckxvZ3N0b3JlID0gcm9zQ29uc3VtZXJHcm91cC5hdHRyTG9nc3RvcmU7XG4gICAgICAgIHRoaXMuYXR0clByb2plY3QgPSByb3NDb25zdW1lckdyb3VwLmF0dHJQcm9qZWN0O1xuICAgIH1cbn1cbiJdfQ==