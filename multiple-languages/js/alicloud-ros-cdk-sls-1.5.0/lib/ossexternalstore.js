"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OssExternalStore = exports.OssExternalStoreProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const sls_generated_1 = require("./sls.generated");
Object.defineProperty(exports, "OssExternalStoreProperty", { enumerable: true, get: function () { return sls_generated_1.RosOssExternalStore; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::SLS::OssExternalStore`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosOssExternalStore`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-sls-ossexternalstore
 */
class OssExternalStore extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosOssExternalStore = new sls_generated_1.RosOssExternalStore(this, id, {
            storeType: props.storeType,
            project: props.project,
            endpoint: props.endpoint,
            bucket: props.bucket,
            accessId: props.accessId,
            objects: props.objects,
            columns: props.columns,
            accessKey: props.accessKey,
            externalStoreName: props.externalStoreName,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosOssExternalStore;
        this.attrExternalStoreName = rosOssExternalStore.attrExternalStoreName;
        this.attrProject = rosOssExternalStore.attrProject;
    }
}
exports.OssExternalStore = OssExternalStore;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3NzZXh0ZXJuYWxzdG9yZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm9zc2V4dGVybmFsc3RvcmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsOENBQThDO0FBQzlDLG1EQUFzRDtBQUV0Qix5R0FGdkIsbUNBQW1CLE9BRTRCO0FBc0R4RDs7OztHQUlHO0FBQ0gsTUFBYSxnQkFBaUIsU0FBUSxHQUFHLENBQUMsUUFBUTtJQWdCOUM7Ozs7T0FJRztJQUNILFlBQVksS0FBb0IsRUFBRSxFQUFVLEVBQUUsS0FBNEIsRUFBRSxtQ0FBMkMsSUFBSTtRQUN2SCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ2pCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQ2IsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLGdDQUFnQyxHQUFHLGdDQUFnQyxDQUFDO1FBRXpFLE1BQU0sbUJBQW1CLEdBQUcsSUFBSSxtQ0FBbUIsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFHO1lBQzNELFNBQVMsRUFBRSxLQUFLLENBQUMsU0FBUztZQUMxQixPQUFPLEVBQUUsS0FBSyxDQUFDLE9BQU87WUFDdEIsUUFBUSxFQUFFLEtBQUssQ0FBQyxRQUFRO1lBQ3hCLE1BQU0sRUFBRSxLQUFLLENBQUMsTUFBTTtZQUNwQixRQUFRLEVBQUUsS0FBSyxDQUFDLFFBQVE7WUFDeEIsT0FBTyxFQUFFLEtBQUssQ0FBQyxPQUFPO1lBQ3RCLE9BQU8sRUFBRSxLQUFLLENBQUMsT0FBTztZQUN0QixTQUFTLEVBQUUsS0FBSyxDQUFDLFNBQVM7WUFDMUIsaUJBQWlCLEVBQUUsS0FBSyxDQUFDLGlCQUFpQjtTQUM3QyxFQUFFLGdDQUFnQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztRQUNwRixJQUFJLENBQUMsUUFBUSxHQUFHLG1CQUFtQixDQUFDO1FBQ3BDLElBQUksQ0FBQyxxQkFBcUIsR0FBRyxtQkFBbUIsQ0FBQyxxQkFBcUIsQ0FBQztRQUN2RSxJQUFJLENBQUMsV0FBVyxHQUFHLG1CQUFtQixDQUFDLFdBQVcsQ0FBQztJQUN2RCxDQUFDO0NBQ0o7QUEzQ0QsNENBMkNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcm9zIGZyb20gJ0BhbGljbG91ZC9yb3MtY2RrLWNvcmUnO1xuaW1wb3J0IHsgUm9zT3NzRXh0ZXJuYWxTdG9yZSB9IGZyb20gJy4vc2xzLmdlbmVyYXRlZCc7XG4vLyBHZW5lcmF0ZWQgZnJvbSB0aGUgQWxpQ2xvdWQgUk9TIFJlc291cmNlIFNwZWNpZmljYXRpb25cbmV4cG9ydCB7IFJvc09zc0V4dGVybmFsU3RvcmUgYXMgT3NzRXh0ZXJuYWxTdG9yZVByb3BlcnR5IH07XG5cbi8qKlxuICogUHJvcGVydGllcyBmb3IgZGVmaW5pbmcgYSBgT3NzRXh0ZXJuYWxTdG9yZWAuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2FsaXl1bi1zbHMtb3NzZXh0ZXJuYWxzdG9yZVxuICovXG5leHBvcnQgaW50ZXJmYWNlIE9zc0V4dGVybmFsU3RvcmVQcm9wcyB7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBhY2Nlc3NJZDogVGhlIEFjY2Vzc0tleSBJRC5cbiAgICAgKi9cbiAgICByZWFkb25seSBhY2Nlc3NJZDogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgYWNjZXNzS2V5OiBUaGUgQWNjZXNzS2V5IHNlY3JldC5cbiAgICAgKi9cbiAgICByZWFkb25seSBhY2Nlc3NLZXk6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGJ1Y2tldDogVGhlIG5hbWUgb2YgdGhlIE9TUyBidWNrZXQuXG4gICAgICovXG4gICAgcmVhZG9ubHkgYnVja2V0OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBjb2x1bW5zOiBUaGUgYXNzb2NpYXRlZCBmaWVsZHMuXG4gICAgICovXG4gICAgcmVhZG9ubHkgY29sdW1uczogQXJyYXk8Um9zT3NzRXh0ZXJuYWxTdG9yZS5Db2x1bW5zUHJvcGVydHkgfCByb3MuSVJlc29sdmFibGU+IHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgZW5kcG9pbnQ6IFRoZSBPU1MgZW5kcG9pbnQuXG4gICAgICovXG4gICAgcmVhZG9ubHkgZW5kcG9pbnQ6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGV4dGVybmFsU3RvcmVOYW1lOiBUaGUgbmFtZSBvZiB0aGUgZXh0ZXJuYWwgc3RvcmUuXG4gICAgICovXG4gICAgcmVhZG9ubHkgZXh0ZXJuYWxTdG9yZU5hbWU6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IG9iamVjdHM6IFRoZSBhc3NvY2lhdGVkIE9TUyBvYmplY3RzLiBWYWxpZCB2YWx1ZXMgb2YgbjogMSB0byAxMDAuXG4gICAgICovXG4gICAgcmVhZG9ubHkgb2JqZWN0czogQXJyYXk8c3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlPiB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHByb2plY3Q6IEEgc2hvcnQgZGVzY3JpcHRpb24gb2Ygc3RydWN0XG4gICAgICovXG4gICAgcmVhZG9ubHkgcHJvamVjdDogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgc3RvcmVUeXBlOiBUaGUgdHlwZSBvZiB0aGUgZXh0ZXJuYWwgc3RvcmUuIFNldCB0aGUgdmFsdWUgdG8gb3NzLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHN0b3JlVHlwZTogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xufVxuXG4vKipcbiAqIFRoaXMgY2xhc3MgZW5jYXBzdWxhdGVzIGFuZCBleHRlbmRzIHRoZSBST1MgcmVzb3VyY2UgdHlwZSBgQUxJWVVOOjpTTFM6Ok9zc0V4dGVybmFsU3RvcmVgLlxuICogQE5vdGUgVGhpcyBjbGFzcyBtYXkgaGF2ZSBzb21lIG5ldyBmdW5jdGlvbnMgdG8gZmFjaWxpdGF0ZSBkZXZlbG9wbWVudCwgc28gaXQgaXMgcmVjb21tZW5kZWQgdG8gdXNlIHRoaXMgY2xhc3MgaW5zdGVhZCBvZiBgUm9zT3NzRXh0ZXJuYWxTdG9yZWBmb3IgYSBtb3JlIGNvbnZlbmllbnQgZGV2ZWxvcG1lbnQgZXhwZXJpZW5jZS5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvYWxpeXVuLXNscy1vc3NleHRlcm5hbHN0b3JlXG4gKi9cbmV4cG9ydCBjbGFzcyBPc3NFeHRlcm5hbFN0b3JlIGV4dGVuZHMgcm9zLlJlc291cmNlIHtcbiAgICBwcm90ZWN0ZWQgc2NvcGU6IHJvcy5Db25zdHJ1Y3Q7XG4gICAgcHJvdGVjdGVkIGlkOiBzdHJpbmc7XG4gICAgcHJvdGVjdGVkIHByb3BzOiBPc3NFeHRlcm5hbFN0b3JlUHJvcHM7XG4gICAgcHJvdGVjdGVkIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OiBib29sZWFuO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIEV4dGVybmFsU3RvcmVOYW1lOiBUaGUgbmFtZSBvZiB0aGUgZXh0ZXJuYWwgc3RvcmUuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJFeHRlcm5hbFN0b3JlTmFtZTogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIFByb2plY3Q6IFRoZSBuYW1lIG9mIHRoZSBwcm9qZWN0IHRvIHdoaWNoIHRoZSBleHRlcm5hbCBzdG9yZSBiZWxvbmdzLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyUHJvamVjdDogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUGFyYW0gc2NvcGUgLSBzY29wZSBpbiB3aGljaCB0aGlzIHJlc291cmNlIGlzIGRlZmluZWRcbiAgICAgKiBQYXJhbSBpZCAgICAtIHNjb3BlZCBpZCBvZiB0aGUgcmVzb3VyY2VcbiAgICAgKiBQYXJhbSBwcm9wcyAtIHJlc291cmNlIHByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihzY29wZTogcm9zLkNvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IE9zc0V4dGVybmFsU3RvcmVQcm9wcywgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6Ym9vbGVhbiA9IHRydWUpIHtcbiAgICAgICAgc3VwZXIoc2NvcGUsIGlkKTtcbiAgICAgICAgdGhpcy5zY29wZSA9IHNjb3BlO1xuICAgICAgICB0aGlzLmlkID0gaWQ7XG4gICAgICAgIHRoaXMucHJvcHMgPSBwcm9wcztcbiAgICAgICAgdGhpcy5lbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCA9IGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50O1xuXG4gICAgICAgIGNvbnN0IHJvc09zc0V4dGVybmFsU3RvcmUgPSBuZXcgUm9zT3NzRXh0ZXJuYWxTdG9yZSh0aGlzLCBpZCwgIHtcbiAgICAgICAgICAgIHN0b3JlVHlwZTogcHJvcHMuc3RvcmVUeXBlLFxuICAgICAgICAgICAgcHJvamVjdDogcHJvcHMucHJvamVjdCxcbiAgICAgICAgICAgIGVuZHBvaW50OiBwcm9wcy5lbmRwb2ludCxcbiAgICAgICAgICAgIGJ1Y2tldDogcHJvcHMuYnVja2V0LFxuICAgICAgICAgICAgYWNjZXNzSWQ6IHByb3BzLmFjY2Vzc0lkLFxuICAgICAgICAgICAgb2JqZWN0czogcHJvcHMub2JqZWN0cyxcbiAgICAgICAgICAgIGNvbHVtbnM6IHByb3BzLmNvbHVtbnMsXG4gICAgICAgICAgICBhY2Nlc3NLZXk6IHByb3BzLmFjY2Vzc0tleSxcbiAgICAgICAgICAgIGV4dGVybmFsU3RvcmVOYW1lOiBwcm9wcy5leHRlcm5hbFN0b3JlTmFtZSxcbiAgICAgICAgfSwgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgJiYgdGhpcy5zdGFjay5lbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCk7XG4gICAgICAgIHRoaXMucmVzb3VyY2UgPSByb3NPc3NFeHRlcm5hbFN0b3JlO1xuICAgICAgICB0aGlzLmF0dHJFeHRlcm5hbFN0b3JlTmFtZSA9IHJvc09zc0V4dGVybmFsU3RvcmUuYXR0ckV4dGVybmFsU3RvcmVOYW1lO1xuICAgICAgICB0aGlzLmF0dHJQcm9qZWN0ID0gcm9zT3NzRXh0ZXJuYWxTdG9yZS5hdHRyUHJvamVjdDtcbiAgICB9XG59XG4iXX0=