"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubscriptionJob2 = exports.SubscriptionJob2Property = void 0;
const ros = require("@alicloud/ros-cdk-core");
const dts_generated_1 = require("./dts.generated");
Object.defineProperty(exports, "SubscriptionJob2Property", { enumerable: true, get: function () { return dts_generated_1.RosSubscriptionJob2; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::DTS::SubscriptionJob2`, which is used to configure a change tracking task.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosSubscriptionJob2`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-dts-subscriptionjob2
 */
class SubscriptionJob2 extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosSubscriptionJob2 = new dts_generated_1.RosSubscriptionJob2(this, id, {
            status: props.status,
            reserve: props.reserve,
            delayPhone: props.delayPhone,
            dedicatedClusterId: props.dedicatedClusterId,
            errorNotice: props.errorNotice,
            dtsJobName: props.dtsJobName,
            delayRuleTime: props.delayRuleTime,
            dtsInstanceId: props.dtsInstanceId,
            dbList: props.dbList,
            dtsBisLabel: props.dtsBisLabel,
            subscriptionDataType: props.subscriptionDataType,
            checkpoint: props.checkpoint,
            delayNotice: props.delayNotice,
            dtsJobId: props.dtsJobId,
            subscriptionInstance: props.subscriptionInstance,
            sourceEndpoint: props.sourceEndpoint,
            errorPhone: props.errorPhone,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosSubscriptionJob2;
        this.attrDtsInstanceId = rosSubscriptionJob2.attrDtsInstanceId;
        this.attrDtsJobId = rosSubscriptionJob2.attrDtsJobId;
        this.attrDtsJobName = rosSubscriptionJob2.attrDtsJobName;
    }
}
exports.SubscriptionJob2 = SubscriptionJob2;
//# sourceMappingURL=data:application/json;base64,