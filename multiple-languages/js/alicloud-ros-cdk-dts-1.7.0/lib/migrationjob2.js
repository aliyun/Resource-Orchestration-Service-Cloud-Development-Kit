"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MigrationJob2 = exports.MigrationJob2Property = void 0;
const ros = require("@alicloud/ros-cdk-core");
const dts_generated_1 = require("./dts.generated");
Object.defineProperty(exports, "MigrationJob2Property", { enumerable: true, get: function () { return dts_generated_1.RosMigrationJob2; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::DTS::MigrationJob2`, which is used to purchase a data migration instance and configure a data migration task of the new version.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosMigrationJob2`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-dts-migrationjob2
 */
class MigrationJob2 extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosMigrationJob2 = new dts_generated_1.RosMigrationJob2(this, id, {
            status: props.status,
            reserve: props.reserve,
            dataSynchronization: props.dataSynchronization,
            dedicatedClusterId: props.dedicatedClusterId,
            delayPhone: props.delayPhone,
            errorNotice: props.errorNotice,
            dtsJobName: props.dtsJobName,
            delayRuleTime: props.delayRuleTime,
            dtsInstanceId: props.dtsInstanceId,
            dbList: props.dbList,
            fileOssUrl: props.fileOssUrl,
            dataCheckConfigure: props.dataCheckConfigure,
            dtsBisLabel: props.dtsBisLabel,
            checkpoint: props.checkpoint,
            disasterRecoveryJob: props.disasterRecoveryJob,
            dtsJobId: props.dtsJobId,
            delayNotice: props.delayNotice,
            dataInitialization: props.dataInitialization,
            destinationEndpoint: props.destinationEndpoint,
            sourceEndpoint: props.sourceEndpoint,
            errorPhone: props.errorPhone,
            structureInitialization: props.structureInitialization,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosMigrationJob2;
        this.attrDtsInstanceId = rosMigrationJob2.attrDtsInstanceId;
        this.attrDtsJobId = rosMigrationJob2.attrDtsJobId;
        this.attrDtsJobName = rosMigrationJob2.attrDtsJobName;
    }
}
exports.MigrationJob2 = MigrationJob2;
//# sourceMappingURL=data:application/json;base64,