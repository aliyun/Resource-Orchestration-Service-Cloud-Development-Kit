"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransitRouterVpnAttachment = exports.TransitRouterVpnAttachmentProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const cen_generated_1 = require("./cen.generated");
Object.defineProperty(exports, "TransitRouterVpnAttachmentProperty", { enumerable: true, get: function () { return cen_generated_1.RosTransitRouterVpnAttachment; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::CEN::TransitRouterVpnAttachment`, which is used to create a VPN attachment.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosTransitRouterVpnAttachment`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-cen-transitroutervpnattachment
 */
class TransitRouterVpnAttachment extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosTransitRouterVpnAttachment = new cen_generated_1.RosTransitRouterVpnAttachment(this, id, {
            autoPublishRouteEnabled: props.autoPublishRouteEnabled,
            routeTableAssociationEnabled: props.routeTableAssociationEnabled,
            vpnOwnerId: props.vpnOwnerId,
            deletionForce: props.deletionForce,
            zoneId: props.zoneId,
            routeTablePropagationEnabled: props.routeTablePropagationEnabled,
            cenId: props.cenId,
            transitRouterAttachmentName: props.transitRouterAttachmentName,
            tags: props.tags,
            transitRouterAttachmentDescription: props.transitRouterAttachmentDescription,
            transitRouterId: props.transitRouterId,
            vpnId: props.vpnId,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosTransitRouterVpnAttachment;
        this.attrTransitRouterAttachmentId = rosTransitRouterVpnAttachment.attrTransitRouterAttachmentId;
    }
}
exports.TransitRouterVpnAttachment = TransitRouterVpnAttachment;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNpdHJvdXRlcnZwbmF0dGFjaG1lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ0cmFuc2l0cm91dGVydnBuYXR0YWNobWVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw4Q0FBOEM7QUFDOUMsbURBQWdFO0FBRXRCLG1IQUZqQyw2Q0FBNkIsT0FFc0M7QUFxRTVFOzs7O0dBSUc7QUFDSCxNQUFhLDBCQUEyQixTQUFRLEdBQUcsQ0FBQyxRQUFRO0lBV3hEOzs7O09BSUc7SUFDSCxZQUFZLEtBQW9CLEVBQUUsRUFBVSxFQUFFLEtBQXNDLEVBQUUsbUNBQTJDLElBQUk7UUFDakksS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNqQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUNiLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxnQ0FBZ0MsR0FBRyxnQ0FBZ0MsQ0FBQztRQUV6RSxNQUFNLDZCQUE2QixHQUFHLElBQUksNkNBQTZCLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRztZQUMvRSx1QkFBdUIsRUFBRSxLQUFLLENBQUMsdUJBQXVCO1lBQ3RELDRCQUE0QixFQUFFLEtBQUssQ0FBQyw0QkFBNEI7WUFDaEUsVUFBVSxFQUFFLEtBQUssQ0FBQyxVQUFVO1lBQzVCLGFBQWEsRUFBRSxLQUFLLENBQUMsYUFBYTtZQUNsQyxNQUFNLEVBQUUsS0FBSyxDQUFDLE1BQU07WUFDcEIsNEJBQTRCLEVBQUUsS0FBSyxDQUFDLDRCQUE0QjtZQUNoRSxLQUFLLEVBQUUsS0FBSyxDQUFDLEtBQUs7WUFDbEIsMkJBQTJCLEVBQUUsS0FBSyxDQUFDLDJCQUEyQjtZQUM5RCxJQUFJLEVBQUUsS0FBSyxDQUFDLElBQUk7WUFDaEIsa0NBQWtDLEVBQUUsS0FBSyxDQUFDLGtDQUFrQztZQUM1RSxlQUFlLEVBQUUsS0FBSyxDQUFDLGVBQWU7WUFDdEMsS0FBSyxFQUFFLEtBQUssQ0FBQyxLQUFLO1NBQ3JCLEVBQUUsZ0NBQWdDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO1FBQ3BGLElBQUksQ0FBQyxRQUFRLEdBQUcsNkJBQTZCLENBQUM7UUFDOUMsSUFBSSxDQUFDLDZCQUE2QixHQUFHLDZCQUE2QixDQUFDLDZCQUE2QixDQUFDO0lBQ3JHLENBQUM7Q0FDSjtBQXhDRCxnRUF3Q0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyByb3MgZnJvbSAnQGFsaWNsb3VkL3Jvcy1jZGstY29yZSc7XG5pbXBvcnQgeyBSb3NUcmFuc2l0Um91dGVyVnBuQXR0YWNobWVudCB9IGZyb20gJy4vY2VuLmdlbmVyYXRlZCc7XG4vLyBHZW5lcmF0ZWQgZnJvbSB0aGUgQWxpQ2xvdWQgUk9TIFJlc291cmNlIFNwZWNpZmljYXRpb25cbmV4cG9ydCB7IFJvc1RyYW5zaXRSb3V0ZXJWcG5BdHRhY2htZW50IGFzIFRyYW5zaXRSb3V0ZXJWcG5BdHRhY2htZW50UHJvcGVydHkgfTtcblxuLyoqXG4gKiBQcm9wZXJ0aWVzIGZvciBkZWZpbmluZyBhIGBUcmFuc2l0Um91dGVyVnBuQXR0YWNobWVudGAuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2FsaXl1bi1jZW4tdHJhbnNpdHJvdXRlcnZwbmF0dGFjaG1lbnRcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBUcmFuc2l0Um91dGVyVnBuQXR0YWNobWVudFByb3BzIHtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHZwbklkOiBJUHNlYyBjb25uZWN0aW9uIElEXG4gICAgICovXG4gICAgcmVhZG9ubHkgdnBuSWQ6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHpvbmVJZDogQXZhaWxhYmlsaXR5IHpvbmUgSUQgaW4gdGhlIGN1cnJlbnQgcmVnaW9uLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHpvbmVJZDogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgYXV0b1B1Ymxpc2hSb3V0ZUVuYWJsZWQ6IFdoZXRoZXIgdG8gYWxsb3cgZm9yd2FyZGluZyByb3V0ZXIgaW5zdGFuY2VzIHRvIGF1dG9tYXRpY2FsbHkgcHVibGlzaCByb3V0ZSBlbnRyaWVzIHRvIElQc2VjIGNvbm5lY3Rpb25zLiBEZWZhdWx0IGlzIHRydWUuXG4gICAgICovXG4gICAgcmVhZG9ubHkgYXV0b1B1Ymxpc2hSb3V0ZUVuYWJsZWQ/OiBib29sZWFuIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgY2VuSWQ6IFRoZSBJRCBvZiB0aGUgQ0VOIGluc3RhbmNlLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGNlbklkPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgZGVsZXRpb25Gb3JjZTogV2hldGhlciB0byBmb3JjZWZ1bGx5IGRlbGV0ZSB0aGUgVlBOIGNvbm5lY3Rpb24uXG4gICAgICovXG4gICAgcmVhZG9ubHkgZGVsZXRpb25Gb3JjZT86IGJvb2xlYW4gfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSByb3V0ZVRhYmxlQXNzb2NpYXRpb25FbmFibGVkOiBXaGV0aGVyIHRvIGVuYWJsZSByb3V0ZSBhc3NvY2lhdGlvbiBhbmQgZm9yd2FyZGluZyByZWxhdGlvbnNoaXAuXG4gICAgICovXG4gICAgcmVhZG9ubHkgcm91dGVUYWJsZUFzc29jaWF0aW9uRW5hYmxlZD86IGJvb2xlYW4gfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSByb3V0ZVRhYmxlUHJvcGFnYXRpb25FbmFibGVkOiBXaGV0aGVyIHRvIGVuYWJsZSByb3V0ZSBsZWFybmluZyByZWxhdGlvbnNoaXBzLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHJvdXRlVGFibGVQcm9wYWdhdGlvbkVuYWJsZWQ/OiBib29sZWFuIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgdGFnczogVGFncyB0byBhdHRhY2ggdG8gVHJhbnNpdFJvdXRlclZwbkF0dGFjaG1lbnQuIE1heCBzdXBwb3J0IDIwIHRhZ3MgdG8gYWRkIGR1cmluZyBjcmVhdGUgVHJhbnNpdFJvdXRlclZwbkF0dGFjaG1lbnQuIEVhY2ggdGFnIHdpdGggdHdvIHByb3BlcnRpZXMgS2V5IGFuZCBWYWx1ZSwgYW5kIEtleSBpcyByZXF1aXJlZC5cbiAgICAgKi9cbiAgICByZWFkb25seSB0YWdzPzogUm9zVHJhbnNpdFJvdXRlclZwbkF0dGFjaG1lbnQuVGFnc1Byb3BlcnR5W107XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSB0cmFuc2l0Um91dGVyQXR0YWNobWVudERlc2NyaXB0aW9uOiBEZXNjcmlwdGlvbiBvZiB0aGUgVlBOIGNvbm5lY3Rpb24uXG4gICAgICovXG4gICAgcmVhZG9ubHkgdHJhbnNpdFJvdXRlckF0dGFjaG1lbnREZXNjcmlwdGlvbj86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHRyYW5zaXRSb3V0ZXJBdHRhY2htZW50TmFtZTogVGhlIG5hbWUgb2YgdGhlIFZQTiBjb25uZWN0aW9uLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHRyYW5zaXRSb3V0ZXJBdHRhY2htZW50TmFtZT86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHRyYW5zaXRSb3V0ZXJJZDogRm9yd2FyZGluZyByb3V0ZXIgaW5zdGFuY2UgSURcbiAgICAgKi9cbiAgICByZWFkb25seSB0cmFuc2l0Um91dGVySWQ/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSB2cG5Pd25lcklkOiBBbGliYWJhIENsb3VkIGFjY291bnQgKG1haW4gYWNjb3VudCkgSUQgdG8gd2hpY2ggdGhlIElQc2VjIGNvbm5lY3Rpb24gYmVsb25ncy5cbiAgICAgKi9cbiAgICByZWFkb25seSB2cG5Pd25lcklkPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xufVxuXG4vKipcbiAqIFRoaXMgY2xhc3MgZW5jYXBzdWxhdGVzIGFuZCBleHRlbmRzIHRoZSBST1MgcmVzb3VyY2UgdHlwZSBgQUxJWVVOOjpDRU46OlRyYW5zaXRSb3V0ZXJWcG5BdHRhY2htZW50YCwgd2hpY2ggaXMgdXNlZCB0byBjcmVhdGUgYSBWUE4gYXR0YWNobWVudC5cbiAqIEBOb3RlIFRoaXMgY2xhc3MgbWF5IGhhdmUgc29tZSBuZXcgZnVuY3Rpb25zIHRvIGZhY2lsaXRhdGUgZGV2ZWxvcG1lbnQsIHNvIGl0IGlzIHJlY29tbWVuZGVkIHRvIHVzZSB0aGlzIGNsYXNzIGluc3RlYWQgb2YgYFJvc1RyYW5zaXRSb3V0ZXJWcG5BdHRhY2htZW50YGZvciBhIG1vcmUgY29udmVuaWVudCBkZXZlbG9wbWVudCBleHBlcmllbmNlLlxuICogU2VlIGh0dHBzOi8vd3d3LmFsaWJhYmFjbG91ZC5jb20vaGVscC9yb3MvZGV2ZWxvcGVyLXJlZmVyZW5jZS9hbGl5dW4tY2VuLXRyYW5zaXRyb3V0ZXJ2cG5hdHRhY2htZW50XG4gKi9cbmV4cG9ydCBjbGFzcyBUcmFuc2l0Um91dGVyVnBuQXR0YWNobWVudCBleHRlbmRzIHJvcy5SZXNvdXJjZSB7XG4gICAgcHJvdGVjdGVkIHNjb3BlOiByb3MuQ29uc3RydWN0O1xuICAgIHByb3RlY3RlZCBpZDogc3RyaW5nO1xuICAgIHByb3RlY3RlZCBwcm9wczogVHJhbnNpdFJvdXRlclZwbkF0dGFjaG1lbnRQcm9wcztcbiAgICBwcm90ZWN0ZWQgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6IGJvb2xlYW47XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgVHJhbnNpdFJvdXRlckF0dGFjaG1lbnRJZDogVGhlIElEIG9mIHRoZSBWUE4gY29ubmVjdGlvbi5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0clRyYW5zaXRSb3V0ZXJBdHRhY2htZW50SWQ6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFBhcmFtIHNjb3BlIC0gc2NvcGUgaW4gd2hpY2ggdGhpcyByZXNvdXJjZSBpcyBkZWZpbmVkXG4gICAgICogUGFyYW0gaWQgICAgLSBzY29wZWQgaWQgb2YgdGhlIHJlc291cmNlXG4gICAgICogUGFyYW0gcHJvcHMgLSByZXNvdXJjZSBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IHJvcy5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBUcmFuc2l0Um91dGVyVnBuQXR0YWNobWVudFByb3BzLCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDpib29sZWFuID0gdHJ1ZSkge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQpO1xuICAgICAgICB0aGlzLnNjb3BlID0gc2NvcGU7XG4gICAgICAgIHRoaXMuaWQgPSBpZDtcbiAgICAgICAgdGhpcy5wcm9wcyA9IHByb3BzO1xuICAgICAgICB0aGlzLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ID0gZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ7XG5cbiAgICAgICAgY29uc3Qgcm9zVHJhbnNpdFJvdXRlclZwbkF0dGFjaG1lbnQgPSBuZXcgUm9zVHJhbnNpdFJvdXRlclZwbkF0dGFjaG1lbnQodGhpcywgaWQsICB7XG4gICAgICAgICAgICBhdXRvUHVibGlzaFJvdXRlRW5hYmxlZDogcHJvcHMuYXV0b1B1Ymxpc2hSb3V0ZUVuYWJsZWQsXG4gICAgICAgICAgICByb3V0ZVRhYmxlQXNzb2NpYXRpb25FbmFibGVkOiBwcm9wcy5yb3V0ZVRhYmxlQXNzb2NpYXRpb25FbmFibGVkLFxuICAgICAgICAgICAgdnBuT3duZXJJZDogcHJvcHMudnBuT3duZXJJZCxcbiAgICAgICAgICAgIGRlbGV0aW9uRm9yY2U6IHByb3BzLmRlbGV0aW9uRm9yY2UsXG4gICAgICAgICAgICB6b25lSWQ6IHByb3BzLnpvbmVJZCxcbiAgICAgICAgICAgIHJvdXRlVGFibGVQcm9wYWdhdGlvbkVuYWJsZWQ6IHByb3BzLnJvdXRlVGFibGVQcm9wYWdhdGlvbkVuYWJsZWQsXG4gICAgICAgICAgICBjZW5JZDogcHJvcHMuY2VuSWQsXG4gICAgICAgICAgICB0cmFuc2l0Um91dGVyQXR0YWNobWVudE5hbWU6IHByb3BzLnRyYW5zaXRSb3V0ZXJBdHRhY2htZW50TmFtZSxcbiAgICAgICAgICAgIHRhZ3M6IHByb3BzLnRhZ3MsXG4gICAgICAgICAgICB0cmFuc2l0Um91dGVyQXR0YWNobWVudERlc2NyaXB0aW9uOiBwcm9wcy50cmFuc2l0Um91dGVyQXR0YWNobWVudERlc2NyaXB0aW9uLFxuICAgICAgICAgICAgdHJhbnNpdFJvdXRlcklkOiBwcm9wcy50cmFuc2l0Um91dGVySWQsXG4gICAgICAgICAgICB2cG5JZDogcHJvcHMudnBuSWQsXG4gICAgICAgIH0sIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ICYmIHRoaXMuc3RhY2suZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQpO1xuICAgICAgICB0aGlzLnJlc291cmNlID0gcm9zVHJhbnNpdFJvdXRlclZwbkF0dGFjaG1lbnQ7XG4gICAgICAgIHRoaXMuYXR0clRyYW5zaXRSb3V0ZXJBdHRhY2htZW50SWQgPSByb3NUcmFuc2l0Um91dGVyVnBuQXR0YWNobWVudC5hdHRyVHJhbnNpdFJvdXRlckF0dGFjaG1lbnRJZDtcbiAgICB9XG59XG4iXX0=