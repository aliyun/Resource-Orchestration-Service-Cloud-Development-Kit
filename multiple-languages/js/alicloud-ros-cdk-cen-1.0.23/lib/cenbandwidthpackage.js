"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CenBandwidthPackage = exports.CenBandwidthPackageProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const cen_generated_1 = require("./cen.generated");
Object.defineProperty(exports, "CenBandwidthPackageProperty", { enumerable: true, get: function () { return cen_generated_1.RosCenBandwidthPackage; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::CEN::CenBandwidthPackage`, which is used to purchase a bandwidth plan before you use Cloud Enterprise Network (CEN) to connect network instances in different regions.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosCenBandwidthPackage`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-cen-cenbandwidthpackage
 */
class CenBandwidthPackage extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosCenBandwidthPackage = new cen_generated_1.RosCenBandwidthPackage(this, id, {
            bandwidthPackageChargeType: props.bandwidthPackageChargeType,
            description: props.description,
            resourceGroupId: props.resourceGroupId,
            geographicRegionBId: props.geographicRegionBId,
            geographicRegionAId: props.geographicRegionAId,
            pricingCycle: props.pricingCycle === undefined || props.pricingCycle === null ? 'Month' : props.pricingCycle,
            autoRenew: props.autoRenew,
            bandwidth: props.bandwidth,
            period: props.period === undefined || props.period === null ? 1 : props.period,
            autoPay: props.autoPay === undefined || props.autoPay === null ? true : props.autoPay,
            name: props.name,
            autoRenewDuration: props.autoRenewDuration,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosCenBandwidthPackage;
        this.attrCenBandwidthPackageId = rosCenBandwidthPackage.attrCenBandwidthPackageId;
    }
}
exports.CenBandwidthPackage = CenBandwidthPackage;
//# sourceMappingURL=data:application/json;base64,