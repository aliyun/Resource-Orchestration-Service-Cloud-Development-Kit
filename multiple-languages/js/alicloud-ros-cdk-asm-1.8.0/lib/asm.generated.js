"use strict";
// Generated from the AliCloud ROS Resource Specification
Object.defineProperty(exports, "__esModule", { value: true });
exports.RosServiceMesh = void 0;
const ros = require("@alicloud/ros-cdk-core");
/**
 * Determine whether the given properties match those of a `RosServiceMeshProps`
 *
 * @param properties - the TypeScript properties of a `RosServiceMeshProps`
 *
 * @returns the result of the validation.
 */
function RosServiceMeshPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('excludeInboundPorts', ros.validateString)(properties.excludeInboundPorts));
    errors.collect(ros.propertyValidator('opa', RosServiceMesh_OPAPropertyValidator)(properties.opa));
    errors.collect(ros.propertyValidator('dubboFilterEnabled', ros.validateBoolean)(properties.dubboFilterEnabled));
    errors.collect(ros.propertyValidator('prometheusUrl', ros.validateString)(properties.prometheusUrl));
    errors.collect(ros.propertyValidator('localityLoadBalancing', ros.validateBoolean)(properties.localityLoadBalancing));
    errors.collect(ros.propertyValidator('name', ros.validateString)(properties.name));
    if (properties.accessLogServicePort && (typeof properties.accessLogServicePort) !== 'object') {
        errors.collect(ros.propertyValidator('accessLogServicePort', ros.validateRange)({
            data: properties.accessLogServicePort,
            min: 0,
            max: 65535,
        }));
    }
    errors.collect(ros.propertyValidator('accessLogServicePort', ros.validateNumber)(properties.accessLogServicePort));
    if (properties.apiServerLoadBalancerSpec && (typeof properties.apiServerLoadBalancerSpec) !== 'object') {
        errors.collect(ros.propertyValidator('apiServerLoadBalancerSpec', ros.validateAllowedValues)({
            data: properties.apiServerLoadBalancerSpec,
            allowedValues: ["slb.s1.small", "slb.s2.small", "slb.s2.medium", "slb.s3.small", "slb.s3.medium", "slb.s3.large"],
        }));
    }
    errors.collect(ros.propertyValidator('apiServerLoadBalancerSpec', ros.validateString)(properties.apiServerLoadBalancerSpec));
    errors.collect(ros.propertyValidator('multiBufferEnabled', ros.validateBoolean)(properties.multiBufferEnabled));
    errors.collect(ros.propertyValidator('dnsProxyingEnabled', ros.validateBoolean)(properties.dnsProxyingEnabled));
    errors.collect(ros.propertyValidator('opaEnabled', ros.validateBoolean)(properties.opaEnabled));
    errors.collect(ros.propertyValidator('existingCaType', ros.validateString)(properties.existingCaType));
    errors.collect(ros.propertyValidator('excludeIpRanges', ros.validateString)(properties.excludeIpRanges));
    errors.collect(ros.propertyValidator('vSwitches', ros.requiredValidator)(properties.vSwitches));
    errors.collect(ros.propertyValidator('vSwitches', ros.listValidator(ros.validateAny))(properties.vSwitches));
    errors.collect(ros.propertyValidator('guestCluster', ros.validateString)(properties.guestCluster));
    errors.collect(ros.propertyValidator('accessLogServiceEnabled', ros.validateBoolean)(properties.accessLogServiceEnabled));
    errors.collect(ros.propertyValidator('localityLbConf', ros.validateString)(properties.localityLbConf));
    errors.collect(ros.propertyValidator('mseEnabled', ros.validateBoolean)(properties.mseEnabled));
    errors.collect(ros.propertyValidator('istioVersion', ros.validateString)(properties.istioVersion));
    if (properties.period && (typeof properties.period) !== 'object') {
        errors.collect(ros.propertyValidator('period', ros.validateRange)({
            data: properties.period,
            min: 1,
            max: 36,
        }));
    }
    errors.collect(ros.propertyValidator('period', ros.validateNumber)(properties.period));
    errors.collect(ros.propertyValidator('accessLogServiceHost', ros.validateString)(properties.accessLogServiceHost));
    errors.collect(ros.propertyValidator('outboundTrafficPolicy', ros.validateString)(properties.outboundTrafficPolicy));
    errors.collect(ros.propertyValidator('playgroundScene', ros.validateString)(properties.playgroundScene));
    errors.collect(ros.propertyValidator('edition', ros.validateString)(properties.edition));
    errors.collect(ros.propertyValidator('gatewayApiEnabled', ros.validateBoolean)(properties.gatewayApiEnabled));
    errors.collect(ros.propertyValidator('vpcId', ros.requiredValidator)(properties.vpcId));
    errors.collect(ros.propertyValidator('vpcId', ros.validateString)(properties.vpcId));
    errors.collect(ros.propertyValidator('includeIpRanges', ros.validateString)(properties.includeIpRanges));
    errors.collect(ros.propertyValidator('controlPlaneLogEnabled', ros.validateBoolean)(properties.controlPlaneLogEnabled));
    errors.collect(ros.propertyValidator('tracing', ros.validateBoolean)(properties.tracing));
    errors.collect(ros.propertyValidator('configSourceNacosId', ros.validateString)(properties.configSourceNacosId));
    errors.collect(ros.propertyValidator('accessLogEnabled', ros.validateBoolean)(properties.accessLogEnabled));
    errors.collect(ros.propertyValidator('certChain', ros.validateString)(properties.certChain));
    errors.collect(ros.propertyValidator('autoRenew', ros.validateBoolean)(properties.autoRenew));
    errors.collect(ros.propertyValidator('pilotLoadBalancerSpec', ros.validateString)(properties.pilotLoadBalancerSpec));
    errors.collect(ros.propertyValidator('existingRootCaCert', ros.validateString)(properties.existingRootCaCert));
    errors.collect(ros.propertyValidator('proxy', RosServiceMesh_ProxyPropertyValidator)(properties.proxy));
    errors.collect(ros.propertyValidator('customizedPrometheus', ros.validateBoolean)(properties.customizedPrometheus));
    errors.collect(ros.propertyValidator('multiBufferPollDelay', ros.validateString)(properties.multiBufferPollDelay));
    errors.collect(ros.propertyValidator('mysqlFilterEnabled', ros.validateBoolean)(properties.mysqlFilterEnabled));
    errors.collect(ros.propertyValidator('enableSdsServer', ros.validateBoolean)(properties.enableSdsServer));
    errors.collect(ros.propertyValidator('enableAmbient', ros.validateBoolean)(properties.enableAmbient));
    errors.collect(ros.propertyValidator('controlPlaneLogProject', ros.validateString)(properties.controlPlaneLogProject));
    if (properties.autoRenewPeriod && (typeof properties.autoRenewPeriod) !== 'object') {
        errors.collect(ros.propertyValidator('autoRenewPeriod', ros.validateAllowedValues)({
            data: properties.autoRenewPeriod,
            allowedValues: [1, 2, 3, 6],
        }));
    }
    errors.collect(ros.propertyValidator('autoRenewPeriod', ros.validateNumber)(properties.autoRenewPeriod));
    errors.collect(ros.propertyValidator('enableAudit', ros.validateBoolean)(properties.enableAudit));
    errors.collect(ros.propertyValidator('configSourceEnabled', ros.validateBoolean)(properties.configSourceEnabled));
    errors.collect(ros.propertyValidator('accessLogProject', ros.validateString)(properties.accessLogProject));
    errors.collect(ros.propertyValidator('accessLogFormat', ros.validateString)(properties.accessLogFormat));
    errors.collect(ros.propertyValidator('filterGatewayClusterConfig', ros.validateBoolean)(properties.filterGatewayClusterConfig));
    errors.collect(ros.propertyValidator('accessLogFile', ros.validateString)(properties.accessLogFile));
    if (properties.clusterSpec && (typeof properties.clusterSpec) !== 'object') {
        errors.collect(ros.propertyValidator('clusterSpec', ros.validateAllowedValues)({
            data: properties.clusterSpec,
            allowedValues: ["standard", "enterprise", "ultimate"],
        }));
    }
    errors.collect(ros.propertyValidator('clusterSpec', ros.validateString)(properties.clusterSpec));
    errors.collect(ros.propertyValidator('apiServerPublicEip', ros.validateBoolean)(properties.apiServerPublicEip));
    errors.collect(ros.propertyValidator('telemetry', ros.validateBoolean)(properties.telemetry));
    errors.collect(ros.propertyValidator('auditProject', ros.validateString)(properties.auditProject));
    errors.collect(ros.propertyValidator('useExistingCa', ros.validateBoolean)(properties.useExistingCa));
    errors.collect(ros.propertyValidator('traceSampling', ros.validateNumber)(properties.traceSampling));
    errors.collect(ros.propertyValidator('enableCrHistory', ros.validateBoolean)(properties.enableCrHistory));
    errors.collect(ros.propertyValidator('kialiEnabled', ros.validateBoolean)(properties.kialiEnabled));
    errors.collect(ros.propertyValidator('webAssemblyFilterEnabled', ros.validateBoolean)(properties.webAssemblyFilterEnabled));
    errors.collect(ros.propertyValidator('existingRootCaKey', ros.validateString)(properties.existingRootCaKey));
    errors.collect(ros.propertyValidator('pilotPublicEip', ros.validateBoolean)(properties.pilotPublicEip));
    if (properties.chargeType && (typeof properties.chargeType) !== 'object') {
        errors.collect(ros.propertyValidator('chargeType', ros.validateAllowedValues)({
            data: properties.chargeType,
            allowedValues: ["PayAsYouGo", "PostPaid", "PayOnDemand", "Postpaid", "PostPay", "Postpay", "POSTPAY", "POST", "Subscription", "PrePaid", "Prepaid", "PrePay", "Prepay", "PREPAY", "PRE"],
        }));
    }
    errors.collect(ros.propertyValidator('chargeType', ros.validateString)(properties.chargeType));
    errors.collect(ros.propertyValidator('crAggregationEnabled', ros.validateBoolean)(properties.crAggregationEnabled));
    errors.collect(ros.propertyValidator('excludeOutboundPorts', ros.validateString)(properties.excludeOutboundPorts));
    errors.collect(ros.propertyValidator('existingCaKey', ros.validateString)(properties.existingCaKey));
    errors.collect(ros.propertyValidator('enableAcmg', ros.validateBoolean)(properties.enableAcmg));
    errors.collect(ros.propertyValidator('existingCaCert', ros.validateString)(properties.existingCaCert));
    errors.collect(ros.propertyValidator('customizedZipkin', ros.validateBoolean)(properties.customizedZipkin));
    return errors.wrap('supplied properties not correct for "RosServiceMeshProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ASM::ServiceMesh` resource
 *
 * @param properties - the TypeScript properties of a `RosServiceMeshProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ASM::ServiceMesh` resource.
 */
// @ts-ignore TS6133
function rosServiceMeshPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosServiceMeshPropsValidator(properties).assertSuccess();
    }
    return {
        'VpcId': ros.stringToRosTemplate(properties.vpcId),
        'VSwitches': ros.listMapper(ros.objectToRosTemplate)(properties.vSwitches),
        'AccessLogEnabled': ros.booleanToRosTemplate(properties.accessLogEnabled),
        'AccessLogFile': ros.stringToRosTemplate(properties.accessLogFile),
        'AccessLogFormat': ros.stringToRosTemplate(properties.accessLogFormat),
        'AccessLogProject': ros.stringToRosTemplate(properties.accessLogProject),
        'AccessLogServiceEnabled': ros.booleanToRosTemplate(properties.accessLogServiceEnabled),
        'AccessLogServiceHost': ros.stringToRosTemplate(properties.accessLogServiceHost),
        'AccessLogServicePort': ros.numberToRosTemplate(properties.accessLogServicePort),
        'ApiServerLoadBalancerSpec': ros.stringToRosTemplate(properties.apiServerLoadBalancerSpec),
        'ApiServerPublicEip': ros.booleanToRosTemplate(properties.apiServerPublicEip),
        'AuditProject': ros.stringToRosTemplate(properties.auditProject),
        'AutoRenew': ros.booleanToRosTemplate(properties.autoRenew),
        'AutoRenewPeriod': ros.numberToRosTemplate(properties.autoRenewPeriod),
        'CertChain': ros.stringToRosTemplate(properties.certChain),
        'ChargeType': ros.stringToRosTemplate(properties.chargeType),
        'ClusterSpec': ros.stringToRosTemplate(properties.clusterSpec),
        'ConfigSourceEnabled': ros.booleanToRosTemplate(properties.configSourceEnabled),
        'ConfigSourceNacosID': ros.stringToRosTemplate(properties.configSourceNacosId),
        'ControlPlaneLogEnabled': ros.booleanToRosTemplate(properties.controlPlaneLogEnabled),
        'ControlPlaneLogProject': ros.stringToRosTemplate(properties.controlPlaneLogProject),
        'CRAggregationEnabled': ros.booleanToRosTemplate(properties.crAggregationEnabled),
        'CustomizedPrometheus': ros.booleanToRosTemplate(properties.customizedPrometheus),
        'CustomizedZipkin': ros.booleanToRosTemplate(properties.customizedZipkin),
        'DNSProxyingEnabled': ros.booleanToRosTemplate(properties.dnsProxyingEnabled),
        'DubboFilterEnabled': ros.booleanToRosTemplate(properties.dubboFilterEnabled),
        'Edition': ros.stringToRosTemplate(properties.edition),
        'EnableACMG': ros.booleanToRosTemplate(properties.enableAcmg),
        'EnableAmbient': ros.booleanToRosTemplate(properties.enableAmbient),
        'EnableAudit': ros.booleanToRosTemplate(properties.enableAudit),
        'EnableCRHistory': ros.booleanToRosTemplate(properties.enableCrHistory),
        'EnableSDSServer': ros.booleanToRosTemplate(properties.enableSdsServer),
        'ExcludeInboundPorts': ros.stringToRosTemplate(properties.excludeInboundPorts),
        'ExcludeIPRanges': ros.stringToRosTemplate(properties.excludeIpRanges),
        'ExcludeOutboundPorts': ros.stringToRosTemplate(properties.excludeOutboundPorts),
        'ExistingCaCert': ros.stringToRosTemplate(properties.existingCaCert),
        'ExistingCaKey': ros.stringToRosTemplate(properties.existingCaKey),
        'ExistingCaType': ros.stringToRosTemplate(properties.existingCaType),
        'ExistingRootCaCert': ros.stringToRosTemplate(properties.existingRootCaCert),
        'ExistingRootCaKey': ros.stringToRosTemplate(properties.existingRootCaKey),
        'FilterGatewayClusterConfig': ros.booleanToRosTemplate(properties.filterGatewayClusterConfig),
        'GatewayAPIEnabled': ros.booleanToRosTemplate(properties.gatewayApiEnabled),
        'GuestCluster': ros.stringToRosTemplate(properties.guestCluster),
        'IncludeIPRanges': ros.stringToRosTemplate(properties.includeIpRanges),
        'IstioVersion': ros.stringToRosTemplate(properties.istioVersion),
        'KialiEnabled': ros.booleanToRosTemplate(properties.kialiEnabled),
        'LocalityLBConf': ros.stringToRosTemplate(properties.localityLbConf),
        'LocalityLoadBalancing': ros.booleanToRosTemplate(properties.localityLoadBalancing),
        'MSEEnabled': ros.booleanToRosTemplate(properties.mseEnabled),
        'MultiBufferEnabled': ros.booleanToRosTemplate(properties.multiBufferEnabled),
        'MultiBufferPollDelay': ros.stringToRosTemplate(properties.multiBufferPollDelay),
        'MysqlFilterEnabled': ros.booleanToRosTemplate(properties.mysqlFilterEnabled),
        'Name': ros.stringToRosTemplate(properties.name),
        'OPA': rosServiceMeshOPAPropertyToRosTemplate(properties.opa),
        'OpaEnabled': ros.booleanToRosTemplate(properties.opaEnabled),
        'OutboundTrafficPolicy': ros.stringToRosTemplate(properties.outboundTrafficPolicy),
        'Period': ros.numberToRosTemplate(properties.period),
        'PilotLoadBalancerSpec': ros.stringToRosTemplate(properties.pilotLoadBalancerSpec),
        'PilotPublicEip': ros.booleanToRosTemplate(properties.pilotPublicEip),
        'PlaygroundScene': ros.stringToRosTemplate(properties.playgroundScene),
        'PrometheusUrl': ros.stringToRosTemplate(properties.prometheusUrl),
        'Proxy': rosServiceMeshProxyPropertyToRosTemplate(properties.proxy),
        'Telemetry': ros.booleanToRosTemplate(properties.telemetry),
        'TraceSampling': ros.numberToRosTemplate(properties.traceSampling),
        'Tracing': ros.booleanToRosTemplate(properties.tracing),
        'UseExistingCA': ros.booleanToRosTemplate(properties.useExistingCa),
        'WebAssemblyFilterEnabled': ros.booleanToRosTemplate(properties.webAssemblyFilterEnabled),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::ASM::ServiceMesh`, which is used to create a Service Mesh (ASM) instance.
 * @Note This class does not contain additional functions, so it is recommended to use the `ServiceMesh` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-asm-servicemesh
 */
class RosServiceMesh extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosServiceMesh.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrServiceMeshId = this.getAtt('ServiceMeshId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.vpcId = props.vpcId;
        this.vSwitches = props.vSwitches;
        this.accessLogEnabled = props.accessLogEnabled;
        this.accessLogFile = props.accessLogFile;
        this.accessLogFormat = props.accessLogFormat;
        this.accessLogProject = props.accessLogProject;
        this.accessLogServiceEnabled = props.accessLogServiceEnabled;
        this.accessLogServiceHost = props.accessLogServiceHost;
        this.accessLogServicePort = props.accessLogServicePort;
        this.apiServerLoadBalancerSpec = props.apiServerLoadBalancerSpec;
        this.apiServerPublicEip = props.apiServerPublicEip;
        this.auditProject = props.auditProject;
        this.autoRenew = props.autoRenew;
        this.autoRenewPeriod = props.autoRenewPeriod;
        this.certChain = props.certChain;
        this.chargeType = props.chargeType;
        this.clusterSpec = props.clusterSpec;
        this.configSourceEnabled = props.configSourceEnabled;
        this.configSourceNacosId = props.configSourceNacosId;
        this.controlPlaneLogEnabled = props.controlPlaneLogEnabled;
        this.controlPlaneLogProject = props.controlPlaneLogProject;
        this.crAggregationEnabled = props.crAggregationEnabled;
        this.customizedPrometheus = props.customizedPrometheus;
        this.customizedZipkin = props.customizedZipkin;
        this.dnsProxyingEnabled = props.dnsProxyingEnabled;
        this.dubboFilterEnabled = props.dubboFilterEnabled;
        this.edition = props.edition;
        this.enableAcmg = props.enableAcmg;
        this.enableAmbient = props.enableAmbient;
        this.enableAudit = props.enableAudit;
        this.enableCrHistory = props.enableCrHistory;
        this.enableSdsServer = props.enableSdsServer;
        this.excludeInboundPorts = props.excludeInboundPorts;
        this.excludeIpRanges = props.excludeIpRanges;
        this.excludeOutboundPorts = props.excludeOutboundPorts;
        this.existingCaCert = props.existingCaCert;
        this.existingCaKey = props.existingCaKey;
        this.existingCaType = props.existingCaType;
        this.existingRootCaCert = props.existingRootCaCert;
        this.existingRootCaKey = props.existingRootCaKey;
        this.filterGatewayClusterConfig = props.filterGatewayClusterConfig;
        this.gatewayApiEnabled = props.gatewayApiEnabled;
        this.guestCluster = props.guestCluster;
        this.includeIpRanges = props.includeIpRanges;
        this.istioVersion = props.istioVersion;
        this.kialiEnabled = props.kialiEnabled;
        this.localityLbConf = props.localityLbConf;
        this.localityLoadBalancing = props.localityLoadBalancing;
        this.mseEnabled = props.mseEnabled;
        this.multiBufferEnabled = props.multiBufferEnabled;
        this.multiBufferPollDelay = props.multiBufferPollDelay;
        this.mysqlFilterEnabled = props.mysqlFilterEnabled;
        this.name = props.name;
        this.opa = props.opa;
        this.opaEnabled = props.opaEnabled;
        this.outboundTrafficPolicy = props.outboundTrafficPolicy;
        this.period = props.period;
        this.pilotLoadBalancerSpec = props.pilotLoadBalancerSpec;
        this.pilotPublicEip = props.pilotPublicEip;
        this.playgroundScene = props.playgroundScene;
        this.prometheusUrl = props.prometheusUrl;
        this.proxy = props.proxy;
        this.telemetry = props.telemetry;
        this.traceSampling = props.traceSampling;
        this.tracing = props.tracing;
        this.useExistingCa = props.useExistingCa;
        this.webAssemblyFilterEnabled = props.webAssemblyFilterEnabled;
    }
    get rosProperties() {
        return {
            vpcId: this.vpcId,
            vSwitches: this.vSwitches,
            accessLogEnabled: this.accessLogEnabled,
            accessLogFile: this.accessLogFile,
            accessLogFormat: this.accessLogFormat,
            accessLogProject: this.accessLogProject,
            accessLogServiceEnabled: this.accessLogServiceEnabled,
            accessLogServiceHost: this.accessLogServiceHost,
            accessLogServicePort: this.accessLogServicePort,
            apiServerLoadBalancerSpec: this.apiServerLoadBalancerSpec,
            apiServerPublicEip: this.apiServerPublicEip,
            auditProject: this.auditProject,
            autoRenew: this.autoRenew,
            autoRenewPeriod: this.autoRenewPeriod,
            certChain: this.certChain,
            chargeType: this.chargeType,
            clusterSpec: this.clusterSpec,
            configSourceEnabled: this.configSourceEnabled,
            configSourceNacosId: this.configSourceNacosId,
            controlPlaneLogEnabled: this.controlPlaneLogEnabled,
            controlPlaneLogProject: this.controlPlaneLogProject,
            crAggregationEnabled: this.crAggregationEnabled,
            customizedPrometheus: this.customizedPrometheus,
            customizedZipkin: this.customizedZipkin,
            dnsProxyingEnabled: this.dnsProxyingEnabled,
            dubboFilterEnabled: this.dubboFilterEnabled,
            edition: this.edition,
            enableAcmg: this.enableAcmg,
            enableAmbient: this.enableAmbient,
            enableAudit: this.enableAudit,
            enableCrHistory: this.enableCrHistory,
            enableSdsServer: this.enableSdsServer,
            excludeInboundPorts: this.excludeInboundPorts,
            excludeIpRanges: this.excludeIpRanges,
            excludeOutboundPorts: this.excludeOutboundPorts,
            existingCaCert: this.existingCaCert,
            existingCaKey: this.existingCaKey,
            existingCaType: this.existingCaType,
            existingRootCaCert: this.existingRootCaCert,
            existingRootCaKey: this.existingRootCaKey,
            filterGatewayClusterConfig: this.filterGatewayClusterConfig,
            gatewayApiEnabled: this.gatewayApiEnabled,
            guestCluster: this.guestCluster,
            includeIpRanges: this.includeIpRanges,
            istioVersion: this.istioVersion,
            kialiEnabled: this.kialiEnabled,
            localityLbConf: this.localityLbConf,
            localityLoadBalancing: this.localityLoadBalancing,
            mseEnabled: this.mseEnabled,
            multiBufferEnabled: this.multiBufferEnabled,
            multiBufferPollDelay: this.multiBufferPollDelay,
            mysqlFilterEnabled: this.mysqlFilterEnabled,
            name: this.name,
            opa: this.opa,
            opaEnabled: this.opaEnabled,
            outboundTrafficPolicy: this.outboundTrafficPolicy,
            period: this.period,
            pilotLoadBalancerSpec: this.pilotLoadBalancerSpec,
            pilotPublicEip: this.pilotPublicEip,
            playgroundScene: this.playgroundScene,
            prometheusUrl: this.prometheusUrl,
            proxy: this.proxy,
            telemetry: this.telemetry,
            traceSampling: this.traceSampling,
            tracing: this.tracing,
            useExistingCa: this.useExistingCa,
            webAssemblyFilterEnabled: this.webAssemblyFilterEnabled,
        };
    }
    renderProperties(props) {
        return rosServiceMeshPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosServiceMesh = RosServiceMesh;
/**
 * The resource type name for this resource class.
 */
RosServiceMesh.ROS_RESOURCE_TYPE_NAME = "ALIYUN::ASM::ServiceMesh";
/**
 * Determine whether the given properties match those of a `OPAProperty`
 *
 * @param properties - the TypeScript properties of a `OPAProperty`
 *
 * @returns the result of the validation.
 */
function RosServiceMesh_OPAPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('opaRequestCpu', ros.validateString)(properties.opaRequestCpu));
    errors.collect(ros.propertyValidator('openAgentPolicy', ros.validateBoolean)(properties.openAgentPolicy));
    errors.collect(ros.propertyValidator('opaLogLevel', ros.validateString)(properties.opaLogLevel));
    errors.collect(ros.propertyValidator('opaLimitCpu', ros.validateString)(properties.opaLimitCpu));
    errors.collect(ros.propertyValidator('opaLimitMemory', ros.validateString)(properties.opaLimitMemory));
    errors.collect(ros.propertyValidator('opaRequestMemory', ros.validateString)(properties.opaRequestMemory));
    return errors.wrap('supplied properties not correct for "OPAProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ASM::ServiceMesh.OPA` resource
 *
 * @param properties - the TypeScript properties of a `OPAProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ASM::ServiceMesh.OPA` resource.
 */
// @ts-ignore TS6133
function rosServiceMeshOPAPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosServiceMesh_OPAPropertyValidator(properties).assertSuccess();
    return {
        'OPARequestCPU': ros.stringToRosTemplate(properties.opaRequestCpu),
        'OpenAgentPolicy': ros.booleanToRosTemplate(properties.openAgentPolicy),
        'OPALogLevel': ros.stringToRosTemplate(properties.opaLogLevel),
        'OPALimitCPU': ros.stringToRosTemplate(properties.opaLimitCpu),
        'OPALimitMemory': ros.stringToRosTemplate(properties.opaLimitMemory),
        'OPARequestMemory': ros.stringToRosTemplate(properties.opaRequestMemory),
    };
}
/**
 * Determine whether the given properties match those of a `ProxyProperty`
 *
 * @param properties - the TypeScript properties of a `ProxyProperty`
 *
 * @returns the result of the validation.
 */
function RosServiceMesh_ProxyPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('clusterDomain', ros.validateString)(properties.clusterDomain));
    errors.collect(ros.propertyValidator('proxyLimitCpu', ros.validateString)(properties.proxyLimitCpu));
    errors.collect(ros.propertyValidator('proxyLimitMemory', ros.validateString)(properties.proxyLimitMemory));
    errors.collect(ros.propertyValidator('proxyRequestCpu', ros.validateString)(properties.proxyRequestCpu));
    errors.collect(ros.propertyValidator('proxyRequestMemory', ros.validateString)(properties.proxyRequestMemory));
    return errors.wrap('supplied properties not correct for "ProxyProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ASM::ServiceMesh.Proxy` resource
 *
 * @param properties - the TypeScript properties of a `ProxyProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ASM::ServiceMesh.Proxy` resource.
 */
// @ts-ignore TS6133
function rosServiceMeshProxyPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosServiceMesh_ProxyPropertyValidator(properties).assertSuccess();
    return {
        'ClusterDomain': ros.stringToRosTemplate(properties.clusterDomain),
        'ProxyLimitCPU': ros.stringToRosTemplate(properties.proxyLimitCpu),
        'ProxyLimitMemory': ros.stringToRosTemplate(properties.proxyLimitMemory),
        'ProxyRequestCPU': ros.stringToRosTemplate(properties.proxyRequestCpu),
        'ProxyRequestMemory': ros.stringToRosTemplate(properties.proxyRequestMemory),
    };
}
//# sourceMappingURL=data:application/json;base64,