"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CenBandwidthPackages = exports.CenBandwidthPackagesProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const cen_generated_1 = require("./cen.generated");
Object.defineProperty(exports, "CenBandwidthPackagesProperty", { enumerable: true, get: function () { return cen_generated_1.RosCenBandwidthPackages; } });
/**
 * This class encapsulates and extends the ROS resource type `DATASOURCE::CEN::CenBandwidthPackages`, which is used to query the details of Cloud Enterprise Network (CEN) bandwidth plans within the current Alibaba Cloud account.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosCenBandwidthPackages`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/datasource-cen-cenbandwidthpackages
 */
class CenBandwidthPackages extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props = {}, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosCenBandwidthPackages = new cen_generated_1.RosCenBandwidthPackages(this, id, {
            isOrKey: props.isOrKey,
            filter: props.filter,
            includeReservationData: props.includeReservationData,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosCenBandwidthPackages;
        this.attrCenBandwidthPackageIds = rosCenBandwidthPackages.attrCenBandwidthPackageIds;
        this.attrCenBandwidthPackages = rosCenBandwidthPackages.attrCenBandwidthPackages;
    }
}
exports.CenBandwidthPackages = CenBandwidthPackages;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2VuYmFuZHdpZHRocGFja2FnZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjZW5iYW5kd2lkdGhwYWNrYWdlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw4Q0FBOEM7QUFDOUMsbURBQTBEO0FBRXRCLDZHQUYzQix1Q0FBdUIsT0FFZ0M7QUF3QmhFOzs7O0dBSUc7QUFDSCxNQUFhLG9CQUFxQixTQUFRLEdBQUcsQ0FBQyxRQUFRO0lBWWxEOzs7O09BSUc7SUFDSCxZQUFZLEtBQW9CLEVBQUUsRUFBVSxFQUFFLFFBQW1DLEVBQUUsRUFBRSxtQ0FBMkMsSUFBSTtRQUNoSSxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRWpCLE1BQU0sdUJBQXVCLEdBQUcsSUFBSSx1Q0FBdUIsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFHO1lBQ25FLE9BQU8sRUFBRSxLQUFLLENBQUMsT0FBTztZQUN0QixNQUFNLEVBQUUsS0FBSyxDQUFDLE1BQU07WUFDcEIsc0JBQXNCLEVBQUUsS0FBSyxDQUFDLHNCQUFzQjtTQUN2RCxFQUFFLGdDQUFnQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztRQUNwRixJQUFJLENBQUMsUUFBUSxHQUFHLHVCQUF1QixDQUFDO1FBQ3hDLElBQUksQ0FBQywwQkFBMEIsR0FBRyx1QkFBdUIsQ0FBQywwQkFBMEIsQ0FBQztRQUNyRixJQUFJLENBQUMsd0JBQXdCLEdBQUcsdUJBQXVCLENBQUMsd0JBQXdCLENBQUM7SUFDckYsQ0FBQztDQUNKO0FBN0JELG9EQTZCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHJvcyBmcm9tICdAYWxpY2xvdWQvcm9zLWNkay1jb3JlJztcbmltcG9ydCB7IFJvc0NlbkJhbmR3aWR0aFBhY2thZ2VzIH0gZnJvbSAnLi9jZW4uZ2VuZXJhdGVkJztcbi8vIEdlbmVyYXRlZCBmcm9tIHRoZSBBbGlDbG91ZCBST1MgUmVzb3VyY2UgU3BlY2lmaWNhdGlvblxuZXhwb3J0IHsgUm9zQ2VuQmFuZHdpZHRoUGFja2FnZXMgYXMgQ2VuQmFuZHdpZHRoUGFja2FnZXNQcm9wZXJ0eSB9O1xuXG4vKipcbiAqIFByb3BlcnRpZXMgZm9yIGRlZmluaW5nIGEgYENlbkJhbmR3aWR0aFBhY2thZ2VzYC5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvZGF0YXNvdXJjZS1jZW4tY2VuYmFuZHdpZHRocGFja2FnZXNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBDZW5CYW5kd2lkdGhQYWNrYWdlc1Byb3BzIHtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGZpbHRlcjogRmlsdGVyIHZhbHVlIHdoZW4gcXVlcnlpbmcgcmVzb3VyY2VzXG4gICAgICovXG4gICAgcmVhZG9ubHkgZmlsdGVyPzogQXJyYXk8Um9zQ2VuQmFuZHdpZHRoUGFja2FnZXMuRmlsdGVyUHJvcGVydHkgfCByb3MuSVJlc29sdmFibGU+IHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgaW5jbHVkZVJlc2VydmF0aW9uRGF0YTogU3BlY2lmaWVzIHdoZXRoZXIgdG8gaW5jbHVkZSByZW5ld2FsIGRhdGEuXG4gICAgICovXG4gICAgcmVhZG9ubHkgaW5jbHVkZVJlc2VydmF0aW9uRGF0YT86IGJvb2xlYW4gfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBpc09yS2V5OiBUaGUgbG9naWNhbCBvcGVyYXRvciBiZXR3ZWVuIHRoZSBmaWx0ZXIgY29uZGl0aW9ucy5cbiAgICAgKi9cbiAgICByZWFkb25seSBpc09yS2V5PzogYm9vbGVhbiB8IHJvcy5JUmVzb2x2YWJsZTtcbn1cblxuLyoqXG4gKiBUaGlzIGNsYXNzIGVuY2Fwc3VsYXRlcyBhbmQgZXh0ZW5kcyB0aGUgUk9TIHJlc291cmNlIHR5cGUgYERBVEFTT1VSQ0U6OkNFTjo6Q2VuQmFuZHdpZHRoUGFja2FnZXNgLCB3aGljaCBpcyB1c2VkIHRvIHF1ZXJ5IHRoZSBkZXRhaWxzIG9mIENsb3VkIEVudGVycHJpc2UgTmV0d29yayAoQ0VOKSBiYW5kd2lkdGggcGxhbnMgd2l0aGluIHRoZSBjdXJyZW50IEFsaWJhYmEgQ2xvdWQgYWNjb3VudC5cbiAqIEBOb3RlIFRoaXMgY2xhc3MgbWF5IGhhdmUgc29tZSBuZXcgZnVuY3Rpb25zIHRvIGZhY2lsaXRhdGUgZGV2ZWxvcG1lbnQsIHNvIGl0IGlzIHJlY29tbWVuZGVkIHRvIHVzZSB0aGlzIGNsYXNzIGluc3RlYWQgb2YgYFJvc0NlbkJhbmR3aWR0aFBhY2thZ2VzYGZvciBhIG1vcmUgY29udmVuaWVudCBkZXZlbG9wbWVudCBleHBlcmllbmNlLlxuICogU2VlIGh0dHBzOi8vd3d3LmFsaWJhYmFjbG91ZC5jb20vaGVscC9yb3MvZGV2ZWxvcGVyLXJlZmVyZW5jZS9kYXRhc291cmNlLWNlbi1jZW5iYW5kd2lkdGhwYWNrYWdlc1xuICovXG5leHBvcnQgY2xhc3MgQ2VuQmFuZHdpZHRoUGFja2FnZXMgZXh0ZW5kcyByb3MuUmVzb3VyY2Uge1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIENlbkJhbmR3aWR0aFBhY2thZ2VJZHM6IFRoZSBsaXN0IG9mIFRoZSBDZW4gYmFuZHdpZHRoIGlkcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckNlbkJhbmR3aWR0aFBhY2thZ2VJZHM6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBDZW5CYW5kd2lkdGhQYWNrYWdlczogVGhlIGluZm9ybWF0aW9uIGFib3V0IENlbkJhbmR3aWR0aFBhY2thZ2VzLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyQ2VuQmFuZHdpZHRoUGFja2FnZXM6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFBhcmFtIHNjb3BlIC0gc2NvcGUgaW4gd2hpY2ggdGhpcyByZXNvdXJjZSBpcyBkZWZpbmVkXG4gICAgICogUGFyYW0gaWQgICAgLSBzY29wZWQgaWQgb2YgdGhlIHJlc291cmNlXG4gICAgICogUGFyYW0gcHJvcHMgLSByZXNvdXJjZSBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IHJvcy5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBDZW5CYW5kd2lkdGhQYWNrYWdlc1Byb3BzID0ge30sIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OmJvb2xlYW4gPSB0cnVlKSB7XG4gICAgICAgIHN1cGVyKHNjb3BlLCBpZCk7XG5cbiAgICAgICAgY29uc3Qgcm9zQ2VuQmFuZHdpZHRoUGFja2FnZXMgPSBuZXcgUm9zQ2VuQmFuZHdpZHRoUGFja2FnZXModGhpcywgaWQsICB7XG4gICAgICAgICAgICBpc09yS2V5OiBwcm9wcy5pc09yS2V5LFxuICAgICAgICAgICAgZmlsdGVyOiBwcm9wcy5maWx0ZXIsXG4gICAgICAgICAgICBpbmNsdWRlUmVzZXJ2YXRpb25EYXRhOiBwcm9wcy5pbmNsdWRlUmVzZXJ2YXRpb25EYXRhLFxuICAgICAgICB9LCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCAmJiB0aGlzLnN0YWNrLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50KTtcbiAgICAgICAgdGhpcy5yZXNvdXJjZSA9IHJvc0NlbkJhbmR3aWR0aFBhY2thZ2VzO1xuICAgICAgICB0aGlzLmF0dHJDZW5CYW5kd2lkdGhQYWNrYWdlSWRzID0gcm9zQ2VuQmFuZHdpZHRoUGFja2FnZXMuYXR0ckNlbkJhbmR3aWR0aFBhY2thZ2VJZHM7XG4gICAgICAgIHRoaXMuYXR0ckNlbkJhbmR3aWR0aFBhY2thZ2VzID0gcm9zQ2VuQmFuZHdpZHRoUGFja2FnZXMuYXR0ckNlbkJhbmR3aWR0aFBhY2thZ2VzO1xuICAgIH1cbn1cbiJdfQ==