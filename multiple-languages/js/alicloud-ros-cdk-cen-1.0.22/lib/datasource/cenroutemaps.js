"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CenRouteMaps = exports.CenRouteMapsProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const cen_generated_1 = require("./cen.generated");
Object.defineProperty(exports, "CenRouteMapsProperty", { enumerable: true, get: function () { return cen_generated_1.RosCenRouteMaps; } });
/**
 * This class encapsulates and extends the ROS resource type `DATASOURCE::CEN::CenRouteMaps`, which is used to query the details of routing policies.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosCenRouteMaps`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/datasource-cen-cenroutemaps
 */
class CenRouteMaps extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosCenRouteMaps = new cen_generated_1.RosCenRouteMaps(this, id, {
            transitRouterRouteTableId: props.transitRouterRouteTableId,
            transmitDirection: props.transmitDirection,
            cenId: props.cenId,
            cenRegionId: props.cenRegionId,
            routeMapId: props.routeMapId,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosCenRouteMaps;
        this.attrRouteMapIds = rosCenRouteMaps.attrRouteMapIds;
        this.attrRouteMaps = rosCenRouteMaps.attrRouteMaps;
    }
}
exports.CenRouteMaps = CenRouteMaps;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2Vucm91dGVtYXBzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY2Vucm91dGVtYXBzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDhDQUE4QztBQUM5QyxtREFBa0Q7QUFFdEIscUdBRm5CLCtCQUFlLE9BRXdCO0FBa0NoRDs7OztHQUlHO0FBQ0gsTUFBYSxZQUFhLFNBQVEsR0FBRyxDQUFDLFFBQVE7SUFZMUM7Ozs7T0FJRztJQUNILFlBQVksS0FBb0IsRUFBRSxFQUFVLEVBQUUsS0FBd0IsRUFBRSxtQ0FBMkMsSUFBSTtRQUNuSCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRWpCLE1BQU0sZUFBZSxHQUFHLElBQUksK0JBQWUsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFHO1lBQ25ELHlCQUF5QixFQUFFLEtBQUssQ0FBQyx5QkFBeUI7WUFDMUQsaUJBQWlCLEVBQUUsS0FBSyxDQUFDLGlCQUFpQjtZQUMxQyxLQUFLLEVBQUUsS0FBSyxDQUFDLEtBQUs7WUFDbEIsV0FBVyxFQUFFLEtBQUssQ0FBQyxXQUFXO1lBQzlCLFVBQVUsRUFBRSxLQUFLLENBQUMsVUFBVTtTQUMvQixFQUFFLGdDQUFnQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztRQUNwRixJQUFJLENBQUMsUUFBUSxHQUFHLGVBQWUsQ0FBQztRQUNoQyxJQUFJLENBQUMsZUFBZSxHQUFHLGVBQWUsQ0FBQyxlQUFlLENBQUM7UUFDdkQsSUFBSSxDQUFDLGFBQWEsR0FBRyxlQUFlLENBQUMsYUFBYSxDQUFDO0lBQ3ZELENBQUM7Q0FDSjtBQS9CRCxvQ0ErQkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyByb3MgZnJvbSAnQGFsaWNsb3VkL3Jvcy1jZGstY29yZSc7XG5pbXBvcnQgeyBSb3NDZW5Sb3V0ZU1hcHMgfSBmcm9tICcuL2Nlbi5nZW5lcmF0ZWQnO1xuLy8gR2VuZXJhdGVkIGZyb20gdGhlIEFsaUNsb3VkIFJPUyBSZXNvdXJjZSBTcGVjaWZpY2F0aW9uXG5leHBvcnQgeyBSb3NDZW5Sb3V0ZU1hcHMgYXMgQ2VuUm91dGVNYXBzUHJvcGVydHkgfTtcblxuLyoqXG4gKiBQcm9wZXJ0aWVzIGZvciBkZWZpbmluZyBhIGBDZW5Sb3V0ZU1hcHNgLlxuICogU2VlIGh0dHBzOi8vd3d3LmFsaWJhYmFjbG91ZC5jb20vaGVscC9yb3MvZGV2ZWxvcGVyLXJlZmVyZW5jZS9kYXRhc291cmNlLWNlbi1jZW5yb3V0ZW1hcHNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBDZW5Sb3V0ZU1hcHNQcm9wcyB7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBjZW5JZDogVGhlIElEIG9mIHRoZSBDRU4gaW5zdGFuY2UuXG4gICAgICovXG4gICAgcmVhZG9ubHkgY2VuSWQ6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGNlblJlZ2lvbklkOiBUaGUgSUQgb2YgdGhlIHJlZ2lvbiB3aGVyZSB0aGUgcm91dGluZyBwb2xpY3kgaXMgYXBwbGllZC5cbiAgICAgKi9cbiAgICByZWFkb25seSBjZW5SZWdpb25JZD86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHJvdXRlTWFwSWQ6IFRoZSBJRCBvZiB0aGUgcm91dGluZyBwb2xpY3kuXG4gICAgICovXG4gICAgcmVhZG9ubHkgcm91dGVNYXBJZD86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHRyYW5zaXRSb3V0ZXJSb3V0ZVRhYmxlSWQ6IFRoZSByb3V0ZSB0YWJsZSBJRCBvZiB0aGUgdHJhbnNpdCByb3V0ZXIgd2l0aCB3aGljaCB0aGUgcm91dGluZyBwb2xpY3kgaXMgYXNzb2NpYXRlZC5cbiAgICAgKi9cbiAgICByZWFkb25seSB0cmFuc2l0Um91dGVyUm91dGVUYWJsZUlkPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgdHJhbnNtaXREaXJlY3Rpb246IFRoZSBkaXJlY3Rpb24gaW4gd2hpY2ggdGhlIHJvdXRpbmcgcG9saWN5IGlzIGFwcGxpZWQuXG4gICAgICovXG4gICAgcmVhZG9ubHkgdHJhbnNtaXREaXJlY3Rpb24/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG59XG5cbi8qKlxuICogVGhpcyBjbGFzcyBlbmNhcHN1bGF0ZXMgYW5kIGV4dGVuZHMgdGhlIFJPUyByZXNvdXJjZSB0eXBlIGBEQVRBU09VUkNFOjpDRU46OkNlblJvdXRlTWFwc2AsIHdoaWNoIGlzIHVzZWQgdG8gcXVlcnkgdGhlIGRldGFpbHMgb2Ygcm91dGluZyBwb2xpY2llcy5cbiAqIEBOb3RlIFRoaXMgY2xhc3MgbWF5IGhhdmUgc29tZSBuZXcgZnVuY3Rpb25zIHRvIGZhY2lsaXRhdGUgZGV2ZWxvcG1lbnQsIHNvIGl0IGlzIHJlY29tbWVuZGVkIHRvIHVzZSB0aGlzIGNsYXNzIGluc3RlYWQgb2YgYFJvc0NlblJvdXRlTWFwc2Bmb3IgYSBtb3JlIGNvbnZlbmllbnQgZGV2ZWxvcG1lbnQgZXhwZXJpZW5jZS5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvZGF0YXNvdXJjZS1jZW4tY2Vucm91dGVtYXBzXG4gKi9cbmV4cG9ydCBjbGFzcyBDZW5Sb3V0ZU1hcHMgZXh0ZW5kcyByb3MuUmVzb3VyY2Uge1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIFJvdXRlTWFwSWRzOiBUaGUgbGlzdCBvZiBUaGUgUm91dGVNYXAgaWRzLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyUm91dGVNYXBJZHM6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBSb3V0ZU1hcHM6IFRoZSBpbmZvcm1hdGlvbiBhYm91dCBSb3V0ZU1hcHMuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJSb3V0ZU1hcHM6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFBhcmFtIHNjb3BlIC0gc2NvcGUgaW4gd2hpY2ggdGhpcyByZXNvdXJjZSBpcyBkZWZpbmVkXG4gICAgICogUGFyYW0gaWQgICAgLSBzY29wZWQgaWQgb2YgdGhlIHJlc291cmNlXG4gICAgICogUGFyYW0gcHJvcHMgLSByZXNvdXJjZSBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IHJvcy5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBDZW5Sb3V0ZU1hcHNQcm9wcywgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6Ym9vbGVhbiA9IHRydWUpIHtcbiAgICAgICAgc3VwZXIoc2NvcGUsIGlkKTtcblxuICAgICAgICBjb25zdCByb3NDZW5Sb3V0ZU1hcHMgPSBuZXcgUm9zQ2VuUm91dGVNYXBzKHRoaXMsIGlkLCAge1xuICAgICAgICAgICAgdHJhbnNpdFJvdXRlclJvdXRlVGFibGVJZDogcHJvcHMudHJhbnNpdFJvdXRlclJvdXRlVGFibGVJZCxcbiAgICAgICAgICAgIHRyYW5zbWl0RGlyZWN0aW9uOiBwcm9wcy50cmFuc21pdERpcmVjdGlvbixcbiAgICAgICAgICAgIGNlbklkOiBwcm9wcy5jZW5JZCxcbiAgICAgICAgICAgIGNlblJlZ2lvbklkOiBwcm9wcy5jZW5SZWdpb25JZCxcbiAgICAgICAgICAgIHJvdXRlTWFwSWQ6IHByb3BzLnJvdXRlTWFwSWQsXG4gICAgICAgIH0sIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ICYmIHRoaXMuc3RhY2suZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQpO1xuICAgICAgICB0aGlzLnJlc291cmNlID0gcm9zQ2VuUm91dGVNYXBzO1xuICAgICAgICB0aGlzLmF0dHJSb3V0ZU1hcElkcyA9IHJvc0NlblJvdXRlTWFwcy5hdHRyUm91dGVNYXBJZHM7XG4gICAgICAgIHRoaXMuYXR0clJvdXRlTWFwcyA9IHJvc0NlblJvdXRlTWFwcy5hdHRyUm91dGVNYXBzO1xuICAgIH1cbn1cbiJdfQ==