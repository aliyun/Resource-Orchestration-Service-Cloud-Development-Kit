"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Tensorboard = exports.TensorboardProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const paidlc_generated_1 = require("./paidlc.generated");
Object.defineProperty(exports, "TensorboardProperty", { enumerable: true, get: function () { return paidlc_generated_1.RosTensorboard; } });
/**
 * A ROS resource type:  `ALIYUN::PAIDLC::Tensorboard`
 */
class Tensorboard extends ros.Resource {
    /**
     * Create a new `ALIYUN::PAIDLC::Tensorboard`.
     *
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosTensorboard = new paidlc_generated_1.RosTensorboard(this, id, {
            maxRunningTimeMinutes: props.maxRunningTimeMinutes,
            options: props.options,
            memory: props.memory,
            summaryPath: props.summaryPath,
            sourceId: props.sourceId,
            sourceType: props.sourceType,
            workspaceId: props.workspaceId,
            cpu: props.cpu,
            uri: props.uri,
            dataSources: props.dataSources,
            summaryRelativePath: props.summaryRelativePath,
            dataSourceType: props.dataSourceType,
            displayName: props.displayName,
            jobId: props.jobId,
            dataSourceId: props.dataSourceId,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosTensorboard;
        this.attrTensorboardId = rosTensorboard.attrTensorboardId;
        this.attrTensorboardUrl = rosTensorboard.attrTensorboardUrl;
    }
}
exports.Tensorboard = Tensorboard;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVuc29yYm9hcmQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ0ZW5zb3Jib2FyZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw4Q0FBOEM7QUFDOUMseURBQW9EO0FBRXpCLG9HQUZsQixpQ0FBYyxPQUV1QjtBQXFGOUM7O0dBRUc7QUFDSCxNQUFhLFdBQVksU0FBUSxHQUFHLENBQUMsUUFBUTtJQWlCekM7Ozs7OztPQU1HO0lBQ0gsWUFBWSxLQUFvQixFQUFFLEVBQVUsRUFBRSxLQUF1QixFQUFFLG1DQUEyQyxJQUFJO1FBQ2xILEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFakIsTUFBTSxjQUFjLEdBQUcsSUFBSSxpQ0FBYyxDQUFDLElBQUksRUFBRSxFQUFFLEVBQUc7WUFDakQscUJBQXFCLEVBQUUsS0FBSyxDQUFDLHFCQUFxQjtZQUNsRCxPQUFPLEVBQUUsS0FBSyxDQUFDLE9BQU87WUFDdEIsTUFBTSxFQUFFLEtBQUssQ0FBQyxNQUFNO1lBQ3BCLFdBQVcsRUFBRSxLQUFLLENBQUMsV0FBVztZQUM5QixRQUFRLEVBQUUsS0FBSyxDQUFDLFFBQVE7WUFDeEIsVUFBVSxFQUFFLEtBQUssQ0FBQyxVQUFVO1lBQzVCLFdBQVcsRUFBRSxLQUFLLENBQUMsV0FBVztZQUM5QixHQUFHLEVBQUUsS0FBSyxDQUFDLEdBQUc7WUFDZCxHQUFHLEVBQUUsS0FBSyxDQUFDLEdBQUc7WUFDZCxXQUFXLEVBQUUsS0FBSyxDQUFDLFdBQVc7WUFDOUIsbUJBQW1CLEVBQUUsS0FBSyxDQUFDLG1CQUFtQjtZQUM5QyxjQUFjLEVBQUUsS0FBSyxDQUFDLGNBQWM7WUFDcEMsV0FBVyxFQUFFLEtBQUssQ0FBQyxXQUFXO1lBQzlCLEtBQUssRUFBRSxLQUFLLENBQUMsS0FBSztZQUNsQixZQUFZLEVBQUUsS0FBSyxDQUFDLFlBQVk7U0FDbkMsRUFBRSxnQ0FBZ0MsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7UUFDcEYsSUFBSSxDQUFDLFFBQVEsR0FBRyxjQUFjLENBQUM7UUFDL0IsSUFBSSxDQUFDLGlCQUFpQixHQUFHLGNBQWMsQ0FBQyxpQkFBaUIsQ0FBQztRQUMxRCxJQUFJLENBQUMsa0JBQWtCLEdBQUcsY0FBYyxDQUFDLGtCQUFrQixDQUFDO0lBQ2hFLENBQUM7Q0FDSjtBQWhERCxrQ0FnREMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyByb3MgZnJvbSAnQGFsaWNsb3VkL3Jvcy1jZGstY29yZSc7XG5pbXBvcnQgeyBSb3NUZW5zb3Jib2FyZCB9IGZyb20gJy4vcGFpZGxjLmdlbmVyYXRlZCc7XG4vLyBHZW5lcmF0ZWQgZnJvbSB0aGUgQWxpQ2xvdWQgUk9TIFJlc291cmNlIFNwZWNpZmljYXRpb25cbmV4cG9ydCB7IFJvc1RlbnNvcmJvYXJkIGFzIFRlbnNvcmJvYXJkUHJvcGVydHkgfTtcblxuLyoqXG4gKiBQcm9wZXJ0aWVzIGZvciBkZWZpbmluZyBhIGBBTElZVU46OlBBSURMQzo6VGVuc29yYm9hcmRgXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVGVuc29yYm9hcmRQcm9wcyB7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBkYXRhU291cmNlSWQ6IEZvciBkYXRhc2V0IElELCBzZWUgdGhlIGRhdGEgc2V0IElELCBzZWUgTGlzdERhdGFTZXRzLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGRhdGFTb3VyY2VJZDogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgZGlzcGxheU5hbWU6IFRlbnNvcmJvYXJkIG5hbWUuXG4gICAgICovXG4gICAgcmVhZG9ubHkgZGlzcGxheU5hbWU6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHdvcmtzcGFjZUlkOiBXb3JrIHNwYWNlIElELkhvdyB0byBnZXQgd29ya2luZyBzcGFjZSBJRCwgc2VlIExpc3R3b3JrU3BhY2VzLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHdvcmtzcGFjZUlkOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBjcHU6IENQVSBudWNsZWFyIG51bWJlci5cbiAgICAgKi9cbiAgICByZWFkb25seSBjcHU/OiBudW1iZXIgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBkYXRhU291cmNlczogRGF0YSBzb3VyY2UgY29uZmlndXJhdGlvbi5cbiAgICAgKi9cbiAgICByZWFkb25seSBkYXRhU291cmNlcz86IEFycmF5PGFueSB8IHJvcy5JUmVzb2x2YWJsZT4gfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBkYXRhU291cmNlVHlwZTogVGhlIHR5cGUgb2YgZGF0YXNldC4gVmFsdWVzOiBPU1MsTkFTXG4gICAgICovXG4gICAgcmVhZG9ubHkgZGF0YVNvdXJjZVR5cGU/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBqb2JJZDogVGFzayBJRC5Ib3cgdG8gZ2V0IHRoZSB0YXNrIElELCBzZWUgTGlzdGpvYnMuXG4gICAgICovXG4gICAgcmVhZG9ubHkgam9iSWQ/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBtYXhSdW5uaW5nVGltZU1pbnV0ZXM6IFRoZSBsb25nZXN0IHJ1bm5pbmcgdGltZSwgdGhlIHVuaXQgaXM6IG1pbnV0ZXMuXG4gICAgICovXG4gICAgcmVhZG9ubHkgbWF4UnVubmluZ1RpbWVNaW51dGVzPzogbnVtYmVyIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgbWVtb3J5OiBNZW1vcnkgc2l6ZSwgdGhlIHVuaXQgaXM6IEdCLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IG1lbW9yeT86IG51bWJlciB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IG9wdGlvbnM6IFRoZSBleHBhbnNpb24gZmllbGQgb2YgdGhlIGRhdGFzZXQgaXMgSlNPTiBmb3JtYXQsIHdoaWNoIGN1cnJlbnRseSBzdXBwb3J0cyBNb3VudHBhdGg6IHRoZSBwYXRoIG9mIGN1c3RvbSBkYXRhc2V0IG1vdW50aW5nLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IG9wdGlvbnM/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBzb3VyY2VJZDogU291cmNlIElELlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHNvdXJjZUlkPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgc291cmNlVHlwZTogU291cmNlIHR5cGUuXG4gICAgICovXG4gICAgcmVhZG9ubHkgc291cmNlVHlwZT86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHN1bW1hcnlQYXRoOiBTdW1tYXJ5IGRpcmVjdG9yeS5cbiAgICAgKi9cbiAgICByZWFkb25seSBzdW1tYXJ5UGF0aD86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHN1bW1hcnlSZWxhdGl2ZVBhdGg6IFN1bW1hcnkgcmVsYXRpdmUgZGlyZWN0b3J5LiBTdW1tYXJ5IHJlbGF0aXZlIGRpcmVjdG9yeSBhbmQgU3VtbWFyeSBkaXJlY3RvcnkgYXJlIG11dHVhbGx5IGV4Y2x1c2l2ZVxuICAgICAqL1xuICAgIHJlYWRvbmx5IHN1bW1hcnlSZWxhdGl2ZVBhdGg/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSB1cmk6IFVSSSBvZiBhIGRhdGFzZXQ6XG4gICAgICogV2hlbiBEYXRhU291cmNlVHlwZSBpcyBPU1MsIHRoZSBmb3JtYXQgaXM6IE9TUzogLy8gW09TUy1CVUNFVF0uIFtFbmRwb2ludF0vW1BhdGhdLlxuICAgICAqIFdoZW4gdGhlIERhdGFTb3VyY2VUeXBlIGlzIE5BUywgdGhlIGZvcm1hdCBpczogbmFzOi8vIFtuYXMtZmlsZXN5c3RlbS1pZF0uIFtSZWdpb25dL1tQQVRIXS5cbiAgICAgKi9cbiAgICByZWFkb25seSB1cmk/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG59XG5cbi8qKlxuICogQSBST1MgcmVzb3VyY2UgdHlwZTogIGBBTElZVU46OlBBSURMQzo6VGVuc29yYm9hcmRgXG4gKi9cbmV4cG9ydCBjbGFzcyBUZW5zb3Jib2FyZCBleHRlbmRzIHJvcy5SZXNvdXJjZSB7XG5cbiAgICAvKipcbiAgICAgKiBBIGZhY3RvcnkgbWV0aG9kIHRoYXQgY3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzIGZyb20gYW4gb2JqZWN0XG4gICAgICogY29udGFpbmluZyB0aGUgcHJvcGVydGllcyBvZiB0aGlzIFJPUyByZXNvdXJjZSwgd2hpY2ggd2lsbCBiZSBhc3NpZ25lZCB0byBST1MgcmVzb3VyY2UuXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgVGVuc29yYm9hcmRJZDogVGVuc29yYm9hcmQgaWQuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJUZW5zb3Jib2FyZElkOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgVGVuc29yYm9hcmRVcmw6IFRlbnNvcmJvYXJkIHVybC5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0clRlbnNvcmJvYXJkVXJsOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgYEFMSVlVTjo6UEFJRExDOjpUZW5zb3Jib2FyZGAuXG4gICAgICpcbiAgICAgKiBQYXJhbSBzY29wZSAtIHNjb3BlIGluIHdoaWNoIHRoaXMgcmVzb3VyY2UgaXMgZGVmaW5lZFxuICAgICAqIFBhcmFtIGlkICAgIC0gc2NvcGVkIGlkIG9mIHRoZSByZXNvdXJjZVxuICAgICAqIFBhcmFtIHByb3BzIC0gcmVzb3VyY2UgcHJvcGVydGllc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiByb3MuQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogVGVuc29yYm9hcmRQcm9wcywgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6Ym9vbGVhbiA9IHRydWUpIHtcbiAgICAgICAgc3VwZXIoc2NvcGUsIGlkKTtcblxuICAgICAgICBjb25zdCByb3NUZW5zb3Jib2FyZCA9IG5ldyBSb3NUZW5zb3Jib2FyZCh0aGlzLCBpZCwgIHtcbiAgICAgICAgICAgIG1heFJ1bm5pbmdUaW1lTWludXRlczogcHJvcHMubWF4UnVubmluZ1RpbWVNaW51dGVzLFxuICAgICAgICAgICAgb3B0aW9uczogcHJvcHMub3B0aW9ucyxcbiAgICAgICAgICAgIG1lbW9yeTogcHJvcHMubWVtb3J5LFxuICAgICAgICAgICAgc3VtbWFyeVBhdGg6IHByb3BzLnN1bW1hcnlQYXRoLFxuICAgICAgICAgICAgc291cmNlSWQ6IHByb3BzLnNvdXJjZUlkLFxuICAgICAgICAgICAgc291cmNlVHlwZTogcHJvcHMuc291cmNlVHlwZSxcbiAgICAgICAgICAgIHdvcmtzcGFjZUlkOiBwcm9wcy53b3Jrc3BhY2VJZCxcbiAgICAgICAgICAgIGNwdTogcHJvcHMuY3B1LFxuICAgICAgICAgICAgdXJpOiBwcm9wcy51cmksXG4gICAgICAgICAgICBkYXRhU291cmNlczogcHJvcHMuZGF0YVNvdXJjZXMsXG4gICAgICAgICAgICBzdW1tYXJ5UmVsYXRpdmVQYXRoOiBwcm9wcy5zdW1tYXJ5UmVsYXRpdmVQYXRoLFxuICAgICAgICAgICAgZGF0YVNvdXJjZVR5cGU6IHByb3BzLmRhdGFTb3VyY2VUeXBlLFxuICAgICAgICAgICAgZGlzcGxheU5hbWU6IHByb3BzLmRpc3BsYXlOYW1lLFxuICAgICAgICAgICAgam9iSWQ6IHByb3BzLmpvYklkLFxuICAgICAgICAgICAgZGF0YVNvdXJjZUlkOiBwcm9wcy5kYXRhU291cmNlSWQsXG4gICAgICAgIH0sIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ICYmIHRoaXMuc3RhY2suZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQpO1xuICAgICAgICB0aGlzLnJlc291cmNlID0gcm9zVGVuc29yYm9hcmQ7XG4gICAgICAgIHRoaXMuYXR0clRlbnNvcmJvYXJkSWQgPSByb3NUZW5zb3Jib2FyZC5hdHRyVGVuc29yYm9hcmRJZDtcbiAgICAgICAgdGhpcy5hdHRyVGVuc29yYm9hcmRVcmwgPSByb3NUZW5zb3Jib2FyZC5hdHRyVGVuc29yYm9hcmRVcmw7XG4gICAgfVxufVxuIl19