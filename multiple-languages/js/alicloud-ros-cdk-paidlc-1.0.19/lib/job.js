"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Job = exports.JobProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const paidlc_generated_1 = require("./paidlc.generated");
Object.defineProperty(exports, "JobProperty", { enumerable: true, get: function () { return paidlc_generated_1.RosJob; } });
/**
 * A ROS resource type:  `ALIYUN::PAIDLC::Job`
 */
class Job extends ros.Resource {
    /**
     * Create a new `ALIYUN::PAIDLC::Job`.
     *
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosJob = new paidlc_generated_1.RosJob(this, id, {
            thirdpartyLibs: props.thirdpartyLibs,
            options: props.options,
            priority: props.priority,
            envs: props.envs,
            jobMaxRunningTimeMinutes: props.jobMaxRunningTimeMinutes,
            workspaceId: props.workspaceId,
            codeSource: props.codeSource,
            userVpc: props.userVpc,
            jobSpecs: props.jobSpecs,
            userCommand: props.userCommand,
            dataSources: props.dataSources,
            jobType: props.jobType,
            resourceId: props.resourceId,
            thirdpartyLibDir: props.thirdpartyLibDir,
            displayName: props.displayName,
            successPolicy: props.successPolicy,
            settings: props.settings,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosJob;
        this.attrJobId = rosJob.attrJobId;
    }
}
exports.Job = Job;
//# sourceMappingURL=data:application/json;base64,