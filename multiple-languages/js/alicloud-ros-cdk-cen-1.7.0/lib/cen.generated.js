"use strict";
// Generated from the AliCloud ROS Resource Specification
Object.defineProperty(exports, "__esModule", { value: true });
exports.RosTransitRouterVpnAttachment = exports.RosTransitRouterVpcAttachment = exports.RosTransitRouterVbrAttachment = exports.RosTransitRouterRouteTablePropagation = exports.RosTransitRouterRouteTableAssociation = exports.RosTransitRouterRouteTable = exports.RosTransitRouterRouteEntry = exports.RosTransitRouterPeerAttachment = exports.RosTransitRouter = exports.RosRouteEntry = exports.RosChildInstanceRouteEntryToAttachment = exports.RosCenVbrHealthCheck = exports.RosCenRouteService = exports.RosCenRouteMap = exports.RosCenInstanceAttachment = exports.RosCenInstance = exports.RosCenBandwidthPackageAssociation = exports.RosCenBandwidthPackage = exports.RosCenBandwidthLimit = void 0;
const ros = require("@alicloud/ros-cdk-core");
/**
 * Determine whether the given properties match those of a `RosCenBandwidthLimitProps`
 *
 * @param properties - the TypeScript properties of a `RosCenBandwidthLimitProps`
 *
 * @returns the result of the validation.
 */
function RosCenBandwidthLimitPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('bandwidthType', ros.validateString)(properties.bandwidthType));
    errors.collect(ros.propertyValidator('oppositeRegionId', ros.requiredValidator)(properties.oppositeRegionId));
    errors.collect(ros.propertyValidator('oppositeRegionId', ros.validateString)(properties.oppositeRegionId));
    errors.collect(ros.propertyValidator('cenId', ros.requiredValidator)(properties.cenId));
    errors.collect(ros.propertyValidator('cenId', ros.validateString)(properties.cenId));
    errors.collect(ros.propertyValidator('bandwidthLimit', ros.requiredValidator)(properties.bandwidthLimit));
    if (properties.bandwidthLimit && (typeof properties.bandwidthLimit) !== 'object') {
        errors.collect(ros.propertyValidator('bandwidthLimit', ros.validateRange)({
            data: properties.bandwidthLimit,
            min: 1,
            max: undefined,
        }));
    }
    errors.collect(ros.propertyValidator('bandwidthLimit', ros.validateNumber)(properties.bandwidthLimit));
    errors.collect(ros.propertyValidator('localRegionId', ros.requiredValidator)(properties.localRegionId));
    errors.collect(ros.propertyValidator('localRegionId', ros.validateString)(properties.localRegionId));
    return errors.wrap('supplied properties not correct for "RosCenBandwidthLimitProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::CEN::CenBandwidthLimit` resource
 *
 * @param properties - the TypeScript properties of a `RosCenBandwidthLimitProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::CEN::CenBandwidthLimit` resource.
 */
// @ts-ignore TS6133
function rosCenBandwidthLimitPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosCenBandwidthLimitPropsValidator(properties).assertSuccess();
    }
    return {
        'BandwidthLimit': ros.numberToRosTemplate(properties.bandwidthLimit),
        'CenId': ros.stringToRosTemplate(properties.cenId),
        'LocalRegionId': ros.stringToRosTemplate(properties.localRegionId),
        'OppositeRegionId': ros.stringToRosTemplate(properties.oppositeRegionId),
        'BandwidthType': ros.stringToRosTemplate(properties.bandwidthType),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::CEN::CenBandwidthLimit`, which is used to configure the bandwidth for cross-region interconnection in a bandwidth plan.
 * @Note This class does not contain additional functions, so it is recommended to use the `CenBandwidthLimit` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-cen-cenbandwidthlimit
 */
class RosCenBandwidthLimit extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosCenBandwidthLimit.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.bandwidthLimit = props.bandwidthLimit;
        this.cenId = props.cenId;
        this.localRegionId = props.localRegionId;
        this.oppositeRegionId = props.oppositeRegionId;
        this.bandwidthType = props.bandwidthType;
    }
    get rosProperties() {
        return {
            bandwidthLimit: this.bandwidthLimit,
            cenId: this.cenId,
            localRegionId: this.localRegionId,
            oppositeRegionId: this.oppositeRegionId,
            bandwidthType: this.bandwidthType,
        };
    }
    renderProperties(props) {
        return rosCenBandwidthLimitPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosCenBandwidthLimit = RosCenBandwidthLimit;
/**
 * The resource type name for this resource class.
 */
RosCenBandwidthLimit.ROS_RESOURCE_TYPE_NAME = "ALIYUN::CEN::CenBandwidthLimit";
/**
 * Determine whether the given properties match those of a `RosCenBandwidthPackageProps`
 *
 * @param properties - the TypeScript properties of a `RosCenBandwidthPackageProps`
 *
 * @returns the result of the validation.
 */
function RosCenBandwidthPackagePropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('description', ros.validateString)(properties.description));
    errors.collect(ros.propertyValidator('resourceGroupId', ros.validateString)(properties.resourceGroupId));
    errors.collect(ros.propertyValidator('geographicRegionBId', ros.requiredValidator)(properties.geographicRegionBId));
    if (properties.geographicRegionBId && (typeof properties.geographicRegionBId) !== 'object') {
        errors.collect(ros.propertyValidator('geographicRegionBId', ros.validateAllowedValues)({
            data: properties.geographicRegionBId,
            allowedValues: ["China", "North-America", "Asia-Pacific", "Europe", "Australia"],
        }));
    }
    errors.collect(ros.propertyValidator('geographicRegionBId', ros.validateString)(properties.geographicRegionBId));
    errors.collect(ros.propertyValidator('geographicRegionAId', ros.requiredValidator)(properties.geographicRegionAId));
    if (properties.geographicRegionAId && (typeof properties.geographicRegionAId) !== 'object') {
        errors.collect(ros.propertyValidator('geographicRegionAId', ros.validateAllowedValues)({
            data: properties.geographicRegionAId,
            allowedValues: ["China", "North-America", "Asia-Pacific", "Europe", "Australia"],
        }));
    }
    errors.collect(ros.propertyValidator('geographicRegionAId', ros.validateString)(properties.geographicRegionAId));
    if (properties.pricingCycle && (typeof properties.pricingCycle) !== 'object') {
        errors.collect(ros.propertyValidator('pricingCycle', ros.validateAllowedValues)({
            data: properties.pricingCycle,
            allowedValues: ["Month", "Year"],
        }));
    }
    errors.collect(ros.propertyValidator('pricingCycle', ros.validateString)(properties.pricingCycle));
    errors.collect(ros.propertyValidator('autoRenew', ros.validateBoolean)(properties.autoRenew));
    errors.collect(ros.propertyValidator('period', ros.validateNumber)(properties.period));
    errors.collect(ros.propertyValidator('autoPay', ros.validateBoolean)(properties.autoPay));
    errors.collect(ros.propertyValidator('name', ros.validateString)(properties.name));
    if (properties.autoRenewDuration && (typeof properties.autoRenewDuration) !== 'object') {
        errors.collect(ros.propertyValidator('autoRenewDuration', ros.validateAllowedValues)({
            data: properties.autoRenewDuration,
            allowedValues: [1, 2, 3, 6],
        }));
    }
    errors.collect(ros.propertyValidator('autoRenewDuration', ros.validateNumber)(properties.autoRenewDuration));
    if (properties.bandwidthPackageChargeType && (typeof properties.bandwidthPackageChargeType) !== 'object') {
        errors.collect(ros.propertyValidator('bandwidthPackageChargeType', ros.validateAllowedValues)({
            data: properties.bandwidthPackageChargeType,
            allowedValues: ["PayAsYouGo", "PostPaid", "PayOnDemand", "Postpaid", "PostPay", "Postpay", "POSTPAY", "POST", "Subscription", "PrePaid", "Prepaid", "PrePay", "Prepay", "PREPAY", "PRE"],
        }));
    }
    errors.collect(ros.propertyValidator('bandwidthPackageChargeType', ros.validateString)(properties.bandwidthPackageChargeType));
    errors.collect(ros.propertyValidator('bandwidth', ros.requiredValidator)(properties.bandwidth));
    if (properties.bandwidth && (typeof properties.bandwidth) !== 'object') {
        errors.collect(ros.propertyValidator('bandwidth', ros.validateRange)({
            data: properties.bandwidth,
            min: 2,
            max: undefined,
        }));
    }
    errors.collect(ros.propertyValidator('bandwidth', ros.validateNumber)(properties.bandwidth));
    if (properties.tags && (Array.isArray(properties.tags) || (typeof properties.tags) === 'string')) {
        errors.collect(ros.propertyValidator('tags', ros.validateLength)({
            data: properties.tags.length,
            min: undefined,
            max: 20,
        }));
    }
    errors.collect(ros.propertyValidator('tags', ros.listValidator(RosCenBandwidthPackage_TagsPropertyValidator))(properties.tags));
    return errors.wrap('supplied properties not correct for "RosCenBandwidthPackageProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::CEN::CenBandwidthPackage` resource
 *
 * @param properties - the TypeScript properties of a `RosCenBandwidthPackageProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::CEN::CenBandwidthPackage` resource.
 */
// @ts-ignore TS6133
function rosCenBandwidthPackagePropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosCenBandwidthPackagePropsValidator(properties).assertSuccess();
    }
    return {
        'Bandwidth': ros.numberToRosTemplate(properties.bandwidth),
        'GeographicRegionAId': ros.stringToRosTemplate(properties.geographicRegionAId),
        'GeographicRegionBId': ros.stringToRosTemplate(properties.geographicRegionBId),
        'AutoPay': ros.booleanToRosTemplate(properties.autoPay),
        'AutoRenew': ros.booleanToRosTemplate(properties.autoRenew),
        'AutoRenewDuration': ros.numberToRosTemplate(properties.autoRenewDuration),
        'BandwidthPackageChargeType': ros.stringToRosTemplate(properties.bandwidthPackageChargeType),
        'Description': ros.stringToRosTemplate(properties.description),
        'Name': ros.stringToRosTemplate(properties.name),
        'Period': ros.numberToRosTemplate(properties.period),
        'PricingCycle': ros.stringToRosTemplate(properties.pricingCycle),
        'ResourceGroupId': ros.stringToRosTemplate(properties.resourceGroupId),
        'Tags': ros.listMapper(rosCenBandwidthPackageTagsPropertyToRosTemplate)(properties.tags),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::CEN::CenBandwidthPackage`, which is used to purchase a bandwidth plan before you use Cloud Enterprise Network (CEN) to connect network instances that reside in different regions.
 * @Note This class does not contain additional functions, so it is recommended to use the `CenBandwidthPackage` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-cen-cenbandwidthpackage
 */
class RosCenBandwidthPackage extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosCenBandwidthPackage.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrArn = this.getAtt('Arn');
        this.attrCenBandwidthPackageId = this.getAtt('CenBandwidthPackageId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.bandwidth = props.bandwidth;
        this.geographicRegionAId = props.geographicRegionAId;
        this.geographicRegionBId = props.geographicRegionBId;
        this.autoPay = props.autoPay;
        this.autoRenew = props.autoRenew;
        this.autoRenewDuration = props.autoRenewDuration;
        this.bandwidthPackageChargeType = props.bandwidthPackageChargeType;
        this.description = props.description;
        this.name = props.name;
        this.period = props.period;
        this.pricingCycle = props.pricingCycle;
        this.resourceGroupId = props.resourceGroupId;
        this.tags = props.tags;
    }
    get rosProperties() {
        return {
            bandwidth: this.bandwidth,
            geographicRegionAId: this.geographicRegionAId,
            geographicRegionBId: this.geographicRegionBId,
            autoPay: this.autoPay,
            autoRenew: this.autoRenew,
            autoRenewDuration: this.autoRenewDuration,
            bandwidthPackageChargeType: this.bandwidthPackageChargeType,
            description: this.description,
            name: this.name,
            period: this.period,
            pricingCycle: this.pricingCycle,
            resourceGroupId: this.resourceGroupId,
            tags: this.tags,
        };
    }
    renderProperties(props) {
        return rosCenBandwidthPackagePropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosCenBandwidthPackage = RosCenBandwidthPackage;
/**
 * The resource type name for this resource class.
 */
RosCenBandwidthPackage.ROS_RESOURCE_TYPE_NAME = "ALIYUN::CEN::CenBandwidthPackage";
/**
 * Determine whether the given properties match those of a `TagsProperty`
 *
 * @param properties - the TypeScript properties of a `TagsProperty`
 *
 * @returns the result of the validation.
 */
function RosCenBandwidthPackage_TagsPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('value', ros.validateString)(properties.value));
    errors.collect(ros.propertyValidator('key', ros.requiredValidator)(properties.key));
    errors.collect(ros.propertyValidator('key', ros.validateString)(properties.key));
    return errors.wrap('supplied properties not correct for "TagsProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::CEN::CenBandwidthPackage.Tags` resource
 *
 * @param properties - the TypeScript properties of a `TagsProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::CEN::CenBandwidthPackage.Tags` resource.
 */
// @ts-ignore TS6133
function rosCenBandwidthPackageTagsPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosCenBandwidthPackage_TagsPropertyValidator(properties).assertSuccess();
    return {
        'Value': ros.stringToRosTemplate(properties.value),
        'Key': ros.stringToRosTemplate(properties.key),
    };
}
/**
 * Determine whether the given properties match those of a `RosCenBandwidthPackageAssociationProps`
 *
 * @param properties - the TypeScript properties of a `RosCenBandwidthPackageAssociationProps`
 *
 * @returns the result of the validation.
 */
function RosCenBandwidthPackageAssociationPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('cenId', ros.requiredValidator)(properties.cenId));
    errors.collect(ros.propertyValidator('cenId', ros.validateString)(properties.cenId));
    errors.collect(ros.propertyValidator('cenBandwidthPackageId', ros.requiredValidator)(properties.cenBandwidthPackageId));
    errors.collect(ros.propertyValidator('cenBandwidthPackageId', ros.validateString)(properties.cenBandwidthPackageId));
    return errors.wrap('supplied properties not correct for "RosCenBandwidthPackageAssociationProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::CEN::CenBandwidthPackageAssociation` resource
 *
 * @param properties - the TypeScript properties of a `RosCenBandwidthPackageAssociationProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::CEN::CenBandwidthPackageAssociation` resource.
 */
// @ts-ignore TS6133
function rosCenBandwidthPackageAssociationPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosCenBandwidthPackageAssociationPropsValidator(properties).assertSuccess();
    }
    return {
        'CenBandwidthPackageId': ros.stringToRosTemplate(properties.cenBandwidthPackageId),
        'CenId': ros.stringToRosTemplate(properties.cenId),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::CEN::CenBandwidthPackageAssociation`, which is used to associate a bandwidth plan with a Cloud Enterprise Network (CEN) instance.
 * @Note This class does not contain additional functions, so it is recommended to use the `CenBandwidthPackageAssociation` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-cen-cenbandwidthpackageassociation
 */
class RosCenBandwidthPackageAssociation extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosCenBandwidthPackageAssociation.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.cenBandwidthPackageId = props.cenBandwidthPackageId;
        this.cenId = props.cenId;
    }
    get rosProperties() {
        return {
            cenBandwidthPackageId: this.cenBandwidthPackageId,
            cenId: this.cenId,
        };
    }
    renderProperties(props) {
        return rosCenBandwidthPackageAssociationPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosCenBandwidthPackageAssociation = RosCenBandwidthPackageAssociation;
/**
 * The resource type name for this resource class.
 */
RosCenBandwidthPackageAssociation.ROS_RESOURCE_TYPE_NAME = "ALIYUN::CEN::CenBandwidthPackageAssociation";
/**
 * Determine whether the given properties match those of a `RosCenInstanceProps`
 *
 * @param properties - the TypeScript properties of a `RosCenInstanceProps`
 *
 * @returns the result of the validation.
 */
function RosCenInstancePropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('protectionLevel', ros.validateString)(properties.protectionLevel));
    errors.collect(ros.propertyValidator('description', ros.validateString)(properties.description));
    errors.collect(ros.propertyValidator('resourceGroupId', ros.validateString)(properties.resourceGroupId));
    if (properties.tags && (Array.isArray(properties.tags) || (typeof properties.tags) === 'string')) {
        errors.collect(ros.propertyValidator('tags', ros.validateLength)({
            data: properties.tags.length,
            min: undefined,
            max: 20,
        }));
    }
    errors.collect(ros.propertyValidator('tags', ros.listValidator(RosCenInstance_TagsPropertyValidator))(properties.tags));
    errors.collect(ros.propertyValidator('name', ros.validateString)(properties.name));
    return errors.wrap('supplied properties not correct for "RosCenInstanceProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::CEN::CenInstance` resource
 *
 * @param properties - the TypeScript properties of a `RosCenInstanceProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::CEN::CenInstance` resource.
 */
// @ts-ignore TS6133
function rosCenInstancePropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosCenInstancePropsValidator(properties).assertSuccess();
    }
    return {
        'Description': ros.stringToRosTemplate(properties.description),
        'Name': ros.stringToRosTemplate(properties.name),
        'ProtectionLevel': ros.stringToRosTemplate(properties.protectionLevel),
        'ResourceGroupId': ros.stringToRosTemplate(properties.resourceGroupId),
        'Tags': ros.listMapper(rosCenInstanceTagsPropertyToRosTemplate)(properties.tags),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::CEN::CenInstance`, which is used to create a Cloud Enterprise Network (CEN) instance.
 * @Note This class does not contain additional functions, so it is recommended to use the `CenInstance` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-cen-ceninstance
 */
class RosCenInstance extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosCenInstance.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrArn = this.getAtt('Arn');
        this.attrCenId = this.getAtt('CenId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.description = props.description;
        this.name = props.name;
        this.protectionLevel = props.protectionLevel;
        this.resourceGroupId = props.resourceGroupId;
        this.tags = props.tags;
    }
    get rosProperties() {
        return {
            description: this.description,
            name: this.name,
            protectionLevel: this.protectionLevel,
            resourceGroupId: this.resourceGroupId,
            tags: this.tags,
        };
    }
    renderProperties(props) {
        return rosCenInstancePropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosCenInstance = RosCenInstance;
/**
 * The resource type name for this resource class.
 */
RosCenInstance.ROS_RESOURCE_TYPE_NAME = "ALIYUN::CEN::CenInstance";
/**
 * Determine whether the given properties match those of a `TagsProperty`
 *
 * @param properties - the TypeScript properties of a `TagsProperty`
 *
 * @returns the result of the validation.
 */
function RosCenInstance_TagsPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('value', ros.validateString)(properties.value));
    errors.collect(ros.propertyValidator('key', ros.requiredValidator)(properties.key));
    errors.collect(ros.propertyValidator('key', ros.validateString)(properties.key));
    return errors.wrap('supplied properties not correct for "TagsProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::CEN::CenInstance.Tags` resource
 *
 * @param properties - the TypeScript properties of a `TagsProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::CEN::CenInstance.Tags` resource.
 */
// @ts-ignore TS6133
function rosCenInstanceTagsPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosCenInstance_TagsPropertyValidator(properties).assertSuccess();
    return {
        'Value': ros.stringToRosTemplate(properties.value),
        'Key': ros.stringToRosTemplate(properties.key),
    };
}
/**
 * Determine whether the given properties match those of a `RosCenInstanceAttachmentProps`
 *
 * @param properties - the TypeScript properties of a `RosCenInstanceAttachmentProps`
 *
 * @returns the result of the validation.
 */
function RosCenInstanceAttachmentPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('childInstanceType', ros.requiredValidator)(properties.childInstanceType));
    if (properties.childInstanceType && (typeof properties.childInstanceType) !== 'object') {
        errors.collect(ros.propertyValidator('childInstanceType', ros.validateAllowedValues)({
            data: properties.childInstanceType,
            allowedValues: ["VPC", "VBR", "CCN"],
        }));
    }
    errors.collect(ros.propertyValidator('childInstanceType', ros.validateString)(properties.childInstanceType));
    errors.collect(ros.propertyValidator('cenId', ros.requiredValidator)(properties.cenId));
    errors.collect(ros.propertyValidator('cenId', ros.validateString)(properties.cenId));
    errors.collect(ros.propertyValidator('childInstanceOwnerId', ros.validateNumber)(properties.childInstanceOwnerId));
    errors.collect(ros.propertyValidator('childInstanceId', ros.requiredValidator)(properties.childInstanceId));
    errors.collect(ros.propertyValidator('childInstanceId', ros.validateString)(properties.childInstanceId));
    errors.collect(ros.propertyValidator('childInstanceRegionId', ros.requiredValidator)(properties.childInstanceRegionId));
    errors.collect(ros.propertyValidator('childInstanceRegionId', ros.validateString)(properties.childInstanceRegionId));
    return errors.wrap('supplied properties not correct for "RosCenInstanceAttachmentProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::CEN::CenInstanceAttachment` resource
 *
 * @param properties - the TypeScript properties of a `RosCenInstanceAttachmentProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::CEN::CenInstanceAttachment` resource.
 */
// @ts-ignore TS6133
function rosCenInstanceAttachmentPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosCenInstanceAttachmentPropsValidator(properties).assertSuccess();
    }
    return {
        'CenId': ros.stringToRosTemplate(properties.cenId),
        'ChildInstanceId': ros.stringToRosTemplate(properties.childInstanceId),
        'ChildInstanceRegionId': ros.stringToRosTemplate(properties.childInstanceRegionId),
        'ChildInstanceType': ros.stringToRosTemplate(properties.childInstanceType),
        'ChildInstanceOwnerId': ros.numberToRosTemplate(properties.childInstanceOwnerId),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::CEN::CenInstanceAttachment`, which is used to attach a network instance to a Cloud Enterprise Network (CEN) instance.
 * @Note This class does not contain additional functions, so it is recommended to use the `CenInstanceAttachment` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-cen-ceninstanceattachment
 */
class RosCenInstanceAttachment extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosCenInstanceAttachment.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.cenId = props.cenId;
        this.childInstanceId = props.childInstanceId;
        this.childInstanceRegionId = props.childInstanceRegionId;
        this.childInstanceType = props.childInstanceType;
        this.childInstanceOwnerId = props.childInstanceOwnerId;
    }
    get rosProperties() {
        return {
            cenId: this.cenId,
            childInstanceId: this.childInstanceId,
            childInstanceRegionId: this.childInstanceRegionId,
            childInstanceType: this.childInstanceType,
            childInstanceOwnerId: this.childInstanceOwnerId,
        };
    }
    renderProperties(props) {
        return rosCenInstanceAttachmentPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosCenInstanceAttachment = RosCenInstanceAttachment;
/**
 * The resource type name for this resource class.
 */
RosCenInstanceAttachment.ROS_RESOURCE_TYPE_NAME = "ALIYUN::CEN::CenInstanceAttachment";
/**
 * Determine whether the given properties match those of a `RosCenRouteMapProps`
 *
 * @param properties - the TypeScript properties of a `RosCenRouteMapProps`
 *
 * @returns the result of the validation.
 */
function RosCenRouteMapPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('description', ros.validateString)(properties.description));
    errors.collect(ros.propertyValidator('sourceInstanceIdsReverseMatch', ros.validateBoolean)(properties.sourceInstanceIdsReverseMatch));
    errors.collect(ros.propertyValidator('transmitDirection', ros.requiredValidator)(properties.transmitDirection));
    errors.collect(ros.propertyValidator('transmitDirection', ros.validateString)(properties.transmitDirection));
    errors.collect(ros.propertyValidator('matchCommunitySet', ros.listValidator(ros.validateString))(properties.matchCommunitySet));
    errors.collect(ros.propertyValidator('cenRegionId', ros.requiredValidator)(properties.cenRegionId));
    errors.collect(ros.propertyValidator('cenRegionId', ros.validateString)(properties.cenRegionId));
    errors.collect(ros.propertyValidator('sourceRouteTableIds', ros.listValidator(ros.validateString))(properties.sourceRouteTableIds));
    errors.collect(ros.propertyValidator('destinationInstanceIds', ros.listValidator(ros.validateString))(properties.destinationInstanceIds));
    errors.collect(ros.propertyValidator('destinationInstanceIdsReverseMatch', ros.validateBoolean)(properties.destinationInstanceIdsReverseMatch));
    errors.collect(ros.propertyValidator('sourceInstanceIds', ros.listValidator(ros.validateString))(properties.sourceInstanceIds));
    errors.collect(ros.propertyValidator('destinationRouteTableIds', ros.listValidator(ros.validateString))(properties.destinationRouteTableIds));
    errors.collect(ros.propertyValidator('destinationCidrBlocks', ros.listValidator(ros.validateString))(properties.destinationCidrBlocks));
    errors.collect(ros.propertyValidator('operateCommunitySet', ros.listValidator(ros.validateString))(properties.operateCommunitySet));
    errors.collect(ros.propertyValidator('destinationChildInstanceTypes', ros.listValidator(ros.validateString))(properties.destinationChildInstanceTypes));
    errors.collect(ros.propertyValidator('priority', ros.requiredValidator)(properties.priority));
    errors.collect(ros.propertyValidator('priority', ros.validateNumber)(properties.priority));
    errors.collect(ros.propertyValidator('sourceChildInstanceTypes', ros.listValidator(ros.validateString))(properties.sourceChildInstanceTypes));
    errors.collect(ros.propertyValidator('asPathMatchMode', ros.validateString)(properties.asPathMatchMode));
    errors.collect(ros.propertyValidator('cidrMatchMode', ros.validateString)(properties.cidrMatchMode));
    errors.collect(ros.propertyValidator('mapResult', ros.requiredValidator)(properties.mapResult));
    errors.collect(ros.propertyValidator('mapResult', ros.validateString)(properties.mapResult));
    errors.collect(ros.propertyValidator('routeTypes', ros.listValidator(ros.validateString))(properties.routeTypes));
    errors.collect(ros.propertyValidator('preference', ros.validateNumber)(properties.preference));
    errors.collect(ros.propertyValidator('communityOperateMode', ros.validateString)(properties.communityOperateMode));
    errors.collect(ros.propertyValidator('cenId', ros.requiredValidator)(properties.cenId));
    errors.collect(ros.propertyValidator('cenId', ros.validateString)(properties.cenId));
    errors.collect(ros.propertyValidator('nextPriority', ros.validateNumber)(properties.nextPriority));
    errors.collect(ros.propertyValidator('prependAsPath', ros.listValidator(ros.validateString))(properties.prependAsPath));
    errors.collect(ros.propertyValidator('communityMatchMode', ros.validateString)(properties.communityMatchMode));
    errors.collect(ros.propertyValidator('matchAsns', ros.listValidator(ros.validateString))(properties.matchAsns));
    errors.collect(ros.propertyValidator('sourceRegionIds', ros.listValidator(ros.validateString))(properties.sourceRegionIds));
    return errors.wrap('supplied properties not correct for "RosCenRouteMapProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::CEN::CenRouteMap` resource
 *
 * @param properties - the TypeScript properties of a `RosCenRouteMapProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::CEN::CenRouteMap` resource.
 */
// @ts-ignore TS6133
function rosCenRouteMapPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosCenRouteMapPropsValidator(properties).assertSuccess();
    }
    return {
        'CenId': ros.stringToRosTemplate(properties.cenId),
        'CenRegionId': ros.stringToRosTemplate(properties.cenRegionId),
        'MapResult': ros.stringToRosTemplate(properties.mapResult),
        'Priority': ros.numberToRosTemplate(properties.priority),
        'TransmitDirection': ros.stringToRosTemplate(properties.transmitDirection),
        'AsPathMatchMode': ros.stringToRosTemplate(properties.asPathMatchMode),
        'CidrMatchMode': ros.stringToRosTemplate(properties.cidrMatchMode),
        'CommunityMatchMode': ros.stringToRosTemplate(properties.communityMatchMode),
        'CommunityOperateMode': ros.stringToRosTemplate(properties.communityOperateMode),
        'Description': ros.stringToRosTemplate(properties.description),
        'DestinationChildInstanceTypes': ros.listMapper(ros.stringToRosTemplate)(properties.destinationChildInstanceTypes),
        'DestinationCidrBlocks': ros.listMapper(ros.stringToRosTemplate)(properties.destinationCidrBlocks),
        'DestinationInstanceIds': ros.listMapper(ros.stringToRosTemplate)(properties.destinationInstanceIds),
        'DestinationInstanceIdsReverseMatch': ros.booleanToRosTemplate(properties.destinationInstanceIdsReverseMatch),
        'DestinationRouteTableIds': ros.listMapper(ros.stringToRosTemplate)(properties.destinationRouteTableIds),
        'MatchAsns': ros.listMapper(ros.stringToRosTemplate)(properties.matchAsns),
        'MatchCommunitySet': ros.listMapper(ros.stringToRosTemplate)(properties.matchCommunitySet),
        'NextPriority': ros.numberToRosTemplate(properties.nextPriority),
        'OperateCommunitySet': ros.listMapper(ros.stringToRosTemplate)(properties.operateCommunitySet),
        'Preference': ros.numberToRosTemplate(properties.preference),
        'PrependAsPath': ros.listMapper(ros.stringToRosTemplate)(properties.prependAsPath),
        'RouteTypes': ros.listMapper(ros.stringToRosTemplate)(properties.routeTypes),
        'SourceChildInstanceTypes': ros.listMapper(ros.stringToRosTemplate)(properties.sourceChildInstanceTypes),
        'SourceInstanceIds': ros.listMapper(ros.stringToRosTemplate)(properties.sourceInstanceIds),
        'SourceInstanceIdsReverseMatch': ros.booleanToRosTemplate(properties.sourceInstanceIdsReverseMatch),
        'SourceRegionIds': ros.listMapper(ros.stringToRosTemplate)(properties.sourceRegionIds),
        'SourceRouteTableIds': ros.listMapper(ros.stringToRosTemplate)(properties.sourceRouteTableIds),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::CEN::CenRouteMap`, which is used to create a routing policy.
 * @Note This class does not contain additional functions, so it is recommended to use the `CenRouteMap` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-cen-cenroutemap
 */
class RosCenRouteMap extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosCenRouteMap.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrRouteMapId = this.getAtt('RouteMapId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.cenId = props.cenId;
        this.cenRegionId = props.cenRegionId;
        this.mapResult = props.mapResult;
        this.priority = props.priority;
        this.transmitDirection = props.transmitDirection;
        this.asPathMatchMode = props.asPathMatchMode;
        this.cidrMatchMode = props.cidrMatchMode;
        this.communityMatchMode = props.communityMatchMode;
        this.communityOperateMode = props.communityOperateMode;
        this.description = props.description;
        this.destinationChildInstanceTypes = props.destinationChildInstanceTypes;
        this.destinationCidrBlocks = props.destinationCidrBlocks;
        this.destinationInstanceIds = props.destinationInstanceIds;
        this.destinationInstanceIdsReverseMatch = props.destinationInstanceIdsReverseMatch;
        this.destinationRouteTableIds = props.destinationRouteTableIds;
        this.matchAsns = props.matchAsns;
        this.matchCommunitySet = props.matchCommunitySet;
        this.nextPriority = props.nextPriority;
        this.operateCommunitySet = props.operateCommunitySet;
        this.preference = props.preference;
        this.prependAsPath = props.prependAsPath;
        this.routeTypes = props.routeTypes;
        this.sourceChildInstanceTypes = props.sourceChildInstanceTypes;
        this.sourceInstanceIds = props.sourceInstanceIds;
        this.sourceInstanceIdsReverseMatch = props.sourceInstanceIdsReverseMatch;
        this.sourceRegionIds = props.sourceRegionIds;
        this.sourceRouteTableIds = props.sourceRouteTableIds;
    }
    get rosProperties() {
        return {
            cenId: this.cenId,
            cenRegionId: this.cenRegionId,
            mapResult: this.mapResult,
            priority: this.priority,
            transmitDirection: this.transmitDirection,
            asPathMatchMode: this.asPathMatchMode,
            cidrMatchMode: this.cidrMatchMode,
            communityMatchMode: this.communityMatchMode,
            communityOperateMode: this.communityOperateMode,
            description: this.description,
            destinationChildInstanceTypes: this.destinationChildInstanceTypes,
            destinationCidrBlocks: this.destinationCidrBlocks,
            destinationInstanceIds: this.destinationInstanceIds,
            destinationInstanceIdsReverseMatch: this.destinationInstanceIdsReverseMatch,
            destinationRouteTableIds: this.destinationRouteTableIds,
            matchAsns: this.matchAsns,
            matchCommunitySet: this.matchCommunitySet,
            nextPriority: this.nextPriority,
            operateCommunitySet: this.operateCommunitySet,
            preference: this.preference,
            prependAsPath: this.prependAsPath,
            routeTypes: this.routeTypes,
            sourceChildInstanceTypes: this.sourceChildInstanceTypes,
            sourceInstanceIds: this.sourceInstanceIds,
            sourceInstanceIdsReverseMatch: this.sourceInstanceIdsReverseMatch,
            sourceRegionIds: this.sourceRegionIds,
            sourceRouteTableIds: this.sourceRouteTableIds,
        };
    }
    renderProperties(props) {
        return rosCenRouteMapPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosCenRouteMap = RosCenRouteMap;
/**
 * The resource type name for this resource class.
 */
RosCenRouteMap.ROS_RESOURCE_TYPE_NAME = "ALIYUN::CEN::CenRouteMap";
/**
 * Determine whether the given properties match those of a `RosCenRouteServiceProps`
 *
 * @param properties - the TypeScript properties of a `RosCenRouteServiceProps`
 *
 * @returns the result of the validation.
 */
function RosCenRouteServicePropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('conflictIgnore', ros.validateBoolean)(properties.conflictIgnore));
    errors.collect(ros.propertyValidator('description', ros.validateString)(properties.description));
    errors.collect(ros.propertyValidator('hostRegionId', ros.requiredValidator)(properties.hostRegionId));
    errors.collect(ros.propertyValidator('hostRegionId', ros.validateString)(properties.hostRegionId));
    errors.collect(ros.propertyValidator('cenId', ros.requiredValidator)(properties.cenId));
    errors.collect(ros.propertyValidator('cenId', ros.validateString)(properties.cenId));
    errors.collect(ros.propertyValidator('accessRegionId', ros.requiredValidator)(properties.accessRegionId));
    errors.collect(ros.propertyValidator('accessRegionId', ros.validateString)(properties.accessRegionId));
    errors.collect(ros.propertyValidator('host', ros.requiredValidator)(properties.host));
    errors.collect(ros.propertyValidator('host', ros.validateString)(properties.host));
    errors.collect(ros.propertyValidator('hostVpcId', ros.requiredValidator)(properties.hostVpcId));
    errors.collect(ros.propertyValidator('hostVpcId', ros.validateString)(properties.hostVpcId));
    return errors.wrap('supplied properties not correct for "RosCenRouteServiceProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::CEN::CenRouteService` resource
 *
 * @param properties - the TypeScript properties of a `RosCenRouteServiceProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::CEN::CenRouteService` resource.
 */
// @ts-ignore TS6133
function rosCenRouteServicePropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosCenRouteServicePropsValidator(properties).assertSuccess();
    }
    return {
        'AccessRegionId': ros.stringToRosTemplate(properties.accessRegionId),
        'CenId': ros.stringToRosTemplate(properties.cenId),
        'Host': ros.stringToRosTemplate(properties.host),
        'HostRegionId': ros.stringToRosTemplate(properties.hostRegionId),
        'HostVpcId': ros.stringToRosTemplate(properties.hostVpcId),
        'ConflictIgnore': ros.booleanToRosTemplate(properties.conflictIgnore),
        'Description': ros.stringToRosTemplate(properties.description),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::CEN::CenRouteService`, which is used to access an Alibaba Cloud service.
 * @Note This class does not contain additional functions, so it is recommended to use the `CenRouteService` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-cen-cenrouteservice
 */
class RosCenRouteService extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosCenRouteService.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrId = this.getAtt('Id');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.accessRegionId = props.accessRegionId;
        this.cenId = props.cenId;
        this.host = props.host;
        this.hostRegionId = props.hostRegionId;
        this.hostVpcId = props.hostVpcId;
        this.conflictIgnore = props.conflictIgnore;
        this.description = props.description;
    }
    get rosProperties() {
        return {
            accessRegionId: this.accessRegionId,
            cenId: this.cenId,
            host: this.host,
            hostRegionId: this.hostRegionId,
            hostVpcId: this.hostVpcId,
            conflictIgnore: this.conflictIgnore,
            description: this.description,
        };
    }
    renderProperties(props) {
        return rosCenRouteServicePropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosCenRouteService = RosCenRouteService;
/**
 * The resource type name for this resource class.
 */
RosCenRouteService.ROS_RESOURCE_TYPE_NAME = "ALIYUN::CEN::CenRouteService";
/**
 * Determine whether the given properties match those of a `RosCenVbrHealthCheckProps`
 *
 * @param properties - the TypeScript properties of a `RosCenVbrHealthCheckProps`
 *
 * @returns the result of the validation.
 */
function RosCenVbrHealthCheckPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('vbrInstanceRegionId', ros.requiredValidator)(properties.vbrInstanceRegionId));
    errors.collect(ros.propertyValidator('vbrInstanceRegionId', ros.validateString)(properties.vbrInstanceRegionId));
    errors.collect(ros.propertyValidator('healthCheckInterval', ros.validateNumber)(properties.healthCheckInterval));
    errors.collect(ros.propertyValidator('vbrInstanceId', ros.requiredValidator)(properties.vbrInstanceId));
    errors.collect(ros.propertyValidator('vbrInstanceId', ros.validateString)(properties.vbrInstanceId));
    errors.collect(ros.propertyValidator('vbrInstanceOwnerId', ros.validateNumber)(properties.vbrInstanceOwnerId));
    errors.collect(ros.propertyValidator('healthCheckSourceIp', ros.validateString)(properties.healthCheckSourceIp));
    errors.collect(ros.propertyValidator('healthyThreshold', ros.validateNumber)(properties.healthyThreshold));
    errors.collect(ros.propertyValidator('cenId', ros.requiredValidator)(properties.cenId));
    errors.collect(ros.propertyValidator('cenId', ros.validateString)(properties.cenId));
    errors.collect(ros.propertyValidator('healthCheckTargetIp', ros.requiredValidator)(properties.healthCheckTargetIp));
    errors.collect(ros.propertyValidator('healthCheckTargetIp', ros.validateString)(properties.healthCheckTargetIp));
    return errors.wrap('supplied properties not correct for "RosCenVbrHealthCheckProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::CEN::CenVbrHealthCheck` resource
 *
 * @param properties - the TypeScript properties of a `RosCenVbrHealthCheckProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::CEN::CenVbrHealthCheck` resource.
 */
// @ts-ignore TS6133
function rosCenVbrHealthCheckPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosCenVbrHealthCheckPropsValidator(properties).assertSuccess();
    }
    return {
        'CenId': ros.stringToRosTemplate(properties.cenId),
        'HealthCheckTargetIp': ros.stringToRosTemplate(properties.healthCheckTargetIp),
        'VbrInstanceId': ros.stringToRosTemplate(properties.vbrInstanceId),
        'VbrInstanceRegionId': ros.stringToRosTemplate(properties.vbrInstanceRegionId),
        'HealthCheckInterval': ros.numberToRosTemplate(properties.healthCheckInterval),
        'HealthCheckSourceIp': ros.stringToRosTemplate(properties.healthCheckSourceIp),
        'HealthyThreshold': ros.numberToRosTemplate(properties.healthyThreshold),
        'VbrInstanceOwnerId': ros.numberToRosTemplate(properties.vbrInstanceOwnerId),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::CEN::CenVbrHealthCheck`, which is used to enable the health check feature or modify the health check configurations for a virtual border router (VBR).
 * @Note This class does not contain additional functions, so it is recommended to use the `CenVbrHealthCheck` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-cen-cenvbrhealthcheck
 */
class RosCenVbrHealthCheck extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosCenVbrHealthCheck.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrCenId = this.getAtt('CenId');
        this.attrHealthCheckInterval = this.getAtt('HealthCheckInterval');
        this.attrHealthCheckSourceIp = this.getAtt('HealthCheckSourceIp');
        this.attrHealthCheckTargetIp = this.getAtt('HealthCheckTargetIp');
        this.attrHealthyThreshold = this.getAtt('HealthyThreshold');
        this.attrVbrInstanceId = this.getAtt('VbrInstanceId');
        this.attrVbrInstanceOwnerId = this.getAtt('VbrInstanceOwnerId');
        this.attrVbrInstanceRegionId = this.getAtt('VbrInstanceRegionId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.cenId = props.cenId;
        this.healthCheckTargetIp = props.healthCheckTargetIp;
        this.vbrInstanceId = props.vbrInstanceId;
        this.vbrInstanceRegionId = props.vbrInstanceRegionId;
        this.healthCheckInterval = props.healthCheckInterval;
        this.healthCheckSourceIp = props.healthCheckSourceIp;
        this.healthyThreshold = props.healthyThreshold;
        this.vbrInstanceOwnerId = props.vbrInstanceOwnerId;
    }
    get rosProperties() {
        return {
            cenId: this.cenId,
            healthCheckTargetIp: this.healthCheckTargetIp,
            vbrInstanceId: this.vbrInstanceId,
            vbrInstanceRegionId: this.vbrInstanceRegionId,
            healthCheckInterval: this.healthCheckInterval,
            healthCheckSourceIp: this.healthCheckSourceIp,
            healthyThreshold: this.healthyThreshold,
            vbrInstanceOwnerId: this.vbrInstanceOwnerId,
        };
    }
    renderProperties(props) {
        return rosCenVbrHealthCheckPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosCenVbrHealthCheck = RosCenVbrHealthCheck;
/**
 * The resource type name for this resource class.
 */
RosCenVbrHealthCheck.ROS_RESOURCE_TYPE_NAME = "ALIYUN::CEN::CenVbrHealthCheck";
/**
 * Determine whether the given properties match those of a `RosChildInstanceRouteEntryToAttachmentProps`
 *
 * @param properties - the TypeScript properties of a `RosChildInstanceRouteEntryToAttachmentProps`
 *
 * @returns the result of the validation.
 */
function RosChildInstanceRouteEntryToAttachmentPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('transitRouterAttachmentId', ros.requiredValidator)(properties.transitRouterAttachmentId));
    errors.collect(ros.propertyValidator('transitRouterAttachmentId', ros.validateString)(properties.transitRouterAttachmentId));
    errors.collect(ros.propertyValidator('routeTableId', ros.requiredValidator)(properties.routeTableId));
    errors.collect(ros.propertyValidator('routeTableId', ros.validateString)(properties.routeTableId));
    errors.collect(ros.propertyValidator('cenId', ros.requiredValidator)(properties.cenId));
    errors.collect(ros.propertyValidator('cenId', ros.validateString)(properties.cenId));
    errors.collect(ros.propertyValidator('destinationCidrBlock', ros.requiredValidator)(properties.destinationCidrBlock));
    errors.collect(ros.propertyValidator('destinationCidrBlock', ros.validateString)(properties.destinationCidrBlock));
    return errors.wrap('supplied properties not correct for "RosChildInstanceRouteEntryToAttachmentProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::CEN::ChildInstanceRouteEntryToAttachment` resource
 *
 * @param properties - the TypeScript properties of a `RosChildInstanceRouteEntryToAttachmentProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::CEN::ChildInstanceRouteEntryToAttachment` resource.
 */
// @ts-ignore TS6133
function rosChildInstanceRouteEntryToAttachmentPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosChildInstanceRouteEntryToAttachmentPropsValidator(properties).assertSuccess();
    }
    return {
        'CenId': ros.stringToRosTemplate(properties.cenId),
        'DestinationCidrBlock': ros.stringToRosTemplate(properties.destinationCidrBlock),
        'RouteTableId': ros.stringToRosTemplate(properties.routeTableId),
        'TransitRouterAttachmentId': ros.stringToRosTemplate(properties.transitRouterAttachmentId),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::CEN::ChildInstanceRouteEntryToAttachment`, which is used to add a route to a network instance that is connected to an Enterprise Edition transit router.
 * @Note This class does not contain additional functions, so it is recommended to use the `ChildInstanceRouteEntryToAttachment` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-cen-childinstancerouteentrytoattachment
 */
class RosChildInstanceRouteEntryToAttachment extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosChildInstanceRouteEntryToAttachment.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrCenId = this.getAtt('CenId');
        this.attrDestinationCidrBlock = this.getAtt('DestinationCidrBlock');
        this.attrRouteTableId = this.getAtt('RouteTableId');
        this.attrTransitRouterAttachmentId = this.getAtt('TransitRouterAttachmentId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.cenId = props.cenId;
        this.destinationCidrBlock = props.destinationCidrBlock;
        this.routeTableId = props.routeTableId;
        this.transitRouterAttachmentId = props.transitRouterAttachmentId;
    }
    get rosProperties() {
        return {
            cenId: this.cenId,
            destinationCidrBlock: this.destinationCidrBlock,
            routeTableId: this.routeTableId,
            transitRouterAttachmentId: this.transitRouterAttachmentId,
        };
    }
    renderProperties(props) {
        return rosChildInstanceRouteEntryToAttachmentPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosChildInstanceRouteEntryToAttachment = RosChildInstanceRouteEntryToAttachment;
/**
 * The resource type name for this resource class.
 */
RosChildInstanceRouteEntryToAttachment.ROS_RESOURCE_TYPE_NAME = "ALIYUN::CEN::ChildInstanceRouteEntryToAttachment";
/**
 * Determine whether the given properties match those of a `RosRouteEntryProps`
 *
 * @param properties - the TypeScript properties of a `RosRouteEntryProps`
 *
 * @returns the result of the validation.
 */
function RosRouteEntryPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('childInstanceType', ros.requiredValidator)(properties.childInstanceType));
    if (properties.childInstanceType && (typeof properties.childInstanceType) !== 'object') {
        errors.collect(ros.propertyValidator('childInstanceType', ros.validateAllowedValues)({
            data: properties.childInstanceType,
            allowedValues: ["VPC", "VBR"],
        }));
    }
    errors.collect(ros.propertyValidator('childInstanceType', ros.validateString)(properties.childInstanceType));
    errors.collect(ros.propertyValidator('cenId', ros.requiredValidator)(properties.cenId));
    errors.collect(ros.propertyValidator('cenId', ros.validateString)(properties.cenId));
    errors.collect(ros.propertyValidator('destinationCidrBlock', ros.requiredValidator)(properties.destinationCidrBlock));
    errors.collect(ros.propertyValidator('destinationCidrBlock', ros.validateString)(properties.destinationCidrBlock));
    errors.collect(ros.propertyValidator('childInstanceRouteTableId', ros.requiredValidator)(properties.childInstanceRouteTableId));
    errors.collect(ros.propertyValidator('childInstanceRouteTableId', ros.validateString)(properties.childInstanceRouteTableId));
    errors.collect(ros.propertyValidator('childInstanceId', ros.requiredValidator)(properties.childInstanceId));
    errors.collect(ros.propertyValidator('childInstanceId', ros.validateString)(properties.childInstanceId));
    errors.collect(ros.propertyValidator('childInstanceRegionId', ros.requiredValidator)(properties.childInstanceRegionId));
    errors.collect(ros.propertyValidator('childInstanceRegionId', ros.validateString)(properties.childInstanceRegionId));
    return errors.wrap('supplied properties not correct for "RosRouteEntryProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::CEN::RouteEntry` resource
 *
 * @param properties - the TypeScript properties of a `RosRouteEntryProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::CEN::RouteEntry` resource.
 */
// @ts-ignore TS6133
function rosRouteEntryPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosRouteEntryPropsValidator(properties).assertSuccess();
    }
    return {
        'CenId': ros.stringToRosTemplate(properties.cenId),
        'ChildInstanceId': ros.stringToRosTemplate(properties.childInstanceId),
        'ChildInstanceRegionId': ros.stringToRosTemplate(properties.childInstanceRegionId),
        'ChildInstanceRouteTableId': ros.stringToRosTemplate(properties.childInstanceRouteTableId),
        'ChildInstanceType': ros.stringToRosTemplate(properties.childInstanceType),
        'DestinationCidrBlock': ros.stringToRosTemplate(properties.destinationCidrBlock),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::CEN::RouteEntry`, which is used to advertise a route of an attached virtual private cloud (VPC) or virtual border router (VBR) to a Cloud Enterprise Network (CEN) instance.
 * @Note This class does not contain additional functions, so it is recommended to use the `RouteEntry` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-cen-routeentry
 */
class RosRouteEntry extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosRouteEntry.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.cenId = props.cenId;
        this.childInstanceId = props.childInstanceId;
        this.childInstanceRegionId = props.childInstanceRegionId;
        this.childInstanceRouteTableId = props.childInstanceRouteTableId;
        this.childInstanceType = props.childInstanceType;
        this.destinationCidrBlock = props.destinationCidrBlock;
    }
    get rosProperties() {
        return {
            cenId: this.cenId,
            childInstanceId: this.childInstanceId,
            childInstanceRegionId: this.childInstanceRegionId,
            childInstanceRouteTableId: this.childInstanceRouteTableId,
            childInstanceType: this.childInstanceType,
            destinationCidrBlock: this.destinationCidrBlock,
        };
    }
    renderProperties(props) {
        return rosRouteEntryPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosRouteEntry = RosRouteEntry;
/**
 * The resource type name for this resource class.
 */
RosRouteEntry.ROS_RESOURCE_TYPE_NAME = "ALIYUN::CEN::RouteEntry";
/**
 * Determine whether the given properties match those of a `RosTransitRouterProps`
 *
 * @param properties - the TypeScript properties of a `RosTransitRouterProps`
 *
 * @returns the result of the validation.
 */
function RosTransitRouterPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('cenId', ros.requiredValidator)(properties.cenId));
    errors.collect(ros.propertyValidator('cenId', ros.validateString)(properties.cenId));
    errors.collect(ros.propertyValidator('transitRouterName', ros.validateString)(properties.transitRouterName));
    errors.collect(ros.propertyValidator('transitRouterDescription', ros.validateString)(properties.transitRouterDescription));
    return errors.wrap('supplied properties not correct for "RosTransitRouterProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::CEN::TransitRouter` resource
 *
 * @param properties - the TypeScript properties of a `RosTransitRouterProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::CEN::TransitRouter` resource.
 */
// @ts-ignore TS6133
function rosTransitRouterPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosTransitRouterPropsValidator(properties).assertSuccess();
    }
    return {
        'CenId': ros.stringToRosTemplate(properties.cenId),
        'TransitRouterDescription': ros.stringToRosTemplate(properties.transitRouterDescription),
        'TransitRouterName': ros.stringToRosTemplate(properties.transitRouterName),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::CEN::TransitRouter`, which is used to create an Enterprise Edition transit router.
 * @Note This class does not contain additional functions, so it is recommended to use the `TransitRouter` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-cen-transitrouter
 */
class RosTransitRouter extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosTransitRouter.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrAliUid = this.getAtt('AliUid');
        this.attrCenId = this.getAtt('CenId');
        this.attrSystemTransitRouterRouteTableId = this.getAtt('SystemTransitRouterRouteTableId');
        this.attrTransitRouterDescription = this.getAtt('TransitRouterDescription');
        this.attrTransitRouterId = this.getAtt('TransitRouterId');
        this.attrTransitRouterName = this.getAtt('TransitRouterName');
        this.attrType = this.getAtt('Type');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.cenId = props.cenId;
        this.transitRouterDescription = props.transitRouterDescription;
        this.transitRouterName = props.transitRouterName;
    }
    get rosProperties() {
        return {
            cenId: this.cenId,
            transitRouterDescription: this.transitRouterDescription,
            transitRouterName: this.transitRouterName,
        };
    }
    renderProperties(props) {
        return rosTransitRouterPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosTransitRouter = RosTransitRouter;
/**
 * The resource type name for this resource class.
 */
RosTransitRouter.ROS_RESOURCE_TYPE_NAME = "ALIYUN::CEN::TransitRouter";
/**
 * Determine whether the given properties match those of a `RosTransitRouterPeerAttachmentProps`
 *
 * @param properties - the TypeScript properties of a `RosTransitRouterPeerAttachmentProps`
 *
 * @returns the result of the validation.
 */
function RosTransitRouterPeerAttachmentPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('autoPublishRouteEnabled', ros.validateBoolean)(properties.autoPublishRouteEnabled));
    errors.collect(ros.propertyValidator('bandwidth', ros.validateNumber)(properties.bandwidth));
    errors.collect(ros.propertyValidator('cenId', ros.validateString)(properties.cenId));
    errors.collect(ros.propertyValidator('transitRouterAttachmentName', ros.validateString)(properties.transitRouterAttachmentName));
    errors.collect(ros.propertyValidator('peerTransitRouterId', ros.requiredValidator)(properties.peerTransitRouterId));
    errors.collect(ros.propertyValidator('peerTransitRouterId', ros.validateString)(properties.peerTransitRouterId));
    errors.collect(ros.propertyValidator('cenBandwidthPackageId', ros.validateString)(properties.cenBandwidthPackageId));
    errors.collect(ros.propertyValidator('transitRouterAttachmentDescription', ros.validateString)(properties.transitRouterAttachmentDescription));
    errors.collect(ros.propertyValidator('transitRouterId', ros.validateString)(properties.transitRouterId));
    errors.collect(ros.propertyValidator('peerTransitRouterRegionId', ros.validateString)(properties.peerTransitRouterRegionId));
    return errors.wrap('supplied properties not correct for "RosTransitRouterPeerAttachmentProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::CEN::TransitRouterPeerAttachment` resource
 *
 * @param properties - the TypeScript properties of a `RosTransitRouterPeerAttachmentProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::CEN::TransitRouterPeerAttachment` resource.
 */
// @ts-ignore TS6133
function rosTransitRouterPeerAttachmentPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosTransitRouterPeerAttachmentPropsValidator(properties).assertSuccess();
    }
    return {
        'PeerTransitRouterId': ros.stringToRosTemplate(properties.peerTransitRouterId),
        'AutoPublishRouteEnabled': ros.booleanToRosTemplate(properties.autoPublishRouteEnabled),
        'Bandwidth': ros.numberToRosTemplate(properties.bandwidth),
        'CenBandwidthPackageId': ros.stringToRosTemplate(properties.cenBandwidthPackageId),
        'CenId': ros.stringToRosTemplate(properties.cenId),
        'PeerTransitRouterRegionId': ros.stringToRosTemplate(properties.peerTransitRouterRegionId),
        'TransitRouterAttachmentDescription': ros.stringToRosTemplate(properties.transitRouterAttachmentDescription),
        'TransitRouterAttachmentName': ros.stringToRosTemplate(properties.transitRouterAttachmentName),
        'TransitRouterId': ros.stringToRosTemplate(properties.transitRouterId),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::CEN::TransitRouterPeerAttachment`, which is used to create a cross-region connection for an Enterprise Edition transit router.
 * @Note This class does not contain additional functions, so it is recommended to use the `TransitRouterPeerAttachment` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-cen-transitrouterpeerattachment
 */
class RosTransitRouterPeerAttachment extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosTransitRouterPeerAttachment.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrAutoPublishRouteEnabled = this.getAtt('AutoPublishRouteEnabled');
        this.attrBandwidth = this.getAtt('Bandwidth');
        this.attrCenBandwidthPackageId = this.getAtt('CenBandwidthPackageId');
        this.attrCenId = this.getAtt('CenId');
        this.attrClientToken = this.getAtt('ClientToken');
        this.attrGeographicSpanId = this.getAtt('GeographicSpanId');
        this.attrPeerTransitRouterId = this.getAtt('PeerTransitRouterId');
        this.attrPeerTransitRouterOwnerId = this.getAtt('PeerTransitRouterOwnerId');
        this.attrPeerTransitRouterRegionId = this.getAtt('PeerTransitRouterRegionId');
        this.attrResourceType = this.getAtt('ResourceType');
        this.attrTransitRouterAttachmentDescription = this.getAtt('TransitRouterAttachmentDescription');
        this.attrTransitRouterAttachmentId = this.getAtt('TransitRouterAttachmentId');
        this.attrTransitRouterAttachmentName = this.getAtt('TransitRouterAttachmentName');
        this.attrTransitRouterId = this.getAtt('TransitRouterId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.peerTransitRouterId = props.peerTransitRouterId;
        this.autoPublishRouteEnabled = props.autoPublishRouteEnabled;
        this.bandwidth = props.bandwidth;
        this.cenBandwidthPackageId = props.cenBandwidthPackageId;
        this.cenId = props.cenId;
        this.peerTransitRouterRegionId = props.peerTransitRouterRegionId;
        this.transitRouterAttachmentDescription = props.transitRouterAttachmentDescription;
        this.transitRouterAttachmentName = props.transitRouterAttachmentName;
        this.transitRouterId = props.transitRouterId;
    }
    get rosProperties() {
        return {
            peerTransitRouterId: this.peerTransitRouterId,
            autoPublishRouteEnabled: this.autoPublishRouteEnabled,
            bandwidth: this.bandwidth,
            cenBandwidthPackageId: this.cenBandwidthPackageId,
            cenId: this.cenId,
            peerTransitRouterRegionId: this.peerTransitRouterRegionId,
            transitRouterAttachmentDescription: this.transitRouterAttachmentDescription,
            transitRouterAttachmentName: this.transitRouterAttachmentName,
            transitRouterId: this.transitRouterId,
        };
    }
    renderProperties(props) {
        return rosTransitRouterPeerAttachmentPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosTransitRouterPeerAttachment = RosTransitRouterPeerAttachment;
/**
 * The resource type name for this resource class.
 */
RosTransitRouterPeerAttachment.ROS_RESOURCE_TYPE_NAME = "ALIYUN::CEN::TransitRouterPeerAttachment";
/**
 * Determine whether the given properties match those of a `RosTransitRouterRouteEntryProps`
 *
 * @param properties - the TypeScript properties of a `RosTransitRouterRouteEntryProps`
 *
 * @returns the result of the validation.
 */
function RosTransitRouterRouteEntryPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('transitRouterRouteTableId', ros.requiredValidator)(properties.transitRouterRouteTableId));
    errors.collect(ros.propertyValidator('transitRouterRouteTableId', ros.validateString)(properties.transitRouterRouteTableId));
    errors.collect(ros.propertyValidator('transitRouterRouteEntryDestinationCidrBlock', ros.requiredValidator)(properties.transitRouterRouteEntryDestinationCidrBlock));
    errors.collect(ros.propertyValidator('transitRouterRouteEntryDestinationCidrBlock', ros.validateString)(properties.transitRouterRouteEntryDestinationCidrBlock));
    errors.collect(ros.propertyValidator('transitRouterRouteEntryNextHopId', ros.validateString)(properties.transitRouterRouteEntryNextHopId));
    errors.collect(ros.propertyValidator('transitRouterRouteEntryDescription', ros.validateString)(properties.transitRouterRouteEntryDescription));
    errors.collect(ros.propertyValidator('transitRouterRouteEntryNextHopType', ros.requiredValidator)(properties.transitRouterRouteEntryNextHopType));
    errors.collect(ros.propertyValidator('transitRouterRouteEntryNextHopType', ros.validateString)(properties.transitRouterRouteEntryNextHopType));
    errors.collect(ros.propertyValidator('transitRouterRouteEntryName', ros.validateString)(properties.transitRouterRouteEntryName));
    return errors.wrap('supplied properties not correct for "RosTransitRouterRouteEntryProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::CEN::TransitRouterRouteEntry` resource
 *
 * @param properties - the TypeScript properties of a `RosTransitRouterRouteEntryProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::CEN::TransitRouterRouteEntry` resource.
 */
// @ts-ignore TS6133
function rosTransitRouterRouteEntryPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosTransitRouterRouteEntryPropsValidator(properties).assertSuccess();
    }
    return {
        'TransitRouterRouteEntryDestinationCidrBlock': ros.stringToRosTemplate(properties.transitRouterRouteEntryDestinationCidrBlock),
        'TransitRouterRouteEntryNextHopType': ros.stringToRosTemplate(properties.transitRouterRouteEntryNextHopType),
        'TransitRouterRouteTableId': ros.stringToRosTemplate(properties.transitRouterRouteTableId),
        'TransitRouterRouteEntryDescription': ros.stringToRosTemplate(properties.transitRouterRouteEntryDescription),
        'TransitRouterRouteEntryName': ros.stringToRosTemplate(properties.transitRouterRouteEntryName),
        'TransitRouterRouteEntryNextHopId': ros.stringToRosTemplate(properties.transitRouterRouteEntryNextHopId),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::CEN::TransitRouterRouteEntry`, which is used to add routes to a route table of an Enterprise Edition transit router.
 * @Note This class does not contain additional functions, so it is recommended to use the `TransitRouterRouteEntry` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-cen-transitrouterrouteentry
 */
class RosTransitRouterRouteEntry extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosTransitRouterRouteEntry.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrTransitRouterRouteEntryDescription = this.getAtt('TransitRouterRouteEntryDescription');
        this.attrTransitRouterRouteEntryDestinationCidrBlock = this.getAtt('TransitRouterRouteEntryDestinationCidrBlock');
        this.attrTransitRouterRouteEntryId = this.getAtt('TransitRouterRouteEntryId');
        this.attrTransitRouterRouteEntryName = this.getAtt('TransitRouterRouteEntryName');
        this.attrTransitRouterRouteEntryNextHopId = this.getAtt('TransitRouterRouteEntryNextHopId');
        this.attrTransitRouterRouteEntryNextHopType = this.getAtt('TransitRouterRouteEntryNextHopType');
        this.attrTransitRouterRouteEntryType = this.getAtt('TransitRouterRouteEntryType');
        this.attrTransitRouterRouteTableId = this.getAtt('TransitRouterRouteTableId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.transitRouterRouteEntryDestinationCidrBlock = props.transitRouterRouteEntryDestinationCidrBlock;
        this.transitRouterRouteEntryNextHopType = props.transitRouterRouteEntryNextHopType;
        this.transitRouterRouteTableId = props.transitRouterRouteTableId;
        this.transitRouterRouteEntryDescription = props.transitRouterRouteEntryDescription;
        this.transitRouterRouteEntryName = props.transitRouterRouteEntryName;
        this.transitRouterRouteEntryNextHopId = props.transitRouterRouteEntryNextHopId;
    }
    get rosProperties() {
        return {
            transitRouterRouteEntryDestinationCidrBlock: this.transitRouterRouteEntryDestinationCidrBlock,
            transitRouterRouteEntryNextHopType: this.transitRouterRouteEntryNextHopType,
            transitRouterRouteTableId: this.transitRouterRouteTableId,
            transitRouterRouteEntryDescription: this.transitRouterRouteEntryDescription,
            transitRouterRouteEntryName: this.transitRouterRouteEntryName,
            transitRouterRouteEntryNextHopId: this.transitRouterRouteEntryNextHopId,
        };
    }
    renderProperties(props) {
        return rosTransitRouterRouteEntryPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosTransitRouterRouteEntry = RosTransitRouterRouteEntry;
/**
 * The resource type name for this resource class.
 */
RosTransitRouterRouteEntry.ROS_RESOURCE_TYPE_NAME = "ALIYUN::CEN::TransitRouterRouteEntry";
/**
 * Determine whether the given properties match those of a `RosTransitRouterRouteTableProps`
 *
 * @param properties - the TypeScript properties of a `RosTransitRouterRouteTableProps`
 *
 * @returns the result of the validation.
 */
function RosTransitRouterRouteTablePropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('transitRouterRouteTableDescription', ros.validateString)(properties.transitRouterRouteTableDescription));
    errors.collect(ros.propertyValidator('transitRouterRouteTableName', ros.validateString)(properties.transitRouterRouteTableName));
    errors.collect(ros.propertyValidator('transitRouterId', ros.requiredValidator)(properties.transitRouterId));
    errors.collect(ros.propertyValidator('transitRouterId', ros.validateString)(properties.transitRouterId));
    return errors.wrap('supplied properties not correct for "RosTransitRouterRouteTableProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::CEN::TransitRouterRouteTable` resource
 *
 * @param properties - the TypeScript properties of a `RosTransitRouterRouteTableProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::CEN::TransitRouterRouteTable` resource.
 */
// @ts-ignore TS6133
function rosTransitRouterRouteTablePropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosTransitRouterRouteTablePropsValidator(properties).assertSuccess();
    }
    return {
        'TransitRouterId': ros.stringToRosTemplate(properties.transitRouterId),
        'TransitRouterRouteTableDescription': ros.stringToRosTemplate(properties.transitRouterRouteTableDescription),
        'TransitRouterRouteTableName': ros.stringToRosTemplate(properties.transitRouterRouteTableName),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::CEN::TransitRouterRouteTable`, which is used to create a custom route table for an Enterprise Edition transit router.
 * @Note This class does not contain additional functions, so it is recommended to use the `TransitRouterRouteTable` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-cen-transitrouterroutetable
 */
class RosTransitRouterRouteTable extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosTransitRouterRouteTable.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrClientToken = this.getAtt('ClientToken');
        this.attrTransitRouterId = this.getAtt('TransitRouterId');
        this.attrTransitRouterRouteTableDescription = this.getAtt('TransitRouterRouteTableDescription');
        this.attrTransitRouterRouteTableId = this.getAtt('TransitRouterRouteTableId');
        this.attrTransitRouterRouteTableName = this.getAtt('TransitRouterRouteTableName');
        this.attrTransitRouterRouteTableType = this.getAtt('TransitRouterRouteTableType');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.transitRouterId = props.transitRouterId;
        this.transitRouterRouteTableDescription = props.transitRouterRouteTableDescription;
        this.transitRouterRouteTableName = props.transitRouterRouteTableName;
    }
    get rosProperties() {
        return {
            transitRouterId: this.transitRouterId,
            transitRouterRouteTableDescription: this.transitRouterRouteTableDescription,
            transitRouterRouteTableName: this.transitRouterRouteTableName,
        };
    }
    renderProperties(props) {
        return rosTransitRouterRouteTablePropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosTransitRouterRouteTable = RosTransitRouterRouteTable;
/**
 * The resource type name for this resource class.
 */
RosTransitRouterRouteTable.ROS_RESOURCE_TYPE_NAME = "ALIYUN::CEN::TransitRouterRouteTable";
/**
 * Determine whether the given properties match those of a `RosTransitRouterRouteTableAssociationProps`
 *
 * @param properties - the TypeScript properties of a `RosTransitRouterRouteTableAssociationProps`
 *
 * @returns the result of the validation.
 */
function RosTransitRouterRouteTableAssociationPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('transitRouterRouteTableId', ros.requiredValidator)(properties.transitRouterRouteTableId));
    errors.collect(ros.propertyValidator('transitRouterRouteTableId', ros.validateString)(properties.transitRouterRouteTableId));
    errors.collect(ros.propertyValidator('transitRouterAttachmentId', ros.requiredValidator)(properties.transitRouterAttachmentId));
    errors.collect(ros.propertyValidator('transitRouterAttachmentId', ros.validateString)(properties.transitRouterAttachmentId));
    return errors.wrap('supplied properties not correct for "RosTransitRouterRouteTableAssociationProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::CEN::TransitRouterRouteTableAssociation` resource
 *
 * @param properties - the TypeScript properties of a `RosTransitRouterRouteTableAssociationProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::CEN::TransitRouterRouteTableAssociation` resource.
 */
// @ts-ignore TS6133
function rosTransitRouterRouteTableAssociationPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosTransitRouterRouteTableAssociationPropsValidator(properties).assertSuccess();
    }
    return {
        'TransitRouterAttachmentId': ros.stringToRosTemplate(properties.transitRouterAttachmentId),
        'TransitRouterRouteTableId': ros.stringToRosTemplate(properties.transitRouterRouteTableId),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::CEN::TransitRouterRouteTableAssociation`, which is used to create an associated forwarding correlation.
 * @Note This class does not contain additional functions, so it is recommended to use the `TransitRouterRouteTableAssociation` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-cen-transitrouterroutetableassociation
 */
class RosTransitRouterRouteTableAssociation extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosTransitRouterRouteTableAssociation.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrResourceId = this.getAtt('ResourceId');
        this.attrResourceType = this.getAtt('ResourceType');
        this.attrTransitRouterAttachmentId = this.getAtt('TransitRouterAttachmentId');
        this.attrTransitRouterRouteTableId = this.getAtt('TransitRouterRouteTableId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.transitRouterAttachmentId = props.transitRouterAttachmentId;
        this.transitRouterRouteTableId = props.transitRouterRouteTableId;
    }
    get rosProperties() {
        return {
            transitRouterAttachmentId: this.transitRouterAttachmentId,
            transitRouterRouteTableId: this.transitRouterRouteTableId,
        };
    }
    renderProperties(props) {
        return rosTransitRouterRouteTableAssociationPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosTransitRouterRouteTableAssociation = RosTransitRouterRouteTableAssociation;
/**
 * The resource type name for this resource class.
 */
RosTransitRouterRouteTableAssociation.ROS_RESOURCE_TYPE_NAME = "ALIYUN::CEN::TransitRouterRouteTableAssociation";
/**
 * Determine whether the given properties match those of a `RosTransitRouterRouteTablePropagationProps`
 *
 * @param properties - the TypeScript properties of a `RosTransitRouterRouteTablePropagationProps`
 *
 * @returns the result of the validation.
 */
function RosTransitRouterRouteTablePropagationPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('transitRouterRouteTableId', ros.requiredValidator)(properties.transitRouterRouteTableId));
    errors.collect(ros.propertyValidator('transitRouterRouteTableId', ros.validateString)(properties.transitRouterRouteTableId));
    errors.collect(ros.propertyValidator('transitRouterAttachmentId', ros.requiredValidator)(properties.transitRouterAttachmentId));
    errors.collect(ros.propertyValidator('transitRouterAttachmentId', ros.validateString)(properties.transitRouterAttachmentId));
    return errors.wrap('supplied properties not correct for "RosTransitRouterRouteTablePropagationProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::CEN::TransitRouterRouteTablePropagation` resource
 *
 * @param properties - the TypeScript properties of a `RosTransitRouterRouteTablePropagationProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::CEN::TransitRouterRouteTablePropagation` resource.
 */
// @ts-ignore TS6133
function rosTransitRouterRouteTablePropagationPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosTransitRouterRouteTablePropagationPropsValidator(properties).assertSuccess();
    }
    return {
        'TransitRouterAttachmentId': ros.stringToRosTemplate(properties.transitRouterAttachmentId),
        'TransitRouterRouteTableId': ros.stringToRosTemplate(properties.transitRouterRouteTableId),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::CEN::TransitRouterRouteTablePropagation`, which is used to create a route learning correlation.
 * @Note This class does not contain additional functions, so it is recommended to use the `TransitRouterRouteTablePropagation` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-cen-transitrouterroutetablepropagation
 */
class RosTransitRouterRouteTablePropagation extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosTransitRouterRouteTablePropagation.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrResourceId = this.getAtt('ResourceId');
        this.attrResourceType = this.getAtt('ResourceType');
        this.attrTransitRouterAttachmentId = this.getAtt('TransitRouterAttachmentId');
        this.attrTransitRouterRouteTableId = this.getAtt('TransitRouterRouteTableId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.transitRouterAttachmentId = props.transitRouterAttachmentId;
        this.transitRouterRouteTableId = props.transitRouterRouteTableId;
    }
    get rosProperties() {
        return {
            transitRouterAttachmentId: this.transitRouterAttachmentId,
            transitRouterRouteTableId: this.transitRouterRouteTableId,
        };
    }
    renderProperties(props) {
        return rosTransitRouterRouteTablePropagationPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosTransitRouterRouteTablePropagation = RosTransitRouterRouteTablePropagation;
/**
 * The resource type name for this resource class.
 */
RosTransitRouterRouteTablePropagation.ROS_RESOURCE_TYPE_NAME = "ALIYUN::CEN::TransitRouterRouteTablePropagation";
/**
 * Determine whether the given properties match those of a `RosTransitRouterVbrAttachmentProps`
 *
 * @param properties - the TypeScript properties of a `RosTransitRouterVbrAttachmentProps`
 *
 * @returns the result of the validation.
 */
function RosTransitRouterVbrAttachmentPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('autoPublishRouteEnabled', ros.validateBoolean)(properties.autoPublishRouteEnabled));
    errors.collect(ros.propertyValidator('vbrOwnerId', ros.validateNumber)(properties.vbrOwnerId));
    errors.collect(ros.propertyValidator('cenId', ros.validateString)(properties.cenId));
    errors.collect(ros.propertyValidator('transitRouterAttachmentName', ros.validateString)(properties.transitRouterAttachmentName));
    errors.collect(ros.propertyValidator('vbrId', ros.requiredValidator)(properties.vbrId));
    errors.collect(ros.propertyValidator('vbrId', ros.validateString)(properties.vbrId));
    errors.collect(ros.propertyValidator('transitRouterAttachmentDescription', ros.validateString)(properties.transitRouterAttachmentDescription));
    errors.collect(ros.propertyValidator('transitRouterId', ros.validateString)(properties.transitRouterId));
    return errors.wrap('supplied properties not correct for "RosTransitRouterVbrAttachmentProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::CEN::TransitRouterVbrAttachment` resource
 *
 * @param properties - the TypeScript properties of a `RosTransitRouterVbrAttachmentProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::CEN::TransitRouterVbrAttachment` resource.
 */
// @ts-ignore TS6133
function rosTransitRouterVbrAttachmentPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosTransitRouterVbrAttachmentPropsValidator(properties).assertSuccess();
    }
    return {
        'VbrId': ros.stringToRosTemplate(properties.vbrId),
        'AutoPublishRouteEnabled': ros.booleanToRosTemplate(properties.autoPublishRouteEnabled),
        'CenId': ros.stringToRosTemplate(properties.cenId),
        'TransitRouterAttachmentDescription': ros.stringToRosTemplate(properties.transitRouterAttachmentDescription),
        'TransitRouterAttachmentName': ros.stringToRosTemplate(properties.transitRouterAttachmentName),
        'TransitRouterId': ros.stringToRosTemplate(properties.transitRouterId),
        'VbrOwnerId': ros.numberToRosTemplate(properties.vbrOwnerId),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::CEN::TransitRouterVbrAttachment`, which is used to create a virtual border router (VBR) connection on an Enterprise Edition transit router.
 * @Note This class does not contain additional functions, so it is recommended to use the `TransitRouterVbrAttachment` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-cen-transitroutervbrattachment
 */
class RosTransitRouterVbrAttachment extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosTransitRouterVbrAttachment.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrAutoPublishRouteEnabled = this.getAtt('AutoPublishRouteEnabled');
        this.attrCenId = this.getAtt('CenId');
        this.attrClientToken = this.getAtt('ClientToken');
        this.attrResourceType = this.getAtt('ResourceType');
        this.attrTransitRouterAttachmentDescription = this.getAtt('TransitRouterAttachmentDescription');
        this.attrTransitRouterAttachmentId = this.getAtt('TransitRouterAttachmentId');
        this.attrTransitRouterAttachmentName = this.getAtt('TransitRouterAttachmentName');
        this.attrTransitRouterId = this.getAtt('TransitRouterId');
        this.attrVbrId = this.getAtt('VbrId');
        this.attrVbrOwnerId = this.getAtt('VbrOwnerId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.vbrId = props.vbrId;
        this.autoPublishRouteEnabled = props.autoPublishRouteEnabled;
        this.cenId = props.cenId;
        this.transitRouterAttachmentDescription = props.transitRouterAttachmentDescription;
        this.transitRouterAttachmentName = props.transitRouterAttachmentName;
        this.transitRouterId = props.transitRouterId;
        this.vbrOwnerId = props.vbrOwnerId;
    }
    get rosProperties() {
        return {
            vbrId: this.vbrId,
            autoPublishRouteEnabled: this.autoPublishRouteEnabled,
            cenId: this.cenId,
            transitRouterAttachmentDescription: this.transitRouterAttachmentDescription,
            transitRouterAttachmentName: this.transitRouterAttachmentName,
            transitRouterId: this.transitRouterId,
            vbrOwnerId: this.vbrOwnerId,
        };
    }
    renderProperties(props) {
        return rosTransitRouterVbrAttachmentPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosTransitRouterVbrAttachment = RosTransitRouterVbrAttachment;
/**
 * The resource type name for this resource class.
 */
RosTransitRouterVbrAttachment.ROS_RESOURCE_TYPE_NAME = "ALIYUN::CEN::TransitRouterVbrAttachment";
/**
 * Determine whether the given properties match those of a `RosTransitRouterVpcAttachmentProps`
 *
 * @param properties - the TypeScript properties of a `RosTransitRouterVpcAttachmentProps`
 *
 * @returns the result of the validation.
 */
function RosTransitRouterVpcAttachmentPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('routeTableAssociationEnabled', ros.validateBoolean)(properties.routeTableAssociationEnabled));
    errors.collect(ros.propertyValidator('deletionForce', ros.validateBoolean)(properties.deletionForce));
    errors.collect(ros.propertyValidator('autoCreateVpcRoute', ros.validateBoolean)(properties.autoCreateVpcRoute));
    errors.collect(ros.propertyValidator('vpcId', ros.requiredValidator)(properties.vpcId));
    errors.collect(ros.propertyValidator('vpcId', ros.validateString)(properties.vpcId));
    errors.collect(ros.propertyValidator('chargeType', ros.validateString)(properties.chargeType));
    errors.collect(ros.propertyValidator('routeTablePropagationEnabled', ros.validateBoolean)(properties.routeTablePropagationEnabled));
    errors.collect(ros.propertyValidator('cenId', ros.validateString)(properties.cenId));
    errors.collect(ros.propertyValidator('transitRouterAttachmentName', ros.validateString)(properties.transitRouterAttachmentName));
    errors.collect(ros.propertyValidator('zoneMappings', ros.requiredValidator)(properties.zoneMappings));
    if (properties.zoneMappings && (Array.isArray(properties.zoneMappings) || (typeof properties.zoneMappings) === 'string')) {
        errors.collect(ros.propertyValidator('zoneMappings', ros.validateLength)({
            data: properties.zoneMappings.length,
            min: undefined,
            max: 3,
        }));
    }
    errors.collect(ros.propertyValidator('zoneMappings', ros.listValidator(RosTransitRouterVpcAttachment_ZoneMappingsPropertyValidator))(properties.zoneMappings));
    errors.collect(ros.propertyValidator('vpcOwnerId', ros.validateNumber)(properties.vpcOwnerId));
    errors.collect(ros.propertyValidator('transitRouterAttachmentDescription', ros.validateString)(properties.transitRouterAttachmentDescription));
    errors.collect(ros.propertyValidator('transitRouterId', ros.validateString)(properties.transitRouterId));
    return errors.wrap('supplied properties not correct for "RosTransitRouterVpcAttachmentProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::CEN::TransitRouterVpcAttachment` resource
 *
 * @param properties - the TypeScript properties of a `RosTransitRouterVpcAttachmentProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::CEN::TransitRouterVpcAttachment` resource.
 */
// @ts-ignore TS6133
function rosTransitRouterVpcAttachmentPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosTransitRouterVpcAttachmentPropsValidator(properties).assertSuccess();
    }
    return {
        'VpcId': ros.stringToRosTemplate(properties.vpcId),
        'ZoneMappings': ros.listMapper(rosTransitRouterVpcAttachmentZoneMappingsPropertyToRosTemplate)(properties.zoneMappings),
        'AutoCreateVpcRoute': ros.booleanToRosTemplate(properties.autoCreateVpcRoute),
        'CenId': ros.stringToRosTemplate(properties.cenId),
        'ChargeType': ros.stringToRosTemplate(properties.chargeType),
        'DeletionForce': ros.booleanToRosTemplate(properties.deletionForce),
        'RouteTableAssociationEnabled': ros.booleanToRosTemplate(properties.routeTableAssociationEnabled),
        'RouteTablePropagationEnabled': ros.booleanToRosTemplate(properties.routeTablePropagationEnabled),
        'TransitRouterAttachmentDescription': ros.stringToRosTemplate(properties.transitRouterAttachmentDescription),
        'TransitRouterAttachmentName': ros.stringToRosTemplate(properties.transitRouterAttachmentName),
        'TransitRouterId': ros.stringToRosTemplate(properties.transitRouterId),
        'VpcOwnerId': ros.numberToRosTemplate(properties.vpcOwnerId),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::CEN::TransitRouterVpcAttachment`, which is used to create a virtual private cloud (VPC) connection on an Enterprise Edition transit router.
 * @Note This class does not contain additional functions, so it is recommended to use the `TransitRouterVpcAttachment` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-cen-transitroutervpcattachment
 */
class RosTransitRouterVpcAttachment extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosTransitRouterVpcAttachment.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrCenId = this.getAtt('CenId');
        this.attrClientToken = this.getAtt('ClientToken');
        this.attrResourceType = this.getAtt('ResourceType');
        this.attrTransitRouterAttachmentDescription = this.getAtt('TransitRouterAttachmentDescription');
        this.attrTransitRouterAttachmentId = this.getAtt('TransitRouterAttachmentId');
        this.attrTransitRouterAttachmentName = this.getAtt('TransitRouterAttachmentName');
        this.attrTransitRouterId = this.getAtt('TransitRouterId');
        this.attrVpcId = this.getAtt('VpcId');
        this.attrVpcOwnerId = this.getAtt('VpcOwnerId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.vpcId = props.vpcId;
        this.zoneMappings = props.zoneMappings;
        this.autoCreateVpcRoute = props.autoCreateVpcRoute;
        this.cenId = props.cenId;
        this.chargeType = props.chargeType;
        this.deletionForce = props.deletionForce;
        this.routeTableAssociationEnabled = props.routeTableAssociationEnabled;
        this.routeTablePropagationEnabled = props.routeTablePropagationEnabled;
        this.transitRouterAttachmentDescription = props.transitRouterAttachmentDescription;
        this.transitRouterAttachmentName = props.transitRouterAttachmentName;
        this.transitRouterId = props.transitRouterId;
        this.vpcOwnerId = props.vpcOwnerId;
    }
    get rosProperties() {
        return {
            vpcId: this.vpcId,
            zoneMappings: this.zoneMappings,
            autoCreateVpcRoute: this.autoCreateVpcRoute,
            cenId: this.cenId,
            chargeType: this.chargeType,
            deletionForce: this.deletionForce,
            routeTableAssociationEnabled: this.routeTableAssociationEnabled,
            routeTablePropagationEnabled: this.routeTablePropagationEnabled,
            transitRouterAttachmentDescription: this.transitRouterAttachmentDescription,
            transitRouterAttachmentName: this.transitRouterAttachmentName,
            transitRouterId: this.transitRouterId,
            vpcOwnerId: this.vpcOwnerId,
        };
    }
    renderProperties(props) {
        return rosTransitRouterVpcAttachmentPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosTransitRouterVpcAttachment = RosTransitRouterVpcAttachment;
/**
 * The resource type name for this resource class.
 */
RosTransitRouterVpcAttachment.ROS_RESOURCE_TYPE_NAME = "ALIYUN::CEN::TransitRouterVpcAttachment";
/**
 * Determine whether the given properties match those of a `ZoneMappingsProperty`
 *
 * @param properties - the TypeScript properties of a `ZoneMappingsProperty`
 *
 * @returns the result of the validation.
 */
function RosTransitRouterVpcAttachment_ZoneMappingsPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('zoneId', ros.requiredValidator)(properties.zoneId));
    errors.collect(ros.propertyValidator('zoneId', ros.validateString)(properties.zoneId));
    errors.collect(ros.propertyValidator('vSwitchId', ros.requiredValidator)(properties.vSwitchId));
    errors.collect(ros.propertyValidator('vSwitchId', ros.validateString)(properties.vSwitchId));
    return errors.wrap('supplied properties not correct for "ZoneMappingsProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::CEN::TransitRouterVpcAttachment.ZoneMappings` resource
 *
 * @param properties - the TypeScript properties of a `ZoneMappingsProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::CEN::TransitRouterVpcAttachment.ZoneMappings` resource.
 */
// @ts-ignore TS6133
function rosTransitRouterVpcAttachmentZoneMappingsPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosTransitRouterVpcAttachment_ZoneMappingsPropertyValidator(properties).assertSuccess();
    return {
        'ZoneId': ros.stringToRosTemplate(properties.zoneId),
        'VSwitchId': ros.stringToRosTemplate(properties.vSwitchId),
    };
}
/**
 * Determine whether the given properties match those of a `RosTransitRouterVpnAttachmentProps`
 *
 * @param properties - the TypeScript properties of a `RosTransitRouterVpnAttachmentProps`
 *
 * @returns the result of the validation.
 */
function RosTransitRouterVpnAttachmentPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('autoPublishRouteEnabled', ros.validateBoolean)(properties.autoPublishRouteEnabled));
    errors.collect(ros.propertyValidator('routeTableAssociationEnabled', ros.validateBoolean)(properties.routeTableAssociationEnabled));
    errors.collect(ros.propertyValidator('vpnOwnerId', ros.validateString)(properties.vpnOwnerId));
    errors.collect(ros.propertyValidator('deletionForce', ros.validateBoolean)(properties.deletionForce));
    errors.collect(ros.propertyValidator('zoneId', ros.requiredValidator)(properties.zoneId));
    errors.collect(ros.propertyValidator('zoneId', ros.validateString)(properties.zoneId));
    errors.collect(ros.propertyValidator('routeTablePropagationEnabled', ros.validateBoolean)(properties.routeTablePropagationEnabled));
    errors.collect(ros.propertyValidator('cenId', ros.validateString)(properties.cenId));
    errors.collect(ros.propertyValidator('transitRouterAttachmentName', ros.validateString)(properties.transitRouterAttachmentName));
    if (properties.tags && (Array.isArray(properties.tags) || (typeof properties.tags) === 'string')) {
        errors.collect(ros.propertyValidator('tags', ros.validateLength)({
            data: properties.tags.length,
            min: undefined,
            max: 20,
        }));
    }
    errors.collect(ros.propertyValidator('tags', ros.listValidator(RosTransitRouterVpnAttachment_TagsPropertyValidator))(properties.tags));
    errors.collect(ros.propertyValidator('transitRouterAttachmentDescription', ros.validateString)(properties.transitRouterAttachmentDescription));
    errors.collect(ros.propertyValidator('transitRouterId', ros.validateString)(properties.transitRouterId));
    errors.collect(ros.propertyValidator('vpnId', ros.requiredValidator)(properties.vpnId));
    errors.collect(ros.propertyValidator('vpnId', ros.validateString)(properties.vpnId));
    return errors.wrap('supplied properties not correct for "RosTransitRouterVpnAttachmentProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::CEN::TransitRouterVpnAttachment` resource
 *
 * @param properties - the TypeScript properties of a `RosTransitRouterVpnAttachmentProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::CEN::TransitRouterVpnAttachment` resource.
 */
// @ts-ignore TS6133
function rosTransitRouterVpnAttachmentPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosTransitRouterVpnAttachmentPropsValidator(properties).assertSuccess();
    }
    return {
        'VpnId': ros.stringToRosTemplate(properties.vpnId),
        'ZoneId': ros.stringToRosTemplate(properties.zoneId),
        'AutoPublishRouteEnabled': ros.booleanToRosTemplate(properties.autoPublishRouteEnabled),
        'CenId': ros.stringToRosTemplate(properties.cenId),
        'DeletionForce': ros.booleanToRosTemplate(properties.deletionForce),
        'RouteTableAssociationEnabled': ros.booleanToRosTemplate(properties.routeTableAssociationEnabled),
        'RouteTablePropagationEnabled': ros.booleanToRosTemplate(properties.routeTablePropagationEnabled),
        'Tags': ros.listMapper(rosTransitRouterVpnAttachmentTagsPropertyToRosTemplate)(properties.tags),
        'TransitRouterAttachmentDescription': ros.stringToRosTemplate(properties.transitRouterAttachmentDescription),
        'TransitRouterAttachmentName': ros.stringToRosTemplate(properties.transitRouterAttachmentName),
        'TransitRouterId': ros.stringToRosTemplate(properties.transitRouterId),
        'VpnOwnerId': ros.stringToRosTemplate(properties.vpnOwnerId),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::CEN::TransitRouterVpnAttachment`, which is used to create a VPN connection.
 * @Note This class does not contain additional functions, so it is recommended to use the `TransitRouterVpnAttachment` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-cen-transitroutervpnattachment
 */
class RosTransitRouterVpnAttachment extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosTransitRouterVpnAttachment.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrTransitRouterAttachmentId = this.getAtt('TransitRouterAttachmentId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.vpnId = props.vpnId;
        this.zoneId = props.zoneId;
        this.autoPublishRouteEnabled = props.autoPublishRouteEnabled;
        this.cenId = props.cenId;
        this.deletionForce = props.deletionForce;
        this.routeTableAssociationEnabled = props.routeTableAssociationEnabled;
        this.routeTablePropagationEnabled = props.routeTablePropagationEnabled;
        this.tags = props.tags;
        this.transitRouterAttachmentDescription = props.transitRouterAttachmentDescription;
        this.transitRouterAttachmentName = props.transitRouterAttachmentName;
        this.transitRouterId = props.transitRouterId;
        this.vpnOwnerId = props.vpnOwnerId;
    }
    get rosProperties() {
        return {
            vpnId: this.vpnId,
            zoneId: this.zoneId,
            autoPublishRouteEnabled: this.autoPublishRouteEnabled,
            cenId: this.cenId,
            deletionForce: this.deletionForce,
            routeTableAssociationEnabled: this.routeTableAssociationEnabled,
            routeTablePropagationEnabled: this.routeTablePropagationEnabled,
            tags: this.tags,
            transitRouterAttachmentDescription: this.transitRouterAttachmentDescription,
            transitRouterAttachmentName: this.transitRouterAttachmentName,
            transitRouterId: this.transitRouterId,
            vpnOwnerId: this.vpnOwnerId,
        };
    }
    renderProperties(props) {
        return rosTransitRouterVpnAttachmentPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosTransitRouterVpnAttachment = RosTransitRouterVpnAttachment;
/**
 * The resource type name for this resource class.
 */
RosTransitRouterVpnAttachment.ROS_RESOURCE_TYPE_NAME = "ALIYUN::CEN::TransitRouterVpnAttachment";
/**
 * Determine whether the given properties match those of a `TagsProperty`
 *
 * @param properties - the TypeScript properties of a `TagsProperty`
 *
 * @returns the result of the validation.
 */
function RosTransitRouterVpnAttachment_TagsPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('value', ros.validateString)(properties.value));
    errors.collect(ros.propertyValidator('key', ros.requiredValidator)(properties.key));
    errors.collect(ros.propertyValidator('key', ros.validateString)(properties.key));
    return errors.wrap('supplied properties not correct for "TagsProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::CEN::TransitRouterVpnAttachment.Tags` resource
 *
 * @param properties - the TypeScript properties of a `TagsProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::CEN::TransitRouterVpnAttachment.Tags` resource.
 */
// @ts-ignore TS6133
function rosTransitRouterVpnAttachmentTagsPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosTransitRouterVpnAttachment_TagsPropertyValidator(properties).assertSuccess();
    return {
        'Value': ros.stringToRosTemplate(properties.value),
        'Key': ros.stringToRosTemplate(properties.key),
    };
}
//# sourceMappingURL=data:application/json;base64,