"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CenVbrHealthCheck = exports.CenVbrHealthCheckProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const cen_generated_1 = require("./cen.generated");
Object.defineProperty(exports, "CenVbrHealthCheckProperty", { enumerable: true, get: function () { return cen_generated_1.RosCenVbrHealthCheck; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::CEN::CenVbrHealthCheck`, which is used to enable the health check feature or modify the health check configurations for a virtual border router (VBR).
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosCenVbrHealthCheck`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-cen-cenvbrhealthcheck
 */
class CenVbrHealthCheck extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosCenVbrHealthCheck = new cen_generated_1.RosCenVbrHealthCheck(this, id, {
            vbrInstanceRegionId: props.vbrInstanceRegionId,
            healthCheckInterval: props.healthCheckInterval,
            vbrInstanceId: props.vbrInstanceId,
            vbrInstanceOwnerId: props.vbrInstanceOwnerId,
            healthCheckSourceIp: props.healthCheckSourceIp,
            healthyThreshold: props.healthyThreshold,
            cenId: props.cenId,
            healthCheckTargetIp: props.healthCheckTargetIp,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosCenVbrHealthCheck;
        this.attrCenId = rosCenVbrHealthCheck.attrCenId;
        this.attrHealthCheckInterval = rosCenVbrHealthCheck.attrHealthCheckInterval;
        this.attrHealthCheckSourceIp = rosCenVbrHealthCheck.attrHealthCheckSourceIp;
        this.attrHealthCheckTargetIp = rosCenVbrHealthCheck.attrHealthCheckTargetIp;
        this.attrHealthyThreshold = rosCenVbrHealthCheck.attrHealthyThreshold;
        this.attrVbrInstanceId = rosCenVbrHealthCheck.attrVbrInstanceId;
        this.attrVbrInstanceOwnerId = rosCenVbrHealthCheck.attrVbrInstanceOwnerId;
        this.attrVbrInstanceRegionId = rosCenVbrHealthCheck.attrVbrInstanceRegionId;
    }
}
exports.CenVbrHealthCheck = CenVbrHealthCheck;
//# sourceMappingURL=data:application/json;base64,