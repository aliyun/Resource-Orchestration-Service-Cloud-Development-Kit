"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransitRouterVpnAttachment = exports.TransitRouterVpnAttachmentProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const cen_generated_1 = require("./cen.generated");
Object.defineProperty(exports, "TransitRouterVpnAttachmentProperty", { enumerable: true, get: function () { return cen_generated_1.RosTransitRouterVpnAttachment; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::CEN::TransitRouterVpnAttachment`, which is used to create a VPN connection.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosTransitRouterVpnAttachment`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-cen-transitroutervpnattachment
 */
class TransitRouterVpnAttachment extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosTransitRouterVpnAttachment = new cen_generated_1.RosTransitRouterVpnAttachment(this, id, {
            autoPublishRouteEnabled: props.autoPublishRouteEnabled,
            routeTableAssociationEnabled: props.routeTableAssociationEnabled,
            vpnOwnerId: props.vpnOwnerId,
            deletionForce: props.deletionForce,
            zoneId: props.zoneId,
            routeTablePropagationEnabled: props.routeTablePropagationEnabled,
            cenId: props.cenId,
            transitRouterAttachmentName: props.transitRouterAttachmentName,
            tags: props.tags,
            transitRouterAttachmentDescription: props.transitRouterAttachmentDescription,
            transitRouterId: props.transitRouterId,
            vpnId: props.vpnId,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosTransitRouterVpnAttachment;
        this.attrTransitRouterAttachmentId = rosTransitRouterVpnAttachment.attrTransitRouterAttachmentId;
    }
}
exports.TransitRouterVpnAttachment = TransitRouterVpnAttachment;
//# sourceMappingURL=data:application/json;base64,