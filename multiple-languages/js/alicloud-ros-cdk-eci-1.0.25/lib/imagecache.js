"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImageCache = exports.ImageCacheProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const eci_generated_1 = require("./eci.generated");
Object.defineProperty(exports, "ImageCacheProperty", { enumerable: true, get: function () { return eci_generated_1.RosImageCache; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::ECI::ImageCache`, which is used to create an image cache.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosImageCache`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-eci-imagecache
 */
class ImageCache extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosImageCache = new eci_generated_1.RosImageCache(this, id, {
            imageCacheSize: props.imageCacheSize,
            zoneId: props.zoneId,
            resourceGroupId: props.resourceGroupId,
            autoMatchImageCache: props.autoMatchImageCache,
            securityGroupId: props.securityGroupId,
            imageCacheName: props.imageCacheName,
            imageRegistryCredential: props.imageRegistryCredential,
            vSwitchId: props.vSwitchId,
            acrRegistryInfo: props.acrRegistryInfo,
            retentionDays: props.retentionDays,
            image: props.image,
            eipInstanceId: props.eipInstanceId,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosImageCache;
        this.attrImageCacheId = rosImageCache.attrImageCacheId;
    }
}
exports.ImageCache = ImageCache;
//# sourceMappingURL=data:application/json;base64,