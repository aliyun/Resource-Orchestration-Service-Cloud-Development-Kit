"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Invocation = exports.InvocationProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ecs_generated_1 = require("./ecs.generated");
Object.defineProperty(exports, "InvocationProperty", { enumerable: true, get: function () { return ecs_generated_1.RosInvocation; } });
/**
 * A ROS resource type:  `ALIYUN::ECS::Invocation`
 */
class Invocation extends ros.Resource {
    /**
     * Create a new `ALIYUN::ECS::Invocation`.
     *
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosInvocation = new ecs_generated_1.RosInvocation(this, id, {
            parameters: props.parameters,
            timed: props.timed,
            frequency: props.frequency,
            commandName: props.commandName,
            commandId: props.commandId,
            sync: props.sync === undefined || props.sync === null ? false : props.sync,
            instanceIds: props.instanceIds,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosInvocation;
        this.attrInvokeId = rosInvocation.attrInvokeId;
        this.attrInvokeInstances = rosInvocation.attrInvokeInstances;
        this.attrInvokeResults = rosInvocation.attrInvokeResults;
    }
}
exports.Invocation = Invocation;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW52b2NhdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImludm9jYXRpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsOENBQThDO0FBQzlDLG1EQUFnRDtBQUV0QixtR0FGakIsNkJBQWEsT0FFc0I7QUFpRDVDOztHQUVHO0FBQ0gsTUFBYSxVQUFXLFNBQVEsR0FBRyxDQUFDLFFBQVE7SUFzQnhDOzs7Ozs7T0FNRztJQUNILFlBQVksS0FBb0IsRUFBRSxFQUFVLEVBQUUsS0FBc0IsRUFBRSxtQ0FBMkMsSUFBSTtRQUNqSCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRWpCLE1BQU0sYUFBYSxHQUFHLElBQUksNkJBQWEsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFHO1lBQy9DLFVBQVUsRUFBRSxLQUFLLENBQUMsVUFBVTtZQUM1QixLQUFLLEVBQUUsS0FBSyxDQUFDLEtBQUs7WUFDbEIsU0FBUyxFQUFFLEtBQUssQ0FBQyxTQUFTO1lBQzFCLFdBQVcsRUFBRSxLQUFLLENBQUMsV0FBVztZQUM5QixTQUFTLEVBQUUsS0FBSyxDQUFDLFNBQVM7WUFDMUIsSUFBSSxFQUFFLEtBQUssQ0FBQyxJQUFJLEtBQUssU0FBUyxJQUFJLEtBQUssQ0FBQyxJQUFJLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJO1lBQzFFLFdBQVcsRUFBRSxLQUFLLENBQUMsV0FBVztTQUNqQyxFQUFFLGdDQUFnQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztRQUNwRixJQUFJLENBQUMsUUFBUSxHQUFHLGFBQWEsQ0FBQztRQUM5QixJQUFJLENBQUMsWUFBWSxHQUFHLGFBQWEsQ0FBQyxZQUFZLENBQUM7UUFDL0MsSUFBSSxDQUFDLG1CQUFtQixHQUFHLGFBQWEsQ0FBQyxtQkFBbUIsQ0FBQztRQUM3RCxJQUFJLENBQUMsaUJBQWlCLEdBQUcsYUFBYSxDQUFDLGlCQUFpQixDQUFDO0lBQzdELENBQUM7Q0FDSjtBQTlDRCxnQ0E4Q0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyByb3MgZnJvbSAnQGFsaWNsb3VkL3Jvcy1jZGstY29yZSc7XG5pbXBvcnQgeyBSb3NJbnZvY2F0aW9uIH0gZnJvbSAnLi9lY3MuZ2VuZXJhdGVkJztcbi8vIEdlbmVyYXRlZCBmcm9tIHRoZSBBbGlDbG91ZCBST1MgUmVzb3VyY2UgU3BlY2lmaWNhdGlvblxuZXhwb3J0IHsgUm9zSW52b2NhdGlvbiBhcyBJbnZvY2F0aW9uUHJvcGVydHkgfTtcblxuLyoqXG4gKiBQcm9wZXJ0aWVzIGZvciBkZWZpbmluZyBhIGBBTElZVU46OkVDUzo6SW52b2NhdGlvbmBcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJbnZvY2F0aW9uUHJvcHMge1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgaW5zdGFuY2VJZHM6IFRoZSBpbnN0YW5jZSBpZCBsaXN0LiBJbnN0YW5jZXMgc3RhdHVzIG11c3QgYmUgcnVubmluZy5cbiAgICAgKi9cbiAgICByZWFkb25seSBpbnN0YW5jZUlkczogQXJyYXk8YW55IHwgcm9zLklSZXNvbHZhYmxlPiB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGNvbW1hbmRJZDogVGhlIGlkIG9mIGNvbW1hbmQuXG4gICAgICovXG4gICAgcmVhZG9ubHkgY29tbWFuZElkPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgY29tbWFuZE5hbWU6IFRoZSBuYW1lIG9mIGNvbW1hbmQuIE9ubHkgc3lzdGVtIGNvbW1hbmRzIHdob3NlIHByb3ZpZGUgaXMgQWxpYmFiYUNsb3VkIGFyZSBzdXBwb3J0ZWRcbiAgICAgKi9cbiAgICByZWFkb25seSBjb21tYW5kTmFtZT86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGZyZXF1ZW5jeTogVGhlIGZyZXF1ZW5jeSBvZiB0aW1pbmcgZXhlY3V0aW9uICh0aGUgc2hvcnRlc3QgZnJlcXVlbmN5IGlzIHBlcmZvcm1lZCBldmVyeSAxIG1pbnV0ZSkuIEl0IGlzcyBtYW5kYXRvcnkgd2hlbiBUaW1pbmcgaXMgVHJ1ZS5UaGUgdmFsdWUgcnVsZSBmb2xsb3dzIHRoZSBydWxlcyBvZiB0aGUgY3JvbiBleHByZXNzaW9uLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGZyZXF1ZW5jeT86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHBhcmFtZXRlcnM6IFRoZSBrZXktdmFsdWUgcGFpcnMgb2YgY3VzdG9tIHBhcmFtZXRlcnMgcGFzc2VkIGluIHdoZW4gdGhlIHNjcmlwdCBjb250YWlucyBjdXN0b20gcGFyYW1ldGVycy5cbiAgICAgKiBOdW1iZXIgb2YgY3VzdG9tIHBhcmFtZXRlcnM6IDAgdG8gMTAuXG4gICAgICogVGhlIGtleSBjYW5ub3QgYmUgYW4gZW1wdHkgc3RyaW5nLiBJdCBjYW4gYmUgdXAgdG8gNjQgY2hhcmFjdGVycyBpbiBsZW5ndGguXG4gICAgICogVGhlIHZhbHVlIGNhbiBiZSBhbiBlbXB0eSBzdHJpbmcuXG4gICAgICogQWZ0ZXIgdGhlIGN1c3RvbSBwYXJhbWV0ZXJzIGFuZCB0aGUgb3JpZ2luYWwgc2NyaXB0IGNvbnRlbnQgYXJlIEJhc2U2NCBlbmNvZGVkLCB0aGUgdG90YWwgc2l6ZSBjYW5ub3QgZXhjZWVkIDE2IEtCLlxuICAgICAqIFRoZSBzZXQgb2YgY3VzdG9tIHBhcmFtZXRlciBuYW1lcyBtdXN0IGJlIGEgc3Vic2V0IG9mIHRoZSBwYXJhbWV0ZXIgc2V0IHRoYXQgaXMgZGVmaW5lZCB3aGVuIHlvdSBjcmVhdGVkIHRoZSBzY3JpcHQuIFlvdSBjYW4gdXNlIGFuIGVtcHR5IHN0cmluZyB0byByZXByZXNlbnQgdGhlIHBhcmFtZXRlcnMgdGhhdCBhcmUgbm90IHBhc3NlZCBpbi5cbiAgICAgKiBEZWZhdWx0IHZhbHVlOiBudWxsLCBpbmRpY2F0aW5nIHRoYXQgdGhpcyBwYXJhbWV0ZXIgaXMgY2FuY2VsZWQgYW5kIGN1c3RvbWVyIHBhcmFtZXRlcnMgYXJlIGRpc2FibGVkLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHBhcmFtZXRlcnM/OiB7IFtrZXk6IHN0cmluZ106IChhbnkgfCByb3MuSVJlc29sdmFibGUpIH0gfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBzeW5jOiBXaGV0aGVyIHRvIGludm9rZSBzeW5jaHJvbm91c2x5LlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHN5bmM/OiBib29sZWFuIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgdGltZWQ6IFdoZXRoZXIgaXQgaXMgdGltZWQgZXhlY3V0aW9uLiBEZWZhdWx0IGlzIEZhbHNlLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHRpbWVkPzogYm9vbGVhbiB8IHJvcy5JUmVzb2x2YWJsZTtcbn1cblxuLyoqXG4gKiBBIFJPUyByZXNvdXJjZSB0eXBlOiAgYEFMSVlVTjo6RUNTOjpJbnZvY2F0aW9uYFxuICovXG5leHBvcnQgY2xhc3MgSW52b2NhdGlvbiBleHRlbmRzIHJvcy5SZXNvdXJjZSB7XG5cbiAgICAvKipcbiAgICAgKiBBIGZhY3RvcnkgbWV0aG9kIHRoYXQgY3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzIGZyb20gYW4gb2JqZWN0XG4gICAgICogY29udGFpbmluZyB0aGUgcHJvcGVydGllcyBvZiB0aGlzIFJPUyByZXNvdXJjZSwgd2hpY2ggd2lsbCBiZSBhc3NpZ25lZCB0byBST1MgcmVzb3VyY2UuXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgSW52b2tlSWQ6IFRoZSBpZCBvZiBjb21tYW5kIGV4ZWN1dGlvbi5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckludm9rZUlkOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgSW52b2tlSW5zdGFuY2VzOiBUaGUgSW52b2tlSW5zdGFuY2VzIG9mIGNvbW1hbmQuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJJbnZva2VJbnN0YW5jZXM6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBJbnZva2VSZXN1bHRzOiBUaGUgcmVzdWx0cyBvZiBpbnZva2UgY29tbWFuZC5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckludm9rZVJlc3VsdHM6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBgQUxJWVVOOjpFQ1M6Okludm9jYXRpb25gLlxuICAgICAqXG4gICAgICogUGFyYW0gc2NvcGUgLSBzY29wZSBpbiB3aGljaCB0aGlzIHJlc291cmNlIGlzIGRlZmluZWRcbiAgICAgKiBQYXJhbSBpZCAgICAtIHNjb3BlZCBpZCBvZiB0aGUgcmVzb3VyY2VcbiAgICAgKiBQYXJhbSBwcm9wcyAtIHJlc291cmNlIHByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihzY29wZTogcm9zLkNvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IEludm9jYXRpb25Qcm9wcywgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6Ym9vbGVhbiA9IHRydWUpIHtcbiAgICAgICAgc3VwZXIoc2NvcGUsIGlkKTtcblxuICAgICAgICBjb25zdCByb3NJbnZvY2F0aW9uID0gbmV3IFJvc0ludm9jYXRpb24odGhpcywgaWQsICB7XG4gICAgICAgICAgICBwYXJhbWV0ZXJzOiBwcm9wcy5wYXJhbWV0ZXJzLFxuICAgICAgICAgICAgdGltZWQ6IHByb3BzLnRpbWVkLFxuICAgICAgICAgICAgZnJlcXVlbmN5OiBwcm9wcy5mcmVxdWVuY3ksXG4gICAgICAgICAgICBjb21tYW5kTmFtZTogcHJvcHMuY29tbWFuZE5hbWUsXG4gICAgICAgICAgICBjb21tYW5kSWQ6IHByb3BzLmNvbW1hbmRJZCxcbiAgICAgICAgICAgIHN5bmM6IHByb3BzLnN5bmMgPT09IHVuZGVmaW5lZCB8fCBwcm9wcy5zeW5jID09PSBudWxsID8gZmFsc2UgOiBwcm9wcy5zeW5jLFxuICAgICAgICAgICAgaW5zdGFuY2VJZHM6IHByb3BzLmluc3RhbmNlSWRzLFxuICAgICAgICB9LCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCAmJiB0aGlzLnN0YWNrLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50KTtcbiAgICAgICAgdGhpcy5yZXNvdXJjZSA9IHJvc0ludm9jYXRpb247XG4gICAgICAgIHRoaXMuYXR0ckludm9rZUlkID0gcm9zSW52b2NhdGlvbi5hdHRySW52b2tlSWQ7XG4gICAgICAgIHRoaXMuYXR0ckludm9rZUluc3RhbmNlcyA9IHJvc0ludm9jYXRpb24uYXR0ckludm9rZUluc3RhbmNlcztcbiAgICAgICAgdGhpcy5hdHRySW52b2tlUmVzdWx0cyA9IHJvc0ludm9jYXRpb24uYXR0ckludm9rZVJlc3VsdHM7XG4gICAgfVxufVxuIl19