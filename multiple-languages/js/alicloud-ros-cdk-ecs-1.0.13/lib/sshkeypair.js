"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SSHKeyPair = exports.SSHKeyPairProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ecs_generated_1 = require("./ecs.generated");
Object.defineProperty(exports, "SSHKeyPairProperty", { enumerable: true, get: function () { return ecs_generated_1.RosSSHKeyPair; } });
/**
 * A ROS resource type:  `ALIYUN::ECS::SSHKeyPair`
 */
class SSHKeyPair extends ros.Resource {
    /**
     * Create a new `ALIYUN::ECS::SSHKeyPair`.
     *
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosSSHKeyPair = new ecs_generated_1.RosSSHKeyPair(this, id, {
            keyPairName: props.keyPairName,
            resourceGroupId: props.resourceGroupId,
            publicKeyBody: props.publicKeyBody,
            tags: props.tags,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosSSHKeyPair;
        this.attrKeyPairFingerPrint = rosSSHKeyPair.attrKeyPairFingerPrint;
        this.attrKeyPairName = rosSSHKeyPair.attrKeyPairName;
        this.attrPrivateKeyBody = rosSSHKeyPair.attrPrivateKeyBody;
    }
}
exports.SSHKeyPair = SSHKeyPair;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3Noa2V5cGFpci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInNzaGtleXBhaXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsOENBQThDO0FBQzlDLG1EQUFnRDtBQUV0QixtR0FGakIsNkJBQWEsT0FFc0I7QUE0QjVDOztHQUVHO0FBQ0gsTUFBYSxVQUFXLFNBQVEsR0FBRyxDQUFDLFFBQVE7SUFzQnhDOzs7Ozs7T0FNRztJQUNILFlBQVksS0FBb0IsRUFBRSxFQUFVLEVBQUUsS0FBc0IsRUFBRSxtQ0FBMkMsSUFBSTtRQUNqSCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRWpCLE1BQU0sYUFBYSxHQUFHLElBQUksNkJBQWEsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFHO1lBQy9DLFdBQVcsRUFBRSxLQUFLLENBQUMsV0FBVztZQUM5QixlQUFlLEVBQUUsS0FBSyxDQUFDLGVBQWU7WUFDdEMsYUFBYSxFQUFFLEtBQUssQ0FBQyxhQUFhO1lBQ2xDLElBQUksRUFBRSxLQUFLLENBQUMsSUFBSTtTQUNuQixFQUFFLGdDQUFnQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztRQUNwRixJQUFJLENBQUMsUUFBUSxHQUFHLGFBQWEsQ0FBQztRQUM5QixJQUFJLENBQUMsc0JBQXNCLEdBQUcsYUFBYSxDQUFDLHNCQUFzQixDQUFDO1FBQ25FLElBQUksQ0FBQyxlQUFlLEdBQUcsYUFBYSxDQUFDLGVBQWUsQ0FBQztRQUNyRCxJQUFJLENBQUMsa0JBQWtCLEdBQUcsYUFBYSxDQUFDLGtCQUFrQixDQUFDO0lBQy9ELENBQUM7Q0FDSjtBQTNDRCxnQ0EyQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyByb3MgZnJvbSAnQGFsaWNsb3VkL3Jvcy1jZGstY29yZSc7XG5pbXBvcnQgeyBSb3NTU0hLZXlQYWlyIH0gZnJvbSAnLi9lY3MuZ2VuZXJhdGVkJztcbi8vIEdlbmVyYXRlZCBmcm9tIHRoZSBBbGlDbG91ZCBST1MgUmVzb3VyY2UgU3BlY2lmaWNhdGlvblxuZXhwb3J0IHsgUm9zU1NIS2V5UGFpciBhcyBTU0hLZXlQYWlyUHJvcGVydHkgfTtcblxuLyoqXG4gKiBQcm9wZXJ0aWVzIGZvciBkZWZpbmluZyBhIGBBTElZVU46OkVDUzo6U1NIS2V5UGFpcmBcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBTU0hLZXlQYWlyUHJvcHMge1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkga2V5UGFpck5hbWU6IFNTSCBrZXkgcGFpciBuYW1lLiBJdCBtdXN0IGJlIHVuaXF1ZS4gWzIsIDEyOF0gY2hhcmFjdGVycy4gQWxsIGNoYXJhY3RlciBzZXRzIGFyZSBzdXBwb3J0ZWQuIERvIG5vdCBzdGFydCB3aXRoIGEgc3BlY2lhbCBjaGFyYWN0ZXIsIGRpZ2l0LCBodHRwOi8vLCBvciBodHRwczovLy4gSXQgY2FuIGNvbnRhaW4gZGlnaXRzLCBcIi5cIiwgXCJfXCIsIG9yIFwiLVwiLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGtleVBhaXJOYW1lOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBwdWJsaWNLZXlCb2R5OiBTU0ggUHVibGljIGtleS4gSWYgUHVibGljS2V5Qm9keSBpcyBzcGVjaWZpZWQsIGV4aXN0ZWQgcHVibGljIGtleSBib2R5IHdpbGwgYmUgaW1wb3J0ZWQgaW5zdGVhZCBvZiBjcmVhdGluZyBuZXcgU1NIIGtleSBwYWlyLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHB1YmxpY0tleUJvZHk/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSByZXNvdXJjZUdyb3VwSWQ6IFJlc291cmNlIGdyb3VwIGlkLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHJlc291cmNlR3JvdXBJZD86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHRhZ3M6IFRhZ3MgdG8gYXR0YWNoIHRvIGluc3RhbmNlLiBNYXggc3VwcG9ydCAyMCB0YWdzIHRvIGFkZCBkdXJpbmcgY3JlYXRlIGluc3RhbmNlLiBFYWNoIHRhZyB3aXRoIHR3byBwcm9wZXJ0aWVzIEtleSBhbmQgVmFsdWUsIGFuZCBLZXkgaXMgcmVxdWlyZWQuXG4gICAgICovXG4gICAgcmVhZG9ubHkgdGFncz86IFJvc1NTSEtleVBhaXIuVGFnc1Byb3BlcnR5W107XG59XG5cbi8qKlxuICogQSBST1MgcmVzb3VyY2UgdHlwZTogIGBBTElZVU46OkVDUzo6U1NIS2V5UGFpcmBcbiAqL1xuZXhwb3J0IGNsYXNzIFNTSEtleVBhaXIgZXh0ZW5kcyByb3MuUmVzb3VyY2Uge1xuXG4gICAgLyoqXG4gICAgICogQSBmYWN0b3J5IG1ldGhvZCB0aGF0IGNyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgdGhpcyBjbGFzcyBmcm9tIGFuIG9iamVjdFxuICAgICAqIGNvbnRhaW5pbmcgdGhlIHByb3BlcnRpZXMgb2YgdGhpcyBST1MgcmVzb3VyY2UsIHdoaWNoIHdpbGwgYmUgYXNzaWduZWQgdG8gUk9TIHJlc291cmNlLlxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIEtleVBhaXJGaW5nZXJQcmludDogVGhlIGZpbmdlcnByaW50IG9mIHRoZSBrZXkgcGFpci4gVGhlIHB1YmxpYyBrZXkgZmluZ2VycHJpbnQgZm9ybWF0IGRlZmluZWQgaW4gUkZDNDcxNjogTUQ1IG1lc3NhZ2UgZGlnZXN0IGFsZ29yaXRobS4gUmVmZXIgdG8gaHR0cDovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjNDcxNi5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0cktleVBhaXJGaW5nZXJQcmludDogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIEtleVBhaXJOYW1lOiBTU0ggS2V5IHBhaXIgbmFtZS5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0cktleVBhaXJOYW1lOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgUHJpdmF0ZUtleUJvZHk6IFRoZSBwcml2YXRlIGtleSBvZiB0aGUga2V5IHBhaXIuIENvbnRlbnQgb2YgdGhlIFJTQSBwcml2YXRlIGtleSBpbiB0aGUgUEtDUyM4IGZvcm1hdCBvZiB0aGUgdW5lbmNyeXB0ZWQgUEVNIGVuY29kaW5nLiBSZWZlciB0bzogaHR0cHM6Ly93d3cub3BlbnNzbC5vcmcvZG9jcy9hcHBzL3BrY3M4Lmh0bWwuVXNlciBvbmx5IGNhbiBnZXQgdGhlIHByaXZhdGUga2V5IG9uZSB0aW1lIHdoZW4gYW5kIG9ubHkgd2hlbiBTU0gga2V5IHBhaXIgaXMgY3JlYXRlZC5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0clByaXZhdGVLZXlCb2R5OiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgYEFMSVlVTjo6RUNTOjpTU0hLZXlQYWlyYC5cbiAgICAgKlxuICAgICAqIFBhcmFtIHNjb3BlIC0gc2NvcGUgaW4gd2hpY2ggdGhpcyByZXNvdXJjZSBpcyBkZWZpbmVkXG4gICAgICogUGFyYW0gaWQgICAgLSBzY29wZWQgaWQgb2YgdGhlIHJlc291cmNlXG4gICAgICogUGFyYW0gcHJvcHMgLSByZXNvdXJjZSBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IHJvcy5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBTU0hLZXlQYWlyUHJvcHMsIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OmJvb2xlYW4gPSB0cnVlKSB7XG4gICAgICAgIHN1cGVyKHNjb3BlLCBpZCk7XG5cbiAgICAgICAgY29uc3Qgcm9zU1NIS2V5UGFpciA9IG5ldyBSb3NTU0hLZXlQYWlyKHRoaXMsIGlkLCAge1xuICAgICAgICAgICAga2V5UGFpck5hbWU6IHByb3BzLmtleVBhaXJOYW1lLFxuICAgICAgICAgICAgcmVzb3VyY2VHcm91cElkOiBwcm9wcy5yZXNvdXJjZUdyb3VwSWQsXG4gICAgICAgICAgICBwdWJsaWNLZXlCb2R5OiBwcm9wcy5wdWJsaWNLZXlCb2R5LFxuICAgICAgICAgICAgdGFnczogcHJvcHMudGFncyxcbiAgICAgICAgfSwgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgJiYgdGhpcy5zdGFjay5lbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCk7XG4gICAgICAgIHRoaXMucmVzb3VyY2UgPSByb3NTU0hLZXlQYWlyO1xuICAgICAgICB0aGlzLmF0dHJLZXlQYWlyRmluZ2VyUHJpbnQgPSByb3NTU0hLZXlQYWlyLmF0dHJLZXlQYWlyRmluZ2VyUHJpbnQ7XG4gICAgICAgIHRoaXMuYXR0cktleVBhaXJOYW1lID0gcm9zU1NIS2V5UGFpci5hdHRyS2V5UGFpck5hbWU7XG4gICAgICAgIHRoaXMuYXR0clByaXZhdGVLZXlCb2R5ID0gcm9zU1NIS2V5UGFpci5hdHRyUHJpdmF0ZUtleUJvZHk7XG4gICAgfVxufVxuIl19