"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NetworkInterfacePermission = exports.NetworkInterfacePermissionProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ecs_generated_1 = require("./ecs.generated");
Object.defineProperty(exports, "NetworkInterfacePermissionProperty", { enumerable: true, get: function () { return ecs_generated_1.RosNetworkInterfacePermission; } });
/**
 * A ROS resource type:  `ALIYUN::ECS::NetworkInterfacePermission`
 */
class NetworkInterfacePermission extends ros.Resource {
    /**
     * Create a new `ALIYUN::ECS::NetworkInterfacePermission`.
     *
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosNetworkInterfacePermission = new ecs_generated_1.RosNetworkInterfacePermission(this, id, {
            accountId: props.accountId,
            permission: props.permission === undefined || props.permission === null ? 'InstanceAttach' : props.permission,
            networkInterfaceId: props.networkInterfaceId,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosNetworkInterfacePermission;
        this.attrNetworkInterfacePermissionId = rosNetworkInterfacePermission.attrNetworkInterfacePermissionId;
    }
}
exports.NetworkInterfacePermission = NetworkInterfacePermission;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmV0d29ya2ludGVyZmFjZXBlcm1pc3Npb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJuZXR3b3JraW50ZXJmYWNlcGVybWlzc2lvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw4Q0FBOEM7QUFDOUMsbURBQWdFO0FBRXRCLG1IQUZqQyw2Q0FBNkIsT0FFc0M7QUF1QjVFOztHQUVHO0FBQ0gsTUFBYSwwQkFBMkIsU0FBUSxHQUFHLENBQUMsUUFBUTtJQVl4RDs7Ozs7O09BTUc7SUFDSCxZQUFZLEtBQW9CLEVBQUUsRUFBVSxFQUFFLEtBQXNDLEVBQUUsbUNBQTJDLElBQUk7UUFDakksS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUVqQixNQUFNLDZCQUE2QixHQUFHLElBQUksNkNBQTZCLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRztZQUMvRSxTQUFTLEVBQUUsS0FBSyxDQUFDLFNBQVM7WUFDMUIsVUFBVSxFQUFFLEtBQUssQ0FBQyxVQUFVLEtBQUssU0FBUyxJQUFJLEtBQUssQ0FBQyxVQUFVLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFVBQVU7WUFDN0csa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGtCQUFrQjtTQUMvQyxFQUFFLGdDQUFnQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztRQUNwRixJQUFJLENBQUMsUUFBUSxHQUFHLDZCQUE2QixDQUFDO1FBQzlDLElBQUksQ0FBQyxnQ0FBZ0MsR0FBRyw2QkFBNkIsQ0FBQyxnQ0FBZ0MsQ0FBQztJQUMzRyxDQUFDO0NBQ0o7QUE5QkQsZ0VBOEJDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcm9zIGZyb20gJ0BhbGljbG91ZC9yb3MtY2RrLWNvcmUnO1xuaW1wb3J0IHsgUm9zTmV0d29ya0ludGVyZmFjZVBlcm1pc3Npb24gfSBmcm9tICcuL2Vjcy5nZW5lcmF0ZWQnO1xuLy8gR2VuZXJhdGVkIGZyb20gdGhlIEFsaUNsb3VkIFJPUyBSZXNvdXJjZSBTcGVjaWZpY2F0aW9uXG5leHBvcnQgeyBSb3NOZXR3b3JrSW50ZXJmYWNlUGVybWlzc2lvbiBhcyBOZXR3b3JrSW50ZXJmYWNlUGVybWlzc2lvblByb3BlcnR5IH07XG5cbi8qKlxuICogUHJvcGVydGllcyBmb3IgZGVmaW5pbmcgYSBgQUxJWVVOOjpFQ1M6Ok5ldHdvcmtJbnRlcmZhY2VQZXJtaXNzaW9uYFxuICovXG5leHBvcnQgaW50ZXJmYWNlIE5ldHdvcmtJbnRlcmZhY2VQZXJtaXNzaW9uUHJvcHMge1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgYWNjb3VudElkOiB0aGUgYWNjb3VudCBpZFxuICAgICAqL1xuICAgIHJlYWRvbmx5IGFjY291bnRJZDogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgbmV0d29ya0ludGVyZmFjZUlkOiBOZXR3b3JrIGludGVyZmFjZSBpZFxuICAgICAqL1xuICAgIHJlYWRvbmx5IG5ldHdvcmtJbnRlcmZhY2VJZDogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgcGVybWlzc2lvbjogdGhlIHBlcm1pc3Npb25cbiAgICAgKi9cbiAgICByZWFkb25seSBwZXJtaXNzaW9uOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG59XG5cbi8qKlxuICogQSBST1MgcmVzb3VyY2UgdHlwZTogIGBBTElZVU46OkVDUzo6TmV0d29ya0ludGVyZmFjZVBlcm1pc3Npb25gXG4gKi9cbmV4cG9ydCBjbGFzcyBOZXR3b3JrSW50ZXJmYWNlUGVybWlzc2lvbiBleHRlbmRzIHJvcy5SZXNvdXJjZSB7XG5cbiAgICAvKipcbiAgICAgKiBBIGZhY3RvcnkgbWV0aG9kIHRoYXQgY3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzIGZyb20gYW4gb2JqZWN0XG4gICAgICogY29udGFpbmluZyB0aGUgcHJvcGVydGllcyBvZiB0aGlzIFJPUyByZXNvdXJjZSwgd2hpY2ggd2lsbCBiZSBhc3NpZ25lZCB0byBST1MgcmVzb3VyY2UuXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgTmV0d29ya0ludGVyZmFjZVBlcm1pc3Npb25JZDogdGhlIG5ldHdvcmsgaW50ZXJmYWNlIHBlcm1pc3Npb24gaWRcbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ck5ldHdvcmtJbnRlcmZhY2VQZXJtaXNzaW9uSWQ6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBgQUxJWVVOOjpFQ1M6Ok5ldHdvcmtJbnRlcmZhY2VQZXJtaXNzaW9uYC5cbiAgICAgKlxuICAgICAqIFBhcmFtIHNjb3BlIC0gc2NvcGUgaW4gd2hpY2ggdGhpcyByZXNvdXJjZSBpcyBkZWZpbmVkXG4gICAgICogUGFyYW0gaWQgICAgLSBzY29wZWQgaWQgb2YgdGhlIHJlc291cmNlXG4gICAgICogUGFyYW0gcHJvcHMgLSByZXNvdXJjZSBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IHJvcy5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBOZXR3b3JrSW50ZXJmYWNlUGVybWlzc2lvblByb3BzLCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDpib29sZWFuID0gdHJ1ZSkge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQpO1xuXG4gICAgICAgIGNvbnN0IHJvc05ldHdvcmtJbnRlcmZhY2VQZXJtaXNzaW9uID0gbmV3IFJvc05ldHdvcmtJbnRlcmZhY2VQZXJtaXNzaW9uKHRoaXMsIGlkLCAge1xuICAgICAgICAgICAgYWNjb3VudElkOiBwcm9wcy5hY2NvdW50SWQsXG4gICAgICAgICAgICBwZXJtaXNzaW9uOiBwcm9wcy5wZXJtaXNzaW9uID09PSB1bmRlZmluZWQgfHwgcHJvcHMucGVybWlzc2lvbiA9PT0gbnVsbCA/ICdJbnN0YW5jZUF0dGFjaCcgOiBwcm9wcy5wZXJtaXNzaW9uLFxuICAgICAgICAgICAgbmV0d29ya0ludGVyZmFjZUlkOiBwcm9wcy5uZXR3b3JrSW50ZXJmYWNlSWQsXG4gICAgICAgIH0sIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ICYmIHRoaXMuc3RhY2suZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQpO1xuICAgICAgICB0aGlzLnJlc291cmNlID0gcm9zTmV0d29ya0ludGVyZmFjZVBlcm1pc3Npb247XG4gICAgICAgIHRoaXMuYXR0ck5ldHdvcmtJbnRlcmZhY2VQZXJtaXNzaW9uSWQgPSByb3NOZXR3b3JrSW50ZXJmYWNlUGVybWlzc2lvbi5hdHRyTmV0d29ya0ludGVyZmFjZVBlcm1pc3Npb25JZDtcbiAgICB9XG59XG4iXX0=