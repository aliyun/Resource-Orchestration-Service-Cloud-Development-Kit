"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Snapshot = exports.SnapshotProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ecs_generated_1 = require("./ecs.generated");
Object.defineProperty(exports, "SnapshotProperty", { enumerable: true, get: function () { return ecs_generated_1.RosSnapshot; } });
/**
 * A ROS resource type:  `ALIYUN::ECS::Snapshot`
 */
class Snapshot extends ros.Resource {
    /**
     * Create a new `ALIYUN::ECS::Snapshot`.
     *
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosSnapshot = new ecs_generated_1.RosSnapshot(this, id, {
            instantAccess: props.instantAccess,
            description: props.description,
            resourceGroupId: props.resourceGroupId,
            timeout: props.timeout === undefined || props.timeout === null ? 200 : props.timeout,
            snapshotName: props.snapshotName,
            instantAccessRetentionDays: props.instantAccessRetentionDays,
            tags: props.tags,
            diskId: props.diskId,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosSnapshot;
        this.attrSnapshotId = rosSnapshot.attrSnapshotId;
    }
}
exports.Snapshot = Snapshot;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic25hcHNob3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJzbmFwc2hvdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw4Q0FBOEM7QUFDOUMsbURBQThDO0FBRXRCLGlHQUZmLDJCQUFXLE9BRW9CO0FBeUR4Qzs7R0FFRztBQUNILE1BQWEsUUFBUyxTQUFRLEdBQUcsQ0FBQyxRQUFRO0lBWXRDOzs7Ozs7T0FNRztJQUNILFlBQVksS0FBb0IsRUFBRSxFQUFVLEVBQUUsS0FBb0IsRUFBRSxtQ0FBMkMsSUFBSTtRQUMvRyxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRWpCLE1BQU0sV0FBVyxHQUFHLElBQUksMkJBQVcsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFHO1lBQzNDLGFBQWEsRUFBRSxLQUFLLENBQUMsYUFBYTtZQUNsQyxXQUFXLEVBQUUsS0FBSyxDQUFDLFdBQVc7WUFDOUIsZUFBZSxFQUFFLEtBQUssQ0FBQyxlQUFlO1lBQ3RDLE9BQU8sRUFBRSxLQUFLLENBQUMsT0FBTyxLQUFLLFNBQVMsSUFBSSxLQUFLLENBQUMsT0FBTyxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTztZQUNwRixZQUFZLEVBQUUsS0FBSyxDQUFDLFlBQVk7WUFDaEMsMEJBQTBCLEVBQUUsS0FBSyxDQUFDLDBCQUEwQjtZQUM1RCxJQUFJLEVBQUUsS0FBSyxDQUFDLElBQUk7WUFDaEIsTUFBTSxFQUFFLEtBQUssQ0FBQyxNQUFNO1NBQ3ZCLEVBQUUsZ0NBQWdDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO1FBQ3BGLElBQUksQ0FBQyxRQUFRLEdBQUcsV0FBVyxDQUFDO1FBQzVCLElBQUksQ0FBQyxjQUFjLEdBQUcsV0FBVyxDQUFDLGNBQWMsQ0FBQztJQUNyRCxDQUFDO0NBQ0o7QUFuQ0QsNEJBbUNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcm9zIGZyb20gJ0BhbGljbG91ZC9yb3MtY2RrLWNvcmUnO1xuaW1wb3J0IHsgUm9zU25hcHNob3QgfSBmcm9tICcuL2Vjcy5nZW5lcmF0ZWQnO1xuLy8gR2VuZXJhdGVkIGZyb20gdGhlIEFsaUNsb3VkIFJPUyBSZXNvdXJjZSBTcGVjaWZpY2F0aW9uXG5leHBvcnQgeyBSb3NTbmFwc2hvdCBhcyBTbmFwc2hvdFByb3BlcnR5IH07XG5cbi8qKlxuICogUHJvcGVydGllcyBmb3IgZGVmaW5pbmcgYSBgQUxJWVVOOjpFQ1M6OlNuYXBzaG90YFxuICovXG5leHBvcnQgaW50ZXJmYWNlIFNuYXBzaG90UHJvcHMge1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgZGlza0lkOiBJbmRpY2F0ZXMgdGhlIElEIG9mIHRoZSBzcGVjaWZpZWQgZGlzay5cbiAgICAgKi9cbiAgICByZWFkb25seSBkaXNrSWQ6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGRlc2NyaXB0aW9uOiBUaGUgZGVzY3JpcHRpb24gb2YgYSBzbmFwc2hvdCBjYW4gYmUgMiB0byAyNTYgY2hhcmFjdGVycyBpbiBsZW5ndGggYW5kIGNhbm5vdCBiZWdpbiB3aXRoIGh0dHA6Ly8gb3IgaHR0cHM6Ly8uIFRoZSBkZXNjcmlwdGlvbiB3aWxsIGFwcGVhciBvbiB0aGUgY29uc29sZS4gQnkgZGVmYXVsdCwgdGhlIHZhbHVlIGlzIHplcm8uXG4gICAgICovXG4gICAgcmVhZG9ubHkgZGVzY3JpcHRpb24/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBpbnN0YW50QWNjZXNzOiBTcGVjaWZpZXMgd2hldGhlciB0byBlbmFibGUgdGhlIGluc3RhbnQgYWNjZXNzIGZlYXR1cmUuIFZhbGlkIHZhbHVlczogXG4gICAgICogdHJ1ZTogZW5hYmxlcyB0aGUgaW5zdGFudCBhY2Nlc3MgZmVhdHVyZS4gVGhpcyBmZWF0dXJlIGNhbiBiZSBlbmFibGVkIG9ubHkgZm9yIGVuaGFuY2VkIFNTRHMgKEVTU0RzKSBcbiAgICAgKiBmYWxzZTogZGlzYWJsZXMgdGhlIGluc3RhbnQgYWNjZXNzIGZlYXR1cmUuIElmIEluc3RhbnRBY2Nlc3MgaXMgc2V0IHRvIGZhbHNlLCBub3JtYWwgc25hcHNob3RzIGFyZSBjcmVhdGVkLlxuICAgICAqIERlZmF1bHQgdmFsdWU6IGZhbHNlLlxuICAgICAqIE5vdGUgVGhpcyBwYXJhbWV0ZXIgYW5kIHRoZSBDYXRlZ29yeSBwYXJhbWV0ZXIgY2Fubm90IGJlIHNwZWNpZmllZCBhdCB0aGUgc2FtZSB0aW1lLiBcbiAgICAgKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlIHRoZSBcIkRlc2NyaXB0aW9uXCIgc2VjdGlvbiBpbiB0aGlzIHRvcGljLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGluc3RhbnRBY2Nlc3M/OiBib29sZWFuIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgaW5zdGFudEFjY2Vzc1JldGVudGlvbkRheXM6IFNwZWNpZmllcyB0aGUgcmV0ZW50aW9uIHBlcmlvZCBvZiB0aGUgaW5zdGFudCBhY2Nlc3MgZmVhdHVyZS4gQWZ0ZXIgdGhlIHJldGVudGlvbiBwZXJpb2QgZW5kcywgXG4gICAgICogdGhlIHNuYXBzaG90IGlzIGF1dG9tYXRpY2FsbHkgcmVsZWFzZWQuIFRoaXMgcGFyYW1ldGVyIHRha2VzIGVmZmVjdCBvbmx5IHdoZW4gSW5zdGFudEFjY2VzcyBcbiAgICAgKiBpcyBzZXQgdG8gdHJ1ZS4gVW5pdDogZGF5cy5cbiAgICAgKiBWYWxpZCB2YWx1ZXM6IDEgdG8gNjU1MzUuIEJ5IGRlZmF1bHQsIHRoZSB2YWx1ZSBvZiBcbiAgICAgKiB0aGlzIHBhcmFtZXRlciBpcyB0aGUgc2FtZSBhcyB0aGF0IG9mIFJldGVudGlvbkRheXMuXG4gICAgICovXG4gICAgcmVhZG9ubHkgaW5zdGFudEFjY2Vzc1JldGVudGlvbkRheXM/OiBudW1iZXIgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSByZXNvdXJjZUdyb3VwSWQ6IFJlc291cmNlIGdyb3VwIGlkLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHJlc291cmNlR3JvdXBJZD86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHNuYXBzaG90TmFtZTogVGhlIG5hbWUgb2YgdGhlIHNuYXBzaG90LCBbMiwgMTI4XSBFbmdsaXNoIG9yIENoaW5lc2UgY2hhcmFjdGVycy4gSXQgbXVzdCBiZWdpbiB3aXRoIGFuIHVwcGVyY2FzZS9sb3dlcmNhc2UgbGV0dGVyIG9yIGEgQ2hpbmVzZSBjaGFyYWN0ZXIsIGFuZCBtYXkgY29udGFpbiBudW1iZXJzLCAnXycgb3IgJy0nLiBJdCBjYW5ub3QgYmVnaW4gd2l0aCBodHRwOi8vIG9yIGh0dHBzOi8vLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHNuYXBzaG90TmFtZT86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHRhZ3M6IFRhZ3MgdG8gYXR0YWNoIHRvIGluc3RhbmNlLiBNYXggc3VwcG9ydCAyMCB0YWdzIHRvIGFkZCBkdXJpbmcgY3JlYXRlIGluc3RhbmNlLiBFYWNoIHRhZyB3aXRoIHR3byBwcm9wZXJ0aWVzIEtleSBhbmQgVmFsdWUsIGFuZCBLZXkgaXMgcmVxdWlyZWQuXG4gICAgICovXG4gICAgcmVhZG9ubHkgdGFncz86IFJvc1NuYXBzaG90LlRhZ3NQcm9wZXJ0eVtdO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgdGltZW91dDogVGhlIG51bWJlciBvZiBtaW51dGVzIHRvIHdhaXQgZm9yIGNyZWF0ZSBzbmFwc2hvdC5cbiAgICAgKi9cbiAgICByZWFkb25seSB0aW1lb3V0PzogbnVtYmVyIHwgcm9zLklSZXNvbHZhYmxlO1xufVxuXG4vKipcbiAqIEEgUk9TIHJlc291cmNlIHR5cGU6ICBgQUxJWVVOOjpFQ1M6OlNuYXBzaG90YFxuICovXG5leHBvcnQgY2xhc3MgU25hcHNob3QgZXh0ZW5kcyByb3MuUmVzb3VyY2Uge1xuXG4gICAgLyoqXG4gICAgICogQSBmYWN0b3J5IG1ldGhvZCB0aGF0IGNyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgdGhpcyBjbGFzcyBmcm9tIGFuIG9iamVjdFxuICAgICAqIGNvbnRhaW5pbmcgdGhlIHByb3BlcnRpZXMgb2YgdGhpcyBST1MgcmVzb3VyY2UsIHdoaWNoIHdpbGwgYmUgYXNzaWduZWQgdG8gUk9TIHJlc291cmNlLlxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIFNuYXBzaG90SWQ6IFRoZSBzbmFwc2hvdCBJRC5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0clNuYXBzaG90SWQ6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBgQUxJWVVOOjpFQ1M6OlNuYXBzaG90YC5cbiAgICAgKlxuICAgICAqIFBhcmFtIHNjb3BlIC0gc2NvcGUgaW4gd2hpY2ggdGhpcyByZXNvdXJjZSBpcyBkZWZpbmVkXG4gICAgICogUGFyYW0gaWQgICAgLSBzY29wZWQgaWQgb2YgdGhlIHJlc291cmNlXG4gICAgICogUGFyYW0gcHJvcHMgLSByZXNvdXJjZSBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IHJvcy5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBTbmFwc2hvdFByb3BzLCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDpib29sZWFuID0gdHJ1ZSkge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQpO1xuXG4gICAgICAgIGNvbnN0IHJvc1NuYXBzaG90ID0gbmV3IFJvc1NuYXBzaG90KHRoaXMsIGlkLCAge1xuICAgICAgICAgICAgaW5zdGFudEFjY2VzczogcHJvcHMuaW5zdGFudEFjY2VzcyxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBwcm9wcy5kZXNjcmlwdGlvbixcbiAgICAgICAgICAgIHJlc291cmNlR3JvdXBJZDogcHJvcHMucmVzb3VyY2VHcm91cElkLFxuICAgICAgICAgICAgdGltZW91dDogcHJvcHMudGltZW91dCA9PT0gdW5kZWZpbmVkIHx8IHByb3BzLnRpbWVvdXQgPT09IG51bGwgPyAyMDAgOiBwcm9wcy50aW1lb3V0LFxuICAgICAgICAgICAgc25hcHNob3ROYW1lOiBwcm9wcy5zbmFwc2hvdE5hbWUsXG4gICAgICAgICAgICBpbnN0YW50QWNjZXNzUmV0ZW50aW9uRGF5czogcHJvcHMuaW5zdGFudEFjY2Vzc1JldGVudGlvbkRheXMsXG4gICAgICAgICAgICB0YWdzOiBwcm9wcy50YWdzLFxuICAgICAgICAgICAgZGlza0lkOiBwcm9wcy5kaXNrSWQsXG4gICAgICAgIH0sIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ICYmIHRoaXMuc3RhY2suZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQpO1xuICAgICAgICB0aGlzLnJlc291cmNlID0gcm9zU25hcHNob3Q7XG4gICAgICAgIHRoaXMuYXR0clNuYXBzaG90SWQgPSByb3NTbmFwc2hvdC5hdHRyU25hcHNob3RJZDtcbiAgICB9XG59XG4iXX0=