"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Disk = exports.DiskProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ecs_generated_1 = require("./ecs.generated");
Object.defineProperty(exports, "DiskProperty", { enumerable: true, get: function () { return ecs_generated_1.RosDisk; } });
/**
 * A ROS resource type:  `ALIYUN::ECS::Disk`
 */
class Disk extends ros.Resource {
    /**
     * Create a new `ALIYUN::ECS::Disk`.
     *
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosDisk = new ecs_generated_1.RosDisk(this, id, {
            burstingEnabled: props.burstingEnabled,
            description: props.description,
            kmsKeyId: props.kmsKeyId,
            resourceGroupId: props.resourceGroupId,
            zoneId: props.zoneId,
            encrypted: props.encrypted === undefined || props.encrypted === null ? false : props.encrypted,
            performanceLevel: props.performanceLevel,
            size: props.size,
            deleteAutoSnapshot: props.deleteAutoSnapshot === undefined || props.deleteAutoSnapshot === null ? false : props.deleteAutoSnapshot,
            diskCategory: props.diskCategory,
            autoSnapshotPolicyId: props.autoSnapshotPolicyId,
            storageSetPartitionNumber: props.storageSetPartitionNumber,
            diskName: props.diskName,
            provisionedIops: props.provisionedIops,
            multiAttach: props.multiAttach,
            snapshotId: props.snapshotId,
            storageSetId: props.storageSetId,
            tags: props.tags,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosDisk;
        this.attrDiskId = rosDisk.attrDiskId;
        this.attrStatus = rosDisk.attrStatus;
    }
}
exports.Disk = Disk;
//# sourceMappingURL=data:application/json;base64,