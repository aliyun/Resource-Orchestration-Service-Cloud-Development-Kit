"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Acl = exports.AclProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const kafka_generated_1 = require("./kafka.generated");
Object.defineProperty(exports, "AclProperty", { enumerable: true, get: function () { return kafka_generated_1.RosAcl; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::KAFKA::Acl`, which is used to create an access control list (ACL).
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosAcl`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-kafka-acl
 */
class Acl extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosAcl = new kafka_generated_1.RosAcl(this, id, {
            aclResourceName: props.aclResourceName,
            aclOperationTypes: props.aclOperationTypes,
            username: props.username,
            instanceId: props.instanceId,
            aclResourceType: props.aclResourceType,
            aclPermissionType: props.aclPermissionType,
            aclResourcePatternType: props.aclResourcePatternType,
            host: props.host,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosAcl;
        this.attrAclResourceType = rosAcl.attrAclResourceType;
        this.attrInstanceId = rosAcl.attrInstanceId;
        this.attrUsername = rosAcl.attrUsername;
    }
}
exports.Acl = Acl;
//# sourceMappingURL=data:application/json;base64,