"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LoadBalancer = exports.LoadBalancerProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const nlb_generated_1 = require("./nlb.generated");
Object.defineProperty(exports, "LoadBalancerProperty", { enumerable: true, get: function () { return nlb_generated_1.RosLoadBalancer; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::NLB::LoadBalancer`, which is used to create a Network Load Balancer (NLB) instance.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosLoadBalancer`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-nlb-loadbalancer
 */
class LoadBalancer extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosLoadBalancer = new nlb_generated_1.RosLoadBalancer(this, id, {
            addressIpVersion: props.addressIpVersion,
            resourceGroupId: props.resourceGroupId,
            loadBalancerBillingConfig: props.loadBalancerBillingConfig,
            zoneMappings: props.zoneMappings,
            modificationProtectionConfig: props.modificationProtectionConfig,
            crossZoneEnabled: props.crossZoneEnabled,
            loadBalancerType: props.loadBalancerType,
            loadBalancerName: props.loadBalancerName,
            deletionProtectionConfig: props.deletionProtectionConfig,
            vpcId: props.vpcId,
            trafficAffinityEnabled: props.trafficAffinityEnabled,
            bandwidthPackageId: props.bandwidthPackageId,
            addressType: props.addressType,
            tags: props.tags,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosLoadBalancer;
        this.attrAddressIpVersion = rosLoadBalancer.attrAddressIpVersion;
        this.attrAddressType = rosLoadBalancer.attrAddressType;
        this.attrDnsName = rosLoadBalancer.attrDnsName;
        this.attrLoadBalancerId = rosLoadBalancer.attrLoadBalancerId;
        this.attrLoadBalancerType = rosLoadBalancer.attrLoadBalancerType;
        this.attrVpcId = rosLoadBalancer.attrVpcId;
        this.attrZoneMappings = rosLoadBalancer.attrZoneMappings;
    }
}
exports.LoadBalancer = LoadBalancer;
//# sourceMappingURL=data:application/json;base64,