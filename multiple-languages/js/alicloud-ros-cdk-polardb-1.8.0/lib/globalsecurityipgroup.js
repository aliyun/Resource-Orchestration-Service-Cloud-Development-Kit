"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GlobalSecurityIPGroup = exports.GlobalSecurityIPGroupProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const polardb_generated_1 = require("./polardb.generated");
Object.defineProperty(exports, "GlobalSecurityIPGroupProperty", { enumerable: true, get: function () { return polardb_generated_1.RosGlobalSecurityIPGroup; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::POLARDB::GlobalSecurityIPGroup`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosGlobalSecurityIPGroup`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-polardb-globalsecurityipgroup
 */
class GlobalSecurityIPGroup extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosGlobalSecurityIPGroup = new polardb_generated_1.RosGlobalSecurityIPGroup(this, id, {
            globalIgName: props.globalIgName,
            resourceGroupId: props.resourceGroupId,
            gIpList: props.gIpList,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosGlobalSecurityIPGroup;
        this.attrGlobalSecurityGroupId = rosGlobalSecurityIPGroup.attrGlobalSecurityGroupId;
    }
}
exports.GlobalSecurityIPGroup = GlobalSecurityIPGroup;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2xvYmFsc2VjdXJpdHlpcGdyb3VwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZ2xvYmFsc2VjdXJpdHlpcGdyb3VwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDhDQUE4QztBQUM5QywyREFBK0Q7QUFFMUIsOEdBRjVCLDRDQUF3QixPQUVpQztBQXVDbEU7Ozs7R0FJRztBQUNILE1BQWEscUJBQXNCLFNBQVEsR0FBRyxDQUFDLFFBQVE7SUFXbkQ7Ozs7T0FJRztJQUNILFlBQVksS0FBb0IsRUFBRSxFQUFVLEVBQUUsS0FBaUMsRUFBRSxtQ0FBMkMsSUFBSTtRQUM1SCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ2pCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQ2IsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLGdDQUFnQyxHQUFHLGdDQUFnQyxDQUFDO1FBRXpFLE1BQU0sd0JBQXdCLEdBQUcsSUFBSSw0Q0FBd0IsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFHO1lBQ3JFLFlBQVksRUFBRSxLQUFLLENBQUMsWUFBWTtZQUNoQyxlQUFlLEVBQUUsS0FBSyxDQUFDLGVBQWU7WUFDdEMsT0FBTyxFQUFFLEtBQUssQ0FBQyxPQUFPO1NBQ3pCLEVBQUUsZ0NBQWdDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO1FBQ3BGLElBQUksQ0FBQyxRQUFRLEdBQUcsd0JBQXdCLENBQUM7UUFDekMsSUFBSSxDQUFDLHlCQUF5QixHQUFHLHdCQUF3QixDQUFDLHlCQUF5QixDQUFDO0lBQ3hGLENBQUM7Q0FDSjtBQS9CRCxzREErQkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyByb3MgZnJvbSAnQGFsaWNsb3VkL3Jvcy1jZGstY29yZSc7XG5pbXBvcnQgeyBSb3NHbG9iYWxTZWN1cml0eUlQR3JvdXAgfSBmcm9tICcuL3BvbGFyZGIuZ2VuZXJhdGVkJztcbi8vIEdlbmVyYXRlZCBmcm9tIHRoZSBBbGlDbG91ZCBST1MgUmVzb3VyY2UgU3BlY2lmaWNhdGlvblxuZXhwb3J0IHsgUm9zR2xvYmFsU2VjdXJpdHlJUEdyb3VwIGFzIEdsb2JhbFNlY3VyaXR5SVBHcm91cFByb3BlcnR5IH07XG5cbi8qKlxuICogUHJvcGVydGllcyBmb3IgZGVmaW5pbmcgYSBgR2xvYmFsU2VjdXJpdHlJUEdyb3VwYC5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvYWxpeXVuLXBvbGFyZGItZ2xvYmFsc2VjdXJpdHlpcGdyb3VwXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgR2xvYmFsU2VjdXJpdHlJUEdyb3VwUHJvcHMge1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgZ0lwTGlzdDogVGhlIElQIGFkZHJlc3NlcyBpbiB0aGUgd2hpdGVsaXN0IHRlbXBsYXRlLlxuICAgICAqIFlvdSBjYW4gY3JlYXRlIHVwIHRvIDEsMDAwIElQIGFkZHJlc3NlcyBvciBDSURSIGJsb2NrcyBmb3IgYWxsIElQIHdoaXRlbGlzdHMuXG4gICAgICovXG4gICAgcmVhZG9ubHkgZ0lwTGlzdDogQXJyYXk8c3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlPiB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGdsb2JhbElnTmFtZTogVGhlIG5hbWUgb2YgdGhlIElQIHdoaXRlbGlzdCB0ZW1wbGF0ZS4gVGhlIG5hbWUgbXVzdCBtZWV0IHRoZSBmb2xsb3dpbmcgcmVxdWlyZW1lbnRzOlxuICAgICAqIFRoZSBuYW1lIGNhbiBjb250YWluIGxvd2VyY2FzZSBsZXR0ZXJzLCBkaWdpdHMsIGFuZCB1bmRlcnNjb3JlcyAoXykuXG4gICAgICogVGhlIG5hbWUgbXVzdCBzdGFydCB3aXRoIGEgbGV0dGVyIGFuZCBlbmQgd2l0aCBhIGxldHRlciBvciBkaWdpdC5cbiAgICAgKiBUaGUgbmFtZSBtdXN0IGJlIDIgdG8gMTIwIGNoYXJhY3RlcnMgaW4gbGVuZ3RoLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGdsb2JhbElnTmFtZTogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgcmVzb3VyY2VHcm91cElkOiBUaGUgSUQgb2YgdGhlIHJlc291cmNlIGdyb3VwLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHJlc291cmNlR3JvdXBJZD86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcbn1cblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgYEdsb2JhbFNlY3VyaXR5SVBHcm91cGAuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSUdsb2JhbFNlY3VyaXR5SVBHcm91cCBleHRlbmRzIHJvcy5JUmVzb3VyY2Uge1xuICAgIHJlYWRvbmx5IHByb3BzOiBHbG9iYWxTZWN1cml0eUlQR3JvdXBQcm9wcztcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBHbG9iYWxTZWN1cml0eUdyb3VwSWQ6IFRoZSBJRCBvZiB0aGUgSVAgd2hpdGVsaXN0IHRlbXBsYXRlLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGF0dHJHbG9iYWxTZWN1cml0eUdyb3VwSWQ6IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcbn1cbi8qKlxuICogVGhpcyBjbGFzcyBlbmNhcHN1bGF0ZXMgYW5kIGV4dGVuZHMgdGhlIFJPUyByZXNvdXJjZSB0eXBlIGBBTElZVU46OlBPTEFSREI6Okdsb2JhbFNlY3VyaXR5SVBHcm91cGAuXG4gKiBATm90ZSBUaGlzIGNsYXNzIG1heSBoYXZlIHNvbWUgbmV3IGZ1bmN0aW9ucyB0byBmYWNpbGl0YXRlIGRldmVsb3BtZW50LCBzbyBpdCBpcyByZWNvbW1lbmRlZCB0byB1c2UgdGhpcyBjbGFzcyBpbnN0ZWFkIG9mIGBSb3NHbG9iYWxTZWN1cml0eUlQR3JvdXBgZm9yIGEgbW9yZSBjb252ZW5pZW50IGRldmVsb3BtZW50IGV4cGVyaWVuY2UuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2FsaXl1bi1wb2xhcmRiLWdsb2JhbHNlY3VyaXR5aXBncm91cFxuICovXG5leHBvcnQgY2xhc3MgR2xvYmFsU2VjdXJpdHlJUEdyb3VwIGV4dGVuZHMgcm9zLlJlc291cmNlIGltcGxlbWVudHMgSUdsb2JhbFNlY3VyaXR5SVBHcm91cCB7XG4gICAgcHJvdGVjdGVkIHNjb3BlOiByb3MuQ29uc3RydWN0O1xuICAgIHByb3RlY3RlZCBpZDogc3RyaW5nO1xuICAgIHB1YmxpYyByZWFkb25seSBwcm9wczogR2xvYmFsU2VjdXJpdHlJUEdyb3VwUHJvcHM7XG4gICAgcHJvdGVjdGVkIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OiBib29sZWFuO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIEdsb2JhbFNlY3VyaXR5R3JvdXBJZDogVGhlIElEIG9mIHRoZSBJUCB3aGl0ZWxpc3QgdGVtcGxhdGUuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJHbG9iYWxTZWN1cml0eUdyb3VwSWQ6IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFBhcmFtIHNjb3BlIC0gc2NvcGUgaW4gd2hpY2ggdGhpcyByZXNvdXJjZSBpcyBkZWZpbmVkXG4gICAgICogUGFyYW0gaWQgICAgLSBzY29wZWQgaWQgb2YgdGhlIHJlc291cmNlXG4gICAgICogUGFyYW0gcHJvcHMgLSByZXNvdXJjZSBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IHJvcy5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBHbG9iYWxTZWN1cml0eUlQR3JvdXBQcm9wcywgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6Ym9vbGVhbiA9IHRydWUpIHtcbiAgICAgICAgc3VwZXIoc2NvcGUsIGlkKTtcbiAgICAgICAgdGhpcy5zY29wZSA9IHNjb3BlO1xuICAgICAgICB0aGlzLmlkID0gaWQ7XG4gICAgICAgIHRoaXMucHJvcHMgPSBwcm9wcztcbiAgICAgICAgdGhpcy5lbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCA9IGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50O1xuXG4gICAgICAgIGNvbnN0IHJvc0dsb2JhbFNlY3VyaXR5SVBHcm91cCA9IG5ldyBSb3NHbG9iYWxTZWN1cml0eUlQR3JvdXAodGhpcywgaWQsICB7XG4gICAgICAgICAgICBnbG9iYWxJZ05hbWU6IHByb3BzLmdsb2JhbElnTmFtZSxcbiAgICAgICAgICAgIHJlc291cmNlR3JvdXBJZDogcHJvcHMucmVzb3VyY2VHcm91cElkLFxuICAgICAgICAgICAgZ0lwTGlzdDogcHJvcHMuZ0lwTGlzdCxcbiAgICAgICAgfSwgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgJiYgdGhpcy5zdGFjay5lbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCk7XG4gICAgICAgIHRoaXMucmVzb3VyY2UgPSByb3NHbG9iYWxTZWN1cml0eUlQR3JvdXA7XG4gICAgICAgIHRoaXMuYXR0ckdsb2JhbFNlY3VyaXR5R3JvdXBJZCA9IHJvc0dsb2JhbFNlY3VyaXR5SVBHcm91cC5hdHRyR2xvYmFsU2VjdXJpdHlHcm91cElkO1xuICAgIH1cbn1cbiJdfQ==