"use strict";
// Generated from the AliCloud ROS Resource Specification
Object.defineProperty(exports, "__esModule", { value: true });
exports.RosTGW = exports.RosInstance = void 0;
const ros = require("@alicloud/ros-cdk-core");
/**
 * Determine whether the given properties match those of a `RosInstanceProps`
 *
 * @param properties - the TypeScript properties of a `RosInstanceProps`
 *
 * @returns the result of the validation.
 */
function RosInstancePropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('ignoreExisting', ros.validateBoolean)(properties.ignoreExisting));
    errors.collect(ros.propertyValidator('intelligentLoadBalancing', ros.validateBoolean)(properties.intelligentLoadBalancing));
    errors.collect(ros.propertyValidator('autoRenew', ros.validateBoolean)(properties.autoRenew));
    if (properties.period && (typeof properties.period) !== 'object') {
        errors.collect(ros.propertyValidator('period', ros.validateAllowedValues)({
            data: properties.period,
            allowedValues: [1, 2, 3, 6],
        }));
    }
    errors.collect(ros.propertyValidator('period', ros.validateNumber)(properties.period));
    errors.collect(ros.propertyValidator('botWebProtection', ros.validateBoolean)(properties.botWebProtection));
    errors.collect(ros.propertyValidator('apiSecurity', ros.validateBoolean)(properties.apiSecurity));
    errors.collect(ros.propertyValidator('autoPay', ros.validateBoolean)(properties.autoPay));
    if (properties.trafficBillingProtectionThreshold && (typeof properties.trafficBillingProtectionThreshold) !== 'object') {
        errors.collect(ros.propertyValidator('trafficBillingProtectionThreshold', ros.validateRange)({
            data: properties.trafficBillingProtectionThreshold,
            min: 1000,
            max: 100000,
        }));
    }
    errors.collect(ros.propertyValidator('trafficBillingProtectionThreshold', ros.validateNumber)(properties.trafficBillingProtectionThreshold));
    errors.collect(ros.propertyValidator('payType', ros.requiredValidator)(properties.payType));
    if (properties.payType && (typeof properties.payType) !== 'object') {
        errors.collect(ros.propertyValidator('payType', ros.validateAllowedValues)({
            data: properties.payType,
            allowedValues: ["PayAsYouGo", "PostPaid", "PayOnDemand", "Postpaid", "PostPay", "Postpay", "POSTPAY", "POST", "Subscription", "PrePaid", "Prepaid", "PrePay", "Prepay", "PREPAY", "PRE"],
        }));
    }
    errors.collect(ros.propertyValidator('payType', ros.validateString)(properties.payType));
    if (properties.logStorage && (typeof properties.logStorage) !== 'object') {
        errors.collect(ros.propertyValidator('logStorage', ros.validateRange)({
            data: properties.logStorage,
            min: 3,
            max: 150,
        }));
    }
    errors.collect(ros.propertyValidator('logStorage', ros.validateNumber)(properties.logStorage));
    if (properties.elasticQps && (typeof properties.elasticQps) !== 'object') {
        errors.collect(ros.propertyValidator('elasticQps', ros.validateRange)({
            data: properties.elasticQps,
            min: 0,
            max: 60000,
        }));
    }
    errors.collect(ros.propertyValidator('elasticQps', ros.validateNumber)(properties.elasticQps));
    if (properties.domainsExtension && (typeof properties.domainsExtension) !== 'object') {
        errors.collect(ros.propertyValidator('domainsExtension', ros.validateRange)({
            data: properties.domainsExtension,
            min: 0,
            max: 5000,
        }));
    }
    errors.collect(ros.propertyValidator('domainsExtension', ros.validateNumber)(properties.domainsExtension));
    if (properties.wafVersion && (typeof properties.wafVersion) !== 'object') {
        errors.collect(ros.propertyValidator('wafVersion', ros.validateAllowedValues)({
            data: properties.wafVersion,
            allowedValues: ["Basic", "Pro", "Enterprise", "Ultimate"],
        }));
    }
    errors.collect(ros.propertyValidator('wafVersion', ros.validateString)(properties.wafVersion));
    if (properties.exclusiveIpAddress && (typeof properties.exclusiveIpAddress) !== 'object') {
        errors.collect(ros.propertyValidator('exclusiveIpAddress', ros.validateRange)({
            data: properties.exclusiveIpAddress,
            min: 0,
            max: 100,
        }));
    }
    errors.collect(ros.propertyValidator('exclusiveIpAddress', ros.validateNumber)(properties.exclusiveIpAddress));
    if (properties.additionalProtectionNodes && (typeof properties.additionalProtectionNodes) !== 'object') {
        errors.collect(ros.propertyValidator('additionalProtectionNodes', ros.validateRange)({
            data: properties.additionalProtectionNodes,
            min: 0,
            max: 500,
        }));
    }
    errors.collect(ros.propertyValidator('additionalProtectionNodes', ros.validateNumber)(properties.additionalProtectionNodes));
    errors.collect(ros.propertyValidator('region', ros.requiredValidator)(properties.region));
    if (properties.region && (typeof properties.region) !== 'object') {
        errors.collect(ros.propertyValidator('region', ros.validateAllowedValues)({
            data: properties.region,
            allowedValues: ["OutsideChineseMainland", "ChineseMainland"],
        }));
    }
    errors.collect(ros.propertyValidator('region', ros.validateString)(properties.region));
    if (properties.qpsExtension && (typeof properties.qpsExtension) !== 'object') {
        errors.collect(ros.propertyValidator('qpsExtension', ros.validateRange)({
            data: properties.qpsExtension,
            min: 0,
            max: 30000,
        }));
    }
    errors.collect(ros.propertyValidator('qpsExtension', ros.validateNumber)(properties.qpsExtension));
    errors.collect(ros.propertyValidator('fraudDetection', ros.validateBoolean)(properties.fraudDetection));
    errors.collect(ros.propertyValidator('botAppProtection', ros.validateBoolean)(properties.botAppProtection));
    errors.collect(ros.propertyValidator('logService', ros.validateBoolean)(properties.logService));
    if (properties.periodUnit && (typeof properties.periodUnit) !== 'object') {
        errors.collect(ros.propertyValidator('periodUnit', ros.validateAllowedValues)({
            data: properties.periodUnit,
            allowedValues: ["Month", "Year"],
        }));
    }
    errors.collect(ros.propertyValidator('periodUnit', ros.validateString)(properties.periodUnit));
    return errors.wrap('supplied properties not correct for "RosInstanceProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::WAF3::Instance` resource
 *
 * @param properties - the TypeScript properties of a `RosInstanceProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::WAF3::Instance` resource.
 */
// @ts-ignore TS6133
function rosInstancePropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosInstancePropsValidator(properties).assertSuccess();
    }
    return {
        PayType: ros.stringToRosTemplate(properties.payType),
        Region: ros.stringToRosTemplate(properties.region),
        AdditionalProtectionNodes: ros.numberToRosTemplate(properties.additionalProtectionNodes),
        ApiSecurity: ros.booleanToRosTemplate(properties.apiSecurity),
        AutoPay: ros.booleanToRosTemplate(properties.autoPay),
        AutoRenew: ros.booleanToRosTemplate(properties.autoRenew),
        BotAppProtection: ros.booleanToRosTemplate(properties.botAppProtection),
        BotWebProtection: ros.booleanToRosTemplate(properties.botWebProtection),
        DomainsExtension: ros.numberToRosTemplate(properties.domainsExtension),
        ElasticQps: ros.numberToRosTemplate(properties.elasticQps),
        ExclusiveIPAddress: ros.numberToRosTemplate(properties.exclusiveIpAddress),
        FraudDetection: ros.booleanToRosTemplate(properties.fraudDetection),
        IgnoreExisting: ros.booleanToRosTemplate(properties.ignoreExisting),
        IntelligentLoadBalancing: ros.booleanToRosTemplate(properties.intelligentLoadBalancing),
        LogService: ros.booleanToRosTemplate(properties.logService),
        LogStorage: ros.numberToRosTemplate(properties.logStorage),
        Period: ros.numberToRosTemplate(properties.period),
        PeriodUnit: ros.stringToRosTemplate(properties.periodUnit),
        QpsExtension: ros.numberToRosTemplate(properties.qpsExtension),
        TrafficBillingProtectionThreshold: ros.numberToRosTemplate(properties.trafficBillingProtectionThreshold),
        WafVersion: ros.stringToRosTemplate(properties.wafVersion),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::WAF3::Instance`, which is used to create a Web Application Firewall (WAF) 3.0 instance.
 * @Note This class does not contain additional functions, so it is recommended to use the `Instance` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-waf3-instance
 */
class RosInstance extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosInstance.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrInstanceId = this.getAtt('InstanceId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.payType = props.payType;
        this.region = props.region;
        this.additionalProtectionNodes = props.additionalProtectionNodes;
        this.apiSecurity = props.apiSecurity;
        this.autoPay = props.autoPay;
        this.autoRenew = props.autoRenew;
        this.botAppProtection = props.botAppProtection;
        this.botWebProtection = props.botWebProtection;
        this.domainsExtension = props.domainsExtension;
        this.elasticQps = props.elasticQps;
        this.exclusiveIpAddress = props.exclusiveIpAddress;
        this.fraudDetection = props.fraudDetection;
        this.ignoreExisting = props.ignoreExisting;
        this.intelligentLoadBalancing = props.intelligentLoadBalancing;
        this.logService = props.logService;
        this.logStorage = props.logStorage;
        this.period = props.period;
        this.periodUnit = props.periodUnit;
        this.qpsExtension = props.qpsExtension;
        this.trafficBillingProtectionThreshold = props.trafficBillingProtectionThreshold;
        this.wafVersion = props.wafVersion;
    }
    get rosProperties() {
        return {
            payType: this.payType,
            region: this.region,
            additionalProtectionNodes: this.additionalProtectionNodes,
            apiSecurity: this.apiSecurity,
            autoPay: this.autoPay,
            autoRenew: this.autoRenew,
            botAppProtection: this.botAppProtection,
            botWebProtection: this.botWebProtection,
            domainsExtension: this.domainsExtension,
            elasticQps: this.elasticQps,
            exclusiveIpAddress: this.exclusiveIpAddress,
            fraudDetection: this.fraudDetection,
            ignoreExisting: this.ignoreExisting,
            intelligentLoadBalancing: this.intelligentLoadBalancing,
            logService: this.logService,
            logStorage: this.logStorage,
            period: this.period,
            periodUnit: this.periodUnit,
            qpsExtension: this.qpsExtension,
            trafficBillingProtectionThreshold: this.trafficBillingProtectionThreshold,
            wafVersion: this.wafVersion,
        };
    }
    renderProperties(props) {
        return rosInstancePropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosInstance = RosInstance;
/**
 * The resource type name for this resource class.
 */
RosInstance.ROS_RESOURCE_TYPE_NAME = "ALIYUN::WAF3::Instance";
/**
 * Determine whether the given properties match those of a `RosTGWProps`
 *
 * @param properties - the TypeScript properties of a `RosTGWProps`
 *
 * @returns the result of the validation.
 */
function RosTGWPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('resourceGroupId', ros.validateString)(properties.resourceGroupId));
    errors.collect(ros.propertyValidator('instanceId', ros.requiredValidator)(properties.instanceId));
    errors.collect(ros.propertyValidator('instanceId', ros.validateString)(properties.instanceId));
    errors.collect(ros.propertyValidator('listen', ros.requiredValidator)(properties.listen));
    errors.collect(ros.propertyValidator('listen', RosTGW_ListenPropertyValidator)(properties.listen));
    errors.collect(ros.propertyValidator('redirect', RosTGW_RedirectPropertyValidator)(properties.redirect));
    return errors.wrap('supplied properties not correct for "RosTGWProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::WAF3::TGW` resource
 *
 * @param properties - the TypeScript properties of a `RosTGWProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::WAF3::TGW` resource.
 */
// @ts-ignore TS6133
function rosTGWPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosTGWPropsValidator(properties).assertSuccess();
    }
    return {
        InstanceId: ros.stringToRosTemplate(properties.instanceId),
        Listen: rosTGWListenPropertyToRosTemplate(properties.listen),
        Redirect: rosTGWRedirectPropertyToRosTemplate(properties.redirect),
        ResourceGroupId: ros.stringToRosTemplate(properties.resourceGroupId),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::WAF3::TGW`.
 * @Note This class does not contain additional functions, so it is recommended to use the `TGW` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-waf3-tgw
 */
class RosTGW extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosTGW.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrInstanceId = this.getAtt('InstanceId');
        this.attrPort = this.getAtt('Port');
        this.attrResourceProduct = this.getAtt('ResourceProduct');
        this.attrTgwId = this.getAtt('TgwId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.instanceId = props.instanceId;
        this.listen = props.listen;
        this.redirect = props.redirect;
        this.resourceGroupId = props.resourceGroupId;
    }
    get rosProperties() {
        return {
            instanceId: this.instanceId,
            listen: this.listen,
            redirect: this.redirect,
            resourceGroupId: this.resourceGroupId,
        };
    }
    renderProperties(props) {
        return rosTGWPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosTGW = RosTGW;
/**
 * The resource type name for this resource class.
 */
RosTGW.ROS_RESOURCE_TYPE_NAME = "ALIYUN::WAF3::TGW";
/**
 * Determine whether the given properties match those of a `CertificatesProperty`
 *
 * @param properties - the TypeScript properties of a `CertificatesProperty`
 *
 * @returns the result of the validation.
 */
function RosTGW_CertificatesPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    if (properties.appliedType && (typeof properties.appliedType) !== 'object') {
        errors.collect(ros.propertyValidator('appliedType', ros.validateAllowedValues)({
            data: properties.appliedType,
            allowedValues: ["default", "extension"],
        }));
    }
    errors.collect(ros.propertyValidator('appliedType', ros.validateString)(properties.appliedType));
    errors.collect(ros.propertyValidator('certificateId', ros.validateString)(properties.certificateId));
    return errors.wrap('supplied properties not correct for "CertificatesProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::WAF3::TGW.Certificates` resource
 *
 * @param properties - the TypeScript properties of a `CertificatesProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::WAF3::TGW.Certificates` resource.
 */
// @ts-ignore TS6133
function rosTGWCertificatesPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosTGW_CertificatesPropertyValidator(properties).assertSuccess();
    return {
        AppliedType: ros.stringToRosTemplate(properties.appliedType),
        CertificateId: ros.stringToRosTemplate(properties.certificateId),
    };
}
/**
 * Determine whether the given properties match those of a `ListenProperty`
 *
 * @param properties - the TypeScript properties of a `ListenProperty`
 *
 * @returns the result of the validation.
 */
function RosTGW_ListenPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    if (properties.customCiphers && (Array.isArray(properties.customCiphers) || (typeof properties.customCiphers) === 'string')) {
        errors.collect(ros.propertyValidator('customCiphers', ros.validateLength)({
            data: properties.customCiphers.length,
            min: 0,
            max: 5,
        }));
    }
    errors.collect(ros.propertyValidator('customCiphers', ros.listValidator(ros.validateAny))(properties.customCiphers));
    if (properties.tlsVersion && (typeof properties.tlsVersion) !== 'object') {
        errors.collect(ros.propertyValidator('tlsVersion', ros.validateAllowedValues)({
            data: properties.tlsVersion,
            allowedValues: ["tlsv1", "tlsv1.1", "tlsv1.2"],
        }));
    }
    errors.collect(ros.propertyValidator('tlsVersion', ros.validateString)(properties.tlsVersion));
    errors.collect(ros.propertyValidator('http2Enabled', ros.validateBoolean)(properties.http2Enabled));
    errors.collect(ros.propertyValidator('cipherSuite', ros.validateNumber)(properties.cipherSuite));
    errors.collect(ros.propertyValidator('enableTlSv3', ros.validateBoolean)(properties.enableTlSv3));
    errors.collect(ros.propertyValidator('port', ros.requiredValidator)(properties.port));
    errors.collect(ros.propertyValidator('port', ros.validateNumber)(properties.port));
    errors.collect(ros.propertyValidator('resourceProduct', ros.requiredValidator)(properties.resourceProduct));
    errors.collect(ros.propertyValidator('resourceProduct', ros.validateString)(properties.resourceProduct));
    if (properties.certificates && (Array.isArray(properties.certificates) || (typeof properties.certificates) === 'string')) {
        errors.collect(ros.propertyValidator('certificates', ros.validateLength)({
            data: properties.certificates.length,
            min: 0,
            max: 10,
        }));
    }
    errors.collect(ros.propertyValidator('certificates', ros.listValidator(RosTGW_CertificatesPropertyValidator))(properties.certificates));
    errors.collect(ros.propertyValidator('protocol', ros.requiredValidator)(properties.protocol));
    errors.collect(ros.propertyValidator('protocol', ros.validateString)(properties.protocol));
    errors.collect(ros.propertyValidator('resourceInstanceId', ros.requiredValidator)(properties.resourceInstanceId));
    errors.collect(ros.propertyValidator('resourceInstanceId', ros.validateString)(properties.resourceInstanceId));
    return errors.wrap('supplied properties not correct for "ListenProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::WAF3::TGW.Listen` resource
 *
 * @param properties - the TypeScript properties of a `ListenProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::WAF3::TGW.Listen` resource.
 */
// @ts-ignore TS6133
function rosTGWListenPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosTGW_ListenPropertyValidator(properties).assertSuccess();
    return {
        CustomCiphers: ros.listMapper(ros.objectToRosTemplate)(properties.customCiphers),
        TLSVersion: ros.stringToRosTemplate(properties.tlsVersion),
        Http2Enabled: ros.booleanToRosTemplate(properties.http2Enabled),
        CipherSuite: ros.numberToRosTemplate(properties.cipherSuite),
        EnableTLSv3: ros.booleanToRosTemplate(properties.enableTlSv3),
        Port: ros.numberToRosTemplate(properties.port),
        ResourceProduct: ros.stringToRosTemplate(properties.resourceProduct),
        Certificates: ros.listMapper(rosTGWCertificatesPropertyToRosTemplate)(properties.certificates),
        Protocol: ros.stringToRosTemplate(properties.protocol),
        ResourceInstanceId: ros.stringToRosTemplate(properties.resourceInstanceId),
    };
}
/**
 * Determine whether the given properties match those of a `RedirectProperty`
 *
 * @param properties - the TypeScript properties of a `RedirectProperty`
 *
 * @returns the result of the validation.
 */
function RosTGW_RedirectPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    if (properties.xffHeaders && (Array.isArray(properties.xffHeaders) || (typeof properties.xffHeaders) === 'string')) {
        errors.collect(ros.propertyValidator('xffHeaders', ros.validateLength)({
            data: properties.xffHeaders.length,
            min: 0,
            max: 20,
        }));
    }
    errors.collect(ros.propertyValidator('xffHeaders', ros.listValidator(ros.validateAny))(properties.xffHeaders));
    if (properties.writeTimeout && (typeof properties.writeTimeout) !== 'object') {
        errors.collect(ros.propertyValidator('writeTimeout', ros.validateRange)({
            data: properties.writeTimeout,
            min: 1,
            max: 3600,
        }));
    }
    errors.collect(ros.propertyValidator('writeTimeout', ros.validateNumber)(properties.writeTimeout));
    if (properties.xffHeaderMode && (typeof properties.xffHeaderMode) !== 'object') {
        errors.collect(ros.propertyValidator('xffHeaderMode', ros.validateAllowedValues)({
            data: properties.xffHeaderMode,
            allowedValues: [0, 1, 2],
        }));
    }
    errors.collect(ros.propertyValidator('xffHeaderMode', ros.validateNumber)(properties.xffHeaderMode));
    errors.collect(ros.propertyValidator('keepalive', ros.validateBoolean)(properties.keepalive));
    if (properties.requestHeaders && (Array.isArray(properties.requestHeaders) || (typeof properties.requestHeaders) === 'string')) {
        errors.collect(ros.propertyValidator('requestHeaders', ros.validateLength)({
            data: properties.requestHeaders.length,
            min: 0,
            max: 5,
        }));
    }
    errors.collect(ros.propertyValidator('requestHeaders', ros.listValidator(RosTGW_RequestHeadersPropertyValidator))(properties.requestHeaders));
    if (properties.keepaliveRequests && (typeof properties.keepaliveRequests) !== 'object') {
        errors.collect(ros.propertyValidator('keepaliveRequests', ros.validateRange)({
            data: properties.keepaliveRequests,
            min: 60,
            max: 1000,
        }));
    }
    errors.collect(ros.propertyValidator('keepaliveRequests', ros.validateNumber)(properties.keepaliveRequests));
    if (properties.keepaliveTimeout && (typeof properties.keepaliveTimeout) !== 'object') {
        errors.collect(ros.propertyValidator('keepaliveTimeout', ros.validateRange)({
            data: properties.keepaliveTimeout,
            min: 1,
            max: 60,
        }));
    }
    errors.collect(ros.propertyValidator('keepaliveTimeout', ros.validateNumber)(properties.keepaliveTimeout));
    if (properties.readTimeout && (typeof properties.readTimeout) !== 'object') {
        errors.collect(ros.propertyValidator('readTimeout', ros.validateRange)({
            data: properties.readTimeout,
            min: 1,
            max: 3600,
        }));
    }
    errors.collect(ros.propertyValidator('readTimeout', ros.validateNumber)(properties.readTimeout));
    errors.collect(ros.propertyValidator('xffProto', ros.validateBoolean)(properties.xffProto));
    return errors.wrap('supplied properties not correct for "RedirectProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::WAF3::TGW.Redirect` resource
 *
 * @param properties - the TypeScript properties of a `RedirectProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::WAF3::TGW.Redirect` resource.
 */
// @ts-ignore TS6133
function rosTGWRedirectPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosTGW_RedirectPropertyValidator(properties).assertSuccess();
    return {
        XffHeaders: ros.listMapper(ros.objectToRosTemplate)(properties.xffHeaders),
        WriteTimeout: ros.numberToRosTemplate(properties.writeTimeout),
        XffHeaderMode: ros.numberToRosTemplate(properties.xffHeaderMode),
        Keepalive: ros.booleanToRosTemplate(properties.keepalive),
        RequestHeaders: ros.listMapper(rosTGWRequestHeadersPropertyToRosTemplate)(properties.requestHeaders),
        KeepaliveRequests: ros.numberToRosTemplate(properties.keepaliveRequests),
        KeepaliveTimeout: ros.numberToRosTemplate(properties.keepaliveTimeout),
        ReadTimeout: ros.numberToRosTemplate(properties.readTimeout),
        XffProto: ros.booleanToRosTemplate(properties.xffProto),
    };
}
/**
 * Determine whether the given properties match those of a `RequestHeadersProperty`
 *
 * @param properties - the TypeScript properties of a `RequestHeadersProperty`
 *
 * @returns the result of the validation.
 */
function RosTGW_RequestHeadersPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('value', ros.validateString)(properties.value));
    errors.collect(ros.propertyValidator('key', ros.validateString)(properties.key));
    return errors.wrap('supplied properties not correct for "RequestHeadersProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::WAF3::TGW.RequestHeaders` resource
 *
 * @param properties - the TypeScript properties of a `RequestHeadersProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::WAF3::TGW.RequestHeaders` resource.
 */
// @ts-ignore TS6133
function rosTGWRequestHeadersPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosTGW_RequestHeadersPropertyValidator(properties).assertSuccess();
    return {
        Value: ros.stringToRosTemplate(properties.value),
        Key: ros.stringToRosTemplate(properties.key),
    };
}
//# sourceMappingURL=data:application/json;base64,