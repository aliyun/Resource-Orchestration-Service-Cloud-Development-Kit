"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VpcIpv6CidrAllocation = exports.VpcIpv6CidrAllocationProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const vpc_generated_1 = require("./vpc.generated");
Object.defineProperty(exports, "VpcIpv6CidrAllocationProperty", { enumerable: true, get: function () { return vpc_generated_1.RosVpcIpv6CidrAllocation; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::VPC::VpcIpv6CidrAllocation`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosVpcIpv6CidrAllocation`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-vpc-vpcipv6cidrallocation
 */
class VpcIpv6CidrAllocation extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props = {}, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosVpcIpv6CidrAllocation = new vpc_generated_1.RosVpcIpv6CidrAllocation(this, id, {
            ipv6Isp: props.ipv6Isp,
            addressPoolType: props.addressPoolType,
            ipv6CidrBlock: props.ipv6CidrBlock,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosVpcIpv6CidrAllocation;
        this.attrIpv6CidrBlock = rosVpcIpv6CidrAllocation.attrIpv6CidrBlock;
    }
}
exports.VpcIpv6CidrAllocation = VpcIpv6CidrAllocation;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidnBjaXB2NmNpZHJhbGxvY2F0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidnBjaXB2NmNpZHJhbGxvY2F0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDhDQUE4QztBQUM5QyxtREFBMkQ7QUFFdEIsOEdBRjVCLHdDQUF3QixPQUVpQztBQW9DbEU7Ozs7R0FJRztBQUNILE1BQWEscUJBQXNCLFNBQVEsR0FBRyxDQUFDLFFBQVE7SUFXbkQ7Ozs7T0FJRztJQUNILFlBQVksS0FBb0IsRUFBRSxFQUFVLEVBQUUsUUFBb0MsRUFBRSxFQUFFLG1DQUEyQyxJQUFJO1FBQ2pJLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDakIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUM7UUFDYixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsZ0NBQWdDLEdBQUcsZ0NBQWdDLENBQUM7UUFFekUsTUFBTSx3QkFBd0IsR0FBRyxJQUFJLHdDQUF3QixDQUFDLElBQUksRUFBRSxFQUFFLEVBQUc7WUFDckUsT0FBTyxFQUFFLEtBQUssQ0FBQyxPQUFPO1lBQ3RCLGVBQWUsRUFBRSxLQUFLLENBQUMsZUFBZTtZQUN0QyxhQUFhLEVBQUUsS0FBSyxDQUFDLGFBQWE7U0FDckMsRUFBRSxnQ0FBZ0MsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7UUFDcEYsSUFBSSxDQUFDLFFBQVEsR0FBRyx3QkFBd0IsQ0FBQztRQUN6QyxJQUFJLENBQUMsaUJBQWlCLEdBQUcsd0JBQXdCLENBQUMsaUJBQWlCLENBQUM7SUFDeEUsQ0FBQztDQUNKO0FBL0JELHNEQStCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHJvcyBmcm9tICdAYWxpY2xvdWQvcm9zLWNkay1jb3JlJztcbmltcG9ydCB7IFJvc1ZwY0lwdjZDaWRyQWxsb2NhdGlvbiB9IGZyb20gJy4vdnBjLmdlbmVyYXRlZCc7XG4vLyBHZW5lcmF0ZWQgZnJvbSB0aGUgQWxpQ2xvdWQgUk9TIFJlc291cmNlIFNwZWNpZmljYXRpb25cbmV4cG9ydCB7IFJvc1ZwY0lwdjZDaWRyQWxsb2NhdGlvbiBhcyBWcGNJcHY2Q2lkckFsbG9jYXRpb25Qcm9wZXJ0eSB9O1xuXG4vKipcbiAqIFByb3BlcnRpZXMgZm9yIGRlZmluaW5nIGEgYFZwY0lwdjZDaWRyQWxsb2NhdGlvbmAuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2FsaXl1bi12cGMtdnBjaXB2NmNpZHJhbGxvY2F0aW9uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVnBjSXB2NkNpZHJBbGxvY2F0aW9uUHJvcHMge1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgYWRkcmVzc1Bvb2xUeXBlOiBUaGUgdHlwZSBvZiB0aGUgSVB2NiBhZGRyZXNzIHBvb2wuIFNldCB0aGUgdmFsdWUgdG8gY3VzdG9tLlxuICAgICAqIE5vdGUgVGhpcyBwYXJhbWV0ZXIgaXMgcmVxdWlyZWQuXG4gICAgICovXG4gICAgcmVhZG9ubHkgYWRkcmVzc1Bvb2xUeXBlPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgaXB2NkNpZHJCbG9jazogVGhlIElQdjYgQ0lEUiBibG9jayB0aGF0IHlvdSB3YW50IHRvIHJlc2VydmUuXG4gICAgICovXG4gICAgcmVhZG9ubHkgaXB2NkNpZHJCbG9jaz86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGlwdjZJc3A6IFRoZSB0eXBlIG9mIElQdjYgQ0lEUiBibG9jay4gVmFsaWQgdmFsdWVzOlxuICAgICAqIEJHUCAoZGVmYXVsdClcbiAgICAgKiBCR1BfSW50ZXJuYXRpb25hbFxuICAgICAqIENoaW5hTW9iaWxlXG4gICAgICogQ2hpbmFVbmljb21cbiAgICAgKiBDaGluYVRlbGVjb21cbiAgICAgKiBDaGluYU1vYmlsZV9MMlxuICAgICAqIENoaW5hVW5pY29tX0wyXG4gICAgICogQ2hpbmFUZWxlY29tX0wyXG4gICAgICogTm90ZVxuICAgICAqIElmIHlvdXIgQWxpYmFiYSBDbG91ZCBhY2NvdW50IGlzIGFsbG93ZWQgdG8gdXNlIHNpbmdsZS1JU1AgYmFuZHdpZHRoLCB2YWxpZCB2YWx1ZXMgYXJlOiBDaGluYVRlbGVjb20sIENoaW5hVW5pY29tLCBhbmQgQ2hpbmFNb2JpbGUuXG4gICAgICogWW91IGNhbiByZXNlcnZlIG9ubHkgb25lIElQdjYgQ0lEUiBibG9jayBvZiBlYWNoIHR5cGUuIEFmdGVyIGEgcmVzZXJ2ZWQgSVB2NiBDSURSIGJsb2NrIG9mIGEgdHlwZSBpcyBhbGxvY2F0ZWQgdG8gYSBWUEMsIHlvdSBjYW4gcmVzZXJ2ZSBhbm90aGVyIElQdjYgQ0lEUiBvZiB0aGUgdHlwZS5cbiAgICAgKi9cbiAgICByZWFkb25seSBpcHY2SXNwPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xufVxuXG4vKipcbiAqIFRoaXMgY2xhc3MgZW5jYXBzdWxhdGVzIGFuZCBleHRlbmRzIHRoZSBST1MgcmVzb3VyY2UgdHlwZSBgQUxJWVVOOjpWUEM6OlZwY0lwdjZDaWRyQWxsb2NhdGlvbmAuXG4gKiBATm90ZSBUaGlzIGNsYXNzIG1heSBoYXZlIHNvbWUgbmV3IGZ1bmN0aW9ucyB0byBmYWNpbGl0YXRlIGRldmVsb3BtZW50LCBzbyBpdCBpcyByZWNvbW1lbmRlZCB0byB1c2UgdGhpcyBjbGFzcyBpbnN0ZWFkIG9mIGBSb3NWcGNJcHY2Q2lkckFsbG9jYXRpb25gZm9yIGEgbW9yZSBjb252ZW5pZW50IGRldmVsb3BtZW50IGV4cGVyaWVuY2UuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2FsaXl1bi12cGMtdnBjaXB2NmNpZHJhbGxvY2F0aW9uXG4gKi9cbmV4cG9ydCBjbGFzcyBWcGNJcHY2Q2lkckFsbG9jYXRpb24gZXh0ZW5kcyByb3MuUmVzb3VyY2Uge1xuICAgIHByb3RlY3RlZCBzY29wZTogcm9zLkNvbnN0cnVjdDtcbiAgICBwcm90ZWN0ZWQgaWQ6IHN0cmluZztcbiAgICBwcm90ZWN0ZWQgcHJvcHM6IFZwY0lwdjZDaWRyQWxsb2NhdGlvblByb3BzO1xuICAgIHByb3RlY3RlZCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBJcHY2Q2lkckJsb2NrOiBUaGUgSVB2NiBDSURSIGJsb2NrIHRoYXQgaXMgcmVzZXJ2ZWQuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJJcHY2Q2lkckJsb2NrOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQYXJhbSBzY29wZSAtIHNjb3BlIGluIHdoaWNoIHRoaXMgcmVzb3VyY2UgaXMgZGVmaW5lZFxuICAgICAqIFBhcmFtIGlkICAgIC0gc2NvcGVkIGlkIG9mIHRoZSByZXNvdXJjZVxuICAgICAqIFBhcmFtIHByb3BzIC0gcmVzb3VyY2UgcHJvcGVydGllc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiByb3MuQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogVnBjSXB2NkNpZHJBbGxvY2F0aW9uUHJvcHMgPSB7fSwgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6Ym9vbGVhbiA9IHRydWUpIHtcbiAgICAgICAgc3VwZXIoc2NvcGUsIGlkKTtcbiAgICAgICAgdGhpcy5zY29wZSA9IHNjb3BlO1xuICAgICAgICB0aGlzLmlkID0gaWQ7XG4gICAgICAgIHRoaXMucHJvcHMgPSBwcm9wcztcbiAgICAgICAgdGhpcy5lbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCA9IGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50O1xuXG4gICAgICAgIGNvbnN0IHJvc1ZwY0lwdjZDaWRyQWxsb2NhdGlvbiA9IG5ldyBSb3NWcGNJcHY2Q2lkckFsbG9jYXRpb24odGhpcywgaWQsICB7XG4gICAgICAgICAgICBpcHY2SXNwOiBwcm9wcy5pcHY2SXNwLFxuICAgICAgICAgICAgYWRkcmVzc1Bvb2xUeXBlOiBwcm9wcy5hZGRyZXNzUG9vbFR5cGUsXG4gICAgICAgICAgICBpcHY2Q2lkckJsb2NrOiBwcm9wcy5pcHY2Q2lkckJsb2NrLFxuICAgICAgICB9LCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCAmJiB0aGlzLnN0YWNrLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50KTtcbiAgICAgICAgdGhpcy5yZXNvdXJjZSA9IHJvc1ZwY0lwdjZDaWRyQWxsb2NhdGlvbjtcbiAgICAgICAgdGhpcy5hdHRySXB2NkNpZHJCbG9jayA9IHJvc1ZwY0lwdjZDaWRyQWxsb2NhdGlvbi5hdHRySXB2NkNpZHJCbG9jaztcbiAgICB9XG59XG4iXX0=