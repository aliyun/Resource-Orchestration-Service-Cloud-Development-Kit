"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SslVpnServer = exports.SslVpnServerProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const vpc_generated_1 = require("./vpc.generated");
Object.defineProperty(exports, "SslVpnServerProperty", { enumerable: true, get: function () { return vpc_generated_1.RosSslVpnServer; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::VPC::SslVpnServer`, which is used to create an SSL-VPN server.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosSslVpnServer`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-vpc-sslvpnserver
 */
class SslVpnServer extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosSslVpnServer = new vpc_generated_1.RosSslVpnServer(this, id, {
            compress: props.compress === undefined || props.compress === null ? false : props.compress,
            localSubnet: props.localSubnet,
            clientIpPool: props.clientIpPool,
            iDaaSInstanceId: props.iDaaSInstanceId,
            iDaaSApplicationId: props.iDaaSApplicationId,
            proto: props.proto === undefined || props.proto === null ? 'UDP' : props.proto,
            vpnGatewayId: props.vpnGatewayId,
            enableMultiFactorAuth: props.enableMultiFactorAuth === undefined || props.enableMultiFactorAuth === null ? false : props.enableMultiFactorAuth,
            port: props.port === undefined || props.port === null ? 1194 : props.port,
            iDaaSRegionId: props.iDaaSRegionId,
            cipher: props.cipher === undefined || props.cipher === null ? 'AES-128-CBC' : props.cipher,
            name: props.name,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosSslVpnServer;
        this.attrSslVpnServerId = rosSslVpnServer.attrSslVpnServerId;
    }
}
exports.SslVpnServer = SslVpnServer;
//# sourceMappingURL=data:application/json;base64,