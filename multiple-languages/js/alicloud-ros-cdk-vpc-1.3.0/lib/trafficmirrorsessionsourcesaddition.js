"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TrafficMirrorSessionSourcesAddition = exports.TrafficMirrorSessionSourcesAdditionProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const vpc_generated_1 = require("./vpc.generated");
Object.defineProperty(exports, "TrafficMirrorSessionSourcesAdditionProperty", { enumerable: true, get: function () { return vpc_generated_1.RosTrafficMirrorSessionSourcesAddition; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::VPC::TrafficMirrorSessionSourcesAddition`, which is used to add traffic mirror sources to traffic mirror sessions.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosTrafficMirrorSessionSourcesAddition`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-vpc-trafficmirrorsessionsourcesaddition
 */
class TrafficMirrorSessionSourcesAddition extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosTrafficMirrorSessionSourcesAddition = new vpc_generated_1.RosTrafficMirrorSessionSourcesAddition(this, id, {
            trafficMirrorSourceIds: props.trafficMirrorSourceIds,
            trafficMirrorSessionId: props.trafficMirrorSessionId,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosTrafficMirrorSessionSourcesAddition;
    }
}
exports.TrafficMirrorSessionSourcesAddition = TrafficMirrorSessionSourcesAddition;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhZmZpY21pcnJvcnNlc3Npb25zb3VyY2VzYWRkaXRpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ0cmFmZmljbWlycm9yc2Vzc2lvbnNvdXJjZXNhZGRpdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw4Q0FBOEM7QUFDOUMsbURBQXlFO0FBRXRCLDRIQUYxQyxzREFBc0MsT0FFK0M7QUFtQjlGOzs7O0dBSUc7QUFDSCxNQUFhLG1DQUFvQyxTQUFRLEdBQUcsQ0FBQyxRQUFRO0lBTWpFOzs7O09BSUc7SUFDSCxZQUFZLEtBQW9CLEVBQUUsRUFBVSxFQUFFLEtBQStDLEVBQUUsbUNBQTJDLElBQUk7UUFDMUksS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNqQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUNiLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxnQ0FBZ0MsR0FBRyxnQ0FBZ0MsQ0FBQztRQUV6RSxNQUFNLHNDQUFzQyxHQUFHLElBQUksc0RBQXNDLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRztZQUNqRyxzQkFBc0IsRUFBRSxLQUFLLENBQUMsc0JBQXNCO1lBQ3BELHNCQUFzQixFQUFFLEtBQUssQ0FBQyxzQkFBc0I7U0FDdkQsRUFBRSxnQ0FBZ0MsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7UUFDcEYsSUFBSSxDQUFDLFFBQVEsR0FBRyxzQ0FBc0MsQ0FBQztJQUMzRCxDQUFDO0NBQ0o7QUF4QkQsa0ZBd0JDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcm9zIGZyb20gJ0BhbGljbG91ZC9yb3MtY2RrLWNvcmUnO1xuaW1wb3J0IHsgUm9zVHJhZmZpY01pcnJvclNlc3Npb25Tb3VyY2VzQWRkaXRpb24gfSBmcm9tICcuL3ZwYy5nZW5lcmF0ZWQnO1xuLy8gR2VuZXJhdGVkIGZyb20gdGhlIEFsaUNsb3VkIFJPUyBSZXNvdXJjZSBTcGVjaWZpY2F0aW9uXG5leHBvcnQgeyBSb3NUcmFmZmljTWlycm9yU2Vzc2lvblNvdXJjZXNBZGRpdGlvbiBhcyBUcmFmZmljTWlycm9yU2Vzc2lvblNvdXJjZXNBZGRpdGlvblByb3BlcnR5IH07XG5cbi8qKlxuICogUHJvcGVydGllcyBmb3IgZGVmaW5pbmcgYSBgVHJhZmZpY01pcnJvclNlc3Npb25Tb3VyY2VzQWRkaXRpb25gLlxuICogU2VlIGh0dHBzOi8vd3d3LmFsaWJhYmFjbG91ZC5jb20vaGVscC9yb3MvZGV2ZWxvcGVyLXJlZmVyZW5jZS9hbGl5dW4tdnBjLXRyYWZmaWNtaXJyb3JzZXNzaW9uc291cmNlc2FkZGl0aW9uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVHJhZmZpY01pcnJvclNlc3Npb25Tb3VyY2VzQWRkaXRpb25Qcm9wcyB7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSB0cmFmZmljTWlycm9yU2Vzc2lvbklkOiBUaGUgSUQgb2YgdGhlIHRyYWZmaWMgbWlycm9yIHNlc3Npb24uXG4gICAgICovXG4gICAgcmVhZG9ubHkgdHJhZmZpY01pcnJvclNlc3Npb25JZDogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgdHJhZmZpY01pcnJvclNvdXJjZUlkczogdW5kZWZpbmVkXG4gICAgICovXG4gICAgcmVhZG9ubHkgdHJhZmZpY01pcnJvclNvdXJjZUlkczogQXJyYXk8c3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlPiB8IHJvcy5JUmVzb2x2YWJsZTtcbn1cblxuLyoqXG4gKiBUaGlzIGNsYXNzIGVuY2Fwc3VsYXRlcyBhbmQgZXh0ZW5kcyB0aGUgUk9TIHJlc291cmNlIHR5cGUgYEFMSVlVTjo6VlBDOjpUcmFmZmljTWlycm9yU2Vzc2lvblNvdXJjZXNBZGRpdGlvbmAsIHdoaWNoIGlzIHVzZWQgdG8gYWRkIHRyYWZmaWMgbWlycm9yIHNvdXJjZXMgdG8gdHJhZmZpYyBtaXJyb3Igc2Vzc2lvbnMuXG4gKiBATm90ZSBUaGlzIGNsYXNzIG1heSBoYXZlIHNvbWUgbmV3IGZ1bmN0aW9ucyB0byBmYWNpbGl0YXRlIGRldmVsb3BtZW50LCBzbyBpdCBpcyByZWNvbW1lbmRlZCB0byB1c2UgdGhpcyBjbGFzcyBpbnN0ZWFkIG9mIGBSb3NUcmFmZmljTWlycm9yU2Vzc2lvblNvdXJjZXNBZGRpdGlvbmBmb3IgYSBtb3JlIGNvbnZlbmllbnQgZGV2ZWxvcG1lbnQgZXhwZXJpZW5jZS5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvYWxpeXVuLXZwYy10cmFmZmljbWlycm9yc2Vzc2lvbnNvdXJjZXNhZGRpdGlvblxuICovXG5leHBvcnQgY2xhc3MgVHJhZmZpY01pcnJvclNlc3Npb25Tb3VyY2VzQWRkaXRpb24gZXh0ZW5kcyByb3MuUmVzb3VyY2Uge1xuICAgIHByb3RlY3RlZCBzY29wZTogcm9zLkNvbnN0cnVjdDtcbiAgICBwcm90ZWN0ZWQgaWQ6IHN0cmluZztcbiAgICBwcm90ZWN0ZWQgcHJvcHM6IFRyYWZmaWNNaXJyb3JTZXNzaW9uU291cmNlc0FkZGl0aW9uUHJvcHM7XG4gICAgcHJvdGVjdGVkIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OiBib29sZWFuO1xuXG4gICAgLyoqXG4gICAgICogUGFyYW0gc2NvcGUgLSBzY29wZSBpbiB3aGljaCB0aGlzIHJlc291cmNlIGlzIGRlZmluZWRcbiAgICAgKiBQYXJhbSBpZCAgICAtIHNjb3BlZCBpZCBvZiB0aGUgcmVzb3VyY2VcbiAgICAgKiBQYXJhbSBwcm9wcyAtIHJlc291cmNlIHByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihzY29wZTogcm9zLkNvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IFRyYWZmaWNNaXJyb3JTZXNzaW9uU291cmNlc0FkZGl0aW9uUHJvcHMsIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OmJvb2xlYW4gPSB0cnVlKSB7XG4gICAgICAgIHN1cGVyKHNjb3BlLCBpZCk7XG4gICAgICAgIHRoaXMuc2NvcGUgPSBzY29wZTtcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xuICAgICAgICB0aGlzLnByb3BzID0gcHJvcHM7XG4gICAgICAgIHRoaXMuZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgPSBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDtcblxuICAgICAgICBjb25zdCByb3NUcmFmZmljTWlycm9yU2Vzc2lvblNvdXJjZXNBZGRpdGlvbiA9IG5ldyBSb3NUcmFmZmljTWlycm9yU2Vzc2lvblNvdXJjZXNBZGRpdGlvbih0aGlzLCBpZCwgIHtcbiAgICAgICAgICAgIHRyYWZmaWNNaXJyb3JTb3VyY2VJZHM6IHByb3BzLnRyYWZmaWNNaXJyb3JTb3VyY2VJZHMsXG4gICAgICAgICAgICB0cmFmZmljTWlycm9yU2Vzc2lvbklkOiBwcm9wcy50cmFmZmljTWlycm9yU2Vzc2lvbklkLFxuICAgICAgICB9LCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCAmJiB0aGlzLnN0YWNrLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50KTtcbiAgICAgICAgdGhpcy5yZXNvdXJjZSA9IHJvc1RyYWZmaWNNaXJyb3JTZXNzaW9uU291cmNlc0FkZGl0aW9uO1xuICAgIH1cbn1cbiJdfQ==