"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InstanceVpcEndpointLinkedVpc = exports.InstanceVpcEndpointLinkedVpcProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const cr_generated_1 = require("./cr.generated");
Object.defineProperty(exports, "InstanceVpcEndpointLinkedVpcProperty", { enumerable: true, get: function () { return cr_generated_1.RosInstanceVpcEndpointLinkedVpc; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::CR::InstanceVpcEndpointLinkedVpc`, which is used to associate a virtual private cloud (VPC) with a Container Registry instance.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosInstanceVpcEndpointLinkedVpc`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-cr-instancevpcendpointlinkedvpc
 */
class InstanceVpcEndpointLinkedVpc extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosInstanceVpcEndpointLinkedVpc = new cr_generated_1.RosInstanceVpcEndpointLinkedVpc(this, id, {
            enableCreateDnsRecordInPvzt: props.enableCreateDnsRecordInPvzt === undefined || props.enableCreateDnsRecordInPvzt === null ? false : props.enableCreateDnsRecordInPvzt,
            vpcId: props.vpcId,
            instanceId: props.instanceId,
            moduleName: props.moduleName === undefined || props.moduleName === null ? 'Registry' : props.moduleName,
            vswitchId: props.vswitchId,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosInstanceVpcEndpointLinkedVpc;
        this.attrInstanceId = rosInstanceVpcEndpointLinkedVpc.attrInstanceId;
        this.attrVpcId = rosInstanceVpcEndpointLinkedVpc.attrVpcId;
        this.attrVswitchId = rosInstanceVpcEndpointLinkedVpc.attrVswitchId;
    }
}
exports.InstanceVpcEndpointLinkedVpc = InstanceVpcEndpointLinkedVpc;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5zdGFuY2V2cGNlbmRwb2ludGxpbmtlZHZwYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImluc3RhbmNldnBjZW5kcG9pbnRsaW5rZWR2cGMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsOENBQThDO0FBQzlDLGlEQUFpRTtBQUVyQixxSEFGbkMsOENBQStCLE9BRXdDO0FBd0NoRjs7OztHQUlHO0FBQ0gsTUFBYSw0QkFBNkIsU0FBUSxHQUFHLENBQUMsUUFBUTtJQXFCMUQ7Ozs7T0FJRztJQUNILFlBQVksS0FBb0IsRUFBRSxFQUFVLEVBQUUsS0FBd0MsRUFBRSxtQ0FBMkMsSUFBSTtRQUNuSSxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ2pCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQ2IsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLGdDQUFnQyxHQUFHLGdDQUFnQyxDQUFDO1FBRXpFLE1BQU0sK0JBQStCLEdBQUcsSUFBSSw4Q0FBK0IsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFHO1lBQ25GLDJCQUEyQixFQUFFLEtBQUssQ0FBQywyQkFBMkIsS0FBSyxTQUFTLElBQUksS0FBSyxDQUFDLDJCQUEyQixLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsMkJBQTJCO1lBQ3RLLEtBQUssRUFBRSxLQUFLLENBQUMsS0FBSztZQUNsQixVQUFVLEVBQUUsS0FBSyxDQUFDLFVBQVU7WUFDNUIsVUFBVSxFQUFFLEtBQUssQ0FBQyxVQUFVLEtBQUssU0FBUyxJQUFJLEtBQUssQ0FBQyxVQUFVLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxVQUFVO1lBQ3ZHLFNBQVMsRUFBRSxLQUFLLENBQUMsU0FBUztTQUM3QixFQUFFLGdDQUFnQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztRQUNwRixJQUFJLENBQUMsUUFBUSxHQUFHLCtCQUErQixDQUFDO1FBQ2hELElBQUksQ0FBQyxjQUFjLEdBQUcsK0JBQStCLENBQUMsY0FBYyxDQUFDO1FBQ3JFLElBQUksQ0FBQyxTQUFTLEdBQUcsK0JBQStCLENBQUMsU0FBUyxDQUFDO1FBQzNELElBQUksQ0FBQyxhQUFhLEdBQUcsK0JBQStCLENBQUMsYUFBYSxDQUFDO0lBQ3ZFLENBQUM7Q0FDSjtBQTdDRCxvRUE2Q0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyByb3MgZnJvbSAnQGFsaWNsb3VkL3Jvcy1jZGstY29yZSc7XG5pbXBvcnQgeyBSb3NJbnN0YW5jZVZwY0VuZHBvaW50TGlua2VkVnBjIH0gZnJvbSAnLi9jci5nZW5lcmF0ZWQnO1xuLy8gR2VuZXJhdGVkIGZyb20gdGhlIEFsaUNsb3VkIFJPUyBSZXNvdXJjZSBTcGVjaWZpY2F0aW9uXG5leHBvcnQgeyBSb3NJbnN0YW5jZVZwY0VuZHBvaW50TGlua2VkVnBjIGFzIEluc3RhbmNlVnBjRW5kcG9pbnRMaW5rZWRWcGNQcm9wZXJ0eSB9O1xuXG4vKipcbiAqIFByb3BlcnRpZXMgZm9yIGRlZmluaW5nIGEgYEluc3RhbmNlVnBjRW5kcG9pbnRMaW5rZWRWcGNgLlxuICogU2VlIGh0dHBzOi8vd3d3LmFsaWJhYmFjbG91ZC5jb20vaGVscC9yb3MvZGV2ZWxvcGVyLXJlZmVyZW5jZS9hbGl5dW4tY3ItaW5zdGFuY2V2cGNlbmRwb2ludGxpbmtlZHZwY1xuICovXG5leHBvcnQgaW50ZXJmYWNlIEluc3RhbmNlVnBjRW5kcG9pbnRMaW5rZWRWcGNQcm9wcyB7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBpbnN0YW5jZUlkOiBUaGUgSUQgb2YgdGhlIGluc3RhbmNlLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGluc3RhbmNlSWQ6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHZwY0lkOiBUaGUgSUQgb2YgdGhlIHZwYy5cbiAgICAgKi9cbiAgICByZWFkb25seSB2cGNJZDogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgdnN3aXRjaElkOiBUaGUgSUQgb2YgdGhlIHZzd2l0Y2guXG4gICAgICovXG4gICAgcmVhZG9ubHkgdnN3aXRjaElkOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBlbmFibGVDcmVhdGVEbnNSZWNvcmRJblB2enQ6IFdoZXRoZXIgdG8gYXV0b21hdGljYWxseSBjcmVhdGUgUHJpdmF0ZXpvbmUgcmVjb3Jkcy4gXG4gICAgICogSWYgeW91IGVuYWJsZSBhdXRvbWF0aWMgUHJpdmF0ZXpvbmUgcmVjb3JkIGNyZWF0aW9uLCBQcml2YXRlem9uZSByZWNvcmRzIHdpbGwgYmUgYXV0b21hdGljYWxseSBjcmVhdGVkIHdoZW4gVlBDIGluc3RhbmNlcyBhcmUgYWRkZWQuXG4gICAgICogVmFsaWQgdmFsdWVzOlxuICAgICAqIC0gKip0cnVlKio6IEF1dG9tYXRpY2FsbHkgY3JlYXRlcyBhIFByaXZhdGV6b25lIHJlY29yZC5cbiAgICAgKiAtICoqZmFsc2UqKiAoZGVmYXVsdCk6IERvIG5vdCBhdXRvbWF0aWNhbGx5IGNyZWF0ZSBQcml2YXRlem9uZSByZWNvcmRzLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGVuYWJsZUNyZWF0ZURuc1JlY29yZEluUHZ6dD86IGJvb2xlYW4gfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBtb2R1bGVOYW1lOiBUaGUgbmFtZSBvZiB0aGUgbW9kdWxlIGluIHRoZSBpbnN0YW5jZSBmb3Igd2hpY2ggYSB3aGl0ZWxpc3QgaXMgY29uZmlndXJlZC4gVmFsaWQgdmFsdWVzOlxuICAgICAqIC0gKipSZWdpc3RyeSoqIChkZWZhdWx0KTogQWNjZXNzIHRoZSBpbWFnZSByZXBvc2l0b3J5LlxuICAgICAqIC0gKipDaGFydCoqOiBBY2Nlc3MgSGVsbSBDaGFydC5cbiAgICAgKi9cbiAgICByZWFkb25seSBtb2R1bGVOYW1lPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xufVxuXG4vKipcbiAqIFRoaXMgY2xhc3MgZW5jYXBzdWxhdGVzIGFuZCBleHRlbmRzIHRoZSBST1MgcmVzb3VyY2UgdHlwZSBgQUxJWVVOOjpDUjo6SW5zdGFuY2VWcGNFbmRwb2ludExpbmtlZFZwY2AsIHdoaWNoIGlzIHVzZWQgdG8gYXNzb2NpYXRlIGEgdmlydHVhbCBwcml2YXRlIGNsb3VkIChWUEMpIHdpdGggYSBDb250YWluZXIgUmVnaXN0cnkgaW5zdGFuY2UuXG4gKiBATm90ZSBUaGlzIGNsYXNzIG1heSBoYXZlIHNvbWUgbmV3IGZ1bmN0aW9ucyB0byBmYWNpbGl0YXRlIGRldmVsb3BtZW50LCBzbyBpdCBpcyByZWNvbW1lbmRlZCB0byB1c2UgdGhpcyBjbGFzcyBpbnN0ZWFkIG9mIGBSb3NJbnN0YW5jZVZwY0VuZHBvaW50TGlua2VkVnBjYGZvciBhIG1vcmUgY29udmVuaWVudCBkZXZlbG9wbWVudCBleHBlcmllbmNlLlxuICogU2VlIGh0dHBzOi8vd3d3LmFsaWJhYmFjbG91ZC5jb20vaGVscC9yb3MvZGV2ZWxvcGVyLXJlZmVyZW5jZS9hbGl5dW4tY3ItaW5zdGFuY2V2cGNlbmRwb2ludGxpbmtlZHZwY1xuICovXG5leHBvcnQgY2xhc3MgSW5zdGFuY2VWcGNFbmRwb2ludExpbmtlZFZwYyBleHRlbmRzIHJvcy5SZXNvdXJjZSB7XG4gICAgcHJvdGVjdGVkIHNjb3BlOiByb3MuQ29uc3RydWN0O1xuICAgIHByb3RlY3RlZCBpZDogc3RyaW5nO1xuICAgIHByb3RlY3RlZCBwcm9wczogSW5zdGFuY2VWcGNFbmRwb2ludExpbmtlZFZwY1Byb3BzO1xuICAgIHByb3RlY3RlZCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBJbnN0YW5jZUlkOiBUaGUgSUQgb2YgdGhlIGluc3RhbmNlLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRySW5zdGFuY2VJZDogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIFZwY0lkOiBUaGUgSUQgb2YgdGhlIHZwYy5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0clZwY0lkOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgVnN3aXRjaElkOiBUaGUgSUQgb2YgdGhlIHZzd2l0Y2guXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJWc3dpdGNoSWQ6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFBhcmFtIHNjb3BlIC0gc2NvcGUgaW4gd2hpY2ggdGhpcyByZXNvdXJjZSBpcyBkZWZpbmVkXG4gICAgICogUGFyYW0gaWQgICAgLSBzY29wZWQgaWQgb2YgdGhlIHJlc291cmNlXG4gICAgICogUGFyYW0gcHJvcHMgLSByZXNvdXJjZSBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IHJvcy5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBJbnN0YW5jZVZwY0VuZHBvaW50TGlua2VkVnBjUHJvcHMsIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OmJvb2xlYW4gPSB0cnVlKSB7XG4gICAgICAgIHN1cGVyKHNjb3BlLCBpZCk7XG4gICAgICAgIHRoaXMuc2NvcGUgPSBzY29wZTtcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xuICAgICAgICB0aGlzLnByb3BzID0gcHJvcHM7XG4gICAgICAgIHRoaXMuZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgPSBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDtcblxuICAgICAgICBjb25zdCByb3NJbnN0YW5jZVZwY0VuZHBvaW50TGlua2VkVnBjID0gbmV3IFJvc0luc3RhbmNlVnBjRW5kcG9pbnRMaW5rZWRWcGModGhpcywgaWQsICB7XG4gICAgICAgICAgICBlbmFibGVDcmVhdGVEbnNSZWNvcmRJblB2enQ6IHByb3BzLmVuYWJsZUNyZWF0ZURuc1JlY29yZEluUHZ6dCA9PT0gdW5kZWZpbmVkIHx8IHByb3BzLmVuYWJsZUNyZWF0ZURuc1JlY29yZEluUHZ6dCA9PT0gbnVsbCA/IGZhbHNlIDogcHJvcHMuZW5hYmxlQ3JlYXRlRG5zUmVjb3JkSW5Qdnp0LFxuICAgICAgICAgICAgdnBjSWQ6IHByb3BzLnZwY0lkLFxuICAgICAgICAgICAgaW5zdGFuY2VJZDogcHJvcHMuaW5zdGFuY2VJZCxcbiAgICAgICAgICAgIG1vZHVsZU5hbWU6IHByb3BzLm1vZHVsZU5hbWUgPT09IHVuZGVmaW5lZCB8fCBwcm9wcy5tb2R1bGVOYW1lID09PSBudWxsID8gJ1JlZ2lzdHJ5JyA6IHByb3BzLm1vZHVsZU5hbWUsXG4gICAgICAgICAgICB2c3dpdGNoSWQ6IHByb3BzLnZzd2l0Y2hJZCxcbiAgICAgICAgfSwgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgJiYgdGhpcy5zdGFjay5lbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCk7XG4gICAgICAgIHRoaXMucmVzb3VyY2UgPSByb3NJbnN0YW5jZVZwY0VuZHBvaW50TGlua2VkVnBjO1xuICAgICAgICB0aGlzLmF0dHJJbnN0YW5jZUlkID0gcm9zSW5zdGFuY2VWcGNFbmRwb2ludExpbmtlZFZwYy5hdHRySW5zdGFuY2VJZDtcbiAgICAgICAgdGhpcy5hdHRyVnBjSWQgPSByb3NJbnN0YW5jZVZwY0VuZHBvaW50TGlua2VkVnBjLmF0dHJWcGNJZDtcbiAgICAgICAgdGhpcy5hdHRyVnN3aXRjaElkID0gcm9zSW5zdGFuY2VWcGNFbmRwb2ludExpbmtlZFZwYy5hdHRyVnN3aXRjaElkO1xuICAgIH1cbn1cbiJdfQ==