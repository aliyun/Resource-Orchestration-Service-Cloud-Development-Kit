"use strict";
// Generated from the AliCloud ROS Resource Specification
Object.defineProperty(exports, "__esModule", { value: true });
exports.RosUser = exports.RosInstance2 = exports.RosInstance = void 0;
const ros = require("@alicloud/ros-cdk-core");
/**
 * Determine whether the given properties match those of a `RosInstanceProps`
 *
 * @param properties - the TypeScript properties of a `RosInstanceProps`
 *
 * @returns the result of the validation.
 */
function RosInstancePropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('instanceSource', ros.requiredValidator)(properties.instanceSource));
    errors.collect(ros.propertyValidator('instanceSource', ros.validateString)(properties.instanceSource));
    errors.collect(ros.propertyValidator('databasePassword', ros.requiredValidator)(properties.databasePassword));
    errors.collect(ros.propertyValidator('databasePassword', ros.validateString)(properties.databasePassword));
    errors.collect(ros.propertyValidator('port', ros.requiredValidator)(properties.port));
    errors.collect(ros.propertyValidator('port', ros.validateNumber)(properties.port));
    errors.collect(ros.propertyValidator('host', ros.requiredValidator)(properties.host));
    errors.collect(ros.propertyValidator('host', ros.validateString)(properties.host));
    errors.collect(ros.propertyValidator('exportTimeout', ros.requiredValidator)(properties.exportTimeout));
    errors.collect(ros.propertyValidator('exportTimeout', ros.validateNumber)(properties.exportTimeout));
    errors.collect(ros.propertyValidator('safeRule', ros.requiredValidator)(properties.safeRule));
    errors.collect(ros.propertyValidator('safeRule', ros.validateString)(properties.safeRule));
    errors.collect(ros.propertyValidator('ddlOnline', ros.validateNumber)(properties.ddlOnline));
    errors.collect(ros.propertyValidator('envType', ros.requiredValidator)(properties.envType));
    errors.collect(ros.propertyValidator('envType', ros.validateString)(properties.envType));
    errors.collect(ros.propertyValidator('tid', ros.validateNumber)(properties.tid));
    if (properties.useDsql && (typeof properties.useDsql) !== 'object') {
        errors.collect(ros.propertyValidator('useDsql', ros.validateAllowedValues)({
            data: properties.useDsql,
            allowedValues: [0, 1],
        }));
    }
    errors.collect(ros.propertyValidator('useDsql', ros.validateNumber)(properties.useDsql));
    errors.collect(ros.propertyValidator('sid', ros.validateString)(properties.sid));
    errors.collect(ros.propertyValidator('ecsInstanceId', ros.validateString)(properties.ecsInstanceId));
    errors.collect(ros.propertyValidator('vpcId', ros.validateString)(properties.vpcId));
    errors.collect(ros.propertyValidator('instanceAlias', ros.requiredValidator)(properties.instanceAlias));
    errors.collect(ros.propertyValidator('instanceAlias', ros.validateString)(properties.instanceAlias));
    errors.collect(ros.propertyValidator('dbaUid', ros.requiredValidator)(properties.dbaUid));
    errors.collect(ros.propertyValidator('dbaUid', ros.validateNumber)(properties.dbaUid));
    errors.collect(ros.propertyValidator('ecsRegion', ros.validateString)(properties.ecsRegion));
    errors.collect(ros.propertyValidator('networkType', ros.requiredValidator)(properties.networkType));
    if (properties.networkType && (typeof properties.networkType) !== 'object') {
        errors.collect(ros.propertyValidator('networkType', ros.validateAllowedValues)({
            data: properties.networkType,
            allowedValues: ["CLASSIC", "VPC"],
        }));
    }
    errors.collect(ros.propertyValidator('networkType', ros.validateString)(properties.networkType));
    errors.collect(ros.propertyValidator('databaseUser', ros.requiredValidator)(properties.databaseUser));
    errors.collect(ros.propertyValidator('databaseUser', ros.validateString)(properties.databaseUser));
    errors.collect(ros.propertyValidator('instanceType', ros.requiredValidator)(properties.instanceType));
    errors.collect(ros.propertyValidator('instanceType', ros.validateString)(properties.instanceType));
    errors.collect(ros.propertyValidator('dataLinkName', ros.validateString)(properties.dataLinkName));
    errors.collect(ros.propertyValidator('queryTimeout', ros.requiredValidator)(properties.queryTimeout));
    errors.collect(ros.propertyValidator('queryTimeout', ros.validateNumber)(properties.queryTimeout));
    return errors.wrap('supplied properties not correct for "RosInstanceProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::DMS::Instance` resource
 *
 * @param properties - the TypeScript properties of a `RosInstanceProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::DMS::Instance` resource.
 */
// @ts-ignore TS6133
function rosInstancePropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosInstancePropsValidator(properties).assertSuccess();
    }
    return {
        'DatabasePassword': ros.stringToRosTemplate(properties.databasePassword),
        'DatabaseUser': ros.stringToRosTemplate(properties.databaseUser),
        'DbaUid': ros.numberToRosTemplate(properties.dbaUid),
        'EnvType': ros.stringToRosTemplate(properties.envType),
        'ExportTimeout': ros.numberToRosTemplate(properties.exportTimeout),
        'Host': ros.stringToRosTemplate(properties.host),
        'InstanceAlias': ros.stringToRosTemplate(properties.instanceAlias),
        'InstanceSource': ros.stringToRosTemplate(properties.instanceSource),
        'InstanceType': ros.stringToRosTemplate(properties.instanceType),
        'NetworkType': ros.stringToRosTemplate(properties.networkType),
        'Port': ros.numberToRosTemplate(properties.port),
        'QueryTimeout': ros.numberToRosTemplate(properties.queryTimeout),
        'SafeRule': ros.stringToRosTemplate(properties.safeRule),
        'DataLinkName': ros.stringToRosTemplate(properties.dataLinkName),
        'DdlOnline': ros.numberToRosTemplate(properties.ddlOnline),
        'EcsInstanceId': ros.stringToRosTemplate(properties.ecsInstanceId),
        'EcsRegion': ros.stringToRosTemplate(properties.ecsRegion),
        'Sid': ros.stringToRosTemplate(properties.sid),
        'Tid': ros.numberToRosTemplate(properties.tid),
        'UseDsql': ros.numberToRosTemplate(properties.useDsql),
        'VpcId': ros.stringToRosTemplate(properties.vpcId),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::DMS::Instance`, which is used to register a database instance for your enterprise.
 * @Note This class does not contain additional functions, so it is recommended to use the `Instance` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-dms-instance
 */
class RosInstance extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosInstance.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrHost = this.getAtt('Host');
        this.attrInstanceId = this.getAtt('InstanceId');
        this.attrPort = this.getAtt('Port');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.databasePassword = props.databasePassword;
        this.databaseUser = props.databaseUser;
        this.dbaUid = props.dbaUid;
        this.envType = props.envType;
        this.exportTimeout = props.exportTimeout;
        this.host = props.host;
        this.instanceAlias = props.instanceAlias;
        this.instanceSource = props.instanceSource;
        this.instanceType = props.instanceType;
        this.networkType = props.networkType;
        this.port = props.port;
        this.queryTimeout = props.queryTimeout;
        this.safeRule = props.safeRule;
        this.dataLinkName = props.dataLinkName;
        this.ddlOnline = props.ddlOnline;
        this.ecsInstanceId = props.ecsInstanceId;
        this.ecsRegion = props.ecsRegion;
        this.sid = props.sid;
        this.tid = props.tid;
        this.useDsql = props.useDsql;
        this.vpcId = props.vpcId;
    }
    get rosProperties() {
        return {
            databasePassword: this.databasePassword,
            databaseUser: this.databaseUser,
            dbaUid: this.dbaUid,
            envType: this.envType,
            exportTimeout: this.exportTimeout,
            host: this.host,
            instanceAlias: this.instanceAlias,
            instanceSource: this.instanceSource,
            instanceType: this.instanceType,
            networkType: this.networkType,
            port: this.port,
            queryTimeout: this.queryTimeout,
            safeRule: this.safeRule,
            dataLinkName: this.dataLinkName,
            ddlOnline: this.ddlOnline,
            ecsInstanceId: this.ecsInstanceId,
            ecsRegion: this.ecsRegion,
            sid: this.sid,
            tid: this.tid,
            useDsql: this.useDsql,
            vpcId: this.vpcId,
        };
    }
    renderProperties(props) {
        return rosInstancePropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosInstance = RosInstance;
/**
 * The resource type name for this resource class.
 */
RosInstance.ROS_RESOURCE_TYPE_NAME = "ALIYUN::DMS::Instance";
/**
 * Determine whether the given properties match those of a `RosInstance2Props`
 *
 * @param properties - the TypeScript properties of a `RosInstance2Props`
 *
 * @returns the result of the validation.
 */
function RosInstance2PropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('databasePassword', ros.requiredValidator)(properties.databasePassword));
    errors.collect(ros.propertyValidator('databasePassword', ros.validateString)(properties.databasePassword));
    errors.collect(ros.propertyValidator('port', ros.requiredValidator)(properties.port));
    errors.collect(ros.propertyValidator('port', ros.validateNumber)(properties.port));
    errors.collect(ros.propertyValidator('safeRule', ros.requiredValidator)(properties.safeRule));
    errors.collect(ros.propertyValidator('safeRule', ros.validateString)(properties.safeRule));
    errors.collect(ros.propertyValidator('exportTimeout', ros.requiredValidator)(properties.exportTimeout));
    errors.collect(ros.propertyValidator('exportTimeout', ros.validateNumber)(properties.exportTimeout));
    errors.collect(ros.propertyValidator('envType', ros.requiredValidator)(properties.envType));
    errors.collect(ros.propertyValidator('envType', ros.validateString)(properties.envType));
    errors.collect(ros.propertyValidator('dbaId', ros.requiredValidator)(properties.dbaId));
    errors.collect(ros.propertyValidator('dbaId', ros.validateNumber)(properties.dbaId));
    errors.collect(ros.propertyValidator('ecsRegion', ros.validateString)(properties.ecsRegion));
    errors.collect(ros.propertyValidator('instanceAlias', ros.requiredValidator)(properties.instanceAlias));
    errors.collect(ros.propertyValidator('instanceAlias', ros.validateString)(properties.instanceAlias));
    errors.collect(ros.propertyValidator('networkType', ros.requiredValidator)(properties.networkType));
    if (properties.networkType && (typeof properties.networkType) !== 'object') {
        errors.collect(ros.propertyValidator('networkType', ros.validateAllowedValues)({
            data: properties.networkType,
            allowedValues: ["CLASSIC", "VPC"],
        }));
    }
    errors.collect(ros.propertyValidator('networkType', ros.validateString)(properties.networkType));
    errors.collect(ros.propertyValidator('enableSellTrust', ros.requiredValidator)(properties.enableSellTrust));
    errors.collect(ros.propertyValidator('enableSellTrust', ros.validateString)(properties.enableSellTrust));
    errors.collect(ros.propertyValidator('instanceType', ros.requiredValidator)(properties.instanceType));
    errors.collect(ros.propertyValidator('instanceType', ros.validateString)(properties.instanceType));
    errors.collect(ros.propertyValidator('enableSellSitd', ros.validateString)(properties.enableSellSitd));
    errors.collect(ros.propertyValidator('dataLinkName', ros.validateString)(properties.dataLinkName));
    errors.collect(ros.propertyValidator('queryTimeout', ros.requiredValidator)(properties.queryTimeout));
    errors.collect(ros.propertyValidator('queryTimeout', ros.validateNumber)(properties.queryTimeout));
    errors.collect(ros.propertyValidator('templateId', ros.validateNumber)(properties.templateId));
    errors.collect(ros.propertyValidator('instanceSource', ros.requiredValidator)(properties.instanceSource));
    errors.collect(ros.propertyValidator('instanceSource', ros.validateString)(properties.instanceSource));
    errors.collect(ros.propertyValidator('enableSellStable', ros.validateString)(properties.enableSellStable));
    errors.collect(ros.propertyValidator('skipTest', ros.validateBoolean)(properties.skipTest));
    errors.collect(ros.propertyValidator('host', ros.requiredValidator)(properties.host));
    errors.collect(ros.propertyValidator('host', ros.validateString)(properties.host));
    errors.collect(ros.propertyValidator('enableSellCommon', ros.validateString)(properties.enableSellCommon));
    if (properties.useSsl && (typeof properties.useSsl) !== 'object') {
        errors.collect(ros.propertyValidator('useSsl', ros.validateAllowedValues)({
            data: properties.useSsl,
            allowedValues: [0, 1, -1],
        }));
    }
    errors.collect(ros.propertyValidator('useSsl', ros.validateNumber)(properties.useSsl));
    errors.collect(ros.propertyValidator('templateType', ros.validateString)(properties.templateType));
    errors.collect(ros.propertyValidator('ddlOnline', ros.validateNumber)(properties.ddlOnline));
    errors.collect(ros.propertyValidator('tid', ros.validateNumber)(properties.tid));
    errors.collect(ros.propertyValidator('sid', ros.validateString)(properties.sid));
    if (properties.useDsql && (typeof properties.useDsql) !== 'object') {
        errors.collect(ros.propertyValidator('useDsql', ros.validateAllowedValues)({
            data: properties.useDsql,
            allowedValues: [0, 1],
        }));
    }
    errors.collect(ros.propertyValidator('useDsql', ros.validateNumber)(properties.useDsql));
    errors.collect(ros.propertyValidator('ecsInstanceId', ros.validateString)(properties.ecsInstanceId));
    errors.collect(ros.propertyValidator('vpcId', ros.validateString)(properties.vpcId));
    errors.collect(ros.propertyValidator('databaseUser', ros.requiredValidator)(properties.databaseUser));
    errors.collect(ros.propertyValidator('databaseUser', ros.validateString)(properties.databaseUser));
    return errors.wrap('supplied properties not correct for "RosInstance2Props"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::DMS::Instance2` resource
 *
 * @param properties - the TypeScript properties of a `RosInstance2Props`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::DMS::Instance2` resource.
 */
// @ts-ignore TS6133
function rosInstance2PropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosInstance2PropsValidator(properties).assertSuccess();
    }
    return {
        'DatabasePassword': ros.stringToRosTemplate(properties.databasePassword),
        'DatabaseUser': ros.stringToRosTemplate(properties.databaseUser),
        'DbaId': ros.numberToRosTemplate(properties.dbaId),
        'EnableSellTrust': ros.stringToRosTemplate(properties.enableSellTrust),
        'EnvType': ros.stringToRosTemplate(properties.envType),
        'ExportTimeout': ros.numberToRosTemplate(properties.exportTimeout),
        'Host': ros.stringToRosTemplate(properties.host),
        'InstanceAlias': ros.stringToRosTemplate(properties.instanceAlias),
        'InstanceSource': ros.stringToRosTemplate(properties.instanceSource),
        'InstanceType': ros.stringToRosTemplate(properties.instanceType),
        'NetworkType': ros.stringToRosTemplate(properties.networkType),
        'Port': ros.numberToRosTemplate(properties.port),
        'QueryTimeout': ros.numberToRosTemplate(properties.queryTimeout),
        'SafeRule': ros.stringToRosTemplate(properties.safeRule),
        'DataLinkName': ros.stringToRosTemplate(properties.dataLinkName),
        'DdlOnline': ros.numberToRosTemplate(properties.ddlOnline),
        'EcsInstanceId': ros.stringToRosTemplate(properties.ecsInstanceId),
        'EcsRegion': ros.stringToRosTemplate(properties.ecsRegion),
        'EnableSellCommon': ros.stringToRosTemplate(properties.enableSellCommon),
        'EnableSellSitd': ros.stringToRosTemplate(properties.enableSellSitd),
        'EnableSellStable': ros.stringToRosTemplate(properties.enableSellStable),
        'Sid': ros.stringToRosTemplate(properties.sid),
        'SkipTest': ros.booleanToRosTemplate(properties.skipTest),
        'TemplateId': ros.numberToRosTemplate(properties.templateId),
        'TemplateType': ros.stringToRosTemplate(properties.templateType),
        'Tid': ros.numberToRosTemplate(properties.tid),
        'UseDsql': ros.numberToRosTemplate(properties.useDsql),
        'UseSsl': ros.numberToRosTemplate(properties.useSsl),
        'VpcId': ros.stringToRosTemplate(properties.vpcId),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::DMS::Instance2`.
 * @Note This class does not contain additional functions, so it is recommended to use the `Instance2` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-dms-instance2
 */
class RosInstance2 extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosInstance2.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrHost = this.getAtt('Host');
        this.attrInstanceId = this.getAtt('InstanceId');
        this.attrPort = this.getAtt('Port');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.databasePassword = props.databasePassword;
        this.databaseUser = props.databaseUser;
        this.dbaId = props.dbaId;
        this.enableSellTrust = props.enableSellTrust;
        this.envType = props.envType;
        this.exportTimeout = props.exportTimeout;
        this.host = props.host;
        this.instanceAlias = props.instanceAlias;
        this.instanceSource = props.instanceSource;
        this.instanceType = props.instanceType;
        this.networkType = props.networkType;
        this.port = props.port;
        this.queryTimeout = props.queryTimeout;
        this.safeRule = props.safeRule;
        this.dataLinkName = props.dataLinkName;
        this.ddlOnline = props.ddlOnline;
        this.ecsInstanceId = props.ecsInstanceId;
        this.ecsRegion = props.ecsRegion;
        this.enableSellCommon = props.enableSellCommon;
        this.enableSellSitd = props.enableSellSitd;
        this.enableSellStable = props.enableSellStable;
        this.sid = props.sid;
        this.skipTest = props.skipTest;
        this.templateId = props.templateId;
        this.templateType = props.templateType;
        this.tid = props.tid;
        this.useDsql = props.useDsql;
        this.useSsl = props.useSsl;
        this.vpcId = props.vpcId;
    }
    get rosProperties() {
        return {
            databasePassword: this.databasePassword,
            databaseUser: this.databaseUser,
            dbaId: this.dbaId,
            enableSellTrust: this.enableSellTrust,
            envType: this.envType,
            exportTimeout: this.exportTimeout,
            host: this.host,
            instanceAlias: this.instanceAlias,
            instanceSource: this.instanceSource,
            instanceType: this.instanceType,
            networkType: this.networkType,
            port: this.port,
            queryTimeout: this.queryTimeout,
            safeRule: this.safeRule,
            dataLinkName: this.dataLinkName,
            ddlOnline: this.ddlOnline,
            ecsInstanceId: this.ecsInstanceId,
            ecsRegion: this.ecsRegion,
            enableSellCommon: this.enableSellCommon,
            enableSellSitd: this.enableSellSitd,
            enableSellStable: this.enableSellStable,
            sid: this.sid,
            skipTest: this.skipTest,
            templateId: this.templateId,
            templateType: this.templateType,
            tid: this.tid,
            useDsql: this.useDsql,
            useSsl: this.useSsl,
            vpcId: this.vpcId,
        };
    }
    renderProperties(props) {
        return rosInstance2PropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosInstance2 = RosInstance2;
/**
 * The resource type name for this resource class.
 */
RosInstance2.ROS_RESOURCE_TYPE_NAME = "ALIYUN::DMS::Instance2";
/**
 * Determine whether the given properties match those of a `RosUserProps`
 *
 * @param properties - the TypeScript properties of a `RosUserProps`
 *
 * @returns the result of the validation.
 */
function RosUserPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('status', ros.validateString)(properties.status));
    errors.collect(ros.propertyValidator('uid', ros.requiredValidator)(properties.uid));
    errors.collect(ros.propertyValidator('uid', ros.validateString)(properties.uid));
    errors.collect(ros.propertyValidator('userName', ros.validateString)(properties.userName));
    errors.collect(ros.propertyValidator('roleNames', ros.listValidator(ros.validateString))(properties.roleNames));
    errors.collect(ros.propertyValidator('mobile', ros.validateString)(properties.mobile));
    errors.collect(ros.propertyValidator('tid', ros.validateString)(properties.tid));
    return errors.wrap('supplied properties not correct for "RosUserProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::DMS::User` resource
 *
 * @param properties - the TypeScript properties of a `RosUserProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::DMS::User` resource.
 */
// @ts-ignore TS6133
function rosUserPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosUserPropsValidator(properties).assertSuccess();
    }
    return {
        'Uid': ros.stringToRosTemplate(properties.uid),
        'Mobile': ros.stringToRosTemplate(properties.mobile),
        'RoleNames': ros.listMapper(ros.stringToRosTemplate)(properties.roleNames),
        'Status': ros.stringToRosTemplate(properties.status),
        'Tid': ros.stringToRosTemplate(properties.tid),
        'UserName': ros.stringToRosTemplate(properties.userName),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::DMS::User`, which is used to add a user to Data Management (DMS).
 * @Note This class does not contain additional functions, so it is recommended to use the `User` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-dms-user
 */
class RosUser extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosUser.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrMobile = this.getAtt('Mobile');
        this.attrParentUid = this.getAtt('ParentUid');
        this.attrRoleIds = this.getAtt('RoleIds');
        this.attrRoleNames = this.getAtt('RoleNames');
        this.attrUid = this.getAtt('Uid');
        this.attrUserId = this.getAtt('UserId');
        this.attrUserName = this.getAtt('UserName');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.uid = props.uid;
        this.mobile = props.mobile;
        this.roleNames = props.roleNames;
        this.status = props.status;
        this.tid = props.tid;
        this.userName = props.userName;
    }
    get rosProperties() {
        return {
            uid: this.uid,
            mobile: this.mobile,
            roleNames: this.roleNames,
            status: this.status,
            tid: this.tid,
            userName: this.userName,
        };
    }
    renderProperties(props) {
        return rosUserPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosUser = RosUser;
/**
 * The resource type name for this resource class.
 */
RosUser.ROS_RESOURCE_TYPE_NAME = "ALIYUN::DMS::User";
//# sourceMappingURL=data:application/json;base64,