"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InstanceClasses = exports.InstanceClassesProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const redis_generated_1 = require("./redis.generated");
Object.defineProperty(exports, "InstanceClassesProperty", { enumerable: true, get: function () { return redis_generated_1.RosInstanceClasses; } });
/**
 * This class encapsulates and extends the ROS resource type `DATASOURCE::REDIS::InstanceClasses`DATASOURCE::REDIS::Instances is used to query the information about ApsaraDB for Redis instances.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosInstanceClasses`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/datasource-redis-instanceclasses
 */
class InstanceClasses extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props = {}, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosInstanceClasses = new redis_generated_1.RosInstanceClasses(this, id, {
            orderType: props.orderType,
            zoneId: props.zoneId,
            resourceGroupId: props.resourceGroupId,
            instanceId: props.instanceId,
            instanceChargeType: props.instanceChargeType === undefined || props.instanceChargeType === null ? 'PrePaid' : props.instanceChargeType,
            nodeId: props.nodeId,
            productType: props.productType,
            acceptLanguage: props.acceptLanguage,
            engine: props.engine,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosInstanceClasses;
        this.attrInstanceClassIds = rosInstanceClasses.attrInstanceClassIds;
        this.attrInstanceClasses = rosInstanceClasses.attrInstanceClasses;
    }
}
exports.InstanceClasses = InstanceClasses;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5zdGFuY2VjbGFzc2VzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiaW5zdGFuY2VjbGFzc2VzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDhDQUE4QztBQUM5Qyx1REFBdUQ7QUFFeEIsd0dBRnRCLG9DQUFrQixPQUUyQjtBQXVFdEQ7Ozs7R0FJRztBQUNILE1BQWEsZUFBZ0IsU0FBUSxHQUFHLENBQUMsUUFBUTtJQVk3Qzs7OztPQUlHO0lBQ0gsWUFBWSxLQUFvQixFQUFFLEVBQVUsRUFBRSxRQUE4QixFQUFFLEVBQUUsbUNBQTJDLElBQUk7UUFDM0gsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUVqQixNQUFNLGtCQUFrQixHQUFHLElBQUksb0NBQWtCLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRztZQUN6RCxTQUFTLEVBQUUsS0FBSyxDQUFDLFNBQVM7WUFDMUIsTUFBTSxFQUFFLEtBQUssQ0FBQyxNQUFNO1lBQ3BCLGVBQWUsRUFBRSxLQUFLLENBQUMsZUFBZTtZQUN0QyxVQUFVLEVBQUUsS0FBSyxDQUFDLFVBQVU7WUFDNUIsa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGtCQUFrQixLQUFLLFNBQVMsSUFBSSxLQUFLLENBQUMsa0JBQWtCLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxrQkFBa0I7WUFDdEksTUFBTSxFQUFFLEtBQUssQ0FBQyxNQUFNO1lBQ3BCLFdBQVcsRUFBRSxLQUFLLENBQUMsV0FBVztZQUM5QixjQUFjLEVBQUUsS0FBSyxDQUFDLGNBQWM7WUFDcEMsTUFBTSxFQUFFLEtBQUssQ0FBQyxNQUFNO1NBQ3ZCLEVBQUUsZ0NBQWdDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO1FBQ3BGLElBQUksQ0FBQyxRQUFRLEdBQUcsa0JBQWtCLENBQUM7UUFDbkMsSUFBSSxDQUFDLG9CQUFvQixHQUFHLGtCQUFrQixDQUFDLG9CQUFvQixDQUFDO1FBQ3BFLElBQUksQ0FBQyxtQkFBbUIsR0FBRyxrQkFBa0IsQ0FBQyxtQkFBbUIsQ0FBQztJQUN0RSxDQUFDO0NBQ0o7QUFuQ0QsMENBbUNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcm9zIGZyb20gJ0BhbGljbG91ZC9yb3MtY2RrLWNvcmUnO1xuaW1wb3J0IHsgUm9zSW5zdGFuY2VDbGFzc2VzIH0gZnJvbSAnLi9yZWRpcy5nZW5lcmF0ZWQnO1xuLy8gR2VuZXJhdGVkIGZyb20gdGhlIEFsaUNsb3VkIFJPUyBSZXNvdXJjZSBTcGVjaWZpY2F0aW9uXG5leHBvcnQgeyBSb3NJbnN0YW5jZUNsYXNzZXMgYXMgSW5zdGFuY2VDbGFzc2VzUHJvcGVydHkgfTtcblxuLyoqXG4gKiBQcm9wZXJ0aWVzIGZvciBkZWZpbmluZyBhIGBJbnN0YW5jZUNsYXNzZXNgLlxuICogU2VlIGh0dHBzOi8vd3d3LmFsaWJhYmFjbG91ZC5jb20vaGVscC9yb3MvZGV2ZWxvcGVyLXJlZmVyZW5jZS9kYXRhc291cmNlLXJlZGlzLWluc3RhbmNlY2xhc3Nlc1xuICovXG5leHBvcnQgaW50ZXJmYWNlIEluc3RhbmNlQ2xhc3Nlc1Byb3BzIHtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGFjY2VwdExhbmd1YWdlOiBUaGUgbGFuZ3VhZ2Ugb2YgdGhlIHJldHVybiB2YWx1ZXMuIFZhbGlkIHZhbHVlczpcbiAgICAgKiAgemgtQ046IENoaW5lc2UuIFRoaXMgaXMgdGhlIGRlZmF1bHQgdmFsdWUuXG4gICAgICogIGVuLVVTOiBFbmdsaXNoLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGFjY2VwdExhbmd1YWdlPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgZW5naW5lOiBUaGUgZW5naW5lIHR5cGUuIFZhbGlkIHZhbHVlczpcbiAgICAgKiBSZWRpc1xuICAgICAqIE1lbWNhY2hlXG4gICAgICovXG4gICAgcmVhZG9ubHkgZW5naW5lPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgaW5zdGFuY2VDaGFyZ2VUeXBlOiBUaGUgYmlsbGluZyBtZXRob2QuIFZhbGlkIHZhbHVlczpcbiAgICAgKiBQcmVQYWlkOiBzdWJzY3JpcHRpb25cbiAgICAgKiBQb3N0UGFpZDogcGF5LWFzLXlvdS1nb1xuICAgICAqIE5vdGUgRGVmYXVsdCB2YWx1ZTogUHJlUGFpZC5cbiAgICAgKi9cbiAgICByZWFkb25seSBpbnN0YW5jZUNoYXJnZVR5cGU/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBpbnN0YW5jZUlkOiBUaGUgSUQgb2YgdGhlIHJlc291cmNlIGdyb3VwLiBZb3UgY2FuIGNhbGwgdGhlIExpc3RSZXNvdXJjZUdyb3VwcyBvcGVyYXRpb24gdG8gcXVlcnkgdGhlIElEcyBvZiByZXNvdXJjZSBncm91cHMuXG4gICAgICogIE5vdGUgWW91IGNhbiBhbHNvIHF1ZXJ5IHRoZSBJRHMgb2YgcmVzb3VyY2UgZ3JvdXBzIGluIHRoZSBSZXNvdXJjZSBNYW5hZ2VtZW50IGNvbnNvbGUuIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgVmlldyBiYXNpYyBpbmZvcm1hdGlvbiBhYm91dCBhIHJlc291cmNlIGdyb3VwLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGluc3RhbmNlSWQ/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBub2RlSWQ6IFRoZSBJRCBvZiB0aGUgZGF0YSBub2RlIGZvciB3aGljaCB5b3Ugd2FudCB0byBxdWVyeSBhdmFpbGFibGUgaW5zdGFuY2UgdHlwZXMuIFlvdSBjYW4gY2FsbCB0aGUgRGVzY3JpYmVMb2dpY0luc3RhbmNlVG9wb2xvZ3kgb3BlcmF0aW9uIHRvIHF1ZXJ5IHRoZSBJRCBvZiB0aGUgZGF0YSBub2RlLiBSZW1vdmUgdGhlIG51bWJlciBzaWduICgjKSBhbmQgdGhlIGNvbnRlbnQgdGhhdCBmb2xsb3dzIHRoZSBudW1iZXIgc2lnbi4gRm9yIGV4YW1wbGUsIHJldGFpbiBvbmx5IHItYnAxMG5veGxoY29pbTIqKioqLWRiLTAuXG4gICAgICogIE5vdGUgQmVmb3JlIHlvdSBzZXQgdGhpcyBwYXJhbWV0ZXIsIHlvdSBtdXN0IHNldCB0aGUgSW5zdGFuY2VJZCBwYXJhbWV0ZXIgdG8gdGhlIElEIG9mIGFuIGluc3RhbmNlIGluIHRoZSBjbHVzdGVyIG9yIHJlYWRcXC93cml0ZSBzcGxpdHRpbmcgYXJjaGl0ZWN0dXJlLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IG5vZGVJZD86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IG9yZGVyVHlwZTogVGhlIG9yZGVyIHR5cGUuIFZhbGlkIHZhbHVlczpcbiAgICAgKiBCVVk6IHRoZSBvcmRlcnMgdGhhdCBhcmUgdXNlZCB0byBwdXJjaGFzZSBpbnN0YW5jZXMuXG4gICAgICogVVBHUkFERTogdGhlIG9yZGVycyB0aGF0IGFyZSB1c2VkIHRvIHVwZ3JhZGUgaW5zdGFuY2VzLlxuICAgICAqIERPV05HUkFERTogdGhlIG9yZGVycyB0aGF0IGFyZSB1c2VkIHRvIGRvd25ncmFkZSBpbnN0YW5jZXMuXG4gICAgICovXG4gICAgcmVhZG9ubHkgb3JkZXJUeXBlPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgcHJvZHVjdFR5cGU6IFRoZSBlZGl0aW9uIG9yIHNlcmllcyBvZiBpbnN0YW5jZXMuIFZhbGlkIHZhbHVlczpcbiAgICAgKiAgTG9jYWw6IEFwc2FyYURCIGZvciBSZWRpcyBDb21tdW5pdHkgRWRpdGlvbiBpbnN0YW5jZXMgb3IgcGVyZm9ybWFuY2UtZW5oYW5jZWQgaW5zdGFuY2VzIG9mIEFwc2FyYURCIGZvciBSZWRpcyBFbmhhbmNlZCBFZGl0aW9uIChUYWlyKVxuICAgICAqICBUYWlyX3NjbTogcGVyc2lzdGVudCBtZW1vcnktb3B0aW1pemVkIGluc3RhbmNlc1xuICAgICAqICBUYWlyX2Vzc2Q6IHN0b3JhZ2Utb3B0aW1pemVkIGluc3RhbmNlc1xuICAgICAqL1xuICAgIHJlYWRvbmx5IHByb2R1Y3RUeXBlPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgcmVzb3VyY2VHcm91cElkOiBUaGUgSUQgb2YgdGhlIGluc3RhbmNlLlxuICAgICAqICBOb3RlIFRoaXMgcGFyYW1ldGVyIGlzIHJlcXVpcmVkIG9ubHkgaWYgdGhlIE9yZGVyVHlwZSBwYXJhbWV0ZXIgaXMgc2V0IHRvIFVQR1JBREUgb3IgUkVORVcuXG4gICAgICovXG4gICAgcmVhZG9ubHkgcmVzb3VyY2VHcm91cElkPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgem9uZUlkOiBUaGUgSUQgb2YgdGhlIHpvbmUgd2hlcmUgUG9sYXJEQiByZXNvdXJjZXMgdGhhdCB5b3Ugd2FudCB0byBxdWVyeSByZXNpZGUuXG4gICAgICogTm90ZSBZb3UgY2FuIGNhbGwgdGhlIERlc2NyaWJlUmVnaW9ucyBvcGVyYXRpb24gdG8gcXVlcnkgaW5mb3JtYXRpb24gYWJvdXQgem9uZXMuXG4gICAgICovXG4gICAgcmVhZG9ubHkgem9uZUlkPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xufVxuXG4vKipcbiAqIFRoaXMgY2xhc3MgZW5jYXBzdWxhdGVzIGFuZCBleHRlbmRzIHRoZSBST1MgcmVzb3VyY2UgdHlwZSBgREFUQVNPVVJDRTo6UkVESVM6Okluc3RhbmNlQ2xhc3Nlc2BEQVRBU09VUkNFOjpSRURJUzo6SW5zdGFuY2VzIGlzIHVzZWQgdG8gcXVlcnkgdGhlIGluZm9ybWF0aW9uIGFib3V0IEFwc2FyYURCIGZvciBSZWRpcyBpbnN0YW5jZXMuXG4gKiBATm90ZSBUaGlzIGNsYXNzIG1heSBoYXZlIHNvbWUgbmV3IGZ1bmN0aW9ucyB0byBmYWNpbGl0YXRlIGRldmVsb3BtZW50LCBzbyBpdCBpcyByZWNvbW1lbmRlZCB0byB1c2UgdGhpcyBjbGFzcyBpbnN0ZWFkIG9mIGBSb3NJbnN0YW5jZUNsYXNzZXNgZm9yIGEgbW9yZSBjb252ZW5pZW50IGRldmVsb3BtZW50IGV4cGVyaWVuY2UuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2RhdGFzb3VyY2UtcmVkaXMtaW5zdGFuY2VjbGFzc2VzXG4gKi9cbmV4cG9ydCBjbGFzcyBJbnN0YW5jZUNsYXNzZXMgZXh0ZW5kcyByb3MuUmVzb3VyY2Uge1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIEluc3RhbmNlQ2xhc3NJZHM6IFRoZSBsaXN0IG9mIGRiIGluc3RhbmNlIGNsYXNzIGlkcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckluc3RhbmNlQ2xhc3NJZHM6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBJbnN0YW5jZUNsYXNzZXM6IFRoZSBsaXN0IG9mIGluc3RhbmNlIGNsYXNzZXMuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJJbnN0YW5jZUNsYXNzZXM6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFBhcmFtIHNjb3BlIC0gc2NvcGUgaW4gd2hpY2ggdGhpcyByZXNvdXJjZSBpcyBkZWZpbmVkXG4gICAgICogUGFyYW0gaWQgICAgLSBzY29wZWQgaWQgb2YgdGhlIHJlc291cmNlXG4gICAgICogUGFyYW0gcHJvcHMgLSByZXNvdXJjZSBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IHJvcy5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBJbnN0YW5jZUNsYXNzZXNQcm9wcyA9IHt9LCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDpib29sZWFuID0gdHJ1ZSkge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQpO1xuXG4gICAgICAgIGNvbnN0IHJvc0luc3RhbmNlQ2xhc3NlcyA9IG5ldyBSb3NJbnN0YW5jZUNsYXNzZXModGhpcywgaWQsICB7XG4gICAgICAgICAgICBvcmRlclR5cGU6IHByb3BzLm9yZGVyVHlwZSxcbiAgICAgICAgICAgIHpvbmVJZDogcHJvcHMuem9uZUlkLFxuICAgICAgICAgICAgcmVzb3VyY2VHcm91cElkOiBwcm9wcy5yZXNvdXJjZUdyb3VwSWQsXG4gICAgICAgICAgICBpbnN0YW5jZUlkOiBwcm9wcy5pbnN0YW5jZUlkLFxuICAgICAgICAgICAgaW5zdGFuY2VDaGFyZ2VUeXBlOiBwcm9wcy5pbnN0YW5jZUNoYXJnZVR5cGUgPT09IHVuZGVmaW5lZCB8fCBwcm9wcy5pbnN0YW5jZUNoYXJnZVR5cGUgPT09IG51bGwgPyAnUHJlUGFpZCcgOiBwcm9wcy5pbnN0YW5jZUNoYXJnZVR5cGUsXG4gICAgICAgICAgICBub2RlSWQ6IHByb3BzLm5vZGVJZCxcbiAgICAgICAgICAgIHByb2R1Y3RUeXBlOiBwcm9wcy5wcm9kdWN0VHlwZSxcbiAgICAgICAgICAgIGFjY2VwdExhbmd1YWdlOiBwcm9wcy5hY2NlcHRMYW5ndWFnZSxcbiAgICAgICAgICAgIGVuZ2luZTogcHJvcHMuZW5naW5lLFxuICAgICAgICB9LCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCAmJiB0aGlzLnN0YWNrLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50KTtcbiAgICAgICAgdGhpcy5yZXNvdXJjZSA9IHJvc0luc3RhbmNlQ2xhc3NlcztcbiAgICAgICAgdGhpcy5hdHRySW5zdGFuY2VDbGFzc0lkcyA9IHJvc0luc3RhbmNlQ2xhc3Nlcy5hdHRySW5zdGFuY2VDbGFzc0lkcztcbiAgICAgICAgdGhpcy5hdHRySW5zdGFuY2VDbGFzc2VzID0gcm9zSW5zdGFuY2VDbGFzc2VzLmF0dHJJbnN0YW5jZUNsYXNzZXM7XG4gICAgfVxufVxuIl19