"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Instances = exports.InstancesProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const redis_generated_1 = require("./redis.generated");
Object.defineProperty(exports, "InstancesProperty", { enumerable: true, get: function () { return redis_generated_1.RosInstances; } });
/**
 * This class encapsulates and extends the ROS resource type `DATASOURCE::REDIS::Instances`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosInstances`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/datasource-redis-instances
 */
class Instances extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props = {}, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosInstances = new redis_generated_1.RosInstances(this, id, {
            architectureType: props.architectureType,
            engineVersion: props.engineVersion,
            editionType: props.editionType,
            zoneId: props.zoneId,
            resourceGroupId: props.resourceGroupId,
            vSwitchId: props.vSwitchId,
            instanceClass: props.instanceClass,
            expired: props.expired,
            vpcId: props.vpcId,
            privateIp: props.privateIp,
            instanceStatus: props.instanceStatus,
            chargeType: props.chargeType,
            networkType: props.networkType,
            searchKey: props.searchKey,
            globalInstance: props.globalInstance,
            instanceType: props.instanceType,
            instanceIds: props.instanceIds,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosInstances;
        this.attrInstanceIds = rosInstances.attrInstanceIds;
        this.attrInstances = rosInstances.attrInstances;
    }
}
exports.Instances = Instances;
//# sourceMappingURL=data:application/json;base64,