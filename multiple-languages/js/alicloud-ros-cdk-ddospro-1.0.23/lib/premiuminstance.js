"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PremiumInstance = exports.PremiumInstanceProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ddospro_generated_1 = require("./ddospro.generated");
Object.defineProperty(exports, "PremiumInstanceProperty", { enumerable: true, get: function () { return ddospro_generated_1.RosPremiumInstance; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::DDoSPro::PremiumInstance`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosPremiumInstance`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-ddospro-premiuminstance
 */
class PremiumInstance extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props = {}, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosPremiumInstance = new ddospro_generated_1.RosPremiumInstance(this, id, {
            normalQps: props.normalQps,
            normalBandwidth: props.normalBandwidth,
            functionVersion: props.functionVersion,
            productPlan: props.productPlan,
            period: props.period,
            portCount: props.portCount,
            burstBandwidthMode: props.burstBandwidthMode,
            periodUnit: props.periodUnit,
            domainCount: props.domainCount,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosPremiumInstance;
        this.attrInstanceId = rosPremiumInstance.attrInstanceId;
    }
}
exports.PremiumInstance = PremiumInstance;
//# sourceMappingURL=data:application/json;base64,