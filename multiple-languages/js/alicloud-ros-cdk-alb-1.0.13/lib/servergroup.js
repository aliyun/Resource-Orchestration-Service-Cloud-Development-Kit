"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServerGroup = exports.ServerGroupProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const alb_generated_1 = require("./alb.generated");
Object.defineProperty(exports, "ServerGroupProperty", { enumerable: true, get: function () { return alb_generated_1.RosServerGroup; } });
/**
 * A ROS resource type:  `ALIYUN::ALB::ServerGroup`
 */
class ServerGroup extends ros.Resource {
    /**
     * Create a new `ALIYUN::ALB::ServerGroup`.
     *
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosServerGroup = new alb_generated_1.RosServerGroup(this, id, {
            vpcId: props.vpcId,
            resourceGroupId: props.resourceGroupId,
            serviceName: props.serviceName,
            scheduler: props.scheduler,
            stickySessionConfig: props.stickySessionConfig,
            healthCheckConfig: props.healthCheckConfig,
            protocol: props.protocol,
            serverGroupType: props.serverGroupType,
            tags: props.tags,
            serverGroupName: props.serverGroupName,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosServerGroup;
        this.attrServerGroupId = rosServerGroup.attrServerGroupId;
    }
}
exports.ServerGroup = ServerGroup;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyZ3JvdXAuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJzZXJ2ZXJncm91cC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw4Q0FBOEM7QUFDOUMsbURBQWlEO0FBRXRCLG9HQUZsQiw4QkFBYyxPQUV1QjtBQThFOUM7O0dBRUc7QUFDSCxNQUFhLFdBQVksU0FBUSxHQUFHLENBQUMsUUFBUTtJQVl6Qzs7Ozs7O09BTUc7SUFDSCxZQUFZLEtBQW9CLEVBQUUsRUFBVSxFQUFFLEtBQXVCLEVBQUUsbUNBQTJDLElBQUk7UUFDbEgsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUVqQixNQUFNLGNBQWMsR0FBRyxJQUFJLDhCQUFjLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRztZQUNqRCxLQUFLLEVBQUUsS0FBSyxDQUFDLEtBQUs7WUFDbEIsZUFBZSxFQUFFLEtBQUssQ0FBQyxlQUFlO1lBQ3RDLFdBQVcsRUFBRSxLQUFLLENBQUMsV0FBVztZQUM5QixTQUFTLEVBQUUsS0FBSyxDQUFDLFNBQVM7WUFDMUIsbUJBQW1CLEVBQUUsS0FBSyxDQUFDLG1CQUFtQjtZQUM5QyxpQkFBaUIsRUFBRSxLQUFLLENBQUMsaUJBQWlCO1lBQzFDLFFBQVEsRUFBRSxLQUFLLENBQUMsUUFBUTtZQUN4QixlQUFlLEVBQUUsS0FBSyxDQUFDLGVBQWU7WUFDdEMsSUFBSSxFQUFFLEtBQUssQ0FBQyxJQUFJO1lBQ2hCLGVBQWUsRUFBRSxLQUFLLENBQUMsZUFBZTtTQUN6QyxFQUFFLGdDQUFnQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztRQUNwRixJQUFJLENBQUMsUUFBUSxHQUFHLGNBQWMsQ0FBQztRQUMvQixJQUFJLENBQUMsaUJBQWlCLEdBQUcsY0FBYyxDQUFDLGlCQUFpQixDQUFDO0lBQzlELENBQUM7Q0FDSjtBQXJDRCxrQ0FxQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyByb3MgZnJvbSAnQGFsaWNsb3VkL3Jvcy1jZGstY29yZSc7XG5pbXBvcnQgeyBSb3NTZXJ2ZXJHcm91cCB9IGZyb20gJy4vYWxiLmdlbmVyYXRlZCc7XG4vLyBHZW5lcmF0ZWQgZnJvbSB0aGUgQWxpQ2xvdWQgUk9TIFJlc291cmNlIFNwZWNpZmljYXRpb25cbmV4cG9ydCB7IFJvc1NlcnZlckdyb3VwIGFzIFNlcnZlckdyb3VwUHJvcGVydHkgfTtcblxuLyoqXG4gKiBQcm9wZXJ0aWVzIGZvciBkZWZpbmluZyBhIGBBTElZVU46OkFMQjo6U2VydmVyR3JvdXBgXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgU2VydmVyR3JvdXBQcm9wcyB7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBoZWFsdGhDaGVja0NvbmZpZzogVGhlIGNvbmZpZ3VyYXRpb24gb2YgaGVhbHRoIGNoZWNrcy5cbiAgICAgKi9cbiAgICByZWFkb25seSBoZWFsdGhDaGVja0NvbmZpZzogUm9zU2VydmVyR3JvdXAuSGVhbHRoQ2hlY2tDb25maWdQcm9wZXJ0eSB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHNlcnZlckdyb3VwTmFtZTogVGhlIG5hbWUgb2YgdGhlIHNlcnZlciBncm91cC4gVGhlIG5hbWUgbXVzdCBiZSAyIHRvIDEyOCBjaGFyYWN0ZXJzIGluIGxlbmd0aCwgYW5kXG4gICAgICogY2FuIGNvbnRhaW4gbGV0dGVycywgZGlnaXRzLCBwZXJpb2RzICguKSwgdW5kZXJzY29yZXMgKF8pLCBhbmQgaHlwaGVucyAoLSkuIFRoZSBuYW1lXG4gICAgICogbXVzdCBzdGFydCB3aXRoIGEgbGV0dGVyLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHNlcnZlckdyb3VwTmFtZTogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgdnBjSWQ6IFRoZSBJRCBvZiB0aGUgdmlydHVhbCBwcml2YXRlIGNsb3VkIChWUEMpLiBZb3UgY2FuIGFkZCBvbmx5IHNlcnZlcnMgdGhhdCBhcmUgZGVwbG95ZWRcbiAgICAgKiBpbiB0aGUgc3BlY2lmaWVkIFZQQyB0byB0aGUgc2VydmVyIGdyb3VwLlxuICAgICAqIE5vdGUgVGhpcyBwYXJhbWV0ZXIgaXMgcmVxdWlyZWQgaWYgdGhlIFNlcnZlckdyb3VwVHlwZSBwYXJhbWV0ZXIgaXMgc2V0IHRvIEluc3RhbmNlIG9yIElwLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHZwY0lkOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBwcm90b2NvbDogVGhlIHNlcnZlciBwcm90b2NvbC4gVmFsaWQgdmFsdWVzOlxuICAgICAqIEhUVFA6IGFsbG93cyB5b3UgdG8gYXNzb2NpYXRlIEhUVFBTLCBIVFRQLCBvciBRVUlDIGxpc3RlbmVycyB3aXRoIGJhY2tlbmQgc2VydmVycy4gVGhpc1xuICAgICAqIGlzIHRoZSBkZWZhdWx0IHZhbHVlLlxuICAgICAqIEhUVFBTOiBhbGxvd3MgeW91IHRvIGFzc29jaWF0ZSBIVFRQUyBsaXN0ZW5lcnMgd2l0aCBiYWNrZW5kIHNlcnZlcnMuXG4gICAgICovXG4gICAgcmVhZG9ubHkgcHJvdG9jb2w/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSByZXNvdXJjZUdyb3VwSWQ6IFRoZSBJRCBvZiB0aGUgcmVzb3VyY2UgZ3JvdXAuXG4gICAgICovXG4gICAgcmVhZG9ubHkgcmVzb3VyY2VHcm91cElkPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgc2NoZWR1bGVyOiBUaGUgc2NoZWR1bGluZyBhbGdvcml0aG0uIFZhbGlkIHZhbHVlczpcbiAgICAgKiBXcnI6IEJhY2tlbmQgc2VydmVycyB0aGF0IGhhdmUgaGlnaGVyIHdlaWdodHMgcmVjZWl2ZSBtb3JlIHJlcXVlc3RzIHRoYW4gdGhvc2UgdGhhdCBoYXZlXG4gICAgICogbG93ZXIgd2VpZ2h0cy4gVGhpcyBpcyB0aGUgZGVmYXVsdCB2YWx1ZS5cbiAgICAgKiBXbGM6IFJlcXVlc3RzIGFyZSBkaXN0cmlidXRlZCBiYXNlZCBvbiB0aGUgd2VpZ2h0IGFuZCBsb2FkIG9mIGVhY2ggYmFja2VuZCBzZXJ2ZXIuIFRoZVxuICAgICAqIGxvYWQgcmVmZXJzIHRvIHRoZSBudW1iZXIgb2YgY29ubmVjdGlvbnMgdG8gYSBiYWNrZW5kIHNlcnZlci4gSWYgbXVsdGlwbGUgYmFja2VuZFxuICAgICAqIHNlcnZlcnMgaGF2ZSB0aGUgc2FtZSB3ZWlnaHQsIHJlcXVlc3RzIGFyZSByb3V0ZWQgdG8gdGhlIGJhY2tlbmQgc2VydmVyIHdpdGggdGhlIGxlYXN0XG4gICAgICogY29ubmVjdGlvbnMuXG4gICAgICogU2NoOiBzcGVjaWZpZXMgY29uc2lzdGVudCBoYXNoaW5nIHRoYXQgaXMgYmFzZWQgb24gc291cmNlIElQIGFkZHJlc3Nlcy5cbiAgICAgKi9cbiAgICByZWFkb25seSBzY2hlZHVsZXI/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBzZXJ2ZXJHcm91cFR5cGU6IFRoZSB0eXBlIG9mIHRoZSBzZXJ2ZXIgZ3JvdXAuIFZhbGlkIHZhbHVlczpcbiAgICAgKiBJbnN0YW5jZTogYSBzZXJ2ZXIgZ3JvdXAgdGhhdCBjb25zaXN0cyBvZiBzZXJ2ZXJzLiBZb3UgY2FuIGFkZCBFbGFzdGljIENvbXB1dGUgU2VydmljZSAoRUNTKVxuICAgICAqIGluc3RhbmNlcywgZWxhc3RpYyBuZXR3b3JrIGludGVyZmFjZXMgKEVOSXMpLCBhbmQgZWxhc3RpYyBjb250YWluZXIgaW5zdGFuY2VzIHRvIHRoaXNcbiAgICAgKiB0eXBlIG9mIHNlcnZlciBncm91cC4gVGhpcyBpcyB0aGUgZGVmYXVsdCB2YWx1ZS5cbiAgICAgKiBJcDogYSBzZXJ2ZXIgZ3JvdXAgdGhhdCBjb25zaXN0cyBvZiBJUCBhZGRyZXNzZXMuIFlvdSBjYW4gYWRkIElQIGFkZHJlc3NlcyB0byB0aGlzIHR5cGVcbiAgICAgKiBvZiBzZXJ2ZXIgZ3JvdXAuXG4gICAgICovXG4gICAgcmVhZG9ubHkgc2VydmVyR3JvdXBUeXBlPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgc2VydmljZU5hbWU6IFRoaXMgcGFyYW1ldGVyIGlzIGF2YWlsYWJsZSBvbmx5IGlmIHRoZSBBTEIgSW5ncmVzcyBjb250cm9sbGVyIGlzIHVzZWQuIEluIHRoaXMgY2FzZSwgc2V0IHRoZSBwYXJhbWV0ZXIgdG8gdGhlIG5hbWUgb2YgdGhlIEt1YmVybmV0ZXMgU2VydmljZSB0aGF0IGlzIGFzc29jaWF0ZWQgd2l0aCB0aGUgc2VydmVyIGdyb3VwLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHNlcnZpY2VOYW1lPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgc3RpY2t5U2Vzc2lvbkNvbmZpZzogVGhlIGNvbmZpZ3VyYXRpb24gb2Ygc2Vzc2lvbiBwZXJzaXN0ZW5jZS5cbiAgICAgKiBOb3RlIFRoaXMgcGFyYW1ldGVyIGlzIHJlcXVpcmVkIGlmIHRoZSBTZXJ2ZXJHcm91cFR5cGUgcGFyYW1ldGVyIGlzIHNldCB0byBJbnN0YW5jZSBvciBJcC5cbiAgICAgKi9cbiAgICByZWFkb25seSBzdGlja3lTZXNzaW9uQ29uZmlnPzogUm9zU2VydmVyR3JvdXAuU3RpY2t5U2Vzc2lvbkNvbmZpZ1Byb3BlcnR5IHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgdGFnczogVGFncyB0byBhdHRhY2ggdG8gaW5zdGFuY2UuIE1heCBzdXBwb3J0IDIwIHRhZ3MgdG8gYWRkIGR1cmluZyBjcmVhdGUgaW5zdGFuY2UuIEVhY2ggdGFnIHdpdGggdHdvIHByb3BlcnRpZXMgS2V5IGFuZCBWYWx1ZSwgYW5kIEtleSBpcyByZXF1aXJlZC5cbiAgICAgKi9cbiAgICByZWFkb25seSB0YWdzPzogUm9zU2VydmVyR3JvdXAuVGFnc1Byb3BlcnR5W107XG59XG5cbi8qKlxuICogQSBST1MgcmVzb3VyY2UgdHlwZTogIGBBTElZVU46OkFMQjo6U2VydmVyR3JvdXBgXG4gKi9cbmV4cG9ydCBjbGFzcyBTZXJ2ZXJHcm91cCBleHRlbmRzIHJvcy5SZXNvdXJjZSB7XG5cbiAgICAvKipcbiAgICAgKiBBIGZhY3RvcnkgbWV0aG9kIHRoYXQgY3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzIGZyb20gYW4gb2JqZWN0XG4gICAgICogY29udGFpbmluZyB0aGUgcHJvcGVydGllcyBvZiB0aGlzIFJPUyByZXNvdXJjZSwgd2hpY2ggd2lsbCBiZSBhc3NpZ25lZCB0byBST1MgcmVzb3VyY2UuXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgU2VydmVyR3JvdXBJZDogVGhlIElEIG9mIHRoZSBzZXJ2ZXIgZ3JvdXAuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJTZXJ2ZXJHcm91cElkOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgYEFMSVlVTjo6QUxCOjpTZXJ2ZXJHcm91cGAuXG4gICAgICpcbiAgICAgKiBQYXJhbSBzY29wZSAtIHNjb3BlIGluIHdoaWNoIHRoaXMgcmVzb3VyY2UgaXMgZGVmaW5lZFxuICAgICAqIFBhcmFtIGlkICAgIC0gc2NvcGVkIGlkIG9mIHRoZSByZXNvdXJjZVxuICAgICAqIFBhcmFtIHByb3BzIC0gcmVzb3VyY2UgcHJvcGVydGllc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiByb3MuQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogU2VydmVyR3JvdXBQcm9wcywgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6Ym9vbGVhbiA9IHRydWUpIHtcbiAgICAgICAgc3VwZXIoc2NvcGUsIGlkKTtcblxuICAgICAgICBjb25zdCByb3NTZXJ2ZXJHcm91cCA9IG5ldyBSb3NTZXJ2ZXJHcm91cCh0aGlzLCBpZCwgIHtcbiAgICAgICAgICAgIHZwY0lkOiBwcm9wcy52cGNJZCxcbiAgICAgICAgICAgIHJlc291cmNlR3JvdXBJZDogcHJvcHMucmVzb3VyY2VHcm91cElkLFxuICAgICAgICAgICAgc2VydmljZU5hbWU6IHByb3BzLnNlcnZpY2VOYW1lLFxuICAgICAgICAgICAgc2NoZWR1bGVyOiBwcm9wcy5zY2hlZHVsZXIsXG4gICAgICAgICAgICBzdGlja3lTZXNzaW9uQ29uZmlnOiBwcm9wcy5zdGlja3lTZXNzaW9uQ29uZmlnLFxuICAgICAgICAgICAgaGVhbHRoQ2hlY2tDb25maWc6IHByb3BzLmhlYWx0aENoZWNrQ29uZmlnLFxuICAgICAgICAgICAgcHJvdG9jb2w6IHByb3BzLnByb3RvY29sLFxuICAgICAgICAgICAgc2VydmVyR3JvdXBUeXBlOiBwcm9wcy5zZXJ2ZXJHcm91cFR5cGUsXG4gICAgICAgICAgICB0YWdzOiBwcm9wcy50YWdzLFxuICAgICAgICAgICAgc2VydmVyR3JvdXBOYW1lOiBwcm9wcy5zZXJ2ZXJHcm91cE5hbWUsXG4gICAgICAgIH0sIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ICYmIHRoaXMuc3RhY2suZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQpO1xuICAgICAgICB0aGlzLnJlc291cmNlID0gcm9zU2VydmVyR3JvdXA7XG4gICAgICAgIHRoaXMuYXR0clNlcnZlckdyb3VwSWQgPSByb3NTZXJ2ZXJHcm91cC5hdHRyU2VydmVyR3JvdXBJZDtcbiAgICB9XG59XG4iXX0=