"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SecurityPreference = exports.SecurityPreferenceProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ram_generated_1 = require("./ram.generated");
Object.defineProperty(exports, "SecurityPreferenceProperty", { enumerable: true, get: function () { return ram_generated_1.RosSecurityPreference; } });
/**
 * A ROS resource type:  `ALIYUN::RAM::SecurityPreference`
 */
class SecurityPreference extends ros.Resource {
    /**
     * Create a new `ALIYUN::RAM::SecurityPreference`.
     *
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props = {}, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosSecurityPreference = new ram_generated_1.RosSecurityPreference(this, id, {
            loginSessionDuration: props.loginSessionDuration,
            allowUserToManageMfaDevices: props.allowUserToManageMfaDevices,
            allowUserToManagePublicKeys: props.allowUserToManagePublicKeys,
            loginNetworkMasks: props.loginNetworkMasks,
            allowUserToChangePassword: props.allowUserToChangePassword,
            allowUserToManageAccessKeys: props.allowUserToManageAccessKeys,
            enableSaveMfaTicket: props.enableSaveMfaTicket,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosSecurityPreference;
        this.attrAllowUserToChangePassword = rosSecurityPreference.attrAllowUserToChangePassword;
        this.attrAllowUserToManageAccessKeys = rosSecurityPreference.attrAllowUserToManageAccessKeys;
        this.attrAllowUserToManageMfaDevices = rosSecurityPreference.attrAllowUserToManageMfaDevices;
        this.attrAllowUserToManagePublicKeys = rosSecurityPreference.attrAllowUserToManagePublicKeys;
        this.attrEnableSaveMfaTicket = rosSecurityPreference.attrEnableSaveMfaTicket;
        this.attrLoginNetworkMasks = rosSecurityPreference.attrLoginNetworkMasks;
        this.attrLoginSessionDuration = rosSecurityPreference.attrLoginSessionDuration;
    }
}
exports.SecurityPreference = SecurityPreference;
//# sourceMappingURL=data:application/json;base64,