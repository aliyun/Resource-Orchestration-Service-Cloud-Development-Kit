"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VpcCidrBlockAssociation = exports.VpcCidrBlockAssociationProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const vpc_generated_1 = require("./vpc.generated");
Object.defineProperty(exports, "VpcCidrBlockAssociationProperty", { enumerable: true, get: function () { return vpc_generated_1.RosVpcCidrBlockAssociation; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::VPC::VpcCidrBlockAssociation`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosVpcCidrBlockAssociation`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-vpc-vpccidrblockassociation
 */
class VpcCidrBlockAssociation extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosVpcCidrBlockAssociation = new vpc_generated_1.RosVpcCidrBlockAssociation(this, id, {
            ipv6Isp: props.ipv6Isp,
            secondaryCidrMask: props.secondaryCidrMask,
            secondaryCidrBlock: props.secondaryCidrBlock,
            vpcId: props.vpcId,
            ipVersion: props.ipVersion,
            ipamPoolId: props.ipamPoolId,
            iPv6CidrBlock: props.iPv6CidrBlock,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosVpcCidrBlockAssociation;
        this.attrVpcId = rosVpcCidrBlockAssociation.attrVpcId;
    }
}
exports.VpcCidrBlockAssociation = VpcCidrBlockAssociation;
//# sourceMappingURL=data:application/json;base64,