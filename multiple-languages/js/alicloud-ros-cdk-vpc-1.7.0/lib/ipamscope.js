"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IpamScope = exports.IpamScopeProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const vpc_generated_1 = require("./vpc.generated");
Object.defineProperty(exports, "IpamScopeProperty", { enumerable: true, get: function () { return vpc_generated_1.RosIpamScope; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::VPC::IpamScope`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosIpamScope`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-vpc-ipamscope
 */
class IpamScope extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosIpamScope = new vpc_generated_1.RosIpamScope(this, id, {
            ipamScopeName: props.ipamScopeName,
            ipamId: props.ipamId,
            ipamScopeDescription: props.ipamScopeDescription,
            ipamScopeType: props.ipamScopeType,
            tags: props.tags,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosIpamScope;
        this.attrCreateTime = rosIpamScope.attrCreateTime;
        this.attrIpamId = rosIpamScope.attrIpamId;
        this.attrIpamScopeDescription = rosIpamScope.attrIpamScopeDescription;
        this.attrIpamScopeId = rosIpamScope.attrIpamScopeId;
        this.attrIpamScopeName = rosIpamScope.attrIpamScopeName;
        this.attrIpamScopeType = rosIpamScope.attrIpamScopeType;
        this.attrTags = rosIpamScope.attrTags;
    }
}
exports.IpamScope = IpamScope;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXBhbXNjb3BlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiaXBhbXNjb3BlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDhDQUE4QztBQUM5QyxtREFBK0M7QUFFdEIsa0dBRmhCLDRCQUFZLE9BRXFCO0FBK0UxQzs7OztHQUlHO0FBQ0gsTUFBYSxTQUFVLFNBQVEsR0FBRyxDQUFDLFFBQVE7SUF5Q3ZDOzs7O09BSUc7SUFDSCxZQUFZLEtBQW9CLEVBQUUsRUFBVSxFQUFFLEtBQXFCLEVBQUUsbUNBQTJDLElBQUk7UUFDaEgsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNqQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUNiLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxnQ0FBZ0MsR0FBRyxnQ0FBZ0MsQ0FBQztRQUV6RSxNQUFNLFlBQVksR0FBRyxJQUFJLDRCQUFZLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRztZQUM3QyxhQUFhLEVBQUUsS0FBSyxDQUFDLGFBQWE7WUFDbEMsTUFBTSxFQUFFLEtBQUssQ0FBQyxNQUFNO1lBQ3BCLG9CQUFvQixFQUFFLEtBQUssQ0FBQyxvQkFBb0I7WUFDaEQsYUFBYSxFQUFFLEtBQUssQ0FBQyxhQUFhO1lBQ2xDLElBQUksRUFBRSxLQUFLLENBQUMsSUFBSTtTQUNuQixFQUFFLGdDQUFnQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztRQUNwRixJQUFJLENBQUMsUUFBUSxHQUFHLFlBQVksQ0FBQztRQUM3QixJQUFJLENBQUMsY0FBYyxHQUFHLFlBQVksQ0FBQyxjQUFjLENBQUM7UUFDbEQsSUFBSSxDQUFDLFVBQVUsR0FBRyxZQUFZLENBQUMsVUFBVSxDQUFDO1FBQzFDLElBQUksQ0FBQyx3QkFBd0IsR0FBRyxZQUFZLENBQUMsd0JBQXdCLENBQUM7UUFDdEUsSUFBSSxDQUFDLGVBQWUsR0FBRyxZQUFZLENBQUMsZUFBZSxDQUFDO1FBQ3BELElBQUksQ0FBQyxpQkFBaUIsR0FBRyxZQUFZLENBQUMsaUJBQWlCLENBQUM7UUFDeEQsSUFBSSxDQUFDLGlCQUFpQixHQUFHLFlBQVksQ0FBQyxpQkFBaUIsQ0FBQztRQUN4RCxJQUFJLENBQUMsUUFBUSxHQUFHLFlBQVksQ0FBQyxRQUFRLENBQUM7SUFDMUMsQ0FBQztDQUNKO0FBckVELDhCQXFFQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHJvcyBmcm9tICdAYWxpY2xvdWQvcm9zLWNkay1jb3JlJztcbmltcG9ydCB7IFJvc0lwYW1TY29wZSB9IGZyb20gJy4vdnBjLmdlbmVyYXRlZCc7XG4vLyBHZW5lcmF0ZWQgZnJvbSB0aGUgQWxpQ2xvdWQgUk9TIFJlc291cmNlIFNwZWNpZmljYXRpb25cbmV4cG9ydCB7IFJvc0lwYW1TY29wZSBhcyBJcGFtU2NvcGVQcm9wZXJ0eSB9O1xuXG4vKipcbiAqIFByb3BlcnRpZXMgZm9yIGRlZmluaW5nIGEgYElwYW1TY29wZWAuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2FsaXl1bi12cGMtaXBhbXNjb3BlXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSXBhbVNjb3BlUHJvcHMge1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgaXBhbUlkOiBUaGUgaWQgb2YgdGhlIElwYW0gaW5zdGFuY2UuXG4gICAgICovXG4gICAgcmVhZG9ubHkgaXBhbUlkOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBpcGFtU2NvcGVEZXNjcmlwdGlvbjogVGhlIGRlc2NyaXB0aW9uIG9mIHRoZSBJUEFNJ3Mgc2NvcGUgb2YgYWN0aW9uLlxuICAgICAqIEl0IG11c3QgYmUgMiB0byAyNTYgY2hhcmFjdGVycyBpbiBsZW5ndGggYW5kIG11c3Qgc3RhcnQgd2l0aCBhIGxvd2VyY2FzZSBsZXR0ZXIsIGJ1dCBjYW5ub3Qgc3RhcnQgd2l0aCAnaHR0cDpcXC9cXC8gJ29yICdodHRwcy4gSWYgaXQgaXMgbm90IGZpbGxlZCBpbiwgaXQgaXMgZW1wdHkuIFRoZSBkZWZhdWx0IHZhbHVlIGlzIGVtcHR5LlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGlwYW1TY29wZURlc2NyaXB0aW9uPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgaXBhbVNjb3BlTmFtZTogVGhlIG5hbWUgb2YgdGhlIElQQU0gc2NvcGUuXG4gICAgICovXG4gICAgcmVhZG9ubHkgaXBhbVNjb3BlTmFtZT86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGlwYW1TY29wZVR5cGU6IElQQU0gc2NvcGUgb2YgYWN0aW9uIHR5cGU6XG4gICAgICogKipwcml2YXRlKiouXG4gICAgICogXG4gICAgICogPiBDdXJyZW50bHksIG9ubHkgdGhlIHJvbGUgc2NvcGUgb2YgdGhlIHByaXZhdGUgbmV0d29yayBpcyBzdXBwb3J0ZWQuXG4gICAgICovXG4gICAgcmVhZG9ubHkgaXBhbVNjb3BlVHlwZT86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHRhZ3M6IFRhZ3Mgb2YgaXBhbSBzY29wZS5cbiAgICAgKi9cbiAgICByZWFkb25seSB0YWdzPzogUm9zSXBhbVNjb3BlLlRhZ3NQcm9wZXJ0eVtdO1xufVxuXG4vKipcbiAqIFJlcHJlc2VudHMgYSBgSXBhbVNjb3BlYC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJSXBhbVNjb3BlIGV4dGVuZHMgcm9zLklSZXNvdXJjZSB7XG4gICAgcmVhZG9ubHkgcHJvcHM6IElwYW1TY29wZVByb3BzO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIENyZWF0ZVRpbWU6IFRoZSBjcmVhdGlvbiB0aW1lIG9mIHRoZSBJUEFNIHNjb3BlLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGF0dHJDcmVhdGVUaW1lOiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgSXBhbUlkOiBUaGUgaWQgb2YgdGhlIElwYW0gaW5zdGFuY2UuXG4gICAgICovXG4gICAgcmVhZG9ubHkgYXR0cklwYW1JZDogcm9zLklSZXNvbHZhYmxlIHwgc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIElwYW1TY29wZURlc2NyaXB0aW9uOiBUaGUgZGVzY3JpcHRpb24gb2YgdGhlIElQQU0ncyBzY29wZSBvZiBhY3Rpb24uXG4gICAgICovXG4gICAgcmVhZG9ubHkgYXR0cklwYW1TY29wZURlc2NyaXB0aW9uOiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgSXBhbVNjb3BlSWQ6IFRoZSBJRCBvZiB0aGUgSVBBTSBzY29wZS5cbiAgICAgKi9cbiAgICByZWFkb25seSBhdHRySXBhbVNjb3BlSWQ6IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBJcGFtU2NvcGVOYW1lOiBUaGUgbmFtZSBvZiB0aGUgSVBBTSBzY29wZS5cbiAgICAgKi9cbiAgICByZWFkb25seSBhdHRySXBhbVNjb3BlTmFtZTogcm9zLklSZXNvbHZhYmxlIHwgc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIElwYW1TY29wZVR5cGU6IElQQU0gc2NvcGUgb2YgYWN0aW9uIHR5cGUuXG4gICAgICovXG4gICAgcmVhZG9ubHkgYXR0cklwYW1TY29wZVR5cGU6IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBUYWdzOiBUaGUgdGFnIG9mIHRoZSBJUEFNIHNjb3BlLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGF0dHJUYWdzOiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG59XG4vKipcbiAqIFRoaXMgY2xhc3MgZW5jYXBzdWxhdGVzIGFuZCBleHRlbmRzIHRoZSBST1MgcmVzb3VyY2UgdHlwZSBgQUxJWVVOOjpWUEM6OklwYW1TY29wZWAuXG4gKiBATm90ZSBUaGlzIGNsYXNzIG1heSBoYXZlIHNvbWUgbmV3IGZ1bmN0aW9ucyB0byBmYWNpbGl0YXRlIGRldmVsb3BtZW50LCBzbyBpdCBpcyByZWNvbW1lbmRlZCB0byB1c2UgdGhpcyBjbGFzcyBpbnN0ZWFkIG9mIGBSb3NJcGFtU2NvcGVgZm9yIGEgbW9yZSBjb252ZW5pZW50IGRldmVsb3BtZW50IGV4cGVyaWVuY2UuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2FsaXl1bi12cGMtaXBhbXNjb3BlXG4gKi9cbmV4cG9ydCBjbGFzcyBJcGFtU2NvcGUgZXh0ZW5kcyByb3MuUmVzb3VyY2UgaW1wbGVtZW50cyBJSXBhbVNjb3BlIHtcbiAgICBwcm90ZWN0ZWQgc2NvcGU6IHJvcy5Db25zdHJ1Y3Q7XG4gICAgcHJvdGVjdGVkIGlkOiBzdHJpbmc7XG4gICAgcHVibGljIHJlYWRvbmx5IHByb3BzOiBJcGFtU2NvcGVQcm9wcztcbiAgICBwcm90ZWN0ZWQgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6IGJvb2xlYW47XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgQ3JlYXRlVGltZTogVGhlIGNyZWF0aW9uIHRpbWUgb2YgdGhlIElQQU0gc2NvcGUuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJDcmVhdGVUaW1lOiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgSXBhbUlkOiBUaGUgaWQgb2YgdGhlIElwYW0gaW5zdGFuY2UuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJJcGFtSWQ6IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBJcGFtU2NvcGVEZXNjcmlwdGlvbjogVGhlIGRlc2NyaXB0aW9uIG9mIHRoZSBJUEFNJ3Mgc2NvcGUgb2YgYWN0aW9uLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRySXBhbVNjb3BlRGVzY3JpcHRpb246IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBJcGFtU2NvcGVJZDogVGhlIElEIG9mIHRoZSBJUEFNIHNjb3BlLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRySXBhbVNjb3BlSWQ6IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBJcGFtU2NvcGVOYW1lOiBUaGUgbmFtZSBvZiB0aGUgSVBBTSBzY29wZS5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0cklwYW1TY29wZU5hbWU6IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBJcGFtU2NvcGVUeXBlOiBJUEFNIHNjb3BlIG9mIGFjdGlvbiB0eXBlLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRySXBhbVNjb3BlVHlwZTogcm9zLklSZXNvbHZhYmxlIHwgc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIFRhZ3M6IFRoZSB0YWcgb2YgdGhlIElQQU0gc2NvcGUuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJUYWdzOiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBQYXJhbSBzY29wZSAtIHNjb3BlIGluIHdoaWNoIHRoaXMgcmVzb3VyY2UgaXMgZGVmaW5lZFxuICAgICAqIFBhcmFtIGlkICAgIC0gc2NvcGVkIGlkIG9mIHRoZSByZXNvdXJjZVxuICAgICAqIFBhcmFtIHByb3BzIC0gcmVzb3VyY2UgcHJvcGVydGllc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiByb3MuQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogSXBhbVNjb3BlUHJvcHMsIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OmJvb2xlYW4gPSB0cnVlKSB7XG4gICAgICAgIHN1cGVyKHNjb3BlLCBpZCk7XG4gICAgICAgIHRoaXMuc2NvcGUgPSBzY29wZTtcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xuICAgICAgICB0aGlzLnByb3BzID0gcHJvcHM7XG4gICAgICAgIHRoaXMuZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgPSBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDtcblxuICAgICAgICBjb25zdCByb3NJcGFtU2NvcGUgPSBuZXcgUm9zSXBhbVNjb3BlKHRoaXMsIGlkLCAge1xuICAgICAgICAgICAgaXBhbVNjb3BlTmFtZTogcHJvcHMuaXBhbVNjb3BlTmFtZSxcbiAgICAgICAgICAgIGlwYW1JZDogcHJvcHMuaXBhbUlkLFxuICAgICAgICAgICAgaXBhbVNjb3BlRGVzY3JpcHRpb246IHByb3BzLmlwYW1TY29wZURlc2NyaXB0aW9uLFxuICAgICAgICAgICAgaXBhbVNjb3BlVHlwZTogcHJvcHMuaXBhbVNjb3BlVHlwZSxcbiAgICAgICAgICAgIHRhZ3M6IHByb3BzLnRhZ3MsXG4gICAgICAgIH0sIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ICYmIHRoaXMuc3RhY2suZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQpO1xuICAgICAgICB0aGlzLnJlc291cmNlID0gcm9zSXBhbVNjb3BlO1xuICAgICAgICB0aGlzLmF0dHJDcmVhdGVUaW1lID0gcm9zSXBhbVNjb3BlLmF0dHJDcmVhdGVUaW1lO1xuICAgICAgICB0aGlzLmF0dHJJcGFtSWQgPSByb3NJcGFtU2NvcGUuYXR0cklwYW1JZDtcbiAgICAgICAgdGhpcy5hdHRySXBhbVNjb3BlRGVzY3JpcHRpb24gPSByb3NJcGFtU2NvcGUuYXR0cklwYW1TY29wZURlc2NyaXB0aW9uO1xuICAgICAgICB0aGlzLmF0dHJJcGFtU2NvcGVJZCA9IHJvc0lwYW1TY29wZS5hdHRySXBhbVNjb3BlSWQ7XG4gICAgICAgIHRoaXMuYXR0cklwYW1TY29wZU5hbWUgPSByb3NJcGFtU2NvcGUuYXR0cklwYW1TY29wZU5hbWU7XG4gICAgICAgIHRoaXMuYXR0cklwYW1TY29wZVR5cGUgPSByb3NJcGFtU2NvcGUuYXR0cklwYW1TY29wZVR5cGU7XG4gICAgICAgIHRoaXMuYXR0clRhZ3MgPSByb3NJcGFtU2NvcGUuYXR0clRhZ3M7XG4gICAgfVxufVxuIl19