"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RouteEntries = exports.RouteEntriesProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const vpc_generated_1 = require("./vpc.generated");
Object.defineProperty(exports, "RouteEntriesProperty", { enumerable: true, get: function () { return vpc_generated_1.RosRouteEntries; } });
/**
 * This class encapsulates and extends the ROS resource type `DATASOURCE::VPC::RouteEntries`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosRouteEntries`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/datasource-vpc-routeentries
 */
class RouteEntries extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosRouteEntries = new vpc_generated_1.RosRouteEntries(this, id, {
            nextHopType: props.nextHopType,
            routeEntryId: props.routeEntryId,
            routeTableId: props.routeTableId,
            ipVersion: props.ipVersion,
            routeEntryName: props.routeEntryName,
            routeEntryType: props.routeEntryType,
            nextHopId: props.nextHopId,
            destinationCidrBlock: props.destinationCidrBlock,
            refreshOptions: props.refreshOptions === undefined || props.refreshOptions === null ? 'Never' : props.refreshOptions,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosRouteEntries;
        this.attrRouteEntries = rosRouteEntries.attrRouteEntries;
        this.attrRouteEntryIds = rosRouteEntries.attrRouteEntryIds;
    }
}
exports.RouteEntries = RouteEntries;
//# sourceMappingURL=data:application/json;base64,