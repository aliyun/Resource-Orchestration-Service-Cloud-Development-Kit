"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VSwitch = exports.VSwitchProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const vpc_generated_1 = require("./vpc.generated");
Object.defineProperty(exports, "VSwitchProperty", { enumerable: true, get: function () { return vpc_generated_1.RosVSwitch; } });
/**
 * This class encapsulates and extends the ROS resource type `DATASOURCE::VPC::VSwitch`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosVSwitch`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/datasource-vpc-vswitch
 */
class VSwitch extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosVSwitch = new vpc_generated_1.RosVSwitch(this, id, {
            vSwitchId: props.vSwitchId,
            refreshOptions: props.refreshOptions === undefined || props.refreshOptions === null ? 'Never' : props.refreshOptions,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosVSwitch;
        this.attrAvailableIpAddressCount = rosVSwitch.attrAvailableIpAddressCount;
        this.attrCidrBlock = rosVSwitch.attrCidrBlock;
        this.attrCreateTime = rosVSwitch.attrCreateTime;
        this.attrDescription = rosVSwitch.attrDescription;
        this.attrIpv6CidrBlock = rosVSwitch.attrIpv6CidrBlock;
        this.attrIsDefault = rosVSwitch.attrIsDefault;
        this.attrResourceGroupId = rosVSwitch.attrResourceGroupId;
        this.attrRouteTableId = rosVSwitch.attrRouteTableId;
        this.attrTags = rosVSwitch.attrTags;
        this.attrVSwitchId = rosVSwitch.attrVSwitchId;
        this.attrVSwitchName = rosVSwitch.attrVSwitchName;
        this.attrVpcId = rosVSwitch.attrVpcId;
        this.attrZoneId = rosVSwitch.attrZoneId;
    }
}
exports.VSwitch = VSwitch;
//# sourceMappingURL=data:application/json;base64,