"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VpnConnection = exports.VpnConnectionProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const vpc_generated_1 = require("./vpc.generated");
Object.defineProperty(exports, "VpnConnectionProperty", { enumerable: true, get: function () { return vpc_generated_1.RosVpnConnection; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::VPC::VpnConnection`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosVpnConnection`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-vpc-vpnconnection
 */
class VpnConnection extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosVpnConnection = new vpc_generated_1.RosVpnConnection(this, id, {
            localSubnet: props.localSubnet,
            customerGatewayId: props.customerGatewayId,
            enableTunnelsBgp: props.enableTunnelsBgp,
            autoConfigRoute: props.autoConfigRoute,
            name: props.name,
            effectImmediately: props.effectImmediately === undefined || props.effectImmediately === null ? false : props.effectImmediately,
            bgpConfig: props.bgpConfig,
            tunnelOptionsSpecification: props.tunnelOptionsSpecification,
            remoteSubnet: props.remoteSubnet,
            vpnGatewayId: props.vpnGatewayId,
            ipsecConfig: props.ipsecConfig,
            remoteCaCertificate: props.remoteCaCertificate,
            healthCheckConfig: props.healthCheckConfig,
            enableNatTraversal: props.enableNatTraversal,
            ikeConfig: props.ikeConfig,
            enableDpd: props.enableDpd,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosVpnConnection;
        this.attrPeerVpnConnectionConfig = rosVpnConnection.attrPeerVpnConnectionConfig;
        this.attrStatus = rosVpnConnection.attrStatus;
        this.attrVpnConnectionId = rosVpnConnection.attrVpnConnectionId;
    }
}
exports.VpnConnection = VpnConnection;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidnBuY29ubmVjdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInZwbmNvbm5lY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsOENBQThDO0FBQzlDLG1EQUFtRDtBQUV0QixzR0FGcEIsZ0NBQWdCLE9BRXlCO0FBaUlsRDs7OztHQUlHO0FBQ0gsTUFBYSxhQUFjLFNBQVEsR0FBRyxDQUFDLFFBQVE7SUFxQjNDOzs7O09BSUc7SUFDSCxZQUFZLEtBQW9CLEVBQUUsRUFBVSxFQUFFLEtBQXlCLEVBQUUsbUNBQTJDLElBQUk7UUFDcEgsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNqQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUNiLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxnQ0FBZ0MsR0FBRyxnQ0FBZ0MsQ0FBQztRQUV6RSxNQUFNLGdCQUFnQixHQUFHLElBQUksZ0NBQWdCLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRztZQUNyRCxXQUFXLEVBQUUsS0FBSyxDQUFDLFdBQVc7WUFDOUIsaUJBQWlCLEVBQUUsS0FBSyxDQUFDLGlCQUFpQjtZQUMxQyxnQkFBZ0IsRUFBRSxLQUFLLENBQUMsZ0JBQWdCO1lBQ3hDLGVBQWUsRUFBRSxLQUFLLENBQUMsZUFBZTtZQUN0QyxJQUFJLEVBQUUsS0FBSyxDQUFDLElBQUk7WUFDaEIsaUJBQWlCLEVBQUUsS0FBSyxDQUFDLGlCQUFpQixLQUFLLFNBQVMsSUFBSSxLQUFLLENBQUMsaUJBQWlCLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxpQkFBaUI7WUFDOUgsU0FBUyxFQUFFLEtBQUssQ0FBQyxTQUFTO1lBQzFCLDBCQUEwQixFQUFFLEtBQUssQ0FBQywwQkFBMEI7WUFDNUQsWUFBWSxFQUFFLEtBQUssQ0FBQyxZQUFZO1lBQ2hDLFlBQVksRUFBRSxLQUFLLENBQUMsWUFBWTtZQUNoQyxXQUFXLEVBQUUsS0FBSyxDQUFDLFdBQVc7WUFDOUIsbUJBQW1CLEVBQUUsS0FBSyxDQUFDLG1CQUFtQjtZQUM5QyxpQkFBaUIsRUFBRSxLQUFLLENBQUMsaUJBQWlCO1lBQzFDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxrQkFBa0I7WUFDNUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxTQUFTO1lBQzFCLFNBQVMsRUFBRSxLQUFLLENBQUMsU0FBUztTQUM3QixFQUFFLGdDQUFnQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztRQUNwRixJQUFJLENBQUMsUUFBUSxHQUFHLGdCQUFnQixDQUFDO1FBQ2pDLElBQUksQ0FBQywyQkFBMkIsR0FBRyxnQkFBZ0IsQ0FBQywyQkFBMkIsQ0FBQztRQUNoRixJQUFJLENBQUMsVUFBVSxHQUFHLGdCQUFnQixDQUFDLFVBQVUsQ0FBQztRQUM5QyxJQUFJLENBQUMsbUJBQW1CLEdBQUcsZ0JBQWdCLENBQUMsbUJBQW1CLENBQUM7SUFDcEUsQ0FBQztDQUNKO0FBeERELHNDQXdEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHJvcyBmcm9tICdAYWxpY2xvdWQvcm9zLWNkay1jb3JlJztcbmltcG9ydCB7IFJvc1ZwbkNvbm5lY3Rpb24gfSBmcm9tICcuL3ZwYy5nZW5lcmF0ZWQnO1xuLy8gR2VuZXJhdGVkIGZyb20gdGhlIEFsaUNsb3VkIFJPUyBSZXNvdXJjZSBTcGVjaWZpY2F0aW9uXG5leHBvcnQgeyBSb3NWcG5Db25uZWN0aW9uIGFzIFZwbkNvbm5lY3Rpb25Qcm9wZXJ0eSB9O1xuXG4vKipcbiAqIFByb3BlcnRpZXMgZm9yIGRlZmluaW5nIGEgYFZwbkNvbm5lY3Rpb25gLlxuICogU2VlIGh0dHBzOi8vd3d3LmFsaWJhYmFjbG91ZC5jb20vaGVscC9yb3MvZGV2ZWxvcGVyLXJlZmVyZW5jZS9hbGl5dW4tdnBjLXZwbmNvbm5lY3Rpb25cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBWcG5Db25uZWN0aW9uUHJvcHMge1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgbG9jYWxTdWJuZXQ6IEEgbmV0d29yayBzZWdtZW50IG9uIHRoZSBWUEMgc2lkZSB0aGF0IG5lZWRzIHRvIGJlIGludGVyY29ubmVjdGVkIHdpdGggdGhlIGxvY2FsIElEQyBmb3IgdGhlIHNlY29uZCBwaGFzZSBuZWdvdGlhdGlvbi5cbiAgICAgKiBNdWx0aXBsZSBuZXR3b3JrIHNlZ21lbnRzIGFyZSBzZXBhcmF0ZWQgYnkgY29tbWFzLCBmb3IgZXhhbXBsZTogMTkyLjE2OC4xLjBcXC8yNCwgMTkyLjE2OC4yLjBcXC8yNC5cbiAgICAgKi9cbiAgICByZWFkb25seSBsb2NhbFN1Ym5ldDogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgcmVtb3RlU3VibmV0OiBUaGUgbmV0d29yayBzZWdtZW50IG9mIHRoZSBsb2NhbCBJREMgaXMgdXNlZCBmb3IgdGhlIHNlY29uZCBwaGFzZSBuZWdvdGlhdGlvbi5cbiAgICAgKiBNdWx0aXBsZSBuZXR3b3JrIHNlZ21lbnRzIGFyZSBzZXBhcmF0ZWQgYnkgY29tbWFzLCBmb3IgZXhhbXBsZTogMTkyLjE2OC4zLjBcXC8yNCwgMTkyLjE2OC40LjBcXC8yNC5cbiAgICAgKi9cbiAgICByZWFkb25seSByZW1vdGVTdWJuZXQ6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHZwbkdhdGV3YXlJZDogSUQgb2YgdGhlIFZQTiBnYXRld2F5LlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHZwbkdhdGV3YXlJZDogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgYXV0b0NvbmZpZ1JvdXRlOiBTcGVjaWZpZXMgd2hldGhlciB0byBhdXRvbWF0aWNhbGx5IGNvbmZpZ3VyZSByb3V0ZXMuIFZhbGlkIHZhbHVlczpcbiAgICAgKiB0cnVlIChkZWZhdWx0KSBcbiAgICAgKiBmYWxzZVxuICAgICAqL1xuICAgIHJlYWRvbmx5IGF1dG9Db25maWdSb3V0ZT86IGJvb2xlYW4gfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBiZ3BDb25maWc6IFRoZSBCb3JkZXIgR2F0ZXdheSBQcm90b2NvbCAoQkdQKSBjb25maWd1cmF0aW9uLlxuICAgICAqIFRoaXMgcGFyYW1ldGVyIGlzIHJlcXVpcmVkIHdoZW4gdGhlIFZQTiBnYXRld2F5IGhhcyBkeW5hbWljIEJHUCBlbmFibGVkLlxuICAgICAqIEJlZm9yZSB5b3UgY29uZmlndXJlIEJHUCwgd2UgcmVjb21tZW5kIHRoYXQgeW91IGxlYXJuIGFib3V0IGhvdyBCR1Agd29ya3MgYW5kIGl0cyBsaW1pdHMuIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgVlBOIEdhdGV3YXkgc3VwcG9ydHMgQkdQIGR5bmFtaWMgcm91dGluZy5cbiAgICAgKiBXZSByZWNvbW1lbmQgdGhhdCB5b3UgdXNlIGEgcHJpdmF0ZSBBU04gdG8gZXN0YWJsaXNoIGEgY29ubmVjdGlvbiB3aXRoIEFsaWJhYmEgQ2xvdWQgb3ZlciBCR1AuIFxuICAgICAqIFJlZmVyIHRvIHRoZSByZWxldmFudCBkb2N1bWVudGF0aW9uIGZvciB0aGUgcHJpdmF0ZSBBU04gcmFuZ2UuXG4gICAgICovXG4gICAgcmVhZG9ubHkgYmdwQ29uZmlnPzogUm9zVnBuQ29ubmVjdGlvbi5CZ3BDb25maWdQcm9wZXJ0eSB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGN1c3RvbWVyR2F0ZXdheUlkOiBUaGUgSUQgb2YgdGhlIHVzZXIgZ2F0ZXdheS5cbiAgICAgKi9cbiAgICByZWFkb25seSBjdXN0b21lckdhdGV3YXlJZD86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGVmZmVjdEltbWVkaWF0ZWx5OiBXaGV0aGVyIHRvIGRlbGV0ZSB0aGUgY3VycmVudGx5IG5lZ290aWF0ZWQgSVBzZWMgdHVubmVsIGFuZCByZS1pbml0aWF0ZSB0aGUgbmVnb3RpYXRpb24uIFZhbHVlOlxuICAgICAqIFRydWU6IE5lZ290aWF0ZSBpbW1lZGlhdGVseSBhZnRlciB0aGUgY29uZmlndXJhdGlvbiBpcyBjb21wbGV0ZS5cbiAgICAgKiBGYWxzZSAoZGVmYXVsdCk6IE5lZ290aWF0ZSB3aGVuIHRyYWZmaWMgZW50ZXJzLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGVmZmVjdEltbWVkaWF0ZWx5PzogYm9vbGVhbiB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGVuYWJsZURwZDogU3BlY2lmaWVzIHdoZXRoZXIgdG8gZW5hYmxlIHRoZSBkZWFkIHBlZXIgZGV0ZWN0aW9uIChEUEQpIGZlYXR1cmUuIFZhbGlkIHZhbHVlczogXG4gICAgICogdHJ1ZSAoZGVmYXVsdCkgVGhlIGluaXRpYXRvciBvZiB0aGUgSVBzZWMtVlBOIGNvbm5lY3Rpb24gc2VuZHMgRFBEIHBhY2tldHMgdG8gdmVyaWZ5IHRoZSBleGlzdGVuY2UgYW5kIGF2YWlsYWJpbGl0eSBvZiB0aGUgcGVlci4gSWYgbm8gcmVzcG9uc2UgaXMgcmVjZWl2ZWQgZnJvbSB0aGUgcGVlciB3aXRoaW4gYSBzcGVjaWZpZWQgcGVyaW9kIG9mIHRpbWUsIHRoZSBjb25uZWN0aW9uIGZhaWxzLiBJU0FLTVAgU0FzIGFuZCBJUHNlYyBTQXMgYXJlIGRlbGV0ZWQuIFRoZSBJUHNlYyB0dW5uZWwgaXMgYWxzbyBkZWxldGVkLiBcbiAgICAgKiBmYWxzZTogZGlzYWJsZXMgRFBELiBUaGUgSVBzZWMgaW5pdGlhdG9yIGRvZXMgbm90IHNlbmQgRFBEIHBhY2tldHMuXG4gICAgICovXG4gICAgcmVhZG9ubHkgZW5hYmxlRHBkPzogYm9vbGVhbiB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGVuYWJsZU5hdFRyYXZlcnNhbDogU3BlY2lmaWVzIHdoZXRoZXIgdG8gZW5hYmxlIE5BVCB0cmF2ZXJzYWwuIFZhbGlkIHZhbHVlczogXG4gICAgICogdHJ1ZSAoZGVmYXVsdCkgQWZ0ZXIgTkFUIHRyYXZlcnNhbCBpcyBlbmFibGVkLCB0aGUgaW5pdGlhdG9yIGRvZXMgbm90IGNoZWNrIHRoZSBVRFAgcG9ydHMgZHVyaW5nIElLRSBuZWdvdGlhdGlvbnMgYW5kIGNhbiBhdXRvbWF0aWNhbGx5IGRpc2NvdmVyIE5BVCBnYXRld2F5IGRldmljZXMgYWxvbmcgdGhlIFZQTiB0dW5uZWwuIFxuICAgICAqIGZhbHNlXG4gICAgICovXG4gICAgcmVhZG9ubHkgZW5hYmxlTmF0VHJhdmVyc2FsPzogYm9vbGVhbiB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGVuYWJsZVR1bm5lbHNCZ3A6IFNwZWNpZmllcyB3aGV0aGVyIHRvIGVuYWJsZSB0aGUgQkdQIGZlYXR1cmUgZm9yIHRoZSB0dW5uZWwuIFxuICAgICAqIFZhbGlkIHZhbHVlczogdHJ1ZSBhbmQgZmFsc2UuIERlZmF1bHQgdmFsdWU6IGZhbHNlLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGVuYWJsZVR1bm5lbHNCZ3A/OiBib29sZWFuIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgaGVhbHRoQ2hlY2tDb25maWc6IFdoZXRoZXIgdG8gZW5hYmxlIHRoZSBoZWFsdGggY2hlY2sgY29uZmlndXJhdGlvbi5cbiAgICAgKi9cbiAgICByZWFkb25seSBoZWFsdGhDaGVja0NvbmZpZz86IFJvc1ZwbkNvbm5lY3Rpb24uSGVhbHRoQ2hlY2tDb25maWdQcm9wZXJ0eSB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGlrZUNvbmZpZzogQ29uZmlndXJhdGlvbiBpbmZvcm1hdGlvbiBmb3IgdGhlIGZpcnN0IHBoYXNlIG9mIG5lZ290aWF0aW9uLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGlrZUNvbmZpZz86IFJvc1ZwbkNvbm5lY3Rpb24uSWtlQ29uZmlnUHJvcGVydHkgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBpcHNlY0NvbmZpZzogQ29uZmlndXJhdGlvbiBpbmZvcm1hdGlvbiBmb3IgdGhlIHNlY29uZCBwaGFzZSBuZWdvdGlhdGlvbi5cbiAgICAgKi9cbiAgICByZWFkb25seSBpcHNlY0NvbmZpZz86IFJvc1ZwbkNvbm5lY3Rpb24uSXBzZWNDb25maWdQcm9wZXJ0eSB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IG5hbWU6IFRoZSBuYW1lIG9mIHRoZSBJUHNlYyBjb25uZWN0aW9uLlxuICAgICAqIFRoZSBsZW5ndGggaXMgMi0xMjggY2hhcmFjdGVycyBhbmQgbXVzdCBzdGFydCB3aXRoIGEgbGV0dGVyIG9yIENoaW5lc2UuIEl0IGNhbiBjb250YWluIG51bWJlcnMsIHBlcmlvZHMgKC4pLCB1bmRlcnNjb3JlcyAoXykgYW5kIGRhc2hlcyAoLSksIGJ1dCBjYW5ub3Qgc3RhcnQgd2l0aCBodHRwOlxcL1xcLyBvciBodHRwczpcXC9cXC8gLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IG5hbWU/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSByZW1vdGVDYUNlcnRpZmljYXRlOiBUaGUgcGVlciBDQSBjZXJ0aWZpY2F0ZSB3aGVuIGEgU2hhbmdNaSAoU00pIFZQTiBnYXRld2F5IGlzIHVzZWQgdG8gZXN0YWJsaXNoIHRoZSBJUHNlYy1WUE4gY29ubmVjdGlvbi4gXG4gICAgICogVGhpcyBwYXJhbWV0ZXIgaXMgcmVxdWlyZWQgd2hlbiBhbiBTTSBWUE4gZ2F0ZXdheSBpcyB1c2VkIHRvIGVzdGFibGlzaCB0aGUgSVBzZWMtVlBOIGNvbm5lY3Rpb24uIFxuICAgICAqIFlvdSBjYW4gaWdub3JlIHRoaXMgcGFyYW1ldGVyIHdoZW4gYSBzdGFuZGFyZCBWUE4gZ2F0ZXdheSBpcyB1c2VkIHRvIGNyZWF0ZSB0aGUgSVBzZWMtVlBOIGNvbm5lY3Rpb24uXG4gICAgICovXG4gICAgcmVhZG9ubHkgcmVtb3RlQ2FDZXJ0aWZpY2F0ZT86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHR1bm5lbE9wdGlvbnNTcGVjaWZpY2F0aW9uOiBUdW5uZWxPcHRpb25zU3BlY2lmaWNhdGlvbiBwYXJhbWV0ZXJzIGFyZSBzdXBwb3J0ZWQgYnkgZHVhbC10dW5uZWwgSVBzZWMtVlBOIGdhdGV3YXlzLiBcbiAgICAgKiBZb3UgY2FuIG1vZGlmeSBib3RoIHRoZSBhY3RpdmUgYW5kIHN0YW5kYnkgdHVubmVscyBvZiB0aGUgSVBzZWMtVlBOIGNvbm5lY3Rpb24uXG4gICAgICovXG4gICAgcmVhZG9ubHkgdHVubmVsT3B0aW9uc1NwZWNpZmljYXRpb24/OiBBcnJheTxSb3NWcG5Db25uZWN0aW9uLlR1bm5lbE9wdGlvbnNTcGVjaWZpY2F0aW9uUHJvcGVydHkgfCByb3MuSVJlc29sdmFibGU+IHwgcm9zLklSZXNvbHZhYmxlO1xufVxuXG4vKipcbiAqIFJlcHJlc2VudHMgYSBgVnBuQ29ubmVjdGlvbmAuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSVZwbkNvbm5lY3Rpb24gZXh0ZW5kcyByb3MuSVJlc291cmNlIHtcbiAgICByZWFkb25seSBwcm9wczogVnBuQ29ubmVjdGlvblByb3BzO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIFBlZXJWcG5Db25uZWN0aW9uQ29uZmlnOiBQZWVyIHZwYyBjb25uZWN0aW9uIGNvbmZpZy5cbiAgICAgKi9cbiAgICByZWFkb25seSBhdHRyUGVlclZwbkNvbm5lY3Rpb25Db25maWc6IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBTdGF0dXM6IFN0YXR1cyBvZiB0aGUgSVBzZWMgY29ubmVjdGlvbi5cbiAgICAgKi9cbiAgICByZWFkb25seSBhdHRyU3RhdHVzOiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgVnBuQ29ubmVjdGlvbklkOiBJRCBvZiB0aGUgSVBzZWMgY29ubmVjdGlvbi5cbiAgICAgKi9cbiAgICByZWFkb25seSBhdHRyVnBuQ29ubmVjdGlvbklkOiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG59XG4vKipcbiAqIFRoaXMgY2xhc3MgZW5jYXBzdWxhdGVzIGFuZCBleHRlbmRzIHRoZSBST1MgcmVzb3VyY2UgdHlwZSBgQUxJWVVOOjpWUEM6OlZwbkNvbm5lY3Rpb25gLlxuICogQE5vdGUgVGhpcyBjbGFzcyBtYXkgaGF2ZSBzb21lIG5ldyBmdW5jdGlvbnMgdG8gZmFjaWxpdGF0ZSBkZXZlbG9wbWVudCwgc28gaXQgaXMgcmVjb21tZW5kZWQgdG8gdXNlIHRoaXMgY2xhc3MgaW5zdGVhZCBvZiBgUm9zVnBuQ29ubmVjdGlvbmBmb3IgYSBtb3JlIGNvbnZlbmllbnQgZGV2ZWxvcG1lbnQgZXhwZXJpZW5jZS5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvYWxpeXVuLXZwYy12cG5jb25uZWN0aW9uXG4gKi9cbmV4cG9ydCBjbGFzcyBWcG5Db25uZWN0aW9uIGV4dGVuZHMgcm9zLlJlc291cmNlIGltcGxlbWVudHMgSVZwbkNvbm5lY3Rpb24ge1xuICAgIHByb3RlY3RlZCBzY29wZTogcm9zLkNvbnN0cnVjdDtcbiAgICBwcm90ZWN0ZWQgaWQ6IHN0cmluZztcbiAgICBwdWJsaWMgcmVhZG9ubHkgcHJvcHM6IFZwbkNvbm5lY3Rpb25Qcm9wcztcbiAgICBwcm90ZWN0ZWQgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6IGJvb2xlYW47XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgUGVlclZwbkNvbm5lY3Rpb25Db25maWc6IFBlZXIgdnBjIGNvbm5lY3Rpb24gY29uZmlnLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyUGVlclZwbkNvbm5lY3Rpb25Db25maWc6IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBTdGF0dXM6IFN0YXR1cyBvZiB0aGUgSVBzZWMgY29ubmVjdGlvbi5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0clN0YXR1czogcm9zLklSZXNvbHZhYmxlIHwgc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIFZwbkNvbm5lY3Rpb25JZDogSUQgb2YgdGhlIElQc2VjIGNvbm5lY3Rpb24uXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJWcG5Db25uZWN0aW9uSWQ6IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFBhcmFtIHNjb3BlIC0gc2NvcGUgaW4gd2hpY2ggdGhpcyByZXNvdXJjZSBpcyBkZWZpbmVkXG4gICAgICogUGFyYW0gaWQgICAgLSBzY29wZWQgaWQgb2YgdGhlIHJlc291cmNlXG4gICAgICogUGFyYW0gcHJvcHMgLSByZXNvdXJjZSBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IHJvcy5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBWcG5Db25uZWN0aW9uUHJvcHMsIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OmJvb2xlYW4gPSB0cnVlKSB7XG4gICAgICAgIHN1cGVyKHNjb3BlLCBpZCk7XG4gICAgICAgIHRoaXMuc2NvcGUgPSBzY29wZTtcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xuICAgICAgICB0aGlzLnByb3BzID0gcHJvcHM7XG4gICAgICAgIHRoaXMuZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgPSBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDtcblxuICAgICAgICBjb25zdCByb3NWcG5Db25uZWN0aW9uID0gbmV3IFJvc1ZwbkNvbm5lY3Rpb24odGhpcywgaWQsICB7XG4gICAgICAgICAgICBsb2NhbFN1Ym5ldDogcHJvcHMubG9jYWxTdWJuZXQsXG4gICAgICAgICAgICBjdXN0b21lckdhdGV3YXlJZDogcHJvcHMuY3VzdG9tZXJHYXRld2F5SWQsXG4gICAgICAgICAgICBlbmFibGVUdW5uZWxzQmdwOiBwcm9wcy5lbmFibGVUdW5uZWxzQmdwLFxuICAgICAgICAgICAgYXV0b0NvbmZpZ1JvdXRlOiBwcm9wcy5hdXRvQ29uZmlnUm91dGUsXG4gICAgICAgICAgICBuYW1lOiBwcm9wcy5uYW1lLFxuICAgICAgICAgICAgZWZmZWN0SW1tZWRpYXRlbHk6IHByb3BzLmVmZmVjdEltbWVkaWF0ZWx5ID09PSB1bmRlZmluZWQgfHwgcHJvcHMuZWZmZWN0SW1tZWRpYXRlbHkgPT09IG51bGwgPyBmYWxzZSA6IHByb3BzLmVmZmVjdEltbWVkaWF0ZWx5LFxuICAgICAgICAgICAgYmdwQ29uZmlnOiBwcm9wcy5iZ3BDb25maWcsXG4gICAgICAgICAgICB0dW5uZWxPcHRpb25zU3BlY2lmaWNhdGlvbjogcHJvcHMudHVubmVsT3B0aW9uc1NwZWNpZmljYXRpb24sXG4gICAgICAgICAgICByZW1vdGVTdWJuZXQ6IHByb3BzLnJlbW90ZVN1Ym5ldCxcbiAgICAgICAgICAgIHZwbkdhdGV3YXlJZDogcHJvcHMudnBuR2F0ZXdheUlkLFxuICAgICAgICAgICAgaXBzZWNDb25maWc6IHByb3BzLmlwc2VjQ29uZmlnLFxuICAgICAgICAgICAgcmVtb3RlQ2FDZXJ0aWZpY2F0ZTogcHJvcHMucmVtb3RlQ2FDZXJ0aWZpY2F0ZSxcbiAgICAgICAgICAgIGhlYWx0aENoZWNrQ29uZmlnOiBwcm9wcy5oZWFsdGhDaGVja0NvbmZpZyxcbiAgICAgICAgICAgIGVuYWJsZU5hdFRyYXZlcnNhbDogcHJvcHMuZW5hYmxlTmF0VHJhdmVyc2FsLFxuICAgICAgICAgICAgaWtlQ29uZmlnOiBwcm9wcy5pa2VDb25maWcsXG4gICAgICAgICAgICBlbmFibGVEcGQ6IHByb3BzLmVuYWJsZURwZCxcbiAgICAgICAgfSwgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgJiYgdGhpcy5zdGFjay5lbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCk7XG4gICAgICAgIHRoaXMucmVzb3VyY2UgPSByb3NWcG5Db25uZWN0aW9uO1xuICAgICAgICB0aGlzLmF0dHJQZWVyVnBuQ29ubmVjdGlvbkNvbmZpZyA9IHJvc1ZwbkNvbm5lY3Rpb24uYXR0clBlZXJWcG5Db25uZWN0aW9uQ29uZmlnO1xuICAgICAgICB0aGlzLmF0dHJTdGF0dXMgPSByb3NWcG5Db25uZWN0aW9uLmF0dHJTdGF0dXM7XG4gICAgICAgIHRoaXMuYXR0clZwbkNvbm5lY3Rpb25JZCA9IHJvc1ZwbkNvbm5lY3Rpb24uYXR0clZwbkNvbm5lY3Rpb25JZDtcbiAgICB9XG59XG4iXX0=