"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MetricStore = exports.MetricStoreProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const sls_generated_1 = require("./sls.generated");
Object.defineProperty(exports, "MetricStoreProperty", { enumerable: true, get: function () { return sls_generated_1.RosMetricStore; } });
/**
 * A ROS resource type:  `ALIYUN::SLS::MetricStore`
 */
class MetricStore extends ros.Resource {
    /**
     * Create a new `ALIYUN::SLS::MetricStore`.
     *
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosMetricStore = new sls_generated_1.RosMetricStore(this, id, {
            logstoreName: props.logstoreName,
            preserveStorage: props.preserveStorage === undefined || props.preserveStorage === null ? false : props.preserveStorage,
            projectName: props.projectName,
            ttl: props.ttl === undefined || props.ttl === null ? 30 : props.ttl,
            shardCount: props.shardCount === undefined || props.shardCount === null ? 2 : props.shardCount,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosMetricStore;
        this.attrLogstoreName = rosMetricStore.attrLogstoreName;
    }
}
exports.MetricStore = MetricStore;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWV0cmljc3RvcmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJtZXRyaWNzdG9yZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw4Q0FBOEM7QUFDOUMsbURBQWlEO0FBRXRCLG9HQUZsQiw4QkFBYyxPQUV1QjtBQTJDOUM7O0dBRUc7QUFDSCxNQUFhLFdBQVksU0FBUSxHQUFHLENBQUMsUUFBUTtJQVl6Qzs7Ozs7O09BTUc7SUFDSCxZQUFZLEtBQW9CLEVBQUUsRUFBVSxFQUFFLEtBQXVCLEVBQUUsbUNBQTJDLElBQUk7UUFDbEgsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUVqQixNQUFNLGNBQWMsR0FBRyxJQUFJLDhCQUFjLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRztZQUNqRCxZQUFZLEVBQUUsS0FBSyxDQUFDLFlBQVk7WUFDaEMsZUFBZSxFQUFFLEtBQUssQ0FBQyxlQUFlLEtBQUssU0FBUyxJQUFJLEtBQUssQ0FBQyxlQUFlLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxlQUFlO1lBQ3RILFdBQVcsRUFBRSxLQUFLLENBQUMsV0FBVztZQUM5QixHQUFHLEVBQUUsS0FBSyxDQUFDLEdBQUcsS0FBSyxTQUFTLElBQUksS0FBSyxDQUFDLEdBQUcsS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUc7WUFDbkUsVUFBVSxFQUFFLEtBQUssQ0FBQyxVQUFVLEtBQUssU0FBUyxJQUFJLEtBQUssQ0FBQyxVQUFVLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxVQUFVO1NBQ2pHLEVBQUUsZ0NBQWdDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO1FBQ3BGLElBQUksQ0FBQyxRQUFRLEdBQUcsY0FBYyxDQUFDO1FBQy9CLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxjQUFjLENBQUMsZ0JBQWdCLENBQUM7SUFDNUQsQ0FBQztDQUNKO0FBaENELGtDQWdDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHJvcyBmcm9tICdAYWxpY2xvdWQvcm9zLWNkay1jb3JlJztcbmltcG9ydCB7IFJvc01ldHJpY1N0b3JlIH0gZnJvbSAnLi9zbHMuZ2VuZXJhdGVkJztcbi8vIEdlbmVyYXRlZCBmcm9tIHRoZSBBbGlDbG91ZCBST1MgUmVzb3VyY2UgU3BlY2lmaWNhdGlvblxuZXhwb3J0IHsgUm9zTWV0cmljU3RvcmUgYXMgTWV0cmljU3RvcmVQcm9wZXJ0eSB9O1xuXG4vKipcbiAqIFByb3BlcnRpZXMgZm9yIGRlZmluaW5nIGEgYEFMSVlVTjo6U0xTOjpNZXRyaWNTdG9yZWBcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBNZXRyaWNTdG9yZVByb3BzIHtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGxvZ3N0b3JlTmFtZTogTWV0cmljIHN0b3JlIG5hbWU6XG4gICAgICogMS4gT25seSBzdXBwb3J0cyBsb3dlcmNhc2UgbGV0dGVycywgbnVtYmVycywgaHlwaGVucyAoLSkgYW5kIHVuZGVyc2NvcmVzIChfKS5cbiAgICAgKiAyLiBNdXN0IHN0YXJ0IGFuZCBlbmQgd2l0aCBsb3dlcmNhc2UgbGV0dGVycyBhbmQgbnVtYmVycy5cbiAgICAgKiAzLiBUaGUgbmFtZSBsZW5ndGggaXMgMy02MyBjaGFyYWN0ZXJzLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGxvZ3N0b3JlTmFtZTogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgcHJvamVjdE5hbWU6IFByb2plY3QgbmFtZTpcbiAgICAgKiAxLiBPbmx5IHN1cHBvcnRzIGxvd2VyY2FzZSBsZXR0ZXJzLCBudW1iZXJzLCBoeXBoZW5zICgtKSBhbmQgdW5kZXJzY29yZXMgKF8pLlxuICAgICAqIDIuIE11c3Qgc3RhcnQgYW5kIGVuZCB3aXRoIGxvd2VyY2FzZSBsZXR0ZXJzIGFuZCBudW1iZXJzLlxuICAgICAqIDMuIFRoZSBuYW1lIGxlbmd0aCBpcyAzLTYzIGNoYXJhY3RlcnMuXG4gICAgICovXG4gICAgcmVhZG9ubHkgcHJvamVjdE5hbWU6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHByZXNlcnZlU3RvcmFnZTogV2hldGhlciB0byBrZWVwIHRoZSBsb2cgcGVybWFuZW50bHkuXG4gICAgICogSWYgc2V0IHRvIHRydWUsIFRUTCB3aWxsIGJlIGlnbm9yZWQuXG4gICAgICogRGVmYXVsdCB0byBmYWxzZS5cbiAgICAgKi9cbiAgICByZWFkb25seSBwcmVzZXJ2ZVN0b3JhZ2U/OiBib29sZWFuIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgc2hhcmRDb3VudDogVGhlIG51bWJlciBvZiBTaGFyZHMuXG4gICAgICogQWxsb3dlZCBWYWx1ZXM6IDEtMTAsIGRlZmF1bHQgdG8gMi5cbiAgICAgKi9cbiAgICByZWFkb25seSBzaGFyZENvdW50PzogbnVtYmVyIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgdHRsOiBUaGUgbGlmZWN5Y2xlIG9mIGxvZyBpbiB0aGUgbWV0cmljZSBzdG9yZSBpbiBkYXlzLlxuICAgICAqIEFsbG93ZWQgVmFsdWVzOiAxLTMwMDAsIGRlZmF1bHQgdG8gMzAuXG4gICAgICovXG4gICAgcmVhZG9ubHkgdHRsPzogbnVtYmVyIHwgcm9zLklSZXNvbHZhYmxlO1xufVxuXG4vKipcbiAqIEEgUk9TIHJlc291cmNlIHR5cGU6ICBgQUxJWVVOOjpTTFM6Ok1ldHJpY1N0b3JlYFxuICovXG5leHBvcnQgY2xhc3MgTWV0cmljU3RvcmUgZXh0ZW5kcyByb3MuUmVzb3VyY2Uge1xuXG4gICAgLyoqXG4gICAgICogQSBmYWN0b3J5IG1ldGhvZCB0aGF0IGNyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgdGhpcyBjbGFzcyBmcm9tIGFuIG9iamVjdFxuICAgICAqIGNvbnRhaW5pbmcgdGhlIHByb3BlcnRpZXMgb2YgdGhpcyBST1MgcmVzb3VyY2UsIHdoaWNoIHdpbGwgYmUgYXNzaWduZWQgdG8gUk9TIHJlc291cmNlLlxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIExvZ3N0b3JlTmFtZTogTWV0cmljIHN0b3JlIG5hbWUuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJMb2dzdG9yZU5hbWU6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBgQUxJWVVOOjpTTFM6Ok1ldHJpY1N0b3JlYC5cbiAgICAgKlxuICAgICAqIFBhcmFtIHNjb3BlIC0gc2NvcGUgaW4gd2hpY2ggdGhpcyByZXNvdXJjZSBpcyBkZWZpbmVkXG4gICAgICogUGFyYW0gaWQgICAgLSBzY29wZWQgaWQgb2YgdGhlIHJlc291cmNlXG4gICAgICogUGFyYW0gcHJvcHMgLSByZXNvdXJjZSBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IHJvcy5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBNZXRyaWNTdG9yZVByb3BzLCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDpib29sZWFuID0gdHJ1ZSkge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQpO1xuXG4gICAgICAgIGNvbnN0IHJvc01ldHJpY1N0b3JlID0gbmV3IFJvc01ldHJpY1N0b3JlKHRoaXMsIGlkLCAge1xuICAgICAgICAgICAgbG9nc3RvcmVOYW1lOiBwcm9wcy5sb2dzdG9yZU5hbWUsXG4gICAgICAgICAgICBwcmVzZXJ2ZVN0b3JhZ2U6IHByb3BzLnByZXNlcnZlU3RvcmFnZSA9PT0gdW5kZWZpbmVkIHx8IHByb3BzLnByZXNlcnZlU3RvcmFnZSA9PT0gbnVsbCA/IGZhbHNlIDogcHJvcHMucHJlc2VydmVTdG9yYWdlLFxuICAgICAgICAgICAgcHJvamVjdE5hbWU6IHByb3BzLnByb2plY3ROYW1lLFxuICAgICAgICAgICAgdHRsOiBwcm9wcy50dGwgPT09IHVuZGVmaW5lZCB8fCBwcm9wcy50dGwgPT09IG51bGwgPyAzMCA6IHByb3BzLnR0bCxcbiAgICAgICAgICAgIHNoYXJkQ291bnQ6IHByb3BzLnNoYXJkQ291bnQgPT09IHVuZGVmaW5lZCB8fCBwcm9wcy5zaGFyZENvdW50ID09PSBudWxsID8gMiA6IHByb3BzLnNoYXJkQ291bnQsXG4gICAgICAgIH0sIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ICYmIHRoaXMuc3RhY2suZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQpO1xuICAgICAgICB0aGlzLnJlc291cmNlID0gcm9zTWV0cmljU3RvcmU7XG4gICAgICAgIHRoaXMuYXR0ckxvZ3N0b3JlTmFtZSA9IHJvc01ldHJpY1N0b3JlLmF0dHJMb2dzdG9yZU5hbWU7XG4gICAgfVxufVxuIl19