"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Domain = exports.DomainProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const cdn_generated_1 = require("./cdn.generated");
Object.defineProperty(exports, "DomainProperty", { enumerable: true, get: function () { return cdn_generated_1.RosDomain; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::CDN::Domain`, which is used to add a domain name to Alibaba Cloud CDN (CDN).
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosDomain`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-cdn-domain
 */
class Domain extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosDomain = new cdn_generated_1.RosDomain(this, id, {
            checkUrl: props.checkUrl,
            resourceGroupId: props.resourceGroupId,
            scope: props.scope,
            domainName: props.domainName,
            originServers: props.originServers,
            cdnType: props.cdnType,
            topLevelDomain: props.topLevelDomain,
            sources: props.sources,
            tags: props.tags,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosDomain;
        this.attrCname = rosDomain.attrCname;
        this.attrDomainName = rosDomain.attrDomainName;
    }
}
exports.Domain = Domain;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG9tYWluLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZG9tYWluLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDhDQUE4QztBQUM5QyxtREFBNEM7QUFFdEIsK0ZBRmIseUJBQVMsT0FFa0I7QUFzRHBDOzs7O0dBSUc7QUFDSCxNQUFhLE1BQU8sU0FBUSxHQUFHLENBQUMsUUFBUTtJQWdCcEM7Ozs7T0FJRztJQUNILFlBQVksS0FBb0IsRUFBRSxFQUFVLEVBQUUsS0FBa0IsRUFBRSxtQ0FBMkMsSUFBSTtRQUM3RyxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ2pCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQ2IsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLGdDQUFnQyxHQUFHLGdDQUFnQyxDQUFDO1FBRXpFLE1BQU0sU0FBUyxHQUFHLElBQUkseUJBQVMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFHO1lBQ3ZDLFFBQVEsRUFBRSxLQUFLLENBQUMsUUFBUTtZQUN4QixlQUFlLEVBQUUsS0FBSyxDQUFDLGVBQWU7WUFDdEMsS0FBSyxFQUFFLEtBQUssQ0FBQyxLQUFLO1lBQ2xCLFVBQVUsRUFBRSxLQUFLLENBQUMsVUFBVTtZQUM1QixhQUFhLEVBQUUsS0FBSyxDQUFDLGFBQWE7WUFDbEMsT0FBTyxFQUFFLEtBQUssQ0FBQyxPQUFPO1lBQ3RCLGNBQWMsRUFBRSxLQUFLLENBQUMsY0FBYztZQUNwQyxPQUFPLEVBQUUsS0FBSyxDQUFDLE9BQU87WUFDdEIsSUFBSSxFQUFFLEtBQUssQ0FBQyxJQUFJO1NBQ25CLEVBQUUsZ0NBQWdDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO1FBQ3BGLElBQUksQ0FBQyxRQUFRLEdBQUcsU0FBUyxDQUFDO1FBQzFCLElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDLFNBQVMsQ0FBQztRQUNyQyxJQUFJLENBQUMsY0FBYyxHQUFHLFNBQVMsQ0FBQyxjQUFjLENBQUM7SUFDbkQsQ0FBQztDQUNKO0FBM0NELHdCQTJDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHJvcyBmcm9tICdAYWxpY2xvdWQvcm9zLWNkay1jb3JlJztcbmltcG9ydCB7IFJvc0RvbWFpbiB9IGZyb20gJy4vY2RuLmdlbmVyYXRlZCc7XG4vLyBHZW5lcmF0ZWQgZnJvbSB0aGUgQWxpQ2xvdWQgUk9TIFJlc291cmNlIFNwZWNpZmljYXRpb25cbmV4cG9ydCB7IFJvc0RvbWFpbiBhcyBEb21haW5Qcm9wZXJ0eSB9O1xuXG4vKipcbiAqIFByb3BlcnRpZXMgZm9yIGRlZmluaW5nIGEgYERvbWFpbmAuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2FsaXl1bi1jZG4tZG9tYWluXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRG9tYWluUHJvcHMge1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgY2RuVHlwZTogVGhlIGJ1c2luZXNzIHR5cGUuIFZhbGlkIHZhbHVlczogd2ViLCBkb3dubG9hZCwgdmlkZW8sIGxpdmVzdHJlYW0sIGFuZCBodHRwc2RlbGl2ZXJ5LiB3ZWI6IGFjY2VsZXJhdGlvbiBvZiBpbWFnZXMgYW5kIHNtYWxsIGZpbGVzIGRvd25sb2FkLiBkb3dubG9hZDogYWNjZWxlcmF0aW9uIG9mIGxhcmdlIGZpbGUgZG93bmxvYWRzLiB2aWRlbzogbGl2ZSBzdHJlYW1pbmcgYWNjZWxlcmF0aW9uLiBodHRwc2RlbGl2ZXJ5OiBTU0wgYWNjZWxlcmF0aW9uIGZvciBIVFRQUy5cbiAgICAgKi9cbiAgICByZWFkb25seSBjZG5UeXBlOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBkb21haW5OYW1lOiBUaGUgQ0ROIGRvbWFpbiBuYW1lLiBXaWxkY2FyZCBkb21haW4gbmFtZXMgdGhhdCBzdGFydCB3aXRoIHBlcmlvZHMgKC4pIGFyZSBzdXBwb3J0ZWQuIEZvciBleGFtcGxlLCAuYS5jb20uXG4gICAgICovXG4gICAgcmVhZG9ubHkgZG9tYWluTmFtZTogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgY2hlY2tVcmw6IFRoZSB2YWxpZGF0aW9uIG9mIHRoZSBvcmlnaW4uXG4gICAgICovXG4gICAgcmVhZG9ubHkgY2hlY2tVcmw/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBvcmlnaW5TZXJ2ZXJzOiBUaGUgbGlzdCBvZiBvcmlnaW4gVVJMcy4gSXQgaGFzIHRoZSBzYW1lIGZ1bmN0aW9uIGFzIFNvdXJjZXMsIGJ1dCBoYXMgYSBoaWdoZXIgcHJpb3JpdHkgdGhhbiBpdC5cbiAgICAgKi9cbiAgICByZWFkb25seSBvcmlnaW5TZXJ2ZXJzPzogQXJyYXk8Um9zRG9tYWluLk9yaWdpblNlcnZlcnNQcm9wZXJ0eSB8IHJvcy5JUmVzb2x2YWJsZT4gfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSByZXNvdXJjZUdyb3VwSWQ6IFRoZSBJRCBvZiB0aGUgcmVzb3VyY2UgZ3JvdXAuIElmIHRoaXMgaXMgbGVmdCBibGFuaywgdGhlIHN5c3RlbSBhdXRvbWF0aWNhbGx5IGZpbGxzIGluIHRoZSBJRCBvZiB0aGUgZGVmYXVsdCByZXNvdXJjZSBncm91cC5cbiAgICAgKi9cbiAgICByZWFkb25seSByZXNvdXJjZUdyb3VwSWQ/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBzY29wZTogVmFsaWQgdmFsdWVzOiBkb21lc3RpYywgb3ZlcnNlYXMsIGFuZCBnbG9iYWwuIERlZmF1bHQgdmFsdWU6IGRvbWVzdGljLiBUaGUgc2V0dGluZyBpcyBzdXBwb3J0ZWQgZm9yIHVzZXJzIG91dHNpZGUgbWFpbmxhbmQgQ2hpbmEsIHVzZXJzIGluIG1haW5sYW5kIENoaW5hIG9mIGxldmVsIDMgb3IgYWJvdmUuXG4gICAgICovXG4gICAgcmVhZG9ubHkgc2NvcGU/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBzb3VyY2VzOiBUaGUgbGlzdCBvZiBvcmlnaW4gVVJMcy5cbiAgICAgKi9cbiAgICByZWFkb25seSBzb3VyY2VzPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgdGFnczogVGFncyB0byBhdHRhY2ggdG8gaW5zdGFuY2UuIE1heCBzdXBwb3J0IDIwIHRhZ3MgdG8gYWRkIGR1cmluZyBjcmVhdGUgaW5zdGFuY2UuIEVhY2ggdGFnIHdpdGggdHdvIHByb3BlcnRpZXMgS2V5IGFuZCBWYWx1ZSwgYW5kIEtleSBpcyByZXF1aXJlZC5cbiAgICAgKi9cbiAgICByZWFkb25seSB0YWdzPzogUm9zRG9tYWluLlRhZ3NQcm9wZXJ0eVtdO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgdG9wTGV2ZWxEb21haW46IFRoZSB0b3AtbGV2ZWwgZG9tYWluLCB3aGljaCBjYW4gb25seSBiZSBjb25maWd1cmVkIGJ5IHVzZXJzIG9uIHRoZSB3aGl0ZWxpc3QuXG4gICAgICovXG4gICAgcmVhZG9ubHkgdG9wTGV2ZWxEb21haW4/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG59XG5cbi8qKlxuICogVGhpcyBjbGFzcyBlbmNhcHN1bGF0ZXMgYW5kIGV4dGVuZHMgdGhlIFJPUyByZXNvdXJjZSB0eXBlIGBBTElZVU46OkNETjo6RG9tYWluYCwgd2hpY2ggaXMgdXNlZCB0byBhZGQgYSBkb21haW4gbmFtZSB0byBBbGliYWJhIENsb3VkIENETiAoQ0ROKS5cbiAqIEBOb3RlIFRoaXMgY2xhc3MgbWF5IGhhdmUgc29tZSBuZXcgZnVuY3Rpb25zIHRvIGZhY2lsaXRhdGUgZGV2ZWxvcG1lbnQsIHNvIGl0IGlzIHJlY29tbWVuZGVkIHRvIHVzZSB0aGlzIGNsYXNzIGluc3RlYWQgb2YgYFJvc0RvbWFpbmBmb3IgYSBtb3JlIGNvbnZlbmllbnQgZGV2ZWxvcG1lbnQgZXhwZXJpZW5jZS5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvYWxpeXVuLWNkbi1kb21haW5cbiAqL1xuZXhwb3J0IGNsYXNzIERvbWFpbiBleHRlbmRzIHJvcy5SZXNvdXJjZSB7XG4gICAgcHJvdGVjdGVkIHNjb3BlOiByb3MuQ29uc3RydWN0O1xuICAgIHByb3RlY3RlZCBpZDogc3RyaW5nO1xuICAgIHByb3RlY3RlZCBwcm9wczogRG9tYWluUHJvcHM7XG4gICAgcHJvdGVjdGVkIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OiBib29sZWFuO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIENuYW1lOiBUaGUgQ05BTUUgZ2VuZXJhdGVkIGZvciB0aGUgQ0ROIGRvbWFpbi5Zb3UgbXVzdCBhZGQgYSBDTkFNRSByZWNvcmQgd2l0aCB5b3VyIEROUyBwcm92aWRlciB0byBtYXAgdGhlIENETiBkb21haW4gbmFtZSB0byB0aGUgQ05BTUUuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJDbmFtZTogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIERvbWFpbk5hbWU6IFRoZSBDRE4gZG9tYWluIG5hbWUuIFdpbGRjYXJkIGRvbWFpbiBuYW1lcyB0aGF0IHN0YXJ0IHdpdGggcGVyaW9kcyAoLikgYXJlIHN1cHBvcnRlZC4gRm9yIGV4YW1wbGUsIC5hLmNvbS5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckRvbWFpbk5hbWU6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFBhcmFtIHNjb3BlIC0gc2NvcGUgaW4gd2hpY2ggdGhpcyByZXNvdXJjZSBpcyBkZWZpbmVkXG4gICAgICogUGFyYW0gaWQgICAgLSBzY29wZWQgaWQgb2YgdGhlIHJlc291cmNlXG4gICAgICogUGFyYW0gcHJvcHMgLSByZXNvdXJjZSBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IHJvcy5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBEb21haW5Qcm9wcywgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6Ym9vbGVhbiA9IHRydWUpIHtcbiAgICAgICAgc3VwZXIoc2NvcGUsIGlkKTtcbiAgICAgICAgdGhpcy5zY29wZSA9IHNjb3BlO1xuICAgICAgICB0aGlzLmlkID0gaWQ7XG4gICAgICAgIHRoaXMucHJvcHMgPSBwcm9wcztcbiAgICAgICAgdGhpcy5lbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCA9IGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50O1xuXG4gICAgICAgIGNvbnN0IHJvc0RvbWFpbiA9IG5ldyBSb3NEb21haW4odGhpcywgaWQsICB7XG4gICAgICAgICAgICBjaGVja1VybDogcHJvcHMuY2hlY2tVcmwsXG4gICAgICAgICAgICByZXNvdXJjZUdyb3VwSWQ6IHByb3BzLnJlc291cmNlR3JvdXBJZCxcbiAgICAgICAgICAgIHNjb3BlOiBwcm9wcy5zY29wZSxcbiAgICAgICAgICAgIGRvbWFpbk5hbWU6IHByb3BzLmRvbWFpbk5hbWUsXG4gICAgICAgICAgICBvcmlnaW5TZXJ2ZXJzOiBwcm9wcy5vcmlnaW5TZXJ2ZXJzLFxuICAgICAgICAgICAgY2RuVHlwZTogcHJvcHMuY2RuVHlwZSxcbiAgICAgICAgICAgIHRvcExldmVsRG9tYWluOiBwcm9wcy50b3BMZXZlbERvbWFpbixcbiAgICAgICAgICAgIHNvdXJjZXM6IHByb3BzLnNvdXJjZXMsXG4gICAgICAgICAgICB0YWdzOiBwcm9wcy50YWdzLFxuICAgICAgICB9LCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCAmJiB0aGlzLnN0YWNrLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50KTtcbiAgICAgICAgdGhpcy5yZXNvdXJjZSA9IHJvc0RvbWFpbjtcbiAgICAgICAgdGhpcy5hdHRyQ25hbWUgPSByb3NEb21haW4uYXR0ckNuYW1lO1xuICAgICAgICB0aGlzLmF0dHJEb21haW5OYW1lID0gcm9zRG9tYWluLmF0dHJEb21haW5OYW1lO1xuICAgIH1cbn1cbiJdfQ==