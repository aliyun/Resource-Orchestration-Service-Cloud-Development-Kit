"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Bucket = exports.BucketProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const oss_generated_1 = require("./oss.generated");
Object.defineProperty(exports, "BucketProperty", { enumerable: true, get: function () { return oss_generated_1.RosBucket; } });
const os_1 = require("os");
const perms = require("./perms.cdk");
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::OSS::Bucket`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosBucket`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-oss-bucket
 */
class Bucket extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosBucket = new oss_generated_1.RosBucket(this, id, {
            policy: props.policy,
            enableOssHdfsService: props.enableOssHdfsService === undefined || props.enableOssHdfsService === null ? false : props.enableOssHdfsService,
            resourceGroupId: props.resourceGroupId,
            storageClass: props.storageClass,
            redundancyType: props.redundancyType === undefined || props.redundancyType === null ? 'LRS' : props.redundancyType,
            lifecycleConfiguration: props.lifecycleConfiguration,
            serverSideEncryptionConfiguration: props.serverSideEncryptionConfiguration,
            versioningConfiguration: props.versioningConfiguration,
            accessControl: props.accessControl === undefined || props.accessControl === null ? 'private' : props.accessControl,
            corsConfiguration: props.corsConfiguration,
            bucketName: props.bucketName,
            deletionForce: props.deletionForce === undefined || props.deletionForce === null ? false : props.deletionForce,
            loggingConfiguration: props.loggingConfiguration,
            websiteConfigurationV2: props.websiteConfigurationV2,
            refererConfiguration: props.refererConfiguration,
            tags: props.tags,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosBucket;
        this.attrArn = rosBucket.attrArn;
        this.attrDomainName = rosBucket.attrDomainName;
        this.attrInternalDomainName = rosBucket.attrInternalDomainName;
        this.attrName = rosBucket.attrName;
    }
    /**
     * Thrown an exception if the given bucket name is not valid.
     *
     * @param physicalName name of the bucket.
     */
    static async validateBucketName(physicalName) {
        const bucketName = physicalName;
        if (!bucketName || ros.Token.isUnresolved(bucketName)) {
            // the name is a late-bound value, not a defined string,
            // so skip validation
            return;
        }
        const errors = [];
        // Rules codified from https://www.alibabacloud.com/help/oss/user-guide/bucket-naming-conventions
        if (bucketName.length < 3 || bucketName.length > 63) {
            errors.push('Bucket name must be at least 3 and no more than 63 characters');
        }
        const charsetMatch = bucketName.match(/[^a-z0-9-]/);
        if (charsetMatch) {
            errors.push('Bucket name must only contain lowercase characters and the symbols and dash (-) '
                + `(offset: ${charsetMatch.index})`);
        }
        if (!/[a-z0-9]/.test(bucketName.charAt(0))) {
            errors.push('Bucket name must start and end with a lowercase character or number '
                + '(offset: 0)');
        }
        if (!/[a-z0-9]/.test(bucketName.charAt(bucketName.length - 1))) {
            errors.push('Bucket name must start and end with a lowercase character or number '
                + `(offset: ${bucketName.length - 1})`);
        }
        if (errors.length > 0) {
            throw new Error(`Invalid OSS bucket name (value: ${bucketName})${os_1.EOL}${errors.join(os_1.EOL)}`);
        }
    }
    /**
     * Returns an ARN that represents all objects within the bucket that match
     * the key pattern specified. To represent all keys, specify ``"*"``.
     *
     * If you need to specify a keyPattern with multiple components, concatenate them into a single string, e.g.:
     *
     *   arnForObjects(`home/${team}/${user}/*`)
     *
     */
    arnForObjects(keyPattern) {
        return `${this.attrArn}/${keyPattern}`;
    }
    grant(principle, bucketActions, resourceArn, ...otherResourceArns) {
        const policyDocument = {
            statement: [
                {
                    action: bucketActions,
                    effect: 'Allow',
                    resource: [resourceArn, ...otherResourceArns],
                },
            ],
            version: '1',
        };
        return principle.addToPolicy(policyDocument);
    }
    /**
     * Grant an RAM principal (Role/Group/User) permission to list and read all resources for this bucket.
     *
     * @param identity The principal
     * @param objectsKeyPattern Restrict the permission to a certain key pattern (default '*').
     */
    grantRead(identity, objectsKeyPattern = '*') {
        return this.grant(identity, perms.BUCKET_READ_ACTIONS.concat(perms.BUCKET_LIST_ACTIONS), this.attrArn, this.arnForObjects(objectsKeyPattern));
    }
    /**
     * Grant an RAM principal (Role/Group/User) permission to read and write resources for this bucket.
     *
     * @param identity The principal
     * @param objectsKeyPattern Restrict the permission to a certain key pattern (default '*').
     */
    grantReadWrite(identity, objectsKeyPattern = '*') {
        return this.grant(identity, perms.BUCKET_READ_WRITE_ACTIONS, this.attrArn, this.arnForObjects(objectsKeyPattern));
    }
    /**
     * Grant an RAM principal (Role/Group/User) permission to list resources for this bucket.
     *
     * @param identity The principal
     * @param objectsKeyPattern Restrict the permission to a certain key pattern (default '*').
     */
    grantList(identity, objectsKeyPattern = '*') {
        return this.grant(identity, perms.BUCKET_LIST_ACTIONS, this.attrArn, this.arnForObjects(objectsKeyPattern));
    }
    /**
     * Grant an RAM principal (Role/Group/User) full control over this bucket.
     *
     * @param identity The principal
     * @param objectsKeyPattern Restrict the permission to a certain key pattern (default '*').
     */
    grantFullAccess(identity, objectsKeyPattern = '*') {
        return this.grant(identity, ['oss:*'], this.attrArn, this.arnForObjects(objectsKeyPattern));
    }
}
exports.Bucket = Bucket;
//# sourceMappingURL=data:application/json;base64,