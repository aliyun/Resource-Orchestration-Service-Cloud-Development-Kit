"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BasicEndpoint = exports.BasicEndpointProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ga_generated_1 = require("./ga.generated");
Object.defineProperty(exports, "BasicEndpointProperty", { enumerable: true, get: function () { return ga_generated_1.RosBasicEndpoint; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::GA::BasicEndpoint`, which is used to create an endpoint for a basic Global Accelerator (GA) instance.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosBasicEndpoint`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-ga-basicendpoint
 */
class BasicEndpoint extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosBasicEndpoint = new ga_generated_1.RosBasicEndpoint(this, id, {
            endpointGroupId: props.endpointGroupId,
            endpointZoneId: props.endpointZoneId,
            endpointType: props.endpointType,
            endpointSubAddressType: props.endpointSubAddressType,
            endpointSubAddress: props.endpointSubAddress,
            acceleratorId: props.acceleratorId,
            name: props.name,
            endpointAddress: props.endpointAddress,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosBasicEndpoint;
        this.attrEndpointId = rosBasicEndpoint.attrEndpointId;
    }
}
exports.BasicEndpoint = BasicEndpoint;
//# sourceMappingURL=data:application/json;base64,