"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Disk = exports.DiskProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ecs_generated_1 = require("./ecs.generated");
Object.defineProperty(exports, "DiskProperty", { enumerable: true, get: function () { return ecs_generated_1.RosDisk; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::ECS::Disk`, which is used to create a cloud disk for an Elastic Compute Service (ECS) instance.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosDisk`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-ecs-disk
 */
class Disk extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosDisk = new ecs_generated_1.RosDisk(this, id, {
            burstingEnabled: props.burstingEnabled,
            description: props.description,
            kmsKeyId: props.kmsKeyId,
            resourceGroupId: props.resourceGroupId,
            zoneId: props.zoneId,
            encrypted: props.encrypted === undefined || props.encrypted === null ? false : props.encrypted,
            performanceLevel: props.performanceLevel,
            size: props.size,
            deleteAutoSnapshot: props.deleteAutoSnapshot === undefined || props.deleteAutoSnapshot === null ? false : props.deleteAutoSnapshot,
            diskCategory: props.diskCategory,
            autoSnapshotPolicyId: props.autoSnapshotPolicyId,
            storageSetPartitionNumber: props.storageSetPartitionNumber,
            diskName: props.diskName,
            provisionedIops: props.provisionedIops,
            multiAttach: props.multiAttach,
            snapshotId: props.snapshotId,
            storageSetId: props.storageSetId,
            tags: props.tags,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosDisk;
        this.attrDiskId = rosDisk.attrDiskId;
        this.attrStatus = rosDisk.attrStatus;
    }
}
exports.Disk = Disk;
//# sourceMappingURL=data:application/json;base64,