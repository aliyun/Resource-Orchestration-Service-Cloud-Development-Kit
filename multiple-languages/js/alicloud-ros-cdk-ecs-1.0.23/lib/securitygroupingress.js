"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SecurityGroupIngress = exports.SecurityGroupIngressProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ecs_generated_1 = require("./ecs.generated");
Object.defineProperty(exports, "SecurityGroupIngressProperty", { enumerable: true, get: function () { return ecs_generated_1.RosSecurityGroupIngress; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::ECS::SecurityGroupIngress`, which is used to create an inbound rule for a security group.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosSecurityGroupIngress`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-ecs-securitygroupingress
 */
class SecurityGroupIngress extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosSecurityGroupIngress = new ecs_generated_1.RosSecurityGroupIngress(this, id, {
            sourceGroupId: props.sourceGroupId,
            policy: props.policy,
            description: props.description,
            sourcePortRange: props.sourcePortRange,
            priority: props.priority === undefined || props.priority === null ? 1 : props.priority,
            securityGroupId: props.securityGroupId,
            sourceGroupOwnerId: props.sourceGroupOwnerId,
            ipv6SourceCidrIp: props.ipv6SourceCidrIp,
            nicType: props.nicType,
            portRange: props.portRange,
            sourceCidrIp: props.sourceCidrIp,
            ipProtocol: props.ipProtocol,
            sourcePrefixListId: props.sourcePrefixListId,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosSecurityGroupIngress;
    }
}
exports.SecurityGroupIngress = SecurityGroupIngress;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VjdXJpdHlncm91cGluZ3Jlc3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJzZWN1cml0eWdyb3VwaW5ncmVzcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw4Q0FBOEM7QUFDOUMsbURBQTBEO0FBRXRCLDZHQUYzQix1Q0FBdUIsT0FFZ0M7QUE2RWhFOzs7O0dBSUc7QUFDSCxNQUFhLG9CQUFxQixTQUFRLEdBQUcsQ0FBQyxRQUFRO0lBTWxEOzs7O09BSUc7SUFDSCxZQUFZLEtBQW9CLEVBQUUsRUFBVSxFQUFFLEtBQWdDLEVBQUUsbUNBQTJDLElBQUk7UUFDM0gsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNqQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUNiLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxnQ0FBZ0MsR0FBRyxnQ0FBZ0MsQ0FBQztRQUV6RSxNQUFNLHVCQUF1QixHQUFHLElBQUksdUNBQXVCLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRztZQUNuRSxhQUFhLEVBQUUsS0FBSyxDQUFDLGFBQWE7WUFDbEMsTUFBTSxFQUFFLEtBQUssQ0FBQyxNQUFNO1lBQ3BCLFdBQVcsRUFBRSxLQUFLLENBQUMsV0FBVztZQUM5QixlQUFlLEVBQUUsS0FBSyxDQUFDLGVBQWU7WUFDdEMsUUFBUSxFQUFFLEtBQUssQ0FBQyxRQUFRLEtBQUssU0FBUyxJQUFJLEtBQUssQ0FBQyxRQUFRLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxRQUFRO1lBQ3RGLGVBQWUsRUFBRSxLQUFLLENBQUMsZUFBZTtZQUN0QyxrQkFBa0IsRUFBRSxLQUFLLENBQUMsa0JBQWtCO1lBQzVDLGdCQUFnQixFQUFFLEtBQUssQ0FBQyxnQkFBZ0I7WUFDeEMsT0FBTyxFQUFFLEtBQUssQ0FBQyxPQUFPO1lBQ3RCLFNBQVMsRUFBRSxLQUFLLENBQUMsU0FBUztZQUMxQixZQUFZLEVBQUUsS0FBSyxDQUFDLFlBQVk7WUFDaEMsVUFBVSxFQUFFLEtBQUssQ0FBQyxVQUFVO1lBQzVCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxrQkFBa0I7U0FDL0MsRUFBRSxnQ0FBZ0MsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7UUFDcEYsSUFBSSxDQUFDLFFBQVEsR0FBRyx1QkFBdUIsQ0FBQztJQUM1QyxDQUFDO0NBQ0o7QUFuQ0Qsb0RBbUNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcm9zIGZyb20gJ0BhbGljbG91ZC9yb3MtY2RrLWNvcmUnO1xuaW1wb3J0IHsgUm9zU2VjdXJpdHlHcm91cEluZ3Jlc3MgfSBmcm9tICcuL2Vjcy5nZW5lcmF0ZWQnO1xuLy8gR2VuZXJhdGVkIGZyb20gdGhlIEFsaUNsb3VkIFJPUyBSZXNvdXJjZSBTcGVjaWZpY2F0aW9uXG5leHBvcnQgeyBSb3NTZWN1cml0eUdyb3VwSW5ncmVzcyBhcyBTZWN1cml0eUdyb3VwSW5ncmVzc1Byb3BlcnR5IH07XG5cbi8qKlxuICogUHJvcGVydGllcyBmb3IgZGVmaW5pbmcgYSBgU2VjdXJpdHlHcm91cEluZ3Jlc3NgLlxuICogU2VlIGh0dHBzOi8vd3d3LmFsaWJhYmFjbG91ZC5jb20vaGVscC9yb3MvZGV2ZWxvcGVyLXJlZmVyZW5jZS9hbGl5dW4tZWNzLXNlY3VyaXR5Z3JvdXBpbmdyZXNzXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgU2VjdXJpdHlHcm91cEluZ3Jlc3NQcm9wcyB7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBpcFByb3RvY29sOiBJcCBwcm90b2NvbCBmb3IgaW4gcnVsZS5cbiAgICAgKi9cbiAgICByZWFkb25seSBpcFByb3RvY29sOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBwb3J0UmFuZ2U6IElwIHByb3RvY29sIHJlbGF0aXZlIHBvcnQgcmFuZ2UuIEZvciB0Y3AgYW5kIHVkcCwgdGhlIHBvcnQgcmFuZyBpcyBbMSw2NTUzNV0sIHVzaW5nIGZvcm1hdCAnMVxcLzIwMCdGb3IgaWNtcHxncmV8YWxsIHByb3RvY2VsLCB0aGUgcG9ydCByYW5nZSBzaG91bGQgYmUgJy0xXFwvLTEnXG4gICAgICovXG4gICAgcmVhZG9ubHkgcG9ydFJhbmdlOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBkZXNjcmlwdGlvbjogRGVzY3JpcHRpb24gb2YgdGhlIHNlY3VyaXR5IGdyb3VwIHJ1bGUsIFsxLCA1MTJdIGNoYXJhY3RlcnMuIFRoZSBkZWZhdWx0IGlzIGVtcHR5LlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGRlc2NyaXB0aW9uPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgaXB2NlNvdXJjZUNpZHJJcDogU291cmNlIElQdjYgQ0lEUiBhZGRyZXNzIHNlZ21lbnQuIFN1cHBvcnRzIElQIGFkZHJlc3MgcmFuZ2VzIGluIENJRFIgZm9ybWF0IGFuZCBJUHY2IGZvcm1hdC5cbiAgICAgKiBOb3RlIE9ubHkgVlBDIHR5cGUgSVAgYWRkcmVzc2VzIGFyZSBzdXBwb3J0ZWQuXG4gICAgICovXG4gICAgcmVhZG9ubHkgaXB2NlNvdXJjZUNpZHJJcD86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IG5pY1R5cGU6IE5ldHdvcmsgdHlwZSwgY291bGQgYmUgJ2ludGVybmV0JyBvciAnaW50cmFuZXQnLiBEZWZhdWx0IHZhbHVlIGlzIGludGVybmV0LlxuICAgICAqL1xuICAgIHJlYWRvbmx5IG5pY1R5cGU/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBwb2xpY3k6IEF1dGhvcml6YXRpb24gcG9saWNpZXMsIHBhcmFtZXRlciB2YWx1ZXMgY2FuIGJlOiBhY2NlcHQgKGFjY2VwdGVkIGFjY2VzcyksIGRyb3AgKGRlbmllZCBhY2Nlc3MpLiBEZWZhdWx0IHZhbHVlIGlzIGFjY2VwdC5cbiAgICAgKi9cbiAgICByZWFkb25seSBwb2xpY3k/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBwcmlvcml0eTogQXV0aG9yaXphdGlvbiBwb2xpY2llcyBwcmlvcml0eSByYW5nZVsxLCAxMDBdXG4gICAgICovXG4gICAgcmVhZG9ubHkgcHJpb3JpdHk/OiBudW1iZXIgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBzZWN1cml0eUdyb3VwSWQ6IElkIG9mIHRoZSBzZWN1cml0eSBncm91cC5cbiAgICAgKi9cbiAgICByZWFkb25seSBzZWN1cml0eUdyb3VwSWQ/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBzb3VyY2VDaWRySXA6IFRoZSBzb3VyY2UgSVB2NCBDSURSIGJsb2NrIHRvIHdoaWNoIHlvdSB3YW50IHRvIGNvbnRyb2wgYWNjZXNzLiBDSURSIGJsb2NrcyBhbmQgSVB2NCBhZGRyZXNzZXMgYXJlIHN1cHBvcnRlZC5cbiAgICAgKi9cbiAgICByZWFkb25seSBzb3VyY2VDaWRySXA/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBzb3VyY2VHcm91cElkOiBTb3VyY2UgR3JvdXAgSWRcbiAgICAgKi9cbiAgICByZWFkb25seSBzb3VyY2VHcm91cElkPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgc291cmNlR3JvdXBPd25lcklkOiBTb3VyY2UgR3JvdXAgT3duZXIgQWNjb3VudCBJRFxuICAgICAqL1xuICAgIHJlYWRvbmx5IHNvdXJjZUdyb3VwT3duZXJJZD86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHNvdXJjZVBvcnRSYW5nZTogVGhlIHJhbmdlIG9mIHRoZSBwb3J0cyBlbmFibGVkIGJ5IHRoZSBzb3VyY2Ugc2VjdXJpdHkgZ3JvdXAgZm9yIHRoZSB0cmFuc3BvcnQgbGF5ZXIgcHJvdG9jb2wuIFZhbGlkIHZhbHVlczogVENQXFwvVURQOiBWYWx1ZSByYW5nZTogMSB0byA2NTUzNS4gVGhlIHN0YXJ0IHBvcnQgYW5kIHRoZSBlbmQgcG9ydCBhcmUgc2VwYXJhdGVkIGJ5IGEgc2xhc2ggKFxcLykuIENvcnJlY3QgZXhhbXBsZTogMVxcLzIwMC4gSW5jb3JyZWN0IGV4YW1wbGU6IDIwMFxcLzEuSUNNUDogLTFcXC8tMS5HUkU6IC0xXFwvLTEuQUxMOiAtMVxcLy0xLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHNvdXJjZVBvcnRSYW5nZT86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHNvdXJjZVByZWZpeExpc3RJZDogVGhlIElEIG9mIHRoZSBzb3VyY2UgcHJlZml4IGxpc3QgdG8gd2hpY2ggeW91IHdhbnQgdG8gY29udHJvbCBhY2Nlc3MuIFlvdSBjYW4gY2FsbCB0aGUgRGVzY3JpYmVQcmVmaXhMaXN0cyBvcGVyYXRpb24gdG8gcXVlcnkgdGhlIElEcyBvZiBhdmFpbGFibGUgcHJlZml4IGxpc3RzLiBUYWtlIG5vdGUgb2YgdGhlIGZvbGxvd2luZyBpdGVtczpcbiAgICAgKiBJZiBhIHNlY3VyaXR5IGdyb3VwIGlzIGluIHRoZSBjbGFzc2ljIG5ldHdvcmssIHlvdSBjYW5ub3QgY29uZmlndXJlIHByZWZpeCBsaXN0cyBpbiB0aGUgc2VjdXJpdHkgZ3JvdXAgcnVsZXMuIEZvciBpbmZvcm1hdGlvbiBhYm91dCB0aGUgbGltaXRzIG9uIHNlY3VyaXR5IGdyb3VwcyBhbmQgcHJlZml4IGxpc3RzLCBzZWUgdGhlIFwiU2VjdXJpdHkgZ3JvdXAgbGltaXRzXCIgc2VjdGlvbiBpbiBMaW1pdHMuXG4gICAgICogSWYgeW91IHNwZWNpZnkgdGhlIFNvdXJjZUNpZHJJcCwgSXB2NlNvdXJjZUNpZHJJcCwgb3IgU291cmNlR3JvdXBJZCBwYXJhbWV0ZXIsIHRoaXMgcGFyYW1ldGVyIGlzIGlnbm9yZWQuXG4gICAgICovXG4gICAgcmVhZG9ubHkgc291cmNlUHJlZml4TGlzdElkPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xufVxuXG4vKipcbiAqIFRoaXMgY2xhc3MgZW5jYXBzdWxhdGVzIGFuZCBleHRlbmRzIHRoZSBST1MgcmVzb3VyY2UgdHlwZSBgQUxJWVVOOjpFQ1M6OlNlY3VyaXR5R3JvdXBJbmdyZXNzYCwgd2hpY2ggaXMgdXNlZCB0byBjcmVhdGUgYW4gaW5ib3VuZCBydWxlIGZvciBhIHNlY3VyaXR5IGdyb3VwLlxuICogQE5vdGUgVGhpcyBjbGFzcyBtYXkgaGF2ZSBzb21lIG5ldyBmdW5jdGlvbnMgdG8gZmFjaWxpdGF0ZSBkZXZlbG9wbWVudCwgc28gaXQgaXMgcmVjb21tZW5kZWQgdG8gdXNlIHRoaXMgY2xhc3MgaW5zdGVhZCBvZiBgUm9zU2VjdXJpdHlHcm91cEluZ3Jlc3NgZm9yIGEgbW9yZSBjb252ZW5pZW50IGRldmVsb3BtZW50IGV4cGVyaWVuY2UuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2FsaXl1bi1lY3Mtc2VjdXJpdHlncm91cGluZ3Jlc3NcbiAqL1xuZXhwb3J0IGNsYXNzIFNlY3VyaXR5R3JvdXBJbmdyZXNzIGV4dGVuZHMgcm9zLlJlc291cmNlIHtcbiAgICBwcm90ZWN0ZWQgc2NvcGU6IHJvcy5Db25zdHJ1Y3Q7XG4gICAgcHJvdGVjdGVkIGlkOiBzdHJpbmc7XG4gICAgcHJvdGVjdGVkIHByb3BzOiBTZWN1cml0eUdyb3VwSW5ncmVzc1Byb3BzO1xuICAgIHByb3RlY3RlZCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIFBhcmFtIHNjb3BlIC0gc2NvcGUgaW4gd2hpY2ggdGhpcyByZXNvdXJjZSBpcyBkZWZpbmVkXG4gICAgICogUGFyYW0gaWQgICAgLSBzY29wZWQgaWQgb2YgdGhlIHJlc291cmNlXG4gICAgICogUGFyYW0gcHJvcHMgLSByZXNvdXJjZSBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IHJvcy5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBTZWN1cml0eUdyb3VwSW5ncmVzc1Byb3BzLCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDpib29sZWFuID0gdHJ1ZSkge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQpO1xuICAgICAgICB0aGlzLnNjb3BlID0gc2NvcGU7XG4gICAgICAgIHRoaXMuaWQgPSBpZDtcbiAgICAgICAgdGhpcy5wcm9wcyA9IHByb3BzO1xuICAgICAgICB0aGlzLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ID0gZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ7XG5cbiAgICAgICAgY29uc3Qgcm9zU2VjdXJpdHlHcm91cEluZ3Jlc3MgPSBuZXcgUm9zU2VjdXJpdHlHcm91cEluZ3Jlc3ModGhpcywgaWQsICB7XG4gICAgICAgICAgICBzb3VyY2VHcm91cElkOiBwcm9wcy5zb3VyY2VHcm91cElkLFxuICAgICAgICAgICAgcG9saWN5OiBwcm9wcy5wb2xpY3ksXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogcHJvcHMuZGVzY3JpcHRpb24sXG4gICAgICAgICAgICBzb3VyY2VQb3J0UmFuZ2U6IHByb3BzLnNvdXJjZVBvcnRSYW5nZSxcbiAgICAgICAgICAgIHByaW9yaXR5OiBwcm9wcy5wcmlvcml0eSA9PT0gdW5kZWZpbmVkIHx8IHByb3BzLnByaW9yaXR5ID09PSBudWxsID8gMSA6IHByb3BzLnByaW9yaXR5LFxuICAgICAgICAgICAgc2VjdXJpdHlHcm91cElkOiBwcm9wcy5zZWN1cml0eUdyb3VwSWQsXG4gICAgICAgICAgICBzb3VyY2VHcm91cE93bmVySWQ6IHByb3BzLnNvdXJjZUdyb3VwT3duZXJJZCxcbiAgICAgICAgICAgIGlwdjZTb3VyY2VDaWRySXA6IHByb3BzLmlwdjZTb3VyY2VDaWRySXAsXG4gICAgICAgICAgICBuaWNUeXBlOiBwcm9wcy5uaWNUeXBlLFxuICAgICAgICAgICAgcG9ydFJhbmdlOiBwcm9wcy5wb3J0UmFuZ2UsXG4gICAgICAgICAgICBzb3VyY2VDaWRySXA6IHByb3BzLnNvdXJjZUNpZHJJcCxcbiAgICAgICAgICAgIGlwUHJvdG9jb2w6IHByb3BzLmlwUHJvdG9jb2wsXG4gICAgICAgICAgICBzb3VyY2VQcmVmaXhMaXN0SWQ6IHByb3BzLnNvdXJjZVByZWZpeExpc3RJZCxcbiAgICAgICAgfSwgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgJiYgdGhpcy5zdGFjay5lbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCk7XG4gICAgICAgIHRoaXMucmVzb3VyY2UgPSByb3NTZWN1cml0eUdyb3VwSW5ncmVzcztcbiAgICB9XG59XG4iXX0=