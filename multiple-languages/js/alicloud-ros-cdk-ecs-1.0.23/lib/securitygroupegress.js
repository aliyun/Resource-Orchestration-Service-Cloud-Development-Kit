"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SecurityGroupEgress = exports.SecurityGroupEgressProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ecs_generated_1 = require("./ecs.generated");
Object.defineProperty(exports, "SecurityGroupEgressProperty", { enumerable: true, get: function () { return ecs_generated_1.RosSecurityGroupEgress; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::ECS::SecurityGroupEgress`, which is used to create an outbound access rule for a security group.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosSecurityGroupEgress`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-ecs-securitygroupegress
 */
class SecurityGroupEgress extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosSecurityGroupEgress = new ecs_generated_1.RosSecurityGroupEgress(this, id, {
            policy: props.policy,
            portRange: props.portRange,
            description: props.description,
            destPrefixListId: props.destPrefixListId,
            priority: props.priority === undefined || props.priority === null ? 1 : props.priority,
            securityGroupId: props.securityGroupId,
            destGroupOwnerId: props.destGroupOwnerId,
            ipProtocol: props.ipProtocol,
            destCidrIp: props.destCidrIp,
            nicType: props.nicType,
            ipv6DestCidrIp: props.ipv6DestCidrIp,
            destGroupId: props.destGroupId,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosSecurityGroupEgress;
    }
}
exports.SecurityGroupEgress = SecurityGroupEgress;
//# sourceMappingURL=data:application/json;base64,