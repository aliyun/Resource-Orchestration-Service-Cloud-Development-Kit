"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RecommendInstanceTypes = exports.RecommendInstanceTypesProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ecs_generated_1 = require("./ecs.generated");
Object.defineProperty(exports, "RecommendInstanceTypesProperty", { enumerable: true, get: function () { return ecs_generated_1.RosRecommendInstanceTypes; } });
/**
 * This class encapsulates and extends the ROS resource type `DATASOURCE::ECS::RecommendInstanceTypes`, which is used to query the recommended Elastic Compute Service (ECS) instance types.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosRecommendInstanceTypes`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/datasource-ecs-recommendinstancetypes
 */
class RecommendInstanceTypes extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props = {}, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosRecommendInstanceTypes = new ecs_generated_1.RosRecommendInstanceTypes(this, id, {
            zoneMatchMode: props.zoneMatchMode,
            ioOptimized: props.ioOptimized,
            zoneId: props.zoneId,
            instanceChargeType: props.instanceChargeType,
            memory: props.memory,
            scene: props.scene,
            systemDiskCategory: props.systemDiskCategory,
            cores: props.cores,
            priorityStrategy: props.priorityStrategy,
            instanceFamilyLevel: props.instanceFamilyLevel,
            maxPrice: props.maxPrice,
            instanceType: props.instanceType,
            instanceTypeFamilies: props.instanceTypeFamilies,
            spotStrategy: props.spotStrategy,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosRecommendInstanceTypes;
        this.attrInstanceTypeIds = rosRecommendInstanceTypes.attrInstanceTypeIds;
        this.attrInstanceTypes = rosRecommendInstanceTypes.attrInstanceTypes;
    }
}
exports.RecommendInstanceTypes = RecommendInstanceTypes;
//# sourceMappingURL=data:application/json;base64,