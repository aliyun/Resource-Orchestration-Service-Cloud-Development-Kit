"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NetworkInterfaces = exports.NetworkInterfacesProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ecs_generated_1 = require("./ecs.generated");
Object.defineProperty(exports, "NetworkInterfacesProperty", { enumerable: true, get: function () { return ecs_generated_1.RosNetworkInterfaces; } });
/**
 * This class encapsulates and extends the ROS resource type `DATASOURCE::ECS::NetworkInterfaces`, which is used to query the details of elastic network interfaces (ENIs).
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosNetworkInterfaces`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/datasource-ecs-networkinterfaces
 */
class NetworkInterfaces extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props = {}, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosNetworkInterfaces = new ecs_generated_1.RosNetworkInterfaces(this, id, {
            status: props.status,
            privateIpAddresses: props.privateIpAddresses,
            serviceManaged: props.serviceManaged,
            resourceGroupId: props.resourceGroupId,
            instanceId: props.instanceId,
            securityGroupId: props.securityGroupId,
            vSwitchId: props.vSwitchId,
            networkInterfaceName: props.networkInterfaceName,
            networkInterfaceIds: props.networkInterfaceIds,
            primaryIpAddress: props.primaryIpAddress,
            ipv6Addresses: props.ipv6Addresses,
            type: props.type,
            vpcId: props.vpcId,
            tags: props.tags,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosNetworkInterfaces;
        this.attrNetworkInterfaceIds = rosNetworkInterfaces.attrNetworkInterfaceIds;
        this.attrNetworkInterfaces = rosNetworkInterfaces.attrNetworkInterfaces;
    }
}
exports.NetworkInterfaces = NetworkInterfaces;
//# sourceMappingURL=data:application/json;base64,