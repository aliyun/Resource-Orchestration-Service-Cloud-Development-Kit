"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AssignPrivateIpAddresses = exports.AssignPrivateIpAddressesProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ecs_generated_1 = require("./ecs.generated");
Object.defineProperty(exports, "AssignPrivateIpAddressesProperty", { enumerable: true, get: function () { return ecs_generated_1.RosAssignPrivateIpAddresses; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::ECS::AssignPrivateIpAddresses`, which is used to assign one or more secondary private IP addresses to an ENI. You can specify private IP addresses within the CIDR block of the vSwitch that hosts the ENI. You can also specify the number of private IP addresses for ECS to assign them automatically.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosAssignPrivateIpAddresses`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-ecs-assignprivateipaddresses
 */
class AssignPrivateIpAddresses extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosAssignPrivateIpAddresses = new ecs_generated_1.RosAssignPrivateIpAddresses(this, id, {
            secondaryPrivateIpAddressCount: props.secondaryPrivateIpAddressCount,
            privateIpAddresses: props.privateIpAddresses,
            networkInterfaceId: props.networkInterfaceId,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosAssignPrivateIpAddresses;
        this.attrNetworkInterfaceId = rosAssignPrivateIpAddresses.attrNetworkInterfaceId;
        this.attrPrivateIpAddresses = rosAssignPrivateIpAddresses.attrPrivateIpAddresses;
    }
}
exports.AssignPrivateIpAddresses = AssignPrivateIpAddresses;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzaWducHJpdmF0ZWlwYWRkcmVzc2VzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYXNzaWducHJpdmF0ZWlwYWRkcmVzc2VzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDhDQUE4QztBQUM5QyxtREFBOEQ7QUFFdEIsaUhBRi9CLDJDQUEyQixPQUVvQztBQTZCeEU7Ozs7R0FJRztBQUNILE1BQWEsd0JBQXlCLFNBQVEsR0FBRyxDQUFDLFFBQVE7SUFnQnREOzs7O09BSUc7SUFDSCxZQUFZLEtBQW9CLEVBQUUsRUFBVSxFQUFFLEtBQW9DLEVBQUUsbUNBQTJDLElBQUk7UUFDL0gsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNqQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUNiLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxnQ0FBZ0MsR0FBRyxnQ0FBZ0MsQ0FBQztRQUV6RSxNQUFNLDJCQUEyQixHQUFHLElBQUksMkNBQTJCLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRztZQUMzRSw4QkFBOEIsRUFBRSxLQUFLLENBQUMsOEJBQThCO1lBQ3BFLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxrQkFBa0I7WUFDNUMsa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGtCQUFrQjtTQUMvQyxFQUFFLGdDQUFnQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztRQUNwRixJQUFJLENBQUMsUUFBUSxHQUFHLDJCQUEyQixDQUFDO1FBQzVDLElBQUksQ0FBQyxzQkFBc0IsR0FBRywyQkFBMkIsQ0FBQyxzQkFBc0IsQ0FBQztRQUNqRixJQUFJLENBQUMsc0JBQXNCLEdBQUcsMkJBQTJCLENBQUMsc0JBQXNCLENBQUM7SUFDckYsQ0FBQztDQUNKO0FBckNELDREQXFDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHJvcyBmcm9tICdAYWxpY2xvdWQvcm9zLWNkay1jb3JlJztcbmltcG9ydCB7IFJvc0Fzc2lnblByaXZhdGVJcEFkZHJlc3NlcyB9IGZyb20gJy4vZWNzLmdlbmVyYXRlZCc7XG4vLyBHZW5lcmF0ZWQgZnJvbSB0aGUgQWxpQ2xvdWQgUk9TIFJlc291cmNlIFNwZWNpZmljYXRpb25cbmV4cG9ydCB7IFJvc0Fzc2lnblByaXZhdGVJcEFkZHJlc3NlcyBhcyBBc3NpZ25Qcml2YXRlSXBBZGRyZXNzZXNQcm9wZXJ0eSB9O1xuXG4vKipcbiAqIFByb3BlcnRpZXMgZm9yIGRlZmluaW5nIGEgYEFzc2lnblByaXZhdGVJcEFkZHJlc3Nlc2AuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2FsaXl1bi1lY3MtYXNzaWducHJpdmF0ZWlwYWRkcmVzc2VzXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQXNzaWduUHJpdmF0ZUlwQWRkcmVzc2VzUHJvcHMge1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgbmV0d29ya0ludGVyZmFjZUlkOiBUaGUgSUQgb2YgdGhlIEVOSS5cbiAgICAgKi9cbiAgICByZWFkb25seSBuZXR3b3JrSW50ZXJmYWNlSWQ6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHByaXZhdGVJcEFkZHJlc3NlczogT25lIG9yIG11bHRpcGxlIHNlY29uZGFyeSBwcml2YXRlIElQIGFkZHJlc3NlcyBzZWxlY3RlZCBmcm9tIHRoZSBDSURSIGJsb2NrIG9mIHRoZSBWU3dpdGNoIHRoYXQgaG9zdHMgdGhlIEVOSS4gXG4gICAgICogVmFsaWQgdmFsdWVzIG9mIG51bWJlciBvZiBwcml2YXRlIGlwIGFkZHJlc3NlczpcbiAgICAgKiBXaGVuIHRoZSBFTkkgaXMgaW4gdGhlIEF2YWlsYWJsZSBzdGF0ZTogMSB0byAxMC5cbiAgICAgKiBXaGVuIHRoZSBFTkkgaXMgaW4gdGhlIEluVXNlIHN0YXRlOiBsaW1pdGVkIGJ5IHRoZSBpbnN0YW5jZSB0eXBlLiBcbiAgICAgKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlIEluc3RhbmNlIHR5cGUgZmFtaWxpZXMuXG4gICAgICogWW91IG11c3Qgc3BlY2lmeSBlaXRoZXIgdGhlIFByaXZhdGVJcEFkZHJlc3NlcyBwYXJhbWV0ZXIgb3IgdGhlIFNlY29uZGFyeVByaXZhdGVJcEFkZHJlc3NDb3VudCBwYXJhbWV0ZXIgdG8gYXNzaWduIHNlY29uZGFyeSBwcml2YXRlIElQIGFkZHJlc3Nlcy5cbiAgICAgKi9cbiAgICByZWFkb25seSBwcml2YXRlSXBBZGRyZXNzZXM/OiBBcnJheTxhbnkgfCByb3MuSVJlc29sdmFibGU+IHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgc2Vjb25kYXJ5UHJpdmF0ZUlwQWRkcmVzc0NvdW50OiBUaGUgc3BlY2lmaWVkIG51bWJlciBvZiBwcml2YXRlIElQIGFkZHJlc3NlcyB0byBiZSBhc3NpZ25lZCBieSB0aGUgRUNTIGluc3RhbmNlLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHNlY29uZGFyeVByaXZhdGVJcEFkZHJlc3NDb3VudD86IG51bWJlciB8IHJvcy5JUmVzb2x2YWJsZTtcbn1cblxuLyoqXG4gKiBUaGlzIGNsYXNzIGVuY2Fwc3VsYXRlcyBhbmQgZXh0ZW5kcyB0aGUgUk9TIHJlc291cmNlIHR5cGUgYEFMSVlVTjo6RUNTOjpBc3NpZ25Qcml2YXRlSXBBZGRyZXNzZXNgLCB3aGljaCBpcyB1c2VkIHRvIGFzc2lnbiBvbmUgb3IgbW9yZSBzZWNvbmRhcnkgcHJpdmF0ZSBJUCBhZGRyZXNzZXMgdG8gYW4gRU5JLiBZb3UgY2FuIHNwZWNpZnkgcHJpdmF0ZSBJUCBhZGRyZXNzZXMgd2l0aGluIHRoZSBDSURSIGJsb2NrIG9mIHRoZSB2U3dpdGNoIHRoYXQgaG9zdHMgdGhlIEVOSS4gWW91IGNhbiBhbHNvIHNwZWNpZnkgdGhlIG51bWJlciBvZiBwcml2YXRlIElQIGFkZHJlc3NlcyBmb3IgRUNTIHRvIGFzc2lnbiB0aGVtIGF1dG9tYXRpY2FsbHkuXG4gKiBATm90ZSBUaGlzIGNsYXNzIG1heSBoYXZlIHNvbWUgbmV3IGZ1bmN0aW9ucyB0byBmYWNpbGl0YXRlIGRldmVsb3BtZW50LCBzbyBpdCBpcyByZWNvbW1lbmRlZCB0byB1c2UgdGhpcyBjbGFzcyBpbnN0ZWFkIG9mIGBSb3NBc3NpZ25Qcml2YXRlSXBBZGRyZXNzZXNgZm9yIGEgbW9yZSBjb252ZW5pZW50IGRldmVsb3BtZW50IGV4cGVyaWVuY2UuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2FsaXl1bi1lY3MtYXNzaWducHJpdmF0ZWlwYWRkcmVzc2VzXG4gKi9cbmV4cG9ydCBjbGFzcyBBc3NpZ25Qcml2YXRlSXBBZGRyZXNzZXMgZXh0ZW5kcyByb3MuUmVzb3VyY2Uge1xuICAgIHByb3RlY3RlZCBzY29wZTogcm9zLkNvbnN0cnVjdDtcbiAgICBwcm90ZWN0ZWQgaWQ6IHN0cmluZztcbiAgICBwcm90ZWN0ZWQgcHJvcHM6IEFzc2lnblByaXZhdGVJcEFkZHJlc3Nlc1Byb3BzO1xuICAgIHByb3RlY3RlZCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBOZXR3b3JrSW50ZXJmYWNlSWQ6IFRoZSBJRCBvZiB0aGUgRU5JLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyTmV0d29ya0ludGVyZmFjZUlkOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgUHJpdmF0ZUlwQWRkcmVzc2VzOiBBc3NpZ25lZCBwcml2YXRlIGlwIGFkZHJlc3Nlcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0clByaXZhdGVJcEFkZHJlc3Nlczogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUGFyYW0gc2NvcGUgLSBzY29wZSBpbiB3aGljaCB0aGlzIHJlc291cmNlIGlzIGRlZmluZWRcbiAgICAgKiBQYXJhbSBpZCAgICAtIHNjb3BlZCBpZCBvZiB0aGUgcmVzb3VyY2VcbiAgICAgKiBQYXJhbSBwcm9wcyAtIHJlc291cmNlIHByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihzY29wZTogcm9zLkNvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IEFzc2lnblByaXZhdGVJcEFkZHJlc3Nlc1Byb3BzLCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDpib29sZWFuID0gdHJ1ZSkge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQpO1xuICAgICAgICB0aGlzLnNjb3BlID0gc2NvcGU7XG4gICAgICAgIHRoaXMuaWQgPSBpZDtcbiAgICAgICAgdGhpcy5wcm9wcyA9IHByb3BzO1xuICAgICAgICB0aGlzLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ID0gZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ7XG5cbiAgICAgICAgY29uc3Qgcm9zQXNzaWduUHJpdmF0ZUlwQWRkcmVzc2VzID0gbmV3IFJvc0Fzc2lnblByaXZhdGVJcEFkZHJlc3Nlcyh0aGlzLCBpZCwgIHtcbiAgICAgICAgICAgIHNlY29uZGFyeVByaXZhdGVJcEFkZHJlc3NDb3VudDogcHJvcHMuc2Vjb25kYXJ5UHJpdmF0ZUlwQWRkcmVzc0NvdW50LFxuICAgICAgICAgICAgcHJpdmF0ZUlwQWRkcmVzc2VzOiBwcm9wcy5wcml2YXRlSXBBZGRyZXNzZXMsXG4gICAgICAgICAgICBuZXR3b3JrSW50ZXJmYWNlSWQ6IHByb3BzLm5ldHdvcmtJbnRlcmZhY2VJZCxcbiAgICAgICAgfSwgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgJiYgdGhpcy5zdGFjay5lbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCk7XG4gICAgICAgIHRoaXMucmVzb3VyY2UgPSByb3NBc3NpZ25Qcml2YXRlSXBBZGRyZXNzZXM7XG4gICAgICAgIHRoaXMuYXR0ck5ldHdvcmtJbnRlcmZhY2VJZCA9IHJvc0Fzc2lnblByaXZhdGVJcEFkZHJlc3Nlcy5hdHRyTmV0d29ya0ludGVyZmFjZUlkO1xuICAgICAgICB0aGlzLmF0dHJQcml2YXRlSXBBZGRyZXNzZXMgPSByb3NBc3NpZ25Qcml2YXRlSXBBZGRyZXNzZXMuYXR0clByaXZhdGVJcEFkZHJlc3NlcztcbiAgICB9XG59XG4iXX0=