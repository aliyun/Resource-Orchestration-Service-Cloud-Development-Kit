"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NatIpCidrs = exports.NatIpCidrsProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const vpc_generated_1 = require("./vpc.generated");
Object.defineProperty(exports, "NatIpCidrsProperty", { enumerable: true, get: function () { return vpc_generated_1.RosNatIpCidrs; } });
/**
 * This class encapsulates and extends the ROS resource type `DATASOURCE::VPC::NatIpCidrs`, which is used to query the CIDR blocks of a NAT gateway.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosNatIpCidrs`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/datasource-vpc-natipcidrs
 */
class NatIpCidrs extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosNatIpCidrs = new vpc_generated_1.RosNatIpCidrs(this, id, {
            natIpCidr: props.natIpCidr,
            natGatewayId: props.natGatewayId,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosNatIpCidrs;
        this.attrNatIpCidrIds = rosNatIpCidrs.attrNatIpCidrIds;
        this.attrNatIpCidrs = rosNatIpCidrs.attrNatIpCidrs;
    }
}
exports.NatIpCidrs = NatIpCidrs;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF0aXBjaWRycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm5hdGlwY2lkcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsOENBQThDO0FBQzlDLG1EQUFnRDtBQUV0QixtR0FGakIsNkJBQWEsT0FFc0I7QUFtQjVDOzs7O0dBSUc7QUFDSCxNQUFhLFVBQVcsU0FBUSxHQUFHLENBQUMsUUFBUTtJQWdCeEM7Ozs7T0FJRztJQUNILFlBQVksS0FBb0IsRUFBRSxFQUFVLEVBQUUsS0FBc0IsRUFBRSxtQ0FBMkMsSUFBSTtRQUNqSCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ2pCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQ2IsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLGdDQUFnQyxHQUFHLGdDQUFnQyxDQUFDO1FBRXpFLE1BQU0sYUFBYSxHQUFHLElBQUksNkJBQWEsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFHO1lBQy9DLFNBQVMsRUFBRSxLQUFLLENBQUMsU0FBUztZQUMxQixZQUFZLEVBQUUsS0FBSyxDQUFDLFlBQVk7U0FDbkMsRUFBRSxnQ0FBZ0MsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7UUFDcEYsSUFBSSxDQUFDLFFBQVEsR0FBRyxhQUFhLENBQUM7UUFDOUIsSUFBSSxDQUFDLGdCQUFnQixHQUFHLGFBQWEsQ0FBQyxnQkFBZ0IsQ0FBQztRQUN2RCxJQUFJLENBQUMsY0FBYyxHQUFHLGFBQWEsQ0FBQyxjQUFjLENBQUM7SUFDdkQsQ0FBQztDQUNKO0FBcENELGdDQW9DQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHJvcyBmcm9tICdAYWxpY2xvdWQvcm9zLWNkay1jb3JlJztcbmltcG9ydCB7IFJvc05hdElwQ2lkcnMgfSBmcm9tICcuL3ZwYy5nZW5lcmF0ZWQnO1xuLy8gR2VuZXJhdGVkIGZyb20gdGhlIEFsaUNsb3VkIFJPUyBSZXNvdXJjZSBTcGVjaWZpY2F0aW9uXG5leHBvcnQgeyBSb3NOYXRJcENpZHJzIGFzIE5hdElwQ2lkcnNQcm9wZXJ0eSB9O1xuXG4vKipcbiAqIFByb3BlcnRpZXMgZm9yIGRlZmluaW5nIGEgYE5hdElwQ2lkcnNgLlxuICogU2VlIGh0dHBzOi8vd3d3LmFsaWJhYmFjbG91ZC5jb20vaGVscC9yb3MvZGV2ZWxvcGVyLXJlZmVyZW5jZS9kYXRhc291cmNlLXZwYy1uYXRpcGNpZHJzXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgTmF0SXBDaWRyc1Byb3BzIHtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IG5hdEdhdGV3YXlJZDogTkFUIElQIEFERFJFU1MgcmFuZ2UgdG8gdGhlIHNlY3VyaXR5IGdyb3VwIG9mIHRoZSBLYWZrYSBWUEMgTkFUIGdhdGV3YXkgaW5zdGFuY2UgSUQuXG4gICAgICovXG4gICAgcmVhZG9ubHkgbmF0R2F0ZXdheUlkOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBuYXRJcENpZHI6IENyZWF0ZSBhIE5BVCBJUCBBRERSRVNTLiBUaGUgbmV3IGFkZHJlc3Mgc2VnbWVudCBtdXN0IG1lZXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOiBiZWxvbmcgdG8gMTAuMC4wLjBcXC84LCAxNzIuMTYuMC4wXFwvMTIgb3IgMTkyLjE2OC4wLjBcXC8xNiBuZXR3b3JrIHNlZ21lbnQgYW5kIGl0cyBzdWJuZXQuIFN1cHBvcnQgdGhlIHN1Ym5ldCBtYXNrIG9mIHRoZSBudW1iZXIgb2YgYml0cyBpbiB0aGUgcmFuZ2Ugb2YgMTYgdG8gMzItYml0LiBJZiB5b3Ugd2FudCB0byB1c2UgdGhlIElQIGFkZHJlc3Mgb2YgYSBwdWJsaWMgbmV0d29yayBzZWdtZW50IGFzIHRoZSBOQVQgSVAgQUREUkVTUywgdGhlIFZpcnR1YWwgUHJpdmF0ZSBDbG91ZCAoVlBDIE5BVCBpcyBhbHJlYWR5IHVzaW5nIHRoZSBJUCBhZGRyZXNzIG9mIGEgcHVibGljIG5ldHdvcmsgb2YgcGVybWlzc2lvbnMuIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgY3JlYXRlIGEgdmlydHVhbCBwcml2YXRlIGNsb3VkIChWUEMgTkFUIGdhdGV3YXkgaW5zdGFuY2UuXG4gICAgICovXG4gICAgcmVhZG9ubHkgbmF0SXBDaWRyPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xufVxuXG4vKipcbiAqIFRoaXMgY2xhc3MgZW5jYXBzdWxhdGVzIGFuZCBleHRlbmRzIHRoZSBST1MgcmVzb3VyY2UgdHlwZSBgREFUQVNPVVJDRTo6VlBDOjpOYXRJcENpZHJzYCwgd2hpY2ggaXMgdXNlZCB0byBxdWVyeSB0aGUgQ0lEUiBibG9ja3Mgb2YgYSBOQVQgZ2F0ZXdheS5cbiAqIEBOb3RlIFRoaXMgY2xhc3MgbWF5IGhhdmUgc29tZSBuZXcgZnVuY3Rpb25zIHRvIGZhY2lsaXRhdGUgZGV2ZWxvcG1lbnQsIHNvIGl0IGlzIHJlY29tbWVuZGVkIHRvIHVzZSB0aGlzIGNsYXNzIGluc3RlYWQgb2YgYFJvc05hdElwQ2lkcnNgZm9yIGEgbW9yZSBjb252ZW5pZW50IGRldmVsb3BtZW50IGV4cGVyaWVuY2UuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2RhdGFzb3VyY2UtdnBjLW5hdGlwY2lkcnNcbiAqL1xuZXhwb3J0IGNsYXNzIE5hdElwQ2lkcnMgZXh0ZW5kcyByb3MuUmVzb3VyY2Uge1xuICAgIHByb3RlY3RlZCBzY29wZTogcm9zLkNvbnN0cnVjdDtcbiAgICBwcm90ZWN0ZWQgaWQ6IHN0cmluZztcbiAgICBwcm90ZWN0ZWQgcHJvcHM6IE5hdElwQ2lkcnNQcm9wcztcbiAgICBwcm90ZWN0ZWQgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6IGJvb2xlYW47XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgTmF0SXBDaWRySWRzOiBUaGUgbGlzdCBvZiBuYXQgaXAgY2lkciBJRHMuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJOYXRJcENpZHJJZHM6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBOYXRJcENpZHJzOiBUaGUgbGlzdCBvZiBuYXQgaXAgY2lkcnMuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJOYXRJcENpZHJzOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQYXJhbSBzY29wZSAtIHNjb3BlIGluIHdoaWNoIHRoaXMgcmVzb3VyY2UgaXMgZGVmaW5lZFxuICAgICAqIFBhcmFtIGlkICAgIC0gc2NvcGVkIGlkIG9mIHRoZSByZXNvdXJjZVxuICAgICAqIFBhcmFtIHByb3BzIC0gcmVzb3VyY2UgcHJvcGVydGllc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiByb3MuQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogTmF0SXBDaWRyc1Byb3BzLCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDpib29sZWFuID0gdHJ1ZSkge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQpO1xuICAgICAgICB0aGlzLnNjb3BlID0gc2NvcGU7XG4gICAgICAgIHRoaXMuaWQgPSBpZDtcbiAgICAgICAgdGhpcy5wcm9wcyA9IHByb3BzO1xuICAgICAgICB0aGlzLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ID0gZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ7XG5cbiAgICAgICAgY29uc3Qgcm9zTmF0SXBDaWRycyA9IG5ldyBSb3NOYXRJcENpZHJzKHRoaXMsIGlkLCAge1xuICAgICAgICAgICAgbmF0SXBDaWRyOiBwcm9wcy5uYXRJcENpZHIsXG4gICAgICAgICAgICBuYXRHYXRld2F5SWQ6IHByb3BzLm5hdEdhdGV3YXlJZCxcbiAgICAgICAgfSwgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgJiYgdGhpcy5zdGFjay5lbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCk7XG4gICAgICAgIHRoaXMucmVzb3VyY2UgPSByb3NOYXRJcENpZHJzO1xuICAgICAgICB0aGlzLmF0dHJOYXRJcENpZHJJZHMgPSByb3NOYXRJcENpZHJzLmF0dHJOYXRJcENpZHJJZHM7XG4gICAgICAgIHRoaXMuYXR0ck5hdElwQ2lkcnMgPSByb3NOYXRJcENpZHJzLmF0dHJOYXRJcENpZHJzO1xuICAgIH1cbn1cbiJdfQ==