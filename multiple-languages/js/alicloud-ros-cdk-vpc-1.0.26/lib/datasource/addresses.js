"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Addresses = exports.AddressesProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const vpc_generated_1 = require("./vpc.generated");
Object.defineProperty(exports, "AddressesProperty", { enumerable: true, get: function () { return vpc_generated_1.RosAddresses; } });
/**
 * This class encapsulates and extends the ROS resource type `DATASOURCE::EIP::Addresses`, which is used to query the information about elastic IP addresses (EIPs).
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosAddresses`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/datasource-eip-addresses
 */
class Addresses extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props = {}, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosAddresses = new vpc_generated_1.RosAddresses(this, id, {
            segmentInstanceId: props.segmentInstanceId,
            addressName: props.addressName,
            resourceGroupId: props.resourceGroupId,
            instanceId: props.instanceId,
            isp: props.isp,
            allocationId: props.allocationId,
            paymentType: props.paymentType,
            ipAddress: props.ipAddress,
            instanceType: props.instanceType,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosAddresses;
        this.attrAddresses = rosAddresses.attrAddresses;
        this.attrAllocationIds = rosAddresses.attrAllocationIds;
    }
}
exports.Addresses = Addresses;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRkcmVzc2VzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYWRkcmVzc2VzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDhDQUE4QztBQUM5QyxtREFBK0M7QUFFdEIsa0dBRmhCLDRCQUFZLE9BRXFCO0FBeUUxQzs7OztHQUlHO0FBQ0gsTUFBYSxTQUFVLFNBQVEsR0FBRyxDQUFDLFFBQVE7SUFnQnZDOzs7O09BSUc7SUFDSCxZQUFZLEtBQW9CLEVBQUUsRUFBVSxFQUFFLFFBQXdCLEVBQUUsRUFBRSxtQ0FBMkMsSUFBSTtRQUNySCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ2pCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQ2IsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLGdDQUFnQyxHQUFHLGdDQUFnQyxDQUFDO1FBRXpFLE1BQU0sWUFBWSxHQUFHLElBQUksNEJBQVksQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFHO1lBQzdDLGlCQUFpQixFQUFFLEtBQUssQ0FBQyxpQkFBaUI7WUFDMUMsV0FBVyxFQUFFLEtBQUssQ0FBQyxXQUFXO1lBQzlCLGVBQWUsRUFBRSxLQUFLLENBQUMsZUFBZTtZQUN0QyxVQUFVLEVBQUUsS0FBSyxDQUFDLFVBQVU7WUFDNUIsR0FBRyxFQUFFLEtBQUssQ0FBQyxHQUFHO1lBQ2QsWUFBWSxFQUFFLEtBQUssQ0FBQyxZQUFZO1lBQ2hDLFdBQVcsRUFBRSxLQUFLLENBQUMsV0FBVztZQUM5QixTQUFTLEVBQUUsS0FBSyxDQUFDLFNBQVM7WUFDMUIsWUFBWSxFQUFFLEtBQUssQ0FBQyxZQUFZO1NBQ25DLEVBQUUsZ0NBQWdDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO1FBQ3BGLElBQUksQ0FBQyxRQUFRLEdBQUcsWUFBWSxDQUFDO1FBQzdCLElBQUksQ0FBQyxhQUFhLEdBQUcsWUFBWSxDQUFDLGFBQWEsQ0FBQztRQUNoRCxJQUFJLENBQUMsaUJBQWlCLEdBQUcsWUFBWSxDQUFDLGlCQUFpQixDQUFDO0lBQzVELENBQUM7Q0FDSjtBQTNDRCw4QkEyQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyByb3MgZnJvbSAnQGFsaWNsb3VkL3Jvcy1jZGstY29yZSc7XG5pbXBvcnQgeyBSb3NBZGRyZXNzZXMgfSBmcm9tICcuL3ZwYy5nZW5lcmF0ZWQnO1xuLy8gR2VuZXJhdGVkIGZyb20gdGhlIEFsaUNsb3VkIFJPUyBSZXNvdXJjZSBTcGVjaWZpY2F0aW9uXG5leHBvcnQgeyBSb3NBZGRyZXNzZXMgYXMgQWRkcmVzc2VzUHJvcGVydHkgfTtcblxuLyoqXG4gKiBQcm9wZXJ0aWVzIGZvciBkZWZpbmluZyBhIGBBZGRyZXNzZXNgLlxuICogU2VlIGh0dHBzOi8vd3d3LmFsaWJhYmFjbG91ZC5jb20vaGVscC9yb3MvZGV2ZWxvcGVyLXJlZmVyZW5jZS9kYXRhc291cmNlLWVpcC1hZGRyZXNzZXNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBBZGRyZXNzZXNQcm9wcyB7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBhZGRyZXNzTmFtZTogVGhlIG5hbWUgb2YgdGhlIEVJUC5cbiAgICAgKi9cbiAgICByZWFkb25seSBhZGRyZXNzTmFtZT86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGFsbG9jYXRpb25JZDogVGhlIElEIG9mIHRoZSBFSVAgdGhhdCB5b3Ugd2FudCB0byBxdWVyeS5cbiAgICAgKi9cbiAgICByZWFkb25seSBhbGxvY2F0aW9uSWQ/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBpbnN0YW5jZUlkOiBUaGUgSUQgb2YgdGhlIGNsb3VkIHJlc291cmNlLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGluc3RhbmNlSWQ/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBpbnN0YW5jZVR5cGU6IFRoZSB0eXBlIG9mIHRoZSBjdXJyZW50IGJvdW5kIGluc3RhbmNlLlxuICAgICAqIC0gKipFY3NJbnN0YW5jZSoqOiBhbiBFQ1MgaW5zdGFuY2Ugb2YgdGhlIFZQQyB0eXBlLlxuICAgICAqIC0gKipTbGJJbnN0YW5jZSoqOiBhbiBTTEIgaW5zdGFuY2Ugb2YgdGhlIFZQQyB0eXBlLlxuICAgICAqIC0gKipOYXQqKjpOQVQgZ2F0ZXdheS5cbiAgICAgKiAtICoqSGFWaXAqKjogYSBoaWdobHkgYXZhaWxhYmxlIHZpcnR1YWwgSVAgYWRkcmVzcy5cbiAgICAgKiAtICoqTmV0d29ya0ludGVyZmFjZSoqOiBTZWNvbmRhcnkgRU5JLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGluc3RhbmNlVHlwZT86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGlwQWRkcmVzczogVGhlIElQIGFkZHJlc3MgcG9vbCB0byB3aGljaCB0aGUgRUlQIHRoYXQgeW91IHdhbnQgdG8gcXVlcnkgYmVsb25ncy5cbiAgICAgKi9cbiAgICByZWFkb25seSBpcEFkZHJlc3M/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBpc3A6IFRoZSBsaW5lIHR5cGUuIFZhbGlkIHZhbHVlczpcbiAgICAgKiBCR1AgKGRlZmF1bHQpOiBCR1AgKE11bHRpLUlTUCkgbGluZXMuIEFsbCByZWdpb25zIHN1cHBvcnQgQkdQIChNdWx0aS1JU1ApIEVJUHMuXG4gICAgICogQkdQX1BSTzogQkdQIChNdWx0aS1JU1ApIFBybyBsaW5lcy4gXG4gICAgICogT25seSB0aGUgZm9sbG93aW5nIHJlZ2lvbnMgc3VwcG9ydCBCR1AgKE11bHRpLUlTUCkgUHJvIGxpbmVzOiBcbiAgICAgKiBDaGluYSAoSG9uZyBLb25nKSwgU2luZ2Fwb3JlLCBNYWxheXNpYSAoS3VhbGEgTHVtcHVyKSwgUGhpbGlwcGluZXMgKE1hbmlsYSksIEluZG9uZXNpYSAoSmFrYXJ0YSksIGFuZCBUaGFpbGFuZCAoQmFuZ2tvaykuXG4gICAgICogRm9yIG1vcmUgaW5mb3JtYXRpb24gYWJvdXQgQkdQIChNdWx0aS1JU1ApIGFuZCBCR1AgKE11bHRpLUlTUCkgUHJvLCBzZWUgRUlQIGxpbmUgdHlwZXMuXG4gICAgICogSWYgeW91IGFyZSBhbGxvd2VkIHRvIHVzZSBzaW5nbGUtSVNQIGJhbmR3aWR0aCwgeW91IGNhbiBhbHNvIGNob29zZSBvbmUgb2YgdGhlIGZvbGxvd2luZyB2YWx1ZXM6XG4gICAgICogQ2hpbmFUZWxlY29tOiBDaGluYSBUZWxlY29tXG4gICAgICogQ2hpbmFVbmljb206IENoaW5hIFVuaWNvbVxuICAgICAqIENoaW5hTW9iaWxlOiBDaGluYSBNb2JpbGVcbiAgICAgKiBDaGluYVRlbGVjb21fTDI6IENoaW5hIFRlbGVjb20gTDJcbiAgICAgKiBDaGluYVVuaWNvbV9MMjogQ2hpbmEgVW5pY29tIEwyXG4gICAgICogQ2hpbmFNb2JpbGVfTDI6IENoaW5hIE1vYmlsZSBMMlxuICAgICAqIElmIHlvdXIgc2VydmljZXMgYXJlIGRlcGxveWVkIGluIENoaW5hIEVhc3QgMSBGaW5hbmNlLCB5b3UgbXVzdCBzZXQgdGhpcyBwYXJhbWV0ZXIgdG8gQkdQX0ZpbmFuY2VDbG91ZC5cbiAgICAgKi9cbiAgICByZWFkb25seSBpc3A/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBwYXltZW50VHlwZTogVGhlIGJpbGxpbmcgbWV0aG9kIG9mIHRoZSBFSVAuIFZhbGlkIHZhbHVlczogIFByZVBhaWQ6IHN1YnNjcmlwdGlvbiBQb3N0UGFpZDogcGF5LWFzLXlvdS1nby5cbiAgICAgKi9cbiAgICByZWFkb25seSBwYXltZW50VHlwZT86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHJlc291cmNlR3JvdXBJZDogVGhlIElEIG9mIHRoZSByZXNvdXJjZSBncm91cCB0byB3aGljaCB0aGUgRUlQcyBiZWxvbmcuXG4gICAgICovXG4gICAgcmVhZG9ubHkgcmVzb3VyY2VHcm91cElkPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgc2VnbWVudEluc3RhbmNlSWQ6IFRoZSBJRCBvZiB0aGUgY29uc2VjdXRpdmUgRUlQcy5cbiAgICAgKiBUaGlzIHBhcmFtZXRlciB2YWx1ZSBpcyByZXR1cm5lZCBvbmx5IGlmIHRoZSBFSVAgaXMgYSBjb250aW51b3VzIEVJUC5cbiAgICAgKi9cbiAgICByZWFkb25seSBzZWdtZW50SW5zdGFuY2VJZD86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcbn1cblxuLyoqXG4gKiBUaGlzIGNsYXNzIGVuY2Fwc3VsYXRlcyBhbmQgZXh0ZW5kcyB0aGUgUk9TIHJlc291cmNlIHR5cGUgYERBVEFTT1VSQ0U6OkVJUDo6QWRkcmVzc2VzYCwgd2hpY2ggaXMgdXNlZCB0byBxdWVyeSB0aGUgaW5mb3JtYXRpb24gYWJvdXQgZWxhc3RpYyBJUCBhZGRyZXNzZXMgKEVJUHMpLlxuICogQE5vdGUgVGhpcyBjbGFzcyBtYXkgaGF2ZSBzb21lIG5ldyBmdW5jdGlvbnMgdG8gZmFjaWxpdGF0ZSBkZXZlbG9wbWVudCwgc28gaXQgaXMgcmVjb21tZW5kZWQgdG8gdXNlIHRoaXMgY2xhc3MgaW5zdGVhZCBvZiBgUm9zQWRkcmVzc2VzYGZvciBhIG1vcmUgY29udmVuaWVudCBkZXZlbG9wbWVudCBleHBlcmllbmNlLlxuICogU2VlIGh0dHBzOi8vd3d3LmFsaWJhYmFjbG91ZC5jb20vaGVscC9yb3MvZGV2ZWxvcGVyLXJlZmVyZW5jZS9kYXRhc291cmNlLWVpcC1hZGRyZXNzZXNcbiAqL1xuZXhwb3J0IGNsYXNzIEFkZHJlc3NlcyBleHRlbmRzIHJvcy5SZXNvdXJjZSB7XG4gICAgcHJvdGVjdGVkIHNjb3BlOiByb3MuQ29uc3RydWN0O1xuICAgIHByb3RlY3RlZCBpZDogc3RyaW5nO1xuICAgIHByb3RlY3RlZCBwcm9wczogQWRkcmVzc2VzUHJvcHM7XG4gICAgcHJvdGVjdGVkIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OiBib29sZWFuO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIEFkZHJlc3NlczogVGhlIGRldGFpbHMgYWJvdXQgdGhlIEVJUFxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyQWRkcmVzc2VzOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgQWxsb2NhdGlvbklkczogVGhlIGxpc3Qgb2YgYWxsb2NhdGlvbiBJRHMuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJBbGxvY2F0aW9uSWRzOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQYXJhbSBzY29wZSAtIHNjb3BlIGluIHdoaWNoIHRoaXMgcmVzb3VyY2UgaXMgZGVmaW5lZFxuICAgICAqIFBhcmFtIGlkICAgIC0gc2NvcGVkIGlkIG9mIHRoZSByZXNvdXJjZVxuICAgICAqIFBhcmFtIHByb3BzIC0gcmVzb3VyY2UgcHJvcGVydGllc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiByb3MuQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogQWRkcmVzc2VzUHJvcHMgPSB7fSwgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6Ym9vbGVhbiA9IHRydWUpIHtcbiAgICAgICAgc3VwZXIoc2NvcGUsIGlkKTtcbiAgICAgICAgdGhpcy5zY29wZSA9IHNjb3BlO1xuICAgICAgICB0aGlzLmlkID0gaWQ7XG4gICAgICAgIHRoaXMucHJvcHMgPSBwcm9wcztcbiAgICAgICAgdGhpcy5lbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCA9IGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50O1xuXG4gICAgICAgIGNvbnN0IHJvc0FkZHJlc3NlcyA9IG5ldyBSb3NBZGRyZXNzZXModGhpcywgaWQsICB7XG4gICAgICAgICAgICBzZWdtZW50SW5zdGFuY2VJZDogcHJvcHMuc2VnbWVudEluc3RhbmNlSWQsXG4gICAgICAgICAgICBhZGRyZXNzTmFtZTogcHJvcHMuYWRkcmVzc05hbWUsXG4gICAgICAgICAgICByZXNvdXJjZUdyb3VwSWQ6IHByb3BzLnJlc291cmNlR3JvdXBJZCxcbiAgICAgICAgICAgIGluc3RhbmNlSWQ6IHByb3BzLmluc3RhbmNlSWQsXG4gICAgICAgICAgICBpc3A6IHByb3BzLmlzcCxcbiAgICAgICAgICAgIGFsbG9jYXRpb25JZDogcHJvcHMuYWxsb2NhdGlvbklkLFxuICAgICAgICAgICAgcGF5bWVudFR5cGU6IHByb3BzLnBheW1lbnRUeXBlLFxuICAgICAgICAgICAgaXBBZGRyZXNzOiBwcm9wcy5pcEFkZHJlc3MsXG4gICAgICAgICAgICBpbnN0YW5jZVR5cGU6IHByb3BzLmluc3RhbmNlVHlwZSxcbiAgICAgICAgfSwgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgJiYgdGhpcy5zdGFjay5lbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCk7XG4gICAgICAgIHRoaXMucmVzb3VyY2UgPSByb3NBZGRyZXNzZXM7XG4gICAgICAgIHRoaXMuYXR0ckFkZHJlc3NlcyA9IHJvc0FkZHJlc3Nlcy5hdHRyQWRkcmVzc2VzO1xuICAgICAgICB0aGlzLmF0dHJBbGxvY2F0aW9uSWRzID0gcm9zQWRkcmVzc2VzLmF0dHJBbGxvY2F0aW9uSWRzO1xuICAgIH1cbn1cbiJdfQ==