"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Instance = exports.InstanceProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ecs_generated_1 = require("./ecs.generated");
Object.defineProperty(exports, "InstanceProperty", { enumerable: true, get: function () { return ecs_generated_1.RosInstance; } });
const vpc_1 = require("./vpc");
const vswitch_1 = require("./vswitch");
const securitygroup_1 = require("./securitygroup");
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::ECS::Instance`, which is used to create an Elastic Compute Service (ECS) instance.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosInstance`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-ecs-instance
 */
class Instance extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosInstance = new ecs_generated_1.RosInstance(this, id, {
            dedicatedHostId: props.dedicatedHostId,
            resourceGroupId: props.resourceGroupId,
            systemDiskDescription: props.systemDiskDescription,
            instanceChargeType: props.instanceChargeType === undefined || props.instanceChargeType === null ? 'PostPaid' : props.instanceChargeType,
            ramRoleName: props.ramRoleName,
            privatePoolOptions: props.privatePoolOptions,
            systemDiskPerformanceLevel: props.systemDiskPerformanceLevel,
            imageId: props.imageId,
            systemDiskDiskName: props.systemDiskDiskName,
            storageSetId: props.storageSetId,
            useAdditionalService: props.useAdditionalService,
            hostName: props.hostName,
            tags: props.tags,
            vSwitchId: props.vSwitchId,
            period: props.period === undefined || props.period === null ? 1 : props.period,
            imageFamily: props.imageFamily,
            deletionProtection: props.deletionProtection,
            httpEndpoint: props.httpEndpoint,
            securityGroupIds: props.securityGroupIds,
            internetChargeType: props.internetChargeType === undefined || props.internetChargeType === null ? 'PayByTraffic' : props.internetChargeType,
            spotInterruptionBehavior: props.spotInterruptionBehavior === undefined || props.spotInterruptionBehavior === null ? 'Terminate' : props.spotInterruptionBehavior,
            instanceName: props.instanceName,
            deploymentSetId: props.deploymentSetId,
            internetMaxBandwidthOut: props.internetMaxBandwidthOut === undefined || props.internetMaxBandwidthOut === null ? 1 : props.internetMaxBandwidthOut,
            vpcId: props.vpcId,
            affinity: props.affinity,
            securityEnhancementStrategy: props.securityEnhancementStrategy,
            periodUnit: props.periodUnit === undefined || props.periodUnit === null ? 'Month' : props.periodUnit,
            tenancy: props.tenancy,
            privateIpAddress: props.privateIpAddress,
            description: props.description,
            diskMappings: props.diskMappings,
            systemDiskSize: props.systemDiskSize,
            userData: props.userData,
            autoRenew: props.autoRenew === undefined || props.autoRenew === null ? 'False' : props.autoRenew,
            spotDuration: props.spotDuration,
            storageSetPartitionNumber: props.storageSetPartitionNumber,
            spotPriceLimit: props.spotPriceLimit,
            zoneIds: props.zoneIds,
            instanceType: props.instanceType,
            allocatePublicIp: props.allocatePublicIp === undefined || props.allocatePublicIp === null ? true : props.allocatePublicIp,
            spotStrategy: props.spotStrategy,
            passwordInherit: props.passwordInherit,
            password: props.password,
            autoRenewPeriod: props.autoRenewPeriod === undefined || props.autoRenewPeriod === null ? 1 : props.autoRenewPeriod,
            keyPairName: props.keyPairName,
            ioOptimized: props.ioOptimized === undefined || props.ioOptimized === null ? 'optimized' : props.ioOptimized,
            zoneId: props.zoneId,
            hpcClusterId: props.hpcClusterId,
            securityGroupId: props.securityGroupId,
            deploymentSetGroupNo: props.deploymentSetGroupNo,
            systemDiskCategory: props.systemDiskCategory === undefined || props.systemDiskCategory === null ? 'cloud_efficiency' : props.systemDiskCategory,
            httpTokens: props.httpTokens,
            creditSpecification: props.creditSpecification,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosInstance;
        this.attrHostName = rosInstance.attrHostName;
        this.attrInnerIp = rosInstance.attrInnerIp;
        this.attrInstanceId = rosInstance.attrInstanceId;
        this.attrPrimaryNetworkInterfaceId = rosInstance.attrPrimaryNetworkInterfaceId;
        this.attrPrivateIp = rosInstance.attrPrivateIp;
        this.attrPublicIp = rosInstance.attrPublicIp;
        this.attrSecurityGroupIds = rosInstance.attrSecurityGroupIds;
        this.attrZoneId = rosInstance.attrZoneId;
    }
    /**
     * Create prerequisite resource(s) required to an ECS instance: VPC, VSwitch, and(or) security group.
     * @param zoneId Required when creating a VSwitch.
     * @param vpcCidrBlock Optional when creating a VPC. Default value is 192.168.0.0/16.
     * @param vSwitchCidrBlock Optional when creating a VSwitch. Default value is 192.168.0.0/24.
     * @param whetherCreateSecurityGroup Whether to create a security group. Default value is true.
     */
    autoCreateDependencies(zoneId = undefined, vpcCidrBlock = undefined, vSwitchCidrBlock = undefined, whetherCreateSecurityGroup = true) {
        let vpc = undefined;
        let vSwitch = undefined;
        let securityGroup = undefined;
        let vpcId = undefined;
        let vSwitchId = undefined;
        let securityGroupId = undefined;
        let instance = this.resource;
        if (instance.vSwitchId === undefined) {
            zoneId = zoneId || instance.zoneId;
            if (zoneId === undefined) {
                throw new Error('zoneId is required when creating a VSwitch.');
            }
            if (instance.vpcId === undefined) {
                if ((vpcCidrBlock === undefined) !== (vSwitchCidrBlock === undefined)) {
                    throw new Error('Both vpcCidrBlock and vSwitchCidrBlock must be specified or neither.');
                }
                vpcCidrBlock = vpcCidrBlock || '192.168.0.0/16';
                vpc = new vpc_1.Vpc(this.scope, `AutoCreatedVpcFor${this.id}`, {
                    cidrBlock: vpcCidrBlock,
                    description: 'This is auto created by ROS-CDK.',
                });
                vpcId = vpc.attrVpcId;
            }
            else {
                vpcId = instance.vpcId;
                if (vSwitchCidrBlock === undefined) {
                    throw new Error('vSwitchCidrBlock is mandatory when giving a Vpc and creating a VSwitch.');
                }
            }
            vSwitchCidrBlock = vSwitchCidrBlock || '192.168.0.0/24';
            vSwitch = new vswitch_1.VSwitch(this.scope, `AutoCreatedVSwitchFor${this.id}`, {
                vpcId: vpcId,
                cidrBlock: vSwitchCidrBlock,
                description: 'This is auto created by ROS-CDK.',
                zoneId: zoneId,
            });
            vSwitchId = vSwitch.attrVSwitchId;
        }
        else {
            vSwitchId = instance.vSwitchId;
        }
        if (whetherCreateSecurityGroup && instance.securityGroupId === undefined && instance.securityGroupIds === undefined) {
            securityGroup = new securitygroup_1.SecurityGroup(this.scope, `AutoCreatedSecurityGroupFor${this.id}`, {
                vpcId: vpcId,
                description: 'This is auto created by ROS-CDK.',
            });
            securityGroupId = securityGroup.attrSecurityGroupId;
        }
        else {
            securityGroupId = instance.securityGroupId;
        }
        instance.vpcId = vpcId;
        instance.vSwitchId = vSwitchId;
        instance.securityGroupId = securityGroupId;
        return [vpc, vSwitch, securityGroup];
    }
    /**
     * Add one or more security groups to an ECS instance.
     * @param securityGroups Security groups or security group IDs.
     */
    addSecurityGroups(...securityGroups) {
        let instance = this.resource;
        let originalSecurityGroupIds = instance.securityGroupIds;
        let newSecurityGroupIds = [];
        if (instance.securityGroupId !== undefined) {
            newSecurityGroupIds.push(instance.securityGroupId);
        }
        for (let securityGroup of securityGroups) {
            if (typeof securityGroup === 'string') {
                newSecurityGroupIds.push(securityGroup);
            }
            else {
                newSecurityGroupIds.push(securityGroup.attrSecurityGroupId);
            }
        }
        if (ros.isResolvableObject(originalSecurityGroupIds)) {
            newSecurityGroupIds = ros.Fn.listMerge([originalSecurityGroupIds, newSecurityGroupIds]);
        }
        else if (originalSecurityGroupIds !== undefined) {
            newSecurityGroupIds = originalSecurityGroupIds.concat(newSecurityGroupIds);
        }
        instance.securityGroupId = undefined;
        instance.securityGroupIds = newSecurityGroupIds;
    }
    /**
     * Add one or more commands to the userdata of an ECS instance.
     * @param commands Commands to be added.
     */
    addUserDataCommands(...commands) {
        let instance = this.resource;
        let commandsAsString = [];
        if (instance.userData !== undefined) {
            commandsAsString.push(instance.userData);
        }
        for (let command of commands) {
            if (ros.isResolvableObject(command)) {
                command = command.toString();
            }
            commandsAsString.push(command);
        }
        instance.userData = ros.Fn.join('\n', commandsAsString);
    }
}
exports.Instance = Instance;
//# sourceMappingURL=data:application/json;base64,