"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DiskCategories = exports.DiskCategoriesProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ecs_generated_1 = require("./ecs.generated");
Object.defineProperty(exports, "DiskCategoriesProperty", { enumerable: true, get: function () { return ecs_generated_1.RosDiskCategories; } });
/**
 * This class encapsulates and extends the ROS resource type `DATASOURCE::ECS::DiskCategories`, which is used to query the disk types and categories.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosDiskCategories`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/datasource-ecs-diskcategories
 */
class DiskCategories extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosDiskCategories = new ecs_generated_1.RosDiskCategories(this, id, {
            type: props.type,
            zoneId: props.zoneId,
            dataDiskCategory: props.dataDiskCategory,
            instanceType: props.instanceType,
            systemDiskCategory: props.systemDiskCategory,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosDiskCategories;
        this.attrDiskCategories = rosDiskCategories.attrDiskCategories;
        this.attrDiskCategoryIds = rosDiskCategories.attrDiskCategoryIds;
    }
}
exports.DiskCategories = DiskCategories;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlza2NhdGVnb3JpZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJkaXNrY2F0ZWdvcmllcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw4Q0FBOEM7QUFDOUMsbURBQW9EO0FBRXRCLHVHQUZyQixpQ0FBaUIsT0FFMEI7QUFrRHBEOzs7O0dBSUc7QUFDSCxNQUFhLGNBQWUsU0FBUSxHQUFHLENBQUMsUUFBUTtJQVk1Qzs7OztPQUlHO0lBQ0gsWUFBWSxLQUFvQixFQUFFLEVBQVUsRUFBRSxLQUEwQixFQUFFLG1DQUEyQyxJQUFJO1FBQ3JILEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFakIsTUFBTSxpQkFBaUIsR0FBRyxJQUFJLGlDQUFpQixDQUFDLElBQUksRUFBRSxFQUFFLEVBQUc7WUFDdkQsSUFBSSxFQUFFLEtBQUssQ0FBQyxJQUFJO1lBQ2hCLE1BQU0sRUFBRSxLQUFLLENBQUMsTUFBTTtZQUNwQixnQkFBZ0IsRUFBRSxLQUFLLENBQUMsZ0JBQWdCO1lBQ3hDLFlBQVksRUFBRSxLQUFLLENBQUMsWUFBWTtZQUNoQyxrQkFBa0IsRUFBRSxLQUFLLENBQUMsa0JBQWtCO1NBQy9DLEVBQUUsZ0NBQWdDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO1FBQ3BGLElBQUksQ0FBQyxRQUFRLEdBQUcsaUJBQWlCLENBQUM7UUFDbEMsSUFBSSxDQUFDLGtCQUFrQixHQUFHLGlCQUFpQixDQUFDLGtCQUFrQixDQUFDO1FBQy9ELElBQUksQ0FBQyxtQkFBbUIsR0FBRyxpQkFBaUIsQ0FBQyxtQkFBbUIsQ0FBQztJQUNyRSxDQUFDO0NBQ0o7QUEvQkQsd0NBK0JDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcm9zIGZyb20gJ0BhbGljbG91ZC9yb3MtY2RrLWNvcmUnO1xuaW1wb3J0IHsgUm9zRGlza0NhdGVnb3JpZXMgfSBmcm9tICcuL2Vjcy5nZW5lcmF0ZWQnO1xuLy8gR2VuZXJhdGVkIGZyb20gdGhlIEFsaUNsb3VkIFJPUyBSZXNvdXJjZSBTcGVjaWZpY2F0aW9uXG5leHBvcnQgeyBSb3NEaXNrQ2F0ZWdvcmllcyBhcyBEaXNrQ2F0ZWdvcmllc1Byb3BlcnR5IH07XG5cbi8qKlxuICogUHJvcGVydGllcyBmb3IgZGVmaW5pbmcgYSBgRGlza0NhdGVnb3JpZXNgLlxuICogU2VlIGh0dHBzOi8vd3d3LmFsaWJhYmFjbG91ZC5jb20vaGVscC9yb3MvZGV2ZWxvcGVyLXJlZmVyZW5jZS9kYXRhc291cmNlLWVjcy1kaXNrY2F0ZWdvcmllc1xuICovXG5leHBvcnQgaW50ZXJmYWNlIERpc2tDYXRlZ29yaWVzUHJvcHMge1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgdHlwZTogVGhlIHJlc291cmNlIHR5cGUgdG8gcXVlcnkuXG4gICAgICogSWYgeW91IHNldCBUeXBlIHRvIGRhdGEseW91IGNhbiBzcGVjaWZ5IHRoZSBJbnN0YW5jZVR5cGUgcGFyYW1ldGVyIHRvIGRpc2suXG4gICAgICogSWYgeW91IHNldCBUeXBlIHRvIHN5c3RlbSwgeW91IG11c3Qgc3BlY2lmeSB0aGUgSW5zdGFuY2VUeXBlIHBhcmFtZXRlci5cbiAgICAgKiBWYWxpZCB2YWx1ZXM6XG4gICAgICogc3lzdGVtOiBzeXN0ZW0gZGlza1xuICAgICAqIGRhdGE6IGRhdGEgZGlza1xuICAgICAqL1xuICAgIHJlYWRvbmx5IHR5cGU6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHpvbmVJZDogVGhlIElEIG9mIHRoZSB6b25lIGZvciB3aGljaCB0byBxdWVyeSByZXNvdXJjZXMuXG4gICAgICovXG4gICAgcmVhZG9ubHkgem9uZUlkOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBkYXRhRGlza0NhdGVnb3J5OiBUaGUgY2F0ZWdvcnkgb2YgdGhlIGRhdGEgZGlzay4gVmFsaWQgdmFsdWVzOiBcbiAgICAgKiBjbG91ZDogYmFzaWMgZGlza1xuICAgICAqIGNsb3VkX2VmZmljaWVuY3k6IHVsdHJhIGRpc2tcbiAgICAgKiBjbG91ZF9zc2Q6IHN0YW5kYXJkIFNTRFxuICAgICAqIGVwaGVtZXJhbF9zc2Q6IGxvY2FsIFNTRFxuICAgICAqIGNsb3VkX2Vzc2Q6IEVTU0RcbiAgICAgKi9cbiAgICByZWFkb25seSBkYXRhRGlza0NhdGVnb3J5Pzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgaW5zdGFuY2VUeXBlOiBUaGUgaW5zdGFuY2UgdHlwZS4gRm9yIG1vcmUgaW5mb3JtYXRpb24sc2VlIEluc3RhbmNlIGZhbWlsaWVzIG9yIGNhbGwgdGhlIERlc2NyaWJlSW5zdGFuY2VUeXBlcyxvcGVyYXRpb24gdG8gcXVlcnkgdGhlIG1vc3QgcmVjZW50IGluc3RhbmNlIHR5cGUgbGlzdC5cbiAgICAgKiBXaGVuIHRoZSBUeXBlIHBhcmFtZXRlciBpcyBzZXQgdG8gc3lzdGVtIG9yIGRhdGEseW91IG11c3Qgc2V0IHRoZSBJbnN0YW5jZVR5cGUgcGFyYW1ldGVyLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGluc3RhbmNlVHlwZT86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHN5c3RlbURpc2tDYXRlZ29yeTogVGhlIGNhdGVnb3J5IG9mIHRoZSBzeXN0ZW0gZGlzay4gVmFsaWQgdmFsdWVzOiBcbiAgICAgKiBjbG91ZDogYmFzaWMgZGlza1xuICAgICAqIGNsb3VkX2VmZmljaWVuY3k6IHVsdHJhIGRpc2tcbiAgICAgKiBjbG91ZF9zc2Q6IHN0YW5kYXJkIFNTRFxuICAgICAqIGVwaGVtZXJhbF9zc2Q6IGxvY2FsIFNTRFxuICAgICAqIGNsb3VkX2Vzc2Q6IEVTU0RcbiAgICAgKi9cbiAgICByZWFkb25seSBzeXN0ZW1EaXNrQ2F0ZWdvcnk/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG59XG5cbi8qKlxuICogVGhpcyBjbGFzcyBlbmNhcHN1bGF0ZXMgYW5kIGV4dGVuZHMgdGhlIFJPUyByZXNvdXJjZSB0eXBlIGBEQVRBU09VUkNFOjpFQ1M6OkRpc2tDYXRlZ29yaWVzYCwgd2hpY2ggaXMgdXNlZCB0byBxdWVyeSB0aGUgZGlzayB0eXBlcyBhbmQgY2F0ZWdvcmllcy5cbiAqIEBOb3RlIFRoaXMgY2xhc3MgbWF5IGhhdmUgc29tZSBuZXcgZnVuY3Rpb25zIHRvIGZhY2lsaXRhdGUgZGV2ZWxvcG1lbnQsIHNvIGl0IGlzIHJlY29tbWVuZGVkIHRvIHVzZSB0aGlzIGNsYXNzIGluc3RlYWQgb2YgYFJvc0Rpc2tDYXRlZ29yaWVzYGZvciBhIG1vcmUgY29udmVuaWVudCBkZXZlbG9wbWVudCBleHBlcmllbmNlLlxuICogU2VlIGh0dHBzOi8vd3d3LmFsaWJhYmFjbG91ZC5jb20vaGVscC9yb3MvZGV2ZWxvcGVyLXJlZmVyZW5jZS9kYXRhc291cmNlLWVjcy1kaXNrY2F0ZWdvcmllc1xuICovXG5leHBvcnQgY2xhc3MgRGlza0NhdGVnb3JpZXMgZXh0ZW5kcyByb3MuUmVzb3VyY2Uge1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIERpc2tDYXRlZ29yaWVzOiBUaGUgbGlzdCBvZiBkaXNrIGNhdGVnb3JpZXMuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJEaXNrQ2F0ZWdvcmllczogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIERpc2tDYXRlZ29yeUlkczogVGhlIGxpc3Qgb2YgZGlzayBjYXRlZ29yeSBJRHMuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJEaXNrQ2F0ZWdvcnlJZHM6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFBhcmFtIHNjb3BlIC0gc2NvcGUgaW4gd2hpY2ggdGhpcyByZXNvdXJjZSBpcyBkZWZpbmVkXG4gICAgICogUGFyYW0gaWQgICAgLSBzY29wZWQgaWQgb2YgdGhlIHJlc291cmNlXG4gICAgICogUGFyYW0gcHJvcHMgLSByZXNvdXJjZSBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IHJvcy5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBEaXNrQ2F0ZWdvcmllc1Byb3BzLCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDpib29sZWFuID0gdHJ1ZSkge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQpO1xuXG4gICAgICAgIGNvbnN0IHJvc0Rpc2tDYXRlZ29yaWVzID0gbmV3IFJvc0Rpc2tDYXRlZ29yaWVzKHRoaXMsIGlkLCAge1xuICAgICAgICAgICAgdHlwZTogcHJvcHMudHlwZSxcbiAgICAgICAgICAgIHpvbmVJZDogcHJvcHMuem9uZUlkLFxuICAgICAgICAgICAgZGF0YURpc2tDYXRlZ29yeTogcHJvcHMuZGF0YURpc2tDYXRlZ29yeSxcbiAgICAgICAgICAgIGluc3RhbmNlVHlwZTogcHJvcHMuaW5zdGFuY2VUeXBlLFxuICAgICAgICAgICAgc3lzdGVtRGlza0NhdGVnb3J5OiBwcm9wcy5zeXN0ZW1EaXNrQ2F0ZWdvcnksXG4gICAgICAgIH0sIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ICYmIHRoaXMuc3RhY2suZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQpO1xuICAgICAgICB0aGlzLnJlc291cmNlID0gcm9zRGlza0NhdGVnb3JpZXM7XG4gICAgICAgIHRoaXMuYXR0ckRpc2tDYXRlZ29yaWVzID0gcm9zRGlza0NhdGVnb3JpZXMuYXR0ckRpc2tDYXRlZ29yaWVzO1xuICAgICAgICB0aGlzLmF0dHJEaXNrQ2F0ZWdvcnlJZHMgPSByb3NEaXNrQ2F0ZWdvcmllcy5hdHRyRGlza0NhdGVnb3J5SWRzO1xuICAgIH1cbn1cbiJdfQ==