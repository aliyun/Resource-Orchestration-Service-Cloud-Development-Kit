"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Snapshots = exports.SnapshotsProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ecs_generated_1 = require("./ecs.generated");
Object.defineProperty(exports, "SnapshotsProperty", { enumerable: true, get: function () { return ecs_generated_1.RosSnapshots; } });
/**
 * This class encapsulates and extends the ROS resource type `DATASOURCE::ECS::Snapshots`, which is used to query all snapshots of an Elastic Compute Service (ECS) instance or a disk.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosSnapshots`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/datasource-ecs-snapshots
 */
class Snapshots extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props = {}, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosSnapshots = new ecs_generated_1.RosSnapshots(this, id, {
            status: props.status,
            usage: props.usage,
            category: props.category,
            kmsKeyId: props.kmsKeyId,
            resourceGroupId: props.resourceGroupId,
            instanceId: props.instanceId,
            encrypted: props.encrypted,
            snapshotLinkId: props.snapshotLinkId,
            snapshotIds: props.snapshotIds,
            snapshotName: props.snapshotName,
            filters: props.filters,
            snapshotType: props.snapshotType,
            sourceDiskType: props.sourceDiskType,
            tags: props.tags,
            diskId: props.diskId,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosSnapshots;
        this.attrSnapshotIds = rosSnapshots.attrSnapshotIds;
        this.attrSnapshots = rosSnapshots.attrSnapshots;
    }
}
exports.Snapshots = Snapshots;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic25hcHNob3RzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic25hcHNob3RzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDhDQUE4QztBQUM5QyxtREFBK0M7QUFFdEIsa0dBRmhCLDRCQUFZLE9BRXFCO0FBd0cxQzs7OztHQUlHO0FBQ0gsTUFBYSxTQUFVLFNBQVEsR0FBRyxDQUFDLFFBQVE7SUFZdkM7Ozs7T0FJRztJQUNILFlBQVksS0FBb0IsRUFBRSxFQUFVLEVBQUUsUUFBd0IsRUFBRSxFQUFFLG1DQUEyQyxJQUFJO1FBQ3JILEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFakIsTUFBTSxZQUFZLEdBQUcsSUFBSSw0QkFBWSxDQUFDLElBQUksRUFBRSxFQUFFLEVBQUc7WUFDN0MsTUFBTSxFQUFFLEtBQUssQ0FBQyxNQUFNO1lBQ3BCLEtBQUssRUFBRSxLQUFLLENBQUMsS0FBSztZQUNsQixRQUFRLEVBQUUsS0FBSyxDQUFDLFFBQVE7WUFDeEIsUUFBUSxFQUFFLEtBQUssQ0FBQyxRQUFRO1lBQ3hCLGVBQWUsRUFBRSxLQUFLLENBQUMsZUFBZTtZQUN0QyxVQUFVLEVBQUUsS0FBSyxDQUFDLFVBQVU7WUFDNUIsU0FBUyxFQUFFLEtBQUssQ0FBQyxTQUFTO1lBQzFCLGNBQWMsRUFBRSxLQUFLLENBQUMsY0FBYztZQUNwQyxXQUFXLEVBQUUsS0FBSyxDQUFDLFdBQVc7WUFDOUIsWUFBWSxFQUFFLEtBQUssQ0FBQyxZQUFZO1lBQ2hDLE9BQU8sRUFBRSxLQUFLLENBQUMsT0FBTztZQUN0QixZQUFZLEVBQUUsS0FBSyxDQUFDLFlBQVk7WUFDaEMsY0FBYyxFQUFFLEtBQUssQ0FBQyxjQUFjO1lBQ3BDLElBQUksRUFBRSxLQUFLLENBQUMsSUFBSTtZQUNoQixNQUFNLEVBQUUsS0FBSyxDQUFDLE1BQU07U0FDdkIsRUFBRSxnQ0FBZ0MsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7UUFDcEYsSUFBSSxDQUFDLFFBQVEsR0FBRyxZQUFZLENBQUM7UUFDN0IsSUFBSSxDQUFDLGVBQWUsR0FBRyxZQUFZLENBQUMsZUFBZSxDQUFDO1FBQ3BELElBQUksQ0FBQyxhQUFhLEdBQUcsWUFBWSxDQUFDLGFBQWEsQ0FBQztJQUNwRCxDQUFDO0NBQ0o7QUF6Q0QsOEJBeUNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcm9zIGZyb20gJ0BhbGljbG91ZC9yb3MtY2RrLWNvcmUnO1xuaW1wb3J0IHsgUm9zU25hcHNob3RzIH0gZnJvbSAnLi9lY3MuZ2VuZXJhdGVkJztcbi8vIEdlbmVyYXRlZCBmcm9tIHRoZSBBbGlDbG91ZCBST1MgUmVzb3VyY2UgU3BlY2lmaWNhdGlvblxuZXhwb3J0IHsgUm9zU25hcHNob3RzIGFzIFNuYXBzaG90c1Byb3BlcnR5IH07XG5cbi8qKlxuICogUHJvcGVydGllcyBmb3IgZGVmaW5pbmcgYSBgU25hcHNob3RzYC5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvZGF0YXNvdXJjZS1lY3Mtc25hcHNob3RzXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgU25hcHNob3RzUHJvcHMge1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgY2F0ZWdvcnk6IFRoZSBjYXRlZ29yeSBvZiB0aGUgc25hcHNob3QuIFZhbGlkIHZhbHVlczpcbiAgICAgKiBTdGFuZGFyZDogbm9ybWFsIHNuYXBzaG90XG4gICAgICogRmxhc2g6IGxvY2FsIHNuYXBzaG90XG4gICAgICogVGhlIGxvY2FsIHNuYXBzaG90IGZlYXR1cmUgaXMgcmVwbGFjZWQgYnkgdGhlIGluc3RhbnQgYWNjZXNzIGZlYXR1cmUuIFdoZW4geW91IHNwZWNpZnkgdGhpcyBwYXJhbWV0ZXIsIHRha2Ugbm90ZSBvZiB0aGUgZm9sbG93aW5nIGl0ZW1zOlxuICAgICAqICBJZiB5b3UgaGF2ZSB1c2VkIGxvY2FsIHNuYXBzaG90cyBiZWZvcmUgRGVjZW1iZXIgMTQsIDIwMjAsIHlvdSBjYW4gdXNlIHRoaXMgcGFyYW1ldGVyLlxuICAgICAqICBJZiB5b3UgaGF2ZSBub3QgdXNlZCBsb2NhbCBzbmFwc2hvdHMgYmVmb3JlIERlY2VtYmVyIDE0LCAyMDIwLCB5b3UgY2Fubm90IHVzZSB0aGlzIHBhcmFtZXRlci5cbiAgICAgKiAgTm90ZSBUaGlzIHBhcmFtZXRlciB3aWxsIGJlIHJlbW92ZWQgaW4gdGhlIGZ1dHVyZS4gV2UgcmVjb21tZW5kIHRoYXQgeW91IHVzZSBvdGhlciBwYXJhbWV0ZXJzIHRvIGVuc3VyZSBmdXR1cmUgY29tcGF0aWJpbGl0eS5cbiAgICAgKi9cbiAgICByZWFkb25seSBjYXRlZ29yeT86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGRpc2tJZDogVGhlIElEIG9mIHRoZSBkaXNrLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGRpc2tJZD86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGVuY3J5cHRlZDogU3BlY2lmaWVzIHdoZXRoZXIgdGhlIHNuYXBzaG90IGlzIGVuY3J5cHRlZC4gRGVmYXVsdCB2YWx1ZTogZmFsc2UuXG4gICAgICovXG4gICAgcmVhZG9ubHkgZW5jcnlwdGVkPzogYm9vbGVhbiB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGZpbHRlcnM6IEZpbHRlciB2YWx1ZSB3aGVuIHF1ZXJ5aW5nIHJlc291cmNlc1xuICAgICAqL1xuICAgIHJlYWRvbmx5IGZpbHRlcnM/OiBBcnJheTxSb3NTbmFwc2hvdHMuRmlsdGVyc1Byb3BlcnR5IHwgcm9zLklSZXNvbHZhYmxlPiB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGluc3RhbmNlSWQ6IFRoZSBJRCBvZiB0aGUgaW5zdGFuY2UuXG4gICAgICovXG4gICAgcmVhZG9ubHkgaW5zdGFuY2VJZD86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGttc0tleUlkOiBUaGUgSUQgb2YgdGhlIEtleSBNYW5hZ2VtZW50IFNlcnZpY2UgKEtNUykga2V5IHVzZWQgYnkgdGhlIGRhdGEgZGlzay5cbiAgICAgKi9cbiAgICByZWFkb25seSBrbXNLZXlJZD86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHJlc291cmNlR3JvdXBJZDogVGhlIElEIG9mIHRoZSByZXNvdXJjZSBncm91cCB0byB3aGljaCB0aGUgc25hcHNob3QgYmVsb25ncy4gSWYgdGhpcyBwYXJhbWV0ZXIgaXMgc3BlY2lmaWVkIHRvIHF1ZXJ5IHJlc291cmNlcywgdXAgdG8gMSwwMDAgcmVzb3VyY2VzIHRoYXQgYmVsb25nIHRvIHRoZSBzcGVjaWZpZWQgcmVzb3VyY2UgZ3JvdXAgY2FuIGJlIGRpc3BsYXllZCBpbiB0aGUgcmVzcG9uc2UuXG4gICAgICovXG4gICAgcmVhZG9ubHkgcmVzb3VyY2VHcm91cElkPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgc25hcHNob3RJZHM6IFRoZSBJRHMgb2Ygc25hcHNob3RzLiBUaGUgdmFsdWUgY2FuIGJlIGEgSlNPTiBhcnJheSB0aGF0IGNvbnNpc3RzIG9mIHVwIHRvIDEwMCBzbmFwc2hvdCBJRHMuIFNlcGFyYXRlIG11bHRpcGxlIHNuYXBzaG90IElEcyB3aXRoIGNvbW1hcyAoLCkuXG4gICAgICovXG4gICAgcmVhZG9ubHkgc25hcHNob3RJZHM/OiBBcnJheTxzdHJpbmcgfCByb3MuSVJlc29sdmFibGU+IHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgc25hcHNob3RMaW5rSWQ6IFRoZSBJRCBvZiB0aGUgc25hcHNob3QgY2hhaW4uXG4gICAgICovXG4gICAgcmVhZG9ubHkgc25hcHNob3RMaW5rSWQ/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBzbmFwc2hvdE5hbWU6IFRoZSBuYW1lIG9mIHRoZSBzbmFwc2hvdC5cbiAgICAgKi9cbiAgICByZWFkb25seSBzbmFwc2hvdE5hbWU/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBzbmFwc2hvdFR5cGU6IFNwZWNpZmllcyB3aGV0aGVyIHRoZSBzbmFwc2hvdCBoYXMgYmVlbiB1c2VkIHRvIGNyZWF0ZSBpbWFnZXMgb3IgZGlza3MuIFZhbGlkIHZhbHVlczpcbiAgICAgKiBhdXRvOiBhdXRvbWF0aWMgc25hcHNob3RcbiAgICAgKiB1c2VyOiBtYW51YWwgc25hcHNob3RcbiAgICAgKiBhbGw6IGFsbCBzbmFwc2hvdCB0eXBlc1xuICAgICAqL1xuICAgIHJlYWRvbmx5IHNuYXBzaG90VHlwZT86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHNvdXJjZURpc2tUeXBlOiBUaGUgdHlwZSBvZiB0aGUgc291cmNlIGRpc2sgZm9yIHdoaWNoIHRoZSBzbmFwc2hvdCB3YXMgY3JlYXRlZC4gVmFsaWQgdmFsdWVzOlxuICAgICAqIFN5c3RlbTogc3lzdGVtIGRpc2tcbiAgICAgKiBEYXRhOiBkYXRhIGRpc2tcbiAgICAgKiBOb3RlIFRoZXNlIHZhbHVlcyBhcmUgY2FzZS1pbnNlbnNpdGl2ZS5cbiAgICAgKi9cbiAgICByZWFkb25seSBzb3VyY2VEaXNrVHlwZT86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHN0YXR1czogVGhlIHN0YXR1cyBvZiB0aGUgc25hcHNob3QuIERlZmF1bHQgdmFsdWU6IGFsbC4gVmFsaWQgdmFsdWVzOlxuICAgICAqIHByb2dyZXNzaW5nOiBUaGUgc25hcHNob3QgaXMgYmVpbmcgY3JlYXRlZC5cbiAgICAgKiBhY2NvbXBsaXNoZWQ6IFRoZSBzbmFwc2hvdCBpcyBjcmVhdGVkLlxuICAgICAqIGZhaWxlZDogVGhlIHNuYXBzaG90IGZhaWxzIHRvIGJlIGNyZWF0ZWQuXG4gICAgICogYWxsOiBhbGwgc25hcHNob3Qgc3RhdHVzZXMuXG4gICAgICovXG4gICAgcmVhZG9ubHkgc3RhdHVzPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgdGFnczogVGFncyBvZiBzbmFwc2hvdC5cbiAgICAgKi9cbiAgICByZWFkb25seSB0YWdzPzogUm9zU25hcHNob3RzLlRhZ3NQcm9wZXJ0eVtdO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgdXNhZ2U6IFRoZSB0eXBlIG9mIHRoZSBzbmFwc2hvdC4gRGVmYXVsdCB2YWx1ZTogYWxsLiBWYWxpZCB2YWx1ZXM6XG4gICAgICogaW1hZ2U6IFRoZSBzbmFwc2hvdCBoYXMgYmVlbiB1c2VkIHRvIGNyZWF0ZSBjdXN0b20gaW1hZ2VzLlxuICAgICAqIGRpc2s6IFRoZSBzbmFwc2hvdCBoYXMgYmVlbiB1c2VkIHRvIGNyZWF0ZSBkaXNrcy5cbiAgICAgKiBpbWFnZV9kaXNrOiBUaGUgc25hcHNob3QgaGFzIGJlZW4gdXNlZCB0byBjcmVhdGUgY3VzdG9tIGltYWdlcyBhbmQgZGF0YSBkaXNrcy5cbiAgICAgKiBub25lOiBUaGUgc25hcHNob3QgaGFzIG5vdCBiZWVuIHVzZWQgdG8gY3JlYXRlIGN1c3RvbSBpbWFnZXMgb3IgZGlza3MuXG4gICAgICovXG4gICAgcmVhZG9ubHkgdXNhZ2U/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG59XG5cbi8qKlxuICogVGhpcyBjbGFzcyBlbmNhcHN1bGF0ZXMgYW5kIGV4dGVuZHMgdGhlIFJPUyByZXNvdXJjZSB0eXBlIGBEQVRBU09VUkNFOjpFQ1M6OlNuYXBzaG90c2AsIHdoaWNoIGlzIHVzZWQgdG8gcXVlcnkgYWxsIHNuYXBzaG90cyBvZiBhbiBFbGFzdGljIENvbXB1dGUgU2VydmljZSAoRUNTKSBpbnN0YW5jZSBvciBhIGRpc2suXG4gKiBATm90ZSBUaGlzIGNsYXNzIG1heSBoYXZlIHNvbWUgbmV3IGZ1bmN0aW9ucyB0byBmYWNpbGl0YXRlIGRldmVsb3BtZW50LCBzbyBpdCBpcyByZWNvbW1lbmRlZCB0byB1c2UgdGhpcyBjbGFzcyBpbnN0ZWFkIG9mIGBSb3NTbmFwc2hvdHNgZm9yIGEgbW9yZSBjb252ZW5pZW50IGRldmVsb3BtZW50IGV4cGVyaWVuY2UuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2RhdGFzb3VyY2UtZWNzLXNuYXBzaG90c1xuICovXG5leHBvcnQgY2xhc3MgU25hcHNob3RzIGV4dGVuZHMgcm9zLlJlc291cmNlIHtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBTbmFwc2hvdElkczogdGhlIGxpc3Qgb2Ygc25hcHNob3QgaWRzLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyU25hcHNob3RJZHM6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBTbmFwc2hvdHM6IHRoZSBsaXN0IG9mIHNuYXBzaG90cy5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0clNuYXBzaG90czogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUGFyYW0gc2NvcGUgLSBzY29wZSBpbiB3aGljaCB0aGlzIHJlc291cmNlIGlzIGRlZmluZWRcbiAgICAgKiBQYXJhbSBpZCAgICAtIHNjb3BlZCBpZCBvZiB0aGUgcmVzb3VyY2VcbiAgICAgKiBQYXJhbSBwcm9wcyAtIHJlc291cmNlIHByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihzY29wZTogcm9zLkNvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IFNuYXBzaG90c1Byb3BzID0ge30sIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OmJvb2xlYW4gPSB0cnVlKSB7XG4gICAgICAgIHN1cGVyKHNjb3BlLCBpZCk7XG5cbiAgICAgICAgY29uc3Qgcm9zU25hcHNob3RzID0gbmV3IFJvc1NuYXBzaG90cyh0aGlzLCBpZCwgIHtcbiAgICAgICAgICAgIHN0YXR1czogcHJvcHMuc3RhdHVzLFxuICAgICAgICAgICAgdXNhZ2U6IHByb3BzLnVzYWdlLFxuICAgICAgICAgICAgY2F0ZWdvcnk6IHByb3BzLmNhdGVnb3J5LFxuICAgICAgICAgICAga21zS2V5SWQ6IHByb3BzLmttc0tleUlkLFxuICAgICAgICAgICAgcmVzb3VyY2VHcm91cElkOiBwcm9wcy5yZXNvdXJjZUdyb3VwSWQsXG4gICAgICAgICAgICBpbnN0YW5jZUlkOiBwcm9wcy5pbnN0YW5jZUlkLFxuICAgICAgICAgICAgZW5jcnlwdGVkOiBwcm9wcy5lbmNyeXB0ZWQsXG4gICAgICAgICAgICBzbmFwc2hvdExpbmtJZDogcHJvcHMuc25hcHNob3RMaW5rSWQsXG4gICAgICAgICAgICBzbmFwc2hvdElkczogcHJvcHMuc25hcHNob3RJZHMsXG4gICAgICAgICAgICBzbmFwc2hvdE5hbWU6IHByb3BzLnNuYXBzaG90TmFtZSxcbiAgICAgICAgICAgIGZpbHRlcnM6IHByb3BzLmZpbHRlcnMsXG4gICAgICAgICAgICBzbmFwc2hvdFR5cGU6IHByb3BzLnNuYXBzaG90VHlwZSxcbiAgICAgICAgICAgIHNvdXJjZURpc2tUeXBlOiBwcm9wcy5zb3VyY2VEaXNrVHlwZSxcbiAgICAgICAgICAgIHRhZ3M6IHByb3BzLnRhZ3MsXG4gICAgICAgICAgICBkaXNrSWQ6IHByb3BzLmRpc2tJZCxcbiAgICAgICAgfSwgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgJiYgdGhpcy5zdGFjay5lbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCk7XG4gICAgICAgIHRoaXMucmVzb3VyY2UgPSByb3NTbmFwc2hvdHM7XG4gICAgICAgIHRoaXMuYXR0clNuYXBzaG90SWRzID0gcm9zU25hcHNob3RzLmF0dHJTbmFwc2hvdElkcztcbiAgICAgICAgdGhpcy5hdHRyU25hcHNob3RzID0gcm9zU25hcHNob3RzLmF0dHJTbmFwc2hvdHM7XG4gICAgfVxufVxuIl19