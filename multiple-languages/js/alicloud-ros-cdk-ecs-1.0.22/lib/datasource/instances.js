"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Instances = exports.InstancesProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ecs_generated_1 = require("./ecs.generated");
Object.defineProperty(exports, "InstancesProperty", { enumerable: true, get: function () { return ecs_generated_1.RosInstances; } });
/**
 * This class encapsulates and extends the ROS resource type `DATASOURCE::ECS::Instances`, which is used to query the details of Elastic Compute Service (ECS) instances.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosInstances`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/datasource-ecs-instances
 */
class Instances extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props = {}, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosInstances = new ecs_generated_1.RosInstances(this, id, {
            innerIpAddresses: props.innerIpAddresses,
            resourceGroupId: props.resourceGroupId,
            privateIpAddresses: props.privateIpAddresses,
            instanceChargeType: props.instanceChargeType,
            instanceTypeFamily: props.instanceTypeFamily,
            instanceNetworkType: props.instanceNetworkType,
            filters: props.filters,
            additionalAttributes: props.additionalAttributes,
            imageId: props.imageId,
            publicIpAddresses: props.publicIpAddresses,
            rdmaIpAddresses: props.rdmaIpAddresses,
            instanceIds: props.instanceIds,
            instanceType: props.instanceType,
            ipv6Address: props.ipv6Address,
            tags: props.tags,
            status: props.status,
            keyPairName: props.keyPairName,
            ioOptimized: props.ioOptimized,
            zoneId: props.zoneId,
            instanceId: props.instanceId,
            hpcClusterId: props.hpcClusterId,
            vSwitchId: props.vSwitchId,
            securityGroupId: props.securityGroupId,
            internetChargeType: props.internetChargeType,
            instanceName: props.instanceName,
            eipAddresses: props.eipAddresses,
            vpcId: props.vpcId,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosInstances;
        this.attrInstanceIds = rosInstances.attrInstanceIds;
        this.attrInstances = rosInstances.attrInstances;
    }
}
exports.Instances = Instances;
//# sourceMappingURL=data:application/json;base64,