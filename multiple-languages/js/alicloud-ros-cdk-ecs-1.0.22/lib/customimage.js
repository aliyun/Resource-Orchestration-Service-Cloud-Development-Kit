"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomImage = exports.CustomImageProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ecs_generated_1 = require("./ecs.generated");
Object.defineProperty(exports, "CustomImageProperty", { enumerable: true, get: function () { return ecs_generated_1.RosCustomImage; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::ECS::CustomImage`, which is used to create a custom image.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosCustomImage`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-ecs-customimage
 */
class CustomImage extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props = {}, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosCustomImage = new ecs_generated_1.RosCustomImage(this, id, {
            detectionStrategy: props.detectionStrategy,
            description: props.description,
            platform: props.platform,
            architecture: props.architecture,
            resourceGroupId: props.resourceGroupId,
            instanceId: props.instanceId,
            bootMode: props.bootMode,
            imageFamily: props.imageFamily,
            diskDeviceMapping: props.diskDeviceMapping,
            imageName: props.imageName,
            sourceRegionId: props.sourceRegionId,
            snapshotId: props.snapshotId,
            imageVersion: props.imageVersion,
            tag: props.tag,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosCustomImage;
        this.attrImageId = rosCustomImage.attrImageId;
        this.attrSourceRegionId = rosCustomImage.attrSourceRegionId;
    }
}
exports.CustomImage = CustomImage;
//# sourceMappingURL=data:application/json;base64,