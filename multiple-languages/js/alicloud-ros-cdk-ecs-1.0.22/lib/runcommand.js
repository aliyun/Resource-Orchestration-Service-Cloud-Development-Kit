"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RunCommand = exports.RunCommandProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ecs_generated_1 = require("./ecs.generated");
Object.defineProperty(exports, "RunCommandProperty", { enumerable: true, get: function () { return ecs_generated_1.RosRunCommand; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::ECS::RunCommand`, which is used to run a shell, PowerShell, or batch command on Elastic Compute Service (ECS) instances.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosRunCommand`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-ecs-runcommand
 */
class RunCommand extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosRunCommand = new ecs_generated_1.RosRunCommand(this, id, {
            description: props.description,
            parameters: props.parameters,
            resourceGroupId: props.resourceGroupId,
            timeout: props.timeout,
            windowsPasswordName: props.windowsPasswordName,
            contentEncoding: props.contentEncoding,
            name: props.name,
            workingDir: props.workingDir,
            commandContent: props.commandContent,
            repeatMode: props.repeatMode,
            type: props.type,
            username: props.username,
            containerName: props.containerName,
            containerId: props.containerId,
            frequency: props.frequency,
            runAgainOn: props.runAgainOn,
            enableParameter: props.enableParameter,
            sync: props.sync === undefined || props.sync === null ? false : props.sync,
            instanceIds: props.instanceIds,
            keepCommand: props.keepCommand,
            tags: props.tags,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosRunCommand;
        this.attrCommandId = rosRunCommand.attrCommandId;
        this.attrInvokeId = rosRunCommand.attrInvokeId;
        this.attrInvokeInstances = rosRunCommand.attrInvokeInstances;
        this.attrInvokeResults = rosRunCommand.attrInvokeResults;
    }
}
exports.RunCommand = RunCommand;
//# sourceMappingURL=data:application/json;base64,