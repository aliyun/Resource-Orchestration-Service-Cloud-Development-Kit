"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImageSharePermission = exports.ImageSharePermissionProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ecs_generated_1 = require("./ecs.generated");
Object.defineProperty(exports, "ImageSharePermissionProperty", { enumerable: true, get: function () { return ecs_generated_1.RosImageSharePermission; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::ECS::ImageSharePermission`DATASOURCE::ECS::AutoSnapshotPolicies is used to query automatic snapshot policies.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosImageSharePermission`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-ecs-imagesharepermission
 */
class ImageSharePermission extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosImageSharePermission = new ecs_generated_1.RosImageSharePermission(this, id, {
            keepPermission: props.keepPermission === undefined || props.keepPermission === null ? true : props.keepPermission,
            isPublic: props.isPublic,
            imageId: props.imageId,
            accounts: props.accounts,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosImageSharePermission;
        this.attrImageId = rosImageSharePermission.attrImageId;
    }
}
exports.ImageSharePermission = ImageSharePermission;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1hZ2VzaGFyZXBlcm1pc3Npb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbWFnZXNoYXJlcGVybWlzc2lvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw4Q0FBOEM7QUFDOUMsbURBQTBEO0FBRXRCLDZHQUYzQix1Q0FBdUIsT0FFZ0M7QUE4QmhFOzs7O0dBSUc7QUFDSCxNQUFhLG9CQUFxQixTQUFRLEdBQUcsQ0FBQyxRQUFRO0lBT2xEOzs7O09BSUc7SUFDSCxZQUFZLEtBQW9CLEVBQUUsRUFBVSxFQUFFLEtBQWdDLEVBQUUsbUNBQTJDLElBQUk7UUFDM0gsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUVqQixNQUFNLHVCQUF1QixHQUFHLElBQUksdUNBQXVCLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRztZQUNuRSxjQUFjLEVBQUUsS0FBSyxDQUFDLGNBQWMsS0FBSyxTQUFTLElBQUksS0FBSyxDQUFDLGNBQWMsS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLGNBQWM7WUFDakgsUUFBUSxFQUFFLEtBQUssQ0FBQyxRQUFRO1lBQ3hCLE9BQU8sRUFBRSxLQUFLLENBQUMsT0FBTztZQUN0QixRQUFRLEVBQUUsS0FBSyxDQUFDLFFBQVE7U0FDM0IsRUFBRSxnQ0FBZ0MsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7UUFDcEYsSUFBSSxDQUFDLFFBQVEsR0FBRyx1QkFBdUIsQ0FBQztRQUN4QyxJQUFJLENBQUMsV0FBVyxHQUFHLHVCQUF1QixDQUFDLFdBQVcsQ0FBQztJQUMzRCxDQUFDO0NBQ0o7QUF4QkQsb0RBd0JDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcm9zIGZyb20gJ0BhbGljbG91ZC9yb3MtY2RrLWNvcmUnO1xuaW1wb3J0IHsgUm9zSW1hZ2VTaGFyZVBlcm1pc3Npb24gfSBmcm9tICcuL2Vjcy5nZW5lcmF0ZWQnO1xuLy8gR2VuZXJhdGVkIGZyb20gdGhlIEFsaUNsb3VkIFJPUyBSZXNvdXJjZSBTcGVjaWZpY2F0aW9uXG5leHBvcnQgeyBSb3NJbWFnZVNoYXJlUGVybWlzc2lvbiBhcyBJbWFnZVNoYXJlUGVybWlzc2lvblByb3BlcnR5IH07XG5cbi8qKlxuICogUHJvcGVydGllcyBmb3IgZGVmaW5pbmcgYSBgSW1hZ2VTaGFyZVBlcm1pc3Npb25gLlxuICogU2VlIGh0dHBzOi8vd3d3LmFsaWJhYmFjbG91ZC5jb20vaGVscC9yb3MvZGV2ZWxvcGVyLXJlZmVyZW5jZS9hbGl5dW4tZWNzLWltYWdlc2hhcmVwZXJtaXNzaW9uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSW1hZ2VTaGFyZVBlcm1pc3Npb25Qcm9wcyB7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBpbWFnZUlkOiBUaGUgc2hhcmVkIGN1c3RvbSBpbWFnZSBJRC5cbiAgICAgKi9cbiAgICByZWFkb25seSBpbWFnZUlkOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBhY2NvdW50czogQWxpYmFiYSBDbG91ZCBhY2NvdW50IElEcyBhdXRob3JpemVkIHRvIHNoYXJlIHRoZSBpbWFnZS5cbiAgICAgKi9cbiAgICByZWFkb25seSBhY2NvdW50cz86IEFycmF5PHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZT4gfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBpc1B1YmxpYzogV2hldGhlciB0byBwdWJsaXNoIG9yIHJlbW92ZSBjb21tdW5pdHkgbWlycm9ycy4gXG4gICAgICogSWYgdGhpcyBwcm9wZXJ0eSBpcyBub3Qgc2V0LCBubyBjaGFuZ2VzIHdpbGwgYmUgbWFkZSB0byB0aGUgY29tbXVuaXR5IGltYWdlXG4gICAgICovXG4gICAgcmVhZG9ubHkgaXNQdWJsaWM/OiBib29sZWFuIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkga2VlcFBlcm1pc3Npb246IFdoZXRoZXIgdG8ga2VlcCB0aGUgb3JpZ2luYWwgc2hhcmluZyBwZXJtaXNzaW9ucyB3aGVuIHJlc291cmNlIGlzIGRlbGV0ZWQsIGRlZmF1bHQgaXMgdHJ1ZS5JZiBzZXQgdG8gZmFsc2UsIEFjY291bnRzIHdpbGwgYmUgcmVtb3ZlZCBpZiBBY2NvdW50cyBpcyBzZXQgYW5kIElzUHVibGljIHdpbGwgYmUgY2hhbmdlZCBpZiBJc1B1YmxpYyBpcyBzZXQuXG4gICAgICovXG4gICAgcmVhZG9ubHkga2VlcFBlcm1pc3Npb24/OiBib29sZWFuIHwgcm9zLklSZXNvbHZhYmxlO1xufVxuXG4vKipcbiAqIFRoaXMgY2xhc3MgZW5jYXBzdWxhdGVzIGFuZCBleHRlbmRzIHRoZSBST1MgcmVzb3VyY2UgdHlwZSBgQUxJWVVOOjpFQ1M6OkltYWdlU2hhcmVQZXJtaXNzaW9uYERBVEFTT1VSQ0U6OkVDUzo6QXV0b1NuYXBzaG90UG9saWNpZXMgaXMgdXNlZCB0byBxdWVyeSBhdXRvbWF0aWMgc25hcHNob3QgcG9saWNpZXMuXG4gKiBATm90ZSBUaGlzIGNsYXNzIG1heSBoYXZlIHNvbWUgbmV3IGZ1bmN0aW9ucyB0byBmYWNpbGl0YXRlIGRldmVsb3BtZW50LCBzbyBpdCBpcyByZWNvbW1lbmRlZCB0byB1c2UgdGhpcyBjbGFzcyBpbnN0ZWFkIG9mIGBSb3NJbWFnZVNoYXJlUGVybWlzc2lvbmBmb3IgYSBtb3JlIGNvbnZlbmllbnQgZGV2ZWxvcG1lbnQgZXhwZXJpZW5jZS5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvYWxpeXVuLWVjcy1pbWFnZXNoYXJlcGVybWlzc2lvblxuICovXG5leHBvcnQgY2xhc3MgSW1hZ2VTaGFyZVBlcm1pc3Npb24gZXh0ZW5kcyByb3MuUmVzb3VyY2Uge1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIEltYWdlSWQ6IFRoZSBzaGFyZWQgY3VzdG9tIGltYWdlIElELlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRySW1hZ2VJZDogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUGFyYW0gc2NvcGUgLSBzY29wZSBpbiB3aGljaCB0aGlzIHJlc291cmNlIGlzIGRlZmluZWRcbiAgICAgKiBQYXJhbSBpZCAgICAtIHNjb3BlZCBpZCBvZiB0aGUgcmVzb3VyY2VcbiAgICAgKiBQYXJhbSBwcm9wcyAtIHJlc291cmNlIHByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihzY29wZTogcm9zLkNvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IEltYWdlU2hhcmVQZXJtaXNzaW9uUHJvcHMsIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OmJvb2xlYW4gPSB0cnVlKSB7XG4gICAgICAgIHN1cGVyKHNjb3BlLCBpZCk7XG5cbiAgICAgICAgY29uc3Qgcm9zSW1hZ2VTaGFyZVBlcm1pc3Npb24gPSBuZXcgUm9zSW1hZ2VTaGFyZVBlcm1pc3Npb24odGhpcywgaWQsICB7XG4gICAgICAgICAgICBrZWVwUGVybWlzc2lvbjogcHJvcHMua2VlcFBlcm1pc3Npb24gPT09IHVuZGVmaW5lZCB8fCBwcm9wcy5rZWVwUGVybWlzc2lvbiA9PT0gbnVsbCA/IHRydWUgOiBwcm9wcy5rZWVwUGVybWlzc2lvbixcbiAgICAgICAgICAgIGlzUHVibGljOiBwcm9wcy5pc1B1YmxpYyxcbiAgICAgICAgICAgIGltYWdlSWQ6IHByb3BzLmltYWdlSWQsXG4gICAgICAgICAgICBhY2NvdW50czogcHJvcHMuYWNjb3VudHMsXG4gICAgICAgIH0sIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ICYmIHRoaXMuc3RhY2suZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQpO1xuICAgICAgICB0aGlzLnJlc291cmNlID0gcm9zSW1hZ2VTaGFyZVBlcm1pc3Npb247XG4gICAgICAgIHRoaXMuYXR0ckltYWdlSWQgPSByb3NJbWFnZVNoYXJlUGVybWlzc2lvbi5hdHRySW1hZ2VJZDtcbiAgICB9XG59XG4iXX0=