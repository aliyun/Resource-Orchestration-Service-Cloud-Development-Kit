"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AssignPrivateIpAddresses = exports.AssignPrivateIpAddressesProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ecs_generated_1 = require("./ecs.generated");
Object.defineProperty(exports, "AssignPrivateIpAddressesProperty", { enumerable: true, get: function () { return ecs_generated_1.RosAssignPrivateIpAddresses; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::ECS::AssignPrivateIpAddresses`, which is used to assign one or more secondary private IP addresses to an ENI. You can specify private IP addresses within the CIDR block of the vSwitch that hosts the ENI. You can also specify the number of private IP addresses for ECS to assign them automatically.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosAssignPrivateIpAddresses`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-ecs-assignprivateipaddresses
 */
class AssignPrivateIpAddresses extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosAssignPrivateIpAddresses = new ecs_generated_1.RosAssignPrivateIpAddresses(this, id, {
            secondaryPrivateIpAddressCount: props.secondaryPrivateIpAddressCount,
            privateIpAddresses: props.privateIpAddresses,
            networkInterfaceId: props.networkInterfaceId,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosAssignPrivateIpAddresses;
        this.attrNetworkInterfaceId = rosAssignPrivateIpAddresses.attrNetworkInterfaceId;
        this.attrPrivateIpAddresses = rosAssignPrivateIpAddresses.attrPrivateIpAddresses;
    }
}
exports.AssignPrivateIpAddresses = AssignPrivateIpAddresses;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzaWducHJpdmF0ZWlwYWRkcmVzc2VzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYXNzaWducHJpdmF0ZWlwYWRkcmVzc2VzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDhDQUE4QztBQUM5QyxtREFBOEQ7QUFFdEIsaUhBRi9CLDJDQUEyQixPQUVvQztBQTZCeEU7Ozs7R0FJRztBQUNILE1BQWEsd0JBQXlCLFNBQVEsR0FBRyxDQUFDLFFBQVE7SUFZdEQ7Ozs7T0FJRztJQUNILFlBQVksS0FBb0IsRUFBRSxFQUFVLEVBQUUsS0FBb0MsRUFBRSxtQ0FBMkMsSUFBSTtRQUMvSCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRWpCLE1BQU0sMkJBQTJCLEdBQUcsSUFBSSwyQ0FBMkIsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFHO1lBQzNFLDhCQUE4QixFQUFFLEtBQUssQ0FBQyw4QkFBOEI7WUFDcEUsa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGtCQUFrQjtZQUM1QyxrQkFBa0IsRUFBRSxLQUFLLENBQUMsa0JBQWtCO1NBQy9DLEVBQUUsZ0NBQWdDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO1FBQ3BGLElBQUksQ0FBQyxRQUFRLEdBQUcsMkJBQTJCLENBQUM7UUFDNUMsSUFBSSxDQUFDLHNCQUFzQixHQUFHLDJCQUEyQixDQUFDLHNCQUFzQixDQUFDO1FBQ2pGLElBQUksQ0FBQyxzQkFBc0IsR0FBRywyQkFBMkIsQ0FBQyxzQkFBc0IsQ0FBQztJQUNyRixDQUFDO0NBQ0o7QUE3QkQsNERBNkJDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcm9zIGZyb20gJ0BhbGljbG91ZC9yb3MtY2RrLWNvcmUnO1xuaW1wb3J0IHsgUm9zQXNzaWduUHJpdmF0ZUlwQWRkcmVzc2VzIH0gZnJvbSAnLi9lY3MuZ2VuZXJhdGVkJztcbi8vIEdlbmVyYXRlZCBmcm9tIHRoZSBBbGlDbG91ZCBST1MgUmVzb3VyY2UgU3BlY2lmaWNhdGlvblxuZXhwb3J0IHsgUm9zQXNzaWduUHJpdmF0ZUlwQWRkcmVzc2VzIGFzIEFzc2lnblByaXZhdGVJcEFkZHJlc3Nlc1Byb3BlcnR5IH07XG5cbi8qKlxuICogUHJvcGVydGllcyBmb3IgZGVmaW5pbmcgYSBgQXNzaWduUHJpdmF0ZUlwQWRkcmVzc2VzYC5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvYWxpeXVuLWVjcy1hc3NpZ25wcml2YXRlaXBhZGRyZXNzZXNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBBc3NpZ25Qcml2YXRlSXBBZGRyZXNzZXNQcm9wcyB7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBuZXR3b3JrSW50ZXJmYWNlSWQ6IFRoZSBJRCBvZiB0aGUgRU5JLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IG5ldHdvcmtJbnRlcmZhY2VJZDogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgcHJpdmF0ZUlwQWRkcmVzc2VzOiBPbmUgb3IgbXVsdGlwbGUgc2Vjb25kYXJ5IHByaXZhdGUgSVAgYWRkcmVzc2VzIHNlbGVjdGVkIGZyb20gdGhlIENJRFIgYmxvY2sgb2YgdGhlIFZTd2l0Y2ggdGhhdCBob3N0cyB0aGUgRU5JLiBcbiAgICAgKiBWYWxpZCB2YWx1ZXMgb2YgbnVtYmVyIG9mIHByaXZhdGUgaXAgYWRkcmVzc2VzOlxuICAgICAqIFdoZW4gdGhlIEVOSSBpcyBpbiB0aGUgQXZhaWxhYmxlIHN0YXRlOiAxIHRvIDEwLlxuICAgICAqIFdoZW4gdGhlIEVOSSBpcyBpbiB0aGUgSW5Vc2Ugc3RhdGU6IGxpbWl0ZWQgYnkgdGhlIGluc3RhbmNlIHR5cGUuIFxuICAgICAqIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgSW5zdGFuY2UgdHlwZSBmYW1pbGllcy5cbiAgICAgKiBZb3UgbXVzdCBzcGVjaWZ5IGVpdGhlciB0aGUgUHJpdmF0ZUlwQWRkcmVzc2VzIHBhcmFtZXRlciBvciB0aGUgU2Vjb25kYXJ5UHJpdmF0ZUlwQWRkcmVzc0NvdW50IHBhcmFtZXRlciB0byBhc3NpZ24gc2Vjb25kYXJ5IHByaXZhdGUgSVAgYWRkcmVzc2VzLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHByaXZhdGVJcEFkZHJlc3Nlcz86IEFycmF5PGFueSB8IHJvcy5JUmVzb2x2YWJsZT4gfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBzZWNvbmRhcnlQcml2YXRlSXBBZGRyZXNzQ291bnQ6IFRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIHByaXZhdGUgSVAgYWRkcmVzc2VzIHRvIGJlIGFzc2lnbmVkIGJ5IHRoZSBFQ1MgaW5zdGFuY2UuXG4gICAgICovXG4gICAgcmVhZG9ubHkgc2Vjb25kYXJ5UHJpdmF0ZUlwQWRkcmVzc0NvdW50PzogbnVtYmVyIHwgcm9zLklSZXNvbHZhYmxlO1xufVxuXG4vKipcbiAqIFRoaXMgY2xhc3MgZW5jYXBzdWxhdGVzIGFuZCBleHRlbmRzIHRoZSBST1MgcmVzb3VyY2UgdHlwZSBgQUxJWVVOOjpFQ1M6OkFzc2lnblByaXZhdGVJcEFkZHJlc3Nlc2AsIHdoaWNoIGlzIHVzZWQgdG8gYXNzaWduIG9uZSBvciBtb3JlIHNlY29uZGFyeSBwcml2YXRlIElQIGFkZHJlc3NlcyB0byBhbiBFTkkuIFlvdSBjYW4gc3BlY2lmeSBwcml2YXRlIElQIGFkZHJlc3NlcyB3aXRoaW4gdGhlIENJRFIgYmxvY2sgb2YgdGhlIHZTd2l0Y2ggdGhhdCBob3N0cyB0aGUgRU5JLiBZb3UgY2FuIGFsc28gc3BlY2lmeSB0aGUgbnVtYmVyIG9mIHByaXZhdGUgSVAgYWRkcmVzc2VzIGZvciBFQ1MgdG8gYXNzaWduIHRoZW0gYXV0b21hdGljYWxseS5cbiAqIEBOb3RlIFRoaXMgY2xhc3MgbWF5IGhhdmUgc29tZSBuZXcgZnVuY3Rpb25zIHRvIGZhY2lsaXRhdGUgZGV2ZWxvcG1lbnQsIHNvIGl0IGlzIHJlY29tbWVuZGVkIHRvIHVzZSB0aGlzIGNsYXNzIGluc3RlYWQgb2YgYFJvc0Fzc2lnblByaXZhdGVJcEFkZHJlc3Nlc2Bmb3IgYSBtb3JlIGNvbnZlbmllbnQgZGV2ZWxvcG1lbnQgZXhwZXJpZW5jZS5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvYWxpeXVuLWVjcy1hc3NpZ25wcml2YXRlaXBhZGRyZXNzZXNcbiAqL1xuZXhwb3J0IGNsYXNzIEFzc2lnblByaXZhdGVJcEFkZHJlc3NlcyBleHRlbmRzIHJvcy5SZXNvdXJjZSB7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgTmV0d29ya0ludGVyZmFjZUlkOiBUaGUgSUQgb2YgdGhlIEVOSS5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ck5ldHdvcmtJbnRlcmZhY2VJZDogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIFByaXZhdGVJcEFkZHJlc3NlczogQXNzaWduZWQgcHJpdmF0ZSBpcCBhZGRyZXNzZXMuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJQcml2YXRlSXBBZGRyZXNzZXM6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFBhcmFtIHNjb3BlIC0gc2NvcGUgaW4gd2hpY2ggdGhpcyByZXNvdXJjZSBpcyBkZWZpbmVkXG4gICAgICogUGFyYW0gaWQgICAgLSBzY29wZWQgaWQgb2YgdGhlIHJlc291cmNlXG4gICAgICogUGFyYW0gcHJvcHMgLSByZXNvdXJjZSBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IHJvcy5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBBc3NpZ25Qcml2YXRlSXBBZGRyZXNzZXNQcm9wcywgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6Ym9vbGVhbiA9IHRydWUpIHtcbiAgICAgICAgc3VwZXIoc2NvcGUsIGlkKTtcblxuICAgICAgICBjb25zdCByb3NBc3NpZ25Qcml2YXRlSXBBZGRyZXNzZXMgPSBuZXcgUm9zQXNzaWduUHJpdmF0ZUlwQWRkcmVzc2VzKHRoaXMsIGlkLCAge1xuICAgICAgICAgICAgc2Vjb25kYXJ5UHJpdmF0ZUlwQWRkcmVzc0NvdW50OiBwcm9wcy5zZWNvbmRhcnlQcml2YXRlSXBBZGRyZXNzQ291bnQsXG4gICAgICAgICAgICBwcml2YXRlSXBBZGRyZXNzZXM6IHByb3BzLnByaXZhdGVJcEFkZHJlc3NlcyxcbiAgICAgICAgICAgIG5ldHdvcmtJbnRlcmZhY2VJZDogcHJvcHMubmV0d29ya0ludGVyZmFjZUlkLFxuICAgICAgICB9LCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCAmJiB0aGlzLnN0YWNrLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50KTtcbiAgICAgICAgdGhpcy5yZXNvdXJjZSA9IHJvc0Fzc2lnblByaXZhdGVJcEFkZHJlc3NlcztcbiAgICAgICAgdGhpcy5hdHRyTmV0d29ya0ludGVyZmFjZUlkID0gcm9zQXNzaWduUHJpdmF0ZUlwQWRkcmVzc2VzLmF0dHJOZXR3b3JrSW50ZXJmYWNlSWQ7XG4gICAgICAgIHRoaXMuYXR0clByaXZhdGVJcEFkZHJlc3NlcyA9IHJvc0Fzc2lnblByaXZhdGVJcEFkZHJlc3Nlcy5hdHRyUHJpdmF0ZUlwQWRkcmVzc2VzO1xuICAgIH1cbn1cbiJdfQ==