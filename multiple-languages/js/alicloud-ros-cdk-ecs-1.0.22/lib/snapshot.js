"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Snapshot = exports.SnapshotProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ecs_generated_1 = require("./ecs.generated");
Object.defineProperty(exports, "SnapshotProperty", { enumerable: true, get: function () { return ecs_generated_1.RosSnapshot; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::ECS::Snapshot`, which is used to create a snapshot for a disk.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosSnapshot`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-ecs-snapshot
 */
class Snapshot extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosSnapshot = new ecs_generated_1.RosSnapshot(this, id, {
            instantAccess: props.instantAccess,
            description: props.description,
            resourceGroupId: props.resourceGroupId,
            timeout: props.timeout === undefined || props.timeout === null ? 200 : props.timeout,
            retentionDays: props.retentionDays,
            snapshotName: props.snapshotName,
            instantAccessRetentionDays: props.instantAccessRetentionDays,
            tags: props.tags,
            diskId: props.diskId,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosSnapshot;
        this.attrSnapshotId = rosSnapshot.attrSnapshotId;
    }
}
exports.Snapshot = Snapshot;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic25hcHNob3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJzbmFwc2hvdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw4Q0FBOEM7QUFDOUMsbURBQThDO0FBRXRCLGlHQUZmLDJCQUFXLE9BRW9CO0FBZ0V4Qzs7OztHQUlHO0FBQ0gsTUFBYSxRQUFTLFNBQVEsR0FBRyxDQUFDLFFBQVE7SUFPdEM7Ozs7T0FJRztJQUNILFlBQVksS0FBb0IsRUFBRSxFQUFVLEVBQUUsS0FBb0IsRUFBRSxtQ0FBMkMsSUFBSTtRQUMvRyxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRWpCLE1BQU0sV0FBVyxHQUFHLElBQUksMkJBQVcsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFHO1lBQzNDLGFBQWEsRUFBRSxLQUFLLENBQUMsYUFBYTtZQUNsQyxXQUFXLEVBQUUsS0FBSyxDQUFDLFdBQVc7WUFDOUIsZUFBZSxFQUFFLEtBQUssQ0FBQyxlQUFlO1lBQ3RDLE9BQU8sRUFBRSxLQUFLLENBQUMsT0FBTyxLQUFLLFNBQVMsSUFBSSxLQUFLLENBQUMsT0FBTyxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTztZQUNwRixhQUFhLEVBQUUsS0FBSyxDQUFDLGFBQWE7WUFDbEMsWUFBWSxFQUFFLEtBQUssQ0FBQyxZQUFZO1lBQ2hDLDBCQUEwQixFQUFFLEtBQUssQ0FBQywwQkFBMEI7WUFDNUQsSUFBSSxFQUFFLEtBQUssQ0FBQyxJQUFJO1lBQ2hCLE1BQU0sRUFBRSxLQUFLLENBQUMsTUFBTTtTQUN2QixFQUFFLGdDQUFnQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztRQUNwRixJQUFJLENBQUMsUUFBUSxHQUFHLFdBQVcsQ0FBQztRQUM1QixJQUFJLENBQUMsY0FBYyxHQUFHLFdBQVcsQ0FBQyxjQUFjLENBQUM7SUFDckQsQ0FBQztDQUNKO0FBN0JELDRCQTZCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHJvcyBmcm9tICdAYWxpY2xvdWQvcm9zLWNkay1jb3JlJztcbmltcG9ydCB7IFJvc1NuYXBzaG90IH0gZnJvbSAnLi9lY3MuZ2VuZXJhdGVkJztcbi8vIEdlbmVyYXRlZCBmcm9tIHRoZSBBbGlDbG91ZCBST1MgUmVzb3VyY2UgU3BlY2lmaWNhdGlvblxuZXhwb3J0IHsgUm9zU25hcHNob3QgYXMgU25hcHNob3RQcm9wZXJ0eSB9O1xuXG4vKipcbiAqIFByb3BlcnRpZXMgZm9yIGRlZmluaW5nIGEgYFNuYXBzaG90YC5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvYWxpeXVuLWVjcy1zbmFwc2hvdFxuICovXG5leHBvcnQgaW50ZXJmYWNlIFNuYXBzaG90UHJvcHMge1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgZGlza0lkOiBJbmRpY2F0ZXMgdGhlIElEIG9mIHRoZSBzcGVjaWZpZWQgZGlzay5cbiAgICAgKi9cbiAgICByZWFkb25seSBkaXNrSWQ6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGRlc2NyaXB0aW9uOiBUaGUgZGVzY3JpcHRpb24gb2YgYSBzbmFwc2hvdCBjYW4gYmUgMiB0byAyNTYgY2hhcmFjdGVycyBpbiBsZW5ndGggYW5kIGNhbm5vdCBiZWdpbiB3aXRoIGh0dHA6XFwvXFwvIG9yIGh0dHBzOlxcL1xcLy4gVGhlIGRlc2NyaXB0aW9uIHdpbGwgYXBwZWFyIG9uIHRoZSBjb25zb2xlLiBCeSBkZWZhdWx0LCB0aGUgdmFsdWUgaXMgemVyby5cbiAgICAgKi9cbiAgICByZWFkb25seSBkZXNjcmlwdGlvbj86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGluc3RhbnRBY2Nlc3M6IFNwZWNpZmllcyB3aGV0aGVyIHRvIGVuYWJsZSB0aGUgaW5zdGFudCBhY2Nlc3MgZmVhdHVyZS4gVmFsaWQgdmFsdWVzOiBcbiAgICAgKiB0cnVlOiBlbmFibGVzIHRoZSBpbnN0YW50IGFjY2VzcyBmZWF0dXJlLiBUaGlzIGZlYXR1cmUgY2FuIGJlIGVuYWJsZWQgb25seSBmb3IgZW5oYW5jZWQgU1NEcyAoRVNTRHMpIFxuICAgICAqIGZhbHNlOiBkaXNhYmxlcyB0aGUgaW5zdGFudCBhY2Nlc3MgZmVhdHVyZS4gSWYgSW5zdGFudEFjY2VzcyBpcyBzZXQgdG8gZmFsc2UsIG5vcm1hbCBzbmFwc2hvdHMgYXJlIGNyZWF0ZWQuXG4gICAgICogRGVmYXVsdCB2YWx1ZTogZmFsc2UuXG4gICAgICogTm90ZSBUaGlzIHBhcmFtZXRlciBhbmQgdGhlIENhdGVnb3J5IHBhcmFtZXRlciBjYW5ub3QgYmUgc3BlY2lmaWVkIGF0IHRoZSBzYW1lIHRpbWUuIFxuICAgICAqIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgdGhlIFwiRGVzY3JpcHRpb25cIiBzZWN0aW9uIGluIHRoaXMgdG9waWMuXG4gICAgICovXG4gICAgcmVhZG9ubHkgaW5zdGFudEFjY2Vzcz86IGJvb2xlYW4gfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBpbnN0YW50QWNjZXNzUmV0ZW50aW9uRGF5czogU3BlY2lmaWVzIHRoZSByZXRlbnRpb24gcGVyaW9kIG9mIHRoZSBpbnN0YW50IGFjY2VzcyBmZWF0dXJlLiBBZnRlciB0aGUgcmV0ZW50aW9uIHBlcmlvZCBlbmRzLCBcbiAgICAgKiB0aGUgc25hcHNob3QgaXMgYXV0b21hdGljYWxseSByZWxlYXNlZC4gVGhpcyBwYXJhbWV0ZXIgdGFrZXMgZWZmZWN0IG9ubHkgd2hlbiBJbnN0YW50QWNjZXNzIFxuICAgICAqIGlzIHNldCB0byB0cnVlLiBVbml0OiBkYXlzLlxuICAgICAqIFZhbGlkIHZhbHVlczogMSB0byA2NTUzNS4gQnkgZGVmYXVsdCwgdGhlIHZhbHVlIG9mIFxuICAgICAqIHRoaXMgcGFyYW1ldGVyIGlzIHRoZSBzYW1lIGFzIHRoYXQgb2YgUmV0ZW50aW9uRGF5cy5cbiAgICAgKi9cbiAgICByZWFkb25seSBpbnN0YW50QWNjZXNzUmV0ZW50aW9uRGF5cz86IG51bWJlciB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHJlc291cmNlR3JvdXBJZDogUmVzb3VyY2UgZ3JvdXAgaWQuXG4gICAgICovXG4gICAgcmVhZG9ubHkgcmVzb3VyY2VHcm91cElkPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgcmV0ZW50aW9uRGF5czogU2V0IHRoZSByZXRlbnRpb24gcGVyaW9kIG9mIGEgc25hcHNob3QgaW4gZGF5cy4gVGhlIHNuYXBzaG90IHdpbGwgYmUgYXV0b21hdGljYWxseSByZWxlYXNlZCBhZnRlciB0aGUgcmV0ZW50aW9uIHBlcmlvZCBleHBpcmVzLlxuICAgICAqIFRoZSB2YWx1ZSByYW5nZXMgZnJvbSAxIHRvIDY1NTM2LlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHJldGVudGlvbkRheXM/OiBudW1iZXIgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBzbmFwc2hvdE5hbWU6IFRoZSBuYW1lIG9mIHRoZSBzbmFwc2hvdCwgWzIsIDEyOF0gRW5nbGlzaCBvciBDaGluZXNlIGNoYXJhY3RlcnMuIEl0IG11c3QgYmVnaW4gd2l0aCBhbiB1cHBlcmNhc2VcXC9sb3dlcmNhc2UgbGV0dGVyIG9yIGEgQ2hpbmVzZSBjaGFyYWN0ZXIsIGFuZCBtYXkgY29udGFpbiBudW1iZXJzLCAnXycgb3IgJy0nLiBJdCBjYW5ub3QgYmVnaW4gd2l0aCBodHRwOlxcL1xcLyBvciBodHRwczpcXC9cXC8uXG4gICAgICovXG4gICAgcmVhZG9ubHkgc25hcHNob3ROYW1lPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgdGFnczogVGFncyB0byBhdHRhY2ggdG8gaW5zdGFuY2UuIE1heCBzdXBwb3J0IDIwIHRhZ3MgdG8gYWRkIGR1cmluZyBjcmVhdGUgaW5zdGFuY2UuIEVhY2ggdGFnIHdpdGggdHdvIHByb3BlcnRpZXMgS2V5IGFuZCBWYWx1ZSwgYW5kIEtleSBpcyByZXF1aXJlZC5cbiAgICAgKi9cbiAgICByZWFkb25seSB0YWdzPzogUm9zU25hcHNob3QuVGFnc1Byb3BlcnR5W107XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSB0aW1lb3V0OiBUaGUgbnVtYmVyIG9mIG1pbnV0ZXMgdG8gd2FpdCBmb3IgY3JlYXRlIHNuYXBzaG90LlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHRpbWVvdXQ/OiBudW1iZXIgfCByb3MuSVJlc29sdmFibGU7XG59XG5cbi8qKlxuICogVGhpcyBjbGFzcyBlbmNhcHN1bGF0ZXMgYW5kIGV4dGVuZHMgdGhlIFJPUyByZXNvdXJjZSB0eXBlIGBBTElZVU46OkVDUzo6U25hcHNob3RgLCB3aGljaCBpcyB1c2VkIHRvIGNyZWF0ZSBhIHNuYXBzaG90IGZvciBhIGRpc2suXG4gKiBATm90ZSBUaGlzIGNsYXNzIG1heSBoYXZlIHNvbWUgbmV3IGZ1bmN0aW9ucyB0byBmYWNpbGl0YXRlIGRldmVsb3BtZW50LCBzbyBpdCBpcyByZWNvbW1lbmRlZCB0byB1c2UgdGhpcyBjbGFzcyBpbnN0ZWFkIG9mIGBSb3NTbmFwc2hvdGBmb3IgYSBtb3JlIGNvbnZlbmllbnQgZGV2ZWxvcG1lbnQgZXhwZXJpZW5jZS5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvYWxpeXVuLWVjcy1zbmFwc2hvdFxuICovXG5leHBvcnQgY2xhc3MgU25hcHNob3QgZXh0ZW5kcyByb3MuUmVzb3VyY2Uge1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIFNuYXBzaG90SWQ6IFRoZSBzbmFwc2hvdCBJRC5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0clNuYXBzaG90SWQ6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFBhcmFtIHNjb3BlIC0gc2NvcGUgaW4gd2hpY2ggdGhpcyByZXNvdXJjZSBpcyBkZWZpbmVkXG4gICAgICogUGFyYW0gaWQgICAgLSBzY29wZWQgaWQgb2YgdGhlIHJlc291cmNlXG4gICAgICogUGFyYW0gcHJvcHMgLSByZXNvdXJjZSBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IHJvcy5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBTbmFwc2hvdFByb3BzLCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDpib29sZWFuID0gdHJ1ZSkge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQpO1xuXG4gICAgICAgIGNvbnN0IHJvc1NuYXBzaG90ID0gbmV3IFJvc1NuYXBzaG90KHRoaXMsIGlkLCAge1xuICAgICAgICAgICAgaW5zdGFudEFjY2VzczogcHJvcHMuaW5zdGFudEFjY2VzcyxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBwcm9wcy5kZXNjcmlwdGlvbixcbiAgICAgICAgICAgIHJlc291cmNlR3JvdXBJZDogcHJvcHMucmVzb3VyY2VHcm91cElkLFxuICAgICAgICAgICAgdGltZW91dDogcHJvcHMudGltZW91dCA9PT0gdW5kZWZpbmVkIHx8IHByb3BzLnRpbWVvdXQgPT09IG51bGwgPyAyMDAgOiBwcm9wcy50aW1lb3V0LFxuICAgICAgICAgICAgcmV0ZW50aW9uRGF5czogcHJvcHMucmV0ZW50aW9uRGF5cyxcbiAgICAgICAgICAgIHNuYXBzaG90TmFtZTogcHJvcHMuc25hcHNob3ROYW1lLFxuICAgICAgICAgICAgaW5zdGFudEFjY2Vzc1JldGVudGlvbkRheXM6IHByb3BzLmluc3RhbnRBY2Nlc3NSZXRlbnRpb25EYXlzLFxuICAgICAgICAgICAgdGFnczogcHJvcHMudGFncyxcbiAgICAgICAgICAgIGRpc2tJZDogcHJvcHMuZGlza0lkLFxuICAgICAgICB9LCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCAmJiB0aGlzLnN0YWNrLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50KTtcbiAgICAgICAgdGhpcy5yZXNvdXJjZSA9IHJvc1NuYXBzaG90O1xuICAgICAgICB0aGlzLmF0dHJTbmFwc2hvdElkID0gcm9zU25hcHNob3QuYXR0clNuYXBzaG90SWQ7XG4gICAgfVxufVxuIl19