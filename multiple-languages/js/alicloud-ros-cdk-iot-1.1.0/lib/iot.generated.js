"use strict";
// Generated from the AliCloud ROS Resource Specification
Object.defineProperty(exports, "__esModule", { value: true });
exports.RosRuleAction = exports.RosRule = exports.RosProductTopic = exports.RosProduct = exports.RosDeviceGroup = exports.RosDevice = void 0;
const ros = require("@alicloud/ros-cdk-core");
/**
 * Determine whether the given properties match those of a `RosDeviceProps`
 *
 * @param properties - the TypeScript properties of a `RosDeviceProps`
 *
 * @returns the result of the validation.
 */
function RosDevicePropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('iotInstanceId', ros.validateString)(properties.iotInstanceId));
    errors.collect(ros.propertyValidator('devEui', ros.validateString)(properties.devEui));
    errors.collect(ros.propertyValidator('productKey', ros.requiredValidator)(properties.productKey));
    errors.collect(ros.propertyValidator('productKey', ros.validateString)(properties.productKey));
    errors.collect(ros.propertyValidator('deviceName', ros.validateString)(properties.deviceName));
    errors.collect(ros.propertyValidator('pinCode', ros.validateString)(properties.pinCode));
    errors.collect(ros.propertyValidator('nickname', ros.validateString)(properties.nickname));
    return errors.wrap('supplied properties not correct for "RosDeviceProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::IOT::Device` resource
 *
 * @param properties - the TypeScript properties of a `RosDeviceProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::IOT::Device` resource.
 */
// @ts-ignore TS6133
function rosDevicePropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosDevicePropsValidator(properties).assertSuccess();
    }
    return {
        'ProductKey': ros.stringToRosTemplate(properties.productKey),
        'DevEui': ros.stringToRosTemplate(properties.devEui),
        'DeviceName': ros.stringToRosTemplate(properties.deviceName),
        'IotInstanceId': ros.stringToRosTemplate(properties.iotInstanceId),
        'Nickname': ros.stringToRosTemplate(properties.nickname),
        'PinCode': ros.stringToRosTemplate(properties.pinCode),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::IOT::Device`, which is used to register a Device.
 * @Note This class does not contain additional functions, so it is recommended to use the `Device` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-iot-device
 */
class RosDevice extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosDevice.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrDeviceName = this.getAtt('DeviceName');
        this.attrDeviceSecret = this.getAtt('DeviceSecret');
        this.attrIotId = this.getAtt('IotId');
        this.attrIotInstanceId = this.getAtt('IotInstanceId');
        this.attrIpAddress = this.getAtt('IpAddress');
        this.attrNickName = this.getAtt('NickName');
        this.attrNodeType = this.getAtt('NodeType');
        this.attrProductKey = this.getAtt('ProductKey');
        this.attrProductName = this.getAtt('ProductName');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.productKey = props.productKey;
        this.devEui = props.devEui;
        this.deviceName = props.deviceName;
        this.iotInstanceId = props.iotInstanceId;
        this.nickname = props.nickname;
        this.pinCode = props.pinCode;
    }
    get rosProperties() {
        return {
            productKey: this.productKey,
            devEui: this.devEui,
            deviceName: this.deviceName,
            iotInstanceId: this.iotInstanceId,
            nickname: this.nickname,
            pinCode: this.pinCode,
        };
    }
    renderProperties(props) {
        return rosDevicePropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosDevice = RosDevice;
/**
 * The resource type name for this resource class.
 */
RosDevice.ROS_RESOURCE_TYPE_NAME = "ALIYUN::IOT::Device";
/**
 * Determine whether the given properties match those of a `RosDeviceGroupProps`
 *
 * @param properties - the TypeScript properties of a `RosDeviceGroupProps`
 *
 * @returns the result of the validation.
 */
function RosDeviceGroupPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('groupName', ros.requiredValidator)(properties.groupName));
    errors.collect(ros.propertyValidator('groupName', ros.validateString)(properties.groupName));
    errors.collect(ros.propertyValidator('superGroupId', ros.validateString)(properties.superGroupId));
    errors.collect(ros.propertyValidator('iotInstanceId', ros.validateString)(properties.iotInstanceId));
    errors.collect(ros.propertyValidator('groupDesc', ros.validateString)(properties.groupDesc));
    return errors.wrap('supplied properties not correct for "RosDeviceGroupProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::IOT::DeviceGroup` resource
 *
 * @param properties - the TypeScript properties of a `RosDeviceGroupProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::IOT::DeviceGroup` resource.
 */
// @ts-ignore TS6133
function rosDeviceGroupPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosDeviceGroupPropsValidator(properties).assertSuccess();
    }
    return {
        'GroupName': ros.stringToRosTemplate(properties.groupName),
        'GroupDesc': ros.stringToRosTemplate(properties.groupDesc),
        'IotInstanceId': ros.stringToRosTemplate(properties.iotInstanceId),
        'SuperGroupId': ros.stringToRosTemplate(properties.superGroupId),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::IOT::DeviceGroup`, which is used to create a group.
 * @Note This class does not contain additional functions, so it is recommended to use the `DeviceGroup` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-iot-devicegroup
 */
class RosDeviceGroup extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosDeviceGroup.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrGroupId = this.getAtt('GroupId');
        this.attrIotInstanceId = this.getAtt('IotInstanceId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.groupName = props.groupName;
        this.groupDesc = props.groupDesc;
        this.iotInstanceId = props.iotInstanceId;
        this.superGroupId = props.superGroupId;
    }
    get rosProperties() {
        return {
            groupName: this.groupName,
            groupDesc: this.groupDesc,
            iotInstanceId: this.iotInstanceId,
            superGroupId: this.superGroupId,
        };
    }
    renderProperties(props) {
        return rosDeviceGroupPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosDeviceGroup = RosDeviceGroup;
/**
 * The resource type name for this resource class.
 */
RosDeviceGroup.ROS_RESOURCE_TYPE_NAME = "ALIYUN::IOT::DeviceGroup";
/**
 * Determine whether the given properties match those of a `RosProductProps`
 *
 * @param properties - the TypeScript properties of a `RosProductProps`
 *
 * @returns the result of the validation.
 */
function RosProductPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('publishAuto', ros.validateBoolean)(properties.publishAuto));
    errors.collect(ros.propertyValidator('description', ros.validateString)(properties.description));
    errors.collect(ros.propertyValidator('iotInstanceId', ros.validateString)(properties.iotInstanceId));
    errors.collect(ros.propertyValidator('productName', ros.requiredValidator)(properties.productName));
    errors.collect(ros.propertyValidator('productName', ros.validateString)(properties.productName));
    errors.collect(ros.propertyValidator('resourceGroupId', ros.validateString)(properties.resourceGroupId));
    errors.collect(ros.propertyValidator('aliyunCommodityCode', ros.validateString)(properties.aliyunCommodityCode));
    errors.collect(ros.propertyValidator('categoryKey', ros.validateString)(properties.categoryKey));
    if (properties.protocolType && (typeof properties.protocolType) !== 'object') {
        errors.collect(ros.propertyValidator('protocolType', ros.validateAllowedValues)({
            data: properties.protocolType,
            allowedValues: ["ble", "customize", "modbus", "opc-ua", "zigbee"],
        }));
    }
    errors.collect(ros.propertyValidator('protocolType', ros.validateString)(properties.protocolType));
    errors.collect(ros.propertyValidator('id2', ros.validateBoolean)(properties.id2));
    errors.collect(ros.propertyValidator('nodeType', ros.requiredValidator)(properties.nodeType));
    if (properties.nodeType && (typeof properties.nodeType) !== 'object') {
        errors.collect(ros.propertyValidator('nodeType', ros.validateAllowedValues)({
            data: properties.nodeType,
            allowedValues: [0, 1],
        }));
    }
    errors.collect(ros.propertyValidator('nodeType', ros.validateNumber)(properties.nodeType));
    if (properties.dataFormat && (typeof properties.dataFormat) !== 'object') {
        errors.collect(ros.propertyValidator('dataFormat', ros.validateAllowedValues)({
            data: properties.dataFormat,
            allowedValues: [0, 1],
        }));
    }
    errors.collect(ros.propertyValidator('dataFormat', ros.validateNumber)(properties.dataFormat));
    errors.collect(ros.propertyValidator('authType', ros.validateString)(properties.authType));
    errors.collect(ros.propertyValidator('joinPermissionId', ros.validateString)(properties.joinPermissionId));
    if (properties.netType && (typeof properties.netType) !== 'object') {
        errors.collect(ros.propertyValidator('netType', ros.validateAllowedValues)({
            data: properties.netType,
            allowedValues: ["CELLULAR", "ETHERNET", "LORA", "OTHER", "WIFI"],
        }));
    }
    errors.collect(ros.propertyValidator('netType', ros.validateString)(properties.netType));
    return errors.wrap('supplied properties not correct for "RosProductProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::IOT::Product` resource
 *
 * @param properties - the TypeScript properties of a `RosProductProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::IOT::Product` resource.
 */
// @ts-ignore TS6133
function rosProductPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosProductPropsValidator(properties).assertSuccess();
    }
    return {
        'NodeType': ros.numberToRosTemplate(properties.nodeType),
        'ProductName': ros.stringToRosTemplate(properties.productName),
        'AliyunCommodityCode': ros.stringToRosTemplate(properties.aliyunCommodityCode),
        'AuthType': ros.stringToRosTemplate(properties.authType),
        'CategoryKey': ros.stringToRosTemplate(properties.categoryKey),
        'DataFormat': ros.numberToRosTemplate(properties.dataFormat),
        'Description': ros.stringToRosTemplate(properties.description),
        'Id2': ros.booleanToRosTemplate(properties.id2),
        'IotInstanceId': ros.stringToRosTemplate(properties.iotInstanceId),
        'JoinPermissionId': ros.stringToRosTemplate(properties.joinPermissionId),
        'NetType': ros.stringToRosTemplate(properties.netType),
        'ProtocolType': ros.stringToRosTemplate(properties.protocolType),
        'PublishAuto': ros.booleanToRosTemplate(properties.publishAuto),
        'ResourceGroupId': ros.stringToRosTemplate(properties.resourceGroupId),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::IOT::Product`, which is used to create a product.
 * @Note This class does not contain additional functions, so it is recommended to use the `Product` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-iot-product
 */
class RosProduct extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosProduct.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrIotInstanceId = this.getAtt('IotInstanceId');
        this.attrProductKey = this.getAtt('ProductKey');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.nodeType = props.nodeType;
        this.productName = props.productName;
        this.aliyunCommodityCode = props.aliyunCommodityCode;
        this.authType = props.authType;
        this.categoryKey = props.categoryKey;
        this.dataFormat = props.dataFormat;
        this.description = props.description;
        this.id2 = props.id2;
        this.iotInstanceId = props.iotInstanceId;
        this.joinPermissionId = props.joinPermissionId;
        this.netType = props.netType;
        this.protocolType = props.protocolType;
        this.publishAuto = props.publishAuto;
        this.resourceGroupId = props.resourceGroupId;
    }
    get rosProperties() {
        return {
            nodeType: this.nodeType,
            productName: this.productName,
            aliyunCommodityCode: this.aliyunCommodityCode,
            authType: this.authType,
            categoryKey: this.categoryKey,
            dataFormat: this.dataFormat,
            description: this.description,
            id2: this.id2,
            iotInstanceId: this.iotInstanceId,
            joinPermissionId: this.joinPermissionId,
            netType: this.netType,
            protocolType: this.protocolType,
            publishAuto: this.publishAuto,
            resourceGroupId: this.resourceGroupId,
        };
    }
    renderProperties(props) {
        return rosProductPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosProduct = RosProduct;
/**
 * The resource type name for this resource class.
 */
RosProduct.ROS_RESOURCE_TYPE_NAME = "ALIYUN::IOT::Product";
/**
 * Determine whether the given properties match those of a `RosProductTopicProps`
 *
 * @param properties - the TypeScript properties of a `RosProductTopicProps`
 *
 * @returns the result of the validation.
 */
function RosProductTopicPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    if (properties.desc && (Array.isArray(properties.desc) || (typeof properties.desc) === 'string')) {
        errors.collect(ros.propertyValidator('desc', ros.validateLength)({
            data: properties.desc.length,
            min: undefined,
            max: 100,
        }));
    }
    errors.collect(ros.propertyValidator('desc', ros.validateString)(properties.desc));
    errors.collect(ros.propertyValidator('iotInstanceId', ros.validateString)(properties.iotInstanceId));
    errors.collect(ros.propertyValidator('topicShortName', ros.requiredValidator)(properties.topicShortName));
    errors.collect(ros.propertyValidator('topicShortName', ros.validateString)(properties.topicShortName));
    errors.collect(ros.propertyValidator('operation', ros.requiredValidator)(properties.operation));
    if (properties.operation && (typeof properties.operation) !== 'object') {
        errors.collect(ros.propertyValidator('operation', ros.validateAllowedValues)({
            data: properties.operation,
            allowedValues: ["ALL", "PUB", "SUB"],
        }));
    }
    errors.collect(ros.propertyValidator('operation', ros.validateString)(properties.operation));
    errors.collect(ros.propertyValidator('productKey', ros.requiredValidator)(properties.productKey));
    errors.collect(ros.propertyValidator('productKey', ros.validateString)(properties.productKey));
    return errors.wrap('supplied properties not correct for "RosProductTopicProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::IOT::ProductTopic` resource
 *
 * @param properties - the TypeScript properties of a `RosProductTopicProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::IOT::ProductTopic` resource.
 */
// @ts-ignore TS6133
function rosProductTopicPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosProductTopicPropsValidator(properties).assertSuccess();
    }
    return {
        'Operation': ros.stringToRosTemplate(properties.operation),
        'ProductKey': ros.stringToRosTemplate(properties.productKey),
        'TopicShortName': ros.stringToRosTemplate(properties.topicShortName),
        'Desc': ros.stringToRosTemplate(properties.desc),
        'IotInstanceId': ros.stringToRosTemplate(properties.iotInstanceId),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::IOT::ProductTopic`, which is used to create a topic category for a specified product.
 * @Note This class does not contain additional functions, so it is recommended to use the `ProductTopic` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-iot-producttopic
 */
class RosProductTopic extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosProductTopic.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrTopicId = this.getAtt('TopicId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.operation = props.operation;
        this.productKey = props.productKey;
        this.topicShortName = props.topicShortName;
        this.desc = props.desc;
        this.iotInstanceId = props.iotInstanceId;
    }
    get rosProperties() {
        return {
            operation: this.operation,
            productKey: this.productKey,
            topicShortName: this.topicShortName,
            desc: this.desc,
            iotInstanceId: this.iotInstanceId,
        };
    }
    renderProperties(props) {
        return rosProductTopicPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosProductTopic = RosProductTopic;
/**
 * The resource type name for this resource class.
 */
RosProductTopic.ROS_RESOURCE_TYPE_NAME = "ALIYUN::IOT::ProductTopic";
/**
 * Determine whether the given properties match those of a `RosRuleProps`
 *
 * @param properties - the TypeScript properties of a `RosRuleProps`
 *
 * @returns the result of the validation.
 */
function RosRulePropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('topicType', ros.validateNumber)(properties.topicType));
    errors.collect(ros.propertyValidator('iotInstanceId', ros.validateString)(properties.iotInstanceId));
    errors.collect(ros.propertyValidator('resourceGroupId', ros.validateString)(properties.resourceGroupId));
    if (properties.ruleAction && (Array.isArray(properties.ruleAction) || (typeof properties.ruleAction) === 'string')) {
        errors.collect(ros.propertyValidator('ruleAction', ros.validateLength)({
            data: properties.ruleAction.length,
            min: 1,
            max: 10,
        }));
    }
    errors.collect(ros.propertyValidator('ruleAction', ros.listValidator(RosRule_RuleActionPropertyValidator))(properties.ruleAction));
    errors.collect(ros.propertyValidator('shortTopic', ros.validateString)(properties.shortTopic));
    errors.collect(ros.propertyValidator('select', ros.validateString)(properties.select));
    errors.collect(ros.propertyValidator('startRule', ros.validateBoolean)(properties.startRule));
    if (properties.dataType && (typeof properties.dataType) !== 'object') {
        errors.collect(ros.propertyValidator('dataType', ros.validateAllowedValues)({
            data: properties.dataType,
            allowedValues: ["BINARY", "JSON"],
        }));
    }
    errors.collect(ros.propertyValidator('dataType', ros.validateString)(properties.dataType));
    errors.collect(ros.propertyValidator('ruleDesc', ros.validateString)(properties.ruleDesc));
    errors.collect(ros.propertyValidator('where', ros.validateString)(properties.where));
    errors.collect(ros.propertyValidator('productKey', ros.validateString)(properties.productKey));
    errors.collect(ros.propertyValidator('name', ros.requiredValidator)(properties.name));
    errors.collect(ros.propertyValidator('name', ros.validateString)(properties.name));
    return errors.wrap('supplied properties not correct for "RosRuleProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::IOT::Rule` resource
 *
 * @param properties - the TypeScript properties of a `RosRuleProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::IOT::Rule` resource.
 */
// @ts-ignore TS6133
function rosRulePropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosRulePropsValidator(properties).assertSuccess();
    }
    return {
        'Name': ros.stringToRosTemplate(properties.name),
        'DataType': ros.stringToRosTemplate(properties.dataType),
        'IotInstanceId': ros.stringToRosTemplate(properties.iotInstanceId),
        'ProductKey': ros.stringToRosTemplate(properties.productKey),
        'ResourceGroupId': ros.stringToRosTemplate(properties.resourceGroupId),
        'RuleAction': ros.listMapper(rosRuleRuleActionPropertyToRosTemplate)(properties.ruleAction),
        'RuleDesc': ros.stringToRosTemplate(properties.ruleDesc),
        'Select': ros.stringToRosTemplate(properties.select),
        'ShortTopic': ros.stringToRosTemplate(properties.shortTopic),
        'StartRule': ros.booleanToRosTemplate(properties.startRule),
        'TopicType': ros.numberToRosTemplate(properties.topicType),
        'Where': ros.stringToRosTemplate(properties.where),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::IOT::Rule`, which is used to create a rule for a specific topic.
 * @Note This class does not contain additional functions, so it is recommended to use the `Rule` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-iot-rule
 */
class RosRule extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosRule.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrActionId = this.getAtt('ActionId');
        this.attrRuleId = this.getAtt('RuleId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.name = props.name;
        this.dataType = props.dataType;
        this.iotInstanceId = props.iotInstanceId;
        this.productKey = props.productKey;
        this.resourceGroupId = props.resourceGroupId;
        this.ruleAction = props.ruleAction;
        this.ruleDesc = props.ruleDesc;
        this.select = props.select;
        this.shortTopic = props.shortTopic;
        this.startRule = props.startRule;
        this.topicType = props.topicType;
        this.where = props.where;
    }
    get rosProperties() {
        return {
            name: this.name,
            dataType: this.dataType,
            iotInstanceId: this.iotInstanceId,
            productKey: this.productKey,
            resourceGroupId: this.resourceGroupId,
            ruleAction: this.ruleAction,
            ruleDesc: this.ruleDesc,
            select: this.select,
            shortTopic: this.shortTopic,
            startRule: this.startRule,
            topicType: this.topicType,
            where: this.where,
        };
    }
    renderProperties(props) {
        return rosRulePropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosRule = RosRule;
/**
 * The resource type name for this resource class.
 */
RosRule.ROS_RESOURCE_TYPE_NAME = "ALIYUN::IOT::Rule";
/**
 * Determine whether the given properties match those of a `RuleActionProperty`
 *
 * @param properties - the TypeScript properties of a `RuleActionProperty`
 *
 * @returns the result of the validation.
 */
function RosRule_RuleActionPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    if (properties.errorActionFlag && (typeof properties.errorActionFlag) !== 'object') {
        errors.collect(ros.propertyValidator('errorActionFlag', ros.validateAllowedValues)({
            data: properties.errorActionFlag,
            allowedValues: ["true", "false"],
        }));
    }
    errors.collect(ros.propertyValidator('errorActionFlag', ros.validateString)(properties.errorActionFlag));
    errors.collect(ros.propertyValidator('type', ros.requiredValidator)(properties.type));
    if (properties.type && (typeof properties.type) !== 'object') {
        errors.collect(ros.propertyValidator('type', ros.validateAllowedValues)({
            data: properties.type,
            allowedValues: ["AMQP", "DATAHUB", "FC", "MNS", "ONS", "OTS", "REPUBLISH"],
        }));
    }
    errors.collect(ros.propertyValidator('type', ros.validateString)(properties.type));
    errors.collect(ros.propertyValidator('configuration', ros.requiredValidator)(properties.configuration));
    errors.collect(ros.propertyValidator('configuration', ros.validateString)(properties.configuration));
    return errors.wrap('supplied properties not correct for "RuleActionProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::IOT::Rule.RuleAction` resource
 *
 * @param properties - the TypeScript properties of a `RuleActionProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::IOT::Rule.RuleAction` resource.
 */
// @ts-ignore TS6133
function rosRuleRuleActionPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosRule_RuleActionPropertyValidator(properties).assertSuccess();
    return {
        'ErrorActionFlag': ros.stringToRosTemplate(properties.errorActionFlag),
        'Type': ros.stringToRosTemplate(properties.type),
        'Configuration': ros.stringToRosTemplate(properties.configuration),
    };
}
/**
 * Determine whether the given properties match those of a `RosRuleActionProps`
 *
 * @param properties - the TypeScript properties of a `RosRuleActionProps`
 *
 * @returns the result of the validation.
 */
function RosRuleActionPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('errorActionFlag', ros.validateBoolean)(properties.errorActionFlag));
    errors.collect(ros.propertyValidator('type', ros.requiredValidator)(properties.type));
    if (properties.type && (typeof properties.type) !== 'object') {
        errors.collect(ros.propertyValidator('type', ros.validateAllowedValues)({
            data: properties.type,
            allowedValues: ["AMQP", "DATAHUB", "FC", "MNS", "ONS", "OTS", "REPUBLISH"],
        }));
    }
    errors.collect(ros.propertyValidator('type', ros.validateString)(properties.type));
    errors.collect(ros.propertyValidator('iotInstanceId', ros.validateString)(properties.iotInstanceId));
    errors.collect(ros.propertyValidator('configuration', ros.requiredValidator)(properties.configuration));
    errors.collect(ros.propertyValidator('configuration', ros.validateString)(properties.configuration));
    errors.collect(ros.propertyValidator('ruleId', ros.requiredValidator)(properties.ruleId));
    errors.collect(ros.propertyValidator('ruleId', ros.validateNumber)(properties.ruleId));
    return errors.wrap('supplied properties not correct for "RosRuleActionProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::IOT::RuleAction` resource
 *
 * @param properties - the TypeScript properties of a `RosRuleActionProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::IOT::RuleAction` resource.
 */
// @ts-ignore TS6133
function rosRuleActionPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosRuleActionPropsValidator(properties).assertSuccess();
    }
    return {
        'Configuration': ros.stringToRosTemplate(properties.configuration),
        'RuleId': ros.numberToRosTemplate(properties.ruleId),
        'Type': ros.stringToRosTemplate(properties.type),
        'ErrorActionFlag': ros.booleanToRosTemplate(properties.errorActionFlag),
        'IotInstanceId': ros.stringToRosTemplate(properties.iotInstanceId),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::IOT::RuleAction`, which is used to create a rule action for a specified rule.
 * @Note This class does not contain additional functions, so it is recommended to use the `RuleAction` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-iot-ruleaction
 */
class RosRuleAction extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosRuleAction.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrActionId = this.getAtt('ActionId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.configuration = props.configuration;
        this.ruleId = props.ruleId;
        this.type = props.type;
        this.errorActionFlag = props.errorActionFlag;
        this.iotInstanceId = props.iotInstanceId;
    }
    get rosProperties() {
        return {
            configuration: this.configuration,
            ruleId: this.ruleId,
            type: this.type,
            errorActionFlag: this.errorActionFlag,
            iotInstanceId: this.iotInstanceId,
        };
    }
    renderProperties(props) {
        return rosRuleActionPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosRuleAction = RosRuleAction;
/**
 * The resource type name for this resource class.
 */
RosRuleAction.ROS_RESOURCE_TYPE_NAME = "ALIYUN::IOT::RuleAction";
//# sourceMappingURL=data:application/json;base64,