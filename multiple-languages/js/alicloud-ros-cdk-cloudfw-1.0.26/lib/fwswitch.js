"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FwSwitch = exports.FwSwitchProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const cloudfw_generated_1 = require("./cloudfw.generated");
Object.defineProperty(exports, "FwSwitchProperty", { enumerable: true, get: function () { return cloudfw_generated_1.RosFwSwitch; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::CLOUDFW::FwSwitch`, which is used to enable a firewall.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosFwSwitch`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-cloudfw-fwswitch
 */
class FwSwitch extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props = {}, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosFwSwitch = new cloudfw_generated_1.RosFwSwitch(this, id, {
            ipaddrList: props.ipaddrList,
            resourceTypeList: props.resourceTypeList,
            regionList: props.regionList,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosFwSwitch;
    }
}
exports.FwSwitch = FwSwitch;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZndzd2l0Y2guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJmd3N3aXRjaC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw4Q0FBOEM7QUFDOUMsMkRBQWtEO0FBRTFCLGlHQUZmLCtCQUFXLE9BRW9CO0FBc0N4Qzs7OztHQUlHO0FBQ0gsTUFBYSxRQUFTLFNBQVEsR0FBRyxDQUFDLFFBQVE7SUFNdEM7Ozs7T0FJRztJQUNILFlBQVksS0FBb0IsRUFBRSxFQUFVLEVBQUUsUUFBdUIsRUFBRSxFQUFFLG1DQUEyQyxJQUFJO1FBQ3BILEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDakIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUM7UUFDYixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsZ0NBQWdDLEdBQUcsZ0NBQWdDLENBQUM7UUFFekUsTUFBTSxXQUFXLEdBQUcsSUFBSSwrQkFBVyxDQUFDLElBQUksRUFBRSxFQUFFLEVBQUc7WUFDM0MsVUFBVSxFQUFFLEtBQUssQ0FBQyxVQUFVO1lBQzVCLGdCQUFnQixFQUFFLEtBQUssQ0FBQyxnQkFBZ0I7WUFDeEMsVUFBVSxFQUFFLEtBQUssQ0FBQyxVQUFVO1NBQy9CLEVBQUUsZ0NBQWdDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO1FBQ3BGLElBQUksQ0FBQyxRQUFRLEdBQUcsV0FBVyxDQUFDO0lBQ2hDLENBQUM7Q0FDSjtBQXpCRCw0QkF5QkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyByb3MgZnJvbSAnQGFsaWNsb3VkL3Jvcy1jZGstY29yZSc7XG5pbXBvcnQgeyBSb3NGd1N3aXRjaCB9IGZyb20gJy4vY2xvdWRmdy5nZW5lcmF0ZWQnO1xuLy8gR2VuZXJhdGVkIGZyb20gdGhlIEFsaUNsb3VkIFJPUyBSZXNvdXJjZSBTcGVjaWZpY2F0aW9uXG5leHBvcnQgeyBSb3NGd1N3aXRjaCBhcyBGd1N3aXRjaFByb3BlcnR5IH07XG5cbi8qKlxuICogUHJvcGVydGllcyBmb3IgZGVmaW5pbmcgYSBgRndTd2l0Y2hgLlxuICogU2VlIGh0dHBzOi8vd3d3LmFsaWJhYmFjbG91ZC5jb20vaGVscC9yb3MvZGV2ZWxvcGVyLXJlZmVyZW5jZS9hbGl5dW4tY2xvdWRmdy1md3N3aXRjaFxuICovXG5leHBvcnQgaW50ZXJmYWNlIEZ3U3dpdGNoUHJvcHMge1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgaXBhZGRyTGlzdDogVGhlIElQIGFkZHJlc3MgbGlzdC5cbiAgICAgKiAqKk5vdGUqKjogVGhlIElwYWRkckxpc3QsIFJlZ2lvbkxpc3QsIGFuZCBSZXNvdXJjZVR5cGVMaXN0IGFyZ3VtZW50cyBhcmUgbm90IGFsbG93ZWQgdG8gYmUgZW1wdHkgYXQgdGhlIHNhbWUgdGltZS4gQSB2YWx1ZSBtdXN0IGJlIHNldCBmb3Igb25lIG9mIHRoZSB0aHJlZSBhcmd1bWVudHMuXG4gICAgICovXG4gICAgcmVhZG9ubHkgaXBhZGRyTGlzdD86IEFycmF5PGFueSB8IHJvcy5JUmVzb2x2YWJsZT4gfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSByZWdpb25MaXN0OiBUaGUgcmVnaW9uIGxpc3QuXG4gICAgICogKipOb3RlKio6IFRoZSBJcGFkZHJMaXN0LCBSZWdpb25MaXN0LCBhbmQgUmVzb3VyY2VUeXBlTGlzdCBhcmd1bWVudHMgYXJlIG5vdCBhbGxvd2VkIHRvIGJlIGVtcHR5IGF0IHRoZSBzYW1lIHRpbWUuIEEgdmFsdWUgbXVzdCBiZSBzZXQgZm9yIG9uZSBvZiB0aGUgdGhyZWUgYXJndW1lbnRzLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHJlZ2lvbkxpc3Q/OiBBcnJheTxhbnkgfCByb3MuSVJlc29sdmFibGU+IHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgcmVzb3VyY2VUeXBlTGlzdDogVGhlIGFzc2V0IHR5cGUgbGlzdC4gVmFsaWQgdmFsdWVzOlxuICAgICAqIC0gQmFzdGlvbkhvc3RJUDogQmFzdGlvbiBtYWNoaW5lIGV4aXQgSVAuXG4gICAgICogLSBCYXN0aW9uSG9zdEluZ3Jlc3NJUDogVGhlIGVudHJhbmNlIElQIG9mIHRoZSBmb3J0cmVzcyBtYWNoaW5lLlxuICAgICAqIC0gRWNzRUlQOiBFQ1MgRUlQLlxuICAgICAqIC0gRWNzUHVibGljSVA6IEVDUyBwdWJsaWMgbmV0d29yayBJUC5cbiAgICAgKiAtIEVJUDogRWxhc3RpYyBQdWJsaWMgSVAuXG4gICAgICogLSBFbmlFSVA6IEVsYXN0aWMgTmV0d29yayBjYXJkIEVJUC5cbiAgICAgKiAtIE5hdEVJUDogTkFUIEVJUC5cbiAgICAgKiAtIFNsYkVJUDogU0xCIEVJUC5cbiAgICAgKiAtIFNsYlB1YmxpY0lQOiBTTEIgcHVibGljIG5ldHdvcmsgSVAuXG4gICAgICogLSBOYXRQdWJsaWNJUDogTkFUIHB1YmxpYyBJUFxuICAgICAqIC0gSEFWSVA6IEhpZ2ggQXZhaWxhYmlsaXR5IFZpcnR1YWwgSVAuXG4gICAgICogKipOb3RlKio6IFRoZSBJcGFkZHJMaXN0LCBSZWdpb25MaXN0LCBhbmQgUmVzb3VyY2VUeXBlTGlzdCBhcmd1bWVudHMgYXJlIG5vdCBhbGxvd2VkIHRvIGJlIGVtcHR5IGF0IHRoZSBzYW1lIHRpbWUuIEEgdmFsdWUgbXVzdCBiZSBzZXQgZm9yIG9uZSBvZiB0aGUgdGhyZWUgYXJndW1lbnRzLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHJlc291cmNlVHlwZUxpc3Q/OiBBcnJheTxhbnkgfCByb3MuSVJlc29sdmFibGU+IHwgcm9zLklSZXNvbHZhYmxlO1xufVxuXG4vKipcbiAqIFRoaXMgY2xhc3MgZW5jYXBzdWxhdGVzIGFuZCBleHRlbmRzIHRoZSBST1MgcmVzb3VyY2UgdHlwZSBgQUxJWVVOOjpDTE9VREZXOjpGd1N3aXRjaGAsIHdoaWNoIGlzIHVzZWQgdG8gZW5hYmxlIGEgZmlyZXdhbGwuXG4gKiBATm90ZSBUaGlzIGNsYXNzIG1heSBoYXZlIHNvbWUgbmV3IGZ1bmN0aW9ucyB0byBmYWNpbGl0YXRlIGRldmVsb3BtZW50LCBzbyBpdCBpcyByZWNvbW1lbmRlZCB0byB1c2UgdGhpcyBjbGFzcyBpbnN0ZWFkIG9mIGBSb3NGd1N3aXRjaGBmb3IgYSBtb3JlIGNvbnZlbmllbnQgZGV2ZWxvcG1lbnQgZXhwZXJpZW5jZS5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvYWxpeXVuLWNsb3VkZnctZndzd2l0Y2hcbiAqL1xuZXhwb3J0IGNsYXNzIEZ3U3dpdGNoIGV4dGVuZHMgcm9zLlJlc291cmNlIHtcbiAgICBwcm90ZWN0ZWQgc2NvcGU6IHJvcy5Db25zdHJ1Y3Q7XG4gICAgcHJvdGVjdGVkIGlkOiBzdHJpbmc7XG4gICAgcHJvdGVjdGVkIHByb3BzOiBGd1N3aXRjaFByb3BzO1xuICAgIHByb3RlY3RlZCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIFBhcmFtIHNjb3BlIC0gc2NvcGUgaW4gd2hpY2ggdGhpcyByZXNvdXJjZSBpcyBkZWZpbmVkXG4gICAgICogUGFyYW0gaWQgICAgLSBzY29wZWQgaWQgb2YgdGhlIHJlc291cmNlXG4gICAgICogUGFyYW0gcHJvcHMgLSByZXNvdXJjZSBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IHJvcy5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBGd1N3aXRjaFByb3BzID0ge30sIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OmJvb2xlYW4gPSB0cnVlKSB7XG4gICAgICAgIHN1cGVyKHNjb3BlLCBpZCk7XG4gICAgICAgIHRoaXMuc2NvcGUgPSBzY29wZTtcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xuICAgICAgICB0aGlzLnByb3BzID0gcHJvcHM7XG4gICAgICAgIHRoaXMuZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgPSBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDtcblxuICAgICAgICBjb25zdCByb3NGd1N3aXRjaCA9IG5ldyBSb3NGd1N3aXRjaCh0aGlzLCBpZCwgIHtcbiAgICAgICAgICAgIGlwYWRkckxpc3Q6IHByb3BzLmlwYWRkckxpc3QsXG4gICAgICAgICAgICByZXNvdXJjZVR5cGVMaXN0OiBwcm9wcy5yZXNvdXJjZVR5cGVMaXN0LFxuICAgICAgICAgICAgcmVnaW9uTGlzdDogcHJvcHMucmVnaW9uTGlzdCxcbiAgICAgICAgfSwgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgJiYgdGhpcy5zdGFjay5lbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCk7XG4gICAgICAgIHRoaXMucmVzb3VyY2UgPSByb3NGd1N3aXRjaDtcbiAgICB9XG59XG4iXX0=