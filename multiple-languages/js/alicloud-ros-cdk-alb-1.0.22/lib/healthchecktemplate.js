"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HealthCheckTemplate = exports.HealthCheckTemplateProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const alb_generated_1 = require("./alb.generated");
Object.defineProperty(exports, "HealthCheckTemplateProperty", { enumerable: true, get: function () { return alb_generated_1.RosHealthCheckTemplate; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::ALB::HealthCheckTemplate`, which is used to create a health check template.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosHealthCheckTemplate`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-alb-healthchecktemplate
 */
class HealthCheckTemplate extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosHealthCheckTemplate = new alb_generated_1.RosHealthCheckTemplate(this, id, {
            healthCheckInterval: props.healthCheckInterval,
            healthCheckConnectPort: props.healthCheckConnectPort,
            healthCheckCodes: props.healthCheckCodes,
            unhealthyThreshold: props.unhealthyThreshold,
            healthCheckMethod: props.healthCheckMethod,
            healthCheckPath: props.healthCheckPath,
            healthCheckTemplateName: props.healthCheckTemplateName,
            healthCheckHost: props.healthCheckHost,
            healthyThreshold: props.healthyThreshold,
            healthCheckProtocol: props.healthCheckProtocol,
            healthCheckTimeout: props.healthCheckTimeout,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosHealthCheckTemplate;
        this.attrHealthCheckTemplateId = rosHealthCheckTemplate.attrHealthCheckTemplateId;
    }
}
exports.HealthCheckTemplate = HealthCheckTemplate;
//# sourceMappingURL=data:application/json;base64,