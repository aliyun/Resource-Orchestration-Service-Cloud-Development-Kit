"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SpecialRefKind = exports.isPrimitiveMapAttribute = exports.isComplexListAttribute = exports.isPrimitiveListAttribute = exports.isMapAttribute = exports.isListAttribute = exports.isPrimitiveAttribute = exports.isTaggableResource = void 0;
const property_1 = require("./property");
/**
 * Determine if the resource supports tags
 *
 * This function combined with isTagProperty determines if the `cdk.TagManager`
 * and `cdk.TaggableResource` can process these tags. If not, standard code
 * generation of properties will be used.
 */
function isTaggableResource(spec) {
    if (spec.Properties === undefined) {
        return false;
    }
    for (const key of Object.keys(spec.Properties)) {
        if (property_1.isTagPropertyName(key) && property_1.isTagProperty(spec.Properties[key])) {
            return true;
        }
    }
    return false;
}
exports.isTaggableResource = isTaggableResource;
function isPrimitiveAttribute(spec) {
    return !!spec.PrimitiveType;
}
exports.isPrimitiveAttribute = isPrimitiveAttribute;
function isListAttribute(spec) {
    return spec.Type === 'List';
}
exports.isListAttribute = isListAttribute;
function isMapAttribute(spec) {
    return spec.Type === 'Map';
}
exports.isMapAttribute = isMapAttribute;
function isPrimitiveListAttribute(spec) {
    return isListAttribute(spec) && !!spec.PrimitiveItemType;
}
exports.isPrimitiveListAttribute = isPrimitiveListAttribute;
function isComplexListAttribute(spec) {
    return isListAttribute(spec) && !!spec.ItemType;
}
exports.isComplexListAttribute = isComplexListAttribute;
function isPrimitiveMapAttribute(spec) {
    return isMapAttribute(spec) && !!spec.PrimitiveItemType;
}
exports.isPrimitiveMapAttribute = isPrimitiveMapAttribute;
/**
 * Type declaration for special values of the "Ref" attribute represents.
 *
 * The attribute can take on more values than these, but these are treated specially.
 */
var SpecialRefKind;
(function (SpecialRefKind) {
    /**
     * No '.ref' member is generated for this type, because it doesn't have a meaningful value.
     */
    SpecialRefKind["None"] = "None";
    /**
     * The generated class will inherit from the built-in 'Arn' type.
     */
    SpecialRefKind["Arn"] = "Arn";
})(SpecialRefKind = exports.SpecialRefKind || (exports.SpecialRefKind = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzb3VyY2UtdHlwZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInJlc291cmNlLXR5cGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0EseUNBQXFGO0FBNkRyRjs7Ozs7O0dBTUc7QUFDSCxTQUFnQixrQkFBa0IsQ0FBQyxJQUFrQjtJQUNuRCxJQUFJLElBQUksQ0FBQyxVQUFVLEtBQUssU0FBUyxFQUFFO1FBQ2pDLE9BQU8sS0FBSyxDQUFDO0tBQ2Q7SUFDRCxLQUFLLE1BQU0sR0FBRyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFO1FBQzlDLElBQUksNEJBQWlCLENBQUMsR0FBRyxDQUFDLElBQUksd0JBQWEsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUU7WUFDakUsT0FBTyxJQUFJLENBQUM7U0FDYjtLQUNGO0lBQ0QsT0FBTyxLQUFLLENBQUM7QUFDZixDQUFDO0FBVkQsZ0RBVUM7QUFFRCxTQUFnQixvQkFBb0IsQ0FBQyxJQUFlO0lBQ2xELE9BQU8sQ0FBQyxDQUFFLElBQTJCLENBQUMsYUFBYSxDQUFDO0FBQ3RELENBQUM7QUFGRCxvREFFQztBQUVELFNBQWdCLGVBQWUsQ0FBQyxJQUFlO0lBQzdDLE9BQVEsSUFBc0IsQ0FBQyxJQUFJLEtBQUssTUFBTSxDQUFDO0FBQ2pELENBQUM7QUFGRCwwQ0FFQztBQUVELFNBQWdCLGNBQWMsQ0FBQyxJQUFlO0lBQzVDLE9BQVEsSUFBcUIsQ0FBQyxJQUFJLEtBQUssS0FBSyxDQUFDO0FBQy9DLENBQUM7QUFGRCx3Q0FFQztBQUVELFNBQWdCLHdCQUF3QixDQUFDLElBQWU7SUFDdEQsT0FBTyxlQUFlLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFFLElBQStCLENBQUMsaUJBQWlCLENBQUM7QUFDdkYsQ0FBQztBQUZELDREQUVDO0FBRUQsU0FBZ0Isc0JBQXNCLENBQUMsSUFBZTtJQUNwRCxPQUFPLGVBQWUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUUsSUFBNkIsQ0FBQyxRQUFRLENBQUM7QUFDNUUsQ0FBQztBQUZELHdEQUVDO0FBRUQsU0FBZ0IsdUJBQXVCLENBQUMsSUFBZTtJQUNyRCxPQUFPLGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUUsSUFBOEIsQ0FBQyxpQkFBaUIsQ0FBQztBQUNyRixDQUFDO0FBRkQsMERBRUM7QUFFRDs7OztHQUlHO0FBQ0gsSUFBWSxjQVVYO0FBVkQsV0FBWSxjQUFjO0lBQ3hCOztPQUVHO0lBQ0gsK0JBQWEsQ0FBQTtJQUViOztPQUVHO0lBQ0gsNkJBQVcsQ0FBQTtBQUNiLENBQUMsRUFWVyxjQUFjLEdBQWQsc0JBQWMsS0FBZCxzQkFBYyxRQVV6QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERvY3VtZW50ZWQsIFByaW1pdGl2ZVR5cGUgfSBmcm9tICcuL2Jhc2UtdHlwZXMnO1xuaW1wb3J0IHsgaXNUYWdQcm9wZXJ0eSwgaXNUYWdQcm9wZXJ0eU5hbWUsIFByb3BlcnR5LCBUYWdQcm9wZXJ0eSB9IGZyb20gJy4vcHJvcGVydHknO1xuXG5leHBvcnQgaW50ZXJmYWNlIFJlc291cmNlVHlwZSBleHRlbmRzIERvY3VtZW50ZWQge1xuICAvKipcbiAgICogVGhlIGF0dHJpYnV0ZXMgZXhwb3NlZCBieSB0aGUgcmVzb3VyY2UgdHlwZSwgaWYgYW55LlxuICAgKi9cbiAgQXR0cmlidXRlcz86IHsgW25hbWU6IHN0cmluZ106IEF0dHJpYnV0ZSB9O1xuICAvKipcbiAgICogVGhlIHByb3BlcnRpZXMgYWNjZXB0ZWQgYnkgdGhlIHJlc291cmNlIHR5cGUsIGlmIGFueS5cbiAgICovXG4gIFByb3BlcnRpZXM/OiB7IFtuYW1lOiBzdHJpbmddOiBQcm9wZXJ0eSB9O1xuICAvKipcbiAgICogVGhlIGBgVHJhbnNmb3JtYGAgcmVxdWlyZWQgYnkgdGhlIHJlc291cmNlIHR5cGUsIGlmIGFueS5cbiAgICovXG4gIFJlcXVpcmVkVHJhbnNmb3JtPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBXaGF0IGtpbmQgb2YgdmFsdWUgdGhlICdSZWYnIG9wZXJhdG9yIHJlZmVycyB0bywgaWYgYW55LlxuICAgKi9cbiAgUmVmS2luZD86IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBUYWdnYWJsZVJlc291cmNlIGV4dGVuZHMgUmVzb3VyY2VUeXBlIHtcbiAgUHJvcGVydGllczoge1xuICAgIEZpbGVTeXN0ZW1UYWdzOiBUYWdQcm9wZXJ0eTtcbiAgICBIb3N0ZWRab25lVGFnczogVGFnUHJvcGVydHk7XG4gICAgVGFnczogVGFnUHJvcGVydHk7XG4gICAgVXNlclBvb2xUYWdzOiBUYWdQcm9wZXJ0eTtcbiAgICBbbmFtZTogc3RyaW5nXTogUHJvcGVydHk7XG4gIH07XG59XG5cbmV4cG9ydCB0eXBlIEF0dHJpYnV0ZSA9IERlc2NyaXB0aW9uIHwgUHJpbWl0aXZlQXR0cmlidXRlIHwgTGlzdEF0dHJpYnV0ZSB8IE1hcEF0dHJpYnV0ZTtcblxuZXhwb3J0IGludGVyZmFjZSBEZXNjcmlwdGlvbiB7XG4gIERlc2NyaXB0aW9uOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUHJpbWl0aXZlQXR0cmlidXRlIHtcbiAgUHJpbWl0aXZlVHlwZTogUHJpbWl0aXZlVHlwZTtcbn1cblxuZXhwb3J0IHR5cGUgTGlzdEF0dHJpYnV0ZSA9IFByaW1pdGl2ZUxpc3RBdHRyaWJ1dGUgfCBDb21wbGV4TGlzdEF0dHJpYnV0ZTtcblxuZXhwb3J0IGludGVyZmFjZSBQcmltaXRpdmVMaXN0QXR0cmlidXRlIHtcbiAgVHlwZTogJ0xpc3QnO1xuICBQcmltaXRpdmVJdGVtVHlwZTogUHJpbWl0aXZlVHlwZTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDb21wbGV4TGlzdEF0dHJpYnV0ZSB7XG4gIFR5cGU6ICdMaXN0JztcbiAgSXRlbVR5cGU6IHN0cmluZztcbn1cblxuZXhwb3J0IHR5cGUgTWFwQXR0cmlidXRlID0gUHJpbWl0aXZlTWFwQXR0cmlidXRlO1xuXG5leHBvcnQgaW50ZXJmYWNlIFByaW1pdGl2ZU1hcEF0dHJpYnV0ZSB7XG4gIFR5cGU6ICdNYXAnO1xuICBQcmltaXRpdmVJdGVtVHlwZTogUHJpbWl0aXZlVHlwZTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgdGhlIHJlc291cmNlIHN1cHBvcnRzIHRhZ3NcbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIGNvbWJpbmVkIHdpdGggaXNUYWdQcm9wZXJ0eSBkZXRlcm1pbmVzIGlmIHRoZSBgY2RrLlRhZ01hbmFnZXJgXG4gKiBhbmQgYGNkay5UYWdnYWJsZVJlc291cmNlYCBjYW4gcHJvY2VzcyB0aGVzZSB0YWdzLiBJZiBub3QsIHN0YW5kYXJkIGNvZGVcbiAqIGdlbmVyYXRpb24gb2YgcHJvcGVydGllcyB3aWxsIGJlIHVzZWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1RhZ2dhYmxlUmVzb3VyY2Uoc3BlYzogUmVzb3VyY2VUeXBlKTogc3BlYyBpcyBUYWdnYWJsZVJlc291cmNlIHtcbiAgaWYgKHNwZWMuUHJvcGVydGllcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHNwZWMuUHJvcGVydGllcykpIHtcbiAgICBpZiAoaXNUYWdQcm9wZXJ0eU5hbWUoa2V5KSAmJiBpc1RhZ1Byb3BlcnR5KHNwZWMuUHJvcGVydGllc1trZXldKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzUHJpbWl0aXZlQXR0cmlidXRlKHNwZWM6IEF0dHJpYnV0ZSk6IHNwZWMgaXMgUHJpbWl0aXZlQXR0cmlidXRlIHtcbiAgcmV0dXJuICEhKHNwZWMgYXMgUHJpbWl0aXZlQXR0cmlidXRlKS5QcmltaXRpdmVUeXBlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNMaXN0QXR0cmlidXRlKHNwZWM6IEF0dHJpYnV0ZSk6IHNwZWMgaXMgTGlzdEF0dHJpYnV0ZSB7XG4gIHJldHVybiAoc3BlYyBhcyBMaXN0QXR0cmlidXRlKS5UeXBlID09PSAnTGlzdCc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc01hcEF0dHJpYnV0ZShzcGVjOiBBdHRyaWJ1dGUpOiBzcGVjIGlzIE1hcEF0dHJpYnV0ZSB7XG4gIHJldHVybiAoc3BlYyBhcyBNYXBBdHRyaWJ1dGUpLlR5cGUgPT09ICdNYXAnO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNQcmltaXRpdmVMaXN0QXR0cmlidXRlKHNwZWM6IEF0dHJpYnV0ZSk6IHNwZWMgaXMgUHJpbWl0aXZlTGlzdEF0dHJpYnV0ZSB7XG4gIHJldHVybiBpc0xpc3RBdHRyaWJ1dGUoc3BlYykgJiYgISEoc3BlYyBhcyBQcmltaXRpdmVMaXN0QXR0cmlidXRlKS5QcmltaXRpdmVJdGVtVHlwZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzQ29tcGxleExpc3RBdHRyaWJ1dGUoc3BlYzogQXR0cmlidXRlKTogc3BlYyBpcyBDb21wbGV4TGlzdEF0dHJpYnV0ZSB7XG4gIHJldHVybiBpc0xpc3RBdHRyaWJ1dGUoc3BlYykgJiYgISEoc3BlYyBhcyBDb21wbGV4TGlzdEF0dHJpYnV0ZSkuSXRlbVR5cGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1ByaW1pdGl2ZU1hcEF0dHJpYnV0ZShzcGVjOiBBdHRyaWJ1dGUpOiBzcGVjIGlzIFByaW1pdGl2ZU1hcEF0dHJpYnV0ZSB7XG4gIHJldHVybiBpc01hcEF0dHJpYnV0ZShzcGVjKSAmJiAhIShzcGVjIGFzIFByaW1pdGl2ZU1hcEF0dHJpYnV0ZSkuUHJpbWl0aXZlSXRlbVR5cGU7XG59XG5cbi8qKlxuICogVHlwZSBkZWNsYXJhdGlvbiBmb3Igc3BlY2lhbCB2YWx1ZXMgb2YgdGhlIFwiUmVmXCIgYXR0cmlidXRlIHJlcHJlc2VudHMuXG4gKlxuICogVGhlIGF0dHJpYnV0ZSBjYW4gdGFrZSBvbiBtb3JlIHZhbHVlcyB0aGFuIHRoZXNlLCBidXQgdGhlc2UgYXJlIHRyZWF0ZWQgc3BlY2lhbGx5LlxuICovXG5leHBvcnQgZW51bSBTcGVjaWFsUmVmS2luZCB7XG4gIC8qKlxuICAgKiBObyAnLnJlZicgbWVtYmVyIGlzIGdlbmVyYXRlZCBmb3IgdGhpcyB0eXBlLCBiZWNhdXNlIGl0IGRvZXNuJ3QgaGF2ZSBhIG1lYW5pbmdmdWwgdmFsdWUuXG4gICAqL1xuICBOb25lID0gJ05vbmUnLFxuXG4gIC8qKlxuICAgKiBUaGUgZ2VuZXJhdGVkIGNsYXNzIHdpbGwgaW5oZXJpdCBmcm9tIHRoZSBidWlsdC1pbiAnQXJuJyB0eXBlLlxuICAgKi9cbiAgQXJuID0gJ0FybicsXG59XG4iXX0=