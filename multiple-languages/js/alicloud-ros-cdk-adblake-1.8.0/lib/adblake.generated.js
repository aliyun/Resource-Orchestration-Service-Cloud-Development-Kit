"use strict";
// Generated from the AliCloud ROS Resource Specification
Object.defineProperty(exports, "__esModule", { value: true });
exports.RosResourceGroupAccountBinding = exports.RosResourceGroup = exports.RosDBCluster = exports.RosAccount = void 0;
const ros = require("@alicloud/ros-cdk-core");
/**
 * Determine whether the given properties match those of a `RosAccountProps`
 *
 * @param properties - the TypeScript properties of a `RosAccountProps`
 *
 * @returns the result of the validation.
 */
function RosAccountPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('accountDescription', ros.validateString)(properties.accountDescription));
    errors.collect(ros.propertyValidator('ramUser', ros.validateString)(properties.ramUser));
    errors.collect(ros.propertyValidator('dbClusterId', ros.requiredValidator)(properties.dbClusterId));
    errors.collect(ros.propertyValidator('dbClusterId', ros.validateString)(properties.dbClusterId));
    errors.collect(ros.propertyValidator('accountType', ros.requiredValidator)(properties.accountType));
    if (properties.accountType && (typeof properties.accountType) !== 'object') {
        errors.collect(ros.propertyValidator('accountType', ros.validateAllowedValues)({
            data: properties.accountType,
            allowedValues: ["Normal", "Super"],
        }));
    }
    errors.collect(ros.propertyValidator('accountType', ros.validateString)(properties.accountType));
    errors.collect(ros.propertyValidator('engine', ros.requiredValidator)(properties.engine));
    if (properties.engine && (typeof properties.engine) !== 'object') {
        errors.collect(ros.propertyValidator('engine', ros.validateAllowedValues)({
            data: properties.engine,
            allowedValues: ["Clickhouse", "AnalyticDB"],
        }));
    }
    errors.collect(ros.propertyValidator('engine', ros.validateString)(properties.engine));
    errors.collect(ros.propertyValidator('accountName', ros.requiredValidator)(properties.accountName));
    if (properties.accountName && (Array.isArray(properties.accountName) || (typeof properties.accountName) === 'string')) {
        errors.collect(ros.propertyValidator('accountName', ros.validateLength)({
            data: properties.accountName.length,
            min: 2,
            max: 16,
        }));
    }
    if (properties.accountName && (typeof properties.accountName) !== 'object') {
        errors.collect(ros.propertyValidator('accountName', ros.validateAllowedPattern)({
            data: properties.accountName,
            reg: /^[a-z][a-z0-9_]{0,14}[a-z0-9]$/
        }));
    }
    errors.collect(ros.propertyValidator('accountName', ros.validateString)(properties.accountName));
    errors.collect(ros.propertyValidator('accountPassword', ros.requiredValidator)(properties.accountPassword));
    if (properties.accountPassword && (Array.isArray(properties.accountPassword) || (typeof properties.accountPassword) === 'string')) {
        errors.collect(ros.propertyValidator('accountPassword', ros.validateLength)({
            data: properties.accountPassword.length,
            min: 8,
            max: 32,
        }));
    }
    errors.collect(ros.propertyValidator('accountPassword', ros.validateString)(properties.accountPassword));
    return errors.wrap('supplied properties not correct for "RosAccountProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ADBLake::Account` resource
 *
 * @param properties - the TypeScript properties of a `RosAccountProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ADBLake::Account` resource.
 */
// @ts-ignore TS6133
function rosAccountPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosAccountPropsValidator(properties).assertSuccess();
    }
    return {
        'AccountName': ros.stringToRosTemplate(properties.accountName),
        'AccountPassword': ros.stringToRosTemplate(properties.accountPassword),
        'AccountType': ros.stringToRosTemplate(properties.accountType),
        'DBClusterId': ros.stringToRosTemplate(properties.dbClusterId),
        'Engine': ros.stringToRosTemplate(properties.engine),
        'AccountDescription': ros.stringToRosTemplate(properties.accountDescription),
        'RamUser': ros.stringToRosTemplate(properties.ramUser),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::ADBLake::Account`.
 * @Note This class does not contain additional functions, so it is recommended to use the `Account` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-adblake-account
 */
class RosAccount extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosAccount.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrAccountName = this.getAtt('AccountName');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.accountName = props.accountName;
        this.accountPassword = props.accountPassword;
        this.accountType = props.accountType;
        this.dbClusterId = props.dbClusterId;
        this.engine = props.engine;
        this.accountDescription = props.accountDescription;
        this.ramUser = props.ramUser;
    }
    get rosProperties() {
        return {
            accountName: this.accountName,
            accountPassword: this.accountPassword,
            accountType: this.accountType,
            dbClusterId: this.dbClusterId,
            engine: this.engine,
            accountDescription: this.accountDescription,
            ramUser: this.ramUser,
        };
    }
    renderProperties(props) {
        return rosAccountPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosAccount = RosAccount;
/**
 * The resource type name for this resource class.
 */
RosAccount.ROS_RESOURCE_TYPE_NAME = "ALIYUN::ADBLake::Account";
/**
 * Determine whether the given properties match those of a `RosDBClusterProps`
 *
 * @param properties - the TypeScript properties of a `RosDBClusterProps`
 *
 * @returns the result of the validation.
 */
function RosDBClusterPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    if (properties.periodType && (typeof properties.periodType) !== 'object') {
        errors.collect(ros.propertyValidator('periodType', ros.validateAllowedValues)({
            data: properties.periodType,
            allowedValues: ["Month", "Year"],
        }));
    }
    errors.collect(ros.propertyValidator('periodType', ros.validateString)(properties.periodType));
    errors.collect(ros.propertyValidator('enableDefaultResourcePool', ros.validateBoolean)(properties.enableDefaultResourcePool));
    errors.collect(ros.propertyValidator('storageResource', ros.requiredValidator)(properties.storageResource));
    errors.collect(ros.propertyValidator('storageResource', ros.validateString)(properties.storageResource));
    errors.collect(ros.propertyValidator('restoreToTime', ros.validateString)(properties.restoreToTime));
    errors.collect(ros.propertyValidator('cloneSourceRegionId', ros.validateString)(properties.cloneSourceRegionId));
    errors.collect(ros.propertyValidator('resourceGroupId', ros.validateString)(properties.resourceGroupId));
    errors.collect(ros.propertyValidator('zoneId', ros.requiredValidator)(properties.zoneId));
    errors.collect(ros.propertyValidator('zoneId', ros.validateString)(properties.zoneId));
    errors.collect(ros.propertyValidator('vpcId', ros.requiredValidator)(properties.vpcId));
    errors.collect(ros.propertyValidator('vpcId', ros.validateString)(properties.vpcId));
    errors.collect(ros.propertyValidator('vSwitchId', ros.requiredValidator)(properties.vSwitchId));
    errors.collect(ros.propertyValidator('vSwitchId', ros.validateString)(properties.vSwitchId));
    errors.collect(ros.propertyValidator('dbClusterDescription', ros.validateString)(properties.dbClusterDescription));
    if (properties.productForm && (typeof properties.productForm) !== 'object') {
        errors.collect(ros.propertyValidator('productForm', ros.validateAllowedValues)({
            data: properties.productForm,
            allowedValues: ["IntegrationForm", "LegacyForm"],
        }));
    }
    errors.collect(ros.propertyValidator('productForm', ros.validateString)(properties.productForm));
    if (properties.reservedNodeSize && (typeof properties.reservedNodeSize) !== 'object') {
        errors.collect(ros.propertyValidator('reservedNodeSize', ros.validateAllowedValues)({
            data: properties.reservedNodeSize,
            allowedValues: [8, 12, 16, 24, 32],
        }));
    }
    errors.collect(ros.propertyValidator('reservedNodeSize', ros.validateNumber)(properties.reservedNodeSize));
    errors.collect(ros.propertyValidator('computeResource', ros.requiredValidator)(properties.computeResource));
    errors.collect(ros.propertyValidator('computeResource', ros.validateString)(properties.computeResource));
    errors.collect(ros.propertyValidator('period', ros.validateString)(properties.period));
    if (properties.dbClusterNetworkType && (typeof properties.dbClusterNetworkType) !== 'object') {
        errors.collect(ros.propertyValidator('dbClusterNetworkType', ros.validateAllowedValues)({
            data: properties.dbClusterNetworkType,
            allowedValues: ["VPC"],
        }));
    }
    errors.collect(ros.propertyValidator('dbClusterNetworkType', ros.validateString)(properties.dbClusterNetworkType));
    errors.collect(ros.propertyValidator('payType', ros.requiredValidator)(properties.payType));
    if (properties.payType && (typeof properties.payType) !== 'object') {
        errors.collect(ros.propertyValidator('payType', ros.validateAllowedValues)({
            data: properties.payType,
            allowedValues: ["PayAsYouGo", "PostPaid", "PayOnDemand", "Postpaid", "PostPay", "Postpay", "POSTPAY", "POST", "Subscription", "PrePaid", "Prepaid", "PrePay", "Prepay", "PREPAY", "PRE"],
        }));
    }
    errors.collect(ros.propertyValidator('payType', ros.validateString)(properties.payType));
    errors.collect(ros.propertyValidator('backupSetId', ros.validateString)(properties.backupSetId));
    errors.collect(ros.propertyValidator('sourceDbClusterId', ros.validateString)(properties.sourceDbClusterId));
    if (properties.reservedNodeCount && (typeof properties.reservedNodeCount) !== 'object') {
        errors.collect(ros.propertyValidator('reservedNodeCount', ros.validateRange)({
            data: properties.reservedNodeCount,
            min: 1,
            max: 2147483646,
        }));
    }
    errors.collect(ros.propertyValidator('reservedNodeCount', ros.validateNumber)(properties.reservedNodeCount));
    errors.collect(ros.propertyValidator('diskEncryption', ros.validateBoolean)(properties.diskEncryption));
    errors.collect(ros.propertyValidator('dbClusterVersion', ros.requiredValidator)(properties.dbClusterVersion));
    errors.collect(ros.propertyValidator('dbClusterVersion', ros.validateString)(properties.dbClusterVersion));
    errors.collect(ros.propertyValidator('kmsId', ros.validateString)(properties.kmsId));
    if (properties.restoreType && (typeof properties.restoreType) !== 'object') {
        errors.collect(ros.propertyValidator('restoreType', ros.validateAllowedValues)({
            data: properties.restoreType,
            allowedValues: ["backup", "timepoint"],
        }));
    }
    errors.collect(ros.propertyValidator('restoreType', ros.validateString)(properties.restoreType));
    if (properties.tags && (Array.isArray(properties.tags) || (typeof properties.tags) === 'string')) {
        errors.collect(ros.propertyValidator('tags', ros.validateLength)({
            data: properties.tags.length,
            min: undefined,
            max: 20,
        }));
    }
    errors.collect(ros.propertyValidator('tags', ros.listValidator(RosDBCluster_TagsPropertyValidator))(properties.tags));
    return errors.wrap('supplied properties not correct for "RosDBClusterProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ADBLake::DBCluster` resource
 *
 * @param properties - the TypeScript properties of a `RosDBClusterProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ADBLake::DBCluster` resource.
 */
// @ts-ignore TS6133
function rosDBClusterPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosDBClusterPropsValidator(properties).assertSuccess();
    }
    return {
        'ComputeResource': ros.stringToRosTemplate(properties.computeResource),
        'DBClusterVersion': ros.stringToRosTemplate(properties.dbClusterVersion),
        'PayType': ros.stringToRosTemplate(properties.payType),
        'StorageResource': ros.stringToRosTemplate(properties.storageResource),
        'VPCId': ros.stringToRosTemplate(properties.vpcId),
        'VSwitchId': ros.stringToRosTemplate(properties.vSwitchId),
        'ZoneId': ros.stringToRosTemplate(properties.zoneId),
        'BackupSetId': ros.stringToRosTemplate(properties.backupSetId),
        'CloneSourceRegionId': ros.stringToRosTemplate(properties.cloneSourceRegionId),
        'DBClusterDescription': ros.stringToRosTemplate(properties.dbClusterDescription),
        'DBClusterNetworkType': ros.stringToRosTemplate(properties.dbClusterNetworkType),
        'DiskEncryption': ros.booleanToRosTemplate(properties.diskEncryption),
        'EnableDefaultResourcePool': ros.booleanToRosTemplate(properties.enableDefaultResourcePool),
        'KmsId': ros.stringToRosTemplate(properties.kmsId),
        'Period': ros.stringToRosTemplate(properties.period),
        'PeriodType': ros.stringToRosTemplate(properties.periodType),
        'ProductForm': ros.stringToRosTemplate(properties.productForm),
        'ReservedNodeCount': ros.numberToRosTemplate(properties.reservedNodeCount),
        'ReservedNodeSize': ros.numberToRosTemplate(properties.reservedNodeSize),
        'ResourceGroupId': ros.stringToRosTemplate(properties.resourceGroupId),
        'RestoreToTime': ros.stringToRosTemplate(properties.restoreToTime),
        'RestoreType': ros.stringToRosTemplate(properties.restoreType),
        'SourceDbClusterId': ros.stringToRosTemplate(properties.sourceDbClusterId),
        'Tags': ros.listMapper(rosDBClusterTagsPropertyToRosTemplate)(properties.tags),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::ADBLake::DBCluster`, which is used to create an AnalyticDB for MySQL Data Lakehouse Edition (V3.0) cluster.
 * @Note This class does not contain additional functions, so it is recommended to use the `DBCluster` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-adblake-dbcluster
 */
class RosDBCluster extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosDBCluster.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrConnectionString = this.getAtt('ConnectionString');
        this.attrDbClusterId = this.getAtt('DBClusterId');
        this.attrOrderId = this.getAtt('OrderId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.computeResource = props.computeResource;
        this.dbClusterVersion = props.dbClusterVersion;
        this.payType = props.payType;
        this.storageResource = props.storageResource;
        this.vpcId = props.vpcId;
        this.vSwitchId = props.vSwitchId;
        this.zoneId = props.zoneId;
        this.backupSetId = props.backupSetId;
        this.cloneSourceRegionId = props.cloneSourceRegionId;
        this.dbClusterDescription = props.dbClusterDescription;
        this.dbClusterNetworkType = props.dbClusterNetworkType;
        this.diskEncryption = props.diskEncryption;
        this.enableDefaultResourcePool = props.enableDefaultResourcePool;
        this.kmsId = props.kmsId;
        this.period = props.period;
        this.periodType = props.periodType;
        this.productForm = props.productForm;
        this.reservedNodeCount = props.reservedNodeCount;
        this.reservedNodeSize = props.reservedNodeSize;
        this.resourceGroupId = props.resourceGroupId;
        this.restoreToTime = props.restoreToTime;
        this.restoreType = props.restoreType;
        this.sourceDbClusterId = props.sourceDbClusterId;
        this.tags = props.tags;
    }
    get rosProperties() {
        return {
            computeResource: this.computeResource,
            dbClusterVersion: this.dbClusterVersion,
            payType: this.payType,
            storageResource: this.storageResource,
            vpcId: this.vpcId,
            vSwitchId: this.vSwitchId,
            zoneId: this.zoneId,
            backupSetId: this.backupSetId,
            cloneSourceRegionId: this.cloneSourceRegionId,
            dbClusterDescription: this.dbClusterDescription,
            dbClusterNetworkType: this.dbClusterNetworkType,
            diskEncryption: this.diskEncryption,
            enableDefaultResourcePool: this.enableDefaultResourcePool,
            kmsId: this.kmsId,
            period: this.period,
            periodType: this.periodType,
            productForm: this.productForm,
            reservedNodeCount: this.reservedNodeCount,
            reservedNodeSize: this.reservedNodeSize,
            resourceGroupId: this.resourceGroupId,
            restoreToTime: this.restoreToTime,
            restoreType: this.restoreType,
            sourceDbClusterId: this.sourceDbClusterId,
            tags: this.tags,
        };
    }
    renderProperties(props) {
        return rosDBClusterPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosDBCluster = RosDBCluster;
/**
 * The resource type name for this resource class.
 */
RosDBCluster.ROS_RESOURCE_TYPE_NAME = "ALIYUN::ADBLake::DBCluster";
/**
 * Determine whether the given properties match those of a `TagsProperty`
 *
 * @param properties - the TypeScript properties of a `TagsProperty`
 *
 * @returns the result of the validation.
 */
function RosDBCluster_TagsPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('value', ros.validateString)(properties.value));
    errors.collect(ros.propertyValidator('key', ros.requiredValidator)(properties.key));
    errors.collect(ros.propertyValidator('key', ros.validateString)(properties.key));
    return errors.wrap('supplied properties not correct for "TagsProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ADBLake::DBCluster.Tags` resource
 *
 * @param properties - the TypeScript properties of a `TagsProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ADBLake::DBCluster.Tags` resource.
 */
// @ts-ignore TS6133
function rosDBClusterTagsPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosDBCluster_TagsPropertyValidator(properties).assertSuccess();
    return {
        'Value': ros.stringToRosTemplate(properties.value),
        'Key': ros.stringToRosTemplate(properties.key),
    };
}
/**
 * Determine whether the given properties match those of a `RosResourceGroupProps`
 *
 * @param properties - the TypeScript properties of a `RosResourceGroupProps`
 *
 * @returns the result of the validation.
 */
function RosResourceGroupPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('groupName', ros.requiredValidator)(properties.groupName));
    if (properties.groupName && (Array.isArray(properties.groupName) || (typeof properties.groupName) === 'string')) {
        errors.collect(ros.propertyValidator('groupName', ros.validateLength)({
            data: properties.groupName.length,
            min: 1,
            max: 255,
        }));
    }
    if (properties.groupName && (typeof properties.groupName) !== 'object') {
        errors.collect(ros.propertyValidator('groupName', ros.validateAllowedPattern)({
            data: properties.groupName,
            reg: /^[a-zA-Z0-9][a-zA-Z0-9_-]{0,254}$/
        }));
    }
    errors.collect(ros.propertyValidator('groupName', ros.validateString)(properties.groupName));
    errors.collect(ros.propertyValidator('engineParams', ros.hashValidator(ros.validateAny))(properties.engineParams));
    errors.collect(ros.propertyValidator('clusterMode', ros.validateString)(properties.clusterMode));
    errors.collect(ros.propertyValidator('dbClusterId', ros.requiredValidator)(properties.dbClusterId));
    errors.collect(ros.propertyValidator('dbClusterId', ros.validateString)(properties.dbClusterId));
    errors.collect(ros.propertyValidator('autoStopInterval', ros.validateString)(properties.autoStopInterval));
    errors.collect(ros.propertyValidator('maxComputeResource', ros.validateString)(properties.maxComputeResource));
    errors.collect(ros.propertyValidator('enableSpot', ros.validateBoolean)(properties.enableSpot));
    if (properties.rules && (Array.isArray(properties.rules) || (typeof properties.rules) === 'string')) {
        errors.collect(ros.propertyValidator('rules', ros.validateLength)({
            data: properties.rules.length,
            min: undefined,
            max: 20,
        }));
    }
    errors.collect(ros.propertyValidator('rules', ros.listValidator(RosResourceGroup_RulesPropertyValidator))(properties.rules));
    errors.collect(ros.propertyValidator('minClusterCount', ros.validateNumber)(properties.minClusterCount));
    errors.collect(ros.propertyValidator('groupType', ros.requiredValidator)(properties.groupType));
    if (properties.groupType && (typeof properties.groupType) !== 'object') {
        errors.collect(ros.propertyValidator('groupType', ros.validateAllowedValues)({
            data: properties.groupType,
            allowedValues: ["Interactive", "Job"],
        }));
    }
    errors.collect(ros.propertyValidator('groupType', ros.validateString)(properties.groupType));
    errors.collect(ros.propertyValidator('clusterSizeResource', ros.validateString)(properties.clusterSizeResource));
    errors.collect(ros.propertyValidator('minComputeResource', ros.validateString)(properties.minComputeResource));
    errors.collect(ros.propertyValidator('engine', ros.requiredValidator)(properties.engine));
    if (properties.engine && (typeof properties.engine) !== 'object') {
        errors.collect(ros.propertyValidator('engine', ros.validateAllowedValues)({
            data: properties.engine,
            allowedValues: ["SparkWarehouse", "AnalyticDB"],
        }));
    }
    errors.collect(ros.propertyValidator('engine', ros.validateString)(properties.engine));
    errors.collect(ros.propertyValidator('maxClusterCount', ros.validateNumber)(properties.maxClusterCount));
    return errors.wrap('supplied properties not correct for "RosResourceGroupProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ADBLake::ResourceGroup` resource
 *
 * @param properties - the TypeScript properties of a `RosResourceGroupProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ADBLake::ResourceGroup` resource.
 */
// @ts-ignore TS6133
function rosResourceGroupPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosResourceGroupPropsValidator(properties).assertSuccess();
    }
    return {
        'DBClusterId': ros.stringToRosTemplate(properties.dbClusterId),
        'Engine': ros.stringToRosTemplate(properties.engine),
        'GroupName': ros.stringToRosTemplate(properties.groupName),
        'GroupType': ros.stringToRosTemplate(properties.groupType),
        'AutoStopInterval': ros.stringToRosTemplate(properties.autoStopInterval),
        'ClusterMode': ros.stringToRosTemplate(properties.clusterMode),
        'ClusterSizeResource': ros.stringToRosTemplate(properties.clusterSizeResource),
        'EnableSpot': ros.booleanToRosTemplate(properties.enableSpot),
        'EngineParams': ros.hashMapper(ros.objectToRosTemplate)(properties.engineParams),
        'MaxClusterCount': ros.numberToRosTemplate(properties.maxClusterCount),
        'MaxComputeResource': ros.stringToRosTemplate(properties.maxComputeResource),
        'MinClusterCount': ros.numberToRosTemplate(properties.minClusterCount),
        'MinComputeResource': ros.stringToRosTemplate(properties.minComputeResource),
        'Rules': ros.listMapper(rosResourceGroupRulesPropertyToRosTemplate)(properties.rules),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::ADBLake::ResourceGroup`.
 * @Note This class does not contain additional functions, so it is recommended to use the `ResourceGroup` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-adblake-resourcegroup
 */
class RosResourceGroup extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosResourceGroup.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrGroupName = this.getAtt('GroupName');
        this.attrGroupType = this.getAtt('GroupType');
        this.attrGroupUsers = this.getAtt('GroupUsers');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.dbClusterId = props.dbClusterId;
        this.engine = props.engine;
        this.groupName = props.groupName;
        this.groupType = props.groupType;
        this.autoStopInterval = props.autoStopInterval;
        this.clusterMode = props.clusterMode;
        this.clusterSizeResource = props.clusterSizeResource;
        this.enableSpot = props.enableSpot;
        this.engineParams = props.engineParams;
        this.maxClusterCount = props.maxClusterCount;
        this.maxComputeResource = props.maxComputeResource;
        this.minClusterCount = props.minClusterCount;
        this.minComputeResource = props.minComputeResource;
        this.rules = props.rules;
    }
    get rosProperties() {
        return {
            dbClusterId: this.dbClusterId,
            engine: this.engine,
            groupName: this.groupName,
            groupType: this.groupType,
            autoStopInterval: this.autoStopInterval,
            clusterMode: this.clusterMode,
            clusterSizeResource: this.clusterSizeResource,
            enableSpot: this.enableSpot,
            engineParams: this.engineParams,
            maxClusterCount: this.maxClusterCount,
            maxComputeResource: this.maxComputeResource,
            minClusterCount: this.minClusterCount,
            minComputeResource: this.minComputeResource,
            rules: this.rules,
        };
    }
    renderProperties(props) {
        return rosResourceGroupPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosResourceGroup = RosResourceGroup;
/**
 * The resource type name for this resource class.
 */
RosResourceGroup.ROS_RESOURCE_TYPE_NAME = "ALIYUN::ADBLake::ResourceGroup";
/**
 * Determine whether the given properties match those of a `RulesProperty`
 *
 * @param properties - the TypeScript properties of a `RulesProperty`
 *
 * @returns the result of the validation.
 */
function RosResourceGroup_RulesPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('groupName', ros.requiredValidator)(properties.groupName));
    errors.collect(ros.propertyValidator('groupName', ros.validateString)(properties.groupName));
    errors.collect(ros.propertyValidator('queryTime', ros.requiredValidator)(properties.queryTime));
    errors.collect(ros.propertyValidator('queryTime', ros.validateString)(properties.queryTime));
    errors.collect(ros.propertyValidator('targetGroupName', ros.requiredValidator)(properties.targetGroupName));
    errors.collect(ros.propertyValidator('targetGroupName', ros.validateString)(properties.targetGroupName));
    return errors.wrap('supplied properties not correct for "RulesProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ADBLake::ResourceGroup.Rules` resource
 *
 * @param properties - the TypeScript properties of a `RulesProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ADBLake::ResourceGroup.Rules` resource.
 */
// @ts-ignore TS6133
function rosResourceGroupRulesPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosResourceGroup_RulesPropertyValidator(properties).assertSuccess();
    return {
        'GroupName': ros.stringToRosTemplate(properties.groupName),
        'QueryTime': ros.stringToRosTemplate(properties.queryTime),
        'TargetGroupName': ros.stringToRosTemplate(properties.targetGroupName),
    };
}
/**
 * Determine whether the given properties match those of a `RosResourceGroupAccountBindingProps`
 *
 * @param properties - the TypeScript properties of a `RosResourceGroupAccountBindingProps`
 *
 * @returns the result of the validation.
 */
function RosResourceGroupAccountBindingPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('groupName', ros.requiredValidator)(properties.groupName));
    if (properties.groupName && (Array.isArray(properties.groupName) || (typeof properties.groupName) === 'string')) {
        errors.collect(ros.propertyValidator('groupName', ros.validateLength)({
            data: properties.groupName.length,
            min: 1,
            max: 255,
        }));
    }
    if (properties.groupName && (typeof properties.groupName) !== 'object') {
        errors.collect(ros.propertyValidator('groupName', ros.validateAllowedPattern)({
            data: properties.groupName,
            reg: /^[a-zA-Z0-9][a-zA-Z0-9_-]{0,254}$/
        }));
    }
    errors.collect(ros.propertyValidator('groupName', ros.validateString)(properties.groupName));
    errors.collect(ros.propertyValidator('dbClusterId', ros.requiredValidator)(properties.dbClusterId));
    errors.collect(ros.propertyValidator('dbClusterId', ros.validateString)(properties.dbClusterId));
    errors.collect(ros.propertyValidator('accountName', ros.requiredValidator)(properties.accountName));
    if (properties.accountName && (Array.isArray(properties.accountName) || (typeof properties.accountName) === 'string')) {
        errors.collect(ros.propertyValidator('accountName', ros.validateLength)({
            data: properties.accountName.length,
            min: 2,
            max: 16,
        }));
    }
    if (properties.accountName && (typeof properties.accountName) !== 'object') {
        errors.collect(ros.propertyValidator('accountName', ros.validateAllowedPattern)({
            data: properties.accountName,
            reg: /^[a-z][a-z0-9_]{0,14}[a-z0-9]$/
        }));
    }
    errors.collect(ros.propertyValidator('accountName', ros.validateString)(properties.accountName));
    return errors.wrap('supplied properties not correct for "RosResourceGroupAccountBindingProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ADBLake::ResourceGroupAccountBinding` resource
 *
 * @param properties - the TypeScript properties of a `RosResourceGroupAccountBindingProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ADBLake::ResourceGroupAccountBinding` resource.
 */
// @ts-ignore TS6133
function rosResourceGroupAccountBindingPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosResourceGroupAccountBindingPropsValidator(properties).assertSuccess();
    }
    return {
        'AccountName': ros.stringToRosTemplate(properties.accountName),
        'DBClusterId': ros.stringToRosTemplate(properties.dbClusterId),
        'GroupName': ros.stringToRosTemplate(properties.groupName),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::ADBLake::ResourceGroupAccountBinding`.
 * @Note This class does not contain additional functions, so it is recommended to use the `ResourceGroupAccountBinding` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-adblake-resourcegroupaccountbinding
 */
class RosResourceGroupAccountBinding extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosResourceGroupAccountBinding.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrGroupName = this.getAtt('GroupName');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.accountName = props.accountName;
        this.dbClusterId = props.dbClusterId;
        this.groupName = props.groupName;
    }
    get rosProperties() {
        return {
            accountName: this.accountName,
            dbClusterId: this.dbClusterId,
            groupName: this.groupName,
        };
    }
    renderProperties(props) {
        return rosResourceGroupAccountBindingPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosResourceGroupAccountBinding = RosResourceGroupAccountBinding;
/**
 * The resource type name for this resource class.
 */
RosResourceGroupAccountBinding.ROS_RESOURCE_TYPE_NAME = "ALIYUN::ADBLake::ResourceGroupAccountBinding";
//# sourceMappingURL=data:application/json;base64,