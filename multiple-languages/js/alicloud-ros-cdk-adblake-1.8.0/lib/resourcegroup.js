"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResourceGroup = exports.ResourceGroupProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const adblake_generated_1 = require("./adblake.generated");
Object.defineProperty(exports, "ResourceGroupProperty", { enumerable: true, get: function () { return adblake_generated_1.RosResourceGroup; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::ADBLake::ResourceGroup`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosResourceGroup`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-adblake-resourcegroup
 */
class ResourceGroup extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosResourceGroup = new adblake_generated_1.RosResourceGroup(this, id, {
            groupName: props.groupName,
            engineParams: props.engineParams,
            clusterMode: props.clusterMode === undefined || props.clusterMode === null ? 'AutoScale' : props.clusterMode,
            dbClusterId: props.dbClusterId,
            autoStopInterval: props.autoStopInterval,
            maxComputeResource: props.maxComputeResource,
            enableSpot: props.enableSpot,
            rules: props.rules,
            minClusterCount: props.minClusterCount,
            groupType: props.groupType,
            clusterSizeResource: props.clusterSizeResource,
            minComputeResource: props.minComputeResource,
            engine: props.engine === undefined || props.engine === null ? 'AnalyticDB' : props.engine,
            maxClusterCount: props.maxClusterCount,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosResourceGroup;
        this.attrGroupName = rosResourceGroup.attrGroupName;
        this.attrGroupType = rosResourceGroup.attrGroupType;
        this.attrGroupUsers = rosResourceGroup.attrGroupUsers;
    }
}
exports.ResourceGroup = ResourceGroup;
//# sourceMappingURL=data:application/json;base64,