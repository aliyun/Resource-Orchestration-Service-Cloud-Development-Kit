"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContainerGroup = exports.ContainerGroupProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const eci_generated_1 = require("./eci.generated");
Object.defineProperty(exports, "ContainerGroupProperty", { enumerable: true, get: function () { return eci_generated_1.RosContainerGroup; } });
/**
 * A ROS resource type:  `ALIYUN::ECI::ContainerGroup`
 */
class ContainerGroup extends ros.Resource {
    /**
     * Create a new `ALIYUN::ECI::ContainerGroup`.
     *
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosContainerGroup = new eci_generated_1.RosContainerGroup(this, id, {
            resourceGroupId: props.resourceGroupId,
            securityContextSysctl: props.securityContextSysctl,
            memory: props.memory,
            initContainer: props.initContainer,
            cpu: props.cpu,
            eipInstanceId: props.eipInstanceId,
            containerGroupName: props.containerGroupName,
            container: props.container,
            imageSnapshotId: props.imageSnapshotId,
            ramRoleName: props.ramRoleName,
            dnsConfig: props.dnsConfig,
            autoMatchImageCache: props.autoMatchImageCache,
            ipv6AddressCount: props.ipv6AddressCount,
            imageRegistryCredential: props.imageRegistryCredential,
            spotPriceLimit: props.spotPriceLimit,
            instanceType: props.instanceType,
            spotStrategy: props.spotStrategy,
            activeDeadlineSeconds: props.activeDeadlineSeconds,
            hostAliase: props.hostAliase,
            zoneId: props.zoneId,
            terminationGracePeriodSeconds: props.terminationGracePeriodSeconds,
            vSwitchId: props.vSwitchId,
            securityGroupId: props.securityGroupId,
            slsEnable: props.slsEnable,
            restartPolicy: props.restartPolicy,
            volume: props.volume,
            acrRegistryInfo: props.acrRegistryInfo,
            tag: props.tag,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosContainerGroup;
        this.attrContainerGroupId = rosContainerGroup.attrContainerGroupId;
        this.attrContainerGroupName = rosContainerGroup.attrContainerGroupName;
        this.attrEniInstanceId = rosContainerGroup.attrEniInstanceId;
        this.attrInternetIp = rosContainerGroup.attrInternetIp;
        this.attrIntranetIp = rosContainerGroup.attrIntranetIp;
        this.attrIpv6Address = rosContainerGroup.attrIpv6Address;
        this.attrRegionId = rosContainerGroup.attrRegionId;
        this.attrSecurityGroupId = rosContainerGroup.attrSecurityGroupId;
        this.attrVSwitchId = rosContainerGroup.attrVSwitchId;
        this.attrZoneId = rosContainerGroup.attrZoneId;
    }
}
exports.ContainerGroup = ContainerGroup;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGFpbmVyZ3JvdXAuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjb250YWluZXJncm91cC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw4Q0FBOEM7QUFDOUMsbURBQW9EO0FBRXRCLHVHQUZyQixpQ0FBaUIsT0FFMEI7QUFnS3BEOztHQUVHO0FBQ0gsTUFBYSxjQUFlLFNBQVEsR0FBRyxDQUFDLFFBQVE7SUF5RDVDOzs7Ozs7T0FNRztJQUNILFlBQVksS0FBb0IsRUFBRSxFQUFVLEVBQUUsS0FBMEIsRUFBRSxtQ0FBMkMsSUFBSTtRQUNySCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRWpCLE1BQU0saUJBQWlCLEdBQUcsSUFBSSxpQ0FBaUIsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFHO1lBQ3ZELGVBQWUsRUFBRSxLQUFLLENBQUMsZUFBZTtZQUN0QyxxQkFBcUIsRUFBRSxLQUFLLENBQUMscUJBQXFCO1lBQ2xELE1BQU0sRUFBRSxLQUFLLENBQUMsTUFBTTtZQUNwQixhQUFhLEVBQUUsS0FBSyxDQUFDLGFBQWE7WUFDbEMsR0FBRyxFQUFFLEtBQUssQ0FBQyxHQUFHO1lBQ2QsYUFBYSxFQUFFLEtBQUssQ0FBQyxhQUFhO1lBQ2xDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxrQkFBa0I7WUFDNUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxTQUFTO1lBQzFCLGVBQWUsRUFBRSxLQUFLLENBQUMsZUFBZTtZQUN0QyxXQUFXLEVBQUUsS0FBSyxDQUFDLFdBQVc7WUFDOUIsU0FBUyxFQUFFLEtBQUssQ0FBQyxTQUFTO1lBQzFCLG1CQUFtQixFQUFFLEtBQUssQ0FBQyxtQkFBbUI7WUFDOUMsZ0JBQWdCLEVBQUUsS0FBSyxDQUFDLGdCQUFnQjtZQUN4Qyx1QkFBdUIsRUFBRSxLQUFLLENBQUMsdUJBQXVCO1lBQ3RELGNBQWMsRUFBRSxLQUFLLENBQUMsY0FBYztZQUNwQyxZQUFZLEVBQUUsS0FBSyxDQUFDLFlBQVk7WUFDaEMsWUFBWSxFQUFFLEtBQUssQ0FBQyxZQUFZO1lBQ2hDLHFCQUFxQixFQUFFLEtBQUssQ0FBQyxxQkFBcUI7WUFDbEQsVUFBVSxFQUFFLEtBQUssQ0FBQyxVQUFVO1lBQzVCLE1BQU0sRUFBRSxLQUFLLENBQUMsTUFBTTtZQUNwQiw2QkFBNkIsRUFBRSxLQUFLLENBQUMsNkJBQTZCO1lBQ2xFLFNBQVMsRUFBRSxLQUFLLENBQUMsU0FBUztZQUMxQixlQUFlLEVBQUUsS0FBSyxDQUFDLGVBQWU7WUFDdEMsU0FBUyxFQUFFLEtBQUssQ0FBQyxTQUFTO1lBQzFCLGFBQWEsRUFBRSxLQUFLLENBQUMsYUFBYTtZQUNsQyxNQUFNLEVBQUUsS0FBSyxDQUFDLE1BQU07WUFDcEIsZUFBZSxFQUFFLEtBQUssQ0FBQyxlQUFlO1lBQ3RDLEdBQUcsRUFBRSxLQUFLLENBQUMsR0FBRztTQUNqQixFQUFFLGdDQUFnQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztRQUNwRixJQUFJLENBQUMsUUFBUSxHQUFHLGlCQUFpQixDQUFDO1FBQ2xDLElBQUksQ0FBQyxvQkFBb0IsR0FBRyxpQkFBaUIsQ0FBQyxvQkFBb0IsQ0FBQztRQUNuRSxJQUFJLENBQUMsc0JBQXNCLEdBQUcsaUJBQWlCLENBQUMsc0JBQXNCLENBQUM7UUFDdkUsSUFBSSxDQUFDLGlCQUFpQixHQUFHLGlCQUFpQixDQUFDLGlCQUFpQixDQUFDO1FBQzdELElBQUksQ0FBQyxjQUFjLEdBQUcsaUJBQWlCLENBQUMsY0FBYyxDQUFDO1FBQ3ZELElBQUksQ0FBQyxjQUFjLEdBQUcsaUJBQWlCLENBQUMsY0FBYyxDQUFDO1FBQ3ZELElBQUksQ0FBQyxlQUFlLEdBQUcsaUJBQWlCLENBQUMsZUFBZSxDQUFDO1FBQ3pELElBQUksQ0FBQyxZQUFZLEdBQUcsaUJBQWlCLENBQUMsWUFBWSxDQUFDO1FBQ25ELElBQUksQ0FBQyxtQkFBbUIsR0FBRyxpQkFBaUIsQ0FBQyxtQkFBbUIsQ0FBQztRQUNqRSxJQUFJLENBQUMsYUFBYSxHQUFHLGlCQUFpQixDQUFDLGFBQWEsQ0FBQztRQUNyRCxJQUFJLENBQUMsVUFBVSxHQUFHLGlCQUFpQixDQUFDLFVBQVUsQ0FBQztJQUNuRCxDQUFDO0NBQ0o7QUE3R0Qsd0NBNkdDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcm9zIGZyb20gJ0BhbGljbG91ZC9yb3MtY2RrLWNvcmUnO1xuaW1wb3J0IHsgUm9zQ29udGFpbmVyR3JvdXAgfSBmcm9tICcuL2VjaS5nZW5lcmF0ZWQnO1xuLy8gR2VuZXJhdGVkIGZyb20gdGhlIEFsaUNsb3VkIFJPUyBSZXNvdXJjZSBTcGVjaWZpY2F0aW9uXG5leHBvcnQgeyBSb3NDb250YWluZXJHcm91cCBhcyBDb250YWluZXJHcm91cFByb3BlcnR5IH07XG5cbi8qKlxuICogUHJvcGVydGllcyBmb3IgZGVmaW5pbmcgYSBgQUxJWVVOOjpFQ0k6OkNvbnRhaW5lckdyb3VwYFxuICovXG5leHBvcnQgaW50ZXJmYWNlIENvbnRhaW5lckdyb3VwUHJvcHMge1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgY29udGFpbmVyOiBUaGUgY29udGFpbmVycyB0aGF0IGNvbnN0aXR1dGUgdGhlIGNvbnRhaW5lciBncm91cC5cbiAgICAgKi9cbiAgICByZWFkb25seSBjb250YWluZXI6IEFycmF5PFJvc0NvbnRhaW5lckdyb3VwLkNvbnRhaW5lclByb3BlcnR5IHwgcm9zLklSZXNvbHZhYmxlPiB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGNvbnRhaW5lckdyb3VwTmFtZTogVGhlIG5hbWUgb2YgdGhlIGNvbnRhaW5lciBncm91cC4gXG4gICAgICogVGhlIGxlbmd0aCBpcyBbMiwxMjhdIEVuZ2xpc2ggbG93ZXJjYXNlIGxldHRlcnMsIG51bWJlcnMgb3IgaHlwaGVucyAoLSksIGNhbm5vdCBiZWdpbiBvciBlbmQgd2l0aCBhIGh5cGhlbnMuXG4gICAgICovXG4gICAgcmVhZG9ubHkgY29udGFpbmVyR3JvdXBOYW1lOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBhY3JSZWdpc3RyeUluZm86IEVudGVycHJpc2UgRWRpdGlvbiBhY2Nlc3MgY3JlZGVudGlhbCBjb25maWd1cmF0aW9uIGluZm9ybWF0aW9uLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGFjclJlZ2lzdHJ5SW5mbz86IEFycmF5PFJvc0NvbnRhaW5lckdyb3VwLkFjclJlZ2lzdHJ5SW5mb1Byb3BlcnR5IHwgcm9zLklSZXNvbHZhYmxlPiB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGFjdGl2ZURlYWRsaW5lU2Vjb25kczogVGhlIHZhbGlkaXR5IHBlcmlvZCBpbiBzZWNvbmRzLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGFjdGl2ZURlYWRsaW5lU2Vjb25kcz86IG51bWJlciB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGF1dG9NYXRjaEltYWdlQ2FjaGU6IFNwZWNpZmllcyB3aGV0aGVyIHRvIGF1dG9tYXRpY2FsbHkgbWF0Y2ggdGhlIGltYWdlIGNhY2hlLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGF1dG9NYXRjaEltYWdlQ2FjaGU/OiBib29sZWFuIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgY3B1OiBDUFUgc2l6ZVxuICAgICAqL1xuICAgIHJlYWRvbmx5IGNwdT86IG51bWJlciB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGRuc0NvbmZpZzogVGhlIGluZm9ybWF0aW9uIGFib3V0IEROUyBjb25maWd1cmF0aW9ucy5cbiAgICAgKi9cbiAgICByZWFkb25seSBkbnNDb25maWc/OiBSb3NDb250YWluZXJHcm91cC5EbnNDb25maWdQcm9wZXJ0eSB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGVpcEluc3RhbmNlSWQ6IEVsYXN0aWMgSVAgSURcbiAgICAgKi9cbiAgICByZWFkb25seSBlaXBJbnN0YW5jZUlkPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgaG9zdEFsaWFzZTogQ3VzdG9taXplIHRoZSBob3N0bmFtZSBtYXBwaW5nIG9mIGEgY29udGFpbmVyIGluc2lkZSB0aGUgcG9kXG4gICAgICovXG4gICAgcmVhZG9ubHkgaG9zdEFsaWFzZT86IEFycmF5PFJvc0NvbnRhaW5lckdyb3VwLkhvc3RBbGlhc2VQcm9wZXJ0eSB8IHJvcy5JUmVzb2x2YWJsZT4gfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBpbWFnZVJlZ2lzdHJ5Q3JlZGVudGlhbDogVGhlIGluZm9ybWF0aW9uIHRoYXQgeW91IG5lZWQgdG8gbG9nIG9uIHRvIHRoZSBjb250YWluZXIgaW1hZ2UgcmVwb3NpdG9yeSwgaW5jbHVkaW5nIHRoZSBzZXJ2ZXIgYWRkcmVzcywgdXNlcm5hbWUsIGFuZCBwYXNzd29yZC5cbiAgICAgKi9cbiAgICByZWFkb25seSBpbWFnZVJlZ2lzdHJ5Q3JlZGVudGlhbD86IEFycmF5PFJvc0NvbnRhaW5lckdyb3VwLkltYWdlUmVnaXN0cnlDcmVkZW50aWFsUHJvcGVydHkgfCByb3MuSVJlc29sdmFibGU+IHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgaW1hZ2VTbmFwc2hvdElkOiBJbWFnZSBjYWNoZSBJRCBvciBzbmFwc2hvdCBJRC5cbiAgICAgKi9cbiAgICByZWFkb25seSBpbWFnZVNuYXBzaG90SWQ/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBpbml0Q29udGFpbmVyOiBUaGUgY29udGFpbmVycyB0aGF0IGNvbnN0aXR1dGUgdGhlIGNvbnRhaW5lciBncm91cCBmb3IgaW5pdGlhbGl6aW5nLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGluaXRDb250YWluZXI/OiBBcnJheTxSb3NDb250YWluZXJHcm91cC5Jbml0Q29udGFpbmVyUHJvcGVydHkgfCByb3MuSVJlc29sdmFibGU+IHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgaW5zdGFuY2VUeXBlOiBUaGUgdHlwZSBvZiB0aGUgRUNTIGluc3RhbmNlLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGluc3RhbmNlVHlwZT86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGlwdjZBZGRyZXNzQ291bnQ6IFRoZSBudW1iZXIgb2YgSVB2NiBhZGRyZXNzZXMuXG4gICAgICovXG4gICAgcmVhZG9ubHkgaXB2NkFkZHJlc3NDb3VudD86IG51bWJlciB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IG1lbW9yeTogbWVtb3J5IHNpemVcbiAgICAgKi9cbiAgICByZWFkb25seSBtZW1vcnk/OiBudW1iZXIgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSByYW1Sb2xlTmFtZTogVGhlIFJBTSByb2xlIHRoYXQgdGhlIGNvbnRhaW5lciBncm91cCBhc3N1bWVzLiBFQ0kgYW5kIEVDUyBzaGFyZSB0aGUgc2FtZSBSQU0gcm9sZS5cbiAgICAgKi9cbiAgICByZWFkb25seSByYW1Sb2xlTmFtZT86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHJlc291cmNlR3JvdXBJZDogUmVzb3VyY2UgZ3JvdXAgaWQuXG4gICAgICovXG4gICAgcmVhZG9ubHkgcmVzb3VyY2VHcm91cElkPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgcmVzdGFydFBvbGljeTogVGhlIHBvbGljeSBmb3IgcmVzdGFydGluZyB0aGUgaW5zdGFuY2UuIERlZmF1bHQgdmFsdWU6IEFsd2F5cy5cbiAgICAgKi9cbiAgICByZWFkb25seSByZXN0YXJ0UG9saWN5Pzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgc2VjdXJpdHlDb250ZXh0U3lzY3RsOiBFQ0kgU3lzY3RsIGlzIHZhbGlkIGZvciBldmVyeSBjb250YWluZXIgaW4gRUNJLlxuICAgICAqIEN1cnJlbnRseSBvbmx5IHR3byBTeXNjdGwga2V5TmFtZXMgYXJlIHN1cHBvcnRlZDpcbiAgICAgKiBLZXJuZWwuc2htX3JtaWRfZm9yY2VkXG4gICAgICogS2VybmVsLm1zZ21heFxuICAgICAqL1xuICAgIHJlYWRvbmx5IHNlY3VyaXR5Q29udGV4dFN5c2N0bD86IEFycmF5PFJvc0NvbnRhaW5lckdyb3VwLlNlY3VyaXR5Q29udGV4dFN5c2N0bFByb3BlcnR5IHwgcm9zLklSZXNvbHZhYmxlPiB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHNlY3VyaXR5R3JvdXBJZDogVGhlIElEIG9mIHRoZSBzZWN1cml0eSBncm91cCB0byB3aGljaCB0aGUgaW5zdGFuY2UgYmVsb25ncy4gSW5zdGFuY2VzIGluIHRoZSBzYW1lIHNlY3VyaXR5IGdyb3VwIGNhbiBhY2Nlc3Mgb25lIGFub3RoZXIuXG4gICAgICogSWYgbm8gc2VjdXJpdHkgZ3JvdXAgaXMgc3BlY2lmaWVkLCB0aGUgc3lzdGVtIGF1dG9tYXRpY2FsbHkgdXNlcyB0aGUgZGVmYXVsdCBzZWN1cml0eSBncm91cCBpbiB0aGUgcmVnaW9uIHlvdSBzZWxlY3QuXG4gICAgICogSWYgeW91IGRvIG5vdCBoYXZlIGEgZGVmYXVsdCBzZWN1cml0eSBncm91cCBpbiB0aGlzIHJlZ2lvbiwgdGhlIHN5c3RlbSBhdXRvbWF0aWNhbGx5IGNyZWF0ZXMgYSBkZWZhdWx0IHNlY3VyaXR5IGdyb3VwIGFuZCBhZGRzIHRoZSBjb250YWluZXIgcHJvdG9jb2wgYW5kIHBvcnQgeW91IGRlY2xhcmVkIHRvIHRoZSBpbmJvdW5kIGRpcmVjdGlvbiBydWxlcyBvZiB0aGlzIHNlY3VyaXR5IGdyb3VwLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHNlY3VyaXR5R3JvdXBJZD86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHNsc0VuYWJsZTogRW5hYmxlIHVzZXIgbG9nIGNvbGxlY3Rpb24uIFRoZSBkZWZhdWx0IGlzIEZhbHNlLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHNsc0VuYWJsZT86IGJvb2xlYW4gfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBzcG90UHJpY2VMaW1pdDogU2V0IHRoZSBob3VybHkgbWF4aW11bSBwcmljZSBvZiB0aGUgaW5zdGFuY2UuIEl0IHN1cHBvcnRzIGEgbWF4aW11bSBvZiAzIGRlY2ltYWwgcGxhY2VzLiBJdCB0YWtlcyBlZmZlY3Qgd2hlbiB0aGUgdmFsdWUgb2YgdGhlIHBhcmFtZXRlciBTcG90U3RyYXRlZ3kgaXMgU3BvdFdpdGhQcmljZUxpbWl0LlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHNwb3RQcmljZUxpbWl0PzogbnVtYmVyIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgc3BvdFN0cmF0ZWd5OiBJbnN0YW5jZSBwcmVlbXB0aW9uIHN0cmF0ZWd5LlxuICAgICAqIFJhbmdlczpcbiAgICAgKiBOb1Nwb3QgKGRlZmF1bHQpOiBub3JtYWwgcGF5LWFzLXlvdS1nbyBpbnN0YW5jZXMuXG4gICAgICogU3BvdFdpdGhQcmljZUxpbWl0OiBQcmVlbXB0aXZlIGluc3RhbmNlIHRoYXQgc2V0cyBhIGNhcCBwcmljZS5cbiAgICAgKiBTcG90QXNQcmljZUdvOiBUaGUgc3lzdGVtIGF1dG9tYXRpY2FsbHkgYmlkcywgZm9sbG93aW5nIHRoZSBjdXJyZW50IG1hcmtldCBhY3R1YWwgcHJpY2UuXG4gICAgICovXG4gICAgcmVhZG9ubHkgc3BvdFN0cmF0ZWd5Pzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgdGFnOiBUaGUgbGlzdCBvZiBjb250YWluZXIgZ3JvdXAgdGFncyBpbiB0aGUgZm9ybSBvZiBrZXkvdmFsdWUgcGFpcnMuIFlvdSBjYW4gZGVmaW5lIGEgbWF4aW11bSBvZiAyMCB0YWdzIGZvciBlYWNoIGNvbnRhaW5lciBncm91cC5cbiAgICAgKi9cbiAgICByZWFkb25seSB0YWc/OiBBcnJheTxyb3MuUm9zVGFnIHwgcm9zLklSZXNvbHZhYmxlPiB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHRlcm1pbmF0aW9uR3JhY2VQZXJpb2RTZWNvbmRzOiBUaGUgYnVmZmVyIHRpbWUgZm9yIHRoZSBwcm9ncmFtIHRvIGhhbmRsZSBvcGVyYXRpb25zIGJlZm9yZSBpdCBpcyBzdG9wcGVkLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHRlcm1pbmF0aW9uR3JhY2VQZXJpb2RTZWNvbmRzPzogbnVtYmVyIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgdm9sdW1lOiBUaGUgZGF0YSB2b2x1bWUuIFlvdSBjYW4gc3BlY2lmeSBhIG1heGltdW0gb2YgMjAgZGF0YSB2b2x1bWVzLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHZvbHVtZT86IEFycmF5PFJvc0NvbnRhaW5lckdyb3VwLlZvbHVtZVByb3BlcnR5IHwgcm9zLklSZXNvbHZhYmxlPiB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHZTd2l0Y2hJZDogVGhlIElEIG9mIHRoZSBzcGVjaWZpZWQgVlN3aXRjaC5cbiAgICAgKiBJZiBubyBzd2l0Y2ggaXMgc3BlY2lmaWVkLCB0aGUgc3lzdGVtIGF1dG9tYXRpY2FsbHkgdXNlcyB0aGUgZGVmYXVsdCBzd2l0Y2ggaW4gdGhlIGRlZmF1bHQgVlBDIGluIHRoZSBzZWxlY3RlZCByZWdpb24uXG4gICAgICogSWYgbm8gZGVmYXVsdCBWUEMgb3IgZGVmYXVsdCBzd2l0Y2ggaXMgYXZhaWxhYmxlIGluIHRoZSByZWdpb24sIHRoZSBzeXN0ZW0gYXV0b21hdGljYWxseSBjcmVhdGVzIGEgZGVmYXVsdCBWUEMgYW5kIGEgZGVmYXVsdCBzd2l0Y2hcbiAgICAgKi9cbiAgICByZWFkb25seSB2U3dpdGNoSWQ/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSB6b25lSWQ6IFRoZSBJRCBvZiB0aGUgem9uZSBpbiB3aGljaCB0aGUgaW5zdGFuY2UgcmVzaWRlcy4gSWYgeW91IGxlYXZlIHRoZSBwYXJhbWV0ZXIgYmxhbmssIHRoZSBzeXN0ZW0gYXNzaWducyBhIHpvbmUgZm9yIHlvdS4gVGhlIGRlZmF1bHQgdmFsdWUgaXMgYmxhbmsuXG4gICAgICovXG4gICAgcmVhZG9ubHkgem9uZUlkPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xufVxuXG4vKipcbiAqIEEgUk9TIHJlc291cmNlIHR5cGU6ICBgQUxJWVVOOjpFQ0k6OkNvbnRhaW5lckdyb3VwYFxuICovXG5leHBvcnQgY2xhc3MgQ29udGFpbmVyR3JvdXAgZXh0ZW5kcyByb3MuUmVzb3VyY2Uge1xuXG4gICAgLyoqXG4gICAgICogQSBmYWN0b3J5IG1ldGhvZCB0aGF0IGNyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgdGhpcyBjbGFzcyBmcm9tIGFuIG9iamVjdFxuICAgICAqIGNvbnRhaW5pbmcgdGhlIHByb3BlcnRpZXMgb2YgdGhpcyBST1MgcmVzb3VyY2UsIHdoaWNoIHdpbGwgYmUgYXNzaWduZWQgdG8gUk9TIHJlc291cmNlLlxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIENvbnRhaW5lckdyb3VwSWQ6IFRoZSBJRCBvZiB0aGUgY29udGFpbmVyIGdyb3VwLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyQ29udGFpbmVyR3JvdXBJZDogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIENvbnRhaW5lckdyb3VwTmFtZTogVGhlIG5hbWUgb2YgdGhlIGNvbnRhaW5lciBncm91cC5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckNvbnRhaW5lckdyb3VwTmFtZTogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIEVuaUluc3RhbmNlSWQ6IEVOSSBpbnN0YW5jZSBJRC5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckVuaUluc3RhbmNlSWQ6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBJbnRlcm5ldElwOiBJbnRlcm5ldCBJUC5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckludGVybmV0SXA6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBJbnRyYW5ldElwOiBJbnRyYW5ldCBJUC5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckludHJhbmV0SXA6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBJcHY2QWRkcmVzczogSXB2NiBhZGRyZXNzLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRySXB2NkFkZHJlc3M6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBSZWdpb25JZDogVGhlIElEIG9mIHRoZSByZWdpb24gaW4gd2hpY2ggdGhlIGluc3RhbmNlIHJlc2lkZXMuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJSZWdpb25JZDogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIFNlY3VyaXR5R3JvdXBJZDogVGhlIElEIG9mIHRoZSBzZWN1cml0eSBncm91cCB0byB3aGljaCB0aGUgaW5zdGFuY2UgYmVsb25ncy4gSW5zdGFuY2VzIGluIHRoZSBzYW1lIHNlY3VyaXR5IGdyb3VwIGNhbiBhY2Nlc3Mgb25lIGFub3RoZXIuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJTZWN1cml0eUdyb3VwSWQ6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBWU3dpdGNoSWQ6IFRoZSBJRCBvZiB0aGUgVlN3aXRjaC4gQ3VycmVudGx5LCBFQ0kgaW5zdGFuY2VzIGNhbiBvbmx5IGJlIGRlcGxveWVkIGluIFZQQ3MuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJWU3dpdGNoSWQ6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBab25lSWQ6IFRoZSBJRCBvZiB0aGUgem9uZSBpbiB3aGljaCB0aGUgaW5zdGFuY2UgcmVzaWRlcy4gSWYgeW91IGxlYXZlIHRoZSBwYXJhbWV0ZXIgYmxhbmssIHRoZSBzeXN0ZW0gYXNzaWducyBhIHpvbmUgZm9yIHlvdS4gVGhlIGRlZmF1bHQgdmFsdWUgaXMgYmxhbmsuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJab25lSWQ6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBgQUxJWVVOOjpFQ0k6OkNvbnRhaW5lckdyb3VwYC5cbiAgICAgKlxuICAgICAqIFBhcmFtIHNjb3BlIC0gc2NvcGUgaW4gd2hpY2ggdGhpcyByZXNvdXJjZSBpcyBkZWZpbmVkXG4gICAgICogUGFyYW0gaWQgICAgLSBzY29wZWQgaWQgb2YgdGhlIHJlc291cmNlXG4gICAgICogUGFyYW0gcHJvcHMgLSByZXNvdXJjZSBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IHJvcy5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBDb250YWluZXJHcm91cFByb3BzLCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDpib29sZWFuID0gdHJ1ZSkge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQpO1xuXG4gICAgICAgIGNvbnN0IHJvc0NvbnRhaW5lckdyb3VwID0gbmV3IFJvc0NvbnRhaW5lckdyb3VwKHRoaXMsIGlkLCAge1xuICAgICAgICAgICAgcmVzb3VyY2VHcm91cElkOiBwcm9wcy5yZXNvdXJjZUdyb3VwSWQsXG4gICAgICAgICAgICBzZWN1cml0eUNvbnRleHRTeXNjdGw6IHByb3BzLnNlY3VyaXR5Q29udGV4dFN5c2N0bCxcbiAgICAgICAgICAgIG1lbW9yeTogcHJvcHMubWVtb3J5LFxuICAgICAgICAgICAgaW5pdENvbnRhaW5lcjogcHJvcHMuaW5pdENvbnRhaW5lcixcbiAgICAgICAgICAgIGNwdTogcHJvcHMuY3B1LFxuICAgICAgICAgICAgZWlwSW5zdGFuY2VJZDogcHJvcHMuZWlwSW5zdGFuY2VJZCxcbiAgICAgICAgICAgIGNvbnRhaW5lckdyb3VwTmFtZTogcHJvcHMuY29udGFpbmVyR3JvdXBOYW1lLFxuICAgICAgICAgICAgY29udGFpbmVyOiBwcm9wcy5jb250YWluZXIsXG4gICAgICAgICAgICBpbWFnZVNuYXBzaG90SWQ6IHByb3BzLmltYWdlU25hcHNob3RJZCxcbiAgICAgICAgICAgIHJhbVJvbGVOYW1lOiBwcm9wcy5yYW1Sb2xlTmFtZSxcbiAgICAgICAgICAgIGRuc0NvbmZpZzogcHJvcHMuZG5zQ29uZmlnLFxuICAgICAgICAgICAgYXV0b01hdGNoSW1hZ2VDYWNoZTogcHJvcHMuYXV0b01hdGNoSW1hZ2VDYWNoZSxcbiAgICAgICAgICAgIGlwdjZBZGRyZXNzQ291bnQ6IHByb3BzLmlwdjZBZGRyZXNzQ291bnQsXG4gICAgICAgICAgICBpbWFnZVJlZ2lzdHJ5Q3JlZGVudGlhbDogcHJvcHMuaW1hZ2VSZWdpc3RyeUNyZWRlbnRpYWwsXG4gICAgICAgICAgICBzcG90UHJpY2VMaW1pdDogcHJvcHMuc3BvdFByaWNlTGltaXQsXG4gICAgICAgICAgICBpbnN0YW5jZVR5cGU6IHByb3BzLmluc3RhbmNlVHlwZSxcbiAgICAgICAgICAgIHNwb3RTdHJhdGVneTogcHJvcHMuc3BvdFN0cmF0ZWd5LFxuICAgICAgICAgICAgYWN0aXZlRGVhZGxpbmVTZWNvbmRzOiBwcm9wcy5hY3RpdmVEZWFkbGluZVNlY29uZHMsXG4gICAgICAgICAgICBob3N0QWxpYXNlOiBwcm9wcy5ob3N0QWxpYXNlLFxuICAgICAgICAgICAgem9uZUlkOiBwcm9wcy56b25lSWQsXG4gICAgICAgICAgICB0ZXJtaW5hdGlvbkdyYWNlUGVyaW9kU2Vjb25kczogcHJvcHMudGVybWluYXRpb25HcmFjZVBlcmlvZFNlY29uZHMsXG4gICAgICAgICAgICB2U3dpdGNoSWQ6IHByb3BzLnZTd2l0Y2hJZCxcbiAgICAgICAgICAgIHNlY3VyaXR5R3JvdXBJZDogcHJvcHMuc2VjdXJpdHlHcm91cElkLFxuICAgICAgICAgICAgc2xzRW5hYmxlOiBwcm9wcy5zbHNFbmFibGUsXG4gICAgICAgICAgICByZXN0YXJ0UG9saWN5OiBwcm9wcy5yZXN0YXJ0UG9saWN5LFxuICAgICAgICAgICAgdm9sdW1lOiBwcm9wcy52b2x1bWUsXG4gICAgICAgICAgICBhY3JSZWdpc3RyeUluZm86IHByb3BzLmFjclJlZ2lzdHJ5SW5mbyxcbiAgICAgICAgICAgIHRhZzogcHJvcHMudGFnLFxuICAgICAgICB9LCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCAmJiB0aGlzLnN0YWNrLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50KTtcbiAgICAgICAgdGhpcy5yZXNvdXJjZSA9IHJvc0NvbnRhaW5lckdyb3VwO1xuICAgICAgICB0aGlzLmF0dHJDb250YWluZXJHcm91cElkID0gcm9zQ29udGFpbmVyR3JvdXAuYXR0ckNvbnRhaW5lckdyb3VwSWQ7XG4gICAgICAgIHRoaXMuYXR0ckNvbnRhaW5lckdyb3VwTmFtZSA9IHJvc0NvbnRhaW5lckdyb3VwLmF0dHJDb250YWluZXJHcm91cE5hbWU7XG4gICAgICAgIHRoaXMuYXR0ckVuaUluc3RhbmNlSWQgPSByb3NDb250YWluZXJHcm91cC5hdHRyRW5pSW5zdGFuY2VJZDtcbiAgICAgICAgdGhpcy5hdHRySW50ZXJuZXRJcCA9IHJvc0NvbnRhaW5lckdyb3VwLmF0dHJJbnRlcm5ldElwO1xuICAgICAgICB0aGlzLmF0dHJJbnRyYW5ldElwID0gcm9zQ29udGFpbmVyR3JvdXAuYXR0ckludHJhbmV0SXA7XG4gICAgICAgIHRoaXMuYXR0cklwdjZBZGRyZXNzID0gcm9zQ29udGFpbmVyR3JvdXAuYXR0cklwdjZBZGRyZXNzO1xuICAgICAgICB0aGlzLmF0dHJSZWdpb25JZCA9IHJvc0NvbnRhaW5lckdyb3VwLmF0dHJSZWdpb25JZDtcbiAgICAgICAgdGhpcy5hdHRyU2VjdXJpdHlHcm91cElkID0gcm9zQ29udGFpbmVyR3JvdXAuYXR0clNlY3VyaXR5R3JvdXBJZDtcbiAgICAgICAgdGhpcy5hdHRyVlN3aXRjaElkID0gcm9zQ29udGFpbmVyR3JvdXAuYXR0clZTd2l0Y2hJZDtcbiAgICAgICAgdGhpcy5hdHRyWm9uZUlkID0gcm9zQ29udGFpbmVyR3JvdXAuYXR0clpvbmVJZDtcbiAgICB9XG59XG4iXX0=