"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImageCache = exports.ImageCacheProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const eci_generated_1 = require("./eci.generated");
Object.defineProperty(exports, "ImageCacheProperty", { enumerable: true, get: function () { return eci_generated_1.RosImageCache; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::ECI::ImageCache`, which is used to create an image cache.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosImageCache`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-eci-imagecache
 */
class ImageCache extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosImageCache = new eci_generated_1.RosImageCache(this, id, {
            imageCacheSize: props.imageCacheSize,
            zoneId: props.zoneId,
            resourceGroupId: props.resourceGroupId,
            autoMatchImageCache: props.autoMatchImageCache,
            securityGroupId: props.securityGroupId,
            imageCacheName: props.imageCacheName,
            imageRegistryCredential: props.imageRegistryCredential,
            vSwitchId: props.vSwitchId,
            acrRegistryInfo: props.acrRegistryInfo,
            retentionDays: props.retentionDays,
            image: props.image,
            eipInstanceId: props.eipInstanceId,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosImageCache;
        this.attrImageCacheId = rosImageCache.attrImageCacheId;
    }
}
exports.ImageCache = ImageCache;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1hZ2VjYWNoZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImltYWdlY2FjaGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsOENBQThDO0FBQzlDLG1EQUFnRDtBQUV0QixtR0FGakIsNkJBQWEsT0FFc0I7QUEyRTVDOzs7O0dBSUc7QUFDSCxNQUFhLFVBQVcsU0FBUSxHQUFHLENBQUMsUUFBUTtJQU94Qzs7OztPQUlHO0lBQ0gsWUFBWSxLQUFvQixFQUFFLEVBQVUsRUFBRSxLQUFzQixFQUFFLG1DQUEyQyxJQUFJO1FBQ2pILEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFakIsTUFBTSxhQUFhLEdBQUcsSUFBSSw2QkFBYSxDQUFDLElBQUksRUFBRSxFQUFFLEVBQUc7WUFDL0MsY0FBYyxFQUFFLEtBQUssQ0FBQyxjQUFjO1lBQ3BDLE1BQU0sRUFBRSxLQUFLLENBQUMsTUFBTTtZQUNwQixlQUFlLEVBQUUsS0FBSyxDQUFDLGVBQWU7WUFDdEMsbUJBQW1CLEVBQUUsS0FBSyxDQUFDLG1CQUFtQjtZQUM5QyxlQUFlLEVBQUUsS0FBSyxDQUFDLGVBQWU7WUFDdEMsY0FBYyxFQUFFLEtBQUssQ0FBQyxjQUFjO1lBQ3BDLHVCQUF1QixFQUFFLEtBQUssQ0FBQyx1QkFBdUI7WUFDdEQsU0FBUyxFQUFFLEtBQUssQ0FBQyxTQUFTO1lBQzFCLGVBQWUsRUFBRSxLQUFLLENBQUMsZUFBZTtZQUN0QyxhQUFhLEVBQUUsS0FBSyxDQUFDLGFBQWE7WUFDbEMsS0FBSyxFQUFFLEtBQUssQ0FBQyxLQUFLO1lBQ2xCLGFBQWEsRUFBRSxLQUFLLENBQUMsYUFBYTtTQUNyQyxFQUFFLGdDQUFnQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztRQUNwRixJQUFJLENBQUMsUUFBUSxHQUFHLGFBQWEsQ0FBQztRQUM5QixJQUFJLENBQUMsZ0JBQWdCLEdBQUcsYUFBYSxDQUFDLGdCQUFnQixDQUFDO0lBQzNELENBQUM7Q0FDSjtBQWhDRCxnQ0FnQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyByb3MgZnJvbSAnQGFsaWNsb3VkL3Jvcy1jZGstY29yZSc7XG5pbXBvcnQgeyBSb3NJbWFnZUNhY2hlIH0gZnJvbSAnLi9lY2kuZ2VuZXJhdGVkJztcbi8vIEdlbmVyYXRlZCBmcm9tIHRoZSBBbGlDbG91ZCBST1MgUmVzb3VyY2UgU3BlY2lmaWNhdGlvblxuZXhwb3J0IHsgUm9zSW1hZ2VDYWNoZSBhcyBJbWFnZUNhY2hlUHJvcGVydHkgfTtcblxuLyoqXG4gKiBQcm9wZXJ0aWVzIGZvciBkZWZpbmluZyBhIGBJbWFnZUNhY2hlYC5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvYWxpeXVuLWVjaS1pbWFnZWNhY2hlXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSW1hZ2VDYWNoZVByb3BzIHtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGltYWdlOiBUaGUgaW1hZ2UgbGlzdCB0byBiZSBjYWNoZWQuXG4gICAgICovXG4gICAgcmVhZG9ubHkgaW1hZ2U6IEFycmF5PHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZT4gfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBpbWFnZUNhY2hlTmFtZTogSW1hZ2UgY2FjaGUgbmFtZS5cbiAgICAgKi9cbiAgICByZWFkb25seSBpbWFnZUNhY2hlTmFtZTogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgc2VjdXJpdHlHcm91cElkOiBTZWN1cml0eSBncm91cCBJRC5cbiAgICAgKi9cbiAgICByZWFkb25seSBzZWN1cml0eUdyb3VwSWQ6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHZTd2l0Y2hJZDogVlN3aXRjaCBJRC5cbiAgICAgKi9cbiAgICByZWFkb25seSB2U3dpdGNoSWQ6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGFjclJlZ2lzdHJ5SW5mbzogRW50ZXJwcmlzZSBFZGl0aW9uIGFjY2VzcyBjcmVkZW50aWFsIGNvbmZpZ3VyYXRpb24gaW5mb3JtYXRpb24uXG4gICAgICovXG4gICAgcmVhZG9ubHkgYWNyUmVnaXN0cnlJbmZvPzogQXJyYXk8Um9zSW1hZ2VDYWNoZS5BY3JSZWdpc3RyeUluZm9Qcm9wZXJ0eSB8IHJvcy5JUmVzb2x2YWJsZT4gfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBhdXRvTWF0Y2hJbWFnZUNhY2hlOiBTcGVjaWZpZXMgd2hldGhlciB0byBlbmFibGUgcmV1c2Ugb2YgaW1hZ2UgY2FjaGUgbGF5ZXJzLiBJZiB5b3UgZW5hYmxlIHRoaXMgZmVhdHVyZSwgYW5kIHRoZSBpbWFnZSBjYWNoZSB0aGF0IHlvdSB3YW50IHRvIGNyZWF0ZWFuZCBhbiBleGlzdGluZyBpbWFnZSBjYWNoZSBjb250YWluIGR1cGxpY2F0ZSBpbWFnZSBsYXllcnMsIHRoZSBzeXN0ZW0gcmV1c2VzIHRoZSBkdXBsaWNhdGUgaW1hZ2UgbGF5ZXJzIHRvIGNyZWF0ZSB0aGUgbmV3IGltYWdlIGNhY2hlLlxuICAgICAqICBUaGlzIGFjY2VsZXJhdGVzIHRoZSBjcmVhdGlvbiBvZiB0aGUgaW1hZ2UgY2FjaGUuIFxuICAgICAqIFZhbGlkIHZhbHVlczogdHJ1ZTogZW5hYmxlcyByZXVzZSBvZiBpbWFnZSBjYWNoZSBsYXllcnMuXG4gICAgICogZmFsc2U6IGRpc2FibGVzIHJldXNlIG9mIGltYWdlIGNhY2hlIGxheWVycy5cbiAgICAgKiBEZWZhdWx0IHZhbHVlOiBmYWxzZS5cbiAgICAgKi9cbiAgICByZWFkb25seSBhdXRvTWF0Y2hJbWFnZUNhY2hlPzogYm9vbGVhbiB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGVpcEluc3RhbmNlSWQ6IElmIHlvdSB3YW50IHRvIHB1bGwgdGhlIHB1YmxpYyBuZXR3b3JrIGltYWdlLCB5b3UgbmVlZCB0byBjb25maWd1cmUgdGhlIHB1YmxpYyBuZXR3b3JrIGlwIG9yIGNvbmZpZ3VyZSB0aGUgc3dpdGNoIE5BVCBnYXRld2F5LlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGVpcEluc3RhbmNlSWQ/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBpbWFnZUNhY2hlU2l6ZTogVGhlIHNpemUgb2YgdGhlIGltYWdlIGNhY2hlLiBVbml0OiBHaUIuIERlZmF1bHQgdmFsdWU6IDIwLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGltYWdlQ2FjaGVTaXplPzogbnVtYmVyIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgaW1hZ2VSZWdpc3RyeUNyZWRlbnRpYWw6IFByaXZhdGUgaW1hZ2UgcGFzc3dvcmQuIEFsaWJhYmEgQ2xvdWQgQUNSIGltYWdlIGNhbiBiZSBsZWZ0IGJsYW5rLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGltYWdlUmVnaXN0cnlDcmVkZW50aWFsPzogQXJyYXk8c3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlPiB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHJlc291cmNlR3JvdXBJZDogUmVzb3VyY2UgZ3JvdXAgaWQuXG4gICAgICovXG4gICAgcmVhZG9ubHkgcmVzb3VyY2VHcm91cElkPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgcmV0ZW50aW9uRGF5czogVGhlIHJldGVudGlvbiBwZXJpb2Qgb2YgdGhlIGltYWdlIGNhY2hlLiBVbml0OiBkYXlzLiBXaGVuIHRoZSByZXRlbnRpb24gcGVyaW9kIGVuZHMsIHRoZSBpbWFnZSBjYWNoZSBleHBpcmVzIGFuZCBpcyBkZWxldGVkLlxuICAgICAqICBCeSBkZWZhdWx0LCBpbWFnZSBjYWNoZXMgbmV2ZXIgZXhwaXJlLlxuICAgICAqIE5vdGU6IFRoZSBpbWFnZSBjYWNoZXMgdGhhdCBmYWlsIHRvIGJlIGNyZWF0ZWQgYXJlIG9ubHkgcmV0YWluZWQgZm9yIG9uZSBkYXkuXG4gICAgICovXG4gICAgcmVhZG9ubHkgcmV0ZW50aW9uRGF5cz86IG51bWJlciB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHpvbmVJZDogVGhlIHpvbmUgSUQgb2YgdGhlIGltYWdlIGNhY2hlLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHpvbmVJZD86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcbn1cblxuLyoqXG4gKiBUaGlzIGNsYXNzIGVuY2Fwc3VsYXRlcyBhbmQgZXh0ZW5kcyB0aGUgUk9TIHJlc291cmNlIHR5cGUgYEFMSVlVTjo6RUNJOjpJbWFnZUNhY2hlYCwgd2hpY2ggaXMgdXNlZCB0byBjcmVhdGUgYW4gaW1hZ2UgY2FjaGUuXG4gKiBATm90ZSBUaGlzIGNsYXNzIG1heSBoYXZlIHNvbWUgbmV3IGZ1bmN0aW9ucyB0byBmYWNpbGl0YXRlIGRldmVsb3BtZW50LCBzbyBpdCBpcyByZWNvbW1lbmRlZCB0byB1c2UgdGhpcyBjbGFzcyBpbnN0ZWFkIG9mIGBSb3NJbWFnZUNhY2hlYGZvciBhIG1vcmUgY29udmVuaWVudCBkZXZlbG9wbWVudCBleHBlcmllbmNlLlxuICogU2VlIGh0dHBzOi8vd3d3LmFsaWJhYmFjbG91ZC5jb20vaGVscC9yb3MvZGV2ZWxvcGVyLXJlZmVyZW5jZS9hbGl5dW4tZWNpLWltYWdlY2FjaGVcbiAqL1xuZXhwb3J0IGNsYXNzIEltYWdlQ2FjaGUgZXh0ZW5kcyByb3MuUmVzb3VyY2Uge1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIEltYWdlQ2FjaGVJZDogVGhlIElEIG9mIHRoZSBpbWFnZSBjYWNoZS5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckltYWdlQ2FjaGVJZDogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUGFyYW0gc2NvcGUgLSBzY29wZSBpbiB3aGljaCB0aGlzIHJlc291cmNlIGlzIGRlZmluZWRcbiAgICAgKiBQYXJhbSBpZCAgICAtIHNjb3BlZCBpZCBvZiB0aGUgcmVzb3VyY2VcbiAgICAgKiBQYXJhbSBwcm9wcyAtIHJlc291cmNlIHByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihzY29wZTogcm9zLkNvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IEltYWdlQ2FjaGVQcm9wcywgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6Ym9vbGVhbiA9IHRydWUpIHtcbiAgICAgICAgc3VwZXIoc2NvcGUsIGlkKTtcblxuICAgICAgICBjb25zdCByb3NJbWFnZUNhY2hlID0gbmV3IFJvc0ltYWdlQ2FjaGUodGhpcywgaWQsICB7XG4gICAgICAgICAgICBpbWFnZUNhY2hlU2l6ZTogcHJvcHMuaW1hZ2VDYWNoZVNpemUsXG4gICAgICAgICAgICB6b25lSWQ6IHByb3BzLnpvbmVJZCxcbiAgICAgICAgICAgIHJlc291cmNlR3JvdXBJZDogcHJvcHMucmVzb3VyY2VHcm91cElkLFxuICAgICAgICAgICAgYXV0b01hdGNoSW1hZ2VDYWNoZTogcHJvcHMuYXV0b01hdGNoSW1hZ2VDYWNoZSxcbiAgICAgICAgICAgIHNlY3VyaXR5R3JvdXBJZDogcHJvcHMuc2VjdXJpdHlHcm91cElkLFxuICAgICAgICAgICAgaW1hZ2VDYWNoZU5hbWU6IHByb3BzLmltYWdlQ2FjaGVOYW1lLFxuICAgICAgICAgICAgaW1hZ2VSZWdpc3RyeUNyZWRlbnRpYWw6IHByb3BzLmltYWdlUmVnaXN0cnlDcmVkZW50aWFsLFxuICAgICAgICAgICAgdlN3aXRjaElkOiBwcm9wcy52U3dpdGNoSWQsXG4gICAgICAgICAgICBhY3JSZWdpc3RyeUluZm86IHByb3BzLmFjclJlZ2lzdHJ5SW5mbyxcbiAgICAgICAgICAgIHJldGVudGlvbkRheXM6IHByb3BzLnJldGVudGlvbkRheXMsXG4gICAgICAgICAgICBpbWFnZTogcHJvcHMuaW1hZ2UsXG4gICAgICAgICAgICBlaXBJbnN0YW5jZUlkOiBwcm9wcy5laXBJbnN0YW5jZUlkLFxuICAgICAgICB9LCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCAmJiB0aGlzLnN0YWNrLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50KTtcbiAgICAgICAgdGhpcy5yZXNvdXJjZSA9IHJvc0ltYWdlQ2FjaGU7XG4gICAgICAgIHRoaXMuYXR0ckltYWdlQ2FjaGVJZCA9IHJvc0ltYWdlQ2FjaGUuYXR0ckltYWdlQ2FjaGVJZDtcbiAgICB9XG59XG4iXX0=