"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EciScalingConfiguration = exports.EciScalingConfigurationProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ess_generated_1 = require("./ess.generated");
Object.defineProperty(exports, "EciScalingConfigurationProperty", { enumerable: true, get: function () { return ess_generated_1.RosEciScalingConfiguration; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::ESS::EciScalingConfiguration`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosEciScalingConfiguration`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-ess-eciscalingconfiguration
 */
class EciScalingConfiguration extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosEciScalingConfiguration = new ess_generated_1.RosEciScalingConfiguration(this, id, {
            scalingConfigurationName: props.scalingConfigurationName,
            ntpServers: props.ntpServers,
            resourceGroupId: props.resourceGroupId,
            memory: props.memory,
            dnsConfigSearches: props.dnsConfigSearches,
            dataCachePl: props.dataCachePl,
            containers: props.containers,
            cpu: props.cpu,
            containerGroupName: props.containerGroupName,
            ingressBandwidth: props.ingressBandwidth,
            imageSnapshotId: props.imageSnapshotId,
            dataCacheProvisionedIops: props.dataCacheProvisionedIops,
            egressBandwidth: props.egressBandwidth,
            volumes: props.volumes,
            ramRoleName: props.ramRoleName,
            autoMatchImageCache: props.autoMatchImageCache,
            dataCacheBucket: props.dataCacheBucket,
            ipv6AddressCount: props.ipv6AddressCount,
            dnsConfigOptions: props.dnsConfigOptions,
            spotPriceLimit: props.spotPriceLimit,
            instanceTypes: props.instanceTypes,
            tags: props.tags,
            hostName: props.hostName,
            spotStrategy: props.spotStrategy,
            dnsConfigNameServers: props.dnsConfigNameServers,
            activeDeadlineSeconds: props.activeDeadlineSeconds,
            acrRegistryInfos: props.acrRegistryInfos,
            initContainers: props.initContainers,
            loadBalancerWeight: props.loadBalancerWeight,
            cpuOptionsThreadsPerCore: props.cpuOptionsThreadsPerCore,
            dataCacheBurstingEnabled: props.dataCacheBurstingEnabled,
            terminationGracePeriodSeconds: props.terminationGracePeriodSeconds,
            scalingGroupId: props.scalingGroupId,
            securityGroupId: props.securityGroupId,
            restartPolicy: props.restartPolicy,
            cpuOptionsCore: props.cpuOptionsCore,
            autoCreateEip: props.autoCreateEip,
            costOptimization: props.costOptimization,
            hostAliases: props.hostAliases,
            securityContextSysctls: props.securityContextSysctls,
            eipBandwidth: props.eipBandwidth,
            imageRegistryCredentials: props.imageRegistryCredentials,
            dnsPolicy: props.dnsPolicy,
            instanceFamilyLevel: props.instanceFamilyLevel,
            ephemeralStorage: props.ephemeralStorage,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosEciScalingConfiguration;
        this.attrScalingConfigurationId = rosEciScalingConfiguration.attrScalingConfigurationId;
    }
}
exports.EciScalingConfiguration = EciScalingConfiguration;
//# sourceMappingURL=data:application/json;base64,