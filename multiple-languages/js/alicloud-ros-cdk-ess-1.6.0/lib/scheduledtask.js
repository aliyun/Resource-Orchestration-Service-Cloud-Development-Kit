"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ScheduledTask = exports.ScheduledTaskProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ess_generated_1 = require("./ess.generated");
Object.defineProperty(exports, "ScheduledTaskProperty", { enumerable: true, get: function () { return ess_generated_1.RosScheduledTask; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::ESS::ScheduledTask`, which is used to create a scheduled task by specifying properties.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosScheduledTask`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-ess-scheduledtask
 */
class ScheduledTask extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosScheduledTask = new ess_generated_1.RosScheduledTask(this, id, {
            launchTime: props.launchTime,
            description: props.description,
            scalingGroupId: props.scalingGroupId,
            recurrenceType: props.recurrenceType,
            desiredCapacity: props.desiredCapacity,
            scheduledTaskName: props.scheduledTaskName,
            maxValue: props.maxValue,
            launchExpirationTime: props.launchExpirationTime,
            minValue: props.minValue,
            scheduledAction: props.scheduledAction,
            recurrenceEndTime: props.recurrenceEndTime,
            recurrenceValue: props.recurrenceValue,
            taskEnabled: props.taskEnabled,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosScheduledTask;
        this.attrScheduledTaskId = rosScheduledTask.attrScheduledTaskId;
    }
}
exports.ScheduledTask = ScheduledTask;
//# sourceMappingURL=data:application/json;base64,