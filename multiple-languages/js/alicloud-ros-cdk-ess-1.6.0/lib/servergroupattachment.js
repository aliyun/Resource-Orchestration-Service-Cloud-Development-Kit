"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServerGroupAttachment = exports.ServerGroupAttachmentProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ess_generated_1 = require("./ess.generated");
Object.defineProperty(exports, "ServerGroupAttachmentProperty", { enumerable: true, get: function () { return ess_generated_1.RosServerGroupAttachment; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::ESS::ServerGroupAttachment`, which is used to add one or more Server Load Balancer (SLB) server groups to a scaling group. Supported SLB server groups include Application Load Balancer (ALB) server groups and Network Load Balancer (NLB) server groups.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosServerGroupAttachment`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-ess-servergroupattachment
 */
class ServerGroupAttachment extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosServerGroupAttachment = new ess_generated_1.RosServerGroupAttachment(this, id, {
            serverGroups: props.serverGroups,
            scalingGroupId: props.scalingGroupId,
            forceAttach: props.forceAttach,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosServerGroupAttachment;
        this.attrScalingActivityId = rosServerGroupAttachment.attrScalingActivityId;
    }
}
exports.ServerGroupAttachment = ServerGroupAttachment;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyZ3JvdXBhdHRhY2htZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic2VydmVyZ3JvdXBhdHRhY2htZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDhDQUE4QztBQUM5QyxtREFBMkQ7QUFFdEIsOEdBRjVCLHdDQUF3QixPQUVpQztBQXVDbEU7Ozs7R0FJRztBQUNILE1BQWEscUJBQXNCLFNBQVEsR0FBRyxDQUFDLFFBQVE7SUFZbkQ7Ozs7T0FJRztJQUNILFlBQVksS0FBb0IsRUFBRSxFQUFVLEVBQUUsS0FBaUMsRUFBRSxtQ0FBMkMsSUFBSTtRQUM1SCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ2pCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQ2IsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLGdDQUFnQyxHQUFHLGdDQUFnQyxDQUFDO1FBRXpFLE1BQU0sd0JBQXdCLEdBQUcsSUFBSSx3Q0FBd0IsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFHO1lBQ3JFLFlBQVksRUFBRSxLQUFLLENBQUMsWUFBWTtZQUNoQyxjQUFjLEVBQUUsS0FBSyxDQUFDLGNBQWM7WUFDcEMsV0FBVyxFQUFFLEtBQUssQ0FBQyxXQUFXO1NBQ2pDLEVBQUUsZ0NBQWdDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO1FBQ3BGLElBQUksQ0FBQyxRQUFRLEdBQUcsd0JBQXdCLENBQUM7UUFDekMsSUFBSSxDQUFDLHFCQUFxQixHQUFHLHdCQUF3QixDQUFDLHFCQUFxQixDQUFDO0lBQ2hGLENBQUM7Q0FDSjtBQWhDRCxzREFnQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyByb3MgZnJvbSAnQGFsaWNsb3VkL3Jvcy1jZGstY29yZSc7XG5pbXBvcnQgeyBSb3NTZXJ2ZXJHcm91cEF0dGFjaG1lbnQgfSBmcm9tICcuL2Vzcy5nZW5lcmF0ZWQnO1xuLy8gR2VuZXJhdGVkIGZyb20gdGhlIEFsaUNsb3VkIFJPUyBSZXNvdXJjZSBTcGVjaWZpY2F0aW9uXG5leHBvcnQgeyBSb3NTZXJ2ZXJHcm91cEF0dGFjaG1lbnQgYXMgU2VydmVyR3JvdXBBdHRhY2htZW50UHJvcGVydHkgfTtcblxuLyoqXG4gKiBQcm9wZXJ0aWVzIGZvciBkZWZpbmluZyBhIGBTZXJ2ZXJHcm91cEF0dGFjaG1lbnRgLlxuICogU2VlIGh0dHBzOi8vd3d3LmFsaWJhYmFjbG91ZC5jb20vaGVscC9yb3MvZGV2ZWxvcGVyLXJlZmVyZW5jZS9hbGl5dW4tZXNzLXNlcnZlcmdyb3VwYXR0YWNobWVudFxuICovXG5leHBvcnQgaW50ZXJmYWNlIFNlcnZlckdyb3VwQXR0YWNobWVudFByb3BzIHtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHNjYWxpbmdHcm91cElkOiBUaGUgSUQgb2YgdGhlIHNjYWxpbmcgZ3JvdXAuXG4gICAgICovXG4gICAgcmVhZG9ubHkgc2NhbGluZ0dyb3VwSWQ6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHNlcnZlckdyb3VwczogQSBjb2xsZWN0aW9uIG9mIGluZm9ybWF0aW9uIGFib3V0IHNlcnZlciBncm91cHMuXG4gICAgICovXG4gICAgcmVhZG9ubHkgc2VydmVyR3JvdXBzOiBBcnJheTxSb3NTZXJ2ZXJHcm91cEF0dGFjaG1lbnQuU2VydmVyR3JvdXBzUHJvcGVydHkgfCByb3MuSVJlc29sdmFibGU+IHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgZm9yY2VBdHRhY2g6IFNwZWNpZmllcyB3aGV0aGVyIHRvIGFkZCB0aGUgRWxhc3RpYyBDb21wdXRlIFNlcnZpY2UgKEVDUykgaW5zdGFuY2VzIGluIHRoZSBzY2FsaW5nIGdyb3VwIHRvIHRoZSBiYWNrZW5kIHNlcnZlciBncm91cCBvZiB0aGUgbmV3bHkgYXR0YWNoZWQgU0xCIGluc3RhbmNlLiBWYWxpZCB2YWx1ZXM6XG4gICAgICogdHJ1ZVxuICAgICAqIGZhbHNlXG4gICAgICogRGVmYXVsdCB2YWx1ZTogZmFsc2UuXG4gICAgICovXG4gICAgcmVhZG9ubHkgZm9yY2VBdHRhY2g/OiBib29sZWFuIHwgcm9zLklSZXNvbHZhYmxlO1xufVxuXG4vKipcbiAqIFJlcHJlc2VudHMgYSBgU2VydmVyR3JvdXBBdHRhY2htZW50YC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJU2VydmVyR3JvdXBBdHRhY2htZW50IGV4dGVuZHMgcm9zLklSZXNvdXJjZSB7XG4gICAgcmVhZG9ubHkgcHJvcHM6IFNlcnZlckdyb3VwQXR0YWNobWVudFByb3BzO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIFNjYWxpbmdBY3Rpdml0eUlkOiBUaGUgSUQgb2YgdGhlIHNjYWxpbmcgYWN0aXZpdHkgZHVyaW5nIHdoaWNoIG9uZSBvciBtb3JlIFNMQiBpbnN0YW5jZXMgYXJlIGF0dGFjaGVkIHRvIHRoZSBzY2FsaW5nIGdyb3VwIGFuZCB0aGUgRUNTIGluc3RhbmNlcyBpbiB0aGUgc2NhbGluZyBncm91cCBhcmUgYWRkZWQgdG8gdGhlIGJhY2tlbmQgc2VydmVyIGdyb3VwcyBvZiB0aGUgU0xCIGluc3RhbmNlcy5cbk5vdGUgVGhpcyBwYXJhbWV0ZXIgaXMgcmV0dXJuZWQgb25seSBhZnRlciB5b3Ugc2V0IHRoZSBGb3JjZUF0dGFjaCBwYXJhbWV0ZXIgdG8gdHJ1ZS5cbiAgICAgKi9cbiAgICByZWFkb25seSBhdHRyU2NhbGluZ0FjdGl2aXR5SWQ6IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcbn1cbi8qKlxuICogVGhpcyBjbGFzcyBlbmNhcHN1bGF0ZXMgYW5kIGV4dGVuZHMgdGhlIFJPUyByZXNvdXJjZSB0eXBlIGBBTElZVU46OkVTUzo6U2VydmVyR3JvdXBBdHRhY2htZW50YCwgd2hpY2ggaXMgdXNlZCB0byBhZGQgb25lIG9yIG1vcmUgU2VydmVyIExvYWQgQmFsYW5jZXIgKFNMQikgc2VydmVyIGdyb3VwcyB0byBhIHNjYWxpbmcgZ3JvdXAuIFN1cHBvcnRlZCBTTEIgc2VydmVyIGdyb3VwcyBpbmNsdWRlIEFwcGxpY2F0aW9uIExvYWQgQmFsYW5jZXIgKEFMQikgc2VydmVyIGdyb3VwcyBhbmQgTmV0d29yayBMb2FkIEJhbGFuY2VyIChOTEIpIHNlcnZlciBncm91cHMuXG4gKiBATm90ZSBUaGlzIGNsYXNzIG1heSBoYXZlIHNvbWUgbmV3IGZ1bmN0aW9ucyB0byBmYWNpbGl0YXRlIGRldmVsb3BtZW50LCBzbyBpdCBpcyByZWNvbW1lbmRlZCB0byB1c2UgdGhpcyBjbGFzcyBpbnN0ZWFkIG9mIGBSb3NTZXJ2ZXJHcm91cEF0dGFjaG1lbnRgZm9yIGEgbW9yZSBjb252ZW5pZW50IGRldmVsb3BtZW50IGV4cGVyaWVuY2UuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2FsaXl1bi1lc3Mtc2VydmVyZ3JvdXBhdHRhY2htZW50XG4gKi9cbmV4cG9ydCBjbGFzcyBTZXJ2ZXJHcm91cEF0dGFjaG1lbnQgZXh0ZW5kcyByb3MuUmVzb3VyY2UgaW1wbGVtZW50cyBJU2VydmVyR3JvdXBBdHRhY2htZW50IHtcbiAgICBwcm90ZWN0ZWQgc2NvcGU6IHJvcy5Db25zdHJ1Y3Q7XG4gICAgcHJvdGVjdGVkIGlkOiBzdHJpbmc7XG4gICAgcHVibGljIHJlYWRvbmx5IHByb3BzOiBTZXJ2ZXJHcm91cEF0dGFjaG1lbnRQcm9wcztcbiAgICBwcm90ZWN0ZWQgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6IGJvb2xlYW47XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgU2NhbGluZ0FjdGl2aXR5SWQ6IFRoZSBJRCBvZiB0aGUgc2NhbGluZyBhY3Rpdml0eSBkdXJpbmcgd2hpY2ggb25lIG9yIG1vcmUgU0xCIGluc3RhbmNlcyBhcmUgYXR0YWNoZWQgdG8gdGhlIHNjYWxpbmcgZ3JvdXAgYW5kIHRoZSBFQ1MgaW5zdGFuY2VzIGluIHRoZSBzY2FsaW5nIGdyb3VwIGFyZSBhZGRlZCB0byB0aGUgYmFja2VuZCBzZXJ2ZXIgZ3JvdXBzIG9mIHRoZSBTTEIgaW5zdGFuY2VzLlxuTm90ZSBUaGlzIHBhcmFtZXRlciBpcyByZXR1cm5lZCBvbmx5IGFmdGVyIHlvdSBzZXQgdGhlIEZvcmNlQXR0YWNoIHBhcmFtZXRlciB0byB0cnVlLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyU2NhbGluZ0FjdGl2aXR5SWQ6IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFBhcmFtIHNjb3BlIC0gc2NvcGUgaW4gd2hpY2ggdGhpcyByZXNvdXJjZSBpcyBkZWZpbmVkXG4gICAgICogUGFyYW0gaWQgICAgLSBzY29wZWQgaWQgb2YgdGhlIHJlc291cmNlXG4gICAgICogUGFyYW0gcHJvcHMgLSByZXNvdXJjZSBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IHJvcy5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBTZXJ2ZXJHcm91cEF0dGFjaG1lbnRQcm9wcywgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6Ym9vbGVhbiA9IHRydWUpIHtcbiAgICAgICAgc3VwZXIoc2NvcGUsIGlkKTtcbiAgICAgICAgdGhpcy5zY29wZSA9IHNjb3BlO1xuICAgICAgICB0aGlzLmlkID0gaWQ7XG4gICAgICAgIHRoaXMucHJvcHMgPSBwcm9wcztcbiAgICAgICAgdGhpcy5lbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCA9IGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50O1xuXG4gICAgICAgIGNvbnN0IHJvc1NlcnZlckdyb3VwQXR0YWNobWVudCA9IG5ldyBSb3NTZXJ2ZXJHcm91cEF0dGFjaG1lbnQodGhpcywgaWQsICB7XG4gICAgICAgICAgICBzZXJ2ZXJHcm91cHM6IHByb3BzLnNlcnZlckdyb3VwcyxcbiAgICAgICAgICAgIHNjYWxpbmdHcm91cElkOiBwcm9wcy5zY2FsaW5nR3JvdXBJZCxcbiAgICAgICAgICAgIGZvcmNlQXR0YWNoOiBwcm9wcy5mb3JjZUF0dGFjaCxcbiAgICAgICAgfSwgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgJiYgdGhpcy5zdGFjay5lbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCk7XG4gICAgICAgIHRoaXMucmVzb3VyY2UgPSByb3NTZXJ2ZXJHcm91cEF0dGFjaG1lbnQ7XG4gICAgICAgIHRoaXMuYXR0clNjYWxpbmdBY3Rpdml0eUlkID0gcm9zU2VydmVyR3JvdXBBdHRhY2htZW50LmF0dHJTY2FsaW5nQWN0aXZpdHlJZDtcbiAgICB9XG59XG4iXX0=