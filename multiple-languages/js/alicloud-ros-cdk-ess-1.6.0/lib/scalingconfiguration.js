"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ScalingConfiguration = exports.ScalingConfigurationProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ess_generated_1 = require("./ess.generated");
Object.defineProperty(exports, "ScalingConfigurationProperty", { enumerable: true, get: function () { return ess_generated_1.RosScalingConfiguration; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::ESS::ScalingConfiguration`, which is used to create a scaling configuration for a scaling group.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosScalingConfiguration`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-ess-scalingconfiguration
 */
class ScalingConfiguration extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosScalingConfiguration = new ess_generated_1.RosScalingConfiguration(this, id, {
            dedicatedHostId: props.dedicatedHostId,
            scalingConfigurationName: props.scalingConfigurationName,
            resourceGroupId: props.resourceGroupId,
            imageOptionsLoginAsNonRoot: props.imageOptionsLoginAsNonRoot,
            systemDiskDescription: props.systemDiskDescription,
            memory: props.memory,
            systemDiskProvisionedIops: props.systemDiskProvisionedIops,
            cpu: props.cpu,
            systemDiskEncryptAlgorithm: props.systemDiskEncryptAlgorithm,
            ramRoleName: props.ramRoleName,
            privatePoolOptions: props.privatePoolOptions,
            systemDiskPerformanceLevel: props.systemDiskPerformanceLevel,
            imageId: props.imageId,
            systemDiskDiskName: props.systemDiskDiskName,
            hostName: props.hostName,
            loadBalancerWeight: props.loadBalancerWeight,
            instanceId: props.instanceId,
            systemDiskKmsKeyId: props.systemDiskKmsKeyId,
            scalingGroupId: props.scalingGroupId,
            imageFamily: props.imageFamily,
            securityGroupIds: props.securityGroupIds,
            internetChargeType: props.internetChargeType,
            spotInterruptionBehavior: props.spotInterruptionBehavior,
            instanceName: props.instanceName,
            deploymentSetId: props.deploymentSetId,
            internetMaxBandwidthOut: props.internetMaxBandwidthOut,
            instancePatternInfos: props.instancePatternInfos,
            instanceTypeOverrides: props.instanceTypeOverrides,
            affinity: props.affinity,
            securityEnhancementStrategy: props.securityEnhancementStrategy,
            tenancy: props.tenancy,
            diskMappings: props.diskMappings,
            systemDiskSize: props.systemDiskSize,
            userData: props.userData,
            spotDuration: props.spotDuration,
            systemDiskEncrypted: props.systemDiskEncrypted,
            systemDiskAutoSnapshotPolicyId: props.systemDiskAutoSnapshotPolicyId,
            spotPriceLimitForInstanceType: props.spotPriceLimitForInstanceType,
            ipv6AddressCount: props.ipv6AddressCount,
            systemDiskCategories: props.systemDiskCategories,
            spotPriceLimit: props.spotPriceLimit,
            tagList: props.tagList,
            instanceTypes: props.instanceTypes,
            instanceType: props.instanceType,
            spotStrategy: props.spotStrategy,
            passwordInherit: props.passwordInherit,
            password: props.password,
            keyPairName: props.keyPairName,
            ioOptimized: props.ioOptimized,
            zoneId: props.zoneId,
            hpcClusterId: props.hpcClusterId,
            securityGroupId: props.securityGroupId,
            systemDiskCategory: props.systemDiskCategory,
            systemDiskBurstingEnabled: props.systemDiskBurstingEnabled,
            imageName: props.imageName,
            internetMaxBandwidthIn: props.internetMaxBandwidthIn,
            instanceDescription: props.instanceDescription,
            creditSpecification: props.creditSpecification,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosScalingConfiguration;
        this.attrScalingConfigurationId = rosScalingConfiguration.attrScalingConfigurationId;
        this.attrScalingGroupId = rosScalingConfiguration.attrScalingGroupId;
    }
}
exports.ScalingConfiguration = ScalingConfiguration;
//# sourceMappingURL=data:application/json;base64,