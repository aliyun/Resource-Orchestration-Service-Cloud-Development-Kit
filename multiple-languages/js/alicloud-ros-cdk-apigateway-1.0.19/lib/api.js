"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Api = exports.ApiProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const apigateway_generated_1 = require("./apigateway.generated");
Object.defineProperty(exports, "ApiProperty", { enumerable: true, get: function () { return apigateway_generated_1.RosApi; } });
/**
 * A ROS resource type:  `ALIYUN::ApiGateway::Api`
 */
class Api extends ros.Resource {
    /**
     * Create a new `ALIYUN::ApiGateway::Api`.
     *
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosApi = new apigateway_generated_1.RosApi(this, id, {
            description: props.description,
            forceNonceCheck: props.forceNonceCheck,
            allowSignatureMethod: props.allowSignatureMethod,
            errorCodeSamples: props.errorCodeSamples,
            requestParameters: props.requestParameters,
            serviceParametersMap: props.serviceParametersMap,
            appCodeAuthType: props.appCodeAuthType,
            resultBodyModel: props.resultBodyModel,
            serviceConfig: props.serviceConfig,
            webSocketApiType: props.webSocketApiType,
            resultDescriptions: props.resultDescriptions,
            openIdConnectConfig: props.openIdConnectConfig,
            authType: props.authType,
            tags: props.tags,
            requestConfig: props.requestConfig,
            resultSample: props.resultSample,
            disableInternet: props.disableInternet,
            apiName: props.apiName,
            resultType: props.resultType === undefined || props.resultType === null ? 'JSON' : props.resultType,
            failResultSample: props.failResultSample,
            groupId: props.groupId,
            constParameters: props.constParameters,
            systemParameters: props.systemParameters,
            visibility: props.visibility,
            serviceParameters: props.serviceParameters,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosApi;
        this.attrApiId = rosApi.attrApiId;
    }
}
exports.Api = Api;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYXBpLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDhDQUE4QztBQUM5QyxpRUFBZ0Q7QUFFN0IsNEZBRlYsNkJBQU0sT0FFZTtBQXFKOUI7O0dBRUc7QUFDSCxNQUFhLEdBQUksU0FBUSxHQUFHLENBQUMsUUFBUTtJQVlqQzs7Ozs7O09BTUc7SUFDSCxZQUFZLEtBQW9CLEVBQUUsRUFBVSxFQUFFLEtBQWUsRUFBRSxtQ0FBMkMsSUFBSTtRQUMxRyxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRWpCLE1BQU0sTUFBTSxHQUFHLElBQUksNkJBQU0sQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFHO1lBQ2pDLFdBQVcsRUFBRSxLQUFLLENBQUMsV0FBVztZQUM5QixlQUFlLEVBQUUsS0FBSyxDQUFDLGVBQWU7WUFDdEMsb0JBQW9CLEVBQUUsS0FBSyxDQUFDLG9CQUFvQjtZQUNoRCxnQkFBZ0IsRUFBRSxLQUFLLENBQUMsZ0JBQWdCO1lBQ3hDLGlCQUFpQixFQUFFLEtBQUssQ0FBQyxpQkFBaUI7WUFDMUMsb0JBQW9CLEVBQUUsS0FBSyxDQUFDLG9CQUFvQjtZQUNoRCxlQUFlLEVBQUUsS0FBSyxDQUFDLGVBQWU7WUFDdEMsZUFBZSxFQUFFLEtBQUssQ0FBQyxlQUFlO1lBQ3RDLGFBQWEsRUFBRSxLQUFLLENBQUMsYUFBYTtZQUNsQyxnQkFBZ0IsRUFBRSxLQUFLLENBQUMsZ0JBQWdCO1lBQ3hDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxrQkFBa0I7WUFDNUMsbUJBQW1CLEVBQUUsS0FBSyxDQUFDLG1CQUFtQjtZQUM5QyxRQUFRLEVBQUUsS0FBSyxDQUFDLFFBQVE7WUFDeEIsSUFBSSxFQUFFLEtBQUssQ0FBQyxJQUFJO1lBQ2hCLGFBQWEsRUFBRSxLQUFLLENBQUMsYUFBYTtZQUNsQyxZQUFZLEVBQUUsS0FBSyxDQUFDLFlBQVk7WUFDaEMsZUFBZSxFQUFFLEtBQUssQ0FBQyxlQUFlO1lBQ3RDLE9BQU8sRUFBRSxLQUFLLENBQUMsT0FBTztZQUN0QixVQUFVLEVBQUUsS0FBSyxDQUFDLFVBQVUsS0FBSyxTQUFTLElBQUksS0FBSyxDQUFDLFVBQVUsS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFVBQVU7WUFDbkcsZ0JBQWdCLEVBQUUsS0FBSyxDQUFDLGdCQUFnQjtZQUN4QyxPQUFPLEVBQUUsS0FBSyxDQUFDLE9BQU87WUFDdEIsZUFBZSxFQUFFLEtBQUssQ0FBQyxlQUFlO1lBQ3RDLGdCQUFnQixFQUFFLEtBQUssQ0FBQyxnQkFBZ0I7WUFDeEMsVUFBVSxFQUFFLEtBQUssQ0FBQyxVQUFVO1lBQzVCLGlCQUFpQixFQUFFLEtBQUssQ0FBQyxpQkFBaUI7U0FDN0MsRUFBRSxnQ0FBZ0MsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7UUFDcEYsSUFBSSxDQUFDLFFBQVEsR0FBRyxNQUFNLENBQUM7UUFDdkIsSUFBSSxDQUFDLFNBQVMsR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDO0lBQ3RDLENBQUM7Q0FDSjtBQXBERCxrQkFvREMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyByb3MgZnJvbSAnQGFsaWNsb3VkL3Jvcy1jZGstY29yZSc7XG5pbXBvcnQgeyBSb3NBcGkgfSBmcm9tICcuL2FwaWdhdGV3YXkuZ2VuZXJhdGVkJztcbi8vIEdlbmVyYXRlZCBmcm9tIHRoZSBBbGlDbG91ZCBST1MgUmVzb3VyY2UgU3BlY2lmaWNhdGlvblxuZXhwb3J0IHsgUm9zQXBpIGFzIEFwaVByb3BlcnR5IH07XG5cbi8qKlxuICogUHJvcGVydGllcyBmb3IgZGVmaW5pbmcgYSBgQUxJWVVOOjpBcGlHYXRld2F5OjpBcGlgXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQXBpUHJvcHMge1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgYXBpTmFtZTogVGhlIG5hbWUgb2YgdGhlIEFQSS5OZWVkIFs0LCA1MF0gQ2hpbmVzZVxcRW5nbGlzaFxcTnVtYmVyIGNoYXJhY3RlcnMgb3IgXCJfXCIsYW5kIHNob3VsZCBzdGFydCB3aXRoIENoaW5lc2UvRW5nbGlzaCBjaGFyYWN0ZXIuXG4gICAgICovXG4gICAgcmVhZG9ubHkgYXBpTmFtZTogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgZ3JvdXBJZDogVGhlIGlkIG9mIHRoZSBHcm91cC5cbiAgICAgKi9cbiAgICByZWFkb25seSBncm91cElkOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSByZXF1ZXN0Q29uZmlnOiBUaGUgY29uZmlndXJhdGlvbiBvZiB0aGUgcmVxdWVzdFxuICAgICAqL1xuICAgIHJlYWRvbmx5IHJlcXVlc3RDb25maWc6IFJvc0FwaS5SZXF1ZXN0Q29uZmlnUHJvcGVydHkgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSByZXN1bHRTYW1wbGU6IFRoZSBzYW1wbGUgb2YgdGhlIHJlc3VsdC5cbiAgICAgKi9cbiAgICByZWFkb25seSByZXN1bHRTYW1wbGU6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHJlc3VsdFR5cGU6IFRoZSBmb3JtYXQgb2Ygc2VydmljZSdzIHJlc3BvbnNlLCBcIkpTT05cIiwgXCJURVhUXCIsIFwiQklOQVJZXCIsIFwiWE1MXCIsIFwiSFRNTFwiIG9yIFwiUEFTU1RIUk9VR0hcIi4gRGVmYXVsdCBpcyBcIkpTT05cIi5cbiAgICAgKi9cbiAgICByZWFkb25seSByZXN1bHRUeXBlOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBzZXJ2aWNlQ29uZmlnOiBUaGUgY29uZmlndXJhdGlvbiBvZiB0aGUgc2VydmljZS5cbiAgICAgKi9cbiAgICByZWFkb25seSBzZXJ2aWNlQ29uZmlnOiBSb3NBcGkuU2VydmljZUNvbmZpZ1Byb3BlcnR5IHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgdmlzaWJpbGl0eTogV2hldGhlciB0byBtYWtlIHRoZSBBUEkgcHVibGljLiBcIlBVQkxJQ1wiIG9yIFwiUFJJVkFURVwiLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHZpc2liaWxpdHk6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGFsbG93U2lnbmF0dXJlTWV0aG9kOiBJZiB0aGUgQXV0aFR5cGUgaXMgQVBQIGF1dGhlbnRpY2F0aW9uLCB5b3UgbmVlZCB0byBwYXNzIHRoaXMgdmFsdWUgdG8gc3BlY2lmeSB0aGUgc2lnbmF0dXJlIGFsZ29yaXRobS4gSWYgeW91IGRvIG5vdCBzcGVjaWZ5IHRoaXMgcGFyYW1ldGVyLCB0aGUgZGVmYXVsdCB2YWx1ZSBIbWFjU0hBMjU2IGlzIHVzZWQuIFZhbGlkIHZhbHVlczpcbiAgICAgKiBIbWFjU0hBMjU2XG4gICAgICogSG1hY1NIQTEsSG1hY1NIQTI1NlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGFsbG93U2lnbmF0dXJlTWV0aG9kPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgYXBwQ29kZUF1dGhUeXBlOiBXaGVuIEF1dGhUeXBlIGlzIEFQUCBhdXRoZW50aWNhdGlvbiwgdGhlIG9wdGlvbmFsIHZhbHVlcyBhcmUgYXMgZm9sbG93czogSWYgbm90IHBhc3NlZCwgdGhlIGRlZmF1bHQgdmFsdWUgaXMgREVGQVVMVDpcbiAgICAgKiBERUZBVUxUOiBEZWZhdWx0IChzZXQgYnkgZ3JvdXApLlxuICAgICAqIERJU0FCTEU6IE5vdCBhbGxvd2VkXG4gICAgICogSEVBREVSOiBBbGxvdyBBcHBDb2RlIGhlYWRlciBhdXRoZW50aWNhdGlvblxuICAgICAqIEhFQURFUl9RVUVSWTogQWxsb3cgQXBwQ29kZSBoZWFkZXIgYW5kIHF1ZXJ5IGF1dGhlbnRpY2F0aW9uXG4gICAgICovXG4gICAgcmVhZG9ubHkgYXBwQ29kZUF1dGhUeXBlPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgYXV0aFR5cGU6IFR5cGUgb2YgYXV0aG9yaXphdGlvbiBvZiB0aGUgQVBJIC4gXCJBUFBcIixcIkFOT05ZTU9VU1wiLCBvciBcIkFQUE9QRU5JRFwiXG4gICAgICovXG4gICAgcmVhZG9ubHkgYXV0aFR5cGU/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBjb25zdFBhcmFtZXRlcnM6IFRoZSBjb25zdCBwYXJhbWV0ZXJzLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGNvbnN0UGFyYW1ldGVycz86IEFycmF5PFJvc0FwaS5Db25zdFBhcmFtZXRlcnNQcm9wZXJ0eSB8IHJvcy5JUmVzb2x2YWJsZT4gfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBkZXNjcmlwdGlvbjogRGVzY3JpcHRpb24gb2YgdGhlIEFQSSwgbGVzcyB0aGFuIDE4MCBjaGFyYWN0ZXJzLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGRlc2NyaXB0aW9uPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgZGlzYWJsZUludGVybmV0OiBTZXQgRGlzYWJsZUludGVybmV0IHRvIHRydWUsIG9ubHkgc3VwcG9ydCBpbnRyYW5ldCB0byBjYWxsIEFQSS4gXG4gICAgICogU2V0IERpc2FibGVJbnRlcm5ldCB0byBmYWxzZSwgdGhlbiB0aGUgY2FsbCBpcyBub3QgcmVzdHJpY3RlZC4gXG4gICAgICpcbiAgICAgKi9cbiAgICByZWFkb25seSBkaXNhYmxlSW50ZXJuZXQ/OiBib29sZWFuIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgZXJyb3JDb2RlU2FtcGxlczogVGhlIEVycm9yIENvZGUgc2FtcGxlcy5cbiAgICAgKi9cbiAgICByZWFkb25seSBlcnJvckNvZGVTYW1wbGVzPzogQXJyYXk8Um9zQXBpLkVycm9yQ29kZVNhbXBsZXNQcm9wZXJ0eSB8IHJvcy5JUmVzb2x2YWJsZT4gfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBmYWlsUmVzdWx0U2FtcGxlOiBUaGUgc2FtcGxlIG9mIHRoZSBmYWlsIHJlc3VsdC5cbiAgICAgKi9cbiAgICByZWFkb25seSBmYWlsUmVzdWx0U2FtcGxlPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgZm9yY2VOb25jZUNoZWNrOiBTZXQgRm9yY2VOb25jZUNoZWNrIHRvIHRydWUsIGNvbXB1bHNvcmlseSBjaGVjayBYLUNhLU5vbmNlIHdoZW4gcmVxdWVzdGluZywgXG4gICAgICogdGhpcyBpcyB0aGUgdW5pcXVlIGlkZW50aWZpZXIgb2YgdGhlIHJlcXVlc3QsIGdlbmVyYWxseSB1c2luZyBVVUlEIHRvIGlkZW50aWZ5LiBcbiAgICAgKiBUaGUgQVBJIGdhdGV3YXkgd2lsbCB2ZXJpZnkgdGhlIHZhbGlkaXR5IG9mIHRoaXMgcGFyYW1ldGVyIGFmdGVyIHJlY2VpdmluZyB0aGlzIHBhcmFtZXRlci4gXG4gICAgICogVGhlIHNhbWUgdmFsdWUgY2FuIG9ubHkgYmUgdXNlZCBvbmNlIHdpdGhpbiAxNSBtaW51dGVzLiBJdCBjYW4gZWZmZWN0aXZlbHkgcHJldmVudCBBUEkgcmVwbGF5IGF0dGFja3MuXG4gICAgICogU2V0IEZvcmNlTm9uY2VDaGVjayB0byBmYWxzZSwgdGhlbiBubyBjaGVjay5cbiAgICAgKi9cbiAgICByZWFkb25seSBmb3JjZU5vbmNlQ2hlY2s/OiBib29sZWFuIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgb3BlbklkQ29ubmVjdENvbmZpZzogVGhlIGNvbmZpZ3VyYXRpb24gb2YgdGhlIG9wZW4gaWQuXG4gICAgICovXG4gICAgcmVhZG9ubHkgb3BlbklkQ29ubmVjdENvbmZpZz86IFJvc0FwaS5PcGVuSWRDb25uZWN0Q29uZmlnUHJvcGVydHkgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSByZXF1ZXN0UGFyYW1ldGVyczogVGhlIHJlcXVlc3QgcGFyYW1ldGVycy5cbiAgICAgKi9cbiAgICByZWFkb25seSByZXF1ZXN0UGFyYW1ldGVycz86IEFycmF5PFJvc0FwaS5SZXF1ZXN0UGFyYW1ldGVyc1Byb3BlcnR5IHwgcm9zLklSZXNvbHZhYmxlPiB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHJlc3VsdEJvZHlNb2RlbDogVGhlIHJldHVybiByZXN1bHQgb2YgdGhlIEFQSS5cbiAgICAgKi9cbiAgICByZWFkb25seSByZXN1bHRCb2R5TW9kZWw/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSByZXN1bHREZXNjcmlwdGlvbnM6IFRoZSByZXR1cm4gZGVzY3JpcHRpb24gb2YgdGhlIEFQSS5cbiAgICAgKi9cbiAgICByZWFkb25seSByZXN1bHREZXNjcmlwdGlvbnM/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBzZXJ2aWNlUGFyYW1ldGVyczogVGhlIHNlcnZpY2UgcGFyYW1ldGVycy5cbiAgICAgKi9cbiAgICByZWFkb25seSBzZXJ2aWNlUGFyYW1ldGVycz86IEFycmF5PFJvc0FwaS5TZXJ2aWNlUGFyYW1ldGVyc1Byb3BlcnR5IHwgcm9zLklSZXNvbHZhYmxlPiB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHNlcnZpY2VQYXJhbWV0ZXJzTWFwOiBUaGUgbWFwcGluZyByZWxhdGlvbiBiZXR3ZWVuIChyZXF1ZXN0IHBhcmFtZXRlcnNcXGNvbnN0IHBhcmFtZXRlcnNcXHN5c3RlbSBwYXJhbWV0ZXJzKSBhbmQgc2VydmljZSBwYXJhbWV0ZXJzLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHNlcnZpY2VQYXJhbWV0ZXJzTWFwPzogQXJyYXk8Um9zQXBpLlNlcnZpY2VQYXJhbWV0ZXJzTWFwUHJvcGVydHkgfCByb3MuSVJlc29sdmFibGU+IHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgc3lzdGVtUGFyYW1ldGVyczogVGhlIHN5c3RlbSBwYXJhbWV0ZXJzLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHN5c3RlbVBhcmFtZXRlcnM/OiBBcnJheTxSb3NBcGkuU3lzdGVtUGFyYW1ldGVyc1Byb3BlcnR5IHwgcm9zLklSZXNvbHZhYmxlPiB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHRhZ3M6IFRhZ3MgdG8gYXR0YWNoIHRvIGluc3RhbmNlLiBNYXggc3VwcG9ydCAyMCB0YWdzIHRvIGFkZCBkdXJpbmcgY3JlYXRlIGluc3RhbmNlLiBFYWNoIHRhZyB3aXRoIHR3byBwcm9wZXJ0aWVzIEtleSBhbmQgVmFsdWUsIGFuZCBLZXkgaXMgcmVxdWlyZWQuXG4gICAgICovXG4gICAgcmVhZG9ubHkgdGFncz86IFJvc0FwaS5UYWdzUHJvcGVydHlbXTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHdlYlNvY2tldEFwaVR5cGU6IFRoZSB0eXBlIG9mIHRoZSB0d28td2F5IGNvbW11bmljYXRpb24gQVBJLlxuICAgICAqIENPTU1PTjogY29tbW9uIEFQSVxuICAgICAqIFJFR0lTVEVSOiByZWdpc3RlcmVkIEFQSVxuICAgICAqIFVOUkVHSVNURVI6IHVucmVnaXN0ZXJlZCBBUElcbiAgICAgKiBOT1RJRlk6IGRvd25zdHJlYW0gbm90aWZpY2F0aW9uIEFQSVxuICAgICAqL1xuICAgIHJlYWRvbmx5IHdlYlNvY2tldEFwaVR5cGU/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG59XG5cbi8qKlxuICogQSBST1MgcmVzb3VyY2UgdHlwZTogIGBBTElZVU46OkFwaUdhdGV3YXk6OkFwaWBcbiAqL1xuZXhwb3J0IGNsYXNzIEFwaSBleHRlbmRzIHJvcy5SZXNvdXJjZSB7XG5cbiAgICAvKipcbiAgICAgKiBBIGZhY3RvcnkgbWV0aG9kIHRoYXQgY3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzIGZyb20gYW4gb2JqZWN0XG4gICAgICogY29udGFpbmluZyB0aGUgcHJvcGVydGllcyBvZiB0aGlzIFJPUyByZXNvdXJjZSwgd2hpY2ggd2lsbCBiZSBhc3NpZ25lZCB0byBST1MgcmVzb3VyY2UuXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgQXBpSWQ6IFRoZSBpZCBvZiB0aGUgQVBJLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyQXBpSWQ6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBgQUxJWVVOOjpBcGlHYXRld2F5OjpBcGlgLlxuICAgICAqXG4gICAgICogUGFyYW0gc2NvcGUgLSBzY29wZSBpbiB3aGljaCB0aGlzIHJlc291cmNlIGlzIGRlZmluZWRcbiAgICAgKiBQYXJhbSBpZCAgICAtIHNjb3BlZCBpZCBvZiB0aGUgcmVzb3VyY2VcbiAgICAgKiBQYXJhbSBwcm9wcyAtIHJlc291cmNlIHByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihzY29wZTogcm9zLkNvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IEFwaVByb3BzLCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDpib29sZWFuID0gdHJ1ZSkge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQpO1xuXG4gICAgICAgIGNvbnN0IHJvc0FwaSA9IG5ldyBSb3NBcGkodGhpcywgaWQsICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogcHJvcHMuZGVzY3JpcHRpb24sXG4gICAgICAgICAgICBmb3JjZU5vbmNlQ2hlY2s6IHByb3BzLmZvcmNlTm9uY2VDaGVjayxcbiAgICAgICAgICAgIGFsbG93U2lnbmF0dXJlTWV0aG9kOiBwcm9wcy5hbGxvd1NpZ25hdHVyZU1ldGhvZCxcbiAgICAgICAgICAgIGVycm9yQ29kZVNhbXBsZXM6IHByb3BzLmVycm9yQ29kZVNhbXBsZXMsXG4gICAgICAgICAgICByZXF1ZXN0UGFyYW1ldGVyczogcHJvcHMucmVxdWVzdFBhcmFtZXRlcnMsXG4gICAgICAgICAgICBzZXJ2aWNlUGFyYW1ldGVyc01hcDogcHJvcHMuc2VydmljZVBhcmFtZXRlcnNNYXAsXG4gICAgICAgICAgICBhcHBDb2RlQXV0aFR5cGU6IHByb3BzLmFwcENvZGVBdXRoVHlwZSxcbiAgICAgICAgICAgIHJlc3VsdEJvZHlNb2RlbDogcHJvcHMucmVzdWx0Qm9keU1vZGVsLFxuICAgICAgICAgICAgc2VydmljZUNvbmZpZzogcHJvcHMuc2VydmljZUNvbmZpZyxcbiAgICAgICAgICAgIHdlYlNvY2tldEFwaVR5cGU6IHByb3BzLndlYlNvY2tldEFwaVR5cGUsXG4gICAgICAgICAgICByZXN1bHREZXNjcmlwdGlvbnM6IHByb3BzLnJlc3VsdERlc2NyaXB0aW9ucyxcbiAgICAgICAgICAgIG9wZW5JZENvbm5lY3RDb25maWc6IHByb3BzLm9wZW5JZENvbm5lY3RDb25maWcsXG4gICAgICAgICAgICBhdXRoVHlwZTogcHJvcHMuYXV0aFR5cGUsXG4gICAgICAgICAgICB0YWdzOiBwcm9wcy50YWdzLFxuICAgICAgICAgICAgcmVxdWVzdENvbmZpZzogcHJvcHMucmVxdWVzdENvbmZpZyxcbiAgICAgICAgICAgIHJlc3VsdFNhbXBsZTogcHJvcHMucmVzdWx0U2FtcGxlLFxuICAgICAgICAgICAgZGlzYWJsZUludGVybmV0OiBwcm9wcy5kaXNhYmxlSW50ZXJuZXQsXG4gICAgICAgICAgICBhcGlOYW1lOiBwcm9wcy5hcGlOYW1lLFxuICAgICAgICAgICAgcmVzdWx0VHlwZTogcHJvcHMucmVzdWx0VHlwZSA9PT0gdW5kZWZpbmVkIHx8IHByb3BzLnJlc3VsdFR5cGUgPT09IG51bGwgPyAnSlNPTicgOiBwcm9wcy5yZXN1bHRUeXBlLFxuICAgICAgICAgICAgZmFpbFJlc3VsdFNhbXBsZTogcHJvcHMuZmFpbFJlc3VsdFNhbXBsZSxcbiAgICAgICAgICAgIGdyb3VwSWQ6IHByb3BzLmdyb3VwSWQsXG4gICAgICAgICAgICBjb25zdFBhcmFtZXRlcnM6IHByb3BzLmNvbnN0UGFyYW1ldGVycyxcbiAgICAgICAgICAgIHN5c3RlbVBhcmFtZXRlcnM6IHByb3BzLnN5c3RlbVBhcmFtZXRlcnMsXG4gICAgICAgICAgICB2aXNpYmlsaXR5OiBwcm9wcy52aXNpYmlsaXR5LFxuICAgICAgICAgICAgc2VydmljZVBhcmFtZXRlcnM6IHByb3BzLnNlcnZpY2VQYXJhbWV0ZXJzLFxuICAgICAgICB9LCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCAmJiB0aGlzLnN0YWNrLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50KTtcbiAgICAgICAgdGhpcy5yZXNvdXJjZSA9IHJvc0FwaTtcbiAgICAgICAgdGhpcy5hdHRyQXBpSWQgPSByb3NBcGkuYXR0ckFwaUlkO1xuICAgIH1cbn1cbiJdfQ==