"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProtocolService = exports.ProtocolServiceProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const nas_generated_1 = require("./nas.generated");
Object.defineProperty(exports, "ProtocolServiceProperty", { enumerable: true, get: function () { return nas_generated_1.RosProtocolService; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::NAS::ProtocolService`, which is used to create a protocol service for a Cloud Paralleled File System (CPFS) file system.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosProtocolService`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-nas-protocolservice
 */
class ProtocolService extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosProtocolService = new nas_generated_1.RosProtocolService(this, id, {
            description: props.description,
            vpcId: props.vpcId,
            protocolType: props.protocolType === undefined || props.protocolType === null ? 'NFS' : props.protocolType,
            protocolSpec: props.protocolSpec === undefined || props.protocolSpec === null ? 'General' : props.protocolSpec,
            vSwitchId: props.vSwitchId,
            fileSystemId: props.fileSystemId,
            throughput: props.throughput,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosProtocolService;
        this.attrFileSystemId = rosProtocolService.attrFileSystemId;
        this.attrProtocolServiceId = rosProtocolService.attrProtocolServiceId;
    }
}
exports.ProtocolService = ProtocolService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvdG9jb2xzZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicHJvdG9jb2xzZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDhDQUE4QztBQUM5QyxtREFBcUQ7QUFFdEIsd0dBRnRCLGtDQUFrQixPQUUyQjtBQW9EdEQ7Ozs7R0FJRztBQUNILE1BQWEsZUFBZ0IsU0FBUSxHQUFHLENBQUMsUUFBUTtJQVk3Qzs7OztPQUlHO0lBQ0gsWUFBWSxLQUFvQixFQUFFLEVBQVUsRUFBRSxLQUEyQixFQUFFLG1DQUEyQyxJQUFJO1FBQ3RILEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFakIsTUFBTSxrQkFBa0IsR0FBRyxJQUFJLGtDQUFrQixDQUFDLElBQUksRUFBRSxFQUFFLEVBQUc7WUFDekQsV0FBVyxFQUFFLEtBQUssQ0FBQyxXQUFXO1lBQzlCLEtBQUssRUFBRSxLQUFLLENBQUMsS0FBSztZQUNsQixZQUFZLEVBQUUsS0FBSyxDQUFDLFlBQVksS0FBSyxTQUFTLElBQUksS0FBSyxDQUFDLFlBQVksS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFlBQVk7WUFDMUcsWUFBWSxFQUFFLEtBQUssQ0FBQyxZQUFZLEtBQUssU0FBUyxJQUFJLEtBQUssQ0FBQyxZQUFZLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxZQUFZO1lBQzlHLFNBQVMsRUFBRSxLQUFLLENBQUMsU0FBUztZQUMxQixZQUFZLEVBQUUsS0FBSyxDQUFDLFlBQVk7WUFDaEMsVUFBVSxFQUFFLEtBQUssQ0FBQyxVQUFVO1NBQy9CLEVBQUUsZ0NBQWdDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO1FBQ3BGLElBQUksQ0FBQyxRQUFRLEdBQUcsa0JBQWtCLENBQUM7UUFDbkMsSUFBSSxDQUFDLGdCQUFnQixHQUFHLGtCQUFrQixDQUFDLGdCQUFnQixDQUFDO1FBQzVELElBQUksQ0FBQyxxQkFBcUIsR0FBRyxrQkFBa0IsQ0FBQyxxQkFBcUIsQ0FBQztJQUMxRSxDQUFDO0NBQ0o7QUFqQ0QsMENBaUNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcm9zIGZyb20gJ0BhbGljbG91ZC9yb3MtY2RrLWNvcmUnO1xuaW1wb3J0IHsgUm9zUHJvdG9jb2xTZXJ2aWNlIH0gZnJvbSAnLi9uYXMuZ2VuZXJhdGVkJztcbi8vIEdlbmVyYXRlZCBmcm9tIHRoZSBBbGlDbG91ZCBST1MgUmVzb3VyY2UgU3BlY2lmaWNhdGlvblxuZXhwb3J0IHsgUm9zUHJvdG9jb2xTZXJ2aWNlIGFzIFByb3RvY29sU2VydmljZVByb3BlcnR5IH07XG5cbi8qKlxuICogUHJvcGVydGllcyBmb3IgZGVmaW5pbmcgYSBgUHJvdG9jb2xTZXJ2aWNlYC5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvYWxpeXVuLW5hcy1wcm90b2NvbHNlcnZpY2VcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBQcm90b2NvbFNlcnZpY2VQcm9wcyB7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBmaWxlU3lzdGVtSWQ6IEZpbGUgc3lzdGVtIElELlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGZpbGVTeXN0ZW1JZDogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgcHJvdG9jb2xTcGVjOiBUaGUgc3BlYyBvZiBwcm90b2NvbCBzZXJ2aWNlLiBEZWZhdWx0OiBHZW5lcmFsLiBWYWx1ZXM6IEdlbmVyYWxcbiAgICAgKi9cbiAgICByZWFkb25seSBwcm90b2NvbFNwZWM6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHByb3RvY29sVHlwZTogVGhlIHByb3RvY29sIHR5cGUgb2YgYWdyZWVtZW50IHNlcnZpY2UuXG4gICAgICogUmFuZ2VzOlxuICAgICAqIE5GUzogQWdyZWVtZW50IHNlcnZpY2Ugc3VwcG9ydHMgTkZTIHByb3RvY29sIGFjY2Vzcy5cbiAgICAgKiBUaGUgZGVmYXVsdCB2YWx1ZTogTkZTLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHByb3RvY29sVHlwZTogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgdnBjSWQ6IFRoZSBwcm90b2NvbCBzZXJ2aWNlIFZQQ0lEIG5lZWRzIHRvIGJlIGNvbnNpc3RlbnQgd2l0aCB0aGUgZmlsZSBzeXN0ZW0gVlBDLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHZwY0lkOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSB2U3dpdGNoSWQ6IEFncmVlbWVudCBzZXJ2aWNlIHZzd2l0Y2hpZC5cbiAgICAgKi9cbiAgICByZWFkb25seSB2U3dpdGNoSWQ6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGRlc2NyaXB0aW9uOiBEZXNjcmlwdGlvbiBvZiBwcm90b2NvbCBzZXJ2aWNlLlRoZSBjb25zb2xlIHNob3dzIHRoZSBcInByb3RvY29sIHNlcnZpY2UgbmFtZVwiLlxuICAgICAqIGxpbWl0OlxuICAgICAqIFRoZSBsZW5ndGggaXMgMiB0byAxMjggRW5nbGlzaCBvciBDaGluZXNlIGNoYXJhY3RlcnMuXG4gICAgICogU3RhcnQgd2l0aCBhIGxvd2VyY2FzZSBsZXR0ZXIgb3IgQ2hpbmVzZSwgYW5kIHlvdSBjYW5ub3Qgc3RhcnQgd2l0aCBodHRwOlxcL1xcLyBhbmQgaHR0cHM6IFxcL1xcLy5cbiAgICAgKiBJdCBjYW4gY29udGFpbiBudW1iZXJzLCBoYWxmLWhvcm4gY29sb24gKDopLCBkb3duIGxpbmUgKF8pIG9yIHNob3J0IGxpbmVzICgtKS5cbiAgICAgKi9cbiAgICByZWFkb25seSBkZXNjcmlwdGlvbj86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHRocm91Z2hwdXQ6IFRoZSBiYW5kd2lkdGggb2YgdGhlIGFncmVlbWVudCBzZXJ2aWNlLlxuICAgICAqIFVuaXQ6IE1CXFwvUy5cbiAgICAgKi9cbiAgICByZWFkb25seSB0aHJvdWdocHV0PzogbnVtYmVyIHwgcm9zLklSZXNvbHZhYmxlO1xufVxuXG4vKipcbiAqIFRoaXMgY2xhc3MgZW5jYXBzdWxhdGVzIGFuZCBleHRlbmRzIHRoZSBST1MgcmVzb3VyY2UgdHlwZSBgQUxJWVVOOjpOQVM6OlByb3RvY29sU2VydmljZWAsIHdoaWNoIGlzIHVzZWQgdG8gY3JlYXRlIGEgcHJvdG9jb2wgc2VydmljZSBmb3IgYSBDbG91ZCBQYXJhbGxlbGVkIEZpbGUgU3lzdGVtIChDUEZTKSBmaWxlIHN5c3RlbS5cbiAqIEBOb3RlIFRoaXMgY2xhc3MgbWF5IGhhdmUgc29tZSBuZXcgZnVuY3Rpb25zIHRvIGZhY2lsaXRhdGUgZGV2ZWxvcG1lbnQsIHNvIGl0IGlzIHJlY29tbWVuZGVkIHRvIHVzZSB0aGlzIGNsYXNzIGluc3RlYWQgb2YgYFJvc1Byb3RvY29sU2VydmljZWBmb3IgYSBtb3JlIGNvbnZlbmllbnQgZGV2ZWxvcG1lbnQgZXhwZXJpZW5jZS5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvYWxpeXVuLW5hcy1wcm90b2NvbHNlcnZpY2VcbiAqL1xuZXhwb3J0IGNsYXNzIFByb3RvY29sU2VydmljZSBleHRlbmRzIHJvcy5SZXNvdXJjZSB7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgRmlsZVN5c3RlbUlkOiBGaWxlIHN5c3RlbSBJRC5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckZpbGVTeXN0ZW1JZDogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIFByb3RvY29sU2VydmljZUlkOiBBZ3JlZW1lbnQgY2x1c3RlciBncm91cCBJRC5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0clByb3RvY29sU2VydmljZUlkOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQYXJhbSBzY29wZSAtIHNjb3BlIGluIHdoaWNoIHRoaXMgcmVzb3VyY2UgaXMgZGVmaW5lZFxuICAgICAqIFBhcmFtIGlkICAgIC0gc2NvcGVkIGlkIG9mIHRoZSByZXNvdXJjZVxuICAgICAqIFBhcmFtIHByb3BzIC0gcmVzb3VyY2UgcHJvcGVydGllc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiByb3MuQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogUHJvdG9jb2xTZXJ2aWNlUHJvcHMsIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OmJvb2xlYW4gPSB0cnVlKSB7XG4gICAgICAgIHN1cGVyKHNjb3BlLCBpZCk7XG5cbiAgICAgICAgY29uc3Qgcm9zUHJvdG9jb2xTZXJ2aWNlID0gbmV3IFJvc1Byb3RvY29sU2VydmljZSh0aGlzLCBpZCwgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBwcm9wcy5kZXNjcmlwdGlvbixcbiAgICAgICAgICAgIHZwY0lkOiBwcm9wcy52cGNJZCxcbiAgICAgICAgICAgIHByb3RvY29sVHlwZTogcHJvcHMucHJvdG9jb2xUeXBlID09PSB1bmRlZmluZWQgfHwgcHJvcHMucHJvdG9jb2xUeXBlID09PSBudWxsID8gJ05GUycgOiBwcm9wcy5wcm90b2NvbFR5cGUsXG4gICAgICAgICAgICBwcm90b2NvbFNwZWM6IHByb3BzLnByb3RvY29sU3BlYyA9PT0gdW5kZWZpbmVkIHx8IHByb3BzLnByb3RvY29sU3BlYyA9PT0gbnVsbCA/ICdHZW5lcmFsJyA6IHByb3BzLnByb3RvY29sU3BlYyxcbiAgICAgICAgICAgIHZTd2l0Y2hJZDogcHJvcHMudlN3aXRjaElkLFxuICAgICAgICAgICAgZmlsZVN5c3RlbUlkOiBwcm9wcy5maWxlU3lzdGVtSWQsXG4gICAgICAgICAgICB0aHJvdWdocHV0OiBwcm9wcy50aHJvdWdocHV0LFxuICAgICAgICB9LCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCAmJiB0aGlzLnN0YWNrLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50KTtcbiAgICAgICAgdGhpcy5yZXNvdXJjZSA9IHJvc1Byb3RvY29sU2VydmljZTtcbiAgICAgICAgdGhpcy5hdHRyRmlsZVN5c3RlbUlkID0gcm9zUHJvdG9jb2xTZXJ2aWNlLmF0dHJGaWxlU3lzdGVtSWQ7XG4gICAgICAgIHRoaXMuYXR0clByb3RvY29sU2VydmljZUlkID0gcm9zUHJvdG9jb2xTZXJ2aWNlLmF0dHJQcm90b2NvbFNlcnZpY2VJZDtcbiAgICB9XG59XG4iXX0=