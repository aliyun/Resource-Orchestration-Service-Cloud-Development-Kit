"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProtocolMountTarget = exports.ProtocolMountTargetProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const nas_generated_1 = require("./nas.generated");
Object.defineProperty(exports, "ProtocolMountTargetProperty", { enumerable: true, get: function () { return nas_generated_1.RosProtocolMountTarget; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::NAS::ProtocolMountTarget`, which is used to create an export directory for a protocol service.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosProtocolMountTarget`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-nas-protocolmounttarget
 */
class ProtocolMountTarget extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosProtocolMountTarget = new nas_generated_1.RosProtocolMountTarget(this, id, {
            fsetId: props.fsetId,
            path: props.path,
            description: props.description,
            vpcId: props.vpcId,
            vSwitchId: props.vSwitchId,
            accessGroupName: props.accessGroupName,
            fileSystemId: props.fileSystemId,
            protocolServiceId: props.protocolServiceId,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosProtocolMountTarget;
        this.attrExportId = rosProtocolMountTarget.attrExportId;
        this.attrFileSystemId = rosProtocolMountTarget.attrFileSystemId;
        this.attrProtocolMountTargetDomain = rosProtocolMountTarget.attrProtocolMountTargetDomain;
        this.attrProtocolServiceId = rosProtocolMountTarget.attrProtocolServiceId;
    }
}
exports.ProtocolMountTarget = ProtocolMountTarget;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvdG9jb2xtb3VudHRhcmdldC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInByb3RvY29sbW91bnR0YXJnZXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsOENBQThDO0FBQzlDLG1EQUF5RDtBQUV0Qiw0R0FGMUIsc0NBQXNCLE9BRStCO0FBa0U5RDs7OztHQUlHO0FBQ0gsTUFBYSxtQkFBb0IsU0FBUSxHQUFHLENBQUMsUUFBUTtJQXNCakQ7Ozs7T0FJRztJQUNILFlBQVksS0FBb0IsRUFBRSxFQUFVLEVBQUUsS0FBK0IsRUFBRSxtQ0FBMkMsSUFBSTtRQUMxSCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRWpCLE1BQU0sc0JBQXNCLEdBQUcsSUFBSSxzQ0FBc0IsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFHO1lBQ2pFLE1BQU0sRUFBRSxLQUFLLENBQUMsTUFBTTtZQUNwQixJQUFJLEVBQUUsS0FBSyxDQUFDLElBQUk7WUFDaEIsV0FBVyxFQUFFLEtBQUssQ0FBQyxXQUFXO1lBQzlCLEtBQUssRUFBRSxLQUFLLENBQUMsS0FBSztZQUNsQixTQUFTLEVBQUUsS0FBSyxDQUFDLFNBQVM7WUFDMUIsZUFBZSxFQUFFLEtBQUssQ0FBQyxlQUFlO1lBQ3RDLFlBQVksRUFBRSxLQUFLLENBQUMsWUFBWTtZQUNoQyxpQkFBaUIsRUFBRSxLQUFLLENBQUMsaUJBQWlCO1NBQzdDLEVBQUUsZ0NBQWdDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO1FBQ3BGLElBQUksQ0FBQyxRQUFRLEdBQUcsc0JBQXNCLENBQUM7UUFDdkMsSUFBSSxDQUFDLFlBQVksR0FBRyxzQkFBc0IsQ0FBQyxZQUFZLENBQUM7UUFDeEQsSUFBSSxDQUFDLGdCQUFnQixHQUFHLHNCQUFzQixDQUFDLGdCQUFnQixDQUFDO1FBQ2hFLElBQUksQ0FBQyw2QkFBNkIsR0FBRyxzQkFBc0IsQ0FBQyw2QkFBNkIsQ0FBQztRQUMxRixJQUFJLENBQUMscUJBQXFCLEdBQUcsc0JBQXNCLENBQUMscUJBQXFCLENBQUM7SUFDOUUsQ0FBQztDQUNKO0FBOUNELGtEQThDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHJvcyBmcm9tICdAYWxpY2xvdWQvcm9zLWNkay1jb3JlJztcbmltcG9ydCB7IFJvc1Byb3RvY29sTW91bnRUYXJnZXQgfSBmcm9tICcuL25hcy5nZW5lcmF0ZWQnO1xuLy8gR2VuZXJhdGVkIGZyb20gdGhlIEFsaUNsb3VkIFJPUyBSZXNvdXJjZSBTcGVjaWZpY2F0aW9uXG5leHBvcnQgeyBSb3NQcm90b2NvbE1vdW50VGFyZ2V0IGFzIFByb3RvY29sTW91bnRUYXJnZXRQcm9wZXJ0eSB9O1xuXG4vKipcbiAqIFByb3BlcnRpZXMgZm9yIGRlZmluaW5nIGEgYFByb3RvY29sTW91bnRUYXJnZXRgLlxuICogU2VlIGh0dHBzOi8vd3d3LmFsaWJhYmFjbG91ZC5jb20vaGVscC9yb3MvZGV2ZWxvcGVyLXJlZmVyZW5jZS9hbGl5dW4tbmFzLXByb3RvY29sbW91bnR0YXJnZXRcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBQcm90b2NvbE1vdW50VGFyZ2V0UHJvcHMge1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgZmlsZVN5c3RlbUlkOiBGaWxlIHN5c3RlbSBJRC5cbiAgICAgKi9cbiAgICByZWFkb25seSBmaWxlU3lzdGVtSWQ6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHByb3RvY29sU2VydmljZUlkOiBBZ3JlZW1lbnQgc2VydmljZSBJRC5cbiAgICAgKi9cbiAgICByZWFkb25seSBwcm90b2NvbFNlcnZpY2VJZDogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgdnBjSWQ6IFByb3BlciBuZXR3b3JrIElEIGV4cG9ydGVkIGJ5IHRoZSBwcm90b2NvbCBzZXJ2aWNlLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHZwY0lkOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSB2U3dpdGNoSWQ6IFN3aXRjaCBJRCBleHBvcnRlZCBieSB0aGUgcHJvdG9jb2wgc2VydmljZS5cbiAgICAgKi9cbiAgICByZWFkb25seSB2U3dpdGNoSWQ6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGFjY2Vzc0dyb3VwTmFtZTogVGhlIG5hbWUgb2YgdGhlIHBlcm1pc3Npb25zIGdyb3VwLlxuICAgICAqIERlZmF1bHQgdmFsdWU6IERFRkFVTFRfVlBDX0dST1VQX05BTUVcbiAgICAgKi9cbiAgICByZWFkb25seSBhY2Nlc3NHcm91cE5hbWU/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBkZXNjcmlwdGlvbjogRGVzY3JpcHRpb24gb2YgdGhlIHByb3RvY29sIHNlcnZpY2UgdG8gZXhwb3J0IHRoZSBkaXJlY3RvcnkuVGhlIGNvbnNvbGUgaXMgZGlzcGxheWVkIGFzIHRoZSBleHBvcnQgZGlyZWN0b3J5IG5hbWUuXG4gICAgICogbGltaXQ6XG4gICAgICogVGhlIGxlbmd0aCBpcyAyIHRvIDEyOCBFbmdsaXNoIG9yIENoaW5lc2UgY2hhcmFjdGVycy5cbiAgICAgKiBTdGFydCB3aXRoIGEgbG93ZXJjYXNlIGxldHRlciBvciBDaGluZXNlLCBhbmQgeW91IGNhbm5vdCBzdGFydCB3aXRoIGh0dHA6XFwvXFwvIGFuZCBodHRwczogXFwvXFwvLlxuICAgICAqIEl0IGNhbiBjb250YWluIG51bWJlcnMsIGhhbGYtaG9ybiBjb2xvbiAoOiksIGRvd24gbGluZSAoXykgb3Igc2hvcnQgbGluZXMgKC0pLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGRlc2NyaXB0aW9uPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgZnNldElkOiBGaWxlc2V0IElEIG5lZWRzIHRvIGJlIGV4cG9ydGVkLlxuICAgICAqIGxpbWl0OlxuICAgICAqIFRoZSBGaWxlc2V0IG11c3QgZXhpc3QuXG4gICAgICogQSBGaWxlc2V0IGFsbG93cyBvbmx5IG9uZSBleHBvcnQgZGlyZWN0b3J5LlxuICAgICAqIEZpbGVzZXQgYW5kIFBhdGggY2FuIG9ubHkgc3BlY2lmeSBvbmUuXG4gICAgICovXG4gICAgcmVhZG9ubHkgZnNldElkPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgcGF0aDogVGhlIHBhdGggb2YgdGhlIENQRlMgZGlyZWN0b3J5IHRoYXQgbmVlZHMgdG8gYmUgZXhwb3J0ZWQuXG4gICAgICogbGltaXQ6XG4gICAgICogVGhpcyBkaXJlY3RvcnkgbXVzdCBiZSBleGlzdGluZyBkaXJlY3Rvcnkgb24gQ1BGUy5cbiAgICAgKiBUaGUgc2FtZSBkaXJlY3RvcnkgYWxsb3dzIG9ubHkgb25lIGV4cG9ydC5cbiAgICAgKiBGaWxlc2V0IGFuZCBQYXRoIGNhbiBvbmx5IHNwZWNpZnkgb25lLlxuICAgICAqIEZvcm1hdDpcbiAgICAgKiBUaGUgbGVuZ3RoIGlzIDEgdG8gMTAyNCBjaGFyYWN0ZXJzLlxuICAgICAqIFVzZSBVVEYtOCBlbmNvZGluZy5cbiAgICAgKiBJdCBtdXN0IHN0YXJ0IHdpdGggdGhlIHBvc2l0aXZlIG9ibGlxdWUgbGluZSAoXFwvKSwgYW5kIHRoZSByb290IGRpcmVjdG9yeSBtdXN0IGJlXFwvLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHBhdGg/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG59XG5cbi8qKlxuICogVGhpcyBjbGFzcyBlbmNhcHN1bGF0ZXMgYW5kIGV4dGVuZHMgdGhlIFJPUyByZXNvdXJjZSB0eXBlIGBBTElZVU46Ok5BUzo6UHJvdG9jb2xNb3VudFRhcmdldGAsIHdoaWNoIGlzIHVzZWQgdG8gY3JlYXRlIGFuIGV4cG9ydCBkaXJlY3RvcnkgZm9yIGEgcHJvdG9jb2wgc2VydmljZS5cbiAqIEBOb3RlIFRoaXMgY2xhc3MgbWF5IGhhdmUgc29tZSBuZXcgZnVuY3Rpb25zIHRvIGZhY2lsaXRhdGUgZGV2ZWxvcG1lbnQsIHNvIGl0IGlzIHJlY29tbWVuZGVkIHRvIHVzZSB0aGlzIGNsYXNzIGluc3RlYWQgb2YgYFJvc1Byb3RvY29sTW91bnRUYXJnZXRgZm9yIGEgbW9yZSBjb252ZW5pZW50IGRldmVsb3BtZW50IGV4cGVyaWVuY2UuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2FsaXl1bi1uYXMtcHJvdG9jb2xtb3VudHRhcmdldFxuICovXG5leHBvcnQgY2xhc3MgUHJvdG9jb2xNb3VudFRhcmdldCBleHRlbmRzIHJvcy5SZXNvdXJjZSB7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgRXhwb3J0SWQ6IFRoZSBwcm90b2NvbCBzZXJ2aWNlIGV4cG9ydHMgZGlyZWN0b3J5IElELlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyRXhwb3J0SWQ6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBGaWxlU3lzdGVtSWQ6IEZpbGUgc3lzdGVtIElELlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyRmlsZVN5c3RlbUlkOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgUHJvdG9jb2xNb3VudFRhcmdldERvbWFpbjogVGhlIHByb3RvY29sIG1vdW50IHRhcmdldCBkb21haW4uXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJQcm90b2NvbE1vdW50VGFyZ2V0RG9tYWluOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgUHJvdG9jb2xTZXJ2aWNlSWQ6IFByb3RvY29sIHNlcnZpY2UgSUQuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJQcm90b2NvbFNlcnZpY2VJZDogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUGFyYW0gc2NvcGUgLSBzY29wZSBpbiB3aGljaCB0aGlzIHJlc291cmNlIGlzIGRlZmluZWRcbiAgICAgKiBQYXJhbSBpZCAgICAtIHNjb3BlZCBpZCBvZiB0aGUgcmVzb3VyY2VcbiAgICAgKiBQYXJhbSBwcm9wcyAtIHJlc291cmNlIHByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihzY29wZTogcm9zLkNvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IFByb3RvY29sTW91bnRUYXJnZXRQcm9wcywgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6Ym9vbGVhbiA9IHRydWUpIHtcbiAgICAgICAgc3VwZXIoc2NvcGUsIGlkKTtcblxuICAgICAgICBjb25zdCByb3NQcm90b2NvbE1vdW50VGFyZ2V0ID0gbmV3IFJvc1Byb3RvY29sTW91bnRUYXJnZXQodGhpcywgaWQsICB7XG4gICAgICAgICAgICBmc2V0SWQ6IHByb3BzLmZzZXRJZCxcbiAgICAgICAgICAgIHBhdGg6IHByb3BzLnBhdGgsXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogcHJvcHMuZGVzY3JpcHRpb24sXG4gICAgICAgICAgICB2cGNJZDogcHJvcHMudnBjSWQsXG4gICAgICAgICAgICB2U3dpdGNoSWQ6IHByb3BzLnZTd2l0Y2hJZCxcbiAgICAgICAgICAgIGFjY2Vzc0dyb3VwTmFtZTogcHJvcHMuYWNjZXNzR3JvdXBOYW1lLFxuICAgICAgICAgICAgZmlsZVN5c3RlbUlkOiBwcm9wcy5maWxlU3lzdGVtSWQsXG4gICAgICAgICAgICBwcm90b2NvbFNlcnZpY2VJZDogcHJvcHMucHJvdG9jb2xTZXJ2aWNlSWQsXG4gICAgICAgIH0sIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ICYmIHRoaXMuc3RhY2suZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQpO1xuICAgICAgICB0aGlzLnJlc291cmNlID0gcm9zUHJvdG9jb2xNb3VudFRhcmdldDtcbiAgICAgICAgdGhpcy5hdHRyRXhwb3J0SWQgPSByb3NQcm90b2NvbE1vdW50VGFyZ2V0LmF0dHJFeHBvcnRJZDtcbiAgICAgICAgdGhpcy5hdHRyRmlsZVN5c3RlbUlkID0gcm9zUHJvdG9jb2xNb3VudFRhcmdldC5hdHRyRmlsZVN5c3RlbUlkO1xuICAgICAgICB0aGlzLmF0dHJQcm90b2NvbE1vdW50VGFyZ2V0RG9tYWluID0gcm9zUHJvdG9jb2xNb3VudFRhcmdldC5hdHRyUHJvdG9jb2xNb3VudFRhcmdldERvbWFpbjtcbiAgICAgICAgdGhpcy5hdHRyUHJvdG9jb2xTZXJ2aWNlSWQgPSByb3NQcm90b2NvbE1vdW50VGFyZ2V0LmF0dHJQcm90b2NvbFNlcnZpY2VJZDtcbiAgICB9XG59XG4iXX0=