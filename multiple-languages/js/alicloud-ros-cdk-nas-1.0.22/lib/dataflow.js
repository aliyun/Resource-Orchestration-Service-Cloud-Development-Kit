"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataFlow = exports.DataFlowProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const nas_generated_1 = require("./nas.generated");
Object.defineProperty(exports, "DataFlowProperty", { enumerable: true, get: function () { return nas_generated_1.RosDataFlow; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::NAS::DataFlow`, which is used to create a data flow between a Cloud Parallel File Storage (CPFS) file system and an Object Storage Service (OSS) bucket.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosDataFlow`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-nas-dataflow
 */
class DataFlow extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosDataFlow = new nas_generated_1.RosDataFlow(this, id, {
            fsetId: props.fsetId,
            sourceStorage: props.sourceStorage,
            description: props.description,
            sourceSecurityType: props.sourceSecurityType,
            fileSystemId: props.fileSystemId,
            throughput: props.throughput,
            autoRefreshs: props.autoRefreshs,
            autoRefreshPolicy: props.autoRefreshPolicy,
            autoRefreshInterval: props.autoRefreshInterval === undefined || props.autoRefreshInterval === null ? 10 : props.autoRefreshInterval,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosDataFlow;
        this.attrDataFlowId = rosDataFlow.attrDataFlowId;
        this.attrFileSystemId = rosDataFlow.attrFileSystemId;
    }
}
exports.DataFlow = DataFlow;
//# sourceMappingURL=data:application/json;base64,