"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AccessRule = exports.AccessRuleProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const nas_generated_1 = require("./nas.generated");
Object.defineProperty(exports, "AccessRuleProperty", { enumerable: true, get: function () { return nas_generated_1.RosAccessRule; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::NAS::AccessRule`, which is used to create a rule for a permission group.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosAccessRule`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-nas-accessrule
 */
class AccessRule extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosAccessRule = new nas_generated_1.RosAccessRule(this, id, {
            userAccessType: props.userAccessType === undefined || props.userAccessType === null ? 'no_squash' : props.userAccessType,
            priority: props.priority === undefined || props.priority === null ? 1 : props.priority,
            fileSystemType: props.fileSystemType === undefined || props.fileSystemType === null ? 'standard' : props.fileSystemType,
            sourceCidrIp: props.sourceCidrIp,
            accessGroupName: props.accessGroupName,
            ipv6SourceCidrIp: props.ipv6SourceCidrIp,
            rwAccessType: props.rwAccessType === undefined || props.rwAccessType === null ? 'RDWR' : props.rwAccessType,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosAccessRule;
        this.attrAccessRuleId = rosAccessRule.attrAccessRuleId;
    }
}
exports.AccessRule = AccessRule;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjZXNzcnVsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImFjY2Vzc3J1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsOENBQThDO0FBQzlDLG1EQUFnRDtBQUV0QixtR0FGakIsNkJBQWEsT0FFc0I7QUFpRDVDOzs7O0dBSUc7QUFDSCxNQUFhLFVBQVcsU0FBUSxHQUFHLENBQUMsUUFBUTtJQU94Qzs7OztPQUlHO0lBQ0gsWUFBWSxLQUFvQixFQUFFLEVBQVUsRUFBRSxLQUFzQixFQUFFLG1DQUEyQyxJQUFJO1FBQ2pILEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFakIsTUFBTSxhQUFhLEdBQUcsSUFBSSw2QkFBYSxDQUFDLElBQUksRUFBRSxFQUFFLEVBQUc7WUFDL0MsY0FBYyxFQUFFLEtBQUssQ0FBQyxjQUFjLEtBQUssU0FBUyxJQUFJLEtBQUssQ0FBQyxjQUFjLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxjQUFjO1lBQ3hILFFBQVEsRUFBRSxLQUFLLENBQUMsUUFBUSxLQUFLLFNBQVMsSUFBSSxLQUFLLENBQUMsUUFBUSxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsUUFBUTtZQUN0RixjQUFjLEVBQUUsS0FBSyxDQUFDLGNBQWMsS0FBSyxTQUFTLElBQUksS0FBSyxDQUFDLGNBQWMsS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLGNBQWM7WUFDdkgsWUFBWSxFQUFFLEtBQUssQ0FBQyxZQUFZO1lBQ2hDLGVBQWUsRUFBRSxLQUFLLENBQUMsZUFBZTtZQUN0QyxnQkFBZ0IsRUFBRSxLQUFLLENBQUMsZ0JBQWdCO1lBQ3hDLFlBQVksRUFBRSxLQUFLLENBQUMsWUFBWSxLQUFLLFNBQVMsSUFBSSxLQUFLLENBQUMsWUFBWSxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsWUFBWTtTQUM5RyxFQUFFLGdDQUFnQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztRQUNwRixJQUFJLENBQUMsUUFBUSxHQUFHLGFBQWEsQ0FBQztRQUM5QixJQUFJLENBQUMsZ0JBQWdCLEdBQUcsYUFBYSxDQUFDLGdCQUFnQixDQUFDO0lBQzNELENBQUM7Q0FDSjtBQTNCRCxnQ0EyQkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyByb3MgZnJvbSAnQGFsaWNsb3VkL3Jvcy1jZGstY29yZSc7XG5pbXBvcnQgeyBSb3NBY2Nlc3NSdWxlIH0gZnJvbSAnLi9uYXMuZ2VuZXJhdGVkJztcbi8vIEdlbmVyYXRlZCBmcm9tIHRoZSBBbGlDbG91ZCBST1MgUmVzb3VyY2UgU3BlY2lmaWNhdGlvblxuZXhwb3J0IHsgUm9zQWNjZXNzUnVsZSBhcyBBY2Nlc3NSdWxlUHJvcGVydHkgfTtcblxuLyoqXG4gKiBQcm9wZXJ0aWVzIGZvciBkZWZpbmluZyBhIGBBY2Nlc3NSdWxlYC5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvYWxpeXVuLW5hcy1hY2Nlc3NydWxlXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQWNjZXNzUnVsZVByb3BzIHtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGFjY2Vzc0dyb3VwTmFtZTogUGVybWlzc2lvbiBncm91cCBuYW1lXG4gICAgICovXG4gICAgcmVhZG9ubHkgYWNjZXNzR3JvdXBOYW1lOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBmaWxlU3lzdGVtVHlwZTogVGhlIHR5cGUgb2YgZmlsZSBzeXN0ZW0uIFZhbHVlczpcbiAgICAgKiBzdGFuZGFyZDogdGhlIGdlbmVyYWwgTkFTXG4gICAgICogZXh0cmVtZTogdGhlIGV4dHJlbWUgTkFTXG4gICAgICovXG4gICAgcmVhZG9ubHkgZmlsZVN5c3RlbVR5cGU/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBpcHY2U291cmNlQ2lkcklwOiBTb3VyY2UgSVB2NiBDSURSIGFkZHJlc3Mgc2VnbWVudC4gSVAgYWRkcmVzc2VzIGluIENJRFIgZm9ybWF0IGFuZCBJUHY2IGZvcm1hdCBhcmUgc3VwcG9ydGVkLlxuICAgICAqIEN1cnJlbnRseSwgb25seSB0aGUgdWx0cmEtZmFzdCBOQVMgaW4gbWFpbmxhbmQgQ2hpbmEgc3VwcG9ydHMgdGhlIElQdjYgZnVuY3Rpb24sIGFuZCB0aGUgZmlsZSBzeXN0ZW0gbmVlZHMgdG8gZW5hYmxlIHRoZSBJUHY2IGZ1bmN0aW9uLlxuICAgICAqIE9ubHkgVlBDIHByaXZhdGUgbmV0d29yayBpcyBzdXBwb3J0ZWQuXG4gICAgICogSVB2NCBhbmQgSVB2NiBhcmUgbXV0dWFsbHkgZXhjbHVzaXZlLCBhbmQgdGhlIHR5cGVzIGNhbm5vdCBiZSBjb252ZXJ0ZWQuXG4gICAgICovXG4gICAgcmVhZG9ubHkgaXB2NlNvdXJjZUNpZHJJcD86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHByaW9yaXR5OiBQcmlvcml0eSBsZXZlbC4gUmFuZ2U6IDEtMTAwLiBEZWZhdWx0IHZhbHVlOiAxXG4gICAgICovXG4gICAgcmVhZG9ubHkgcHJpb3JpdHk/OiBudW1iZXIgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSByd0FjY2Vzc1R5cGU6IFJlYWQtd3JpdGUgcGVybWlzc2lvbiB0eXBlOiBSRFdSIChkZWZhdWx0KSwgUkRPTkxZXG4gICAgICovXG4gICAgcmVhZG9ubHkgcndBY2Nlc3NUeXBlPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgc291cmNlQ2lkcklwOiBBZGRyZXNzIG9yIGFkZHJlc3Mgc2VnbWVudFxuICAgICAqL1xuICAgIHJlYWRvbmx5IHNvdXJjZUNpZHJJcD86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHVzZXJBY2Nlc3NUeXBlOiBVc2VyIHBlcm1pc3Npb24gdHlwZTogbm9fc3F1YXNoIChkZWZhdWx0KSwgcm9vdF9zcXVhc2gsIGFsbF9zcXVhc2hcbiAgICAgKi9cbiAgICByZWFkb25seSB1c2VyQWNjZXNzVHlwZT86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcbn1cblxuLyoqXG4gKiBUaGlzIGNsYXNzIGVuY2Fwc3VsYXRlcyBhbmQgZXh0ZW5kcyB0aGUgUk9TIHJlc291cmNlIHR5cGUgYEFMSVlVTjo6TkFTOjpBY2Nlc3NSdWxlYCwgd2hpY2ggaXMgdXNlZCB0byBjcmVhdGUgYSBydWxlIGZvciBhIHBlcm1pc3Npb24gZ3JvdXAuXG4gKiBATm90ZSBUaGlzIGNsYXNzIG1heSBoYXZlIHNvbWUgbmV3IGZ1bmN0aW9ucyB0byBmYWNpbGl0YXRlIGRldmVsb3BtZW50LCBzbyBpdCBpcyByZWNvbW1lbmRlZCB0byB1c2UgdGhpcyBjbGFzcyBpbnN0ZWFkIG9mIGBSb3NBY2Nlc3NSdWxlYGZvciBhIG1vcmUgY29udmVuaWVudCBkZXZlbG9wbWVudCBleHBlcmllbmNlLlxuICogU2VlIGh0dHBzOi8vd3d3LmFsaWJhYmFjbG91ZC5jb20vaGVscC9yb3MvZGV2ZWxvcGVyLXJlZmVyZW5jZS9hbGl5dW4tbmFzLWFjY2Vzc3J1bGVcbiAqL1xuZXhwb3J0IGNsYXNzIEFjY2Vzc1J1bGUgZXh0ZW5kcyByb3MuUmVzb3VyY2Uge1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIEFjY2Vzc1J1bGVJZDogUnVsZSBzZXJpYWwgbnVtYmVyXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJBY2Nlc3NSdWxlSWQ6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFBhcmFtIHNjb3BlIC0gc2NvcGUgaW4gd2hpY2ggdGhpcyByZXNvdXJjZSBpcyBkZWZpbmVkXG4gICAgICogUGFyYW0gaWQgICAgLSBzY29wZWQgaWQgb2YgdGhlIHJlc291cmNlXG4gICAgICogUGFyYW0gcHJvcHMgLSByZXNvdXJjZSBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IHJvcy5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBBY2Nlc3NSdWxlUHJvcHMsIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OmJvb2xlYW4gPSB0cnVlKSB7XG4gICAgICAgIHN1cGVyKHNjb3BlLCBpZCk7XG5cbiAgICAgICAgY29uc3Qgcm9zQWNjZXNzUnVsZSA9IG5ldyBSb3NBY2Nlc3NSdWxlKHRoaXMsIGlkLCAge1xuICAgICAgICAgICAgdXNlckFjY2Vzc1R5cGU6IHByb3BzLnVzZXJBY2Nlc3NUeXBlID09PSB1bmRlZmluZWQgfHwgcHJvcHMudXNlckFjY2Vzc1R5cGUgPT09IG51bGwgPyAnbm9fc3F1YXNoJyA6IHByb3BzLnVzZXJBY2Nlc3NUeXBlLFxuICAgICAgICAgICAgcHJpb3JpdHk6IHByb3BzLnByaW9yaXR5ID09PSB1bmRlZmluZWQgfHwgcHJvcHMucHJpb3JpdHkgPT09IG51bGwgPyAxIDogcHJvcHMucHJpb3JpdHksXG4gICAgICAgICAgICBmaWxlU3lzdGVtVHlwZTogcHJvcHMuZmlsZVN5c3RlbVR5cGUgPT09IHVuZGVmaW5lZCB8fCBwcm9wcy5maWxlU3lzdGVtVHlwZSA9PT0gbnVsbCA/ICdzdGFuZGFyZCcgOiBwcm9wcy5maWxlU3lzdGVtVHlwZSxcbiAgICAgICAgICAgIHNvdXJjZUNpZHJJcDogcHJvcHMuc291cmNlQ2lkcklwLFxuICAgICAgICAgICAgYWNjZXNzR3JvdXBOYW1lOiBwcm9wcy5hY2Nlc3NHcm91cE5hbWUsXG4gICAgICAgICAgICBpcHY2U291cmNlQ2lkcklwOiBwcm9wcy5pcHY2U291cmNlQ2lkcklwLFxuICAgICAgICAgICAgcndBY2Nlc3NUeXBlOiBwcm9wcy5yd0FjY2Vzc1R5cGUgPT09IHVuZGVmaW5lZCB8fCBwcm9wcy5yd0FjY2Vzc1R5cGUgPT09IG51bGwgPyAnUkRXUicgOiBwcm9wcy5yd0FjY2Vzc1R5cGUsXG4gICAgICAgIH0sIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ICYmIHRoaXMuc3RhY2suZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQpO1xuICAgICAgICB0aGlzLnJlc291cmNlID0gcm9zQWNjZXNzUnVsZTtcbiAgICAgICAgdGhpcy5hdHRyQWNjZXNzUnVsZUlkID0gcm9zQWNjZXNzUnVsZS5hdHRyQWNjZXNzUnVsZUlkO1xuICAgIH1cbn1cbiJdfQ==