"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Execution = exports.ExecutionProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const oos_generated_1 = require("./oos.generated");
Object.defineProperty(exports, "ExecutionProperty", { enumerable: true, get: function () { return oos_generated_1.RosExecution; } });
/**
 * A ROS resource type:  `ALIYUN::OOS::Execution`
 */
class Execution extends ros.Resource {
    /**
     * Create a new `ALIYUN::OOS::Execution`.
     *
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosExecution = new oos_generated_1.RosExecution(this, id, {
            parentExecutionId: props.parentExecutionId,
            resourceOptions: props.resourceOptions,
            parameters: props.parameters,
            safetyCheck: props.safetyCheck === undefined || props.safetyCheck === null ? 'ConfirmEveryHighRiskAction' : props.safetyCheck,
            resourceGroupId: props.resourceGroupId,
            mode: props.mode === undefined || props.mode === null ? 'Automatic' : props.mode,
            templateName: props.templateName,
            templateVersion: props.templateVersion,
            tags: props.tags,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosExecution;
        this.attrCounters = rosExecution.attrCounters;
        this.attrCurlCli = rosExecution.attrCurlCli;
        this.attrExecutionId = rosExecution.attrExecutionId;
        this.attrOutputs = rosExecution.attrOutputs;
        this.attrPowerShellCurlCli = rosExecution.attrPowerShellCurlCli;
        this.attrStatus = rosExecution.attrStatus;
        this.attrStatusMessage = rosExecution.attrStatusMessage;
        this.attrWindowsCurlCli = rosExecution.attrWindowsCurlCli;
    }
}
exports.Execution = Execution;
//# sourceMappingURL=data:application/json;base64,