"use strict";
// Generated from the AliCloud ROS Resource Specification
Object.defineProperty(exports, "__esModule", { value: true });
exports.RosVServerGroupAttachment = exports.RosServerGroupAttachment = exports.RosScheduledTask = exports.RosScalingRule = exports.RosScalingGroupEnable = exports.RosScalingGroup = exports.RosScalingConfiguration = exports.RosLoadBalancerAttachment = exports.RosLifecycleHook = exports.RosEciScalingConfiguration = exports.RosAlarmTaskEnable = exports.RosAlarmTask = void 0;
const ros = require("@alicloud/ros-cdk-core");
/**
 * Determine whether the given properties match those of a `RosAlarmTaskProps`
 *
 * @param properties - the TypeScript properties of a `RosAlarmTaskProps`
 *
 * @returns the result of the validation.
 */
function RosAlarmTaskPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    if (properties.comparisonOperator && (typeof properties.comparisonOperator) !== 'object') {
        errors.collect(ros.propertyValidator('comparisonOperator', ros.validateAllowedValues)({
            data: properties.comparisonOperator,
            allowedValues: [">=", "<=", ">", "<"],
        }));
    }
    errors.collect(ros.propertyValidator('comparisonOperator', ros.validateString)(properties.comparisonOperator));
    errors.collect(ros.propertyValidator('description', ros.validateString)(properties.description));
    errors.collect(ros.propertyValidator('scalingGroupId', ros.requiredValidator)(properties.scalingGroupId));
    errors.collect(ros.propertyValidator('scalingGroupId', ros.validateString)(properties.scalingGroupId));
    if (properties.metricType && (typeof properties.metricType) !== 'object') {
        errors.collect(ros.propertyValidator('metricType', ros.validateAllowedValues)({
            data: properties.metricType,
            allowedValues: ["system", "custom"],
        }));
    }
    errors.collect(ros.propertyValidator('metricType', ros.validateString)(properties.metricType));
    if (properties.evaluationCount && (typeof properties.evaluationCount) !== 'object') {
        errors.collect(ros.propertyValidator('evaluationCount', ros.validateRange)({
            data: properties.evaluationCount,
            min: 1,
            max: undefined,
        }));
    }
    errors.collect(ros.propertyValidator('evaluationCount', ros.validateNumber)(properties.evaluationCount));
    if (properties.period && (typeof properties.period) !== 'object') {
        errors.collect(ros.propertyValidator('period', ros.validateAllowedValues)({
            data: properties.period,
            allowedValues: [60, 120, 300, 900],
        }));
    }
    errors.collect(ros.propertyValidator('period', ros.validateNumber)(properties.period));
    if (properties.dimensions && (Array.isArray(properties.dimensions) || (typeof properties.dimensions) === 'string')) {
        errors.collect(ros.propertyValidator('dimensions', ros.validateLength)({
            data: properties.dimensions.length,
            min: 1,
            max: undefined,
        }));
    }
    errors.collect(ros.propertyValidator('dimensions', ros.listValidator(RosAlarmTask_DimensionsPropertyValidator))(properties.dimensions));
    if (properties.statistics && (typeof properties.statistics) !== 'object') {
        errors.collect(ros.propertyValidator('statistics', ros.validateAllowedValues)({
            data: properties.statistics,
            allowedValues: ["Average", "Minimum", "Maximum"],
        }));
    }
    errors.collect(ros.propertyValidator('statistics', ros.validateString)(properties.statistics));
    errors.collect(ros.propertyValidator('name', ros.validateString)(properties.name));
    errors.collect(ros.propertyValidator('groupId', ros.validateNumber)(properties.groupId));
    errors.collect(ros.propertyValidator('metricName', ros.requiredValidator)(properties.metricName));
    errors.collect(ros.propertyValidator('metricName', ros.validateString)(properties.metricName));
    errors.collect(ros.propertyValidator('alarmAction', ros.requiredValidator)(properties.alarmAction));
    if (properties.alarmAction && (Array.isArray(properties.alarmAction) || (typeof properties.alarmAction) === 'string')) {
        errors.collect(ros.propertyValidator('alarmAction', ros.validateLength)({
            data: properties.alarmAction.length,
            min: 1,
            max: 5,
        }));
    }
    errors.collect(ros.propertyValidator('alarmAction', ros.listValidator(ros.validateString))(properties.alarmAction));
    errors.collect(ros.propertyValidator('threshold', ros.requiredValidator)(properties.threshold));
    errors.collect(ros.propertyValidator('threshold', ros.validateNumber)(properties.threshold));
    return errors.wrap('supplied properties not correct for "RosAlarmTaskProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ESS::AlarmTask` resource
 *
 * @param properties - the TypeScript properties of a `RosAlarmTaskProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ESS::AlarmTask` resource.
 */
// @ts-ignore TS6133
function rosAlarmTaskPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosAlarmTaskPropsValidator(properties).assertSuccess();
    }
    return {
        'AlarmAction': ros.listMapper(ros.stringToRosTemplate)(properties.alarmAction),
        'MetricName': ros.stringToRosTemplate(properties.metricName),
        'ScalingGroupId': ros.stringToRosTemplate(properties.scalingGroupId),
        'Threshold': ros.numberToRosTemplate(properties.threshold),
        'ComparisonOperator': ros.stringToRosTemplate(properties.comparisonOperator),
        'Description': ros.stringToRosTemplate(properties.description),
        'Dimensions': ros.listMapper(rosAlarmTaskDimensionsPropertyToRosTemplate)(properties.dimensions),
        'EvaluationCount': ros.numberToRosTemplate(properties.evaluationCount),
        'GroupId': ros.numberToRosTemplate(properties.groupId),
        'MetricType': ros.stringToRosTemplate(properties.metricType),
        'Name': ros.stringToRosTemplate(properties.name),
        'Period': ros.numberToRosTemplate(properties.period),
        'Statistics': ros.stringToRosTemplate(properties.statistics),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::ESS::AlarmTask`, which is used to create a metric-based alarm task.
 * @Note This class does not contain additional functions, so it is recommended to use the `AlarmTask` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-ess-alarmtask
 */
class RosAlarmTask extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosAlarmTask.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrAlarmTaskId = this.getAtt('AlarmTaskId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.alarmAction = props.alarmAction;
        this.metricName = props.metricName;
        this.scalingGroupId = props.scalingGroupId;
        this.threshold = props.threshold;
        this.comparisonOperator = props.comparisonOperator;
        this.description = props.description;
        this.dimensions = props.dimensions;
        this.evaluationCount = props.evaluationCount;
        this.groupId = props.groupId;
        this.metricType = props.metricType;
        this.name = props.name;
        this.period = props.period;
        this.statistics = props.statistics;
    }
    get rosProperties() {
        return {
            alarmAction: this.alarmAction,
            metricName: this.metricName,
            scalingGroupId: this.scalingGroupId,
            threshold: this.threshold,
            comparisonOperator: this.comparisonOperator,
            description: this.description,
            dimensions: this.dimensions,
            evaluationCount: this.evaluationCount,
            groupId: this.groupId,
            metricType: this.metricType,
            name: this.name,
            period: this.period,
            statistics: this.statistics,
        };
    }
    renderProperties(props) {
        return rosAlarmTaskPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosAlarmTask = RosAlarmTask;
/**
 * The resource type name for this resource class.
 */
RosAlarmTask.ROS_RESOURCE_TYPE_NAME = "ALIYUN::ESS::AlarmTask";
/**
 * Determine whether the given properties match those of a `DimensionsProperty`
 *
 * @param properties - the TypeScript properties of a `DimensionsProperty`
 *
 * @returns the result of the validation.
 */
function RosAlarmTask_DimensionsPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('dimensionValue', ros.requiredValidator)(properties.dimensionValue));
    errors.collect(ros.propertyValidator('dimensionValue', ros.validateString)(properties.dimensionValue));
    errors.collect(ros.propertyValidator('dimensionKey', ros.requiredValidator)(properties.dimensionKey));
    errors.collect(ros.propertyValidator('dimensionKey', ros.validateString)(properties.dimensionKey));
    return errors.wrap('supplied properties not correct for "DimensionsProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ESS::AlarmTask.Dimensions` resource
 *
 * @param properties - the TypeScript properties of a `DimensionsProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ESS::AlarmTask.Dimensions` resource.
 */
// @ts-ignore TS6133
function rosAlarmTaskDimensionsPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosAlarmTask_DimensionsPropertyValidator(properties).assertSuccess();
    return {
        'DimensionValue': ros.stringToRosTemplate(properties.dimensionValue),
        'DimensionKey': ros.stringToRosTemplate(properties.dimensionKey),
    };
}
/**
 * Determine whether the given properties match those of a `RosAlarmTaskEnableProps`
 *
 * @param properties - the TypeScript properties of a `RosAlarmTaskEnableProps`
 *
 * @returns the result of the validation.
 */
function RosAlarmTaskEnablePropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('enable', ros.requiredValidator)(properties.enable));
    errors.collect(ros.propertyValidator('enable', ros.validateBoolean)(properties.enable));
    errors.collect(ros.propertyValidator('alarmTaskId', ros.requiredValidator)(properties.alarmTaskId));
    errors.collect(ros.propertyValidator('alarmTaskId', ros.validateString)(properties.alarmTaskId));
    return errors.wrap('supplied properties not correct for "RosAlarmTaskEnableProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ESS::AlarmTaskEnable` resource
 *
 * @param properties - the TypeScript properties of a `RosAlarmTaskEnableProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ESS::AlarmTaskEnable` resource.
 */
// @ts-ignore TS6133
function rosAlarmTaskEnablePropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosAlarmTaskEnablePropsValidator(properties).assertSuccess();
    }
    return {
        'AlarmTaskId': ros.stringToRosTemplate(properties.alarmTaskId),
        'Enable': ros.booleanToRosTemplate(properties.enable),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::ESS::AlarmTaskEnable`, which is used to start an alarm task. You can call this operation to enable alarm tasks when the task is stopped.
 * @Note This class does not contain additional functions, so it is recommended to use the `AlarmTaskEnable` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-ess-alarmtaskenable
 */
class RosAlarmTaskEnable extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosAlarmTaskEnable.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.alarmTaskId = props.alarmTaskId;
        this.enable = props.enable;
    }
    get rosProperties() {
        return {
            alarmTaskId: this.alarmTaskId,
            enable: this.enable,
        };
    }
    renderProperties(props) {
        return rosAlarmTaskEnablePropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosAlarmTaskEnable = RosAlarmTaskEnable;
/**
 * The resource type name for this resource class.
 */
RosAlarmTaskEnable.ROS_RESOURCE_TYPE_NAME = "ALIYUN::ESS::AlarmTaskEnable";
/**
 * Determine whether the given properties match those of a `RosEciScalingConfigurationProps`
 *
 * @param properties - the TypeScript properties of a `RosEciScalingConfigurationProps`
 *
 * @returns the result of the validation.
 */
function RosEciScalingConfigurationPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('scalingConfigurationName', ros.requiredValidator)(properties.scalingConfigurationName));
    errors.collect(ros.propertyValidator('scalingConfigurationName', ros.validateString)(properties.scalingConfigurationName));
    errors.collect(ros.propertyValidator('ntpServers', ros.listValidator(ros.validateString))(properties.ntpServers));
    errors.collect(ros.propertyValidator('resourceGroupId', ros.validateString)(properties.resourceGroupId));
    errors.collect(ros.propertyValidator('memory', ros.validateNumber)(properties.memory));
    errors.collect(ros.propertyValidator('dnsConfigSearches', ros.listValidator(ros.validateString))(properties.dnsConfigSearches));
    errors.collect(ros.propertyValidator('dataCachePl', ros.validateString)(properties.dataCachePl));
    if (properties.containers && (Array.isArray(properties.containers) || (typeof properties.containers) === 'string')) {
        errors.collect(ros.propertyValidator('containers', ros.validateLength)({
            data: properties.containers.length,
            min: undefined,
            max: 10,
        }));
    }
    errors.collect(ros.propertyValidator('containers', ros.listValidator(RosEciScalingConfiguration_ContainersPropertyValidator))(properties.containers));
    errors.collect(ros.propertyValidator('cpu', ros.validateNumber)(properties.cpu));
    errors.collect(ros.propertyValidator('containerGroupName', ros.requiredValidator)(properties.containerGroupName));
    errors.collect(ros.propertyValidator('containerGroupName', ros.validateString)(properties.containerGroupName));
    errors.collect(ros.propertyValidator('ingressBandwidth', ros.validateNumber)(properties.ingressBandwidth));
    errors.collect(ros.propertyValidator('imageSnapshotId', ros.validateString)(properties.imageSnapshotId));
    errors.collect(ros.propertyValidator('dataCacheProvisionedIops', ros.validateNumber)(properties.dataCacheProvisionedIops));
    errors.collect(ros.propertyValidator('egressBandwidth', ros.validateNumber)(properties.egressBandwidth));
    errors.collect(ros.propertyValidator('volumes', ros.listValidator(RosEciScalingConfiguration_VolumesPropertyValidator))(properties.volumes));
    errors.collect(ros.propertyValidator('ramRoleName', ros.validateString)(properties.ramRoleName));
    errors.collect(ros.propertyValidator('autoMatchImageCache', ros.validateBoolean)(properties.autoMatchImageCache));
    errors.collect(ros.propertyValidator('dataCacheBucket', ros.validateString)(properties.dataCacheBucket));
    errors.collect(ros.propertyValidator('ipv6AddressCount', ros.validateNumber)(properties.ipv6AddressCount));
    errors.collect(ros.propertyValidator('dnsConfigOptions', ros.listValidator(RosEciScalingConfiguration_DnsConfigOptionsPropertyValidator))(properties.dnsConfigOptions));
    errors.collect(ros.propertyValidator('spotPriceLimit', ros.validateNumber)(properties.spotPriceLimit));
    if (properties.instanceTypes && (Array.isArray(properties.instanceTypes) || (typeof properties.instanceTypes) === 'string')) {
        errors.collect(ros.propertyValidator('instanceTypes', ros.validateLength)({
            data: properties.instanceTypes.length,
            min: undefined,
            max: 5,
        }));
    }
    errors.collect(ros.propertyValidator('instanceTypes', ros.listValidator(ros.validateString))(properties.instanceTypes));
    if (properties.tags && (Array.isArray(properties.tags) || (typeof properties.tags) === 'string')) {
        errors.collect(ros.propertyValidator('tags', ros.validateLength)({
            data: properties.tags.length,
            min: undefined,
            max: 128,
        }));
    }
    errors.collect(ros.propertyValidator('tags', ros.listValidator(RosEciScalingConfiguration_TagsPropertyValidator))(properties.tags));
    errors.collect(ros.propertyValidator('hostName', ros.validateString)(properties.hostName));
    if (properties.spotStrategy && (typeof properties.spotStrategy) !== 'object') {
        errors.collect(ros.propertyValidator('spotStrategy', ros.validateAllowedValues)({
            data: properties.spotStrategy,
            allowedValues: ["NoSpot", "SpotAsPriceGo", "SpotWithPriceLimit"],
        }));
    }
    errors.collect(ros.propertyValidator('spotStrategy', ros.validateString)(properties.spotStrategy));
    errors.collect(ros.propertyValidator('dnsConfigNameServers', ros.listValidator(ros.validateString))(properties.dnsConfigNameServers));
    errors.collect(ros.propertyValidator('activeDeadlineSeconds', ros.validateNumber)(properties.activeDeadlineSeconds));
    errors.collect(ros.propertyValidator('acrRegistryInfos', ros.listValidator(RosEciScalingConfiguration_AcrRegistryInfosPropertyValidator))(properties.acrRegistryInfos));
    errors.collect(ros.propertyValidator('initContainers', ros.listValidator(RosEciScalingConfiguration_InitContainersPropertyValidator))(properties.initContainers));
    errors.collect(ros.propertyValidator('loadBalancerWeight', ros.validateNumber)(properties.loadBalancerWeight));
    errors.collect(ros.propertyValidator('cpuOptionsThreadsPerCore', ros.validateNumber)(properties.cpuOptionsThreadsPerCore));
    errors.collect(ros.propertyValidator('dataCacheBurstingEnabled', ros.validateBoolean)(properties.dataCacheBurstingEnabled));
    errors.collect(ros.propertyValidator('terminationGracePeriodSeconds', ros.validateNumber)(properties.terminationGracePeriodSeconds));
    errors.collect(ros.propertyValidator('scalingGroupId', ros.requiredValidator)(properties.scalingGroupId));
    errors.collect(ros.propertyValidator('scalingGroupId', ros.validateString)(properties.scalingGroupId));
    errors.collect(ros.propertyValidator('securityGroupId', ros.requiredValidator)(properties.securityGroupId));
    errors.collect(ros.propertyValidator('securityGroupId', ros.validateString)(properties.securityGroupId));
    if (properties.restartPolicy && (typeof properties.restartPolicy) !== 'object') {
        errors.collect(ros.propertyValidator('restartPolicy', ros.validateAllowedValues)({
            data: properties.restartPolicy,
            allowedValues: ["Always", "Never", "OnFailure"],
        }));
    }
    errors.collect(ros.propertyValidator('restartPolicy', ros.validateString)(properties.restartPolicy));
    errors.collect(ros.propertyValidator('cpuOptionsCore', ros.validateNumber)(properties.cpuOptionsCore));
    errors.collect(ros.propertyValidator('autoCreateEip', ros.validateBoolean)(properties.autoCreateEip));
    errors.collect(ros.propertyValidator('costOptimization', ros.validateBoolean)(properties.costOptimization));
    errors.collect(ros.propertyValidator('hostAliases', ros.listValidator(RosEciScalingConfiguration_HostAliasesPropertyValidator))(properties.hostAliases));
    errors.collect(ros.propertyValidator('securityContextSysctls', ros.listValidator(RosEciScalingConfiguration_SecurityContextSysctlsPropertyValidator))(properties.securityContextSysctls));
    errors.collect(ros.propertyValidator('eipBandwidth', ros.validateNumber)(properties.eipBandwidth));
    errors.collect(ros.propertyValidator('imageRegistryCredentials', ros.listValidator(RosEciScalingConfiguration_ImageRegistryCredentialsPropertyValidator))(properties.imageRegistryCredentials));
    if (properties.dnsPolicy && (typeof properties.dnsPolicy) !== 'object') {
        errors.collect(ros.propertyValidator('dnsPolicy', ros.validateAllowedValues)({
            data: properties.dnsPolicy,
            allowedValues: ["Default", "None"],
        }));
    }
    errors.collect(ros.propertyValidator('dnsPolicy', ros.validateString)(properties.dnsPolicy));
    if (properties.instanceFamilyLevel && (typeof properties.instanceFamilyLevel) !== 'object') {
        errors.collect(ros.propertyValidator('instanceFamilyLevel', ros.validateAllowedValues)({
            data: properties.instanceFamilyLevel,
            allowedValues: ["CreditEntryLevel", "EnterpriseLevel", "EntryLevel"],
        }));
    }
    errors.collect(ros.propertyValidator('instanceFamilyLevel', ros.validateString)(properties.instanceFamilyLevel));
    errors.collect(ros.propertyValidator('ephemeralStorage', ros.validateNumber)(properties.ephemeralStorage));
    return errors.wrap('supplied properties not correct for "RosEciScalingConfigurationProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ESS::EciScalingConfiguration` resource
 *
 * @param properties - the TypeScript properties of a `RosEciScalingConfigurationProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ESS::EciScalingConfiguration` resource.
 */
// @ts-ignore TS6133
function rosEciScalingConfigurationPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosEciScalingConfigurationPropsValidator(properties).assertSuccess();
    }
    return {
        'ContainerGroupName': ros.stringToRosTemplate(properties.containerGroupName),
        'ScalingConfigurationName': ros.stringToRosTemplate(properties.scalingConfigurationName),
        'ScalingGroupId': ros.stringToRosTemplate(properties.scalingGroupId),
        'SecurityGroupId': ros.stringToRosTemplate(properties.securityGroupId),
        'AcrRegistryInfos': ros.listMapper(rosEciScalingConfigurationAcrRegistryInfosPropertyToRosTemplate)(properties.acrRegistryInfos),
        'ActiveDeadlineSeconds': ros.numberToRosTemplate(properties.activeDeadlineSeconds),
        'AutoCreateEip': ros.booleanToRosTemplate(properties.autoCreateEip),
        'AutoMatchImageCache': ros.booleanToRosTemplate(properties.autoMatchImageCache),
        'Containers': ros.listMapper(rosEciScalingConfigurationContainersPropertyToRosTemplate)(properties.containers),
        'CostOptimization': ros.booleanToRosTemplate(properties.costOptimization),
        'Cpu': ros.numberToRosTemplate(properties.cpu),
        'CpuOptionsCore': ros.numberToRosTemplate(properties.cpuOptionsCore),
        'CpuOptionsThreadsPerCore': ros.numberToRosTemplate(properties.cpuOptionsThreadsPerCore),
        'DataCacheBucket': ros.stringToRosTemplate(properties.dataCacheBucket),
        'DataCacheBurstingEnabled': ros.booleanToRosTemplate(properties.dataCacheBurstingEnabled),
        'DataCachePL': ros.stringToRosTemplate(properties.dataCachePl),
        'DataCacheProvisionedIops': ros.numberToRosTemplate(properties.dataCacheProvisionedIops),
        'DnsConfigNameServers': ros.listMapper(ros.stringToRosTemplate)(properties.dnsConfigNameServers),
        'DnsConfigOptions': ros.listMapper(rosEciScalingConfigurationDnsConfigOptionsPropertyToRosTemplate)(properties.dnsConfigOptions),
        'DnsConfigSearches': ros.listMapper(ros.stringToRosTemplate)(properties.dnsConfigSearches),
        'DnsPolicy': ros.stringToRosTemplate(properties.dnsPolicy),
        'EgressBandwidth': ros.numberToRosTemplate(properties.egressBandwidth),
        'EipBandwidth': ros.numberToRosTemplate(properties.eipBandwidth),
        'EphemeralStorage': ros.numberToRosTemplate(properties.ephemeralStorage),
        'HostAliases': ros.listMapper(rosEciScalingConfigurationHostAliasesPropertyToRosTemplate)(properties.hostAliases),
        'HostName': ros.stringToRosTemplate(properties.hostName),
        'ImageRegistryCredentials': ros.listMapper(rosEciScalingConfigurationImageRegistryCredentialsPropertyToRosTemplate)(properties.imageRegistryCredentials),
        'ImageSnapshotId': ros.stringToRosTemplate(properties.imageSnapshotId),
        'IngressBandwidth': ros.numberToRosTemplate(properties.ingressBandwidth),
        'InitContainers': ros.listMapper(rosEciScalingConfigurationInitContainersPropertyToRosTemplate)(properties.initContainers),
        'InstanceFamilyLevel': ros.stringToRosTemplate(properties.instanceFamilyLevel),
        'InstanceTypes': ros.listMapper(ros.stringToRosTemplate)(properties.instanceTypes),
        'Ipv6AddressCount': ros.numberToRosTemplate(properties.ipv6AddressCount),
        'LoadBalancerWeight': ros.numberToRosTemplate(properties.loadBalancerWeight),
        'Memory': ros.numberToRosTemplate(properties.memory),
        'NtpServers': ros.listMapper(ros.stringToRosTemplate)(properties.ntpServers),
        'RamRoleName': ros.stringToRosTemplate(properties.ramRoleName),
        'ResourceGroupId': ros.stringToRosTemplate(properties.resourceGroupId),
        'RestartPolicy': ros.stringToRosTemplate(properties.restartPolicy),
        'SecurityContextSysctls': ros.listMapper(rosEciScalingConfigurationSecurityContextSysctlsPropertyToRosTemplate)(properties.securityContextSysctls),
        'SpotPriceLimit': ros.numberToRosTemplate(properties.spotPriceLimit),
        'SpotStrategy': ros.stringToRosTemplate(properties.spotStrategy),
        'Tags': ros.listMapper(rosEciScalingConfigurationTagsPropertyToRosTemplate)(properties.tags),
        'TerminationGracePeriodSeconds': ros.numberToRosTemplate(properties.terminationGracePeriodSeconds),
        'Volumes': ros.listMapper(rosEciScalingConfigurationVolumesPropertyToRosTemplate)(properties.volumes),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::ESS::EciScalingConfiguration`, which is used to define a scaling configuration of the Elastic Container Instance type.
 * @Note This class does not contain additional functions, so it is recommended to use the `EciScalingConfiguration` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-ess-eciscalingconfiguration
 */
class RosEciScalingConfiguration extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosEciScalingConfiguration.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrScalingConfigurationId = this.getAtt('ScalingConfigurationId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.containerGroupName = props.containerGroupName;
        this.scalingConfigurationName = props.scalingConfigurationName;
        this.scalingGroupId = props.scalingGroupId;
        this.securityGroupId = props.securityGroupId;
        this.acrRegistryInfos = props.acrRegistryInfos;
        this.activeDeadlineSeconds = props.activeDeadlineSeconds;
        this.autoCreateEip = props.autoCreateEip;
        this.autoMatchImageCache = props.autoMatchImageCache;
        this.containers = props.containers;
        this.costOptimization = props.costOptimization;
        this.cpu = props.cpu;
        this.cpuOptionsCore = props.cpuOptionsCore;
        this.cpuOptionsThreadsPerCore = props.cpuOptionsThreadsPerCore;
        this.dataCacheBucket = props.dataCacheBucket;
        this.dataCacheBurstingEnabled = props.dataCacheBurstingEnabled;
        this.dataCachePl = props.dataCachePl;
        this.dataCacheProvisionedIops = props.dataCacheProvisionedIops;
        this.dnsConfigNameServers = props.dnsConfigNameServers;
        this.dnsConfigOptions = props.dnsConfigOptions;
        this.dnsConfigSearches = props.dnsConfigSearches;
        this.dnsPolicy = props.dnsPolicy;
        this.egressBandwidth = props.egressBandwidth;
        this.eipBandwidth = props.eipBandwidth;
        this.ephemeralStorage = props.ephemeralStorage;
        this.hostAliases = props.hostAliases;
        this.hostName = props.hostName;
        this.imageRegistryCredentials = props.imageRegistryCredentials;
        this.imageSnapshotId = props.imageSnapshotId;
        this.ingressBandwidth = props.ingressBandwidth;
        this.initContainers = props.initContainers;
        this.instanceFamilyLevel = props.instanceFamilyLevel;
        this.instanceTypes = props.instanceTypes;
        this.ipv6AddressCount = props.ipv6AddressCount;
        this.loadBalancerWeight = props.loadBalancerWeight;
        this.memory = props.memory;
        this.ntpServers = props.ntpServers;
        this.ramRoleName = props.ramRoleName;
        this.resourceGroupId = props.resourceGroupId;
        this.restartPolicy = props.restartPolicy;
        this.securityContextSysctls = props.securityContextSysctls;
        this.spotPriceLimit = props.spotPriceLimit;
        this.spotStrategy = props.spotStrategy;
        this.tags = props.tags;
        this.terminationGracePeriodSeconds = props.terminationGracePeriodSeconds;
        this.volumes = props.volumes;
    }
    get rosProperties() {
        return {
            containerGroupName: this.containerGroupName,
            scalingConfigurationName: this.scalingConfigurationName,
            scalingGroupId: this.scalingGroupId,
            securityGroupId: this.securityGroupId,
            acrRegistryInfos: this.acrRegistryInfos,
            activeDeadlineSeconds: this.activeDeadlineSeconds,
            autoCreateEip: this.autoCreateEip,
            autoMatchImageCache: this.autoMatchImageCache,
            containers: this.containers,
            costOptimization: this.costOptimization,
            cpu: this.cpu,
            cpuOptionsCore: this.cpuOptionsCore,
            cpuOptionsThreadsPerCore: this.cpuOptionsThreadsPerCore,
            dataCacheBucket: this.dataCacheBucket,
            dataCacheBurstingEnabled: this.dataCacheBurstingEnabled,
            dataCachePl: this.dataCachePl,
            dataCacheProvisionedIops: this.dataCacheProvisionedIops,
            dnsConfigNameServers: this.dnsConfigNameServers,
            dnsConfigOptions: this.dnsConfigOptions,
            dnsConfigSearches: this.dnsConfigSearches,
            dnsPolicy: this.dnsPolicy,
            egressBandwidth: this.egressBandwidth,
            eipBandwidth: this.eipBandwidth,
            ephemeralStorage: this.ephemeralStorage,
            hostAliases: this.hostAliases,
            hostName: this.hostName,
            imageRegistryCredentials: this.imageRegistryCredentials,
            imageSnapshotId: this.imageSnapshotId,
            ingressBandwidth: this.ingressBandwidth,
            initContainers: this.initContainers,
            instanceFamilyLevel: this.instanceFamilyLevel,
            instanceTypes: this.instanceTypes,
            ipv6AddressCount: this.ipv6AddressCount,
            loadBalancerWeight: this.loadBalancerWeight,
            memory: this.memory,
            ntpServers: this.ntpServers,
            ramRoleName: this.ramRoleName,
            resourceGroupId: this.resourceGroupId,
            restartPolicy: this.restartPolicy,
            securityContextSysctls: this.securityContextSysctls,
            spotPriceLimit: this.spotPriceLimit,
            spotStrategy: this.spotStrategy,
            tags: this.tags,
            terminationGracePeriodSeconds: this.terminationGracePeriodSeconds,
            volumes: this.volumes,
        };
    }
    renderProperties(props) {
        return rosEciScalingConfigurationPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosEciScalingConfiguration = RosEciScalingConfiguration;
/**
 * The resource type name for this resource class.
 */
RosEciScalingConfiguration.ROS_RESOURCE_TYPE_NAME = "ALIYUN::ESS::EciScalingConfiguration";
/**
 * Determine whether the given properties match those of a `AcrRegistryInfosProperty`
 *
 * @param properties - the TypeScript properties of a `AcrRegistryInfosProperty`
 *
 * @returns the result of the validation.
 */
function RosEciScalingConfiguration_AcrRegistryInfosPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('domains', ros.listValidator(ros.validateString))(properties.domains));
    errors.collect(ros.propertyValidator('instanceName', ros.validateString)(properties.instanceName));
    errors.collect(ros.propertyValidator('instanceId', ros.requiredValidator)(properties.instanceId));
    errors.collect(ros.propertyValidator('instanceId', ros.validateString)(properties.instanceId));
    errors.collect(ros.propertyValidator('regionId', ros.validateString)(properties.regionId));
    return errors.wrap('supplied properties not correct for "AcrRegistryInfosProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ESS::EciScalingConfiguration.AcrRegistryInfos` resource
 *
 * @param properties - the TypeScript properties of a `AcrRegistryInfosProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ESS::EciScalingConfiguration.AcrRegistryInfos` resource.
 */
// @ts-ignore TS6133
function rosEciScalingConfigurationAcrRegistryInfosPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosEciScalingConfiguration_AcrRegistryInfosPropertyValidator(properties).assertSuccess();
    return {
        'Domains': ros.listMapper(ros.stringToRosTemplate)(properties.domains),
        'InstanceName': ros.stringToRosTemplate(properties.instanceName),
        'InstanceId': ros.stringToRosTemplate(properties.instanceId),
        'RegionId': ros.stringToRosTemplate(properties.regionId),
    };
}
/**
 * Determine whether the given properties match those of a `ConfigFileVolumeConfigFileToPathsProperty`
 *
 * @param properties - the TypeScript properties of a `ConfigFileVolumeConfigFileToPathsProperty`
 *
 * @returns the result of the validation.
 */
function RosEciScalingConfiguration_ConfigFileVolumeConfigFileToPathsPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('path', ros.requiredValidator)(properties.path));
    errors.collect(ros.propertyValidator('path', ros.validateString)(properties.path));
    errors.collect(ros.propertyValidator('content', ros.validateString)(properties.content));
    errors.collect(ros.propertyValidator('mode', ros.validateNumber)(properties.mode));
    return errors.wrap('supplied properties not correct for "ConfigFileVolumeConfigFileToPathsProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ESS::EciScalingConfiguration.ConfigFileVolumeConfigFileToPaths` resource
 *
 * @param properties - the TypeScript properties of a `ConfigFileVolumeConfigFileToPathsProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ESS::EciScalingConfiguration.ConfigFileVolumeConfigFileToPaths` resource.
 */
// @ts-ignore TS6133
function rosEciScalingConfigurationConfigFileVolumeConfigFileToPathsPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosEciScalingConfiguration_ConfigFileVolumeConfigFileToPathsPropertyValidator(properties).assertSuccess();
    return {
        'Path': ros.stringToRosTemplate(properties.path),
        'Content': ros.stringToRosTemplate(properties.content),
        'Mode': ros.numberToRosTemplate(properties.mode),
    };
}
/**
 * Determine whether the given properties match those of a `ContainersProperty`
 *
 * @param properties - the TypeScript properties of a `ContainersProperty`
 *
 * @returns the result of the validation.
 */
function RosEciScalingConfiguration_ContainersPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('environmentVars', ros.listValidator(RosEciScalingConfiguration_EnvironmentVarsPropertyValidator))(properties.environmentVars));
    errors.collect(ros.propertyValidator('readinessProbeExecCommands', ros.listValidator(ros.validateString))(properties.readinessProbeExecCommands));
    errors.collect(ros.propertyValidator('memory', ros.validateNumber)(properties.memory));
    errors.collect(ros.propertyValidator('readinessProbeTcpSocketPort', ros.validateNumber)(properties.readinessProbeTcpSocketPort));
    errors.collect(ros.propertyValidator('cpu', ros.validateNumber)(properties.cpu));
    errors.collect(ros.propertyValidator('readinessProbeHttpGetPath', ros.validateString)(properties.readinessProbeHttpGetPath));
    if (properties.readinessProbeHttpGetScheme && (typeof properties.readinessProbeHttpGetScheme) !== 'object') {
        errors.collect(ros.propertyValidator('readinessProbeHttpGetScheme', ros.validateAllowedValues)({
            data: properties.readinessProbeHttpGetScheme,
            allowedValues: ["HTTP", "HTTPS"],
        }));
    }
    errors.collect(ros.propertyValidator('readinessProbeHttpGetScheme', ros.validateString)(properties.readinessProbeHttpGetScheme));
    errors.collect(ros.propertyValidator('image', ros.requiredValidator)(properties.image));
    errors.collect(ros.propertyValidator('image', ros.validateString)(properties.image));
    errors.collect(ros.propertyValidator('gpu', ros.validateNumber)(properties.gpu));
    errors.collect(ros.propertyValidator('stdinOnce', ros.validateBoolean)(properties.stdinOnce));
    errors.collect(ros.propertyValidator('name', ros.requiredValidator)(properties.name));
    errors.collect(ros.propertyValidator('name', ros.validateString)(properties.name));
    if (properties.livenessProbeHttpGetScheme && (typeof properties.livenessProbeHttpGetScheme) !== 'object') {
        errors.collect(ros.propertyValidator('livenessProbeHttpGetScheme', ros.validateAllowedValues)({
            data: properties.livenessProbeHttpGetScheme,
            allowedValues: ["HTTP", "HTTPS"],
        }));
    }
    errors.collect(ros.propertyValidator('livenessProbeHttpGetScheme', ros.validateString)(properties.livenessProbeHttpGetScheme));
    errors.collect(ros.propertyValidator('livenessProbeTimeoutSeconds', ros.validateNumber)(properties.livenessProbeTimeoutSeconds));
    errors.collect(ros.propertyValidator('livenessProbeFailureThreshold', ros.validateNumber)(properties.livenessProbeFailureThreshold));
    errors.collect(ros.propertyValidator('livenessProbeHttpGetPath', ros.validateString)(properties.livenessProbeHttpGetPath));
    errors.collect(ros.propertyValidator('volumeMounts', ros.listValidator(RosEciScalingConfiguration_VolumeMountsPropertyValidator))(properties.volumeMounts));
    errors.collect(ros.propertyValidator('livenessProbeInitialDelaySeconds', ros.validateNumber)(properties.livenessProbeInitialDelaySeconds));
    errors.collect(ros.propertyValidator('securityContextRunAsUser', ros.validateNumber)(properties.securityContextRunAsUser));
    errors.collect(ros.propertyValidator('livenessProbeTcpSocketPort', ros.validateNumber)(properties.livenessProbeTcpSocketPort));
    errors.collect(ros.propertyValidator('commands', ros.listValidator(ros.validateString))(properties.commands));
    errors.collect(ros.propertyValidator('tty', ros.validateBoolean)(properties.tty));
    errors.collect(ros.propertyValidator('readinessProbePeriodSeconds', ros.validateNumber)(properties.readinessProbePeriodSeconds));
    errors.collect(ros.propertyValidator('livenessProbePeriodSeconds', ros.validateNumber)(properties.livenessProbePeriodSeconds));
    errors.collect(ros.propertyValidator('livenessProbeExecCommands', ros.listValidator(ros.validateString))(properties.livenessProbeExecCommands));
    errors.collect(ros.propertyValidator('livenessProbeSuccessThreshold', ros.validateNumber)(properties.livenessProbeSuccessThreshold));
    errors.collect(ros.propertyValidator('readinessProbeSuccessThreshold', ros.validateNumber)(properties.readinessProbeSuccessThreshold));
    errors.collect(ros.propertyValidator('readinessProbeInitialDelaySeconds', ros.validateNumber)(properties.readinessProbeInitialDelaySeconds));
    errors.collect(ros.propertyValidator('args', ros.listValidator(ros.validateString))(properties.args));
    errors.collect(ros.propertyValidator('readinessProbeFailureThreshold', ros.validateNumber)(properties.readinessProbeFailureThreshold));
    errors.collect(ros.propertyValidator('securityContextCapabilitiesAdd', ros.listValidator(ros.validateString))(properties.securityContextCapabilitiesAdd));
    errors.collect(ros.propertyValidator('ports', ros.listValidator(RosEciScalingConfiguration_PortsPropertyValidator))(properties.ports));
    errors.collect(ros.propertyValidator('readinessProbeHttpGetPort', ros.validateNumber)(properties.readinessProbeHttpGetPort));
    errors.collect(ros.propertyValidator('stdin', ros.validateBoolean)(properties.stdin));
    errors.collect(ros.propertyValidator('workingDir', ros.validateString)(properties.workingDir));
    if (properties.imagePullPolicy && (typeof properties.imagePullPolicy) !== 'object') {
        errors.collect(ros.propertyValidator('imagePullPolicy', ros.validateAllowedValues)({
            data: properties.imagePullPolicy,
            allowedValues: ["Always", "IfNotPresent", "Never"],
        }));
    }
    errors.collect(ros.propertyValidator('imagePullPolicy', ros.validateString)(properties.imagePullPolicy));
    errors.collect(ros.propertyValidator('livenessProbeHttpGetPort', ros.validateNumber)(properties.livenessProbeHttpGetPort));
    errors.collect(ros.propertyValidator('readinessProbeTimeoutSeconds', ros.validateNumber)(properties.readinessProbeTimeoutSeconds));
    return errors.wrap('supplied properties not correct for "ContainersProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ESS::EciScalingConfiguration.Containers` resource
 *
 * @param properties - the TypeScript properties of a `ContainersProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ESS::EciScalingConfiguration.Containers` resource.
 */
// @ts-ignore TS6133
function rosEciScalingConfigurationContainersPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosEciScalingConfiguration_ContainersPropertyValidator(properties).assertSuccess();
    return {
        'EnvironmentVars': ros.listMapper(rosEciScalingConfigurationEnvironmentVarsPropertyToRosTemplate)(properties.environmentVars),
        'ReadinessProbeExecCommands': ros.listMapper(ros.stringToRosTemplate)(properties.readinessProbeExecCommands),
        'Memory': ros.numberToRosTemplate(properties.memory),
        'ReadinessProbeTcpSocketPort': ros.numberToRosTemplate(properties.readinessProbeTcpSocketPort),
        'Cpu': ros.numberToRosTemplate(properties.cpu),
        'ReadinessProbeHttpGetPath': ros.stringToRosTemplate(properties.readinessProbeHttpGetPath),
        'ReadinessProbeHttpGetScheme': ros.stringToRosTemplate(properties.readinessProbeHttpGetScheme),
        'Image': ros.stringToRosTemplate(properties.image),
        'Gpu': ros.numberToRosTemplate(properties.gpu),
        'StdinOnce': ros.booleanToRosTemplate(properties.stdinOnce),
        'Name': ros.stringToRosTemplate(properties.name),
        'LivenessProbeHttpGetScheme': ros.stringToRosTemplate(properties.livenessProbeHttpGetScheme),
        'LivenessProbeTimeoutSeconds': ros.numberToRosTemplate(properties.livenessProbeTimeoutSeconds),
        'LivenessProbeFailureThreshold': ros.numberToRosTemplate(properties.livenessProbeFailureThreshold),
        'LivenessProbeHttpGetPath': ros.stringToRosTemplate(properties.livenessProbeHttpGetPath),
        'VolumeMounts': ros.listMapper(rosEciScalingConfigurationVolumeMountsPropertyToRosTemplate)(properties.volumeMounts),
        'LivenessProbeInitialDelaySeconds': ros.numberToRosTemplate(properties.livenessProbeInitialDelaySeconds),
        'SecurityContextRunAsUser': ros.numberToRosTemplate(properties.securityContextRunAsUser),
        'LivenessProbeTcpSocketPort': ros.numberToRosTemplate(properties.livenessProbeTcpSocketPort),
        'Commands': ros.listMapper(ros.stringToRosTemplate)(properties.commands),
        'Tty': ros.booleanToRosTemplate(properties.tty),
        'ReadinessProbePeriodSeconds': ros.numberToRosTemplate(properties.readinessProbePeriodSeconds),
        'LivenessProbePeriodSeconds': ros.numberToRosTemplate(properties.livenessProbePeriodSeconds),
        'LivenessProbeExecCommands': ros.listMapper(ros.stringToRosTemplate)(properties.livenessProbeExecCommands),
        'LivenessProbeSuccessThreshold': ros.numberToRosTemplate(properties.livenessProbeSuccessThreshold),
        'ReadinessProbeSuccessThreshold': ros.numberToRosTemplate(properties.readinessProbeSuccessThreshold),
        'ReadinessProbeInitialDelaySeconds': ros.numberToRosTemplate(properties.readinessProbeInitialDelaySeconds),
        'Args': ros.listMapper(ros.stringToRosTemplate)(properties.args),
        'ReadinessProbeFailureThreshold': ros.numberToRosTemplate(properties.readinessProbeFailureThreshold),
        'SecurityContextCapabilitiesAdd': ros.listMapper(ros.stringToRosTemplate)(properties.securityContextCapabilitiesAdd),
        'Ports': ros.listMapper(rosEciScalingConfigurationPortsPropertyToRosTemplate)(properties.ports),
        'ReadinessProbeHttpGetPort': ros.numberToRosTemplate(properties.readinessProbeHttpGetPort),
        'Stdin': ros.booleanToRosTemplate(properties.stdin),
        'WorkingDir': ros.stringToRosTemplate(properties.workingDir),
        'ImagePullPolicy': ros.stringToRosTemplate(properties.imagePullPolicy),
        'LivenessProbeHttpGetPort': ros.numberToRosTemplate(properties.livenessProbeHttpGetPort),
        'ReadinessProbeTimeoutSeconds': ros.numberToRosTemplate(properties.readinessProbeTimeoutSeconds),
    };
}
/**
 * Determine whether the given properties match those of a `DnsConfigOptionsProperty`
 *
 * @param properties - the TypeScript properties of a `DnsConfigOptionsProperty`
 *
 * @returns the result of the validation.
 */
function RosEciScalingConfiguration_DnsConfigOptionsPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('value', ros.requiredValidator)(properties.value));
    errors.collect(ros.propertyValidator('value', ros.validateString)(properties.value));
    errors.collect(ros.propertyValidator('name', ros.requiredValidator)(properties.name));
    errors.collect(ros.propertyValidator('name', ros.validateString)(properties.name));
    return errors.wrap('supplied properties not correct for "DnsConfigOptionsProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ESS::EciScalingConfiguration.DnsConfigOptions` resource
 *
 * @param properties - the TypeScript properties of a `DnsConfigOptionsProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ESS::EciScalingConfiguration.DnsConfigOptions` resource.
 */
// @ts-ignore TS6133
function rosEciScalingConfigurationDnsConfigOptionsPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosEciScalingConfiguration_DnsConfigOptionsPropertyValidator(properties).assertSuccess();
    return {
        'Value': ros.stringToRosTemplate(properties.value),
        'Name': ros.stringToRosTemplate(properties.name),
    };
}
/**
 * Determine whether the given properties match those of a `EnvironmentVarsProperty`
 *
 * @param properties - the TypeScript properties of a `EnvironmentVarsProperty`
 *
 * @returns the result of the validation.
 */
function RosEciScalingConfiguration_EnvironmentVarsPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('value', ros.validateString)(properties.value));
    errors.collect(ros.propertyValidator('key', ros.validateString)(properties.key));
    return errors.wrap('supplied properties not correct for "EnvironmentVarsProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ESS::EciScalingConfiguration.EnvironmentVars` resource
 *
 * @param properties - the TypeScript properties of a `EnvironmentVarsProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ESS::EciScalingConfiguration.EnvironmentVars` resource.
 */
// @ts-ignore TS6133
function rosEciScalingConfigurationEnvironmentVarsPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosEciScalingConfiguration_EnvironmentVarsPropertyValidator(properties).assertSuccess();
    return {
        'Value': ros.stringToRosTemplate(properties.value),
        'Key': ros.stringToRosTemplate(properties.key),
    };
}
/**
 * Determine whether the given properties match those of a `HostAliasesProperty`
 *
 * @param properties - the TypeScript properties of a `HostAliasesProperty`
 *
 * @returns the result of the validation.
 */
function RosEciScalingConfiguration_HostAliasesPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('ip', ros.requiredValidator)(properties.ip));
    errors.collect(ros.propertyValidator('ip', ros.validateString)(properties.ip));
    errors.collect(ros.propertyValidator('hostnames', ros.listValidator(ros.validateString))(properties.hostnames));
    return errors.wrap('supplied properties not correct for "HostAliasesProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ESS::EciScalingConfiguration.HostAliases` resource
 *
 * @param properties - the TypeScript properties of a `HostAliasesProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ESS::EciScalingConfiguration.HostAliases` resource.
 */
// @ts-ignore TS6133
function rosEciScalingConfigurationHostAliasesPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosEciScalingConfiguration_HostAliasesPropertyValidator(properties).assertSuccess();
    return {
        'Ip': ros.stringToRosTemplate(properties.ip),
        'Hostnames': ros.listMapper(ros.stringToRosTemplate)(properties.hostnames),
    };
}
/**
 * Determine whether the given properties match those of a `ImageRegistryCredentialsProperty`
 *
 * @param properties - the TypeScript properties of a `ImageRegistryCredentialsProperty`
 *
 * @returns the result of the validation.
 */
function RosEciScalingConfiguration_ImageRegistryCredentialsPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('userName', ros.requiredValidator)(properties.userName));
    errors.collect(ros.propertyValidator('userName', ros.validateString)(properties.userName));
    errors.collect(ros.propertyValidator('server', ros.requiredValidator)(properties.server));
    errors.collect(ros.propertyValidator('server', ros.validateString)(properties.server));
    errors.collect(ros.propertyValidator('password', ros.requiredValidator)(properties.password));
    errors.collect(ros.propertyValidator('password', ros.validateString)(properties.password));
    return errors.wrap('supplied properties not correct for "ImageRegistryCredentialsProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ESS::EciScalingConfiguration.ImageRegistryCredentials` resource
 *
 * @param properties - the TypeScript properties of a `ImageRegistryCredentialsProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ESS::EciScalingConfiguration.ImageRegistryCredentials` resource.
 */
// @ts-ignore TS6133
function rosEciScalingConfigurationImageRegistryCredentialsPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosEciScalingConfiguration_ImageRegistryCredentialsPropertyValidator(properties).assertSuccess();
    return {
        'UserName': ros.stringToRosTemplate(properties.userName),
        'Server': ros.stringToRosTemplate(properties.server),
        'Password': ros.stringToRosTemplate(properties.password),
    };
}
/**
 * Determine whether the given properties match those of a `InitContainerEnvironmentVarsProperty`
 *
 * @param properties - the TypeScript properties of a `InitContainerEnvironmentVarsProperty`
 *
 * @returns the result of the validation.
 */
function RosEciScalingConfiguration_InitContainerEnvironmentVarsPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('value', ros.validateString)(properties.value));
    errors.collect(ros.propertyValidator('key', ros.validateString)(properties.key));
    return errors.wrap('supplied properties not correct for "InitContainerEnvironmentVarsProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ESS::EciScalingConfiguration.InitContainerEnvironmentVars` resource
 *
 * @param properties - the TypeScript properties of a `InitContainerEnvironmentVarsProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ESS::EciScalingConfiguration.InitContainerEnvironmentVars` resource.
 */
// @ts-ignore TS6133
function rosEciScalingConfigurationInitContainerEnvironmentVarsPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosEciScalingConfiguration_InitContainerEnvironmentVarsPropertyValidator(properties).assertSuccess();
    return {
        'Value': ros.stringToRosTemplate(properties.value),
        'Key': ros.stringToRosTemplate(properties.key),
    };
}
/**
 * Determine whether the given properties match those of a `InitContainerVolumeMountsProperty`
 *
 * @param properties - the TypeScript properties of a `InitContainerVolumeMountsProperty`
 *
 * @returns the result of the validation.
 */
function RosEciScalingConfiguration_InitContainerVolumeMountsPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('readOnly', ros.validateBoolean)(properties.readOnly));
    errors.collect(ros.propertyValidator('mountPath', ros.validateString)(properties.mountPath));
    errors.collect(ros.propertyValidator('subPath', ros.validateString)(properties.subPath));
    errors.collect(ros.propertyValidator('mountPropagation', ros.validateString)(properties.mountPropagation));
    errors.collect(ros.propertyValidator('name', ros.requiredValidator)(properties.name));
    errors.collect(ros.propertyValidator('name', ros.validateString)(properties.name));
    return errors.wrap('supplied properties not correct for "InitContainerVolumeMountsProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ESS::EciScalingConfiguration.InitContainerVolumeMounts` resource
 *
 * @param properties - the TypeScript properties of a `InitContainerVolumeMountsProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ESS::EciScalingConfiguration.InitContainerVolumeMounts` resource.
 */
// @ts-ignore TS6133
function rosEciScalingConfigurationInitContainerVolumeMountsPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosEciScalingConfiguration_InitContainerVolumeMountsPropertyValidator(properties).assertSuccess();
    return {
        'ReadOnly': ros.booleanToRosTemplate(properties.readOnly),
        'MountPath': ros.stringToRosTemplate(properties.mountPath),
        'SubPath': ros.stringToRosTemplate(properties.subPath),
        'MountPropagation': ros.stringToRosTemplate(properties.mountPropagation),
        'Name': ros.stringToRosTemplate(properties.name),
    };
}
/**
 * Determine whether the given properties match those of a `InitContainersProperty`
 *
 * @param properties - the TypeScript properties of a `InitContainersProperty`
 *
 * @returns the result of the validation.
 */
function RosEciScalingConfiguration_InitContainersPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('args', ros.listValidator(ros.validateString))(properties.args));
    errors.collect(ros.propertyValidator('securityContextCapabilitiesAdd', ros.listValidator(ros.validateString))(properties.securityContextCapabilitiesAdd));
    errors.collect(ros.propertyValidator('memory', ros.validateNumber)(properties.memory));
    errors.collect(ros.propertyValidator('cpu', ros.validateNumber)(properties.cpu));
    errors.collect(ros.propertyValidator('image', ros.requiredValidator)(properties.image));
    errors.collect(ros.propertyValidator('image', ros.validateString)(properties.image));
    errors.collect(ros.propertyValidator('gpu', ros.validateNumber)(properties.gpu));
    errors.collect(ros.propertyValidator('name', ros.requiredValidator)(properties.name));
    errors.collect(ros.propertyValidator('name', ros.validateString)(properties.name));
    errors.collect(ros.propertyValidator('initContainerEnvironmentVars', ros.listValidator(RosEciScalingConfiguration_InitContainerEnvironmentVarsPropertyValidator))(properties.initContainerEnvironmentVars));
    errors.collect(ros.propertyValidator('workingDir', ros.validateString)(properties.workingDir));
    errors.collect(ros.propertyValidator('imagePullPolicy', ros.validateString)(properties.imagePullPolicy));
    errors.collect(ros.propertyValidator('commands', ros.listValidator(ros.validateString))(properties.commands));
    errors.collect(ros.propertyValidator('securityContextRunAsUser', ros.validateNumber)(properties.securityContextRunAsUser));
    errors.collect(ros.propertyValidator('initContainerVolumeMounts', ros.listValidator(RosEciScalingConfiguration_InitContainerVolumeMountsPropertyValidator))(properties.initContainerVolumeMounts));
    return errors.wrap('supplied properties not correct for "InitContainersProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ESS::EciScalingConfiguration.InitContainers` resource
 *
 * @param properties - the TypeScript properties of a `InitContainersProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ESS::EciScalingConfiguration.InitContainers` resource.
 */
// @ts-ignore TS6133
function rosEciScalingConfigurationInitContainersPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosEciScalingConfiguration_InitContainersPropertyValidator(properties).assertSuccess();
    return {
        'Args': ros.listMapper(ros.stringToRosTemplate)(properties.args),
        'SecurityContextCapabilitiesAdd': ros.listMapper(ros.stringToRosTemplate)(properties.securityContextCapabilitiesAdd),
        'Memory': ros.numberToRosTemplate(properties.memory),
        'Cpu': ros.numberToRosTemplate(properties.cpu),
        'Image': ros.stringToRosTemplate(properties.image),
        'Gpu': ros.numberToRosTemplate(properties.gpu),
        'Name': ros.stringToRosTemplate(properties.name),
        'InitContainerEnvironmentVars': ros.listMapper(rosEciScalingConfigurationInitContainerEnvironmentVarsPropertyToRosTemplate)(properties.initContainerEnvironmentVars),
        'WorkingDir': ros.stringToRosTemplate(properties.workingDir),
        'ImagePullPolicy': ros.stringToRosTemplate(properties.imagePullPolicy),
        'Commands': ros.listMapper(ros.stringToRosTemplate)(properties.commands),
        'SecurityContextRunAsUser': ros.numberToRosTemplate(properties.securityContextRunAsUser),
        'InitContainerVolumeMounts': ros.listMapper(rosEciScalingConfigurationInitContainerVolumeMountsPropertyToRosTemplate)(properties.initContainerVolumeMounts),
    };
}
/**
 * Determine whether the given properties match those of a `PortsProperty`
 *
 * @param properties - the TypeScript properties of a `PortsProperty`
 *
 * @returns the result of the validation.
 */
function RosEciScalingConfiguration_PortsPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('port', ros.requiredValidator)(properties.port));
    errors.collect(ros.propertyValidator('port', ros.validateNumber)(properties.port));
    errors.collect(ros.propertyValidator('protocol', ros.requiredValidator)(properties.protocol));
    if (properties.protocol && (typeof properties.protocol) !== 'object') {
        errors.collect(ros.propertyValidator('protocol', ros.validateAllowedValues)({
            data: properties.protocol,
            allowedValues: ["TCP", "UDP"],
        }));
    }
    errors.collect(ros.propertyValidator('protocol', ros.validateString)(properties.protocol));
    return errors.wrap('supplied properties not correct for "PortsProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ESS::EciScalingConfiguration.Ports` resource
 *
 * @param properties - the TypeScript properties of a `PortsProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ESS::EciScalingConfiguration.Ports` resource.
 */
// @ts-ignore TS6133
function rosEciScalingConfigurationPortsPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosEciScalingConfiguration_PortsPropertyValidator(properties).assertSuccess();
    return {
        'Port': ros.numberToRosTemplate(properties.port),
        'Protocol': ros.stringToRosTemplate(properties.protocol),
    };
}
/**
 * Determine whether the given properties match those of a `SecurityContextSysctlsProperty`
 *
 * @param properties - the TypeScript properties of a `SecurityContextSysctlsProperty`
 *
 * @returns the result of the validation.
 */
function RosEciScalingConfiguration_SecurityContextSysctlsPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('value', ros.validateString)(properties.value));
    errors.collect(ros.propertyValidator('name', ros.requiredValidator)(properties.name));
    errors.collect(ros.propertyValidator('name', ros.validateString)(properties.name));
    return errors.wrap('supplied properties not correct for "SecurityContextSysctlsProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ESS::EciScalingConfiguration.SecurityContextSysctls` resource
 *
 * @param properties - the TypeScript properties of a `SecurityContextSysctlsProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ESS::EciScalingConfiguration.SecurityContextSysctls` resource.
 */
// @ts-ignore TS6133
function rosEciScalingConfigurationSecurityContextSysctlsPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosEciScalingConfiguration_SecurityContextSysctlsPropertyValidator(properties).assertSuccess();
    return {
        'Value': ros.stringToRosTemplate(properties.value),
        'Name': ros.stringToRosTemplate(properties.name),
    };
}
/**
 * Determine whether the given properties match those of a `TagsProperty`
 *
 * @param properties - the TypeScript properties of a `TagsProperty`
 *
 * @returns the result of the validation.
 */
function RosEciScalingConfiguration_TagsPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('value', ros.validateString)(properties.value));
    errors.collect(ros.propertyValidator('key', ros.requiredValidator)(properties.key));
    errors.collect(ros.propertyValidator('key', ros.validateString)(properties.key));
    return errors.wrap('supplied properties not correct for "TagsProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ESS::EciScalingConfiguration.Tags` resource
 *
 * @param properties - the TypeScript properties of a `TagsProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ESS::EciScalingConfiguration.Tags` resource.
 */
// @ts-ignore TS6133
function rosEciScalingConfigurationTagsPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosEciScalingConfiguration_TagsPropertyValidator(properties).assertSuccess();
    return {
        'Value': ros.stringToRosTemplate(properties.value),
        'Key': ros.stringToRosTemplate(properties.key),
    };
}
/**
 * Determine whether the given properties match those of a `VolumeMountsProperty`
 *
 * @param properties - the TypeScript properties of a `VolumeMountsProperty`
 *
 * @returns the result of the validation.
 */
function RosEciScalingConfiguration_VolumeMountsPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('readOnly', ros.validateBoolean)(properties.readOnly));
    errors.collect(ros.propertyValidator('mountPath', ros.validateString)(properties.mountPath));
    errors.collect(ros.propertyValidator('subPath', ros.validateString)(properties.subPath));
    if (properties.mountPropagation && (typeof properties.mountPropagation) !== 'object') {
        errors.collect(ros.propertyValidator('mountPropagation', ros.validateAllowedValues)({
            data: properties.mountPropagation,
            allowedValues: ["None", "HostToCotainer", "Bidirectional"],
        }));
    }
    errors.collect(ros.propertyValidator('mountPropagation', ros.validateString)(properties.mountPropagation));
    errors.collect(ros.propertyValidator('name', ros.validateString)(properties.name));
    return errors.wrap('supplied properties not correct for "VolumeMountsProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ESS::EciScalingConfiguration.VolumeMounts` resource
 *
 * @param properties - the TypeScript properties of a `VolumeMountsProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ESS::EciScalingConfiguration.VolumeMounts` resource.
 */
// @ts-ignore TS6133
function rosEciScalingConfigurationVolumeMountsPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosEciScalingConfiguration_VolumeMountsPropertyValidator(properties).assertSuccess();
    return {
        'ReadOnly': ros.booleanToRosTemplate(properties.readOnly),
        'MountPath': ros.stringToRosTemplate(properties.mountPath),
        'SubPath': ros.stringToRosTemplate(properties.subPath),
        'MountPropagation': ros.stringToRosTemplate(properties.mountPropagation),
        'Name': ros.stringToRosTemplate(properties.name),
    };
}
/**
 * Determine whether the given properties match those of a `VolumesProperty`
 *
 * @param properties - the TypeScript properties of a `VolumesProperty`
 *
 * @returns the result of the validation.
 */
function RosEciScalingConfiguration_VolumesPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('hostPathVolumeType', ros.validateString)(properties.hostPathVolumeType));
    errors.collect(ros.propertyValidator('emptyDirVolumeSizeLimit', ros.validateString)(properties.emptyDirVolumeSizeLimit));
    errors.collect(ros.propertyValidator('flexVolumeFsType', ros.validateString)(properties.flexVolumeFsType));
    errors.collect(ros.propertyValidator('nfsVolumeServer', ros.validateString)(properties.nfsVolumeServer));
    errors.collect(ros.propertyValidator('diskVolumeDiskSize', ros.validateNumber)(properties.diskVolumeDiskSize));
    errors.collect(ros.propertyValidator('configFileVolumeConfigFileToPaths', ros.listValidator(RosEciScalingConfiguration_ConfigFileVolumeConfigFileToPathsPropertyValidator))(properties.configFileVolumeConfigFileToPaths));
    errors.collect(ros.propertyValidator('name', ros.requiredValidator)(properties.name));
    errors.collect(ros.propertyValidator('name', ros.validateString)(properties.name));
    errors.collect(ros.propertyValidator('nfsVolumeReadOnly', ros.validateBoolean)(properties.nfsVolumeReadOnly));
    errors.collect(ros.propertyValidator('hostPathVolumePath', ros.validateString)(properties.hostPathVolumePath));
    errors.collect(ros.propertyValidator('nfsVolumePath', ros.validateString)(properties.nfsVolumePath));
    errors.collect(ros.propertyValidator('type', ros.requiredValidator)(properties.type));
    if (properties.type && (typeof properties.type) !== 'object') {
        errors.collect(ros.propertyValidator('type', ros.validateAllowedValues)({
            data: properties.type,
            allowedValues: ["EmptyDirVolume", "NFSVolume", "ConfigFileVolume", "FlexVolume", "HostPathVolume"],
        }));
    }
    errors.collect(ros.propertyValidator('type', ros.validateString)(properties.type));
    errors.collect(ros.propertyValidator('flexVolumeDriver', ros.validateString)(properties.flexVolumeDriver));
    errors.collect(ros.propertyValidator('diskVolumeDiskId', ros.validateString)(properties.diskVolumeDiskId));
    errors.collect(ros.propertyValidator('configFileVolumeDefaultMode', ros.validateNumber)(properties.configFileVolumeDefaultMode));
    errors.collect(ros.propertyValidator('flexVolumeOptions', ros.validateString)(properties.flexVolumeOptions));
    errors.collect(ros.propertyValidator('emptyDirVolumeMedium', ros.validateString)(properties.emptyDirVolumeMedium));
    return errors.wrap('supplied properties not correct for "VolumesProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ESS::EciScalingConfiguration.Volumes` resource
 *
 * @param properties - the TypeScript properties of a `VolumesProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ESS::EciScalingConfiguration.Volumes` resource.
 */
// @ts-ignore TS6133
function rosEciScalingConfigurationVolumesPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosEciScalingConfiguration_VolumesPropertyValidator(properties).assertSuccess();
    return {
        'HostPathVolumeType': ros.stringToRosTemplate(properties.hostPathVolumeType),
        'EmptyDirVolumeSizeLimit': ros.stringToRosTemplate(properties.emptyDirVolumeSizeLimit),
        'FlexVolumeFsType': ros.stringToRosTemplate(properties.flexVolumeFsType),
        'NFSVolumeServer': ros.stringToRosTemplate(properties.nfsVolumeServer),
        'DiskVolumeDiskSize': ros.numberToRosTemplate(properties.diskVolumeDiskSize),
        'ConfigFileVolumeConfigFileToPaths': ros.listMapper(rosEciScalingConfigurationConfigFileVolumeConfigFileToPathsPropertyToRosTemplate)(properties.configFileVolumeConfigFileToPaths),
        'Name': ros.stringToRosTemplate(properties.name),
        'NFSVolumeReadOnly': ros.booleanToRosTemplate(properties.nfsVolumeReadOnly),
        'HostPathVolumePath': ros.stringToRosTemplate(properties.hostPathVolumePath),
        'NFSVolumePath': ros.stringToRosTemplate(properties.nfsVolumePath),
        'Type': ros.stringToRosTemplate(properties.type),
        'FlexVolumeDriver': ros.stringToRosTemplate(properties.flexVolumeDriver),
        'DiskVolumeDiskId': ros.stringToRosTemplate(properties.diskVolumeDiskId),
        'ConfigFileVolumeDefaultMode': ros.numberToRosTemplate(properties.configFileVolumeDefaultMode),
        'FlexVolumeOptions': ros.stringToRosTemplate(properties.flexVolumeOptions),
        'EmptyDirVolumeMedium': ros.stringToRosTemplate(properties.emptyDirVolumeMedium),
    };
}
/**
 * Determine whether the given properties match those of a `RosLifecycleHookProps`
 *
 * @param properties - the TypeScript properties of a `RosLifecycleHookProps`
 *
 * @returns the result of the validation.
 */
function RosLifecycleHookPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    if (properties.lifecycleHookName && (typeof properties.lifecycleHookName) !== 'object') {
        errors.collect(ros.propertyValidator('lifecycleHookName', ros.validateAllowedPattern)({
            data: properties.lifecycleHookName,
            reg: /^[a-zA-Z0-9\u4e00-\u9fa5][-_.a-zA-Z0-9\u4e00-\u9fa5]{1,63}$/
        }));
    }
    errors.collect(ros.propertyValidator('lifecycleHookName', ros.validateString)(properties.lifecycleHookName));
    if (properties.notificationArn && (Array.isArray(properties.notificationArn) || (typeof properties.notificationArn) === 'string')) {
        errors.collect(ros.propertyValidator('notificationArn', ros.validateLength)({
            data: properties.notificationArn.length,
            min: undefined,
            max: 300,
        }));
    }
    if (properties.notificationArn && (typeof properties.notificationArn) !== 'object') {
        errors.collect(ros.propertyValidator('notificationArn', ros.validateAllowedPattern)({
            data: properties.notificationArn,
            reg: /^acs:ess:([a-zA-Z0-9-]+):(\d+):(queue|topic|oos)\/([a-zA-Z0-9][-_a-zA-Z0-9]{0,255})$/
        }));
    }
    errors.collect(ros.propertyValidator('notificationArn', ros.validateString)(properties.notificationArn));
    errors.collect(ros.propertyValidator('scalingGroupId', ros.requiredValidator)(properties.scalingGroupId));
    errors.collect(ros.propertyValidator('scalingGroupId', ros.validateString)(properties.scalingGroupId));
    errors.collect(ros.propertyValidator('lifecycleTransition', ros.requiredValidator)(properties.lifecycleTransition));
    if (properties.lifecycleTransition && (typeof properties.lifecycleTransition) !== 'object') {
        errors.collect(ros.propertyValidator('lifecycleTransition', ros.validateAllowedValues)({
            data: properties.lifecycleTransition,
            allowedValues: ["SCALE_OUT", "SCALE_IN"],
        }));
    }
    errors.collect(ros.propertyValidator('lifecycleTransition', ros.validateString)(properties.lifecycleTransition));
    if (properties.heartbeatTimeout && (typeof properties.heartbeatTimeout) !== 'object') {
        errors.collect(ros.propertyValidator('heartbeatTimeout', ros.validateRange)({
            data: properties.heartbeatTimeout,
            min: 30,
            max: 86400,
        }));
    }
    errors.collect(ros.propertyValidator('heartbeatTimeout', ros.validateNumber)(properties.heartbeatTimeout));
    if (properties.notificationMetadata && (Array.isArray(properties.notificationMetadata) || (typeof properties.notificationMetadata) === 'string')) {
        errors.collect(ros.propertyValidator('notificationMetadata', ros.validateLength)({
            data: properties.notificationMetadata.length,
            min: undefined,
            max: 4096,
        }));
    }
    errors.collect(ros.propertyValidator('notificationMetadata', ros.validateString)(properties.notificationMetadata));
    if (properties.defaultResult && (typeof properties.defaultResult) !== 'object') {
        errors.collect(ros.propertyValidator('defaultResult', ros.validateAllowedValues)({
            data: properties.defaultResult,
            allowedValues: ["CONTINUE", "ABANDON", "ROLLBACK"],
        }));
    }
    errors.collect(ros.propertyValidator('defaultResult', ros.validateString)(properties.defaultResult));
    return errors.wrap('supplied properties not correct for "RosLifecycleHookProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ESS::LifecycleHook` resource
 *
 * @param properties - the TypeScript properties of a `RosLifecycleHookProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ESS::LifecycleHook` resource.
 */
// @ts-ignore TS6133
function rosLifecycleHookPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosLifecycleHookPropsValidator(properties).assertSuccess();
    }
    return {
        'LifecycleTransition': ros.stringToRosTemplate(properties.lifecycleTransition),
        'ScalingGroupId': ros.stringToRosTemplate(properties.scalingGroupId),
        'DefaultResult': ros.stringToRosTemplate(properties.defaultResult),
        'HeartbeatTimeout': ros.numberToRosTemplate(properties.heartbeatTimeout),
        'LifecycleHookName': ros.stringToRosTemplate(properties.lifecycleHookName),
        'NotificationArn': ros.stringToRosTemplate(properties.notificationArn),
        'NotificationMetadata': ros.stringToRosTemplate(properties.notificationMetadata),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::ESS::LifecycleHook`, which is used to create a lifecycle hook for a scaling group.
 * @Note This class does not contain additional functions, so it is recommended to use the `LifecycleHook` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-ess-lifecyclehook
 */
class RosLifecycleHook extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosLifecycleHook.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrLifecycleHookId = this.getAtt('LifecycleHookId');
        this.attrScalingGroupId = this.getAtt('ScalingGroupId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.lifecycleTransition = props.lifecycleTransition;
        this.scalingGroupId = props.scalingGroupId;
        this.defaultResult = props.defaultResult;
        this.heartbeatTimeout = props.heartbeatTimeout;
        this.lifecycleHookName = props.lifecycleHookName;
        this.notificationArn = props.notificationArn;
        this.notificationMetadata = props.notificationMetadata;
    }
    get rosProperties() {
        return {
            lifecycleTransition: this.lifecycleTransition,
            scalingGroupId: this.scalingGroupId,
            defaultResult: this.defaultResult,
            heartbeatTimeout: this.heartbeatTimeout,
            lifecycleHookName: this.lifecycleHookName,
            notificationArn: this.notificationArn,
            notificationMetadata: this.notificationMetadata,
        };
    }
    renderProperties(props) {
        return rosLifecycleHookPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosLifecycleHook = RosLifecycleHook;
/**
 * The resource type name for this resource class.
 */
RosLifecycleHook.ROS_RESOURCE_TYPE_NAME = "ALIYUN::ESS::LifecycleHook";
/**
 * Determine whether the given properties match those of a `RosLoadBalancerAttachmentProps`
 *
 * @param properties - the TypeScript properties of a `RosLoadBalancerAttachmentProps`
 *
 * @returns the result of the validation.
 */
function RosLoadBalancerAttachmentPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('scalingGroupId', ros.requiredValidator)(properties.scalingGroupId));
    errors.collect(ros.propertyValidator('scalingGroupId', ros.validateString)(properties.scalingGroupId));
    errors.collect(ros.propertyValidator('forceAttach', ros.validateBoolean)(properties.forceAttach));
    if (properties.loadBalancers && (Array.isArray(properties.loadBalancers) || (typeof properties.loadBalancers) === 'string')) {
        errors.collect(ros.propertyValidator('loadBalancers', ros.validateLength)({
            data: properties.loadBalancers.length,
            min: undefined,
            max: 5,
        }));
    }
    errors.collect(ros.propertyValidator('loadBalancers', ros.listValidator(ros.validateString))(properties.loadBalancers));
    if (properties.loadBalancerConfigs && (Array.isArray(properties.loadBalancerConfigs) || (typeof properties.loadBalancerConfigs) === 'string')) {
        errors.collect(ros.propertyValidator('loadBalancerConfigs', ros.validateLength)({
            data: properties.loadBalancerConfigs.length,
            min: undefined,
            max: 20,
        }));
    }
    errors.collect(ros.propertyValidator('loadBalancerConfigs', ros.listValidator(RosLoadBalancerAttachment_LoadBalancerConfigsPropertyValidator))(properties.loadBalancerConfigs));
    return errors.wrap('supplied properties not correct for "RosLoadBalancerAttachmentProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ESS::LoadBalancerAttachment` resource
 *
 * @param properties - the TypeScript properties of a `RosLoadBalancerAttachmentProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ESS::LoadBalancerAttachment` resource.
 */
// @ts-ignore TS6133
function rosLoadBalancerAttachmentPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosLoadBalancerAttachmentPropsValidator(properties).assertSuccess();
    }
    return {
        'ScalingGroupId': ros.stringToRosTemplate(properties.scalingGroupId),
        'ForceAttach': ros.booleanToRosTemplate(properties.forceAttach),
        'LoadBalancerConfigs': ros.listMapper(rosLoadBalancerAttachmentLoadBalancerConfigsPropertyToRosTemplate)(properties.loadBalancerConfigs),
        'LoadBalancers': ros.listMapper(ros.stringToRosTemplate)(properties.loadBalancers),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::ESS::LoadBalancerAttachment`, which is used to add one or more Server Load Balancer (SLB) instances.
 * @Note This class does not contain additional functions, so it is recommended to use the `LoadBalancerAttachment` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-ess-loadbalancerattachment
 */
class RosLoadBalancerAttachment extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosLoadBalancerAttachment.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.scalingGroupId = props.scalingGroupId;
        this.forceAttach = props.forceAttach;
        this.loadBalancerConfigs = props.loadBalancerConfigs;
        this.loadBalancers = props.loadBalancers;
    }
    get rosProperties() {
        return {
            scalingGroupId: this.scalingGroupId,
            forceAttach: this.forceAttach,
            loadBalancerConfigs: this.loadBalancerConfigs,
            loadBalancers: this.loadBalancers,
        };
    }
    renderProperties(props) {
        return rosLoadBalancerAttachmentPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosLoadBalancerAttachment = RosLoadBalancerAttachment;
/**
 * The resource type name for this resource class.
 */
RosLoadBalancerAttachment.ROS_RESOURCE_TYPE_NAME = "ALIYUN::ESS::LoadBalancerAttachment";
/**
 * Determine whether the given properties match those of a `LoadBalancerConfigsProperty`
 *
 * @param properties - the TypeScript properties of a `LoadBalancerConfigsProperty`
 *
 * @returns the result of the validation.
 */
function RosLoadBalancerAttachment_LoadBalancerConfigsPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('loadBalancerId', ros.validateString)(properties.loadBalancerId));
    errors.collect(ros.propertyValidator('weight', ros.validateNumber)(properties.weight));
    return errors.wrap('supplied properties not correct for "LoadBalancerConfigsProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ESS::LoadBalancerAttachment.LoadBalancerConfigs` resource
 *
 * @param properties - the TypeScript properties of a `LoadBalancerConfigsProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ESS::LoadBalancerAttachment.LoadBalancerConfigs` resource.
 */
// @ts-ignore TS6133
function rosLoadBalancerAttachmentLoadBalancerConfigsPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosLoadBalancerAttachment_LoadBalancerConfigsPropertyValidator(properties).assertSuccess();
    return {
        'LoadBalancerId': ros.stringToRosTemplate(properties.loadBalancerId),
        'Weight': ros.numberToRosTemplate(properties.weight),
    };
}
/**
 * Determine whether the given properties match those of a `RosScalingConfigurationProps`
 *
 * @param properties - the TypeScript properties of a `RosScalingConfigurationProps`
 *
 * @returns the result of the validation.
 */
function RosScalingConfigurationPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('dedicatedHostId', ros.validateString)(properties.dedicatedHostId));
    errors.collect(ros.propertyValidator('scalingConfigurationName', ros.validateString)(properties.scalingConfigurationName));
    errors.collect(ros.propertyValidator('resourceGroupId', ros.validateString)(properties.resourceGroupId));
    errors.collect(ros.propertyValidator('imageOptionsLoginAsNonRoot', ros.validateBoolean)(properties.imageOptionsLoginAsNonRoot));
    errors.collect(ros.propertyValidator('systemDiskDescription', ros.validateString)(properties.systemDiskDescription));
    errors.collect(ros.propertyValidator('memory', ros.validateNumber)(properties.memory));
    errors.collect(ros.propertyValidator('systemDiskProvisionedIops', ros.validateNumber)(properties.systemDiskProvisionedIops));
    errors.collect(ros.propertyValidator('cpu', ros.validateNumber)(properties.cpu));
    errors.collect(ros.propertyValidator('systemDiskEncryptAlgorithm', ros.validateString)(properties.systemDiskEncryptAlgorithm));
    errors.collect(ros.propertyValidator('ramRoleName', ros.validateString)(properties.ramRoleName));
    errors.collect(ros.propertyValidator('privatePoolOptions', RosScalingConfiguration_PrivatePoolOptionsPropertyValidator)(properties.privatePoolOptions));
    errors.collect(ros.propertyValidator('systemDiskPerformanceLevel', ros.validateString)(properties.systemDiskPerformanceLevel));
    errors.collect(ros.propertyValidator('imageId', ros.validateString)(properties.imageId));
    errors.collect(ros.propertyValidator('systemDiskDiskName', ros.validateString)(properties.systemDiskDiskName));
    errors.collect(ros.propertyValidator('hostName', ros.validateString)(properties.hostName));
    if (properties.loadBalancerWeight && (typeof properties.loadBalancerWeight) !== 'object') {
        errors.collect(ros.propertyValidator('loadBalancerWeight', ros.validateRange)({
            data: properties.loadBalancerWeight,
            min: 1,
            max: 100,
        }));
    }
    errors.collect(ros.propertyValidator('loadBalancerWeight', ros.validateNumber)(properties.loadBalancerWeight));
    errors.collect(ros.propertyValidator('instanceId', ros.validateString)(properties.instanceId));
    errors.collect(ros.propertyValidator('systemDiskKmsKeyId', ros.validateString)(properties.systemDiskKmsKeyId));
    errors.collect(ros.propertyValidator('scalingGroupId', ros.requiredValidator)(properties.scalingGroupId));
    errors.collect(ros.propertyValidator('scalingGroupId', ros.validateString)(properties.scalingGroupId));
    errors.collect(ros.propertyValidator('imageFamily', ros.validateString)(properties.imageFamily));
    if (properties.securityGroupIds && (Array.isArray(properties.securityGroupIds) || (typeof properties.securityGroupIds) === 'string')) {
        errors.collect(ros.propertyValidator('securityGroupIds', ros.validateLength)({
            data: properties.securityGroupIds.length,
            min: undefined,
            max: 16,
        }));
    }
    errors.collect(ros.propertyValidator('securityGroupIds', ros.listValidator(ros.validateString))(properties.securityGroupIds));
    if (properties.internetChargeType && (typeof properties.internetChargeType) !== 'object') {
        errors.collect(ros.propertyValidator('internetChargeType', ros.validateAllowedValues)({
            data: properties.internetChargeType,
            allowedValues: ["paybytraffic", "PayByTraffic", "paybybandwidth", "PayByBandwidth"],
        }));
    }
    errors.collect(ros.propertyValidator('internetChargeType', ros.validateString)(properties.internetChargeType));
    errors.collect(ros.propertyValidator('spotInterruptionBehavior', ros.validateString)(properties.spotInterruptionBehavior));
    errors.collect(ros.propertyValidator('instanceName', ros.validateString)(properties.instanceName));
    errors.collect(ros.propertyValidator('deploymentSetId', ros.validateString)(properties.deploymentSetId));
    if (properties.internetMaxBandwidthOut && (typeof properties.internetMaxBandwidthOut) !== 'object') {
        errors.collect(ros.propertyValidator('internetMaxBandwidthOut', ros.validateRange)({
            data: properties.internetMaxBandwidthOut,
            min: 0,
            max: 100,
        }));
    }
    errors.collect(ros.propertyValidator('internetMaxBandwidthOut', ros.validateNumber)(properties.internetMaxBandwidthOut));
    errors.collect(ros.propertyValidator('instancePatternInfos', ros.listValidator(RosScalingConfiguration_InstancePatternInfosPropertyValidator))(properties.instancePatternInfos));
    if (properties.instanceTypeOverrides && (Array.isArray(properties.instanceTypeOverrides) || (typeof properties.instanceTypeOverrides) === 'string')) {
        errors.collect(ros.propertyValidator('instanceTypeOverrides', ros.validateLength)({
            data: properties.instanceTypeOverrides.length,
            min: undefined,
            max: 10,
        }));
    }
    errors.collect(ros.propertyValidator('instanceTypeOverrides', ros.listValidator(RosScalingConfiguration_InstanceTypeOverridesPropertyValidator))(properties.instanceTypeOverrides));
    errors.collect(ros.propertyValidator('affinity', ros.validateString)(properties.affinity));
    errors.collect(ros.propertyValidator('securityEnhancementStrategy', ros.validateString)(properties.securityEnhancementStrategy));
    errors.collect(ros.propertyValidator('tenancy', ros.validateString)(properties.tenancy));
    if (properties.diskMappings && (Array.isArray(properties.diskMappings) || (typeof properties.diskMappings) === 'string')) {
        errors.collect(ros.propertyValidator('diskMappings', ros.validateLength)({
            data: properties.diskMappings.length,
            min: undefined,
            max: 16,
        }));
    }
    errors.collect(ros.propertyValidator('diskMappings', ros.listValidator(RosScalingConfiguration_DiskMappingsPropertyValidator))(properties.diskMappings));
    if (properties.systemDiskSize && (typeof properties.systemDiskSize) !== 'object') {
        errors.collect(ros.propertyValidator('systemDiskSize', ros.validateRange)({
            data: properties.systemDiskSize,
            min: 20,
            max: undefined,
        }));
    }
    errors.collect(ros.propertyValidator('systemDiskSize', ros.validateNumber)(properties.systemDiskSize));
    errors.collect(ros.propertyValidator('userData', ros.validateString)(properties.userData));
    if (properties.spotDuration && (typeof properties.spotDuration) !== 'object') {
        errors.collect(ros.propertyValidator('spotDuration', ros.validateAllowedValues)({
            data: properties.spotDuration,
            allowedValues: [0, 1, 2, 3, 4, 5, 6],
        }));
    }
    errors.collect(ros.propertyValidator('spotDuration', ros.validateNumber)(properties.spotDuration));
    errors.collect(ros.propertyValidator('systemDiskEncrypted', ros.validateBoolean)(properties.systemDiskEncrypted));
    errors.collect(ros.propertyValidator('systemDiskAutoSnapshotPolicyId', ros.validateString)(properties.systemDiskAutoSnapshotPolicyId));
    errors.collect(ros.propertyValidator('spotPriceLimitForInstanceType', ros.hashValidator(ros.validateAny))(properties.spotPriceLimitForInstanceType));
    if (properties.ipv6AddressCount && (typeof properties.ipv6AddressCount) !== 'object') {
        errors.collect(ros.propertyValidator('ipv6AddressCount', ros.validateRange)({
            data: properties.ipv6AddressCount,
            min: 0,
            max: undefined,
        }));
    }
    errors.collect(ros.propertyValidator('ipv6AddressCount', ros.validateNumber)(properties.ipv6AddressCount));
    if (properties.systemDiskCategories && (Array.isArray(properties.systemDiskCategories) || (typeof properties.systemDiskCategories) === 'string')) {
        errors.collect(ros.propertyValidator('systemDiskCategories', ros.validateLength)({
            data: properties.systemDiskCategories.length,
            min: undefined,
            max: 10,
        }));
    }
    errors.collect(ros.propertyValidator('systemDiskCategories', ros.listValidator(ros.validateString))(properties.systemDiskCategories));
    errors.collect(ros.propertyValidator('spotPriceLimit', ros.validateNumber)(properties.spotPriceLimit));
    if (properties.tagList && (Array.isArray(properties.tagList) || (typeof properties.tagList) === 'string')) {
        errors.collect(ros.propertyValidator('tagList', ros.validateLength)({
            data: properties.tagList.length,
            min: undefined,
            max: 20,
        }));
    }
    errors.collect(ros.propertyValidator('tagList', ros.listValidator(RosScalingConfiguration_TagListPropertyValidator))(properties.tagList));
    if (properties.instanceTypes && (Array.isArray(properties.instanceTypes) || (typeof properties.instanceTypes) === 'string')) {
        errors.collect(ros.propertyValidator('instanceTypes', ros.validateLength)({
            data: properties.instanceTypes.length,
            min: 1,
            max: 10,
        }));
    }
    errors.collect(ros.propertyValidator('instanceTypes', ros.listValidator(ros.validateString))(properties.instanceTypes));
    errors.collect(ros.propertyValidator('instanceType', ros.validateString)(properties.instanceType));
    if (properties.spotStrategy && (typeof properties.spotStrategy) !== 'object') {
        errors.collect(ros.propertyValidator('spotStrategy', ros.validateAllowedValues)({
            data: properties.spotStrategy,
            allowedValues: ["NoSpot", "SpotWithPriceLimit", "SpotAsPriceGo"],
        }));
    }
    errors.collect(ros.propertyValidator('spotStrategy', ros.validateString)(properties.spotStrategy));
    errors.collect(ros.propertyValidator('passwordInherit', ros.validateBoolean)(properties.passwordInherit));
    errors.collect(ros.propertyValidator('password', ros.validateString)(properties.password));
    errors.collect(ros.propertyValidator('keyPairName', ros.validateString)(properties.keyPairName));
    if (properties.ioOptimized && (typeof properties.ioOptimized) !== 'object') {
        errors.collect(ros.propertyValidator('ioOptimized', ros.validateAllowedValues)({
            data: properties.ioOptimized,
            allowedValues: ["none", "optimized"],
        }));
    }
    errors.collect(ros.propertyValidator('ioOptimized', ros.validateString)(properties.ioOptimized));
    errors.collect(ros.propertyValidator('zoneId', ros.validateString)(properties.zoneId));
    errors.collect(ros.propertyValidator('hpcClusterId', ros.validateString)(properties.hpcClusterId));
    errors.collect(ros.propertyValidator('securityGroupId', ros.validateString)(properties.securityGroupId));
    if (properties.systemDiskCategory && (typeof properties.systemDiskCategory) !== 'object') {
        errors.collect(ros.propertyValidator('systemDiskCategory', ros.validateAllowedValues)({
            data: properties.systemDiskCategory,
            allowedValues: ["cloud", "cloud_efficiency", "cloud_ssd", "cloud_essd", "ephemeral_ssd", "cloud_auto"],
        }));
    }
    errors.collect(ros.propertyValidator('systemDiskCategory', ros.validateString)(properties.systemDiskCategory));
    errors.collect(ros.propertyValidator('systemDiskBurstingEnabled', ros.validateBoolean)(properties.systemDiskBurstingEnabled));
    errors.collect(ros.propertyValidator('imageName', ros.validateString)(properties.imageName));
    if (properties.internetMaxBandwidthIn && (typeof properties.internetMaxBandwidthIn) !== 'object') {
        errors.collect(ros.propertyValidator('internetMaxBandwidthIn', ros.validateRange)({
            data: properties.internetMaxBandwidthIn,
            min: 1,
            max: 200,
        }));
    }
    errors.collect(ros.propertyValidator('internetMaxBandwidthIn', ros.validateNumber)(properties.internetMaxBandwidthIn));
    errors.collect(ros.propertyValidator('instanceDescription', ros.validateString)(properties.instanceDescription));
    if (properties.creditSpecification && (typeof properties.creditSpecification) !== 'object') {
        errors.collect(ros.propertyValidator('creditSpecification', ros.validateAllowedValues)({
            data: properties.creditSpecification,
            allowedValues: ["Standard", "Unlimited"],
        }));
    }
    errors.collect(ros.propertyValidator('creditSpecification', ros.validateString)(properties.creditSpecification));
    return errors.wrap('supplied properties not correct for "RosScalingConfigurationProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ESS::ScalingConfiguration` resource
 *
 * @param properties - the TypeScript properties of a `RosScalingConfigurationProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ESS::ScalingConfiguration` resource.
 */
// @ts-ignore TS6133
function rosScalingConfigurationPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosScalingConfigurationPropsValidator(properties).assertSuccess();
    }
    return {
        'ScalingGroupId': ros.stringToRosTemplate(properties.scalingGroupId),
        'Affinity': ros.stringToRosTemplate(properties.affinity),
        'Cpu': ros.numberToRosTemplate(properties.cpu),
        'CreditSpecification': ros.stringToRosTemplate(properties.creditSpecification),
        'DedicatedHostId': ros.stringToRosTemplate(properties.dedicatedHostId),
        'DeploymentSetId': ros.stringToRosTemplate(properties.deploymentSetId),
        'DiskMappings': ros.listMapper(rosScalingConfigurationDiskMappingsPropertyToRosTemplate)(properties.diskMappings),
        'HostName': ros.stringToRosTemplate(properties.hostName),
        'HpcClusterId': ros.stringToRosTemplate(properties.hpcClusterId),
        'ImageFamily': ros.stringToRosTemplate(properties.imageFamily),
        'ImageId': ros.stringToRosTemplate(properties.imageId),
        'ImageName': ros.stringToRosTemplate(properties.imageName),
        'ImageOptionsLoginAsNonRoot': ros.booleanToRosTemplate(properties.imageOptionsLoginAsNonRoot),
        'InstanceDescription': ros.stringToRosTemplate(properties.instanceDescription),
        'InstanceId': ros.stringToRosTemplate(properties.instanceId),
        'InstanceName': ros.stringToRosTemplate(properties.instanceName),
        'InstancePatternInfos': ros.listMapper(rosScalingConfigurationInstancePatternInfosPropertyToRosTemplate)(properties.instancePatternInfos),
        'InstanceType': ros.stringToRosTemplate(properties.instanceType),
        'InstanceTypeOverrides': ros.listMapper(rosScalingConfigurationInstanceTypeOverridesPropertyToRosTemplate)(properties.instanceTypeOverrides),
        'InstanceTypes': ros.listMapper(ros.stringToRosTemplate)(properties.instanceTypes),
        'InternetChargeType': ros.stringToRosTemplate(properties.internetChargeType),
        'InternetMaxBandwidthIn': ros.numberToRosTemplate(properties.internetMaxBandwidthIn),
        'InternetMaxBandwidthOut': ros.numberToRosTemplate(properties.internetMaxBandwidthOut),
        'IoOptimized': ros.stringToRosTemplate(properties.ioOptimized),
        'Ipv6AddressCount': ros.numberToRosTemplate(properties.ipv6AddressCount),
        'KeyPairName': ros.stringToRosTemplate(properties.keyPairName),
        'LoadBalancerWeight': ros.numberToRosTemplate(properties.loadBalancerWeight),
        'Memory': ros.numberToRosTemplate(properties.memory),
        'Password': ros.stringToRosTemplate(properties.password),
        'PasswordInherit': ros.booleanToRosTemplate(properties.passwordInherit),
        'PrivatePoolOptions': rosScalingConfigurationPrivatePoolOptionsPropertyToRosTemplate(properties.privatePoolOptions),
        'RamRoleName': ros.stringToRosTemplate(properties.ramRoleName),
        'ResourceGroupId': ros.stringToRosTemplate(properties.resourceGroupId),
        'ScalingConfigurationName': ros.stringToRosTemplate(properties.scalingConfigurationName),
        'SecurityEnhancementStrategy': ros.stringToRosTemplate(properties.securityEnhancementStrategy),
        'SecurityGroupId': ros.stringToRosTemplate(properties.securityGroupId),
        'SecurityGroupIds': ros.listMapper(ros.stringToRosTemplate)(properties.securityGroupIds),
        'SpotDuration': ros.numberToRosTemplate(properties.spotDuration),
        'SpotInterruptionBehavior': ros.stringToRosTemplate(properties.spotInterruptionBehavior),
        'SpotPriceLimit': ros.numberToRosTemplate(properties.spotPriceLimit),
        'SpotPriceLimitForInstanceType': ros.hashMapper(ros.objectToRosTemplate)(properties.spotPriceLimitForInstanceType),
        'SpotStrategy': ros.stringToRosTemplate(properties.spotStrategy),
        'SystemDiskAutoSnapshotPolicyId': ros.stringToRosTemplate(properties.systemDiskAutoSnapshotPolicyId),
        'SystemDiskBurstingEnabled': ros.booleanToRosTemplate(properties.systemDiskBurstingEnabled),
        'SystemDiskCategories': ros.listMapper(ros.stringToRosTemplate)(properties.systemDiskCategories),
        'SystemDiskCategory': ros.stringToRosTemplate(properties.systemDiskCategory),
        'SystemDiskDescription': ros.stringToRosTemplate(properties.systemDiskDescription),
        'SystemDiskDiskName': ros.stringToRosTemplate(properties.systemDiskDiskName),
        'SystemDiskEncryptAlgorithm': ros.stringToRosTemplate(properties.systemDiskEncryptAlgorithm),
        'SystemDiskEncrypted': ros.booleanToRosTemplate(properties.systemDiskEncrypted),
        'SystemDiskKMSKeyId': ros.stringToRosTemplate(properties.systemDiskKmsKeyId),
        'SystemDiskPerformanceLevel': ros.stringToRosTemplate(properties.systemDiskPerformanceLevel),
        'SystemDiskProvisionedIops': ros.numberToRosTemplate(properties.systemDiskProvisionedIops),
        'SystemDiskSize': ros.numberToRosTemplate(properties.systemDiskSize),
        'TagList': ros.listMapper(rosScalingConfigurationTagListPropertyToRosTemplate)(properties.tagList),
        'Tenancy': ros.stringToRosTemplate(properties.tenancy),
        'UserData': ros.stringToRosTemplate(properties.userData),
        'ZoneId': ros.stringToRosTemplate(properties.zoneId),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::ESS::ScalingConfiguration`, which is used to create a scaling configuration for a scaling group.
 * @Note This class does not contain additional functions, so it is recommended to use the `ScalingConfiguration` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-ess-scalingconfiguration
 */
class RosScalingConfiguration extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosScalingConfiguration.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrScalingConfigurationId = this.getAtt('ScalingConfigurationId');
        this.attrScalingGroupId = this.getAtt('ScalingGroupId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.scalingGroupId = props.scalingGroupId;
        this.affinity = props.affinity;
        this.cpu = props.cpu;
        this.creditSpecification = props.creditSpecification;
        this.dedicatedHostId = props.dedicatedHostId;
        this.deploymentSetId = props.deploymentSetId;
        this.diskMappings = props.diskMappings;
        this.hostName = props.hostName;
        this.hpcClusterId = props.hpcClusterId;
        this.imageFamily = props.imageFamily;
        this.imageId = props.imageId;
        this.imageName = props.imageName;
        this.imageOptionsLoginAsNonRoot = props.imageOptionsLoginAsNonRoot;
        this.instanceDescription = props.instanceDescription;
        this.instanceId = props.instanceId;
        this.instanceName = props.instanceName;
        this.instancePatternInfos = props.instancePatternInfos;
        this.instanceType = props.instanceType;
        this.instanceTypeOverrides = props.instanceTypeOverrides;
        this.instanceTypes = props.instanceTypes;
        this.internetChargeType = props.internetChargeType;
        this.internetMaxBandwidthIn = props.internetMaxBandwidthIn;
        this.internetMaxBandwidthOut = props.internetMaxBandwidthOut;
        this.ioOptimized = props.ioOptimized;
        this.ipv6AddressCount = props.ipv6AddressCount;
        this.keyPairName = props.keyPairName;
        this.loadBalancerWeight = props.loadBalancerWeight;
        this.memory = props.memory;
        this.password = props.password;
        this.passwordInherit = props.passwordInherit;
        this.privatePoolOptions = props.privatePoolOptions;
        this.ramRoleName = props.ramRoleName;
        this.resourceGroupId = props.resourceGroupId;
        this.scalingConfigurationName = props.scalingConfigurationName;
        this.securityEnhancementStrategy = props.securityEnhancementStrategy;
        this.securityGroupId = props.securityGroupId;
        this.securityGroupIds = props.securityGroupIds;
        this.spotDuration = props.spotDuration;
        this.spotInterruptionBehavior = props.spotInterruptionBehavior;
        this.spotPriceLimit = props.spotPriceLimit;
        this.spotPriceLimitForInstanceType = props.spotPriceLimitForInstanceType;
        this.spotStrategy = props.spotStrategy;
        this.systemDiskAutoSnapshotPolicyId = props.systemDiskAutoSnapshotPolicyId;
        this.systemDiskBurstingEnabled = props.systemDiskBurstingEnabled;
        this.systemDiskCategories = props.systemDiskCategories;
        this.systemDiskCategory = props.systemDiskCategory;
        this.systemDiskDescription = props.systemDiskDescription;
        this.systemDiskDiskName = props.systemDiskDiskName;
        this.systemDiskEncryptAlgorithm = props.systemDiskEncryptAlgorithm;
        this.systemDiskEncrypted = props.systemDiskEncrypted;
        this.systemDiskKmsKeyId = props.systemDiskKmsKeyId;
        this.systemDiskPerformanceLevel = props.systemDiskPerformanceLevel;
        this.systemDiskProvisionedIops = props.systemDiskProvisionedIops;
        this.systemDiskSize = props.systemDiskSize;
        this.tagList = props.tagList;
        this.tenancy = props.tenancy;
        this.userData = props.userData;
        this.zoneId = props.zoneId;
    }
    get rosProperties() {
        return {
            scalingGroupId: this.scalingGroupId,
            affinity: this.affinity,
            cpu: this.cpu,
            creditSpecification: this.creditSpecification,
            dedicatedHostId: this.dedicatedHostId,
            deploymentSetId: this.deploymentSetId,
            diskMappings: this.diskMappings,
            hostName: this.hostName,
            hpcClusterId: this.hpcClusterId,
            imageFamily: this.imageFamily,
            imageId: this.imageId,
            imageName: this.imageName,
            imageOptionsLoginAsNonRoot: this.imageOptionsLoginAsNonRoot,
            instanceDescription: this.instanceDescription,
            instanceId: this.instanceId,
            instanceName: this.instanceName,
            instancePatternInfos: this.instancePatternInfos,
            instanceType: this.instanceType,
            instanceTypeOverrides: this.instanceTypeOverrides,
            instanceTypes: this.instanceTypes,
            internetChargeType: this.internetChargeType,
            internetMaxBandwidthIn: this.internetMaxBandwidthIn,
            internetMaxBandwidthOut: this.internetMaxBandwidthOut,
            ioOptimized: this.ioOptimized,
            ipv6AddressCount: this.ipv6AddressCount,
            keyPairName: this.keyPairName,
            loadBalancerWeight: this.loadBalancerWeight,
            memory: this.memory,
            password: this.password,
            passwordInherit: this.passwordInherit,
            privatePoolOptions: this.privatePoolOptions,
            ramRoleName: this.ramRoleName,
            resourceGroupId: this.resourceGroupId,
            scalingConfigurationName: this.scalingConfigurationName,
            securityEnhancementStrategy: this.securityEnhancementStrategy,
            securityGroupId: this.securityGroupId,
            securityGroupIds: this.securityGroupIds,
            spotDuration: this.spotDuration,
            spotInterruptionBehavior: this.spotInterruptionBehavior,
            spotPriceLimit: this.spotPriceLimit,
            spotPriceLimitForInstanceType: this.spotPriceLimitForInstanceType,
            spotStrategy: this.spotStrategy,
            systemDiskAutoSnapshotPolicyId: this.systemDiskAutoSnapshotPolicyId,
            systemDiskBurstingEnabled: this.systemDiskBurstingEnabled,
            systemDiskCategories: this.systemDiskCategories,
            systemDiskCategory: this.systemDiskCategory,
            systemDiskDescription: this.systemDiskDescription,
            systemDiskDiskName: this.systemDiskDiskName,
            systemDiskEncryptAlgorithm: this.systemDiskEncryptAlgorithm,
            systemDiskEncrypted: this.systemDiskEncrypted,
            systemDiskKmsKeyId: this.systemDiskKmsKeyId,
            systemDiskPerformanceLevel: this.systemDiskPerformanceLevel,
            systemDiskProvisionedIops: this.systemDiskProvisionedIops,
            systemDiskSize: this.systemDiskSize,
            tagList: this.tagList,
            tenancy: this.tenancy,
            userData: this.userData,
            zoneId: this.zoneId,
        };
    }
    renderProperties(props) {
        return rosScalingConfigurationPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosScalingConfiguration = RosScalingConfiguration;
/**
 * The resource type name for this resource class.
 */
RosScalingConfiguration.ROS_RESOURCE_TYPE_NAME = "ALIYUN::ESS::ScalingConfiguration";
/**
 * Determine whether the given properties match those of a `DiskMappingsProperty`
 *
 * @param properties - the TypeScript properties of a `DiskMappingsProperty`
 *
 * @returns the result of the validation.
 */
function RosScalingConfiguration_DiskMappingsPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('burstingEnabled', ros.validateBoolean)(properties.burstingEnabled));
    errors.collect(ros.propertyValidator('category', ros.validateString)(properties.category));
    errors.collect(ros.propertyValidator('description', ros.validateString)(properties.description));
    errors.collect(ros.propertyValidator('kmsKeyId', ros.validateString)(properties.kmsKeyId));
    if (properties.categories && (Array.isArray(properties.categories) || (typeof properties.categories) === 'string')) {
        errors.collect(ros.propertyValidator('categories', ros.validateLength)({
            data: properties.categories.length,
            min: undefined,
            max: 10,
        }));
    }
    errors.collect(ros.propertyValidator('categories', ros.listValidator(ros.validateString))(properties.categories));
    if (properties.encrypted && (typeof properties.encrypted) !== 'object') {
        errors.collect(ros.propertyValidator('encrypted', ros.validateAllowedValues)({
            data: properties.encrypted,
            allowedValues: ["true", "false"],
        }));
    }
    errors.collect(ros.propertyValidator('encrypted', ros.validateString)(properties.encrypted));
    errors.collect(ros.propertyValidator('device', ros.validateString)(properties.device));
    errors.collect(ros.propertyValidator('performanceLevel', ros.validateString)(properties.performanceLevel));
    errors.collect(ros.propertyValidator('size', ros.validateString)(properties.size));
    errors.collect(ros.propertyValidator('deleteWithInstance', ros.validateBoolean)(properties.deleteWithInstance));
    errors.collect(ros.propertyValidator('autoSnapshotPolicyId', ros.validateString)(properties.autoSnapshotPolicyId));
    errors.collect(ros.propertyValidator('provisionedIops', ros.validateNumber)(properties.provisionedIops));
    errors.collect(ros.propertyValidator('diskName', ros.validateString)(properties.diskName));
    errors.collect(ros.propertyValidator('snapshotId', ros.validateString)(properties.snapshotId));
    return errors.wrap('supplied properties not correct for "DiskMappingsProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ESS::ScalingConfiguration.DiskMappings` resource
 *
 * @param properties - the TypeScript properties of a `DiskMappingsProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ESS::ScalingConfiguration.DiskMappings` resource.
 */
// @ts-ignore TS6133
function rosScalingConfigurationDiskMappingsPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosScalingConfiguration_DiskMappingsPropertyValidator(properties).assertSuccess();
    return {
        'BurstingEnabled': ros.booleanToRosTemplate(properties.burstingEnabled),
        'Category': ros.stringToRosTemplate(properties.category),
        'Description': ros.stringToRosTemplate(properties.description),
        'KMSKeyId': ros.stringToRosTemplate(properties.kmsKeyId),
        'Categories': ros.listMapper(ros.stringToRosTemplate)(properties.categories),
        'Encrypted': ros.stringToRosTemplate(properties.encrypted),
        'Device': ros.stringToRosTemplate(properties.device),
        'PerformanceLevel': ros.stringToRosTemplate(properties.performanceLevel),
        'Size': ros.stringToRosTemplate(properties.size),
        'DeleteWithInstance': ros.booleanToRosTemplate(properties.deleteWithInstance),
        'AutoSnapshotPolicyId': ros.stringToRosTemplate(properties.autoSnapshotPolicyId),
        'ProvisionedIops': ros.numberToRosTemplate(properties.provisionedIops),
        'DiskName': ros.stringToRosTemplate(properties.diskName),
        'SnapshotId': ros.stringToRosTemplate(properties.snapshotId),
    };
}
/**
 * Determine whether the given properties match those of a `InstancePatternInfosProperty`
 *
 * @param properties - the TypeScript properties of a `InstancePatternInfosProperty`
 *
 * @returns the result of the validation.
 */
function RosScalingConfiguration_InstancePatternInfosPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('cores', ros.validateNumber)(properties.cores));
    errors.collect(ros.propertyValidator('memory', ros.validateNumber)(properties.memory));
    errors.collect(ros.propertyValidator('instanceFamilyLevel', ros.validateString)(properties.instanceFamilyLevel));
    errors.collect(ros.propertyValidator('maxPrice', ros.validateNumber)(properties.maxPrice));
    errors.collect(ros.propertyValidator('burstablePerformance', ros.validateString)(properties.burstablePerformance));
    if (properties.excludedInstanceTypes && (Array.isArray(properties.excludedInstanceTypes) || (typeof properties.excludedInstanceTypes) === 'string')) {
        errors.collect(ros.propertyValidator('excludedInstanceTypes', ros.validateLength)({
            data: properties.excludedInstanceTypes.length,
            min: undefined,
            max: 100,
        }));
    }
    errors.collect(ros.propertyValidator('excludedInstanceTypes', ros.listValidator(ros.validateString))(properties.excludedInstanceTypes));
    if (properties.architectures && (Array.isArray(properties.architectures) || (typeof properties.architectures) === 'string')) {
        errors.collect(ros.propertyValidator('architectures', ros.validateLength)({
            data: properties.architectures.length,
            min: undefined,
            max: 10,
        }));
    }
    errors.collect(ros.propertyValidator('architectures', ros.listValidator(ros.validateString))(properties.architectures));
    return errors.wrap('supplied properties not correct for "InstancePatternInfosProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ESS::ScalingConfiguration.InstancePatternInfos` resource
 *
 * @param properties - the TypeScript properties of a `InstancePatternInfosProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ESS::ScalingConfiguration.InstancePatternInfos` resource.
 */
// @ts-ignore TS6133
function rosScalingConfigurationInstancePatternInfosPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosScalingConfiguration_InstancePatternInfosPropertyValidator(properties).assertSuccess();
    return {
        'Cores': ros.numberToRosTemplate(properties.cores),
        'Memory': ros.numberToRosTemplate(properties.memory),
        'InstanceFamilyLevel': ros.stringToRosTemplate(properties.instanceFamilyLevel),
        'MaxPrice': ros.numberToRosTemplate(properties.maxPrice),
        'BurstablePerformance': ros.stringToRosTemplate(properties.burstablePerformance),
        'ExcludedInstanceTypes': ros.listMapper(ros.stringToRosTemplate)(properties.excludedInstanceTypes),
        'Architectures': ros.listMapper(ros.stringToRosTemplate)(properties.architectures),
    };
}
/**
 * Determine whether the given properties match those of a `InstanceTypeOverridesProperty`
 *
 * @param properties - the TypeScript properties of a `InstanceTypeOverridesProperty`
 *
 * @returns the result of the validation.
 */
function RosScalingConfiguration_InstanceTypeOverridesPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    if (properties.weightedCapacity && (typeof properties.weightedCapacity) !== 'object') {
        errors.collect(ros.propertyValidator('weightedCapacity', ros.validateRange)({
            data: properties.weightedCapacity,
            min: 1,
            max: 500,
        }));
    }
    errors.collect(ros.propertyValidator('weightedCapacity', ros.validateNumber)(properties.weightedCapacity));
    errors.collect(ros.propertyValidator('instanceType', ros.validateString)(properties.instanceType));
    return errors.wrap('supplied properties not correct for "InstanceTypeOverridesProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ESS::ScalingConfiguration.InstanceTypeOverrides` resource
 *
 * @param properties - the TypeScript properties of a `InstanceTypeOverridesProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ESS::ScalingConfiguration.InstanceTypeOverrides` resource.
 */
// @ts-ignore TS6133
function rosScalingConfigurationInstanceTypeOverridesPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosScalingConfiguration_InstanceTypeOverridesPropertyValidator(properties).assertSuccess();
    return {
        'WeightedCapacity': ros.numberToRosTemplate(properties.weightedCapacity),
        'InstanceType': ros.stringToRosTemplate(properties.instanceType),
    };
}
/**
 * Determine whether the given properties match those of a `PrivatePoolOptionsProperty`
 *
 * @param properties - the TypeScript properties of a `PrivatePoolOptionsProperty`
 *
 * @returns the result of the validation.
 */
function RosScalingConfiguration_PrivatePoolOptionsPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('matchCriteria', ros.validateString)(properties.matchCriteria));
    errors.collect(ros.propertyValidator('identity', ros.validateString)(properties.identity));
    return errors.wrap('supplied properties not correct for "PrivatePoolOptionsProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ESS::ScalingConfiguration.PrivatePoolOptions` resource
 *
 * @param properties - the TypeScript properties of a `PrivatePoolOptionsProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ESS::ScalingConfiguration.PrivatePoolOptions` resource.
 */
// @ts-ignore TS6133
function rosScalingConfigurationPrivatePoolOptionsPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosScalingConfiguration_PrivatePoolOptionsPropertyValidator(properties).assertSuccess();
    return {
        'MatchCriteria': ros.stringToRosTemplate(properties.matchCriteria),
        'Id': ros.stringToRosTemplate(properties.identity),
    };
}
/**
 * Determine whether the given properties match those of a `TagListProperty`
 *
 * @param properties - the TypeScript properties of a `TagListProperty`
 *
 * @returns the result of the validation.
 */
function RosScalingConfiguration_TagListPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('value', ros.validateString)(properties.value));
    errors.collect(ros.propertyValidator('key', ros.requiredValidator)(properties.key));
    errors.collect(ros.propertyValidator('key', ros.validateString)(properties.key));
    return errors.wrap('supplied properties not correct for "TagListProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ESS::ScalingConfiguration.TagList` resource
 *
 * @param properties - the TypeScript properties of a `TagListProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ESS::ScalingConfiguration.TagList` resource.
 */
// @ts-ignore TS6133
function rosScalingConfigurationTagListPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosScalingConfiguration_TagListPropertyValidator(properties).assertSuccess();
    return {
        'Value': ros.stringToRosTemplate(properties.value),
        'Key': ros.stringToRosTemplate(properties.key),
    };
}
/**
 * Determine whether the given properties match those of a `RosScalingGroupProps`
 *
 * @param properties - the TypeScript properties of a `RosScalingGroupProps`
 *
 * @returns the result of the validation.
 */
function RosScalingGroupPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('spotInstanceRemedy', ros.validateBoolean)(properties.spotInstanceRemedy));
    errors.collect(ros.propertyValidator('resourceGroupId', ros.validateString)(properties.resourceGroupId));
    errors.collect(ros.propertyValidator('compensateWithOnDemand', ros.validateBoolean)(properties.compensateWithOnDemand));
    if (properties.serverGroups && (Array.isArray(properties.serverGroups) || (typeof properties.serverGroups) === 'string')) {
        errors.collect(ros.propertyValidator('serverGroups', ros.validateLength)({
            data: properties.serverGroups.length,
            min: undefined,
            max: 10,
        }));
    }
    errors.collect(ros.propertyValidator('serverGroups', ros.listValidator(RosScalingGroup_ServerGroupsPropertyValidator))(properties.serverGroups));
    errors.collect(ros.propertyValidator('notificationConfigurations', ros.listValidator(RosScalingGroup_NotificationConfigurationsPropertyValidator))(properties.notificationConfigurations));
    if (properties.onDemandPercentageAboveBaseCapacity && (typeof properties.onDemandPercentageAboveBaseCapacity) !== 'object') {
        errors.collect(ros.propertyValidator('onDemandPercentageAboveBaseCapacity', ros.validateRange)({
            data: properties.onDemandPercentageAboveBaseCapacity,
            min: 0,
            max: 100,
        }));
    }
    errors.collect(ros.propertyValidator('onDemandPercentageAboveBaseCapacity', ros.validateNumber)(properties.onDemandPercentageAboveBaseCapacity));
    if (properties.desiredCapacity && (typeof properties.desiredCapacity) !== 'object') {
        errors.collect(ros.propertyValidator('desiredCapacity', ros.validateRange)({
            data: properties.desiredCapacity,
            min: 0,
            max: undefined,
        }));
    }
    errors.collect(ros.propertyValidator('desiredCapacity', ros.validateNumber)(properties.desiredCapacity));
    if (properties.allocationStrategy && (typeof properties.allocationStrategy) !== 'object') {
        errors.collect(ros.propertyValidator('allocationStrategy', ros.validateAllowedValues)({
            data: properties.allocationStrategy,
            allowedValues: ["priority", "lowestPrice"],
        }));
    }
    errors.collect(ros.propertyValidator('allocationStrategy', ros.validateString)(properties.allocationStrategy));
    if (properties.onDemandBaseCapacity && (typeof properties.onDemandBaseCapacity) !== 'object') {
        errors.collect(ros.propertyValidator('onDemandBaseCapacity', ros.validateRange)({
            data: properties.onDemandBaseCapacity,
            min: 0,
            max: 1000,
        }));
    }
    errors.collect(ros.propertyValidator('onDemandBaseCapacity', ros.validateNumber)(properties.onDemandBaseCapacity));
    if (properties.standbyInstances && (Array.isArray(properties.standbyInstances) || (typeof properties.standbyInstances) === 'string')) {
        errors.collect(ros.propertyValidator('standbyInstances', ros.validateLength)({
            data: properties.standbyInstances.length,
            min: undefined,
            max: 1000,
        }));
    }
    errors.collect(ros.propertyValidator('standbyInstances', ros.listValidator(ros.validateString))(properties.standbyInstances));
    if (properties.launchTemplateOverrides && (Array.isArray(properties.launchTemplateOverrides) || (typeof properties.launchTemplateOverrides) === 'string')) {
        errors.collect(ros.propertyValidator('launchTemplateOverrides', ros.validateLength)({
            data: properties.launchTemplateOverrides.length,
            min: undefined,
            max: 10,
        }));
    }
    errors.collect(ros.propertyValidator('launchTemplateOverrides', ros.listValidator(RosScalingGroup_LaunchTemplateOverridesPropertyValidator))(properties.launchTemplateOverrides));
    if (properties.removalPolicys && (Array.isArray(properties.removalPolicys) || (typeof properties.removalPolicys) === 'string')) {
        errors.collect(ros.propertyValidator('removalPolicys', ros.validateLength)({
            data: properties.removalPolicys.length,
            min: undefined,
            max: 3,
        }));
    }
    errors.collect(ros.propertyValidator('removalPolicys', ros.listValidator(ros.validateString))(properties.removalPolicys));
    if (properties.spotAllocationStrategy && (typeof properties.spotAllocationStrategy) !== 'object') {
        errors.collect(ros.propertyValidator('spotAllocationStrategy', ros.validateAllowedValues)({
            data: properties.spotAllocationStrategy,
            allowedValues: ["priority", "lowestPrice"],
        }));
    }
    errors.collect(ros.propertyValidator('spotAllocationStrategy', ros.validateString)(properties.spotAllocationStrategy));
    if (properties.tags && (Array.isArray(properties.tags) || (typeof properties.tags) === 'string')) {
        errors.collect(ros.propertyValidator('tags', ros.validateLength)({
            data: properties.tags.length,
            min: undefined,
            max: 20,
        }));
    }
    errors.collect(ros.propertyValidator('tags', ros.listValidator(RosScalingGroup_TagsPropertyValidator))(properties.tags));
    if (properties.scalingPolicy && (typeof properties.scalingPolicy) !== 'object') {
        errors.collect(ros.propertyValidator('scalingPolicy', ros.validateAllowedValues)({
            data: properties.scalingPolicy,
            allowedValues: ["recycle", "release", "forcerelease"],
        }));
    }
    errors.collect(ros.propertyValidator('scalingPolicy', ros.validateString)(properties.scalingPolicy));
    if (properties.vSwitchIds && (Array.isArray(properties.vSwitchIds) || (typeof properties.vSwitchIds) === 'string')) {
        errors.collect(ros.propertyValidator('vSwitchIds', ros.validateLength)({
            data: properties.vSwitchIds.length,
            min: 0,
            max: 8,
        }));
    }
    errors.collect(ros.propertyValidator('vSwitchIds', ros.listValidator(ros.validateString))(properties.vSwitchIds));
    errors.collect(ros.propertyValidator('instanceId', ros.validateString)(properties.instanceId));
    errors.collect(ros.propertyValidator('vSwitchId', ros.validateString)(properties.vSwitchId));
    if (properties.loadBalancerIds && (Array.isArray(properties.loadBalancerIds) || (typeof properties.loadBalancerIds) === 'string')) {
        errors.collect(ros.propertyValidator('loadBalancerIds', ros.validateLength)({
            data: properties.loadBalancerIds.length,
            min: undefined,
            max: 100,
        }));
    }
    errors.collect(ros.propertyValidator('loadBalancerIds', ros.listValidator(ros.validateString))(properties.loadBalancerIds));
    if (properties.spotInstancePools && (typeof properties.spotInstancePools) !== 'object') {
        errors.collect(ros.propertyValidator('spotInstancePools', ros.validateRange)({
            data: properties.spotInstancePools,
            min: 1,
            max: 10,
        }));
    }
    errors.collect(ros.propertyValidator('spotInstancePools', ros.validateNumber)(properties.spotInstancePools));
    errors.collect(ros.propertyValidator('groupDeletionProtection', ros.validateBoolean)(properties.groupDeletionProtection));
    errors.collect(ros.propertyValidator('launchTemplateId', ros.validateString)(properties.launchTemplateId));
    errors.collect(ros.propertyValidator('customPolicyArn', ros.validateString)(properties.customPolicyArn));
    errors.collect(ros.propertyValidator('maxSize', ros.requiredValidator)(properties.maxSize));
    if (properties.maxSize && (typeof properties.maxSize) !== 'object') {
        errors.collect(ros.propertyValidator('maxSize', ros.validateRange)({
            data: properties.maxSize,
            min: 0,
            max: 2000,
        }));
    }
    errors.collect(ros.propertyValidator('maxSize', ros.validateNumber)(properties.maxSize));
    if (properties.scalingGroupName && (typeof properties.scalingGroupName) !== 'object') {
        errors.collect(ros.propertyValidator('scalingGroupName', ros.validateAllowedPattern)({
            data: properties.scalingGroupName,
            reg: /^[a-zA-Z0-9\u4e00-\u9fa5][-_.a-zA-Z0-9\u4e00-\u9fa5]{1,63}$/
        }));
    }
    errors.collect(ros.propertyValidator('scalingGroupName', ros.validateString)(properties.scalingGroupName));
    errors.collect(ros.propertyValidator('minSize', ros.requiredValidator)(properties.minSize));
    if (properties.minSize && (typeof properties.minSize) !== 'object') {
        errors.collect(ros.propertyValidator('minSize', ros.validateRange)({
            data: properties.minSize,
            min: 0,
            max: 2000,
        }));
    }
    errors.collect(ros.propertyValidator('minSize', ros.validateNumber)(properties.minSize));
    if (properties.defaultCooldown && (typeof properties.defaultCooldown) !== 'object') {
        errors.collect(ros.propertyValidator('defaultCooldown', ros.validateRange)({
            data: properties.defaultCooldown,
            min: 0,
            max: 86400,
        }));
    }
    errors.collect(ros.propertyValidator('defaultCooldown', ros.validateNumber)(properties.defaultCooldown));
    errors.collect(ros.propertyValidator('azBalance', ros.validateBoolean)(properties.azBalance));
    if (properties.groupType && (typeof properties.groupType) !== 'object') {
        errors.collect(ros.propertyValidator('groupType', ros.validateAllowedValues)({
            data: properties.groupType,
            allowedValues: ["ECS", "ECI"],
        }));
    }
    errors.collect(ros.propertyValidator('groupType', ros.validateString)(properties.groupType));
    errors.collect(ros.propertyValidator('launchTemplateVersion', ros.validateString)(properties.launchTemplateVersion));
    if (properties.multiAzPolicy && (typeof properties.multiAzPolicy) !== 'object') {
        errors.collect(ros.propertyValidator('multiAzPolicy', ros.validateAllowedValues)({
            data: properties.multiAzPolicy,
            allowedValues: ["PRIORITY", "BALANCE", "COST_OPTIMIZED", "COMPOSABLE"],
        }));
    }
    errors.collect(ros.propertyValidator('multiAzPolicy', ros.validateString)(properties.multiAzPolicy));
    if (properties.protectedInstances && (Array.isArray(properties.protectedInstances) || (typeof properties.protectedInstances) === 'string')) {
        errors.collect(ros.propertyValidator('protectedInstances', ros.validateLength)({
            data: properties.protectedInstances.length,
            min: undefined,
            max: 1000,
        }));
    }
    errors.collect(ros.propertyValidator('protectedInstances', ros.listValidator(ros.validateString))(properties.protectedInstances));
    errors.collect(ros.propertyValidator('containerGroupId', ros.validateString)(properties.containerGroupId));
    if (properties.dbInstanceIds && (Array.isArray(properties.dbInstanceIds) || (typeof properties.dbInstanceIds) === 'string')) {
        errors.collect(ros.propertyValidator('dbInstanceIds', ros.validateLength)({
            data: properties.dbInstanceIds.length,
            min: undefined,
            max: 100,
        }));
    }
    errors.collect(ros.propertyValidator('dbInstanceIds', ros.listValidator(ros.validateString))(properties.dbInstanceIds));
    if (properties.healthCheckType && (typeof properties.healthCheckType) !== 'object') {
        errors.collect(ros.propertyValidator('healthCheckType', ros.validateAllowedValues)({
            data: properties.healthCheckType,
            allowedValues: ["ECS", "NONE"],
        }));
    }
    errors.collect(ros.propertyValidator('healthCheckType', ros.validateString)(properties.healthCheckType));
    if (properties.maxInstanceLifetime && (typeof properties.maxInstanceLifetime) !== 'object') {
        errors.collect(ros.propertyValidator('maxInstanceLifetime', ros.validateRange)({
            data: properties.maxInstanceLifetime,
            min: 86400,
            max: undefined,
        }));
    }
    errors.collect(ros.propertyValidator('maxInstanceLifetime', ros.validateNumber)(properties.maxInstanceLifetime));
    return errors.wrap('supplied properties not correct for "RosScalingGroupProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ESS::ScalingGroup` resource
 *
 * @param properties - the TypeScript properties of a `RosScalingGroupProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ESS::ScalingGroup` resource.
 */
// @ts-ignore TS6133
function rosScalingGroupPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosScalingGroupPropsValidator(properties).assertSuccess();
    }
    return {
        'MaxSize': ros.numberToRosTemplate(properties.maxSize),
        'MinSize': ros.numberToRosTemplate(properties.minSize),
        'AllocationStrategy': ros.stringToRosTemplate(properties.allocationStrategy),
        'AzBalance': ros.booleanToRosTemplate(properties.azBalance),
        'CompensateWithOnDemand': ros.booleanToRosTemplate(properties.compensateWithOnDemand),
        'ContainerGroupId': ros.stringToRosTemplate(properties.containerGroupId),
        'CustomPolicyARN': ros.stringToRosTemplate(properties.customPolicyArn),
        'DBInstanceIds': ros.listMapper(ros.stringToRosTemplate)(properties.dbInstanceIds),
        'DefaultCooldown': ros.numberToRosTemplate(properties.defaultCooldown),
        'DesiredCapacity': ros.numberToRosTemplate(properties.desiredCapacity),
        'GroupDeletionProtection': ros.booleanToRosTemplate(properties.groupDeletionProtection),
        'GroupType': ros.stringToRosTemplate(properties.groupType),
        'HealthCheckType': ros.stringToRosTemplate(properties.healthCheckType),
        'InstanceId': ros.stringToRosTemplate(properties.instanceId),
        'LaunchTemplateId': ros.stringToRosTemplate(properties.launchTemplateId),
        'LaunchTemplateOverrides': ros.listMapper(rosScalingGroupLaunchTemplateOverridesPropertyToRosTemplate)(properties.launchTemplateOverrides),
        'LaunchTemplateVersion': ros.stringToRosTemplate(properties.launchTemplateVersion),
        'LoadBalancerIds': ros.listMapper(ros.stringToRosTemplate)(properties.loadBalancerIds),
        'MaxInstanceLifetime': ros.numberToRosTemplate(properties.maxInstanceLifetime),
        'MultiAZPolicy': ros.stringToRosTemplate(properties.multiAzPolicy),
        'NotificationConfigurations': ros.listMapper(rosScalingGroupNotificationConfigurationsPropertyToRosTemplate)(properties.notificationConfigurations),
        'OnDemandBaseCapacity': ros.numberToRosTemplate(properties.onDemandBaseCapacity),
        'OnDemandPercentageAboveBaseCapacity': ros.numberToRosTemplate(properties.onDemandPercentageAboveBaseCapacity),
        'ProtectedInstances': ros.listMapper(ros.stringToRosTemplate)(properties.protectedInstances),
        'RemovalPolicys': ros.listMapper(ros.stringToRosTemplate)(properties.removalPolicys),
        'ResourceGroupId': ros.stringToRosTemplate(properties.resourceGroupId),
        'ScalingGroupName': ros.stringToRosTemplate(properties.scalingGroupName),
        'ScalingPolicy': ros.stringToRosTemplate(properties.scalingPolicy),
        'ServerGroups': ros.listMapper(rosScalingGroupServerGroupsPropertyToRosTemplate)(properties.serverGroups),
        'SpotAllocationStrategy': ros.stringToRosTemplate(properties.spotAllocationStrategy),
        'SpotInstancePools': ros.numberToRosTemplate(properties.spotInstancePools),
        'SpotInstanceRemedy': ros.booleanToRosTemplate(properties.spotInstanceRemedy),
        'StandbyInstances': ros.listMapper(ros.stringToRosTemplate)(properties.standbyInstances),
        'Tags': ros.listMapper(rosScalingGroupTagsPropertyToRosTemplate)(properties.tags),
        'VSwitchId': ros.stringToRosTemplate(properties.vSwitchId),
        'VSwitchIds': ros.listMapper(ros.stringToRosTemplate)(properties.vSwitchIds),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::ESS::ScalingGroup`, which is used to create a scaling group. A scaling group can be a group of Elastic Compute Service (ECS) instances that are dynamically scaled based on the configured scenario. A scaling group does not immediately take effect after it is created. You must use ALIYUN::ESS::ScalingGroupEnable to enable the scaling group to trigger scaling activities based on scaling rules.
 * @Note This class does not contain additional functions, so it is recommended to use the `ScalingGroup` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-ess-scalinggroup
 */
class RosScalingGroup extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosScalingGroup.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrArn = this.getAtt('Arn');
        this.attrScalingGroupId = this.getAtt('ScalingGroupId');
        this.attrScalingGroupName = this.getAtt('ScalingGroupName');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.maxSize = props.maxSize;
        this.minSize = props.minSize;
        this.allocationStrategy = props.allocationStrategy;
        this.azBalance = props.azBalance;
        this.compensateWithOnDemand = props.compensateWithOnDemand;
        this.containerGroupId = props.containerGroupId;
        this.customPolicyArn = props.customPolicyArn;
        this.dbInstanceIds = props.dbInstanceIds;
        this.defaultCooldown = props.defaultCooldown;
        this.desiredCapacity = props.desiredCapacity;
        this.groupDeletionProtection = props.groupDeletionProtection;
        this.groupType = props.groupType;
        this.healthCheckType = props.healthCheckType;
        this.instanceId = props.instanceId;
        this.launchTemplateId = props.launchTemplateId;
        this.launchTemplateOverrides = props.launchTemplateOverrides;
        this.launchTemplateVersion = props.launchTemplateVersion;
        this.loadBalancerIds = props.loadBalancerIds;
        this.maxInstanceLifetime = props.maxInstanceLifetime;
        this.multiAzPolicy = props.multiAzPolicy;
        this.notificationConfigurations = props.notificationConfigurations;
        this.onDemandBaseCapacity = props.onDemandBaseCapacity;
        this.onDemandPercentageAboveBaseCapacity = props.onDemandPercentageAboveBaseCapacity;
        this.protectedInstances = props.protectedInstances;
        this.removalPolicys = props.removalPolicys;
        this.resourceGroupId = props.resourceGroupId;
        this.scalingGroupName = props.scalingGroupName;
        this.scalingPolicy = props.scalingPolicy;
        this.serverGroups = props.serverGroups;
        this.spotAllocationStrategy = props.spotAllocationStrategy;
        this.spotInstancePools = props.spotInstancePools;
        this.spotInstanceRemedy = props.spotInstanceRemedy;
        this.standbyInstances = props.standbyInstances;
        this.tags = props.tags;
        this.vSwitchId = props.vSwitchId;
        this.vSwitchIds = props.vSwitchIds;
    }
    get rosProperties() {
        return {
            maxSize: this.maxSize,
            minSize: this.minSize,
            allocationStrategy: this.allocationStrategy,
            azBalance: this.azBalance,
            compensateWithOnDemand: this.compensateWithOnDemand,
            containerGroupId: this.containerGroupId,
            customPolicyArn: this.customPolicyArn,
            dbInstanceIds: this.dbInstanceIds,
            defaultCooldown: this.defaultCooldown,
            desiredCapacity: this.desiredCapacity,
            groupDeletionProtection: this.groupDeletionProtection,
            groupType: this.groupType,
            healthCheckType: this.healthCheckType,
            instanceId: this.instanceId,
            launchTemplateId: this.launchTemplateId,
            launchTemplateOverrides: this.launchTemplateOverrides,
            launchTemplateVersion: this.launchTemplateVersion,
            loadBalancerIds: this.loadBalancerIds,
            maxInstanceLifetime: this.maxInstanceLifetime,
            multiAzPolicy: this.multiAzPolicy,
            notificationConfigurations: this.notificationConfigurations,
            onDemandBaseCapacity: this.onDemandBaseCapacity,
            onDemandPercentageAboveBaseCapacity: this.onDemandPercentageAboveBaseCapacity,
            protectedInstances: this.protectedInstances,
            removalPolicys: this.removalPolicys,
            resourceGroupId: this.resourceGroupId,
            scalingGroupName: this.scalingGroupName,
            scalingPolicy: this.scalingPolicy,
            serverGroups: this.serverGroups,
            spotAllocationStrategy: this.spotAllocationStrategy,
            spotInstancePools: this.spotInstancePools,
            spotInstanceRemedy: this.spotInstanceRemedy,
            standbyInstances: this.standbyInstances,
            tags: this.tags,
            vSwitchId: this.vSwitchId,
            vSwitchIds: this.vSwitchIds,
        };
    }
    renderProperties(props) {
        return rosScalingGroupPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosScalingGroup = RosScalingGroup;
/**
 * The resource type name for this resource class.
 */
RosScalingGroup.ROS_RESOURCE_TYPE_NAME = "ALIYUN::ESS::ScalingGroup";
/**
 * Determine whether the given properties match those of a `LaunchTemplateOverridesProperty`
 *
 * @param properties - the TypeScript properties of a `LaunchTemplateOverridesProperty`
 *
 * @returns the result of the validation.
 */
function RosScalingGroup_LaunchTemplateOverridesPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    if (properties.weightedCapacity && (typeof properties.weightedCapacity) !== 'object') {
        errors.collect(ros.propertyValidator('weightedCapacity', ros.validateRange)({
            data: properties.weightedCapacity,
            min: 1,
            max: 500,
        }));
    }
    errors.collect(ros.propertyValidator('weightedCapacity', ros.validateNumber)(properties.weightedCapacity));
    errors.collect(ros.propertyValidator('spotPriceLimit', ros.validateNumber)(properties.spotPriceLimit));
    errors.collect(ros.propertyValidator('instanceType', ros.validateString)(properties.instanceType));
    return errors.wrap('supplied properties not correct for "LaunchTemplateOverridesProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ESS::ScalingGroup.LaunchTemplateOverrides` resource
 *
 * @param properties - the TypeScript properties of a `LaunchTemplateOverridesProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ESS::ScalingGroup.LaunchTemplateOverrides` resource.
 */
// @ts-ignore TS6133
function rosScalingGroupLaunchTemplateOverridesPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosScalingGroup_LaunchTemplateOverridesPropertyValidator(properties).assertSuccess();
    return {
        'WeightedCapacity': ros.numberToRosTemplate(properties.weightedCapacity),
        'SpotPriceLimit': ros.numberToRosTemplate(properties.spotPriceLimit),
        'InstanceType': ros.stringToRosTemplate(properties.instanceType),
    };
}
/**
 * Determine whether the given properties match those of a `NotificationConfigurationsProperty`
 *
 * @param properties - the TypeScript properties of a `NotificationConfigurationsProperty`
 *
 * @returns the result of the validation.
 */
function RosScalingGroup_NotificationConfigurationsPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('notificationArn', ros.requiredValidator)(properties.notificationArn));
    if (properties.notificationArn && (Array.isArray(properties.notificationArn) || (typeof properties.notificationArn) === 'string')) {
        errors.collect(ros.propertyValidator('notificationArn', ros.validateLength)({
            data: properties.notificationArn.length,
            min: undefined,
            max: 300,
        }));
    }
    if (properties.notificationArn && (typeof properties.notificationArn) !== 'object') {
        errors.collect(ros.propertyValidator('notificationArn', ros.validateAllowedPattern)({
            data: properties.notificationArn,
            reg: /^acs:ess:([a-zA-Z0-9-]+):(\d+):(((queue|topic)\/([a-zA-Z0-9][a-zA-Z0-9-]{0,255}))|cloudmonitor)$/
        }));
    }
    errors.collect(ros.propertyValidator('notificationArn', ros.validateString)(properties.notificationArn));
    errors.collect(ros.propertyValidator('notificationTypes', ros.requiredValidator)(properties.notificationTypes));
    if (properties.notificationTypes && (Array.isArray(properties.notificationTypes) || (typeof properties.notificationTypes) === 'string')) {
        errors.collect(ros.propertyValidator('notificationTypes', ros.validateLength)({
            data: properties.notificationTypes.length,
            min: 1,
            max: 8,
        }));
    }
    errors.collect(ros.propertyValidator('notificationTypes', ros.listValidator(ros.validateString))(properties.notificationTypes));
    return errors.wrap('supplied properties not correct for "NotificationConfigurationsProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ESS::ScalingGroup.NotificationConfigurations` resource
 *
 * @param properties - the TypeScript properties of a `NotificationConfigurationsProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ESS::ScalingGroup.NotificationConfigurations` resource.
 */
// @ts-ignore TS6133
function rosScalingGroupNotificationConfigurationsPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosScalingGroup_NotificationConfigurationsPropertyValidator(properties).assertSuccess();
    return {
        'NotificationArn': ros.stringToRosTemplate(properties.notificationArn),
        'NotificationTypes': ros.listMapper(ros.stringToRosTemplate)(properties.notificationTypes),
    };
}
/**
 * Determine whether the given properties match those of a `ServerGroupsProperty`
 *
 * @param properties - the TypeScript properties of a `ServerGroupsProperty`
 *
 * @returns the result of the validation.
 */
function RosScalingGroup_ServerGroupsPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('type', ros.requiredValidator)(properties.type));
    if (properties.type && (typeof properties.type) !== 'object') {
        errors.collect(ros.propertyValidator('type', ros.validateAllowedValues)({
            data: properties.type,
            allowedValues: ["ALB", "NLB"],
        }));
    }
    errors.collect(ros.propertyValidator('type', ros.validateString)(properties.type));
    errors.collect(ros.propertyValidator('port', ros.requiredValidator)(properties.port));
    if (properties.port && (typeof properties.port) !== 'object') {
        errors.collect(ros.propertyValidator('port', ros.validateRange)({
            data: properties.port,
            min: 0,
            max: 65535,
        }));
    }
    errors.collect(ros.propertyValidator('port', ros.validateNumber)(properties.port));
    errors.collect(ros.propertyValidator('serverGroupId', ros.requiredValidator)(properties.serverGroupId));
    errors.collect(ros.propertyValidator('serverGroupId', ros.validateString)(properties.serverGroupId));
    errors.collect(ros.propertyValidator('weight', ros.requiredValidator)(properties.weight));
    if (properties.weight && (typeof properties.weight) !== 'object') {
        errors.collect(ros.propertyValidator('weight', ros.validateRange)({
            data: properties.weight,
            min: 0,
            max: 100,
        }));
    }
    errors.collect(ros.propertyValidator('weight', ros.validateNumber)(properties.weight));
    return errors.wrap('supplied properties not correct for "ServerGroupsProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ESS::ScalingGroup.ServerGroups` resource
 *
 * @param properties - the TypeScript properties of a `ServerGroupsProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ESS::ScalingGroup.ServerGroups` resource.
 */
// @ts-ignore TS6133
function rosScalingGroupServerGroupsPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosScalingGroup_ServerGroupsPropertyValidator(properties).assertSuccess();
    return {
        'Type': ros.stringToRosTemplate(properties.type),
        'Port': ros.numberToRosTemplate(properties.port),
        'ServerGroupId': ros.stringToRosTemplate(properties.serverGroupId),
        'Weight': ros.numberToRosTemplate(properties.weight),
    };
}
/**
 * Determine whether the given properties match those of a `TagsProperty`
 *
 * @param properties - the TypeScript properties of a `TagsProperty`
 *
 * @returns the result of the validation.
 */
function RosScalingGroup_TagsPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('value', ros.validateString)(properties.value));
    errors.collect(ros.propertyValidator('key', ros.requiredValidator)(properties.key));
    errors.collect(ros.propertyValidator('key', ros.validateString)(properties.key));
    return errors.wrap('supplied properties not correct for "TagsProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ESS::ScalingGroup.Tags` resource
 *
 * @param properties - the TypeScript properties of a `TagsProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ESS::ScalingGroup.Tags` resource.
 */
// @ts-ignore TS6133
function rosScalingGroupTagsPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosScalingGroup_TagsPropertyValidator(properties).assertSuccess();
    return {
        'Value': ros.stringToRosTemplate(properties.value),
        'Key': ros.stringToRosTemplate(properties.key),
    };
}
/**
 * Determine whether the given properties match those of a `RosScalingGroupEnableProps`
 *
 * @param properties - the TypeScript properties of a `RosScalingGroupEnableProps`
 *
 * @returns the result of the validation.
 */
function RosScalingGroupEnablePropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('attachOptions', RosScalingGroupEnable_AttachOptionsPropertyValidator)(properties.attachOptions));
    errors.collect(ros.propertyValidator('detachOptions', RosScalingGroupEnable_DetachOptionsPropertyValidator)(properties.detachOptions));
    if (properties.scalingRuleArisExecuteVersion && (typeof properties.scalingRuleArisExecuteVersion) !== 'object') {
        errors.collect(ros.propertyValidator('scalingRuleArisExecuteVersion', ros.validateRange)({
            data: properties.scalingRuleArisExecuteVersion,
            min: 0,
            max: undefined,
        }));
    }
    errors.collect(ros.propertyValidator('scalingRuleArisExecuteVersion', ros.validateNumber)(properties.scalingRuleArisExecuteVersion));
    errors.collect(ros.propertyValidator('scalingGroupId', ros.requiredValidator)(properties.scalingGroupId));
    errors.collect(ros.propertyValidator('scalingGroupId', ros.validateString)(properties.scalingGroupId));
    if (properties.scalingRuleAris && (Array.isArray(properties.scalingRuleAris) || (typeof properties.scalingRuleAris) === 'string')) {
        errors.collect(ros.propertyValidator('scalingRuleAris', ros.validateLength)({
            data: properties.scalingRuleAris.length,
            min: undefined,
            max: 10,
        }));
    }
    errors.collect(ros.propertyValidator('scalingRuleAris', ros.listValidator(ros.validateString))(properties.scalingRuleAris));
    if (properties.removeInstanceIds && (Array.isArray(properties.removeInstanceIds) || (typeof properties.removeInstanceIds) === 'string')) {
        errors.collect(ros.propertyValidator('removeInstanceIds', ros.validateLength)({
            data: properties.removeInstanceIds.length,
            min: undefined,
            max: 1000,
        }));
    }
    errors.collect(ros.propertyValidator('removeInstanceIds', ros.listValidator(ros.validateString))(properties.removeInstanceIds));
    errors.collect(ros.propertyValidator('scalingConfigurationId', ros.validateString)(properties.scalingConfigurationId));
    if (properties.instanceIds && (Array.isArray(properties.instanceIds) || (typeof properties.instanceIds) === 'string')) {
        errors.collect(ros.propertyValidator('instanceIds', ros.validateLength)({
            data: properties.instanceIds.length,
            min: undefined,
            max: 1000,
        }));
    }
    errors.collect(ros.propertyValidator('instanceIds', ros.listValidator(ros.validateString))(properties.instanceIds));
    return errors.wrap('supplied properties not correct for "RosScalingGroupEnableProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ESS::ScalingGroupEnable` resource
 *
 * @param properties - the TypeScript properties of a `RosScalingGroupEnableProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ESS::ScalingGroupEnable` resource.
 */
// @ts-ignore TS6133
function rosScalingGroupEnablePropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosScalingGroupEnablePropsValidator(properties).assertSuccess();
    }
    return {
        'ScalingGroupId': ros.stringToRosTemplate(properties.scalingGroupId),
        'AttachOptions': rosScalingGroupEnableAttachOptionsPropertyToRosTemplate(properties.attachOptions),
        'DetachOptions': rosScalingGroupEnableDetachOptionsPropertyToRosTemplate(properties.detachOptions),
        'InstanceIds': ros.listMapper(ros.stringToRosTemplate)(properties.instanceIds),
        'RemoveInstanceIds': ros.listMapper(ros.stringToRosTemplate)(properties.removeInstanceIds),
        'ScalingConfigurationId': ros.stringToRosTemplate(properties.scalingConfigurationId),
        'ScalingRuleAris': ros.listMapper(ros.stringToRosTemplate)(properties.scalingRuleAris),
        'ScalingRuleArisExecuteVersion': ros.numberToRosTemplate(properties.scalingRuleArisExecuteVersion),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::ESS::ScalingGroupEnable`, which is used to enable a scaling group.
 * @Note This class does not contain additional functions, so it is recommended to use the `ScalingGroupEnable` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-ess-scalinggroupenable
 */
class RosScalingGroupEnable extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosScalingGroupEnable.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrLifecycleState = this.getAtt('LifecycleState');
        this.attrScalingGroupId = this.getAtt('ScalingGroupId');
        this.attrScalingInstanceDetails = this.getAtt('ScalingInstanceDetails');
        this.attrScalingInstances = this.getAtt('ScalingInstances');
        this.attrScalingRuleArisExecuteErrorInfo = this.getAtt('ScalingRuleArisExecuteErrorInfo');
        this.attrScalingRuleArisExecuteResultInstancesAdded = this.getAtt('ScalingRuleArisExecuteResultInstancesAdded');
        this.attrScalingRuleArisExecuteResultInstancesRemoved = this.getAtt('ScalingRuleArisExecuteResultInstancesRemoved');
        this.attrScalingRuleArisExecuteResultNumberOfAddedInstances = this.getAtt('ScalingRuleArisExecuteResultNumberOfAddedInstances');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.scalingGroupId = props.scalingGroupId;
        this.attachOptions = props.attachOptions;
        this.detachOptions = props.detachOptions;
        this.instanceIds = props.instanceIds;
        this.removeInstanceIds = props.removeInstanceIds;
        this.scalingConfigurationId = props.scalingConfigurationId;
        this.scalingRuleAris = props.scalingRuleAris;
        this.scalingRuleArisExecuteVersion = props.scalingRuleArisExecuteVersion;
    }
    get rosProperties() {
        return {
            scalingGroupId: this.scalingGroupId,
            attachOptions: this.attachOptions,
            detachOptions: this.detachOptions,
            instanceIds: this.instanceIds,
            removeInstanceIds: this.removeInstanceIds,
            scalingConfigurationId: this.scalingConfigurationId,
            scalingRuleAris: this.scalingRuleAris,
            scalingRuleArisExecuteVersion: this.scalingRuleArisExecuteVersion,
        };
    }
    renderProperties(props) {
        return rosScalingGroupEnablePropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosScalingGroupEnable = RosScalingGroupEnable;
/**
 * The resource type name for this resource class.
 */
RosScalingGroupEnable.ROS_RESOURCE_TYPE_NAME = "ALIYUN::ESS::ScalingGroupEnable";
/**
 * Determine whether the given properties match those of a `AttachOptionsProperty`
 *
 * @param properties - the TypeScript properties of a `AttachOptionsProperty`
 *
 * @returns the result of the validation.
 */
function RosScalingGroupEnable_AttachOptionsPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('entrusted', ros.validateBoolean)(properties.entrusted));
    errors.collect(ros.propertyValidator('lifecycleHook', ros.validateBoolean)(properties.lifecycleHook));
    return errors.wrap('supplied properties not correct for "AttachOptionsProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ESS::ScalingGroupEnable.AttachOptions` resource
 *
 * @param properties - the TypeScript properties of a `AttachOptionsProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ESS::ScalingGroupEnable.AttachOptions` resource.
 */
// @ts-ignore TS6133
function rosScalingGroupEnableAttachOptionsPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosScalingGroupEnable_AttachOptionsPropertyValidator(properties).assertSuccess();
    return {
        'Entrusted': ros.booleanToRosTemplate(properties.entrusted),
        'LifecycleHook': ros.booleanToRosTemplate(properties.lifecycleHook),
    };
}
/**
 * Determine whether the given properties match those of a `DetachOptionsProperty`
 *
 * @param properties - the TypeScript properties of a `DetachOptionsProperty`
 *
 * @returns the result of the validation.
 */
function RosScalingGroupEnable_DetachOptionsPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('detachOption', ros.validateString)(properties.detachOption));
    errors.collect(ros.propertyValidator('decreaseDesiredCapacity', ros.validateBoolean)(properties.decreaseDesiredCapacity));
    errors.collect(ros.propertyValidator('lifecycleHook', ros.validateBoolean)(properties.lifecycleHook));
    return errors.wrap('supplied properties not correct for "DetachOptionsProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ESS::ScalingGroupEnable.DetachOptions` resource
 *
 * @param properties - the TypeScript properties of a `DetachOptionsProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ESS::ScalingGroupEnable.DetachOptions` resource.
 */
// @ts-ignore TS6133
function rosScalingGroupEnableDetachOptionsPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosScalingGroupEnable_DetachOptionsPropertyValidator(properties).assertSuccess();
    return {
        'DetachOption': ros.stringToRosTemplate(properties.detachOption),
        'DecreaseDesiredCapacity': ros.booleanToRosTemplate(properties.decreaseDesiredCapacity),
        'LifecycleHook': ros.booleanToRosTemplate(properties.lifecycleHook),
    };
}
/**
 * Determine whether the given properties match those of a `RosScalingRuleProps`
 *
 * @param properties - the TypeScript properties of a `RosScalingRuleProps`
 *
 * @returns the result of the validation.
 */
function RosScalingRulePropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('targetValue', ros.validateNumber)(properties.targetValue));
    if (properties.cooldown && (typeof properties.cooldown) !== 'object') {
        errors.collect(ros.propertyValidator('cooldown', ros.validateRange)({
            data: properties.cooldown,
            min: 0,
            max: 86400,
        }));
    }
    errors.collect(ros.propertyValidator('cooldown', ros.validateNumber)(properties.cooldown));
    errors.collect(ros.propertyValidator('scalingGroupId', ros.requiredValidator)(properties.scalingGroupId));
    errors.collect(ros.propertyValidator('scalingGroupId', ros.validateString)(properties.scalingGroupId));
    if (properties.predictiveValueBehavior && (typeof properties.predictiveValueBehavior) !== 'object') {
        errors.collect(ros.propertyValidator('predictiveValueBehavior', ros.validateAllowedValues)({
            data: properties.predictiveValueBehavior,
            allowedValues: ["MaxOverridePredictiveValue", "PredictiveValueOverrideMax", "PredictiveValueOverrideMaxWithBuffer"],
        }));
    }
    errors.collect(ros.propertyValidator('predictiveValueBehavior', ros.validateString)(properties.predictiveValueBehavior));
    if (properties.minAdjustmentMagnitude && (typeof properties.minAdjustmentMagnitude) !== 'object') {
        errors.collect(ros.propertyValidator('minAdjustmentMagnitude', ros.validateRange)({
            data: properties.minAdjustmentMagnitude,
            min: 0,
            max: 20,
        }));
    }
    errors.collect(ros.propertyValidator('minAdjustmentMagnitude', ros.validateNumber)(properties.minAdjustmentMagnitude));
    errors.collect(ros.propertyValidator('disableScaleIn', ros.validateBoolean)(properties.disableScaleIn));
    errors.collect(ros.propertyValidator('stepAdjustment', ros.listValidator(RosScalingRule_StepAdjustmentPropertyValidator))(properties.stepAdjustment));
    if (properties.adjustmentType && (typeof properties.adjustmentType) !== 'object') {
        errors.collect(ros.propertyValidator('adjustmentType', ros.validateAllowedValues)({
            data: properties.adjustmentType,
            allowedValues: ["QuantityChangeInCapacity", "PercentChangeInCapacity", "TotalCapacity"],
        }));
    }
    errors.collect(ros.propertyValidator('adjustmentType', ros.validateString)(properties.adjustmentType));
    if (properties.metricName && (typeof properties.metricName) !== 'object') {
        errors.collect(ros.propertyValidator('metricName', ros.validateAllowedValues)({
            data: properties.metricName,
            allowedValues: ["CpuUtilization", "ClassicInternetRx", "ClassicInternetTx", "VpcInternetRx", "VpcInternetTx", "IntranetRx", "IntranetTx"],
        }));
    }
    errors.collect(ros.propertyValidator('metricName', ros.validateString)(properties.metricName));
    if (properties.scalingRuleName && (typeof properties.scalingRuleName) !== 'object') {
        errors.collect(ros.propertyValidator('scalingRuleName', ros.validateAllowedPattern)({
            data: properties.scalingRuleName,
            reg: /^[a-zA-Z0-9\u4e00-\u9fa5][-_.a-zA-Z0-9\u4e00-\u9fa5]{1,63}$/
        }));
    }
    errors.collect(ros.propertyValidator('scalingRuleName', ros.validateString)(properties.scalingRuleName));
    if (properties.adjustmentValue && (typeof properties.adjustmentValue) !== 'object') {
        errors.collect(ros.propertyValidator('adjustmentValue', ros.validateRange)({
            data: properties.adjustmentValue,
            min: -500,
            max: 10000,
        }));
    }
    errors.collect(ros.propertyValidator('adjustmentValue', ros.validateNumber)(properties.adjustmentValue));
    errors.collect(ros.propertyValidator('scaleOutEvaluationCount', ros.validateNumber)(properties.scaleOutEvaluationCount));
    if (properties.initialMaxSize && (typeof properties.initialMaxSize) !== 'object') {
        errors.collect(ros.propertyValidator('initialMaxSize', ros.validateRange)({
            data: properties.initialMaxSize,
            min: 0,
            max: 1000,
        }));
    }
    errors.collect(ros.propertyValidator('initialMaxSize', ros.validateNumber)(properties.initialMaxSize));
    if (properties.scalingRuleType && (typeof properties.scalingRuleType) !== 'object') {
        errors.collect(ros.propertyValidator('scalingRuleType', ros.validateAllowedValues)({
            data: properties.scalingRuleType,
            allowedValues: ["SimpleScalingRule", "TargetTrackingScalingRule", "StepScalingRule", "PredictiveScalingRule"],
        }));
    }
    errors.collect(ros.propertyValidator('scalingRuleType', ros.validateString)(properties.scalingRuleType));
    if (properties.estimatedInstanceWarmup && (typeof properties.estimatedInstanceWarmup) !== 'object') {
        errors.collect(ros.propertyValidator('estimatedInstanceWarmup', ros.validateRange)({
            data: properties.estimatedInstanceWarmup,
            min: 0,
            max: 86400,
        }));
    }
    errors.collect(ros.propertyValidator('estimatedInstanceWarmup', ros.validateNumber)(properties.estimatedInstanceWarmup));
    if (properties.predictiveScalingMode && (typeof properties.predictiveScalingMode) !== 'object') {
        errors.collect(ros.propertyValidator('predictiveScalingMode', ros.validateAllowedValues)({
            data: properties.predictiveScalingMode,
            allowedValues: ["PredictAndScale", "PredictOnly"],
        }));
    }
    errors.collect(ros.propertyValidator('predictiveScalingMode', ros.validateString)(properties.predictiveScalingMode));
    if (properties.predictiveTaskBufferTime && (typeof properties.predictiveTaskBufferTime) !== 'object') {
        errors.collect(ros.propertyValidator('predictiveTaskBufferTime', ros.validateRange)({
            data: properties.predictiveTaskBufferTime,
            min: 0,
            max: 60,
        }));
    }
    errors.collect(ros.propertyValidator('predictiveTaskBufferTime', ros.validateNumber)(properties.predictiveTaskBufferTime));
    if (properties.predictiveValueBuffer && (typeof properties.predictiveValueBuffer) !== 'object') {
        errors.collect(ros.propertyValidator('predictiveValueBuffer', ros.validateRange)({
            data: properties.predictiveValueBuffer,
            min: 0,
            max: 100,
        }));
    }
    errors.collect(ros.propertyValidator('predictiveValueBuffer', ros.validateNumber)(properties.predictiveValueBuffer));
    errors.collect(ros.propertyValidator('scaleInEvaluationCount', ros.validateNumber)(properties.scaleInEvaluationCount));
    return errors.wrap('supplied properties not correct for "RosScalingRuleProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ESS::ScalingRule` resource
 *
 * @param properties - the TypeScript properties of a `RosScalingRuleProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ESS::ScalingRule` resource.
 */
// @ts-ignore TS6133
function rosScalingRulePropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosScalingRulePropsValidator(properties).assertSuccess();
    }
    return {
        'ScalingGroupId': ros.stringToRosTemplate(properties.scalingGroupId),
        'AdjustmentType': ros.stringToRosTemplate(properties.adjustmentType),
        'AdjustmentValue': ros.numberToRosTemplate(properties.adjustmentValue),
        'Cooldown': ros.numberToRosTemplate(properties.cooldown),
        'DisableScaleIn': ros.booleanToRosTemplate(properties.disableScaleIn),
        'EstimatedInstanceWarmup': ros.numberToRosTemplate(properties.estimatedInstanceWarmup),
        'InitialMaxSize': ros.numberToRosTemplate(properties.initialMaxSize),
        'MetricName': ros.stringToRosTemplate(properties.metricName),
        'MinAdjustmentMagnitude': ros.numberToRosTemplate(properties.minAdjustmentMagnitude),
        'PredictiveScalingMode': ros.stringToRosTemplate(properties.predictiveScalingMode),
        'PredictiveTaskBufferTime': ros.numberToRosTemplate(properties.predictiveTaskBufferTime),
        'PredictiveValueBehavior': ros.stringToRosTemplate(properties.predictiveValueBehavior),
        'PredictiveValueBuffer': ros.numberToRosTemplate(properties.predictiveValueBuffer),
        'ScaleInEvaluationCount': ros.numberToRosTemplate(properties.scaleInEvaluationCount),
        'ScaleOutEvaluationCount': ros.numberToRosTemplate(properties.scaleOutEvaluationCount),
        'ScalingRuleName': ros.stringToRosTemplate(properties.scalingRuleName),
        'ScalingRuleType': ros.stringToRosTemplate(properties.scalingRuleType),
        'StepAdjustment': ros.listMapper(rosScalingRuleStepAdjustmentPropertyToRosTemplate)(properties.stepAdjustment),
        'TargetValue': ros.numberToRosTemplate(properties.targetValue),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::ESS::ScalingRule`, which is used to create a scaling rule.
 * @Note This class does not contain additional functions, so it is recommended to use the `ScalingRule` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-ess-scalingrule
 */
class RosScalingRule extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosScalingRule.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrScalingRuleAri = this.getAtt('ScalingRuleAri');
        this.attrScalingRuleId = this.getAtt('ScalingRuleId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.scalingGroupId = props.scalingGroupId;
        this.adjustmentType = props.adjustmentType;
        this.adjustmentValue = props.adjustmentValue;
        this.cooldown = props.cooldown;
        this.disableScaleIn = props.disableScaleIn;
        this.estimatedInstanceWarmup = props.estimatedInstanceWarmup;
        this.initialMaxSize = props.initialMaxSize;
        this.metricName = props.metricName;
        this.minAdjustmentMagnitude = props.minAdjustmentMagnitude;
        this.predictiveScalingMode = props.predictiveScalingMode;
        this.predictiveTaskBufferTime = props.predictiveTaskBufferTime;
        this.predictiveValueBehavior = props.predictiveValueBehavior;
        this.predictiveValueBuffer = props.predictiveValueBuffer;
        this.scaleInEvaluationCount = props.scaleInEvaluationCount;
        this.scaleOutEvaluationCount = props.scaleOutEvaluationCount;
        this.scalingRuleName = props.scalingRuleName;
        this.scalingRuleType = props.scalingRuleType;
        this.stepAdjustment = props.stepAdjustment;
        this.targetValue = props.targetValue;
    }
    get rosProperties() {
        return {
            scalingGroupId: this.scalingGroupId,
            adjustmentType: this.adjustmentType,
            adjustmentValue: this.adjustmentValue,
            cooldown: this.cooldown,
            disableScaleIn: this.disableScaleIn,
            estimatedInstanceWarmup: this.estimatedInstanceWarmup,
            initialMaxSize: this.initialMaxSize,
            metricName: this.metricName,
            minAdjustmentMagnitude: this.minAdjustmentMagnitude,
            predictiveScalingMode: this.predictiveScalingMode,
            predictiveTaskBufferTime: this.predictiveTaskBufferTime,
            predictiveValueBehavior: this.predictiveValueBehavior,
            predictiveValueBuffer: this.predictiveValueBuffer,
            scaleInEvaluationCount: this.scaleInEvaluationCount,
            scaleOutEvaluationCount: this.scaleOutEvaluationCount,
            scalingRuleName: this.scalingRuleName,
            scalingRuleType: this.scalingRuleType,
            stepAdjustment: this.stepAdjustment,
            targetValue: this.targetValue,
        };
    }
    renderProperties(props) {
        return rosScalingRulePropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosScalingRule = RosScalingRule;
/**
 * The resource type name for this resource class.
 */
RosScalingRule.ROS_RESOURCE_TYPE_NAME = "ALIYUN::ESS::ScalingRule";
/**
 * Determine whether the given properties match those of a `StepAdjustmentProperty`
 *
 * @param properties - the TypeScript properties of a `StepAdjustmentProperty`
 *
 * @returns the result of the validation.
 */
function RosScalingRule_StepAdjustmentPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    if (properties.metricIntervalUpperBound && (typeof properties.metricIntervalUpperBound) !== 'object') {
        errors.collect(ros.propertyValidator('metricIntervalUpperBound', ros.validateRange)({
            data: properties.metricIntervalUpperBound,
            min: -9999999000000000000,
            max: 9999999000000000000,
        }));
    }
    errors.collect(ros.propertyValidator('metricIntervalUpperBound', ros.validateNumber)(properties.metricIntervalUpperBound));
    if (properties.metricIntervalLowerBound && (typeof properties.metricIntervalLowerBound) !== 'object') {
        errors.collect(ros.propertyValidator('metricIntervalLowerBound', ros.validateRange)({
            data: properties.metricIntervalLowerBound,
            min: -9999999000000000000,
            max: 9999999000000000000,
        }));
    }
    errors.collect(ros.propertyValidator('metricIntervalLowerBound', ros.validateNumber)(properties.metricIntervalLowerBound));
    if (properties.scalingAdjustment && (typeof properties.scalingAdjustment) !== 'object') {
        errors.collect(ros.propertyValidator('scalingAdjustment', ros.validateRange)({
            data: properties.scalingAdjustment,
            min: 0,
            max: 1000,
        }));
    }
    errors.collect(ros.propertyValidator('scalingAdjustment', ros.validateNumber)(properties.scalingAdjustment));
    return errors.wrap('supplied properties not correct for "StepAdjustmentProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ESS::ScalingRule.StepAdjustment` resource
 *
 * @param properties - the TypeScript properties of a `StepAdjustmentProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ESS::ScalingRule.StepAdjustment` resource.
 */
// @ts-ignore TS6133
function rosScalingRuleStepAdjustmentPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosScalingRule_StepAdjustmentPropertyValidator(properties).assertSuccess();
    return {
        'MetricIntervalUpperBound': ros.numberToRosTemplate(properties.metricIntervalUpperBound),
        'MetricIntervalLowerBound': ros.numberToRosTemplate(properties.metricIntervalLowerBound),
        'ScalingAdjustment': ros.numberToRosTemplate(properties.scalingAdjustment),
    };
}
/**
 * Determine whether the given properties match those of a `RosScheduledTaskProps`
 *
 * @param properties - the TypeScript properties of a `RosScheduledTaskProps`
 *
 * @returns the result of the validation.
 */
function RosScheduledTaskPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('launchTime', ros.requiredValidator)(properties.launchTime));
    if (properties.launchTime && (typeof properties.launchTime) !== 'object') {
        errors.collect(ros.propertyValidator('launchTime', ros.validateAllowedPattern)({
            data: properties.launchTime,
            reg: /^\d{4}-\d{2}-\d{2}T\d{2}[:]\d{2}Z$/
        }));
    }
    errors.collect(ros.propertyValidator('launchTime', ros.validateString)(properties.launchTime));
    if (properties.description && (Array.isArray(properties.description) || (typeof properties.description) === 'string')) {
        errors.collect(ros.propertyValidator('description', ros.validateLength)({
            data: properties.description.length,
            min: 2,
            max: 200,
        }));
    }
    errors.collect(ros.propertyValidator('description', ros.validateString)(properties.description));
    errors.collect(ros.propertyValidator('scalingGroupId', ros.validateString)(properties.scalingGroupId));
    if (properties.recurrenceType && (typeof properties.recurrenceType) !== 'object') {
        errors.collect(ros.propertyValidator('recurrenceType', ros.validateAllowedValues)({
            data: properties.recurrenceType,
            allowedValues: ["Daily", "Weekly", "Monthly"],
        }));
    }
    errors.collect(ros.propertyValidator('recurrenceType', ros.validateString)(properties.recurrenceType));
    errors.collect(ros.propertyValidator('desiredCapacity', ros.validateNumber)(properties.desiredCapacity));
    if (properties.scheduledTaskName && (typeof properties.scheduledTaskName) !== 'object') {
        errors.collect(ros.propertyValidator('scheduledTaskName', ros.validateAllowedPattern)({
            data: properties.scheduledTaskName,
            reg: /^[a-zA-Z0-9\u4e00-\u9fa5][-_.a-zA-Z0-9\u4e00-\u9fa5]{1,63}$/
        }));
    }
    errors.collect(ros.propertyValidator('scheduledTaskName', ros.validateString)(properties.scheduledTaskName));
    errors.collect(ros.propertyValidator('maxValue', ros.validateNumber)(properties.maxValue));
    if (properties.launchExpirationTime && (typeof properties.launchExpirationTime) !== 'object') {
        errors.collect(ros.propertyValidator('launchExpirationTime', ros.validateRange)({
            data: properties.launchExpirationTime,
            min: 0,
            max: 21600,
        }));
    }
    errors.collect(ros.propertyValidator('launchExpirationTime', ros.validateNumber)(properties.launchExpirationTime));
    errors.collect(ros.propertyValidator('minValue', ros.validateNumber)(properties.minValue));
    if (properties.scheduledAction && (Array.isArray(properties.scheduledAction) || (typeof properties.scheduledAction) === 'string')) {
        errors.collect(ros.propertyValidator('scheduledAction', ros.validateLength)({
            data: properties.scheduledAction.length,
            min: undefined,
            max: 200,
        }));
    }
    errors.collect(ros.propertyValidator('scheduledAction', ros.validateString)(properties.scheduledAction));
    if (properties.recurrenceEndTime && (typeof properties.recurrenceEndTime) !== 'object') {
        errors.collect(ros.propertyValidator('recurrenceEndTime', ros.validateAllowedPattern)({
            data: properties.recurrenceEndTime,
            reg: /^\d{4}-\d{2}-\d{2}T\d{2}[:]\d{2}Z$/
        }));
    }
    errors.collect(ros.propertyValidator('recurrenceEndTime', ros.validateString)(properties.recurrenceEndTime));
    if (properties.recurrenceValue && (Array.isArray(properties.recurrenceValue) || (typeof properties.recurrenceValue) === 'string')) {
        errors.collect(ros.propertyValidator('recurrenceValue', ros.validateLength)({
            data: properties.recurrenceValue.length,
            min: undefined,
            max: 50,
        }));
    }
    if (properties.recurrenceValue && (typeof properties.recurrenceValue) !== 'object') {
        errors.collect(ros.propertyValidator('recurrenceValue', ros.validateAllowedPattern)({
            data: properties.recurrenceValue,
            reg: /^(\d{1,2})$|^([0-6](,\s*[0-6]){,6})$|^(\d{1,2}[-]\d{1,2})$/
        }));
    }
    errors.collect(ros.propertyValidator('recurrenceValue', ros.validateString)(properties.recurrenceValue));
    errors.collect(ros.propertyValidator('taskEnabled', ros.validateBoolean)(properties.taskEnabled));
    return errors.wrap('supplied properties not correct for "RosScheduledTaskProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ESS::ScheduledTask` resource
 *
 * @param properties - the TypeScript properties of a `RosScheduledTaskProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ESS::ScheduledTask` resource.
 */
// @ts-ignore TS6133
function rosScheduledTaskPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosScheduledTaskPropsValidator(properties).assertSuccess();
    }
    return {
        'LaunchTime': ros.stringToRosTemplate(properties.launchTime),
        'Description': ros.stringToRosTemplate(properties.description),
        'DesiredCapacity': ros.numberToRosTemplate(properties.desiredCapacity),
        'LaunchExpirationTime': ros.numberToRosTemplate(properties.launchExpirationTime),
        'MaxValue': ros.numberToRosTemplate(properties.maxValue),
        'MinValue': ros.numberToRosTemplate(properties.minValue),
        'RecurrenceEndTime': ros.stringToRosTemplate(properties.recurrenceEndTime),
        'RecurrenceType': ros.stringToRosTemplate(properties.recurrenceType),
        'RecurrenceValue': ros.stringToRosTemplate(properties.recurrenceValue),
        'ScalingGroupId': ros.stringToRosTemplate(properties.scalingGroupId),
        'ScheduledAction': ros.stringToRosTemplate(properties.scheduledAction),
        'ScheduledTaskName': ros.stringToRosTemplate(properties.scheduledTaskName),
        'TaskEnabled': ros.booleanToRosTemplate(properties.taskEnabled),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::ESS::ScheduledTask`, which is used to create a scheduled task by specifying properties.
 * @Note This class does not contain additional functions, so it is recommended to use the `ScheduledTask` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-ess-scheduledtask
 */
class RosScheduledTask extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosScheduledTask.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrScheduledTaskId = this.getAtt('ScheduledTaskId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.launchTime = props.launchTime;
        this.description = props.description;
        this.desiredCapacity = props.desiredCapacity;
        this.launchExpirationTime = props.launchExpirationTime;
        this.maxValue = props.maxValue;
        this.minValue = props.minValue;
        this.recurrenceEndTime = props.recurrenceEndTime;
        this.recurrenceType = props.recurrenceType;
        this.recurrenceValue = props.recurrenceValue;
        this.scalingGroupId = props.scalingGroupId;
        this.scheduledAction = props.scheduledAction;
        this.scheduledTaskName = props.scheduledTaskName;
        this.taskEnabled = props.taskEnabled;
    }
    get rosProperties() {
        return {
            launchTime: this.launchTime,
            description: this.description,
            desiredCapacity: this.desiredCapacity,
            launchExpirationTime: this.launchExpirationTime,
            maxValue: this.maxValue,
            minValue: this.minValue,
            recurrenceEndTime: this.recurrenceEndTime,
            recurrenceType: this.recurrenceType,
            recurrenceValue: this.recurrenceValue,
            scalingGroupId: this.scalingGroupId,
            scheduledAction: this.scheduledAction,
            scheduledTaskName: this.scheduledTaskName,
            taskEnabled: this.taskEnabled,
        };
    }
    renderProperties(props) {
        return rosScheduledTaskPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosScheduledTask = RosScheduledTask;
/**
 * The resource type name for this resource class.
 */
RosScheduledTask.ROS_RESOURCE_TYPE_NAME = "ALIYUN::ESS::ScheduledTask";
/**
 * Determine whether the given properties match those of a `RosServerGroupAttachmentProps`
 *
 * @param properties - the TypeScript properties of a `RosServerGroupAttachmentProps`
 *
 * @returns the result of the validation.
 */
function RosServerGroupAttachmentPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('serverGroups', ros.requiredValidator)(properties.serverGroups));
    if (properties.serverGroups && (Array.isArray(properties.serverGroups) || (typeof properties.serverGroups) === 'string')) {
        errors.collect(ros.propertyValidator('serverGroups', ros.validateLength)({
            data: properties.serverGroups.length,
            min: 1,
            max: 100,
        }));
    }
    errors.collect(ros.propertyValidator('serverGroups', ros.listValidator(RosServerGroupAttachment_ServerGroupsPropertyValidator))(properties.serverGroups));
    errors.collect(ros.propertyValidator('scalingGroupId', ros.requiredValidator)(properties.scalingGroupId));
    errors.collect(ros.propertyValidator('scalingGroupId', ros.validateString)(properties.scalingGroupId));
    errors.collect(ros.propertyValidator('forceAttach', ros.validateBoolean)(properties.forceAttach));
    return errors.wrap('supplied properties not correct for "RosServerGroupAttachmentProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ESS::ServerGroupAttachment` resource
 *
 * @param properties - the TypeScript properties of a `RosServerGroupAttachmentProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ESS::ServerGroupAttachment` resource.
 */
// @ts-ignore TS6133
function rosServerGroupAttachmentPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosServerGroupAttachmentPropsValidator(properties).assertSuccess();
    }
    return {
        'ScalingGroupId': ros.stringToRosTemplate(properties.scalingGroupId),
        'ServerGroups': ros.listMapper(rosServerGroupAttachmentServerGroupsPropertyToRosTemplate)(properties.serverGroups),
        'ForceAttach': ros.booleanToRosTemplate(properties.forceAttach),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::ESS::ServerGroupAttachment`, which is used to add one or more Server Load Balancer (SLB) server groups to a scaling group. Supported SLB server groups include Application Load Balancer (ALB) server groups and Network Load Balancer (NLB) server groups.
 * @Note This class does not contain additional functions, so it is recommended to use the `ServerGroupAttachment` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-ess-servergroupattachment
 */
class RosServerGroupAttachment extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosServerGroupAttachment.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrScalingActivityId = this.getAtt('ScalingActivityId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.scalingGroupId = props.scalingGroupId;
        this.serverGroups = props.serverGroups;
        this.forceAttach = props.forceAttach;
    }
    get rosProperties() {
        return {
            scalingGroupId: this.scalingGroupId,
            serverGroups: this.serverGroups,
            forceAttach: this.forceAttach,
        };
    }
    renderProperties(props) {
        return rosServerGroupAttachmentPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosServerGroupAttachment = RosServerGroupAttachment;
/**
 * The resource type name for this resource class.
 */
RosServerGroupAttachment.ROS_RESOURCE_TYPE_NAME = "ALIYUN::ESS::ServerGroupAttachment";
/**
 * Determine whether the given properties match those of a `ServerGroupsProperty`
 *
 * @param properties - the TypeScript properties of a `ServerGroupsProperty`
 *
 * @returns the result of the validation.
 */
function RosServerGroupAttachment_ServerGroupsPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('type', ros.requiredValidator)(properties.type));
    if (properties.type && (typeof properties.type) !== 'object') {
        errors.collect(ros.propertyValidator('type', ros.validateAllowedValues)({
            data: properties.type,
            allowedValues: ["ALB", "NLB"],
        }));
    }
    errors.collect(ros.propertyValidator('type', ros.validateString)(properties.type));
    errors.collect(ros.propertyValidator('port', ros.requiredValidator)(properties.port));
    if (properties.port && (typeof properties.port) !== 'object') {
        errors.collect(ros.propertyValidator('port', ros.validateRange)({
            data: properties.port,
            min: 0,
            max: 65535,
        }));
    }
    errors.collect(ros.propertyValidator('port', ros.validateNumber)(properties.port));
    errors.collect(ros.propertyValidator('serverGroupId', ros.requiredValidator)(properties.serverGroupId));
    errors.collect(ros.propertyValidator('serverGroupId', ros.validateString)(properties.serverGroupId));
    errors.collect(ros.propertyValidator('weight', ros.requiredValidator)(properties.weight));
    if (properties.weight && (typeof properties.weight) !== 'object') {
        errors.collect(ros.propertyValidator('weight', ros.validateRange)({
            data: properties.weight,
            min: 0,
            max: 100,
        }));
    }
    errors.collect(ros.propertyValidator('weight', ros.validateNumber)(properties.weight));
    return errors.wrap('supplied properties not correct for "ServerGroupsProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ESS::ServerGroupAttachment.ServerGroups` resource
 *
 * @param properties - the TypeScript properties of a `ServerGroupsProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ESS::ServerGroupAttachment.ServerGroups` resource.
 */
// @ts-ignore TS6133
function rosServerGroupAttachmentServerGroupsPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosServerGroupAttachment_ServerGroupsPropertyValidator(properties).assertSuccess();
    return {
        'Type': ros.stringToRosTemplate(properties.type),
        'Port': ros.numberToRosTemplate(properties.port),
        'ServerGroupId': ros.stringToRosTemplate(properties.serverGroupId),
        'Weight': ros.numberToRosTemplate(properties.weight),
    };
}
/**
 * Determine whether the given properties match those of a `RosVServerGroupAttachmentProps`
 *
 * @param properties - the TypeScript properties of a `RosVServerGroupAttachmentProps`
 *
 * @returns the result of the validation.
 */
function RosVServerGroupAttachmentPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('scalingGroupId', ros.requiredValidator)(properties.scalingGroupId));
    errors.collect(ros.propertyValidator('scalingGroupId', ros.validateString)(properties.scalingGroupId));
    errors.collect(ros.propertyValidator('forceAttach', ros.validateBoolean)(properties.forceAttach));
    errors.collect(ros.propertyValidator('vServerGroups', ros.requiredValidator)(properties.vServerGroups));
    if (properties.vServerGroups && (Array.isArray(properties.vServerGroups) || (typeof properties.vServerGroups) === 'string')) {
        errors.collect(ros.propertyValidator('vServerGroups', ros.validateLength)({
            data: properties.vServerGroups.length,
            min: 1,
            max: 5,
        }));
    }
    errors.collect(ros.propertyValidator('vServerGroups', ros.listValidator(RosVServerGroupAttachment_VServerGroupsPropertyValidator))(properties.vServerGroups));
    return errors.wrap('supplied properties not correct for "RosVServerGroupAttachmentProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ESS::VServerGroupAttachment` resource
 *
 * @param properties - the TypeScript properties of a `RosVServerGroupAttachmentProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ESS::VServerGroupAttachment` resource.
 */
// @ts-ignore TS6133
function rosVServerGroupAttachmentPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosVServerGroupAttachmentPropsValidator(properties).assertSuccess();
    }
    return {
        'ScalingGroupId': ros.stringToRosTemplate(properties.scalingGroupId),
        'VServerGroups': ros.listMapper(rosVServerGroupAttachmentVServerGroupsPropertyToRosTemplate)(properties.vServerGroups),
        'ForceAttach': ros.booleanToRosTemplate(properties.forceAttach),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::ESS::VServerGroupAttachment`, which is used to associate vServer groups of a Sever Load Balancer (SLB) instance with a scaling group.
 * @Note This class does not contain additional functions, so it is recommended to use the `VServerGroupAttachment` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-ess-vservergroupattachment
 */
class RosVServerGroupAttachment extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosVServerGroupAttachment.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrScalingGroupId = this.getAtt('ScalingGroupId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.scalingGroupId = props.scalingGroupId;
        this.vServerGroups = props.vServerGroups;
        this.forceAttach = props.forceAttach;
    }
    get rosProperties() {
        return {
            scalingGroupId: this.scalingGroupId,
            vServerGroups: this.vServerGroups,
            forceAttach: this.forceAttach,
        };
    }
    renderProperties(props) {
        return rosVServerGroupAttachmentPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosVServerGroupAttachment = RosVServerGroupAttachment;
/**
 * The resource type name for this resource class.
 */
RosVServerGroupAttachment.ROS_RESOURCE_TYPE_NAME = "ALIYUN::ESS::VServerGroupAttachment";
/**
 * Determine whether the given properties match those of a `VServerGroupAttributesProperty`
 *
 * @param properties - the TypeScript properties of a `VServerGroupAttributesProperty`
 *
 * @returns the result of the validation.
 */
function RosVServerGroupAttachment_VServerGroupAttributesPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('vServerGroupId', ros.requiredValidator)(properties.vServerGroupId));
    errors.collect(ros.propertyValidator('vServerGroupId', ros.validateString)(properties.vServerGroupId));
    errors.collect(ros.propertyValidator('port', ros.requiredValidator)(properties.port));
    if (properties.port && (typeof properties.port) !== 'object') {
        errors.collect(ros.propertyValidator('port', ros.validateRange)({
            data: properties.port,
            min: 0,
            max: 65535,
        }));
    }
    errors.collect(ros.propertyValidator('port', ros.validateNumber)(properties.port));
    if (properties.weight && (typeof properties.weight) !== 'object') {
        errors.collect(ros.propertyValidator('weight', ros.validateRange)({
            data: properties.weight,
            min: 0,
            max: 100,
        }));
    }
    errors.collect(ros.propertyValidator('weight', ros.validateNumber)(properties.weight));
    return errors.wrap('supplied properties not correct for "VServerGroupAttributesProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ESS::VServerGroupAttachment.VServerGroupAttributes` resource
 *
 * @param properties - the TypeScript properties of a `VServerGroupAttributesProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ESS::VServerGroupAttachment.VServerGroupAttributes` resource.
 */
// @ts-ignore TS6133
function rosVServerGroupAttachmentVServerGroupAttributesPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosVServerGroupAttachment_VServerGroupAttributesPropertyValidator(properties).assertSuccess();
    return {
        'VServerGroupId': ros.stringToRosTemplate(properties.vServerGroupId),
        'Port': ros.numberToRosTemplate(properties.port),
        'Weight': ros.numberToRosTemplate(properties.weight),
    };
}
/**
 * Determine whether the given properties match those of a `VServerGroupsProperty`
 *
 * @param properties - the TypeScript properties of a `VServerGroupsProperty`
 *
 * @returns the result of the validation.
 */
function RosVServerGroupAttachment_VServerGroupsPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('loadBalancerId', ros.requiredValidator)(properties.loadBalancerId));
    errors.collect(ros.propertyValidator('loadBalancerId', ros.validateString)(properties.loadBalancerId));
    errors.collect(ros.propertyValidator('vServerGroupAttributes', ros.requiredValidator)(properties.vServerGroupAttributes));
    if (properties.vServerGroupAttributes && (Array.isArray(properties.vServerGroupAttributes) || (typeof properties.vServerGroupAttributes) === 'string')) {
        errors.collect(ros.propertyValidator('vServerGroupAttributes', ros.validateLength)({
            data: properties.vServerGroupAttributes.length,
            min: 1,
            max: 5,
        }));
    }
    errors.collect(ros.propertyValidator('vServerGroupAttributes', ros.listValidator(RosVServerGroupAttachment_VServerGroupAttributesPropertyValidator))(properties.vServerGroupAttributes));
    return errors.wrap('supplied properties not correct for "VServerGroupsProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ESS::VServerGroupAttachment.VServerGroups` resource
 *
 * @param properties - the TypeScript properties of a `VServerGroupsProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ESS::VServerGroupAttachment.VServerGroups` resource.
 */
// @ts-ignore TS6133
function rosVServerGroupAttachmentVServerGroupsPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosVServerGroupAttachment_VServerGroupsPropertyValidator(properties).assertSuccess();
    return {
        'LoadBalancerId': ros.stringToRosTemplate(properties.loadBalancerId),
        'VServerGroupAttributes': ros.listMapper(rosVServerGroupAttachmentVServerGroupAttributesPropertyToRosTemplate)(properties.vServerGroupAttributes),
    };
}
//# sourceMappingURL=data:application/json;base64,