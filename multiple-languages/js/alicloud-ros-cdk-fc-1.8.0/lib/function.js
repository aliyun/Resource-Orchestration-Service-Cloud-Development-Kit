"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Function = exports.FunctionProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const fc_generated_1 = require("./fc.generated");
Object.defineProperty(exports, "FunctionProperty", { enumerable: true, get: function () { return fc_generated_1.RosFunction; } });
const ros_cdk_ossassets_1 = require("@alicloud/ros-cdk-ossassets");
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::FC::Function`, which is used to create a function. A function must belong to a service. All functions of a service share the same attributes as the service, such as the service authorization and log configurations.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosFunction`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-fc-function
 */
class Function extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosFunction = new fc_generated_1.RosFunction(this, id, {
            memorySize: props.memorySize === undefined || props.memorySize === null ? 128 : props.memorySize,
            description: props.description,
            timeout: props.timeout === undefined || props.timeout === null ? 3 : props.timeout,
            instanceLifecycleConfig: props.instanceLifecycleConfig,
            handler: props.handler,
            cpu: props.cpu,
            customHealthCheckConfig: props.customHealthCheckConfig,
            customContainerConfig: props.customContainerConfig,
            code: props.code,
            asyncConfiguration: props.asyncConfiguration,
            caPort: props.caPort === undefined || props.caPort === null ? 9000 : props.caPort,
            functionName: props.functionName,
            runtime: props.runtime,
            environmentVariables: props.environmentVariables,
            customRuntimeConfig: props.customRuntimeConfig,
            initializationTimeout: props.initializationTimeout,
            serviceName: props.serviceName,
            initializer: props.initializer,
            gpuMemorySize: props.gpuMemorySize,
            diskSize: props.diskSize,
            customDns: props.customDns,
            instanceConcurrency: props.instanceConcurrency,
            instanceType: props.instanceType,
            instanceSoftConcurrency: props.instanceSoftConcurrency,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosFunction;
        this.attrArn = rosFunction.attrArn;
        this.attrFunctionId = rosFunction.attrFunctionId;
        this.attrFunctionName = rosFunction.attrFunctionName;
        this.attrServiceId = rosFunction.attrServiceId;
        this.attrServiceName = rosFunction.attrServiceName;
    }
    /**
     * Function handler code as an OSS object.
     * @param bucket The OSS bucket
     * @param key The object key
     */
    codeFromBucket(bucket, key) {
        let fcFunction = this.resource;
        if (fcFunction.code !== undefined) {
            throw new Error("Function code already set");
        }
        fcFunction.code = {
            ossBucketName: bucket.attrName,
            ossObjectName: key
        };
    }
    /**
     * Inline code for FC fcFunction handler
     * @param code The actual handler code (limited to 4KiB)
     */
    codeFromInline(code) {
        let fcFunction = this.resource;
        if (fcFunction.code !== undefined) {
            throw new Error("Function code already set");
        }
        fcFunction.code = {
            sourceCode: code
        };
    }
    /**
     * Loads the fcFunction code from a local disk path.
     *
     * @param path Either a directory with the Lambda code bundle or a .zip file
     */
    codeFromAsset(path) {
        let fcFunction = this.resource;
        if (fcFunction.code !== undefined) {
            throw new Error("Function code already set");
        }
        const suffix = ros.generateRandomString(5);
        const asset = new ros_cdk_ossassets_1.Asset(this.scope, `CodeAsset${suffix}`, {
            path
        });
        if (!asset.isZipArchive) {
            throw new Error(`Asset must be a .zip file or a directory (${path})`);
        }
        fcFunction.code = {
            ossBucketName: asset.bucketName,
            ossObjectName: asset.objectKey
        };
    }
}
exports.Function = Function;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnVuY3Rpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJmdW5jdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw4Q0FBOEM7QUFDOUMsaURBQTZDO0FBRXJCLGlHQUZmLDBCQUFXLE9BRW9CO0FBRXhDLG1FQUFvRDtBQWlLcEQ7Ozs7R0FJRztBQUNILE1BQWEsUUFBUyxTQUFRLEdBQUcsQ0FBQyxRQUFRO0lBcUZ0Qzs7OztPQUlHO0lBQ0gsWUFBWSxLQUFvQixFQUFFLEVBQVUsRUFBRSxLQUFvQixFQUFFLG1DQUEyQyxJQUFJO1FBQy9HLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDakIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUM7UUFDYixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsZ0NBQWdDLEdBQUcsZ0NBQWdDLENBQUM7UUFFekUsTUFBTSxXQUFXLEdBQUcsSUFBSSwwQkFBVyxDQUFDLElBQUksRUFBRSxFQUFFLEVBQUc7WUFDM0MsVUFBVSxFQUFFLEtBQUssQ0FBQyxVQUFVLEtBQUssU0FBUyxJQUFJLEtBQUssQ0FBQyxVQUFVLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxVQUFVO1lBQ2hHLFdBQVcsRUFBRSxLQUFLLENBQUMsV0FBVztZQUM5QixPQUFPLEVBQUUsS0FBSyxDQUFDLE9BQU8sS0FBSyxTQUFTLElBQUksS0FBSyxDQUFDLE9BQU8sS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU87WUFDbEYsdUJBQXVCLEVBQUUsS0FBSyxDQUFDLHVCQUF1QjtZQUN0RCxPQUFPLEVBQUUsS0FBSyxDQUFDLE9BQU87WUFDdEIsR0FBRyxFQUFFLEtBQUssQ0FBQyxHQUFHO1lB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WUFBWSxNQUFNLEVBQUUsRUFBRTtZQUN0RCxJQUFJO1NBQ1AsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLEVBQUU7WUFDckIsTUFBTSxJQUFJLEtBQUssQ0FBQyw2Q0FBNkMsSUFBSSxHQUFHLENBQUMsQ0FBQztTQUN6RTtRQUNELFVBQVUsQ0FBQyxJQUFJLEdBQUc7WUFDZCxhQUFhLEVBQUUsS0FBSyxDQUFDLFVBQVU7WUFDL0IsYUFBYSxFQUFFLEtBQUssQ0FBQyxTQUFTO1NBQ2pDLENBQUM7SUFDTixDQUFDO0NBK0NKO0FBbElELDRCQWtJQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHJvcyBmcm9tICdAYWxpY2xvdWQvcm9zLWNkay1jb3JlJztcbmltcG9ydCB7IFJvc0Z1bmN0aW9uIH0gZnJvbSAnLi9mYy5nZW5lcmF0ZWQnO1xuLy8gR2VuZXJhdGVkIGZyb20gdGhlIEFsaUNsb3VkIFJPUyBSZXNvdXJjZSBTcGVjaWZpY2F0aW9uXG5leHBvcnQgeyBSb3NGdW5jdGlvbiBhcyBGdW5jdGlvblByb3BlcnR5IH07XG5pbXBvcnQgeyBCdWNrZXQgfSBmcm9tIFwiQGFsaWNsb3VkL3Jvcy1jZGstb3NzXCI7XG5pbXBvcnQgeyBBc3NldCB9IGZyb20gXCJAYWxpY2xvdWQvcm9zLWNkay1vc3Nhc3NldHNcIjtcblxuXG4vKipcbiAqIFByb3BlcnRpZXMgZm9yIGRlZmluaW5nIGEgYEZ1bmN0aW9uYC5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvYWxpeXVuLWZjLWZ1bmN0aW9uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRnVuY3Rpb25Qcm9wcyB7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBmdW5jdGlvbk5hbWU6IEZ1bmN0aW9uIG5hbWVcbiAgICAgKi9cbiAgICByZWFkb25seSBmdW5jdGlvbk5hbWU6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGhhbmRsZXI6IFRoZSBmdW5jdGlvbiBleGVjdXRpb24gZW50cnkgcG9pbnQuXG4gICAgICovXG4gICAgcmVhZG9ubHkgaGFuZGxlcjogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgcnVudGltZTogVGhlIGZ1bmN0aW9uIHJ1bnRpbWUgZW52aXJvbm1lbnQuIFN1cHBvcnRpbmcgbm9kZWpzMTbjgIFub2RlanMxNOOAgW5vZGVqczEy44CBbm9kZWpzMTDjgIFub2RlanM444CBbm9kZWpzNuOAgW5vZGVqczQuNOOAgXB5dGhvbjMuMTDjgIFweXRob24zLjnjgIFweXRob24z44CBcHl0aG9uMi4344CBamF2YTEx44CBamF2YTjjgIFnbzHjgIFwaHA3LjLjgIFkb3RuZXRjb3JlMy4x44CBZG90bmV0Y29yZTIuMeOAgWN1c3RvbS5kZWJpYW4xMOOAgWN1c3RvbeWSjGN1c3RvbS1jb250YWluZXIgYW5kIHNvIG9uXG4gICAgICovXG4gICAgcmVhZG9ubHkgcnVudGltZTogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgc2VydmljZU5hbWU6IFNlcnZpY2UgbmFtZVxuICAgICAqL1xuICAgIHJlYWRvbmx5IHNlcnZpY2VOYW1lOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBhc3luY0NvbmZpZ3VyYXRpb246IENvbmZpZ3VyYXRpb24gb2YgYXN5bmNocm9ub3VzIGZ1bmN0aW9uIGNhbGxzXG4gICAgICovXG4gICAgcmVhZG9ubHkgYXN5bmNDb25maWd1cmF0aW9uPzogUm9zRnVuY3Rpb24uQXN5bmNDb25maWd1cmF0aW9uUHJvcGVydHkgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBjYVBvcnQ6IEN1c3RvbSBydW50aW1lIGFuZCBjdXN0b20gY29udGFpbmVyIHJ1bnRpbWUgZGVkaWNhdGVkIGZpZWxkcywgd2hpY2ggcmVwcmVzZW50IHRoZSBwb3J0IHRoYXQgdGhlIHN0YXJ0ZWQgY3VzdG9tIGh0dHAgc2VydmVyIGxpc3RlbnMgdG8uIFRoZSBkZWZhdWx0IHZhbHVlIGlzIDkwMDBcbiAgICAgKi9cbiAgICByZWFkb25seSBjYVBvcnQ/OiBudW1iZXIgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBjb2RlOiBUaGUgY29kZSB0aGF0IGNvbnRhaW5zIHRoZSBmdW5jdGlvbiBpbXBsZW1lbnRhdGlvbi5cbiAgICAgKi9cbiAgICByZWFkb25seSBjb2RlPzogUm9zRnVuY3Rpb24uQ29kZVByb3BlcnR5IHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgY3B1OiBUaGUgbnVtYmVyIG9mIHZDUFVzIG9mIHRoZSBmdW5jdGlvbi4gVGhlIHZhbHVlIG11c3QgYmUgYSBtdWx0aXBsZSBvZiAwLjA1LlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGNwdT86IG51bWJlciB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGN1c3RvbUNvbnRhaW5lckNvbmZpZzogQ3VzdG9tIGNvbnRhaW5lciBydW50aW1lIHJlbGF0ZWQgY29uZmlndXJhdGlvbi4gQWZ0ZXIgY29uZmlndXJhdGlvbiwgdGhlIGZ1bmN0aW9uIGNhbiBiZSByZXBsYWNlZCB3aXRoIGEgY3VzdG9tIGNvbnRhaW5lciB0byBleGVjdXRlIHRoZSBmdW5jdGlvblxuICAgICAqL1xuICAgIHJlYWRvbmx5IGN1c3RvbUNvbnRhaW5lckNvbmZpZz86IFJvc0Z1bmN0aW9uLkN1c3RvbUNvbnRhaW5lckNvbmZpZ1Byb3BlcnR5IHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgY3VzdG9tRG5zOiBUaGUgY3VzdG9tIEROUyBjb25maWd1cmF0aW9ucyBvZiB0aGUgZnVuY3Rpb24uXG4gICAgICovXG4gICAgcmVhZG9ubHkgY3VzdG9tRG5zPzogUm9zRnVuY3Rpb24uQ3VzdG9tRE5TUHJvcGVydHkgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBjdXN0b21IZWFsdGhDaGVja0NvbmZpZzogVGhlIGhlYWx0aCBjaGVjayBjb25maWd1cmF0aW9ucyBmb3IgdGhlIGN1c3RvbSBydW50aW1lIGFuZCBjdXN0b20gY29udGFpbmVyLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGN1c3RvbUhlYWx0aENoZWNrQ29uZmlnPzogUm9zRnVuY3Rpb24uQ3VzdG9tSGVhbHRoQ2hlY2tDb25maWdQcm9wZXJ0eSB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGN1c3RvbVJ1bnRpbWVDb25maWc6IEN1c3RvbSBydW50aW1lIHJlbGF0ZWQgY29uZmlndXJhdGlvbi5cbiAgICAgKi9cbiAgICByZWFkb25seSBjdXN0b21SdW50aW1lQ29uZmlnPzogUm9zRnVuY3Rpb24uQ3VzdG9tUnVudGltZUNvbmZpZ1Byb3BlcnR5IHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgZGVzY3JpcHRpb246IEZ1bmN0aW9uIGRlc2NyaXB0aW9uXG4gICAgICovXG4gICAgcmVhZG9ubHkgZGVzY3JpcHRpb24/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBkaXNrU2l6ZTogVGhlIGRpc2sgc2l6ZSBvZiB0aGUgZnVuY3Rpb24uIFVuaXQ6IE1CLiBWYWxpZCB2YWx1ZXM6IDUxMiBhbmQgMTAyNDAuXG4gICAgICovXG4gICAgcmVhZG9ubHkgZGlza1NpemU/OiBudW1iZXIgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBlbnZpcm9ubWVudFZhcmlhYmxlczogVGhlIGVudmlyb25tZW50IHZhcmlhYmxlIHNldCBmb3IgdGhlIGZ1bmN0aW9uLCB5b3UgY2FuIGdldCB0aGUgdmFsdWUgb2YgdGhlIGVudmlyb25tZW50IHZhcmlhYmxlIGluIHRoZSBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICByZWFkb25seSBlbnZpcm9ubWVudFZhcmlhYmxlcz86IHsgW2tleTogc3RyaW5nXTogKGFueSB8IHJvcy5JUmVzb2x2YWJsZSkgfSB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGdwdU1lbW9yeVNpemU6IFRoZSBHUFUgbWVtb3J5IGNhcGFjaXR5IGZvciB0aGUgZnVuY3Rpb24uIFVuaXQ6IE1CLiBUaGUgdmFsdWUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDEsMDI0LlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGdwdU1lbW9yeVNpemU/OiBudW1iZXIgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBpbml0aWFsaXphdGlvblRpbWVvdXQ6IHRoZSBtYXggZXhlY3V0aW9uIHRpbWUgb2YgdGhlIGluaXRpYWxpemVyLCBpbiBzZWNvbmRcbiAgICAgKi9cbiAgICByZWFkb25seSBpbml0aWFsaXphdGlvblRpbWVvdXQ/OiBudW1iZXIgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBpbml0aWFsaXplcjogdGhlIGVudHJ5IHBvaW50IG9mIHRoZSBpbml0aWFsaXplclxuICAgICAqL1xuICAgIHJlYWRvbmx5IGluaXRpYWxpemVyPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgaW5zdGFuY2VDb25jdXJyZW5jeTogRnVuY3Rpb24gaW5zdGFuY2UgY29uY3VycmVuY3kuIFZhbHVlIGNhbiBiZSBiZXR3ZWVuIDEgdG8gMTAwLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGluc3RhbmNlQ29uY3VycmVuY3k/OiBudW1iZXIgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBpbnN0YW5jZUxpZmVjeWNsZUNvbmZpZzogVGhlIGNvbmZpZ3VyYXRpb24gb2YgdGhlIGluc3RhbmNlIGxpZmVjeWNsZSBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICByZWFkb25seSBpbnN0YW5jZUxpZmVjeWNsZUNvbmZpZz86IFJvc0Z1bmN0aW9uLkluc3RhbmNlTGlmZWN5Y2xlQ29uZmlnUHJvcGVydHkgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBpbnN0YW5jZVNvZnRDb25jdXJyZW5jeTogVGhlIHNvZnQgY29uY3VycmVuY3kgb2YgdGhlIGluc3RhbmNlLiBZb3UgY2FuIHVzZSB0aGlzIHBhcmFtZXRlciB0byBpbXBsZW1lbnQgZ3JhY2VmdWwgc2NhbGUtdXAgb2YgaW5zdGFuY2VzLiBJZiB0aGUgbnVtYmVyIG9mIGNvbmN1cnJlbnQgcmVxdWVzdHMgb24gYW4gaW5zdGFuY2UgaXMgZ3JlYXRlciB0aGFuIHRoZSB2YWx1ZSBvZiBzb2Z0IGNvbmN1cnJlbmN5LCBhbiBpbnN0YW5jZSBzY2FsZS11cCBpcyB0cmlnZ2VyZWQuIEZvciBleGFtcGxlLCBpZiB5b3VyIGluc3RhbmNlIHJlcXVpcmVzIGEgbG9uZyB0aW1lIHRvIHN0YXJ0LCB5b3UgY2FuIHNwZWNpZnkgYSBzdWl0YWJsZSBzb2Z0IGNvbmN1cnJlbmN5IHRvIHN0YXJ0IHRoZSBpbnN0YW5jZSBpbiBhZHZhbmNlLlRoZSB2YWx1ZSBtdXN0IGJlIGxlc3MgdGhhbiBvciBlcXVhbCB0byB0aGF0IG9mIHRoZSBpbnN0YW5jZUNvbmN1cnJlbmN5IHBhcmFtZXRlci5cbiAgICAgKi9cbiAgICByZWFkb25seSBpbnN0YW5jZVNvZnRDb25jdXJyZW5jeT86IG51bWJlciB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGluc3RhbmNlVHlwZTogSW5zdGFuY2UgdHlwZS4gVmFsdWU6ZTE6IGZsZXhpYmxlIGluc3RhbmNlLiBNZW1vcnkgc2l6ZSBiZXR3ZWVuIDEyOCBhbmQgMzA3MmMxOiBwZXJmb3JtYW5jZSBpbnN0YW5jZS4gTWVtb3J5IHNpemUgYWxsb3cgdmFsdWVzIGFyZSA0MDk2LCA4MTkyLCAxNjM4NCBhbmQgMzI3NjhcbiAgICAgKi9cbiAgICByZWFkb25seSBpbnN0YW5jZVR5cGU/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBtZW1vcnlTaXplOiBUaGUgYW1vdW50IG9mIG1lbW9yeSB0aGF04oCZcyB1c2VkIHRvIHJ1biBmdW5jdGlvbiwgaW4gTUIuIEZ1bmN0aW9uIENvbXB1dGUgdXNlcyB0aGlzIHZhbHVlIHRvIGFsbG9jYXRlIENQVSByZXNvdXJjZXMgcHJvcG9ydGlvbmFsbHkuIERlZmF1bHRzIHRvIDEyOCBNQi4gSXQgY2FuIGJlIG11bHRpcGxlIG9mIDY0IE1CIGFuZCBiZXR3ZWVuIDEyOCBNQiBhbmQgMzA3MiBNQi5cbiAgICAgKi9cbiAgICByZWFkb25seSBtZW1vcnlTaXplPzogbnVtYmVyIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgdGltZW91dDogVGhlIG1heGltdW0gdGltZSBkdXJhdGlvbiBhIGZ1bmN0aW9uIGNhbiBydW4sIGluIHNlY29uZHMuIEFmdGVyIHdoaWNoIEZ1bmN0aW9uIENvbXB1dGUgdGVybWluYXRlcyB0aGUgZXhlY3V0aW9uLiBEZWZhdWx0cyB0byAzIHNlY29uZHMsIGFuZCBjYW4gYmUgYmV0d2VlbiAxIHRvIDg2NDAwIHNlY29uZHMuXG4gICAgICovXG4gICAgcmVhZG9ubHkgdGltZW91dD86IG51bWJlciB8IHJvcy5JUmVzb2x2YWJsZTtcbn1cblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgYEZ1bmN0aW9uYC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJRnVuY3Rpb24gZXh0ZW5kcyByb3MuSVJlc291cmNlIHtcbiAgICByZWFkb25seSBwcm9wczogRnVuY3Rpb25Qcm9wcztcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBBUk46IFRoZSBBUk4gZm9yIEFMSVlVTjo6Uk9TOjpDdXN0b21SZXNvdXJjZVxuICAgICAqL1xuICAgIHJlYWRvbmx5IGF0dHJBcm46IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBGdW5jdGlvbklkOiBUaGUgZnVuY3Rpb24gSURcbiAgICAgKi9cbiAgICByZWFkb25seSBhdHRyRnVuY3Rpb25JZDogcm9zLklSZXNvbHZhYmxlIHwgc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIEZ1bmN0aW9uTmFtZTogVGhlIGZ1bmN0aW9uIG5hbWVcbiAgICAgKi9cbiAgICByZWFkb25seSBhdHRyRnVuY3Rpb25OYW1lOiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgU2VydmljZUlkOiBUaGUgc2VydmljZSBJRFxuICAgICAqL1xuICAgIHJlYWRvbmx5IGF0dHJTZXJ2aWNlSWQ6IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBTZXJ2aWNlTmFtZTogVGhlIHNlcnZpY2UgbmFtZVxuICAgICAqL1xuICAgIHJlYWRvbmx5IGF0dHJTZXJ2aWNlTmFtZTogcm9zLklSZXNvbHZhYmxlIHwgc3RyaW5nO1xufVxuLyoqXG4gKiBUaGlzIGNsYXNzIGVuY2Fwc3VsYXRlcyBhbmQgZXh0ZW5kcyB0aGUgUk9TIHJlc291cmNlIHR5cGUgYEFMSVlVTjo6RkM6OkZ1bmN0aW9uYCwgd2hpY2ggaXMgdXNlZCB0byBjcmVhdGUgYSBmdW5jdGlvbi4gQSBmdW5jdGlvbiBtdXN0IGJlbG9uZyB0byBhIHNlcnZpY2UuIEFsbCBmdW5jdGlvbnMgb2YgYSBzZXJ2aWNlIHNoYXJlIHRoZSBzYW1lIGF0dHJpYnV0ZXMgYXMgdGhlIHNlcnZpY2UsIHN1Y2ggYXMgdGhlIHNlcnZpY2UgYXV0aG9yaXphdGlvbiBhbmQgbG9nIGNvbmZpZ3VyYXRpb25zLlxuICogQE5vdGUgVGhpcyBjbGFzcyBtYXkgaGF2ZSBzb21lIG5ldyBmdW5jdGlvbnMgdG8gZmFjaWxpdGF0ZSBkZXZlbG9wbWVudCwgc28gaXQgaXMgcmVjb21tZW5kZWQgdG8gdXNlIHRoaXMgY2xhc3MgaW5zdGVhZCBvZiBgUm9zRnVuY3Rpb25gZm9yIGEgbW9yZSBjb252ZW5pZW50IGRldmVsb3BtZW50IGV4cGVyaWVuY2UuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2FsaXl1bi1mYy1mdW5jdGlvblxuICovXG5leHBvcnQgY2xhc3MgRnVuY3Rpb24gZXh0ZW5kcyByb3MuUmVzb3VyY2UgaW1wbGVtZW50cyBJRnVuY3Rpb24ge1xuICAgIHByb3RlY3RlZCBzY29wZTogcm9zLkNvbnN0cnVjdDtcbiAgICBwcm90ZWN0ZWQgaWQ6IHN0cmluZztcbiAgICBwdWJsaWMgcmVhZG9ubHkgcHJvcHM6IEZ1bmN0aW9uUHJvcHM7XG4gICAgcHJvdGVjdGVkIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OiBib29sZWFuO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIEFSTjogVGhlIEFSTiBmb3IgQUxJWVVOOjpST1M6OkN1c3RvbVJlc291cmNlXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJBcm46IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBGdW5jdGlvbklkOiBUaGUgZnVuY3Rpb24gSURcbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckZ1bmN0aW9uSWQ6IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBGdW5jdGlvbk5hbWU6IFRoZSBmdW5jdGlvbiBuYW1lXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJGdW5jdGlvbk5hbWU6IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBTZXJ2aWNlSWQ6IFRoZSBzZXJ2aWNlIElEXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJTZXJ2aWNlSWQ6IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBTZXJ2aWNlTmFtZTogVGhlIHNlcnZpY2UgbmFtZVxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyU2VydmljZU5hbWU6IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEZ1bmN0aW9uIGhhbmRsZXIgY29kZSBhcyBhbiBPU1Mgb2JqZWN0LlxuICAgICAqIEBwYXJhbSBidWNrZXQgVGhlIE9TUyBidWNrZXRcbiAgICAgKiBAcGFyYW0ga2V5IFRoZSBvYmplY3Qga2V5XG4gICAgICovXG4gICAgcHVibGljIGNvZGVGcm9tQnVja2V0KGJ1Y2tldDogQnVja2V0LCBrZXk6IHN0cmluZykge1xuICAgICAgICBsZXQgZmNGdW5jdGlvbj0gdGhpcy5yZXNvdXJjZSBhcyBSb3NGdW5jdGlvbjtcbiAgICAgICAgaWYgKGZjRnVuY3Rpb24uY29kZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJGdW5jdGlvbiBjb2RlIGFscmVhZHkgc2V0XCIpO1xuICAgICAgICB9XG4gICAgICAgIGZjRnVuY3Rpb24uY29kZSA9IHtcbiAgICAgICAgICAgIG9zc0J1Y2tldE5hbWU6IGJ1Y2tldC5hdHRyTmFtZSxcbiAgICAgICAgICAgIG9zc09iamVjdE5hbWU6IGtleVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIElubGluZSBjb2RlIGZvciBGQyBmY0Z1bmN0aW9uIGhhbmRsZXJcbiAgICAgKiBAcGFyYW0gY29kZSBUaGUgYWN0dWFsIGhhbmRsZXIgY29kZSAobGltaXRlZCB0byA0S2lCKVxuICAgICAqL1xuICAgIHB1YmxpYyBjb2RlRnJvbUlubGluZShjb2RlOiBzdHJpbmcpIHtcbiAgICAgICAgbGV0IGZjRnVuY3Rpb249IHRoaXMucmVzb3VyY2UgYXMgUm9zRnVuY3Rpb247XG4gICAgICAgIGlmIChmY0Z1bmN0aW9uLmNvZGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRnVuY3Rpb24gY29kZSBhbHJlYWR5IHNldFwiKTtcbiAgICAgICAgfVxuICAgICAgICBmY0Z1bmN0aW9uLmNvZGUgPSB7XG4gICAgICAgICAgICBzb3VyY2VDb2RlOiBjb2RlXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTG9hZHMgdGhlIGZjRnVuY3Rpb24gY29kZSBmcm9tIGEgbG9jYWwgZGlzayBwYXRoLlxuICAgICAqXG4gICAgICogQHBhcmFtIHBhdGggRWl0aGVyIGEgZGlyZWN0b3J5IHdpdGggdGhlIExhbWJkYSBjb2RlIGJ1bmRsZSBvciBhIC56aXAgZmlsZVxuICAgICAqL1xuICAgIHB1YmxpYyBjb2RlRnJvbUFzc2V0KHBhdGg6IHN0cmluZykge1xuICAgICAgICBsZXQgZmNGdW5jdGlvbj0gdGhpcy5yZXNvdXJjZSBhcyBSb3NGdW5jdGlvbjtcbiAgICAgICAgaWYgKGZjRnVuY3Rpb24uY29kZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJGdW5jdGlvbiBjb2RlIGFscmVhZHkgc2V0XCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgc3VmZml4ID0gcm9zLmdlbmVyYXRlUmFuZG9tU3RyaW5nKDUpO1xuICAgICAgICBjb25zdCBhc3NldCA9IG5ldyBBc3NldCh0aGlzLnNjb3BlLCBgQ29kZUFzc2V0JHtzdWZmaXh9YCwge1xuICAgICAgICAgICAgcGF0aFxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKCFhc3NldC5pc1ppcEFyY2hpdmUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQXNzZXQgbXVzdCBiZSBhIC56aXAgZmlsZSBvciBhIGRpcmVjdG9yeSAoJHtwYXRofSlgKTtcbiAgICAgICAgfVxuICAgICAgICBmY0Z1bmN0aW9uLmNvZGUgPSB7XG4gICAgICAgICAgICBvc3NCdWNrZXROYW1lOiBhc3NldC5idWNrZXROYW1lLFxuICAgICAgICAgICAgb3NzT2JqZWN0TmFtZTogYXNzZXQub2JqZWN0S2V5XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGFyYW0gc2NvcGUgLSBzY29wZSBpbiB3aGljaCB0aGlzIHJlc291cmNlIGlzIGRlZmluZWRcbiAgICAgKiBQYXJhbSBpZCAgICAtIHNjb3BlZCBpZCBvZiB0aGUgcmVzb3VyY2VcbiAgICAgKiBQYXJhbSBwcm9wcyAtIHJlc291cmNlIHByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihzY29wZTogcm9zLkNvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IEZ1bmN0aW9uUHJvcHMsIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OmJvb2xlYW4gPSB0cnVlKSB7XG4gICAgICAgIHN1cGVyKHNjb3BlLCBpZCk7XG4gICAgICAgIHRoaXMuc2NvcGUgPSBzY29wZTtcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xuICAgICAgICB0aGlzLnByb3BzID0gcHJvcHM7XG4gICAgICAgIHRoaXMuZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgPSBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDtcblxuICAgICAgICBjb25zdCByb3NGdW5jdGlvbiA9IG5ldyBSb3NGdW5jdGlvbih0aGlzLCBpZCwgIHtcbiAgICAgICAgICAgIG1lbW9yeVNpemU6IHByb3BzLm1lbW9yeVNpemUgPT09IHVuZGVmaW5lZCB8fCBwcm9wcy5tZW1vcnlTaXplID09PSBudWxsID8gMTI4IDogcHJvcHMubWVtb3J5U2l6ZSxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBwcm9wcy5kZXNjcmlwdGlvbixcbiAgICAgICAgICAgIHRpbWVvdXQ6IHByb3BzLnRpbWVvdXQgPT09IHVuZGVmaW5lZCB8fCBwcm9wcy50aW1lb3V0ID09PSBudWxsID8gMyA6IHByb3BzLnRpbWVvdXQsXG4gICAgICAgICAgICBpbnN0YW5jZUxpZmVjeWNsZUNvbmZpZzogcHJvcHMuaW5zdGFuY2VMaWZlY3ljbGVDb25maWcsXG4gICAgICAgICAgICBoYW5kbGVyOiBwcm9wcy5oYW5kbGVyLFxuICAgICAgICAgICAgY3B1OiBwcm9wcy5jcHUsXG4gICAgICAgICAgICBjdXN0b21IZWFsdGhDaGVja0NvbmZpZzogcHJvcHMuY3VzdG9tSGVhbHRoQ2hlY2tDb25maWcsXG4gICAgICAgICAgICBjdXN0b21Db250YWluZXJDb25maWc6IHByb3BzLmN1c3RvbUNvbnRhaW5lckNvbmZpZyxcbiAgICAgICAgICAgIGNvZGU6IHByb3BzLmNvZGUsXG4gICAgICAgICAgICBhc3luY0NvbmZpZ3VyYXRpb246IHByb3BzLmFzeW5jQ29uZmlndXJhdGlvbixcbiAgICAgICAgICAgIGNhUG9ydDogcHJvcHMuY2FQb3J0ID09PSB1bmRlZmluZWQgfHwgcHJvcHMuY2FQb3J0ID09PSBudWxsID8gOTAwMCA6IHByb3BzLmNhUG9ydCxcbiAgICAgICAgICAgIGZ1bmN0aW9uTmFtZTogcHJvcHMuZnVuY3Rpb25OYW1lLFxuICAgICAgICAgICAgcnVudGltZTogcHJvcHMucnVudGltZSxcbiAgICAgICAgICAgIGVudmlyb25tZW50VmFyaWFibGVzOiBwcm9wcy5lbnZpcm9ubWVudFZhcmlhYmxlcyxcbiAgICAgICAgICAgIGN1c3RvbVJ1bnRpbWVDb25maWc6IHByb3BzLmN1c3RvbVJ1bnRpbWVDb25maWcsXG4gICAgICAgICAgICBpbml0aWFsaXphdGlvblRpbWVvdXQ6IHByb3BzLmluaXRpYWxpemF0aW9uVGltZW91dCxcbiAgICAgICAgICAgIHNlcnZpY2VOYW1lOiBwcm9wcy5zZXJ2aWNlTmFtZSxcbiAgICAgICAgICAgIGluaXRpYWxpemVyOiBwcm9wcy5pbml0aWFsaXplcixcbiAgICAgICAgICAgIGdwdU1lbW9yeVNpemU6IHByb3BzLmdwdU1lbW9yeVNpemUsXG4gICAgICAgICAgICBkaXNrU2l6ZTogcHJvcHMuZGlza1NpemUsXG4gICAgICAgICAgICBjdXN0b21EbnM6IHByb3BzLmN1c3RvbURucyxcbiAgICAgICAgICAgIGluc3RhbmNlQ29uY3VycmVuY3k6IHByb3BzLmluc3RhbmNlQ29uY3VycmVuY3ksXG4gICAgICAgICAgICBpbnN0YW5jZVR5cGU6IHByb3BzLmluc3RhbmNlVHlwZSxcbiAgICAgICAgICAgIGluc3RhbmNlU29mdENvbmN1cnJlbmN5OiBwcm9wcy5pbnN0YW5jZVNvZnRDb25jdXJyZW5jeSxcbiAgICAgICAgfSwgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgJiYgdGhpcy5zdGFjay5lbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCk7XG4gICAgICAgIHRoaXMucmVzb3VyY2UgPSByb3NGdW5jdGlvbjtcbiAgICAgICAgdGhpcy5hdHRyQXJuID0gcm9zRnVuY3Rpb24uYXR0ckFybjtcbiAgICAgICAgdGhpcy5hdHRyRnVuY3Rpb25JZCA9IHJvc0Z1bmN0aW9uLmF0dHJGdW5jdGlvbklkO1xuICAgICAgICB0aGlzLmF0dHJGdW5jdGlvbk5hbWUgPSByb3NGdW5jdGlvbi5hdHRyRnVuY3Rpb25OYW1lO1xuICAgICAgICB0aGlzLmF0dHJTZXJ2aWNlSWQgPSByb3NGdW5jdGlvbi5hdHRyU2VydmljZUlkO1xuICAgICAgICB0aGlzLmF0dHJTZXJ2aWNlTmFtZSA9IHJvc0Z1bmN0aW9uLmF0dHJTZXJ2aWNlTmFtZTtcbiAgICB9XG59XG4iXX0=