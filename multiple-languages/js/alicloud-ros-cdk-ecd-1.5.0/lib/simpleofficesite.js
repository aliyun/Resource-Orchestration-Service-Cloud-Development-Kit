"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SimpleOfficeSite = exports.SimpleOfficeSiteProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ecd_generated_1 = require("./ecd.generated");
Object.defineProperty(exports, "SimpleOfficeSiteProperty", { enumerable: true, get: function () { return ecd_generated_1.RosSimpleOfficeSite; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::ECD::SimpleOfficeSite`, which is used to create a workspace of the convenience account type.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosSimpleOfficeSite`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-ecd-simpleofficesite
 */
class SimpleOfficeSite extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props = {}, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosSimpleOfficeSite = new ecd_generated_1.RosSimpleOfficeSite(this, id, {
            vSwitchId: props.vSwitchId,
            enableAdminAccess: props.enableAdminAccess,
            cloudBoxOfficeSite: props.cloudBoxOfficeSite,
            cidrBlock: props.cidrBlock,
            verifyCode: props.verifyCode,
            vpcType: props.vpcType,
            needVerifyZeroDevice: props.needVerifyZeroDevice,
            cenOwnerId: props.cenOwnerId,
            bandwidth: props.bandwidth,
            cenId: props.cenId,
            desktopAccessType: props.desktopAccessType,
            officeSiteName: props.officeSiteName,
            enableInternetAccess: props.enableInternetAccess,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosSimpleOfficeSite;
        this.attrOfficeSiteId = rosSimpleOfficeSite.attrOfficeSiteId;
    }
}
exports.SimpleOfficeSite = SimpleOfficeSite;
//# sourceMappingURL=data:application/json;base64,