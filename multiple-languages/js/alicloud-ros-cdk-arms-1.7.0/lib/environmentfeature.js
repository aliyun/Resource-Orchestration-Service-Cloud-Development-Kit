"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EnvironmentFeature = exports.EnvironmentFeatureProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const arms_generated_1 = require("./arms.generated");
Object.defineProperty(exports, "EnvironmentFeatureProperty", { enumerable: true, get: function () { return arms_generated_1.RosEnvironmentFeature; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::ARMS::EnvironmentFeature`, which is used to install a feature.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosEnvironmentFeature`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-arms-environmentfeature
 */
class EnvironmentFeature extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosEnvironmentFeature = new arms_generated_1.RosEnvironmentFeature(this, id, {
            environmentId: props.environmentId,
            config: props.config,
            featureVersion: props.featureVersion,
            featureName: props.featureName,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosEnvironmentFeature;
        this.attrEnvironmentId = rosEnvironmentFeature.attrEnvironmentId;
        this.attrFeature = rosEnvironmentFeature.attrFeature;
        this.attrFeatureName = rosEnvironmentFeature.attrFeatureName;
        this.attrFeatureStatus = rosEnvironmentFeature.attrFeatureStatus;
    }
}
exports.EnvironmentFeature = EnvironmentFeature;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW52aXJvbm1lbnRmZWF0dXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZW52aXJvbm1lbnRmZWF0dXJlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDhDQUE4QztBQUM5QyxxREFBeUQ7QUFFdkIsMkdBRnpCLHNDQUFxQixPQUU4QjtBQXlENUQ7Ozs7R0FJRztBQUNILE1BQWEsa0JBQW1CLFNBQVEsR0FBRyxDQUFDLFFBQVE7SUEwQmhEOzs7O09BSUc7SUFDSCxZQUFZLEtBQW9CLEVBQUUsRUFBVSxFQUFFLEtBQThCLEVBQUUsbUNBQTJDLElBQUk7UUFDekgsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNqQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUNiLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxnQ0FBZ0MsR0FBRyxnQ0FBZ0MsQ0FBQztRQUV6RSxNQUFNLHFCQUFxQixHQUFHLElBQUksc0NBQXFCLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRztZQUMvRCxhQUFhLEVBQUUsS0FBSyxDQUFDLGFBQWE7WUFDbEMsTUFBTSxFQUFFLEtBQUssQ0FBQyxNQUFNO1lBQ3BCLGNBQWMsRUFBRSxLQUFLLENBQUMsY0FBYztZQUNwQyxXQUFXLEVBQUUsS0FBSyxDQUFDLFdBQVc7U0FDakMsRUFBRSxnQ0FBZ0MsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7UUFDcEYsSUFBSSxDQUFDLFFBQVEsR0FBRyxxQkFBcUIsQ0FBQztRQUN0QyxJQUFJLENBQUMsaUJBQWlCLEdBQUcscUJBQXFCLENBQUMsaUJBQWlCLENBQUM7UUFDakUsSUFBSSxDQUFDLFdBQVcsR0FBRyxxQkFBcUIsQ0FBQyxXQUFXLENBQUM7UUFDckQsSUFBSSxDQUFDLGVBQWUsR0FBRyxxQkFBcUIsQ0FBQyxlQUFlLENBQUM7UUFDN0QsSUFBSSxDQUFDLGlCQUFpQixHQUFHLHFCQUFxQixDQUFDLGlCQUFpQixDQUFDO0lBQ3JFLENBQUM7Q0FDSjtBQWxERCxnREFrREMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyByb3MgZnJvbSAnQGFsaWNsb3VkL3Jvcy1jZGstY29yZSc7XG5pbXBvcnQgeyBSb3NFbnZpcm9ubWVudEZlYXR1cmUgfSBmcm9tICcuL2FybXMuZ2VuZXJhdGVkJztcbi8vIEdlbmVyYXRlZCBmcm9tIHRoZSBBbGlDbG91ZCBST1MgUmVzb3VyY2UgU3BlY2lmaWNhdGlvblxuZXhwb3J0IHsgUm9zRW52aXJvbm1lbnRGZWF0dXJlIGFzIEVudmlyb25tZW50RmVhdHVyZVByb3BlcnR5IH07XG5cbi8qKlxuICogUHJvcGVydGllcyBmb3IgZGVmaW5pbmcgYSBgRW52aXJvbm1lbnRGZWF0dXJlYC5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvYWxpeXVuLWFybXMtZW52aXJvbm1lbnRmZWF0dXJlXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRW52aXJvbm1lbnRGZWF0dXJlUHJvcHMge1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgZW52aXJvbm1lbnRJZDogVGhlIGlkIG9mIHRoZSBlbnZpcm9ubWVudC5cbiAgICAgKi9cbiAgICByZWFkb25seSBlbnZpcm9ubWVudElkOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBmZWF0dXJlTmFtZTogVGhlIG5hbWUgb2YgdGhlIGZlYXR1cmUuIFZhbGlkIHZhbHVlczpcbiAgICAgKiBhcHAtYWdlbnQtcGlsb3RcbiAgICAgKiBtZXRyaWMtYWdlbnRcbiAgICAgKi9cbiAgICByZWFkb25seSBmZWF0dXJlTmFtZTogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgZmVhdHVyZVZlcnNpb246IFRoZSB2ZXJzaW9uIG9mIHRoZSBmZWF0dXJlLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGZlYXR1cmVWZXJzaW9uOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBjb25maWc6IFRoZSBtZXRhZGF0YSBvZiB0aGUgZmVhdHVyZS5cbiAgICAgKi9cbiAgICByZWFkb25seSBjb25maWc/OiB7IFtrZXk6IHN0cmluZ106IChhbnkgfCByb3MuSVJlc29sdmFibGUpIH0gfCByb3MuSVJlc29sdmFibGU7XG59XG5cbi8qKlxuICogUmVwcmVzZW50cyBhIGBFbnZpcm9ubWVudEZlYXR1cmVgLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIElFbnZpcm9ubWVudEZlYXR1cmUgZXh0ZW5kcyByb3MuSVJlc291cmNlIHtcbiAgICByZWFkb25seSBwcm9wczogRW52aXJvbm1lbnRGZWF0dXJlUHJvcHM7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgRW52aXJvbm1lbnRJZDogVGhlIGVudmlyb25tZW50IElELlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGF0dHJFbnZpcm9ubWVudElkOiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgRmVhdHVyZTogVGhlIGluc3RhbGxhdGlvbiBpbmZvcm1hdGlvbiBvZiB0aGUgZmVhdHVyZS5cbiAgICAgKi9cbiAgICByZWFkb25seSBhdHRyRmVhdHVyZTogcm9zLklSZXNvbHZhYmxlIHwgc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIEZlYXR1cmVOYW1lOiBUaGUgbmFtZSBvZiB0aGUgZmVhdHVyZS5cbiAgICAgKi9cbiAgICByZWFkb25seSBhdHRyRmVhdHVyZU5hbWU6IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBGZWF0dXJlU3RhdHVzOiBUaGUgc3RhdHVzIG9mIHRoZSBmZWF0dXJlLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGF0dHJGZWF0dXJlU3RhdHVzOiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG59XG4vKipcbiAqIFRoaXMgY2xhc3MgZW5jYXBzdWxhdGVzIGFuZCBleHRlbmRzIHRoZSBST1MgcmVzb3VyY2UgdHlwZSBgQUxJWVVOOjpBUk1TOjpFbnZpcm9ubWVudEZlYXR1cmVgLCB3aGljaCBpcyB1c2VkIHRvIGluc3RhbGwgYSBmZWF0dXJlLlxuICogQE5vdGUgVGhpcyBjbGFzcyBtYXkgaGF2ZSBzb21lIG5ldyBmdW5jdGlvbnMgdG8gZmFjaWxpdGF0ZSBkZXZlbG9wbWVudCwgc28gaXQgaXMgcmVjb21tZW5kZWQgdG8gdXNlIHRoaXMgY2xhc3MgaW5zdGVhZCBvZiBgUm9zRW52aXJvbm1lbnRGZWF0dXJlYGZvciBhIG1vcmUgY29udmVuaWVudCBkZXZlbG9wbWVudCBleHBlcmllbmNlLlxuICogU2VlIGh0dHBzOi8vd3d3LmFsaWJhYmFjbG91ZC5jb20vaGVscC9yb3MvZGV2ZWxvcGVyLXJlZmVyZW5jZS9hbGl5dW4tYXJtcy1lbnZpcm9ubWVudGZlYXR1cmVcbiAqL1xuZXhwb3J0IGNsYXNzIEVudmlyb25tZW50RmVhdHVyZSBleHRlbmRzIHJvcy5SZXNvdXJjZSBpbXBsZW1lbnRzIElFbnZpcm9ubWVudEZlYXR1cmUge1xuICAgIHByb3RlY3RlZCBzY29wZTogcm9zLkNvbnN0cnVjdDtcbiAgICBwcm90ZWN0ZWQgaWQ6IHN0cmluZztcbiAgICBwdWJsaWMgcmVhZG9ubHkgcHJvcHM6IEVudmlyb25tZW50RmVhdHVyZVByb3BzO1xuICAgIHByb3RlY3RlZCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBFbnZpcm9ubWVudElkOiBUaGUgZW52aXJvbm1lbnQgSUQuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJFbnZpcm9ubWVudElkOiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgRmVhdHVyZTogVGhlIGluc3RhbGxhdGlvbiBpbmZvcm1hdGlvbiBvZiB0aGUgZmVhdHVyZS5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckZlYXR1cmU6IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBGZWF0dXJlTmFtZTogVGhlIG5hbWUgb2YgdGhlIGZlYXR1cmUuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJGZWF0dXJlTmFtZTogcm9zLklSZXNvbHZhYmxlIHwgc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIEZlYXR1cmVTdGF0dXM6IFRoZSBzdGF0dXMgb2YgdGhlIGZlYXR1cmUuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJGZWF0dXJlU3RhdHVzOiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBQYXJhbSBzY29wZSAtIHNjb3BlIGluIHdoaWNoIHRoaXMgcmVzb3VyY2UgaXMgZGVmaW5lZFxuICAgICAqIFBhcmFtIGlkICAgIC0gc2NvcGVkIGlkIG9mIHRoZSByZXNvdXJjZVxuICAgICAqIFBhcmFtIHByb3BzIC0gcmVzb3VyY2UgcHJvcGVydGllc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiByb3MuQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogRW52aXJvbm1lbnRGZWF0dXJlUHJvcHMsIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OmJvb2xlYW4gPSB0cnVlKSB7XG4gICAgICAgIHN1cGVyKHNjb3BlLCBpZCk7XG4gICAgICAgIHRoaXMuc2NvcGUgPSBzY29wZTtcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xuICAgICAgICB0aGlzLnByb3BzID0gcHJvcHM7XG4gICAgICAgIHRoaXMuZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgPSBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDtcblxuICAgICAgICBjb25zdCByb3NFbnZpcm9ubWVudEZlYXR1cmUgPSBuZXcgUm9zRW52aXJvbm1lbnRGZWF0dXJlKHRoaXMsIGlkLCAge1xuICAgICAgICAgICAgZW52aXJvbm1lbnRJZDogcHJvcHMuZW52aXJvbm1lbnRJZCxcbiAgICAgICAgICAgIGNvbmZpZzogcHJvcHMuY29uZmlnLFxuICAgICAgICAgICAgZmVhdHVyZVZlcnNpb246IHByb3BzLmZlYXR1cmVWZXJzaW9uLFxuICAgICAgICAgICAgZmVhdHVyZU5hbWU6IHByb3BzLmZlYXR1cmVOYW1lLFxuICAgICAgICB9LCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCAmJiB0aGlzLnN0YWNrLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50KTtcbiAgICAgICAgdGhpcy5yZXNvdXJjZSA9IHJvc0Vudmlyb25tZW50RmVhdHVyZTtcbiAgICAgICAgdGhpcy5hdHRyRW52aXJvbm1lbnRJZCA9IHJvc0Vudmlyb25tZW50RmVhdHVyZS5hdHRyRW52aXJvbm1lbnRJZDtcbiAgICAgICAgdGhpcy5hdHRyRmVhdHVyZSA9IHJvc0Vudmlyb25tZW50RmVhdHVyZS5hdHRyRmVhdHVyZTtcbiAgICAgICAgdGhpcy5hdHRyRmVhdHVyZU5hbWUgPSByb3NFbnZpcm9ubWVudEZlYXR1cmUuYXR0ckZlYXR1cmVOYW1lO1xuICAgICAgICB0aGlzLmF0dHJGZWF0dXJlU3RhdHVzID0gcm9zRW52aXJvbm1lbnRGZWF0dXJlLmF0dHJGZWF0dXJlU3RhdHVzO1xuICAgIH1cbn1cbiJdfQ==