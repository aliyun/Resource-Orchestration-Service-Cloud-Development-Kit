"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApplicationScalingRule = exports.ApplicationScalingRuleProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const sae_generated_1 = require("./sae.generated");
Object.defineProperty(exports, "ApplicationScalingRuleProperty", { enumerable: true, get: function () { return sae_generated_1.RosApplicationScalingRule; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::SAE::ApplicationScalingRule`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosApplicationScalingRule`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-sae-applicationscalingrule
 */
class ApplicationScalingRule extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosApplicationScalingRule = new sae_generated_1.RosApplicationScalingRule(this, id, {
            scalingRuleMetric: props.scalingRuleMetric,
            scalingRuleTimer: props.scalingRuleTimer,
            scalingRuleName: props.scalingRuleName,
            scalingRuleEnable: props.scalingRuleEnable,
            appId: props.appId,
            minReadyInstances: props.minReadyInstances,
            minReadyInstanceRatio: props.minReadyInstanceRatio,
            scalingRuleType: props.scalingRuleType,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosApplicationScalingRule;
        this.attrScalingRuleName = rosApplicationScalingRule.attrScalingRuleName;
    }
}
exports.ApplicationScalingRule = ApplicationScalingRule;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwbGljYXRpb25zY2FsaW5ncnVsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImFwcGxpY2F0aW9uc2NhbGluZ3J1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsOENBQThDO0FBQzlDLG1EQUE0RDtBQUV0QiwrR0FGN0IseUNBQXlCLE9BRWtDO0FBaURwRTs7OztHQUlHO0FBQ0gsTUFBYSxzQkFBdUIsU0FBUSxHQUFHLENBQUMsUUFBUTtJQVdwRDs7OztPQUlHO0lBQ0gsWUFBWSxLQUFvQixFQUFFLEVBQVUsRUFBRSxLQUFrQyxFQUFFLG1DQUEyQyxJQUFJO1FBQzdILEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDakIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUM7UUFDYixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsZ0NBQWdDLEdBQUcsZ0NBQWdDLENBQUM7UUFFekUsTUFBTSx5QkFBeUIsR0FBRyxJQUFJLHlDQUF5QixDQUFDLElBQUksRUFBRSxFQUFFLEVBQUc7WUFDdkUsaUJBQWlCLEVBQUUsS0FBSyxDQUFDLGlCQUFpQjtZQUMxQyxnQkFBZ0IsRUFBRSxLQUFLLENBQUMsZ0JBQWdCO1lBQ3hDLGVBQWUsRUFBRSxLQUFLLENBQUMsZUFBZTtZQUN0QyxpQkFBaUIsRUFBRSxLQUFLLENBQUMsaUJBQWlCO1lBQzFDLEtBQUssRUFBRSxLQUFLLENBQUMsS0FBSztZQUNsQixpQkFBaUIsRUFBRSxLQUFLLENBQUMsaUJBQWlCO1lBQzFDLHFCQUFxQixFQUFFLEtBQUssQ0FBQyxxQkFBcUI7WUFDbEQsZUFBZSxFQUFFLEtBQUssQ0FBQyxlQUFlO1NBQ3pDLEVBQUUsZ0NBQWdDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO1FBQ3BGLElBQUksQ0FBQyxRQUFRLEdBQUcseUJBQXlCLENBQUM7UUFDMUMsSUFBSSxDQUFDLG1CQUFtQixHQUFHLHlCQUF5QixDQUFDLG1CQUFtQixDQUFDO0lBQzdFLENBQUM7Q0FDSjtBQXBDRCx3REFvQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyByb3MgZnJvbSAnQGFsaWNsb3VkL3Jvcy1jZGstY29yZSc7XG5pbXBvcnQgeyBSb3NBcHBsaWNhdGlvblNjYWxpbmdSdWxlIH0gZnJvbSAnLi9zYWUuZ2VuZXJhdGVkJztcbi8vIEdlbmVyYXRlZCBmcm9tIHRoZSBBbGlDbG91ZCBST1MgUmVzb3VyY2UgU3BlY2lmaWNhdGlvblxuZXhwb3J0IHsgUm9zQXBwbGljYXRpb25TY2FsaW5nUnVsZSBhcyBBcHBsaWNhdGlvblNjYWxpbmdSdWxlUHJvcGVydHkgfTtcblxuLyoqXG4gKiBQcm9wZXJ0aWVzIGZvciBkZWZpbmluZyBhIGBBcHBsaWNhdGlvblNjYWxpbmdSdWxlYC5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvYWxpeXVuLXNhZS1hcHBsaWNhdGlvbnNjYWxpbmdydWxlXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQXBwbGljYXRpb25TY2FsaW5nUnVsZVByb3BzIHtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGFwcElkOiBUaGUgSUQgb2YgdGhlIGFwcGxpY2F0aW9uLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGFwcElkOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBzY2FsaW5nUnVsZU5hbWU6IFRoZSBuYW1lIG9mIHRoZSBhdXRvIHNjYWxpbmcgcG9saWN5LiBUaGUgbmFtZSBtdXN0IHN0YXJ0IHdpdGggYSBsb3dlcmNhc2UgbGV0dGVyLCBhbmQgY2FuIGNvbnRhaW4gbG93ZXJjYXNlIGxldHRlcnMsIGRpZ2l0cywgYW5kIGh5cGhlbnMgKC0pLlRoZSBuYW1lIG11c3QgYmUgMSB0byAzMiBjaGFyYWN0ZXJzIGluIGxlbmd0aC5cbiAgICAgKi9cbiAgICByZWFkb25seSBzY2FsaW5nUnVsZU5hbWU6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHNjYWxpbmdSdWxlVHlwZTogVGhlIHR5cGUgb2YgdGhlIGF1dG8gc2NhbGluZyBwb2xpY3kuIFZhbGlkIHZhbHVlczogdGltZXI6IFRpbWVkIHNjYWxpbmcuIG1ldHJpYzogQ3VzdG9tIG1ldHJpYyBzY2FsaW5nLm1peDogbWl4IHNjYWxpbmdcbiAgICAgKi9cbiAgICByZWFkb25seSBzY2FsaW5nUnVsZVR5cGU6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IG1pblJlYWR5SW5zdGFuY2VSYXRpbzogVGhlIG1pbmltdW0gcGVyY2VudGFnZSBvZiBzdXJ2aXZpbmcgaW5zdGFuY2VzLiBUaGUgdmFsdWUgZGVzY3JpcHRpb24gaXMgYXMgZm9sbG93czotMTogSW5pdGlhbGl6YXRpb24gdmFsdWUsIGluZGljYXRpbmcgdGhhdCB0aGUgcGVyY2VudGFnZSBpcyBub3QgdXNlZC4wfjEwMDogVGhlIHVuaXQgaXMgYSBwZXJjZW50YWdlLCByb3VuZGVkIHVwLiBGb3IgZXhhbXBsZSwgaWYgaXQgaXMgc2V0IHRvIDUwJSwgaWYgdGhlcmUgYXJlIGN1cnJlbnRseSA1IGluc3RhbmNlcywgdGhlIG1pbmltdW0gbnVtYmVyIG9mIHN1cnZpdmluZyBpbnN0YW5jZXMgaXMgMy5cbiAgICAgKi9cbiAgICByZWFkb25seSBtaW5SZWFkeUluc3RhbmNlUmF0aW8/OiBudW1iZXIgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBtaW5SZWFkeUluc3RhbmNlczogTWluaW11bSBudW1iZXIgb2Ygc3Vydml2aW5nIGluc3RhbmNlcy4gVGhlIHZhbHVlIGlzIGFzIGZvbGxvd3M6SWYgc2V0IHRvIDAsIHRoZSBhcHBsaWNhdGlvbiB3aWxsIGJlIGludGVycnVwdGVkIGR1cmluZyB0aGUgdXBncmFkZSBwcm9jZXNzLklmIHNldCB0byAqKi0xKiosIHRoZSBtaW5pbXVtIG51bWJlciBvZiBzdXJ2aXZpbmcgaW5zdGFuY2VzIHdpbGwgdXNlIHRoZSBzeXN0ZW0gcmVjb21tZW5kZWQgdmFsdWUsIHdoaWNoIGlzIDI1JSBvZiB0aGUgZXhpc3RpbmcgbnVtYmVyIG9mIGluc3RhbmNlcy4gSWYgdGhlcmUgYXJlIGN1cnJlbnRseSA1IGluc3RhbmNlcywgNcOXMjUlPTEuMjUsIGFmdGVyIHJvdW5kaW5nIHVwLCB0aGUgbWluaW11bSBudW1iZXIgb2Ygc3Vydml2aW5nIGluc3RhbmNlcyBpcyAyLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IG1pblJlYWR5SW5zdGFuY2VzPzogbnVtYmVyIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgc2NhbGluZ1J1bGVFbmFibGU6IFdoZXRoZXIgdG8gZW5hYmxlIHRoZSBzY2FsaW5nIHJ1bGUuXG4gICAgICovXG4gICAgcmVhZG9ubHkgc2NhbGluZ1J1bGVFbmFibGU/OiBib29sZWFuIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgc2NhbGluZ1J1bGVNZXRyaWM6IENvbmZpZ3VyYXRpb24gb2YgbW9uaXRvcmluZyBpbmRpY2F0b3IgZWxhc3RpY2l0eSBwb2xpY3kuIFRoaXMgcGFyYW1ldGVyIGlzIHJlcXVpcmVkIHdoZW4geW91IHNlbGVjdCBtb25pdG9yaW5nIGluZGljYXRvciBlbGFzdGljaXR5IHBvbGljeSBzZXR0aW5nLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHNjYWxpbmdSdWxlTWV0cmljPzogUm9zQXBwbGljYXRpb25TY2FsaW5nUnVsZS5TY2FsaW5nUnVsZU1ldHJpY1Byb3BlcnR5IHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgc2NhbGluZ1J1bGVUaW1lcjogVGhlIGNvbmZpZ3VyYXRpb24gb2YgdGhlIHRpbWVyIHNjYWxpbmcgcG9saWN5LlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHNjYWxpbmdSdWxlVGltZXI/OiBSb3NBcHBsaWNhdGlvblNjYWxpbmdSdWxlLlNjYWxpbmdSdWxlVGltZXJQcm9wZXJ0eSB8IHJvcy5JUmVzb2x2YWJsZTtcbn1cblxuLyoqXG4gKiBUaGlzIGNsYXNzIGVuY2Fwc3VsYXRlcyBhbmQgZXh0ZW5kcyB0aGUgUk9TIHJlc291cmNlIHR5cGUgYEFMSVlVTjo6U0FFOjpBcHBsaWNhdGlvblNjYWxpbmdSdWxlYC5cbiAqIEBOb3RlIFRoaXMgY2xhc3MgbWF5IGhhdmUgc29tZSBuZXcgZnVuY3Rpb25zIHRvIGZhY2lsaXRhdGUgZGV2ZWxvcG1lbnQsIHNvIGl0IGlzIHJlY29tbWVuZGVkIHRvIHVzZSB0aGlzIGNsYXNzIGluc3RlYWQgb2YgYFJvc0FwcGxpY2F0aW9uU2NhbGluZ1J1bGVgZm9yIGEgbW9yZSBjb252ZW5pZW50IGRldmVsb3BtZW50IGV4cGVyaWVuY2UuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2FsaXl1bi1zYWUtYXBwbGljYXRpb25zY2FsaW5ncnVsZVxuICovXG5leHBvcnQgY2xhc3MgQXBwbGljYXRpb25TY2FsaW5nUnVsZSBleHRlbmRzIHJvcy5SZXNvdXJjZSB7XG4gICAgcHJvdGVjdGVkIHNjb3BlOiByb3MuQ29uc3RydWN0O1xuICAgIHByb3RlY3RlZCBpZDogc3RyaW5nO1xuICAgIHByb3RlY3RlZCBwcm9wczogQXBwbGljYXRpb25TY2FsaW5nUnVsZVByb3BzO1xuICAgIHByb3RlY3RlZCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBTY2FsaW5nUnVsZU5hbWU6IFRoZSBuYW1lIG9mIHRoZSBzY2FsaW5nIHJ1bGUuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJTY2FsaW5nUnVsZU5hbWU6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFBhcmFtIHNjb3BlIC0gc2NvcGUgaW4gd2hpY2ggdGhpcyByZXNvdXJjZSBpcyBkZWZpbmVkXG4gICAgICogUGFyYW0gaWQgICAgLSBzY29wZWQgaWQgb2YgdGhlIHJlc291cmNlXG4gICAgICogUGFyYW0gcHJvcHMgLSByZXNvdXJjZSBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IHJvcy5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBBcHBsaWNhdGlvblNjYWxpbmdSdWxlUHJvcHMsIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OmJvb2xlYW4gPSB0cnVlKSB7XG4gICAgICAgIHN1cGVyKHNjb3BlLCBpZCk7XG4gICAgICAgIHRoaXMuc2NvcGUgPSBzY29wZTtcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xuICAgICAgICB0aGlzLnByb3BzID0gcHJvcHM7XG4gICAgICAgIHRoaXMuZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgPSBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDtcblxuICAgICAgICBjb25zdCByb3NBcHBsaWNhdGlvblNjYWxpbmdSdWxlID0gbmV3IFJvc0FwcGxpY2F0aW9uU2NhbGluZ1J1bGUodGhpcywgaWQsICB7XG4gICAgICAgICAgICBzY2FsaW5nUnVsZU1ldHJpYzogcHJvcHMuc2NhbGluZ1J1bGVNZXRyaWMsXG4gICAgICAgICAgICBzY2FsaW5nUnVsZVRpbWVyOiBwcm9wcy5zY2FsaW5nUnVsZVRpbWVyLFxuICAgICAgICAgICAgc2NhbGluZ1J1bGVOYW1lOiBwcm9wcy5zY2FsaW5nUnVsZU5hbWUsXG4gICAgICAgICAgICBzY2FsaW5nUnVsZUVuYWJsZTogcHJvcHMuc2NhbGluZ1J1bGVFbmFibGUsXG4gICAgICAgICAgICBhcHBJZDogcHJvcHMuYXBwSWQsXG4gICAgICAgICAgICBtaW5SZWFkeUluc3RhbmNlczogcHJvcHMubWluUmVhZHlJbnN0YW5jZXMsXG4gICAgICAgICAgICBtaW5SZWFkeUluc3RhbmNlUmF0aW86IHByb3BzLm1pblJlYWR5SW5zdGFuY2VSYXRpbyxcbiAgICAgICAgICAgIHNjYWxpbmdSdWxlVHlwZTogcHJvcHMuc2NhbGluZ1J1bGVUeXBlLFxuICAgICAgICB9LCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCAmJiB0aGlzLnN0YWNrLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50KTtcbiAgICAgICAgdGhpcy5yZXNvdXJjZSA9IHJvc0FwcGxpY2F0aW9uU2NhbGluZ1J1bGU7XG4gICAgICAgIHRoaXMuYXR0clNjYWxpbmdSdWxlTmFtZSA9IHJvc0FwcGxpY2F0aW9uU2NhbGluZ1J1bGUuYXR0clNjYWxpbmdSdWxlTmFtZTtcbiAgICB9XG59XG4iXX0=