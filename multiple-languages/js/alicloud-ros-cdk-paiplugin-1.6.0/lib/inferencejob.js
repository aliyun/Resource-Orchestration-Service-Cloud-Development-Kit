"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InferenceJob = exports.InferenceJobProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const paiplugin_generated_1 = require("./paiplugin.generated");
Object.defineProperty(exports, "InferenceJobProperty", { enumerable: true, get: function () { return paiplugin_generated_1.RosInferenceJob; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::PAIPlugin::InferenceJob`, which is used to create a prediction job.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosInferenceJob`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-paiplugin-inferencejob
 */
class InferenceJob extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosInferenceJob = new paiplugin_generated_1.RosInferenceJob(this, id, {
            dataPath: props.dataPath,
            trainingJobId: props.trainingJobId,
            campaignId: props.campaignId,
            targetPath: props.targetPath,
            userConfig: props.userConfig,
            algorithm: props.algorithm,
            waitForInferenceFinish: props.waitForInferenceFinish === undefined || props.waitForInferenceFinish === null ? true : props.waitForInferenceFinish,
            remark: props.remark,
            name: props.name,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosInferenceJob;
        this.attrGroupId = rosInferenceJob.attrGroupId;
        this.attrInferenceJobId = rosInferenceJob.attrInferenceJobId;
    }
}
exports.InferenceJob = InferenceJob;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5mZXJlbmNlam9iLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiaW5mZXJlbmNlam9iLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDhDQUE4QztBQUM5QywrREFBd0Q7QUFFNUIscUdBRm5CLHFDQUFlLE9BRXdCO0FBc0VoRDs7OztHQUlHO0FBQ0gsTUFBYSxZQUFhLFNBQVEsR0FBRyxDQUFDLFFBQVE7SUFnQjFDOzs7O09BSUc7SUFDSCxZQUFZLEtBQW9CLEVBQUUsRUFBVSxFQUFFLEtBQXdCLEVBQUUsbUNBQTJDLElBQUk7UUFDbkgsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNqQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUNiLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxnQ0FBZ0MsR0FBRyxnQ0FBZ0MsQ0FBQztRQUV6RSxNQUFNLGVBQWUsR0FBRyxJQUFJLHFDQUFlLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRztZQUNuRCxRQUFRLEVBQUUsS0FBSyxDQUFDLFFBQVE7WUFDeEIsYUFBYSxFQUFFLEtBQUssQ0FBQyxhQUFhO1lBQ2xDLFVBQVUsRUFBRSxLQUFLLENBQUMsVUFBVTtZQUM1QixVQUFVLEVBQUUsS0FBSyxDQUFDLFVBQVU7WUFDNUIsVUFBVSxFQUFFLEtBQUssQ0FBQyxVQUFVO1lBQzVCLFNBQVMsRUFBRSxLQUFLLENBQUMsU0FBUztZQUMxQixzQkFBc0IsRUFBRSxLQUFLLENBQUMsc0JBQXNCLEtBQUssU0FBUyxJQUFJLEtBQUssQ0FBQyxzQkFBc0IsS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLHNCQUFzQjtZQUNqSixNQUFNLEVBQUUsS0FBSyxDQUFDLE1BQU07WUFDcEIsSUFBSSxFQUFFLEtBQUssQ0FBQyxJQUFJO1NBQ25CLEVBQUUsZ0NBQWdDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO1FBQ3BGLElBQUksQ0FBQyxRQUFRLEdBQUcsZUFBZSxDQUFDO1FBQ2hDLElBQUksQ0FBQyxXQUFXLEdBQUcsZUFBZSxDQUFDLFdBQVcsQ0FBQztRQUMvQyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsZUFBZSxDQUFDLGtCQUFrQixDQUFDO0lBQ2pFLENBQUM7Q0FDSjtBQTNDRCxvQ0EyQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyByb3MgZnJvbSAnQGFsaWNsb3VkL3Jvcy1jZGstY29yZSc7XG5pbXBvcnQgeyBSb3NJbmZlcmVuY2VKb2IgfSBmcm9tICcuL3BhaXBsdWdpbi5nZW5lcmF0ZWQnO1xuLy8gR2VuZXJhdGVkIGZyb20gdGhlIEFsaUNsb3VkIFJPUyBSZXNvdXJjZSBTcGVjaWZpY2F0aW9uXG5leHBvcnQgeyBSb3NJbmZlcmVuY2VKb2IgYXMgSW5mZXJlbmNlSm9iUHJvcGVydHkgfTtcblxuLyoqXG4gKiBQcm9wZXJ0aWVzIGZvciBkZWZpbmluZyBhIGBJbmZlcmVuY2VKb2JgLlxuICogU2VlIGh0dHBzOi8vd3d3LmFsaWJhYmFjbG91ZC5jb20vaGVscC9yb3MvZGV2ZWxvcGVyLXJlZmVyZW5jZS9hbGl5dW4tcGFpcGx1Z2luLWluZmVyZW5jZWpvYlxuICovXG5leHBvcnQgaW50ZXJmYWNlIEluZmVyZW5jZUpvYlByb3BzIHtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGFsZ29yaXRobTogVGhlIGFsZ29yaXRobSBvZiBpbmZlcmVuY2Ugam9iLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGFsZ29yaXRobTogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgY2FtcGFpZ25JZDogVGhlIGNhbXBhaWduIGlkIG9mIGluZmVyZW5jZSBqb2IuXG4gICAgICovXG4gICAgcmVhZG9ubHkgY2FtcGFpZ25JZDogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgZGF0YVBhdGg6IFRoZSBpbnB1dCBkYXRhIHBhdGggb2YgaW5mZXJlbmNlIGpvYi5cbiAgICAgKi9cbiAgICByZWFkb25seSBkYXRhUGF0aDogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgbmFtZTogVGhlIG5hbWUgb2YgaW5mZXJlbmNlIGpvYi5cbiAgICAgKi9cbiAgICByZWFkb25seSBuYW1lOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSB0YXJnZXRQYXRoOiBUaGUgb3V0cHV0IHJlc3VsdCBwYXRoIG9mIGluZmVyZW5jZSBqb2IuXG4gICAgICovXG4gICAgcmVhZG9ubHkgdGFyZ2V0UGF0aDogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgdHJhaW5pbmdKb2JJZDogVGhlIHRyYWluaW5nIGpvYiBpZCBvZiBpbmZlcmVuY2Ugam9iLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHRyYWluaW5nSm9iSWQ6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHVzZXJDb25maWc6IFRoZSB1c2VyIGNvbmZpZyBvZiBpbmZlcmVuY2Ugam9iLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHVzZXJDb25maWc6IHsgW2tleTogc3RyaW5nXTogKGFueSB8IHJvcy5JUmVzb2x2YWJsZSkgfSB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHJlbWFyazogVGhlIHJlbWFyayBvZiBpbmZlcmVuY2Ugam9iLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHJlbWFyaz86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHdhaXRGb3JJbmZlcmVuY2VGaW5pc2g6IFdoZXRoZXIgcmVzb3VyY2UgY3JlYXRpb24gd2FpdHMgZm9yIHRoZSBpbmZlcmVuY2UgdGFzayB0byBjb21wbGV0ZS5UaGUgbG9uZ2VzdCB3YWl0aW5nIHRpbWUgaXMgNDAgbWludXRlc1xuICAgICAqL1xuICAgIHJlYWRvbmx5IHdhaXRGb3JJbmZlcmVuY2VGaW5pc2g/OiBib29sZWFuIHwgcm9zLklSZXNvbHZhYmxlO1xufVxuXG4vKipcbiAqIFJlcHJlc2VudHMgYSBgSW5mZXJlbmNlSm9iYC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJSW5mZXJlbmNlSm9iIGV4dGVuZHMgcm9zLklSZXNvdXJjZSB7XG4gICAgcmVhZG9ubHkgcHJvcHM6IEluZmVyZW5jZUpvYlByb3BzO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIEdyb3VwSWQ6IFRoZSByZWxhdGVkIGdyb3VwIGlkIG9mIGluZmVybmNlIGpvYiByZXN1bHQuXG4gICAgICovXG4gICAgcmVhZG9ubHkgYXR0ckdyb3VwSWQ6IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBJbmZlcmVuY2VKb2JJZDogVGhlIGlkIG9mIGluZmVyZW5jZSBqb2IuXG4gICAgICovXG4gICAgcmVhZG9ubHkgYXR0ckluZmVyZW5jZUpvYklkOiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG59XG4vKipcbiAqIFRoaXMgY2xhc3MgZW5jYXBzdWxhdGVzIGFuZCBleHRlbmRzIHRoZSBST1MgcmVzb3VyY2UgdHlwZSBgQUxJWVVOOjpQQUlQbHVnaW46OkluZmVyZW5jZUpvYmAsIHdoaWNoIGlzIHVzZWQgdG8gY3JlYXRlIGEgcHJlZGljdGlvbiBqb2IuXG4gKiBATm90ZSBUaGlzIGNsYXNzIG1heSBoYXZlIHNvbWUgbmV3IGZ1bmN0aW9ucyB0byBmYWNpbGl0YXRlIGRldmVsb3BtZW50LCBzbyBpdCBpcyByZWNvbW1lbmRlZCB0byB1c2UgdGhpcyBjbGFzcyBpbnN0ZWFkIG9mIGBSb3NJbmZlcmVuY2VKb2JgZm9yIGEgbW9yZSBjb252ZW5pZW50IGRldmVsb3BtZW50IGV4cGVyaWVuY2UuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2FsaXl1bi1wYWlwbHVnaW4taW5mZXJlbmNlam9iXG4gKi9cbmV4cG9ydCBjbGFzcyBJbmZlcmVuY2VKb2IgZXh0ZW5kcyByb3MuUmVzb3VyY2UgaW1wbGVtZW50cyBJSW5mZXJlbmNlSm9iIHtcbiAgICBwcm90ZWN0ZWQgc2NvcGU6IHJvcy5Db25zdHJ1Y3Q7XG4gICAgcHJvdGVjdGVkIGlkOiBzdHJpbmc7XG4gICAgcHVibGljIHJlYWRvbmx5IHByb3BzOiBJbmZlcmVuY2VKb2JQcm9wcztcbiAgICBwcm90ZWN0ZWQgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6IGJvb2xlYW47XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgR3JvdXBJZDogVGhlIHJlbGF0ZWQgZ3JvdXAgaWQgb2YgaW5mZXJuY2Ugam9iIHJlc3VsdC5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckdyb3VwSWQ6IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBJbmZlcmVuY2VKb2JJZDogVGhlIGlkIG9mIGluZmVyZW5jZSBqb2IuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJJbmZlcmVuY2VKb2JJZDogcm9zLklSZXNvbHZhYmxlIHwgc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogUGFyYW0gc2NvcGUgLSBzY29wZSBpbiB3aGljaCB0aGlzIHJlc291cmNlIGlzIGRlZmluZWRcbiAgICAgKiBQYXJhbSBpZCAgICAtIHNjb3BlZCBpZCBvZiB0aGUgcmVzb3VyY2VcbiAgICAgKiBQYXJhbSBwcm9wcyAtIHJlc291cmNlIHByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihzY29wZTogcm9zLkNvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IEluZmVyZW5jZUpvYlByb3BzLCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDpib29sZWFuID0gdHJ1ZSkge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQpO1xuICAgICAgICB0aGlzLnNjb3BlID0gc2NvcGU7XG4gICAgICAgIHRoaXMuaWQgPSBpZDtcbiAgICAgICAgdGhpcy5wcm9wcyA9IHByb3BzO1xuICAgICAgICB0aGlzLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ID0gZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ7XG5cbiAgICAgICAgY29uc3Qgcm9zSW5mZXJlbmNlSm9iID0gbmV3IFJvc0luZmVyZW5jZUpvYih0aGlzLCBpZCwgIHtcbiAgICAgICAgICAgIGRhdGFQYXRoOiBwcm9wcy5kYXRhUGF0aCxcbiAgICAgICAgICAgIHRyYWluaW5nSm9iSWQ6IHByb3BzLnRyYWluaW5nSm9iSWQsXG4gICAgICAgICAgICBjYW1wYWlnbklkOiBwcm9wcy5jYW1wYWlnbklkLFxuICAgICAgICAgICAgdGFyZ2V0UGF0aDogcHJvcHMudGFyZ2V0UGF0aCxcbiAgICAgICAgICAgIHVzZXJDb25maWc6IHByb3BzLnVzZXJDb25maWcsXG4gICAgICAgICAgICBhbGdvcml0aG06IHByb3BzLmFsZ29yaXRobSxcbiAgICAgICAgICAgIHdhaXRGb3JJbmZlcmVuY2VGaW5pc2g6IHByb3BzLndhaXRGb3JJbmZlcmVuY2VGaW5pc2ggPT09IHVuZGVmaW5lZCB8fCBwcm9wcy53YWl0Rm9ySW5mZXJlbmNlRmluaXNoID09PSBudWxsID8gdHJ1ZSA6IHByb3BzLndhaXRGb3JJbmZlcmVuY2VGaW5pc2gsXG4gICAgICAgICAgICByZW1hcms6IHByb3BzLnJlbWFyayxcbiAgICAgICAgICAgIG5hbWU6IHByb3BzLm5hbWUsXG4gICAgICAgIH0sIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ICYmIHRoaXMuc3RhY2suZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQpO1xuICAgICAgICB0aGlzLnJlc291cmNlID0gcm9zSW5mZXJlbmNlSm9iO1xuICAgICAgICB0aGlzLmF0dHJHcm91cElkID0gcm9zSW5mZXJlbmNlSm9iLmF0dHJHcm91cElkO1xuICAgICAgICB0aGlzLmF0dHJJbmZlcmVuY2VKb2JJZCA9IHJvc0luZmVyZW5jZUpvYi5hdHRySW5mZXJlbmNlSm9iSWQ7XG4gICAgfVxufVxuIl19