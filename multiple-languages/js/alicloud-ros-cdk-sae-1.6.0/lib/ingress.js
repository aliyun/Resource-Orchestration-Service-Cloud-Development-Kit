"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Ingress = exports.IngressProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const sae_generated_1 = require("./sae.generated");
Object.defineProperty(exports, "IngressProperty", { enumerable: true, get: function () { return sae_generated_1.RosIngress; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::SAE::Ingress`, which is used to create a routing rule.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosIngress`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-sae-ingress
 */
class Ingress extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosIngress = new sae_generated_1.RosIngress(this, id, {
            defaultRule: props.defaultRule,
            slbId: props.slbId,
            listenerPort: props.listenerPort,
            description: props.description,
            certIds: props.certIds,
            certId: props.certId,
            loadBalanceType: props.loadBalanceType,
            namespaceId: props.namespaceId,
            listenerProtocol: props.listenerProtocol,
            rules: props.rules,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosIngress;
        this.attrIngressId = rosIngress.attrIngressId;
    }
}
exports.Ingress = Ingress;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5ncmVzcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImluZ3Jlc3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsOENBQThDO0FBQzlDLG1EQUE2QztBQUV0QixnR0FGZCwwQkFBVSxPQUVtQjtBQXVFdEM7Ozs7R0FJRztBQUNILE1BQWEsT0FBUSxTQUFRLEdBQUcsQ0FBQyxRQUFRO0lBV3JDOzs7O09BSUc7SUFDSCxZQUFZLEtBQW9CLEVBQUUsRUFBVSxFQUFFLEtBQW1CLEVBQUUsbUNBQTJDLElBQUk7UUFDOUcsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNqQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUNiLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxnQ0FBZ0MsR0FBRyxnQ0FBZ0MsQ0FBQztRQUV6RSxNQUFNLFVBQVUsR0FBRyxJQUFJLDBCQUFVLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRztZQUN6QyxXQUFXLEVBQUUsS0FBSyxDQUFDLFdBQVc7WUFDOUIsS0FBSyxFQUFFLEtBQUssQ0FBQyxLQUFLO1lBQ2xCLFlBQVksRUFBRSxLQUFLLENBQUMsWUFBWTtZQUNoQyxXQUFXLEVBQUUsS0FBSyxDQUFDLFdBQVc7WUFDOUIsT0FBTyxFQUFFLEtBQUssQ0FBQyxPQUFPO1lBQ3RCLE1BQU0sRUFBRSxLQUFLLENBQUMsTUFBTTtZQUNwQixlQUFlLEVBQUUsS0FBSyxDQUFDLGVBQWU7WUFDdEMsV0FBVyxFQUFFLEtBQUssQ0FBQyxXQUFXO1lBQzlCLGdCQUFnQixFQUFFLEtBQUssQ0FBQyxnQkFBZ0I7WUFDeEMsS0FBSyxFQUFFLEtBQUssQ0FBQyxLQUFLO1NBQ3JCLEVBQUUsZ0NBQWdDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO1FBQ3BGLElBQUksQ0FBQyxRQUFRLEdBQUcsVUFBVSxDQUFDO1FBQzNCLElBQUksQ0FBQyxhQUFhLEdBQUcsVUFBVSxDQUFDLGFBQWEsQ0FBQztJQUNsRCxDQUFDO0NBQ0o7QUF0Q0QsMEJBc0NDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcm9zIGZyb20gJ0BhbGljbG91ZC9yb3MtY2RrLWNvcmUnO1xuaW1wb3J0IHsgUm9zSW5ncmVzcyB9IGZyb20gJy4vc2FlLmdlbmVyYXRlZCc7XG4vLyBHZW5lcmF0ZWQgZnJvbSB0aGUgQWxpQ2xvdWQgUk9TIFJlc291cmNlIFNwZWNpZmljYXRpb25cbmV4cG9ydCB7IFJvc0luZ3Jlc3MgYXMgSW5ncmVzc1Byb3BlcnR5IH07XG5cbi8qKlxuICogUHJvcGVydGllcyBmb3IgZGVmaW5pbmcgYSBgSW5ncmVzc2AuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2FsaXl1bi1zYWUtaW5ncmVzc1xuICovXG5leHBvcnQgaW50ZXJmYWNlIEluZ3Jlc3NQcm9wcyB7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBkZWZhdWx0UnVsZTogVGhlIGRlZmF1bHQgZm9yd2FyZGluZyBydWxlLiBZb3UgY2FuIHNwZWNpZnkgYSBwb3J0IGFuZCBhbiBhcHBsaWNhdGlvbiBpbiB0aGUgZGVmYXVsdCBmb3J3YXJkaW5nIHJ1bGUgdG8gZm9yd2FyZCB0cmFmZmljIGJhc2VkIG9uIHRoZSBJUCBhZGRyZXNzIG9mIHRoZSBhcHBsaWNhdGlvbi5cbiAgICAgKi9cbiAgICByZWFkb25seSBkZWZhdWx0UnVsZTogUm9zSW5ncmVzcy5EZWZhdWx0UnVsZVByb3BlcnR5IHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgZGVzY3JpcHRpb246IFRoZSBuYW1lIG9mIHRoZSByb3V0aW5nIHJ1bGUuXG4gICAgICovXG4gICAgcmVhZG9ubHkgZGVzY3JpcHRpb246IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGxpc3RlbmVyUG9ydDogVGhlIGxpc3RlbmVyIHBvcnQgb2YgdGhlIFNMQiBpbnN0YW5jZS4gWW91IG11c3Qgc3BlY2lmeSBhIHZhY2FudCBwb3J0LlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGxpc3RlbmVyUG9ydDogbnVtYmVyIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgbmFtZXNwYWNlSWQ6IFRoZSBJRCBvZiB0aGUgbmFtZXNwYWNlIHRvIHdoaWNoIHRoZSBhcHBsaWNhdGlvbiBiZWxvbmdzLiBZb3UgY2FuIHNwZWNpZnkgb25seSBvbmUgbmFtZXNwYWNlIElEIGVhY2ggdGltZSB5b3UgY2FsbCB0aGlzIG9wZXJhdGlvbi5cbiAgICAgKi9cbiAgICByZWFkb25seSBuYW1lc3BhY2VJZDogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgcnVsZXM6IFRoZSBmb3J3YXJkaW5nIHJ1bGVzLiBZb3UgY2FuIHNwZWNpZnkgYSBwb3J0IGFuZCBhbiBhcHBsaWNhdGlvbiBpbiBhIGZvcndhcmRpbmcgcnVsZSB0byBmb3J3YXJkIHRyYWZmaWMgYmFzZWQgb24gdGhlIHNwZWNpZmllZCBkb21haW4gbmFtZSBhbmQgcmVxdWVzdCBwYXRoLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHJ1bGVzOiBBcnJheTxSb3NJbmdyZXNzLlJ1bGVzUHJvcGVydHkgfCByb3MuSVJlc29sdmFibGU+IHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgc2xiSWQ6IFRoZSBTZXJ2ZXIgTG9hZCBCYWxhbmNlciAoU0xCKSBpbnN0YW5jZSB0aGF0IGlzIHVzZWQgYnkgdGhlIHJvdXRpbmcgcnVsZS5cbiAgICAgKi9cbiAgICByZWFkb25seSBzbGJJZDogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgY2VydElkOiBUaGUgSUQgb2YgdGhlIGNlcnRpZmljYXRlIHRoYXQgaXMgYXNzb2NpYXRlZCB3aXRoIHRoZSBDbGFzc2ljIExvYWQgQmFsYW5jZXIgKENMQikgaW5zdGFuY2UuXG4gICAgICogSWYgTG9hZEJhbGFuY2VUeXBlIGlzIHNldCB0byBjbGIsIHNwZWNpZnkgdGhpcyBwYXJhbWV0ZXIgdG8gY29uZmlndXJlIGEgY2VydGlmaWNhdGUgZm9yIHRoZSBIVFRQIGxpc3RlbmVyLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGNlcnRJZD86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGNlcnRJZHM6IFRoZSBJRHMgb2YgdGhlIGNlcnRpZmljYXRlcyB0aGF0IGFyZSBhc3NvY2lhdGVkIHdpdGggdGhlIEFwcGxpY2F0aW9uIExvYWQgQmFsYW5jZXIgKEFMQikgaW5zdGFuY2UuXG4gICAgICovXG4gICAgcmVhZG9ubHkgY2VydElkcz86IEFycmF5PHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZT4gfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBsaXN0ZW5lclByb3RvY29sOiBUaGUgcHJvdG9jb2wgdGhhdCBpcyB1c2VkIHRvIGZvcndhcmQgcmVxdWVzdHMuXG4gICAgICovXG4gICAgcmVhZG9ubHkgbGlzdGVuZXJQcm90b2NvbD86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGxvYWRCYWxhbmNlVHlwZTogVGhlIHR5cGUgb2YgdGhlIFNMQiBpbnN0YW5jZSBiYXNlZCBvbiB0aGUgcHJvY2Vzc2luZyBjYXBhYmlsaXRpZXMuIFRoZSBpbnN0YW5jZSB0eXBlIGNhbiBiZSBzcGVjaWZpZWQgb25seSB3aGVuIHlvdSBjcmVhdGUgYSByb3V0aW5nIHJ1bGUuIFlvdSBjYW5ub3QgY2hhbmdlIHRoZSBpbnN0YW5jZSB0eXBlIHdoZW4geW91IHVwZGF0ZSB0aGUgcm91dGluZyBydWxlLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGxvYWRCYWxhbmNlVHlwZT86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcbn1cblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgYEluZ3Jlc3NgLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIElJbmdyZXNzIGV4dGVuZHMgcm9zLklSZXNvdXJjZSB7XG4gICAgcmVhZG9ubHkgcHJvcHM6IEluZ3Jlc3NQcm9wcztcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBJbmdyZXNzSWQ6IFRoZSBJRCBvZiB0aGUgcm91dGluZyBydWxlLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGF0dHJJbmdyZXNzSWQ6IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcbn1cbi8qKlxuICogVGhpcyBjbGFzcyBlbmNhcHN1bGF0ZXMgYW5kIGV4dGVuZHMgdGhlIFJPUyByZXNvdXJjZSB0eXBlIGBBTElZVU46OlNBRTo6SW5ncmVzc2AsIHdoaWNoIGlzIHVzZWQgdG8gY3JlYXRlIGEgcm91dGluZyBydWxlLlxuICogQE5vdGUgVGhpcyBjbGFzcyBtYXkgaGF2ZSBzb21lIG5ldyBmdW5jdGlvbnMgdG8gZmFjaWxpdGF0ZSBkZXZlbG9wbWVudCwgc28gaXQgaXMgcmVjb21tZW5kZWQgdG8gdXNlIHRoaXMgY2xhc3MgaW5zdGVhZCBvZiBgUm9zSW5ncmVzc2Bmb3IgYSBtb3JlIGNvbnZlbmllbnQgZGV2ZWxvcG1lbnQgZXhwZXJpZW5jZS5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvYWxpeXVuLXNhZS1pbmdyZXNzXG4gKi9cbmV4cG9ydCBjbGFzcyBJbmdyZXNzIGV4dGVuZHMgcm9zLlJlc291cmNlIGltcGxlbWVudHMgSUluZ3Jlc3Mge1xuICAgIHByb3RlY3RlZCBzY29wZTogcm9zLkNvbnN0cnVjdDtcbiAgICBwcm90ZWN0ZWQgaWQ6IHN0cmluZztcbiAgICBwdWJsaWMgcmVhZG9ubHkgcHJvcHM6IEluZ3Jlc3NQcm9wcztcbiAgICBwcm90ZWN0ZWQgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6IGJvb2xlYW47XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgSW5ncmVzc0lkOiBUaGUgSUQgb2YgdGhlIHJvdXRpbmcgcnVsZS5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckluZ3Jlc3NJZDogcm9zLklSZXNvbHZhYmxlIHwgc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogUGFyYW0gc2NvcGUgLSBzY29wZSBpbiB3aGljaCB0aGlzIHJlc291cmNlIGlzIGRlZmluZWRcbiAgICAgKiBQYXJhbSBpZCAgICAtIHNjb3BlZCBpZCBvZiB0aGUgcmVzb3VyY2VcbiAgICAgKiBQYXJhbSBwcm9wcyAtIHJlc291cmNlIHByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihzY29wZTogcm9zLkNvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IEluZ3Jlc3NQcm9wcywgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6Ym9vbGVhbiA9IHRydWUpIHtcbiAgICAgICAgc3VwZXIoc2NvcGUsIGlkKTtcbiAgICAgICAgdGhpcy5zY29wZSA9IHNjb3BlO1xuICAgICAgICB0aGlzLmlkID0gaWQ7XG4gICAgICAgIHRoaXMucHJvcHMgPSBwcm9wcztcbiAgICAgICAgdGhpcy5lbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCA9IGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50O1xuXG4gICAgICAgIGNvbnN0IHJvc0luZ3Jlc3MgPSBuZXcgUm9zSW5ncmVzcyh0aGlzLCBpZCwgIHtcbiAgICAgICAgICAgIGRlZmF1bHRSdWxlOiBwcm9wcy5kZWZhdWx0UnVsZSxcbiAgICAgICAgICAgIHNsYklkOiBwcm9wcy5zbGJJZCxcbiAgICAgICAgICAgIGxpc3RlbmVyUG9ydDogcHJvcHMubGlzdGVuZXJQb3J0LFxuICAgICAgICAgICAgZGVzY3JpcHRpb246IHByb3BzLmRlc2NyaXB0aW9uLFxuICAgICAgICAgICAgY2VydElkczogcHJvcHMuY2VydElkcyxcbiAgICAgICAgICAgIGNlcnRJZDogcHJvcHMuY2VydElkLFxuICAgICAgICAgICAgbG9hZEJhbGFuY2VUeXBlOiBwcm9wcy5sb2FkQmFsYW5jZVR5cGUsXG4gICAgICAgICAgICBuYW1lc3BhY2VJZDogcHJvcHMubmFtZXNwYWNlSWQsXG4gICAgICAgICAgICBsaXN0ZW5lclByb3RvY29sOiBwcm9wcy5saXN0ZW5lclByb3RvY29sLFxuICAgICAgICAgICAgcnVsZXM6IHByb3BzLnJ1bGVzLFxuICAgICAgICB9LCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCAmJiB0aGlzLnN0YWNrLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50KTtcbiAgICAgICAgdGhpcy5yZXNvdXJjZSA9IHJvc0luZ3Jlc3M7XG4gICAgICAgIHRoaXMuYXR0ckluZ3Jlc3NJZCA9IHJvc0luZ3Jlc3MuYXR0ckluZ3Jlc3NJZDtcbiAgICB9XG59XG4iXX0=