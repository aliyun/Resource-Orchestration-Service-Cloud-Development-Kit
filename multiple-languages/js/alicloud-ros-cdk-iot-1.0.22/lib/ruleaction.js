"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RuleAction = exports.RuleActionProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const iot_generated_1 = require("./iot.generated");
Object.defineProperty(exports, "RuleActionProperty", { enumerable: true, get: function () { return iot_generated_1.RosRuleAction; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::IOT::RuleAction`, which is used to create a rule action for a specified rule.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosRuleAction`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-iot-ruleaction
 */
class RuleAction extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosRuleAction = new iot_generated_1.RosRuleAction(this, id, {
            errorActionFlag: props.errorActionFlag,
            type: props.type,
            iotInstanceId: props.iotInstanceId,
            configuration: props.configuration,
            ruleId: props.ruleId,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosRuleAction;
        this.attrActionId = rosRuleAction.attrActionId;
    }
}
exports.RuleAction = RuleAction;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicnVsZWFjdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInJ1bGVhY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsOENBQThDO0FBQzlDLG1EQUFnRDtBQUV0QixtR0FGakIsNkJBQWEsT0FFc0I7QUEwRDVDOzs7O0dBSUc7QUFDSCxNQUFhLFVBQVcsU0FBUSxHQUFHLENBQUMsUUFBUTtJQU94Qzs7OztPQUlHO0lBQ0gsWUFBWSxLQUFvQixFQUFFLEVBQVUsRUFBRSxLQUFzQixFQUFFLG1DQUEyQyxJQUFJO1FBQ2pILEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFakIsTUFBTSxhQUFhLEdBQUcsSUFBSSw2QkFBYSxDQUFDLElBQUksRUFBRSxFQUFFLEVBQUc7WUFDL0MsZUFBZSxFQUFFLEtBQUssQ0FBQyxlQUFlO1lBQ3RDLElBQUksRUFBRSxLQUFLLENBQUMsSUFBSTtZQUNoQixhQUFhLEVBQUUsS0FBSyxDQUFDLGFBQWE7WUFDbEMsYUFBYSxFQUFFLEtBQUssQ0FBQyxhQUFhO1lBQ2xDLE1BQU0sRUFBRSxLQUFLLENBQUMsTUFBTTtTQUN2QixFQUFFLGdDQUFnQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztRQUNwRixJQUFJLENBQUMsUUFBUSxHQUFHLGFBQWEsQ0FBQztRQUM5QixJQUFJLENBQUMsWUFBWSxHQUFHLGFBQWEsQ0FBQyxZQUFZLENBQUM7SUFDbkQsQ0FBQztDQUNKO0FBekJELGdDQXlCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHJvcyBmcm9tICdAYWxpY2xvdWQvcm9zLWNkay1jb3JlJztcbmltcG9ydCB7IFJvc1J1bGVBY3Rpb24gfSBmcm9tICcuL2lvdC5nZW5lcmF0ZWQnO1xuLy8gR2VuZXJhdGVkIGZyb20gdGhlIEFsaUNsb3VkIFJPUyBSZXNvdXJjZSBTcGVjaWZpY2F0aW9uXG5leHBvcnQgeyBSb3NSdWxlQWN0aW9uIGFzIFJ1bGVBY3Rpb25Qcm9wZXJ0eSB9O1xuXG4vKipcbiAqIFByb3BlcnRpZXMgZm9yIGRlZmluaW5nIGEgYFJ1bGVBY3Rpb25gLlxuICogU2VlIGh0dHBzOi8vd3d3LmFsaWJhYmFjbG91ZC5jb20vaGVscC9yb3MvZGV2ZWxvcGVyLXJlZmVyZW5jZS9hbGl5dW4taW90LXJ1bGVhY3Rpb25cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBSdWxlQWN0aW9uUHJvcHMge1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgY29uZmlndXJhdGlvbjogVGhlIGNvbmZpZ3VyYXRpb25zIG9mIHRoZSBydWxlIGFjdGlvbi4gWW91IG11c3Qgc3BlY2lmeSBhIEpTT04gc3RyaW5nLiBUaGUgY29uZmlndXJhdGlvbnNcbiAgICAgKiBmb3IgZGlmZmVyZW50IHR5cGVzIG9mIHJ1bGUgYWN0aW9ucyBhcmUgZGlmZmVyZW50LiBGb3IgbW9yZSBpbmZvcm1hdGlvbiBhYm91dCByZXF1aXJlZFxuICAgICAqIHN5bnRheCBhbmQgZXhhbXBsZXMsIHNlZSB0aGUgZm9sbG93aW5nIHRhYmxlcy5cbiAgICAgKi9cbiAgICByZWFkb25seSBjb25maWd1cmF0aW9uOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBydWxlSWQ6IFRoZSBJRCBvZiB0aGUgcnVsZSBmb3Igd2hpY2ggeW91IHdhbnQgdG8gY3JlYXRlIGFuIGFjdGlvbi4gWW91IGNhbiB1c2UgZWl0aGVyIG9mIHRoZVxuICAgICAqIGZvbGxvd2luZyBtZXRob2RzIHRvIHZpZXcgdGhlIHJ1bGUgSUQ6IDEuIExvZyBvbiB0byB0aGUgSW9UIFBsYXRmb3JtIGNvbnNvbGUgYW5kIGNob29zZSBSdWxlcz5EYXRhIEZvcndhcmRpbmcuIDIuIENhbGwgdGhlIExpc3RSdWxlIG9wZXJhdGlvbi5cbiAgICAgKi9cbiAgICByZWFkb25seSBydWxlSWQ6IG51bWJlciB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHR5cGU6IFRoZSB0eXBlIG9mIHRoZSBydWxlIGFjdGlvbi4gVmFsaWQgdmFsdWVzOlxuICAgICAqIE1OUzogZm9yd2FyZHMgZGF0YSBpbiB0aGUgdG9waWNzIHRoYXQgaGF2ZSBiZWVuIHByb2Nlc3NlZCBieSB0aGUgcnVsZSBlbmdpbmUgdG8gTWVzc2FnZVxuICAgICAqIFNlcnZpY2UgKE1OUykgZm9yIG1lc3NhZ2UgdHJhbnNtaXNzaW9uLlxuICAgICAqIEZDOiBmb3J3YXJkcyBkYXRhIGluIHRoZSB0b3BpY3MgdGhhdCBoYXZlIGJlZW4gcHJvY2Vzc2VkIGJ5IHRoZSBydWxlIGVuZ2luZSB0byBGdW5jdGlvblxuICAgICAqIENvbXB1dGUgZm9yIGV2ZW50IGNvbXB1dGluZy5cbiAgICAgKiBSRVBVQkxJU0g6IGZvcndhcmRzIGRhdGEgaW4gdGhlIHRvcGljcyB0aGF0IGhhdmUgYmVlbiBwcm9jZXNzZWQgYnkgdGhlIHJ1bGUgZW5naW5lIHRvIGFub3RoZXJcbiAgICAgKiBJb1QgUGxhdGZvcm0gdG9waWMuXG4gICAgICogQU1RUDogZm9yd2FyZHMgZGF0YSB0byBBTVFQIGNvbnN1bWVyIGdyb3Vwcy5cbiAgICAgKiBPVFM6IGZvcndhcmRzIGRhdGEgaW4gdGhlIHRvcGljcyB0aGF0IGhhdmUgYmVlbiBwcm9jZXNzZWQgYnkgdGhlIHJ1bGUgZW5naW5lIHRvIFRhYmxlXG4gICAgICogU3RvcmUgZm9yIE5vU1FMIGRhdGEgc3RvcmFnZS5cbiAgICAgKiBOb3RlXG4gICAgICogUnVsZXMgb2YgdGhlIGJpbmFyeSBkYXRhIGZvcm1hdCAodGhlIERhdGFUeXBlIHBhcmFtZXRlciBpcyBzZXQgdG9CSU5BUlkpIGRvIG5vdCBzdXBwb3J0IGZvcndhcmRpbmcgZGF0YSB0byBUYWJsZSBTdG9yZS5cbiAgICAgKiBEZXN0aW5hdGlvbiBBbGliYWJhIENsb3VkIHNlcnZpY2VzIHRoYXQgYXJlIHN1cHBvcnRlZCBieSB0aGUgcnVsZSBlbmdpbmUgdmFyeSBiYXNlZFxuICAgICAqIG9uIHJlZ2lvbnMuIEZvciBtb3JlIGluZm9ybWF0aW9uIGFib3V0IHRoZSByZWdpb25zIGFuZCBkZXN0aW5hdGlvbiBjbG91ZCBzZXJ2aWNlc1xuICAgICAqIHRoYXQgYXJlIHN1cHBvcnRlZCBieSB0aGUgcnVsZSBlbmdpbmUsIHNlZSBSZWdpb25zIGFuZCB6b25lcy5cbiAgICAgKi9cbiAgICByZWFkb25seSB0eXBlOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBlcnJvckFjdGlvbkZsYWc6IEluZGljYXRlcyB3aGV0aGVyIHRoZSBydWxlIGFjdGlvbiBmb3J3YXJkZWQgZXJyb3Igb3BlcmF0aW9uIGRhdGEuIEVycm9yIG9wZXJhdGlvblxuICAgICAqIGRhdGEgaW5kaWNhdGVzIHRoYXQgdGhlIHJ1bGUgZW5naW5lIGZhaWxlZCB0byBmb3J3YXJkIGRhdGEgZnJvbSB0aGUgSW9UIFBsYXRmb3JtIHRvcGljXG4gICAgICogdG8gdGhlIGRlc3RpbmF0aW9uIGNsb3VkIHNlcnZpY2UuIEEgZGF0YSBmb3J3YXJkaW5nIGZhaWx1cmUgaW5kaWNhdGVzIHRoYXQgZm9yd2FyZGluZ1xuICAgICAqIHJldHJpZXMgYWxzbyBmYWlsZWQuIFZhbGlkIHZhbHVlczpcbiAgICAgKiB0cnVlOiBmb3J3YXJkcyBlcnJvciBvcGVyYXRpb24gZGF0YS5cbiAgICAgKiBmYWxzZTogZm9yd2FyZHMgbm9ybWFsIGRhdGEgaW5zdGVhZCBvZiBlcnJvciBvcGVyYXRpb24gZGF0YS5cbiAgICAgKiBEZWZhdWx0IHZhbHVlOiBmYWxzZS5cbiAgICAgKi9cbiAgICByZWFkb25seSBlcnJvckFjdGlvbkZsYWc/OiBib29sZWFuIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgaW90SW5zdGFuY2VJZDogVGhlIElEIG9mIHRoZSBpbnN0YW5jZS4gVGhpcyBwYXJhbWV0ZXIgaXMgbm90IHJlcXVpcmVkIGZvciBwdWJsaWMgaW5zdGFuY2VzLiBIb3dldmVyLFxuICAgICAqIHRoZSBwYXJhbWV0ZXIgaXMgcmVxdWlyZWQgZm9yIHRoZSBpbnN0YW5jZXMgdGhhdCB5b3UgaGF2ZSBwdXJjaGFzZWQuXG4gICAgICovXG4gICAgcmVhZG9ubHkgaW90SW5zdGFuY2VJZD86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcbn1cblxuLyoqXG4gKiBUaGlzIGNsYXNzIGVuY2Fwc3VsYXRlcyBhbmQgZXh0ZW5kcyB0aGUgUk9TIHJlc291cmNlIHR5cGUgYEFMSVlVTjo6SU9UOjpSdWxlQWN0aW9uYCwgd2hpY2ggaXMgdXNlZCB0byBjcmVhdGUgYSBydWxlIGFjdGlvbiBmb3IgYSBzcGVjaWZpZWQgcnVsZS5cbiAqIEBOb3RlIFRoaXMgY2xhc3MgbWF5IGhhdmUgc29tZSBuZXcgZnVuY3Rpb25zIHRvIGZhY2lsaXRhdGUgZGV2ZWxvcG1lbnQsIHNvIGl0IGlzIHJlY29tbWVuZGVkIHRvIHVzZSB0aGlzIGNsYXNzIGluc3RlYWQgb2YgYFJvc1J1bGVBY3Rpb25gZm9yIGEgbW9yZSBjb252ZW5pZW50IGRldmVsb3BtZW50IGV4cGVyaWVuY2UuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2FsaXl1bi1pb3QtcnVsZWFjdGlvblxuICovXG5leHBvcnQgY2xhc3MgUnVsZUFjdGlvbiBleHRlbmRzIHJvcy5SZXNvdXJjZSB7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgQWN0aW9uSWQ6IFRoZSBJRCBvZiB0aGUgcnVsZSBhY3Rpb24uXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJBY3Rpb25JZDogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUGFyYW0gc2NvcGUgLSBzY29wZSBpbiB3aGljaCB0aGlzIHJlc291cmNlIGlzIGRlZmluZWRcbiAgICAgKiBQYXJhbSBpZCAgICAtIHNjb3BlZCBpZCBvZiB0aGUgcmVzb3VyY2VcbiAgICAgKiBQYXJhbSBwcm9wcyAtIHJlc291cmNlIHByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihzY29wZTogcm9zLkNvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IFJ1bGVBY3Rpb25Qcm9wcywgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6Ym9vbGVhbiA9IHRydWUpIHtcbiAgICAgICAgc3VwZXIoc2NvcGUsIGlkKTtcblxuICAgICAgICBjb25zdCByb3NSdWxlQWN0aW9uID0gbmV3IFJvc1J1bGVBY3Rpb24odGhpcywgaWQsICB7XG4gICAgICAgICAgICBlcnJvckFjdGlvbkZsYWc6IHByb3BzLmVycm9yQWN0aW9uRmxhZyxcbiAgICAgICAgICAgIHR5cGU6IHByb3BzLnR5cGUsXG4gICAgICAgICAgICBpb3RJbnN0YW5jZUlkOiBwcm9wcy5pb3RJbnN0YW5jZUlkLFxuICAgICAgICAgICAgY29uZmlndXJhdGlvbjogcHJvcHMuY29uZmlndXJhdGlvbixcbiAgICAgICAgICAgIHJ1bGVJZDogcHJvcHMucnVsZUlkLFxuICAgICAgICB9LCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCAmJiB0aGlzLnN0YWNrLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50KTtcbiAgICAgICAgdGhpcy5yZXNvdXJjZSA9IHJvc1J1bGVBY3Rpb247XG4gICAgICAgIHRoaXMuYXR0ckFjdGlvbklkID0gcm9zUnVsZUFjdGlvbi5hdHRyQWN0aW9uSWQ7XG4gICAgfVxufVxuIl19