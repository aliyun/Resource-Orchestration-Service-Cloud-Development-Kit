"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RuleAction = exports.RuleActionProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const iot_generated_1 = require("./iot.generated");
Object.defineProperty(exports, "RuleActionProperty", { enumerable: true, get: function () { return iot_generated_1.RosRuleAction; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::IOT::RuleAction`, which is used to create a rule action for a specified rule.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosRuleAction`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-iot-ruleaction
 */
class RuleAction extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosRuleAction = new iot_generated_1.RosRuleAction(this, id, {
            errorActionFlag: props.errorActionFlag,
            type: props.type,
            iotInstanceId: props.iotInstanceId,
            configuration: props.configuration,
            ruleId: props.ruleId,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosRuleAction;
        this.attrActionId = rosRuleAction.attrActionId;
    }
}
exports.RuleAction = RuleAction;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicnVsZWFjdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInJ1bGVhY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsOENBQThDO0FBQzlDLG1EQUFnRDtBQUV0QixtR0FGakIsNkJBQWEsT0FFc0I7QUFxRTVDOzs7O0dBSUc7QUFDSCxNQUFhLFVBQVcsU0FBUSxHQUFHLENBQUMsUUFBUTtJQVd4Qzs7OztPQUlHO0lBQ0gsWUFBWSxLQUFvQixFQUFFLEVBQVUsRUFBRSxLQUFzQixFQUFFLG1DQUEyQyxJQUFJO1FBQ2pILEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDakIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUM7UUFDYixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsZ0NBQWdDLEdBQUcsZ0NBQWdDLENBQUM7UUFFekUsTUFBTSxhQUFhLEdBQUcsSUFBSSw2QkFBYSxDQUFDLElBQUksRUFBRSxFQUFFLEVBQUc7WUFDL0MsZUFBZSxFQUFFLEtBQUssQ0FBQyxlQUFlO1lBQ3RDLElBQUksRUFBRSxLQUFLLENBQUMsSUFBSTtZQUNoQixhQUFhLEVBQUUsS0FBSyxDQUFDLGFBQWE7WUFDbEMsYUFBYSxFQUFFLEtBQUssQ0FBQyxhQUFhO1lBQ2xDLE1BQU0sRUFBRSxLQUFLLENBQUMsTUFBTTtTQUN2QixFQUFFLGdDQUFnQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztRQUNwRixJQUFJLENBQUMsUUFBUSxHQUFHLGFBQWEsQ0FBQztRQUM5QixJQUFJLENBQUMsWUFBWSxHQUFHLGFBQWEsQ0FBQyxZQUFZLENBQUM7SUFDbkQsQ0FBQztDQUNKO0FBakNELGdDQWlDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHJvcyBmcm9tICdAYWxpY2xvdWQvcm9zLWNkay1jb3JlJztcbmltcG9ydCB7IFJvc1J1bGVBY3Rpb24gfSBmcm9tICcuL2lvdC5nZW5lcmF0ZWQnO1xuLy8gR2VuZXJhdGVkIGZyb20gdGhlIEFsaUNsb3VkIFJPUyBSZXNvdXJjZSBTcGVjaWZpY2F0aW9uXG5leHBvcnQgeyBSb3NSdWxlQWN0aW9uIGFzIFJ1bGVBY3Rpb25Qcm9wZXJ0eSB9O1xuXG4vKipcbiAqIFByb3BlcnRpZXMgZm9yIGRlZmluaW5nIGEgYFJ1bGVBY3Rpb25gLlxuICogU2VlIGh0dHBzOi8vd3d3LmFsaWJhYmFjbG91ZC5jb20vaGVscC9yb3MvZGV2ZWxvcGVyLXJlZmVyZW5jZS9hbGl5dW4taW90LXJ1bGVhY3Rpb25cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBSdWxlQWN0aW9uUHJvcHMge1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgY29uZmlndXJhdGlvbjogVGhlIGNvbmZpZ3VyYXRpb25zIG9mIHRoZSBydWxlIGFjdGlvbi4gWW91IG11c3Qgc3BlY2lmeSBhIEpTT04gc3RyaW5nLiBUaGUgY29uZmlndXJhdGlvbnNcbiAgICAgKiBmb3IgZGlmZmVyZW50IHR5cGVzIG9mIHJ1bGUgYWN0aW9ucyBhcmUgZGlmZmVyZW50LiBGb3IgbW9yZSBpbmZvcm1hdGlvbiBhYm91dCByZXF1aXJlZFxuICAgICAqIHN5bnRheCBhbmQgZXhhbXBsZXMsIHNlZSB0aGUgZm9sbG93aW5nIHRhYmxlcy5cbiAgICAgKi9cbiAgICByZWFkb25seSBjb25maWd1cmF0aW9uOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBydWxlSWQ6IFRoZSBJRCBvZiB0aGUgcnVsZSBmb3Igd2hpY2ggeW91IHdhbnQgdG8gY3JlYXRlIGFuIGFjdGlvbi4gWW91IGNhbiB1c2UgZWl0aGVyIG9mIHRoZVxuICAgICAqIGZvbGxvd2luZyBtZXRob2RzIHRvIHZpZXcgdGhlIHJ1bGUgSUQ6IDEuIExvZyBvbiB0byB0aGUgSW9UIFBsYXRmb3JtIGNvbnNvbGUgYW5kIGNob29zZSBSdWxlcz5EYXRhIEZvcndhcmRpbmcuIDIuIENhbGwgdGhlIExpc3RSdWxlIG9wZXJhdGlvbi5cbiAgICAgKi9cbiAgICByZWFkb25seSBydWxlSWQ6IG51bWJlciB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHR5cGU6IFRoZSB0eXBlIG9mIHRoZSBydWxlIGFjdGlvbi4gVmFsaWQgdmFsdWVzOlxuICAgICAqIE1OUzogZm9yd2FyZHMgZGF0YSBpbiB0aGUgdG9waWNzIHRoYXQgaGF2ZSBiZWVuIHByb2Nlc3NlZCBieSB0aGUgcnVsZSBlbmdpbmUgdG8gTWVzc2FnZVxuICAgICAqIFNlcnZpY2UgKE1OUykgZm9yIG1lc3NhZ2UgdHJhbnNtaXNzaW9uLlxuICAgICAqIEZDOiBmb3J3YXJkcyBkYXRhIGluIHRoZSB0b3BpY3MgdGhhdCBoYXZlIGJlZW4gcHJvY2Vzc2VkIGJ5IHRoZSBydWxlIGVuZ2luZSB0byBGdW5jdGlvblxuICAgICAqIENvbXB1dGUgZm9yIGV2ZW50IGNvbXB1dGluZy5cbiAgICAgKiBSRVBVQkxJU0g6IGZvcndhcmRzIGRhdGEgaW4gdGhlIHRvcGljcyB0aGF0IGhhdmUgYmVlbiBwcm9jZXNzZWQgYnkgdGhlIHJ1bGUgZW5naW5lIHRvIGFub3RoZXJcbiAgICAgKiBJb1QgUGxhdGZvcm0gdG9waWMuXG4gICAgICogQU1RUDogZm9yd2FyZHMgZGF0YSB0byBBTVFQIGNvbnN1bWVyIGdyb3Vwcy5cbiAgICAgKiBPVFM6IGZvcndhcmRzIGRhdGEgaW4gdGhlIHRvcGljcyB0aGF0IGhhdmUgYmVlbiBwcm9jZXNzZWQgYnkgdGhlIHJ1bGUgZW5naW5lIHRvIFRhYmxlXG4gICAgICogU3RvcmUgZm9yIE5vU1FMIGRhdGEgc3RvcmFnZS5cbiAgICAgKiBOb3RlXG4gICAgICogUnVsZXMgb2YgdGhlIGJpbmFyeSBkYXRhIGZvcm1hdCAodGhlIERhdGFUeXBlIHBhcmFtZXRlciBpcyBzZXQgdG9CSU5BUlkpIGRvIG5vdCBzdXBwb3J0IGZvcndhcmRpbmcgZGF0YSB0byBUYWJsZSBTdG9yZS5cbiAgICAgKiBEZXN0aW5hdGlvbiBBbGliYWJhIENsb3VkIHNlcnZpY2VzIHRoYXQgYXJlIHN1cHBvcnRlZCBieSB0aGUgcnVsZSBlbmdpbmUgdmFyeSBiYXNlZFxuICAgICAqIG9uIHJlZ2lvbnMuIEZvciBtb3JlIGluZm9ybWF0aW9uIGFib3V0IHRoZSByZWdpb25zIGFuZCBkZXN0aW5hdGlvbiBjbG91ZCBzZXJ2aWNlc1xuICAgICAqIHRoYXQgYXJlIHN1cHBvcnRlZCBieSB0aGUgcnVsZSBlbmdpbmUsIHNlZSBSZWdpb25zIGFuZCB6b25lcy5cbiAgICAgKi9cbiAgICByZWFkb25seSB0eXBlOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBlcnJvckFjdGlvbkZsYWc6IEluZGljYXRlcyB3aGV0aGVyIHRoZSBydWxlIGFjdGlvbiBmb3J3YXJkZWQgZXJyb3Igb3BlcmF0aW9uIGRhdGEuIEVycm9yIG9wZXJhdGlvblxuICAgICAqIGRhdGEgaW5kaWNhdGVzIHRoYXQgdGhlIHJ1bGUgZW5naW5lIGZhaWxlZCB0byBmb3J3YXJkIGRhdGEgZnJvbSB0aGUgSW9UIFBsYXRmb3JtIHRvcGljXG4gICAgICogdG8gdGhlIGRlc3RpbmF0aW9uIGNsb3VkIHNlcnZpY2UuIEEgZGF0YSBmb3J3YXJkaW5nIGZhaWx1cmUgaW5kaWNhdGVzIHRoYXQgZm9yd2FyZGluZ1xuICAgICAqIHJldHJpZXMgYWxzbyBmYWlsZWQuIFZhbGlkIHZhbHVlczpcbiAgICAgKiB0cnVlOiBmb3J3YXJkcyBlcnJvciBvcGVyYXRpb24gZGF0YS5cbiAgICAgKiBmYWxzZTogZm9yd2FyZHMgbm9ybWFsIGRhdGEgaW5zdGVhZCBvZiBlcnJvciBvcGVyYXRpb24gZGF0YS5cbiAgICAgKiBEZWZhdWx0IHZhbHVlOiBmYWxzZS5cbiAgICAgKi9cbiAgICByZWFkb25seSBlcnJvckFjdGlvbkZsYWc/OiBib29sZWFuIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgaW90SW5zdGFuY2VJZDogVGhlIElEIG9mIHRoZSBpbnN0YW5jZS4gVGhpcyBwYXJhbWV0ZXIgaXMgbm90IHJlcXVpcmVkIGZvciBwdWJsaWMgaW5zdGFuY2VzLiBIb3dldmVyLFxuICAgICAqIHRoZSBwYXJhbWV0ZXIgaXMgcmVxdWlyZWQgZm9yIHRoZSBpbnN0YW5jZXMgdGhhdCB5b3UgaGF2ZSBwdXJjaGFzZWQuXG4gICAgICovXG4gICAgcmVhZG9ubHkgaW90SW5zdGFuY2VJZD86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcbn1cblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgYFJ1bGVBY3Rpb25gLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIElSdWxlQWN0aW9uIGV4dGVuZHMgcm9zLklSZXNvdXJjZSB7XG4gICAgcmVhZG9ubHkgcHJvcHM6IFJ1bGVBY3Rpb25Qcm9wcztcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBBY3Rpb25JZDogVGhlIElEIG9mIHRoZSBydWxlIGFjdGlvbi5cbiAgICAgKi9cbiAgICByZWFkb25seSBhdHRyQWN0aW9uSWQ6IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcbn1cbi8qKlxuICogVGhpcyBjbGFzcyBlbmNhcHN1bGF0ZXMgYW5kIGV4dGVuZHMgdGhlIFJPUyByZXNvdXJjZSB0eXBlIGBBTElZVU46OklPVDo6UnVsZUFjdGlvbmAsIHdoaWNoIGlzIHVzZWQgdG8gY3JlYXRlIGEgcnVsZSBhY3Rpb24gZm9yIGEgc3BlY2lmaWVkIHJ1bGUuXG4gKiBATm90ZSBUaGlzIGNsYXNzIG1heSBoYXZlIHNvbWUgbmV3IGZ1bmN0aW9ucyB0byBmYWNpbGl0YXRlIGRldmVsb3BtZW50LCBzbyBpdCBpcyByZWNvbW1lbmRlZCB0byB1c2UgdGhpcyBjbGFzcyBpbnN0ZWFkIG9mIGBSb3NSdWxlQWN0aW9uYGZvciBhIG1vcmUgY29udmVuaWVudCBkZXZlbG9wbWVudCBleHBlcmllbmNlLlxuICogU2VlIGh0dHBzOi8vd3d3LmFsaWJhYmFjbG91ZC5jb20vaGVscC9yb3MvZGV2ZWxvcGVyLXJlZmVyZW5jZS9hbGl5dW4taW90LXJ1bGVhY3Rpb25cbiAqL1xuZXhwb3J0IGNsYXNzIFJ1bGVBY3Rpb24gZXh0ZW5kcyByb3MuUmVzb3VyY2UgaW1wbGVtZW50cyBJUnVsZUFjdGlvbiB7XG4gICAgcHJvdGVjdGVkIHNjb3BlOiByb3MuQ29uc3RydWN0O1xuICAgIHByb3RlY3RlZCBpZDogc3RyaW5nO1xuICAgIHB1YmxpYyByZWFkb25seSBwcm9wczogUnVsZUFjdGlvblByb3BzO1xuICAgIHByb3RlY3RlZCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBBY3Rpb25JZDogVGhlIElEIG9mIHRoZSBydWxlIGFjdGlvbi5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckFjdGlvbklkOiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBQYXJhbSBzY29wZSAtIHNjb3BlIGluIHdoaWNoIHRoaXMgcmVzb3VyY2UgaXMgZGVmaW5lZFxuICAgICAqIFBhcmFtIGlkICAgIC0gc2NvcGVkIGlkIG9mIHRoZSByZXNvdXJjZVxuICAgICAqIFBhcmFtIHByb3BzIC0gcmVzb3VyY2UgcHJvcGVydGllc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiByb3MuQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogUnVsZUFjdGlvblByb3BzLCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDpib29sZWFuID0gdHJ1ZSkge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQpO1xuICAgICAgICB0aGlzLnNjb3BlID0gc2NvcGU7XG4gICAgICAgIHRoaXMuaWQgPSBpZDtcbiAgICAgICAgdGhpcy5wcm9wcyA9IHByb3BzO1xuICAgICAgICB0aGlzLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ID0gZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ7XG5cbiAgICAgICAgY29uc3Qgcm9zUnVsZUFjdGlvbiA9IG5ldyBSb3NSdWxlQWN0aW9uKHRoaXMsIGlkLCAge1xuICAgICAgICAgICAgZXJyb3JBY3Rpb25GbGFnOiBwcm9wcy5lcnJvckFjdGlvbkZsYWcsXG4gICAgICAgICAgICB0eXBlOiBwcm9wcy50eXBlLFxuICAgICAgICAgICAgaW90SW5zdGFuY2VJZDogcHJvcHMuaW90SW5zdGFuY2VJZCxcbiAgICAgICAgICAgIGNvbmZpZ3VyYXRpb246IHByb3BzLmNvbmZpZ3VyYXRpb24sXG4gICAgICAgICAgICBydWxlSWQ6IHByb3BzLnJ1bGVJZCxcbiAgICAgICAgfSwgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgJiYgdGhpcy5zdGFjay5lbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCk7XG4gICAgICAgIHRoaXMucmVzb3VyY2UgPSByb3NSdWxlQWN0aW9uO1xuICAgICAgICB0aGlzLmF0dHJBY3Rpb25JZCA9IHJvc1J1bGVBY3Rpb24uYXR0ckFjdGlvbklkO1xuICAgIH1cbn1cbiJdfQ==