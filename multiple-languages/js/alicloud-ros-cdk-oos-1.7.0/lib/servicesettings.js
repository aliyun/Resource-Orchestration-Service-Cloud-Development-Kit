"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServiceSettings = exports.ServiceSettingsProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const oos_generated_1 = require("./oos.generated");
Object.defineProperty(exports, "ServiceSettingsProperty", { enumerable: true, get: function () { return oos_generated_1.RosServiceSettings; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::OOS::ServiceSettings`, which is used to configure service settings.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosServiceSettings`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-oos-servicesettings
 */
class ServiceSettings extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props = {}, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosServiceSettings = new oos_generated_1.RosServiceSettings(this, id, {
            deliverySlsEnabled: props.deliverySlsEnabled,
            deliveryOssKeyPrefix: props.deliveryOssKeyPrefix,
            deliveryOssBucketName: props.deliveryOssBucketName,
            deliveryOssEnabled: props.deliveryOssEnabled,
            rdcEnterpriseId: props.rdcEnterpriseId,
            deliverySlsProjectName: props.deliverySlsProjectName,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosServiceSettings;
    }
}
exports.ServiceSettings = ServiceSettings;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmljZXNldHRpbmdzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic2VydmljZXNldHRpbmdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDhDQUE4QztBQUM5QyxtREFBcUQ7QUFFdEIsd0dBRnRCLGtDQUFrQixPQUUyQjtBQTZDdEQ7Ozs7R0FJRztBQUNILE1BQWEsZUFBZ0IsU0FBUSxHQUFHLENBQUMsUUFBUTtJQU03Qzs7OztPQUlHO0lBQ0gsWUFBWSxLQUFvQixFQUFFLEVBQVUsRUFBRSxRQUE4QixFQUFFLEVBQUUsbUNBQTJDLElBQUk7UUFDM0gsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNqQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUNiLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxnQ0FBZ0MsR0FBRyxnQ0FBZ0MsQ0FBQztRQUV6RSxNQUFNLGtCQUFrQixHQUFHLElBQUksa0NBQWtCLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRztZQUN6RCxrQkFBa0IsRUFBRSxLQUFLLENBQUMsa0JBQWtCO1lBQzVDLG9CQUFvQixFQUFFLEtBQUssQ0FBQyxvQkFBb0I7WUFDaEQscUJBQXFCLEVBQUUsS0FBSyxDQUFDLHFCQUFxQjtZQUNsRCxrQkFBa0IsRUFBRSxLQUFLLENBQUMsa0JBQWtCO1lBQzVDLGVBQWUsRUFBRSxLQUFLLENBQUMsZUFBZTtZQUN0QyxzQkFBc0IsRUFBRSxLQUFLLENBQUMsc0JBQXNCO1NBQ3ZELEVBQUUsZ0NBQWdDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO1FBQ3BGLElBQUksQ0FBQyxRQUFRLEdBQUcsa0JBQWtCLENBQUM7SUFDdkMsQ0FBQztDQUNKO0FBNUJELDBDQTRCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHJvcyBmcm9tICdAYWxpY2xvdWQvcm9zLWNkay1jb3JlJztcbmltcG9ydCB7IFJvc1NlcnZpY2VTZXR0aW5ncyB9IGZyb20gJy4vb29zLmdlbmVyYXRlZCc7XG4vLyBHZW5lcmF0ZWQgZnJvbSB0aGUgQWxpQ2xvdWQgUk9TIFJlc291cmNlIFNwZWNpZmljYXRpb25cbmV4cG9ydCB7IFJvc1NlcnZpY2VTZXR0aW5ncyBhcyBTZXJ2aWNlU2V0dGluZ3NQcm9wZXJ0eSB9O1xuXG4vKipcbiAqIFByb3BlcnRpZXMgZm9yIGRlZmluaW5nIGEgYFNlcnZpY2VTZXR0aW5nc2AuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2FsaXl1bi1vb3Mtc2VydmljZXNldHRpbmdzXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgU2VydmljZVNldHRpbmdzUHJvcHMge1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgZGVsaXZlcnlPc3NCdWNrZXROYW1lOiBPU1MgYnVja2V0IG5hbWUuXG4gICAgICovXG4gICAgcmVhZG9ubHkgZGVsaXZlcnlPc3NCdWNrZXROYW1lPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgZGVsaXZlcnlPc3NFbmFibGVkOiBXaGV0aGVyIHRvIGVuYWJsZSB0aGUgT1NTIGRlbGl2ZXJ5IHRlbXBsYXRlIGV4ZWN1dGlvbiBsb2dnaW5nIGZlYXR1cmUuIERlZmF1bHRzIHRvIGZhbHNlLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGRlbGl2ZXJ5T3NzRW5hYmxlZD86IGJvb2xlYW4gfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBkZWxpdmVyeU9zc0tleVByZWZpeDogT1NTIHN0b3JhZ2Ugc3BhY2UgZGlyZWN0b3J5LCBzdWNoIGFzIFwib29zXFwvZXhlY3V0aW9uXCIsIHBhc3MgXCJcIiB0byBpbmRpY2F0ZSB0aGF0IG5vIGRpcmVjdG9yeSBpcyBuZWVkZWQsIGlmIHNldCBiZWZvcmUgc2V0IGFnYWluIGRvIG5vdCBuZWVkIGRpcmVjdG9yeSBjYW4gYmUgY2xlYXJlZCBieSBwYXNzaW5nIFwiXCIuXG4gICAgICovXG4gICAgcmVhZG9ubHkgZGVsaXZlcnlPc3NLZXlQcmVmaXg/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBkZWxpdmVyeVNsc0VuYWJsZWQ6IFdoZXRoZXIgdG8gZW5hYmxlIHRoZSBTTFMgZGVsaXZlcnkgdGVtcGxhdGUgZXhlY3V0aW9uIGxvZ2dpbmcgZmVhdHVyZS4gRGVmYXVsdHMgdG8gZmFsc2UuXG4gICAgICovXG4gICAgcmVhZG9ubHkgZGVsaXZlcnlTbHNFbmFibGVkPzogYm9vbGVhbiB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGRlbGl2ZXJ5U2xzUHJvamVjdE5hbWU6IFNMUyBwcm9qZWN0IG5hbWUuXG4gICAgICovXG4gICAgcmVhZG9ubHkgZGVsaXZlcnlTbHNQcm9qZWN0TmFtZT86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHJkY0VudGVycHJpc2VJZDogRW50ZXJwcmlzZSBJRC5cbiAgICAgKi9cbiAgICByZWFkb25seSByZGNFbnRlcnByaXNlSWQ/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG59XG5cbi8qKlxuICogUmVwcmVzZW50cyBhIGBTZXJ2aWNlU2V0dGluZ3NgLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIElTZXJ2aWNlU2V0dGluZ3MgZXh0ZW5kcyByb3MuSVJlc291cmNlIHtcbiAgICByZWFkb25seSBwcm9wczogU2VydmljZVNldHRpbmdzUHJvcHM7XG59XG4vKipcbiAqIFRoaXMgY2xhc3MgZW5jYXBzdWxhdGVzIGFuZCBleHRlbmRzIHRoZSBST1MgcmVzb3VyY2UgdHlwZSBgQUxJWVVOOjpPT1M6OlNlcnZpY2VTZXR0aW5nc2AsIHdoaWNoIGlzIHVzZWQgdG8gY29uZmlndXJlIHNlcnZpY2Ugc2V0dGluZ3MuXG4gKiBATm90ZSBUaGlzIGNsYXNzIG1heSBoYXZlIHNvbWUgbmV3IGZ1bmN0aW9ucyB0byBmYWNpbGl0YXRlIGRldmVsb3BtZW50LCBzbyBpdCBpcyByZWNvbW1lbmRlZCB0byB1c2UgdGhpcyBjbGFzcyBpbnN0ZWFkIG9mIGBSb3NTZXJ2aWNlU2V0dGluZ3NgZm9yIGEgbW9yZSBjb252ZW5pZW50IGRldmVsb3BtZW50IGV4cGVyaWVuY2UuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2FsaXl1bi1vb3Mtc2VydmljZXNldHRpbmdzXG4gKi9cbmV4cG9ydCBjbGFzcyBTZXJ2aWNlU2V0dGluZ3MgZXh0ZW5kcyByb3MuUmVzb3VyY2UgaW1wbGVtZW50cyBJU2VydmljZVNldHRpbmdzIHtcbiAgICBwcm90ZWN0ZWQgc2NvcGU6IHJvcy5Db25zdHJ1Y3Q7XG4gICAgcHJvdGVjdGVkIGlkOiBzdHJpbmc7XG4gICAgcHVibGljIHJlYWRvbmx5IHByb3BzOiBTZXJ2aWNlU2V0dGluZ3NQcm9wcztcbiAgICBwcm90ZWN0ZWQgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6IGJvb2xlYW47XG5cbiAgICAvKipcbiAgICAgKiBQYXJhbSBzY29wZSAtIHNjb3BlIGluIHdoaWNoIHRoaXMgcmVzb3VyY2UgaXMgZGVmaW5lZFxuICAgICAqIFBhcmFtIGlkICAgIC0gc2NvcGVkIGlkIG9mIHRoZSByZXNvdXJjZVxuICAgICAqIFBhcmFtIHByb3BzIC0gcmVzb3VyY2UgcHJvcGVydGllc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiByb3MuQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogU2VydmljZVNldHRpbmdzUHJvcHMgPSB7fSwgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6Ym9vbGVhbiA9IHRydWUpIHtcbiAgICAgICAgc3VwZXIoc2NvcGUsIGlkKTtcbiAgICAgICAgdGhpcy5zY29wZSA9IHNjb3BlO1xuICAgICAgICB0aGlzLmlkID0gaWQ7XG4gICAgICAgIHRoaXMucHJvcHMgPSBwcm9wcztcbiAgICAgICAgdGhpcy5lbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCA9IGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50O1xuXG4gICAgICAgIGNvbnN0IHJvc1NlcnZpY2VTZXR0aW5ncyA9IG5ldyBSb3NTZXJ2aWNlU2V0dGluZ3ModGhpcywgaWQsICB7XG4gICAgICAgICAgICBkZWxpdmVyeVNsc0VuYWJsZWQ6IHByb3BzLmRlbGl2ZXJ5U2xzRW5hYmxlZCxcbiAgICAgICAgICAgIGRlbGl2ZXJ5T3NzS2V5UHJlZml4OiBwcm9wcy5kZWxpdmVyeU9zc0tleVByZWZpeCxcbiAgICAgICAgICAgIGRlbGl2ZXJ5T3NzQnVja2V0TmFtZTogcHJvcHMuZGVsaXZlcnlPc3NCdWNrZXROYW1lLFxuICAgICAgICAgICAgZGVsaXZlcnlPc3NFbmFibGVkOiBwcm9wcy5kZWxpdmVyeU9zc0VuYWJsZWQsXG4gICAgICAgICAgICByZGNFbnRlcnByaXNlSWQ6IHByb3BzLnJkY0VudGVycHJpc2VJZCxcbiAgICAgICAgICAgIGRlbGl2ZXJ5U2xzUHJvamVjdE5hbWU6IHByb3BzLmRlbGl2ZXJ5U2xzUHJvamVjdE5hbWUsXG4gICAgICAgIH0sIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ICYmIHRoaXMuc3RhY2suZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQpO1xuICAgICAgICB0aGlzLnJlc291cmNlID0gcm9zU2VydmljZVNldHRpbmdzO1xuICAgIH1cbn1cbiJdfQ==