"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VpcFirewallControlPolicy = exports.VpcFirewallControlPolicyProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const cloudfw_generated_1 = require("./cloudfw.generated");
Object.defineProperty(exports, "VpcFirewallControlPolicyProperty", { enumerable: true, get: function () { return cloudfw_generated_1.RosVpcFirewallControlPolicy; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::CLOUDFW::VpcFirewallControlPolicy`, which is used to add an access control policy to a specified policy group for a Virtual Private Cloud (VPC) firewall.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosVpcFirewallControlPolicy`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-cloudfw-vpcfirewallcontrolpolicy
 */
class VpcFirewallControlPolicy extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosVpcFirewallControlPolicy = new cloudfw_generated_1.RosVpcFirewallControlPolicy(this, id, {
            destination: props.destination,
            applicationName: props.applicationName,
            description: props.description,
            sourceType: props.sourceType,
            destPort: props.destPort,
            aclAction: props.aclAction,
            lang: props.lang,
            destinationType: props.destinationType,
            vpcFirewallId: props.vpcFirewallId,
            source: props.source,
            destPortType: props.destPortType,
            proto: props.proto,
            regionId: props.regionId === undefined || props.regionId === null ? 'cn-hangzhou' : props.regionId,
            newOrder: props.newOrder,
            destPortGroup: props.destPortGroup,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosVpcFirewallControlPolicy;
        this.attrAclUuid = rosVpcFirewallControlPolicy.attrAclUuid;
    }
}
exports.VpcFirewallControlPolicy = VpcFirewallControlPolicy;
//# sourceMappingURL=data:application/json;base64,