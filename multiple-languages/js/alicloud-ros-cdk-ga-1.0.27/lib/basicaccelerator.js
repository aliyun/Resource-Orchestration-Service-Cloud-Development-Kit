"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BasicAccelerator = exports.BasicAcceleratorProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ga_generated_1 = require("./ga.generated");
Object.defineProperty(exports, "BasicAcceleratorProperty", { enumerable: true, get: function () { return ga_generated_1.RosBasicAccelerator; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::GA::BasicAccelerator`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosBasicAccelerator`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-ga-basicaccelerator
 */
class BasicAccelerator extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props = {}, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosBasicAccelerator = new ga_generated_1.RosBasicAccelerator(this, id, {
            bandwidthBillingType: props.bandwidthBillingType,
            resourceGroupId: props.resourceGroupId,
            autoUseCoupon: props.autoUseCoupon,
            promotionOptionNo: props.promotionOptionNo,
            pricingCycle: props.pricingCycle,
            chargeType: props.chargeType,
            autoRenew: props.autoRenew,
            duration: props.duration,
            autoPay: props.autoPay,
            tags: props.tags,
            autoRenewDuration: props.autoRenewDuration,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosBasicAccelerator;
        this.attrAcceleratorId = rosBasicAccelerator.attrAcceleratorId;
    }
}
exports.BasicAccelerator = BasicAccelerator;
//# sourceMappingURL=data:application/json;base64,