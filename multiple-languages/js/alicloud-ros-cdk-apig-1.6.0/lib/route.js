"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Route = exports.RouteProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const apig_generated_1 = require("./apig.generated");
Object.defineProperty(exports, "RouteProperty", { enumerable: true, get: function () { return apig_generated_1.RosRoute; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::APIG::Route`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosRoute`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-apig-route
 */
class Route extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosRoute = new apig_generated_1.RosRoute(this, id, {
            backend: props.backend,
            description: props.description,
            environmentInfo: props.environmentInfo,
            routeName: props.routeName,
            domainInfos: props.domainInfos,
            httpApiId: props.httpApiId,
            domainIds: props.domainIds,
            match: props.match,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosRoute;
        this.attrBackend = rosRoute.attrBackend;
        this.attrDescription = rosRoute.attrDescription;
        this.attrDomainInfos = rosRoute.attrDomainInfos;
        this.attrEnvironmentInfo = rosRoute.attrEnvironmentInfo;
        this.attrMatch = rosRoute.attrMatch;
        this.attrRouteId = rosRoute.attrRouteId;
        this.attrRouteName = rosRoute.attrRouteName;
    }
}
exports.Route = Route;
//# sourceMappingURL=data:application/json;base64,