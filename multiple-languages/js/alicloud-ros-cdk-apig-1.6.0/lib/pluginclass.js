"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PluginClass = exports.PluginClassProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const apig_generated_1 = require("./apig.generated");
Object.defineProperty(exports, "PluginClassProperty", { enumerable: true, get: function () { return apig_generated_1.RosPluginClass; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::APIG::PluginClass`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosPluginClass`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-apig-pluginclass
 */
class PluginClass extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosPluginClass = new apig_generated_1.RosPluginClass(this, id, {
            wasmUrl: props.wasmUrl,
            versionDescription: props.versionDescription,
            description: props.description,
            pluginClassName: props.pluginClassName,
            version: props.version,
            alias: props.alias,
            executePriority: props.executePriority,
            supportedMinGatewayVersion: props.supportedMinGatewayVersion,
            wasmLanguage: props.wasmLanguage,
            executeStage: props.executeStage,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosPluginClass;
        this.attrAlias = rosPluginClass.attrAlias;
        this.attrDescription = rosPluginClass.attrDescription;
        this.attrDocument = rosPluginClass.attrDocument;
        this.attrPluginClassName = rosPluginClass.attrPluginClassName;
        this.attrType = rosPluginClass.attrType;
        this.attrWasmLanguage = rosPluginClass.attrWasmLanguage;
    }
}
exports.PluginClass = PluginClass;
//# sourceMappingURL=data:application/json;base64,