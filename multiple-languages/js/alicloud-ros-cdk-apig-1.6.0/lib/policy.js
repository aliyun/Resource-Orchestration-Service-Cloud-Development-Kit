"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Policy = exports.PolicyProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const apig_generated_1 = require("./apig.generated");
Object.defineProperty(exports, "PolicyProperty", { enumerable: true, get: function () { return apig_generated_1.RosPolicy; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::APIG::Policy`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosPolicy`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-apig-policy
 */
class Policy extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosPolicy = new apig_generated_1.RosPolicy(this, id, {
            attachResourceIds: props.attachResourceIds,
            policyConfig: props.policyConfig,
            environmentId: props.environmentId,
            policyClassName: props.policyClassName,
            policyName: props.policyName,
            gatewayId: props.gatewayId,
            attachResourceType: props.attachResourceType,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosPolicy;
        this.attrPolicyClassId = rosPolicy.attrPolicyClassId;
        this.attrPolicyClassName = rosPolicy.attrPolicyClassName;
        this.attrPolicyConfig = rosPolicy.attrPolicyConfig;
        this.attrPolicyId = rosPolicy.attrPolicyId;
        this.attrPolicyName = rosPolicy.attrPolicyName;
    }
}
exports.Policy = Policy;
//# sourceMappingURL=data:application/json;base64,