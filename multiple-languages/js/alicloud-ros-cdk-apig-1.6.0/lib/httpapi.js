"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HttpApi = exports.HttpApiProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const apig_generated_1 = require("./apig.generated");
Object.defineProperty(exports, "HttpApiProperty", { enumerable: true, get: function () { return apig_generated_1.RosHttpApi; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::APIG::HttpApi`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosHttpApi`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-apig-httpapi
 */
class HttpApi extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosHttpApi = new apig_generated_1.RosHttpApi(this, id, {
            httpApiName: props.httpApiName,
            type: props.type,
            protocols: props.protocols,
            description: props.description,
            basePath: props.basePath,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosHttpApi;
        this.attrBasePath = rosHttpApi.attrBasePath;
        this.attrDescription = rosHttpApi.attrDescription;
        this.attrEnvironments = rosHttpApi.attrEnvironments;
        this.attrHttpApiId = rosHttpApi.attrHttpApiId;
        this.attrHttpApiName = rosHttpApi.attrHttpApiName;
        this.attrProtocols = rosHttpApi.attrProtocols;
        this.attrType = rosHttpApi.attrType;
    }
}
exports.HttpApi = HttpApi;
//# sourceMappingURL=data:application/json;base64,