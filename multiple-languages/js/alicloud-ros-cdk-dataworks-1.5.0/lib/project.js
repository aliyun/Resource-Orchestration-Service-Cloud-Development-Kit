"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Project = exports.ProjectProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const dataworks_generated_1 = require("./dataworks.generated");
Object.defineProperty(exports, "ProjectProperty", { enumerable: true, get: function () { return dataworks_generated_1.RosProject; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::DataWorks::Project`, which is used to create a DataWorks workspace.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosProject`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-dataworks-project
 */
class Project extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosProject = new dataworks_generated_1.RosProject(this, id, {
            projectIdentifier: props.projectIdentifier,
            resourceGroupId: props.resourceGroupId,
            projectName: props.projectName,
            isAllowDownload: props.isAllowDownload,
            projectDescription: props.projectDescription,
            projectMode: props.projectMode,
            tags: props.tags,
            disableDevelopment: props.disableDevelopment,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosProject;
        this.attrEnvTypes = rosProject.attrEnvTypes;
        this.attrIsDefault = rosProject.attrIsDefault;
        this.attrProjectId = rosProject.attrProjectId;
        this.attrProjectIdentifier = rosProject.attrProjectIdentifier;
        this.attrProtectedMode = rosProject.attrProtectedMode;
        this.attrResidentArea = rosProject.attrResidentArea;
        this.attrSchedulerMaxRetryTimes = rosProject.attrSchedulerMaxRetryTimes;
        this.attrSchedulerRetryInterval = rosProject.attrSchedulerRetryInterval;
        this.attrTablePrivacyMode = rosProject.attrTablePrivacyMode;
    }
}
exports.Project = Project;
//# sourceMappingURL=data:application/json;base64,