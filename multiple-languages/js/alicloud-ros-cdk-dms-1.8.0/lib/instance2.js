"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Instance2 = exports.Instance2Property = void 0;
const ros = require("@alicloud/ros-cdk-core");
const dms_generated_1 = require("./dms.generated");
Object.defineProperty(exports, "Instance2Property", { enumerable: true, get: function () { return dms_generated_1.RosInstance2; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::DMS::Instance2`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosInstance2`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-dms-instance2
 */
class Instance2 extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosInstance2 = new dms_generated_1.RosInstance2(this, id, {
            databasePassword: props.databasePassword,
            port: props.port,
            safeRule: props.safeRule,
            exportTimeout: props.exportTimeout,
            envType: props.envType,
            dbaId: props.dbaId,
            ecsRegion: props.ecsRegion,
            instanceAlias: props.instanceAlias,
            networkType: props.networkType,
            enableSellTrust: props.enableSellTrust,
            instanceType: props.instanceType,
            enableSellSitd: props.enableSellSitd,
            dataLinkName: props.dataLinkName,
            queryTimeout: props.queryTimeout,
            templateId: props.templateId,
            instanceSource: props.instanceSource,
            enableSellStable: props.enableSellStable,
            skipTest: props.skipTest,
            host: props.host,
            enableSellCommon: props.enableSellCommon,
            useSsl: props.useSsl,
            templateType: props.templateType,
            ddlOnline: props.ddlOnline,
            tid: props.tid,
            sid: props.sid,
            useDsql: props.useDsql,
            ecsInstanceId: props.ecsInstanceId,
            vpcId: props.vpcId,
            databaseUser: props.databaseUser,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosInstance2;
        this.attrHost = rosInstance2.attrHost;
        this.attrInstanceId = rosInstance2.attrInstanceId;
        this.attrPort = rosInstance2.attrPort;
    }
}
exports.Instance2 = Instance2;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5zdGFuY2UyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiaW5zdGFuY2UyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDhDQUE4QztBQUM5QyxtREFBK0M7QUFFdEIsa0dBRmhCLDRCQUFZLE9BRXFCO0FBME4xQzs7OztHQUlHO0FBQ0gsTUFBYSxTQUFVLFNBQVEsR0FBRyxDQUFDLFFBQVE7SUFxQnZDOzs7O09BSUc7SUFDSCxZQUFZLEtBQW9CLEVBQUUsRUFBVSxFQUFFLEtBQXFCLEVBQUUsbUNBQTJDLElBQUk7UUFDaEgsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNqQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUNiLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxnQ0FBZ0MsR0FBRyxnQ0FBZ0MsQ0FBQztRQUV6RSxNQUFNLFlBQVksR0FBRyxJQUFJLDRCQUFZLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRztZQUM3QyxnQkFBZ0IsRUFBRSxLQUFLLENBQUMsZ0JBQWdCO1lBQ3hDLElBQUksRUFBRSxLQUFLLENBQUMsSUFBSTtZQUNoQixRQUFRLEVBQUUsS0FBSyxDQUFDLFFBQVE7WUFDeEIsYUFBYSxFQUFFLEtBQUssQ0FBQyxhQUFhO1lBQ2xDLE9BQU8sRUFBRSxLQUFLLENBQUMsT0FBTztZQUN0QixLQUFLLEVBQUUsS0FBSyxDQUFDLEtBQUs7WUFDbEIsU0FBUyxFQUFFLEtBQUssQ0FBQyxTQUFTO1lBQzFCLGFBQWEsRUFBRSxLQUFLLENBQUMsYUFBYTtZQUNsQyxXQUFXLEVBQUUsS0FBSyxDQUFDLFdBQVc7WUFDOUIsZUFBZSxFQUFFLEtBQUssQ0FBQyxlQUFlO1lBQ3RDLFlBQVksRUFBRSxLQUFLLENBQUMsWUFBWTtZQUNoQyxjQUFjLEVBQUUsS0FBSyxDQUFDLGNBQWM7WUFDcEMsWUFBWSxFQUFFLEtBQUssQ0FBQyxZQUFZO1lBQ2hDLFlBQVksRUFBRSxLQUFLLENBQUMsWUFBWTtZQUNoQyxVQUFVLEVBQUUsS0FBSyxDQUFDLFVBQVU7WUFDNUIsY0FBYyxFQUFFLEtBQUssQ0FBQyxjQUFjO1lBQ3BDLGdCQUFnQixFQUFFLEtBQUssQ0FBQyxnQkFBZ0I7WUFDeEMsUUFBUSxFQUFFLEtBQUssQ0FBQyxRQUFRO1lBQ3hCLElBQUksRUFBRSxLQUFLLENBQUMsSUFBSTtZQUNoQixnQkFBZ0IsRUFBRSxLQUFLLENBQUMsZ0JBQWdCO1lBQ3hDLE1BQU0sRUFBRSxLQUFLLENBQUMsTUFBTTtZQUNwQixZQUFZLEVBQUUsS0FBSyxDQUFDLFlBQVk7WUFDaEMsU0FBUyxFQUFFLEtBQUssQ0FBQyxTQUFTO1lBQzFCLEdBQUcsRUFBRSxLQUFLLENBQUMsR0FBRztZQUNkLEdBQUcsRUFBRSxLQUFLLENBQUMsR0FBRztZQUNkLE9BQU8sRUFBRSxLQUFLLENBQUMsT0FBTztZQUN0QixhQUFhLEVBQUUsS0FBSyxDQUFDLGFBQWE7WUFDbEMsS0FBSyxFQUFFLEtBQUssQ0FBQyxLQUFLO1lBQ2xCLFlBQVksRUFBRSxLQUFLLENBQUMsWUFBWTtTQUNuQyxFQUFFLGdDQUFnQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztRQUNwRixJQUFJLENBQUMsUUFBUSxHQUFHLFlBQVksQ0FBQztRQUM3QixJQUFJLENBQUMsUUFBUSxHQUFHLFlBQVksQ0FBQyxRQUFRLENBQUM7UUFDdEMsSUFBSSxDQUFDLGNBQWMsR0FBRyxZQUFZLENBQUMsY0FBYyxDQUFDO1FBQ2xELElBQUksQ0FBQyxRQUFRLEdBQUcsWUFBWSxDQUFDLFFBQVEsQ0FBQztJQUMxQyxDQUFDO0NBQ0o7QUFyRUQsOEJBcUVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcm9zIGZyb20gJ0BhbGljbG91ZC9yb3MtY2RrLWNvcmUnO1xuaW1wb3J0IHsgUm9zSW5zdGFuY2UyIH0gZnJvbSAnLi9kbXMuZ2VuZXJhdGVkJztcbi8vIEdlbmVyYXRlZCBmcm9tIHRoZSBBbGlDbG91ZCBST1MgUmVzb3VyY2UgU3BlY2lmaWNhdGlvblxuZXhwb3J0IHsgUm9zSW5zdGFuY2UyIGFzIEluc3RhbmNlMlByb3BlcnR5IH07XG5cbi8qKlxuICogUHJvcGVydGllcyBmb3IgZGVmaW5pbmcgYSBgSW5zdGFuY2UyYC5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvYWxpeXVuLWRtcy1pbnN0YW5jZTJcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJbnN0YW5jZTJQcm9wcyB7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBkYXRhYmFzZVBhc3N3b3JkOiBUaGUgbG9nb24gcGFzc3dvcmQgb2YgdGhlIGRhdGFiYXNlIGluc3RhbmNlLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGRhdGFiYXNlUGFzc3dvcmQ6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGRhdGFiYXNlVXNlcjogVGhlIGxvZ29uIHVzZXJuYW1lIG9mIHRoZSBkYXRhYmFzZSBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICByZWFkb25seSBkYXRhYmFzZVVzZXI6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGRiYUlkOiBUaGUgdXNlciBJRCBvZiB0aGUgaW5zdGFuY2UgREJBIHJvbGUuIFlvdSBjYW4gY2FsbCB0aGUgTGlzdFVzZXJzIG9yIEdldEluc3RhbmNlIG9wZXJhdGlvbiB0byBvYnRhaW4gdGhlIHZhbHVlIG9mIHRoaXMgcGFyYW1ldGVyLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGRiYUlkOiBudW1iZXIgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBlbmFibGVTZWxsVHJ1c3Q6IFdoZXRoZXIgdGhlIGluc3RhbmNlIG5lZWRzIHRvIGVuYWJsZSBzZWN1cmUgaG9zdGluZy5cbiAgICAgKiAtIFk6IEVuYWJsZSBzZWN1cmUgaG9zdGluZyBtb2RlLlxuICAgICAqIC0gTlVMTCBvciBvdGhlcjogRG8gbm90IGVuYWJsZSBzZWN1cmUgaG9zdGluZyBtb2RlLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGVuYWJsZVNlbGxUcnVzdDogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgZW52VHlwZTogVGhlIHR5cGUgb2YgdGhlIGVudmlyb25tZW50IHRvIHdoaWNoIHRoZSBkYXRhYmFzZSBpbnN0YW5jZSBiZWxvbmdzLiBWYWxpZCB2YWx1ZXM6XG4gICAgICogcHJvZHVjdDogdGhlIHByb2R1Y3Rpb24gZW52aXJvbm1lbnQuXG4gICAgICogZGV2OiB0aGUgdGVzdCBlbnZpcm9ubWVudC5cbiAgICAgKi9cbiAgICByZWFkb25seSBlbnZUeXBlOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBleHBvcnRUaW1lb3V0OiBUaGUgdGltZW91dCBwZXJpb2QgZm9yIGV4cG9ydGluZyB0aGUgZGF0YWJhc2UgaW5zdGFuY2UuIFVuaXQ6IHNlY29uZHMuXG4gICAgICovXG4gICAgcmVhZG9ubHkgZXhwb3J0VGltZW91dDogbnVtYmVyIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgaG9zdDogVGhlIGVuZHBvaW50IG9mIHRoZSBkYXRhYmFzZSBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICByZWFkb25seSBob3N0OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBpbnN0YW5jZUFsaWFzOiBUaGUgYWxpYXMgb2YgdGhlIGRhdGFiYXNlIGluc3RhbmNlLiBUaGUgYWxpYXMgaGVscHMgeW91IHF1aWNrbHkgZmluZCB0aGUgcmVxdWlyZWRcbiAgICAgKiBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICByZWFkb25seSBpbnN0YW5jZUFsaWFzOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBpbnN0YW5jZVNvdXJjZTogVGhlIHNvdXJjZSBvZiB0aGUgZGF0YWJhc2UgaW5zdGFuY2UuIFZhbGlkIHZhbHVlczpcbiAgICAgKiBQVUJMSUNfT1dOOiBhbiBvbi1wcmVtaXNlcyBkYXRhYmFzZSBidWlsdCBvbiB0aGUgcHVibGljIG5ldHdvcmsuXG4gICAgICogUkRTOiBhbiBBcHNhcmFEQiBmb3IgUkRTIChSRFMpIGluc3RhbmNlLlxuICAgICAqIEVDU19PV046IGFuIG9uLXByZW1pc2VzIGRhdGFiYXNlIGJ1aWx0IG9uIGFuIEVsYXN0aWMgQ29tcHV0ZSBTZXJ2aWNlIChFQ1MpIGluc3RhbmNlLlxuICAgICAqIFZQQ19JREM6IGFuIG9uLXByZW1pc2VzIGRhdGFiYXNlIGJ1aWx0IGluIGFuIEludGVybmV0IGRhdGEgY2VudGVyIChJREMpIGluIFZpcnR1YWwgUHJpdmF0ZVxuICAgICAqIENsb3VkIChWUEMpLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGluc3RhbmNlU291cmNlOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBpbnN0YW5jZVR5cGU6IFRoZSB0eXBlIG9mIHRoZSBkYXRhYmFzZSBpbnN0YW5jZS4gVmFsaWQgdmFsdWVzOiBNeVNRTCwgU1FMU2VydmVyLCBQb3N0Z3JlU1FMLCBPcmFjbGUsIERSRFMsIE9jZWFuQmFzZSwgTW9uZ28sIFJlZGlzXG4gICAgICovXG4gICAgcmVhZG9ubHkgaW5zdGFuY2VUeXBlOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBuZXR3b3JrVHlwZTogVGhlIG5ldHdvcmsgdHlwZSBvZiB0aGUgZGF0YWJhc2UgaW5zdGFuY2UuIFZhbGlkIHZhbHVlczpcbiAgICAgKiBDTEFTU0lDXG4gICAgICogVlBDXG4gICAgICovXG4gICAgcmVhZG9ubHkgbmV0d29ya1R5cGU6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHBvcnQ6IFRoZSBjb25uZWN0aW9uIHBvcnQgb2YgdGhlIGRhdGFiYXNlIGluc3RhbmNlLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHBvcnQ6IG51bWJlciB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHF1ZXJ5VGltZW91dDogVGhlIHRpbWVvdXQgcGVyaW9kIGZvciBxdWVyeWluZyB0aGUgZGF0YWJhc2UgaW5zdGFuY2UuIFVuaXQ6IHNlY29uZHMuXG4gICAgICovXG4gICAgcmVhZG9ubHkgcXVlcnlUaW1lb3V0OiBudW1iZXIgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBzYWZlUnVsZTogVGhlIHNlY3VyaXR5IHJ1bGUgb2YgdGhlIGRhdGFiYXNlIGluc3RhbmNlLiBFbnRlciB0aGUgbmFtZSBvZiB0aGUgc2VjdXJpdHkgcnVsZSBmb3JcbiAgICAgKiB5b3VyIGVudGVycHJpc2UuXG4gICAgICogTm90ZSBUbyBxdWVyeSBhIHNwZWNpZmllZCBzZWN1cml0eSBydWxlLCBsb2cgb24gdG8gdGhlIERNUyBFbnRlcnByaXNlIGNvbnNvbGUgYW5kIGNob29zZVxuICAgICAqIFN5c3RlbSBNYW5hZ2VtZW50ID4gU2VjdXJpdHkgUnVsZXMuIFRoZSBzZWN1cml0eSBydWxlIGFwcGVhcnMgaW4gdGhlIHNlY3VyaXR5IHJ1bGVcbiAgICAgKiBsaXN0LlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHNhZmVSdWxlOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBkYXRhTGlua05hbWU6IFRoZSBuYW1lIG9mIHRoZSBkYXRhIGxpbmsgZm9yIGNyb3NzLWRhdGFiYXNlIHF1ZXJ5LlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGRhdGFMaW5rTmFtZT86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGRkbE9ubGluZTogW0ltcG9ydGFudF0gU3BlY2lmaWVzIHdoZXRoZXIgdG8gZW5hYmxlIHRoZSBvbmxpbmUgZGF0YSBkZXNjcmlwdGlvbiBsYW5ndWFnZSAoRERMKVxuICAgICAqIHNlcnZpY2UuIEN1cnJlbnRseSwgdGhpcyBzZXJ2aWNlIGlzIGF2YWlsYWJsZSBvbmx5IGZvciB0aGUgTXlTUUwgYW5kIFBvbGFyREIgZGF0YWJhc2VzLlxuICAgICAqIDA6IFRoZSBzZXJ2aWNlIGlzIGRpc2FibGVkLlxuICAgICAqIDE6IFRoZSBuYXRpdmUgb25saW5lIERETCBzZXJ2aWNlIHByZXZhaWxzLlxuICAgICAqIDI6IERhdGEgY2hhbmdlIHdpdGhvdXQgdGFibGUgbG9ja2luZyBwcm92aWRlZCBieSBETVMgcHJldmFpbHMuXG4gICAgICovXG4gICAgcmVhZG9ubHkgZGRsT25saW5lPzogbnVtYmVyIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgZWNzSW5zdGFuY2VJZDogVGhlIElEIG9mIHRoZSBFQ1MgaW5zdGFuY2UgdG8gd2hpY2ggdGhlIGRhdGFiYXNlIGluc3RhbmNlIGJlbG9uZ3MuXG4gICAgICogTm90ZSBZb3UgbXVzdCBzcGVjaWZ5IHRoaXMgcGFyYW1ldGVyIGlmIHRoZSBJbnN0YW5jZVNvdXJjZSBwYXJhbWV0ZXIgaXMgc2V0IHRvIEVDU19PV04uXG4gICAgICovXG4gICAgcmVhZG9ubHkgZWNzSW5zdGFuY2VJZD86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGVjc1JlZ2lvbjogVGhlIHJlZ2lvbiB3aGVyZSB0aGUgZGF0YWJhc2UgaW5zdGFuY2UgcmVzaWRlcy5cbiAgICAgKiBOb3RlIFlvdSBtdXN0IHNwZWNpZnkgdGhpcyBwYXJhbWV0ZXIgaWYgdGhlIEluc3RhbmNlU291cmNlIHBhcmFtZXRlciBpcyBzZXQgdG8gRUNTX09XTiBvciBWUENfSURDLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGVjc1JlZ2lvbj86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGVuYWJsZVNlbGxDb21tb246IFdoZXRoZXIgdGhlIGluc3RhbmNlIG5lZWRzIHRvIGVuYWJsZSB0aGUgc2VjdXJpdHkgY29sbGFib3JhdGlvbiBmdW5jdGlvbi5cbiAgICAgKiAtIFk6IEVuYWJsZS5cbiAgICAgKiAtIE5VTEwgb3Igb3RoZXI6IE5vdCBlbmFibGUuXG4gICAgICovXG4gICAgcmVhZG9ubHkgZW5hYmxlU2VsbENvbW1vbj86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGVuYWJsZVNlbGxTaXRkOiBZOiBlbmFibGVzIHRoZSBzZW5zaXRpdmUgZGF0YSBwcm90ZWN0aW9uIGZlYXR1cmVcbiAgICAgKiBOVUxMIG9yIG90aGVyOiBkaXNhYmxlcyB0aGUgc2Vuc2l0aXZlIGRhdGEgcHJvdGVjdGlvbiBmZWF0dXJlXG4gICAgICovXG4gICAgcmVhZG9ubHkgZW5hYmxlU2VsbFNpdGQ/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBlbmFibGVTZWxsU3RhYmxlOiBXaGV0aGVyIHRoZSBpbnN0YW5jZSBuZWVkcyB0byBlbmFibGUgdGhlIHN0YWJsZSBjaGFuZ2UgZnVuY3Rpb24uXG4gICAgICogLSBZOiBFbmFibGUuXG4gICAgICogLSBOVUxMIG9yIG90aGVyOiBEbyBub3QgZW5hYmxlLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGVuYWJsZVNlbGxTdGFibGU/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBzaWQ6IFRoZSBzeXN0ZW0gSUQgKFNJRCkgb2YgdGhlIGRhdGFiYXNlIGluc3RhbmNlLlxuICAgICAqIE5vdGUgWW91IG11c3Qgc3BlY2lmeSB0aGlzIHBhcmFtZXRlciBpZiB0aGUgSW5zdGFuY2VUeXBlIHBhcmFtZXRlciBpcyBzZXQgdG8gUG9zdGdyZVNRTCBvciBPcmFjbGUuXG4gICAgICovXG4gICAgcmVhZG9ubHkgc2lkPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgc2tpcFRlc3Q6IFdoZXRoZXIgdGhlIGluc3RhbmNlIGlnbm9yZXMgdGhlIHRlc3QgY29ubmVjdGl2aXR5LiBUaGUgdmFsdWVzIGFyZSBhcyBmb2xsb3dzOlxuICAgICAqIC0gdHJ1ZTogaWdub3JlXG4gICAgICogLSBmYWxzZTogZG8gbm90IGlnbm9yZVxuICAgICAqL1xuICAgIHJlYWRvbmx5IHNraXBUZXN0PzogYm9vbGVhbiB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHRlbXBsYXRlSWQ6IFRoZSBJRCBvZiB0aGUgY2xhc3NpZmljYXRpb24gdGVtcGxhdGUuIFlvdSBjYW4gY2FsbCB0aGUgTGlzdENsYXNzaWZpY2F0aW9uVGVtcGxhdGVzIG9wZXJhdGlvbiB0byBxdWVyeSB0aGUgdGVtcGxhdGUgSUQuXG4gICAgICovXG4gICAgcmVhZG9ubHkgdGVtcGxhdGVJZD86IG51bWJlciB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHRlbXBsYXRlVHlwZTogVGhlIHR5cGUgb2YgdGhlIGNsYXNzaWZpY2F0aW9uIHRlbXBsYXRlLiBZb3UgY2FuIGNhbGwgdGhlIExpc3RDbGFzc2lmaWNhdGlvblRlbXBsYXRlcyBvcGVyYXRpb24gdG8gcXVlcnkgdGhlIHRlbXBsYXRlIHR5cGUuXG4gICAgICovXG4gICAgcmVhZG9ubHkgdGVtcGxhdGVUeXBlPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgdGlkOiBUaGUgSUQgb2YgdGhlIHRlbmFudC5cbiAgICAgKiBOb3RlIFRvIHF1ZXJ5IHRoZSBJRCwgbG9nIG9uIHRvIHRoZSBETVMgRW50ZXJwcmlzZSBjb25zb2xlIGFuZCBjaG9vc2UgU3lzdGVtIE1hbmFnZW1lbnRcbiAgICAgKiA+IEluc3RhbmNlIE1hbmFnZW1lbnQgb3IgU3lzdGVtIE1hbmFnZW1lbnQgPiBVc2VyIE1hbmFnZW1lbnQuIFRoZSBJRCBvZiB0aGUgdGVuYW50XG4gICAgICogYXBwZWFycyBpbiB0aGUgU2VydmljZSBTcGVjaWZpY2F0aW9uIHNlY3Rpb24uXG4gICAgICovXG4gICAgcmVhZG9ubHkgdGlkPzogbnVtYmVyIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgdXNlRHNxbDogU3BlY2lmaWVzIHdoZXRoZXIgdG8gZW5hYmxlIGNyb3NzLWRhdGFiYXNlIHF1ZXJ5IGZvciB0aGUgZGF0YWJhc2UgaW5zdGFuY2UuIFZhbGlkXG4gICAgICogdmFsdWVzOlxuICAgICAqIDA6IGRpc2FibGVkXG4gICAgICogMTogZW5hYmxlZFxuICAgICAqL1xuICAgIHJlYWRvbmx5IHVzZURzcWw/OiBudW1iZXIgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSB1c2VTc2w6IFNlbGVjdCB3aGV0aGVyIHRvIGVuYWJsZSBTU0wgY29ubmVjdGlvbi4gV2hlbiBlbmFibGVkLCBETVMgd2lsbCBjb25uZWN0IHRvIHRoZSBkYXRhYmFzZSB2aWEgU1NMLiBUaGUgcHJlbWlzZSBvZiB1c2luZyB0aGlzIHBhcmFtZXRlciBpcyB0aGF0IHRoZSBkYXRhYmFzZSBoYXMgZW5hYmxlZCBTU0wgY29ubmVjdGlvbi4gQ3VycmVudGx5LCB0aGUgZm9sbG93aW5nIG9wdGlvbnMgYXJlIHN1cHBvcnRlZDpcbiAgICAgKiAtIDA6IERlZmF1bHQgdmFsdWUgKERNUyBhbmQgZGF0YWJhc2Ugc2VydmljZSBhdXRvbWF0aWNhbGx5IG5lZ290aWF0ZSB3aGV0aGVyIHRvIGVuYWJsZSBpdCkgVGhlIHN5c3RlbSB3aWxsIGF1dG9tYXRpY2FsbHkgaWRlbnRpZnkgd2hldGhlciB0aGUgdGFyZ2V0IGRhdGFiYXNlIGhhcyBlbmFibGVkIFNTTCBjb25uZWN0aW9uLiBJZiB0aGUgZGF0YWJhc2UgaGFzIGVuYWJsZWQgU1NMIGNvbm5lY3Rpb24sIERNUyB3aWxsIGNvbm5lY3QgdG8gdGhlIGRhdGFiYXNlIHZpYSBTU0w7IGlmIHRoZSBkYXRhYmFzZSBoYXMgbm90IGVuYWJsZWQgU1NMIGNvbm5lY3Rpb24sIGl0IHdpbGwgY29ubmVjdCBpbiBhIG5vcm1hbCB3YXkuXG4gICAgICogLSAxOiBFbmFibGUgU1NMIGNvbm5lY3Rpb24uIElmIHRoZSBkYXRhYmFzZSBoYXMgbm90IGVuYWJsZWQgU1NMIGNvbm5lY3Rpb24sIHRoaXMgcGFyYW1ldGVyIGlzIGludmFsaWQuXG4gICAgICogLSAtMTogRGlzYWJsZSBTU0wgY29ubmVjdGlvbi5cbiAgICAgKiBOb3RlOlxuICAgICAqIC0gVGhpcyBjb25maWd1cmF0aW9uIGl0ZW0gb25seSBhcHBlYXJzIHdoZW4gdGhlIGRhdGFiYXNlIGlzIE15U1FMIG9yIFJlZGlzLlxuICAgICAqIC0gU1NMIChTZWN1cmUgU29ja2V0cyBMYXllcikgY2FuIGVuY3J5cHQgbmV0d29yayBjb25uZWN0aW9ucyBhdCB0aGUgdHJhbnNwb3J0IGxheWVyIHRvIGltcHJvdmUgdGhlIHNlY3VyaXR5IGFuZCBpbnRlZ3JpdHkgb2YgY29tbXVuaWNhdGlvbiBkYXRhLCBidXQgaXQgd2lsbCBpbmNyZWFzZSB0aGUgbmV0d29yayBjb25uZWN0aW9uIHJlc3BvbnNlIHRpbWUuXG4gICAgICovXG4gICAgcmVhZG9ubHkgdXNlU3NsPzogbnVtYmVyIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgdnBjSWQ6IFRoZSBJRCBvZiB0aGUgVlBDIHRvIHdoaWNoIHRoZSBkYXRhYmFzZSBpbnN0YW5jZSBiZWxvbmdzLlxuICAgICAqIE5vdGUgWW91IG11c3Qgc3BlY2lmeSB0aGlzIHBhcmFtZXRlciBpZiB0aGUgSW5zdGFuY2VTb3VyY2UgcGFyYW1ldGVyIGlzIHNldCB0byBWUENfSURDLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHZwY0lkPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xufVxuXG4vKipcbiAqIFJlcHJlc2VudHMgYSBgSW5zdGFuY2UyYC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJSW5zdGFuY2UyIGV4dGVuZHMgcm9zLklSZXNvdXJjZSB7XG4gICAgcmVhZG9ubHkgcHJvcHM6IEluc3RhbmNlMlByb3BzO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIEhvc3Q6IFRoZSBlbmRwb2ludCBvZiB0aGUgZGF0YWJhc2UgaW5zdGFuY2UuXG4gICAgICovXG4gICAgcmVhZG9ubHkgYXR0ckhvc3Q6IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBJbnN0YW5jZUlkOiBUaGUgSUQgb2YgdGhlIGRhdGFiYXNlIGluc3RhbmNlLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGF0dHJJbnN0YW5jZUlkOiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgUG9ydDogVGhlIGNvbm5lY3Rpb24gcG9ydCBvZiB0aGUgZGF0YWJhc2UgaW5zdGFuY2UuXG4gICAgICovXG4gICAgcmVhZG9ubHkgYXR0clBvcnQ6IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcbn1cbi8qKlxuICogVGhpcyBjbGFzcyBlbmNhcHN1bGF0ZXMgYW5kIGV4dGVuZHMgdGhlIFJPUyByZXNvdXJjZSB0eXBlIGBBTElZVU46OkRNUzo6SW5zdGFuY2UyYC5cbiAqIEBOb3RlIFRoaXMgY2xhc3MgbWF5IGhhdmUgc29tZSBuZXcgZnVuY3Rpb25zIHRvIGZhY2lsaXRhdGUgZGV2ZWxvcG1lbnQsIHNvIGl0IGlzIHJlY29tbWVuZGVkIHRvIHVzZSB0aGlzIGNsYXNzIGluc3RlYWQgb2YgYFJvc0luc3RhbmNlMmBmb3IgYSBtb3JlIGNvbnZlbmllbnQgZGV2ZWxvcG1lbnQgZXhwZXJpZW5jZS5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvYWxpeXVuLWRtcy1pbnN0YW5jZTJcbiAqL1xuZXhwb3J0IGNsYXNzIEluc3RhbmNlMiBleHRlbmRzIHJvcy5SZXNvdXJjZSBpbXBsZW1lbnRzIElJbnN0YW5jZTIge1xuICAgIHByb3RlY3RlZCBzY29wZTogcm9zLkNvbnN0cnVjdDtcbiAgICBwcm90ZWN0ZWQgaWQ6IHN0cmluZztcbiAgICBwdWJsaWMgcmVhZG9ubHkgcHJvcHM6IEluc3RhbmNlMlByb3BzO1xuICAgIHByb3RlY3RlZCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBIb3N0OiBUaGUgZW5kcG9pbnQgb2YgdGhlIGRhdGFiYXNlIGluc3RhbmNlLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRySG9zdDogcm9zLklSZXNvbHZhYmxlIHwgc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIEluc3RhbmNlSWQ6IFRoZSBJRCBvZiB0aGUgZGF0YWJhc2UgaW5zdGFuY2UuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJJbnN0YW5jZUlkOiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgUG9ydDogVGhlIGNvbm5lY3Rpb24gcG9ydCBvZiB0aGUgZGF0YWJhc2UgaW5zdGFuY2UuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJQb3J0OiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBQYXJhbSBzY29wZSAtIHNjb3BlIGluIHdoaWNoIHRoaXMgcmVzb3VyY2UgaXMgZGVmaW5lZFxuICAgICAqIFBhcmFtIGlkICAgIC0gc2NvcGVkIGlkIG9mIHRoZSByZXNvdXJjZVxuICAgICAqIFBhcmFtIHByb3BzIC0gcmVzb3VyY2UgcHJvcGVydGllc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiByb3MuQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogSW5zdGFuY2UyUHJvcHMsIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OmJvb2xlYW4gPSB0cnVlKSB7XG4gICAgICAgIHN1cGVyKHNjb3BlLCBpZCk7XG4gICAgICAgIHRoaXMuc2NvcGUgPSBzY29wZTtcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xuICAgICAgICB0aGlzLnByb3BzID0gcHJvcHM7XG4gICAgICAgIHRoaXMuZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgPSBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDtcblxuICAgICAgICBjb25zdCByb3NJbnN0YW5jZTIgPSBuZXcgUm9zSW5zdGFuY2UyKHRoaXMsIGlkLCAge1xuICAgICAgICAgICAgZGF0YWJhc2VQYXNzd29yZDogcHJvcHMuZGF0YWJhc2VQYXNzd29yZCxcbiAgICAgICAgICAgIHBvcnQ6IHByb3BzLnBvcnQsXG4gICAgICAgICAgICBzYWZlUnVsZTogcHJvcHMuc2FmZVJ1bGUsXG4gICAgICAgICAgICBleHBvcnRUaW1lb3V0OiBwcm9wcy5leHBvcnRUaW1lb3V0LFxuICAgICAgICAgICAgZW52VHlwZTogcHJvcHMuZW52VHlwZSxcbiAgICAgICAgICAgIGRiYUlkOiBwcm9wcy5kYmFJZCxcbiAgICAgICAgICAgIGVjc1JlZ2lvbjogcHJvcHMuZWNzUmVnaW9uLFxuICAgICAgICAgICAgaW5zdGFuY2VBbGlhczogcHJvcHMuaW5zdGFuY2VBbGlhcyxcbiAgICAgICAgICAgIG5ldHdvcmtUeXBlOiBwcm9wcy5uZXR3b3JrVHlwZSxcbiAgICAgICAgICAgIGVuYWJsZVNlbGxUcnVzdDogcHJvcHMuZW5hYmxlU2VsbFRydXN0LFxuICAgICAgICAgICAgaW5zdGFuY2VUeXBlOiBwcm9wcy5pbnN0YW5jZVR5cGUsXG4gICAgICAgICAgICBlbmFibGVTZWxsU2l0ZDogcHJvcHMuZW5hYmxlU2VsbFNpdGQsXG4gICAgICAgICAgICBkYXRhTGlua05hbWU6IHByb3BzLmRhdGFMaW5rTmFtZSxcbiAgICAgICAgICAgIHF1ZXJ5VGltZW91dDogcHJvcHMucXVlcnlUaW1lb3V0LFxuICAgICAgICAgICAgdGVtcGxhdGVJZDogcHJvcHMudGVtcGxhdGVJZCxcbiAgICAgICAgICAgIGluc3RhbmNlU291cmNlOiBwcm9wcy5pbnN0YW5jZVNvdXJjZSxcbiAgICAgICAgICAgIGVuYWJsZVNlbGxTdGFibGU6IHByb3BzLmVuYWJsZVNlbGxTdGFibGUsXG4gICAgICAgICAgICBza2lwVGVzdDogcHJvcHMuc2tpcFRlc3QsXG4gICAgICAgICAgICBob3N0OiBwcm9wcy5ob3N0LFxuICAgICAgICAgICAgZW5hYmxlU2VsbENvbW1vbjogcHJvcHMuZW5hYmxlU2VsbENvbW1vbixcbiAgICAgICAgICAgIHVzZVNzbDogcHJvcHMudXNlU3NsLFxuICAgICAgICAgICAgdGVtcGxhdGVUeXBlOiBwcm9wcy50ZW1wbGF0ZVR5cGUsXG4gICAgICAgICAgICBkZGxPbmxpbmU6IHByb3BzLmRkbE9ubGluZSxcbiAgICAgICAgICAgIHRpZDogcHJvcHMudGlkLFxuICAgICAgICAgICAgc2lkOiBwcm9wcy5zaWQsXG4gICAgICAgICAgICB1c2VEc3FsOiBwcm9wcy51c2VEc3FsLFxuICAgICAgICAgICAgZWNzSW5zdGFuY2VJZDogcHJvcHMuZWNzSW5zdGFuY2VJZCxcbiAgICAgICAgICAgIHZwY0lkOiBwcm9wcy52cGNJZCxcbiAgICAgICAgICAgIGRhdGFiYXNlVXNlcjogcHJvcHMuZGF0YWJhc2VVc2VyLFxuICAgICAgICB9LCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCAmJiB0aGlzLnN0YWNrLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50KTtcbiAgICAgICAgdGhpcy5yZXNvdXJjZSA9IHJvc0luc3RhbmNlMjtcbiAgICAgICAgdGhpcy5hdHRySG9zdCA9IHJvc0luc3RhbmNlMi5hdHRySG9zdDtcbiAgICAgICAgdGhpcy5hdHRySW5zdGFuY2VJZCA9IHJvc0luc3RhbmNlMi5hdHRySW5zdGFuY2VJZDtcbiAgICAgICAgdGhpcy5hdHRyUG9ydCA9IHJvc0luc3RhbmNlMi5hdHRyUG9ydDtcbiAgICB9XG59XG4iXX0=