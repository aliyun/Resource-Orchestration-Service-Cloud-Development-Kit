"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResourcePackage = exports.ResourcePackageProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const bss_generated_1 = require("./bss.generated");
Object.defineProperty(exports, "ResourcePackageProperty", { enumerable: true, get: function () { return bss_generated_1.RosResourcePackage; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::BSS::ResourcePackage`, which is used to create an instance that uses a resource plan.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosResourcePackage`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-bss-resourcepackage
 */
class ResourcePackage extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosResourcePackage = new bss_generated_1.RosResourcePackage(this, id, {
            productCode: props.productCode,
            pricingCycle: props.pricingCycle,
            packageType: props.packageType,
            specification: props.specification,
            duration: props.duration,
            effectiveDate: props.effectiveDate,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosResourcePackage;
        this.attrInstanceId = rosResourcePackage.attrInstanceId;
        this.attrOrderId = rosResourcePackage.attrOrderId;
    }
}
exports.ResourcePackage = ResourcePackage;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzb3VyY2VwYWNrYWdlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicmVzb3VyY2VwYWNrYWdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDhDQUE4QztBQUM5QyxtREFBcUQ7QUFFdEIsd0dBRnRCLGtDQUFrQixPQUUyQjtBQXVDdEQ7Ozs7R0FJRztBQUNILE1BQWEsZUFBZ0IsU0FBUSxHQUFHLENBQUMsUUFBUTtJQVk3Qzs7OztPQUlHO0lBQ0gsWUFBWSxLQUFvQixFQUFFLEVBQVUsRUFBRSxLQUEyQixFQUFFLG1DQUEyQyxJQUFJO1FBQ3RILEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFakIsTUFBTSxrQkFBa0IsR0FBRyxJQUFJLGtDQUFrQixDQUFDLElBQUksRUFBRSxFQUFFLEVBQUc7WUFDekQsV0FBVyxFQUFFLEtBQUssQ0FBQyxXQUFXO1lBQzlCLFlBQVksRUFBRSxLQUFLLENBQUMsWUFBWTtZQUNoQyxXQUFXLEVBQUUsS0FBSyxDQUFDLFdBQVc7WUFDOUIsYUFBYSxFQUFFLEtBQUssQ0FBQyxhQUFhO1lBQ2xDLFFBQVEsRUFBRSxLQUFLLENBQUMsUUFBUTtZQUN4QixhQUFhLEVBQUUsS0FBSyxDQUFDLGFBQWE7U0FDckMsRUFBRSxnQ0FBZ0MsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7UUFDcEYsSUFBSSxDQUFDLFFBQVEsR0FBRyxrQkFBa0IsQ0FBQztRQUNuQyxJQUFJLENBQUMsY0FBYyxHQUFHLGtCQUFrQixDQUFDLGNBQWMsQ0FBQztRQUN4RCxJQUFJLENBQUMsV0FBVyxHQUFHLGtCQUFrQixDQUFDLFdBQVcsQ0FBQztJQUN0RCxDQUFDO0NBQ0o7QUFoQ0QsMENBZ0NDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcm9zIGZyb20gJ0BhbGljbG91ZC9yb3MtY2RrLWNvcmUnO1xuaW1wb3J0IHsgUm9zUmVzb3VyY2VQYWNrYWdlIH0gZnJvbSAnLi9ic3MuZ2VuZXJhdGVkJztcbi8vIEdlbmVyYXRlZCBmcm9tIHRoZSBBbGlDbG91ZCBST1MgUmVzb3VyY2UgU3BlY2lmaWNhdGlvblxuZXhwb3J0IHsgUm9zUmVzb3VyY2VQYWNrYWdlIGFzIFJlc291cmNlUGFja2FnZVByb3BlcnR5IH07XG5cbi8qKlxuICogUHJvcGVydGllcyBmb3IgZGVmaW5pbmcgYSBgUmVzb3VyY2VQYWNrYWdlYC5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvYWxpeXVuLWJzcy1yZXNvdXJjZXBhY2thZ2VcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBSZXNvdXJjZVBhY2thZ2VQcm9wcyB7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBkdXJhdGlvbjogVGhlIHZhbGlkaXR5IG9mIHRoZSBzcGVjaWZpZWQgcmVzb3VyY2UgcGFja2FnZS4gVGhlIHZhbHVlIGlzIHRoZSBzYW1lIGFzIHRoZSBWYWx1ZSBvZiBBdmFpbGFibGVEdXJhdGlvbiByZXR1cm5lZCBieSBEZXNjcmliZVJlc291cmNlUGFja2FnZVByb2R1Y3QuXG4gICAgICovXG4gICAgcmVhZG9ubHkgZHVyYXRpb246IG51bWJlciB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHBhY2thZ2VUeXBlOiBUaGUgdHlwZSBvZiB0aGUgc3BlY2lmaWVkIHJlc291cmNlIHBhY2thZ2UuIFRoZSB2YWx1ZSBpcyB0aGUgc2FtZSBhcyB0aGUgdmFsdWUgb2YgdGhlIENvZGUgdmFsdWUgb2YgdGhlIFJlc291cmNlUGFja2FnZSBvYmplY3QgcmV0dXJuZWQgYnkgRGVzY3JpYmVSZXNvdXJjZVBhY2thZ2VQcm9kdWN0LlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHBhY2thZ2VUeXBlOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBwcm9kdWN0Q29kZTogVGhlIGNvZGUgb2YgdGhlIHNwZWNpZmllZCBwcm9kdWN0LiBUaGUgdmFsdWUgaXMgdGhlIHNhbWUgYXMgdGhlIHZhbHVlIG9mIFByb2R1Y3RUeXBlIHJldHVybmVkIGJ5IFF1ZXJ5UHJvZHVjdExpc3QuXG4gICAgICovXG4gICAgcmVhZG9ubHkgcHJvZHVjdENvZGU6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHNwZWNpZmljYXRpb246IFRoZSBzaXplIG9mIHRoZSBzcGVjaWZpZWQgcmVzb3VyY2UgcGFja2FnZS4gVGhlIHZhbHVlIGlzIHRoZSBzYW1lIGFzIHRoZSBWYWx1ZSBvZiBTcGVjaWZpY2F0aW9uIHJldHVybmVkIGJ5IERlc2NyaWJlUmVzb3VyY2VQYWNrYWdlUHJvZHVjdC5cbiAgICAgKi9cbiAgICByZWFkb25seSBzcGVjaWZpY2F0aW9uOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBlZmZlY3RpdmVEYXRlOiBUaGUgZWZmZWN0aXZlIGRhdGUgb2YgdGhlIHNwZWNpZmllZCByZXNvdXJjZSBwYWNrYWdlLiBUaGUgcmVzb3VyY2UgcGFja2FnZSB3aWxsIHRha2UgZWZmZWN0IGltbWVkaWF0ZWx5IGlmIHRoZSBlZmZlY3RpdmUgZGF0ZSBpcyB1bnNwZWNpZmllZC4gVGhlIGRhdGUgZm9ybWF0IGZvbGxvd3MgdGhlIElTTzg2MDEgc3RhbmRhcmQgYW5kIHVzZXMgVVRDIHRpbWUuIEZvcm1hdDogeXl5eS1NTS1kZFRISDptbTpzc1pcbiAgICAgKi9cbiAgICByZWFkb25seSBlZmZlY3RpdmVEYXRlPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgcHJpY2luZ0N5Y2xlOiBUaGUgdmFsaWRpdHkgb2YgdGhlIHNwZWNpZmllZCByZXNvdXJjZSBwYWNrYWdlLiBEZWZhdWx0IHZhbHVlOiBNb250aC4gVmFsaWQgdmFsdWVzOiBNb250aCwgWWVhclxuICAgICAqL1xuICAgIHJlYWRvbmx5IHByaWNpbmdDeWNsZT86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcbn1cblxuLyoqXG4gKiBUaGlzIGNsYXNzIGVuY2Fwc3VsYXRlcyBhbmQgZXh0ZW5kcyB0aGUgUk9TIHJlc291cmNlIHR5cGUgYEFMSVlVTjo6QlNTOjpSZXNvdXJjZVBhY2thZ2VgLCB3aGljaCBpcyB1c2VkIHRvIGNyZWF0ZSBhbiBpbnN0YW5jZSB0aGF0IHVzZXMgYSByZXNvdXJjZSBwbGFuLlxuICogQE5vdGUgVGhpcyBjbGFzcyBtYXkgaGF2ZSBzb21lIG5ldyBmdW5jdGlvbnMgdG8gZmFjaWxpdGF0ZSBkZXZlbG9wbWVudCwgc28gaXQgaXMgcmVjb21tZW5kZWQgdG8gdXNlIHRoaXMgY2xhc3MgaW5zdGVhZCBvZiBgUm9zUmVzb3VyY2VQYWNrYWdlYGZvciBhIG1vcmUgY29udmVuaWVudCBkZXZlbG9wbWVudCBleHBlcmllbmNlLlxuICogU2VlIGh0dHBzOi8vd3d3LmFsaWJhYmFjbG91ZC5jb20vaGVscC9yb3MvZGV2ZWxvcGVyLXJlZmVyZW5jZS9hbGl5dW4tYnNzLXJlc291cmNlcGFja2FnZVxuICovXG5leHBvcnQgY2xhc3MgUmVzb3VyY2VQYWNrYWdlIGV4dGVuZHMgcm9zLlJlc291cmNlIHtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBJbnN0YW5jZUlkOiBUaGUgSUQgb2YgdGhlIHNwZWNpZmllZCBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckluc3RhbmNlSWQ6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBPcmRlcklkOiBUaGUgSUQgb2YgdGhlIHNwZWNpZmllZCBvcmRlci5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ck9yZGVySWQ6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFBhcmFtIHNjb3BlIC0gc2NvcGUgaW4gd2hpY2ggdGhpcyByZXNvdXJjZSBpcyBkZWZpbmVkXG4gICAgICogUGFyYW0gaWQgICAgLSBzY29wZWQgaWQgb2YgdGhlIHJlc291cmNlXG4gICAgICogUGFyYW0gcHJvcHMgLSByZXNvdXJjZSBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IHJvcy5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBSZXNvdXJjZVBhY2thZ2VQcm9wcywgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6Ym9vbGVhbiA9IHRydWUpIHtcbiAgICAgICAgc3VwZXIoc2NvcGUsIGlkKTtcblxuICAgICAgICBjb25zdCByb3NSZXNvdXJjZVBhY2thZ2UgPSBuZXcgUm9zUmVzb3VyY2VQYWNrYWdlKHRoaXMsIGlkLCAge1xuICAgICAgICAgICAgcHJvZHVjdENvZGU6IHByb3BzLnByb2R1Y3RDb2RlLFxuICAgICAgICAgICAgcHJpY2luZ0N5Y2xlOiBwcm9wcy5wcmljaW5nQ3ljbGUsXG4gICAgICAgICAgICBwYWNrYWdlVHlwZTogcHJvcHMucGFja2FnZVR5cGUsXG4gICAgICAgICAgICBzcGVjaWZpY2F0aW9uOiBwcm9wcy5zcGVjaWZpY2F0aW9uLFxuICAgICAgICAgICAgZHVyYXRpb246IHByb3BzLmR1cmF0aW9uLFxuICAgICAgICAgICAgZWZmZWN0aXZlRGF0ZTogcHJvcHMuZWZmZWN0aXZlRGF0ZSxcbiAgICAgICAgfSwgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgJiYgdGhpcy5zdGFjay5lbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCk7XG4gICAgICAgIHRoaXMucmVzb3VyY2UgPSByb3NSZXNvdXJjZVBhY2thZ2U7XG4gICAgICAgIHRoaXMuYXR0ckluc3RhbmNlSWQgPSByb3NSZXNvdXJjZVBhY2thZ2UuYXR0ckluc3RhbmNlSWQ7XG4gICAgICAgIHRoaXMuYXR0ck9yZGVySWQgPSByb3NSZXNvdXJjZVBhY2thZ2UuYXR0ck9yZGVySWQ7XG4gICAgfVxufVxuIl19