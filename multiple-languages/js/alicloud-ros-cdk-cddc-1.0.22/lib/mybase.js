"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MyBase = exports.MyBaseProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const cddc_generated_1 = require("./cddc.generated");
Object.defineProperty(exports, "MyBaseProperty", { enumerable: true, get: function () { return cddc_generated_1.RosMyBase; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::CDDC::MyBase`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosMyBase`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-cddc-mybase
 */
class MyBase extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosMyBase = new cddc_generated_1.RosMyBase(this, id, {
            ecsInstanceName: props.ecsInstanceName,
            periodType: props.periodType,
            resourceGroupId: props.resourceGroupId,
            userData: props.userData,
            dedicatedHostGroupDescription: props.dedicatedHostGroupDescription,
            dedicatedHostGroupId: props.dedicatedHostGroupId,
            autoRenew: props.autoRenew,
            ecsUniqueSuffix: props.ecsUniqueSuffix,
            imageId: props.imageId,
            userDataInBase64: props.userDataInBase64,
            ecsHostName: props.ecsHostName,
            engine: props.engine,
            passwordInherit: props.passwordInherit,
            keyPairName: props.keyPairName,
            zoneId: props.zoneId,
            vSwitchId: props.vSwitchId,
            securityGroupId: props.securityGroupId,
            ecsClassList: props.ecsClassList,
            period: props.period,
            payType: props.payType,
            internetChargeType: props.internetChargeType,
            ecsDeploymentSetId: props.ecsDeploymentSetId,
            internetMaxBandwidthOut: props.internetMaxBandwidthOut,
            vpcId: props.vpcId,
            osPassword: props.osPassword,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosMyBase;
        this.attrInstanceIds = rosMyBase.attrInstanceIds;
        this.attrOrderIds = rosMyBase.attrOrderIds;
    }
}
exports.MyBase = MyBase;
//# sourceMappingURL=data:application/json;base64,