"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DedicatedHost = exports.DedicatedHostProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const cddc_generated_1 = require("./cddc.generated");
Object.defineProperty(exports, "DedicatedHostProperty", { enumerable: true, get: function () { return cddc_generated_1.RosDedicatedHost; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::CDDC::DedicatedHost`, which is used to create a host in a dedicated cluster.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosDedicatedHost`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-cddc-dedicatedhost
 */
class DedicatedHost extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosDedicatedHost = new cddc_generated_1.RosDedicatedHost(this, id, {
            hostClass: props.hostClass,
            osPassword: props.osPassword,
            zoneId: props.zoneId,
            dedicatedHostGroupId: props.dedicatedHostGroupId,
            autoRenew: props.autoRenew,
            vSwitchId: props.vSwitchId,
            usedTime: props.usedTime,
            imageCategory: props.imageCategory,
            period: props.period,
            paymentType: props.paymentType,
            hostName: props.hostName,
            tags: props.tags,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosDedicatedHost;
        this.attrAutoRenew = rosDedicatedHost.attrAutoRenew;
        this.attrCpuAllocationRatio = rosDedicatedHost.attrCpuAllocationRatio;
        this.attrCpuUsed = rosDedicatedHost.attrCpuUsed;
        this.attrDedicatedHostGroupId = rosDedicatedHost.attrDedicatedHostGroupId;
        this.attrDedicatedHostId = rosDedicatedHost.attrDedicatedHostId;
        this.attrDiskAllocationRatio = rosDedicatedHost.attrDiskAllocationRatio;
        this.attrEcsClassCode = rosDedicatedHost.attrEcsClassCode;
        this.attrHostClass = rosDedicatedHost.attrHostClass;
        this.attrHostCpu = rosDedicatedHost.attrHostCpu;
        this.attrHostMem = rosDedicatedHost.attrHostMem;
        this.attrHostName = rosDedicatedHost.attrHostName;
        this.attrHostStorage = rosDedicatedHost.attrHostStorage;
        this.attrHostType = rosDedicatedHost.attrHostType;
        this.attrImageCategory = rosDedicatedHost.attrImageCategory;
        this.attrIpAddress = rosDedicatedHost.attrIpAddress;
        this.attrMemAllocationRatio = rosDedicatedHost.attrMemAllocationRatio;
        this.attrMemoryUsed = rosDedicatedHost.attrMemoryUsed;
        this.attrOpenPermission = rosDedicatedHost.attrOpenPermission;
        this.attrPaymentType = rosDedicatedHost.attrPaymentType;
        this.attrStorageUsed = rosDedicatedHost.attrStorageUsed;
        this.attrVSwitchId = rosDedicatedHost.attrVSwitchId;
        this.attrVpcId = rosDedicatedHost.attrVpcId;
        this.attrZoneId = rosDedicatedHost.attrZoneId;
    }
}
exports.DedicatedHost = DedicatedHost;
//# sourceMappingURL=data:application/json;base64,