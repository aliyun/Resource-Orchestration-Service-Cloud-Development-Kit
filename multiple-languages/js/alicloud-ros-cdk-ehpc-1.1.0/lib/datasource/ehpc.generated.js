"use strict";
// Generated from the AliCloud ROS Resource Specification
Object.defineProperty(exports, "__esModule", { value: true });
exports.RosNodes = void 0;
const ros = require("@alicloud/ros-cdk-core");
/**
 * Determine whether the given properties match those of a `RosNodesProps`
 *
 * @param properties - the TypeScript properties of a `RosNodesProps`
 *
 * @returns the result of the validation.
 */
function RosNodesPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('role', ros.validateString)(properties.role));
    errors.collect(ros.propertyValidator('hostNameSuffix', ros.validateString)(properties.hostNameSuffix));
    errors.collect(ros.propertyValidator('privateIpAddress', ros.validateString)(properties.privateIpAddress));
    errors.collect(ros.propertyValidator('clusterId', ros.requiredValidator)(properties.clusterId));
    errors.collect(ros.propertyValidator('clusterId', ros.validateString)(properties.clusterId));
    errors.collect(ros.propertyValidator('hostNamePrefix', ros.validateString)(properties.hostNamePrefix));
    errors.collect(ros.propertyValidator('hostName', ros.validateString)(properties.hostName));
    if (properties.refreshOptions && (typeof properties.refreshOptions) !== 'object') {
        errors.collect(ros.propertyValidator('refreshOptions', ros.validateAllowedValues)({
            data: properties.refreshOptions,
            allowedValues: ["Always", "Never"],
        }));
    }
    errors.collect(ros.propertyValidator('refreshOptions', ros.validateString)(properties.refreshOptions));
    return errors.wrap('supplied properties not correct for "RosNodesProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `DATASOURCE::EHPC::Nodes` resource
 *
 * @param properties - the TypeScript properties of a `RosNodesProps`
 *
 * @returns the AliCloud ROS Resource properties of an `DATASOURCE::EHPC::Nodes` resource.
 */
// @ts-ignore TS6133
function rosNodesPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosNodesPropsValidator(properties).assertSuccess();
    }
    return {
        'ClusterId': ros.stringToRosTemplate(properties.clusterId),
        'HostName': ros.stringToRosTemplate(properties.hostName),
        'HostNamePrefix': ros.stringToRosTemplate(properties.hostNamePrefix),
        'HostNameSuffix': ros.stringToRosTemplate(properties.hostNameSuffix),
        'PrivateIpAddress': ros.stringToRosTemplate(properties.privateIpAddress),
        'RefreshOptions': ros.stringToRosTemplate(properties.refreshOptions),
        'Role': ros.stringToRosTemplate(properties.role),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `DATASOURCE::EHPC::Nodes`, which is used to query nodes in an Elastic High Performance Computing (E-HPC) cluster.
 * @Note This class does not contain additional functions, so it is recommended to use the `Nodes` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/datasource-ehpc-nodes
 */
class RosNodes extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosNodes.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrNodeIds = this.getAtt('NodeIds');
        this.attrNodes = this.getAtt('Nodes');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.clusterId = props.clusterId;
        this.hostName = props.hostName;
        this.hostNamePrefix = props.hostNamePrefix;
        this.hostNameSuffix = props.hostNameSuffix;
        this.privateIpAddress = props.privateIpAddress;
        this.refreshOptions = props.refreshOptions;
        this.role = props.role;
    }
    get rosProperties() {
        return {
            clusterId: this.clusterId,
            hostName: this.hostName,
            hostNamePrefix: this.hostNamePrefix,
            hostNameSuffix: this.hostNameSuffix,
            privateIpAddress: this.privateIpAddress,
            refreshOptions: this.refreshOptions,
            role: this.role,
        };
    }
    renderProperties(props) {
        return rosNodesPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosNodes = RosNodes;
/**
 * The resource type name for this resource class.
 */
RosNodes.ROS_RESOURCE_TYPE_NAME = "DATASOURCE::EHPC::Nodes";
//# sourceMappingURL=data:application/json;base64,