"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Queue = exports.QueueProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const mns_generated_1 = require("./mns.generated");
Object.defineProperty(exports, "QueueProperty", { enumerable: true, get: function () { return mns_generated_1.RosQueue; } });
/**
 * This class encapsulates and extends the ROS resource type `DATASOURCE::MNS::Queue`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosQueue`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/datasource-mns-queue
 */
class Queue extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosQueue = new mns_generated_1.RosQueue(this, id, {
            queueName: props.queueName,
            refreshOptions: props.refreshOptions === undefined || props.refreshOptions === null ? 'Never' : props.refreshOptions,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosQueue;
        this.attrActiveMessages = rosQueue.attrActiveMessages;
        this.attrCreateTime = rosQueue.attrCreateTime;
        this.attrDelayMessages = rosQueue.attrDelayMessages;
        this.attrDelaySeconds = rosQueue.attrDelaySeconds;
        this.attrInactiveMessages = rosQueue.attrInactiveMessages;
        this.attrLastModifyTime = rosQueue.attrLastModifyTime;
        this.attrLoggingEnabled = rosQueue.attrLoggingEnabled;
        this.attrMaximumMessageSize = rosQueue.attrMaximumMessageSize;
        this.attrMessageRetentionPeriod = rosQueue.attrMessageRetentionPeriod;
        this.attrPollingWaitSeconds = rosQueue.attrPollingWaitSeconds;
        this.attrQueueInternalUrl = rosQueue.attrQueueInternalUrl;
        this.attrQueueName = rosQueue.attrQueueName;
        this.attrQueueUrl = rosQueue.attrQueueUrl;
        this.attrVisibilityTimeout = rosQueue.attrVisibilityTimeout;
    }
}
exports.Queue = Queue;
//# sourceMappingURL=data:application/json;base64,