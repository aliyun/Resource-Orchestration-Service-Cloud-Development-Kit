"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SslCertificate = exports.SslCertificateProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const cas_generated_1 = require("./cas.generated");
Object.defineProperty(exports, "SslCertificateProperty", { enumerable: true, get: function () { return cas_generated_1.RosSslCertificate; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::CAS::SslCertificate`, which is used to create an SSL certificate.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosSslCertificate`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-cas-sslcertificate
 */
class SslCertificate extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props = {}, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosSslCertificate = new cas_generated_1.RosSslCertificate(this, id, {
            domains: props.domains,
            companyName: props.companyName,
            domainType: props.domainType,
            email: props.email,
            csr: props.csr,
            username: props.username,
            productCode: props.productCode,
            phone: props.phone,
            certType: props.certType,
            certBrand: props.certBrand,
            validateType: props.validateType,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosSslCertificate;
        this.attrCertificateId = rosSslCertificate.attrCertificateId;
        this.attrOrderId = rosSslCertificate.attrOrderId;
    }
}
exports.SslCertificate = SslCertificate;
//# sourceMappingURL=data:application/json;base64,