"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MonitoringAgent = exports.MonitoringAgentProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const cms_generated_1 = require("./cms.generated");
Object.defineProperty(exports, "MonitoringAgentProperty", { enumerable: true, get: function () { return cms_generated_1.RosMonitoringAgent; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::CMS::MonitoringAgent`, which is used to install the CloudMonitor agent on Alibaba Cloud hosts.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosMonitoringAgent`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-cms-monitoringagent
 */
class MonitoringAgent extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props = {}, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosMonitoringAgent = new cms_generated_1.RosMonitoringAgent(this, id, {
            force: props.force,
            installCommand: props.installCommand,
            instanceIds: props.instanceIds,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosMonitoringAgent;
    }
}
exports.MonitoringAgent = MonitoringAgent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uaXRvcmluZ2FnZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibW9uaXRvcmluZ2FnZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDhDQUE4QztBQUM5QyxtREFBcUQ7QUFFdEIsd0dBRnRCLGtDQUFrQixPQUUyQjtBQXNDdEQ7Ozs7R0FJRztBQUNILE1BQWEsZUFBZ0IsU0FBUSxHQUFHLENBQUMsUUFBUTtJQU03Qzs7OztPQUlHO0lBQ0gsWUFBWSxLQUFvQixFQUFFLEVBQVUsRUFBRSxRQUE4QixFQUFFLEVBQUUsbUNBQTJDLElBQUk7UUFDM0gsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNqQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUNiLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxnQ0FBZ0MsR0FBRyxnQ0FBZ0MsQ0FBQztRQUV6RSxNQUFNLGtCQUFrQixHQUFHLElBQUksa0NBQWtCLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRztZQUN6RCxLQUFLLEVBQUUsS0FBSyxDQUFDLEtBQUs7WUFDbEIsY0FBYyxFQUFFLEtBQUssQ0FBQyxjQUFjO1lBQ3BDLFdBQVcsRUFBRSxLQUFLLENBQUMsV0FBVztTQUNqQyxFQUFFLGdDQUFnQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztRQUNwRixJQUFJLENBQUMsUUFBUSxHQUFHLGtCQUFrQixDQUFDO0lBQ3ZDLENBQUM7Q0FDSjtBQXpCRCwwQ0F5QkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyByb3MgZnJvbSAnQGFsaWNsb3VkL3Jvcy1jZGstY29yZSc7XG5pbXBvcnQgeyBSb3NNb25pdG9yaW5nQWdlbnQgfSBmcm9tICcuL2Ntcy5nZW5lcmF0ZWQnO1xuLy8gR2VuZXJhdGVkIGZyb20gdGhlIEFsaUNsb3VkIFJPUyBSZXNvdXJjZSBTcGVjaWZpY2F0aW9uXG5leHBvcnQgeyBSb3NNb25pdG9yaW5nQWdlbnQgYXMgTW9uaXRvcmluZ0FnZW50UHJvcGVydHkgfTtcblxuLyoqXG4gKiBQcm9wZXJ0aWVzIGZvciBkZWZpbmluZyBhIGBNb25pdG9yaW5nQWdlbnRgLlxuICogU2VlIGh0dHBzOi8vd3d3LmFsaWJhYmFjbG91ZC5jb20vaGVscC9yb3MvZGV2ZWxvcGVyLXJlZmVyZW5jZS9hbGl5dW4tY21zLW1vbml0b3JpbmdhZ2VudFxuICovXG5leHBvcnQgaW50ZXJmYWNlIE1vbml0b3JpbmdBZ2VudFByb3BzIHtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGZvcmNlOiBTcGVjaWZpZXMgd2hldGhlciB0byBpbnN0YWxsIHRoZSBDbG91ZE1vbml0b3IgYWdlbnQuIFZhbGlkIHZhbHVlczpcbiAgICAgKiB0cnVlIChkZWZhdWx0IHZhbHVlKTogeWVzXG4gICAgICogZmFsc2U6IG5vXG4gICAgICovXG4gICAgcmVhZG9ubHkgZm9yY2U/OiBib29sZWFuIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgaW5zdGFsbENvbW1hbmQ6IFNwZWNpZmllcyB3aGV0aGVyIHRvIGluc3RhbGwgdGhlIENsb3VkTW9uaXRvciBhZ2VudCBvbiBhbGwgRUNTIGluc3RhbmNlcyB0aGF0IGJlbG9uZyB0byB0aGUgY3VycmVudCBBbGliYWJhIENsb3VkIGFjY291bnQuIFZhbGlkIHZhbHVlczpcbiAgICAgKiBvbmx5SW5zdGFsbE5vdEhhc0FnZW50OiBpbnN0YWxscyB0aGUgbGF0ZXN0IHZlcnNpb24gb2YgdGhlIENsb3VkTW9uaXRvciBhZ2VudCBvbmx5IG9uIEVDUyBpbnN0YW5jZXMgb24gd2hpY2ggdGhlIGFnZW50IGlzIG5vdCBpbnN0YWxsZWQuXG4gICAgICogb25seVVwZ3JhZGVBZ2VudDogdXBncmFkZXMgdGhlIENsb3VkTW9uaXRvciBhZ2VudCB0byB0aGUgbGF0ZXN0IHZlcnNpb24gb25seSBmb3IgRUNTIGluc3RhbmNlcyBvbiB3aGljaCBhbiBlYXJsaWVyIHZlcnNpb24gb2YgdGhlIGFnZW50IGlzIGluc3RhbGxlZC5cbiAgICAgKiBpbnN0YWxsQW5kVXBncmFkZTogaW5zdGFsbHMgdGhlIGxhdGVzdCB2ZXJzaW9uIG9mIHRoZSBDbG91ZE1vbml0b3IgYWdlbnQgb24gRUNTIGluc3RhbmNlcyBvbiB3aGljaCB0aGUgYWdlbnQgaXMgbm90IGluc3RhbGxlZCwgYW5kIHVwZ3JhZGVzIHRoZSBDbG91ZE1vbml0b3IgYWdlbnQgdG8gdGhlIGxhdGVzdCB2ZXJzaW9uIGZvciBFQ1MgaW5zdGFuY2VzIG9uIHdoaWNoIGFuIGVhcmxpZXIgdmVyc2lvbiBvZiB0aGUgYWdlbnQgaXMgaW5zdGFsbGVkLlxuICAgICAqIE5vdGUgSWYgeW91IHNldCB0aGUgSW5zdGFsbENvbW1hbmQgcGFyYW1ldGVyLCB0aGUgSW5zdGFuY2VJZHMgcGFyYW1ldGVyIGRvZXMgbm90IHRha2UgZWZmZWN0LlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGluc3RhbGxDb21tYW5kPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgaW5zdGFuY2VJZHM6IEFsaWJhYmEgQ2xvdWQgaG9zdCBJRC5cbiAgICAgKiBUaGUgcmFuZ2Ugb2YgbjogMSB+IDEwLlxuICAgICAqIEV4cGxhaW4gdGhhdCBJbnN0YWxsQ29tbWFuZCBhbmQgSW5zdGFuY2VJZHMgbXVzdCBiZSBzZWxlY3RlZCBvbmUgYnkgb25lLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGluc3RhbmNlSWRzPzogQXJyYXk8YW55IHwgcm9zLklSZXNvbHZhYmxlPiB8IHJvcy5JUmVzb2x2YWJsZTtcbn1cblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgYE1vbml0b3JpbmdBZ2VudGAuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSU1vbml0b3JpbmdBZ2VudCBleHRlbmRzIHJvcy5JUmVzb3VyY2Uge1xuICAgIHJlYWRvbmx5IHByb3BzOiBNb25pdG9yaW5nQWdlbnRQcm9wcztcbn1cbi8qKlxuICogVGhpcyBjbGFzcyBlbmNhcHN1bGF0ZXMgYW5kIGV4dGVuZHMgdGhlIFJPUyByZXNvdXJjZSB0eXBlIGBBTElZVU46OkNNUzo6TW9uaXRvcmluZ0FnZW50YCwgd2hpY2ggaXMgdXNlZCB0byBpbnN0YWxsIHRoZSBDbG91ZE1vbml0b3IgYWdlbnQgb24gQWxpYmFiYSBDbG91ZCBob3N0cy5cbiAqIEBOb3RlIFRoaXMgY2xhc3MgbWF5IGhhdmUgc29tZSBuZXcgZnVuY3Rpb25zIHRvIGZhY2lsaXRhdGUgZGV2ZWxvcG1lbnQsIHNvIGl0IGlzIHJlY29tbWVuZGVkIHRvIHVzZSB0aGlzIGNsYXNzIGluc3RlYWQgb2YgYFJvc01vbml0b3JpbmdBZ2VudGBmb3IgYSBtb3JlIGNvbnZlbmllbnQgZGV2ZWxvcG1lbnQgZXhwZXJpZW5jZS5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvYWxpeXVuLWNtcy1tb25pdG9yaW5nYWdlbnRcbiAqL1xuZXhwb3J0IGNsYXNzIE1vbml0b3JpbmdBZ2VudCBleHRlbmRzIHJvcy5SZXNvdXJjZSBpbXBsZW1lbnRzIElNb25pdG9yaW5nQWdlbnQge1xuICAgIHByb3RlY3RlZCBzY29wZTogcm9zLkNvbnN0cnVjdDtcbiAgICBwcm90ZWN0ZWQgaWQ6IHN0cmluZztcbiAgICBwdWJsaWMgcmVhZG9ubHkgcHJvcHM6IE1vbml0b3JpbmdBZ2VudFByb3BzO1xuICAgIHByb3RlY3RlZCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIFBhcmFtIHNjb3BlIC0gc2NvcGUgaW4gd2hpY2ggdGhpcyByZXNvdXJjZSBpcyBkZWZpbmVkXG4gICAgICogUGFyYW0gaWQgICAgLSBzY29wZWQgaWQgb2YgdGhlIHJlc291cmNlXG4gICAgICogUGFyYW0gcHJvcHMgLSByZXNvdXJjZSBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IHJvcy5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBNb25pdG9yaW5nQWdlbnRQcm9wcyA9IHt9LCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDpib29sZWFuID0gdHJ1ZSkge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQpO1xuICAgICAgICB0aGlzLnNjb3BlID0gc2NvcGU7XG4gICAgICAgIHRoaXMuaWQgPSBpZDtcbiAgICAgICAgdGhpcy5wcm9wcyA9IHByb3BzO1xuICAgICAgICB0aGlzLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ID0gZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ7XG5cbiAgICAgICAgY29uc3Qgcm9zTW9uaXRvcmluZ0FnZW50ID0gbmV3IFJvc01vbml0b3JpbmdBZ2VudCh0aGlzLCBpZCwgIHtcbiAgICAgICAgICAgIGZvcmNlOiBwcm9wcy5mb3JjZSxcbiAgICAgICAgICAgIGluc3RhbGxDb21tYW5kOiBwcm9wcy5pbnN0YWxsQ29tbWFuZCxcbiAgICAgICAgICAgIGluc3RhbmNlSWRzOiBwcm9wcy5pbnN0YW5jZUlkcyxcbiAgICAgICAgfSwgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgJiYgdGhpcy5zdGFjay5lbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCk7XG4gICAgICAgIHRoaXMucmVzb3VyY2UgPSByb3NNb25pdG9yaW5nQWdlbnQ7XG4gICAgfVxufVxuIl19