"use strict";
// Generated from the AliCloud ROS Resource Specification
Object.defineProperty(exports, "__esModule", { value: true });
exports.RosInstance = exports.RosAntiBruteForceRule = void 0;
const ros = require("@alicloud/ros-cdk-core");
/**
 * Determine whether the given properties match those of a `RosAntiBruteForceRuleProps`
 *
 * @param properties - the TypeScript properties of a `RosAntiBruteForceRuleProps`
 *
 * @returns the result of the validation.
 */
function RosAntiBruteForceRulePropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('defaultRule', ros.validateBoolean)(properties.defaultRule));
    errors.collect(ros.propertyValidator('antiBruteForceRuleName', ros.requiredValidator)(properties.antiBruteForceRuleName));
    errors.collect(ros.propertyValidator('antiBruteForceRuleName', ros.validateString)(properties.antiBruteForceRuleName));
    errors.collect(ros.propertyValidator('forbiddenTime', ros.requiredValidator)(properties.forbiddenTime));
    if (properties.forbiddenTime && (typeof properties.forbiddenTime) !== 'object') {
        errors.collect(ros.propertyValidator('forbiddenTime', ros.validateAllowedValues)({
            data: properties.forbiddenTime,
            allowedValues: [5, 15, 30, 60, 120, 360, 720, 1440, 10080, 52560000],
        }));
    }
    errors.collect(ros.propertyValidator('forbiddenTime', ros.validateNumber)(properties.forbiddenTime));
    errors.collect(ros.propertyValidator('uuidList', ros.requiredValidator)(properties.uuidList));
    errors.collect(ros.propertyValidator('uuidList', ros.listValidator(ros.validateString))(properties.uuidList));
    errors.collect(ros.propertyValidator('failCount', ros.requiredValidator)(properties.failCount));
    if (properties.failCount && (typeof properties.failCount) !== 'object') {
        errors.collect(ros.propertyValidator('failCount', ros.validateAllowedValues)({
            data: properties.failCount,
            allowedValues: [2, 3, 4, 5, 10, 50, 80, 100],
        }));
    }
    errors.collect(ros.propertyValidator('failCount', ros.validateNumber)(properties.failCount));
    errors.collect(ros.propertyValidator('span', ros.requiredValidator)(properties.span));
    if (properties.span && (typeof properties.span) !== 'object') {
        errors.collect(ros.propertyValidator('span', ros.validateAllowedValues)({
            data: properties.span,
            allowedValues: [1, 2, 5, 10, 15],
        }));
    }
    errors.collect(ros.propertyValidator('span', ros.validateNumber)(properties.span));
    return errors.wrap('supplied properties not correct for "RosAntiBruteForceRuleProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ThreatDetection::AntiBruteForceRule` resource
 *
 * @param properties - the TypeScript properties of a `RosAntiBruteForceRuleProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ThreatDetection::AntiBruteForceRule` resource.
 */
// @ts-ignore TS6133
function rosAntiBruteForceRulePropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosAntiBruteForceRulePropsValidator(properties).assertSuccess();
    }
    return {
        'AntiBruteForceRuleName': ros.stringToRosTemplate(properties.antiBruteForceRuleName),
        'FailCount': ros.numberToRosTemplate(properties.failCount),
        'ForbiddenTime': ros.numberToRosTemplate(properties.forbiddenTime),
        'Span': ros.numberToRosTemplate(properties.span),
        'UuidList': ros.listMapper(ros.stringToRosTemplate)(properties.uuidList),
        'DefaultRule': ros.booleanToRosTemplate(properties.defaultRule),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::ThreatDetection::AntiBruteForceRule`, which is used to create a defense rule against brute-force attacks.
 * @Note This class does not contain additional functions, so it is recommended to use the `AntiBruteForceRule` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-threatdetection-antibruteforcerule
 */
class RosAntiBruteForceRule extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosAntiBruteForceRule.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrAntiBruteForceRuleId = this.getAtt('AntiBruteForceRuleId');
        this.attrAntiBruteForceRuleName = this.getAtt('AntiBruteForceRuleName');
        this.attrDefaultRule = this.getAtt('DefaultRule');
        this.attrFailCount = this.getAtt('FailCount');
        this.attrForbiddenTime = this.getAtt('ForbiddenTime');
        this.attrSpan = this.getAtt('Span');
        this.attrUuidList = this.getAtt('UuidList');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.antiBruteForceRuleName = props.antiBruteForceRuleName;
        this.failCount = props.failCount;
        this.forbiddenTime = props.forbiddenTime;
        this.span = props.span;
        this.uuidList = props.uuidList;
        this.defaultRule = props.defaultRule;
    }
    get rosProperties() {
        return {
            antiBruteForceRuleName: this.antiBruteForceRuleName,
            failCount: this.failCount,
            forbiddenTime: this.forbiddenTime,
            span: this.span,
            uuidList: this.uuidList,
            defaultRule: this.defaultRule,
        };
    }
    renderProperties(props) {
        return rosAntiBruteForceRulePropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosAntiBruteForceRule = RosAntiBruteForceRule;
/**
 * The resource type name for this resource class.
 */
RosAntiBruteForceRule.ROS_RESOURCE_TYPE_NAME = "ALIYUN::ThreatDetection::AntiBruteForceRule";
/**
 * Determine whether the given properties match those of a `RosInstanceProps`
 *
 * @param properties - the TypeScript properties of a `RosInstanceProps`
 *
 * @returns the result of the validation.
 */
function RosInstancePropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('threatAnalysis', ros.validateString)(properties.threatAnalysis));
    errors.collect(ros.propertyValidator('sasSlsStorage', ros.validateString)(properties.sasSlsStorage));
    errors.collect(ros.propertyValidator('containerImageScan', ros.validateString)(properties.containerImageScan));
    if (properties.threatAnalysisSwitch && (typeof properties.threatAnalysisSwitch) !== 'object') {
        errors.collect(ros.propertyValidator('threatAnalysisSwitch', ros.validateAllowedValues)({
            data: properties.threatAnalysisSwitch,
            allowedValues: ["0", "1"],
        }));
    }
    errors.collect(ros.propertyValidator('threatAnalysisSwitch', ros.validateString)(properties.threatAnalysisSwitch));
    errors.collect(ros.propertyValidator('vCore', ros.validateString)(properties.vCore));
    errors.collect(ros.propertyValidator('renewPeriod', ros.validateNumber)(properties.renewPeriod));
    if (properties.sasSc && (typeof properties.sasSc) !== 'object') {
        errors.collect(ros.propertyValidator('sasSc', ros.validateAllowedValues)({
            data: properties.sasSc,
            allowedValues: ["false", "true"],
        }));
    }
    errors.collect(ros.propertyValidator('sasSc', ros.validateString)(properties.sasSc));
    if (properties.sasCspmSwitch && (typeof properties.sasCspmSwitch) !== 'object') {
        errors.collect(ros.propertyValidator('sasCspmSwitch', ros.validateAllowedValues)({
            data: properties.sasCspmSwitch,
            allowedValues: ["0", "1"],
        }));
    }
    errors.collect(ros.propertyValidator('sasCspmSwitch', ros.validateString)(properties.sasCspmSwitch));
    errors.collect(ros.propertyValidator('buyNumber', ros.validateString)(properties.buyNumber));
    if (properties.sasWebguardBoolean && (typeof properties.sasWebguardBoolean) !== 'object') {
        errors.collect(ros.propertyValidator('sasWebguardBoolean', ros.validateAllowedValues)({
            data: properties.sasWebguardBoolean,
            allowedValues: ["0", "1"],
        }));
    }
    errors.collect(ros.propertyValidator('sasWebguardBoolean', ros.validateString)(properties.sasWebguardBoolean));
    if (properties.honeypotSwitch && (typeof properties.honeypotSwitch) !== 'object') {
        errors.collect(ros.propertyValidator('honeypotSwitch', ros.validateAllowedValues)({
            data: properties.honeypotSwitch,
            allowedValues: ["1", "2"],
        }));
    }
    errors.collect(ros.propertyValidator('honeypotSwitch', ros.validateString)(properties.honeypotSwitch));
    errors.collect(ros.propertyValidator('paymentType', ros.requiredValidator)(properties.paymentType));
    if (properties.paymentType && (typeof properties.paymentType) !== 'object') {
        errors.collect(ros.propertyValidator('paymentType', ros.validateAllowedValues)({
            data: properties.paymentType,
            allowedValues: ["PayAsYouGo", "PostPaid", "PayOnDemand", "Postpaid", "PostPay", "POSTPAY", "Subscription", "PrePaid", "PrePay", "Prepaid", "PREPAY"],
        }));
    }
    errors.collect(ros.propertyValidator('paymentType', ros.validateString)(properties.paymentType));
    errors.collect(ros.propertyValidator('sasSdk', ros.validateString)(properties.sasSdk));
    errors.collect(ros.propertyValidator('sasAntiRansomware', ros.validateString)(properties.sasAntiRansomware));
    errors.collect(ros.propertyValidator('sasWebguardOrderNum', ros.validateString)(properties.sasWebguardOrderNum));
    if (properties.renewalStatus && (typeof properties.renewalStatus) !== 'object') {
        errors.collect(ros.propertyValidator('renewalStatus', ros.validateAllowedValues)({
            data: properties.renewalStatus,
            allowedValues: ["AutoRenewal", "ManualRenewal"],
        }));
    }
    errors.collect(ros.propertyValidator('renewalStatus', ros.validateString)(properties.renewalStatus));
    errors.collect(ros.propertyValidator('productType', ros.validateString)(properties.productType));
    if (properties.vulSwitch && (typeof properties.vulSwitch) !== 'object') {
        errors.collect(ros.propertyValidator('vulSwitch', ros.validateAllowedValues)({
            data: properties.vulSwitch,
            allowedValues: ["0", "1"],
        }));
    }
    errors.collect(ros.propertyValidator('vulSwitch', ros.validateString)(properties.vulSwitch));
    errors.collect(ros.propertyValidator('period', ros.validateNumber)(properties.period));
    errors.collect(ros.propertyValidator('raspCount', ros.validateString)(properties.raspCount));
    errors.collect(ros.propertyValidator('vulCount', ros.validateString)(properties.vulCount));
    errors.collect(ros.propertyValidator('versionCode', ros.requiredValidator)(properties.versionCode));
    if (properties.versionCode && (typeof properties.versionCode) !== 'object') {
        errors.collect(ros.propertyValidator('versionCode', ros.validateAllowedValues)({
            data: properties.versionCode,
            allowedValues: ["level2", "level8", "level7", "level3", "level10"],
        }));
    }
    errors.collect(ros.propertyValidator('versionCode', ros.validateString)(properties.versionCode));
    if (properties.modifyType && (typeof properties.modifyType) !== 'object') {
        errors.collect(ros.propertyValidator('modifyType', ros.validateAllowedValues)({
            data: properties.modifyType,
            allowedValues: ["Upgrade", "Downgrade"],
        }));
    }
    errors.collect(ros.propertyValidator('modifyType', ros.validateString)(properties.modifyType));
    errors.collect(ros.propertyValidator('sasCspm', ros.validateString)(properties.sasCspm));
    if (properties.sasSdkSwitch && (typeof properties.sasSdkSwitch) !== 'object') {
        errors.collect(ros.propertyValidator('sasSdkSwitch', ros.validateAllowedValues)({
            data: properties.sasSdkSwitch,
            allowedValues: ["0", "1"],
        }));
    }
    errors.collect(ros.propertyValidator('sasSdkSwitch', ros.validateString)(properties.sasSdkSwitch));
    if (properties.renewalPeriodUnit && (typeof properties.renewalPeriodUnit) !== 'object') {
        errors.collect(ros.propertyValidator('renewalPeriodUnit', ros.validateAllowedValues)({
            data: properties.renewalPeriodUnit,
            allowedValues: ["M", "Y"],
        }));
    }
    errors.collect(ros.propertyValidator('renewalPeriodUnit', ros.validateString)(properties.renewalPeriodUnit));
    errors.collect(ros.propertyValidator('containerImageScanNew', ros.validateString)(properties.containerImageScanNew));
    errors.collect(ros.propertyValidator('honeypot', ros.validateString)(properties.honeypot));
    return errors.wrap('supplied properties not correct for "RosInstanceProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ThreatDetection::Instance` resource
 *
 * @param properties - the TypeScript properties of a `RosInstanceProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ThreatDetection::Instance` resource.
 */
// @ts-ignore TS6133
function rosInstancePropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosInstancePropsValidator(properties).assertSuccess();
    }
    return {
        'PaymentType': ros.stringToRosTemplate(properties.paymentType),
        'VersionCode': ros.stringToRosTemplate(properties.versionCode),
        'BuyNumber': ros.stringToRosTemplate(properties.buyNumber),
        'ContainerImageScan': ros.stringToRosTemplate(properties.containerImageScan),
        'ContainerImageScanNew': ros.stringToRosTemplate(properties.containerImageScanNew),
        'Honeypot': ros.stringToRosTemplate(properties.honeypot),
        'HoneypotSwitch': ros.stringToRosTemplate(properties.honeypotSwitch),
        'ModifyType': ros.stringToRosTemplate(properties.modifyType),
        'Period': ros.numberToRosTemplate(properties.period),
        'ProductType': ros.stringToRosTemplate(properties.productType),
        'RaspCount': ros.stringToRosTemplate(properties.raspCount),
        'RenewalPeriodUnit': ros.stringToRosTemplate(properties.renewalPeriodUnit),
        'RenewalStatus': ros.stringToRosTemplate(properties.renewalStatus),
        'RenewPeriod': ros.numberToRosTemplate(properties.renewPeriod),
        'SasAntiRansomware': ros.stringToRosTemplate(properties.sasAntiRansomware),
        'SasCspm': ros.stringToRosTemplate(properties.sasCspm),
        'SasCspmSwitch': ros.stringToRosTemplate(properties.sasCspmSwitch),
        'SasSc': ros.stringToRosTemplate(properties.sasSc),
        'SasSdk': ros.stringToRosTemplate(properties.sasSdk),
        'SasSdkSwitch': ros.stringToRosTemplate(properties.sasSdkSwitch),
        'SasSlsStorage': ros.stringToRosTemplate(properties.sasSlsStorage),
        'SasWebguardBoolean': ros.stringToRosTemplate(properties.sasWebguardBoolean),
        'SasWebguardOrderNum': ros.stringToRosTemplate(properties.sasWebguardOrderNum),
        'ThreatAnalysis': ros.stringToRosTemplate(properties.threatAnalysis),
        'ThreatAnalysisSwitch': ros.stringToRosTemplate(properties.threatAnalysisSwitch),
        'VCore': ros.stringToRosTemplate(properties.vCore),
        'VulCount': ros.stringToRosTemplate(properties.vulCount),
        'VulSwitch': ros.stringToRosTemplate(properties.vulSwitch),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::ThreatDetection::Instance`, which is used to purchase Security Center (SAS).
 * @Note This class does not contain additional functions, so it is recommended to use the `Instance` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-threatdetection-instance
 */
class RosInstance extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosInstance.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrBuyNumber = this.getAtt('BuyNumber');
        this.attrContainerImageScan = this.getAtt('ContainerImageScan');
        this.attrContainerImageScanNew = this.getAtt('ContainerImageScanNew');
        this.attrCreateTime = this.getAtt('CreateTime');
        this.attrHoneypot = this.getAtt('Honeypot');
        this.attrHoneypotSwitch = this.getAtt('HoneypotSwitch');
        this.attrInstanceId = this.getAtt('InstanceId');
        this.attrPaymentType = this.getAtt('PaymentType');
        this.attrRaspCount = this.getAtt('RaspCount');
        this.attrRenewPeriod = this.getAtt('RenewPeriod');
        this.attrRenewalPeriodUnit = this.getAtt('RenewalPeriodUnit');
        this.attrRenewalStatus = this.getAtt('RenewalStatus');
        this.attrSasAntiRansomware = this.getAtt('SasAntiRansomware');
        this.attrSasCspm = this.getAtt('SasCspm');
        this.attrSasCspmSwitch = this.getAtt('SasCspmSwitch');
        this.attrSasSc = this.getAtt('SasSc');
        this.attrSasSdk = this.getAtt('SasSdk');
        this.attrSasSdkSwitch = this.getAtt('SasSdkSwitch');
        this.attrSasSlsStorage = this.getAtt('SasSlsStorage');
        this.attrSasWebguardBoolean = this.getAtt('SasWebguardBoolean');
        this.attrSasWebguardOrderNum = this.getAtt('SasWebguardOrderNum');
        this.attrThreatAnalysis = this.getAtt('ThreatAnalysis');
        this.attrThreatAnalysisSwitch = this.getAtt('ThreatAnalysisSwitch');
        this.attrVCore = this.getAtt('VCore');
        this.attrVersionCode = this.getAtt('VersionCode');
        this.attrVulCount = this.getAtt('VulCount');
        this.attrVulSwitch = this.getAtt('VulSwitch');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.paymentType = props.paymentType;
        this.versionCode = props.versionCode;
        this.buyNumber = props.buyNumber;
        this.containerImageScan = props.containerImageScan;
        this.containerImageScanNew = props.containerImageScanNew;
        this.honeypot = props.honeypot;
        this.honeypotSwitch = props.honeypotSwitch;
        this.modifyType = props.modifyType;
        this.period = props.period;
        this.productType = props.productType;
        this.raspCount = props.raspCount;
        this.renewalPeriodUnit = props.renewalPeriodUnit;
        this.renewalStatus = props.renewalStatus;
        this.renewPeriod = props.renewPeriod;
        this.sasAntiRansomware = props.sasAntiRansomware;
        this.sasCspm = props.sasCspm;
        this.sasCspmSwitch = props.sasCspmSwitch;
        this.sasSc = props.sasSc;
        this.sasSdk = props.sasSdk;
        this.sasSdkSwitch = props.sasSdkSwitch;
        this.sasSlsStorage = props.sasSlsStorage;
        this.sasWebguardBoolean = props.sasWebguardBoolean;
        this.sasWebguardOrderNum = props.sasWebguardOrderNum;
        this.threatAnalysis = props.threatAnalysis;
        this.threatAnalysisSwitch = props.threatAnalysisSwitch;
        this.vCore = props.vCore;
        this.vulCount = props.vulCount;
        this.vulSwitch = props.vulSwitch;
    }
    get rosProperties() {
        return {
            paymentType: this.paymentType,
            versionCode: this.versionCode,
            buyNumber: this.buyNumber,
            containerImageScan: this.containerImageScan,
            containerImageScanNew: this.containerImageScanNew,
            honeypot: this.honeypot,
            honeypotSwitch: this.honeypotSwitch,
            modifyType: this.modifyType,
            period: this.period,
            productType: this.productType,
            raspCount: this.raspCount,
            renewalPeriodUnit: this.renewalPeriodUnit,
            renewalStatus: this.renewalStatus,
            renewPeriod: this.renewPeriod,
            sasAntiRansomware: this.sasAntiRansomware,
            sasCspm: this.sasCspm,
            sasCspmSwitch: this.sasCspmSwitch,
            sasSc: this.sasSc,
            sasSdk: this.sasSdk,
            sasSdkSwitch: this.sasSdkSwitch,
            sasSlsStorage: this.sasSlsStorage,
            sasWebguardBoolean: this.sasWebguardBoolean,
            sasWebguardOrderNum: this.sasWebguardOrderNum,
            threatAnalysis: this.threatAnalysis,
            threatAnalysisSwitch: this.threatAnalysisSwitch,
            vCore: this.vCore,
            vulCount: this.vulCount,
            vulSwitch: this.vulSwitch,
        };
    }
    renderProperties(props) {
        return rosInstancePropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosInstance = RosInstance;
/**
 * The resource type name for this resource class.
 */
RosInstance.ROS_RESOURCE_TYPE_NAME = "ALIYUN::ThreatDetection::Instance";
//# sourceMappingURL=data:application/json;base64,