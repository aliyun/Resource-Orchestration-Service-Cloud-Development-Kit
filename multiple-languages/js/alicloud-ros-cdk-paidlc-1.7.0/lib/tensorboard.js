"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Tensorboard = exports.TensorboardProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const paidlc_generated_1 = require("./paidlc.generated");
Object.defineProperty(exports, "TensorboardProperty", { enumerable: true, get: function () { return paidlc_generated_1.RosTensorboard; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::PAIDLC::Tensorboard`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosTensorboard`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-paidlc-tensorboard
 */
class Tensorboard extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosTensorboard = new paidlc_generated_1.RosTensorboard(this, id, {
            maxRunningTimeMinutes: props.maxRunningTimeMinutes,
            options: props.options,
            memory: props.memory,
            summaryPath: props.summaryPath,
            sourceId: props.sourceId,
            sourceType: props.sourceType,
            workspaceId: props.workspaceId,
            cpu: props.cpu,
            uri: props.uri,
            dataSources: props.dataSources,
            summaryRelativePath: props.summaryRelativePath,
            dataSourceType: props.dataSourceType,
            displayName: props.displayName,
            jobId: props.jobId,
            dataSourceId: props.dataSourceId,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosTensorboard;
        this.attrTensorboardId = rosTensorboard.attrTensorboardId;
        this.attrTensorboardUrl = rosTensorboard.attrTensorboardUrl;
    }
}
exports.Tensorboard = Tensorboard;
//# sourceMappingURL=data:application/json;base64,