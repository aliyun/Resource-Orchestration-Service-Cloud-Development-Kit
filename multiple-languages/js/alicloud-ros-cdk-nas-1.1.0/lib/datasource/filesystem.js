"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileSystem = exports.FileSystemProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const nas_generated_1 = require("./nas.generated");
Object.defineProperty(exports, "FileSystemProperty", { enumerable: true, get: function () { return nas_generated_1.RosFileSystem; } });
/**
 * This class encapsulates and extends the ROS resource type `DATASOURCE::NAS::FileSystem`, which is used to query the information about a file system.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosFileSystem`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/datasource-nas-filesystem
 */
class FileSystem extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosFileSystem = new nas_generated_1.RosFileSystem(this, id, {
            fileSystemId: props.fileSystemId,
            refreshOptions: props.refreshOptions === undefined || props.refreshOptions === null ? 'Never' : props.refreshOptions,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosFileSystem;
        this.attrBandwidth = rosFileSystem.attrBandwidth;
        this.attrCapacity = rosFileSystem.attrCapacity;
        this.attrCreateTime = rosFileSystem.attrCreateTime;
        this.attrDescription = rosFileSystem.attrDescription;
        this.attrEncryptType = rosFileSystem.attrEncryptType;
        this.attrExpiredTime = rosFileSystem.attrExpiredTime;
        this.attrFileSystemId = rosFileSystem.attrFileSystemId;
        this.attrFileSystemType = rosFileSystem.attrFileSystemType;
        this.attrKmsKeyId = rosFileSystem.attrKmsKeyId;
        this.attrLdap = rosFileSystem.attrLdap;
        this.attrMeteredSize = rosFileSystem.attrMeteredSize;
        this.attrPaymentType = rosFileSystem.attrPaymentType;
        this.attrProtocolType = rosFileSystem.attrProtocolType;
        this.attrStorageType = rosFileSystem.attrStorageType;
        this.attrTags = rosFileSystem.attrTags;
        this.attrZoneId = rosFileSystem.attrZoneId;
    }
}
exports.FileSystem = FileSystem;
//# sourceMappingURL=data:application/json;base64,