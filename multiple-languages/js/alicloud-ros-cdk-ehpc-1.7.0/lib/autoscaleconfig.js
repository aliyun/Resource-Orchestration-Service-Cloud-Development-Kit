"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AutoScaleConfig = exports.AutoScaleConfigProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ehpc_generated_1 = require("./ehpc.generated");
Object.defineProperty(exports, "AutoScaleConfigProperty", { enumerable: true, get: function () { return ehpc_generated_1.RosAutoScaleConfig; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::EHPC::AutoScaleConfig`, which is used to configure the auto scaling settings of a cluster.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosAutoScaleConfig`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-ehpc-autoscaleconfig
 */
class AutoScaleConfig extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosAutoScaleConfig = new ehpc_generated_1.RosAutoScaleConfig(this, id, {
            extraNodesGrowRatio: props.extraNodesGrowRatio,
            enableAutoGrow: props.enableAutoGrow,
            clusterId: props.clusterId,
            shrinkIdleTimes: props.shrinkIdleTimes,
            maxNodesInCluster: props.maxNodesInCluster === undefined || props.maxNodesInCluster === null ? 100 : props.maxNodesInCluster,
            enableAutoShrink: props.enableAutoShrink,
            growRatio: props.growRatio,
            growIntervalInMinutes: props.growIntervalInMinutes,
            growTimeoutInMinutes: props.growTimeoutInMinutes,
            imageId: props.imageId,
            shrinkIntervalInMinutes: props.shrinkIntervalInMinutes,
            spotPriceLimit: props.spotPriceLimit,
            queues: props.queues,
            excludeNodes: props.excludeNodes,
            spotStrategy: props.spotStrategy,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosAutoScaleConfig;
        this.attrClusterId = rosAutoScaleConfig.attrClusterId;
    }
}
exports.AutoScaleConfig = AutoScaleConfig;
//# sourceMappingURL=data:application/json;base64,