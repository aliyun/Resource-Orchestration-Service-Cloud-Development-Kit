"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DedicatedHost = exports.DedicatedHostProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ecs_generated_1 = require("./ecs.generated");
Object.defineProperty(exports, "DedicatedHostProperty", { enumerable: true, get: function () { return ecs_generated_1.RosDedicatedHost; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::ECS::DedicatedHost`, which is used to create a dedicated host.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosDedicatedHost`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-ecs-dedicatedhost
 */
class DedicatedHost extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosDedicatedHost = new ecs_generated_1.RosDedicatedHost(this, id, {
            autoRenewPeriod: props.autoRenewPeriod === undefined || props.autoRenewPeriod === null ? 1 : props.autoRenewPeriod,
            description: props.description,
            networkAttributesSlbUdpTimeout: props.networkAttributesSlbUdpTimeout,
            resourceGroupId: props.resourceGroupId,
            zoneId: props.zoneId,
            networkAttributesUdpTimeout: props.networkAttributesUdpTimeout,
            autoRenew: props.autoRenew === undefined || props.autoRenew === null ? 'False' : props.autoRenew,
            autoPlacement: props.autoPlacement,
            period: props.period === undefined || props.period === null ? 1 : props.period,
            quantity: props.quantity === undefined || props.quantity === null ? 1 : props.quantity,
            dedicatedHostType: props.dedicatedHostType,
            dedicatedHostName: props.dedicatedHostName,
            chargeType: props.chargeType === undefined || props.chargeType === null ? 'PostPaid' : props.chargeType,
            actionOnMaintenance: props.actionOnMaintenance,
            tags: props.tags,
            periodUnit: props.periodUnit === undefined || props.periodUnit === null ? 'Month' : props.periodUnit,
            autoReleaseTime: props.autoReleaseTime,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosDedicatedHost;
        this.attrDedicatedHostIds = rosDedicatedHost.attrDedicatedHostIds;
        this.attrOrderId = rosDedicatedHost.attrOrderId;
    }
}
exports.DedicatedHost = DedicatedHost;
//# sourceMappingURL=data:application/json;base64,