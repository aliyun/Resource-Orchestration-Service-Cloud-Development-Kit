"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SecurityGroup = exports.SecurityGroupProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ecs_generated_1 = require("./ecs.generated");
Object.defineProperty(exports, "SecurityGroupProperty", { enumerable: true, get: function () { return ecs_generated_1.RosSecurityGroup; } });
/**
 * This class encapsulates and extends the ROS resource type `DATASOURCE::ECS::SecurityGroup`, which is used to query the information about a security group.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosSecurityGroup`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/datasource-ecs-securitygroup
 */
class SecurityGroup extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosSecurityGroup = new ecs_generated_1.RosSecurityGroup(this, id, {
            securityGroupId: props.securityGroupId,
            refreshOptions: props.refreshOptions === undefined || props.refreshOptions === null ? 'Never' : props.refreshOptions,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosSecurityGroup;
        this.attrCreateTime = rosSecurityGroup.attrCreateTime;
        this.attrDescription = rosSecurityGroup.attrDescription;
        this.attrInnerAccessPolicy = rosSecurityGroup.attrInnerAccessPolicy;
        this.attrPermissions = rosSecurityGroup.attrPermissions;
        this.attrResourceGroupId = rosSecurityGroup.attrResourceGroupId;
        this.attrSecurityGroupId = rosSecurityGroup.attrSecurityGroupId;
        this.attrSecurityGroupName = rosSecurityGroup.attrSecurityGroupName;
        this.attrSecurityGroupReferences = rosSecurityGroup.attrSecurityGroupReferences;
        this.attrSecurityGroupType = rosSecurityGroup.attrSecurityGroupType;
        this.attrServiceId = rosSecurityGroup.attrServiceId;
        this.attrServiceManaged = rosSecurityGroup.attrServiceManaged;
        this.attrTags = rosSecurityGroup.attrTags;
        this.attrVpcId = rosSecurityGroup.attrVpcId;
    }
}
exports.SecurityGroup = SecurityGroup;
//# sourceMappingURL=data:application/json;base64,