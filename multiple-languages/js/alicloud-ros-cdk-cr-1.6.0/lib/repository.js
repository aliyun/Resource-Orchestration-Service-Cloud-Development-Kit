"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Repository = exports.RepositoryProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const cr_generated_1 = require("./cr.generated");
Object.defineProperty(exports, "RepositoryProperty", { enumerable: true, get: function () { return cr_generated_1.RosRepository; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::CR::Repository`, which is used to create an image repository.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosRepository`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-cr-repository
 */
class Repository extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosRepository = new cr_generated_1.RosRepository(this, id, {
            tagImmutability: props.tagImmutability,
            repoNamespace: props.repoNamespace,
            repoType: props.repoType,
            instanceId: props.instanceId,
            repoName: props.repoName,
            summary: props.summary,
            detail: props.detail,
            repoSource: props.repoSource,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosRepository;
        this.attrInstanceId = rosRepository.attrInstanceId;
        this.attrRepoId = rosRepository.attrRepoId;
        this.attrRepoName = rosRepository.attrRepoName;
        this.attrRepoNamespace = rosRepository.attrRepoNamespace;
        this.attrRepoType = rosRepository.attrRepoType;
    }
}
exports.Repository = Repository;
//# sourceMappingURL=data:application/json;base64,