"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TLSPolicy = exports.TLSPolicyProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const slb_generated_1 = require("./slb.generated");
Object.defineProperty(exports, "TLSPolicyProperty", { enumerable: true, get: function () { return slb_generated_1.RosTLSPolicy; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::SLB::TLSPolicy`, which is used to create a Transport Layer Security (TLS) policy.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosTLSPolicy`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-slb-tlspolicy
 */
class TLSPolicy extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosTLSPolicy = new slb_generated_1.RosTLSPolicy(this, id, {
            ciphers: props.ciphers,
            tlsPolicyName: props.tlsPolicyName,
            tlsVersions: props.tlsVersions,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosTLSPolicy;
        this.attrCiphers = rosTLSPolicy.attrCiphers;
        this.attrCreateTime = rosTLSPolicy.attrCreateTime;
        this.attrInstanceId = rosTLSPolicy.attrInstanceId;
        this.attrTlsPolicyName = rosTLSPolicy.attrTlsPolicyName;
        this.attrTlsVersions = rosTLSPolicy.attrTlsVersions;
    }
}
exports.TLSPolicy = TLSPolicy;
//# sourceMappingURL=data:application/json;base64,