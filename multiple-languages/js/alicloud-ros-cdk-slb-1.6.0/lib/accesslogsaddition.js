"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AccessLogsAddition = exports.AccessLogsAdditionProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const slb_generated_1 = require("./slb.generated");
Object.defineProperty(exports, "AccessLogsAdditionProperty", { enumerable: true, get: function () { return slb_generated_1.RosAccessLogsAddition; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::SLB::AccessLogsAddition`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosAccessLogsAddition`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-slb-accesslogsaddition
 */
class AccessLogsAddition extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosAccessLogsAddition = new slb_generated_1.RosAccessLogsAddition(this, id, {
            logStore: props.logStore,
            loadBalancerId: props.loadBalancerId,
            logProject: props.logProject,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosAccessLogsAddition;
    }
}
exports.AccessLogsAddition = AccessLogsAddition;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjZXNzbG9nc2FkZGl0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYWNjZXNzbG9nc2FkZGl0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDhDQUE4QztBQUM5QyxtREFBd0Q7QUFFdEIsMkdBRnpCLHFDQUFxQixPQUU4QjtBQThCNUQ7Ozs7R0FJRztBQUNILE1BQWEsa0JBQW1CLFNBQVEsR0FBRyxDQUFDLFFBQVE7SUFNaEQ7Ozs7T0FJRztJQUNILFlBQVksS0FBb0IsRUFBRSxFQUFVLEVBQUUsS0FBOEIsRUFBRSxtQ0FBMkMsSUFBSTtRQUN6SCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ2pCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQ2IsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLGdDQUFnQyxHQUFHLGdDQUFnQyxDQUFDO1FBRXpFLE1BQU0scUJBQXFCLEdBQUcsSUFBSSxxQ0FBcUIsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFHO1lBQy9ELFFBQVEsRUFBRSxLQUFLLENBQUMsUUFBUTtZQUN4QixjQUFjLEVBQUUsS0FBSyxDQUFDLGNBQWM7WUFDcEMsVUFBVSxFQUFFLEtBQUssQ0FBQyxVQUFVO1NBQy9CLEVBQUUsZ0NBQWdDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO1FBQ3BGLElBQUksQ0FBQyxRQUFRLEdBQUcscUJBQXFCLENBQUM7SUFDMUMsQ0FBQztDQUNKO0FBekJELGdEQXlCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHJvcyBmcm9tICdAYWxpY2xvdWQvcm9zLWNkay1jb3JlJztcbmltcG9ydCB7IFJvc0FjY2Vzc0xvZ3NBZGRpdGlvbiB9IGZyb20gJy4vc2xiLmdlbmVyYXRlZCc7XG4vLyBHZW5lcmF0ZWQgZnJvbSB0aGUgQWxpQ2xvdWQgUk9TIFJlc291cmNlIFNwZWNpZmljYXRpb25cbmV4cG9ydCB7IFJvc0FjY2Vzc0xvZ3NBZGRpdGlvbiBhcyBBY2Nlc3NMb2dzQWRkaXRpb25Qcm9wZXJ0eSB9O1xuXG4vKipcbiAqIFByb3BlcnRpZXMgZm9yIGRlZmluaW5nIGEgYEFjY2Vzc0xvZ3NBZGRpdGlvbmAuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2FsaXl1bi1zbGItYWNjZXNzbG9nc2FkZGl0aW9uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQWNjZXNzTG9nc0FkZGl0aW9uUHJvcHMge1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgbG9hZEJhbGFuY2VySWQ6IFRoZSBsb2FkIGJhbGFuY2VyIGlkLk9ubHkgU0xCIExheWVyIDcgbG9hZCBiYWxhbmNpbmcgKEhUVFBcXC9IVFRQUyBsaXN0ZW5pbmcpIHN1cHBvcnRzIHRoZSBhY2Nlc3MgbG9nIGZ1bmN0aW9uLlByZXJlcXVpc2l0ZXMxLiBBIFNMQiBpbnN0YW5jZSBoYXMgYmVlbiBjcmVhdGVkLiBGb3IgZGV0YWlscywgc2VlIENyZWF0aW5nIGFuZCBNYW5hZ2luZyBDTEIgSW5zdGFuY2VzLjIuIEEgdmlydHVhbCBzZXJ2ZXIgZ3JvdXAgaGFzIGJlZW4gY3JlYXRlZC4gQmFja2VuZCBzZXJ2ZXJzIGhhdmUgYmVlbiBhZGRlZCB0byB0aGUgc2VydmVyIGdyb3VwLjMuIEhUVFAgb3IgSFRUUFMgbGlzdGVuaW5nIGhhcyBiZWVuIGNvbmZpZ3VyZWQgZm9yIENMQi4gNC4gWW91IGhhdmUgZW5hYmxlZCB0aGUgbG9nIHNlcnZpY2UuIEZvciBkZXRhaWxzLCBzZWUgQWN0aXZhdGluZyB0aGUgTG9nIFNlcnZpY2UuXG4gICAgICovXG4gICAgcmVhZG9ubHkgbG9hZEJhbGFuY2VySWQ6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGxvZ1Byb2plY3Q6IFRoZSBsb2cgcHJvamVjdCBuYW1lLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGxvZ1Byb2plY3Q6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGxvZ1N0b3JlOiBUaGUgbG9nIHN0b3JlIG5hbWUuXG4gICAgICovXG4gICAgcmVhZG9ubHkgbG9nU3RvcmU6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcbn1cblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgYEFjY2Vzc0xvZ3NBZGRpdGlvbmAuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSUFjY2Vzc0xvZ3NBZGRpdGlvbiBleHRlbmRzIHJvcy5JUmVzb3VyY2Uge1xuICAgIHJlYWRvbmx5IHByb3BzOiBBY2Nlc3NMb2dzQWRkaXRpb25Qcm9wcztcbn1cbi8qKlxuICogVGhpcyBjbGFzcyBlbmNhcHN1bGF0ZXMgYW5kIGV4dGVuZHMgdGhlIFJPUyByZXNvdXJjZSB0eXBlIGBBTElZVU46OlNMQjo6QWNjZXNzTG9nc0FkZGl0aW9uYC5cbiAqIEBOb3RlIFRoaXMgY2xhc3MgbWF5IGhhdmUgc29tZSBuZXcgZnVuY3Rpb25zIHRvIGZhY2lsaXRhdGUgZGV2ZWxvcG1lbnQsIHNvIGl0IGlzIHJlY29tbWVuZGVkIHRvIHVzZSB0aGlzIGNsYXNzIGluc3RlYWQgb2YgYFJvc0FjY2Vzc0xvZ3NBZGRpdGlvbmBmb3IgYSBtb3JlIGNvbnZlbmllbnQgZGV2ZWxvcG1lbnQgZXhwZXJpZW5jZS5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvYWxpeXVuLXNsYi1hY2Nlc3Nsb2dzYWRkaXRpb25cbiAqL1xuZXhwb3J0IGNsYXNzIEFjY2Vzc0xvZ3NBZGRpdGlvbiBleHRlbmRzIHJvcy5SZXNvdXJjZSBpbXBsZW1lbnRzIElBY2Nlc3NMb2dzQWRkaXRpb24ge1xuICAgIHByb3RlY3RlZCBzY29wZTogcm9zLkNvbnN0cnVjdDtcbiAgICBwcm90ZWN0ZWQgaWQ6IHN0cmluZztcbiAgICBwdWJsaWMgcmVhZG9ubHkgcHJvcHM6IEFjY2Vzc0xvZ3NBZGRpdGlvblByb3BzO1xuICAgIHByb3RlY3RlZCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIFBhcmFtIHNjb3BlIC0gc2NvcGUgaW4gd2hpY2ggdGhpcyByZXNvdXJjZSBpcyBkZWZpbmVkXG4gICAgICogUGFyYW0gaWQgICAgLSBzY29wZWQgaWQgb2YgdGhlIHJlc291cmNlXG4gICAgICogUGFyYW0gcHJvcHMgLSByZXNvdXJjZSBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IHJvcy5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBBY2Nlc3NMb2dzQWRkaXRpb25Qcm9wcywgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6Ym9vbGVhbiA9IHRydWUpIHtcbiAgICAgICAgc3VwZXIoc2NvcGUsIGlkKTtcbiAgICAgICAgdGhpcy5zY29wZSA9IHNjb3BlO1xuICAgICAgICB0aGlzLmlkID0gaWQ7XG4gICAgICAgIHRoaXMucHJvcHMgPSBwcm9wcztcbiAgICAgICAgdGhpcy5lbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCA9IGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50O1xuXG4gICAgICAgIGNvbnN0IHJvc0FjY2Vzc0xvZ3NBZGRpdGlvbiA9IG5ldyBSb3NBY2Nlc3NMb2dzQWRkaXRpb24odGhpcywgaWQsICB7XG4gICAgICAgICAgICBsb2dTdG9yZTogcHJvcHMubG9nU3RvcmUsXG4gICAgICAgICAgICBsb2FkQmFsYW5jZXJJZDogcHJvcHMubG9hZEJhbGFuY2VySWQsXG4gICAgICAgICAgICBsb2dQcm9qZWN0OiBwcm9wcy5sb2dQcm9qZWN0LFxuICAgICAgICB9LCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCAmJiB0aGlzLnN0YWNrLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50KTtcbiAgICAgICAgdGhpcy5yZXNvdXJjZSA9IHJvc0FjY2Vzc0xvZ3NBZGRpdGlvbjtcbiAgICB9XG59XG4iXX0=