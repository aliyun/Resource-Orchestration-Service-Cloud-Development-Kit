"use strict";
// Generated from the AliCloud ROS Resource Specification
Object.defineProperty(exports, "__esModule", { value: true });
exports.RosSlsGroup = exports.RosSiteMonitor = exports.RosResourceMetricRule = exports.RosNamespace = exports.RosMonitoringAgentProcess = exports.RosMonitoringAgent = exports.RosMonitorGroupInstances = exports.RosMonitorGroup = exports.RosMetricRuleTemplate = exports.RosMetricRuleTargets = exports.RosGroupMetricRule = exports.RosEventRuleTargets = exports.RosEventRule = exports.RosDynamicTagGroup = exports.RosContactGroup = exports.RosContact = void 0;
const ros = require("@alicloud/ros-cdk-core");
/**
 * Determine whether the given properties match those of a `RosContactProps`
 *
 * @param properties - the TypeScript properties of a `RosContactProps`
 *
 * @returns the result of the validation.
 */
function RosContactPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('describe', ros.requiredValidator)(properties.describe));
    errors.collect(ros.propertyValidator('describe', ros.validateString)(properties.describe));
    errors.collect(ros.propertyValidator('contactName', ros.requiredValidator)(properties.contactName));
    errors.collect(ros.propertyValidator('contactName', ros.validateString)(properties.contactName));
    errors.collect(ros.propertyValidator('channels', ros.requiredValidator)(properties.channels));
    errors.collect(ros.propertyValidator('channels', RosContact_ChannelsPropertyValidator)(properties.channels));
    return errors.wrap('supplied properties not correct for "RosContactProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::CMS::Contact` resource
 *
 * @param properties - the TypeScript properties of a `RosContactProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::CMS::Contact` resource.
 */
// @ts-ignore TS6133
function rosContactPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosContactPropsValidator(properties).assertSuccess();
    }
    return {
        'Channels': rosContactChannelsPropertyToRosTemplate(properties.channels),
        'ContactName': ros.stringToRosTemplate(properties.contactName),
        'Describe': ros.stringToRosTemplate(properties.describe),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::CMS::Contact`, which is used to create an alert contact.
 * @Note This class does not contain additional functions, so it is recommended to use the `Contact` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-cms-contact
 */
class RosContact extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosContact.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrContactName = this.getAtt('ContactName');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.channels = props.channels;
        this.contactName = props.contactName;
        this.describe = props.describe;
    }
    get rosProperties() {
        return {
            channels: this.channels,
            contactName: this.contactName,
            describe: this.describe,
        };
    }
    renderProperties(props) {
        return rosContactPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosContact = RosContact;
/**
 * The resource type name for this resource class.
 */
RosContact.ROS_RESOURCE_TYPE_NAME = "ALIYUN::CMS::Contact";
/**
 * Determine whether the given properties match those of a `ChannelsProperty`
 *
 * @param properties - the TypeScript properties of a `ChannelsProperty`
 *
 * @returns the result of the validation.
 */
function RosContact_ChannelsPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('mail', ros.validateString)(properties.mail));
    errors.collect(ros.propertyValidator('aliIm', ros.validateString)(properties.aliIm));
    errors.collect(ros.propertyValidator('dingWebHook', ros.validateString)(properties.dingWebHook));
    errors.collect(ros.propertyValidator('sms', ros.validateString)(properties.sms));
    return errors.wrap('supplied properties not correct for "ChannelsProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::CMS::Contact.Channels` resource
 *
 * @param properties - the TypeScript properties of a `ChannelsProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::CMS::Contact.Channels` resource.
 */
// @ts-ignore TS6133
function rosContactChannelsPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosContact_ChannelsPropertyValidator(properties).assertSuccess();
    return {
        'Mail': ros.stringToRosTemplate(properties.mail),
        'AliIM': ros.stringToRosTemplate(properties.aliIm),
        'DingWebHook': ros.stringToRosTemplate(properties.dingWebHook),
        'SMS': ros.stringToRosTemplate(properties.sms),
    };
}
/**
 * Determine whether the given properties match those of a `RosContactGroupProps`
 *
 * @param properties - the TypeScript properties of a `RosContactGroupProps`
 *
 * @returns the result of the validation.
 */
function RosContactGroupPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('describe', ros.requiredValidator)(properties.describe));
    errors.collect(ros.propertyValidator('describe', ros.validateString)(properties.describe));
    errors.collect(ros.propertyValidator('contactGroupName', ros.requiredValidator)(properties.contactGroupName));
    errors.collect(ros.propertyValidator('contactGroupName', ros.validateString)(properties.contactGroupName));
    errors.collect(ros.propertyValidator('contactNames', ros.requiredValidator)(properties.contactNames));
    if (properties.contactNames && (Array.isArray(properties.contactNames) || (typeof properties.contactNames) === 'string')) {
        errors.collect(ros.propertyValidator('contactNames', ros.validateLength)({
            data: properties.contactNames.length,
            min: 1,
            max: 100,
        }));
    }
    errors.collect(ros.propertyValidator('contactNames', ros.listValidator(ros.validateString))(properties.contactNames));
    return errors.wrap('supplied properties not correct for "RosContactGroupProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::CMS::ContactGroup` resource
 *
 * @param properties - the TypeScript properties of a `RosContactGroupProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::CMS::ContactGroup` resource.
 */
// @ts-ignore TS6133
function rosContactGroupPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosContactGroupPropsValidator(properties).assertSuccess();
    }
    return {
        'ContactGroupName': ros.stringToRosTemplate(properties.contactGroupName),
        'ContactNames': ros.listMapper(ros.stringToRosTemplate)(properties.contactNames),
        'Describe': ros.stringToRosTemplate(properties.describe),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::CMS::ContactGroup`, which is used to create an alert contact group.
 * @Note This class does not contain additional functions, so it is recommended to use the `ContactGroup` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-cms-contactgroup
 */
class RosContactGroup extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosContactGroup.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrContactGroupName = this.getAtt('ContactGroupName');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.contactGroupName = props.contactGroupName;
        this.contactNames = props.contactNames;
        this.describe = props.describe;
    }
    get rosProperties() {
        return {
            contactGroupName: this.contactGroupName,
            contactNames: this.contactNames,
            describe: this.describe,
        };
    }
    renderProperties(props) {
        return rosContactGroupPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosContactGroup = RosContactGroup;
/**
 * The resource type name for this resource class.
 */
RosContactGroup.ROS_RESOURCE_TYPE_NAME = "ALIYUN::CMS::ContactGroup";
/**
 * Determine whether the given properties match those of a `RosDynamicTagGroupProps`
 *
 * @param properties - the TypeScript properties of a `RosDynamicTagGroupProps`
 *
 * @returns the result of the validation.
 */
function RosDynamicTagGroupPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('contactGroupList', ros.requiredValidator)(properties.contactGroupList));
    errors.collect(ros.propertyValidator('contactGroupList', ros.listValidator(ros.validateString))(properties.contactGroupList));
    if (properties.matchExpressFilterRelation && (typeof properties.matchExpressFilterRelation) !== 'object') {
        errors.collect(ros.propertyValidator('matchExpressFilterRelation', ros.validateAllowedValues)({
            data: properties.matchExpressFilterRelation,
            allowedValues: ["and", "or"],
        }));
    }
    errors.collect(ros.propertyValidator('matchExpressFilterRelation', ros.validateString)(properties.matchExpressFilterRelation));
    errors.collect(ros.propertyValidator('enableSubscribeEvent', ros.validateBoolean)(properties.enableSubscribeEvent));
    if (properties.templateIdList && (Array.isArray(properties.templateIdList) || (typeof properties.templateIdList) === 'string')) {
        errors.collect(ros.propertyValidator('templateIdList', ros.validateLength)({
            data: properties.templateIdList.length,
            min: undefined,
            max: 5,
        }));
    }
    errors.collect(ros.propertyValidator('templateIdList', ros.listValidator(ros.validateString))(properties.templateIdList));
    errors.collect(ros.propertyValidator('tagKey', ros.requiredValidator)(properties.tagKey));
    errors.collect(ros.propertyValidator('tagKey', ros.validateString)(properties.tagKey));
    errors.collect(ros.propertyValidator('enableInstallAgent', ros.validateBoolean)(properties.enableInstallAgent));
    if (properties.matchExpress && (Array.isArray(properties.matchExpress) || (typeof properties.matchExpress) === 'string')) {
        errors.collect(ros.propertyValidator('matchExpress', ros.validateLength)({
            data: properties.matchExpress.length,
            min: undefined,
            max: 1,
        }));
    }
    errors.collect(ros.propertyValidator('matchExpress', ros.listValidator(RosDynamicTagGroup_MatchExpressPropertyValidator))(properties.matchExpress));
    return errors.wrap('supplied properties not correct for "RosDynamicTagGroupProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::CMS::DynamicTagGroup` resource
 *
 * @param properties - the TypeScript properties of a `RosDynamicTagGroupProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::CMS::DynamicTagGroup` resource.
 */
// @ts-ignore TS6133
function rosDynamicTagGroupPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosDynamicTagGroupPropsValidator(properties).assertSuccess();
    }
    return {
        'ContactGroupList': ros.listMapper(ros.stringToRosTemplate)(properties.contactGroupList),
        'TagKey': ros.stringToRosTemplate(properties.tagKey),
        'EnableInstallAgent': ros.booleanToRosTemplate(properties.enableInstallAgent),
        'EnableSubscribeEvent': ros.booleanToRosTemplate(properties.enableSubscribeEvent),
        'MatchExpress': ros.listMapper(rosDynamicTagGroupMatchExpressPropertyToRosTemplate)(properties.matchExpress),
        'MatchExpressFilterRelation': ros.stringToRosTemplate(properties.matchExpressFilterRelation),
        'TemplateIdList': ros.listMapper(ros.stringToRosTemplate)(properties.templateIdList),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::CMS::DynamicTagGroup`, which is used to create a tag rule based on which cloud resources are automatically added to an application group.
 * @Note This class does not contain additional functions, so it is recommended to use the `DynamicTagGroup` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-cms-dynamictaggroup
 */
class RosDynamicTagGroup extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosDynamicTagGroup.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrDynamicTagRuleId = this.getAtt('DynamicTagRuleId');
        this.attrTagKey = this.getAtt('TagKey');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.contactGroupList = props.contactGroupList;
        this.tagKey = props.tagKey;
        this.enableInstallAgent = props.enableInstallAgent;
        this.enableSubscribeEvent = props.enableSubscribeEvent;
        this.matchExpress = props.matchExpress;
        this.matchExpressFilterRelation = props.matchExpressFilterRelation;
        this.templateIdList = props.templateIdList;
    }
    get rosProperties() {
        return {
            contactGroupList: this.contactGroupList,
            tagKey: this.tagKey,
            enableInstallAgent: this.enableInstallAgent,
            enableSubscribeEvent: this.enableSubscribeEvent,
            matchExpress: this.matchExpress,
            matchExpressFilterRelation: this.matchExpressFilterRelation,
            templateIdList: this.templateIdList,
        };
    }
    renderProperties(props) {
        return rosDynamicTagGroupPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosDynamicTagGroup = RosDynamicTagGroup;
/**
 * The resource type name for this resource class.
 */
RosDynamicTagGroup.ROS_RESOURCE_TYPE_NAME = "ALIYUN::CMS::DynamicTagGroup";
/**
 * Determine whether the given properties match those of a `MatchExpressProperty`
 *
 * @param properties - the TypeScript properties of a `MatchExpressProperty`
 *
 * @returns the result of the validation.
 */
function RosDynamicTagGroup_MatchExpressPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('tagValue', ros.requiredValidator)(properties.tagValue));
    errors.collect(ros.propertyValidator('tagValue', ros.validateString)(properties.tagValue));
    errors.collect(ros.propertyValidator('tagValueMatchFunction', ros.requiredValidator)(properties.tagValueMatchFunction));
    if (properties.tagValueMatchFunction && (typeof properties.tagValueMatchFunction) !== 'object') {
        errors.collect(ros.propertyValidator('tagValueMatchFunction', ros.validateAllowedValues)({
            data: properties.tagValueMatchFunction,
            allowedValues: ["contains", "startWith", "endWith", "notContains", "equals", "all"],
        }));
    }
    errors.collect(ros.propertyValidator('tagValueMatchFunction', ros.validateString)(properties.tagValueMatchFunction));
    return errors.wrap('supplied properties not correct for "MatchExpressProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::CMS::DynamicTagGroup.MatchExpress` resource
 *
 * @param properties - the TypeScript properties of a `MatchExpressProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::CMS::DynamicTagGroup.MatchExpress` resource.
 */
// @ts-ignore TS6133
function rosDynamicTagGroupMatchExpressPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosDynamicTagGroup_MatchExpressPropertyValidator(properties).assertSuccess();
    return {
        'TagValue': ros.stringToRosTemplate(properties.tagValue),
        'TagValueMatchFunction': ros.stringToRosTemplate(properties.tagValueMatchFunction),
    };
}
/**
 * Determine whether the given properties match those of a `RosEventRuleProps`
 *
 * @param properties - the TypeScript properties of a `RosEventRuleProps`
 *
 * @returns the result of the validation.
 */
function RosEventRulePropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('eventPattern', ros.requiredValidator)(properties.eventPattern));
    if (properties.eventPattern && (Array.isArray(properties.eventPattern) || (typeof properties.eventPattern) === 'string')) {
        errors.collect(ros.propertyValidator('eventPattern', ros.validateLength)({
            data: properties.eventPattern.length,
            min: undefined,
            max: 20,
        }));
    }
    errors.collect(ros.propertyValidator('eventPattern', ros.listValidator(RosEventRule_EventPatternPropertyValidator))(properties.eventPattern));
    errors.collect(ros.propertyValidator('description', ros.validateString)(properties.description));
    errors.collect(ros.propertyValidator('eventType', ros.validateString)(properties.eventType));
    errors.collect(ros.propertyValidator('state', ros.validateString)(properties.state));
    errors.collect(ros.propertyValidator('ruleName', ros.requiredValidator)(properties.ruleName));
    errors.collect(ros.propertyValidator('ruleName', ros.validateString)(properties.ruleName));
    errors.collect(ros.propertyValidator('groupId', ros.validateString)(properties.groupId));
    return errors.wrap('supplied properties not correct for "RosEventRuleProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::CMS::EventRule` resource
 *
 * @param properties - the TypeScript properties of a `RosEventRuleProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::CMS::EventRule` resource.
 */
// @ts-ignore TS6133
function rosEventRulePropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosEventRulePropsValidator(properties).assertSuccess();
    }
    return {
        'EventPattern': ros.listMapper(rosEventRuleEventPatternPropertyToRosTemplate)(properties.eventPattern),
        'RuleName': ros.stringToRosTemplate(properties.ruleName),
        'Description': ros.stringToRosTemplate(properties.description),
        'EventType': ros.stringToRosTemplate(properties.eventType),
        'GroupId': ros.stringToRosTemplate(properties.groupId),
        'State': ros.stringToRosTemplate(properties.state),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::CMS::EventRule`, which is used to create or modify an event-triggered alert rule. If the specified rule name does not exist, an event-triggered alert rule is created. If the specified rule name exists, the specified event-triggered alert rule is modified.
 * @Note This class does not contain additional functions, so it is recommended to use the `EventRule` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-cms-eventrule
 */
class RosEventRule extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosEventRule.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrData = this.getAtt('Data');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.eventPattern = props.eventPattern;
        this.ruleName = props.ruleName;
        this.description = props.description;
        this.eventType = props.eventType;
        this.groupId = props.groupId;
        this.state = props.state;
    }
    get rosProperties() {
        return {
            eventPattern: this.eventPattern,
            ruleName: this.ruleName,
            description: this.description,
            eventType: this.eventType,
            groupId: this.groupId,
            state: this.state,
        };
    }
    renderProperties(props) {
        return rosEventRulePropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosEventRule = RosEventRule;
/**
 * The resource type name for this resource class.
 */
RosEventRule.ROS_RESOURCE_TYPE_NAME = "ALIYUN::CMS::EventRule";
/**
 * Determine whether the given properties match those of a `EventPatternProperty`
 *
 * @param properties - the TypeScript properties of a `EventPatternProperty`
 *
 * @returns the result of the validation.
 */
function RosEventRule_EventPatternPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('nameList', ros.listValidator(ros.validateAny))(properties.nameList));
    errors.collect(ros.propertyValidator('levelList', ros.listValidator(ros.validateAny))(properties.levelList));
    errors.collect(ros.propertyValidator('statusList', ros.listValidator(ros.validateAny))(properties.statusList));
    errors.collect(ros.propertyValidator('eventTypeList', ros.listValidator(ros.validateAny))(properties.eventTypeList));
    errors.collect(ros.propertyValidator('product', ros.validateString)(properties.product));
    return errors.wrap('supplied properties not correct for "EventPatternProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::CMS::EventRule.EventPattern` resource
 *
 * @param properties - the TypeScript properties of a `EventPatternProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::CMS::EventRule.EventPattern` resource.
 */
// @ts-ignore TS6133
function rosEventRuleEventPatternPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosEventRule_EventPatternPropertyValidator(properties).assertSuccess();
    return {
        'NameList': ros.listMapper(ros.objectToRosTemplate)(properties.nameList),
        'LevelList': ros.listMapper(ros.objectToRosTemplate)(properties.levelList),
        'StatusList': ros.listMapper(ros.objectToRosTemplate)(properties.statusList),
        'EventTypeList': ros.listMapper(ros.objectToRosTemplate)(properties.eventTypeList),
        'Product': ros.stringToRosTemplate(properties.product),
    };
}
/**
 * Determine whether the given properties match those of a `RosEventRuleTargetsProps`
 *
 * @param properties - the TypeScript properties of a `RosEventRuleTargetsProps`
 *
 * @returns the result of the validation.
 */
function RosEventRuleTargetsPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    if (properties.contactParameters && (Array.isArray(properties.contactParameters) || (typeof properties.contactParameters) === 'string')) {
        errors.collect(ros.propertyValidator('contactParameters', ros.validateLength)({
            data: properties.contactParameters.length,
            min: undefined,
            max: 5,
        }));
    }
    errors.collect(ros.propertyValidator('contactParameters', ros.listValidator(RosEventRuleTargets_ContactParametersPropertyValidator))(properties.contactParameters));
    if (properties.slsParameters && (Array.isArray(properties.slsParameters) || (typeof properties.slsParameters) === 'string')) {
        errors.collect(ros.propertyValidator('slsParameters', ros.validateLength)({
            data: properties.slsParameters.length,
            min: undefined,
            max: 5,
        }));
    }
    errors.collect(ros.propertyValidator('slsParameters', ros.listValidator(RosEventRuleTargets_SlsParametersPropertyValidator))(properties.slsParameters));
    if (properties.webhookParameters && (Array.isArray(properties.webhookParameters) || (typeof properties.webhookParameters) === 'string')) {
        errors.collect(ros.propertyValidator('webhookParameters', ros.validateLength)({
            data: properties.webhookParameters.length,
            min: undefined,
            max: 5,
        }));
    }
    errors.collect(ros.propertyValidator('webhookParameters', ros.listValidator(RosEventRuleTargets_WebhookParametersPropertyValidator))(properties.webhookParameters));
    if (properties.fcParameters && (Array.isArray(properties.fcParameters) || (typeof properties.fcParameters) === 'string')) {
        errors.collect(ros.propertyValidator('fcParameters', ros.validateLength)({
            data: properties.fcParameters.length,
            min: undefined,
            max: 5,
        }));
    }
    errors.collect(ros.propertyValidator('fcParameters', ros.listValidator(RosEventRuleTargets_FcParametersPropertyValidator))(properties.fcParameters));
    errors.collect(ros.propertyValidator('ruleName', ros.requiredValidator)(properties.ruleName));
    errors.collect(ros.propertyValidator('ruleName', ros.validateString)(properties.ruleName));
    if (properties.mnsParameters && (Array.isArray(properties.mnsParameters) || (typeof properties.mnsParameters) === 'string')) {
        errors.collect(ros.propertyValidator('mnsParameters', ros.validateLength)({
            data: properties.mnsParameters.length,
            min: undefined,
            max: 5,
        }));
    }
    errors.collect(ros.propertyValidator('mnsParameters', ros.listValidator(RosEventRuleTargets_MnsParametersPropertyValidator))(properties.mnsParameters));
    return errors.wrap('supplied properties not correct for "RosEventRuleTargetsProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::CMS::EventRuleTargets` resource
 *
 * @param properties - the TypeScript properties of a `RosEventRuleTargetsProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::CMS::EventRuleTargets` resource.
 */
// @ts-ignore TS6133
function rosEventRuleTargetsPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosEventRuleTargetsPropsValidator(properties).assertSuccess();
    }
    return {
        'RuleName': ros.stringToRosTemplate(properties.ruleName),
        'ContactParameters': ros.listMapper(rosEventRuleTargetsContactParametersPropertyToRosTemplate)(properties.contactParameters),
        'FcParameters': ros.listMapper(rosEventRuleTargetsFcParametersPropertyToRosTemplate)(properties.fcParameters),
        'MnsParameters': ros.listMapper(rosEventRuleTargetsMnsParametersPropertyToRosTemplate)(properties.mnsParameters),
        'SlsParameters': ros.listMapper(rosEventRuleTargetsSlsParametersPropertyToRosTemplate)(properties.slsParameters),
        'WebhookParameters': ros.listMapper(rosEventRuleTargetsWebhookParametersPropertyToRosTemplate)(properties.webhookParameters),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::CMS::EventRuleTargets`, which is used to add or change the recipients to which alert notifications are sent based on an event-triggered alert rule.
 * @Note This class does not contain additional functions, so it is recommended to use the `EventRuleTargets` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-cms-eventruletargets
 */
class RosEventRuleTargets extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosEventRuleTargets.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.ruleName = props.ruleName;
        this.contactParameters = props.contactParameters;
        this.fcParameters = props.fcParameters;
        this.mnsParameters = props.mnsParameters;
        this.slsParameters = props.slsParameters;
        this.webhookParameters = props.webhookParameters;
    }
    get rosProperties() {
        return {
            ruleName: this.ruleName,
            contactParameters: this.contactParameters,
            fcParameters: this.fcParameters,
            mnsParameters: this.mnsParameters,
            slsParameters: this.slsParameters,
            webhookParameters: this.webhookParameters,
        };
    }
    renderProperties(props) {
        return rosEventRuleTargetsPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosEventRuleTargets = RosEventRuleTargets;
/**
 * The resource type name for this resource class.
 */
RosEventRuleTargets.ROS_RESOURCE_TYPE_NAME = "ALIYUN::CMS::EventRuleTargets";
/**
 * Determine whether the given properties match those of a `ContactParametersProperty`
 *
 * @param properties - the TypeScript properties of a `ContactParametersProperty`
 *
 * @returns the result of the validation.
 */
function RosEventRuleTargets_ContactParametersPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('contactGroupName', ros.validateString)(properties.contactGroupName));
    errors.collect(ros.propertyValidator('level', ros.validateString)(properties.level));
    errors.collect(ros.propertyValidator('identity', ros.validateString)(properties.identity));
    return errors.wrap('supplied properties not correct for "ContactParametersProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::CMS::EventRuleTargets.ContactParameters` resource
 *
 * @param properties - the TypeScript properties of a `ContactParametersProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::CMS::EventRuleTargets.ContactParameters` resource.
 */
// @ts-ignore TS6133
function rosEventRuleTargetsContactParametersPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosEventRuleTargets_ContactParametersPropertyValidator(properties).assertSuccess();
    return {
        'ContactGroupName': ros.stringToRosTemplate(properties.contactGroupName),
        'Level': ros.stringToRosTemplate(properties.level),
        'Id': ros.stringToRosTemplate(properties.identity),
    };
}
/**
 * Determine whether the given properties match those of a `FcParametersProperty`
 *
 * @param properties - the TypeScript properties of a `FcParametersProperty`
 *
 * @returns the result of the validation.
 */
function RosEventRuleTargets_FcParametersPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('functionName', ros.validateString)(properties.functionName));
    errors.collect(ros.propertyValidator('serviceName', ros.validateString)(properties.serviceName));
    errors.collect(ros.propertyValidator('region', ros.validateString)(properties.region));
    errors.collect(ros.propertyValidator('identity', ros.validateString)(properties.identity));
    return errors.wrap('supplied properties not correct for "FcParametersProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::CMS::EventRuleTargets.FcParameters` resource
 *
 * @param properties - the TypeScript properties of a `FcParametersProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::CMS::EventRuleTargets.FcParameters` resource.
 */
// @ts-ignore TS6133
function rosEventRuleTargetsFcParametersPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosEventRuleTargets_FcParametersPropertyValidator(properties).assertSuccess();
    return {
        'FunctionName': ros.stringToRosTemplate(properties.functionName),
        'ServiceName': ros.stringToRosTemplate(properties.serviceName),
        'Region': ros.stringToRosTemplate(properties.region),
        'Id': ros.stringToRosTemplate(properties.identity),
    };
}
/**
 * Determine whether the given properties match those of a `MnsParametersProperty`
 *
 * @param properties - the TypeScript properties of a `MnsParametersProperty`
 *
 * @returns the result of the validation.
 */
function RosEventRuleTargets_MnsParametersPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('region', ros.validateString)(properties.region));
    errors.collect(ros.propertyValidator('queue', ros.validateString)(properties.queue));
    errors.collect(ros.propertyValidator('identity', ros.validateString)(properties.identity));
    return errors.wrap('supplied properties not correct for "MnsParametersProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::CMS::EventRuleTargets.MnsParameters` resource
 *
 * @param properties - the TypeScript properties of a `MnsParametersProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::CMS::EventRuleTargets.MnsParameters` resource.
 */
// @ts-ignore TS6133
function rosEventRuleTargetsMnsParametersPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosEventRuleTargets_MnsParametersPropertyValidator(properties).assertSuccess();
    return {
        'Region': ros.stringToRosTemplate(properties.region),
        'Queue': ros.stringToRosTemplate(properties.queue),
        'Id': ros.stringToRosTemplate(properties.identity),
    };
}
/**
 * Determine whether the given properties match those of a `SlsParametersProperty`
 *
 * @param properties - the TypeScript properties of a `SlsParametersProperty`
 *
 * @returns the result of the validation.
 */
function RosEventRuleTargets_SlsParametersPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('project', ros.validateString)(properties.project));
    errors.collect(ros.propertyValidator('logStore', ros.validateString)(properties.logStore));
    errors.collect(ros.propertyValidator('region', ros.validateString)(properties.region));
    errors.collect(ros.propertyValidator('identity', ros.validateString)(properties.identity));
    return errors.wrap('supplied properties not correct for "SlsParametersProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::CMS::EventRuleTargets.SlsParameters` resource
 *
 * @param properties - the TypeScript properties of a `SlsParametersProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::CMS::EventRuleTargets.SlsParameters` resource.
 */
// @ts-ignore TS6133
function rosEventRuleTargetsSlsParametersPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosEventRuleTargets_SlsParametersPropertyValidator(properties).assertSuccess();
    return {
        'Project': ros.stringToRosTemplate(properties.project),
        'LogStore': ros.stringToRosTemplate(properties.logStore),
        'Region': ros.stringToRosTemplate(properties.region),
        'Id': ros.stringToRosTemplate(properties.identity),
    };
}
/**
 * Determine whether the given properties match those of a `WebhookParametersProperty`
 *
 * @param properties - the TypeScript properties of a `WebhookParametersProperty`
 *
 * @returns the result of the validation.
 */
function RosEventRuleTargets_WebhookParametersPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('method', ros.validateString)(properties.method));
    errors.collect(ros.propertyValidator('protocol', ros.validateString)(properties.protocol));
    errors.collect(ros.propertyValidator('url', ros.validateString)(properties.url));
    errors.collect(ros.propertyValidator('identity', ros.validateString)(properties.identity));
    return errors.wrap('supplied properties not correct for "WebhookParametersProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::CMS::EventRuleTargets.WebhookParameters` resource
 *
 * @param properties - the TypeScript properties of a `WebhookParametersProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::CMS::EventRuleTargets.WebhookParameters` resource.
 */
// @ts-ignore TS6133
function rosEventRuleTargetsWebhookParametersPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosEventRuleTargets_WebhookParametersPropertyValidator(properties).assertSuccess();
    return {
        'Method': ros.stringToRosTemplate(properties.method),
        'Protocol': ros.stringToRosTemplate(properties.protocol),
        'Url': ros.stringToRosTemplate(properties.url),
        'Id': ros.stringToRosTemplate(properties.identity),
    };
}
/**
 * Determine whether the given properties match those of a `RosGroupMetricRuleProps`
 *
 * @param properties - the TypeScript properties of a `RosGroupMetricRuleProps`
 *
 * @returns the result of the validation.
 */
function RosGroupMetricRulePropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('noEffectiveInterval', ros.validateString)(properties.noEffectiveInterval));
    if (properties.silenceTime && (typeof properties.silenceTime) !== 'object') {
        errors.collect(ros.propertyValidator('silenceTime', ros.validateRange)({
            data: properties.silenceTime,
            min: 60,
            max: undefined,
        }));
    }
    errors.collect(ros.propertyValidator('silenceTime', ros.validateNumber)(properties.silenceTime));
    errors.collect(ros.propertyValidator('category', ros.requiredValidator)(properties.category));
    errors.collect(ros.propertyValidator('category', ros.validateString)(properties.category));
    errors.collect(ros.propertyValidator('ruleId', ros.requiredValidator)(properties.ruleId));
    errors.collect(ros.propertyValidator('ruleId', ros.validateString)(properties.ruleId));
    errors.collect(ros.propertyValidator('dimensions', ros.validateString)(properties.dimensions));
    errors.collect(ros.propertyValidator('period', ros.validateNumber)(properties.period));
    errors.collect(ros.propertyValidator('effectiveInterval', ros.validateString)(properties.effectiveInterval));
    errors.collect(ros.propertyValidator('namespace', ros.requiredValidator)(properties.namespace));
    errors.collect(ros.propertyValidator('namespace', ros.validateString)(properties.namespace));
    errors.collect(ros.propertyValidator('groupId', ros.requiredValidator)(properties.groupId));
    errors.collect(ros.propertyValidator('groupId', ros.validateString)(properties.groupId));
    errors.collect(ros.propertyValidator('metricName', ros.requiredValidator)(properties.metricName));
    errors.collect(ros.propertyValidator('metricName', ros.validateString)(properties.metricName));
    errors.collect(ros.propertyValidator('escalations', ros.requiredValidator)(properties.escalations));
    errors.collect(ros.propertyValidator('escalations', RosGroupMetricRule_EscalationsPropertyValidator)(properties.escalations));
    errors.collect(ros.propertyValidator('emailSubject', ros.validateString)(properties.emailSubject));
    errors.collect(ros.propertyValidator('webhook', ros.validateString)(properties.webhook));
    errors.collect(ros.propertyValidator('ruleName', ros.requiredValidator)(properties.ruleName));
    errors.collect(ros.propertyValidator('ruleName', ros.validateString)(properties.ruleName));
    errors.collect(ros.propertyValidator('interval', ros.validateNumber)(properties.interval));
    return errors.wrap('supplied properties not correct for "RosGroupMetricRuleProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::CMS::GroupMetricRule` resource
 *
 * @param properties - the TypeScript properties of a `RosGroupMetricRuleProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::CMS::GroupMetricRule` resource.
 */
// @ts-ignore TS6133
function rosGroupMetricRulePropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosGroupMetricRulePropsValidator(properties).assertSuccess();
    }
    return {
        'Category': ros.stringToRosTemplate(properties.category),
        'Escalations': rosGroupMetricRuleEscalationsPropertyToRosTemplate(properties.escalations),
        'GroupId': ros.stringToRosTemplate(properties.groupId),
        'MetricName': ros.stringToRosTemplate(properties.metricName),
        'Namespace': ros.stringToRosTemplate(properties.namespace),
        'RuleId': ros.stringToRosTemplate(properties.ruleId),
        'RuleName': ros.stringToRosTemplate(properties.ruleName),
        'Dimensions': ros.stringToRosTemplate(properties.dimensions),
        'EffectiveInterval': ros.stringToRosTemplate(properties.effectiveInterval),
        'EmailSubject': ros.stringToRosTemplate(properties.emailSubject),
        'Interval': ros.numberToRosTemplate(properties.interval),
        'NoEffectiveInterval': ros.stringToRosTemplate(properties.noEffectiveInterval),
        'Period': ros.numberToRosTemplate(properties.period),
        'SilenceTime': ros.numberToRosTemplate(properties.silenceTime),
        'Webhook': ros.stringToRosTemplate(properties.webhook),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::CMS::GroupMetricRule`, which is used to create an alert rule for an application group.
 * @Note This class does not contain additional functions, so it is recommended to use the `GroupMetricRule` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-cms-groupmetricrule
 */
class RosGroupMetricRule extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosGroupMetricRule.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrRuleId = this.getAtt('RuleId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.category = props.category;
        this.escalations = props.escalations;
        this.groupId = props.groupId;
        this.metricName = props.metricName;
        this.namespace = props.namespace;
        this.ruleId = props.ruleId;
        this.ruleName = props.ruleName;
        this.dimensions = props.dimensions;
        this.effectiveInterval = props.effectiveInterval;
        this.emailSubject = props.emailSubject;
        this.interval = props.interval;
        this.noEffectiveInterval = props.noEffectiveInterval;
        this.period = props.period;
        this.silenceTime = props.silenceTime;
        this.webhook = props.webhook;
    }
    get rosProperties() {
        return {
            category: this.category,
            escalations: this.escalations,
            groupId: this.groupId,
            metricName: this.metricName,
            namespace: this.namespace,
            ruleId: this.ruleId,
            ruleName: this.ruleName,
            dimensions: this.dimensions,
            effectiveInterval: this.effectiveInterval,
            emailSubject: this.emailSubject,
            interval: this.interval,
            noEffectiveInterval: this.noEffectiveInterval,
            period: this.period,
            silenceTime: this.silenceTime,
            webhook: this.webhook,
        };
    }
    renderProperties(props) {
        return rosGroupMetricRulePropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosGroupMetricRule = RosGroupMetricRule;
/**
 * The resource type name for this resource class.
 */
RosGroupMetricRule.ROS_RESOURCE_TYPE_NAME = "ALIYUN::CMS::GroupMetricRule";
/**
 * Determine whether the given properties match those of a `CriticalProperty`
 *
 * @param properties - the TypeScript properties of a `CriticalProperty`
 *
 * @returns the result of the validation.
 */
function RosGroupMetricRule_CriticalPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('comparisonOperator', ros.requiredValidator)(properties.comparisonOperator));
    errors.collect(ros.propertyValidator('comparisonOperator', ros.validateString)(properties.comparisonOperator));
    errors.collect(ros.propertyValidator('times', ros.requiredValidator)(properties.times));
    errors.collect(ros.propertyValidator('times', ros.validateNumber)(properties.times));
    errors.collect(ros.propertyValidator('statistics', ros.requiredValidator)(properties.statistics));
    errors.collect(ros.propertyValidator('statistics', ros.validateString)(properties.statistics));
    errors.collect(ros.propertyValidator('threshold', ros.requiredValidator)(properties.threshold));
    errors.collect(ros.propertyValidator('threshold', ros.validateNumber)(properties.threshold));
    return errors.wrap('supplied properties not correct for "CriticalProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::CMS::GroupMetricRule.Critical` resource
 *
 * @param properties - the TypeScript properties of a `CriticalProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::CMS::GroupMetricRule.Critical` resource.
 */
// @ts-ignore TS6133
function rosGroupMetricRuleCriticalPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosGroupMetricRule_CriticalPropertyValidator(properties).assertSuccess();
    return {
        'ComparisonOperator': ros.stringToRosTemplate(properties.comparisonOperator),
        'Times': ros.numberToRosTemplate(properties.times),
        'Statistics': ros.stringToRosTemplate(properties.statistics),
        'Threshold': ros.numberToRosTemplate(properties.threshold),
    };
}
/**
 * Determine whether the given properties match those of a `EscalationsProperty`
 *
 * @param properties - the TypeScript properties of a `EscalationsProperty`
 *
 * @returns the result of the validation.
 */
function RosGroupMetricRule_EscalationsPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('critical', RosGroupMetricRule_CriticalPropertyValidator)(properties.critical));
    errors.collect(ros.propertyValidator('info', RosGroupMetricRule_InfoPropertyValidator)(properties.info));
    errors.collect(ros.propertyValidator('warn', RosGroupMetricRule_WarnPropertyValidator)(properties.warn));
    return errors.wrap('supplied properties not correct for "EscalationsProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::CMS::GroupMetricRule.Escalations` resource
 *
 * @param properties - the TypeScript properties of a `EscalationsProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::CMS::GroupMetricRule.Escalations` resource.
 */
// @ts-ignore TS6133
function rosGroupMetricRuleEscalationsPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosGroupMetricRule_EscalationsPropertyValidator(properties).assertSuccess();
    return {
        'Critical': rosGroupMetricRuleCriticalPropertyToRosTemplate(properties.critical),
        'Info': rosGroupMetricRuleInfoPropertyToRosTemplate(properties.info),
        'Warn': rosGroupMetricRuleWarnPropertyToRosTemplate(properties.warn),
    };
}
/**
 * Determine whether the given properties match those of a `InfoProperty`
 *
 * @param properties - the TypeScript properties of a `InfoProperty`
 *
 * @returns the result of the validation.
 */
function RosGroupMetricRule_InfoPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('comparisonOperator', ros.requiredValidator)(properties.comparisonOperator));
    errors.collect(ros.propertyValidator('comparisonOperator', ros.validateString)(properties.comparisonOperator));
    errors.collect(ros.propertyValidator('times', ros.requiredValidator)(properties.times));
    errors.collect(ros.propertyValidator('times', ros.validateNumber)(properties.times));
    errors.collect(ros.propertyValidator('statistics', ros.requiredValidator)(properties.statistics));
    errors.collect(ros.propertyValidator('statistics', ros.validateString)(properties.statistics));
    errors.collect(ros.propertyValidator('threshold', ros.requiredValidator)(properties.threshold));
    errors.collect(ros.propertyValidator('threshold', ros.validateNumber)(properties.threshold));
    return errors.wrap('supplied properties not correct for "InfoProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::CMS::GroupMetricRule.Info` resource
 *
 * @param properties - the TypeScript properties of a `InfoProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::CMS::GroupMetricRule.Info` resource.
 */
// @ts-ignore TS6133
function rosGroupMetricRuleInfoPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosGroupMetricRule_InfoPropertyValidator(properties).assertSuccess();
    return {
        'ComparisonOperator': ros.stringToRosTemplate(properties.comparisonOperator),
        'Times': ros.numberToRosTemplate(properties.times),
        'Statistics': ros.stringToRosTemplate(properties.statistics),
        'Threshold': ros.numberToRosTemplate(properties.threshold),
    };
}
/**
 * Determine whether the given properties match those of a `WarnProperty`
 *
 * @param properties - the TypeScript properties of a `WarnProperty`
 *
 * @returns the result of the validation.
 */
function RosGroupMetricRule_WarnPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('comparisonOperator', ros.requiredValidator)(properties.comparisonOperator));
    errors.collect(ros.propertyValidator('comparisonOperator', ros.validateString)(properties.comparisonOperator));
    errors.collect(ros.propertyValidator('times', ros.requiredValidator)(properties.times));
    errors.collect(ros.propertyValidator('times', ros.validateNumber)(properties.times));
    errors.collect(ros.propertyValidator('statistics', ros.requiredValidator)(properties.statistics));
    errors.collect(ros.propertyValidator('statistics', ros.validateString)(properties.statistics));
    errors.collect(ros.propertyValidator('threshold', ros.requiredValidator)(properties.threshold));
    errors.collect(ros.propertyValidator('threshold', ros.validateNumber)(properties.threshold));
    return errors.wrap('supplied properties not correct for "WarnProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::CMS::GroupMetricRule.Warn` resource
 *
 * @param properties - the TypeScript properties of a `WarnProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::CMS::GroupMetricRule.Warn` resource.
 */
// @ts-ignore TS6133
function rosGroupMetricRuleWarnPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosGroupMetricRule_WarnPropertyValidator(properties).assertSuccess();
    return {
        'ComparisonOperator': ros.stringToRosTemplate(properties.comparisonOperator),
        'Times': ros.numberToRosTemplate(properties.times),
        'Statistics': ros.stringToRosTemplate(properties.statistics),
        'Threshold': ros.numberToRosTemplate(properties.threshold),
    };
}
/**
 * Determine whether the given properties match those of a `RosMetricRuleTargetsProps`
 *
 * @param properties - the TypeScript properties of a `RosMetricRuleTargetsProps`
 *
 * @returns the result of the validation.
 */
function RosMetricRuleTargetsPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('ruleId', ros.requiredValidator)(properties.ruleId));
    errors.collect(ros.propertyValidator('ruleId', ros.validateString)(properties.ruleId));
    errors.collect(ros.propertyValidator('targets', ros.requiredValidator)(properties.targets));
    if (properties.targets && (Array.isArray(properties.targets) || (typeof properties.targets) === 'string')) {
        errors.collect(ros.propertyValidator('targets', ros.validateLength)({
            data: properties.targets.length,
            min: 1,
            max: 5,
        }));
    }
    errors.collect(ros.propertyValidator('targets', ros.listValidator(RosMetricRuleTargets_TargetsPropertyValidator))(properties.targets));
    return errors.wrap('supplied properties not correct for "RosMetricRuleTargetsProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::CMS::MetricRuleTargets` resource
 *
 * @param properties - the TypeScript properties of a `RosMetricRuleTargetsProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::CMS::MetricRuleTargets` resource.
 */
// @ts-ignore TS6133
function rosMetricRuleTargetsPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosMetricRuleTargetsPropsValidator(properties).assertSuccess();
    }
    return {
        'RuleId': ros.stringToRosTemplate(properties.ruleId),
        'Targets': ros.listMapper(rosMetricRuleTargetsTargetsPropertyToRosTemplate)(properties.targets),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::CMS::MetricRuleTargets`, which is used to add or modify one or more message resources for an alert rule.
 * @Note This class does not contain additional functions, so it is recommended to use the `MetricRuleTargets` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-cms-metricruletargets
 */
class RosMetricRuleTargets extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosMetricRuleTargets.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrArns = this.getAtt('Arns');
        this.attrIds = this.getAtt('Ids');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.ruleId = props.ruleId;
        this.targets = props.targets;
    }
    get rosProperties() {
        return {
            ruleId: this.ruleId,
            targets: this.targets,
        };
    }
    renderProperties(props) {
        return rosMetricRuleTargetsPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosMetricRuleTargets = RosMetricRuleTargets;
/**
 * The resource type name for this resource class.
 */
RosMetricRuleTargets.ROS_RESOURCE_TYPE_NAME = "ALIYUN::CMS::MetricRuleTargets";
/**
 * Determine whether the given properties match those of a `TargetsProperty`
 *
 * @param properties - the TypeScript properties of a `TargetsProperty`
 *
 * @returns the result of the validation.
 */
function RosMetricRuleTargets_TargetsPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('level', ros.validateString)(properties.level));
    errors.collect(ros.propertyValidator('arn', ros.requiredValidator)(properties.arn));
    errors.collect(ros.propertyValidator('arn', ros.validateString)(properties.arn));
    errors.collect(ros.propertyValidator('identity', ros.requiredValidator)(properties.identity));
    errors.collect(ros.propertyValidator('identity', ros.validateString)(properties.identity));
    return errors.wrap('supplied properties not correct for "TargetsProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::CMS::MetricRuleTargets.Targets` resource
 *
 * @param properties - the TypeScript properties of a `TargetsProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::CMS::MetricRuleTargets.Targets` resource.
 */
// @ts-ignore TS6133
function rosMetricRuleTargetsTargetsPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosMetricRuleTargets_TargetsPropertyValidator(properties).assertSuccess();
    return {
        'Level': ros.stringToRosTemplate(properties.level),
        'Arn': ros.stringToRosTemplate(properties.arn),
        'Id': ros.stringToRosTemplate(properties.identity),
    };
}
/**
 * Determine whether the given properties match those of a `RosMetricRuleTemplateProps`
 *
 * @param properties - the TypeScript properties of a `RosMetricRuleTemplateProps`
 *
 * @returns the result of the validation.
 */
function RosMetricRuleTemplatePropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    if (properties.alertTemplates && (Array.isArray(properties.alertTemplates) || (typeof properties.alertTemplates) === 'string')) {
        errors.collect(ros.propertyValidator('alertTemplates', ros.validateLength)({
            data: properties.alertTemplates.length,
            min: 0,
            max: 200,
        }));
    }
    errors.collect(ros.propertyValidator('alertTemplates', ros.listValidator(RosMetricRuleTemplate_AlertTemplatesPropertyValidator))(properties.alertTemplates));
    errors.collect(ros.propertyValidator('description', ros.validateString)(properties.description));
    errors.collect(ros.propertyValidator('restVersion', ros.validateNumber)(properties.restVersion));
    errors.collect(ros.propertyValidator('templateId', ros.validateNumber)(properties.templateId));
    errors.collect(ros.propertyValidator('name', ros.requiredValidator)(properties.name));
    errors.collect(ros.propertyValidator('name', ros.validateString)(properties.name));
    return errors.wrap('supplied properties not correct for "RosMetricRuleTemplateProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::CMS::MetricRuleTemplate` resource
 *
 * @param properties - the TypeScript properties of a `RosMetricRuleTemplateProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::CMS::MetricRuleTemplate` resource.
 */
// @ts-ignore TS6133
function rosMetricRuleTemplatePropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosMetricRuleTemplatePropsValidator(properties).assertSuccess();
    }
    return {
        'Name': ros.stringToRosTemplate(properties.name),
        'AlertTemplates': ros.listMapper(rosMetricRuleTemplateAlertTemplatesPropertyToRosTemplate)(properties.alertTemplates),
        'Description': ros.stringToRosTemplate(properties.description),
        'RestVersion': ros.numberToRosTemplate(properties.restVersion),
        'TemplateId': ros.numberToRosTemplate(properties.templateId),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::CMS::MetricRuleTemplate`, which is used to create an alert rule template.
 * @Note This class does not contain additional functions, so it is recommended to use the `MetricRuleTemplate` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-cms-metricruletemplate
 */
class RosMetricRuleTemplate extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosMetricRuleTemplate.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrId = this.getAtt('Id');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.name = props.name;
        this.alertTemplates = props.alertTemplates;
        this.description = props.description;
        this.restVersion = props.restVersion;
        this.templateId = props.templateId;
    }
    get rosProperties() {
        return {
            name: this.name,
            alertTemplates: this.alertTemplates,
            description: this.description,
            restVersion: this.restVersion,
            templateId: this.templateId,
        };
    }
    renderProperties(props) {
        return rosMetricRuleTemplatePropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosMetricRuleTemplate = RosMetricRuleTemplate;
/**
 * The resource type name for this resource class.
 */
RosMetricRuleTemplate.ROS_RESOURCE_TYPE_NAME = "ALIYUN::CMS::MetricRuleTemplate";
/**
 * Determine whether the given properties match those of a `AlertTemplatesProperty`
 *
 * @param properties - the TypeScript properties of a `AlertTemplatesProperty`
 *
 * @returns the result of the validation.
 */
function RosMetricRuleTemplate_AlertTemplatesPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('metricName', ros.requiredValidator)(properties.metricName));
    errors.collect(ros.propertyValidator('metricName', ros.validateString)(properties.metricName));
    errors.collect(ros.propertyValidator('category', ros.requiredValidator)(properties.category));
    errors.collect(ros.propertyValidator('category', ros.validateString)(properties.category));
    errors.collect(ros.propertyValidator('escalations', RosMetricRuleTemplate_EscalationsPropertyValidator)(properties.escalations));
    errors.collect(ros.propertyValidator('period', ros.validateNumber)(properties.period));
    errors.collect(ros.propertyValidator('webhook', ros.validateString)(properties.webhook));
    errors.collect(ros.propertyValidator('namespace', ros.requiredValidator)(properties.namespace));
    errors.collect(ros.propertyValidator('namespace', ros.validateString)(properties.namespace));
    errors.collect(ros.propertyValidator('ruleName', ros.requiredValidator)(properties.ruleName));
    errors.collect(ros.propertyValidator('ruleName', ros.validateString)(properties.ruleName));
    errors.collect(ros.propertyValidator('selector', ros.validateString)(properties.selector));
    return errors.wrap('supplied properties not correct for "AlertTemplatesProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::CMS::MetricRuleTemplate.AlertTemplates` resource
 *
 * @param properties - the TypeScript properties of a `AlertTemplatesProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::CMS::MetricRuleTemplate.AlertTemplates` resource.
 */
// @ts-ignore TS6133
function rosMetricRuleTemplateAlertTemplatesPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosMetricRuleTemplate_AlertTemplatesPropertyValidator(properties).assertSuccess();
    return {
        'MetricName': ros.stringToRosTemplate(properties.metricName),
        'Category': ros.stringToRosTemplate(properties.category),
        'Escalations': rosMetricRuleTemplateEscalationsPropertyToRosTemplate(properties.escalations),
        'Period': ros.numberToRosTemplate(properties.period),
        'Webhook': ros.stringToRosTemplate(properties.webhook),
        'Namespace': ros.stringToRosTemplate(properties.namespace),
        'RuleName': ros.stringToRosTemplate(properties.ruleName),
        'Selector': ros.stringToRosTemplate(properties.selector),
    };
}
/**
 * Determine whether the given properties match those of a `CriticalProperty`
 *
 * @param properties - the TypeScript properties of a `CriticalProperty`
 *
 * @returns the result of the validation.
 */
function RosMetricRuleTemplate_CriticalPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('comparisonOperator', ros.requiredValidator)(properties.comparisonOperator));
    if (properties.comparisonOperator && (typeof properties.comparisonOperator) !== 'object') {
        errors.collect(ros.propertyValidator('comparisonOperator', ros.validateAllowedValues)({
            data: properties.comparisonOperator,
            allowedValues: ["GreaterThanOrEqualToThreshold", "GreaterThanThreshold", "LessThanOrEqualToThreshold", "LessThanThreshold", "NotEqualToThreshold", "GreaterThanYesterday", "LessThanYesterday", "GreaterThanLastWeek", "LessThanLastWeek", "GreaterThanLastPeriod", "LessThanLastPeriod"],
        }));
    }
    errors.collect(ros.propertyValidator('comparisonOperator', ros.validateString)(properties.comparisonOperator));
    errors.collect(ros.propertyValidator('times', ros.requiredValidator)(properties.times));
    errors.collect(ros.propertyValidator('times', ros.validateNumber)(properties.times));
    errors.collect(ros.propertyValidator('statistics', ros.requiredValidator)(properties.statistics));
    errors.collect(ros.propertyValidator('statistics', ros.validateString)(properties.statistics));
    errors.collect(ros.propertyValidator('threshold', ros.requiredValidator)(properties.threshold));
    errors.collect(ros.propertyValidator('threshold', ros.validateString)(properties.threshold));
    return errors.wrap('supplied properties not correct for "CriticalProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::CMS::MetricRuleTemplate.Critical` resource
 *
 * @param properties - the TypeScript properties of a `CriticalProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::CMS::MetricRuleTemplate.Critical` resource.
 */
// @ts-ignore TS6133
function rosMetricRuleTemplateCriticalPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosMetricRuleTemplate_CriticalPropertyValidator(properties).assertSuccess();
    return {
        'ComparisonOperator': ros.stringToRosTemplate(properties.comparisonOperator),
        'Times': ros.numberToRosTemplate(properties.times),
        'Statistics': ros.stringToRosTemplate(properties.statistics),
        'Threshold': ros.stringToRosTemplate(properties.threshold),
    };
}
/**
 * Determine whether the given properties match those of a `EscalationsProperty`
 *
 * @param properties - the TypeScript properties of a `EscalationsProperty`
 *
 * @returns the result of the validation.
 */
function RosMetricRuleTemplate_EscalationsPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('critical', ros.requiredValidator)(properties.critical));
    errors.collect(ros.propertyValidator('critical', RosMetricRuleTemplate_CriticalPropertyValidator)(properties.critical));
    errors.collect(ros.propertyValidator('info', RosMetricRuleTemplate_InfoPropertyValidator)(properties.info));
    errors.collect(ros.propertyValidator('warn', RosMetricRuleTemplate_WarnPropertyValidator)(properties.warn));
    return errors.wrap('supplied properties not correct for "EscalationsProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::CMS::MetricRuleTemplate.Escalations` resource
 *
 * @param properties - the TypeScript properties of a `EscalationsProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::CMS::MetricRuleTemplate.Escalations` resource.
 */
// @ts-ignore TS6133
function rosMetricRuleTemplateEscalationsPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosMetricRuleTemplate_EscalationsPropertyValidator(properties).assertSuccess();
    return {
        'Critical': rosMetricRuleTemplateCriticalPropertyToRosTemplate(properties.critical),
        'Info': rosMetricRuleTemplateInfoPropertyToRosTemplate(properties.info),
        'Warn': rosMetricRuleTemplateWarnPropertyToRosTemplate(properties.warn),
    };
}
/**
 * Determine whether the given properties match those of a `InfoProperty`
 *
 * @param properties - the TypeScript properties of a `InfoProperty`
 *
 * @returns the result of the validation.
 */
function RosMetricRuleTemplate_InfoPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('comparisonOperator', ros.requiredValidator)(properties.comparisonOperator));
    if (properties.comparisonOperator && (typeof properties.comparisonOperator) !== 'object') {
        errors.collect(ros.propertyValidator('comparisonOperator', ros.validateAllowedValues)({
            data: properties.comparisonOperator,
            allowedValues: ["GreaterThanOrEqualToThreshold", "GreaterThanThreshold", "LessThanOrEqualToThreshold", "LessThanThreshold", "NotEqualToThreshold", "GreaterThanYesterday", "LessThanYesterday", "GreaterThanLastWeek", "LessThanLastWeek", "GreaterThanLastPeriod", "LessThanLastPeriod"],
        }));
    }
    errors.collect(ros.propertyValidator('comparisonOperator', ros.validateString)(properties.comparisonOperator));
    errors.collect(ros.propertyValidator('times', ros.requiredValidator)(properties.times));
    errors.collect(ros.propertyValidator('times', ros.validateNumber)(properties.times));
    errors.collect(ros.propertyValidator('statistics', ros.requiredValidator)(properties.statistics));
    errors.collect(ros.propertyValidator('statistics', ros.validateString)(properties.statistics));
    errors.collect(ros.propertyValidator('threshold', ros.requiredValidator)(properties.threshold));
    errors.collect(ros.propertyValidator('threshold', ros.validateString)(properties.threshold));
    return errors.wrap('supplied properties not correct for "InfoProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::CMS::MetricRuleTemplate.Info` resource
 *
 * @param properties - the TypeScript properties of a `InfoProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::CMS::MetricRuleTemplate.Info` resource.
 */
// @ts-ignore TS6133
function rosMetricRuleTemplateInfoPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosMetricRuleTemplate_InfoPropertyValidator(properties).assertSuccess();
    return {
        'ComparisonOperator': ros.stringToRosTemplate(properties.comparisonOperator),
        'Times': ros.numberToRosTemplate(properties.times),
        'Statistics': ros.stringToRosTemplate(properties.statistics),
        'Threshold': ros.stringToRosTemplate(properties.threshold),
    };
}
/**
 * Determine whether the given properties match those of a `WarnProperty`
 *
 * @param properties - the TypeScript properties of a `WarnProperty`
 *
 * @returns the result of the validation.
 */
function RosMetricRuleTemplate_WarnPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('comparisonOperator', ros.requiredValidator)(properties.comparisonOperator));
    if (properties.comparisonOperator && (typeof properties.comparisonOperator) !== 'object') {
        errors.collect(ros.propertyValidator('comparisonOperator', ros.validateAllowedValues)({
            data: properties.comparisonOperator,
            allowedValues: ["GreaterThanOrEqualToThreshold", "GreaterThanThreshold", "LessThanOrEqualToThreshold", "LessThanThreshold", "NotEqualToThreshold", "GreaterThanYesterday", "LessThanYesterday", "GreaterThanLastWeek", "LessThanLastWeek", "GreaterThanLastPeriod", "LessThanLastPeriod"],
        }));
    }
    errors.collect(ros.propertyValidator('comparisonOperator', ros.validateString)(properties.comparisonOperator));
    errors.collect(ros.propertyValidator('times', ros.requiredValidator)(properties.times));
    errors.collect(ros.propertyValidator('times', ros.validateNumber)(properties.times));
    errors.collect(ros.propertyValidator('statistics', ros.requiredValidator)(properties.statistics));
    errors.collect(ros.propertyValidator('statistics', ros.validateString)(properties.statistics));
    errors.collect(ros.propertyValidator('threshold', ros.requiredValidator)(properties.threshold));
    errors.collect(ros.propertyValidator('threshold', ros.validateString)(properties.threshold));
    return errors.wrap('supplied properties not correct for "WarnProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::CMS::MetricRuleTemplate.Warn` resource
 *
 * @param properties - the TypeScript properties of a `WarnProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::CMS::MetricRuleTemplate.Warn` resource.
 */
// @ts-ignore TS6133
function rosMetricRuleTemplateWarnPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosMetricRuleTemplate_WarnPropertyValidator(properties).assertSuccess();
    return {
        'ComparisonOperator': ros.stringToRosTemplate(properties.comparisonOperator),
        'Times': ros.numberToRosTemplate(properties.times),
        'Statistics': ros.stringToRosTemplate(properties.statistics),
        'Threshold': ros.stringToRosTemplate(properties.threshold),
    };
}
/**
 * Determine whether the given properties match those of a `RosMonitorGroupProps`
 *
 * @param properties - the TypeScript properties of a `RosMonitorGroupProps`
 *
 * @returns the result of the validation.
 */
function RosMonitorGroupPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('groupName', ros.requiredValidator)(properties.groupName));
    errors.collect(ros.propertyValidator('groupName', ros.validateString)(properties.groupName));
    errors.collect(ros.propertyValidator('contactGroups', ros.validateString)(properties.contactGroups));
    return errors.wrap('supplied properties not correct for "RosMonitorGroupProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::CMS::MonitorGroup` resource
 *
 * @param properties - the TypeScript properties of a `RosMonitorGroupProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::CMS::MonitorGroup` resource.
 */
// @ts-ignore TS6133
function rosMonitorGroupPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosMonitorGroupPropsValidator(properties).assertSuccess();
    }
    return {
        'GroupName': ros.stringToRosTemplate(properties.groupName),
        'ContactGroups': ros.stringToRosTemplate(properties.contactGroups),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::CMS::MonitorGroup`, which is used to create an application group.
 * @Note This class does not contain additional functions, so it is recommended to use the `MonitorGroup` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-cms-monitorgroup
 */
class RosMonitorGroup extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosMonitorGroup.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrGroupId = this.getAtt('GroupId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.groupName = props.groupName;
        this.contactGroups = props.contactGroups;
    }
    get rosProperties() {
        return {
            groupName: this.groupName,
            contactGroups: this.contactGroups,
        };
    }
    renderProperties(props) {
        return rosMonitorGroupPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosMonitorGroup = RosMonitorGroup;
/**
 * The resource type name for this resource class.
 */
RosMonitorGroup.ROS_RESOURCE_TYPE_NAME = "ALIYUN::CMS::MonitorGroup";
/**
 * Determine whether the given properties match those of a `RosMonitorGroupInstancesProps`
 *
 * @param properties - the TypeScript properties of a `RosMonitorGroupInstancesProps`
 *
 * @returns the result of the validation.
 */
function RosMonitorGroupInstancesPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('instances', ros.requiredValidator)(properties.instances));
    if (properties.instances && (Array.isArray(properties.instances) || (typeof properties.instances) === 'string')) {
        errors.collect(ros.propertyValidator('instances', ros.validateLength)({
            data: properties.instances.length,
            min: 1,
            max: 100,
        }));
    }
    errors.collect(ros.propertyValidator('instances', ros.listValidator(RosMonitorGroupInstances_InstancesPropertyValidator))(properties.instances));
    errors.collect(ros.propertyValidator('groupId', ros.requiredValidator)(properties.groupId));
    errors.collect(ros.propertyValidator('groupId', ros.validateString)(properties.groupId));
    return errors.wrap('supplied properties not correct for "RosMonitorGroupInstancesProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::CMS::MonitorGroupInstances` resource
 *
 * @param properties - the TypeScript properties of a `RosMonitorGroupInstancesProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::CMS::MonitorGroupInstances` resource.
 */
// @ts-ignore TS6133
function rosMonitorGroupInstancesPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosMonitorGroupInstancesPropsValidator(properties).assertSuccess();
    }
    return {
        'GroupId': ros.stringToRosTemplate(properties.groupId),
        'Instances': ros.listMapper(rosMonitorGroupInstancesInstancesPropertyToRosTemplate)(properties.instances),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::CMS::MonitorGroupInstances`, which is used to add instances to an application group.
 * @Note This class does not contain additional functions, so it is recommended to use the `MonitorGroupInstances` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-cms-monitorgroupinstances
 */
class RosMonitorGroupInstances extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosMonitorGroupInstances.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrGroupId = this.getAtt('GroupId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.groupId = props.groupId;
        this.instances = props.instances;
    }
    get rosProperties() {
        return {
            groupId: this.groupId,
            instances: this.instances,
        };
    }
    renderProperties(props) {
        return rosMonitorGroupInstancesPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosMonitorGroupInstances = RosMonitorGroupInstances;
/**
 * The resource type name for this resource class.
 */
RosMonitorGroupInstances.ROS_RESOURCE_TYPE_NAME = "ALIYUN::CMS::MonitorGroupInstances";
/**
 * Determine whether the given properties match those of a `InstancesProperty`
 *
 * @param properties - the TypeScript properties of a `InstancesProperty`
 *
 * @returns the result of the validation.
 */
function RosMonitorGroupInstances_InstancesPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('instanceName', ros.requiredValidator)(properties.instanceName));
    errors.collect(ros.propertyValidator('instanceName', ros.validateString)(properties.instanceName));
    errors.collect(ros.propertyValidator('category', ros.requiredValidator)(properties.category));
    errors.collect(ros.propertyValidator('category', ros.validateString)(properties.category));
    errors.collect(ros.propertyValidator('instanceId', ros.requiredValidator)(properties.instanceId));
    errors.collect(ros.propertyValidator('instanceId', ros.validateString)(properties.instanceId));
    errors.collect(ros.propertyValidator('regionId', ros.requiredValidator)(properties.regionId));
    errors.collect(ros.propertyValidator('regionId', ros.validateString)(properties.regionId));
    return errors.wrap('supplied properties not correct for "InstancesProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::CMS::MonitorGroupInstances.Instances` resource
 *
 * @param properties - the TypeScript properties of a `InstancesProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::CMS::MonitorGroupInstances.Instances` resource.
 */
// @ts-ignore TS6133
function rosMonitorGroupInstancesInstancesPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosMonitorGroupInstances_InstancesPropertyValidator(properties).assertSuccess();
    return {
        'InstanceName': ros.stringToRosTemplate(properties.instanceName),
        'Category': ros.stringToRosTemplate(properties.category),
        'InstanceId': ros.stringToRosTemplate(properties.instanceId),
        'RegionId': ros.stringToRosTemplate(properties.regionId),
    };
}
/**
 * Determine whether the given properties match those of a `RosMonitoringAgentProps`
 *
 * @param properties - the TypeScript properties of a `RosMonitoringAgentProps`
 *
 * @returns the result of the validation.
 */
function RosMonitoringAgentPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('force', ros.validateBoolean)(properties.force));
    if (properties.installCommand && (typeof properties.installCommand) !== 'object') {
        errors.collect(ros.propertyValidator('installCommand', ros.validateAllowedValues)({
            data: properties.installCommand,
            allowedValues: ["installAndUpgrade", "onlyInstallNotHasAgent", "onlyUpgradeAgent"],
        }));
    }
    errors.collect(ros.propertyValidator('installCommand', ros.validateString)(properties.installCommand));
    if (properties.instanceIds && (Array.isArray(properties.instanceIds) || (typeof properties.instanceIds) === 'string')) {
        errors.collect(ros.propertyValidator('instanceIds', ros.validateLength)({
            data: properties.instanceIds.length,
            min: 1,
            max: 10,
        }));
    }
    errors.collect(ros.propertyValidator('instanceIds', ros.listValidator(ros.validateAny))(properties.instanceIds));
    return errors.wrap('supplied properties not correct for "RosMonitoringAgentProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::CMS::MonitoringAgent` resource
 *
 * @param properties - the TypeScript properties of a `RosMonitoringAgentProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::CMS::MonitoringAgent` resource.
 */
// @ts-ignore TS6133
function rosMonitoringAgentPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosMonitoringAgentPropsValidator(properties).assertSuccess();
    }
    return {
        'Force': ros.booleanToRosTemplate(properties.force),
        'InstallCommand': ros.stringToRosTemplate(properties.installCommand),
        'InstanceIds': ros.listMapper(ros.objectToRosTemplate)(properties.instanceIds),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::CMS::MonitoringAgent`, which is used to install the CloudMonitor agent on Alibaba Cloud hosts.
 * @Note This class does not contain additional functions, so it is recommended to use the `MonitoringAgent` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-cms-monitoringagent
 */
class RosMonitoringAgent extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosMonitoringAgent.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.force = props.force;
        this.installCommand = props.installCommand;
        this.instanceIds = props.instanceIds;
    }
    get rosProperties() {
        return {
            force: this.force,
            installCommand: this.installCommand,
            instanceIds: this.instanceIds,
        };
    }
    renderProperties(props) {
        return rosMonitoringAgentPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosMonitoringAgent = RosMonitoringAgent;
/**
 * The resource type name for this resource class.
 */
RosMonitoringAgent.ROS_RESOURCE_TYPE_NAME = "ALIYUN::CMS::MonitoringAgent";
/**
 * Determine whether the given properties match those of a `RosMonitoringAgentProcessProps`
 *
 * @param properties - the TypeScript properties of a `RosMonitoringAgentProcessProps`
 *
 * @returns the result of the validation.
 */
function RosMonitoringAgentProcessPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('processName', ros.validateString)(properties.processName));
    errors.collect(ros.propertyValidator('instanceId', ros.requiredValidator)(properties.instanceId));
    errors.collect(ros.propertyValidator('instanceId', ros.validateString)(properties.instanceId));
    errors.collect(ros.propertyValidator('processUser', ros.validateString)(properties.processUser));
    return errors.wrap('supplied properties not correct for "RosMonitoringAgentProcessProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::CMS::MonitoringAgentProcess` resource
 *
 * @param properties - the TypeScript properties of a `RosMonitoringAgentProcessProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::CMS::MonitoringAgentProcess` resource.
 */
// @ts-ignore TS6133
function rosMonitoringAgentProcessPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosMonitoringAgentProcessPropsValidator(properties).assertSuccess();
    }
    return {
        'InstanceId': ros.stringToRosTemplate(properties.instanceId),
        'ProcessName': ros.stringToRosTemplate(properties.processName),
        'ProcessUser': ros.stringToRosTemplate(properties.processUser),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::CMS::MonitoringAgentProcess`, which is used to create a process monitoring task.
 * @Note This class does not contain additional functions, so it is recommended to use the `MonitoringAgentProcess` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-cms-monitoringagentprocess
 */
class RosMonitoringAgentProcess extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosMonitoringAgentProcess.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrId = this.getAtt('Id');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.instanceId = props.instanceId;
        this.processName = props.processName;
        this.processUser = props.processUser;
    }
    get rosProperties() {
        return {
            instanceId: this.instanceId,
            processName: this.processName,
            processUser: this.processUser,
        };
    }
    renderProperties(props) {
        return rosMonitoringAgentProcessPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosMonitoringAgentProcess = RosMonitoringAgentProcess;
/**
 * The resource type name for this resource class.
 */
RosMonitoringAgentProcess.ROS_RESOURCE_TYPE_NAME = "ALIYUN::CMS::MonitoringAgentProcess";
/**
 * Determine whether the given properties match those of a `RosNamespaceProps`
 *
 * @param properties - the TypeScript properties of a `RosNamespaceProps`
 *
 * @returns the result of the validation.
 */
function RosNamespacePropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('description', ros.validateString)(properties.description));
    if (properties.specification && (typeof properties.specification) !== 'object') {
        errors.collect(ros.propertyValidator('specification', ros.validateAllowedValues)({
            data: properties.specification,
            allowedValues: ["cms.s1.large", "cms.s1.xlarge", "cms.s1.2xlarge", "cms.s1.3xlarge", "cms.s1.6xlarge", "cms.s1.12xlarge"],
        }));
    }
    errors.collect(ros.propertyValidator('specification', ros.validateString)(properties.specification));
    errors.collect(ros.propertyValidator('namespace', ros.requiredValidator)(properties.namespace));
    if (properties.namespace && (typeof properties.namespace) !== 'object') {
        errors.collect(ros.propertyValidator('namespace', ros.validateAllowedPattern)({
            data: properties.namespace,
            reg: /^[-a-z0-9]+$/
        }));
    }
    errors.collect(ros.propertyValidator('namespace', ros.validateString)(properties.namespace));
    return errors.wrap('supplied properties not correct for "RosNamespaceProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::CMS::Namespace` resource
 *
 * @param properties - the TypeScript properties of a `RosNamespaceProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::CMS::Namespace` resource.
 */
// @ts-ignore TS6133
function rosNamespacePropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosNamespacePropsValidator(properties).assertSuccess();
    }
    return {
        'Namespace': ros.stringToRosTemplate(properties.namespace),
        'Description': ros.stringToRosTemplate(properties.description),
        'Specification': ros.stringToRosTemplate(properties.specification),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::CMS::Namespace`, which is used to create a namespace.
 * @Note This class does not contain additional functions, so it is recommended to use the `Namespace` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-cms-namespace
 */
class RosNamespace extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosNamespace.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrCreateTime = this.getAtt('CreateTime');
        this.attrDescription = this.getAtt('Description');
        this.attrModifyTime = this.getAtt('ModifyTime');
        this.attrNamespace = this.getAtt('Namespace');
        this.attrSpecification = this.getAtt('Specification');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.namespace = props.namespace;
        this.description = props.description;
        this.specification = props.specification;
    }
    get rosProperties() {
        return {
            namespace: this.namespace,
            description: this.description,
            specification: this.specification,
        };
    }
    renderProperties(props) {
        return rosNamespacePropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosNamespace = RosNamespace;
/**
 * The resource type name for this resource class.
 */
RosNamespace.ROS_RESOURCE_TYPE_NAME = "ALIYUN::CMS::Namespace";
/**
 * Determine whether the given properties match those of a `RosResourceMetricRuleProps`
 *
 * @param properties - the TypeScript properties of a `RosResourceMetricRuleProps`
 *
 * @returns the result of the validation.
 */
function RosResourceMetricRulePropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('noEffectiveInterval', ros.validateString)(properties.noEffectiveInterval));
    errors.collect(ros.propertyValidator('contactGroups', ros.requiredValidator)(properties.contactGroups));
    if (properties.contactGroups && (Array.isArray(properties.contactGroups) || (typeof properties.contactGroups) === 'string')) {
        errors.collect(ros.propertyValidator('contactGroups', ros.validateLength)({
            data: properties.contactGroups.length,
            min: 1,
            max: undefined,
        }));
    }
    errors.collect(ros.propertyValidator('contactGroups', ros.listValidator(ros.validateString))(properties.contactGroups));
    errors.collect(ros.propertyValidator('silenceTime', ros.validateNumber)(properties.silenceTime));
    errors.collect(ros.propertyValidator('ruleId', ros.validateString)(properties.ruleId));
    errors.collect(ros.propertyValidator('period', ros.validateNumber)(properties.period));
    errors.collect(ros.propertyValidator('prometheus', RosResourceMetricRule_PrometheusPropertyValidator)(properties.prometheus));
    errors.collect(ros.propertyValidator('labels', ros.listValidator(RosResourceMetricRule_LabelsPropertyValidator))(properties.labels));
    errors.collect(ros.propertyValidator('effectiveInterval', ros.validateString)(properties.effectiveInterval));
    if (properties.noDataPolicy && (typeof properties.noDataPolicy) !== 'object') {
        errors.collect(ros.propertyValidator('noDataPolicy', ros.validateAllowedValues)({
            data: properties.noDataPolicy,
            allowedValues: ["KEEP_LAST_STATE", "INSUFFICIENT_DATA", "OK"],
        }));
    }
    errors.collect(ros.propertyValidator('noDataPolicy', ros.validateString)(properties.noDataPolicy));
    errors.collect(ros.propertyValidator('namespace', ros.requiredValidator)(properties.namespace));
    errors.collect(ros.propertyValidator('namespace', ros.validateString)(properties.namespace));
    errors.collect(ros.propertyValidator('metricName', ros.requiredValidator)(properties.metricName));
    errors.collect(ros.propertyValidator('metricName', ros.validateString)(properties.metricName));
    errors.collect(ros.propertyValidator('deletionForce', ros.validateBoolean)(properties.deletionForce));
    errors.collect(ros.propertyValidator('escalations', ros.requiredValidator)(properties.escalations));
    errors.collect(ros.propertyValidator('escalations', RosResourceMetricRule_EscalationsPropertyValidator)(properties.escalations));
    errors.collect(ros.propertyValidator('emailSubject', ros.validateString)(properties.emailSubject));
    errors.collect(ros.propertyValidator('compositeExpression', RosResourceMetricRule_CompositeExpressionPropertyValidator)(properties.compositeExpression));
    errors.collect(ros.propertyValidator('webhook', ros.validateString)(properties.webhook));
    errors.collect(ros.propertyValidator('resources', ros.requiredValidator)(properties.resources));
    if (properties.resources && (Array.isArray(properties.resources) || (typeof properties.resources) === 'string')) {
        errors.collect(ros.propertyValidator('resources', ros.validateLength)({
            data: properties.resources.length,
            min: 1,
            max: undefined,
        }));
    }
    errors.collect(ros.propertyValidator('resources', ros.listValidator(ros.validateAnyDict))(properties.resources));
    errors.collect(ros.propertyValidator('ruleName', ros.validateString)(properties.ruleName));
    errors.collect(ros.propertyValidator('interval', ros.validateNumber)(properties.interval));
    return errors.wrap('supplied properties not correct for "RosResourceMetricRuleProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::CMS::ResourceMetricRule` resource
 *
 * @param properties - the TypeScript properties of a `RosResourceMetricRuleProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::CMS::ResourceMetricRule` resource.
 */
// @ts-ignore TS6133
function rosResourceMetricRulePropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosResourceMetricRulePropsValidator(properties).assertSuccess();
    }
    return {
        'ContactGroups': ros.listMapper(ros.stringToRosTemplate)(properties.contactGroups),
        'Escalations': rosResourceMetricRuleEscalationsPropertyToRosTemplate(properties.escalations),
        'MetricName': ros.stringToRosTemplate(properties.metricName),
        'Namespace': ros.stringToRosTemplate(properties.namespace),
        'Resources': ros.listMapper(ros.anyDictToRosTemplate)(properties.resources),
        'CompositeExpression': rosResourceMetricRuleCompositeExpressionPropertyToRosTemplate(properties.compositeExpression),
        'DeletionForce': ros.booleanToRosTemplate(properties.deletionForce),
        'EffectiveInterval': ros.stringToRosTemplate(properties.effectiveInterval),
        'EmailSubject': ros.stringToRosTemplate(properties.emailSubject),
        'Interval': ros.numberToRosTemplate(properties.interval),
        'Labels': ros.listMapper(rosResourceMetricRuleLabelsPropertyToRosTemplate)(properties.labels),
        'NoDataPolicy': ros.stringToRosTemplate(properties.noDataPolicy),
        'NoEffectiveInterval': ros.stringToRosTemplate(properties.noEffectiveInterval),
        'Period': ros.numberToRosTemplate(properties.period),
        'Prometheus': rosResourceMetricRulePrometheusPropertyToRosTemplate(properties.prometheus),
        'RuleId': ros.stringToRosTemplate(properties.ruleId),
        'RuleName': ros.stringToRosTemplate(properties.ruleName),
        'SilenceTime': ros.numberToRosTemplate(properties.silenceTime),
        'Webhook': ros.stringToRosTemplate(properties.webhook),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::CMS::ResourceMetricRule`, which is used to create a threshold-triggered alert rule for a metric of a resource.
 * @Note This class does not contain additional functions, so it is recommended to use the `ResourceMetricRule` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-cms-resourcemetricrule
 */
class RosResourceMetricRule extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosResourceMetricRule.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrRuleId = this.getAtt('RuleId');
        this.attrRuleName = this.getAtt('RuleName');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.contactGroups = props.contactGroups;
        this.escalations = props.escalations;
        this.metricName = props.metricName;
        this.namespace = props.namespace;
        this.resources = props.resources;
        this.compositeExpression = props.compositeExpression;
        this.deletionForce = props.deletionForce;
        this.effectiveInterval = props.effectiveInterval;
        this.emailSubject = props.emailSubject;
        this.interval = props.interval;
        this.labels = props.labels;
        this.noDataPolicy = props.noDataPolicy;
        this.noEffectiveInterval = props.noEffectiveInterval;
        this.period = props.period;
        this.prometheus = props.prometheus;
        this.ruleId = props.ruleId;
        this.ruleName = props.ruleName;
        this.silenceTime = props.silenceTime;
        this.webhook = props.webhook;
    }
    get rosProperties() {
        return {
            contactGroups: this.contactGroups,
            escalations: this.escalations,
            metricName: this.metricName,
            namespace: this.namespace,
            resources: this.resources,
            compositeExpression: this.compositeExpression,
            deletionForce: this.deletionForce,
            effectiveInterval: this.effectiveInterval,
            emailSubject: this.emailSubject,
            interval: this.interval,
            labels: this.labels,
            noDataPolicy: this.noDataPolicy,
            noEffectiveInterval: this.noEffectiveInterval,
            period: this.period,
            prometheus: this.prometheus,
            ruleId: this.ruleId,
            ruleName: this.ruleName,
            silenceTime: this.silenceTime,
            webhook: this.webhook,
        };
    }
    renderProperties(props) {
        return rosResourceMetricRulePropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosResourceMetricRule = RosResourceMetricRule;
/**
 * The resource type name for this resource class.
 */
RosResourceMetricRule.ROS_RESOURCE_TYPE_NAME = "ALIYUN::CMS::ResourceMetricRule";
/**
 * Determine whether the given properties match those of a `AnnotationsProperty`
 *
 * @param properties - the TypeScript properties of a `AnnotationsProperty`
 *
 * @returns the result of the validation.
 */
function RosResourceMetricRule_AnnotationsPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('value', ros.validateString)(properties.value));
    errors.collect(ros.propertyValidator('key', ros.validateString)(properties.key));
    return errors.wrap('supplied properties not correct for "AnnotationsProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::CMS::ResourceMetricRule.Annotations` resource
 *
 * @param properties - the TypeScript properties of a `AnnotationsProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::CMS::ResourceMetricRule.Annotations` resource.
 */
// @ts-ignore TS6133
function rosResourceMetricRuleAnnotationsPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosResourceMetricRule_AnnotationsPropertyValidator(properties).assertSuccess();
    return {
        'Value': ros.stringToRosTemplate(properties.value),
        'Key': ros.stringToRosTemplate(properties.key),
    };
}
/**
 * Determine whether the given properties match those of a `CompositeExpressionProperty`
 *
 * @param properties - the TypeScript properties of a `CompositeExpressionProperty`
 *
 * @returns the result of the validation.
 */
function RosResourceMetricRule_CompositeExpressionPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('times', ros.requiredValidator)(properties.times));
    errors.collect(ros.propertyValidator('times', ros.validateNumber)(properties.times));
    errors.collect(ros.propertyValidator('expressionRaw', ros.validateString)(properties.expressionRaw));
    errors.collect(ros.propertyValidator('expressionListJoin', ros.validateString)(properties.expressionListJoin));
    errors.collect(ros.propertyValidator('level', ros.requiredValidator)(properties.level));
    if (properties.level && (typeof properties.level) !== 'object') {
        errors.collect(ros.propertyValidator('level', ros.validateAllowedValues)({
            data: properties.level,
            allowedValues: ["Critical", "Info", "Warn"],
        }));
    }
    errors.collect(ros.propertyValidator('level', ros.validateString)(properties.level));
    if (properties.expressionList && (Array.isArray(properties.expressionList) || (typeof properties.expressionList) === 'string')) {
        errors.collect(ros.propertyValidator('expressionList', ros.validateLength)({
            data: properties.expressionList.length,
            min: 1,
            max: undefined,
        }));
    }
    errors.collect(ros.propertyValidator('expressionList', ros.listValidator(RosResourceMetricRule_ExpressionListPropertyValidator))(properties.expressionList));
    return errors.wrap('supplied properties not correct for "CompositeExpressionProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::CMS::ResourceMetricRule.CompositeExpression` resource
 *
 * @param properties - the TypeScript properties of a `CompositeExpressionProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::CMS::ResourceMetricRule.CompositeExpression` resource.
 */
// @ts-ignore TS6133
function rosResourceMetricRuleCompositeExpressionPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosResourceMetricRule_CompositeExpressionPropertyValidator(properties).assertSuccess();
    return {
        'Times': ros.numberToRosTemplate(properties.times),
        'ExpressionRaw': ros.stringToRosTemplate(properties.expressionRaw),
        'ExpressionListJoin': ros.stringToRosTemplate(properties.expressionListJoin),
        'Level': ros.stringToRosTemplate(properties.level),
        'ExpressionList': ros.listMapper(rosResourceMetricRuleExpressionListPropertyToRosTemplate)(properties.expressionList),
    };
}
/**
 * Determine whether the given properties match those of a `CriticalProperty`
 *
 * @param properties - the TypeScript properties of a `CriticalProperty`
 *
 * @returns the result of the validation.
 */
function RosResourceMetricRule_CriticalPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('comparisonOperator', ros.requiredValidator)(properties.comparisonOperator));
    if (properties.comparisonOperator && (typeof properties.comparisonOperator) !== 'object') {
        errors.collect(ros.propertyValidator('comparisonOperator', ros.validateAllowedValues)({
            data: properties.comparisonOperator,
            allowedValues: ["GreaterThanLastPeriod", "GreaterThanLastWeek", "GreaterThanOrEqualToThreshold", "GreaterThanThreshold", "GreaterThanYesterday", "LessThanLastPeriod", "LessThanLastWeek", "LessThanOrEqualToThreshold", "LessThanThreshold", "LessThanYesterday", "NotEqualToThreshold"],
        }));
    }
    errors.collect(ros.propertyValidator('comparisonOperator', ros.validateString)(properties.comparisonOperator));
    errors.collect(ros.propertyValidator('times', ros.requiredValidator)(properties.times));
    errors.collect(ros.propertyValidator('times', ros.validateNumber)(properties.times));
    errors.collect(ros.propertyValidator('statistics', ros.requiredValidator)(properties.statistics));
    if (properties.statistics && (typeof properties.statistics) !== 'object') {
        errors.collect(ros.propertyValidator('statistics', ros.validateAllowedValues)({
            data: properties.statistics,
            allowedValues: ["Availability", "Average", "Maximum", "Minimum"],
        }));
    }
    errors.collect(ros.propertyValidator('statistics', ros.validateString)(properties.statistics));
    errors.collect(ros.propertyValidator('threshold', ros.requiredValidator)(properties.threshold));
    errors.collect(ros.propertyValidator('threshold', ros.validateString)(properties.threshold));
    return errors.wrap('supplied properties not correct for "CriticalProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::CMS::ResourceMetricRule.Critical` resource
 *
 * @param properties - the TypeScript properties of a `CriticalProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::CMS::ResourceMetricRule.Critical` resource.
 */
// @ts-ignore TS6133
function rosResourceMetricRuleCriticalPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosResourceMetricRule_CriticalPropertyValidator(properties).assertSuccess();
    return {
        'ComparisonOperator': ros.stringToRosTemplate(properties.comparisonOperator),
        'Times': ros.numberToRosTemplate(properties.times),
        'Statistics': ros.stringToRosTemplate(properties.statistics),
        'Threshold': ros.stringToRosTemplate(properties.threshold),
    };
}
/**
 * Determine whether the given properties match those of a `EscalationsProperty`
 *
 * @param properties - the TypeScript properties of a `EscalationsProperty`
 *
 * @returns the result of the validation.
 */
function RosResourceMetricRule_EscalationsPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('critical', RosResourceMetricRule_CriticalPropertyValidator)(properties.critical));
    errors.collect(ros.propertyValidator('info', RosResourceMetricRule_InfoPropertyValidator)(properties.info));
    errors.collect(ros.propertyValidator('warn', RosResourceMetricRule_WarnPropertyValidator)(properties.warn));
    return errors.wrap('supplied properties not correct for "EscalationsProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::CMS::ResourceMetricRule.Escalations` resource
 *
 * @param properties - the TypeScript properties of a `EscalationsProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::CMS::ResourceMetricRule.Escalations` resource.
 */
// @ts-ignore TS6133
function rosResourceMetricRuleEscalationsPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosResourceMetricRule_EscalationsPropertyValidator(properties).assertSuccess();
    return {
        'Critical': rosResourceMetricRuleCriticalPropertyToRosTemplate(properties.critical),
        'Info': rosResourceMetricRuleInfoPropertyToRosTemplate(properties.info),
        'Warn': rosResourceMetricRuleWarnPropertyToRosTemplate(properties.warn),
    };
}
/**
 * Determine whether the given properties match those of a `ExpressionListProperty`
 *
 * @param properties - the TypeScript properties of a `ExpressionListProperty`
 *
 * @returns the result of the validation.
 */
function RosResourceMetricRule_ExpressionListPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('metricName', ros.requiredValidator)(properties.metricName));
    errors.collect(ros.propertyValidator('metricName', ros.validateString)(properties.metricName));
    errors.collect(ros.propertyValidator('comparisonOperator', ros.requiredValidator)(properties.comparisonOperator));
    if (properties.comparisonOperator && (typeof properties.comparisonOperator) !== 'object') {
        errors.collect(ros.propertyValidator('comparisonOperator', ros.validateAllowedValues)({
            data: properties.comparisonOperator,
            allowedValues: ["GreaterThanLastPeriod", "GreaterThanLastWeek", "GreaterThanOrEqualToThreshold", "GreaterThanThreshold", "GreaterThanYesterday", "LessThanLastPeriod", "LessThanLastWeek", "LessThanOrEqualToThreshold", "LessThanThreshold", "LessThanYesterday", "NotEqualToThreshold"],
        }));
    }
    errors.collect(ros.propertyValidator('comparisonOperator', ros.validateString)(properties.comparisonOperator));
    errors.collect(ros.propertyValidator('period', ros.requiredValidator)(properties.period));
    errors.collect(ros.propertyValidator('period', ros.validateNumber)(properties.period));
    errors.collect(ros.propertyValidator('statistics', ros.requiredValidator)(properties.statistics));
    if (properties.statistics && (typeof properties.statistics) !== 'object') {
        errors.collect(ros.propertyValidator('statistics', ros.validateAllowedValues)({
            data: properties.statistics,
            allowedValues: ["$Availability", "$Average", "$Maximum", "$Minimum"],
        }));
    }
    errors.collect(ros.propertyValidator('statistics', ros.validateString)(properties.statistics));
    errors.collect(ros.propertyValidator('threshold', ros.requiredValidator)(properties.threshold));
    errors.collect(ros.propertyValidator('threshold', ros.validateString)(properties.threshold));
    return errors.wrap('supplied properties not correct for "ExpressionListProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::CMS::ResourceMetricRule.ExpressionList` resource
 *
 * @param properties - the TypeScript properties of a `ExpressionListProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::CMS::ResourceMetricRule.ExpressionList` resource.
 */
// @ts-ignore TS6133
function rosResourceMetricRuleExpressionListPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosResourceMetricRule_ExpressionListPropertyValidator(properties).assertSuccess();
    return {
        'MetricName': ros.stringToRosTemplate(properties.metricName),
        'ComparisonOperator': ros.stringToRosTemplate(properties.comparisonOperator),
        'Period': ros.numberToRosTemplate(properties.period),
        'Statistics': ros.stringToRosTemplate(properties.statistics),
        'Threshold': ros.stringToRosTemplate(properties.threshold),
    };
}
/**
 * Determine whether the given properties match those of a `InfoProperty`
 *
 * @param properties - the TypeScript properties of a `InfoProperty`
 *
 * @returns the result of the validation.
 */
function RosResourceMetricRule_InfoPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('comparisonOperator', ros.requiredValidator)(properties.comparisonOperator));
    if (properties.comparisonOperator && (typeof properties.comparisonOperator) !== 'object') {
        errors.collect(ros.propertyValidator('comparisonOperator', ros.validateAllowedValues)({
            data: properties.comparisonOperator,
            allowedValues: ["GreaterThanLastPeriod", "GreaterThanLastWeek", "GreaterThanOrEqualToThreshold", "GreaterThanThreshold", "GreaterThanYesterday", "LessThanLastPeriod", "LessThanLastWeek", "LessThanOrEqualToThreshold", "LessThanThreshold", "LessThanYesterday", "NotEqualToThreshold"],
        }));
    }
    errors.collect(ros.propertyValidator('comparisonOperator', ros.validateString)(properties.comparisonOperator));
    errors.collect(ros.propertyValidator('times', ros.requiredValidator)(properties.times));
    errors.collect(ros.propertyValidator('times', ros.validateNumber)(properties.times));
    errors.collect(ros.propertyValidator('statistics', ros.requiredValidator)(properties.statistics));
    if (properties.statistics && (typeof properties.statistics) !== 'object') {
        errors.collect(ros.propertyValidator('statistics', ros.validateAllowedValues)({
            data: properties.statistics,
            allowedValues: ["Availability", "Average", "Maximum", "Minimum"],
        }));
    }
    errors.collect(ros.propertyValidator('statistics', ros.validateString)(properties.statistics));
    errors.collect(ros.propertyValidator('threshold', ros.requiredValidator)(properties.threshold));
    errors.collect(ros.propertyValidator('threshold', ros.validateString)(properties.threshold));
    return errors.wrap('supplied properties not correct for "InfoProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::CMS::ResourceMetricRule.Info` resource
 *
 * @param properties - the TypeScript properties of a `InfoProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::CMS::ResourceMetricRule.Info` resource.
 */
// @ts-ignore TS6133
function rosResourceMetricRuleInfoPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosResourceMetricRule_InfoPropertyValidator(properties).assertSuccess();
    return {
        'ComparisonOperator': ros.stringToRosTemplate(properties.comparisonOperator),
        'Times': ros.numberToRosTemplate(properties.times),
        'Statistics': ros.stringToRosTemplate(properties.statistics),
        'Threshold': ros.stringToRosTemplate(properties.threshold),
    };
}
/**
 * Determine whether the given properties match those of a `LabelsProperty`
 *
 * @param properties - the TypeScript properties of a `LabelsProperty`
 *
 * @returns the result of the validation.
 */
function RosResourceMetricRule_LabelsPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('value', ros.validateString)(properties.value));
    errors.collect(ros.propertyValidator('key', ros.requiredValidator)(properties.key));
    errors.collect(ros.propertyValidator('key', ros.validateString)(properties.key));
    return errors.wrap('supplied properties not correct for "LabelsProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::CMS::ResourceMetricRule.Labels` resource
 *
 * @param properties - the TypeScript properties of a `LabelsProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::CMS::ResourceMetricRule.Labels` resource.
 */
// @ts-ignore TS6133
function rosResourceMetricRuleLabelsPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosResourceMetricRule_LabelsPropertyValidator(properties).assertSuccess();
    return {
        'Value': ros.stringToRosTemplate(properties.value),
        'Key': ros.stringToRosTemplate(properties.key),
    };
}
/**
 * Determine whether the given properties match those of a `PrometheusProperty`
 *
 * @param properties - the TypeScript properties of a `PrometheusProperty`
 *
 * @returns the result of the validation.
 */
function RosResourceMetricRule_PrometheusPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('annotations', ros.listValidator(RosResourceMetricRule_AnnotationsPropertyValidator))(properties.annotations));
    errors.collect(ros.propertyValidator('promQl', ros.requiredValidator)(properties.promQl));
    errors.collect(ros.propertyValidator('promQl', ros.validateString)(properties.promQl));
    errors.collect(ros.propertyValidator('times', ros.requiredValidator)(properties.times));
    errors.collect(ros.propertyValidator('times', ros.validateNumber)(properties.times));
    errors.collect(ros.propertyValidator('level', ros.requiredValidator)(properties.level));
    if (properties.level && (typeof properties.level) !== 'object') {
        errors.collect(ros.propertyValidator('level', ros.validateAllowedValues)({
            data: properties.level,
            allowedValues: ["Critical", "Info", "Warn"],
        }));
    }
    errors.collect(ros.propertyValidator('level', ros.validateString)(properties.level));
    return errors.wrap('supplied properties not correct for "PrometheusProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::CMS::ResourceMetricRule.Prometheus` resource
 *
 * @param properties - the TypeScript properties of a `PrometheusProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::CMS::ResourceMetricRule.Prometheus` resource.
 */
// @ts-ignore TS6133
function rosResourceMetricRulePrometheusPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosResourceMetricRule_PrometheusPropertyValidator(properties).assertSuccess();
    return {
        'Annotations': ros.listMapper(rosResourceMetricRuleAnnotationsPropertyToRosTemplate)(properties.annotations),
        'PromQL': ros.stringToRosTemplate(properties.promQl),
        'Times': ros.numberToRosTemplate(properties.times),
        'Level': ros.stringToRosTemplate(properties.level),
    };
}
/**
 * Determine whether the given properties match those of a `WarnProperty`
 *
 * @param properties - the TypeScript properties of a `WarnProperty`
 *
 * @returns the result of the validation.
 */
function RosResourceMetricRule_WarnPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('comparisonOperator', ros.requiredValidator)(properties.comparisonOperator));
    if (properties.comparisonOperator && (typeof properties.comparisonOperator) !== 'object') {
        errors.collect(ros.propertyValidator('comparisonOperator', ros.validateAllowedValues)({
            data: properties.comparisonOperator,
            allowedValues: ["GreaterThanLastPeriod", "GreaterThanLastWeek", "GreaterThanOrEqualToThreshold", "GreaterThanThreshold", "GreaterThanYesterday", "LessThanLastPeriod", "LessThanLastWeek", "LessThanOrEqualToThreshold", "LessThanThreshold", "LessThanYesterday", "NotEqualToThreshold"],
        }));
    }
    errors.collect(ros.propertyValidator('comparisonOperator', ros.validateString)(properties.comparisonOperator));
    errors.collect(ros.propertyValidator('times', ros.requiredValidator)(properties.times));
    errors.collect(ros.propertyValidator('times', ros.validateNumber)(properties.times));
    errors.collect(ros.propertyValidator('statistics', ros.requiredValidator)(properties.statistics));
    if (properties.statistics && (typeof properties.statistics) !== 'object') {
        errors.collect(ros.propertyValidator('statistics', ros.validateAllowedValues)({
            data: properties.statistics,
            allowedValues: ["Availability", "Average", "Maximum", "Minimum"],
        }));
    }
    errors.collect(ros.propertyValidator('statistics', ros.validateString)(properties.statistics));
    errors.collect(ros.propertyValidator('threshold', ros.requiredValidator)(properties.threshold));
    errors.collect(ros.propertyValidator('threshold', ros.validateString)(properties.threshold));
    return errors.wrap('supplied properties not correct for "WarnProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::CMS::ResourceMetricRule.Warn` resource
 *
 * @param properties - the TypeScript properties of a `WarnProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::CMS::ResourceMetricRule.Warn` resource.
 */
// @ts-ignore TS6133
function rosResourceMetricRuleWarnPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosResourceMetricRule_WarnPropertyValidator(properties).assertSuccess();
    return {
        'ComparisonOperator': ros.stringToRosTemplate(properties.comparisonOperator),
        'Times': ros.numberToRosTemplate(properties.times),
        'Statistics': ros.stringToRosTemplate(properties.statistics),
        'Threshold': ros.stringToRosTemplate(properties.threshold),
    };
}
/**
 * Determine whether the given properties match those of a `RosSiteMonitorProps`
 *
 * @param properties - the TypeScript properties of a `RosSiteMonitorProps`
 *
 * @returns the result of the validation.
 */
function RosSiteMonitorPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('address', ros.requiredValidator)(properties.address));
    errors.collect(ros.propertyValidator('address', ros.validateString)(properties.address));
    errors.collect(ros.propertyValidator('optionsJson', ros.validateString)(properties.optionsJson));
    errors.collect(ros.propertyValidator('taskName', ros.requiredValidator)(properties.taskName));
    errors.collect(ros.propertyValidator('taskName', ros.validateString)(properties.taskName));
    errors.collect(ros.propertyValidator('taskType', ros.requiredValidator)(properties.taskType));
    errors.collect(ros.propertyValidator('taskType', ros.validateString)(properties.taskType));
    errors.collect(ros.propertyValidator('ispCities', ros.listValidator(RosSiteMonitor_IspCitiesPropertyValidator))(properties.ispCities));
    errors.collect(ros.propertyValidator('interval', ros.validateNumber)(properties.interval));
    errors.collect(ros.propertyValidator('alertIds', ros.listValidator(ros.validateString))(properties.alertIds));
    return errors.wrap('supplied properties not correct for "RosSiteMonitorProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::CMS::SiteMonitor` resource
 *
 * @param properties - the TypeScript properties of a `RosSiteMonitorProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::CMS::SiteMonitor` resource.
 */
// @ts-ignore TS6133
function rosSiteMonitorPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosSiteMonitorPropsValidator(properties).assertSuccess();
    }
    return {
        'Address': ros.stringToRosTemplate(properties.address),
        'TaskName': ros.stringToRosTemplate(properties.taskName),
        'TaskType': ros.stringToRosTemplate(properties.taskType),
        'AlertIds': ros.listMapper(ros.stringToRosTemplate)(properties.alertIds),
        'Interval': ros.numberToRosTemplate(properties.interval),
        'IspCities': ros.listMapper(rosSiteMonitorIspCitiesPropertyToRosTemplate)(properties.ispCities),
        'OptionsJson': ros.stringToRosTemplate(properties.optionsJson),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::CMS::SiteMonitor`, which is used to create a site monitoring task.
 * @Note This class does not contain additional functions, so it is recommended to use the `SiteMonitor` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-cms-sitemonitor
 */
class RosSiteMonitor extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosSiteMonitor.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrTaskId = this.getAtt('TaskId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.address = props.address;
        this.taskName = props.taskName;
        this.taskType = props.taskType;
        this.alertIds = props.alertIds;
        this.interval = props.interval;
        this.ispCities = props.ispCities;
        this.optionsJson = props.optionsJson;
    }
    get rosProperties() {
        return {
            address: this.address,
            taskName: this.taskName,
            taskType: this.taskType,
            alertIds: this.alertIds,
            interval: this.interval,
            ispCities: this.ispCities,
            optionsJson: this.optionsJson,
        };
    }
    renderProperties(props) {
        return rosSiteMonitorPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosSiteMonitor = RosSiteMonitor;
/**
 * The resource type name for this resource class.
 */
RosSiteMonitor.ROS_RESOURCE_TYPE_NAME = "ALIYUN::CMS::SiteMonitor";
/**
 * Determine whether the given properties match those of a `IspCitiesProperty`
 *
 * @param properties - the TypeScript properties of a `IspCitiesProperty`
 *
 * @returns the result of the validation.
 */
function RosSiteMonitor_IspCitiesPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('isp', ros.requiredValidator)(properties.isp));
    errors.collect(ros.propertyValidator('isp', ros.validateString)(properties.isp));
    errors.collect(ros.propertyValidator('city', ros.requiredValidator)(properties.city));
    errors.collect(ros.propertyValidator('city', ros.validateString)(properties.city));
    return errors.wrap('supplied properties not correct for "IspCitiesProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::CMS::SiteMonitor.IspCities` resource
 *
 * @param properties - the TypeScript properties of a `IspCitiesProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::CMS::SiteMonitor.IspCities` resource.
 */
// @ts-ignore TS6133
function rosSiteMonitorIspCitiesPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosSiteMonitor_IspCitiesPropertyValidator(properties).assertSuccess();
    return {
        'Isp': ros.stringToRosTemplate(properties.isp),
        'City': ros.stringToRosTemplate(properties.city),
    };
}
/**
 * Determine whether the given properties match those of a `RosSlsGroupProps`
 *
 * @param properties - the TypeScript properties of a `RosSlsGroupProps`
 *
 * @returns the result of the validation.
 */
function RosSlsGroupPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('slsGroupDescription', ros.validateString)(properties.slsGroupDescription));
    errors.collect(ros.propertyValidator('slsGroupConfig', ros.requiredValidator)(properties.slsGroupConfig));
    errors.collect(ros.propertyValidator('slsGroupConfig', ros.listValidator(RosSlsGroup_SlsGroupConfigPropertyValidator))(properties.slsGroupConfig));
    errors.collect(ros.propertyValidator('slsGroupName', ros.requiredValidator)(properties.slsGroupName));
    errors.collect(ros.propertyValidator('slsGroupName', ros.validateString)(properties.slsGroupName));
    return errors.wrap('supplied properties not correct for "RosSlsGroupProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::CMS::SlsGroup` resource
 *
 * @param properties - the TypeScript properties of a `RosSlsGroupProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::CMS::SlsGroup` resource.
 */
// @ts-ignore TS6133
function rosSlsGroupPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosSlsGroupPropsValidator(properties).assertSuccess();
    }
    return {
        'SlsGroupConfig': ros.listMapper(rosSlsGroupSlsGroupConfigPropertyToRosTemplate)(properties.slsGroupConfig),
        'SlsGroupName': ros.stringToRosTemplate(properties.slsGroupName),
        'SlsGroupDescription': ros.stringToRosTemplate(properties.slsGroupDescription),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::CMS::SlsGroup`, which is used to create a Logstore group for the metrics of Simple Log Service logs.
 * @Note This class does not contain additional functions, so it is recommended to use the `SlsGroup` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-cms-slsgroup
 */
class RosSlsGroup extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosSlsGroup.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrCreateTime = this.getAtt('CreateTime');
        this.attrSlsGroupConfig = this.getAtt('SlsGroupConfig');
        this.attrSlsGroupDescription = this.getAtt('SlsGroupDescription');
        this.attrSlsGroupName = this.getAtt('SlsGroupName');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.slsGroupConfig = props.slsGroupConfig;
        this.slsGroupName = props.slsGroupName;
        this.slsGroupDescription = props.slsGroupDescription;
    }
    get rosProperties() {
        return {
            slsGroupConfig: this.slsGroupConfig,
            slsGroupName: this.slsGroupName,
            slsGroupDescription: this.slsGroupDescription,
        };
    }
    renderProperties(props) {
        return rosSlsGroupPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosSlsGroup = RosSlsGroup;
/**
 * The resource type name for this resource class.
 */
RosSlsGroup.ROS_RESOURCE_TYPE_NAME = "ALIYUN::CMS::SlsGroup";
/**
 * Determine whether the given properties match those of a `SlsGroupConfigProperty`
 *
 * @param properties - the TypeScript properties of a `SlsGroupConfigProperty`
 *
 * @returns the result of the validation.
 */
function RosSlsGroup_SlsGroupConfigPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('slsProject', ros.requiredValidator)(properties.slsProject));
    errors.collect(ros.propertyValidator('slsProject', ros.validateString)(properties.slsProject));
    errors.collect(ros.propertyValidator('slsRegion', ros.requiredValidator)(properties.slsRegion));
    errors.collect(ros.propertyValidator('slsRegion', ros.validateString)(properties.slsRegion));
    errors.collect(ros.propertyValidator('slsUserId', ros.validateString)(properties.slsUserId));
    errors.collect(ros.propertyValidator('slsLogstore', ros.requiredValidator)(properties.slsLogstore));
    errors.collect(ros.propertyValidator('slsLogstore', ros.validateString)(properties.slsLogstore));
    return errors.wrap('supplied properties not correct for "SlsGroupConfigProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::CMS::SlsGroup.SlsGroupConfig` resource
 *
 * @param properties - the TypeScript properties of a `SlsGroupConfigProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::CMS::SlsGroup.SlsGroupConfig` resource.
 */
// @ts-ignore TS6133
function rosSlsGroupSlsGroupConfigPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosSlsGroup_SlsGroupConfigPropertyValidator(properties).assertSuccess();
    return {
        'SlsProject': ros.stringToRosTemplate(properties.slsProject),
        'SlsRegion': ros.stringToRosTemplate(properties.slsRegion),
        'SlsUserId': ros.stringToRosTemplate(properties.slsUserId),
        'SlsLogstore': ros.stringToRosTemplate(properties.slsLogstore),
    };
}
//# sourceMappingURL=data:application/json;base64,