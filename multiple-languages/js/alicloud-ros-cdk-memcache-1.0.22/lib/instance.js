"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Instance = exports.InstanceProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const memcache_generated_1 = require("./memcache.generated");
Object.defineProperty(exports, "InstanceProperty", { enumerable: true, get: function () { return memcache_generated_1.RosInstance; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::Memcache::Instance`ALIYUN::MEMCACHE::Instance is used to create an ApsaraDB for Memcache (OCS) instance.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosInstance`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-memcache-instance
 */
class Instance extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props = {}, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosInstance = new memcache_generated_1.RosInstance(this, id, {
            autoRenewPeriod: props.autoRenewPeriod,
            couponNo: props.couponNo,
            privateIpAddress: props.privateIpAddress,
            resourceGroupId: props.resourceGroupId,
            zoneId: props.zoneId,
            config: props.config,
            autoRenew: props.autoRenew,
            vSwitchId: props.vSwitchId,
            period: props.period,
            instanceClass: props.instanceClass,
            vpcPasswordFree: props.vpcPasswordFree,
            instanceName: props.instanceName,
            vpcId: props.vpcId,
            capacity: props.capacity,
            autoUseCoupon: props.autoUseCoupon,
            chargeType: props.chargeType,
            networkType: props.networkType,
            backupPolicy: props.backupPolicy,
            password: props.password,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosInstance;
        this.attrConnectionDomain = rosInstance.attrConnectionDomain;
        this.attrInstanceId = rosInstance.attrInstanceId;
        this.attrInstanceName = rosInstance.attrInstanceName;
        this.attrPort = rosInstance.attrPort;
        this.attrQps = rosInstance.attrQps;
    }
}
exports.Instance = Instance;
//# sourceMappingURL=data:application/json;base64,