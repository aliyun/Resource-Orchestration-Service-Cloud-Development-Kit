"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DomainRecords = exports.DomainRecordsProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const dns_generated_1 = require("./dns.generated");
Object.defineProperty(exports, "DomainRecordsProperty", { enumerable: true, get: function () { return dns_generated_1.RosDomainRecords; } });
/**
 * This class encapsulates and extends the ROS resource type `DATASOURCE::DNS::DomainRecords`, which is used to query Domain Name System (DNS) records.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosDomainRecords`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/datasource-dns-domainrecords
 */
class DomainRecords extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosDomainRecords = new dns_generated_1.RosDomainRecords(this, id, {
            status: props.status,
            orderBy: props.orderBy,
            rrKeyWord: props.rrKeyWord,
            domainName: props.domainName,
            typeKeyWord: props.typeKeyWord,
            lang: props.lang,
            direction: props.direction,
            refreshOptions: props.refreshOptions === undefined || props.refreshOptions === null ? 'Never' : props.refreshOptions,
            groupId: props.groupId,
            line: props.line,
            type: props.type,
            valueKeyWord: props.valueKeyWord,
            keyWord: props.keyWord,
            searchMode: props.searchMode,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosDomainRecords;
        this.attrDomainRecordIds = rosDomainRecords.attrDomainRecordIds;
        this.attrDomainRecords = rosDomainRecords.attrDomainRecords;
    }
}
exports.DomainRecords = DomainRecords;
//# sourceMappingURL=data:application/json;base64,