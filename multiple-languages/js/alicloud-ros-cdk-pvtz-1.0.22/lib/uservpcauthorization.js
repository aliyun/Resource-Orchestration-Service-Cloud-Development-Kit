"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserVpcAuthorization = exports.UserVpcAuthorizationProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const pvtz_generated_1 = require("./pvtz.generated");
Object.defineProperty(exports, "UserVpcAuthorizationProperty", { enumerable: true, get: function () { return pvtz_generated_1.RosUserVpcAuthorization; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::PVTZ::UserVpcAuthorization`, which is used to associate virtual private clouds (VPCs) across accounts.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosUserVpcAuthorization`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-pvtz-uservpcauthorization
 */
class UserVpcAuthorization extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosUserVpcAuthorization = new pvtz_generated_1.RosUserVpcAuthorization(this, id, {
            authCode: props.authCode,
            authChannel: props.authChannel,
            authorizedUserId: props.authorizedUserId,
            authType: props.authType,
            ignoreDeletionForbidden: props.ignoreDeletionForbidden === undefined || props.ignoreDeletionForbidden === null ? false : props.ignoreDeletionForbidden,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosUserVpcAuthorization;
        this.attrAuthType = rosUserVpcAuthorization.attrAuthType;
        this.attrAuthorizedUserId = rosUserVpcAuthorization.attrAuthorizedUserId;
    }
}
exports.UserVpcAuthorization = UserVpcAuthorization;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlcnZwY2F1dGhvcml6YXRpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ1c2VydnBjYXV0aG9yaXphdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw4Q0FBOEM7QUFDOUMscURBQTJEO0FBRXZCLDZHQUYzQix3Q0FBdUIsT0FFZ0M7QUFvQ2hFOzs7O0dBSUc7QUFDSCxNQUFhLG9CQUFxQixTQUFRLEdBQUcsQ0FBQyxRQUFRO0lBWWxEOzs7O09BSUc7SUFDSCxZQUFZLEtBQW9CLEVBQUUsRUFBVSxFQUFFLEtBQWdDLEVBQUUsbUNBQTJDLElBQUk7UUFDM0gsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUVqQixNQUFNLHVCQUF1QixHQUFHLElBQUksd0NBQXVCLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRztZQUNuRSxRQUFRLEVBQUUsS0FBSyxDQUFDLFFBQVE7WUFDeEIsV0FBVyxFQUFFLEtBQUssQ0FBQyxXQUFXO1lBQzlCLGdCQUFnQixFQUFFLEtBQUssQ0FBQyxnQkFBZ0I7WUFDeEMsUUFBUSxFQUFFLEtBQUssQ0FBQyxRQUFRO1lBQ3hCLHVCQUF1QixFQUFFLEtBQUssQ0FBQyx1QkFBdUIsS0FBSyxTQUFTLElBQUksS0FBSyxDQUFDLHVCQUF1QixLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsdUJBQXVCO1NBQ3pKLEVBQUUsZ0NBQWdDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO1FBQ3BGLElBQUksQ0FBQyxRQUFRLEdBQUcsdUJBQXVCLENBQUM7UUFDeEMsSUFBSSxDQUFDLFlBQVksR0FBRyx1QkFBdUIsQ0FBQyxZQUFZLENBQUM7UUFDekQsSUFBSSxDQUFDLG9CQUFvQixHQUFHLHVCQUF1QixDQUFDLG9CQUFvQixDQUFDO0lBQzdFLENBQUM7Q0FDSjtBQS9CRCxvREErQkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyByb3MgZnJvbSAnQGFsaWNsb3VkL3Jvcy1jZGstY29yZSc7XG5pbXBvcnQgeyBSb3NVc2VyVnBjQXV0aG9yaXphdGlvbiB9IGZyb20gJy4vcHZ0ei5nZW5lcmF0ZWQnO1xuLy8gR2VuZXJhdGVkIGZyb20gdGhlIEFsaUNsb3VkIFJPUyBSZXNvdXJjZSBTcGVjaWZpY2F0aW9uXG5leHBvcnQgeyBSb3NVc2VyVnBjQXV0aG9yaXphdGlvbiBhcyBVc2VyVnBjQXV0aG9yaXphdGlvblByb3BlcnR5IH07XG5cbi8qKlxuICogUHJvcGVydGllcyBmb3IgZGVmaW5pbmcgYSBgVXNlclZwY0F1dGhvcml6YXRpb25gLlxuICogU2VlIGh0dHBzOi8vd3d3LmFsaWJhYmFjbG91ZC5jb20vaGVscC9yb3MvZGV2ZWxvcGVyLXJlZmVyZW5jZS9hbGl5dW4tcHZ0ei11c2VydnBjYXV0aG9yaXphdGlvblxuICovXG5leHBvcnQgaW50ZXJmYWNlIFVzZXJWcGNBdXRob3JpemF0aW9uUHJvcHMge1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgYXV0aG9yaXplZFVzZXJJZDogVGhlIGFjY291bnQgSUQgb2YgdGhlIHVzZXIgd2hvIGF1dGhvcml6ZXMgdGhlIHJlc291cmNlLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGF1dGhvcml6ZWRVc2VySWQ6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGF1dGhDaGFubmVsOiBBdXRob3JpemF0aW9uIGNoYW5uZWwuIFZhbGlkIHZhbHVlczpcbiAgICAgKiBBVVRIX0NPREU6IFZlcmlmaWNhdGlvbiBjb2RlIGF1dGhvcml6YXRpb24sIHRvIHZlcmlmeSB3aGV0aGVyIHRoZSB2ZXJpZmljYXRpb24gY29kZSBwYXNzZWQgaW4gYnkgQXV0aENvZGUgaXMgY29ycmVjdC5cbiAgICAgKiBSRVNPVVJDRV9ESVJFQ1RPUlk6IFJlc291cmNlIGRpcmVjdG9yeSBhdXRob3JpemF0aW9uLCB2ZXJpZnkgd2hldGhlciB0aGUgQXV0aG9yaXplZFVzZXJJZCBhbmQgdGhlIGN1cnJlbnQgYWNjb3VudCBoYXZlIHJlc291cmNlIGRpcmVjdG9yeSBjcmVkaXQuV2hlbiBpdCBpcyBlbXB0eSwgaXQgaXMgdGhlIHNhbWUgYXMgQVVUSF9DT0RFLCB0aGF0IGlzLCB2ZXJpZmljYXRpb24gY29kZSBhdXRob3JpemF0aW9uLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGF1dGhDaGFubmVsPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgYXV0aENvZGU6IFZlcmlmaWNhdGlvbiBjb2RlLCBpZiBBdXRoQ2hhbm5lbCB0YWtlcyBcIkFVVEhfQ09ERVwiIG9yIGlzIGVtcHR5LCBpdCBpcyBtYW5kYXRvcnkuXG4gICAgICovXG4gICAgcmVhZG9ubHkgYXV0aENvZGU/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBhdXRoVHlwZTogQXV0aG9yaXphdGlvbiB0eXBlLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGF1dGhUeXBlPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgaWdub3JlRGVsZXRpb25Gb3JiaWRkZW46IFdoZXRoZXIgdG8gaWdub3JlIGZvbGxvd2luZyBkZWxldGlvbiBmb3JiaWRkZW4gZXJyb3JzIHdoZW4gZGVsZXRpbmc6LSBVc2VyQXV0aC5EZWxldGVGb3JiaWRkZW4uWm9uZVZwY0V4aXN0c1xuICAgICAqL1xuICAgIHJlYWRvbmx5IGlnbm9yZURlbGV0aW9uRm9yYmlkZGVuPzogYm9vbGVhbiB8IHJvcy5JUmVzb2x2YWJsZTtcbn1cblxuLyoqXG4gKiBUaGlzIGNsYXNzIGVuY2Fwc3VsYXRlcyBhbmQgZXh0ZW5kcyB0aGUgUk9TIHJlc291cmNlIHR5cGUgYEFMSVlVTjo6UFZUWjo6VXNlclZwY0F1dGhvcml6YXRpb25gLCB3aGljaCBpcyB1c2VkIHRvIGFzc29jaWF0ZSB2aXJ0dWFsIHByaXZhdGUgY2xvdWRzIChWUENzKSBhY3Jvc3MgYWNjb3VudHMuXG4gKiBATm90ZSBUaGlzIGNsYXNzIG1heSBoYXZlIHNvbWUgbmV3IGZ1bmN0aW9ucyB0byBmYWNpbGl0YXRlIGRldmVsb3BtZW50LCBzbyBpdCBpcyByZWNvbW1lbmRlZCB0byB1c2UgdGhpcyBjbGFzcyBpbnN0ZWFkIG9mIGBSb3NVc2VyVnBjQXV0aG9yaXphdGlvbmBmb3IgYSBtb3JlIGNvbnZlbmllbnQgZGV2ZWxvcG1lbnQgZXhwZXJpZW5jZS5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvYWxpeXVuLXB2dHotdXNlcnZwY2F1dGhvcml6YXRpb25cbiAqL1xuZXhwb3J0IGNsYXNzIFVzZXJWcGNBdXRob3JpemF0aW9uIGV4dGVuZHMgcm9zLlJlc291cmNlIHtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBBdXRoVHlwZTogQXV0aG9yaXphdGlvbiB0eXBlLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyQXV0aFR5cGU6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBBdXRob3JpemVkVXNlcklkOiBUaGUgYWNjb3VudCBJRCBvZiB0aGUgdXNlciB3aG8gYXV0aG9yaXplcyB0aGUgcmVzb3VyY2UuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJBdXRob3JpemVkVXNlcklkOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQYXJhbSBzY29wZSAtIHNjb3BlIGluIHdoaWNoIHRoaXMgcmVzb3VyY2UgaXMgZGVmaW5lZFxuICAgICAqIFBhcmFtIGlkICAgIC0gc2NvcGVkIGlkIG9mIHRoZSByZXNvdXJjZVxuICAgICAqIFBhcmFtIHByb3BzIC0gcmVzb3VyY2UgcHJvcGVydGllc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiByb3MuQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogVXNlclZwY0F1dGhvcml6YXRpb25Qcm9wcywgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6Ym9vbGVhbiA9IHRydWUpIHtcbiAgICAgICAgc3VwZXIoc2NvcGUsIGlkKTtcblxuICAgICAgICBjb25zdCByb3NVc2VyVnBjQXV0aG9yaXphdGlvbiA9IG5ldyBSb3NVc2VyVnBjQXV0aG9yaXphdGlvbih0aGlzLCBpZCwgIHtcbiAgICAgICAgICAgIGF1dGhDb2RlOiBwcm9wcy5hdXRoQ29kZSxcbiAgICAgICAgICAgIGF1dGhDaGFubmVsOiBwcm9wcy5hdXRoQ2hhbm5lbCxcbiAgICAgICAgICAgIGF1dGhvcml6ZWRVc2VySWQ6IHByb3BzLmF1dGhvcml6ZWRVc2VySWQsXG4gICAgICAgICAgICBhdXRoVHlwZTogcHJvcHMuYXV0aFR5cGUsXG4gICAgICAgICAgICBpZ25vcmVEZWxldGlvbkZvcmJpZGRlbjogcHJvcHMuaWdub3JlRGVsZXRpb25Gb3JiaWRkZW4gPT09IHVuZGVmaW5lZCB8fCBwcm9wcy5pZ25vcmVEZWxldGlvbkZvcmJpZGRlbiA9PT0gbnVsbCA/IGZhbHNlIDogcHJvcHMuaWdub3JlRGVsZXRpb25Gb3JiaWRkZW4sXG4gICAgICAgIH0sIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ICYmIHRoaXMuc3RhY2suZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQpO1xuICAgICAgICB0aGlzLnJlc291cmNlID0gcm9zVXNlclZwY0F1dGhvcml6YXRpb247XG4gICAgICAgIHRoaXMuYXR0ckF1dGhUeXBlID0gcm9zVXNlclZwY0F1dGhvcml6YXRpb24uYXR0ckF1dGhUeXBlO1xuICAgICAgICB0aGlzLmF0dHJBdXRob3JpemVkVXNlcklkID0gcm9zVXNlclZwY0F1dGhvcml6YXRpb24uYXR0ckF1dGhvcml6ZWRVc2VySWQ7XG4gICAgfVxufVxuIl19