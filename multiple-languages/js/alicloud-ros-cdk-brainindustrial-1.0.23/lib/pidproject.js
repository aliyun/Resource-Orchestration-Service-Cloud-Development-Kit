"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PidProject = exports.PidProjectProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const brainindustrial_generated_1 = require("./brainindustrial.generated");
Object.defineProperty(exports, "PidProjectProperty", { enumerable: true, get: function () { return brainindustrial_generated_1.RosPidProject; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::BrainIndustrial::PidProject`, which is used to add a project.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosPidProject`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-brainindustrial-pidproject
 */
class PidProject extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosPidProject = new brainindustrial_generated_1.RosPidProject(this, id, {
            pidProjectDesc: props.pidProjectDesc,
            pidProjectName: props.pidProjectName,
            pidOrganizationId: props.pidOrganizationId,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosPidProject;
        this.attrPidOrganizationId = rosPidProject.attrPidOrganizationId;
        this.attrPidProjectDesc = rosPidProject.attrPidProjectDesc;
        this.attrPidProjectId = rosPidProject.attrPidProjectId;
        this.attrPidProjectName = rosPidProject.attrPidProjectName;
    }
}
exports.PidProject = PidProject;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGlkcHJvamVjdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInBpZHByb2plY3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsOENBQThDO0FBQzlDLDJFQUE0RDtBQUVsQyxtR0FGakIseUNBQWEsT0FFc0I7QUF3QjVDOzs7O0dBSUc7QUFDSCxNQUFhLFVBQVcsU0FBUSxHQUFHLENBQUMsUUFBUTtJQTBCeEM7Ozs7T0FJRztJQUNILFlBQVksS0FBb0IsRUFBRSxFQUFVLEVBQUUsS0FBc0IsRUFBRSxtQ0FBMkMsSUFBSTtRQUNqSCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ2pCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQ2IsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLGdDQUFnQyxHQUFHLGdDQUFnQyxDQUFDO1FBRXpFLE1BQU0sYUFBYSxHQUFHLElBQUkseUNBQWEsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFHO1lBQy9DLGNBQWMsRUFBRSxLQUFLLENBQUMsY0FBYztZQUNwQyxjQUFjLEVBQUUsS0FBSyxDQUFDLGNBQWM7WUFDcEMsaUJBQWlCLEVBQUUsS0FBSyxDQUFDLGlCQUFpQjtTQUM3QyxFQUFFLGdDQUFnQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztRQUNwRixJQUFJLENBQUMsUUFBUSxHQUFHLGFBQWEsQ0FBQztRQUM5QixJQUFJLENBQUMscUJBQXFCLEdBQUcsYUFBYSxDQUFDLHFCQUFxQixDQUFDO1FBQ2pFLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxhQUFhLENBQUMsa0JBQWtCLENBQUM7UUFDM0QsSUFBSSxDQUFDLGdCQUFnQixHQUFHLGFBQWEsQ0FBQyxnQkFBZ0IsQ0FBQztRQUN2RCxJQUFJLENBQUMsa0JBQWtCLEdBQUcsYUFBYSxDQUFDLGtCQUFrQixDQUFDO0lBQy9ELENBQUM7Q0FDSjtBQWpERCxnQ0FpREMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyByb3MgZnJvbSAnQGFsaWNsb3VkL3Jvcy1jZGstY29yZSc7XG5pbXBvcnQgeyBSb3NQaWRQcm9qZWN0IH0gZnJvbSAnLi9icmFpbmluZHVzdHJpYWwuZ2VuZXJhdGVkJztcbi8vIEdlbmVyYXRlZCBmcm9tIHRoZSBBbGlDbG91ZCBST1MgUmVzb3VyY2UgU3BlY2lmaWNhdGlvblxuZXhwb3J0IHsgUm9zUGlkUHJvamVjdCBhcyBQaWRQcm9qZWN0UHJvcGVydHkgfTtcblxuLyoqXG4gKiBQcm9wZXJ0aWVzIGZvciBkZWZpbmluZyBhIGBQaWRQcm9qZWN0YC5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvYWxpeXVuLWJyYWluaW5kdXN0cmlhbC1waWRwcm9qZWN0XG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUGlkUHJvamVjdFByb3BzIHtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHBpZE9yZ2FuaXphdGlvbklkOiBQaWRPcmdhbml6YXRpb25JZFxuICAgICAqL1xuICAgIHJlYWRvbmx5IHBpZE9yZ2FuaXphdGlvbklkOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBwaWRQcm9qZWN0TmFtZTogUGlkUHJvamVjdE5hbWVcbiAgICAgKi9cbiAgICByZWFkb25seSBwaWRQcm9qZWN0TmFtZTogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgcGlkUHJvamVjdERlc2M6IFBpZFByb2plY3REZXNjXG4gICAgICovXG4gICAgcmVhZG9ubHkgcGlkUHJvamVjdERlc2M/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG59XG5cbi8qKlxuICogVGhpcyBjbGFzcyBlbmNhcHN1bGF0ZXMgYW5kIGV4dGVuZHMgdGhlIFJPUyByZXNvdXJjZSB0eXBlIGBBTElZVU46OkJyYWluSW5kdXN0cmlhbDo6UGlkUHJvamVjdGAsIHdoaWNoIGlzIHVzZWQgdG8gYWRkIGEgcHJvamVjdC5cbiAqIEBOb3RlIFRoaXMgY2xhc3MgbWF5IGhhdmUgc29tZSBuZXcgZnVuY3Rpb25zIHRvIGZhY2lsaXRhdGUgZGV2ZWxvcG1lbnQsIHNvIGl0IGlzIHJlY29tbWVuZGVkIHRvIHVzZSB0aGlzIGNsYXNzIGluc3RlYWQgb2YgYFJvc1BpZFByb2plY3RgZm9yIGEgbW9yZSBjb252ZW5pZW50IGRldmVsb3BtZW50IGV4cGVyaWVuY2UuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2FsaXl1bi1icmFpbmluZHVzdHJpYWwtcGlkcHJvamVjdFxuICovXG5leHBvcnQgY2xhc3MgUGlkUHJvamVjdCBleHRlbmRzIHJvcy5SZXNvdXJjZSB7XG4gICAgcHJvdGVjdGVkIHNjb3BlOiByb3MuQ29uc3RydWN0O1xuICAgIHByb3RlY3RlZCBpZDogc3RyaW5nO1xuICAgIHByb3RlY3RlZCBwcm9wczogUGlkUHJvamVjdFByb3BzO1xuICAgIHByb3RlY3RlZCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBQaWRPcmdhbml6YXRpb25JZDogUGlkT3JnYW5pemF0aW9uSWRcbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0clBpZE9yZ2FuaXphdGlvbklkOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgUGlkUHJvamVjdERlc2M6IFBpZFByb2plY3REZXNjXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJQaWRQcm9qZWN0RGVzYzogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIFBpZFByb2plY3RJZDogUGlkUHJvamVjdElkXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJQaWRQcm9qZWN0SWQ6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBQaWRQcm9qZWN0TmFtZTogUGlkUHJvamVjdE5hbWVcbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0clBpZFByb2plY3ROYW1lOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQYXJhbSBzY29wZSAtIHNjb3BlIGluIHdoaWNoIHRoaXMgcmVzb3VyY2UgaXMgZGVmaW5lZFxuICAgICAqIFBhcmFtIGlkICAgIC0gc2NvcGVkIGlkIG9mIHRoZSByZXNvdXJjZVxuICAgICAqIFBhcmFtIHByb3BzIC0gcmVzb3VyY2UgcHJvcGVydGllc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiByb3MuQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogUGlkUHJvamVjdFByb3BzLCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDpib29sZWFuID0gdHJ1ZSkge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQpO1xuICAgICAgICB0aGlzLnNjb3BlID0gc2NvcGU7XG4gICAgICAgIHRoaXMuaWQgPSBpZDtcbiAgICAgICAgdGhpcy5wcm9wcyA9IHByb3BzO1xuICAgICAgICB0aGlzLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ID0gZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ7XG5cbiAgICAgICAgY29uc3Qgcm9zUGlkUHJvamVjdCA9IG5ldyBSb3NQaWRQcm9qZWN0KHRoaXMsIGlkLCAge1xuICAgICAgICAgICAgcGlkUHJvamVjdERlc2M6IHByb3BzLnBpZFByb2plY3REZXNjLFxuICAgICAgICAgICAgcGlkUHJvamVjdE5hbWU6IHByb3BzLnBpZFByb2plY3ROYW1lLFxuICAgICAgICAgICAgcGlkT3JnYW5pemF0aW9uSWQ6IHByb3BzLnBpZE9yZ2FuaXphdGlvbklkLFxuICAgICAgICB9LCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCAmJiB0aGlzLnN0YWNrLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50KTtcbiAgICAgICAgdGhpcy5yZXNvdXJjZSA9IHJvc1BpZFByb2plY3Q7XG4gICAgICAgIHRoaXMuYXR0clBpZE9yZ2FuaXphdGlvbklkID0gcm9zUGlkUHJvamVjdC5hdHRyUGlkT3JnYW5pemF0aW9uSWQ7XG4gICAgICAgIHRoaXMuYXR0clBpZFByb2plY3REZXNjID0gcm9zUGlkUHJvamVjdC5hdHRyUGlkUHJvamVjdERlc2M7XG4gICAgICAgIHRoaXMuYXR0clBpZFByb2plY3RJZCA9IHJvc1BpZFByb2plY3QuYXR0clBpZFByb2plY3RJZDtcbiAgICAgICAgdGhpcy5hdHRyUGlkUHJvamVjdE5hbWUgPSByb3NQaWRQcm9qZWN0LmF0dHJQaWRQcm9qZWN0TmFtZTtcbiAgICB9XG59XG4iXX0=