"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KubernetesCluster = exports.KubernetesClusterProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const cs_generated_1 = require("./cs.generated");
Object.defineProperty(exports, "KubernetesClusterProperty", { enumerable: true, get: function () { return cs_generated_1.RosKubernetesCluster; } });
/**
 * This class encapsulates and extends the ROS resource type `DATASOURCE::CS::KubernetesCluster`, which is used to query the information about a Container Service for Kubernetes (ACK) cluster.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosKubernetesCluster`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/datasource-cs-kubernetescluster
 */
class KubernetesCluster extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props = {}, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosKubernetesCluster = new cs_generated_1.RosKubernetesCluster(this, id, {
            clusterId: props.clusterId,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosKubernetesCluster;
        this.attrClusterId = rosKubernetesCluster.attrClusterId;
        this.attrClusterSpec = rosKubernetesCluster.attrClusterSpec;
        this.attrClusterType = rosKubernetesCluster.attrClusterType;
        this.attrCreated = rosKubernetesCluster.attrCreated;
        this.attrCurrentVersion = rosKubernetesCluster.attrCurrentVersion;
        this.attrDeletionProtection = rosKubernetesCluster.attrDeletionProtection;
        this.attrDockerVersion = rosKubernetesCluster.attrDockerVersion;
        this.attrExternalLoadbalancerId = rosKubernetesCluster.attrExternalLoadbalancerId;
        this.attrInitVersion = rosKubernetesCluster.attrInitVersion;
        this.attrMaintenanceWindow = rosKubernetesCluster.attrMaintenanceWindow;
        this.attrMasterUrl = rosKubernetesCluster.attrMasterUrl;
        this.attrMetaData = rosKubernetesCluster.attrMetaData;
        this.attrName = rosKubernetesCluster.attrName;
        this.attrNetworkMode = rosKubernetesCluster.attrNetworkMode;
        this.attrNextVersion = rosKubernetesCluster.attrNextVersion;
        this.attrParameters = rosKubernetesCluster.attrParameters;
        this.attrPrivateZone = rosKubernetesCluster.attrPrivateZone;
        this.attrProfile = rosKubernetesCluster.attrProfile;
        this.attrRegionId = rosKubernetesCluster.attrRegionId;
        this.attrResourceGroupId = rosKubernetesCluster.attrResourceGroupId;
        this.attrSecurityGroupId = rosKubernetesCluster.attrSecurityGroupId;
        this.attrSize = rosKubernetesCluster.attrSize;
        this.attrState = rosKubernetesCluster.attrState;
        this.attrSubnetCidr = rosKubernetesCluster.attrSubnetCidr;
        this.attrTags = rosKubernetesCluster.attrTags;
        this.attrUpdated = rosKubernetesCluster.attrUpdated;
        this.attrVSwitchId = rosKubernetesCluster.attrVSwitchId;
        this.attrVpcId = rosKubernetesCluster.attrVpcId;
        this.attrWorkerRamRoleName = rosKubernetesCluster.attrWorkerRamRoleName;
        this.attrZoneId = rosKubernetesCluster.attrZoneId;
    }
}
exports.KubernetesCluster = KubernetesCluster;
//# sourceMappingURL=data:application/json;base64,