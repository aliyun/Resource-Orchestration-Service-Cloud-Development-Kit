"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MultiZoneCluster = exports.MultiZoneClusterProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const hbase_generated_1 = require("./hbase.generated");
Object.defineProperty(exports, "MultiZoneClusterProperty", { enumerable: true, get: function () { return hbase_generated_1.RosMultiZoneCluster; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::HBase::MultiZoneCluster`, which is used to create an ApsaraDB for HBase cluster that resides in multiple zones.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosMultiZoneCluster`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-hbase-multizonecluster
 */
class MultiZoneCluster extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosMultiZoneCluster = new hbase_generated_1.RosMultiZoneCluster(this, id, {
            standbyZoneId: props.standbyZoneId,
            resourceGroupId: props.resourceGroupId,
            masterInstanceType: props.masterInstanceType,
            logDiskSize: props.logDiskSize,
            standbyVSwitchId: props.standbyVSwitchId,
            securityIpList: props.securityIpList,
            coreInstanceType: props.coreInstanceType,
            clusterName: props.clusterName,
            engine: props.engine,
            arbiterZoneId: props.arbiterZoneId,
            autoRenewPeriod: props.autoRenewPeriod,
            primaryZoneId: props.primaryZoneId,
            engineVersion: props.engineVersion,
            multiZoneCombination: props.multiZoneCombination,
            coreNodeCount: props.coreNodeCount,
            archVersion: props.archVersion,
            period: props.period,
            logInstanceType: props.logInstanceType,
            payType: props.payType,
            primaryVSwitchId: props.primaryVSwitchId,
            arbiterVSwitchId: props.arbiterVSwitchId,
            vpcId: props.vpcId,
            coreDiskType: props.coreDiskType,
            logNodeCount: props.logNodeCount,
            logDiskType: props.logDiskType,
            coreDiskSize: props.coreDiskSize,
            periodUnit: props.periodUnit,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosMultiZoneCluster;
        this.attrClusterId = rosMultiZoneCluster.attrClusterId;
        this.attrServiceConnAddrs = rosMultiZoneCluster.attrServiceConnAddrs;
        this.attrSlbConnAddrs = rosMultiZoneCluster.attrSlbConnAddrs;
        this.attrThriftConn = rosMultiZoneCluster.attrThriftConn;
        this.attrUiProxyConnAddrInfo = rosMultiZoneCluster.attrUiProxyConnAddrInfo;
        this.attrZkConnAddrs = rosMultiZoneCluster.attrZkConnAddrs;
    }
}
exports.MultiZoneCluster = MultiZoneCluster;
//# sourceMappingURL=data:application/json;base64,