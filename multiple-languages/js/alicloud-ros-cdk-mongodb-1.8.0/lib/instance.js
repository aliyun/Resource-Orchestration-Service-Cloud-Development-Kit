"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Instance = exports.InstanceProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const mongodb_generated_1 = require("./mongodb.generated");
Object.defineProperty(exports, "InstanceProperty", { enumerable: true, get: function () { return mongodb_generated_1.RosInstance; } });
const perms = require("./perms.cdk");
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::MONGODB::Instance`, which is used to create or clone an ApsaraDB for MongoDB replica set instance.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosInstance`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-mongodb-instance
 */
class Instance extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosInstance = new mongodb_generated_1.RosInstance(this, id, {
            businessInfo: props.businessInfo,
            resourceGroupId: props.resourceGroupId,
            hiddenZoneId: props.hiddenZoneId,
            autoRenew: props.autoRenew,
            securityIpArray: props.securityIpArray,
            backupId: props.backupId,
            storageEngine: props.storageEngine === undefined || props.storageEngine === null ? 'WiredTiger' : props.storageEngine,
            restoreTime: props.restoreTime,
            privateConnections: props.privateConnections,
            dbInstanceStorage: props.dbInstanceStorage,
            tags: props.tags,
            dbInstanceDescription: props.dbInstanceDescription,
            couponNo: props.couponNo,
            tdeStatus: props.tdeStatus,
            engineVersion: props.engineVersion === undefined || props.engineVersion === null ? '7.0' : props.engineVersion,
            storageType: props.storageType,
            readonlyReplicas: props.readonlyReplicas,
            replicationFactor: props.replicationFactor,
            zoneId: props.zoneId,
            dbInstanceClass: props.dbInstanceClass,
            vSwitchId: props.vSwitchId,
            securityGroupId: props.securityGroupId,
            period: props.period === undefined || props.period === null ? 1 : props.period,
            vpcPasswordFree: props.vpcPasswordFree,
            secondaryZoneId: props.secondaryZoneId,
            accountPassword: props.accountPassword,
            vpcId: props.vpcId,
            chargeType: props.chargeType === undefined || props.chargeType === null ? 'PostPaid' : props.chargeType,
            databaseNames: props.databaseNames,
            srcDbInstanceId: props.srcDbInstanceId,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosInstance;
        this.attrArn = rosInstance.attrArn;
        this.attrConnectionUri = rosInstance.attrConnectionUri;
        this.attrDbInstanceId = rosInstance.attrDbInstanceId;
        this.attrDbInstanceStatus = rosInstance.attrDbInstanceStatus;
        this.attrOrderId = rosInstance.attrOrderId;
        this.attrReplicaSetName = rosInstance.attrReplicaSetName;
    }
    grant(principle, actions, resourceArn, ...otherResourceArns) {
        const policyDocument = {
            statement: [
                {
                    action: actions,
                    effect: 'Allow',
                    resource: [resourceArn, ...otherResourceArns],
                },
            ],
            version: '1',
        };
        return principle.addToPolicy(policyDocument);
    }
    /**
     * Grant an RAM principal (Role/Group/User) permission to list resources for this MongoDB instance.
     *
     * @param identity The principal
     */
    grantList(identity) {
        return this.grant(identity, perms.MONGODB_INSTANCE_LIST_ACTIONS, this.attrArn);
    }
    /**
     * Grant an RAM principal (Role/Group/User) permission to list and get resources for this MongoDB instance.
     *
     * @param identity The principal
     */
    grantRead(identity) {
        return this.grant(identity, perms.MONGODB_INSTANCE_LIST_ACTIONS.concat(perms.MONGODB_INSTANCE_GET_ACTIONS), this.attrArn);
    }
    /**
     * Grant an RAM principal (Role/Group/User) permission to create, update and delete resources for this MongoDB instance.
     *
     * @param identity The principal
     */
    grantReadWrite(identity) {
        return this.grant(identity, perms.MONGODB_INSTANCE_LIST_ACTIONS.concat(perms.MONGODB_INSTANCE_GET_ACTIONS, perms.MONGODB_INSTANCE_CREATE_ACTIONS, perms.MONGODB_INSTANCE_UPDATE_ACTIONS, perms.MONGODB_INSTANCE_DELETE_ACTIONS), this.attrArn);
    }
    /**
     * Grant an RAM principal (Role/Group/User) full control over this MongoDB instance.
     *
     * @param identity The principal
     */
    grantFullAccess(identity) {
        return this.grant(identity, ['dds:*'], this.attrArn);
    }
}
exports.Instance = Instance;
//# sourceMappingURL=data:application/json;base64,