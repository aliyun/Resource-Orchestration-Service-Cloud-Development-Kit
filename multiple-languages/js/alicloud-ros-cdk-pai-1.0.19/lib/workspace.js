"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Workspace = exports.WorkspaceProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const pai_generated_1 = require("./pai.generated");
Object.defineProperty(exports, "WorkspaceProperty", { enumerable: true, get: function () { return pai_generated_1.RosWorkspace; } });
/**
 * A ROS resource type:  `ALIYUN::PAI::Workspace`
 */
class Workspace extends ros.Resource {
    /**
     * Create a new `ALIYUN::PAI::Workspace`.
     *
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosWorkspace = new pai_generated_1.RosWorkspace(this, id, {
            description: props.description,
            displayName: props.displayName,
            workspaceName: props.workspaceName,
            envTypes: props.envTypes,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosWorkspace;
        this.attrAdminNames = rosWorkspace.attrAdminNames;
        this.attrCreator = rosWorkspace.attrCreator;
        this.attrDescription = rosWorkspace.attrDescription;
        this.attrDisplayName = rosWorkspace.attrDisplayName;
        this.attrEnvTypes = rosWorkspace.attrEnvTypes;
        this.attrExtraInfos = rosWorkspace.attrExtraInfos;
        this.attrOwner = rosWorkspace.attrOwner;
        this.attrUsers = rosWorkspace.attrUsers;
        this.attrWorkspaceId = rosWorkspace.attrWorkspaceId;
        this.attrWorkspaceName = rosWorkspace.attrWorkspaceName;
    }
}
exports.Workspace = Workspace;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid29ya3NwYWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsid29ya3NwYWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDhDQUE4QztBQUM5QyxtREFBK0M7QUFFdEIsa0dBRmhCLDRCQUFZLE9BRXFCO0FBb0MxQzs7R0FFRztBQUNILE1BQWEsU0FBVSxTQUFRLEdBQUcsQ0FBQyxRQUFRO0lBeUR2Qzs7Ozs7O09BTUc7SUFDSCxZQUFZLEtBQW9CLEVBQUUsRUFBVSxFQUFFLEtBQXFCLEVBQUUsbUNBQTJDLElBQUk7UUFDaEgsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUVqQixNQUFNLFlBQVksR0FBRyxJQUFJLDRCQUFZLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRztZQUM3QyxXQUFXLEVBQUUsS0FBSyxDQUFDLFdBQVc7WUFDOUIsV0FBVyxFQUFFLEtBQUssQ0FBQyxXQUFXO1lBQzlCLGFBQWEsRUFBRSxLQUFLLENBQUMsYUFBYTtZQUNsQyxRQUFRLEVBQUUsS0FBSyxDQUFDLFFBQVE7U0FDM0IsRUFBRSxnQ0FBZ0MsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7UUFDcEYsSUFBSSxDQUFDLFFBQVEsR0FBRyxZQUFZLENBQUM7UUFDN0IsSUFBSSxDQUFDLGNBQWMsR0FBRyxZQUFZLENBQUMsY0FBYyxDQUFDO1FBQ2xELElBQUksQ0FBQyxXQUFXLEdBQUcsWUFBWSxDQUFDLFdBQVcsQ0FBQztRQUM1QyxJQUFJLENBQUMsZUFBZSxHQUFHLFlBQVksQ0FBQyxlQUFlLENBQUM7UUFDcEQsSUFBSSxDQUFDLGVBQWUsR0FBRyxZQUFZLENBQUMsZUFBZSxDQUFDO1FBQ3BELElBQUksQ0FBQyxZQUFZLEdBQUcsWUFBWSxDQUFDLFlBQVksQ0FBQztRQUM5QyxJQUFJLENBQUMsY0FBYyxHQUFHLFlBQVksQ0FBQyxjQUFjLENBQUM7UUFDbEQsSUFBSSxDQUFDLFNBQVMsR0FBRyxZQUFZLENBQUMsU0FBUyxDQUFDO1FBQ3hDLElBQUksQ0FBQyxTQUFTLEdBQUcsWUFBWSxDQUFDLFNBQVMsQ0FBQztRQUN4QyxJQUFJLENBQUMsZUFBZSxHQUFHLFlBQVksQ0FBQyxlQUFlLENBQUM7UUFDcEQsSUFBSSxDQUFDLGlCQUFpQixHQUFHLFlBQVksQ0FBQyxpQkFBaUIsQ0FBQztJQUM1RCxDQUFDO0NBQ0o7QUFyRkQsOEJBcUZDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcm9zIGZyb20gJ0BhbGljbG91ZC9yb3MtY2RrLWNvcmUnO1xuaW1wb3J0IHsgUm9zV29ya3NwYWNlIH0gZnJvbSAnLi9wYWkuZ2VuZXJhdGVkJztcbi8vIEdlbmVyYXRlZCBmcm9tIHRoZSBBbGlDbG91ZCBST1MgUmVzb3VyY2UgU3BlY2lmaWNhdGlvblxuZXhwb3J0IHsgUm9zV29ya3NwYWNlIGFzIFdvcmtzcGFjZVByb3BlcnR5IH07XG5cbi8qKlxuICogUHJvcGVydGllcyBmb3IgZGVmaW5pbmcgYSBgQUxJWVVOOjpQQUk6OldvcmtzcGFjZWBcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBXb3Jrc3BhY2VQcm9wcyB7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBkZXNjcmlwdGlvbjogV29ya3NwYWNlIGRlc2NyaXB0aW9uLCBubyBtb3JlIHRoYW4gODAgY2hhcmFjdGVycy5cbiAgICAgKi9cbiAgICByZWFkb25seSBkZXNjcmlwdGlvbjogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgZW52VHlwZXM6IEVudmlyb25tZW50cyBjb250YWluZWQgaW4gdGhlIHdvcmtzcGFjZTpcbiAgICAgKiAtIFNpbXBsZSBtb2RlIG9ubHkgcHJvZHVjdGlvbiBlbnZpcm9ubWVudCAocHJvZCkuXG4gICAgICogLSBTdGFuZGFyZCBtb2RlIGluY2x1ZGVzIGRldmVsb3BtZW50IGVudmlyb25tZW50IChkZXYpIGFuZCBwcm9kdWN0aW9uIGVudmlyb25tZW50IChwcm9kKS5cbiAgICAgKi9cbiAgICByZWFkb25seSBlbnZUeXBlczogQXJyYXk8c3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlPiB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHdvcmtzcGFjZU5hbWU6IFRoZSB3b3Jrc3BhY2UgbmFtZS4gVGhlIGZvcm1hdCBpcyBhcyBmb2xsb3dzOlxuICAgICAqIC0gMyB0byAyMyBjaGFyYWN0ZXJzIGluIGxlbmd0aCBhbmQgY2FuIGNvbnRhaW4gbGV0dGVycywgdW5kZXJzY29yZXMsIG9yIG51bWJlcnMuXG4gICAgICogLSBNdXN0IHN0YXJ0IHdpdGggYSBsYXJnZSBvciBzbWFsbCBsZXR0ZXIuXG4gICAgICogLSBVbmlxdWUgaW4gdGhlIGN1cnJlbnQgcmVnaW9uLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHdvcmtzcGFjZU5hbWU6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGRpc3BsYXlOYW1lOiBJdCBpcyByZWNvbW1lbmRlZCB0aGF0IHlvdSBuYW1lIHRoZSB3b3Jrc3BhY2UgYmFzZWQgb24gdGhlIGJ1c2luZXNzIGF0dHJpYnV0ZSB0byBpZGVudGlmeSB0aGUgcHVycG9zZSBvZiB0aGUgd29ya3NwYWNlLiBJZiBub3QgY29uZmlndXJlZCwgdGhlIGRlZmF1bHQgdmFsdWUgaXMgdGhlIHdvcmtzcGFjZSBuYW1lLiBUaGUgZm9ybWF0IGlzIGFzIGZvbGxvd3M6XG4gICAgICogLSAzIHRvIDIzIGNoYXJhY3RlcnMgaW4gbGVuZ3RoIGFuZCBjYW4gY29udGFpbiBsZXR0ZXJzLCB1bmRlcnNjb3Jlcywgb3IgbnVtYmVycy5cbiAgICAgKiAtIE11c3Qgc3RhcnQgd2l0aCBhIGxhcmdlIG9yIHNtYWxsIGxldHRlci5cbiAgICAgKiAtIFVuaXF1ZSBpbiB0aGUgY3VycmVudCByZWdpb24uXG4gICAgICovXG4gICAgcmVhZG9ubHkgZGlzcGxheU5hbWU/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG59XG5cbi8qKlxuICogQSBST1MgcmVzb3VyY2UgdHlwZTogIGBBTElZVU46OlBBSTo6V29ya3NwYWNlYFxuICovXG5leHBvcnQgY2xhc3MgV29ya3NwYWNlIGV4dGVuZHMgcm9zLlJlc291cmNlIHtcblxuICAgIC8qKlxuICAgICAqIEEgZmFjdG9yeSBtZXRob2QgdGhhdCBjcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIHRoaXMgY2xhc3MgZnJvbSBhbiBvYmplY3RcbiAgICAgKiBjb250YWluaW5nIHRoZSBwcm9wZXJ0aWVzIG9mIHRoaXMgUk9TIHJlc291cmNlLCB3aGljaCB3aWxsIGJlIGFzc2lnbmVkIHRvIFJPUyByZXNvdXJjZS5cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBBZG1pbk5hbWVzOiBMaXN0IG9mIGFkbWluaXN0cmF0b3IgYWNjb3VudCBuYW1lcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckFkbWluTmFtZXM6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBDcmVhdG9yOiBUaGUgdXNlciBJRCBvZiB0aGUgY3JlYXRvci5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckNyZWF0b3I6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBEZXNjcmlwdGlvbjogV29ya3NwYWNlIGRlc2NyaXB0aW9uLCBubyBtb3JlIHRoYW4gODAgY2hhcmFjdGVycy5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckRlc2NyaXB0aW9uOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgRGlzcGxheU5hbWU6IEl0IGlzIHJlY29tbWVuZGVkIHRoYXQgeW91IG5hbWUgdGhlIHdvcmtzcGFjZSBiYXNlZCBvbiB0aGUgYnVzaW5lc3MgYXR0cmlidXRlIHRvIGlkZW50aWZ5IHRoZSBwdXJwb3NlIG9mIHRoZSB3b3Jrc3BhY2UuIElmIG5vdCBjb25maWd1cmVkLCB0aGUgZGVmYXVsdCB2YWx1ZSBpcyB0aGUgd29ya3NwYWNlIG5hbWUuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJEaXNwbGF5TmFtZTogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIEVudlR5cGVzOiBFbnZpcm9ubWVudHMgY29udGFpbmVkIGluIHRoZSB3b3Jrc3BhY2U6LlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyRW52VHlwZXM6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBFeHRyYUluZm9zOiBBZGRpdGlvbmFsIGluZm9ybWF0aW9uLCBjdXJyZW50bHkgaW5jbHVkaW5nIFRlbmFudElkICh0ZW5hbnQgSUQpLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyRXh0cmFJbmZvczogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIE93bmVyOiBXb3Jrc3BhY2Ugb3duZXIgSUQsIGRpc3BsYXllZCB3aGVuIFZlcmJvc2UgaXMgdHJ1ZS5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ck93bmVyOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgVXNlcnM6IExpc3Qgb2YgdXNlcnMuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJVc2Vyczogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIFdvcmtzcGFjZUlkOiBUaGUgSUQgb2YgdGhlIHdvcmtzcGFjZS5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0cldvcmtzcGFjZUlkOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgV29ya3NwYWNlTmFtZTogVGhlIHdvcmtzcGFjZSBuYW1lLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyV29ya3NwYWNlTmFtZTogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IGBBTElZVU46OlBBSTo6V29ya3NwYWNlYC5cbiAgICAgKlxuICAgICAqIFBhcmFtIHNjb3BlIC0gc2NvcGUgaW4gd2hpY2ggdGhpcyByZXNvdXJjZSBpcyBkZWZpbmVkXG4gICAgICogUGFyYW0gaWQgICAgLSBzY29wZWQgaWQgb2YgdGhlIHJlc291cmNlXG4gICAgICogUGFyYW0gcHJvcHMgLSByZXNvdXJjZSBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IHJvcy5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBXb3Jrc3BhY2VQcm9wcywgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6Ym9vbGVhbiA9IHRydWUpIHtcbiAgICAgICAgc3VwZXIoc2NvcGUsIGlkKTtcblxuICAgICAgICBjb25zdCByb3NXb3Jrc3BhY2UgPSBuZXcgUm9zV29ya3NwYWNlKHRoaXMsIGlkLCAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IHByb3BzLmRlc2NyaXB0aW9uLFxuICAgICAgICAgICAgZGlzcGxheU5hbWU6IHByb3BzLmRpc3BsYXlOYW1lLFxuICAgICAgICAgICAgd29ya3NwYWNlTmFtZTogcHJvcHMud29ya3NwYWNlTmFtZSxcbiAgICAgICAgICAgIGVudlR5cGVzOiBwcm9wcy5lbnZUeXBlcyxcbiAgICAgICAgfSwgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgJiYgdGhpcy5zdGFjay5lbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCk7XG4gICAgICAgIHRoaXMucmVzb3VyY2UgPSByb3NXb3Jrc3BhY2U7XG4gICAgICAgIHRoaXMuYXR0ckFkbWluTmFtZXMgPSByb3NXb3Jrc3BhY2UuYXR0ckFkbWluTmFtZXM7XG4gICAgICAgIHRoaXMuYXR0ckNyZWF0b3IgPSByb3NXb3Jrc3BhY2UuYXR0ckNyZWF0b3I7XG4gICAgICAgIHRoaXMuYXR0ckRlc2NyaXB0aW9uID0gcm9zV29ya3NwYWNlLmF0dHJEZXNjcmlwdGlvbjtcbiAgICAgICAgdGhpcy5hdHRyRGlzcGxheU5hbWUgPSByb3NXb3Jrc3BhY2UuYXR0ckRpc3BsYXlOYW1lO1xuICAgICAgICB0aGlzLmF0dHJFbnZUeXBlcyA9IHJvc1dvcmtzcGFjZS5hdHRyRW52VHlwZXM7XG4gICAgICAgIHRoaXMuYXR0ckV4dHJhSW5mb3MgPSByb3NXb3Jrc3BhY2UuYXR0ckV4dHJhSW5mb3M7XG4gICAgICAgIHRoaXMuYXR0ck93bmVyID0gcm9zV29ya3NwYWNlLmF0dHJPd25lcjtcbiAgICAgICAgdGhpcy5hdHRyVXNlcnMgPSByb3NXb3Jrc3BhY2UuYXR0clVzZXJzO1xuICAgICAgICB0aGlzLmF0dHJXb3Jrc3BhY2VJZCA9IHJvc1dvcmtzcGFjZS5hdHRyV29ya3NwYWNlSWQ7XG4gICAgICAgIHRoaXMuYXR0cldvcmtzcGFjZU5hbWUgPSByb3NXb3Jrc3BhY2UuYXR0cldvcmtzcGFjZU5hbWU7XG4gICAgfVxufVxuIl19