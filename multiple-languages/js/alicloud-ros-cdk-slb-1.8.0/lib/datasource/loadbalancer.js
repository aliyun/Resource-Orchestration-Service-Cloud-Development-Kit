"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LoadBalancer = exports.LoadBalancerProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const slb_generated_1 = require("./slb.generated");
Object.defineProperty(exports, "LoadBalancerProperty", { enumerable: true, get: function () { return slb_generated_1.RosLoadBalancer; } });
/**
 * This class encapsulates and extends the ROS resource type `DATASOURCE::SLB::LoadBalancer`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosLoadBalancer`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/datasource-slb-loadbalancer
 */
class LoadBalancer extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosLoadBalancer = new slb_generated_1.RosLoadBalancer(this, id, {
            loadBalancerId: props.loadBalancerId,
            refreshOptions: props.refreshOptions === undefined || props.refreshOptions === null ? 'Never' : props.refreshOptions,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosLoadBalancer;
        this.attrAddress = rosLoadBalancer.attrAddress;
        this.attrAddressIpVersion = rosLoadBalancer.attrAddressIpVersion;
        this.attrAddressType = rosLoadBalancer.attrAddressType;
        this.attrAutoReleaseTime = rosLoadBalancer.attrAutoReleaseTime;
        this.attrBackendServers = rosLoadBalancer.attrBackendServers;
        this.attrBandwidth = rosLoadBalancer.attrBandwidth;
        this.attrCreateTime = rosLoadBalancer.attrCreateTime;
        this.attrCreateTimeStamp = rosLoadBalancer.attrCreateTimeStamp;
        this.attrDeleteProtection = rosLoadBalancer.attrDeleteProtection;
        this.attrEndTime = rosLoadBalancer.attrEndTime;
        this.attrEndTimeStamp = rosLoadBalancer.attrEndTimeStamp;
        this.attrInstanceChargeType = rosLoadBalancer.attrInstanceChargeType;
        this.attrInternetChargeType = rosLoadBalancer.attrInternetChargeType;
        this.attrListenerPortsAndProtocal = rosLoadBalancer.attrListenerPortsAndProtocal;
        this.attrListenerPortsAndProtocol = rosLoadBalancer.attrListenerPortsAndProtocol;
        this.attrLoadBalancerId = rosLoadBalancer.attrLoadBalancerId;
        this.attrLoadBalancerName = rosLoadBalancer.attrLoadBalancerName;
        this.attrLoadBalancerSpec = rosLoadBalancer.attrLoadBalancerSpec;
        this.attrMasterZoneId = rosLoadBalancer.attrMasterZoneId;
        this.attrModificationProtectionReason = rosLoadBalancer.attrModificationProtectionReason;
        this.attrModificationProtectionStatus = rosLoadBalancer.attrModificationProtectionStatus;
        this.attrNetworkType = rosLoadBalancer.attrNetworkType;
        this.attrPaymentType = rosLoadBalancer.attrPaymentType;
        this.attrRegionIdAlias = rosLoadBalancer.attrRegionIdAlias;
        this.attrRenewalCycUnit = rosLoadBalancer.attrRenewalCycUnit;
        this.attrRenewalDuration = rosLoadBalancer.attrRenewalDuration;
        this.attrRenewalStatus = rosLoadBalancer.attrRenewalStatus;
        this.attrResourceGroupId = rosLoadBalancer.attrResourceGroupId;
        this.attrSlaveZoneId = rosLoadBalancer.attrSlaveZoneId;
        this.attrTags = rosLoadBalancer.attrTags;
        this.attrVSwitchId = rosLoadBalancer.attrVSwitchId;
        this.attrVpcId = rosLoadBalancer.attrVpcId;
    }
}
exports.LoadBalancer = LoadBalancer;
//# sourceMappingURL=data:application/json;base64,