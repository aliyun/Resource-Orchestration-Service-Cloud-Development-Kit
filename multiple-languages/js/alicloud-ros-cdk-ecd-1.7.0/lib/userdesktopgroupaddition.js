"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserDesktopGroupAddition = exports.UserDesktopGroupAdditionProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ecd_generated_1 = require("./ecd.generated");
Object.defineProperty(exports, "UserDesktopGroupAdditionProperty", { enumerable: true, get: function () { return ecd_generated_1.RosUserDesktopGroupAddition; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::ECD::UserDesktopGroupAddition`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosUserDesktopGroupAddition`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-ecd-userdesktopgroupaddition
 */
class UserDesktopGroupAddition extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosUserDesktopGroupAddition = new ecd_generated_1.RosUserDesktopGroupAddition(this, id, {
            desktopGroupId: props.desktopGroupId,
            endUserIds: props.endUserIds,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosUserDesktopGroupAddition;
        this.attrDesktopGroupId = rosUserDesktopGroupAddition.attrDesktopGroupId;
        this.attrEndUserIds = rosUserDesktopGroupAddition.attrEndUserIds;
    }
}
exports.UserDesktopGroupAddition = UserDesktopGroupAddition;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlcmRlc2t0b3Bncm91cGFkZGl0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidXNlcmRlc2t0b3Bncm91cGFkZGl0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDhDQUE4QztBQUM5QyxtREFBOEQ7QUFFdEIsaUhBRi9CLDJDQUEyQixPQUVvQztBQW1DeEU7Ozs7R0FJRztBQUNILE1BQWEsd0JBQXlCLFNBQVEsR0FBRyxDQUFDLFFBQVE7SUFnQnREOzs7O09BSUc7SUFDSCxZQUFZLEtBQW9CLEVBQUUsRUFBVSxFQUFFLEtBQW9DLEVBQUUsbUNBQTJDLElBQUk7UUFDL0gsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNqQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUNiLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxnQ0FBZ0MsR0FBRyxnQ0FBZ0MsQ0FBQztRQUV6RSxNQUFNLDJCQUEyQixHQUFHLElBQUksMkNBQTJCLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRztZQUMzRSxjQUFjLEVBQUUsS0FBSyxDQUFDLGNBQWM7WUFDcEMsVUFBVSxFQUFFLEtBQUssQ0FBQyxVQUFVO1NBQy9CLEVBQUUsZ0NBQWdDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO1FBQ3BGLElBQUksQ0FBQyxRQUFRLEdBQUcsMkJBQTJCLENBQUM7UUFDNUMsSUFBSSxDQUFDLGtCQUFrQixHQUFHLDJCQUEyQixDQUFDLGtCQUFrQixDQUFDO1FBQ3pFLElBQUksQ0FBQyxjQUFjLEdBQUcsMkJBQTJCLENBQUMsY0FBYyxDQUFDO0lBQ3JFLENBQUM7Q0FDSjtBQXBDRCw0REFvQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyByb3MgZnJvbSAnQGFsaWNsb3VkL3Jvcy1jZGstY29yZSc7XG5pbXBvcnQgeyBSb3NVc2VyRGVza3RvcEdyb3VwQWRkaXRpb24gfSBmcm9tICcuL2VjZC5nZW5lcmF0ZWQnO1xuLy8gR2VuZXJhdGVkIGZyb20gdGhlIEFsaUNsb3VkIFJPUyBSZXNvdXJjZSBTcGVjaWZpY2F0aW9uXG5leHBvcnQgeyBSb3NVc2VyRGVza3RvcEdyb3VwQWRkaXRpb24gYXMgVXNlckRlc2t0b3BHcm91cEFkZGl0aW9uUHJvcGVydHkgfTtcblxuLyoqXG4gKiBQcm9wZXJ0aWVzIGZvciBkZWZpbmluZyBhIGBVc2VyRGVza3RvcEdyb3VwQWRkaXRpb25gLlxuICogU2VlIGh0dHBzOi8vd3d3LmFsaWJhYmFjbG91ZC5jb20vaGVscC9yb3MvZGV2ZWxvcGVyLXJlZmVyZW5jZS9hbGl5dW4tZWNkLXVzZXJkZXNrdG9wZ3JvdXBhZGRpdGlvblxuICovXG5leHBvcnQgaW50ZXJmYWNlIFVzZXJEZXNrdG9wR3JvdXBBZGRpdGlvblByb3BzIHtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGRlc2t0b3BHcm91cElkOiBUaGUgSUQgb2YgdGhlIGRlc2t0b3AgZ3JvdXAgdGhhdCB5b3Ugd2FudCB0byBhc3NpZ24gdG8gbW9yZSByZWd1bGFyIHVzZXJzLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGRlc2t0b3BHcm91cElkOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBlbmRVc2VySWRzOiBUaGUgcmVndWxhciB1c2VycyB0byB3aG9tIHlvdSB3YW50IHRvIGFzc2lnbiB0aGUgZGVza3RvcCBncm91cC5cbiAgICAgKi9cbiAgICByZWFkb25seSBlbmRVc2VySWRzOiBBcnJheTxzdHJpbmcgfCByb3MuSVJlc29sdmFibGU+IHwgcm9zLklSZXNvbHZhYmxlO1xufVxuXG4vKipcbiAqIFJlcHJlc2VudHMgYSBgVXNlckRlc2t0b3BHcm91cEFkZGl0aW9uYC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJVXNlckRlc2t0b3BHcm91cEFkZGl0aW9uIGV4dGVuZHMgcm9zLklSZXNvdXJjZSB7XG4gICAgcmVhZG9ubHkgcHJvcHM6IFVzZXJEZXNrdG9wR3JvdXBBZGRpdGlvblByb3BzO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIERlc2t0b3BHcm91cElkOiBUaGUgSUQgb2YgdGhlIGRlc2t0b3AgZ3JvdXAgdGhhdCB5b3Ugd2FudCB0byBhc3NpZ24gdG8gbW9yZSByZWd1bGFyIHVzZXJzLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGF0dHJEZXNrdG9wR3JvdXBJZDogcm9zLklSZXNvbHZhYmxlIHwgc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIEVuZFVzZXJJZHM6IFRoZSByZWd1bGFyIHVzZXJzIHRvIHdob20geW91IHdhbnQgdG8gYXNzaWduIHRoZSBkZXNrdG9wIGdyb3VwLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGF0dHJFbmRVc2VySWRzOiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG59XG4vKipcbiAqIFRoaXMgY2xhc3MgZW5jYXBzdWxhdGVzIGFuZCBleHRlbmRzIHRoZSBST1MgcmVzb3VyY2UgdHlwZSBgQUxJWVVOOjpFQ0Q6OlVzZXJEZXNrdG9wR3JvdXBBZGRpdGlvbmAuXG4gKiBATm90ZSBUaGlzIGNsYXNzIG1heSBoYXZlIHNvbWUgbmV3IGZ1bmN0aW9ucyB0byBmYWNpbGl0YXRlIGRldmVsb3BtZW50LCBzbyBpdCBpcyByZWNvbW1lbmRlZCB0byB1c2UgdGhpcyBjbGFzcyBpbnN0ZWFkIG9mIGBSb3NVc2VyRGVza3RvcEdyb3VwQWRkaXRpb25gZm9yIGEgbW9yZSBjb252ZW5pZW50IGRldmVsb3BtZW50IGV4cGVyaWVuY2UuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2FsaXl1bi1lY2QtdXNlcmRlc2t0b3Bncm91cGFkZGl0aW9uXG4gKi9cbmV4cG9ydCBjbGFzcyBVc2VyRGVza3RvcEdyb3VwQWRkaXRpb24gZXh0ZW5kcyByb3MuUmVzb3VyY2UgaW1wbGVtZW50cyBJVXNlckRlc2t0b3BHcm91cEFkZGl0aW9uIHtcbiAgICBwcm90ZWN0ZWQgc2NvcGU6IHJvcy5Db25zdHJ1Y3Q7XG4gICAgcHJvdGVjdGVkIGlkOiBzdHJpbmc7XG4gICAgcHVibGljIHJlYWRvbmx5IHByb3BzOiBVc2VyRGVza3RvcEdyb3VwQWRkaXRpb25Qcm9wcztcbiAgICBwcm90ZWN0ZWQgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6IGJvb2xlYW47XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgRGVza3RvcEdyb3VwSWQ6IFRoZSBJRCBvZiB0aGUgZGVza3RvcCBncm91cCB0aGF0IHlvdSB3YW50IHRvIGFzc2lnbiB0byBtb3JlIHJlZ3VsYXIgdXNlcnMuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJEZXNrdG9wR3JvdXBJZDogcm9zLklSZXNvbHZhYmxlIHwgc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIEVuZFVzZXJJZHM6IFRoZSByZWd1bGFyIHVzZXJzIHRvIHdob20geW91IHdhbnQgdG8gYXNzaWduIHRoZSBkZXNrdG9wIGdyb3VwLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyRW5kVXNlcklkczogcm9zLklSZXNvbHZhYmxlIHwgc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogUGFyYW0gc2NvcGUgLSBzY29wZSBpbiB3aGljaCB0aGlzIHJlc291cmNlIGlzIGRlZmluZWRcbiAgICAgKiBQYXJhbSBpZCAgICAtIHNjb3BlZCBpZCBvZiB0aGUgcmVzb3VyY2VcbiAgICAgKiBQYXJhbSBwcm9wcyAtIHJlc291cmNlIHByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihzY29wZTogcm9zLkNvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IFVzZXJEZXNrdG9wR3JvdXBBZGRpdGlvblByb3BzLCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDpib29sZWFuID0gdHJ1ZSkge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQpO1xuICAgICAgICB0aGlzLnNjb3BlID0gc2NvcGU7XG4gICAgICAgIHRoaXMuaWQgPSBpZDtcbiAgICAgICAgdGhpcy5wcm9wcyA9IHByb3BzO1xuICAgICAgICB0aGlzLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ID0gZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ7XG5cbiAgICAgICAgY29uc3Qgcm9zVXNlckRlc2t0b3BHcm91cEFkZGl0aW9uID0gbmV3IFJvc1VzZXJEZXNrdG9wR3JvdXBBZGRpdGlvbih0aGlzLCBpZCwgIHtcbiAgICAgICAgICAgIGRlc2t0b3BHcm91cElkOiBwcm9wcy5kZXNrdG9wR3JvdXBJZCxcbiAgICAgICAgICAgIGVuZFVzZXJJZHM6IHByb3BzLmVuZFVzZXJJZHMsXG4gICAgICAgIH0sIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ICYmIHRoaXMuc3RhY2suZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQpO1xuICAgICAgICB0aGlzLnJlc291cmNlID0gcm9zVXNlckRlc2t0b3BHcm91cEFkZGl0aW9uO1xuICAgICAgICB0aGlzLmF0dHJEZXNrdG9wR3JvdXBJZCA9IHJvc1VzZXJEZXNrdG9wR3JvdXBBZGRpdGlvbi5hdHRyRGVza3RvcEdyb3VwSWQ7XG4gICAgICAgIHRoaXMuYXR0ckVuZFVzZXJJZHMgPSByb3NVc2VyRGVza3RvcEdyb3VwQWRkaXRpb24uYXR0ckVuZFVzZXJJZHM7XG4gICAgfVxufVxuIl19