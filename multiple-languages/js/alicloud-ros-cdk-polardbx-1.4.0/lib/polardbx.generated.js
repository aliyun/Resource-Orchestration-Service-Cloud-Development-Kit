"use strict";
// Generated from the AliCloud ROS Resource Specification
Object.defineProperty(exports, "__esModule", { value: true });
exports.RosDatabase = exports.RosDBInstance = exports.RosAccount = void 0;
const ros = require("@alicloud/ros-cdk-core");
/**
 * Determine whether the given properties match those of a `RosAccountProps`
 *
 * @param properties - the TypeScript properties of a `RosAccountProps`
 *
 * @returns the result of the validation.
 */
function RosAccountPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('accountDescription', ros.validateString)(properties.accountDescription));
    errors.collect(ros.propertyValidator('dbInstanceId', ros.requiredValidator)(properties.dbInstanceId));
    errors.collect(ros.propertyValidator('dbInstanceId', ros.validateString)(properties.dbInstanceId));
    errors.collect(ros.propertyValidator('accountPassword', ros.requiredValidator)(properties.accountPassword));
    errors.collect(ros.propertyValidator('accountPassword', ros.validateString)(properties.accountPassword));
    errors.collect(ros.propertyValidator('accountName', ros.requiredValidator)(properties.accountName));
    errors.collect(ros.propertyValidator('accountName', ros.validateString)(properties.accountName));
    return errors.wrap('supplied properties not correct for "RosAccountProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::PolarDBX::Account` resource
 *
 * @param properties - the TypeScript properties of a `RosAccountProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::PolarDBX::Account` resource.
 */
// @ts-ignore TS6133
function rosAccountPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosAccountPropsValidator(properties).assertSuccess();
    }
    return {
        'AccountName': ros.stringToRosTemplate(properties.accountName),
        'AccountPassword': ros.stringToRosTemplate(properties.accountPassword),
        'DBInstanceId': ros.stringToRosTemplate(properties.dbInstanceId),
        'AccountDescription': ros.stringToRosTemplate(properties.accountDescription),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::PolarDBX::Account`, which is used to create an account.
 * @Note This class does not contain additional functions, so it is recommended to use the `Account` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-polardbx-account
 */
class RosAccount extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosAccount.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrAccountDescription = this.getAtt('AccountDescription');
        this.attrAccountName = this.getAtt('AccountName');
        this.attrAccountType = this.getAtt('AccountType');
        this.attrDbInstanceId = this.getAtt('DBInstanceId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.accountName = props.accountName;
        this.accountPassword = props.accountPassword;
        this.dbInstanceId = props.dbInstanceId;
        this.accountDescription = props.accountDescription;
    }
    get rosProperties() {
        return {
            accountName: this.accountName,
            accountPassword: this.accountPassword,
            dbInstanceId: this.dbInstanceId,
            accountDescription: this.accountDescription,
        };
    }
    renderProperties(props) {
        return rosAccountPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosAccount = RosAccount;
/**
 * The resource type name for this resource class.
 */
RosAccount.ROS_RESOURCE_TYPE_NAME = "ALIYUN::PolarDBX::Account";
/**
 * Determine whether the given properties match those of a `RosDBInstanceProps`
 *
 * @param properties - the TypeScript properties of a `RosDBInstanceProps`
 *
 * @returns the result of the validation.
 */
function RosDBInstancePropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('topologyType', ros.requiredValidator)(properties.topologyType));
    if (properties.topologyType && (typeof properties.topologyType) !== 'object') {
        errors.collect(ros.propertyValidator('topologyType', ros.validateAllowedValues)({
            data: properties.topologyType,
            allowedValues: ["1azone", "3azones"],
        }));
    }
    errors.collect(ros.propertyValidator('topologyType', ros.validateString)(properties.topologyType));
    errors.collect(ros.propertyValidator('engineVersion', ros.requiredValidator)(properties.engineVersion));
    errors.collect(ros.propertyValidator('engineVersion', ros.validateString)(properties.engineVersion));
    errors.collect(ros.propertyValidator('resourceGroupId', ros.validateString)(properties.resourceGroupId));
    errors.collect(ros.propertyValidator('vpcId', ros.requiredValidator)(properties.vpcId));
    errors.collect(ros.propertyValidator('vpcId', ros.validateString)(properties.vpcId));
    errors.collect(ros.propertyValidator('vSwitchId', ros.requiredValidator)(properties.vSwitchId));
    errors.collect(ros.propertyValidator('vSwitchId', ros.validateString)(properties.vSwitchId));
    errors.collect(ros.propertyValidator('autoRenew', ros.validateBoolean)(properties.autoRenew));
    errors.collect(ros.propertyValidator('period', ros.validateString)(properties.period));
    if (properties.payType && (typeof properties.payType) !== 'object') {
        errors.collect(ros.propertyValidator('payType', ros.validateAllowedValues)({
            data: properties.payType,
            allowedValues: ["PayAsYouGo", "PostPaid", "PayOnDemand", "Postpaid", "PostPay", "Postpay", "POSTPAY", "POST", "Subscription", "PrePaid", "Prepaid", "PrePay", "Prepay", "PREPAY", "PRE"],
        }));
    }
    errors.collect(ros.propertyValidator('payType', ros.validateString)(properties.payType));
    errors.collect(ros.propertyValidator('dbNodeClass', ros.requiredValidator)(properties.dbNodeClass));
    errors.collect(ros.propertyValidator('dbNodeClass', ros.validateString)(properties.dbNodeClass));
    errors.collect(ros.propertyValidator('secondaryZone', ros.validateString)(properties.secondaryZone));
    errors.collect(ros.propertyValidator('tertiaryZone', ros.validateString)(properties.tertiaryZone));
    errors.collect(ros.propertyValidator('securityIpConfig', RosDBInstance_SecurityIpConfigPropertyValidator)(properties.securityIpConfig));
    errors.collect(ros.propertyValidator('dbNodeCount', ros.requiredValidator)(properties.dbNodeCount));
    if (properties.dbNodeCount && (typeof properties.dbNodeCount) !== 'object') {
        errors.collect(ros.propertyValidator('dbNodeCount', ros.validateRange)({
            data: properties.dbNodeCount,
            min: 2,
            max: undefined,
        }));
    }
    errors.collect(ros.propertyValidator('dbNodeCount', ros.validateNumber)(properties.dbNodeCount));
    errors.collect(ros.propertyValidator('usedTime', ros.validateNumber)(properties.usedTime));
    errors.collect(ros.propertyValidator('primaryZone', ros.requiredValidator)(properties.primaryZone));
    errors.collect(ros.propertyValidator('primaryZone', ros.validateString)(properties.primaryZone));
    if (properties.dbInstanceDescription && (Array.isArray(properties.dbInstanceDescription) || (typeof properties.dbInstanceDescription) === 'string')) {
        errors.collect(ros.propertyValidator('dbInstanceDescription', ros.validateLength)({
            data: properties.dbInstanceDescription.length,
            min: 2,
            max: 256,
        }));
    }
    errors.collect(ros.propertyValidator('dbInstanceDescription', ros.validateString)(properties.dbInstanceDescription));
    return errors.wrap('supplied properties not correct for "RosDBInstanceProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::PolarDBX::DBInstance` resource
 *
 * @param properties - the TypeScript properties of a `RosDBInstanceProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::PolarDBX::DBInstance` resource.
 */
// @ts-ignore TS6133
function rosDBInstancePropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosDBInstancePropsValidator(properties).assertSuccess();
    }
    return {
        'DBNodeClass': ros.stringToRosTemplate(properties.dbNodeClass),
        'DBNodeCount': ros.numberToRosTemplate(properties.dbNodeCount),
        'EngineVersion': ros.stringToRosTemplate(properties.engineVersion),
        'PrimaryZone': ros.stringToRosTemplate(properties.primaryZone),
        'TopologyType': ros.stringToRosTemplate(properties.topologyType),
        'VPCId': ros.stringToRosTemplate(properties.vpcId),
        'VSwitchId': ros.stringToRosTemplate(properties.vSwitchId),
        'AutoRenew': ros.booleanToRosTemplate(properties.autoRenew),
        'DBInstanceDescription': ros.stringToRosTemplate(properties.dbInstanceDescription),
        'PayType': ros.stringToRosTemplate(properties.payType),
        'Period': ros.stringToRosTemplate(properties.period),
        'ResourceGroupId': ros.stringToRosTemplate(properties.resourceGroupId),
        'SecondaryZone': ros.stringToRosTemplate(properties.secondaryZone),
        'SecurityIpConfig': rosDBInstanceSecurityIpConfigPropertyToRosTemplate(properties.securityIpConfig),
        'TertiaryZone': ros.stringToRosTemplate(properties.tertiaryZone),
        'UsedTime': ros.numberToRosTemplate(properties.usedTime),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::PolarDBX::DBInstance`, which is used to create a PolarDB for Xscale (PolarDB-X) instance.
 * @Note This class does not contain additional functions, so it is recommended to use the `DBInstance` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-polardbx-dbinstance
 */
class RosDBInstance extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosDBInstance.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrConnectionString = this.getAtt('ConnectionString');
        this.attrDbInstanceName = this.getAtt('DBInstanceName');
        this.attrOrderId = this.getAtt('OrderId');
        this.attrPort = this.getAtt('Port');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.dbNodeClass = props.dbNodeClass;
        this.dbNodeCount = props.dbNodeCount;
        this.engineVersion = props.engineVersion;
        this.primaryZone = props.primaryZone;
        this.topologyType = props.topologyType;
        this.vpcId = props.vpcId;
        this.vSwitchId = props.vSwitchId;
        this.autoRenew = props.autoRenew;
        this.dbInstanceDescription = props.dbInstanceDescription;
        this.payType = props.payType;
        this.period = props.period;
        this.resourceGroupId = props.resourceGroupId;
        this.secondaryZone = props.secondaryZone;
        this.securityIpConfig = props.securityIpConfig;
        this.tertiaryZone = props.tertiaryZone;
        this.usedTime = props.usedTime;
    }
    get rosProperties() {
        return {
            dbNodeClass: this.dbNodeClass,
            dbNodeCount: this.dbNodeCount,
            engineVersion: this.engineVersion,
            primaryZone: this.primaryZone,
            topologyType: this.topologyType,
            vpcId: this.vpcId,
            vSwitchId: this.vSwitchId,
            autoRenew: this.autoRenew,
            dbInstanceDescription: this.dbInstanceDescription,
            payType: this.payType,
            period: this.period,
            resourceGroupId: this.resourceGroupId,
            secondaryZone: this.secondaryZone,
            securityIpConfig: this.securityIpConfig,
            tertiaryZone: this.tertiaryZone,
            usedTime: this.usedTime,
        };
    }
    renderProperties(props) {
        return rosDBInstancePropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosDBInstance = RosDBInstance;
/**
 * The resource type name for this resource class.
 */
RosDBInstance.ROS_RESOURCE_TYPE_NAME = "ALIYUN::PolarDBX::DBInstance";
/**
 * Determine whether the given properties match those of a `SecurityIpConfigProperty`
 *
 * @param properties - the TypeScript properties of a `SecurityIpConfigProperty`
 *
 * @returns the result of the validation.
 */
function RosDBInstance_SecurityIpConfigPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('groupName', ros.validateString)(properties.groupName));
    errors.collect(ros.propertyValidator('securityIpList', ros.validateString)(properties.securityIpList));
    errors.collect(ros.propertyValidator('modifyMode', ros.validateString)(properties.modifyMode));
    return errors.wrap('supplied properties not correct for "SecurityIpConfigProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::PolarDBX::DBInstance.SecurityIpConfig` resource
 *
 * @param properties - the TypeScript properties of a `SecurityIpConfigProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::PolarDBX::DBInstance.SecurityIpConfig` resource.
 */
// @ts-ignore TS6133
function rosDBInstanceSecurityIpConfigPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosDBInstance_SecurityIpConfigPropertyValidator(properties).assertSuccess();
    return {
        'GroupName': ros.stringToRosTemplate(properties.groupName),
        'SecurityIPList': ros.stringToRosTemplate(properties.securityIpList),
        'ModifyMode': ros.stringToRosTemplate(properties.modifyMode),
    };
}
/**
 * Determine whether the given properties match those of a `RosDatabaseProps`
 *
 * @param properties - the TypeScript properties of a `RosDatabaseProps`
 *
 * @returns the result of the validation.
 */
function RosDatabasePropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('characterSetName', ros.requiredValidator)(properties.characterSetName));
    if (properties.characterSetName && (typeof properties.characterSetName) !== 'object') {
        errors.collect(ros.propertyValidator('characterSetName', ros.validateAllowedValues)({
            data: properties.characterSetName,
            allowedValues: ["utf8", "gbk", "latin1", "utf8mb4"],
        }));
    }
    errors.collect(ros.propertyValidator('characterSetName', ros.validateString)(properties.characterSetName));
    errors.collect(ros.propertyValidator('dbInstanceId', ros.requiredValidator)(properties.dbInstanceId));
    errors.collect(ros.propertyValidator('dbInstanceId', ros.validateString)(properties.dbInstanceId));
    errors.collect(ros.propertyValidator('mode', ros.validateString)(properties.mode));
    errors.collect(ros.propertyValidator('databaseName', ros.requiredValidator)(properties.databaseName));
    errors.collect(ros.propertyValidator('databaseName', ros.validateString)(properties.databaseName));
    errors.collect(ros.propertyValidator('databaseDescription', ros.validateString)(properties.databaseDescription));
    errors.collect(ros.propertyValidator('accounts', ros.requiredValidator)(properties.accounts));
    errors.collect(ros.propertyValidator('accounts', ros.listValidator(RosDatabase_AccountsPropertyValidator))(properties.accounts));
    return errors.wrap('supplied properties not correct for "RosDatabaseProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::PolarDBX::Database` resource
 *
 * @param properties - the TypeScript properties of a `RosDatabaseProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::PolarDBX::Database` resource.
 */
// @ts-ignore TS6133
function rosDatabasePropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosDatabasePropsValidator(properties).assertSuccess();
    }
    return {
        'Accounts': ros.listMapper(rosDatabaseAccountsPropertyToRosTemplate)(properties.accounts),
        'CharacterSetName': ros.stringToRosTemplate(properties.characterSetName),
        'DatabaseName': ros.stringToRosTemplate(properties.databaseName),
        'DBInstanceId': ros.stringToRosTemplate(properties.dbInstanceId),
        'DatabaseDescription': ros.stringToRosTemplate(properties.databaseDescription),
        'Mode': ros.stringToRosTemplate(properties.mode),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::PolarDBX::Database`, which is used to create a database.
 * @Note This class does not contain additional functions, so it is recommended to use the `Database` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-polardbx-database
 */
class RosDatabase extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosDatabase.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrAccounts = this.getAtt('Accounts');
        this.attrCharacterSetName = this.getAtt('CharacterSetName');
        this.attrDbInstanceId = this.getAtt('DBInstanceId');
        this.attrDatabaseDescription = this.getAtt('DatabaseDescription');
        this.attrDatabaseName = this.getAtt('DatabaseName');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.accounts = props.accounts;
        this.characterSetName = props.characterSetName;
        this.databaseName = props.databaseName;
        this.dbInstanceId = props.dbInstanceId;
        this.databaseDescription = props.databaseDescription;
        this.mode = props.mode;
    }
    get rosProperties() {
        return {
            accounts: this.accounts,
            characterSetName: this.characterSetName,
            databaseName: this.databaseName,
            dbInstanceId: this.dbInstanceId,
            databaseDescription: this.databaseDescription,
            mode: this.mode,
        };
    }
    renderProperties(props) {
        return rosDatabasePropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosDatabase = RosDatabase;
/**
 * The resource type name for this resource class.
 */
RosDatabase.ROS_RESOURCE_TYPE_NAME = "ALIYUN::PolarDBX::Database";
/**
 * Determine whether the given properties match those of a `AccountsProperty`
 *
 * @param properties - the TypeScript properties of a `AccountsProperty`
 *
 * @returns the result of the validation.
 */
function RosDatabase_AccountsPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('accountPrivilege', ros.requiredValidator)(properties.accountPrivilege));
    if (properties.accountPrivilege && (typeof properties.accountPrivilege) !== 'object') {
        errors.collect(ros.propertyValidator('accountPrivilege', ros.validateAllowedValues)({
            data: properties.accountPrivilege,
            allowedValues: ["ReadWrite", "ReadOnly", "DMLOnly", "DDLOnly"],
        }));
    }
    errors.collect(ros.propertyValidator('accountPrivilege', ros.validateString)(properties.accountPrivilege));
    errors.collect(ros.propertyValidator('accountName', ros.requiredValidator)(properties.accountName));
    errors.collect(ros.propertyValidator('accountName', ros.validateString)(properties.accountName));
    return errors.wrap('supplied properties not correct for "AccountsProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::PolarDBX::Database.Accounts` resource
 *
 * @param properties - the TypeScript properties of a `AccountsProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::PolarDBX::Database.Accounts` resource.
 */
// @ts-ignore TS6133
function rosDatabaseAccountsPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosDatabase_AccountsPropertyValidator(properties).assertSuccess();
    return {
        'AccountPrivilege': ros.stringToRosTemplate(properties.accountPrivilege),
        'AccountName': ros.stringToRosTemplate(properties.accountName),
    };
}
//# sourceMappingURL=data:application/json;base64,