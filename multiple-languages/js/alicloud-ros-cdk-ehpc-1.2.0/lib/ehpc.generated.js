"use strict";
// Generated from the AliCloud ROS Resource Specification
Object.defineProperty(exports, "__esModule", { value: true });
exports.RosUsers = exports.RosCluster = exports.RosAutoScaleConfig = void 0;
const ros = require("@alicloud/ros-cdk-core");
/**
 * Determine whether the given properties match those of a `RosAutoScaleConfigProps`
 *
 * @param properties - the TypeScript properties of a `RosAutoScaleConfigProps`
 *
 * @returns the result of the validation.
 */
function RosAutoScaleConfigPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    if (properties.extraNodesGrowRatio && (typeof properties.extraNodesGrowRatio) !== 'object') {
        errors.collect(ros.propertyValidator('extraNodesGrowRatio', ros.validateRange)({
            data: properties.extraNodesGrowRatio,
            min: 0,
            max: 100,
        }));
    }
    errors.collect(ros.propertyValidator('extraNodesGrowRatio', ros.validateNumber)(properties.extraNodesGrowRatio));
    errors.collect(ros.propertyValidator('enableAutoGrow', ros.validateBoolean)(properties.enableAutoGrow));
    errors.collect(ros.propertyValidator('clusterId', ros.requiredValidator)(properties.clusterId));
    errors.collect(ros.propertyValidator('clusterId', ros.validateString)(properties.clusterId));
    if (properties.shrinkIdleTimes && (typeof properties.shrinkIdleTimes) !== 'object') {
        errors.collect(ros.propertyValidator('shrinkIdleTimes', ros.validateRange)({
            data: properties.shrinkIdleTimes,
            min: 2,
            max: 5,
        }));
    }
    errors.collect(ros.propertyValidator('shrinkIdleTimes', ros.validateNumber)(properties.shrinkIdleTimes));
    if (properties.maxNodesInCluster && (typeof properties.maxNodesInCluster) !== 'object') {
        errors.collect(ros.propertyValidator('maxNodesInCluster', ros.validateRange)({
            data: properties.maxNodesInCluster,
            min: 1,
            max: 500,
        }));
    }
    errors.collect(ros.propertyValidator('maxNodesInCluster', ros.validateNumber)(properties.maxNodesInCluster));
    errors.collect(ros.propertyValidator('enableAutoShrink', ros.validateBoolean)(properties.enableAutoShrink));
    if (properties.growRatio && (typeof properties.growRatio) !== 'object') {
        errors.collect(ros.propertyValidator('growRatio', ros.validateRange)({
            data: properties.growRatio,
            min: 1,
            max: 100,
        }));
    }
    errors.collect(ros.propertyValidator('growRatio', ros.validateNumber)(properties.growRatio));
    if (properties.growIntervalInMinutes && (typeof properties.growIntervalInMinutes) !== 'object') {
        errors.collect(ros.propertyValidator('growIntervalInMinutes', ros.validateRange)({
            data: properties.growIntervalInMinutes,
            min: 2,
            max: 10,
        }));
    }
    errors.collect(ros.propertyValidator('growIntervalInMinutes', ros.validateNumber)(properties.growIntervalInMinutes));
    if (properties.growTimeoutInMinutes && (typeof properties.growTimeoutInMinutes) !== 'object') {
        errors.collect(ros.propertyValidator('growTimeoutInMinutes', ros.validateRange)({
            data: properties.growTimeoutInMinutes,
            min: 10,
            max: 60,
        }));
    }
    errors.collect(ros.propertyValidator('growTimeoutInMinutes', ros.validateNumber)(properties.growTimeoutInMinutes));
    errors.collect(ros.propertyValidator('imageId', ros.validateString)(properties.imageId));
    if (properties.shrinkIntervalInMinutes && (typeof properties.shrinkIntervalInMinutes) !== 'object') {
        errors.collect(ros.propertyValidator('shrinkIntervalInMinutes', ros.validateRange)({
            data: properties.shrinkIntervalInMinutes,
            min: 2,
            max: 10,
        }));
    }
    errors.collect(ros.propertyValidator('shrinkIntervalInMinutes', ros.validateNumber)(properties.shrinkIntervalInMinutes));
    errors.collect(ros.propertyValidator('spotPriceLimit', ros.validateNumber)(properties.spotPriceLimit));
    if (properties.queues && (Array.isArray(properties.queues) || (typeof properties.queues) === 'string')) {
        errors.collect(ros.propertyValidator('queues', ros.validateLength)({
            data: properties.queues.length,
            min: undefined,
            max: 8,
        }));
    }
    errors.collect(ros.propertyValidator('queues', ros.listValidator(RosAutoScaleConfig_QueuesPropertyValidator))(properties.queues));
    errors.collect(ros.propertyValidator('excludeNodes', ros.validateString)(properties.excludeNodes));
    if (properties.spotStrategy && (typeof properties.spotStrategy) !== 'object') {
        errors.collect(ros.propertyValidator('spotStrategy', ros.validateAllowedValues)({
            data: properties.spotStrategy,
            allowedValues: ["NoSpot", "SpotWithPriceLimit", "SpotAsPriceGo"],
        }));
    }
    errors.collect(ros.propertyValidator('spotStrategy', ros.validateString)(properties.spotStrategy));
    return errors.wrap('supplied properties not correct for "RosAutoScaleConfigProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::EHPC::AutoScaleConfig` resource
 *
 * @param properties - the TypeScript properties of a `RosAutoScaleConfigProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::EHPC::AutoScaleConfig` resource.
 */
// @ts-ignore TS6133
function rosAutoScaleConfigPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosAutoScaleConfigPropsValidator(properties).assertSuccess();
    }
    return {
        'ClusterId': ros.stringToRosTemplate(properties.clusterId),
        'EnableAutoGrow': ros.booleanToRosTemplate(properties.enableAutoGrow),
        'EnableAutoShrink': ros.booleanToRosTemplate(properties.enableAutoShrink),
        'ExcludeNodes': ros.stringToRosTemplate(properties.excludeNodes),
        'ExtraNodesGrowRatio': ros.numberToRosTemplate(properties.extraNodesGrowRatio),
        'GrowIntervalInMinutes': ros.numberToRosTemplate(properties.growIntervalInMinutes),
        'GrowRatio': ros.numberToRosTemplate(properties.growRatio),
        'GrowTimeoutInMinutes': ros.numberToRosTemplate(properties.growTimeoutInMinutes),
        'ImageId': ros.stringToRosTemplate(properties.imageId),
        'MaxNodesInCluster': ros.numberToRosTemplate(properties.maxNodesInCluster),
        'Queues': ros.listMapper(rosAutoScaleConfigQueuesPropertyToRosTemplate)(properties.queues),
        'ShrinkIdleTimes': ros.numberToRosTemplate(properties.shrinkIdleTimes),
        'ShrinkIntervalInMinutes': ros.numberToRosTemplate(properties.shrinkIntervalInMinutes),
        'SpotPriceLimit': ros.numberToRosTemplate(properties.spotPriceLimit),
        'SpotStrategy': ros.stringToRosTemplate(properties.spotStrategy),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::EHPC::AutoScaleConfig`, which is used to configure the auto scaling settings of a cluster.
 * @Note This class does not contain additional functions, so it is recommended to use the `AutoScaleConfig` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-ehpc-autoscaleconfig
 */
class RosAutoScaleConfig extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosAutoScaleConfig.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrClusterId = this.getAtt('ClusterId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.clusterId = props.clusterId;
        this.enableAutoGrow = props.enableAutoGrow;
        this.enableAutoShrink = props.enableAutoShrink;
        this.excludeNodes = props.excludeNodes;
        this.extraNodesGrowRatio = props.extraNodesGrowRatio;
        this.growIntervalInMinutes = props.growIntervalInMinutes;
        this.growRatio = props.growRatio;
        this.growTimeoutInMinutes = props.growTimeoutInMinutes;
        this.imageId = props.imageId;
        this.maxNodesInCluster = props.maxNodesInCluster;
        this.queues = props.queues;
        this.shrinkIdleTimes = props.shrinkIdleTimes;
        this.shrinkIntervalInMinutes = props.shrinkIntervalInMinutes;
        this.spotPriceLimit = props.spotPriceLimit;
        this.spotStrategy = props.spotStrategy;
    }
    get rosProperties() {
        return {
            clusterId: this.clusterId,
            enableAutoGrow: this.enableAutoGrow,
            enableAutoShrink: this.enableAutoShrink,
            excludeNodes: this.excludeNodes,
            extraNodesGrowRatio: this.extraNodesGrowRatio,
            growIntervalInMinutes: this.growIntervalInMinutes,
            growRatio: this.growRatio,
            growTimeoutInMinutes: this.growTimeoutInMinutes,
            imageId: this.imageId,
            maxNodesInCluster: this.maxNodesInCluster,
            queues: this.queues,
            shrinkIdleTimes: this.shrinkIdleTimes,
            shrinkIntervalInMinutes: this.shrinkIntervalInMinutes,
            spotPriceLimit: this.spotPriceLimit,
            spotStrategy: this.spotStrategy,
        };
    }
    renderProperties(props) {
        return rosAutoScaleConfigPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosAutoScaleConfig = RosAutoScaleConfig;
/**
 * The resource type name for this resource class.
 */
RosAutoScaleConfig.ROS_RESOURCE_TYPE_NAME = "ALIYUN::EHPC::AutoScaleConfig";
/**
 * Determine whether the given properties match those of a `DataDisksProperty`
 *
 * @param properties - the TypeScript properties of a `DataDisksProperty`
 *
 * @returns the result of the validation.
 */
function RosAutoScaleConfig_DataDisksPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('dataDiskKmsKeyId', ros.validateString)(properties.dataDiskKmsKeyId));
    errors.collect(ros.propertyValidator('dataDiskPerformanceLevel', ros.validateString)(properties.dataDiskPerformanceLevel));
    errors.collect(ros.propertyValidator('dataDiskEncrypted', ros.validateBoolean)(properties.dataDiskEncrypted));
    errors.collect(ros.propertyValidator('dataDiskDeleteWithInstance', ros.validateBoolean)(properties.dataDiskDeleteWithInstance));
    if (properties.dataDiskSize && (typeof properties.dataDiskSize) !== 'object') {
        errors.collect(ros.propertyValidator('dataDiskSize', ros.validateRange)({
            data: properties.dataDiskSize,
            min: 40,
            max: 500,
        }));
    }
    errors.collect(ros.propertyValidator('dataDiskSize', ros.validateNumber)(properties.dataDiskSize));
    errors.collect(ros.propertyValidator('dataDiskCategory', ros.validateString)(properties.dataDiskCategory));
    return errors.wrap('supplied properties not correct for "DataDisksProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::EHPC::AutoScaleConfig.DataDisks` resource
 *
 * @param properties - the TypeScript properties of a `DataDisksProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::EHPC::AutoScaleConfig.DataDisks` resource.
 */
// @ts-ignore TS6133
function rosAutoScaleConfigDataDisksPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosAutoScaleConfig_DataDisksPropertyValidator(properties).assertSuccess();
    return {
        'DataDiskKMSKeyId': ros.stringToRosTemplate(properties.dataDiskKmsKeyId),
        'DataDiskPerformanceLevel': ros.stringToRosTemplate(properties.dataDiskPerformanceLevel),
        'DataDiskEncrypted': ros.booleanToRosTemplate(properties.dataDiskEncrypted),
        'DataDiskDeleteWithInstance': ros.booleanToRosTemplate(properties.dataDiskDeleteWithInstance),
        'DataDiskSize': ros.numberToRosTemplate(properties.dataDiskSize),
        'DataDiskCategory': ros.stringToRosTemplate(properties.dataDiskCategory),
    };
}
/**
 * Determine whether the given properties match those of a `InstanceTypesProperty`
 *
 * @param properties - the TypeScript properties of a `InstanceTypesProperty`
 *
 * @returns the result of the validation.
 */
function RosAutoScaleConfig_InstanceTypesPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('zoneId', ros.requiredValidator)(properties.zoneId));
    errors.collect(ros.propertyValidator('zoneId', ros.validateString)(properties.zoneId));
    errors.collect(ros.propertyValidator('vSwitchId', ros.requiredValidator)(properties.vSwitchId));
    errors.collect(ros.propertyValidator('vSwitchId', ros.validateString)(properties.vSwitchId));
    errors.collect(ros.propertyValidator('spotPriceLimit', ros.validateNumber)(properties.spotPriceLimit));
    errors.collect(ros.propertyValidator('instanceType', ros.requiredValidator)(properties.instanceType));
    errors.collect(ros.propertyValidator('instanceType', ros.validateString)(properties.instanceType));
    if (properties.spotStrategy && (typeof properties.spotStrategy) !== 'object') {
        errors.collect(ros.propertyValidator('spotStrategy', ros.validateAllowedValues)({
            data: properties.spotStrategy,
            allowedValues: ["NoSpot", "SpotWithPriceLimit", "SpotAsPriceGo"],
        }));
    }
    errors.collect(ros.propertyValidator('spotStrategy', ros.validateString)(properties.spotStrategy));
    return errors.wrap('supplied properties not correct for "InstanceTypesProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::EHPC::AutoScaleConfig.InstanceTypes` resource
 *
 * @param properties - the TypeScript properties of a `InstanceTypesProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::EHPC::AutoScaleConfig.InstanceTypes` resource.
 */
// @ts-ignore TS6133
function rosAutoScaleConfigInstanceTypesPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosAutoScaleConfig_InstanceTypesPropertyValidator(properties).assertSuccess();
    return {
        'ZoneId': ros.stringToRosTemplate(properties.zoneId),
        'VSwitchId': ros.stringToRosTemplate(properties.vSwitchId),
        'SpotPriceLimit': ros.numberToRosTemplate(properties.spotPriceLimit),
        'InstanceType': ros.stringToRosTemplate(properties.instanceType),
        'SpotStrategy': ros.stringToRosTemplate(properties.spotStrategy),
    };
}
/**
 * Determine whether the given properties match those of a `QueuesProperty`
 *
 * @param properties - the TypeScript properties of a `QueuesProperty`
 *
 * @returns the result of the validation.
 */
function RosAutoScaleConfig_QueuesPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('hostNameSuffix', ros.validateString)(properties.hostNameSuffix));
    if (properties.minNodesInQueue && (typeof properties.minNodesInQueue) !== 'object') {
        errors.collect(ros.propertyValidator('minNodesInQueue', ros.validateRange)({
            data: properties.minNodesInQueue,
            min: 0,
            max: 50,
        }));
    }
    errors.collect(ros.propertyValidator('minNodesInQueue', ros.validateNumber)(properties.minNodesInQueue));
    if (properties.maxNodesInQueue && (typeof properties.maxNodesInQueue) !== 'object') {
        errors.collect(ros.propertyValidator('maxNodesInQueue', ros.validateRange)({
            data: properties.maxNodesInQueue,
            min: 0,
            max: 500,
        }));
    }
    errors.collect(ros.propertyValidator('maxNodesInQueue', ros.validateNumber)(properties.maxNodesInQueue));
    errors.collect(ros.propertyValidator('enableAutoGrow', ros.validateBoolean)(properties.enableAutoGrow));
    if (properties.dataDisks && (Array.isArray(properties.dataDisks) || (typeof properties.dataDisks) === 'string')) {
        errors.collect(ros.propertyValidator('dataDisks', ros.validateLength)({
            data: properties.dataDisks.length,
            min: undefined,
            max: 16,
        }));
    }
    errors.collect(ros.propertyValidator('dataDisks', ros.listValidator(RosAutoScaleConfig_DataDisksPropertyValidator))(properties.dataDisks));
    if (properties.systemDiskSize && (typeof properties.systemDiskSize) !== 'object') {
        errors.collect(ros.propertyValidator('systemDiskSize', ros.validateRange)({
            data: properties.systemDiskSize,
            min: 40,
            max: 500,
        }));
    }
    errors.collect(ros.propertyValidator('systemDiskSize', ros.validateNumber)(properties.systemDiskSize));
    errors.collect(ros.propertyValidator('systemDiskLevel', ros.validateString)(properties.systemDiskLevel));
    errors.collect(ros.propertyValidator('queueImageId', ros.validateString)(properties.queueImageId));
    if (properties.minNodesPerCycle && (typeof properties.minNodesPerCycle) !== 'object') {
        errors.collect(ros.propertyValidator('minNodesPerCycle', ros.validateRange)({
            data: properties.minNodesPerCycle,
            min: 1,
            max: 99,
        }));
    }
    errors.collect(ros.propertyValidator('minNodesPerCycle', ros.validateNumber)(properties.minNodesPerCycle));
    if (properties.maxNodesPerCycle && (typeof properties.maxNodesPerCycle) !== 'object') {
        errors.collect(ros.propertyValidator('maxNodesPerCycle', ros.validateRange)({
            data: properties.maxNodesPerCycle,
            min: 0,
            max: 99,
        }));
    }
    errors.collect(ros.propertyValidator('maxNodesPerCycle', ros.validateNumber)(properties.maxNodesPerCycle));
    errors.collect(ros.propertyValidator('enableAutoShrink', ros.validateBoolean)(properties.enableAutoShrink));
    errors.collect(ros.propertyValidator('systemDiskCategory', ros.validateString)(properties.systemDiskCategory));
    errors.collect(ros.propertyValidator('hostNamePrefix', ros.validateString)(properties.hostNamePrefix));
    errors.collect(ros.propertyValidator('spotPriceLimit', ros.validateNumber)(properties.spotPriceLimit));
    if (properties.instanceTypes && (Array.isArray(properties.instanceTypes) || (typeof properties.instanceTypes) === 'string')) {
        errors.collect(ros.propertyValidator('instanceTypes', ros.validateLength)({
            data: properties.instanceTypes.length,
            min: undefined,
            max: 500,
        }));
    }
    errors.collect(ros.propertyValidator('instanceTypes', ros.listValidator(RosAutoScaleConfig_InstanceTypesPropertyValidator))(properties.instanceTypes));
    errors.collect(ros.propertyValidator('instanceType', ros.validateString)(properties.instanceType));
    errors.collect(ros.propertyValidator('queueName', ros.validateString)(properties.queueName));
    if (properties.spotStrategy && (typeof properties.spotStrategy) !== 'object') {
        errors.collect(ros.propertyValidator('spotStrategy', ros.validateAllowedValues)({
            data: properties.spotStrategy,
            allowedValues: ["NoSpot", "SpotWithPriceLimit", "SpotAsPriceGo"],
        }));
    }
    errors.collect(ros.propertyValidator('spotStrategy', ros.validateString)(properties.spotStrategy));
    return errors.wrap('supplied properties not correct for "QueuesProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::EHPC::AutoScaleConfig.Queues` resource
 *
 * @param properties - the TypeScript properties of a `QueuesProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::EHPC::AutoScaleConfig.Queues` resource.
 */
// @ts-ignore TS6133
function rosAutoScaleConfigQueuesPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosAutoScaleConfig_QueuesPropertyValidator(properties).assertSuccess();
    return {
        'HostNameSuffix': ros.stringToRosTemplate(properties.hostNameSuffix),
        'MinNodesInQueue': ros.numberToRosTemplate(properties.minNodesInQueue),
        'MaxNodesInQueue': ros.numberToRosTemplate(properties.maxNodesInQueue),
        'EnableAutoGrow': ros.booleanToRosTemplate(properties.enableAutoGrow),
        'DataDisks': ros.listMapper(rosAutoScaleConfigDataDisksPropertyToRosTemplate)(properties.dataDisks),
        'SystemDiskSize': ros.numberToRosTemplate(properties.systemDiskSize),
        'SystemDiskLevel': ros.stringToRosTemplate(properties.systemDiskLevel),
        'QueueImageId': ros.stringToRosTemplate(properties.queueImageId),
        'MinNodesPerCycle': ros.numberToRosTemplate(properties.minNodesPerCycle),
        'MaxNodesPerCycle': ros.numberToRosTemplate(properties.maxNodesPerCycle),
        'EnableAutoShrink': ros.booleanToRosTemplate(properties.enableAutoShrink),
        'SystemDiskCategory': ros.stringToRosTemplate(properties.systemDiskCategory),
        'HostNamePrefix': ros.stringToRosTemplate(properties.hostNamePrefix),
        'SpotPriceLimit': ros.numberToRosTemplate(properties.spotPriceLimit),
        'InstanceTypes': ros.listMapper(rosAutoScaleConfigInstanceTypesPropertyToRosTemplate)(properties.instanceTypes),
        'InstanceType': ros.stringToRosTemplate(properties.instanceType),
        'QueueName': ros.stringToRosTemplate(properties.queueName),
        'SpotStrategy': ros.stringToRosTemplate(properties.spotStrategy),
    };
}
/**
 * Determine whether the given properties match those of a `RosClusterProps`
 *
 * @param properties - the TypeScript properties of a `RosClusterProps`
 *
 * @returns the result of the validation.
 */
function RosClusterPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('volumeProtocol', ros.validateString)(properties.volumeProtocol));
    errors.collect(ros.propertyValidator('resourceGroupId', ros.validateString)(properties.resourceGroupId));
    errors.collect(ros.propertyValidator('computeEnableHt', ros.validateBoolean)(properties.computeEnableHt));
    errors.collect(ros.propertyValidator('withoutElasticIp', ros.validateBoolean)(properties.withoutElasticIp));
    errors.collect(ros.propertyValidator('systemDiskType', ros.validateString)(properties.systemDiskType));
    errors.collect(ros.propertyValidator('remoteVisEnable', ros.validateBoolean)(properties.remoteVisEnable));
    errors.collect(ros.propertyValidator('name', ros.requiredValidator)(properties.name));
    errors.collect(ros.propertyValidator('name', ros.validateString)(properties.name));
    errors.collect(ros.propertyValidator('volumeId', ros.validateString)(properties.volumeId));
    errors.collect(ros.propertyValidator('ramRoleName', ros.validateString)(properties.ramRoleName));
    errors.collect(ros.propertyValidator('deployMode', ros.validateString)(properties.deployMode));
    if (properties.postInstallScript && (Array.isArray(properties.postInstallScript) || (typeof properties.postInstallScript) === 'string')) {
        errors.collect(ros.propertyValidator('postInstallScript', ros.validateLength)({
            data: properties.postInstallScript.length,
            min: undefined,
            max: 16,
        }));
    }
    errors.collect(ros.propertyValidator('postInstallScript', ros.listValidator(RosCluster_PostInstallScriptPropertyValidator))(properties.postInstallScript));
    errors.collect(ros.propertyValidator('imageId', ros.validateString)(properties.imageId));
    errors.collect(ros.propertyValidator('isComputeEss', ros.validateBoolean)(properties.isComputeEss));
    errors.collect(ros.propertyValidator('ecsOrderLoginInstanceType', ros.requiredValidator)(properties.ecsOrderLoginInstanceType));
    errors.collect(ros.propertyValidator('ecsOrderLoginInstanceType', ros.validateString)(properties.ecsOrderLoginInstanceType));
    errors.collect(ros.propertyValidator('jobQueue', ros.validateString)(properties.jobQueue));
    errors.collect(ros.propertyValidator('vSwitchId', ros.requiredValidator)(properties.vSwitchId));
    errors.collect(ros.propertyValidator('vSwitchId', ros.validateString)(properties.vSwitchId));
    errors.collect(ros.propertyValidator('period', ros.validateNumber)(properties.period));
    if (properties.computeSpotStrategy && (typeof properties.computeSpotStrategy) !== 'object') {
        errors.collect(ros.propertyValidator('computeSpotStrategy', ros.validateAllowedValues)({
            data: properties.computeSpotStrategy,
            allowedValues: ["NoSpot", "SpotWithPriceLimit", "SpotAsPriceGo"],
        }));
    }
    errors.collect(ros.propertyValidator('computeSpotStrategy', ros.validateString)(properties.computeSpotStrategy));
    errors.collect(ros.propertyValidator('ecsOrderManagerInstanceType', ros.requiredValidator)(properties.ecsOrderManagerInstanceType));
    errors.collect(ros.propertyValidator('ecsOrderManagerInstanceType', ros.validateString)(properties.ecsOrderManagerInstanceType));
    errors.collect(ros.propertyValidator('ehpcVersion', ros.validateString)(properties.ehpcVersion));
    errors.collect(ros.propertyValidator('volumeMountpoint', ros.validateString)(properties.volumeMountpoint));
    errors.collect(ros.propertyValidator('ecsOrderManagerCount', ros.validateNumber)(properties.ecsOrderManagerCount));
    errors.collect(ros.propertyValidator('ecsOrderComputeInstanceType', ros.requiredValidator)(properties.ecsOrderComputeInstanceType));
    errors.collect(ros.propertyValidator('ecsOrderComputeInstanceType', ros.validateString)(properties.ecsOrderComputeInstanceType));
    errors.collect(ros.propertyValidator('vpcId', ros.validateString)(properties.vpcId));
    if (properties.application && (Array.isArray(properties.application) || (typeof properties.application) === 'string')) {
        errors.collect(ros.propertyValidator('application', ros.validateLength)({
            data: properties.application.length,
            min: undefined,
            max: 10,
        }));
    }
    errors.collect(ros.propertyValidator('application', ros.listValidator(RosCluster_ApplicationPropertyValidator))(properties.application));
    if (properties.periodUnit && (typeof properties.periodUnit) !== 'object') {
        errors.collect(ros.propertyValidator('periodUnit', ros.validateAllowedValues)({
            data: properties.periodUnit,
            allowedValues: ["Week", "Month", "Year"],
        }));
    }
    errors.collect(ros.propertyValidator('periodUnit', ros.validateString)(properties.periodUnit));
    if (properties.imageOwnerAlias && (typeof properties.imageOwnerAlias) !== 'object') {
        errors.collect(ros.propertyValidator('imageOwnerAlias', ros.validateAllowedValues)({
            data: properties.imageOwnerAlias,
            allowedValues: ["system", "self", "others", "marketplace"],
        }));
    }
    errors.collect(ros.propertyValidator('imageOwnerAlias', ros.validateString)(properties.imageOwnerAlias));
    errors.collect(ros.propertyValidator('ecsOrderComputeCount', ros.requiredValidator)(properties.ecsOrderComputeCount));
    if (properties.ecsOrderComputeCount && (typeof properties.ecsOrderComputeCount) !== 'object') {
        errors.collect(ros.propertyValidator('ecsOrderComputeCount', ros.validateRange)({
            data: properties.ecsOrderComputeCount,
            min: 0,
            max: 99,
        }));
    }
    errors.collect(ros.propertyValidator('ecsOrderComputeCount', ros.validateNumber)(properties.ecsOrderComputeCount));
    if (properties.description && (Array.isArray(properties.description) || (typeof properties.description) === 'string')) {
        errors.collect(ros.propertyValidator('description', ros.validateLength)({
            data: properties.description.length,
            min: 2,
            max: 128,
        }));
    }
    errors.collect(ros.propertyValidator('description', ros.validateString)(properties.description));
    errors.collect(ros.propertyValidator('securityGroupName', ros.validateString)(properties.securityGroupName));
    errors.collect(ros.propertyValidator('systemDiskSize', ros.validateNumber)(properties.systemDiskSize));
    if (properties.additionalVolumes && (Array.isArray(properties.additionalVolumes) || (typeof properties.additionalVolumes) === 'string')) {
        errors.collect(ros.propertyValidator('additionalVolumes', ros.validateLength)({
            data: properties.additionalVolumes.length,
            min: undefined,
            max: 10,
        }));
    }
    errors.collect(ros.propertyValidator('additionalVolumes', ros.listValidator(RosCluster_AdditionalVolumesPropertyValidator))(properties.additionalVolumes));
    errors.collect(ros.propertyValidator('autoRenew', ros.validateBoolean)(properties.autoRenew));
    errors.collect(ros.propertyValidator('computeSpotPriceLimit', ros.validateString)(properties.computeSpotPriceLimit));
    if (properties.ramNodeTypes && (Array.isArray(properties.ramNodeTypes) || (typeof properties.ramNodeTypes) === 'string')) {
        errors.collect(ros.propertyValidator('ramNodeTypes', ros.validateLength)({
            data: properties.ramNodeTypes.length,
            min: undefined,
            max: 4,
        }));
    }
    errors.collect(ros.propertyValidator('ramNodeTypes', ros.listValidator(ros.validateString))(properties.ramNodeTypes));
    errors.collect(ros.propertyValidator('clientVersion', ros.validateString)(properties.clientVersion));
    errors.collect(ros.propertyValidator('volumeType', ros.validateString)(properties.volumeType));
    errors.collect(ros.propertyValidator('inputFileUrl', ros.validateString)(properties.inputFileUrl));
    if (properties.password && (Array.isArray(properties.password) || (typeof properties.password) === 'string')) {
        errors.collect(ros.propertyValidator('password', ros.validateLength)({
            data: properties.password.length,
            min: 8,
            max: 30,
        }));
    }
    errors.collect(ros.propertyValidator('password', ros.validateString)(properties.password));
    errors.collect(ros.propertyValidator('autoRenewPeriod', ros.validateNumber)(properties.autoRenewPeriod));
    errors.collect(ros.propertyValidator('keyPairName', ros.validateString)(properties.keyPairName));
    errors.collect(ros.propertyValidator('remoteDirectory', ros.validateString)(properties.remoteDirectory));
    errors.collect(ros.propertyValidator('networkInterfaceTrafficMode', ros.validateString)(properties.networkInterfaceTrafficMode));
    errors.collect(ros.propertyValidator('sccClusterId', ros.validateString)(properties.sccClusterId));
    errors.collect(ros.propertyValidator('zoneId', ros.validateString)(properties.zoneId));
    errors.collect(ros.propertyValidator('systemDiskLevel', ros.validateString)(properties.systemDiskLevel));
    errors.collect(ros.propertyValidator('ecsOrderLoginCount', ros.requiredValidator)(properties.ecsOrderLoginCount));
    if (properties.ecsOrderLoginCount && (typeof properties.ecsOrderLoginCount) !== 'object') {
        errors.collect(ros.propertyValidator('ecsOrderLoginCount', ros.validateRange)({
            data: properties.ecsOrderLoginCount,
            min: 1,
            max: 1,
        }));
    }
    errors.collect(ros.propertyValidator('ecsOrderLoginCount', ros.validateNumber)(properties.ecsOrderLoginCount));
    errors.collect(ros.propertyValidator('securityGroupId', ros.validateString)(properties.securityGroupId));
    errors.collect(ros.propertyValidator('schedulerType', ros.validateString)(properties.schedulerType));
    errors.collect(ros.propertyValidator('accountType', ros.validateString)(properties.accountType));
    errors.collect(ros.propertyValidator('haEnable', ros.validateBoolean)(properties.haEnable));
    errors.collect(ros.propertyValidator('osTag', ros.requiredValidator)(properties.osTag));
    errors.collect(ros.propertyValidator('osTag', ros.validateString)(properties.osTag));
    if (properties.ecsChargeType && (typeof properties.ecsChargeType) !== 'object') {
        errors.collect(ros.propertyValidator('ecsChargeType', ros.validateAllowedValues)({
            data: properties.ecsChargeType,
            allowedValues: ["PayAsYouGo", "PostPaid", "PayOnDemand", "Postpaid", "PostPay", "Postpay", "POSTPAY", "POST", "Subscription", "PrePaid", "Prepaid", "PrePay", "Prepay", "PREPAY", "PRE"],
        }));
    }
    errors.collect(ros.propertyValidator('ecsChargeType', ros.validateString)(properties.ecsChargeType));
    return errors.wrap('supplied properties not correct for "RosClusterProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::EHPC::Cluster` resource
 *
 * @param properties - the TypeScript properties of a `RosClusterProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::EHPC::Cluster` resource.
 */
// @ts-ignore TS6133
function rosClusterPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosClusterPropsValidator(properties).assertSuccess();
    }
    return {
        'EcsOrderComputeCount': ros.numberToRosTemplate(properties.ecsOrderComputeCount),
        'EcsOrderComputeInstanceType': ros.stringToRosTemplate(properties.ecsOrderComputeInstanceType),
        'EcsOrderLoginCount': ros.numberToRosTemplate(properties.ecsOrderLoginCount),
        'EcsOrderLoginInstanceType': ros.stringToRosTemplate(properties.ecsOrderLoginInstanceType),
        'EcsOrderManagerInstanceType': ros.stringToRosTemplate(properties.ecsOrderManagerInstanceType),
        'Name': ros.stringToRosTemplate(properties.name),
        'OsTag': ros.stringToRosTemplate(properties.osTag),
        'VSwitchId': ros.stringToRosTemplate(properties.vSwitchId),
        'AccountType': ros.stringToRosTemplate(properties.accountType),
        'AdditionalVolumes': ros.listMapper(rosClusterAdditionalVolumesPropertyToRosTemplate)(properties.additionalVolumes),
        'Application': ros.listMapper(rosClusterApplicationPropertyToRosTemplate)(properties.application),
        'AutoRenew': ros.booleanToRosTemplate(properties.autoRenew),
        'AutoRenewPeriod': ros.numberToRosTemplate(properties.autoRenewPeriod),
        'ClientVersion': ros.stringToRosTemplate(properties.clientVersion),
        'ComputeEnableHt': ros.booleanToRosTemplate(properties.computeEnableHt),
        'ComputeSpotPriceLimit': ros.stringToRosTemplate(properties.computeSpotPriceLimit),
        'ComputeSpotStrategy': ros.stringToRosTemplate(properties.computeSpotStrategy),
        'DeployMode': ros.stringToRosTemplate(properties.deployMode),
        'Description': ros.stringToRosTemplate(properties.description),
        'EcsChargeType': ros.stringToRosTemplate(properties.ecsChargeType),
        'EcsOrderManagerCount': ros.numberToRosTemplate(properties.ecsOrderManagerCount),
        'EhpcVersion': ros.stringToRosTemplate(properties.ehpcVersion),
        'HaEnable': ros.booleanToRosTemplate(properties.haEnable),
        'ImageId': ros.stringToRosTemplate(properties.imageId),
        'ImageOwnerAlias': ros.stringToRosTemplate(properties.imageOwnerAlias),
        'InputFileUrl': ros.stringToRosTemplate(properties.inputFileUrl),
        'IsComputeEss': ros.booleanToRosTemplate(properties.isComputeEss),
        'JobQueue': ros.stringToRosTemplate(properties.jobQueue),
        'KeyPairName': ros.stringToRosTemplate(properties.keyPairName),
        'NetworkInterfaceTrafficMode': ros.stringToRosTemplate(properties.networkInterfaceTrafficMode),
        'Password': ros.stringToRosTemplate(properties.password),
        'Period': ros.numberToRosTemplate(properties.period),
        'PeriodUnit': ros.stringToRosTemplate(properties.periodUnit),
        'PostInstallScript': ros.listMapper(rosClusterPostInstallScriptPropertyToRosTemplate)(properties.postInstallScript),
        'RamNodeTypes': ros.listMapper(ros.stringToRosTemplate)(properties.ramNodeTypes),
        'RamRoleName': ros.stringToRosTemplate(properties.ramRoleName),
        'RemoteDirectory': ros.stringToRosTemplate(properties.remoteDirectory),
        'RemoteVisEnable': ros.booleanToRosTemplate(properties.remoteVisEnable),
        'ResourceGroupId': ros.stringToRosTemplate(properties.resourceGroupId),
        'SccClusterId': ros.stringToRosTemplate(properties.sccClusterId),
        'SchedulerType': ros.stringToRosTemplate(properties.schedulerType),
        'SecurityGroupId': ros.stringToRosTemplate(properties.securityGroupId),
        'SecurityGroupName': ros.stringToRosTemplate(properties.securityGroupName),
        'SystemDiskLevel': ros.stringToRosTemplate(properties.systemDiskLevel),
        'SystemDiskSize': ros.numberToRosTemplate(properties.systemDiskSize),
        'SystemDiskType': ros.stringToRosTemplate(properties.systemDiskType),
        'VolumeId': ros.stringToRosTemplate(properties.volumeId),
        'VolumeMountpoint': ros.stringToRosTemplate(properties.volumeMountpoint),
        'VolumeProtocol': ros.stringToRosTemplate(properties.volumeProtocol),
        'VolumeType': ros.stringToRosTemplate(properties.volumeType),
        'VpcId': ros.stringToRosTemplate(properties.vpcId),
        'WithoutElasticIp': ros.booleanToRosTemplate(properties.withoutElasticIp),
        'ZoneId': ros.stringToRosTemplate(properties.zoneId),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::EHPC::Cluster`, which is used to create an Elastic High Performance Computing (E-HPC) cluster.
 * @Note This class does not contain additional functions, so it is recommended to use the `Cluster` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-ehpc-cluster
 */
class RosCluster extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosCluster.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrClusterId = this.getAtt('ClusterId');
        this.attrEcsInfo = this.getAtt('EcsInfo');
        this.attrName = this.getAtt('Name');
        this.attrSecurityGroupId = this.getAtt('SecurityGroupId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.ecsOrderComputeCount = props.ecsOrderComputeCount;
        this.ecsOrderComputeInstanceType = props.ecsOrderComputeInstanceType;
        this.ecsOrderLoginCount = props.ecsOrderLoginCount;
        this.ecsOrderLoginInstanceType = props.ecsOrderLoginInstanceType;
        this.ecsOrderManagerInstanceType = props.ecsOrderManagerInstanceType;
        this.name = props.name;
        this.osTag = props.osTag;
        this.vSwitchId = props.vSwitchId;
        this.accountType = props.accountType;
        this.additionalVolumes = props.additionalVolumes;
        this.application = props.application;
        this.autoRenew = props.autoRenew;
        this.autoRenewPeriod = props.autoRenewPeriod;
        this.clientVersion = props.clientVersion;
        this.computeEnableHt = props.computeEnableHt;
        this.computeSpotPriceLimit = props.computeSpotPriceLimit;
        this.computeSpotStrategy = props.computeSpotStrategy;
        this.deployMode = props.deployMode;
        this.description = props.description;
        this.ecsChargeType = props.ecsChargeType;
        this.ecsOrderManagerCount = props.ecsOrderManagerCount;
        this.ehpcVersion = props.ehpcVersion;
        this.haEnable = props.haEnable;
        this.imageId = props.imageId;
        this.imageOwnerAlias = props.imageOwnerAlias;
        this.inputFileUrl = props.inputFileUrl;
        this.isComputeEss = props.isComputeEss;
        this.jobQueue = props.jobQueue;
        this.keyPairName = props.keyPairName;
        this.networkInterfaceTrafficMode = props.networkInterfaceTrafficMode;
        this.password = props.password;
        this.period = props.period;
        this.periodUnit = props.periodUnit;
        this.postInstallScript = props.postInstallScript;
        this.ramNodeTypes = props.ramNodeTypes;
        this.ramRoleName = props.ramRoleName;
        this.remoteDirectory = props.remoteDirectory;
        this.remoteVisEnable = props.remoteVisEnable;
        this.resourceGroupId = props.resourceGroupId;
        this.sccClusterId = props.sccClusterId;
        this.schedulerType = props.schedulerType;
        this.securityGroupId = props.securityGroupId;
        this.securityGroupName = props.securityGroupName;
        this.systemDiskLevel = props.systemDiskLevel;
        this.systemDiskSize = props.systemDiskSize;
        this.systemDiskType = props.systemDiskType;
        this.volumeId = props.volumeId;
        this.volumeMountpoint = props.volumeMountpoint;
        this.volumeProtocol = props.volumeProtocol;
        this.volumeType = props.volumeType;
        this.vpcId = props.vpcId;
        this.withoutElasticIp = props.withoutElasticIp;
        this.zoneId = props.zoneId;
    }
    get rosProperties() {
        return {
            ecsOrderComputeCount: this.ecsOrderComputeCount,
            ecsOrderComputeInstanceType: this.ecsOrderComputeInstanceType,
            ecsOrderLoginCount: this.ecsOrderLoginCount,
            ecsOrderLoginInstanceType: this.ecsOrderLoginInstanceType,
            ecsOrderManagerInstanceType: this.ecsOrderManagerInstanceType,
            name: this.name,
            osTag: this.osTag,
            vSwitchId: this.vSwitchId,
            accountType: this.accountType,
            additionalVolumes: this.additionalVolumes,
            application: this.application,
            autoRenew: this.autoRenew,
            autoRenewPeriod: this.autoRenewPeriod,
            clientVersion: this.clientVersion,
            computeEnableHt: this.computeEnableHt,
            computeSpotPriceLimit: this.computeSpotPriceLimit,
            computeSpotStrategy: this.computeSpotStrategy,
            deployMode: this.deployMode,
            description: this.description,
            ecsChargeType: this.ecsChargeType,
            ecsOrderManagerCount: this.ecsOrderManagerCount,
            ehpcVersion: this.ehpcVersion,
            haEnable: this.haEnable,
            imageId: this.imageId,
            imageOwnerAlias: this.imageOwnerAlias,
            inputFileUrl: this.inputFileUrl,
            isComputeEss: this.isComputeEss,
            jobQueue: this.jobQueue,
            keyPairName: this.keyPairName,
            networkInterfaceTrafficMode: this.networkInterfaceTrafficMode,
            password: this.password,
            period: this.period,
            periodUnit: this.periodUnit,
            postInstallScript: this.postInstallScript,
            ramNodeTypes: this.ramNodeTypes,
            ramRoleName: this.ramRoleName,
            remoteDirectory: this.remoteDirectory,
            remoteVisEnable: this.remoteVisEnable,
            resourceGroupId: this.resourceGroupId,
            sccClusterId: this.sccClusterId,
            schedulerType: this.schedulerType,
            securityGroupId: this.securityGroupId,
            securityGroupName: this.securityGroupName,
            systemDiskLevel: this.systemDiskLevel,
            systemDiskSize: this.systemDiskSize,
            systemDiskType: this.systemDiskType,
            volumeId: this.volumeId,
            volumeMountpoint: this.volumeMountpoint,
            volumeProtocol: this.volumeProtocol,
            volumeType: this.volumeType,
            vpcId: this.vpcId,
            withoutElasticIp: this.withoutElasticIp,
            zoneId: this.zoneId,
        };
    }
    renderProperties(props) {
        return rosClusterPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosCluster = RosCluster;
/**
 * The resource type name for this resource class.
 */
RosCluster.ROS_RESOURCE_TYPE_NAME = "ALIYUN::EHPC::Cluster";
/**
 * Determine whether the given properties match those of a `AdditionalVolumesProperty`
 *
 * @param properties - the TypeScript properties of a `AdditionalVolumesProperty`
 *
 * @returns the result of the validation.
 */
function RosCluster_AdditionalVolumesPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('volumeProtocol', ros.validateString)(properties.volumeProtocol));
    errors.collect(ros.propertyValidator('localDirectory', ros.requiredValidator)(properties.localDirectory));
    errors.collect(ros.propertyValidator('localDirectory', ros.validateString)(properties.localDirectory));
    errors.collect(ros.propertyValidator('volumeId', ros.requiredValidator)(properties.volumeId));
    errors.collect(ros.propertyValidator('volumeId', ros.validateString)(properties.volumeId));
    errors.collect(ros.propertyValidator('remoteDirectory', ros.validateString)(properties.remoteDirectory));
    errors.collect(ros.propertyValidator('volumeType', ros.validateString)(properties.volumeType));
    errors.collect(ros.propertyValidator('jobQueue', ros.validateString)(properties.jobQueue));
    errors.collect(ros.propertyValidator('volumeMountpoint', ros.requiredValidator)(properties.volumeMountpoint));
    errors.collect(ros.propertyValidator('volumeMountpoint', ros.validateString)(properties.volumeMountpoint));
    errors.collect(ros.propertyValidator('location', ros.validateString)(properties.location));
    return errors.wrap('supplied properties not correct for "AdditionalVolumesProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::EHPC::Cluster.AdditionalVolumes` resource
 *
 * @param properties - the TypeScript properties of a `AdditionalVolumesProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::EHPC::Cluster.AdditionalVolumes` resource.
 */
// @ts-ignore TS6133
function rosClusterAdditionalVolumesPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosCluster_AdditionalVolumesPropertyValidator(properties).assertSuccess();
    return {
        'VolumeProtocol': ros.stringToRosTemplate(properties.volumeProtocol),
        'LocalDirectory': ros.stringToRosTemplate(properties.localDirectory),
        'VolumeId': ros.stringToRosTemplate(properties.volumeId),
        'RemoteDirectory': ros.stringToRosTemplate(properties.remoteDirectory),
        'VolumeType': ros.stringToRosTemplate(properties.volumeType),
        'JobQueue': ros.stringToRosTemplate(properties.jobQueue),
        'VolumeMountpoint': ros.stringToRosTemplate(properties.volumeMountpoint),
        'Location': ros.stringToRosTemplate(properties.location),
    };
}
/**
 * Determine whether the given properties match those of a `ApplicationProperty`
 *
 * @param properties - the TypeScript properties of a `ApplicationProperty`
 *
 * @returns the result of the validation.
 */
function RosCluster_ApplicationPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('tag', ros.requiredValidator)(properties.tag));
    errors.collect(ros.propertyValidator('tag', ros.validateString)(properties.tag));
    return errors.wrap('supplied properties not correct for "ApplicationProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::EHPC::Cluster.Application` resource
 *
 * @param properties - the TypeScript properties of a `ApplicationProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::EHPC::Cluster.Application` resource.
 */
// @ts-ignore TS6133
function rosClusterApplicationPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosCluster_ApplicationPropertyValidator(properties).assertSuccess();
    return {
        'Tag': ros.stringToRosTemplate(properties.tag),
    };
}
/**
 * Determine whether the given properties match those of a `PostInstallScriptProperty`
 *
 * @param properties - the TypeScript properties of a `PostInstallScriptProperty`
 *
 * @returns the result of the validation.
 */
function RosCluster_PostInstallScriptPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('args', ros.validateString)(properties.args));
    errors.collect(ros.propertyValidator('url', ros.validateString)(properties.url));
    return errors.wrap('supplied properties not correct for "PostInstallScriptProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::EHPC::Cluster.PostInstallScript` resource
 *
 * @param properties - the TypeScript properties of a `PostInstallScriptProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::EHPC::Cluster.PostInstallScript` resource.
 */
// @ts-ignore TS6133
function rosClusterPostInstallScriptPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosCluster_PostInstallScriptPropertyValidator(properties).assertSuccess();
    return {
        'Args': ros.stringToRosTemplate(properties.args),
        'Url': ros.stringToRosTemplate(properties.url),
    };
}
/**
 * Determine whether the given properties match those of a `RosUsersProps`
 *
 * @param properties - the TypeScript properties of a `RosUsersProps`
 *
 * @returns the result of the validation.
 */
function RosUsersPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('clusterId', ros.requiredValidator)(properties.clusterId));
    errors.collect(ros.propertyValidator('clusterId', ros.validateString)(properties.clusterId));
    errors.collect(ros.propertyValidator('users', ros.requiredValidator)(properties.users));
    if (properties.users && (Array.isArray(properties.users) || (typeof properties.users) === 'string')) {
        errors.collect(ros.propertyValidator('users', ros.validateLength)({
            data: properties.users.length,
            min: undefined,
            max: 100,
        }));
    }
    errors.collect(ros.propertyValidator('users', ros.listValidator(RosUsers_UsersPropertyValidator))(properties.users));
    return errors.wrap('supplied properties not correct for "RosUsersProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::EHPC::Users` resource
 *
 * @param properties - the TypeScript properties of a `RosUsersProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::EHPC::Users` resource.
 */
// @ts-ignore TS6133
function rosUsersPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosUsersPropsValidator(properties).assertSuccess();
    }
    return {
        'ClusterId': ros.stringToRosTemplate(properties.clusterId),
        'Users': ros.listMapper(rosUsersUsersPropertyToRosTemplate)(properties.users),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::EHPC::Users`, which is used to add one or more users to a specified cluster.
 * @Note This class does not contain additional functions, so it is recommended to use the `Users` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-ehpc-users
 */
class RosUsers extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosUsers.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.clusterId = props.clusterId;
        this.users = props.users;
    }
    get rosProperties() {
        return {
            clusterId: this.clusterId,
            users: this.users,
        };
    }
    renderProperties(props) {
        return rosUsersPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosUsers = RosUsers;
/**
 * The resource type name for this resource class.
 */
RosUsers.ROS_RESOURCE_TYPE_NAME = "ALIYUN::EHPC::Users";
/**
 * Determine whether the given properties match those of a `UsersProperty`
 *
 * @param properties - the TypeScript properties of a `UsersProperty`
 *
 * @returns the result of the validation.
 */
function RosUsers_UsersPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('group', ros.requiredValidator)(properties.group));
    errors.collect(ros.propertyValidator('group', ros.validateString)(properties.group));
    errors.collect(ros.propertyValidator('password', ros.requiredValidator)(properties.password));
    errors.collect(ros.propertyValidator('password', ros.validateString)(properties.password));
    errors.collect(ros.propertyValidator('name', ros.requiredValidator)(properties.name));
    errors.collect(ros.propertyValidator('name', ros.validateString)(properties.name));
    return errors.wrap('supplied properties not correct for "UsersProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::EHPC::Users.Users` resource
 *
 * @param properties - the TypeScript properties of a `UsersProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::EHPC::Users.Users` resource.
 */
// @ts-ignore TS6133
function rosUsersUsersPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosUsers_UsersPropertyValidator(properties).assertSuccess();
    return {
        'Group': ros.stringToRosTemplate(properties.group),
        'Password': ros.stringToRosTemplate(properties.password),
        'Name': ros.stringToRosTemplate(properties.name),
    };
}
//# sourceMappingURL=data:application/json;base64,