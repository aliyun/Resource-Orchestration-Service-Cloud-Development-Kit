"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AutoSnapshotPolicy = exports.AutoSnapshotPolicyProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ecs_generated_1 = require("./ecs.generated");
Object.defineProperty(exports, "AutoSnapshotPolicyProperty", { enumerable: true, get: function () { return ecs_generated_1.RosAutoSnapshotPolicy; } });
/**
 * This class encapsulates and extends the ROS resource type `DATASOURCE::ECS::AutoSnapshotPolicy`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosAutoSnapshotPolicy`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/datasource-ecs-autosnapshotpolicy
 */
class AutoSnapshotPolicy extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosAutoSnapshotPolicy = new ecs_generated_1.RosAutoSnapshotPolicy(this, id, {
            autoSnapshotPolicyId: props.autoSnapshotPolicyId,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosAutoSnapshotPolicy;
        this.attrAutoSnapshotPolicyName = rosAutoSnapshotPolicy.attrAutoSnapshotPolicyName;
        this.attrCreateTime = rosAutoSnapshotPolicy.attrCreateTime;
        this.attrDiskNums = rosAutoSnapshotPolicy.attrDiskNums;
        this.attrRepeatWeekdays = rosAutoSnapshotPolicy.attrRepeatWeekdays;
        this.attrResourceGroupId = rosAutoSnapshotPolicy.attrResourceGroupId;
        this.attrRetentionDays = rosAutoSnapshotPolicy.attrRetentionDays;
        this.attrTags = rosAutoSnapshotPolicy.attrTags;
        this.attrTimePoints = rosAutoSnapshotPolicy.attrTimePoints;
        this.attrVolumeNums = rosAutoSnapshotPolicy.attrVolumeNums;
    }
}
exports.AutoSnapshotPolicy = AutoSnapshotPolicy;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0b3NuYXBzaG90cG9saWN5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYXV0b3NuYXBzaG90cG9saWN5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDhDQUE4QztBQUM5QyxtREFBd0Q7QUFFdEIsMkdBRnpCLHFDQUFxQixPQUU4QjtBQWM1RDs7OztHQUlHO0FBQ0gsTUFBYSxrQkFBbUIsU0FBUSxHQUFHLENBQUMsUUFBUTtJQXFEaEQ7Ozs7T0FJRztJQUNILFlBQVksS0FBb0IsRUFBRSxFQUFVLEVBQUUsS0FBOEIsRUFBRSxtQ0FBMkMsSUFBSTtRQUN6SCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ2pCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQ2IsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLGdDQUFnQyxHQUFHLGdDQUFnQyxDQUFDO1FBRXpFLE1BQU0scUJBQXFCLEdBQUcsSUFBSSxxQ0FBcUIsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFHO1lBQy9ELG9CQUFvQixFQUFFLEtBQUssQ0FBQyxvQkFBb0I7U0FDbkQsRUFBRSxnQ0FBZ0MsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7UUFDcEYsSUFBSSxDQUFDLFFBQVEsR0FBRyxxQkFBcUIsQ0FBQztRQUN0QyxJQUFJLENBQUMsMEJBQTBCLEdBQUcscUJBQXFCLENBQUMsMEJBQTBCLENBQUM7UUFDbkYsSUFBSSxDQUFDLGNBQWMsR0FBRyxxQkFBcUIsQ0FBQyxjQUFjLENBQUM7UUFDM0QsSUFBSSxDQUFDLFlBQVksR0FBRyxxQkFBcUIsQ0FBQyxZQUFZLENBQUM7UUFDdkQsSUFBSSxDQUFDLGtCQUFrQixHQUFHLHFCQUFxQixDQUFDLGtCQUFrQixDQUFDO1FBQ25FLElBQUksQ0FBQyxtQkFBbUIsR0FBRyxxQkFBcUIsQ0FBQyxtQkFBbUIsQ0FBQztRQUNyRSxJQUFJLENBQUMsaUJBQWlCLEdBQUcscUJBQXFCLENBQUMsaUJBQWlCLENBQUM7UUFDakUsSUFBSSxDQUFDLFFBQVEsR0FBRyxxQkFBcUIsQ0FBQyxRQUFRLENBQUM7UUFDL0MsSUFBSSxDQUFDLGNBQWMsR0FBRyxxQkFBcUIsQ0FBQyxjQUFjLENBQUM7UUFDM0QsSUFBSSxDQUFDLGNBQWMsR0FBRyxxQkFBcUIsQ0FBQyxjQUFjLENBQUM7SUFDL0QsQ0FBQztDQUNKO0FBL0VELGdEQStFQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHJvcyBmcm9tICdAYWxpY2xvdWQvcm9zLWNkay1jb3JlJztcbmltcG9ydCB7IFJvc0F1dG9TbmFwc2hvdFBvbGljeSB9IGZyb20gJy4vZWNzLmdlbmVyYXRlZCc7XG4vLyBHZW5lcmF0ZWQgZnJvbSB0aGUgQWxpQ2xvdWQgUk9TIFJlc291cmNlIFNwZWNpZmljYXRpb25cbmV4cG9ydCB7IFJvc0F1dG9TbmFwc2hvdFBvbGljeSBhcyBBdXRvU25hcHNob3RQb2xpY3lQcm9wZXJ0eSB9O1xuXG4vKipcbiAqIFByb3BlcnRpZXMgZm9yIGRlZmluaW5nIGEgYEF1dG9TbmFwc2hvdFBvbGljeWAuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2RhdGFzb3VyY2UtZWNzLWF1dG9zbmFwc2hvdHBvbGljeVxuICovXG5leHBvcnQgaW50ZXJmYWNlIEF1dG9TbmFwc2hvdFBvbGljeVByb3BzIHtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGF1dG9TbmFwc2hvdFBvbGljeUlkOiBUaGUgbmFtZSBvZiB0aGUgYXV0b21hdGljIHNuYXBzaG90IHBvbGljeS5cbiAgICAgKi9cbiAgICByZWFkb25seSBhdXRvU25hcHNob3RQb2xpY3lJZDogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xufVxuXG4vKipcbiAqIFRoaXMgY2xhc3MgZW5jYXBzdWxhdGVzIGFuZCBleHRlbmRzIHRoZSBST1MgcmVzb3VyY2UgdHlwZSBgREFUQVNPVVJDRTo6RUNTOjpBdXRvU25hcHNob3RQb2xpY3lgLlxuICogQE5vdGUgVGhpcyBjbGFzcyBtYXkgaGF2ZSBzb21lIG5ldyBmdW5jdGlvbnMgdG8gZmFjaWxpdGF0ZSBkZXZlbG9wbWVudCwgc28gaXQgaXMgcmVjb21tZW5kZWQgdG8gdXNlIHRoaXMgY2xhc3MgaW5zdGVhZCBvZiBgUm9zQXV0b1NuYXBzaG90UG9saWN5YGZvciBhIG1vcmUgY29udmVuaWVudCBkZXZlbG9wbWVudCBleHBlcmllbmNlLlxuICogU2VlIGh0dHBzOi8vd3d3LmFsaWJhYmFjbG91ZC5jb20vaGVscC9yb3MvZGV2ZWxvcGVyLXJlZmVyZW5jZS9kYXRhc291cmNlLWVjcy1hdXRvc25hcHNob3Rwb2xpY3lcbiAqL1xuZXhwb3J0IGNsYXNzIEF1dG9TbmFwc2hvdFBvbGljeSBleHRlbmRzIHJvcy5SZXNvdXJjZSB7XG4gICAgcHJvdGVjdGVkIHNjb3BlOiByb3MuQ29uc3RydWN0O1xuICAgIHByb3RlY3RlZCBpZDogc3RyaW5nO1xuICAgIHByb3RlY3RlZCBwcm9wczogQXV0b1NuYXBzaG90UG9saWN5UHJvcHM7XG4gICAgcHJvdGVjdGVkIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OiBib29sZWFuO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIEF1dG9TbmFwc2hvdFBvbGljeU5hbWU6IE5hbWUgb2YgdGhlIGF1dG9tYXRpYyBzbmFwc2hvdCBwb2xpY3kuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJBdXRvU25hcHNob3RQb2xpY3lOYW1lOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgQ3JlYXRlVGltZTogVGhlIHRpbWUgd2hlbiB0aGUgYXV0b21hdGljIHNuYXBzaG90IHBvbGljeSB3YXMgY3JlYXRlZC4gVGhlIHRpbWUgZm9sbG93cyB0aGUgSVNPIDg2MDEgc3RhbmRhcmQgaW4gdGhlIHl5eXktTU0tZGRUaGg6bW06c3NaIGZvcm1hdC4gVGhlIHRpbWUgaXMgZGlzcGxheWVkIGluIFVUQy5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckNyZWF0ZVRpbWU6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBEaXNrTnVtczogTnVtYmVyIG9mIGNsb3VkIGRpc2tzIHdpdGggdGhpcyBwb2xpY3kgZW5hYmxlZC5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckRpc2tOdW1zOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgUmVwZWF0V2Vla2RheXM6IFRoZSBkYXlzIG9mIHRoZSB3ZWVrIG9uIHdoaWNoIHRvIGNyZWF0ZSBhdXRvbWF0aWMgc25hcHNob3RzLiBWYWxpZCB2YWx1ZXM6IDEgdG8gNywgd2hpY2ggY29ycmVzcG9uZCB0byB0aGUgZGF5cyBvZiB0aGUgd2Vlay4gMSBpbmRpY2F0ZXMgTW9uZGF5LiBPbmUgb3IgbW9yZSBkYXlzIGNhbiBiZSBzcGVjaWZpZWQuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJSZXBlYXRXZWVrZGF5czogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIFJlc291cmNlR3JvdXBJZDogVGhlIElEIG9mIHRoZSByZXNvdXJjZSBncm91cC5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0clJlc291cmNlR3JvdXBJZDogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIFJldGVudGlvbkRheXM6IFRoZSByZXRlbnRpb24gcGVyaW9kIG9mIHRoZSBhdXRvbWF0aWMgc25hcHNob3QuIFVuaXQ6IGRheXMuIFZhbGlkIHZhbHVlczpcbi0gLTE6IFRoZSBhdXRvbWF0aWMgc25hcHNob3QgaXMgcmV0YWluZWQgdW50aWwgaXQgaXMgZGVsZXRlZC5cbi0gMSB0byA2NTUzNjogVGhlIGF1dG9tYXRpYyBzbmFwc2hvdCBpcyByZXRhaW5lZCBmb3IgdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgZGF5cy5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0clJldGVudGlvbkRheXM6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBUYWdzOiBUaGUgdGFncyBvZiB0aGUgYXV0b21hdGljIHNuYXBzaG90IHBvbGljeS5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0clRhZ3M6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBUaW1lUG9pbnRzOiBUaGUgdGltZSB3aGVuIHRoZSBhdXRvbWF0aWMgc25hcHNob3QgcG9saWN5IHdhcyBjcmVhdGVkLiBUaGUgdGltZSBmb2xsb3dzIHRoZSBJU08gODYwMSBzdGFuZGFyZCBpbiB0aGUgeXl5eS1NTS1kZFRoaDptbTpzc1ogZm9ybWF0LiBUaGUgdGltZSBpcyBkaXNwbGF5ZWQgaW4gVVRDLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyVGltZVBvaW50czogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIFZvbHVtZU51bXM6IFRoZSBudW1iZXIgb2YgZXh0ZW5kZWQgdm9sdW1lcyB0byB3aGljaCB0aGUgYXV0b21hdGljIHNuYXBzaG90IHBvbGljeSBpcyBhcHBsaWVkLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyVm9sdW1lTnVtczogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUGFyYW0gc2NvcGUgLSBzY29wZSBpbiB3aGljaCB0aGlzIHJlc291cmNlIGlzIGRlZmluZWRcbiAgICAgKiBQYXJhbSBpZCAgICAtIHNjb3BlZCBpZCBvZiB0aGUgcmVzb3VyY2VcbiAgICAgKiBQYXJhbSBwcm9wcyAtIHJlc291cmNlIHByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihzY29wZTogcm9zLkNvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IEF1dG9TbmFwc2hvdFBvbGljeVByb3BzLCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDpib29sZWFuID0gdHJ1ZSkge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQpO1xuICAgICAgICB0aGlzLnNjb3BlID0gc2NvcGU7XG4gICAgICAgIHRoaXMuaWQgPSBpZDtcbiAgICAgICAgdGhpcy5wcm9wcyA9IHByb3BzO1xuICAgICAgICB0aGlzLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ID0gZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ7XG5cbiAgICAgICAgY29uc3Qgcm9zQXV0b1NuYXBzaG90UG9saWN5ID0gbmV3IFJvc0F1dG9TbmFwc2hvdFBvbGljeSh0aGlzLCBpZCwgIHtcbiAgICAgICAgICAgIGF1dG9TbmFwc2hvdFBvbGljeUlkOiBwcm9wcy5hdXRvU25hcHNob3RQb2xpY3lJZCxcbiAgICAgICAgfSwgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgJiYgdGhpcy5zdGFjay5lbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCk7XG4gICAgICAgIHRoaXMucmVzb3VyY2UgPSByb3NBdXRvU25hcHNob3RQb2xpY3k7XG4gICAgICAgIHRoaXMuYXR0ckF1dG9TbmFwc2hvdFBvbGljeU5hbWUgPSByb3NBdXRvU25hcHNob3RQb2xpY3kuYXR0ckF1dG9TbmFwc2hvdFBvbGljeU5hbWU7XG4gICAgICAgIHRoaXMuYXR0ckNyZWF0ZVRpbWUgPSByb3NBdXRvU25hcHNob3RQb2xpY3kuYXR0ckNyZWF0ZVRpbWU7XG4gICAgICAgIHRoaXMuYXR0ckRpc2tOdW1zID0gcm9zQXV0b1NuYXBzaG90UG9saWN5LmF0dHJEaXNrTnVtcztcbiAgICAgICAgdGhpcy5hdHRyUmVwZWF0V2Vla2RheXMgPSByb3NBdXRvU25hcHNob3RQb2xpY3kuYXR0clJlcGVhdFdlZWtkYXlzO1xuICAgICAgICB0aGlzLmF0dHJSZXNvdXJjZUdyb3VwSWQgPSByb3NBdXRvU25hcHNob3RQb2xpY3kuYXR0clJlc291cmNlR3JvdXBJZDtcbiAgICAgICAgdGhpcy5hdHRyUmV0ZW50aW9uRGF5cyA9IHJvc0F1dG9TbmFwc2hvdFBvbGljeS5hdHRyUmV0ZW50aW9uRGF5cztcbiAgICAgICAgdGhpcy5hdHRyVGFncyA9IHJvc0F1dG9TbmFwc2hvdFBvbGljeS5hdHRyVGFncztcbiAgICAgICAgdGhpcy5hdHRyVGltZVBvaW50cyA9IHJvc0F1dG9TbmFwc2hvdFBvbGljeS5hdHRyVGltZVBvaW50cztcbiAgICAgICAgdGhpcy5hdHRyVm9sdW1lTnVtcyA9IHJvc0F1dG9TbmFwc2hvdFBvbGljeS5hdHRyVm9sdW1lTnVtcztcbiAgICB9XG59XG4iXX0=