"use strict";
// Generated from the AliCloud ROS Resource Specification
Object.defineProperty(exports, "__esModule", { value: true });
exports.RosInstances = void 0;
const ros = require("@alicloud/ros-cdk-core");
/**
 * Determine whether the given properties match those of a `RosInstancesProps`
 *
 * @param properties - the TypeScript properties of a `RosInstancesProps`
 *
 * @returns the result of the validation.
 */
function RosInstancesPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('status', ros.validateString)(properties.status));
    errors.collect(ros.propertyValidator('instanceName', ros.validateString)(properties.instanceName));
    errors.collect(ros.propertyValidator('ensServiceId', ros.validateString)(properties.ensServiceId));
    errors.collect(ros.propertyValidator('imageId', ros.validateString)(properties.imageId));
    if (properties.instanceIds && (Array.isArray(properties.instanceIds) || (typeof properties.instanceIds) === 'string')) {
        errors.collect(ros.propertyValidator('instanceIds', ros.validateLength)({
            data: properties.instanceIds.length,
            min: undefined,
            max: 100,
        }));
    }
    errors.collect(ros.propertyValidator('instanceIds', ros.listValidator(ros.validateAny))(properties.instanceIds));
    if (properties.ensRegionIds && (Array.isArray(properties.ensRegionIds) || (typeof properties.ensRegionIds) === 'string')) {
        errors.collect(ros.propertyValidator('ensRegionIds', ros.validateLength)({
            data: properties.ensRegionIds.length,
            min: undefined,
            max: 100,
        }));
    }
    errors.collect(ros.propertyValidator('ensRegionIds', ros.listValidator(ros.validateAny))(properties.ensRegionIds));
    errors.collect(ros.propertyValidator('instanceResourceType', ros.validateString)(properties.instanceResourceType));
    if (properties.refreshOptions && (typeof properties.refreshOptions) !== 'object') {
        errors.collect(ros.propertyValidator('refreshOptions', ros.validateAllowedValues)({
            data: properties.refreshOptions,
            allowedValues: ["Always", "Never"],
        }));
    }
    errors.collect(ros.propertyValidator('refreshOptions', ros.validateString)(properties.refreshOptions));
    return errors.wrap('supplied properties not correct for "RosInstancesProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `DATASOURCE::ENS::Instances` resource
 *
 * @param properties - the TypeScript properties of a `RosInstancesProps`
 *
 * @returns the AliCloud ROS Resource properties of an `DATASOURCE::ENS::Instances` resource.
 */
// @ts-ignore TS6133
function rosInstancesPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosInstancesPropsValidator(properties).assertSuccess();
    }
    return {
        'EnsRegionIds': ros.listMapper(ros.objectToRosTemplate)(properties.ensRegionIds),
        'EnsServiceId': ros.stringToRosTemplate(properties.ensServiceId),
        'ImageId': ros.stringToRosTemplate(properties.imageId),
        'InstanceIds': ros.listMapper(ros.objectToRosTemplate)(properties.instanceIds),
        'InstanceName': ros.stringToRosTemplate(properties.instanceName),
        'InstanceResourceType': ros.stringToRosTemplate(properties.instanceResourceType),
        'RefreshOptions': ros.stringToRosTemplate(properties.refreshOptions),
        'Status': ros.stringToRosTemplate(properties.status),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `DATASOURCE::ENS::Instances`, which is used to query the details of Edge Node Service (ENS) instances.
 * @Note This class does not contain additional functions, so it is recommended to use the `Instances` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/datasource-ens-instances
 */
class RosInstances extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosInstances.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrInstanceIds = this.getAtt('InstanceIds');
        this.attrInstances = this.getAtt('Instances');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.ensRegionIds = props.ensRegionIds;
        this.ensServiceId = props.ensServiceId;
        this.imageId = props.imageId;
        this.instanceIds = props.instanceIds;
        this.instanceName = props.instanceName;
        this.instanceResourceType = props.instanceResourceType;
        this.refreshOptions = props.refreshOptions;
        this.status = props.status;
    }
    get rosProperties() {
        return {
            ensRegionIds: this.ensRegionIds,
            ensServiceId: this.ensServiceId,
            imageId: this.imageId,
            instanceIds: this.instanceIds,
            instanceName: this.instanceName,
            instanceResourceType: this.instanceResourceType,
            refreshOptions: this.refreshOptions,
            status: this.status,
        };
    }
    renderProperties(props) {
        return rosInstancesPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosInstances = RosInstances;
/**
 * The resource type name for this resource class.
 */
RosInstances.ROS_RESOURCE_TYPE_NAME = "DATASOURCE::ENS::Instances";
//# sourceMappingURL=data:application/json;base64,