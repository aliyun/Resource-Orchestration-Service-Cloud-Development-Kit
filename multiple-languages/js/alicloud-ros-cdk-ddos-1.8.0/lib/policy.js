"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Policy = exports.PolicyProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ddos_generated_1 = require("./ddos.generated");
Object.defineProperty(exports, "PolicyProperty", { enumerable: true, get: function () { return ddos_generated_1.RosPolicy; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::DDoS::Policy`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosPolicy`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-ddos-policy
 */
class Policy extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosPolicy = new ddos_generated_1.RosPolicy(this, id, {
            whiteIpList: props.whiteIpList,
            type: props.type,
            actionType: props.actionType,
            content: props.content,
            policyName: props.policyName,
            blackIpList: props.blackIpList,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosPolicy;
        this.attrContent = rosPolicy.attrContent;
        this.attrPolicyId = rosPolicy.attrPolicyId;
        this.attrPolicyName = rosPolicy.attrPolicyName;
        this.attrType = rosPolicy.attrType;
    }
}
exports.Policy = Policy;
//# sourceMappingURL=data:application/json;base64,