"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Gateway = exports.GatewayProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const apig_generated_1 = require("./apig.generated");
Object.defineProperty(exports, "GatewayProperty", { enumerable: true, get: function () { return apig_generated_1.RosGateway; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::APIG::Gateway`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosGateway`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-apig-gateway
 */
class Gateway extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosGateway = new apig_generated_1.RosGateway(this, id, {
            networkAccessConfig: props.networkAccessConfig,
            vSwitch: props.vSwitch,
            zoneConfig: props.zoneConfig,
            vpc: props.vpc,
            paymentType: props.paymentType,
            gatewayName: props.gatewayName,
            spec: props.spec,
            logConfig: props.logConfig,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosGateway;
        this.attrCreateTime = rosGateway.attrCreateTime;
        this.attrEnvironments = rosGateway.attrEnvironments;
        this.attrExpireTime = rosGateway.attrExpireTime;
        this.attrGatewayId = rosGateway.attrGatewayId;
        this.attrGatewayName = rosGateway.attrGatewayName;
        this.attrLoadBalancers = rosGateway.attrLoadBalancers;
        this.attrPaymentType = rosGateway.attrPaymentType;
        this.attrSecurityGroup = rosGateway.attrSecurityGroup;
        this.attrSpec = rosGateway.attrSpec;
        this.attrUpdateTime = rosGateway.attrUpdateTime;
        this.attrVSwitch = rosGateway.attrVSwitch;
        this.attrVersion = rosGateway.attrVersion;
        this.attrVpc = rosGateway.attrVpc;
        this.attrZones = rosGateway.attrZones;
    }
}
exports.Gateway = Gateway;
//# sourceMappingURL=data:application/json;base64,