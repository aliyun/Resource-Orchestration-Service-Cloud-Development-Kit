"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiAttachment = exports.ApiAttachmentProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const apig_generated_1 = require("./apig.generated");
Object.defineProperty(exports, "ApiAttachmentProperty", { enumerable: true, get: function () { return apig_generated_1.RosApiAttachment; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::APIG::ApiAttachment`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosApiAttachment`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-apig-apiattachment
 */
class ApiAttachment extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosApiAttachment = new apig_generated_1.RosApiAttachment(this, id, {
            environmentId: props.environmentId,
            description: props.description,
            backendScene: props.backendScene,
            serviceConfigs: props.serviceConfigs,
            routeId: props.routeId,
            httpApiId: props.httpApiId,
            domainIds: props.domainIds,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosApiAttachment;
        this.attrEnvironmentId = rosApiAttachment.attrEnvironmentId;
        this.attrHttpApiId = rosApiAttachment.attrHttpApiId;
        this.attrRouteId = rosApiAttachment.attrRouteId;
    }
}
exports.ApiAttachment = ApiAttachment;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpYXR0YWNobWVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImFwaWF0dGFjaG1lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsOENBQThDO0FBQzlDLHFEQUFvRDtBQUV2QixzR0FGcEIsaUNBQWdCLE9BRXlCO0FBNENsRDs7OztHQUlHO0FBQ0gsTUFBYSxhQUFjLFNBQVEsR0FBRyxDQUFDLFFBQVE7SUFxQjNDOzs7O09BSUc7SUFDSCxZQUFZLEtBQW9CLEVBQUUsRUFBVSxFQUFFLEtBQXlCLEVBQUUsbUNBQTJDLElBQUk7UUFDcEgsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNqQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUNiLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxnQ0FBZ0MsR0FBRyxnQ0FBZ0MsQ0FBQztRQUV6RSxNQUFNLGdCQUFnQixHQUFHLElBQUksaUNBQWdCLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRztZQUNyRCxhQUFhLEVBQUUsS0FBSyxDQUFDLGFBQWE7WUFDbEMsV0FBVyxFQUFFLEtBQUssQ0FBQyxXQUFXO1lBQzlCLFlBQVksRUFBRSxLQUFLLENBQUMsWUFBWTtZQUNoQyxjQUFjLEVBQUUsS0FBSyxDQUFDLGNBQWM7WUFDcEMsT0FBTyxFQUFFLEtBQUssQ0FBQyxPQUFPO1lBQ3RCLFNBQVMsRUFBRSxLQUFLLENBQUMsU0FBUztZQUMxQixTQUFTLEVBQUUsS0FBSyxDQUFDLFNBQVM7U0FDN0IsRUFBRSxnQ0FBZ0MsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7UUFDcEYsSUFBSSxDQUFDLFFBQVEsR0FBRyxnQkFBZ0IsQ0FBQztRQUNqQyxJQUFJLENBQUMsaUJBQWlCLEdBQUcsZ0JBQWdCLENBQUMsaUJBQWlCLENBQUM7UUFDNUQsSUFBSSxDQUFDLGFBQWEsR0FBRyxnQkFBZ0IsQ0FBQyxhQUFhLENBQUM7UUFDcEQsSUFBSSxDQUFDLFdBQVcsR0FBRyxnQkFBZ0IsQ0FBQyxXQUFXLENBQUM7SUFDcEQsQ0FBQztDQUNKO0FBL0NELHNDQStDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHJvcyBmcm9tICdAYWxpY2xvdWQvcm9zLWNkay1jb3JlJztcbmltcG9ydCB7IFJvc0FwaUF0dGFjaG1lbnQgfSBmcm9tICcuL2FwaWcuZ2VuZXJhdGVkJztcbi8vIEdlbmVyYXRlZCBmcm9tIHRoZSBBbGlDbG91ZCBST1MgUmVzb3VyY2UgU3BlY2lmaWNhdGlvblxuZXhwb3J0IHsgUm9zQXBpQXR0YWNobWVudCBhcyBBcGlBdHRhY2htZW50UHJvcGVydHkgfTtcblxuLyoqXG4gKiBQcm9wZXJ0aWVzIGZvciBkZWZpbmluZyBhIGBBcGlBdHRhY2htZW50YC5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvYWxpeXVuLWFwaWctYXBpYXR0YWNobWVudFxuICovXG5leHBvcnQgaW50ZXJmYWNlIEFwaUF0dGFjaG1lbnRQcm9wcyB7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBiYWNrZW5kU2NlbmU6IEFQSSByZWxlYXNlIHNjZW5hcmlvLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGJhY2tlbmRTY2VuZTogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgZW52aXJvbm1lbnRJZDogVGhlIElEIG9mIHRoZSBlbnZpcm9ubWVudCB0byB3aGljaCB0aGUgQVBJIGlzIHRvIGRlcGxveS5cbiAgICAgKi9cbiAgICByZWFkb25seSBlbnZpcm9ubWVudElkOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBodHRwQXBpSWQ6IFRoZSBJRCBvZiB0aGUgSFRUUCBBUEkuXG4gICAgICovXG4gICAgcmVhZG9ubHkgaHR0cEFwaUlkOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBzZXJ2aWNlQ29uZmlnczogU2VydmljZXMgYXNzb2NpYXRlZCB3aXRoIEFQSSBwdWJsaXNoaW5nIGFuZCB0aGVpciBjb25maWd1cmF0aW9ucy5cbiAgICAgKi9cbiAgICByZWFkb25seSBzZXJ2aWNlQ29uZmlnczogQXJyYXk8Um9zQXBpQXR0YWNobWVudC5TZXJ2aWNlQ29uZmlnc1Byb3BlcnR5IHwgcm9zLklSZXNvbHZhYmxlPiB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGRlc2NyaXB0aW9uOiBUaGUgZGVzY3JpcHRpb24gb2YgcHVibGljYXRpb24uXG4gICAgICovXG4gICAgcmVhZG9ubHkgZGVzY3JpcHRpb24/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBkb21haW5JZHM6IFRoZSBsaXN0IG9mIHVzZXIgZG9tYWluIG5hbWVzIGFzc29jaWF0ZWQgd2l0aCBBUEkgcHVibGlzaGluZy5cbiAgICAgKi9cbiAgICByZWFkb25seSBkb21haW5JZHM/OiBBcnJheTxzdHJpbmcgfCByb3MuSVJlc29sdmFibGU+IHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgcm91dGVJZDogVGhlIHJvdXRlIElELiBXaGVuIHB1Ymxpc2hpbmcgYW4gSFRUUCBBUEkgcm91dGUsIGl0IG11c3QgYmUgcGFzc2VkIGluLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHJvdXRlSWQ/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG59XG5cbi8qKlxuICogVGhpcyBjbGFzcyBlbmNhcHN1bGF0ZXMgYW5kIGV4dGVuZHMgdGhlIFJPUyByZXNvdXJjZSB0eXBlIGBBTElZVU46OkFQSUc6OkFwaUF0dGFjaG1lbnRgLlxuICogQE5vdGUgVGhpcyBjbGFzcyBtYXkgaGF2ZSBzb21lIG5ldyBmdW5jdGlvbnMgdG8gZmFjaWxpdGF0ZSBkZXZlbG9wbWVudCwgc28gaXQgaXMgcmVjb21tZW5kZWQgdG8gdXNlIHRoaXMgY2xhc3MgaW5zdGVhZCBvZiBgUm9zQXBpQXR0YWNobWVudGBmb3IgYSBtb3JlIGNvbnZlbmllbnQgZGV2ZWxvcG1lbnQgZXhwZXJpZW5jZS5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvYWxpeXVuLWFwaWctYXBpYXR0YWNobWVudFxuICovXG5leHBvcnQgY2xhc3MgQXBpQXR0YWNobWVudCBleHRlbmRzIHJvcy5SZXNvdXJjZSB7XG4gICAgcHJvdGVjdGVkIHNjb3BlOiByb3MuQ29uc3RydWN0O1xuICAgIHByb3RlY3RlZCBpZDogc3RyaW5nO1xuICAgIHByb3RlY3RlZCBwcm9wczogQXBpQXR0YWNobWVudFByb3BzO1xuICAgIHByb3RlY3RlZCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBFbnZpcm9ubWVudElkOiBUaGUgSUQgb2YgdGhlIGVudmlyb25tZW50IHRvIHdoaWNoIHRoZSBBUEkgaXMgdG8gZGVwbG95LlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyRW52aXJvbm1lbnRJZDogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIEh0dHBBcGlJZDogVGhlIElEIG9mIHRoZSBIVFRQIEFQSS5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckh0dHBBcGlJZDogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIFJvdXRlSWQ6IFRoZSByb3V0ZSBJRC4gV2hlbiBwdWJsaXNoaW5nIGFuIEhUVFAgQVBJIHJvdXRlLCBpdCBtdXN0IGJlIHBhc3NlZCBpbi5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0clJvdXRlSWQ6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFBhcmFtIHNjb3BlIC0gc2NvcGUgaW4gd2hpY2ggdGhpcyByZXNvdXJjZSBpcyBkZWZpbmVkXG4gICAgICogUGFyYW0gaWQgICAgLSBzY29wZWQgaWQgb2YgdGhlIHJlc291cmNlXG4gICAgICogUGFyYW0gcHJvcHMgLSByZXNvdXJjZSBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IHJvcy5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBBcGlBdHRhY2htZW50UHJvcHMsIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OmJvb2xlYW4gPSB0cnVlKSB7XG4gICAgICAgIHN1cGVyKHNjb3BlLCBpZCk7XG4gICAgICAgIHRoaXMuc2NvcGUgPSBzY29wZTtcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xuICAgICAgICB0aGlzLnByb3BzID0gcHJvcHM7XG4gICAgICAgIHRoaXMuZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgPSBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDtcblxuICAgICAgICBjb25zdCByb3NBcGlBdHRhY2htZW50ID0gbmV3IFJvc0FwaUF0dGFjaG1lbnQodGhpcywgaWQsICB7XG4gICAgICAgICAgICBlbnZpcm9ubWVudElkOiBwcm9wcy5lbnZpcm9ubWVudElkLFxuICAgICAgICAgICAgZGVzY3JpcHRpb246IHByb3BzLmRlc2NyaXB0aW9uLFxuICAgICAgICAgICAgYmFja2VuZFNjZW5lOiBwcm9wcy5iYWNrZW5kU2NlbmUsXG4gICAgICAgICAgICBzZXJ2aWNlQ29uZmlnczogcHJvcHMuc2VydmljZUNvbmZpZ3MsXG4gICAgICAgICAgICByb3V0ZUlkOiBwcm9wcy5yb3V0ZUlkLFxuICAgICAgICAgICAgaHR0cEFwaUlkOiBwcm9wcy5odHRwQXBpSWQsXG4gICAgICAgICAgICBkb21haW5JZHM6IHByb3BzLmRvbWFpbklkcyxcbiAgICAgICAgfSwgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgJiYgdGhpcy5zdGFjay5lbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCk7XG4gICAgICAgIHRoaXMucmVzb3VyY2UgPSByb3NBcGlBdHRhY2htZW50O1xuICAgICAgICB0aGlzLmF0dHJFbnZpcm9ubWVudElkID0gcm9zQXBpQXR0YWNobWVudC5hdHRyRW52aXJvbm1lbnRJZDtcbiAgICAgICAgdGhpcy5hdHRySHR0cEFwaUlkID0gcm9zQXBpQXR0YWNobWVudC5hdHRySHR0cEFwaUlkO1xuICAgICAgICB0aGlzLmF0dHJSb3V0ZUlkID0gcm9zQXBpQXR0YWNobWVudC5hdHRyUm91dGVJZDtcbiAgICB9XG59XG4iXX0=