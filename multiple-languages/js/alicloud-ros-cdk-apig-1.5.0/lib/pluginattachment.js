"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PluginAttachment = exports.PluginAttachmentProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const apig_generated_1 = require("./apig.generated");
Object.defineProperty(exports, "PluginAttachmentProperty", { enumerable: true, get: function () { return apig_generated_1.RosPluginAttachment; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::APIG::PluginAttachment`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosPluginAttachment`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-apig-pluginattachment
 */
class PluginAttachment extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosPluginAttachment = new apig_generated_1.RosPluginAttachment(this, id, {
            attachResourceIds: props.attachResourceIds,
            environmentId: props.environmentId,
            enable: props.enable,
            pluginInfo: props.pluginInfo,
            attachResourceId: props.attachResourceId,
            attachResourceType: props.attachResourceType,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosPluginAttachment;
        this.attrAttachResourceId = rosPluginAttachment.attrAttachResourceId;
        this.attrAttachResourceIds = rosPluginAttachment.attrAttachResourceIds;
        this.attrAttachResourceNames = rosPluginAttachment.attrAttachResourceNames;
        this.attrAttachResourceParentIds = rosPluginAttachment.attrAttachResourceParentIds;
        this.attrAttachResourceType = rosPluginAttachment.attrAttachResourceType;
        this.attrEnable = rosPluginAttachment.attrEnable;
        this.attrEnvironmentId = rosPluginAttachment.attrEnvironmentId;
        this.attrPluginAttachmentId = rosPluginAttachment.attrPluginAttachmentId;
        this.attrPluginClassInfo = rosPluginAttachment.attrPluginClassInfo;
        this.attrPluginInfo = rosPluginAttachment.attrPluginInfo;
    }
}
exports.PluginAttachment = PluginAttachment;
//# sourceMappingURL=data:application/json;base64,