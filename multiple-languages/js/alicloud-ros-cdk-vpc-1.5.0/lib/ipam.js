"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Ipam = exports.IpamProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const vpc_generated_1 = require("./vpc.generated");
Object.defineProperty(exports, "IpamProperty", { enumerable: true, get: function () { return vpc_generated_1.RosIpam; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::VPC::Ipam`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosIpam`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-vpc-ipam
 */
class Ipam extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosIpam = new vpc_generated_1.RosIpam(this, id, {
            operatingRegionList: props.operatingRegionList,
            resourceGroupId: props.resourceGroupId,
            ipamName: props.ipamName,
            ipamDescription: props.ipamDescription,
            tags: props.tags,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosIpam;
        this.attrCreateTime = rosIpam.attrCreateTime;
        this.attrDefaultResourceDiscoveryAssociationId = rosIpam.attrDefaultResourceDiscoveryAssociationId;
        this.attrDefaultResourceDiscoveryId = rosIpam.attrDefaultResourceDiscoveryId;
        this.attrIpamDescription = rosIpam.attrIpamDescription;
        this.attrIpamId = rosIpam.attrIpamId;
        this.attrIpamName = rosIpam.attrIpamName;
        this.attrOperatingRegionList = rosIpam.attrOperatingRegionList;
        this.attrPrivateDefaultScopeId = rosIpam.attrPrivateDefaultScopeId;
        this.attrPublicDefaultScopeId = rosIpam.attrPublicDefaultScopeId;
        this.attrResourceDiscoveryAssociationCount = rosIpam.attrResourceDiscoveryAssociationCount;
        this.attrResourceGroupId = rosIpam.attrResourceGroupId;
        this.attrTags = rosIpam.attrTags;
    }
}
exports.Ipam = Ipam;
//# sourceMappingURL=data:application/json;base64,