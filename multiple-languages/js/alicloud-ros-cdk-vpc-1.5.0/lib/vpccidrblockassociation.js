"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VpcCidrBlockAssociation = exports.VpcCidrBlockAssociationProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const vpc_generated_1 = require("./vpc.generated");
Object.defineProperty(exports, "VpcCidrBlockAssociationProperty", { enumerable: true, get: function () { return vpc_generated_1.RosVpcCidrBlockAssociation; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::VPC::VpcCidrBlockAssociation`, which is used to add a secondary CIDR block to a virtual private cloud (VPC).
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosVpcCidrBlockAssociation`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-vpc-vpccidrblockassociation
 */
class VpcCidrBlockAssociation extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosVpcCidrBlockAssociation = new vpc_generated_1.RosVpcCidrBlockAssociation(this, id, {
            ipv6Isp: props.ipv6Isp,
            secondaryCidrMask: props.secondaryCidrMask,
            secondaryCidrBlock: props.secondaryCidrBlock,
            vpcId: props.vpcId,
            ipVersion: props.ipVersion,
            ipamPoolId: props.ipamPoolId,
            iPv6CidrBlock: props.iPv6CidrBlock,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosVpcCidrBlockAssociation;
        this.attrVpcId = rosVpcCidrBlockAssociation.attrVpcId;
    }
}
exports.VpcCidrBlockAssociation = VpcCidrBlockAssociation;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidnBjY2lkcmJsb2NrYXNzb2NpYXRpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ2cGNjaWRyYmxvY2thc3NvY2lhdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw4Q0FBOEM7QUFDOUMsbURBQTZEO0FBRXRCLGdIQUY5QiwwQ0FBMEIsT0FFbUM7QUEyRHRFOzs7O0dBSUc7QUFDSCxNQUFhLHVCQUF3QixTQUFRLEdBQUcsQ0FBQyxRQUFRO0lBV3JEOzs7O09BSUc7SUFDSCxZQUFZLEtBQW9CLEVBQUUsRUFBVSxFQUFFLEtBQW1DLEVBQUUsbUNBQTJDLElBQUk7UUFDOUgsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNqQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUNiLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxnQ0FBZ0MsR0FBRyxnQ0FBZ0MsQ0FBQztRQUV6RSxNQUFNLDBCQUEwQixHQUFHLElBQUksMENBQTBCLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRztZQUN6RSxPQUFPLEVBQUUsS0FBSyxDQUFDLE9BQU87WUFDdEIsaUJBQWlCLEVBQUUsS0FBSyxDQUFDLGlCQUFpQjtZQUMxQyxrQkFBa0IsRUFBRSxLQUFLLENBQUMsa0JBQWtCO1lBQzVDLEtBQUssRUFBRSxLQUFLLENBQUMsS0FBSztZQUNsQixTQUFTLEVBQUUsS0FBSyxDQUFDLFNBQVM7WUFDMUIsVUFBVSxFQUFFLEtBQUssQ0FBQyxVQUFVO1lBQzVCLGFBQWEsRUFBRSxLQUFLLENBQUMsYUFBYTtTQUNyQyxFQUFFLGdDQUFnQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztRQUNwRixJQUFJLENBQUMsUUFBUSxHQUFHLDBCQUEwQixDQUFDO1FBQzNDLElBQUksQ0FBQyxTQUFTLEdBQUcsMEJBQTBCLENBQUMsU0FBUyxDQUFDO0lBQzFELENBQUM7Q0FDSjtBQW5DRCwwREFtQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyByb3MgZnJvbSAnQGFsaWNsb3VkL3Jvcy1jZGstY29yZSc7XG5pbXBvcnQgeyBSb3NWcGNDaWRyQmxvY2tBc3NvY2lhdGlvbiB9IGZyb20gJy4vdnBjLmdlbmVyYXRlZCc7XG4vLyBHZW5lcmF0ZWQgZnJvbSB0aGUgQWxpQ2xvdWQgUk9TIFJlc291cmNlIFNwZWNpZmljYXRpb25cbmV4cG9ydCB7IFJvc1ZwY0NpZHJCbG9ja0Fzc29jaWF0aW9uIGFzIFZwY0NpZHJCbG9ja0Fzc29jaWF0aW9uUHJvcGVydHkgfTtcblxuLyoqXG4gKiBQcm9wZXJ0aWVzIGZvciBkZWZpbmluZyBhIGBWcGNDaWRyQmxvY2tBc3NvY2lhdGlvbmAuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2FsaXl1bi12cGMtdnBjY2lkcmJsb2NrYXNzb2NpYXRpb25cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBWcGNDaWRyQmxvY2tBc3NvY2lhdGlvblByb3BzIHtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHZwY0lkOiBUaGUgSUQgb2YgdGhlIFZQQyB0byB3aGljaCB5b3Ugd2FudCB0byBhZGQgYSBzZWNvbmRhcnkgQ0lEUiBibG9jay5cbiAgICAgKi9cbiAgICByZWFkb25seSB2cGNJZDogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgaXBhbVBvb2xJZDogVGhlIElEIG9mIHRoZSBJUCBBZGRyZXNzIE1hbmFnZXIgKElQQU0pIHBvb2wgdGhhdCBjb250YWlucyBJUHY0IGFkZHJlc3Nlcy5cbiAgICAgKi9cbiAgICByZWFkb25seSBpcGFtUG9vbElkPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgaVB2NkNpZHJCbG9jazogVGhlIElQdjYgQ0lEUiBibG9jayB0byBiZSBhZGRlZC5cbiAgICAgKiBOb3RlIFlvdSBtdXN0IGFuZCBjYW4gc3BlY2lmeSBvbmx5IG9uZSBvZiBTZWNvbmRhcnlDaWRyQmxvY2sgYW5kIElwdjZDaWRyQmxvY2suXG4gICAgICovXG4gICAgcmVhZG9ubHkgaVB2NkNpZHJCbG9jaz86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGlwdjZJc3A6IFRoZSB0eXBlIG9mIHRoZSBJUHY2IENJRFIgYmxvY2suIFZhbGlkIHZhbHVlczpcbiAgICAgKiBCR1AgKGRlZmF1bHQpXG4gICAgICogQ2hpbmFNb2JpbGVcbiAgICAgKiBDaGluYVVuaWNvbVxuICAgICAqIENoaW5hVGVsZWNvbVxuICAgICAqIE5vdGUgSWYgeW91ciBBbGliYWJhIENsb3VkIGFjY291bnQgaXMgYWxsb3dlZCB0byBhY3RpdmF0ZSBzaW5nbGUtSVNQIGJhbmR3aWR0aCwgeW91IGNhbiBzZXQgdGhpcyBwYXJhbWV0ZXIgdG8gQ2hpbmFUZWxlY29tLCBDaGluYVVuaWNvbSwgb3IgQ2hpbmFNb2JpbGUuXG4gICAgICovXG4gICAgcmVhZG9ubHkgaXB2NklzcD86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGlwVmVyc2lvbjogVGhlIHZlcnNpb24gb2YgdGhlIElQIGFkZHJlc3MuIFZhbGlkIHZhbHVlczpcbiAgICAgKiBJUFY0OiB0aGUgSVB2NCBhZGRyZXNzLlxuICAgICAqIElQVjY6IHRoZSBJUHY2IGFkZHJlc3MuIElmIHlvdSBzZXQgSXBWZXJzaW9uIHRvIElQVjYgYW5kIGRvIG5vdCBzcGVjaWZ5IFNlY29uZGFyeUNpZHJCbG9jaywgeW91IGNhbiBhZGQgYSBzZWNvbmRhcnkgSVB2NiBDSURSIGJsb2NrIHRvIHRoZSBWUEMuXG4gICAgICovXG4gICAgcmVhZG9ubHkgaXBWZXJzaW9uPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgc2Vjb25kYXJ5Q2lkckJsb2NrOiBUaGUgSVB2NCBDSURSIGJsb2NrIHRvIGJlIGFkZGVkLiBUYWtlIG5vdGUgb2YgdGhlIGZvbGxvd2luZyByZXF1aXJlbWVudHM6XG4gICAgICogWW91IGNhbiBzcGVjaWZ5IG9uZSBvZiB0aGUgZm9sbG93aW5nIHN0YW5kYXJkIElQdjQgQ0lEUiBibG9ja3Mgb3IgdGhlaXIgc3VibmV0cyBhcyB0aGUgc2Vjb25kYXJ5IElQdjQgQ0lEUiBibG9jayBvZiB0aGUgVlBDOiAxOTIuMTY4LjAuMFxcLzE2LCAxNzIuMTYuMC4wXFwvMTIsIGFuZCAxMC4wLjAuMFxcLzguXG4gICAgICogWW91IGNhbiBhbHNvIHVzZSBhIGN1c3RvbSBDSURSIGJsb2NrIG90aGVyIHRoYW4gMTAwLjY0LjAuMFxcLzEwLCAyMjQuMC4wLjBcXC80LCAxMjcuMC4wLjBcXC84LCAxNjkuMjU0LjAuMFxcLzE2LCBvciB0aGVpciBzdWJuZXRzIGFzIHRoZSBzZWNvbmRhcnkgSVB2NCBDSURSIGJsb2NrIG9mIHRoZSBWUEMuXG4gICAgICogVGhlIENJRFIgYmxvY2sgbXVzdCBtZWV0IHRoZSBmb2xsb3dpbmcgcmVxdWlyZW1lbnRzOlxuICAgICAqIFRoZSBDSURSIGJsb2NrIGNhbm5vdCBzdGFydCB3aXRoIDAuIFRoZSBzdWJuZXQgbWFzayBtdXN0IGJlIDggdG8gMjggYml0cyBpbiBsZW5ndGguXG4gICAgICogVGhlIENJRFIgYmxvY2sgY2Fubm90IG92ZXJsYXAgd2l0aCB0aGUgcHJpbWFyeSBDSURSIGJsb2NrIG9yIGFuIGV4aXN0aW5nIHNlY29uZGFyeSBDSURSIGJsb2NrIG9mIHRoZSBWUEMuXG4gICAgICogTm90ZSBZb3UgbXVzdCBhbmQgY2FuIHNwZWNpZnkgb25seSBvbmUgb2YgU2Vjb25kYXJ5Q2lkckJsb2NrIGFuZCBJcHY2Q2lkckJsb2NrLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHNlY29uZGFyeUNpZHJCbG9jaz86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHNlY29uZGFyeUNpZHJNYXNrOiBBZGQgYW4gYWRkaXRpb25hbCBuZXR3b3JrIHNlZ21lbnQgdG8gdGhlIFZQQyBmcm9tIHRoZSBpUGFtIGFkZHJlc3MgcG9vbCBieSBlbnRlcmluZyBhIG1hc2suXG4gICAgICogRXhwbGFpbiB0aGF0IHRoZSBkZXNpZ25hdGVkIGlQYW0gYWRkcmVzcyBwb29sIGFkZHMgYWRkaXRpb25hbCBuZXR3b3JrIHNlZ21lbnRzIHRvIFZQQywgYW5kIHRoZSBwYXJhbWV0ZXIgU2Vjb25kYXJ5Q2lkcmJsb2NrIG9yIFNlY29uZGFyeUNpZHJtYXNrIGlucHV0cyBhdCBsZWFzdCBvbmUuXG4gICAgICovXG4gICAgcmVhZG9ubHkgc2Vjb25kYXJ5Q2lkck1hc2s/OiBudW1iZXIgfCByb3MuSVJlc29sdmFibGU7XG59XG5cbi8qKlxuICogVGhpcyBjbGFzcyBlbmNhcHN1bGF0ZXMgYW5kIGV4dGVuZHMgdGhlIFJPUyByZXNvdXJjZSB0eXBlIGBBTElZVU46OlZQQzo6VnBjQ2lkckJsb2NrQXNzb2NpYXRpb25gLCB3aGljaCBpcyB1c2VkIHRvIGFkZCBhIHNlY29uZGFyeSBDSURSIGJsb2NrIHRvIGEgdmlydHVhbCBwcml2YXRlIGNsb3VkIChWUEMpLlxuICogQE5vdGUgVGhpcyBjbGFzcyBtYXkgaGF2ZSBzb21lIG5ldyBmdW5jdGlvbnMgdG8gZmFjaWxpdGF0ZSBkZXZlbG9wbWVudCwgc28gaXQgaXMgcmVjb21tZW5kZWQgdG8gdXNlIHRoaXMgY2xhc3MgaW5zdGVhZCBvZiBgUm9zVnBjQ2lkckJsb2NrQXNzb2NpYXRpb25gZm9yIGEgbW9yZSBjb252ZW5pZW50IGRldmVsb3BtZW50IGV4cGVyaWVuY2UuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2FsaXl1bi12cGMtdnBjY2lkcmJsb2NrYXNzb2NpYXRpb25cbiAqL1xuZXhwb3J0IGNsYXNzIFZwY0NpZHJCbG9ja0Fzc29jaWF0aW9uIGV4dGVuZHMgcm9zLlJlc291cmNlIHtcbiAgICBwcm90ZWN0ZWQgc2NvcGU6IHJvcy5Db25zdHJ1Y3Q7XG4gICAgcHJvdGVjdGVkIGlkOiBzdHJpbmc7XG4gICAgcHJvdGVjdGVkIHByb3BzOiBWcGNDaWRyQmxvY2tBc3NvY2lhdGlvblByb3BzO1xuICAgIHByb3RlY3RlZCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBWcGNJZDogVGhlIElEIG9mIHRoZSBWUEMgdG8gd2hpY2ggeW91IHdhbnQgdG8gYWRkIGEgc2Vjb25kYXJ5IENJRFIgYmxvY2suXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJWcGNJZDogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUGFyYW0gc2NvcGUgLSBzY29wZSBpbiB3aGljaCB0aGlzIHJlc291cmNlIGlzIGRlZmluZWRcbiAgICAgKiBQYXJhbSBpZCAgICAtIHNjb3BlZCBpZCBvZiB0aGUgcmVzb3VyY2VcbiAgICAgKiBQYXJhbSBwcm9wcyAtIHJlc291cmNlIHByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihzY29wZTogcm9zLkNvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IFZwY0NpZHJCbG9ja0Fzc29jaWF0aW9uUHJvcHMsIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OmJvb2xlYW4gPSB0cnVlKSB7XG4gICAgICAgIHN1cGVyKHNjb3BlLCBpZCk7XG4gICAgICAgIHRoaXMuc2NvcGUgPSBzY29wZTtcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xuICAgICAgICB0aGlzLnByb3BzID0gcHJvcHM7XG4gICAgICAgIHRoaXMuZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgPSBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDtcblxuICAgICAgICBjb25zdCByb3NWcGNDaWRyQmxvY2tBc3NvY2lhdGlvbiA9IG5ldyBSb3NWcGNDaWRyQmxvY2tBc3NvY2lhdGlvbih0aGlzLCBpZCwgIHtcbiAgICAgICAgICAgIGlwdjZJc3A6IHByb3BzLmlwdjZJc3AsXG4gICAgICAgICAgICBzZWNvbmRhcnlDaWRyTWFzazogcHJvcHMuc2Vjb25kYXJ5Q2lkck1hc2ssXG4gICAgICAgICAgICBzZWNvbmRhcnlDaWRyQmxvY2s6IHByb3BzLnNlY29uZGFyeUNpZHJCbG9jayxcbiAgICAgICAgICAgIHZwY0lkOiBwcm9wcy52cGNJZCxcbiAgICAgICAgICAgIGlwVmVyc2lvbjogcHJvcHMuaXBWZXJzaW9uLFxuICAgICAgICAgICAgaXBhbVBvb2xJZDogcHJvcHMuaXBhbVBvb2xJZCxcbiAgICAgICAgICAgIGlQdjZDaWRyQmxvY2s6IHByb3BzLmlQdjZDaWRyQmxvY2ssXG4gICAgICAgIH0sIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ICYmIHRoaXMuc3RhY2suZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQpO1xuICAgICAgICB0aGlzLnJlc291cmNlID0gcm9zVnBjQ2lkckJsb2NrQXNzb2NpYXRpb247XG4gICAgICAgIHRoaXMuYXR0clZwY0lkID0gcm9zVnBjQ2lkckJsb2NrQXNzb2NpYXRpb24uYXR0clZwY0lkO1xuICAgIH1cbn1cbiJdfQ==