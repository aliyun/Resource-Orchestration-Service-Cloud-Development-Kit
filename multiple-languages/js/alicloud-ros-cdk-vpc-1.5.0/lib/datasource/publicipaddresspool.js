"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PublicIpAddressPool = exports.PublicIpAddressPoolProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const vpc_generated_1 = require("./vpc.generated");
Object.defineProperty(exports, "PublicIpAddressPoolProperty", { enumerable: true, get: function () { return vpc_generated_1.RosPublicIpAddressPool; } });
/**
 * This class encapsulates and extends the ROS resource type `DATASOURCE::VPC::PublicIpAddressPool`, which is used to query the basic information about an available IP address pool.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosPublicIpAddressPool`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/datasource-vpc-publicipaddresspool
 */
class PublicIpAddressPool extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosPublicIpAddressPool = new vpc_generated_1.RosPublicIpAddressPool(this, id, {
            publicIpAddressPoolId: props.publicIpAddressPoolId,
            refreshOptions: props.refreshOptions === undefined || props.refreshOptions === null ? 'Never' : props.refreshOptions,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosPublicIpAddressPool;
        this.attrCreateTime = rosPublicIpAddressPool.attrCreateTime;
        this.attrDescription = rosPublicIpAddressPool.attrDescription;
        this.attrIpAddressRemaining = rosPublicIpAddressPool.attrIpAddressRemaining;
        this.attrIsp = rosPublicIpAddressPool.attrIsp;
        this.attrPublicIpAddressPoolId = rosPublicIpAddressPool.attrPublicIpAddressPoolId;
        this.attrPublicIpAddressPoolName = rosPublicIpAddressPool.attrPublicIpAddressPoolName;
        this.attrResourceGroupId = rosPublicIpAddressPool.attrResourceGroupId;
        this.attrTags = rosPublicIpAddressPool.attrTags;
        this.attrTotalIpNum = rosPublicIpAddressPool.attrTotalIpNum;
        this.attrUsedIpNum = rosPublicIpAddressPool.attrUsedIpNum;
    }
}
exports.PublicIpAddressPool = PublicIpAddressPool;
//# sourceMappingURL=data:application/json;base64,