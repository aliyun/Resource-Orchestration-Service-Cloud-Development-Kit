"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AnycastEipAddress = exports.AnycastEipAddressProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const vpc_generated_1 = require("./vpc.generated");
Object.defineProperty(exports, "AnycastEipAddressProperty", { enumerable: true, get: function () { return vpc_generated_1.RosAnycastEipAddress; } });
/**
 * This class encapsulates and extends the ROS resource type `DATASOURCE::Eipanycast::AnycastEipAddress`, which is used to query the information about an Anycast elastic IP address (Anycast EIP).
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosAnycastEipAddress`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/datasource-eipanycast-anycasteipaddress
 */
class AnycastEipAddress extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosAnycastEipAddress = new vpc_generated_1.RosAnycastEipAddress(this, id, {
            anycastId: props.anycastId,
            refreshOptions: props.refreshOptions === undefined || props.refreshOptions === null ? 'Never' : props.refreshOptions,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosAnycastEipAddress;
        this.attrAliUid = rosAnycastEipAddress.attrAliUid;
        this.attrAnycastEipAddressName = rosAnycastEipAddress.attrAnycastEipAddressName;
        this.attrAnycastId = rosAnycastEipAddress.attrAnycastId;
        this.attrBandwidth = rosAnycastEipAddress.attrBandwidth;
        this.attrBid = rosAnycastEipAddress.attrBid;
        this.attrCreateTime = rosAnycastEipAddress.attrCreateTime;
        this.attrInternetChargeType = rosAnycastEipAddress.attrInternetChargeType;
        this.attrIpAddress = rosAnycastEipAddress.attrIpAddress;
        this.attrPaymentType = rosAnycastEipAddress.attrPaymentType;
        this.attrServiceLocation = rosAnycastEipAddress.attrServiceLocation;
        this.attrStatus = rosAnycastEipAddress.attrStatus;
        this.attrTags = rosAnycastEipAddress.attrTags;
    }
}
exports.AnycastEipAddress = AnycastEipAddress;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW55Y2FzdGVpcGFkZHJlc3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJhbnljYXN0ZWlwYWRkcmVzcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw4Q0FBOEM7QUFDOUMsbURBQXVEO0FBRXRCLDBHQUZ4QixvQ0FBb0IsT0FFNkI7QUFzQjFEOzs7O0dBSUc7QUFDSCxNQUFhLGlCQUFrQixTQUFRLEdBQUcsQ0FBQyxRQUFRO0lBeUUvQzs7OztPQUlHO0lBQ0gsWUFBWSxLQUFvQixFQUFFLEVBQVUsRUFBRSxLQUE2QixFQUFFLG1DQUEyQyxJQUFJO1FBQ3hILEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDakIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUM7UUFDYixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsZ0NBQWdDLEdBQUcsZ0NBQWdDLENBQUM7UUFFekUsTUFBTSxvQkFBb0IsR0FBRyxJQUFJLG9DQUFvQixDQUFDLElBQUksRUFBRSxFQUFFLEVBQUc7WUFDN0QsU0FBUyxFQUFFLEtBQUssQ0FBQyxTQUFTO1lBQzFCLGNBQWMsRUFBRSxLQUFLLENBQUMsY0FBYyxLQUFLLFNBQVMsSUFBSSxLQUFLLENBQUMsY0FBYyxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsY0FBYztTQUN2SCxFQUFFLGdDQUFnQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztRQUNwRixJQUFJLENBQUMsUUFBUSxHQUFHLG9CQUFvQixDQUFDO1FBQ3JDLElBQUksQ0FBQyxVQUFVLEdBQUcsb0JBQW9CLENBQUMsVUFBVSxDQUFDO1FBQ2xELElBQUksQ0FBQyx5QkFBeUIsR0FBRyxvQkFBb0IsQ0FBQyx5QkFBeUIsQ0FBQztRQUNoRixJQUFJLENBQUMsYUFBYSxHQUFHLG9CQUFvQixDQUFDLGFBQWEsQ0FBQztRQUN4RCxJQUFJLENBQUMsYUFBYSxHQUFHLG9CQUFvQixDQUFDLGFBQWEsQ0FBQztRQUN4RCxJQUFJLENBQUMsT0FBTyxHQUFHLG9CQUFvQixDQUFDLE9BQU8sQ0FBQztRQUM1QyxJQUFJLENBQUMsY0FBYyxHQUFHLG9CQUFvQixDQUFDLGNBQWMsQ0FBQztRQUMxRCxJQUFJLENBQUMsc0JBQXNCLEdBQUcsb0JBQW9CLENBQUMsc0JBQXNCLENBQUM7UUFDMUUsSUFBSSxDQUFDLGFBQWEsR0FBRyxvQkFBb0IsQ0FBQyxhQUFhLENBQUM7UUFDeEQsSUFBSSxDQUFDLGVBQWUsR0FBRyxvQkFBb0IsQ0FBQyxlQUFlLENBQUM7UUFDNUQsSUFBSSxDQUFDLG1CQUFtQixHQUFHLG9CQUFvQixDQUFDLG1CQUFtQixDQUFDO1FBQ3BFLElBQUksQ0FBQyxVQUFVLEdBQUcsb0JBQW9CLENBQUMsVUFBVSxDQUFDO1FBQ2xELElBQUksQ0FBQyxRQUFRLEdBQUcsb0JBQW9CLENBQUMsUUFBUSxDQUFDO0lBQ2xELENBQUM7Q0FDSjtBQXZHRCw4Q0F1R0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyByb3MgZnJvbSAnQGFsaWNsb3VkL3Jvcy1jZGstY29yZSc7XG5pbXBvcnQgeyBSb3NBbnljYXN0RWlwQWRkcmVzcyB9IGZyb20gJy4vdnBjLmdlbmVyYXRlZCc7XG4vLyBHZW5lcmF0ZWQgZnJvbSB0aGUgQWxpQ2xvdWQgUk9TIFJlc291cmNlIFNwZWNpZmljYXRpb25cbmV4cG9ydCB7IFJvc0FueWNhc3RFaXBBZGRyZXNzIGFzIEFueWNhc3RFaXBBZGRyZXNzUHJvcGVydHkgfTtcblxuLyoqXG4gKiBQcm9wZXJ0aWVzIGZvciBkZWZpbmluZyBhIGBBbnljYXN0RWlwQWRkcmVzc2AuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2RhdGFzb3VyY2UtZWlwYW55Y2FzdC1hbnljYXN0ZWlwYWRkcmVzc1xuICovXG5leHBvcnQgaW50ZXJmYWNlIEFueWNhc3RFaXBBZGRyZXNzUHJvcHMge1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgYW55Y2FzdElkOiBUaGUgSUQgb2YgdGhlIEFueWNhc3QgRUlQLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGFueWNhc3RJZDogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgcmVmcmVzaE9wdGlvbnM6IFRoZSByZWZyZXNoIHN0cmF0ZWd5IGZvciB0aGUgZGF0YXNvdXJjZSByZXNvdXJjZSB3aGVuIHRoZSBzdGFjayBpcyB1cGRhdGVkLiBWYWxpZCB2YWx1ZXM6XG4gICAgICogLSBOZXZlcjogTmV2ZXIgcmVmcmVzaCB0aGUgZGF0YXNvdXJjZSByZXNvdXJjZSB3aGVuIHRoZSBzdGFjayBpcyB1cGRhdGVkLlxuICAgICAqIC0gQWx3YXlzOiBBbHdheXMgcmVmcmVzaCB0aGUgZGF0YXNvdXJjZSByZXNvdXJjZSB3aGVuIHRoZSBzdGFjayBpcyB1cGRhdGVkLlxuICAgICAqIERlZmF1bHQgaXMgTmV2ZXIuXG4gICAgICovXG4gICAgcmVhZG9ubHkgcmVmcmVzaE9wdGlvbnM/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG59XG5cbi8qKlxuICogVGhpcyBjbGFzcyBlbmNhcHN1bGF0ZXMgYW5kIGV4dGVuZHMgdGhlIFJPUyByZXNvdXJjZSB0eXBlIGBEQVRBU09VUkNFOjpFaXBhbnljYXN0OjpBbnljYXN0RWlwQWRkcmVzc2AsIHdoaWNoIGlzIHVzZWQgdG8gcXVlcnkgdGhlIGluZm9ybWF0aW9uIGFib3V0IGFuIEFueWNhc3QgZWxhc3RpYyBJUCBhZGRyZXNzIChBbnljYXN0IEVJUCkuXG4gKiBATm90ZSBUaGlzIGNsYXNzIG1heSBoYXZlIHNvbWUgbmV3IGZ1bmN0aW9ucyB0byBmYWNpbGl0YXRlIGRldmVsb3BtZW50LCBzbyBpdCBpcyByZWNvbW1lbmRlZCB0byB1c2UgdGhpcyBjbGFzcyBpbnN0ZWFkIG9mIGBSb3NBbnljYXN0RWlwQWRkcmVzc2Bmb3IgYSBtb3JlIGNvbnZlbmllbnQgZGV2ZWxvcG1lbnQgZXhwZXJpZW5jZS5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvZGF0YXNvdXJjZS1laXBhbnljYXN0LWFueWNhc3RlaXBhZGRyZXNzXG4gKi9cbmV4cG9ydCBjbGFzcyBBbnljYXN0RWlwQWRkcmVzcyBleHRlbmRzIHJvcy5SZXNvdXJjZSB7XG4gICAgcHJvdGVjdGVkIHNjb3BlOiByb3MuQ29uc3RydWN0O1xuICAgIHByb3RlY3RlZCBpZDogc3RyaW5nO1xuICAgIHByb3RlY3RlZCBwcm9wczogQW55Y2FzdEVpcEFkZHJlc3NQcm9wcztcbiAgICBwcm90ZWN0ZWQgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6IGJvb2xlYW47XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgQWxpVWlkOiBUaGUgSUQgb2YgdGhlIGFjY291bnQgdG8gd2hpY2ggdGhlIEFueWNhc3QgRUlQIGJlbG9uZ3MuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJBbGlVaWQ6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBBbnljYXN0RWlwQWRkcmVzc05hbWU6IFRoZSBuYW1lIG9mIHRoZSBBbnljYXN0IEVJUC5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckFueWNhc3RFaXBBZGRyZXNzTmFtZTogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIEFueWNhc3RJZDogVGhlIElEIG9mIHRoZSBBbnljYXN0IEVJUC5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckFueWNhc3RJZDogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIEJhbmR3aWR0aDogVGhlIG1heGltdW0gYmFuZHdpZHRoIG9mIHRoZSBBbnljYXN0IEVJUC4gVW5pdDogTWJpdC9zLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyQmFuZHdpZHRoOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgQmlkOiBUaGUgQklEIG9mIHRoZSBhY2NvdW50IHRvIHdoaWNoIHRoZSBBbnljYXN0IEVJUCBiZWxvbmdzLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyQmlkOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgQ3JlYXRlVGltZTogVGhlIHBvaW50IGluIHRpbWUgYXQgd2hpY2ggdGhlIEFueWNhc3QgRUlQIHdhcyBjcmVhdGVkLiBUaGUgdGltZSBmb2xsb3dzIHRoZSBJU084NjAxIHN0YW5kYXJkIGluIHRoZSB5eXl5LU1NLWRkVEhIOm1tOnNzWiBmb3JtYXQuIFRoZSB0aW1lIGlzIGRpc3BsYXllZCBpbiBVVEMuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJDcmVhdGVUaW1lOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgSW50ZXJuZXRDaGFyZ2VUeXBlOiBUaGUgYmlsbGluZyBtZXRob2Qgb2YgdGhlIEFueWNhc3QgRUlQLiBPbmx5IFBvc3RQYWlkIG1heSBiZSByZXR1cm5lZCwgd2hpY2ggaW5kaWNhdGVzIHRoZSBwYXktYXMteW91LWdvIGJpbGxpbmcgbWV0aG9kLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRySW50ZXJuZXRDaGFyZ2VUeXBlOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgSXBBZGRyZXNzOiBUaGUgSVAgYWRkcmVzcyBvZiB0aGUgQW55Y2FzdCBFSVAuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJJcEFkZHJlc3M6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBQYXltZW50VHlwZTogVGhlIGJpbGxpbmcgbWV0aG9kIG9mIHRoZSBBbnljYXN0IEVJUC5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0clBheW1lbnRUeXBlOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgU2VydmljZUxvY2F0aW9uOiBUaGUgYWNjZXNzIGFyZWEgb2YgdGhlIEFueWNhc3QgRUlQLiBPbmx5IGludGVybmF0aW9uYWwgbWF5IGJlIHJldHVybmVkLCB3aGljaCBpbmRpY2F0ZXMgdGhlIGFyZWFzIG91dHNpZGUgdGhlIENoaW5lc2UgbWFpbmxhbmQuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJTZXJ2aWNlTG9jYXRpb246IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBTdGF0dXM6IFRoZSBzdGF0dXMgb2YgdGhlIEFueWNhc3QgRUlQLiBWYWxpZCB2YWx1ZXM6XG4qIEFzc29jaWF0aW5nXG4qIFVuYXNzb2NpYXRpbmdcbiogQWxsb2NhdGVkXG4qIEFzc29jaWF0ZWRcbiogTW9kaWZ5aW5nXG4qIFJlbGVhc2luZ1xuKiBSZWxlYXNlZFxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyU3RhdHVzOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgVGFnczogVGhlIHRhZ3Mgb2YgdGhlIEVJUC5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0clRhZ3M6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFBhcmFtIHNjb3BlIC0gc2NvcGUgaW4gd2hpY2ggdGhpcyByZXNvdXJjZSBpcyBkZWZpbmVkXG4gICAgICogUGFyYW0gaWQgICAgLSBzY29wZWQgaWQgb2YgdGhlIHJlc291cmNlXG4gICAgICogUGFyYW0gcHJvcHMgLSByZXNvdXJjZSBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IHJvcy5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBBbnljYXN0RWlwQWRkcmVzc1Byb3BzLCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDpib29sZWFuID0gdHJ1ZSkge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQpO1xuICAgICAgICB0aGlzLnNjb3BlID0gc2NvcGU7XG4gICAgICAgIHRoaXMuaWQgPSBpZDtcbiAgICAgICAgdGhpcy5wcm9wcyA9IHByb3BzO1xuICAgICAgICB0aGlzLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ID0gZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ7XG5cbiAgICAgICAgY29uc3Qgcm9zQW55Y2FzdEVpcEFkZHJlc3MgPSBuZXcgUm9zQW55Y2FzdEVpcEFkZHJlc3ModGhpcywgaWQsICB7XG4gICAgICAgICAgICBhbnljYXN0SWQ6IHByb3BzLmFueWNhc3RJZCxcbiAgICAgICAgICAgIHJlZnJlc2hPcHRpb25zOiBwcm9wcy5yZWZyZXNoT3B0aW9ucyA9PT0gdW5kZWZpbmVkIHx8IHByb3BzLnJlZnJlc2hPcHRpb25zID09PSBudWxsID8gJ05ldmVyJyA6IHByb3BzLnJlZnJlc2hPcHRpb25zLFxuICAgICAgICB9LCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCAmJiB0aGlzLnN0YWNrLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50KTtcbiAgICAgICAgdGhpcy5yZXNvdXJjZSA9IHJvc0FueWNhc3RFaXBBZGRyZXNzO1xuICAgICAgICB0aGlzLmF0dHJBbGlVaWQgPSByb3NBbnljYXN0RWlwQWRkcmVzcy5hdHRyQWxpVWlkO1xuICAgICAgICB0aGlzLmF0dHJBbnljYXN0RWlwQWRkcmVzc05hbWUgPSByb3NBbnljYXN0RWlwQWRkcmVzcy5hdHRyQW55Y2FzdEVpcEFkZHJlc3NOYW1lO1xuICAgICAgICB0aGlzLmF0dHJBbnljYXN0SWQgPSByb3NBbnljYXN0RWlwQWRkcmVzcy5hdHRyQW55Y2FzdElkO1xuICAgICAgICB0aGlzLmF0dHJCYW5kd2lkdGggPSByb3NBbnljYXN0RWlwQWRkcmVzcy5hdHRyQmFuZHdpZHRoO1xuICAgICAgICB0aGlzLmF0dHJCaWQgPSByb3NBbnljYXN0RWlwQWRkcmVzcy5hdHRyQmlkO1xuICAgICAgICB0aGlzLmF0dHJDcmVhdGVUaW1lID0gcm9zQW55Y2FzdEVpcEFkZHJlc3MuYXR0ckNyZWF0ZVRpbWU7XG4gICAgICAgIHRoaXMuYXR0ckludGVybmV0Q2hhcmdlVHlwZSA9IHJvc0FueWNhc3RFaXBBZGRyZXNzLmF0dHJJbnRlcm5ldENoYXJnZVR5cGU7XG4gICAgICAgIHRoaXMuYXR0cklwQWRkcmVzcyA9IHJvc0FueWNhc3RFaXBBZGRyZXNzLmF0dHJJcEFkZHJlc3M7XG4gICAgICAgIHRoaXMuYXR0clBheW1lbnRUeXBlID0gcm9zQW55Y2FzdEVpcEFkZHJlc3MuYXR0clBheW1lbnRUeXBlO1xuICAgICAgICB0aGlzLmF0dHJTZXJ2aWNlTG9jYXRpb24gPSByb3NBbnljYXN0RWlwQWRkcmVzcy5hdHRyU2VydmljZUxvY2F0aW9uO1xuICAgICAgICB0aGlzLmF0dHJTdGF0dXMgPSByb3NBbnljYXN0RWlwQWRkcmVzcy5hdHRyU3RhdHVzO1xuICAgICAgICB0aGlzLmF0dHJUYWdzID0gcm9zQW55Y2FzdEVpcEFkZHJlc3MuYXR0clRhZ3M7XG4gICAgfVxufVxuIl19