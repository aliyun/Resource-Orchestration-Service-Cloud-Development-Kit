"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RetcodeApp = exports.RetcodeAppProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const arms_generated_1 = require("./arms.generated");
Object.defineProperty(exports, "RetcodeAppProperty", { enumerable: true, get: function () { return arms_generated_1.RosRetcodeApp; } });
/**
 * A ROS resource type:  `ALIYUN::ARMS::RetcodeApp`
 */
class RetcodeApp extends ros.Resource {
    /**
     * Create a new `ALIYUN::ARMS::RetcodeApp`.
     *
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosRetcodeApp = new arms_generated_1.RosRetcodeApp(this, id, {
            retcodeAppType: props.retcodeAppType,
            retcodeAppName: props.retcodeAppName,
            regionId: props.regionId === undefined || props.regionId === null ? 'cn-hangzhou' : props.regionId,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosRetcodeApp;
        this.attrAppId = rosRetcodeApp.attrAppId;
        this.attrPid = rosRetcodeApp.attrPid;
    }
}
exports.RetcodeApp = RetcodeApp;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmV0Y29kZWFwcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInJldGNvZGVhcHAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsOENBQThDO0FBQzlDLHFEQUFpRDtBQUV2QixtR0FGakIsOEJBQWEsT0FFc0I7QUF1QjVDOztHQUVHO0FBQ0gsTUFBYSxVQUFXLFNBQVEsR0FBRyxDQUFDLFFBQVE7SUFpQnhDOzs7Ozs7T0FNRztJQUNILFlBQVksS0FBb0IsRUFBRSxFQUFVLEVBQUUsS0FBc0IsRUFBRSxtQ0FBMkMsSUFBSTtRQUNqSCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRWpCLE1BQU0sYUFBYSxHQUFHLElBQUksOEJBQWEsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFHO1lBQy9DLGNBQWMsRUFBRSxLQUFLLENBQUMsY0FBYztZQUNwQyxjQUFjLEVBQUUsS0FBSyxDQUFDLGNBQWM7WUFDcEMsUUFBUSxFQUFFLEtBQUssQ0FBQyxRQUFRLEtBQUssU0FBUyxJQUFJLEtBQUssQ0FBQyxRQUFRLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxRQUFRO1NBQ3JHLEVBQUUsZ0NBQWdDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO1FBQ3BGLElBQUksQ0FBQyxRQUFRLEdBQUcsYUFBYSxDQUFDO1FBQzlCLElBQUksQ0FBQyxTQUFTLEdBQUcsYUFBYSxDQUFDLFNBQVMsQ0FBQztRQUN6QyxJQUFJLENBQUMsT0FBTyxHQUFHLGFBQWEsQ0FBQyxPQUFPLENBQUM7SUFDekMsQ0FBQztDQUNKO0FBcENELGdDQW9DQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHJvcyBmcm9tICdAYWxpY2xvdWQvcm9zLWNkay1jb3JlJztcbmltcG9ydCB7IFJvc1JldGNvZGVBcHAgfSBmcm9tICcuL2FybXMuZ2VuZXJhdGVkJztcbi8vIEdlbmVyYXRlZCBmcm9tIHRoZSBBbGlDbG91ZCBST1MgUmVzb3VyY2UgU3BlY2lmaWNhdGlvblxuZXhwb3J0IHsgUm9zUmV0Y29kZUFwcCBhcyBSZXRjb2RlQXBwUHJvcGVydHkgfTtcblxuLyoqXG4gKiBQcm9wZXJ0aWVzIGZvciBkZWZpbmluZyBhIGBBTElZVU46OkFSTVM6OlJldGNvZGVBcHBgXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUmV0Y29kZUFwcFByb3BzIHtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHJlZ2lvbklkOiBSZWdpb24gSUQuIEFsbG93ZWQgdmFsdWVzOiBjbi1oYW5nemhvdSwgYXAtc291dGhlYXN0LTEuIERlZmF1bHQgdG8gY24taGFuZ3pob3UuXG4gICAgICovXG4gICAgcmVhZG9ubHkgcmVnaW9uSWQ6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHJldGNvZGVBcHBOYW1lOiBUaGUgbmFtZSBvZiB0aGUgYXBwbGljYXRpb24gZm9yIHdoaWNoIHlvdSB3YW50IHRvIGNyZWF0ZSB0aGUgYnJvd3NlciBtb25pdG9yaW5nIGpvYi5cbiAgICAgKi9cbiAgICByZWFkb25seSByZXRjb2RlQXBwTmFtZTogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgcmV0Y29kZUFwcFR5cGU6IFRoZSB0eXBlIG9mIHRoZSBhcHBsaWNhdGlvbiBmb3Igd2hpY2ggeW91IHdhbnQgdG8gY3JlYXRlIHRoZSBicm93c2VyIG1vbml0b3Jpbmcgam9iLiBBbGxvd2VkIHZhbHVlczogd2ViLCB3ZWV4LCBtaW5pX2RkLCBtaW5pX2FsaXBheSwgbWluaV93eCwgbWluaV9jb21tb24uXG4gICAgICovXG4gICAgcmVhZG9ubHkgcmV0Y29kZUFwcFR5cGU6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcbn1cblxuLyoqXG4gKiBBIFJPUyByZXNvdXJjZSB0eXBlOiAgYEFMSVlVTjo6QVJNUzo6UmV0Y29kZUFwcGBcbiAqL1xuZXhwb3J0IGNsYXNzIFJldGNvZGVBcHAgZXh0ZW5kcyByb3MuUmVzb3VyY2Uge1xuXG4gICAgLyoqXG4gICAgICogQSBmYWN0b3J5IG1ldGhvZCB0aGF0IGNyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgdGhpcyBjbGFzcyBmcm9tIGFuIG9iamVjdFxuICAgICAqIGNvbnRhaW5pbmcgdGhlIHByb3BlcnRpZXMgb2YgdGhpcyBST1MgcmVzb3VyY2UsIHdoaWNoIHdpbGwgYmUgYXNzaWduZWQgdG8gUk9TIHJlc291cmNlLlxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIEFwcElkOiBUaGUgSUQgb2YgdGhlIGFwcGxpY2F0aW9uIGZvciB3aGljaCB5b3UgY3JlYXRlZCB0aGUgYnJvd3NlciBtb25pdG9yaW5nIGpvYi5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckFwcElkOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgUGlkOiBUaGUgUElELlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyUGlkOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgYEFMSVlVTjo6QVJNUzo6UmV0Y29kZUFwcGAuXG4gICAgICpcbiAgICAgKiBQYXJhbSBzY29wZSAtIHNjb3BlIGluIHdoaWNoIHRoaXMgcmVzb3VyY2UgaXMgZGVmaW5lZFxuICAgICAqIFBhcmFtIGlkICAgIC0gc2NvcGVkIGlkIG9mIHRoZSByZXNvdXJjZVxuICAgICAqIFBhcmFtIHByb3BzIC0gcmVzb3VyY2UgcHJvcGVydGllc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiByb3MuQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogUmV0Y29kZUFwcFByb3BzLCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDpib29sZWFuID0gdHJ1ZSkge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQpO1xuXG4gICAgICAgIGNvbnN0IHJvc1JldGNvZGVBcHAgPSBuZXcgUm9zUmV0Y29kZUFwcCh0aGlzLCBpZCwgIHtcbiAgICAgICAgICAgIHJldGNvZGVBcHBUeXBlOiBwcm9wcy5yZXRjb2RlQXBwVHlwZSxcbiAgICAgICAgICAgIHJldGNvZGVBcHBOYW1lOiBwcm9wcy5yZXRjb2RlQXBwTmFtZSxcbiAgICAgICAgICAgIHJlZ2lvbklkOiBwcm9wcy5yZWdpb25JZCA9PT0gdW5kZWZpbmVkIHx8IHByb3BzLnJlZ2lvbklkID09PSBudWxsID8gJ2NuLWhhbmd6aG91JyA6IHByb3BzLnJlZ2lvbklkLFxuICAgICAgICB9LCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCAmJiB0aGlzLnN0YWNrLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50KTtcbiAgICAgICAgdGhpcy5yZXNvdXJjZSA9IHJvc1JldGNvZGVBcHA7XG4gICAgICAgIHRoaXMuYXR0ckFwcElkID0gcm9zUmV0Y29kZUFwcC5hdHRyQXBwSWQ7XG4gICAgICAgIHRoaXMuYXR0clBpZCA9IHJvc1JldGNvZGVBcHAuYXR0clBpZDtcbiAgICB9XG59XG4iXX0=