"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Configuration = exports.ConfigurationProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const acm_generated_1 = require("./acm.generated");
Object.defineProperty(exports, "ConfigurationProperty", { enumerable: true, get: function () { return acm_generated_1.RosConfiguration; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::ACM::Configuration`, which is used to create a configuration.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosConfiguration`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-acm-configuration
 */
class Configuration extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosConfiguration = new acm_generated_1.RosConfiguration(this, id, {
            group: props.group === undefined || props.group === null ? 'DEFAULT_GROUP' : props.group,
            desc: props.desc,
            type: props.type === undefined || props.type === null ? 'text' : props.type,
            dataId: props.dataId,
            content: props.content,
            namespaceId: props.namespaceId,
            tags: props.tags,
            appName: props.appName,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosConfiguration;
        this.attrDataId = rosConfiguration.attrDataId;
        this.attrGroup = rosConfiguration.attrGroup;
        this.attrNamespaceId = rosConfiguration.attrNamespaceId;
    }
}
exports.Configuration = Configuration;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlndXJhdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNvbmZpZ3VyYXRpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsOENBQThDO0FBQzlDLG1EQUFtRDtBQUV0QixzR0FGcEIsZ0NBQWdCLE9BRXlCO0FBb0RsRDs7OztHQUlHO0FBQ0gsTUFBYSxhQUFjLFNBQVEsR0FBRyxDQUFDLFFBQVE7SUFxQjNDOzs7O09BSUc7SUFDSCxZQUFZLEtBQW9CLEVBQUUsRUFBVSxFQUFFLEtBQXlCLEVBQUUsbUNBQTJDLElBQUk7UUFDcEgsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNqQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUNiLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxnQ0FBZ0MsR0FBRyxnQ0FBZ0MsQ0FBQztRQUV6RSxNQUFNLGdCQUFnQixHQUFHLElBQUksZ0NBQWdCLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRztZQUNyRCxLQUFLLEVBQUUsS0FBSyxDQUFDLEtBQUssS0FBSyxTQUFTLElBQUksS0FBSyxDQUFDLEtBQUssS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUs7WUFDeEYsSUFBSSxFQUFFLEtBQUssQ0FBQyxJQUFJO1lBQ2hCLElBQUksRUFBRSxLQUFLLENBQUMsSUFBSSxLQUFLLFNBQVMsSUFBSSxLQUFLLENBQUMsSUFBSSxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSTtZQUMzRSxNQUFNLEVBQUUsS0FBSyxDQUFDLE1BQU07WUFDcEIsT0FBTyxFQUFFLEtBQUssQ0FBQyxPQUFPO1lBQ3RCLFdBQVcsRUFBRSxLQUFLLENBQUMsV0FBVztZQUM5QixJQUFJLEVBQUUsS0FBSyxDQUFDLElBQUk7WUFDaEIsT0FBTyxFQUFFLEtBQUssQ0FBQyxPQUFPO1NBQ3pCLEVBQUUsZ0NBQWdDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO1FBQ3BGLElBQUksQ0FBQyxRQUFRLEdBQUcsZ0JBQWdCLENBQUM7UUFDakMsSUFBSSxDQUFDLFVBQVUsR0FBRyxnQkFBZ0IsQ0FBQyxVQUFVLENBQUM7UUFDOUMsSUFBSSxDQUFDLFNBQVMsR0FBRyxnQkFBZ0IsQ0FBQyxTQUFTLENBQUM7UUFDNUMsSUFBSSxDQUFDLGVBQWUsR0FBRyxnQkFBZ0IsQ0FBQyxlQUFlLENBQUM7SUFDNUQsQ0FBQztDQUNKO0FBaERELHNDQWdEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHJvcyBmcm9tICdAYWxpY2xvdWQvcm9zLWNkay1jb3JlJztcbmltcG9ydCB7IFJvc0NvbmZpZ3VyYXRpb24gfSBmcm9tICcuL2FjbS5nZW5lcmF0ZWQnO1xuLy8gR2VuZXJhdGVkIGZyb20gdGhlIEFsaUNsb3VkIFJPUyBSZXNvdXJjZSBTcGVjaWZpY2F0aW9uXG5leHBvcnQgeyBSb3NDb25maWd1cmF0aW9uIGFzIENvbmZpZ3VyYXRpb25Qcm9wZXJ0eSB9O1xuXG4vKipcbiAqIFByb3BlcnRpZXMgZm9yIGRlZmluaW5nIGEgYENvbmZpZ3VyYXRpb25gLlxuICogU2VlIGh0dHBzOi8vd3d3LmFsaWJhYmFjbG91ZC5jb20vaGVscC9yb3MvZGV2ZWxvcGVyLXJlZmVyZW5jZS9hbGl5dW4tYWNtLWNvbmZpZ3VyYXRpb25cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBDb25maWd1cmF0aW9uUHJvcHMge1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgY29udGVudDogVGhlIGNvbnRlbnRzIG9mIHRoZSBjb25maWd1cmF0aW9uXG4gICAgICovXG4gICAgcmVhZG9ubHkgY29udGVudDogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgZGF0YUlkOiBUaGUgSUQgb2YgdGhlIGNvbmZpZ3VyYXRpb24uIEFsbG93ZWQgY2hhcmFjdGVycyBhcmUgdXBwZXIgYW5kIGxvd2VyIGNhc2UgbGV0dGVycywgbnVtYmVycywgZGVjaW1hbCBwb2ludHMgKC4pLCBDb2xvbnMgKDopLCBhc3Rlcmlza3MgKCopLCB1bmRlcnNjb3JlcyAoXyksIGFuZCB1bmRlcnNjb3JlcyAoLSkuIFdoZW4gdGhlIElEIHByZWZpeCBpcyB0aGUgZm9sbG93aW5nIHZhbHVlLCBBQ00gd2lsbCBhdXRvbWF0aWNhbGx5IHVzZSBLTVMgc2VydmljZSB0byBlbmNyeXB0IHRoaXMgY29uZmlndXJhdGlvbjpcbiAgICAgKiBUaGUgcHJlZml4IGlzIGNpcGhlci06IHRoZSBLTVMgc2VydmljZSBpcyBjYWxsZWQgdG8gZW5jcnlwdCBhbmQgZGVjcnlwdCB0aGUgY29uZmlndXJhdGlvbi4gVGhlIHNpemUgb2YgdGhlIGVuY3J5cHRlZCBkYXRhIGRvZXMgbm90IGV4Y2VlZCA0IEtCLCBhbmQgdGhlIG1heGltdW0gZG9lcyBub3QgZXhjZWVkIDYgS0IuIFNwZWNpYWwgc3ltYm9scyBzdWNoIGFzIGFuZCAoJmFtcDspIHdpbGwgZGVjcnlwdCBlcnJvcnMgYW5kIGFyZSBub3QgcmVjb21tZW5kZWQuXG4gICAgICogVGhlIHByZWZpeCBpcyBjaXBoZXIta21zLWFlcy0xMjgtOiB1c2luZyBLTVMncyBlbnZlbG9wZSBlbmNyeXB0aW9uIGFuZCBkZWNyeXB0aW9uIG1ldGhvZCwgdGhlIGNvbmZpZ3VyYXRpb24gY29udGVudCBjYW4gZXhjZWVkICA2IEtCLCB1cCB0byAxMDAgS0IuIFRoZSBwbGFpbiB0ZXh0IGRhdGEgb2YgdGhlIGNvbmZpZ3VyYXRpb24gY29udGVudCB3aWxsIG5vdCBiZSB0cmFuc21pdHRlZCB0byB0aGUgS01TIHN5c3RlbSwgd2hpY2ggaXMgbW9yZSBzZWN1cmUgYW5kIHJlY29tbWVuZGVkLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGRhdGFJZDogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgbmFtZXNwYWNlSWQ6IElEIG9mIG5hbWVzcGFjZVxuICAgICAqL1xuICAgIHJlYWRvbmx5IG5hbWVzcGFjZUlkOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBhcHBOYW1lOiBDb25maWd1cmF0aW9uIGFwcGxpY2F0aW9uIG5hbWVcbiAgICAgKi9cbiAgICByZWFkb25seSBhcHBOYW1lPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgZGVzYzogQ29uZmlndXJhdGlvbiBkZXNjcmlwdGlvbiBleHBsYWluc1xuICAgICAqL1xuICAgIHJlYWRvbmx5IGRlc2M/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBncm91cDogR3JvdXBcbiAgICAgKi9cbiAgICByZWFkb25seSBncm91cD86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHRhZ3M6IExhYmVsIGNvbmZpZ3VyYXRpb25zLCBzdWNoIGFzIHRoZSBwcmVzZW5jZSBvZiBhIHBsdXJhbGl0eSBvZiB0YWdzLCBzZXBhcmF0ZWQgYnkgY29tbWFzXG4gICAgICovXG4gICAgcmVhZG9ubHkgdGFncz86IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHR5cGU6IFByb3Zpc2lvbmluZyBjb250ZW50IGZvcm1hdCwgb3B0aW9uYWwgdmFsdWVzIGFzIGZvbGxvd3M6XG4gICAgICogdGV4dCwganNvbiwgeG1sLCB5YW1sLCB0ZXh0XFwvaHRtbCwgcHJvcGVydGllc1xuICAgICAqL1xuICAgIHJlYWRvbmx5IHR5cGU/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG59XG5cbi8qKlxuICogVGhpcyBjbGFzcyBlbmNhcHN1bGF0ZXMgYW5kIGV4dGVuZHMgdGhlIFJPUyByZXNvdXJjZSB0eXBlIGBBTElZVU46OkFDTTo6Q29uZmlndXJhdGlvbmAsIHdoaWNoIGlzIHVzZWQgdG8gY3JlYXRlIGEgY29uZmlndXJhdGlvbi5cbiAqIEBOb3RlIFRoaXMgY2xhc3MgbWF5IGhhdmUgc29tZSBuZXcgZnVuY3Rpb25zIHRvIGZhY2lsaXRhdGUgZGV2ZWxvcG1lbnQsIHNvIGl0IGlzIHJlY29tbWVuZGVkIHRvIHVzZSB0aGlzIGNsYXNzIGluc3RlYWQgb2YgYFJvc0NvbmZpZ3VyYXRpb25gZm9yIGEgbW9yZSBjb252ZW5pZW50IGRldmVsb3BtZW50IGV4cGVyaWVuY2UuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2FsaXl1bi1hY20tY29uZmlndXJhdGlvblxuICovXG5leHBvcnQgY2xhc3MgQ29uZmlndXJhdGlvbiBleHRlbmRzIHJvcy5SZXNvdXJjZSB7XG4gICAgcHJvdGVjdGVkIHNjb3BlOiByb3MuQ29uc3RydWN0O1xuICAgIHByb3RlY3RlZCBpZDogc3RyaW5nO1xuICAgIHByb3RlY3RlZCBwcm9wczogQ29uZmlndXJhdGlvblByb3BzO1xuICAgIHByb3RlY3RlZCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBEYXRhSWQ6IFRoZSBJRCBvZiB0aGUgY29uZmlndXJhdGlvblxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyRGF0YUlkOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgR3JvdXA6IEdyb3VwXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJHcm91cDogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIE5hbWVzcGFjZUlkOiBJRCBvZiBuYW1lc3BhY2VcbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ck5hbWVzcGFjZUlkOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQYXJhbSBzY29wZSAtIHNjb3BlIGluIHdoaWNoIHRoaXMgcmVzb3VyY2UgaXMgZGVmaW5lZFxuICAgICAqIFBhcmFtIGlkICAgIC0gc2NvcGVkIGlkIG9mIHRoZSByZXNvdXJjZVxuICAgICAqIFBhcmFtIHByb3BzIC0gcmVzb3VyY2UgcHJvcGVydGllc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiByb3MuQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogQ29uZmlndXJhdGlvblByb3BzLCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDpib29sZWFuID0gdHJ1ZSkge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQpO1xuICAgICAgICB0aGlzLnNjb3BlID0gc2NvcGU7XG4gICAgICAgIHRoaXMuaWQgPSBpZDtcbiAgICAgICAgdGhpcy5wcm9wcyA9IHByb3BzO1xuICAgICAgICB0aGlzLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ID0gZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ7XG5cbiAgICAgICAgY29uc3Qgcm9zQ29uZmlndXJhdGlvbiA9IG5ldyBSb3NDb25maWd1cmF0aW9uKHRoaXMsIGlkLCAge1xuICAgICAgICAgICAgZ3JvdXA6IHByb3BzLmdyb3VwID09PSB1bmRlZmluZWQgfHwgcHJvcHMuZ3JvdXAgPT09IG51bGwgPyAnREVGQVVMVF9HUk9VUCcgOiBwcm9wcy5ncm91cCxcbiAgICAgICAgICAgIGRlc2M6IHByb3BzLmRlc2MsXG4gICAgICAgICAgICB0eXBlOiBwcm9wcy50eXBlID09PSB1bmRlZmluZWQgfHwgcHJvcHMudHlwZSA9PT0gbnVsbCA/ICd0ZXh0JyA6IHByb3BzLnR5cGUsXG4gICAgICAgICAgICBkYXRhSWQ6IHByb3BzLmRhdGFJZCxcbiAgICAgICAgICAgIGNvbnRlbnQ6IHByb3BzLmNvbnRlbnQsXG4gICAgICAgICAgICBuYW1lc3BhY2VJZDogcHJvcHMubmFtZXNwYWNlSWQsXG4gICAgICAgICAgICB0YWdzOiBwcm9wcy50YWdzLFxuICAgICAgICAgICAgYXBwTmFtZTogcHJvcHMuYXBwTmFtZSxcbiAgICAgICAgfSwgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgJiYgdGhpcy5zdGFjay5lbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCk7XG4gICAgICAgIHRoaXMucmVzb3VyY2UgPSByb3NDb25maWd1cmF0aW9uO1xuICAgICAgICB0aGlzLmF0dHJEYXRhSWQgPSByb3NDb25maWd1cmF0aW9uLmF0dHJEYXRhSWQ7XG4gICAgICAgIHRoaXMuYXR0ckdyb3VwID0gcm9zQ29uZmlndXJhdGlvbi5hdHRyR3JvdXA7XG4gICAgICAgIHRoaXMuYXR0ck5hbWVzcGFjZUlkID0gcm9zQ29uZmlndXJhdGlvbi5hdHRyTmFtZXNwYWNlSWQ7XG4gICAgfVxufVxuIl19