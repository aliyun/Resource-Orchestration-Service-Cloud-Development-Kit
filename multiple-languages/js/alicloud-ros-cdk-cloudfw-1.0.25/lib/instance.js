"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Instance = exports.InstanceProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const cloudfw_generated_1 = require("./cloudfw.generated");
Object.defineProperty(exports, "InstanceProperty", { enumerable: true, get: function () { return cloudfw_generated_1.RosInstance; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::CLOUDFW::Instance`, which is used to create an instance of Cloud Firewall.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosInstance`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-cloudfw-instance
 */
class Instance extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosInstance = new cloudfw_generated_1.RosInstance(this, id, {
            ignoreExisting: props.ignoreExisting === undefined || props.ignoreExisting === null ? false : props.ignoreExisting,
            vpcBandwidth: props.vpcBandwidth,
            aclExtension: props.aclExtension,
            natFirewallNum: props.natFirewallNum,
            natBandwidth: props.natBandwidth,
            ipNum: props.ipNum,
            autoRenew: props.autoRenew,
            period: props.period,
            payType: props.payType,
            autoPay: props.autoPay === undefined || props.autoPay === null ? false : props.autoPay,
            logStorage: props.logStorage,
            logAnalysis: props.logAnalysis,
            vpcFirewallNum: props.vpcFirewallNum,
            accountNum: props.accountNum,
            multiAccountManagement: props.multiAccountManagement === undefined || props.multiAccountManagement === null ? false : props.multiAccountManagement,
            bandwidth: props.bandwidth,
            spec: props.spec,
            periodUnit: props.periodUnit,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosInstance;
        this.attrInstanceId = rosInstance.attrInstanceId;
    }
}
exports.Instance = Instance;
//# sourceMappingURL=data:application/json;base64,