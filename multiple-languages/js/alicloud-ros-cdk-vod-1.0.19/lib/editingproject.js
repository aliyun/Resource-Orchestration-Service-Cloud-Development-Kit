"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EditingProject = exports.EditingProjectProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const vod_generated_1 = require("./vod.generated");
Object.defineProperty(exports, "EditingProjectProperty", { enumerable: true, get: function () { return vod_generated_1.RosEditingProject; } });
/**
 * A ROS resource type:  `ALIYUN::VOD::EditingProject`
 */
class EditingProject extends ros.Resource {
    /**
     * Create a new `ALIYUN::VOD::EditingProject`.
     *
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosEditingProject = new vod_generated_1.RosEditingProject(this, id, {
            editingProjectName: props.editingProjectName,
            timeline: props.timeline,
            title: props.title,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosEditingProject;
        this.attrCreateTime = rosEditingProject.attrCreateTime;
        this.attrEditingProjectId = rosEditingProject.attrEditingProjectId;
        this.attrEditingProjectName = rosEditingProject.attrEditingProjectName;
        this.attrModifiedTime = rosEditingProject.attrModifiedTime;
        this.attrTimeline = rosEditingProject.attrTimeline;
        this.attrTitle = rosEditingProject.attrTitle;
    }
}
exports.EditingProject = EditingProject;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWRpdGluZ3Byb2plY3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJlZGl0aW5ncHJvamVjdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw4Q0FBOEM7QUFDOUMsbURBQW9EO0FBRXRCLHVHQUZyQixpQ0FBaUIsT0FFMEI7QUF3QnBEOztHQUVHO0FBQ0gsTUFBYSxjQUFlLFNBQVEsR0FBRyxDQUFDLFFBQVE7SUF1QzVDOzs7Ozs7T0FNRztJQUNILFlBQVksS0FBb0IsRUFBRSxFQUFVLEVBQUUsS0FBMEIsRUFBRSxtQ0FBMkMsSUFBSTtRQUNySCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRWpCLE1BQU0saUJBQWlCLEdBQUcsSUFBSSxpQ0FBaUIsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFHO1lBQ3ZELGtCQUFrQixFQUFFLEtBQUssQ0FBQyxrQkFBa0I7WUFDNUMsUUFBUSxFQUFFLEtBQUssQ0FBQyxRQUFRO1lBQ3hCLEtBQUssRUFBRSxLQUFLLENBQUMsS0FBSztTQUNyQixFQUFFLGdDQUFnQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztRQUNwRixJQUFJLENBQUMsUUFBUSxHQUFHLGlCQUFpQixDQUFDO1FBQ2xDLElBQUksQ0FBQyxjQUFjLEdBQUcsaUJBQWlCLENBQUMsY0FBYyxDQUFDO1FBQ3ZELElBQUksQ0FBQyxvQkFBb0IsR0FBRyxpQkFBaUIsQ0FBQyxvQkFBb0IsQ0FBQztRQUNuRSxJQUFJLENBQUMsc0JBQXNCLEdBQUcsaUJBQWlCLENBQUMsc0JBQXNCLENBQUM7UUFDdkUsSUFBSSxDQUFDLGdCQUFnQixHQUFHLGlCQUFpQixDQUFDLGdCQUFnQixDQUFDO1FBQzNELElBQUksQ0FBQyxZQUFZLEdBQUcsaUJBQWlCLENBQUMsWUFBWSxDQUFDO1FBQ25ELElBQUksQ0FBQyxTQUFTLEdBQUcsaUJBQWlCLENBQUMsU0FBUyxDQUFDO0lBQ2pELENBQUM7Q0FDSjtBQTlERCx3Q0E4REMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyByb3MgZnJvbSAnQGFsaWNsb3VkL3Jvcy1jZGstY29yZSc7XG5pbXBvcnQgeyBSb3NFZGl0aW5nUHJvamVjdCB9IGZyb20gJy4vdm9kLmdlbmVyYXRlZCc7XG4vLyBHZW5lcmF0ZWQgZnJvbSB0aGUgQWxpQ2xvdWQgUk9TIFJlc291cmNlIFNwZWNpZmljYXRpb25cbmV4cG9ydCB7IFJvc0VkaXRpbmdQcm9qZWN0IGFzIEVkaXRpbmdQcm9qZWN0UHJvcGVydHkgfTtcblxuLyoqXG4gKiBQcm9wZXJ0aWVzIGZvciBkZWZpbmluZyBhIGBBTElZVU46OlZPRDo6RWRpdGluZ1Byb2plY3RgXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRWRpdGluZ1Byb2plY3RQcm9wcyB7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSB0aXRsZTogVGhlIHRpdGxlIG9mIHRoZSBvbmxpbmUgZWRpdGluZyBwcm9qZWN0LlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHRpdGxlOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBlZGl0aW5nUHJvamVjdE5hbWU6IFRoZSBuYW1lIG9mIHRoZSBvbmxpbmUgZWRpdGluZyBwcm9qZWN0LlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGVkaXRpbmdQcm9qZWN0TmFtZT86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHRpbWVsaW5lOiBUaGUgdGltZWxpbmUgb2YgdGhlIG9ubGluZSBlZGl0aW5nIHByb2plY3QsIGluIEpTT04gZm9ybWF0LlxuICAgICAqIElmIHlvdSBkbyBub3Qgc3BlY2lmeSB0aGlzIHBhcmFtZXRlciwgYW4gZW1wdHkgdGltZWxpbmUgaXMgY3JlYXRlZCBhbmQgdGhlIGR1cmF0aW9uIG9mIHRoZSBvbmxpbmUgZWRpdGluZyBwcm9qZWN0IGlzIHplcm8uXG4gICAgICovXG4gICAgcmVhZG9ubHkgdGltZWxpbmU/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG59XG5cbi8qKlxuICogQSBST1MgcmVzb3VyY2UgdHlwZTogIGBBTElZVU46OlZPRDo6RWRpdGluZ1Byb2plY3RgXG4gKi9cbmV4cG9ydCBjbGFzcyBFZGl0aW5nUHJvamVjdCBleHRlbmRzIHJvcy5SZXNvdXJjZSB7XG5cbiAgICAvKipcbiAgICAgKiBBIGZhY3RvcnkgbWV0aG9kIHRoYXQgY3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzIGZyb20gYW4gb2JqZWN0XG4gICAgICogY29udGFpbmluZyB0aGUgcHJvcGVydGllcyBvZiB0aGlzIFJPUyByZXNvdXJjZSwgd2hpY2ggd2lsbCBiZSBhc3NpZ25lZCB0byBST1MgcmVzb3VyY2UuXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgQ3JlYXRlVGltZTogVGhlIHRpbWUgd2hlbiB0aGUgb25saW5lIGVkaXRpbmcgcHJvamVjdCB3YXMgY3JlYXRlZC5cblRoZSB0aW1lIGZvbGxvd3MgdGhlIElTTyA4NjAxIHN0YW5kYXJkIGluIHRoZSB5eXl5LU1NLWRkVEhIOm1tOnNzWiBmb3JtYXQuIFRoZSB0aW1lIGlzIGRpc3BsYXllZCBpbiBVVEMuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJDcmVhdGVUaW1lOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgRWRpdGluZ1Byb2plY3RJZDogVGhlIElEIG9mIHRoZSBvbmxpbmUgZWRpdGluZyBwcm9qZWN0LlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyRWRpdGluZ1Byb2plY3RJZDogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIEVkaXRpbmdQcm9qZWN0TmFtZTogVGhlIG5hbWUgb2YgdGhlIG9ubGluZSBlZGl0aW5nIHByb2plY3QuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJFZGl0aW5nUHJvamVjdE5hbWU6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBNb2RpZmllZFRpbWU6IFRoZSBsYXN0IHRpbWUgd2hlbiB0aGUgb25saW5lIGVkaXRpbmcgcHJvamVjdCB3YXMgbW9kaWZpZWQuXG5UaGUgdGltZSBmb2xsb3dzIHRoZSBJU08gODYwMSBzdGFuZGFyZCBpbiB0aGUgeXl5eS1NTS1kZFRISDptbTpzc1ogZm9ybWF0LiBUaGUgdGltZSBpcyBkaXNwbGF5ZWQgaW4gVVRDLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyTW9kaWZpZWRUaW1lOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgVGltZWxpbmU6IFRoZSB0aW1lbGluZSBvZiB0aGUgb25saW5lIGVkaXRpbmcgcHJvamVjdC5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0clRpbWVsaW5lOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgVGl0bGU6IFRoZSB0aXRsZSBvZiB0aGUgb25saW5lIGVkaXRpbmcgcHJvamVjdC5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0clRpdGxlOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgYEFMSVlVTjo6Vk9EOjpFZGl0aW5nUHJvamVjdGAuXG4gICAgICpcbiAgICAgKiBQYXJhbSBzY29wZSAtIHNjb3BlIGluIHdoaWNoIHRoaXMgcmVzb3VyY2UgaXMgZGVmaW5lZFxuICAgICAqIFBhcmFtIGlkICAgIC0gc2NvcGVkIGlkIG9mIHRoZSByZXNvdXJjZVxuICAgICAqIFBhcmFtIHByb3BzIC0gcmVzb3VyY2UgcHJvcGVydGllc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiByb3MuQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogRWRpdGluZ1Byb2plY3RQcm9wcywgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6Ym9vbGVhbiA9IHRydWUpIHtcbiAgICAgICAgc3VwZXIoc2NvcGUsIGlkKTtcblxuICAgICAgICBjb25zdCByb3NFZGl0aW5nUHJvamVjdCA9IG5ldyBSb3NFZGl0aW5nUHJvamVjdCh0aGlzLCBpZCwgIHtcbiAgICAgICAgICAgIGVkaXRpbmdQcm9qZWN0TmFtZTogcHJvcHMuZWRpdGluZ1Byb2plY3ROYW1lLFxuICAgICAgICAgICAgdGltZWxpbmU6IHByb3BzLnRpbWVsaW5lLFxuICAgICAgICAgICAgdGl0bGU6IHByb3BzLnRpdGxlLFxuICAgICAgICB9LCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCAmJiB0aGlzLnN0YWNrLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50KTtcbiAgICAgICAgdGhpcy5yZXNvdXJjZSA9IHJvc0VkaXRpbmdQcm9qZWN0O1xuICAgICAgICB0aGlzLmF0dHJDcmVhdGVUaW1lID0gcm9zRWRpdGluZ1Byb2plY3QuYXR0ckNyZWF0ZVRpbWU7XG4gICAgICAgIHRoaXMuYXR0ckVkaXRpbmdQcm9qZWN0SWQgPSByb3NFZGl0aW5nUHJvamVjdC5hdHRyRWRpdGluZ1Byb2plY3RJZDtcbiAgICAgICAgdGhpcy5hdHRyRWRpdGluZ1Byb2plY3ROYW1lID0gcm9zRWRpdGluZ1Byb2plY3QuYXR0ckVkaXRpbmdQcm9qZWN0TmFtZTtcbiAgICAgICAgdGhpcy5hdHRyTW9kaWZpZWRUaW1lID0gcm9zRWRpdGluZ1Byb2plY3QuYXR0ck1vZGlmaWVkVGltZTtcbiAgICAgICAgdGhpcy5hdHRyVGltZWxpbmUgPSByb3NFZGl0aW5nUHJvamVjdC5hdHRyVGltZWxpbmU7XG4gICAgICAgIHRoaXMuYXR0clRpdGxlID0gcm9zRWRpdGluZ1Byb2plY3QuYXR0clRpdGxlO1xuICAgIH1cbn1cbiJdfQ==