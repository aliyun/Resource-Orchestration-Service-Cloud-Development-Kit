"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MessageCallback = exports.MessageCallbackProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const vod_generated_1 = require("./vod.generated");
Object.defineProperty(exports, "MessageCallbackProperty", { enumerable: true, get: function () { return vod_generated_1.RosMessageCallback; } });
/**
 * A ROS resource type:  `ALIYUN::VOD::MessageCallback`
 */
class MessageCallback extends ros.Resource {
    /**
     * Create a new `ALIYUN::VOD::MessageCallback`.
     *
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosMessageCallback = new vod_generated_1.RosMessageCallback(this, id, {
            mnsEndpoint: props.mnsEndpoint,
            callbackUrl: props.callbackUrl,
            authSwitch: props.authSwitch,
            appId: props.appId,
            callbackType: props.callbackType,
            eventTypeList: props.eventTypeList,
            mnsQueueName: props.mnsQueueName,
            authKey: props.authKey,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosMessageCallback;
        this.attrAppId = rosMessageCallback.attrAppId;
        this.attrAuthKey = rosMessageCallback.attrAuthKey;
        this.attrAuthSwitch = rosMessageCallback.attrAuthSwitch;
        this.attrCallbackType = rosMessageCallback.attrCallbackType;
        this.attrCallbackUrl = rosMessageCallback.attrCallbackUrl;
        this.attrEventTypeList = rosMessageCallback.attrEventTypeList;
        this.attrMnsEndpoint = rosMessageCallback.attrMnsEndpoint;
        this.attrMnsQueueName = rosMessageCallback.attrMnsQueueName;
    }
}
exports.MessageCallback = MessageCallback;
//# sourceMappingURL=data:application/json;base64,