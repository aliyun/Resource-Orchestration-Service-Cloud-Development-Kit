"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CenVbrHealthCheck = exports.CenVbrHealthCheckProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const cen_generated_1 = require("./cen.generated");
Object.defineProperty(exports, "CenVbrHealthCheckProperty", { enumerable: true, get: function () { return cen_generated_1.RosCenVbrHealthCheck; } });
/**
 * A ROS resource type:  `ALIYUN::CEN::CenVbrHealthCheck`
 */
class CenVbrHealthCheck extends ros.Resource {
    /**
     * Create a new `ALIYUN::CEN::CenVbrHealthCheck`.
     *
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosCenVbrHealthCheck = new cen_generated_1.RosCenVbrHealthCheck(this, id, {
            vbrInstanceRegionId: props.vbrInstanceRegionId,
            healthCheckInterval: props.healthCheckInterval,
            vbrInstanceId: props.vbrInstanceId,
            vbrInstanceOwnerId: props.vbrInstanceOwnerId,
            healthCheckSourceIp: props.healthCheckSourceIp,
            healthyThreshold: props.healthyThreshold,
            cenId: props.cenId,
            healthCheckTargetIp: props.healthCheckTargetIp,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosCenVbrHealthCheck;
        this.attrCenId = rosCenVbrHealthCheck.attrCenId;
        this.attrHealthCheckInterval = rosCenVbrHealthCheck.attrHealthCheckInterval;
        this.attrHealthCheckSourceIp = rosCenVbrHealthCheck.attrHealthCheckSourceIp;
        this.attrHealthCheckTargetIp = rosCenVbrHealthCheck.attrHealthCheckTargetIp;
        this.attrHealthyThreshold = rosCenVbrHealthCheck.attrHealthyThreshold;
        this.attrVbrInstanceId = rosCenVbrHealthCheck.attrVbrInstanceId;
        this.attrVbrInstanceOwnerId = rosCenVbrHealthCheck.attrVbrInstanceOwnerId;
        this.attrVbrInstanceRegionId = rosCenVbrHealthCheck.attrVbrInstanceRegionId;
    }
}
exports.CenVbrHealthCheck = CenVbrHealthCheck;
//# sourceMappingURL=data:application/json;base64,