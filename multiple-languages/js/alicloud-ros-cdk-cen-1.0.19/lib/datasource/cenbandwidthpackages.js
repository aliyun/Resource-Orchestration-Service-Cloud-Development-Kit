"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CenBandwidthPackages = exports.CenBandwidthPackagesProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const cen_generated_1 = require("./cen.generated");
Object.defineProperty(exports, "CenBandwidthPackagesProperty", { enumerable: true, get: function () { return cen_generated_1.RosCenBandwidthPackages; } });
/**
 * A ROS resource type:  `DATASOURCE::CEN::CenBandwidthPackages`
 */
class CenBandwidthPackages extends ros.Resource {
    /**
     * Create a new `DATASOURCE::CEN::CenBandwidthPackages`.
     *
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props = {}, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosCenBandwidthPackages = new cen_generated_1.RosCenBandwidthPackages(this, id, {
            isOrKey: props.isOrKey,
            filter: props.filter,
            includeReservationData: props.includeReservationData,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosCenBandwidthPackages;
        this.attrCenBandwidthPackageIds = rosCenBandwidthPackages.attrCenBandwidthPackageIds;
        this.attrCenBandwidthPackages = rosCenBandwidthPackages.attrCenBandwidthPackages;
    }
}
exports.CenBandwidthPackages = CenBandwidthPackages;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2VuYmFuZHdpZHRocGFja2FnZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjZW5iYW5kd2lkdGhwYWNrYWdlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw4Q0FBOEM7QUFDOUMsbURBQTBEO0FBRXRCLDZHQUYzQix1Q0FBdUIsT0FFZ0M7QUF1QmhFOztHQUVHO0FBQ0gsTUFBYSxvQkFBcUIsU0FBUSxHQUFHLENBQUMsUUFBUTtJQWlCbEQ7Ozs7OztPQU1HO0lBQ0gsWUFBWSxLQUFvQixFQUFFLEVBQVUsRUFBRSxRQUFtQyxFQUFFLEVBQUUsbUNBQTJDLElBQUk7UUFDaEksS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUVqQixNQUFNLHVCQUF1QixHQUFHLElBQUksdUNBQXVCLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRztZQUNuRSxPQUFPLEVBQUUsS0FBSyxDQUFDLE9BQU87WUFDdEIsTUFBTSxFQUFFLEtBQUssQ0FBQyxNQUFNO1lBQ3BCLHNCQUFzQixFQUFFLEtBQUssQ0FBQyxzQkFBc0I7U0FDdkQsRUFBRSxnQ0FBZ0MsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7UUFDcEYsSUFBSSxDQUFDLFFBQVEsR0FBRyx1QkFBdUIsQ0FBQztRQUN4QyxJQUFJLENBQUMsMEJBQTBCLEdBQUcsdUJBQXVCLENBQUMsMEJBQTBCLENBQUM7UUFDckYsSUFBSSxDQUFDLHdCQUF3QixHQUFHLHVCQUF1QixDQUFDLHdCQUF3QixDQUFDO0lBQ3JGLENBQUM7Q0FDSjtBQXBDRCxvREFvQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyByb3MgZnJvbSAnQGFsaWNsb3VkL3Jvcy1jZGstY29yZSc7XG5pbXBvcnQgeyBSb3NDZW5CYW5kd2lkdGhQYWNrYWdlcyB9IGZyb20gJy4vY2VuLmdlbmVyYXRlZCc7XG4vLyBHZW5lcmF0ZWQgZnJvbSB0aGUgQWxpQ2xvdWQgUk9TIFJlc291cmNlIFNwZWNpZmljYXRpb25cbmV4cG9ydCB7IFJvc0NlbkJhbmR3aWR0aFBhY2thZ2VzIGFzIENlbkJhbmR3aWR0aFBhY2thZ2VzUHJvcGVydHkgfTtcblxuLyoqXG4gKiBQcm9wZXJ0aWVzIGZvciBkZWZpbmluZyBhIGBEQVRBU09VUkNFOjpDRU46OkNlbkJhbmR3aWR0aFBhY2thZ2VzYFxuICovXG5leHBvcnQgaW50ZXJmYWNlIENlbkJhbmR3aWR0aFBhY2thZ2VzUHJvcHMge1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgZmlsdGVyOiBGaWx0ZXIgdmFsdWUgd2hlbiBxdWVyeWluZyByZXNvdXJjZXNcbiAgICAgKi9cbiAgICByZWFkb25seSBmaWx0ZXI/OiBBcnJheTxSb3NDZW5CYW5kd2lkdGhQYWNrYWdlcy5GaWx0ZXJQcm9wZXJ0eSB8IHJvcy5JUmVzb2x2YWJsZT4gfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBpbmNsdWRlUmVzZXJ2YXRpb25EYXRhOiBTcGVjaWZpZXMgd2hldGhlciB0byBpbmNsdWRlIHJlbmV3YWwgZGF0YS5cbiAgICAgKi9cbiAgICByZWFkb25seSBpbmNsdWRlUmVzZXJ2YXRpb25EYXRhPzogYm9vbGVhbiB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGlzT3JLZXk6IFRoZSBsb2dpY2FsIG9wZXJhdG9yIGJldHdlZW4gdGhlIGZpbHRlciBjb25kaXRpb25zLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGlzT3JLZXk/OiBib29sZWFuIHwgcm9zLklSZXNvbHZhYmxlO1xufVxuXG4vKipcbiAqIEEgUk9TIHJlc291cmNlIHR5cGU6ICBgREFUQVNPVVJDRTo6Q0VOOjpDZW5CYW5kd2lkdGhQYWNrYWdlc2BcbiAqL1xuZXhwb3J0IGNsYXNzIENlbkJhbmR3aWR0aFBhY2thZ2VzIGV4dGVuZHMgcm9zLlJlc291cmNlIHtcblxuICAgIC8qKlxuICAgICAqIEEgZmFjdG9yeSBtZXRob2QgdGhhdCBjcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIHRoaXMgY2xhc3MgZnJvbSBhbiBvYmplY3RcbiAgICAgKiBjb250YWluaW5nIHRoZSBwcm9wZXJ0aWVzIG9mIHRoaXMgUk9TIHJlc291cmNlLCB3aGljaCB3aWxsIGJlIGFzc2lnbmVkIHRvIFJPUyByZXNvdXJjZS5cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBDZW5CYW5kd2lkdGhQYWNrYWdlSWRzOiBUaGUgbGlzdCBvZiBUaGUgQ2VuIGJhbmR3aWR0aCBpZHMuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJDZW5CYW5kd2lkdGhQYWNrYWdlSWRzOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgQ2VuQmFuZHdpZHRoUGFja2FnZXM6IFRoZSBpbmZvcm1hdGlvbiBhYm91dCBDZW5CYW5kd2lkdGhQYWNrYWdlcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckNlbkJhbmR3aWR0aFBhY2thZ2VzOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgYERBVEFTT1VSQ0U6OkNFTjo6Q2VuQmFuZHdpZHRoUGFja2FnZXNgLlxuICAgICAqXG4gICAgICogUGFyYW0gc2NvcGUgLSBzY29wZSBpbiB3aGljaCB0aGlzIHJlc291cmNlIGlzIGRlZmluZWRcbiAgICAgKiBQYXJhbSBpZCAgICAtIHNjb3BlZCBpZCBvZiB0aGUgcmVzb3VyY2VcbiAgICAgKiBQYXJhbSBwcm9wcyAtIHJlc291cmNlIHByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihzY29wZTogcm9zLkNvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IENlbkJhbmR3aWR0aFBhY2thZ2VzUHJvcHMgPSB7fSwgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6Ym9vbGVhbiA9IHRydWUpIHtcbiAgICAgICAgc3VwZXIoc2NvcGUsIGlkKTtcblxuICAgICAgICBjb25zdCByb3NDZW5CYW5kd2lkdGhQYWNrYWdlcyA9IG5ldyBSb3NDZW5CYW5kd2lkdGhQYWNrYWdlcyh0aGlzLCBpZCwgIHtcbiAgICAgICAgICAgIGlzT3JLZXk6IHByb3BzLmlzT3JLZXksXG4gICAgICAgICAgICBmaWx0ZXI6IHByb3BzLmZpbHRlcixcbiAgICAgICAgICAgIGluY2x1ZGVSZXNlcnZhdGlvbkRhdGE6IHByb3BzLmluY2x1ZGVSZXNlcnZhdGlvbkRhdGEsXG4gICAgICAgIH0sIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ICYmIHRoaXMuc3RhY2suZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQpO1xuICAgICAgICB0aGlzLnJlc291cmNlID0gcm9zQ2VuQmFuZHdpZHRoUGFja2FnZXM7XG4gICAgICAgIHRoaXMuYXR0ckNlbkJhbmR3aWR0aFBhY2thZ2VJZHMgPSByb3NDZW5CYW5kd2lkdGhQYWNrYWdlcy5hdHRyQ2VuQmFuZHdpZHRoUGFja2FnZUlkcztcbiAgICAgICAgdGhpcy5hdHRyQ2VuQmFuZHdpZHRoUGFja2FnZXMgPSByb3NDZW5CYW5kd2lkdGhQYWNrYWdlcy5hdHRyQ2VuQmFuZHdpZHRoUGFja2FnZXM7XG4gICAgfVxufVxuIl19