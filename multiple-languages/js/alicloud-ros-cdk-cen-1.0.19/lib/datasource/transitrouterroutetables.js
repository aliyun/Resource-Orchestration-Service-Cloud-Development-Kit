"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransitRouterRouteTables = exports.TransitRouterRouteTablesProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const cen_generated_1 = require("./cen.generated");
Object.defineProperty(exports, "TransitRouterRouteTablesProperty", { enumerable: true, get: function () { return cen_generated_1.RosTransitRouterRouteTables; } });
/**
 * A ROS resource type:  `DATASOURCE::CEN::TransitRouterRouteTables`
 */
class TransitRouterRouteTables extends ros.Resource {
    /**
     * Create a new `DATASOURCE::CEN::TransitRouterRouteTables`.
     *
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosTransitRouterRouteTables = new cen_generated_1.RosTransitRouterRouteTables(this, id, {
            transitRouterRouteTableIds: props.transitRouterRouteTableIds,
            transitRouterRouteTableStatus: props.transitRouterRouteTableStatus,
            transitRouterRouteTableNames: props.transitRouterRouteTableNames,
            transitRouterRouteTableType: props.transitRouterRouteTableType,
            transitRouterId: props.transitRouterId,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosTransitRouterRouteTables;
        this.attrTransitRouterRouteTableIds = rosTransitRouterRouteTables.attrTransitRouterRouteTableIds;
        this.attrTransitRouterRouteTables = rosTransitRouterRouteTables.attrTransitRouterRouteTables;
    }
}
exports.TransitRouterRouteTables = TransitRouterRouteTables;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNpdHJvdXRlcnJvdXRldGFibGVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidHJhbnNpdHJvdXRlcnJvdXRldGFibGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDhDQUE4QztBQUM5QyxtREFBOEQ7QUFFdEIsaUhBRi9CLDJDQUEyQixPQUVvQztBQXlDeEU7O0dBRUc7QUFDSCxNQUFhLHdCQUF5QixTQUFRLEdBQUcsQ0FBQyxRQUFRO0lBaUJ0RDs7Ozs7O09BTUc7SUFDSCxZQUFZLEtBQW9CLEVBQUUsRUFBVSxFQUFFLEtBQW9DLEVBQUUsbUNBQTJDLElBQUk7UUFDL0gsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUVqQixNQUFNLDJCQUEyQixHQUFHLElBQUksMkNBQTJCLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRztZQUMzRSwwQkFBMEIsRUFBRSxLQUFLLENBQUMsMEJBQTBCO1lBQzVELDZCQUE2QixFQUFFLEtBQUssQ0FBQyw2QkFBNkI7WUFDbEUsNEJBQTRCLEVBQUUsS0FBSyxDQUFDLDRCQUE0QjtZQUNoRSwyQkFBMkIsRUFBRSxLQUFLLENBQUMsMkJBQTJCO1lBQzlELGVBQWUsRUFBRSxLQUFLLENBQUMsZUFBZTtTQUN6QyxFQUFFLGdDQUFnQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztRQUNwRixJQUFJLENBQUMsUUFBUSxHQUFHLDJCQUEyQixDQUFDO1FBQzVDLElBQUksQ0FBQyw4QkFBOEIsR0FBRywyQkFBMkIsQ0FBQyw4QkFBOEIsQ0FBQztRQUNqRyxJQUFJLENBQUMsNEJBQTRCLEdBQUcsMkJBQTJCLENBQUMsNEJBQTRCLENBQUM7SUFDakcsQ0FBQztDQUNKO0FBdENELDREQXNDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHJvcyBmcm9tICdAYWxpY2xvdWQvcm9zLWNkay1jb3JlJztcbmltcG9ydCB7IFJvc1RyYW5zaXRSb3V0ZXJSb3V0ZVRhYmxlcyB9IGZyb20gJy4vY2VuLmdlbmVyYXRlZCc7XG4vLyBHZW5lcmF0ZWQgZnJvbSB0aGUgQWxpQ2xvdWQgUk9TIFJlc291cmNlIFNwZWNpZmljYXRpb25cbmV4cG9ydCB7IFJvc1RyYW5zaXRSb3V0ZXJSb3V0ZVRhYmxlcyBhcyBUcmFuc2l0Um91dGVyUm91dGVUYWJsZXNQcm9wZXJ0eSB9O1xuXG4vKipcbiAqIFByb3BlcnRpZXMgZm9yIGRlZmluaW5nIGEgYERBVEFTT1VSQ0U6OkNFTjo6VHJhbnNpdFJvdXRlclJvdXRlVGFibGVzYFxuICovXG5leHBvcnQgaW50ZXJmYWNlIFRyYW5zaXRSb3V0ZXJSb3V0ZVRhYmxlc1Byb3BzIHtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHRyYW5zaXRSb3V0ZXJJZDogVGhlIElEIG9mIHRoZSBFbnRlcnByaXNlIEVkaXRpb24gdHJhbnNpdCByb3V0ZXIuXG4gICAgICovXG4gICAgcmVhZG9ubHkgdHJhbnNpdFJvdXRlcklkOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSB0cmFuc2l0Um91dGVyUm91dGVUYWJsZUlkczogVGhlIElEIG9mIHRoZSByb3V0ZSB0YWJsZS5cbiAgICAgKiBZb3UgY2FuIHF1ZXJ5IG11bHRpcGxlIHJvdXRlIHRhYmxlcyBpbiBlYWNoIGNhbGwuIE1heGltdW0gdmFsdWUgb2YgTjogMjAuXG4gICAgICovXG4gICAgcmVhZG9ubHkgdHJhbnNpdFJvdXRlclJvdXRlVGFibGVJZHM/OiBBcnJheTxzdHJpbmcgfCByb3MuSVJlc29sdmFibGU+IHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgdHJhbnNpdFJvdXRlclJvdXRlVGFibGVOYW1lczogVGhlIG5hbWUgb2YgdGhlIHJvdXRlIHRhYmxlLlxuICAgICAqIFlvdSBjYW4gcXVlcnkgbXVsdGlwbGUgcm91dGUgdGFibGVzIGluIGVhY2ggY2FsbC4gTWF4aW11bSB2YWx1ZSBvZiBOOiAyMC5cbiAgICAgKiBOb3RlIElmIHlvdSBzcGVjaWZ5IGJvdGggVHJhbnNpdFJvdXRlclJvdXRlVGFibGVOYW1lcy5OIGFuZCBUcmFuc2l0Um91dGVyUm91dGVUYWJsZUlkcy5OLCBtYWtlIHN1cmUgdGhhdCB0aGUgc3BlY2lmaWVkIG5hbWUgYW5kIElEIGJlbG9uZyB0byB0aGUgc2FtZSByb3V0ZSB0YWJsZS5cbiAgICAgKi9cbiAgICByZWFkb25seSB0cmFuc2l0Um91dGVyUm91dGVUYWJsZU5hbWVzPzogQXJyYXk8c3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlPiB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHRyYW5zaXRSb3V0ZXJSb3V0ZVRhYmxlU3RhdHVzOiBUaGUgc3RhdGUgb2YgdGhlIHJvdXRlIHRhYmxlLiBWYWxpZCB2YWx1ZXM6XG4gICAgICogQ3JlYXRpbmc6IFRoZSByb3V0ZSB0YWJsZSBpcyBiZWluZyBjcmVhdGVkLlxuICAgICAqIERlbGV0aW5nOiBUaGUgcm91dGUgdGFibGUgaXMgYmVpbmcgZGVsZXRlZC5cbiAgICAgKiBBY3RpdmU6IFRoZSByb3V0ZSB0YWJsZSBpcyBhdmFpbGFibGUgZm9yIHVzZS5cbiAgICAgKi9cbiAgICByZWFkb25seSB0cmFuc2l0Um91dGVyUm91dGVUYWJsZVN0YXR1cz86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHRyYW5zaXRSb3V0ZXJSb3V0ZVRhYmxlVHlwZTogVGhlIHR5cGUgb2Ygcm91dGUgdGFibGUuIFZhbGlkIHZhbHVlczpcbiAgICAgKiBDdXN0b206IGEgY3VzdG9tIHJvdXRlIHRhYmxlXG4gICAgICogU3lzdGVtOiB0aGUgZGVmYXVsdCByb3V0ZSB0YWJsZVxuICAgICAqL1xuICAgIHJlYWRvbmx5IHRyYW5zaXRSb3V0ZXJSb3V0ZVRhYmxlVHlwZT86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcbn1cblxuLyoqXG4gKiBBIFJPUyByZXNvdXJjZSB0eXBlOiAgYERBVEFTT1VSQ0U6OkNFTjo6VHJhbnNpdFJvdXRlclJvdXRlVGFibGVzYFxuICovXG5leHBvcnQgY2xhc3MgVHJhbnNpdFJvdXRlclJvdXRlVGFibGVzIGV4dGVuZHMgcm9zLlJlc291cmNlIHtcblxuICAgIC8qKlxuICAgICAqIEEgZmFjdG9yeSBtZXRob2QgdGhhdCBjcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIHRoaXMgY2xhc3MgZnJvbSBhbiBvYmplY3RcbiAgICAgKiBjb250YWluaW5nIHRoZSBwcm9wZXJ0aWVzIG9mIHRoaXMgUk9TIHJlc291cmNlLCB3aGljaCB3aWxsIGJlIGFzc2lnbmVkIHRvIFJPUyByZXNvdXJjZS5cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBUcmFuc2l0Um91dGVyUm91dGVUYWJsZUlkczogVGhlIGxpc3Qgb2YgVHJhbnNpdFJvdXRlclJvdXRlVGFibGUgSURzLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyVHJhbnNpdFJvdXRlclJvdXRlVGFibGVJZHM6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBUcmFuc2l0Um91dGVyUm91dGVUYWJsZXM6IFRoZSBsaXN0IG9mIFRyYW5zaXRSb3V0ZXJSb3V0ZVRhYmxlcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0clRyYW5zaXRSb3V0ZXJSb3V0ZVRhYmxlczogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IGBEQVRBU09VUkNFOjpDRU46OlRyYW5zaXRSb3V0ZXJSb3V0ZVRhYmxlc2AuXG4gICAgICpcbiAgICAgKiBQYXJhbSBzY29wZSAtIHNjb3BlIGluIHdoaWNoIHRoaXMgcmVzb3VyY2UgaXMgZGVmaW5lZFxuICAgICAqIFBhcmFtIGlkICAgIC0gc2NvcGVkIGlkIG9mIHRoZSByZXNvdXJjZVxuICAgICAqIFBhcmFtIHByb3BzIC0gcmVzb3VyY2UgcHJvcGVydGllc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiByb3MuQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogVHJhbnNpdFJvdXRlclJvdXRlVGFibGVzUHJvcHMsIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OmJvb2xlYW4gPSB0cnVlKSB7XG4gICAgICAgIHN1cGVyKHNjb3BlLCBpZCk7XG5cbiAgICAgICAgY29uc3Qgcm9zVHJhbnNpdFJvdXRlclJvdXRlVGFibGVzID0gbmV3IFJvc1RyYW5zaXRSb3V0ZXJSb3V0ZVRhYmxlcyh0aGlzLCBpZCwgIHtcbiAgICAgICAgICAgIHRyYW5zaXRSb3V0ZXJSb3V0ZVRhYmxlSWRzOiBwcm9wcy50cmFuc2l0Um91dGVyUm91dGVUYWJsZUlkcyxcbiAgICAgICAgICAgIHRyYW5zaXRSb3V0ZXJSb3V0ZVRhYmxlU3RhdHVzOiBwcm9wcy50cmFuc2l0Um91dGVyUm91dGVUYWJsZVN0YXR1cyxcbiAgICAgICAgICAgIHRyYW5zaXRSb3V0ZXJSb3V0ZVRhYmxlTmFtZXM6IHByb3BzLnRyYW5zaXRSb3V0ZXJSb3V0ZVRhYmxlTmFtZXMsXG4gICAgICAgICAgICB0cmFuc2l0Um91dGVyUm91dGVUYWJsZVR5cGU6IHByb3BzLnRyYW5zaXRSb3V0ZXJSb3V0ZVRhYmxlVHlwZSxcbiAgICAgICAgICAgIHRyYW5zaXRSb3V0ZXJJZDogcHJvcHMudHJhbnNpdFJvdXRlcklkLFxuICAgICAgICB9LCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCAmJiB0aGlzLnN0YWNrLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50KTtcbiAgICAgICAgdGhpcy5yZXNvdXJjZSA9IHJvc1RyYW5zaXRSb3V0ZXJSb3V0ZVRhYmxlcztcbiAgICAgICAgdGhpcy5hdHRyVHJhbnNpdFJvdXRlclJvdXRlVGFibGVJZHMgPSByb3NUcmFuc2l0Um91dGVyUm91dGVUYWJsZXMuYXR0clRyYW5zaXRSb3V0ZXJSb3V0ZVRhYmxlSWRzO1xuICAgICAgICB0aGlzLmF0dHJUcmFuc2l0Um91dGVyUm91dGVUYWJsZXMgPSByb3NUcmFuc2l0Um91dGVyUm91dGVUYWJsZXMuYXR0clRyYW5zaXRSb3V0ZXJSb3V0ZVRhYmxlcztcbiAgICB9XG59XG4iXX0=