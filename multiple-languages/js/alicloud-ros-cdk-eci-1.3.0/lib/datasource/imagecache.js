"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImageCache = exports.ImageCacheProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const eci_generated_1 = require("./eci.generated");
Object.defineProperty(exports, "ImageCacheProperty", { enumerable: true, get: function () { return eci_generated_1.RosImageCache; } });
/**
 * This class encapsulates and extends the ROS resource type `DATASOURCE::ECI::ImageCache`, which is used to query the information about an image cache.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosImageCache`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/datasource-eci-imagecache
 */
class ImageCache extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosImageCache = new eci_generated_1.RosImageCache(this, id, {
            imageCacheId: props.imageCacheId,
            refreshOptions: props.refreshOptions === undefined || props.refreshOptions === null ? 'Never' : props.refreshOptions,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosImageCache;
        this.attrContainerGroupId = rosImageCache.attrContainerGroupId;
        this.attrCreateTime = rosImageCache.attrCreateTime;
        this.attrEliminationStrategy = rosImageCache.attrEliminationStrategy;
        this.attrEvents = rosImageCache.attrEvents;
        this.attrExpireDateTime = rosImageCache.attrExpireDateTime;
        this.attrFlashSnapshotId = rosImageCache.attrFlashSnapshotId;
        this.attrImageCacheId = rosImageCache.attrImageCacheId;
        this.attrImageCacheName = rosImageCache.attrImageCacheName;
        this.attrImageCacheSize = rosImageCache.attrImageCacheSize;
        this.attrImageCacheTags = rosImageCache.attrImageCacheTags;
        this.attrImages = rosImageCache.attrImages;
        this.attrProgress = rosImageCache.attrProgress;
        this.attrResourceGroupId = rosImageCache.attrResourceGroupId;
        this.attrSnapshotId = rosImageCache.attrSnapshotId;
    }
}
exports.ImageCache = ImageCache;
//# sourceMappingURL=data:application/json;base64,