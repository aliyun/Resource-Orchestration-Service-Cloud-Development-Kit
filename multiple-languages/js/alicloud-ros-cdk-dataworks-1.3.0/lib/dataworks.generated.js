"use strict";
// Generated from the AliCloud ROS Resource Specification
Object.defineProperty(exports, "__esModule", { value: true });
exports.RosProject = void 0;
const ros = require("@alicloud/ros-cdk-core");
/**
 * Determine whether the given properties match those of a `RosProjectProps`
 *
 * @param properties - the TypeScript properties of a `RosProjectProps`
 *
 * @returns the result of the validation.
 */
function RosProjectPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('projectIdentifier', ros.requiredValidator)(properties.projectIdentifier));
    if (properties.projectIdentifier && (typeof properties.projectIdentifier) !== 'object') {
        errors.collect(ros.propertyValidator('projectIdentifier', ros.validateAllowedPattern)({
            data: properties.projectIdentifier,
            reg: /^[a-zA-Z][a-zA-Z0-9_]{2,27}$/
        }));
    }
    errors.collect(ros.propertyValidator('projectIdentifier', ros.validateString)(properties.projectIdentifier));
    errors.collect(ros.propertyValidator('resourceGroupId', ros.validateString)(properties.resourceGroupId));
    if (properties.projectName && (Array.isArray(properties.projectName) || (typeof properties.projectName) === 'string')) {
        errors.collect(ros.propertyValidator('projectName', ros.validateLength)({
            data: properties.projectName.length,
            min: undefined,
            max: 23,
        }));
    }
    errors.collect(ros.propertyValidator('projectName', ros.validateString)(properties.projectName));
    errors.collect(ros.propertyValidator('isAllowDownload', ros.validateBoolean)(properties.isAllowDownload));
    if (properties.projectDescription && (Array.isArray(properties.projectDescription) || (typeof properties.projectDescription) === 'string')) {
        errors.collect(ros.propertyValidator('projectDescription', ros.validateLength)({
            data: properties.projectDescription.length,
            min: undefined,
            max: 80,
        }));
    }
    errors.collect(ros.propertyValidator('projectDescription', ros.validateString)(properties.projectDescription));
    if (properties.projectMode && (typeof properties.projectMode) !== 'object') {
        errors.collect(ros.propertyValidator('projectMode', ros.validateAllowedValues)({
            data: properties.projectMode,
            allowedValues: [2, 3],
        }));
    }
    errors.collect(ros.propertyValidator('projectMode', ros.validateNumber)(properties.projectMode));
    if (properties.tags && (Array.isArray(properties.tags) || (typeof properties.tags) === 'string')) {
        errors.collect(ros.propertyValidator('tags', ros.validateLength)({
            data: properties.tags.length,
            min: undefined,
            max: 20,
        }));
    }
    errors.collect(ros.propertyValidator('tags', ros.listValidator(RosProject_TagsPropertyValidator))(properties.tags));
    errors.collect(ros.propertyValidator('disableDevelopment', ros.validateBoolean)(properties.disableDevelopment));
    return errors.wrap('supplied properties not correct for "RosProjectProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::DataWorks::Project` resource
 *
 * @param properties - the TypeScript properties of a `RosProjectProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::DataWorks::Project` resource.
 */
// @ts-ignore TS6133
function rosProjectPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosProjectPropsValidator(properties).assertSuccess();
    }
    return {
        'ProjectIdentifier': ros.stringToRosTemplate(properties.projectIdentifier),
        'DisableDevelopment': ros.booleanToRosTemplate(properties.disableDevelopment),
        'IsAllowDownload': ros.booleanToRosTemplate(properties.isAllowDownload),
        'ProjectDescription': ros.stringToRosTemplate(properties.projectDescription),
        'ProjectMode': ros.numberToRosTemplate(properties.projectMode),
        'ProjectName': ros.stringToRosTemplate(properties.projectName),
        'ResourceGroupId': ros.stringToRosTemplate(properties.resourceGroupId),
        'Tags': ros.listMapper(rosProjectTagsPropertyToRosTemplate)(properties.tags),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::DataWorks::Project`.
 * @Note This class does not contain additional functions, so it is recommended to use the `Project` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-dataworks-project
 */
class RosProject extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosProject.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrEnvTypes = this.getAtt('EnvTypes');
        this.attrIsDefault = this.getAtt('IsDefault');
        this.attrProjectId = this.getAtt('ProjectId');
        this.attrProjectIdentifier = this.getAtt('ProjectIdentifier');
        this.attrProtectedMode = this.getAtt('ProtectedMode');
        this.attrResidentArea = this.getAtt('ResidentArea');
        this.attrSchedulerMaxRetryTimes = this.getAtt('SchedulerMaxRetryTimes');
        this.attrSchedulerRetryInterval = this.getAtt('SchedulerRetryInterval');
        this.attrTablePrivacyMode = this.getAtt('TablePrivacyMode');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.projectIdentifier = props.projectIdentifier;
        this.disableDevelopment = props.disableDevelopment;
        this.isAllowDownload = props.isAllowDownload;
        this.projectDescription = props.projectDescription;
        this.projectMode = props.projectMode;
        this.projectName = props.projectName;
        this.resourceGroupId = props.resourceGroupId;
        this.tags = props.tags;
    }
    get rosProperties() {
        return {
            projectIdentifier: this.projectIdentifier,
            disableDevelopment: this.disableDevelopment,
            isAllowDownload: this.isAllowDownload,
            projectDescription: this.projectDescription,
            projectMode: this.projectMode,
            projectName: this.projectName,
            resourceGroupId: this.resourceGroupId,
            tags: this.tags,
        };
    }
    renderProperties(props) {
        return rosProjectPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosProject = RosProject;
/**
 * The resource type name for this resource class.
 */
RosProject.ROS_RESOURCE_TYPE_NAME = "ALIYUN::DataWorks::Project";
/**
 * Determine whether the given properties match those of a `TagsProperty`
 *
 * @param properties - the TypeScript properties of a `TagsProperty`
 *
 * @returns the result of the validation.
 */
function RosProject_TagsPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('value', ros.validateString)(properties.value));
    errors.collect(ros.propertyValidator('key', ros.requiredValidator)(properties.key));
    errors.collect(ros.propertyValidator('key', ros.validateString)(properties.key));
    return errors.wrap('supplied properties not correct for "TagsProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::DataWorks::Project.Tags` resource
 *
 * @param properties - the TypeScript properties of a `TagsProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::DataWorks::Project.Tags` resource.
 */
// @ts-ignore TS6133
function rosProjectTagsPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosProject_TagsPropertyValidator(properties).assertSuccess();
    return {
        'Value': ros.stringToRosTemplate(properties.value),
        'Key': ros.stringToRosTemplate(properties.key),
    };
}
//# sourceMappingURL=data:application/json;base64,