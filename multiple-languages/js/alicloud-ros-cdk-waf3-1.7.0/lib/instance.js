"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Instance = exports.InstanceProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const waf3_generated_1 = require("./waf3.generated");
Object.defineProperty(exports, "InstanceProperty", { enumerable: true, get: function () { return waf3_generated_1.RosInstance; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::WAF3::Instance`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosInstance`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-waf3-instance
 */
class Instance extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosInstance = new waf3_generated_1.RosInstance(this, id, {
            ignoreExisting: props.ignoreExisting === undefined || props.ignoreExisting === null ? false : props.ignoreExisting,
            intelligentLoadBalancing: props.intelligentLoadBalancing,
            autoRenew: props.autoRenew,
            period: props.period,
            botWebProtection: props.botWebProtection === undefined || props.botWebProtection === null ? true : props.botWebProtection,
            apiSecurity: props.apiSecurity,
            autoPay: props.autoPay === undefined || props.autoPay === null ? false : props.autoPay,
            trafficBillingProtectionThreshold: props.trafficBillingProtectionThreshold,
            payType: props.payType,
            logStorage: props.logStorage,
            elasticQps: props.elasticQps === undefined || props.elasticQps === null ? 0 : props.elasticQps,
            domainsExtension: props.domainsExtension === undefined || props.domainsExtension === null ? 0 : props.domainsExtension,
            wafVersion: props.wafVersion,
            exclusiveIpAddress: props.exclusiveIpAddress === undefined || props.exclusiveIpAddress === null ? 0 : props.exclusiveIpAddress,
            additionalProtectionNodes: props.additionalProtectionNodes === undefined || props.additionalProtectionNodes === null ? 0 : props.additionalProtectionNodes,
            region: props.region,
            qpsExtension: props.qpsExtension === undefined || props.qpsExtension === null ? 0 : props.qpsExtension,
            fraudDetection: props.fraudDetection === undefined || props.fraudDetection === null ? true : props.fraudDetection,
            botAppProtection: props.botAppProtection === undefined || props.botAppProtection === null ? true : props.botAppProtection,
            logService: props.logService,
            periodUnit: props.periodUnit,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosInstance;
        this.attrInstanceId = rosInstance.attrInstanceId;
    }
}
exports.Instance = Instance;
//# sourceMappingURL=data:application/json;base64,