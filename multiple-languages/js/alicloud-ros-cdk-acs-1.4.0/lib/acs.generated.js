"use strict";
// Generated from the AliCloud ROS Resource Specification
Object.defineProperty(exports, "__esModule", { value: true });
exports.RosCluster = void 0;
const ros = require("@alicloud/ros-cdk-core");
/**
 * Determine whether the given properties match those of a `RosClusterProps`
 *
 * @param properties - the TypeScript properties of a `RosClusterProps`
 *
 * @returns the result of the validation.
 */
function RosClusterPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('kubernetesVersion', ros.validateString)(properties.kubernetesVersion));
    errors.collect(ros.propertyValidator('endpointPublicAccess', ros.validateBoolean)(properties.endpointPublicAccess));
    errors.collect(ros.propertyValidator('zoneId', ros.validateString)(properties.zoneId));
    errors.collect(ros.propertyValidator('resourceGroupId', ros.validateString)(properties.resourceGroupId));
    if (properties.vSwitchIds && (Array.isArray(properties.vSwitchIds) || (typeof properties.vSwitchIds) === 'string')) {
        errors.collect(ros.propertyValidator('vSwitchIds', ros.validateLength)({
            data: properties.vSwitchIds.length,
            min: 1,
            max: 3,
        }));
    }
    errors.collect(ros.propertyValidator('vSwitchIds', ros.listValidator(ros.validateString))(properties.vSwitchIds));
    errors.collect(ros.propertyValidator('addons', ros.listValidator(RosCluster_AddonsPropertyValidator))(properties.addons));
    errors.collect(ros.propertyValidator('podVSwitchIds', ros.listValidator(ros.validateString))(properties.podVSwitchIds));
    errors.collect(ros.propertyValidator('deletionProtection', ros.validateBoolean)(properties.deletionProtection));
    errors.collect(ros.propertyValidator('clusterSpec', ros.validateString)(properties.clusterSpec));
    errors.collect(ros.propertyValidator('loggingType', ros.validateString)(properties.loggingType));
    errors.collect(ros.propertyValidator('ipStack', ros.validateString)(properties.ipStack));
    errors.collect(ros.propertyValidator('name', ros.requiredValidator)(properties.name));
    errors.collect(ros.propertyValidator('name', ros.validateString)(properties.name));
    errors.collect(ros.propertyValidator('loadBalancerSpec', ros.validateString)(properties.loadBalancerSpec));
    errors.collect(ros.propertyValidator('timeZone', ros.validateString)(properties.timeZone));
    if (properties.serviceDiscoveryTypes && (Array.isArray(properties.serviceDiscoveryTypes) || (typeof properties.serviceDiscoveryTypes) === 'string')) {
        errors.collect(ros.propertyValidator('serviceDiscoveryTypes', ros.validateLength)({
            data: properties.serviceDiscoveryTypes.length,
            min: 1,
            max: 2,
        }));
    }
    errors.collect(ros.propertyValidator('serviceDiscoveryTypes', ros.listValidator(ros.validateString))(properties.serviceDiscoveryTypes));
    errors.collect(ros.propertyValidator('vpcId', ros.validateString)(properties.vpcId));
    errors.collect(ros.propertyValidator('slsProjectName', ros.validateString)(properties.slsProjectName));
    errors.collect(ros.propertyValidator('serviceCidr', ros.validateString)(properties.serviceCidr));
    errors.collect(ros.propertyValidator('snatEntry', ros.validateBoolean)(properties.snatEntry));
    errors.collect(ros.propertyValidator('maintenanceWindow', RosCluster_MaintenanceWindowPropertyValidator)(properties.maintenanceWindow));
    errors.collect(ros.propertyValidator('tags', ros.listValidator(RosCluster_TagsPropertyValidator))(properties.tags));
    return errors.wrap('supplied properties not correct for "RosClusterProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ACS::Cluster` resource
 *
 * @param properties - the TypeScript properties of a `RosClusterProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ACS::Cluster` resource.
 */
// @ts-ignore TS6133
function rosClusterPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosClusterPropsValidator(properties).assertSuccess();
    }
    return {
        'Name': ros.stringToRosTemplate(properties.name),
        'Addons': ros.listMapper(rosClusterAddonsPropertyToRosTemplate)(properties.addons),
        'ClusterSpec': ros.stringToRosTemplate(properties.clusterSpec),
        'DeletionProtection': ros.booleanToRosTemplate(properties.deletionProtection),
        'EndpointPublicAccess': ros.booleanToRosTemplate(properties.endpointPublicAccess),
        'IpStack': ros.stringToRosTemplate(properties.ipStack),
        'KubernetesVersion': ros.stringToRosTemplate(properties.kubernetesVersion),
        'LoadBalancerSpec': ros.stringToRosTemplate(properties.loadBalancerSpec),
        'LoggingType': ros.stringToRosTemplate(properties.loggingType),
        'MaintenanceWindow': rosClusterMaintenanceWindowPropertyToRosTemplate(properties.maintenanceWindow),
        'PodVSwitchIds': ros.listMapper(ros.stringToRosTemplate)(properties.podVSwitchIds),
        'ResourceGroupId': ros.stringToRosTemplate(properties.resourceGroupId),
        'ServiceCidr': ros.stringToRosTemplate(properties.serviceCidr),
        'ServiceDiscoveryTypes': ros.listMapper(ros.stringToRosTemplate)(properties.serviceDiscoveryTypes),
        'SlsProjectName': ros.stringToRosTemplate(properties.slsProjectName),
        'SnatEntry': ros.booleanToRosTemplate(properties.snatEntry),
        'Tags': ros.listMapper(rosClusterTagsPropertyToRosTemplate)(properties.tags),
        'TimeZone': ros.stringToRosTemplate(properties.timeZone),
        'VpcId': ros.stringToRosTemplate(properties.vpcId),
        'VSwitchIds': ros.listMapper(ros.stringToRosTemplate)(properties.vSwitchIds),
        'ZoneId': ros.stringToRosTemplate(properties.zoneId),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::ACS::Cluster`.
 * @Note This class does not contain additional functions, so it is recommended to use the `Cluster` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-acs-cluster
 */
class RosCluster extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosCluster.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrApiServerSlbId = this.getAtt('APIServerSLBId');
        this.attrClusterId = this.getAtt('ClusterId');
        this.attrDefaultUserKubeConfig = this.getAtt('DefaultUserKubeConfig');
        this.attrIngressSlbId = this.getAtt('IngressSLBId');
        this.attrNodes = this.getAtt('Nodes');
        this.attrPrivateUserKubConfig = this.getAtt('PrivateUserKubConfig');
        this.attrScalingConfigurationId = this.getAtt('ScalingConfigurationId');
        this.attrScalingGroupId = this.getAtt('ScalingGroupId');
        this.attrScalingRuleId = this.getAtt('ScalingRuleId');
        this.attrTaskId = this.getAtt('TaskId');
        this.attrWorkerRamRoleName = this.getAtt('WorkerRamRoleName');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.name = props.name;
        this.addons = props.addons;
        this.clusterSpec = props.clusterSpec;
        this.deletionProtection = props.deletionProtection;
        this.endpointPublicAccess = props.endpointPublicAccess;
        this.ipStack = props.ipStack;
        this.kubernetesVersion = props.kubernetesVersion;
        this.loadBalancerSpec = props.loadBalancerSpec;
        this.loggingType = props.loggingType;
        this.maintenanceWindow = props.maintenanceWindow;
        this.podVSwitchIds = props.podVSwitchIds;
        this.resourceGroupId = props.resourceGroupId;
        this.serviceCidr = props.serviceCidr;
        this.serviceDiscoveryTypes = props.serviceDiscoveryTypes;
        this.slsProjectName = props.slsProjectName;
        this.snatEntry = props.snatEntry;
        this.tags = props.tags;
        this.timeZone = props.timeZone;
        this.vpcId = props.vpcId;
        this.vSwitchIds = props.vSwitchIds;
        this.zoneId = props.zoneId;
    }
    get rosProperties() {
        return {
            name: this.name,
            addons: this.addons,
            clusterSpec: this.clusterSpec,
            deletionProtection: this.deletionProtection,
            endpointPublicAccess: this.endpointPublicAccess,
            ipStack: this.ipStack,
            kubernetesVersion: this.kubernetesVersion,
            loadBalancerSpec: this.loadBalancerSpec,
            loggingType: this.loggingType,
            maintenanceWindow: this.maintenanceWindow,
            podVSwitchIds: this.podVSwitchIds,
            resourceGroupId: this.resourceGroupId,
            serviceCidr: this.serviceCidr,
            serviceDiscoveryTypes: this.serviceDiscoveryTypes,
            slsProjectName: this.slsProjectName,
            snatEntry: this.snatEntry,
            tags: this.tags,
            timeZone: this.timeZone,
            vpcId: this.vpcId,
            vSwitchIds: this.vSwitchIds,
            zoneId: this.zoneId,
        };
    }
    renderProperties(props) {
        return rosClusterPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosCluster = RosCluster;
/**
 * The resource type name for this resource class.
 */
RosCluster.ROS_RESOURCE_TYPE_NAME = "ALIYUN::ACS::Cluster";
/**
 * Determine whether the given properties match those of a `AddonsProperty`
 *
 * @param properties - the TypeScript properties of a `AddonsProperty`
 *
 * @returns the result of the validation.
 */
function RosCluster_AddonsPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('config', ros.validateString)(properties.config));
    errors.collect(ros.propertyValidator('disabled', ros.validateBoolean)(properties.disabled));
    errors.collect(ros.propertyValidator('name', ros.requiredValidator)(properties.name));
    errors.collect(ros.propertyValidator('name', ros.validateString)(properties.name));
    return errors.wrap('supplied properties not correct for "AddonsProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ACS::Cluster.Addons` resource
 *
 * @param properties - the TypeScript properties of a `AddonsProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ACS::Cluster.Addons` resource.
 */
// @ts-ignore TS6133
function rosClusterAddonsPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosCluster_AddonsPropertyValidator(properties).assertSuccess();
    return {
        'Config': ros.stringToRosTemplate(properties.config),
        'Disabled': ros.booleanToRosTemplate(properties.disabled),
        'Name': ros.stringToRosTemplate(properties.name),
    };
}
/**
 * Determine whether the given properties match those of a `MaintenanceWindowProperty`
 *
 * @param properties - the TypeScript properties of a `MaintenanceWindowProperty`
 *
 * @returns the result of the validation.
 */
function RosCluster_MaintenanceWindowPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('maintenanceTime', ros.validateString)(properties.maintenanceTime));
    if (properties.weeklyPeriod && (typeof properties.weeklyPeriod) !== 'object') {
        errors.collect(ros.propertyValidator('weeklyPeriod', ros.validateAllowedValues)({
            data: properties.weeklyPeriod,
            allowedValues: ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"],
        }));
    }
    errors.collect(ros.propertyValidator('weeklyPeriod', ros.validateString)(properties.weeklyPeriod));
    errors.collect(ros.propertyValidator('enable', ros.validateBoolean)(properties.enable));
    errors.collect(ros.propertyValidator('duration', ros.validateString)(properties.duration));
    return errors.wrap('supplied properties not correct for "MaintenanceWindowProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ACS::Cluster.MaintenanceWindow` resource
 *
 * @param properties - the TypeScript properties of a `MaintenanceWindowProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ACS::Cluster.MaintenanceWindow` resource.
 */
// @ts-ignore TS6133
function rosClusterMaintenanceWindowPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosCluster_MaintenanceWindowPropertyValidator(properties).assertSuccess();
    return {
        'MaintenanceTime': ros.stringToRosTemplate(properties.maintenanceTime),
        'WeeklyPeriod': ros.stringToRosTemplate(properties.weeklyPeriod),
        'Enable': ros.booleanToRosTemplate(properties.enable),
        'Duration': ros.stringToRosTemplate(properties.duration),
    };
}
/**
 * Determine whether the given properties match those of a `TagsProperty`
 *
 * @param properties - the TypeScript properties of a `TagsProperty`
 *
 * @returns the result of the validation.
 */
function RosCluster_TagsPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('value', ros.validateString)(properties.value));
    errors.collect(ros.propertyValidator('key', ros.requiredValidator)(properties.key));
    errors.collect(ros.propertyValidator('key', ros.validateString)(properties.key));
    return errors.wrap('supplied properties not correct for "TagsProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ACS::Cluster.Tags` resource
 *
 * @param properties - the TypeScript properties of a `TagsProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ACS::Cluster.Tags` resource.
 */
// @ts-ignore TS6133
function rosClusterTagsPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosCluster_TagsPropertyValidator(properties).assertSuccess();
    return {
        'Value': ros.stringToRosTemplate(properties.value),
        'Key': ros.stringToRosTemplate(properties.key),
    };
}
//# sourceMappingURL=data:application/json;base64,