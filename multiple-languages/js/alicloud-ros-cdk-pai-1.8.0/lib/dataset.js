"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Dataset = exports.DatasetProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const pai_generated_1 = require("./pai.generated");
Object.defineProperty(exports, "DatasetProperty", { enumerable: true, get: function () { return pai_generated_1.RosDataset; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::PAI::Dataset`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosDataset`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-pai-dataset
 */
class Dataset extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosDataset = new pai_generated_1.RosDataset(this, id, {
            options: props.options,
            description: props.description,
            accessibility: props.accessibility,
            datasetName: props.datasetName,
            sourceType: props.sourceType,
            sourceId: props.sourceId,
            dataSourceType: props.dataSourceType,
            workspaceId: props.workspaceId,
            dataType: props.dataType,
            uri: props.uri,
            property: props.property,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosDataset;
        this.attrAccessibility = rosDataset.attrAccessibility;
        this.attrCreateTime = rosDataset.attrCreateTime;
        this.attrDataSourceType = rosDataset.attrDataSourceType;
        this.attrDataType = rosDataset.attrDataType;
        this.attrDatasetId = rosDataset.attrDatasetId;
        this.attrDatasetName = rosDataset.attrDatasetName;
        this.attrDescription = rosDataset.attrDescription;
        this.attrGmtModifiedTime = rosDataset.attrGmtModifiedTime;
        this.attrOptions = rosDataset.attrOptions;
        this.attrOwnerId = rosDataset.attrOwnerId;
        this.attrProperty = rosDataset.attrProperty;
        this.attrSourceId = rosDataset.attrSourceId;
        this.attrSourceType = rosDataset.attrSourceType;
        this.attrUri = rosDataset.attrUri;
        this.attrUserId = rosDataset.attrUserId;
        this.attrWorkspaceId = rosDataset.attrWorkspaceId;
    }
}
exports.Dataset = Dataset;
//# sourceMappingURL=data:application/json;base64,