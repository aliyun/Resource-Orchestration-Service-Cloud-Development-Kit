"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NatIpCidrs = exports.NatIpCidrsProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const vpc_generated_1 = require("./vpc.generated");
Object.defineProperty(exports, "NatIpCidrsProperty", { enumerable: true, get: function () { return vpc_generated_1.RosNatIpCidrs; } });
/**
 * This class encapsulates and extends the ROS resource type `DATASOURCE::VPC::NatIpCidrs`, which is used to query the CIDR blocks of a NAT gateway.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosNatIpCidrs`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/datasource-vpc-natipcidrs
 */
class NatIpCidrs extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosNatIpCidrs = new vpc_generated_1.RosNatIpCidrs(this, id, {
            natIpCidr: props.natIpCidr,
            natGatewayId: props.natGatewayId,
            refreshOptions: props.refreshOptions === undefined || props.refreshOptions === null ? 'Never' : props.refreshOptions,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosNatIpCidrs;
        this.attrNatIpCidrIds = rosNatIpCidrs.attrNatIpCidrIds;
        this.attrNatIpCidrs = rosNatIpCidrs.attrNatIpCidrs;
    }
}
exports.NatIpCidrs = NatIpCidrs;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF0aXBjaWRycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm5hdGlwY2lkcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsOENBQThDO0FBQzlDLG1EQUFnRDtBQUV0QixtR0FGakIsNkJBQWEsT0FFc0I7QUEyQzVDOzs7O0dBSUc7QUFDSCxNQUFhLFVBQVcsU0FBUSxHQUFHLENBQUMsUUFBUTtJQWdCeEM7Ozs7T0FJRztJQUNILFlBQVksS0FBb0IsRUFBRSxFQUFVLEVBQUUsS0FBc0IsRUFBRSxtQ0FBMkMsSUFBSTtRQUNqSCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ2pCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQ2IsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLGdDQUFnQyxHQUFHLGdDQUFnQyxDQUFDO1FBRXpFLE1BQU0sYUFBYSxHQUFHLElBQUksNkJBQWEsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFHO1lBQy9DLFNBQVMsRUFBRSxLQUFLLENBQUMsU0FBUztZQUMxQixZQUFZLEVBQUUsS0FBSyxDQUFDLFlBQVk7WUFDaEMsY0FBYyxFQUFFLEtBQUssQ0FBQyxjQUFjLEtBQUssU0FBUyxJQUFJLEtBQUssQ0FBQyxjQUFjLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxjQUFjO1NBQ3ZILEVBQUUsZ0NBQWdDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO1FBQ3BGLElBQUksQ0FBQyxRQUFRLEdBQUcsYUFBYSxDQUFDO1FBQzlCLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxhQUFhLENBQUMsZ0JBQWdCLENBQUM7UUFDdkQsSUFBSSxDQUFDLGNBQWMsR0FBRyxhQUFhLENBQUMsY0FBYyxDQUFDO0lBQ3ZELENBQUM7Q0FDSjtBQXJDRCxnQ0FxQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyByb3MgZnJvbSAnQGFsaWNsb3VkL3Jvcy1jZGstY29yZSc7XG5pbXBvcnQgeyBSb3NOYXRJcENpZHJzIH0gZnJvbSAnLi92cGMuZ2VuZXJhdGVkJztcbi8vIEdlbmVyYXRlZCBmcm9tIHRoZSBBbGlDbG91ZCBST1MgUmVzb3VyY2UgU3BlY2lmaWNhdGlvblxuZXhwb3J0IHsgUm9zTmF0SXBDaWRycyBhcyBOYXRJcENpZHJzUHJvcGVydHkgfTtcblxuLyoqXG4gKiBQcm9wZXJ0aWVzIGZvciBkZWZpbmluZyBhIGBOYXRJcENpZHJzYC5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvZGF0YXNvdXJjZS12cGMtbmF0aXBjaWRyc1xuICovXG5leHBvcnQgaW50ZXJmYWNlIE5hdElwQ2lkcnNQcm9wcyB7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBuYXRHYXRld2F5SWQ6IE5BVCBJUCBBRERSRVNTIHJhbmdlIHRvIHRoZSBzZWN1cml0eSBncm91cCBvZiB0aGUgS2Fma2EgVlBDIE5BVCBnYXRld2F5IGluc3RhbmNlIElELlxuICAgICAqL1xuICAgIHJlYWRvbmx5IG5hdEdhdGV3YXlJZDogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgbmF0SXBDaWRyOiBDcmVhdGUgYSBOQVQgSVAgQUREUkVTUy4gVGhlIG5ldyBhZGRyZXNzIHNlZ21lbnQgbXVzdCBtZWV0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczogYmVsb25nIHRvIDEwLjAuMC4wXFwvOCwgMTcyLjE2LjAuMFxcLzEyIG9yIDE5Mi4xNjguMC4wXFwvMTYgbmV0d29yayBzZWdtZW50IGFuZCBpdHMgc3VibmV0LiBTdXBwb3J0IHRoZSBzdWJuZXQgbWFzayBvZiB0aGUgbnVtYmVyIG9mIGJpdHMgaW4gdGhlIHJhbmdlIG9mIDE2IHRvIDMyLWJpdC4gSWYgeW91IHdhbnQgdG8gdXNlIHRoZSBJUCBhZGRyZXNzIG9mIGEgcHVibGljIG5ldHdvcmsgc2VnbWVudCBhcyB0aGUgTkFUIElQIEFERFJFU1MsIHRoZSBWaXJ0dWFsIFByaXZhdGUgQ2xvdWQgKFZQQyBOQVQgaXMgYWxyZWFkeSB1c2luZyB0aGUgSVAgYWRkcmVzcyBvZiBhIHB1YmxpYyBuZXR3b3JrIG9mIHBlcm1pc3Npb25zLiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlIGNyZWF0ZSBhIHZpcnR1YWwgcHJpdmF0ZSBjbG91ZCAoVlBDIE5BVCBnYXRld2F5IGluc3RhbmNlLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IG5hdElwQ2lkcj86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHJlZnJlc2hPcHRpb25zOiBUaGUgcmVmcmVzaCBzdHJhdGVneSBmb3IgdGhlIGRhdGFzb3VyY2UgcmVzb3VyY2Ugd2hlbiB0aGUgc3RhY2sgaXMgdXBkYXRlZC4gVmFsaWQgdmFsdWVzOlxuICAgICAqIC0gTmV2ZXI6IE5ldmVyIHJlZnJlc2ggdGhlIGRhdGFzb3VyY2UgcmVzb3VyY2Ugd2hlbiB0aGUgc3RhY2sgaXMgdXBkYXRlZC5cbiAgICAgKiAtIEFsd2F5czogQWx3YXlzIHJlZnJlc2ggdGhlIGRhdGFzb3VyY2UgcmVzb3VyY2Ugd2hlbiB0aGUgc3RhY2sgaXMgdXBkYXRlZC5cbiAgICAgKiBEZWZhdWx0IGlzIE5ldmVyLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHJlZnJlc2hPcHRpb25zPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xufVxuXG4vKipcbiAqIFJlcHJlc2VudHMgYSBgTmF0SXBDaWRyc2AuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSU5hdElwQ2lkcnMgZXh0ZW5kcyByb3MuSVJlc291cmNlIHtcbiAgICByZWFkb25seSBwcm9wczogTmF0SXBDaWRyc1Byb3BzO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIE5hdElwQ2lkcklkczogVGhlIGxpc3Qgb2YgbmF0IGlwIGNpZHIgSURzLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGF0dHJOYXRJcENpZHJJZHM6IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBOYXRJcENpZHJzOiBUaGUgbGlzdCBvZiBuYXQgaXAgY2lkcnMuXG4gICAgICovXG4gICAgcmVhZG9ubHkgYXR0ck5hdElwQ2lkcnM6IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcbn1cbi8qKlxuICogVGhpcyBjbGFzcyBlbmNhcHN1bGF0ZXMgYW5kIGV4dGVuZHMgdGhlIFJPUyByZXNvdXJjZSB0eXBlIGBEQVRBU09VUkNFOjpWUEM6Ok5hdElwQ2lkcnNgLCB3aGljaCBpcyB1c2VkIHRvIHF1ZXJ5IHRoZSBDSURSIGJsb2NrcyBvZiBhIE5BVCBnYXRld2F5LlxuICogQE5vdGUgVGhpcyBjbGFzcyBtYXkgaGF2ZSBzb21lIG5ldyBmdW5jdGlvbnMgdG8gZmFjaWxpdGF0ZSBkZXZlbG9wbWVudCwgc28gaXQgaXMgcmVjb21tZW5kZWQgdG8gdXNlIHRoaXMgY2xhc3MgaW5zdGVhZCBvZiBgUm9zTmF0SXBDaWRyc2Bmb3IgYSBtb3JlIGNvbnZlbmllbnQgZGV2ZWxvcG1lbnQgZXhwZXJpZW5jZS5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvZGF0YXNvdXJjZS12cGMtbmF0aXBjaWRyc1xuICovXG5leHBvcnQgY2xhc3MgTmF0SXBDaWRycyBleHRlbmRzIHJvcy5SZXNvdXJjZSBpbXBsZW1lbnRzIElOYXRJcENpZHJzIHtcbiAgICBwcm90ZWN0ZWQgc2NvcGU6IHJvcy5Db25zdHJ1Y3Q7XG4gICAgcHJvdGVjdGVkIGlkOiBzdHJpbmc7XG4gICAgcHVibGljIHJlYWRvbmx5IHByb3BzOiBOYXRJcENpZHJzUHJvcHM7XG4gICAgcHJvdGVjdGVkIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OiBib29sZWFuO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIE5hdElwQ2lkcklkczogVGhlIGxpc3Qgb2YgbmF0IGlwIGNpZHIgSURzLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyTmF0SXBDaWRySWRzOiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgTmF0SXBDaWRyczogVGhlIGxpc3Qgb2YgbmF0IGlwIGNpZHJzLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyTmF0SXBDaWRyczogcm9zLklSZXNvbHZhYmxlIHwgc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogUGFyYW0gc2NvcGUgLSBzY29wZSBpbiB3aGljaCB0aGlzIHJlc291cmNlIGlzIGRlZmluZWRcbiAgICAgKiBQYXJhbSBpZCAgICAtIHNjb3BlZCBpZCBvZiB0aGUgcmVzb3VyY2VcbiAgICAgKiBQYXJhbSBwcm9wcyAtIHJlc291cmNlIHByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihzY29wZTogcm9zLkNvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IE5hdElwQ2lkcnNQcm9wcywgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6Ym9vbGVhbiA9IHRydWUpIHtcbiAgICAgICAgc3VwZXIoc2NvcGUsIGlkKTtcbiAgICAgICAgdGhpcy5zY29wZSA9IHNjb3BlO1xuICAgICAgICB0aGlzLmlkID0gaWQ7XG4gICAgICAgIHRoaXMucHJvcHMgPSBwcm9wcztcbiAgICAgICAgdGhpcy5lbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCA9IGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50O1xuXG4gICAgICAgIGNvbnN0IHJvc05hdElwQ2lkcnMgPSBuZXcgUm9zTmF0SXBDaWRycyh0aGlzLCBpZCwgIHtcbiAgICAgICAgICAgIG5hdElwQ2lkcjogcHJvcHMubmF0SXBDaWRyLFxuICAgICAgICAgICAgbmF0R2F0ZXdheUlkOiBwcm9wcy5uYXRHYXRld2F5SWQsXG4gICAgICAgICAgICByZWZyZXNoT3B0aW9uczogcHJvcHMucmVmcmVzaE9wdGlvbnMgPT09IHVuZGVmaW5lZCB8fCBwcm9wcy5yZWZyZXNoT3B0aW9ucyA9PT0gbnVsbCA/ICdOZXZlcicgOiBwcm9wcy5yZWZyZXNoT3B0aW9ucyxcbiAgICAgICAgfSwgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgJiYgdGhpcy5zdGFjay5lbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCk7XG4gICAgICAgIHRoaXMucmVzb3VyY2UgPSByb3NOYXRJcENpZHJzO1xuICAgICAgICB0aGlzLmF0dHJOYXRJcENpZHJJZHMgPSByb3NOYXRJcENpZHJzLmF0dHJOYXRJcENpZHJJZHM7XG4gICAgICAgIHRoaXMuYXR0ck5hdElwQ2lkcnMgPSByb3NOYXRJcENpZHJzLmF0dHJOYXRJcENpZHJzO1xuICAgIH1cbn1cbiJdfQ==