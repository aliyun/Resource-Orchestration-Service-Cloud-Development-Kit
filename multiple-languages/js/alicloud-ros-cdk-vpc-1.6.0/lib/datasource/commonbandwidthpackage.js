"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CommonBandwidthPackage = exports.CommonBandwidthPackageProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const vpc_generated_1 = require("./vpc.generated");
Object.defineProperty(exports, "CommonBandwidthPackageProperty", { enumerable: true, get: function () { return vpc_generated_1.RosCommonBandwidthPackage; } });
/**
 * This class encapsulates and extends the ROS resource type `DATASOURCE::VPC::CommonBandwidthPackage`, which is used to query the information about an Internet Shared Bandwidth instance in a region.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosCommonBandwidthPackage`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/datasource-vpc-commonbandwidthpackage
 */
class CommonBandwidthPackage extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props = {}, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosCommonBandwidthPackage = new vpc_generated_1.RosCommonBandwidthPackage(this, id, {
            commonBandwidthPackageName: props.commonBandwidthPackageName,
            commonBandwidthPackageId: props.commonBandwidthPackageId,
            refreshOptions: props.refreshOptions === undefined || props.refreshOptions === null ? 'Never' : props.refreshOptions,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosCommonBandwidthPackage;
        this.attrBandwidth = rosCommonBandwidthPackage.attrBandwidth;
        this.attrBusinessStatus = rosCommonBandwidthPackage.attrBusinessStatus;
        this.attrCommonBandwidthPackageId = rosCommonBandwidthPackage.attrCommonBandwidthPackageId;
        this.attrCommonBandwidthPackageName = rosCommonBandwidthPackage.attrCommonBandwidthPackageName;
        this.attrCreationTime = rosCommonBandwidthPackage.attrCreationTime;
        this.attrDeletionProtection = rosCommonBandwidthPackage.attrDeletionProtection;
        this.attrDescription = rosCommonBandwidthPackage.attrDescription;
        this.attrExpiredTime = rosCommonBandwidthPackage.attrExpiredTime;
        this.attrHasReservationData = rosCommonBandwidthPackage.attrHasReservationData;
        this.attrInstanceChargeType = rosCommonBandwidthPackage.attrInstanceChargeType;
        this.attrInternetChargeType = rosCommonBandwidthPackage.attrInternetChargeType;
        this.attrIsp = rosCommonBandwidthPackage.attrIsp;
        this.attrPublicIpAddresses = rosCommonBandwidthPackage.attrPublicIpAddresses;
        this.attrRatio = rosCommonBandwidthPackage.attrRatio;
        this.attrReservationActiveTime = rosCommonBandwidthPackage.attrReservationActiveTime;
        this.attrReservationBandwidth = rosCommonBandwidthPackage.attrReservationBandwidth;
        this.attrReservationInternetChargeType = rosCommonBandwidthPackage.attrReservationInternetChargeType;
        this.attrReservationOrderType = rosCommonBandwidthPackage.attrReservationOrderType;
        this.attrResourceGroupId = rosCommonBandwidthPackage.attrResourceGroupId;
        this.attrServiceManaged = rosCommonBandwidthPackage.attrServiceManaged;
        this.attrStatus = rosCommonBandwidthPackage.attrStatus;
    }
}
exports.CommonBandwidthPackage = CommonBandwidthPackage;
//# sourceMappingURL=data:application/json;base64,