"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Vpc = exports.VpcProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const vpc_generated_1 = require("./vpc.generated");
Object.defineProperty(exports, "VpcProperty", { enumerable: true, get: function () { return vpc_generated_1.RosVpc; } });
/**
 * This class encapsulates and extends the ROS resource type `DATASOURCE::VPC::Vpc`, which is used to query the information about a virtual private cloud (VPC).
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosVpc`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/datasource-vpc-vpc
 */
class Vpc extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosVpc = new vpc_generated_1.RosVpc(this, id, {
            vpcId: props.vpcId,
            refreshOptions: props.refreshOptions === undefined || props.refreshOptions === null ? 'Never' : props.refreshOptions,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosVpc;
        this.attrCidrBlock = rosVpc.attrCidrBlock;
        this.attrClassicLinkEnabled = rosVpc.attrClassicLinkEnabled;
        this.attrCreateTime = rosVpc.attrCreateTime;
        this.attrDescription = rosVpc.attrDescription;
        this.attrDhcpOptionsSetId = rosVpc.attrDhcpOptionsSetId;
        this.attrIpv6CidrBlock = rosVpc.attrIpv6CidrBlock;
        this.attrIpv6CidrBlocks = rosVpc.attrIpv6CidrBlocks;
        this.attrIsDefault = rosVpc.attrIsDefault;
        this.attrResourceGroupId = rosVpc.attrResourceGroupId;
        this.attrRouterId = rosVpc.attrRouterId;
        this.attrSecondaryCidrBlocks = rosVpc.attrSecondaryCidrBlocks;
        this.attrTags = rosVpc.attrTags;
        this.attrUserCidrs = rosVpc.attrUserCidrs;
        this.attrVSwitchIds = rosVpc.attrVSwitchIds;
        this.attrVpcId = rosVpc.attrVpcId;
        this.attrVpcName = rosVpc.attrVpcName;
    }
}
exports.Vpc = Vpc;
//# sourceMappingURL=data:application/json;base64,