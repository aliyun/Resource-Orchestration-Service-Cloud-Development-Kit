"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NatGateway = exports.NatGatewayProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const vpc_generated_1 = require("./vpc.generated");
Object.defineProperty(exports, "NatGatewayProperty", { enumerable: true, get: function () { return vpc_generated_1.RosNatGateway; } });
/**
 * This class encapsulates and extends the ROS resource type `DATASOURCE::VPC::NatGateway`, which is used to query the information about a NAT gateway.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosNatGateway`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/datasource-vpc-natgateway
 */
class NatGateway extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosNatGateway = new vpc_generated_1.RosNatGateway(this, id, {
            natGatewayId: props.natGatewayId,
            refreshOptions: props.refreshOptions === undefined || props.refreshOptions === null ? 'Never' : props.refreshOptions,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosNatGateway;
        this.attrAutoPay = rosNatGateway.attrAutoPay;
        this.attrBusinessStatus = rosNatGateway.attrBusinessStatus;
        this.attrCreateTime = rosNatGateway.attrCreateTime;
        this.attrDeletionProtection = rosNatGateway.attrDeletionProtection;
        this.attrDescription = rosNatGateway.attrDescription;
        this.attrEipBindMode = rosNatGateway.attrEipBindMode;
        this.attrExpiredTime = rosNatGateway.attrExpiredTime;
        this.attrForwardTableIds = rosNatGateway.attrForwardTableIds;
        this.attrIcmpReplyEnabled = rosNatGateway.attrIcmpReplyEnabled;
        this.attrInternetChargeType = rosNatGateway.attrInternetChargeType;
        this.attrIpLists = rosNatGateway.attrIpLists;
        this.attrNatGatewayId = rosNatGateway.attrNatGatewayId;
        this.attrNatGatewayName = rosNatGateway.attrNatGatewayName;
        this.attrNatGatewayPrivateInfo = rosNatGateway.attrNatGatewayPrivateInfo;
        this.attrNatType = rosNatGateway.attrNatType;
        this.attrNetworkType = rosNatGateway.attrNetworkType;
        this.attrPaymentType = rosNatGateway.attrPaymentType;
        this.attrSecurityProtectionEnabled = rosNatGateway.attrSecurityProtectionEnabled;
        this.attrSnatTableIds = rosNatGateway.attrSnatTableIds;
        this.attrSpec = rosNatGateway.attrSpec;
        this.attrVpcId = rosNatGateway.attrVpcId;
    }
}
exports.NatGateway = NatGateway;
//# sourceMappingURL=data:application/json;base64,