"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Addresses = exports.AddressesProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const vpc_generated_1 = require("./vpc.generated");
Object.defineProperty(exports, "AddressesProperty", { enumerable: true, get: function () { return vpc_generated_1.RosAddresses; } });
/**
 * This class encapsulates and extends the ROS resource type `DATASOURCE::EIP::Addresses`, which is used to query the information about elastic IP addresses (EIPs).
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosAddresses`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/datasource-eip-addresses
 */
class Addresses extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props = {}, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosAddresses = new vpc_generated_1.RosAddresses(this, id, {
            segmentInstanceId: props.segmentInstanceId,
            addressName: props.addressName,
            resourceGroupId: props.resourceGroupId,
            instanceId: props.instanceId,
            isp: props.isp,
            allocationId: props.allocationId,
            paymentType: props.paymentType,
            ipAddress: props.ipAddress,
            instanceType: props.instanceType,
            refreshOptions: props.refreshOptions === undefined || props.refreshOptions === null ? 'Never' : props.refreshOptions,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosAddresses;
        this.attrAddresses = rosAddresses.attrAddresses;
        this.attrAllocationIds = rosAddresses.attrAllocationIds;
    }
}
exports.Addresses = Addresses;
//# sourceMappingURL=data:application/json;base64,