"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SnatEntry = exports.SnatEntryProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const vpc_generated_1 = require("./vpc.generated");
Object.defineProperty(exports, "SnatEntryProperty", { enumerable: true, get: function () { return vpc_generated_1.RosSnatEntry; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::VPC::SnatEntry`, which is used to add SNAT entries to an SNAT table.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosSnatEntry`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-vpc-snatentry
 */
class SnatEntry extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosSnatEntry = new vpc_generated_1.RosSnatEntry(this, id, {
            eipAffinity: props.eipAffinity,
            snatEntryName: props.snatEntryName,
            sourceVSwitchIds: props.sourceVSwitchIds,
            sourceCidr: props.sourceCidr,
            snatIp: props.snatIp,
            snatTableId: props.snatTableId,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosSnatEntry;
        this.attrSnatEntryIds = rosSnatEntry.attrSnatEntryIds;
    }
}
exports.SnatEntry = SnatEntry;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic25hdGVudHJ5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic25hdGVudHJ5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDhDQUE4QztBQUM5QyxtREFBK0M7QUFFdEIsa0dBRmhCLDRCQUFZLE9BRXFCO0FBcUQxQzs7OztHQUlHO0FBQ0gsTUFBYSxTQUFVLFNBQVEsR0FBRyxDQUFDLFFBQVE7SUFXdkM7Ozs7T0FJRztJQUNILFlBQVksS0FBb0IsRUFBRSxFQUFVLEVBQUUsS0FBcUIsRUFBRSxtQ0FBMkMsSUFBSTtRQUNoSCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ2pCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQ2IsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLGdDQUFnQyxHQUFHLGdDQUFnQyxDQUFDO1FBRXpFLE1BQU0sWUFBWSxHQUFHLElBQUksNEJBQVksQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFHO1lBQzdDLFdBQVcsRUFBRSxLQUFLLENBQUMsV0FBVztZQUM5QixhQUFhLEVBQUUsS0FBSyxDQUFDLGFBQWE7WUFDbEMsZ0JBQWdCLEVBQUUsS0FBSyxDQUFDLGdCQUFnQjtZQUN4QyxVQUFVLEVBQUUsS0FBSyxDQUFDLFVBQVU7WUFDNUIsTUFBTSxFQUFFLEtBQUssQ0FBQyxNQUFNO1lBQ3BCLFdBQVcsRUFBRSxLQUFLLENBQUMsV0FBVztTQUNqQyxFQUFFLGdDQUFnQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztRQUNwRixJQUFJLENBQUMsUUFBUSxHQUFHLFlBQVksQ0FBQztRQUM3QixJQUFJLENBQUMsZ0JBQWdCLEdBQUcsWUFBWSxDQUFDLGdCQUFnQixDQUFDO0lBQzFELENBQUM7Q0FDSjtBQWxDRCw4QkFrQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyByb3MgZnJvbSAnQGFsaWNsb3VkL3Jvcy1jZGstY29yZSc7XG5pbXBvcnQgeyBSb3NTbmF0RW50cnkgfSBmcm9tICcuL3ZwYy5nZW5lcmF0ZWQnO1xuLy8gR2VuZXJhdGVkIGZyb20gdGhlIEFsaUNsb3VkIFJPUyBSZXNvdXJjZSBTcGVjaWZpY2F0aW9uXG5leHBvcnQgeyBSb3NTbmF0RW50cnkgYXMgU25hdEVudHJ5UHJvcGVydHkgfTtcblxuLyoqXG4gKiBQcm9wZXJ0aWVzIGZvciBkZWZpbmluZyBhIGBTbmF0RW50cnlgLlxuICogU2VlIGh0dHBzOi8vd3d3LmFsaWJhYmFjbG91ZC5jb20vaGVscC9yb3MvZGV2ZWxvcGVyLXJlZmVyZW5jZS9hbGl5dW4tdnBjLXNuYXRlbnRyeVxuICovXG5leHBvcnQgaW50ZXJmYWNlIFNuYXRFbnRyeVByb3BzIHtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHNuYXRJcDogVGhlIHB1YmxpYyBJUCBhZGRyZXNzLiBTZXBhcmF0ZSBtdWx0aXBsZSBFSVBzIHdpdGggY29tbWFzLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHNuYXRJcDogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgc25hdFRhYmxlSWQ6IFRoZSBJRCBvZiB0aGUgU05BVCB0YWJsZS5cbiAgICAgKi9cbiAgICByZWFkb25seSBzbmF0VGFibGVJZDogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgZWlwQWZmaW5pdHk6IFNwZWNpZmllcyB3aGV0aGVyIHRvIGVuYWJsZSBFSVAgYWZmaW5pdHkuIFZhbGlkIHZhbHVlczpcbiAgICAgKiAwOiBub1xuICAgICAqIDE6IHllc1xuICAgICAqIElmIEVJUCBhZmZpbml0eSBpcyBlbmFibGVkIGFuZCB0aGUgU05BVCBlbnRyeSBpcyBhc3NvY2lhdGVkIHdpdGggbXVsdGlwbGUgRUlQcywgYSBjbGllbnQgdXNlcyB0aGUgc2FtZSBFSVAgdG8gYWNjZXNzIHRoZSBJbnRlcm5ldC4gT3RoZXJ3aXNlLCB0aGUgY2xpZW50IHVzZXMgYW4gRUlQIHNlbGVjdGVkIGZyb20gdGhlIGFzc29jaWF0ZWQgRUlQcyB0byBhY2Nlc3MgdGhlIEludGVybmV0LlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGVpcEFmZmluaXR5PzogbnVtYmVyIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgc25hdEVudHJ5TmFtZTogaGUgbmFtZSBvZiB0aGUgU05BVCBydWxlIGlzIDItMTI4IGNoYXJhY3RlcnMgbG9uZyBhbmQgbXVzdCBzdGFydCB3aXRoIGEgbGV0dGVyIG9yIENoaW5lc2UsIGJ1dCBjYW5ub3QgYmVnaW4gd2l0aCBIVFRQOlxcL1xcLyBvciBodHRwczpcXC9cXC8uXG4gICAgICovXG4gICAgcmVhZG9ubHkgc25hdEVudHJ5TmFtZT86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHNvdXJjZUNpZHI6IFNwZWNpZmllcyB0aGUgbmV0d29yayBzZWdtZW50IG9mIHRoZSBzd2l0Y2guIEZvciBleGFtcGxlLCAxMC4wLjAuMVxcLzI0LiBUaGlzIHBhcmFtZXRlciBhbmQgdGhlIFNvdXJjZVZTd3RpY2hJZCBwYXJhbWV0ZXIgYXJlIG11dHVhbGx5IGV4Y2x1c2l2ZSBhbmQgY2Fubm90IGFwcGVhciBhdCB0aGUgc2FtZSB0aW1lLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHNvdXJjZUNpZHI/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBzb3VyY2VWU3dpdGNoSWRzOiBUaGUgSUQgb2YgdGhlIFZTd2l0Y2ggdG8gYWNjZXNzIHRoZSBJbnRlcm5ldC5cbiAgICAgKi9cbiAgICByZWFkb25seSBzb3VyY2VWU3dpdGNoSWRzPzogQXJyYXk8c3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlPiB8IHJvcy5JUmVzb2x2YWJsZTtcbn1cblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgYFNuYXRFbnRyeWAuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSVNuYXRFbnRyeSBleHRlbmRzIHJvcy5JUmVzb3VyY2Uge1xuICAgIHJlYWRvbmx5IHByb3BzOiBTbmF0RW50cnlQcm9wcztcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBTbmF0RW50cnlJZHM6IFRoZSBJRFMgb2YgdGhlIFNOQVQgZW50cnkuXG4gICAgICovXG4gICAgcmVhZG9ubHkgYXR0clNuYXRFbnRyeUlkczogcm9zLklSZXNvbHZhYmxlIHwgc3RyaW5nO1xufVxuLyoqXG4gKiBUaGlzIGNsYXNzIGVuY2Fwc3VsYXRlcyBhbmQgZXh0ZW5kcyB0aGUgUk9TIHJlc291cmNlIHR5cGUgYEFMSVlVTjo6VlBDOjpTbmF0RW50cnlgLCB3aGljaCBpcyB1c2VkIHRvIGFkZCBTTkFUIGVudHJpZXMgdG8gYW4gU05BVCB0YWJsZS5cbiAqIEBOb3RlIFRoaXMgY2xhc3MgbWF5IGhhdmUgc29tZSBuZXcgZnVuY3Rpb25zIHRvIGZhY2lsaXRhdGUgZGV2ZWxvcG1lbnQsIHNvIGl0IGlzIHJlY29tbWVuZGVkIHRvIHVzZSB0aGlzIGNsYXNzIGluc3RlYWQgb2YgYFJvc1NuYXRFbnRyeWBmb3IgYSBtb3JlIGNvbnZlbmllbnQgZGV2ZWxvcG1lbnQgZXhwZXJpZW5jZS5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvYWxpeXVuLXZwYy1zbmF0ZW50cnlcbiAqL1xuZXhwb3J0IGNsYXNzIFNuYXRFbnRyeSBleHRlbmRzIHJvcy5SZXNvdXJjZSBpbXBsZW1lbnRzIElTbmF0RW50cnkge1xuICAgIHByb3RlY3RlZCBzY29wZTogcm9zLkNvbnN0cnVjdDtcbiAgICBwcm90ZWN0ZWQgaWQ6IHN0cmluZztcbiAgICBwdWJsaWMgcmVhZG9ubHkgcHJvcHM6IFNuYXRFbnRyeVByb3BzO1xuICAgIHByb3RlY3RlZCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBTbmF0RW50cnlJZHM6IFRoZSBJRFMgb2YgdGhlIFNOQVQgZW50cnkuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJTbmF0RW50cnlJZHM6IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFBhcmFtIHNjb3BlIC0gc2NvcGUgaW4gd2hpY2ggdGhpcyByZXNvdXJjZSBpcyBkZWZpbmVkXG4gICAgICogUGFyYW0gaWQgICAgLSBzY29wZWQgaWQgb2YgdGhlIHJlc291cmNlXG4gICAgICogUGFyYW0gcHJvcHMgLSByZXNvdXJjZSBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IHJvcy5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBTbmF0RW50cnlQcm9wcywgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6Ym9vbGVhbiA9IHRydWUpIHtcbiAgICAgICAgc3VwZXIoc2NvcGUsIGlkKTtcbiAgICAgICAgdGhpcy5zY29wZSA9IHNjb3BlO1xuICAgICAgICB0aGlzLmlkID0gaWQ7XG4gICAgICAgIHRoaXMucHJvcHMgPSBwcm9wcztcbiAgICAgICAgdGhpcy5lbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCA9IGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50O1xuXG4gICAgICAgIGNvbnN0IHJvc1NuYXRFbnRyeSA9IG5ldyBSb3NTbmF0RW50cnkodGhpcywgaWQsICB7XG4gICAgICAgICAgICBlaXBBZmZpbml0eTogcHJvcHMuZWlwQWZmaW5pdHksXG4gICAgICAgICAgICBzbmF0RW50cnlOYW1lOiBwcm9wcy5zbmF0RW50cnlOYW1lLFxuICAgICAgICAgICAgc291cmNlVlN3aXRjaElkczogcHJvcHMuc291cmNlVlN3aXRjaElkcyxcbiAgICAgICAgICAgIHNvdXJjZUNpZHI6IHByb3BzLnNvdXJjZUNpZHIsXG4gICAgICAgICAgICBzbmF0SXA6IHByb3BzLnNuYXRJcCxcbiAgICAgICAgICAgIHNuYXRUYWJsZUlkOiBwcm9wcy5zbmF0VGFibGVJZCxcbiAgICAgICAgfSwgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgJiYgdGhpcy5zdGFjay5lbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCk7XG4gICAgICAgIHRoaXMucmVzb3VyY2UgPSByb3NTbmF0RW50cnk7XG4gICAgICAgIHRoaXMuYXR0clNuYXRFbnRyeUlkcyA9IHJvc1NuYXRFbnRyeS5hdHRyU25hdEVudHJ5SWRzO1xuICAgIH1cbn1cbiJdfQ==