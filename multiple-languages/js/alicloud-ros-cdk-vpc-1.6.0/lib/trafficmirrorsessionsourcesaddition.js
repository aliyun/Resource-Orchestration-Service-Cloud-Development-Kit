"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TrafficMirrorSessionSourcesAddition = exports.TrafficMirrorSessionSourcesAdditionProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const vpc_generated_1 = require("./vpc.generated");
Object.defineProperty(exports, "TrafficMirrorSessionSourcesAdditionProperty", { enumerable: true, get: function () { return vpc_generated_1.RosTrafficMirrorSessionSourcesAddition; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::VPC::TrafficMirrorSessionSourcesAddition`, which is used to add traffic mirror sources to traffic mirror sessions.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosTrafficMirrorSessionSourcesAddition`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-vpc-trafficmirrorsessionsourcesaddition
 */
class TrafficMirrorSessionSourcesAddition extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosTrafficMirrorSessionSourcesAddition = new vpc_generated_1.RosTrafficMirrorSessionSourcesAddition(this, id, {
            trafficMirrorSourceIds: props.trafficMirrorSourceIds,
            trafficMirrorSessionId: props.trafficMirrorSessionId,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosTrafficMirrorSessionSourcesAddition;
    }
}
exports.TrafficMirrorSessionSourcesAddition = TrafficMirrorSessionSourcesAddition;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhZmZpY21pcnJvcnNlc3Npb25zb3VyY2VzYWRkaXRpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ0cmFmZmljbWlycm9yc2Vzc2lvbnNvdXJjZXNhZGRpdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw4Q0FBOEM7QUFDOUMsbURBQXlFO0FBRXRCLDRIQUYxQyxzREFBc0MsT0FFK0M7QUF5QjlGOzs7O0dBSUc7QUFDSCxNQUFhLG1DQUFvQyxTQUFRLEdBQUcsQ0FBQyxRQUFRO0lBTWpFOzs7O09BSUc7SUFDSCxZQUFZLEtBQW9CLEVBQUUsRUFBVSxFQUFFLEtBQStDLEVBQUUsbUNBQTJDLElBQUk7UUFDMUksS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNqQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUNiLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxnQ0FBZ0MsR0FBRyxnQ0FBZ0MsQ0FBQztRQUV6RSxNQUFNLHNDQUFzQyxHQUFHLElBQUksc0RBQXNDLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRztZQUNqRyxzQkFBc0IsRUFBRSxLQUFLLENBQUMsc0JBQXNCO1lBQ3BELHNCQUFzQixFQUFFLEtBQUssQ0FBQyxzQkFBc0I7U0FDdkQsRUFBRSxnQ0FBZ0MsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7UUFDcEYsSUFBSSxDQUFDLFFBQVEsR0FBRyxzQ0FBc0MsQ0FBQztJQUMzRCxDQUFDO0NBQ0o7QUF4QkQsa0ZBd0JDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcm9zIGZyb20gJ0BhbGljbG91ZC9yb3MtY2RrLWNvcmUnO1xuaW1wb3J0IHsgUm9zVHJhZmZpY01pcnJvclNlc3Npb25Tb3VyY2VzQWRkaXRpb24gfSBmcm9tICcuL3ZwYy5nZW5lcmF0ZWQnO1xuLy8gR2VuZXJhdGVkIGZyb20gdGhlIEFsaUNsb3VkIFJPUyBSZXNvdXJjZSBTcGVjaWZpY2F0aW9uXG5leHBvcnQgeyBSb3NUcmFmZmljTWlycm9yU2Vzc2lvblNvdXJjZXNBZGRpdGlvbiBhcyBUcmFmZmljTWlycm9yU2Vzc2lvblNvdXJjZXNBZGRpdGlvblByb3BlcnR5IH07XG5cbi8qKlxuICogUHJvcGVydGllcyBmb3IgZGVmaW5pbmcgYSBgVHJhZmZpY01pcnJvclNlc3Npb25Tb3VyY2VzQWRkaXRpb25gLlxuICogU2VlIGh0dHBzOi8vd3d3LmFsaWJhYmFjbG91ZC5jb20vaGVscC9yb3MvZGV2ZWxvcGVyLXJlZmVyZW5jZS9hbGl5dW4tdnBjLXRyYWZmaWNtaXJyb3JzZXNzaW9uc291cmNlc2FkZGl0aW9uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVHJhZmZpY01pcnJvclNlc3Npb25Tb3VyY2VzQWRkaXRpb25Qcm9wcyB7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSB0cmFmZmljTWlycm9yU2Vzc2lvbklkOiBUaGUgSUQgb2YgdGhlIHRyYWZmaWMgbWlycm9yIHNlc3Npb24uXG4gICAgICovXG4gICAgcmVhZG9ubHkgdHJhZmZpY01pcnJvclNlc3Npb25JZDogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgdHJhZmZpY01pcnJvclNvdXJjZUlkczogdW5kZWZpbmVkXG4gICAgICovXG4gICAgcmVhZG9ubHkgdHJhZmZpY01pcnJvclNvdXJjZUlkczogQXJyYXk8c3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlPiB8IHJvcy5JUmVzb2x2YWJsZTtcbn1cblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgYFRyYWZmaWNNaXJyb3JTZXNzaW9uU291cmNlc0FkZGl0aW9uYC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJVHJhZmZpY01pcnJvclNlc3Npb25Tb3VyY2VzQWRkaXRpb24gZXh0ZW5kcyByb3MuSVJlc291cmNlIHtcbiAgICByZWFkb25seSBwcm9wczogVHJhZmZpY01pcnJvclNlc3Npb25Tb3VyY2VzQWRkaXRpb25Qcm9wcztcbn1cbi8qKlxuICogVGhpcyBjbGFzcyBlbmNhcHN1bGF0ZXMgYW5kIGV4dGVuZHMgdGhlIFJPUyByZXNvdXJjZSB0eXBlIGBBTElZVU46OlZQQzo6VHJhZmZpY01pcnJvclNlc3Npb25Tb3VyY2VzQWRkaXRpb25gLCB3aGljaCBpcyB1c2VkIHRvIGFkZCB0cmFmZmljIG1pcnJvciBzb3VyY2VzIHRvIHRyYWZmaWMgbWlycm9yIHNlc3Npb25zLlxuICogQE5vdGUgVGhpcyBjbGFzcyBtYXkgaGF2ZSBzb21lIG5ldyBmdW5jdGlvbnMgdG8gZmFjaWxpdGF0ZSBkZXZlbG9wbWVudCwgc28gaXQgaXMgcmVjb21tZW5kZWQgdG8gdXNlIHRoaXMgY2xhc3MgaW5zdGVhZCBvZiBgUm9zVHJhZmZpY01pcnJvclNlc3Npb25Tb3VyY2VzQWRkaXRpb25gZm9yIGEgbW9yZSBjb252ZW5pZW50IGRldmVsb3BtZW50IGV4cGVyaWVuY2UuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2FsaXl1bi12cGMtdHJhZmZpY21pcnJvcnNlc3Npb25zb3VyY2VzYWRkaXRpb25cbiAqL1xuZXhwb3J0IGNsYXNzIFRyYWZmaWNNaXJyb3JTZXNzaW9uU291cmNlc0FkZGl0aW9uIGV4dGVuZHMgcm9zLlJlc291cmNlIGltcGxlbWVudHMgSVRyYWZmaWNNaXJyb3JTZXNzaW9uU291cmNlc0FkZGl0aW9uIHtcbiAgICBwcm90ZWN0ZWQgc2NvcGU6IHJvcy5Db25zdHJ1Y3Q7XG4gICAgcHJvdGVjdGVkIGlkOiBzdHJpbmc7XG4gICAgcHVibGljIHJlYWRvbmx5IHByb3BzOiBUcmFmZmljTWlycm9yU2Vzc2lvblNvdXJjZXNBZGRpdGlvblByb3BzO1xuICAgIHByb3RlY3RlZCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIFBhcmFtIHNjb3BlIC0gc2NvcGUgaW4gd2hpY2ggdGhpcyByZXNvdXJjZSBpcyBkZWZpbmVkXG4gICAgICogUGFyYW0gaWQgICAgLSBzY29wZWQgaWQgb2YgdGhlIHJlc291cmNlXG4gICAgICogUGFyYW0gcHJvcHMgLSByZXNvdXJjZSBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IHJvcy5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBUcmFmZmljTWlycm9yU2Vzc2lvblNvdXJjZXNBZGRpdGlvblByb3BzLCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDpib29sZWFuID0gdHJ1ZSkge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQpO1xuICAgICAgICB0aGlzLnNjb3BlID0gc2NvcGU7XG4gICAgICAgIHRoaXMuaWQgPSBpZDtcbiAgICAgICAgdGhpcy5wcm9wcyA9IHByb3BzO1xuICAgICAgICB0aGlzLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ID0gZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ7XG5cbiAgICAgICAgY29uc3Qgcm9zVHJhZmZpY01pcnJvclNlc3Npb25Tb3VyY2VzQWRkaXRpb24gPSBuZXcgUm9zVHJhZmZpY01pcnJvclNlc3Npb25Tb3VyY2VzQWRkaXRpb24odGhpcywgaWQsICB7XG4gICAgICAgICAgICB0cmFmZmljTWlycm9yU291cmNlSWRzOiBwcm9wcy50cmFmZmljTWlycm9yU291cmNlSWRzLFxuICAgICAgICAgICAgdHJhZmZpY01pcnJvclNlc3Npb25JZDogcHJvcHMudHJhZmZpY01pcnJvclNlc3Npb25JZCxcbiAgICAgICAgfSwgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgJiYgdGhpcy5zdGFjay5lbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCk7XG4gICAgICAgIHRoaXMucmVzb3VyY2UgPSByb3NUcmFmZmljTWlycm9yU2Vzc2lvblNvdXJjZXNBZGRpdGlvbjtcbiAgICB9XG59XG4iXX0=