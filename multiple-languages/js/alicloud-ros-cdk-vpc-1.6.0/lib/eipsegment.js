"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EIPSegment = exports.EIPSegmentProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const vpc_generated_1 = require("./vpc.generated");
Object.defineProperty(exports, "EIPSegmentProperty", { enumerable: true, get: function () { return vpc_generated_1.RosEIPSegment; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::VPC::EIPSegment`, which is used to apply for contiguous elastic IP addresses (EIPs).
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosEIPSegment`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-vpc-eipsegment
 */
class EIPSegment extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosEIPSegment = new vpc_generated_1.RosEIPSegment(this, id, {
            eipMask: props.eipMask,
            resourceGroupId: props.resourceGroupId,
            netmode: props.netmode,
            bandwidth: props.bandwidth,
            internetChargeType: props.internetChargeType,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosEIPSegment;
        this.attrEipAddresses = rosEIPSegment.attrEipAddresses;
        this.attrEipSegmentInstanceId = rosEIPSegment.attrEipSegmentInstanceId;
    }
}
exports.EIPSegment = EIPSegment;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWlwc2VnbWVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImVpcHNlZ21lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsOENBQThDO0FBQzlDLG1EQUFnRDtBQUV0QixtR0FGakIsNkJBQWEsT0FFc0I7QUFrRTVDOzs7O0dBSUc7QUFDSCxNQUFhLFVBQVcsU0FBUSxHQUFHLENBQUMsUUFBUTtJQWdCeEM7Ozs7T0FJRztJQUNILFlBQVksS0FBb0IsRUFBRSxFQUFVLEVBQUUsS0FBc0IsRUFBRSxtQ0FBMkMsSUFBSTtRQUNqSCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ2pCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQ2IsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLGdDQUFnQyxHQUFHLGdDQUFnQyxDQUFDO1FBRXpFLE1BQU0sYUFBYSxHQUFHLElBQUksNkJBQWEsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFHO1lBQy9DLE9BQU8sRUFBRSxLQUFLLENBQUMsT0FBTztZQUN0QixlQUFlLEVBQUUsS0FBSyxDQUFDLGVBQWU7WUFDdEMsT0FBTyxFQUFFLEtBQUssQ0FBQyxPQUFPO1lBQ3RCLFNBQVMsRUFBRSxLQUFLLENBQUMsU0FBUztZQUMxQixrQkFBa0IsRUFBRSxLQUFLLENBQUMsa0JBQWtCO1NBQy9DLEVBQUUsZ0NBQWdDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO1FBQ3BGLElBQUksQ0FBQyxRQUFRLEdBQUcsYUFBYSxDQUFDO1FBQzlCLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxhQUFhLENBQUMsZ0JBQWdCLENBQUM7UUFDdkQsSUFBSSxDQUFDLHdCQUF3QixHQUFHLGFBQWEsQ0FBQyx3QkFBd0IsQ0FBQztJQUMzRSxDQUFDO0NBQ0o7QUF2Q0QsZ0NBdUNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcm9zIGZyb20gJ0BhbGljbG91ZC9yb3MtY2RrLWNvcmUnO1xuaW1wb3J0IHsgUm9zRUlQU2VnbWVudCB9IGZyb20gJy4vdnBjLmdlbmVyYXRlZCc7XG4vLyBHZW5lcmF0ZWQgZnJvbSB0aGUgQWxpQ2xvdWQgUk9TIFJlc291cmNlIFNwZWNpZmljYXRpb25cbmV4cG9ydCB7IFJvc0VJUFNlZ21lbnQgYXMgRUlQU2VnbWVudFByb3BlcnR5IH07XG5cbi8qKlxuICogUHJvcGVydGllcyBmb3IgZGVmaW5pbmcgYSBgRUlQU2VnbWVudGAuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2FsaXl1bi12cGMtZWlwc2VnbWVudFxuICovXG5leHBvcnQgaW50ZXJmYWNlIEVJUFNlZ21lbnRQcm9wcyB7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBlaXBNYXNrOiBUaGUgbWFzayBvZiB0aGUgY29udGlndW91cyBFSVAgZ3JvdXAuIFZhbGlkIHZhbHVlczpcbiAgICAgKiAyODogMTYgY29udGlndW91cyBFSVBzIGFyZSBhbGxvY2F0ZWQgZm9yIG9uZSBjYWxsLlxuICAgICAqIDI3OiAzMiBjb250aWd1b3VzIEVJUHMgYXJlIGFsbG9jYXRlZCBmb3Igb25lIGNhbGwuXG4gICAgICogMjY6IDY0IGNvbnRpZ3VvdXMgRUlQcyBhcmUgYWxsb2NhdGVkIGZvciBvbmUgY2FsbC5cbiAgICAgKiAyNTogMTI4IGNvbnRpZ3VvdXMgRUlQcyBhcmUgYWxsb2NhdGVkIGZvciBvbmUgY2FsbC5cbiAgICAgKiAyNDogMjU2IGNvbnRpZ3VvdXMgRUlQcyBhcmUgYWxsb2NhdGVkIGZvciBvbmUgY2FsbC5cbiAgICAgKiBOb3RlIFRoZSBhY3R1YWwgbnVtYmVyIG9mIGFzc2lnbmVkIEVJUHMgbWF5IGJlIGxlc3MgdGhhbiB0aGUgZXhwZWN0ZWQgbnVtYmVyIGJlY2F1c2Ugb25lLFxuICAgICAqIHRocmVlLCBvciBmb3VyIEVJUHMgbWF5IGJlIHJlc2VydmVkLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGVpcE1hc2s6IG51bWJlciB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGJhbmR3aWR0aDogVGhlIG1heGltdW0gYmFuZHdpZHRoIG9mIHRoZSBjb250aWd1b3VzIEVJUHMuIFVuaXQ6IE1iaXRcXC9zLiBEZWZhdWx0IHZhbHVlOiA1LlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGJhbmR3aWR0aD86IG51bWJlciB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGludGVybmV0Q2hhcmdlVHlwZTogVGhlIG1ldGVyaW5nIG1ldGhvZCBvZiB0aGUgY29udGlndW91cyBFSVBzLiBWYWxpZCB2YWx1ZXM6XG4gICAgICogUGF5QnlCYW5kd2lkdGg6IEZlZXMgYXJlIGNoYXJnZWQgYmFzZWQgb24gYmFuZHdpZHRoIHVzYWdlLiBUaGlzIGlzIHRoZSBkZWZhdWx0IHZhbHVlLlxuICAgICAqIFBheUJ5VHJhZmZpYzogRmVlcyBhcmUgY2hhcmdlZCBiYXNlZCBvbiBkYXRhIHRyYW5zZmVyLlxuICAgICAqIE5vdGUgSWYgdGhlIE5ldG1vZGUgcGFyYW1ldGVyIGlzIHNldCB0byBoeWJyaWQsIEludGVybmV0Q2hhcmdlVHlwZSBpcyBzZXQgdG8gUGF5QnlCYW5kd2lkdGguXG4gICAgICovXG4gICAgcmVhZG9ubHkgaW50ZXJuZXRDaGFyZ2VUeXBlPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgbmV0bW9kZTogVGhlIG5ldHdvcmsgdHlwZS4gVmFsaWQgdmFsdWVzOlxuICAgICAqIHB1YmxpYzogdGhlIEludGVybmV0LiBUaGlzIGlzIHRoZSBkZWZhdWx0IHZhbHVlLiBBZnRlciBjb250aWd1b3VzIEVJUHMgYXJlIGFzc29jaWF0ZWQgd2l0aFxuICAgICAqIGNsb3VkIHJlc291cmNlcywgdGhlIGNsb3VkIHJlc291cmNlcyBjYW4gYWNjZXNzIHRoZSBJbnRlcm5ldCBieSB1c2luZyB0aGUgRUlQcy5cbiAgICAgKiBoeWJyaWQ6IHRoZSBoeWJyaWQgY2xvdWQuIEFmdGVyIGNvbnRpZ3VvdXMgRUlQcyBhcmUgYXNzb2NpYXRlZCB3aXRoIGNsb3VkIHJlc291cmNlcywgdGhlXG4gICAgICogY2xvdWQgcmVzb3VyY2VzIGNhbiBhY2Nlc3MgdGhlIGh5YnJpZCBjbG91ZCBieSB1c2luZyB0aGUgRUlQcy5cbiAgICAgKiBOb3RlIFRoaXMgbmV0d29yayB0eXBlIGlzIGF2YWlsYWJsZSBvbmx5IHRvIHVzZXJzIHdobyBhcmUgYWRkZWQgdG8gdGhlIHdoaXRlbGlzdC4gVG8gdXNlXG4gICAgICogdGhpcyBuZXR3b3JrIHR5cGUsIGNvbnRhY3QgeW91ciBjdXN0b21lciBtYW5hZ2VyLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IG5ldG1vZGU/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSByZXNvdXJjZUdyb3VwSWQ6IFRoZSBJRCBvZiB0aGUgcmVzb3VyY2UgZ3JvdXAgdG8gd2hpY2ggdGhlIEVJUHMgYmVsb25nLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHJlc291cmNlR3JvdXBJZD86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcbn1cblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgYEVJUFNlZ21lbnRgLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIElFSVBTZWdtZW50IGV4dGVuZHMgcm9zLklSZXNvdXJjZSB7XG4gICAgcmVhZG9ubHkgcHJvcHM6IEVJUFNlZ21lbnRQcm9wcztcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBFaXBBZGRyZXNzZXM6IExpc3Qgb2YgRUlQIGFkZHJlc3Nlcy4gbGlrZSBbe1wiQWxsb2NhdGlvbklkXCI6IFwiZWlwLXh4eFwiLCBcIklwQWRkcmVzc1wiOiBcInh4Lnh4Lnh4Lnh4XCJ9XVxuICAgICAqL1xuICAgIHJlYWRvbmx5IGF0dHJFaXBBZGRyZXNzZXM6IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBFaXBTZWdtZW50SW5zdGFuY2VJZDogVGhlIElEIG9mIHRoZSBjb250aWd1b3VzIEVJUCBncm91cC5cbiAgICAgKi9cbiAgICByZWFkb25seSBhdHRyRWlwU2VnbWVudEluc3RhbmNlSWQ6IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcbn1cbi8qKlxuICogVGhpcyBjbGFzcyBlbmNhcHN1bGF0ZXMgYW5kIGV4dGVuZHMgdGhlIFJPUyByZXNvdXJjZSB0eXBlIGBBTElZVU46OlZQQzo6RUlQU2VnbWVudGAsIHdoaWNoIGlzIHVzZWQgdG8gYXBwbHkgZm9yIGNvbnRpZ3VvdXMgZWxhc3RpYyBJUCBhZGRyZXNzZXMgKEVJUHMpLlxuICogQE5vdGUgVGhpcyBjbGFzcyBtYXkgaGF2ZSBzb21lIG5ldyBmdW5jdGlvbnMgdG8gZmFjaWxpdGF0ZSBkZXZlbG9wbWVudCwgc28gaXQgaXMgcmVjb21tZW5kZWQgdG8gdXNlIHRoaXMgY2xhc3MgaW5zdGVhZCBvZiBgUm9zRUlQU2VnbWVudGBmb3IgYSBtb3JlIGNvbnZlbmllbnQgZGV2ZWxvcG1lbnQgZXhwZXJpZW5jZS5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvYWxpeXVuLXZwYy1laXBzZWdtZW50XG4gKi9cbmV4cG9ydCBjbGFzcyBFSVBTZWdtZW50IGV4dGVuZHMgcm9zLlJlc291cmNlIGltcGxlbWVudHMgSUVJUFNlZ21lbnQge1xuICAgIHByb3RlY3RlZCBzY29wZTogcm9zLkNvbnN0cnVjdDtcbiAgICBwcm90ZWN0ZWQgaWQ6IHN0cmluZztcbiAgICBwdWJsaWMgcmVhZG9ubHkgcHJvcHM6IEVJUFNlZ21lbnRQcm9wcztcbiAgICBwcm90ZWN0ZWQgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6IGJvb2xlYW47XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgRWlwQWRkcmVzc2VzOiBMaXN0IG9mIEVJUCBhZGRyZXNzZXMuIGxpa2UgW3tcIkFsbG9jYXRpb25JZFwiOiBcImVpcC14eHhcIiwgXCJJcEFkZHJlc3NcIjogXCJ4eC54eC54eC54eFwifV1cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckVpcEFkZHJlc3Nlczogcm9zLklSZXNvbHZhYmxlIHwgc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIEVpcFNlZ21lbnRJbnN0YW5jZUlkOiBUaGUgSUQgb2YgdGhlIGNvbnRpZ3VvdXMgRUlQIGdyb3VwLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyRWlwU2VnbWVudEluc3RhbmNlSWQ6IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFBhcmFtIHNjb3BlIC0gc2NvcGUgaW4gd2hpY2ggdGhpcyByZXNvdXJjZSBpcyBkZWZpbmVkXG4gICAgICogUGFyYW0gaWQgICAgLSBzY29wZWQgaWQgb2YgdGhlIHJlc291cmNlXG4gICAgICogUGFyYW0gcHJvcHMgLSByZXNvdXJjZSBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IHJvcy5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBFSVBTZWdtZW50UHJvcHMsIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OmJvb2xlYW4gPSB0cnVlKSB7XG4gICAgICAgIHN1cGVyKHNjb3BlLCBpZCk7XG4gICAgICAgIHRoaXMuc2NvcGUgPSBzY29wZTtcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xuICAgICAgICB0aGlzLnByb3BzID0gcHJvcHM7XG4gICAgICAgIHRoaXMuZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgPSBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDtcblxuICAgICAgICBjb25zdCByb3NFSVBTZWdtZW50ID0gbmV3IFJvc0VJUFNlZ21lbnQodGhpcywgaWQsICB7XG4gICAgICAgICAgICBlaXBNYXNrOiBwcm9wcy5laXBNYXNrLFxuICAgICAgICAgICAgcmVzb3VyY2VHcm91cElkOiBwcm9wcy5yZXNvdXJjZUdyb3VwSWQsXG4gICAgICAgICAgICBuZXRtb2RlOiBwcm9wcy5uZXRtb2RlLFxuICAgICAgICAgICAgYmFuZHdpZHRoOiBwcm9wcy5iYW5kd2lkdGgsXG4gICAgICAgICAgICBpbnRlcm5ldENoYXJnZVR5cGU6IHByb3BzLmludGVybmV0Q2hhcmdlVHlwZSxcbiAgICAgICAgfSwgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgJiYgdGhpcy5zdGFjay5lbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCk7XG4gICAgICAgIHRoaXMucmVzb3VyY2UgPSByb3NFSVBTZWdtZW50O1xuICAgICAgICB0aGlzLmF0dHJFaXBBZGRyZXNzZXMgPSByb3NFSVBTZWdtZW50LmF0dHJFaXBBZGRyZXNzZXM7XG4gICAgICAgIHRoaXMuYXR0ckVpcFNlZ21lbnRJbnN0YW5jZUlkID0gcm9zRUlQU2VnbWVudC5hdHRyRWlwU2VnbWVudEluc3RhbmNlSWQ7XG4gICAgfVxufVxuIl19