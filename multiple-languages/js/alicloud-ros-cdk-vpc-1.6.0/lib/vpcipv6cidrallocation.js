"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VpcIpv6CidrAllocation = exports.VpcIpv6CidrAllocationProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const vpc_generated_1 = require("./vpc.generated");
Object.defineProperty(exports, "VpcIpv6CidrAllocationProperty", { enumerable: true, get: function () { return vpc_generated_1.RosVpcIpv6CidrAllocation; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::VPC::VpcIpv6CidrAllocation`, which is used to reserve an IPv6 CIDR block.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosVpcIpv6CidrAllocation`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-vpc-vpcipv6cidrallocation
 */
class VpcIpv6CidrAllocation extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props = {}, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosVpcIpv6CidrAllocation = new vpc_generated_1.RosVpcIpv6CidrAllocation(this, id, {
            ipv6Isp: props.ipv6Isp,
            addressPoolType: props.addressPoolType,
            ipv6CidrBlock: props.ipv6CidrBlock,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosVpcIpv6CidrAllocation;
        this.attrIpv6CidrBlock = rosVpcIpv6CidrAllocation.attrIpv6CidrBlock;
    }
}
exports.VpcIpv6CidrAllocation = VpcIpv6CidrAllocation;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidnBjaXB2NmNpZHJhbGxvY2F0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidnBjaXB2NmNpZHJhbGxvY2F0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDhDQUE4QztBQUM5QyxtREFBMkQ7QUFFdEIsOEdBRjVCLHdDQUF3QixPQUVpQztBQStDbEU7Ozs7R0FJRztBQUNILE1BQWEscUJBQXNCLFNBQVEsR0FBRyxDQUFDLFFBQVE7SUFXbkQ7Ozs7T0FJRztJQUNILFlBQVksS0FBb0IsRUFBRSxFQUFVLEVBQUUsUUFBb0MsRUFBRSxFQUFFLG1DQUEyQyxJQUFJO1FBQ2pJLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDakIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUM7UUFDYixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsZ0NBQWdDLEdBQUcsZ0NBQWdDLENBQUM7UUFFekUsTUFBTSx3QkFBd0IsR0FBRyxJQUFJLHdDQUF3QixDQUFDLElBQUksRUFBRSxFQUFFLEVBQUc7WUFDckUsT0FBTyxFQUFFLEtBQUssQ0FBQyxPQUFPO1lBQ3RCLGVBQWUsRUFBRSxLQUFLLENBQUMsZUFBZTtZQUN0QyxhQUFhLEVBQUUsS0FBSyxDQUFDLGFBQWE7U0FDckMsRUFBRSxnQ0FBZ0MsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7UUFDcEYsSUFBSSxDQUFDLFFBQVEsR0FBRyx3QkFBd0IsQ0FBQztRQUN6QyxJQUFJLENBQUMsaUJBQWlCLEdBQUcsd0JBQXdCLENBQUMsaUJBQWlCLENBQUM7SUFDeEUsQ0FBQztDQUNKO0FBL0JELHNEQStCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHJvcyBmcm9tICdAYWxpY2xvdWQvcm9zLWNkay1jb3JlJztcbmltcG9ydCB7IFJvc1ZwY0lwdjZDaWRyQWxsb2NhdGlvbiB9IGZyb20gJy4vdnBjLmdlbmVyYXRlZCc7XG4vLyBHZW5lcmF0ZWQgZnJvbSB0aGUgQWxpQ2xvdWQgUk9TIFJlc291cmNlIFNwZWNpZmljYXRpb25cbmV4cG9ydCB7IFJvc1ZwY0lwdjZDaWRyQWxsb2NhdGlvbiBhcyBWcGNJcHY2Q2lkckFsbG9jYXRpb25Qcm9wZXJ0eSB9O1xuXG4vKipcbiAqIFByb3BlcnRpZXMgZm9yIGRlZmluaW5nIGEgYFZwY0lwdjZDaWRyQWxsb2NhdGlvbmAuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2FsaXl1bi12cGMtdnBjaXB2NmNpZHJhbGxvY2F0aW9uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVnBjSXB2NkNpZHJBbGxvY2F0aW9uUHJvcHMge1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgYWRkcmVzc1Bvb2xUeXBlOiBUaGUgdHlwZSBvZiB0aGUgSVB2NiBhZGRyZXNzIHBvb2wuIFNldCB0aGUgdmFsdWUgdG8gY3VzdG9tLlxuICAgICAqIE5vdGUgVGhpcyBwYXJhbWV0ZXIgaXMgcmVxdWlyZWQuXG4gICAgICovXG4gICAgcmVhZG9ubHkgYWRkcmVzc1Bvb2xUeXBlPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgaXB2NkNpZHJCbG9jazogVGhlIElQdjYgQ0lEUiBibG9jayB0aGF0IHlvdSB3YW50IHRvIHJlc2VydmUuXG4gICAgICovXG4gICAgcmVhZG9ubHkgaXB2NkNpZHJCbG9jaz86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGlwdjZJc3A6IFRoZSB0eXBlIG9mIElQdjYgQ0lEUiBibG9jay4gVmFsaWQgdmFsdWVzOlxuICAgICAqIEJHUCAoZGVmYXVsdClcbiAgICAgKiBCR1BfSW50ZXJuYXRpb25hbFxuICAgICAqIENoaW5hTW9iaWxlXG4gICAgICogQ2hpbmFVbmljb21cbiAgICAgKiBDaGluYVRlbGVjb21cbiAgICAgKiBDaGluYU1vYmlsZV9MMlxuICAgICAqIENoaW5hVW5pY29tX0wyXG4gICAgICogQ2hpbmFUZWxlY29tX0wyXG4gICAgICogTm90ZVxuICAgICAqIElmIHlvdXIgQWxpYmFiYSBDbG91ZCBhY2NvdW50IGlzIGFsbG93ZWQgdG8gdXNlIHNpbmdsZS1JU1AgYmFuZHdpZHRoLCB2YWxpZCB2YWx1ZXMgYXJlOiBDaGluYVRlbGVjb20sIENoaW5hVW5pY29tLCBhbmQgQ2hpbmFNb2JpbGUuXG4gICAgICogWW91IGNhbiByZXNlcnZlIG9ubHkgb25lIElQdjYgQ0lEUiBibG9jayBvZiBlYWNoIHR5cGUuIEFmdGVyIGEgcmVzZXJ2ZWQgSVB2NiBDSURSIGJsb2NrIG9mIGEgdHlwZSBpcyBhbGxvY2F0ZWQgdG8gYSBWUEMsIHlvdSBjYW4gcmVzZXJ2ZSBhbm90aGVyIElQdjYgQ0lEUiBvZiB0aGUgdHlwZS5cbiAgICAgKi9cbiAgICByZWFkb25seSBpcHY2SXNwPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xufVxuXG4vKipcbiAqIFJlcHJlc2VudHMgYSBgVnBjSXB2NkNpZHJBbGxvY2F0aW9uYC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJVnBjSXB2NkNpZHJBbGxvY2F0aW9uIGV4dGVuZHMgcm9zLklSZXNvdXJjZSB7XG4gICAgcmVhZG9ubHkgcHJvcHM6IFZwY0lwdjZDaWRyQWxsb2NhdGlvblByb3BzO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIElwdjZDaWRyQmxvY2s6IFRoZSBJUHY2IENJRFIgYmxvY2sgdGhhdCBpcyByZXNlcnZlZC5cbiAgICAgKi9cbiAgICByZWFkb25seSBhdHRySXB2NkNpZHJCbG9jazogcm9zLklSZXNvbHZhYmxlIHwgc3RyaW5nO1xufVxuLyoqXG4gKiBUaGlzIGNsYXNzIGVuY2Fwc3VsYXRlcyBhbmQgZXh0ZW5kcyB0aGUgUk9TIHJlc291cmNlIHR5cGUgYEFMSVlVTjo6VlBDOjpWcGNJcHY2Q2lkckFsbG9jYXRpb25gLCB3aGljaCBpcyB1c2VkIHRvIHJlc2VydmUgYW4gSVB2NiBDSURSIGJsb2NrLlxuICogQE5vdGUgVGhpcyBjbGFzcyBtYXkgaGF2ZSBzb21lIG5ldyBmdW5jdGlvbnMgdG8gZmFjaWxpdGF0ZSBkZXZlbG9wbWVudCwgc28gaXQgaXMgcmVjb21tZW5kZWQgdG8gdXNlIHRoaXMgY2xhc3MgaW5zdGVhZCBvZiBgUm9zVnBjSXB2NkNpZHJBbGxvY2F0aW9uYGZvciBhIG1vcmUgY29udmVuaWVudCBkZXZlbG9wbWVudCBleHBlcmllbmNlLlxuICogU2VlIGh0dHBzOi8vd3d3LmFsaWJhYmFjbG91ZC5jb20vaGVscC9yb3MvZGV2ZWxvcGVyLXJlZmVyZW5jZS9hbGl5dW4tdnBjLXZwY2lwdjZjaWRyYWxsb2NhdGlvblxuICovXG5leHBvcnQgY2xhc3MgVnBjSXB2NkNpZHJBbGxvY2F0aW9uIGV4dGVuZHMgcm9zLlJlc291cmNlIGltcGxlbWVudHMgSVZwY0lwdjZDaWRyQWxsb2NhdGlvbiB7XG4gICAgcHJvdGVjdGVkIHNjb3BlOiByb3MuQ29uc3RydWN0O1xuICAgIHByb3RlY3RlZCBpZDogc3RyaW5nO1xuICAgIHB1YmxpYyByZWFkb25seSBwcm9wczogVnBjSXB2NkNpZHJBbGxvY2F0aW9uUHJvcHM7XG4gICAgcHJvdGVjdGVkIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OiBib29sZWFuO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIElwdjZDaWRyQmxvY2s6IFRoZSBJUHY2IENJRFIgYmxvY2sgdGhhdCBpcyByZXNlcnZlZC5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0cklwdjZDaWRyQmxvY2s6IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFBhcmFtIHNjb3BlIC0gc2NvcGUgaW4gd2hpY2ggdGhpcyByZXNvdXJjZSBpcyBkZWZpbmVkXG4gICAgICogUGFyYW0gaWQgICAgLSBzY29wZWQgaWQgb2YgdGhlIHJlc291cmNlXG4gICAgICogUGFyYW0gcHJvcHMgLSByZXNvdXJjZSBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IHJvcy5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBWcGNJcHY2Q2lkckFsbG9jYXRpb25Qcm9wcyA9IHt9LCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDpib29sZWFuID0gdHJ1ZSkge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQpO1xuICAgICAgICB0aGlzLnNjb3BlID0gc2NvcGU7XG4gICAgICAgIHRoaXMuaWQgPSBpZDtcbiAgICAgICAgdGhpcy5wcm9wcyA9IHByb3BzO1xuICAgICAgICB0aGlzLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ID0gZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ7XG5cbiAgICAgICAgY29uc3Qgcm9zVnBjSXB2NkNpZHJBbGxvY2F0aW9uID0gbmV3IFJvc1ZwY0lwdjZDaWRyQWxsb2NhdGlvbih0aGlzLCBpZCwgIHtcbiAgICAgICAgICAgIGlwdjZJc3A6IHByb3BzLmlwdjZJc3AsXG4gICAgICAgICAgICBhZGRyZXNzUG9vbFR5cGU6IHByb3BzLmFkZHJlc3NQb29sVHlwZSxcbiAgICAgICAgICAgIGlwdjZDaWRyQmxvY2s6IHByb3BzLmlwdjZDaWRyQmxvY2ssXG4gICAgICAgIH0sIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ICYmIHRoaXMuc3RhY2suZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQpO1xuICAgICAgICB0aGlzLnJlc291cmNlID0gcm9zVnBjSXB2NkNpZHJBbGxvY2F0aW9uO1xuICAgICAgICB0aGlzLmF0dHJJcHY2Q2lkckJsb2NrID0gcm9zVnBjSXB2NkNpZHJBbGxvY2F0aW9uLmF0dHJJcHY2Q2lkckJsb2NrO1xuICAgIH1cbn1cbiJdfQ==