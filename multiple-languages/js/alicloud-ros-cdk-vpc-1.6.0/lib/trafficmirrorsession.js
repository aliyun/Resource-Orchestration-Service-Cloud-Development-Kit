"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TrafficMirrorSession = exports.TrafficMirrorSessionProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const vpc_generated_1 = require("./vpc.generated");
Object.defineProperty(exports, "TrafficMirrorSessionProperty", { enumerable: true, get: function () { return vpc_generated_1.RosTrafficMirrorSession; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::VPC::TrafficMirrorSession`, which is used to create a traffic image session.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosTrafficMirrorSession`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-vpc-trafficmirrorsession
 */
class TrafficMirrorSession extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosTrafficMirrorSession = new vpc_generated_1.RosTrafficMirrorSession(this, id, {
            trafficMirrorTargetId: props.trafficMirrorTargetId,
            resourceGroupId: props.resourceGroupId,
            virtualNetworkId: props.virtualNetworkId,
            trafficMirrorSourceIds: props.trafficMirrorSourceIds,
            priority: props.priority,
            packetLength: props.packetLength,
            enabled: props.enabled,
            trafficMirrorSessionDescription: props.trafficMirrorSessionDescription,
            tag: props.tag,
            trafficMirrorSessionName: props.trafficMirrorSessionName,
            trafficMirrorFilterId: props.trafficMirrorFilterId,
            trafficMirrorTargetType: props.trafficMirrorTargetType,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosTrafficMirrorSession;
        this.attrTrafficMirrorSessionId = rosTrafficMirrorSession.attrTrafficMirrorSessionId;
    }
}
exports.TrafficMirrorSession = TrafficMirrorSession;
//# sourceMappingURL=data:application/json;base64,