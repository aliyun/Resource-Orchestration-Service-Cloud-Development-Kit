"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DBInstance = exports.DBInstanceProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const gpdb_generated_1 = require("./gpdb.generated");
Object.defineProperty(exports, "DBInstanceProperty", { enumerable: true, get: function () { return gpdb_generated_1.RosDBInstance; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::GPDB::DBInstance`, which is used to create an AnalyticDB for PostgreSQL instance in reserved storage mode.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosDBInstance`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-gpdb-dbinstance
 */
class DBInstance extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosDBInstance = new gpdb_generated_1.RosDBInstance(this, id, {
            masterNodeNum: props.masterNodeNum,
            instanceSpec: props.instanceSpec,
            privateIpAddress: props.privateIpAddress,
            idleTime: props.idleTime,
            segNodeNum: props.segNodeNum,
            segStorageType: props.segStorageType,
            encryptionKey: props.encryptionKey,
            dbInstanceGroupCount: props.dbInstanceGroupCount,
            dbInstanceCategory: props.dbInstanceCategory,
            vectorConfigurationStatus: props.vectorConfigurationStatus,
            securityIpList: props.securityIpList,
            serverlessResource: props.serverlessResource,
            tags: props.tags,
            dbInstanceDescription: props.dbInstanceDescription,
            encryptionType: props.encryptionType,
            serverlessMode: props.serverlessMode,
            engineVersion: props.engineVersion,
            createSampleData: props.createSampleData,
            zoneId: props.zoneId,
            vpcId: props.vpcId,
            dbInstanceClass: props.dbInstanceClass,
            prodType: props.prodType === undefined || props.prodType === null ? 'standard' : props.prodType,
            vSwitchId: props.vSwitchId,
            period: props.period,
            storageSize: props.storageSize,
            payType: props.payType === undefined || props.payType === null ? 'Postpaid' : props.payType,
            dbInstanceMode: props.dbInstanceMode,
            segDiskPerformanceLevel: props.segDiskPerformanceLevel,
            periodUnit: props.periodUnit === undefined || props.periodUnit === null ? 'Month' : props.periodUnit,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosDBInstance;
        this.attrConnectionString = rosDBInstance.attrConnectionString;
        this.attrDbInstanceId = rosDBInstance.attrDbInstanceId;
        this.attrOrderId = rosDBInstance.attrOrderId;
        this.attrPort = rosDBInstance.attrPort;
    }
}
exports.DBInstance = DBInstance;
//# sourceMappingURL=data:application/json;base64,