"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Asset = void 0;
const path = require("path");
const ros = require("@alicloud/ros-cdk-core");
const cxapi = require("@alicloud/ros-cdk-cxapi");
/**
 * An asset represents a local file or directory, which is automatically uploaded to OSS bucket
 * and then can be referenced within a CDK application.
 */
class Asset extends ros.Resource {
    constructor(scope, id, props) {
        super(scope, id);
        this.isBundled = props.bundling != null;
        // stage the asset source (conditionally).
        const staging = new ros.AssetStaging(this, 'Stage', {
            ...props,
            sourcePath: path.resolve(props.path),
            follow: props.followSymlinks,
            assetHash: props.assetHash,
        });
        this.assetHash = staging.assetHash;
        const stack = ros.Stack.of(this);
        this.assetPath = staging.relativeStagedPath(stack);
        this.isFile = staging.packaging === ros.FileAssetPackaging.FILE;
        this.isZipArchive = staging.isArchive;
        const location = stack.synthesizer.addFileAsset({
            packaging: staging.packaging,
            sourceHash: this.assetHash,
            fileName: this.assetPath,
            deployTime: props.deployTime,
        });
        this.bucketName = location.bucketName;
        this.objectKey = location.objectKey;
        this.httpUrl = location.httpUrl;
    }
    /**
     * Adds ROS template metadata to the specified resource with
     * information that indicates which resource property is mapped to this local
     * asset.
     *
     * Asset metadata will only be included if the stack is synthesized with the
     * "ros:cdk:enable-asset-metadata" context key defined, which is the default
     * behavior when synthesizing via the CDK Toolkit.
     *
     * @param resource The ROS resource which is using this asset
     * @param resourceProperty The property name where this asset is referenced
     */
    addResourceMetadata(resource, resourceProperty) {
        if (!this.node.tryGetContext(cxapi.ASSET_RESOURCE_METADATA_ENABLED_CONTEXT)) {
            return; // not enabled
        }
        resource.rosOptions.metadata = resource.rosOptions.metadata || {};
        resource.rosOptions.metadata[cxapi.ASSET_RESOURCE_METADATA_PATH_KEY] = this.assetPath;
        resource.rosOptions.metadata[cxapi.ASSET_RESOURCE_METADATA_IS_BUNDLED_KEY] = this.isBundled;
        resource.rosOptions.metadata[cxapi.ASSET_RESOURCE_METADATA_PROPERTY_KEY] = resourceProperty;
    }
}
exports.Asset = Asset;
//# sourceMappingURL=data:application/json;base64,