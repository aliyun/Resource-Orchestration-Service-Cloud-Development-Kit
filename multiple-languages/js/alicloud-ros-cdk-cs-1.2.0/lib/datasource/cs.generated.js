"use strict";
// Generated from the AliCloud ROS Resource Specification
Object.defineProperty(exports, "__esModule", { value: true });
exports.RosKubernetesClusters = exports.RosKubernetesCluster = exports.RosClusterUserKubeconfig = exports.RosClusterNodePools = exports.RosClusterApplicationResources = void 0;
const ros = require("@alicloud/ros-cdk-core");
/**
 * Determine whether the given properties match those of a `RosClusterApplicationResourcesProps`
 *
 * @param properties - the TypeScript properties of a `RosClusterApplicationResourcesProps`
 *
 * @returns the result of the validation.
 */
function RosClusterApplicationResourcesPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('firstMatch', ros.validateBoolean)(properties.firstMatch));
    errors.collect(ros.propertyValidator('clusterId', ros.requiredValidator)(properties.clusterId));
    errors.collect(ros.propertyValidator('clusterId', ros.validateString)(properties.clusterId));
    errors.collect(ros.propertyValidator('kind', ros.requiredValidator)(properties.kind));
    errors.collect(ros.propertyValidator('kind', ros.validateString)(properties.kind));
    errors.collect(ros.propertyValidator('jsonPath', ros.validateString)(properties.jsonPath));
    errors.collect(ros.propertyValidator('namespace', ros.validateString)(properties.namespace));
    errors.collect(ros.propertyValidator('name', ros.validateString)(properties.name));
    if (properties.refreshOptions && (typeof properties.refreshOptions) !== 'object') {
        errors.collect(ros.propertyValidator('refreshOptions', ros.validateAllowedValues)({
            data: properties.refreshOptions,
            allowedValues: ["Always", "Never"],
        }));
    }
    errors.collect(ros.propertyValidator('refreshOptions', ros.validateString)(properties.refreshOptions));
    return errors.wrap('supplied properties not correct for "RosClusterApplicationResourcesProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `DATASOURCE::CS::ClusterApplicationResources` resource
 *
 * @param properties - the TypeScript properties of a `RosClusterApplicationResourcesProps`
 *
 * @returns the AliCloud ROS Resource properties of an `DATASOURCE::CS::ClusterApplicationResources` resource.
 */
// @ts-ignore TS6133
function rosClusterApplicationResourcesPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosClusterApplicationResourcesPropsValidator(properties).assertSuccess();
    }
    return {
        'ClusterId': ros.stringToRosTemplate(properties.clusterId),
        'Kind': ros.stringToRosTemplate(properties.kind),
        'FirstMatch': ros.booleanToRosTemplate(properties.firstMatch),
        'JsonPath': ros.stringToRosTemplate(properties.jsonPath),
        'Name': ros.stringToRosTemplate(properties.name),
        'Namespace': ros.stringToRosTemplate(properties.namespace),
        'RefreshOptions': ros.stringToRosTemplate(properties.refreshOptions),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `DATASOURCE::CS::ClusterApplicationResources`, which is used to query the details of specified types of resources in a Container Service for Kubernetes (ACK) cluster.
 * @Note This class does not contain additional functions, so it is recommended to use the `ClusterApplicationResources` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/datasource-cs-clusterapplicationresources
 */
class RosClusterApplicationResources extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosClusterApplicationResources.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrResponse = this.getAtt('Response');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.clusterId = props.clusterId;
        this.kind = props.kind;
        this.firstMatch = props.firstMatch;
        this.jsonPath = props.jsonPath;
        this.name = props.name;
        this.namespace = props.namespace;
        this.refreshOptions = props.refreshOptions;
    }
    get rosProperties() {
        return {
            clusterId: this.clusterId,
            kind: this.kind,
            firstMatch: this.firstMatch,
            jsonPath: this.jsonPath,
            name: this.name,
            namespace: this.namespace,
            refreshOptions: this.refreshOptions,
        };
    }
    renderProperties(props) {
        return rosClusterApplicationResourcesPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosClusterApplicationResources = RosClusterApplicationResources;
/**
 * The resource type name for this resource class.
 */
RosClusterApplicationResources.ROS_RESOURCE_TYPE_NAME = "DATASOURCE::CS::ClusterApplicationResources";
/**
 * Determine whether the given properties match those of a `RosClusterNodePoolsProps`
 *
 * @param properties - the TypeScript properties of a `RosClusterNodePoolsProps`
 *
 * @returns the result of the validation.
 */
function RosClusterNodePoolsPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('clusterId', ros.requiredValidator)(properties.clusterId));
    errors.collect(ros.propertyValidator('clusterId', ros.validateString)(properties.clusterId));
    if (properties.refreshOptions && (typeof properties.refreshOptions) !== 'object') {
        errors.collect(ros.propertyValidator('refreshOptions', ros.validateAllowedValues)({
            data: properties.refreshOptions,
            allowedValues: ["Always", "Never"],
        }));
    }
    errors.collect(ros.propertyValidator('refreshOptions', ros.validateString)(properties.refreshOptions));
    return errors.wrap('supplied properties not correct for "RosClusterNodePoolsProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `DATASOURCE::CS::ClusterNodePools` resource
 *
 * @param properties - the TypeScript properties of a `RosClusterNodePoolsProps`
 *
 * @returns the AliCloud ROS Resource properties of an `DATASOURCE::CS::ClusterNodePools` resource.
 */
// @ts-ignore TS6133
function rosClusterNodePoolsPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosClusterNodePoolsPropsValidator(properties).assertSuccess();
    }
    return {
        'ClusterId': ros.stringToRosTemplate(properties.clusterId),
        'RefreshOptions': ros.stringToRosTemplate(properties.refreshOptions),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `DATASOURCE::CS::ClusterNodePools`, which is used to query the details of all node pools in a cluster.
 * @Note This class does not contain additional functions, so it is recommended to use the `ClusterNodePools` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/datasource-cs-clusternodepools
 */
class RosClusterNodePools extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosClusterNodePools.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrNodePoolIds = this.getAtt('NodePoolIds');
        this.attrNodePools = this.getAtt('NodePools');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.clusterId = props.clusterId;
        this.refreshOptions = props.refreshOptions;
    }
    get rosProperties() {
        return {
            clusterId: this.clusterId,
            refreshOptions: this.refreshOptions,
        };
    }
    renderProperties(props) {
        return rosClusterNodePoolsPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosClusterNodePools = RosClusterNodePools;
/**
 * The resource type name for this resource class.
 */
RosClusterNodePools.ROS_RESOURCE_TYPE_NAME = "DATASOURCE::CS::ClusterNodePools";
/**
 * Determine whether the given properties match those of a `RosClusterUserKubeconfigProps`
 *
 * @param properties - the TypeScript properties of a `RosClusterUserKubeconfigProps`
 *
 * @returns the result of the validation.
 */
function RosClusterUserKubeconfigPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('privateIpAddress', ros.validateBoolean)(properties.privateIpAddress));
    errors.collect(ros.propertyValidator('clusterId', ros.requiredValidator)(properties.clusterId));
    errors.collect(ros.propertyValidator('clusterId', ros.validateString)(properties.clusterId));
    if (properties.temporaryDurationMinutes && (typeof properties.temporaryDurationMinutes) !== 'object') {
        errors.collect(ros.propertyValidator('temporaryDurationMinutes', ros.validateRange)({
            data: properties.temporaryDurationMinutes,
            min: 15,
            max: 4320,
        }));
    }
    errors.collect(ros.propertyValidator('temporaryDurationMinutes', ros.validateNumber)(properties.temporaryDurationMinutes));
    if (properties.refreshOptions && (typeof properties.refreshOptions) !== 'object') {
        errors.collect(ros.propertyValidator('refreshOptions', ros.validateAllowedValues)({
            data: properties.refreshOptions,
            allowedValues: ["Always", "Never"],
        }));
    }
    errors.collect(ros.propertyValidator('refreshOptions', ros.validateString)(properties.refreshOptions));
    return errors.wrap('supplied properties not correct for "RosClusterUserKubeconfigProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `DATASOURCE::CS::ClusterUserKubeconfig` resource
 *
 * @param properties - the TypeScript properties of a `RosClusterUserKubeconfigProps`
 *
 * @returns the AliCloud ROS Resource properties of an `DATASOURCE::CS::ClusterUserKubeconfig` resource.
 */
// @ts-ignore TS6133
function rosClusterUserKubeconfigPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosClusterUserKubeconfigPropsValidator(properties).assertSuccess();
    }
    return {
        'ClusterId': ros.stringToRosTemplate(properties.clusterId),
        'PrivateIpAddress': ros.booleanToRosTemplate(properties.privateIpAddress),
        'RefreshOptions': ros.stringToRosTemplate(properties.refreshOptions),
        'TemporaryDurationMinutes': ros.numberToRosTemplate(properties.temporaryDurationMinutes),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `DATASOURCE::CS::ClusterUserKubeconfig`, which is used to query the kubeconfig configurations of a Container Service for Kubernetes (ACK) cluster by cluster ID.
 * @Note This class does not contain additional functions, so it is recommended to use the `ClusterUserKubeconfig` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/datasource-cs-clusteruserkubeconfig
 */
class RosClusterUserKubeconfig extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosClusterUserKubeconfig.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrClusterId = this.getAtt('ClusterId');
        this.attrConfig = this.getAtt('Config');
        this.attrExpiration = this.getAtt('Expiration');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.clusterId = props.clusterId;
        this.privateIpAddress = props.privateIpAddress;
        this.refreshOptions = props.refreshOptions;
        this.temporaryDurationMinutes = props.temporaryDurationMinutes;
    }
    get rosProperties() {
        return {
            clusterId: this.clusterId,
            privateIpAddress: this.privateIpAddress,
            refreshOptions: this.refreshOptions,
            temporaryDurationMinutes: this.temporaryDurationMinutes,
        };
    }
    renderProperties(props) {
        return rosClusterUserKubeconfigPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosClusterUserKubeconfig = RosClusterUserKubeconfig;
/**
 * The resource type name for this resource class.
 */
RosClusterUserKubeconfig.ROS_RESOURCE_TYPE_NAME = "DATASOURCE::CS::ClusterUserKubeconfig";
/**
 * Determine whether the given properties match those of a `RosKubernetesClusterProps`
 *
 * @param properties - the TypeScript properties of a `RosKubernetesClusterProps`
 *
 * @returns the result of the validation.
 */
function RosKubernetesClusterPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('clusterId', ros.validateString)(properties.clusterId));
    if (properties.refreshOptions && (typeof properties.refreshOptions) !== 'object') {
        errors.collect(ros.propertyValidator('refreshOptions', ros.validateAllowedValues)({
            data: properties.refreshOptions,
            allowedValues: ["Always", "Never"],
        }));
    }
    errors.collect(ros.propertyValidator('refreshOptions', ros.validateString)(properties.refreshOptions));
    return errors.wrap('supplied properties not correct for "RosKubernetesClusterProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `DATASOURCE::CS::KubernetesCluster` resource
 *
 * @param properties - the TypeScript properties of a `RosKubernetesClusterProps`
 *
 * @returns the AliCloud ROS Resource properties of an `DATASOURCE::CS::KubernetesCluster` resource.
 */
// @ts-ignore TS6133
function rosKubernetesClusterPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosKubernetesClusterPropsValidator(properties).assertSuccess();
    }
    return {
        'ClusterId': ros.stringToRosTemplate(properties.clusterId),
        'RefreshOptions': ros.stringToRosTemplate(properties.refreshOptions),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `DATASOURCE::CS::KubernetesCluster`, which is used to query the information about a Container Service for Kubernetes (ACK) cluster.
 * @Note This class does not contain additional functions, so it is recommended to use the `KubernetesCluster` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/datasource-cs-kubernetescluster
 */
class RosKubernetesCluster extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosKubernetesCluster.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrClusterId = this.getAtt('ClusterId');
        this.attrClusterSpec = this.getAtt('ClusterSpec');
        this.attrClusterType = this.getAtt('ClusterType');
        this.attrCreated = this.getAtt('Created');
        this.attrCurrentVersion = this.getAtt('CurrentVersion');
        this.attrDeletionProtection = this.getAtt('DeletionProtection');
        this.attrDockerVersion = this.getAtt('DockerVersion');
        this.attrExternalLoadbalancerId = this.getAtt('ExternalLoadbalancerId');
        this.attrInitVersion = this.getAtt('InitVersion');
        this.attrMaintenanceWindow = this.getAtt('MaintenanceWindow');
        this.attrMasterUrl = this.getAtt('MasterUrl');
        this.attrMetaData = this.getAtt('MetaData');
        this.attrName = this.getAtt('Name');
        this.attrNetworkMode = this.getAtt('NetworkMode');
        this.attrNextVersion = this.getAtt('NextVersion');
        this.attrParameters = this.getAtt('Parameters');
        this.attrPrivateZone = this.getAtt('PrivateZone');
        this.attrProfile = this.getAtt('Profile');
        this.attrRegionId = this.getAtt('RegionId');
        this.attrResourceGroupId = this.getAtt('ResourceGroupId');
        this.attrSecurityGroupId = this.getAtt('SecurityGroupId');
        this.attrSize = this.getAtt('Size');
        this.attrState = this.getAtt('State');
        this.attrSubnetCidr = this.getAtt('SubnetCidr');
        this.attrTags = this.getAtt('Tags');
        this.attrUpdated = this.getAtt('Updated');
        this.attrVSwitchId = this.getAtt('VSwitchId');
        this.attrVpcId = this.getAtt('VpcId');
        this.attrWorkerRamRoleName = this.getAtt('WorkerRamRoleName');
        this.attrZoneId = this.getAtt('ZoneId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.clusterId = props.clusterId;
        this.refreshOptions = props.refreshOptions;
    }
    get rosProperties() {
        return {
            clusterId: this.clusterId,
            refreshOptions: this.refreshOptions,
        };
    }
    renderProperties(props) {
        return rosKubernetesClusterPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosKubernetesCluster = RosKubernetesCluster;
/**
 * The resource type name for this resource class.
 */
RosKubernetesCluster.ROS_RESOURCE_TYPE_NAME = "DATASOURCE::CS::KubernetesCluster";
/**
 * Determine whether the given properties match those of a `RosKubernetesClustersProps`
 *
 * @param properties - the TypeScript properties of a `RosKubernetesClustersProps`
 *
 * @returns the result of the validation.
 */
function RosKubernetesClustersPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('clusterSpec', ros.validateString)(properties.clusterSpec));
    errors.collect(ros.propertyValidator('clusterType', ros.validateString)(properties.clusterType));
    errors.collect(ros.propertyValidator('profile', ros.validateString)(properties.profile));
    if (properties.refreshOptions && (typeof properties.refreshOptions) !== 'object') {
        errors.collect(ros.propertyValidator('refreshOptions', ros.validateAllowedValues)({
            data: properties.refreshOptions,
            allowedValues: ["Always", "Never"],
        }));
    }
    errors.collect(ros.propertyValidator('refreshOptions', ros.validateString)(properties.refreshOptions));
    errors.collect(ros.propertyValidator('name', ros.validateString)(properties.name));
    return errors.wrap('supplied properties not correct for "RosKubernetesClustersProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `DATASOURCE::CS::KubernetesClusters` resource
 *
 * @param properties - the TypeScript properties of a `RosKubernetesClustersProps`
 *
 * @returns the AliCloud ROS Resource properties of an `DATASOURCE::CS::KubernetesClusters` resource.
 */
// @ts-ignore TS6133
function rosKubernetesClustersPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosKubernetesClustersPropsValidator(properties).assertSuccess();
    }
    return {
        'ClusterSpec': ros.stringToRosTemplate(properties.clusterSpec),
        'ClusterType': ros.stringToRosTemplate(properties.clusterType),
        'Name': ros.stringToRosTemplate(properties.name),
        'Profile': ros.stringToRosTemplate(properties.profile),
        'RefreshOptions': ros.stringToRosTemplate(properties.refreshOptions),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `DATASOURCE::CS::KubernetesClusters`, which is used to query Container Service for Kubernetes (ACK) clusters.
 * @Note This class does not contain additional functions, so it is recommended to use the `KubernetesClusters` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/datasource-cs-kubernetesclusters
 */
class RosKubernetesClusters extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosKubernetesClusters.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrClusterIds = this.getAtt('ClusterIds');
        this.attrClusters = this.getAtt('Clusters');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.clusterSpec = props.clusterSpec;
        this.clusterType = props.clusterType;
        this.name = props.name;
        this.profile = props.profile;
        this.refreshOptions = props.refreshOptions;
    }
    get rosProperties() {
        return {
            clusterSpec: this.clusterSpec,
            clusterType: this.clusterType,
            name: this.name,
            profile: this.profile,
            refreshOptions: this.refreshOptions,
        };
    }
    renderProperties(props) {
        return rosKubernetesClustersPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosKubernetesClusters = RosKubernetesClusters;
/**
 * The resource type name for this resource class.
 */
RosKubernetesClusters.ROS_RESOURCE_TYPE_NAME = "DATASOURCE::CS::KubernetesClusters";
//# sourceMappingURL=data:application/json;base64,