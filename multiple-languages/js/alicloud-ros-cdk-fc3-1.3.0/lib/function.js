"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Function = exports.FunctionProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const fc3_generated_1 = require("./fc3.generated");
Object.defineProperty(exports, "FunctionProperty", { enumerable: true, get: function () { return fc3_generated_1.RosFunction; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::FC3::Function`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosFunction`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-fc3-function
 */
class Function extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosFunction = new fc3_generated_1.RosFunction(this, id, {
            memorySize: props.memorySize,
            description: props.description,
            tracingConfig: props.tracingConfig,
            vpcConfig: props.vpcConfig,
            timeout: props.timeout,
            instanceLifecycleConfig: props.instanceLifecycleConfig,
            handler: props.handler,
            cpu: props.cpu,
            customContainerConfig: props.customContainerConfig,
            code: props.code,
            role: props.role,
            functionName: props.functionName,
            internetAccess: props.internetAccess,
            runtime: props.runtime,
            environmentVariables: props.environmentVariables,
            customRuntimeConfig: props.customRuntimeConfig,
            gpuConfig: props.gpuConfig,
            ossMountConfig: props.ossMountConfig,
            diskSize: props.diskSize,
            customDns: props.customDns,
            instanceConcurrency: props.instanceConcurrency,
            layers: props.layers,
            nasConfig: props.nasConfig,
            logConfig: props.logConfig,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosFunction;
        this.attrArn = rosFunction.attrArn;
        this.attrFunctionId = rosFunction.attrFunctionId;
        this.attrFunctionName = rosFunction.attrFunctionName;
    }
}
exports.Function = Function;
//# sourceMappingURL=data:application/json;base64,