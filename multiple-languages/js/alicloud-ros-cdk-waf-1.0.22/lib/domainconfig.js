"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DomainConfig = exports.DomainConfigProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const waf_generated_1 = require("./waf.generated");
Object.defineProperty(exports, "DomainConfigProperty", { enumerable: true, get: function () { return waf_generated_1.RosDomainConfig; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::WAF::DomainConfig`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosDomainConfig`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-waf-domainconfig
 */
class DomainConfig extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosDomainConfig = new waf_generated_1.RosDomainConfig(this, id, {
            httpToUserIp: props.httpToUserIp,
            httpPort: props.httpPort,
            isAccessProduct: props.isAccessProduct,
            rsType: props.rsType,
            protocols: props.protocols,
            instanceId: props.instanceId,
            sourceIps: props.sourceIps,
            httpsRedirect: props.httpsRedirect,
            region: props.region,
            domain: props.domain,
            loadBalancing: props.loadBalancing,
            httpsPort: props.httpsPort,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosDomainConfig;
        this.attrCname = rosDomainConfig.attrCname;
        this.attrProtocolType = rosDomainConfig.attrProtocolType;
    }
}
exports.DomainConfig = DomainConfig;
//# sourceMappingURL=data:application/json;base64,