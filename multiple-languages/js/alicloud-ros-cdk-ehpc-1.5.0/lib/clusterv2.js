"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClusterV2 = exports.ClusterV2Property = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ehpc_generated_1 = require("./ehpc.generated");
Object.defineProperty(exports, "ClusterV2Property", { enumerable: true, get: function () { return ehpc_generated_1.RosClusterV2; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::EHPC::ClusterV2`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosClusterV2`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-ehpc-clusterv2
 */
class ClusterV2 extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosClusterV2 = new ehpc_generated_1.RosClusterV2(this, id, {
            clusterCredentials: props.clusterCredentials,
            additionalPackages: props.additionalPackages,
            resourceGroupId: props.resourceGroupId,
            clusterMode: props.clusterMode,
            clusterCategory: props.clusterCategory === undefined || props.clusterCategory === null ? 'Standard' : props.clusterCategory,
            securityGroupId: props.securityGroupId,
            vSwitchId: props.vSwitchId,
            addons: props.addons,
            deletionProtection: props.deletionProtection,
            maxCount: props.maxCount,
            clientVersion: props.clientVersion,
            manager: props.manager,
            sharedStorages: props.sharedStorages,
            isEnterpriseSecurityGroup: props.isEnterpriseSecurityGroup,
            vpcId: props.vpcId,
            clusterName: props.clusterName,
            clusterCustomConfiguration: props.clusterCustomConfiguration,
            queues: props.queues,
            clusterDescription: props.clusterDescription,
            tags: props.tags,
            maxCoreCount: props.maxCoreCount,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosClusterV2;
        this.attrClusterId = rosClusterV2.attrClusterId;
    }
}
exports.ClusterV2 = ClusterV2;
//# sourceMappingURL=data:application/json;base64,