"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BizType = exports.BizTypeProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const aligreen_generated_1 = require("./aligreen.generated");
Object.defineProperty(exports, "BizTypeProperty", { enumerable: true, get: function () { return aligreen_generated_1.RosBizType; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::Aligreen::BizType`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosBizType`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-aligreen-biztype
 */
class BizType extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosBizType = new aligreen_generated_1.RosBizType(this, id, {
            bizTypeImport: props.bizTypeImport,
            bizTypeName: props.bizTypeName,
            description: props.description,
            citeTemplate: props.citeTemplate,
            industryInfo: props.industryInfo,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosBizType;
        this.attrBizTypeName = rosBizType.attrBizTypeName;
        this.attrCiteTemplate = rosBizType.attrCiteTemplate;
        this.attrDescription = rosBizType.attrDescription;
        this.attrIndustryInfo = rosBizType.attrIndustryInfo;
    }
}
exports.BizType = BizType;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYml6dHlwZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImJpenR5cGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsOENBQThDO0FBQzlDLDZEQUFrRDtBQUUzQixnR0FGZCwrQkFBVSxPQUVtQjtBQW9DdEM7Ozs7R0FJRztBQUNILE1BQWEsT0FBUSxTQUFRLEdBQUcsQ0FBQyxRQUFRO0lBMEJyQzs7OztPQUlHO0lBQ0gsWUFBWSxLQUFvQixFQUFFLEVBQVUsRUFBRSxLQUFtQixFQUFFLG1DQUEyQyxJQUFJO1FBQzlHLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDakIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUM7UUFDYixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsZ0NBQWdDLEdBQUcsZ0NBQWdDLENBQUM7UUFFekUsTUFBTSxVQUFVLEdBQUcsSUFBSSwrQkFBVSxDQUFDLElBQUksRUFBRSxFQUFFLEVBQUc7WUFDekMsYUFBYSxFQUFFLEtBQUssQ0FBQyxhQUFhO1lBQ2xDLFdBQVcsRUFBRSxLQUFLLENBQUMsV0FBVztZQUM5QixXQUFXLEVBQUUsS0FBSyxDQUFDLFdBQVc7WUFDOUIsWUFBWSxFQUFFLEtBQUssQ0FBQyxZQUFZO1lBQ2hDLFlBQVksRUFBRSxLQUFLLENBQUMsWUFBWTtTQUNuQyxFQUFFLGdDQUFnQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztRQUNwRixJQUFJLENBQUMsUUFBUSxHQUFHLFVBQVUsQ0FBQztRQUMzQixJQUFJLENBQUMsZUFBZSxHQUFHLFVBQVUsQ0FBQyxlQUFlLENBQUM7UUFDbEQsSUFBSSxDQUFDLGdCQUFnQixHQUFHLFVBQVUsQ0FBQyxnQkFBZ0IsQ0FBQztRQUNwRCxJQUFJLENBQUMsZUFBZSxHQUFHLFVBQVUsQ0FBQyxlQUFlLENBQUM7UUFDbEQsSUFBSSxDQUFDLGdCQUFnQixHQUFHLFVBQVUsQ0FBQyxnQkFBZ0IsQ0FBQztJQUN4RCxDQUFDO0NBQ0o7QUFuREQsMEJBbURDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcm9zIGZyb20gJ0BhbGljbG91ZC9yb3MtY2RrLWNvcmUnO1xuaW1wb3J0IHsgUm9zQml6VHlwZSB9IGZyb20gJy4vYWxpZ3JlZW4uZ2VuZXJhdGVkJztcbi8vIEdlbmVyYXRlZCBmcm9tIHRoZSBBbGlDbG91ZCBST1MgUmVzb3VyY2UgU3BlY2lmaWNhdGlvblxuZXhwb3J0IHsgUm9zQml6VHlwZSBhcyBCaXpUeXBlUHJvcGVydHkgfTtcblxuLyoqXG4gKiBQcm9wZXJ0aWVzIGZvciBkZWZpbmluZyBhIGBCaXpUeXBlYC5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvYWxpeXVuLWFsaWdyZWVuLWJpenR5cGVcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBCaXpUeXBlUHJvcHMge1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgYml6VHlwZU5hbWU6IFRoZSBuYW1lIG9mIHRoZSBidXNpbmVzcyBzY2VuYXJpbyBkZWZpbmVkIGJ5IHRoZSBjdXN0b21lci4gSXQgY2FuIGNvbnRhaW4gbm8gbW9yZSB0aGFuIDMyIGNoYXJhY3RlcnMgaW4gRW5nbGlzaCwgbnVtYmVycywgYW5kIHVuZGVyc2NvcmVzLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGJpelR5cGVOYW1lOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBjaXRlVGVtcGxhdGU6IFNwZWNpZmllcyB3aGV0aGVyIHRvIGltcG9ydCB0aGUgY29uZmlndXJhdGlvbiBvZiBhbiBpbmR1c3RyeSB0ZW1wbGF0ZS4gRGVmYXVsdCB2YWx1ZTogZmFsc2UuIFZhbGlkIHZhbHVlczpcbiAgICAgKiB0cnVlOiBpbXBvcnRzIHRoZSBjb25maWd1cmF0aW9uIG9mIGFuIGluZHVzdHJ5IHRlbXBsYXRlLlxuICAgICAqIGZhbHNlOiBkb2VzIG5vdCBpbXBvcnQgdGhlIGNvbmZpZ3VyYXRpb24gb2YgYW4gaW5kdXN0cnkgdGVtcGxhdGUuIElmIHRoZSB2YWx1ZSBpcyB0cnVlLCB5b3UgbXVzdCBzcGVjaWZ5IHRoZSBpbmR1c3RyeUluZm8gcGFyYW1ldGVyLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGNpdGVUZW1wbGF0ZTogYm9vbGVhbiB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGJpelR5cGVJbXBvcnQ6IFRoZSBuYW1lIG9mIHRoZSBleGlzdGluZyBidXNpbmVzcyBzY2VuYXJpbyB0aGF0IHdhcyBpbXBvcnRlZCBmcm9tIHdoZW4gdGhlIGJ1c2luZXNzIHNjZW5hcmlvIHdhcyBjcmVhdGVkLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGJpelR5cGVJbXBvcnQ/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBkZXNjcmlwdGlvbjogVGhlIGRlc2NyaXB0aW9uIG9mIHRoZSBidXNpbmVzcyBzY2VuYXJpbyBkZWZpbmVkIGJ5IHRoZSBjdXN0b21lciwgd2hpY2ggaXMgYSBjb21iaW5hdGlvbiBvZiBDaGluZXNlIGFuZCBFbmdsaXNoLCBudW1iZXJzLCBhbmQgdW5kZXJzY29yZXMsIGFuZCBjYW5ub3QgZXhjZWVkIDMyIGNoYXJhY3RlcnMuXG4gICAgICovXG4gICAgcmVhZG9ubHkgZGVzY3JpcHRpb24/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBpbmR1c3RyeUluZm86IFRoZSBpbmR1c3RyeSBjbGFzc2lmaWNhdGlvbi4gRm9yIHNwZWNpZmljIHR5cGVzIHNlZSA8YSBocmVmPSdodHRwczpcXC9cXC9oZWxwLmFsaXl1bi5jb21cXC9kb2N1bWVudF9kZXRhaWxcXC8yMTA5ODIuaHRtbCcgdGFyZ2V0PSdfYmxhbmsnPkNyZWF0ZUJpelR5cGU8XFwvYT4uXG4gICAgICovXG4gICAgcmVhZG9ubHkgaW5kdXN0cnlJbmZvPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xufVxuXG4vKipcbiAqIFRoaXMgY2xhc3MgZW5jYXBzdWxhdGVzIGFuZCBleHRlbmRzIHRoZSBST1MgcmVzb3VyY2UgdHlwZSBgQUxJWVVOOjpBbGlncmVlbjo6Qml6VHlwZWAuXG4gKiBATm90ZSBUaGlzIGNsYXNzIG1heSBoYXZlIHNvbWUgbmV3IGZ1bmN0aW9ucyB0byBmYWNpbGl0YXRlIGRldmVsb3BtZW50LCBzbyBpdCBpcyByZWNvbW1lbmRlZCB0byB1c2UgdGhpcyBjbGFzcyBpbnN0ZWFkIG9mIGBSb3NCaXpUeXBlYGZvciBhIG1vcmUgY29udmVuaWVudCBkZXZlbG9wbWVudCBleHBlcmllbmNlLlxuICogU2VlIGh0dHBzOi8vd3d3LmFsaWJhYmFjbG91ZC5jb20vaGVscC9yb3MvZGV2ZWxvcGVyLXJlZmVyZW5jZS9hbGl5dW4tYWxpZ3JlZW4tYml6dHlwZVxuICovXG5leHBvcnQgY2xhc3MgQml6VHlwZSBleHRlbmRzIHJvcy5SZXNvdXJjZSB7XG4gICAgcHJvdGVjdGVkIHNjb3BlOiByb3MuQ29uc3RydWN0O1xuICAgIHByb3RlY3RlZCBpZDogc3RyaW5nO1xuICAgIHByb3RlY3RlZCBwcm9wczogQml6VHlwZVByb3BzO1xuICAgIHByb3RlY3RlZCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBCaXpUeXBlTmFtZTogVGhlIG5hbWUgb2YgdGhlIGJ1c2luZXNzIHNjZW5hcmlvIGRlZmluZWQgYnkgdGhlIGN1c3RvbWVyLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyQml6VHlwZU5hbWU6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBDaXRlVGVtcGxhdGU6IFNwZWNpZmllcyB3aGV0aGVyIHRvIGltcG9ydCB0aGUgY29uZmlndXJhdGlvbiBvZiBhbiBpbmR1c3RyeSB0ZW1wbGF0ZS4gRGVmYXVsdCB2YWx1ZTogZmFsc2UuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJDaXRlVGVtcGxhdGU6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBEZXNjcmlwdGlvbjogVGhlIGRlc2NyaXB0aW9uIG9mIHRoZSBidXNpbmVzcyBzY2VuYXJpbyBkZWZpbmVkIGJ5IHRoZSBjdXN0b21lci5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckRlc2NyaXB0aW9uOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgSW5kdXN0cnlJbmZvOiBUaGUgaW5kdXN0cnkgY2xhc3NpZmljYXRpb24uXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJJbmR1c3RyeUluZm86IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFBhcmFtIHNjb3BlIC0gc2NvcGUgaW4gd2hpY2ggdGhpcyByZXNvdXJjZSBpcyBkZWZpbmVkXG4gICAgICogUGFyYW0gaWQgICAgLSBzY29wZWQgaWQgb2YgdGhlIHJlc291cmNlXG4gICAgICogUGFyYW0gcHJvcHMgLSByZXNvdXJjZSBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IHJvcy5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBCaXpUeXBlUHJvcHMsIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OmJvb2xlYW4gPSB0cnVlKSB7XG4gICAgICAgIHN1cGVyKHNjb3BlLCBpZCk7XG4gICAgICAgIHRoaXMuc2NvcGUgPSBzY29wZTtcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xuICAgICAgICB0aGlzLnByb3BzID0gcHJvcHM7XG4gICAgICAgIHRoaXMuZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgPSBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDtcblxuICAgICAgICBjb25zdCByb3NCaXpUeXBlID0gbmV3IFJvc0JpelR5cGUodGhpcywgaWQsICB7XG4gICAgICAgICAgICBiaXpUeXBlSW1wb3J0OiBwcm9wcy5iaXpUeXBlSW1wb3J0LFxuICAgICAgICAgICAgYml6VHlwZU5hbWU6IHByb3BzLmJpelR5cGVOYW1lLFxuICAgICAgICAgICAgZGVzY3JpcHRpb246IHByb3BzLmRlc2NyaXB0aW9uLFxuICAgICAgICAgICAgY2l0ZVRlbXBsYXRlOiBwcm9wcy5jaXRlVGVtcGxhdGUsXG4gICAgICAgICAgICBpbmR1c3RyeUluZm86IHByb3BzLmluZHVzdHJ5SW5mbyxcbiAgICAgICAgfSwgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgJiYgdGhpcy5zdGFjay5lbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCk7XG4gICAgICAgIHRoaXMucmVzb3VyY2UgPSByb3NCaXpUeXBlO1xuICAgICAgICB0aGlzLmF0dHJCaXpUeXBlTmFtZSA9IHJvc0JpelR5cGUuYXR0ckJpelR5cGVOYW1lO1xuICAgICAgICB0aGlzLmF0dHJDaXRlVGVtcGxhdGUgPSByb3NCaXpUeXBlLmF0dHJDaXRlVGVtcGxhdGU7XG4gICAgICAgIHRoaXMuYXR0ckRlc2NyaXB0aW9uID0gcm9zQml6VHlwZS5hdHRyRGVzY3JpcHRpb247XG4gICAgICAgIHRoaXMuYXR0ckluZHVzdHJ5SW5mbyA9IHJvc0JpelR5cGUuYXR0ckluZHVzdHJ5SW5mbztcbiAgICB9XG59XG4iXX0=