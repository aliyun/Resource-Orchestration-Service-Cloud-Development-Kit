"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuditCallback = exports.AuditCallbackProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const aligreen_generated_1 = require("./aligreen.generated");
Object.defineProperty(exports, "AuditCallbackProperty", { enumerable: true, get: function () { return aligreen_generated_1.RosAuditCallback; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::Aligreen::AuditCallback`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosAuditCallback`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-aligreen-auditcallback
 */
class AuditCallback extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosAuditCallback = new aligreen_generated_1.RosAuditCallback(this, id, {
            cryptType: props.cryptType,
            callbackTypes: props.callbackTypes,
            auditCallbackName: props.auditCallbackName,
            url: props.url,
            callbackSuggestions: props.callbackSuggestions,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosAuditCallback;
        this.attrAuditCallbackName = rosAuditCallback.attrAuditCallbackName;
        this.attrCallbackSuggestions = rosAuditCallback.attrCallbackSuggestions;
        this.attrCallbackTypes = rosAuditCallback.attrCallbackTypes;
        this.attrCryptType = rosAuditCallback.attrCryptType;
        this.attrUrl = rosAuditCallback.attrUrl;
    }
}
exports.AuditCallback = AuditCallback;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXVkaXRjYWxsYmFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImF1ZGl0Y2FsbGJhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsOENBQThDO0FBQzlDLDZEQUF3RDtBQUUzQixzR0FGcEIscUNBQWdCLE9BRXlCO0FBa0NsRDs7OztHQUlHO0FBQ0gsTUFBYSxhQUFjLFNBQVEsR0FBRyxDQUFDLFFBQVE7SUErQjNDOzs7O09BSUc7SUFDSCxZQUFZLEtBQW9CLEVBQUUsRUFBVSxFQUFFLEtBQXlCLEVBQUUsbUNBQTJDLElBQUk7UUFDcEgsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNqQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUNiLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxnQ0FBZ0MsR0FBRyxnQ0FBZ0MsQ0FBQztRQUV6RSxNQUFNLGdCQUFnQixHQUFHLElBQUkscUNBQWdCLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRztZQUNyRCxTQUFTLEVBQUUsS0FBSyxDQUFDLFNBQVM7WUFDMUIsYUFBYSxFQUFFLEtBQUssQ0FBQyxhQUFhO1lBQ2xDLGlCQUFpQixFQUFFLEtBQUssQ0FBQyxpQkFBaUI7WUFDMUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxHQUFHO1lBQ2QsbUJBQW1CLEVBQUUsS0FBSyxDQUFDLG1CQUFtQjtTQUNqRCxFQUFFLGdDQUFnQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztRQUNwRixJQUFJLENBQUMsUUFBUSxHQUFHLGdCQUFnQixDQUFDO1FBQ2pDLElBQUksQ0FBQyxxQkFBcUIsR0FBRyxnQkFBZ0IsQ0FBQyxxQkFBcUIsQ0FBQztRQUNwRSxJQUFJLENBQUMsdUJBQXVCLEdBQUcsZ0JBQWdCLENBQUMsdUJBQXVCLENBQUM7UUFDeEUsSUFBSSxDQUFDLGlCQUFpQixHQUFHLGdCQUFnQixDQUFDLGlCQUFpQixDQUFDO1FBQzVELElBQUksQ0FBQyxhQUFhLEdBQUcsZ0JBQWdCLENBQUMsYUFBYSxDQUFDO1FBQ3BELElBQUksQ0FBQyxPQUFPLEdBQUcsZ0JBQWdCLENBQUMsT0FBTyxDQUFDO0lBQzVDLENBQUM7Q0FDSjtBQXpERCxzQ0F5REMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyByb3MgZnJvbSAnQGFsaWNsb3VkL3Jvcy1jZGstY29yZSc7XG5pbXBvcnQgeyBSb3NBdWRpdENhbGxiYWNrIH0gZnJvbSAnLi9hbGlncmVlbi5nZW5lcmF0ZWQnO1xuLy8gR2VuZXJhdGVkIGZyb20gdGhlIEFsaUNsb3VkIFJPUyBSZXNvdXJjZSBTcGVjaWZpY2F0aW9uXG5leHBvcnQgeyBSb3NBdWRpdENhbGxiYWNrIGFzIEF1ZGl0Q2FsbGJhY2tQcm9wZXJ0eSB9O1xuXG4vKipcbiAqIFByb3BlcnRpZXMgZm9yIGRlZmluaW5nIGEgYEF1ZGl0Q2FsbGJhY2tgLlxuICogU2VlIGh0dHBzOi8vd3d3LmFsaWJhYmFjbG91ZC5jb20vaGVscC9yb3MvZGV2ZWxvcGVyLXJlZmVyZW5jZS9hbGl5dW4tYWxpZ3JlZW4tYXVkaXRjYWxsYmFja1xuICovXG5leHBvcnQgaW50ZXJmYWNlIEF1ZGl0Q2FsbGJhY2tQcm9wcyB7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBhdWRpdENhbGxiYWNrTmFtZTogVGhlIEF1ZGl0Q2FsbGJhY2sgbmFtZSBkZWZpbmVkIGJ5IHRoZSBjdXN0b21lci4gSXQgY2FuIGNvbnRhaW4gbm8gbW9yZSB0aGFuIDIwIGNoYXJhY3RlcnMgaW4gQ2hpbmVzZSwgRW5nbGlzaCwgdW5kZXJzY29yZSAoXyksIGFuZCBkaWdpdHMuXG4gICAgICovXG4gICAgcmVhZG9ubHkgYXVkaXRDYWxsYmFja05hbWU6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGNhbGxiYWNrU3VnZ2VzdGlvbnM6IExpc3Qgb2YgYXVkaXQgcmVzdWx0cyBzdXBwb3J0ZWQgYnkgbWVzc2FnZSBub3RpZmljYXRpb24uIFZhbHVlOiBibG9jazogY29uZmlybWVkIHZpb2xhdGlvbiwgcmV2aWV3OiBTdXNwZWN0ZWQgdmlvbGF0aW9uLCBwYXNzOiBub3JtYWwuXG4gICAgICovXG4gICAgcmVhZG9ubHkgY2FsbGJhY2tTdWdnZXN0aW9uczogQXJyYXk8c3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlPiB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGNhbGxiYWNrVHlwZXM6IEEgbGlzdCBvZiBDYWxsYmFjayB0eXBlcy4gVmFsdWU6IG1hY2hpbmVTY2FuOiBNYWNoaW5lIGF1ZGl0IHJlc3VsdCBub3RpZmljYXRpb24sIHNlbGZBdWRpdDogc2VsZi1zZXJ2aWNlIGF1ZGl0IG5vdGlmaWNhdGlvbi5cbiAgICAgKi9cbiAgICByZWFkb25seSBjYWxsYmFja1R5cGVzOiBBcnJheTxzdHJpbmcgfCByb3MuSVJlc29sdmFibGU+IHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgY3J5cHRUeXBlOiBUaGUgZW5jcnlwdGlvbiBhbGdvcml0aG0gaXMgdXNlZCB0byB2ZXJpZnkgdGhhdCB0aGUgY2FsbGJhY2sgcmVxdWVzdCBpcyBzZW50IGJ5IHRoZSBjb250ZW50IHNlY3VyaXR5IHNlcnZpY2UgdG8geW91ciBidXNpbmVzcyBzZXJ2aWNlLiBUaGUgdmFsdWUgaXMgU0hBMjU2OlNIQTI1NiBlbmNyeXB0aW9uIGFsZ29yaXRobSBhbmQgU00zOiBTTTMgZW5jcnlwdGlvbiBhbGdvcml0aG0uXG4gICAgICovXG4gICAgcmVhZG9ubHkgY3J5cHRUeXBlOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSB1cmw6IFRoZSBkZXRlY3Rpb24gcmVzdWx0IHdpbGwgYmUgY2FsbGVkIGJhY2sgdG8gdGhlIHVybC5cbiAgICAgKi9cbiAgICByZWFkb25seSB1cmw6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcbn1cblxuLyoqXG4gKiBUaGlzIGNsYXNzIGVuY2Fwc3VsYXRlcyBhbmQgZXh0ZW5kcyB0aGUgUk9TIHJlc291cmNlIHR5cGUgYEFMSVlVTjo6QWxpZ3JlZW46OkF1ZGl0Q2FsbGJhY2tgLlxuICogQE5vdGUgVGhpcyBjbGFzcyBtYXkgaGF2ZSBzb21lIG5ldyBmdW5jdGlvbnMgdG8gZmFjaWxpdGF0ZSBkZXZlbG9wbWVudCwgc28gaXQgaXMgcmVjb21tZW5kZWQgdG8gdXNlIHRoaXMgY2xhc3MgaW5zdGVhZCBvZiBgUm9zQXVkaXRDYWxsYmFja2Bmb3IgYSBtb3JlIGNvbnZlbmllbnQgZGV2ZWxvcG1lbnQgZXhwZXJpZW5jZS5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvYWxpeXVuLWFsaWdyZWVuLWF1ZGl0Y2FsbGJhY2tcbiAqL1xuZXhwb3J0IGNsYXNzIEF1ZGl0Q2FsbGJhY2sgZXh0ZW5kcyByb3MuUmVzb3VyY2Uge1xuICAgIHByb3RlY3RlZCBzY29wZTogcm9zLkNvbnN0cnVjdDtcbiAgICBwcm90ZWN0ZWQgaWQ6IHN0cmluZztcbiAgICBwcm90ZWN0ZWQgcHJvcHM6IEF1ZGl0Q2FsbGJhY2tQcm9wcztcbiAgICBwcm90ZWN0ZWQgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6IGJvb2xlYW47XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgQXVkaXRDYWxsYmFja05hbWU6IFRoZSBBdWRpdENhbGxiYWNrIG5hbWUgZGVmaW5lZCBieSB0aGUgY3VzdG9tZXIuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJBdWRpdENhbGxiYWNrTmFtZTogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIENhbGxiYWNrU3VnZ2VzdGlvbnM6IExpc3Qgb2YgYXVkaXQgcmVzdWx0cyBzdXBwb3J0ZWQgYnkgbWVzc2FnZSBub3RpZmljYXRpb24uXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJDYWxsYmFja1N1Z2dlc3Rpb25zOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgQ2FsbGJhY2tUeXBlczogQSBsaXN0IG9mIENhbGxiYWNrIHR5cGVzLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyQ2FsbGJhY2tUeXBlczogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIENyeXB0VHlwZTogVGhlIGVuY3J5cHRpb24gYWxnb3JpdGhtIGlzIHVzZWQgdG8gdmVyaWZ5IHRoYXQgdGhlIGNhbGxiYWNrIHJlcXVlc3QgaXMgc2VudCBieSB0aGUgY29udGVudCBzZWN1cml0eSBzZXJ2aWNlIHRvIHlvdXIgYnVzaW5lc3Mgc2VydmljZS5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckNyeXB0VHlwZTogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIFVybDogVGhlIGRldGVjdGlvbiByZXN1bHQgd2lsbCBiZSBjYWxsZWQgYmFjayB0byB0aGUgdXJsLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyVXJsOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQYXJhbSBzY29wZSAtIHNjb3BlIGluIHdoaWNoIHRoaXMgcmVzb3VyY2UgaXMgZGVmaW5lZFxuICAgICAqIFBhcmFtIGlkICAgIC0gc2NvcGVkIGlkIG9mIHRoZSByZXNvdXJjZVxuICAgICAqIFBhcmFtIHByb3BzIC0gcmVzb3VyY2UgcHJvcGVydGllc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiByb3MuQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogQXVkaXRDYWxsYmFja1Byb3BzLCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDpib29sZWFuID0gdHJ1ZSkge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQpO1xuICAgICAgICB0aGlzLnNjb3BlID0gc2NvcGU7XG4gICAgICAgIHRoaXMuaWQgPSBpZDtcbiAgICAgICAgdGhpcy5wcm9wcyA9IHByb3BzO1xuICAgICAgICB0aGlzLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ID0gZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ7XG5cbiAgICAgICAgY29uc3Qgcm9zQXVkaXRDYWxsYmFjayA9IG5ldyBSb3NBdWRpdENhbGxiYWNrKHRoaXMsIGlkLCAge1xuICAgICAgICAgICAgY3J5cHRUeXBlOiBwcm9wcy5jcnlwdFR5cGUsXG4gICAgICAgICAgICBjYWxsYmFja1R5cGVzOiBwcm9wcy5jYWxsYmFja1R5cGVzLFxuICAgICAgICAgICAgYXVkaXRDYWxsYmFja05hbWU6IHByb3BzLmF1ZGl0Q2FsbGJhY2tOYW1lLFxuICAgICAgICAgICAgdXJsOiBwcm9wcy51cmwsXG4gICAgICAgICAgICBjYWxsYmFja1N1Z2dlc3Rpb25zOiBwcm9wcy5jYWxsYmFja1N1Z2dlc3Rpb25zLFxuICAgICAgICB9LCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCAmJiB0aGlzLnN0YWNrLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50KTtcbiAgICAgICAgdGhpcy5yZXNvdXJjZSA9IHJvc0F1ZGl0Q2FsbGJhY2s7XG4gICAgICAgIHRoaXMuYXR0ckF1ZGl0Q2FsbGJhY2tOYW1lID0gcm9zQXVkaXRDYWxsYmFjay5hdHRyQXVkaXRDYWxsYmFja05hbWU7XG4gICAgICAgIHRoaXMuYXR0ckNhbGxiYWNrU3VnZ2VzdGlvbnMgPSByb3NBdWRpdENhbGxiYWNrLmF0dHJDYWxsYmFja1N1Z2dlc3Rpb25zO1xuICAgICAgICB0aGlzLmF0dHJDYWxsYmFja1R5cGVzID0gcm9zQXVkaXRDYWxsYmFjay5hdHRyQ2FsbGJhY2tUeXBlcztcbiAgICAgICAgdGhpcy5hdHRyQ3J5cHRUeXBlID0gcm9zQXVkaXRDYWxsYmFjay5hdHRyQ3J5cHRUeXBlO1xuICAgICAgICB0aGlzLmF0dHJVcmwgPSByb3NBdWRpdENhbGxiYWNrLmF0dHJVcmw7XG4gICAgfVxufVxuIl19