"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImageLib = exports.ImageLibProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const aligreen_generated_1 = require("./aligreen.generated");
Object.defineProperty(exports, "ImageLibProperty", { enumerable: true, get: function () { return aligreen_generated_1.RosImageLib; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::Aligreen::ImageLib`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosImageLib`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-aligreen-imagelib
 */
class ImageLib extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosImageLib = new aligreen_generated_1.RosImageLib(this, id, {
            category: props.category,
            bizTypes: props.bizTypes,
            enable: props.enable,
            scene: props.scene,
            imageLibName: props.imageLibName,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosImageLib;
        this.attrBizTypes = rosImageLib.attrBizTypes;
        this.attrCategory = rosImageLib.attrCategory;
        this.attrEnable = rosImageLib.attrEnable;
        this.attrImageLibId = rosImageLib.attrImageLibId;
        this.attrImageLibName = rosImageLib.attrImageLibName;
        this.attrScene = rosImageLib.attrScene;
    }
}
exports.ImageLib = ImageLib;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1hZ2VsaWIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbWFnZWxpYi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw4Q0FBOEM7QUFDOUMsNkRBQW1EO0FBRTNCLGlHQUZmLGdDQUFXLE9BRW9CO0FBbUN4Qzs7OztHQUlHO0FBQ0gsTUFBYSxRQUFTLFNBQVEsR0FBRyxDQUFDLFFBQVE7SUFvQ3RDOzs7O09BSUc7SUFDSCxZQUFZLEtBQW9CLEVBQUUsRUFBVSxFQUFFLEtBQW9CLEVBQUUsbUNBQTJDLElBQUk7UUFDL0csS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNqQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUNiLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxnQ0FBZ0MsR0FBRyxnQ0FBZ0MsQ0FBQztRQUV6RSxNQUFNLFdBQVcsR0FBRyxJQUFJLGdDQUFXLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRztZQUMzQyxRQUFRLEVBQUUsS0FBSyxDQUFDLFFBQVE7WUFDeEIsUUFBUSxFQUFFLEtBQUssQ0FBQyxRQUFRO1lBQ3hCLE1BQU0sRUFBRSxLQUFLLENBQUMsTUFBTTtZQUNwQixLQUFLLEVBQUUsS0FBSyxDQUFDLEtBQUs7WUFDbEIsWUFBWSxFQUFFLEtBQUssQ0FBQyxZQUFZO1NBQ25DLEVBQUUsZ0NBQWdDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO1FBQ3BGLElBQUksQ0FBQyxRQUFRLEdBQUcsV0FBVyxDQUFDO1FBQzVCLElBQUksQ0FBQyxZQUFZLEdBQUcsV0FBVyxDQUFDLFlBQVksQ0FBQztRQUM3QyxJQUFJLENBQUMsWUFBWSxHQUFHLFdBQVcsQ0FBQyxZQUFZLENBQUM7UUFDN0MsSUFBSSxDQUFDLFVBQVUsR0FBRyxXQUFXLENBQUMsVUFBVSxDQUFDO1FBQ3pDLElBQUksQ0FBQyxjQUFjLEdBQUcsV0FBVyxDQUFDLGNBQWMsQ0FBQztRQUNqRCxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsV0FBVyxDQUFDLGdCQUFnQixDQUFDO1FBQ3JELElBQUksQ0FBQyxTQUFTLEdBQUcsV0FBVyxDQUFDLFNBQVMsQ0FBQztJQUMzQyxDQUFDO0NBQ0o7QUEvREQsNEJBK0RDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcm9zIGZyb20gJ0BhbGljbG91ZC9yb3MtY2RrLWNvcmUnO1xuaW1wb3J0IHsgUm9zSW1hZ2VMaWIgfSBmcm9tICcuL2FsaWdyZWVuLmdlbmVyYXRlZCc7XG4vLyBHZW5lcmF0ZWQgZnJvbSB0aGUgQWxpQ2xvdWQgUk9TIFJlc291cmNlIFNwZWNpZmljYXRpb25cbmV4cG9ydCB7IFJvc0ltYWdlTGliIGFzIEltYWdlTGliUHJvcGVydHkgfTtcblxuLyoqXG4gKiBQcm9wZXJ0aWVzIGZvciBkZWZpbmluZyBhIGBJbWFnZUxpYmAuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2FsaXl1bi1hbGlncmVlbi1pbWFnZWxpYlxuICovXG5leHBvcnQgaW50ZXJmYWNlIEltYWdlTGliUHJvcHMge1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgY2F0ZWdvcnk6IFRoZSBjYXRlZ29yeSBvZiB0aGUgaW1hZ2UgbGlicmFyeS4gVmFsaWQgdmFsdWVzOiBCTEFDSzogYSBibGFja2xpc3QsIFdISVRFOiBhIHdoaXRlbGlzdCwgUkVWSUVXOiBhIHJldmlldyBsaXN0LlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGNhdGVnb3J5OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBpbWFnZUxpYk5hbWU6IFRoZSBuYW1lIG9mIHRoZSBpbWFnZSBsaWJyYXJ5IGRlZmluZWQgYnkgdGhlIGN1c3RvbWVyLiBJdCBjYW4gY29udGFpbiBubyBtb3JlIHRoYW4gMjAgY2hhcmFjdGVycyBpbiBDaGluZXNlLCBFbmdsaXNoLCBhbmQgdW5kZXJzY29yZSAoXykuXG4gICAgICovXG4gICAgcmVhZG9ubHkgaW1hZ2VMaWJOYW1lOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBzY2VuZTogVGhlIG1vZGVyYXRpb24gc2NlbmFyaW8gdG8gd2hpY2ggdGhlIGN1c3RvbSBpbWFnZSBsaWJyYXJ5IGFwcGxpZXMuIFZhbGlkIHZhbHVlczogUE9STjogcG9ybm9ncmFwaHkgZGV0ZWN0aW9uLCBBRDogYWQgZGV0ZWN0aW9uLCBJTExFR0FMOiB0ZXJyb3Jpc3QgY29udGVudCBkZXRlY3Rpb24uXG4gICAgICovXG4gICAgcmVhZG9ubHkgc2NlbmU6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGJpelR5cGVzOiBMaXN0IG9mIGJ1c2luZXNzIHNjZW5hcmlvcy4gRm9yIGV4YW1wbGU6IFtcImJpelR5cGVBXCIsIFwiYml6VHlwZUJcIiwgXCJiaXpUeXBlQ1wiXS5cbiAgICAgKi9cbiAgICByZWFkb25seSBiaXpUeXBlcz86IEFycmF5PHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZT4gfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBlbmFibGU6IFNwZWNpZmllcyB3aGV0aGVyIHRvIGVuYWJsZSB0aGUgaW1hZ2UgbGlicmFyeS4gVmFsaWQgdmFsdWVzOlxuICAgICAqIHRydWU6IEVuYWJsZSB0aGUgaW1hZ2UgbGlicmFyeS4gVGhpcyBpcyB0aGUgZGVmYXVsdCB2YWx1ZS4gZmFsc2U6IERpc2FibGUgdGhlIGltYWdlIGxpYnJhcnkuXG4gICAgICovXG4gICAgcmVhZG9ubHkgZW5hYmxlPzogYm9vbGVhbiB8IHJvcy5JUmVzb2x2YWJsZTtcbn1cblxuLyoqXG4gKiBUaGlzIGNsYXNzIGVuY2Fwc3VsYXRlcyBhbmQgZXh0ZW5kcyB0aGUgUk9TIHJlc291cmNlIHR5cGUgYEFMSVlVTjo6QWxpZ3JlZW46OkltYWdlTGliYC5cbiAqIEBOb3RlIFRoaXMgY2xhc3MgbWF5IGhhdmUgc29tZSBuZXcgZnVuY3Rpb25zIHRvIGZhY2lsaXRhdGUgZGV2ZWxvcG1lbnQsIHNvIGl0IGlzIHJlY29tbWVuZGVkIHRvIHVzZSB0aGlzIGNsYXNzIGluc3RlYWQgb2YgYFJvc0ltYWdlTGliYGZvciBhIG1vcmUgY29udmVuaWVudCBkZXZlbG9wbWVudCBleHBlcmllbmNlLlxuICogU2VlIGh0dHBzOi8vd3d3LmFsaWJhYmFjbG91ZC5jb20vaGVscC9yb3MvZGV2ZWxvcGVyLXJlZmVyZW5jZS9hbGl5dW4tYWxpZ3JlZW4taW1hZ2VsaWJcbiAqL1xuZXhwb3J0IGNsYXNzIEltYWdlTGliIGV4dGVuZHMgcm9zLlJlc291cmNlIHtcbiAgICBwcm90ZWN0ZWQgc2NvcGU6IHJvcy5Db25zdHJ1Y3Q7XG4gICAgcHJvdGVjdGVkIGlkOiBzdHJpbmc7XG4gICAgcHJvdGVjdGVkIHByb3BzOiBJbWFnZUxpYlByb3BzO1xuICAgIHByb3RlY3RlZCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBCaXpUeXBlczogTGlzdCBvZiBidXNpbmVzcyBzY2VuYXJpb3MuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJCaXpUeXBlczogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIENhdGVnb3J5OiBUaGUgY2F0ZWdvcnkgb2YgdGhlIGltYWdlIGxpYnJhcnkuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJDYXRlZ29yeTogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIEVuYWJsZTogU3BlY2lmaWVzIHdoZXRoZXIgdG8gZW5hYmxlIHRoZSBpbWFnZSBsaWJyYXJ5LlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyRW5hYmxlOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgSW1hZ2VMaWJJZDogVGhlIElEIG9mIHRoZSBwcmltYXJ5IGtleSBvZiB0aGUgaW1hZ2UgbGlicmFyeS5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckltYWdlTGliSWQ6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBJbWFnZUxpYk5hbWU6IFRoZSBuYW1lIG9mIHRoZSBpbWFnZSBsaWJyYXJ5IGRlZmluZWQgYnkgdGhlIGN1c3RvbWVyLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRySW1hZ2VMaWJOYW1lOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgU2NlbmU6IFRoZSBtb2RlcmF0aW9uIHNjZW5hcmlvIHRvIHdoaWNoIHRoZSBjdXN0b20gaW1hZ2UgbGlicmFyeSBhcHBsaWVzLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyU2NlbmU6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFBhcmFtIHNjb3BlIC0gc2NvcGUgaW4gd2hpY2ggdGhpcyByZXNvdXJjZSBpcyBkZWZpbmVkXG4gICAgICogUGFyYW0gaWQgICAgLSBzY29wZWQgaWQgb2YgdGhlIHJlc291cmNlXG4gICAgICogUGFyYW0gcHJvcHMgLSByZXNvdXJjZSBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IHJvcy5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBJbWFnZUxpYlByb3BzLCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDpib29sZWFuID0gdHJ1ZSkge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQpO1xuICAgICAgICB0aGlzLnNjb3BlID0gc2NvcGU7XG4gICAgICAgIHRoaXMuaWQgPSBpZDtcbiAgICAgICAgdGhpcy5wcm9wcyA9IHByb3BzO1xuICAgICAgICB0aGlzLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ID0gZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ7XG5cbiAgICAgICAgY29uc3Qgcm9zSW1hZ2VMaWIgPSBuZXcgUm9zSW1hZ2VMaWIodGhpcywgaWQsICB7XG4gICAgICAgICAgICBjYXRlZ29yeTogcHJvcHMuY2F0ZWdvcnksXG4gICAgICAgICAgICBiaXpUeXBlczogcHJvcHMuYml6VHlwZXMsXG4gICAgICAgICAgICBlbmFibGU6IHByb3BzLmVuYWJsZSxcbiAgICAgICAgICAgIHNjZW5lOiBwcm9wcy5zY2VuZSxcbiAgICAgICAgICAgIGltYWdlTGliTmFtZTogcHJvcHMuaW1hZ2VMaWJOYW1lLFxuICAgICAgICB9LCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCAmJiB0aGlzLnN0YWNrLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50KTtcbiAgICAgICAgdGhpcy5yZXNvdXJjZSA9IHJvc0ltYWdlTGliO1xuICAgICAgICB0aGlzLmF0dHJCaXpUeXBlcyA9IHJvc0ltYWdlTGliLmF0dHJCaXpUeXBlcztcbiAgICAgICAgdGhpcy5hdHRyQ2F0ZWdvcnkgPSByb3NJbWFnZUxpYi5hdHRyQ2F0ZWdvcnk7XG4gICAgICAgIHRoaXMuYXR0ckVuYWJsZSA9IHJvc0ltYWdlTGliLmF0dHJFbmFibGU7XG4gICAgICAgIHRoaXMuYXR0ckltYWdlTGliSWQgPSByb3NJbWFnZUxpYi5hdHRySW1hZ2VMaWJJZDtcbiAgICAgICAgdGhpcy5hdHRySW1hZ2VMaWJOYW1lID0gcm9zSW1hZ2VMaWIuYXR0ckltYWdlTGliTmFtZTtcbiAgICAgICAgdGhpcy5hdHRyU2NlbmUgPSByb3NJbWFnZUxpYi5hdHRyU2NlbmU7XG4gICAgfVxufVxuIl19