"use strict";
// Generated from the AliCloud ROS Resource Specification
Object.defineProperty(exports, "__esModule", { value: true });
exports.RosOssStockTask = exports.RosKeywordLib = exports.RosImageLib = exports.RosCallback = exports.RosBizType = exports.RosAuditCallback = void 0;
const ros = require("@alicloud/ros-cdk-core");
/**
 * Determine whether the given properties match those of a `RosAuditCallbackProps`
 *
 * @param properties - the TypeScript properties of a `RosAuditCallbackProps`
 *
 * @returns the result of the validation.
 */
function RosAuditCallbackPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('cryptType', ros.requiredValidator)(properties.cryptType));
    if (properties.cryptType && (typeof properties.cryptType) !== 'object') {
        errors.collect(ros.propertyValidator('cryptType', ros.validateAllowedValues)({
            data: properties.cryptType,
            allowedValues: ["SHA256", "SM3"],
        }));
    }
    errors.collect(ros.propertyValidator('cryptType', ros.validateString)(properties.cryptType));
    errors.collect(ros.propertyValidator('callbackTypes', ros.requiredValidator)(properties.callbackTypes));
    if (properties.callbackTypes && (Array.isArray(properties.callbackTypes) || (typeof properties.callbackTypes) === 'string')) {
        errors.collect(ros.propertyValidator('callbackTypes', ros.validateLength)({
            data: properties.callbackTypes.length,
            min: 1,
            max: 2,
        }));
    }
    errors.collect(ros.propertyValidator('callbackTypes', ros.listValidator(ros.validateString))(properties.callbackTypes));
    errors.collect(ros.propertyValidator('auditCallbackName', ros.requiredValidator)(properties.auditCallbackName));
    errors.collect(ros.propertyValidator('auditCallbackName', ros.validateString)(properties.auditCallbackName));
    errors.collect(ros.propertyValidator('url', ros.requiredValidator)(properties.url));
    errors.collect(ros.propertyValidator('url', ros.validateString)(properties.url));
    errors.collect(ros.propertyValidator('callbackSuggestions', ros.requiredValidator)(properties.callbackSuggestions));
    if (properties.callbackSuggestions && (Array.isArray(properties.callbackSuggestions) || (typeof properties.callbackSuggestions) === 'string')) {
        errors.collect(ros.propertyValidator('callbackSuggestions', ros.validateLength)({
            data: properties.callbackSuggestions.length,
            min: 1,
            max: 3,
        }));
    }
    errors.collect(ros.propertyValidator('callbackSuggestions', ros.listValidator(ros.validateString))(properties.callbackSuggestions));
    return errors.wrap('supplied properties not correct for "RosAuditCallbackProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::Aligreen::AuditCallback` resource
 *
 * @param properties - the TypeScript properties of a `RosAuditCallbackProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::Aligreen::AuditCallback` resource.
 */
// @ts-ignore TS6133
function rosAuditCallbackPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosAuditCallbackPropsValidator(properties).assertSuccess();
    }
    return {
        'AuditCallbackName': ros.stringToRosTemplate(properties.auditCallbackName),
        'CallbackSuggestions': ros.listMapper(ros.stringToRosTemplate)(properties.callbackSuggestions),
        'CallbackTypes': ros.listMapper(ros.stringToRosTemplate)(properties.callbackTypes),
        'CryptType': ros.stringToRosTemplate(properties.cryptType),
        'Url': ros.stringToRosTemplate(properties.url),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::Aligreen::AuditCallback`.
 * @Note This class does not contain additional functions, so it is recommended to use the `AuditCallback` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-aligreen-auditcallback
 */
class RosAuditCallback extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosAuditCallback.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrAuditCallbackName = this.getAtt('AuditCallbackName');
        this.attrCallbackSuggestions = this.getAtt('CallbackSuggestions');
        this.attrCallbackTypes = this.getAtt('CallbackTypes');
        this.attrCryptType = this.getAtt('CryptType');
        this.attrUrl = this.getAtt('Url');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.auditCallbackName = props.auditCallbackName;
        this.callbackSuggestions = props.callbackSuggestions;
        this.callbackTypes = props.callbackTypes;
        this.cryptType = props.cryptType;
        this.url = props.url;
    }
    get rosProperties() {
        return {
            auditCallbackName: this.auditCallbackName,
            callbackSuggestions: this.callbackSuggestions,
            callbackTypes: this.callbackTypes,
            cryptType: this.cryptType,
            url: this.url,
        };
    }
    renderProperties(props) {
        return rosAuditCallbackPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosAuditCallback = RosAuditCallback;
/**
 * The resource type name for this resource class.
 */
RosAuditCallback.ROS_RESOURCE_TYPE_NAME = "ALIYUN::Aligreen::AuditCallback";
/**
 * Determine whether the given properties match those of a `RosBizTypeProps`
 *
 * @param properties - the TypeScript properties of a `RosBizTypeProps`
 *
 * @returns the result of the validation.
 */
function RosBizTypePropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('bizTypeImport', ros.validateString)(properties.bizTypeImport));
    errors.collect(ros.propertyValidator('bizTypeName', ros.requiredValidator)(properties.bizTypeName));
    errors.collect(ros.propertyValidator('bizTypeName', ros.validateString)(properties.bizTypeName));
    errors.collect(ros.propertyValidator('description', ros.validateString)(properties.description));
    errors.collect(ros.propertyValidator('citeTemplate', ros.requiredValidator)(properties.citeTemplate));
    errors.collect(ros.propertyValidator('citeTemplate', ros.validateBoolean)(properties.citeTemplate));
    errors.collect(ros.propertyValidator('industryInfo', ros.validateString)(properties.industryInfo));
    return errors.wrap('supplied properties not correct for "RosBizTypeProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::Aligreen::BizType` resource
 *
 * @param properties - the TypeScript properties of a `RosBizTypeProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::Aligreen::BizType` resource.
 */
// @ts-ignore TS6133
function rosBizTypePropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosBizTypePropsValidator(properties).assertSuccess();
    }
    return {
        'BizTypeName': ros.stringToRosTemplate(properties.bizTypeName),
        'CiteTemplate': ros.booleanToRosTemplate(properties.citeTemplate),
        'BizTypeImport': ros.stringToRosTemplate(properties.bizTypeImport),
        'Description': ros.stringToRosTemplate(properties.description),
        'IndustryInfo': ros.stringToRosTemplate(properties.industryInfo),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::Aligreen::BizType`.
 * @Note This class does not contain additional functions, so it is recommended to use the `BizType` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-aligreen-biztype
 */
class RosBizType extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosBizType.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrBizTypeName = this.getAtt('BizTypeName');
        this.attrCiteTemplate = this.getAtt('CiteTemplate');
        this.attrDescription = this.getAtt('Description');
        this.attrIndustryInfo = this.getAtt('IndustryInfo');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.bizTypeName = props.bizTypeName;
        this.citeTemplate = props.citeTemplate;
        this.bizTypeImport = props.bizTypeImport;
        this.description = props.description;
        this.industryInfo = props.industryInfo;
    }
    get rosProperties() {
        return {
            bizTypeName: this.bizTypeName,
            citeTemplate: this.citeTemplate,
            bizTypeImport: this.bizTypeImport,
            description: this.description,
            industryInfo: this.industryInfo,
        };
    }
    renderProperties(props) {
        return rosBizTypePropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosBizType = RosBizType;
/**
 * The resource type name for this resource class.
 */
RosBizType.ROS_RESOURCE_TYPE_NAME = "ALIYUN::Aligreen::BizType";
/**
 * Determine whether the given properties match those of a `RosCallbackProps`
 *
 * @param properties - the TypeScript properties of a `RosCallbackProps`
 *
 * @returns the result of the validation.
 */
function RosCallbackPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('callbackUrl', ros.requiredValidator)(properties.callbackUrl));
    errors.collect(ros.propertyValidator('callbackUrl', ros.validateString)(properties.callbackUrl));
    if (properties.cryptType && (typeof properties.cryptType) !== 'object') {
        errors.collect(ros.propertyValidator('cryptType', ros.validateAllowedValues)({
            data: properties.cryptType,
            allowedValues: [0, 1],
        }));
    }
    errors.collect(ros.propertyValidator('cryptType', ros.validateNumber)(properties.cryptType));
    errors.collect(ros.propertyValidator('callbackName', ros.requiredValidator)(properties.callbackName));
    errors.collect(ros.propertyValidator('callbackName', ros.validateString)(properties.callbackName));
    errors.collect(ros.propertyValidator('callbackTypes', ros.requiredValidator)(properties.callbackTypes));
    if (properties.callbackTypes && (Array.isArray(properties.callbackTypes) || (typeof properties.callbackTypes) === 'string')) {
        errors.collect(ros.propertyValidator('callbackTypes', ros.validateLength)({
            data: properties.callbackTypes.length,
            min: 1,
            max: 2,
        }));
    }
    errors.collect(ros.propertyValidator('callbackTypes', ros.listValidator(ros.validateString))(properties.callbackTypes));
    errors.collect(ros.propertyValidator('callbackSuggestions', ros.requiredValidator)(properties.callbackSuggestions));
    if (properties.callbackSuggestions && (Array.isArray(properties.callbackSuggestions) || (typeof properties.callbackSuggestions) === 'string')) {
        errors.collect(ros.propertyValidator('callbackSuggestions', ros.validateLength)({
            data: properties.callbackSuggestions.length,
            min: 1,
            max: 3,
        }));
    }
    errors.collect(ros.propertyValidator('callbackSuggestions', ros.listValidator(ros.validateString))(properties.callbackSuggestions));
    return errors.wrap('supplied properties not correct for "RosCallbackProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::Aligreen::Callback` resource
 *
 * @param properties - the TypeScript properties of a `RosCallbackProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::Aligreen::Callback` resource.
 */
// @ts-ignore TS6133
function rosCallbackPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosCallbackPropsValidator(properties).assertSuccess();
    }
    return {
        'CallbackName': ros.stringToRosTemplate(properties.callbackName),
        'CallbackSuggestions': ros.listMapper(ros.stringToRosTemplate)(properties.callbackSuggestions),
        'CallbackTypes': ros.listMapper(ros.stringToRosTemplate)(properties.callbackTypes),
        'CallbackUrl': ros.stringToRosTemplate(properties.callbackUrl),
        'CryptType': ros.numberToRosTemplate(properties.cryptType),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::Aligreen::Callback`.
 * @Note This class does not contain additional functions, so it is recommended to use the `Callback` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-aligreen-callback
 */
class RosCallback extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosCallback.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrCallbackId = this.getAtt('CallbackId');
        this.attrCallbackName = this.getAtt('CallbackName');
        this.attrCallbackSuggestions = this.getAtt('CallbackSuggestions');
        this.attrCallbackTypes = this.getAtt('CallbackTypes');
        this.attrCallbackUrl = this.getAtt('CallbackUrl');
        this.attrCryptType = this.getAtt('CryptType');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.callbackName = props.callbackName;
        this.callbackSuggestions = props.callbackSuggestions;
        this.callbackTypes = props.callbackTypes;
        this.callbackUrl = props.callbackUrl;
        this.cryptType = props.cryptType;
    }
    get rosProperties() {
        return {
            callbackName: this.callbackName,
            callbackSuggestions: this.callbackSuggestions,
            callbackTypes: this.callbackTypes,
            callbackUrl: this.callbackUrl,
            cryptType: this.cryptType,
        };
    }
    renderProperties(props) {
        return rosCallbackPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosCallback = RosCallback;
/**
 * The resource type name for this resource class.
 */
RosCallback.ROS_RESOURCE_TYPE_NAME = "ALIYUN::Aligreen::Callback";
/**
 * Determine whether the given properties match those of a `RosImageLibProps`
 *
 * @param properties - the TypeScript properties of a `RosImageLibProps`
 *
 * @returns the result of the validation.
 */
function RosImageLibPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('category', ros.requiredValidator)(properties.category));
    if (properties.category && (typeof properties.category) !== 'object') {
        errors.collect(ros.propertyValidator('category', ros.validateAllowedValues)({
            data: properties.category,
            allowedValues: ["BLACK", "WHITE", "REVIEW"],
        }));
    }
    errors.collect(ros.propertyValidator('category', ros.validateString)(properties.category));
    if (properties.bizTypes && (Array.isArray(properties.bizTypes) || (typeof properties.bizTypes) === 'string')) {
        errors.collect(ros.propertyValidator('bizTypes', ros.validateLength)({
            data: properties.bizTypes.length,
            min: 1,
            max: 3,
        }));
    }
    errors.collect(ros.propertyValidator('bizTypes', ros.listValidator(ros.validateString))(properties.bizTypes));
    errors.collect(ros.propertyValidator('enable', ros.validateBoolean)(properties.enable));
    errors.collect(ros.propertyValidator('scene', ros.requiredValidator)(properties.scene));
    if (properties.scene && (typeof properties.scene) !== 'object') {
        errors.collect(ros.propertyValidator('scene', ros.validateAllowedValues)({
            data: properties.scene,
            allowedValues: ["PORN", "AD", "ILLEGAL"],
        }));
    }
    errors.collect(ros.propertyValidator('scene', ros.validateString)(properties.scene));
    errors.collect(ros.propertyValidator('imageLibName', ros.requiredValidator)(properties.imageLibName));
    errors.collect(ros.propertyValidator('imageLibName', ros.validateString)(properties.imageLibName));
    return errors.wrap('supplied properties not correct for "RosImageLibProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::Aligreen::ImageLib` resource
 *
 * @param properties - the TypeScript properties of a `RosImageLibProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::Aligreen::ImageLib` resource.
 */
// @ts-ignore TS6133
function rosImageLibPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosImageLibPropsValidator(properties).assertSuccess();
    }
    return {
        'Category': ros.stringToRosTemplate(properties.category),
        'ImageLibName': ros.stringToRosTemplate(properties.imageLibName),
        'Scene': ros.stringToRosTemplate(properties.scene),
        'BizTypes': ros.listMapper(ros.stringToRosTemplate)(properties.bizTypes),
        'Enable': ros.booleanToRosTemplate(properties.enable),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::Aligreen::ImageLib`.
 * @Note This class does not contain additional functions, so it is recommended to use the `ImageLib` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-aligreen-imagelib
 */
class RosImageLib extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosImageLib.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrBizTypes = this.getAtt('BizTypes');
        this.attrCategory = this.getAtt('Category');
        this.attrEnable = this.getAtt('Enable');
        this.attrImageLibId = this.getAtt('ImageLibId');
        this.attrImageLibName = this.getAtt('ImageLibName');
        this.attrScene = this.getAtt('Scene');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.category = props.category;
        this.imageLibName = props.imageLibName;
        this.scene = props.scene;
        this.bizTypes = props.bizTypes;
        this.enable = props.enable;
    }
    get rosProperties() {
        return {
            category: this.category,
            imageLibName: this.imageLibName,
            scene: this.scene,
            bizTypes: this.bizTypes,
            enable: this.enable,
        };
    }
    renderProperties(props) {
        return rosImageLibPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosImageLib = RosImageLib;
/**
 * The resource type name for this resource class.
 */
RosImageLib.ROS_RESOURCE_TYPE_NAME = "ALIYUN::Aligreen::ImageLib";
/**
 * Determine whether the given properties match those of a `RosKeywordLibProps`
 *
 * @param properties - the TypeScript properties of a `RosKeywordLibProps`
 *
 * @returns the result of the validation.
 */
function RosKeywordLibPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    if (properties.matchMode && (typeof properties.matchMode) !== 'object') {
        errors.collect(ros.propertyValidator('matchMode', ros.validateAllowedValues)({
            data: properties.matchMode,
            allowedValues: ["fuzzy", "precise"],
        }));
    }
    errors.collect(ros.propertyValidator('matchMode', ros.validateString)(properties.matchMode));
    if (properties.category && (typeof properties.category) !== 'object') {
        errors.collect(ros.propertyValidator('category', ros.validateAllowedValues)({
            data: properties.category,
            allowedValues: ["BLACK", "WHITE", "REVIEW"],
        }));
    }
    errors.collect(ros.propertyValidator('category', ros.validateString)(properties.category));
    errors.collect(ros.propertyValidator('language', ros.validateString)(properties.language));
    if (properties.bizTypes && (Array.isArray(properties.bizTypes) || (typeof properties.bizTypes) === 'string')) {
        errors.collect(ros.propertyValidator('bizTypes', ros.validateLength)({
            data: properties.bizTypes.length,
            min: undefined,
            max: 2,
        }));
    }
    errors.collect(ros.propertyValidator('bizTypes', ros.listValidator(ros.validateString))(properties.bizTypes));
    errors.collect(ros.propertyValidator('enable', ros.validateBoolean)(properties.enable));
    errors.collect(ros.propertyValidator('resourceType', ros.requiredValidator)(properties.resourceType));
    if (properties.resourceType && (typeof properties.resourceType) !== 'object') {
        errors.collect(ros.propertyValidator('resourceType', ros.validateAllowedValues)({
            data: properties.resourceType,
            allowedValues: ["TEXT", "IMAGE", "VOICE"],
        }));
    }
    errors.collect(ros.propertyValidator('resourceType', ros.validateString)(properties.resourceType));
    if (properties.libType && (typeof properties.libType) !== 'object') {
        errors.collect(ros.propertyValidator('libType', ros.validateAllowedValues)({
            data: properties.libType,
            allowedValues: ["textKeyword", "similarText", "voiceText"],
        }));
    }
    errors.collect(ros.propertyValidator('libType', ros.validateString)(properties.libType));
    errors.collect(ros.propertyValidator('keywordLibName', ros.requiredValidator)(properties.keywordLibName));
    errors.collect(ros.propertyValidator('keywordLibName', ros.validateString)(properties.keywordLibName));
    return errors.wrap('supplied properties not correct for "RosKeywordLibProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::Aligreen::KeywordLib` resource
 *
 * @param properties - the TypeScript properties of a `RosKeywordLibProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::Aligreen::KeywordLib` resource.
 */
// @ts-ignore TS6133
function rosKeywordLibPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosKeywordLibPropsValidator(properties).assertSuccess();
    }
    return {
        'KeywordLibName': ros.stringToRosTemplate(properties.keywordLibName),
        'ResourceType': ros.stringToRosTemplate(properties.resourceType),
        'BizTypes': ros.listMapper(ros.stringToRosTemplate)(properties.bizTypes),
        'Category': ros.stringToRosTemplate(properties.category),
        'Enable': ros.booleanToRosTemplate(properties.enable),
        'Language': ros.stringToRosTemplate(properties.language),
        'LibType': ros.stringToRosTemplate(properties.libType),
        'MatchMode': ros.stringToRosTemplate(properties.matchMode),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::Aligreen::KeywordLib`.
 * @Note This class does not contain additional functions, so it is recommended to use the `KeywordLib` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-aligreen-keywordlib
 */
class RosKeywordLib extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosKeywordLib.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrBizTypes = this.getAtt('BizTypes');
        this.attrCategory = this.getAtt('Category');
        this.attrEnable = this.getAtt('Enable');
        this.attrKeywordLibId = this.getAtt('KeywordLibId');
        this.attrKeywordLibName = this.getAtt('KeywordLibName');
        this.attrLanguage = this.getAtt('Language');
        this.attrLibType = this.getAtt('LibType');
        this.attrMatchMode = this.getAtt('MatchMode');
        this.attrResourceType = this.getAtt('ResourceType');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.keywordLibName = props.keywordLibName;
        this.resourceType = props.resourceType;
        this.bizTypes = props.bizTypes;
        this.category = props.category;
        this.enable = props.enable;
        this.language = props.language;
        this.libType = props.libType;
        this.matchMode = props.matchMode;
    }
    get rosProperties() {
        return {
            keywordLibName: this.keywordLibName,
            resourceType: this.resourceType,
            bizTypes: this.bizTypes,
            category: this.category,
            enable: this.enable,
            language: this.language,
            libType: this.libType,
            matchMode: this.matchMode,
        };
    }
    renderProperties(props) {
        return rosKeywordLibPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosKeywordLib = RosKeywordLib;
/**
 * The resource type name for this resource class.
 */
RosKeywordLib.ROS_RESOURCE_TYPE_NAME = "ALIYUN::Aligreen::KeywordLib";
/**
 * Determine whether the given properties match those of a `RosOssStockTaskProps`
 *
 * @param properties - the TypeScript properties of a `RosOssStockTaskProps`
 *
 * @returns the result of the validation.
 */
function RosOssStockTaskPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('imageOpened', ros.validateBoolean)(properties.imageOpened));
    errors.collect(ros.propertyValidator('audioAntispamFreezeConfig', ros.hashValidator(ros.validateAny))(properties.audioAntispamFreezeConfig));
    errors.collect(ros.propertyValidator('ossStockTaskName', ros.validateString)(properties.ossStockTaskName));
    errors.collect(ros.propertyValidator('scanImageNoFileType', ros.validateBoolean)(properties.scanImageNoFileType));
    errors.collect(ros.propertyValidator('audioOpened', ros.validateBoolean)(properties.audioOpened));
    errors.collect(ros.propertyValidator('buckets', ros.requiredValidator)(properties.buckets));
    if (properties.buckets && (Array.isArray(properties.buckets) || (typeof properties.buckets) === 'string')) {
        errors.collect(ros.propertyValidator('buckets', ros.validateLength)({
            data: properties.buckets.length,
            min: 1,
            max: 20,
        }));
    }
    errors.collect(ros.propertyValidator('buckets', ros.listValidator(ros.validateAny))(properties.buckets));
    errors.collect(ros.propertyValidator('startDate', ros.requiredValidator)(properties.startDate));
    errors.collect(ros.propertyValidator('startDate', ros.validateString)(properties.startDate));
    errors.collect(ros.propertyValidator('imageLiveFreezeConfig', ros.hashValidator(ros.validateAny))(properties.imageLiveFreezeConfig));
    errors.collect(ros.propertyValidator('imageAutoFreezeOpened', ros.validateBoolean)(properties.imageAutoFreezeOpened));
    if (properties.autoFreezeType && (typeof properties.autoFreezeType) !== 'object') {
        errors.collect(ros.propertyValidator('autoFreezeType', ros.validateAllowedValues)({
            data: properties.autoFreezeType,
            allowedValues: ["acl", "copy"],
        }));
    }
    errors.collect(ros.propertyValidator('autoFreezeType', ros.validateString)(properties.autoFreezeType));
    if (properties.imageScenes && (Array.isArray(properties.imageScenes) || (typeof properties.imageScenes) === 'string')) {
        errors.collect(ros.propertyValidator('imageScenes', ros.validateLength)({
            data: properties.imageScenes.length,
            min: undefined,
            max: 4,
        }));
    }
    errors.collect(ros.propertyValidator('imageScenes', ros.listValidator(ros.validateString))(properties.imageScenes));
    if (properties.audioMaxSize && (typeof properties.audioMaxSize) !== 'object') {
        errors.collect(ros.propertyValidator('audioMaxSize', ros.validateRange)({
            data: properties.audioMaxSize,
            min: 1,
            max: 2048,
        }));
    }
    errors.collect(ros.propertyValidator('audioMaxSize', ros.validateNumber)(properties.audioMaxSize));
    errors.collect(ros.propertyValidator('videoTerrorismFreezeConfig', ros.hashValidator(ros.validateAny))(properties.videoTerrorismFreezeConfig));
    errors.collect(ros.propertyValidator('videoOpened', ros.validateBoolean)(properties.videoOpened));
    errors.collect(ros.propertyValidator('imageTerrorismFreezeConfig', ros.hashValidator(ros.validateAny))(properties.imageTerrorismFreezeConfig));
    if (properties.callbackId && (typeof properties.callbackId) !== 'object') {
        errors.collect(ros.propertyValidator('callbackId', ros.validateRange)({
            data: properties.callbackId,
            min: 1,
            max: undefined,
        }));
    }
    errors.collect(ros.propertyValidator('callbackId', ros.validateNumber)(properties.callbackId));
    if (properties.imageScanLimit && (typeof properties.imageScanLimit) !== 'object') {
        errors.collect(ros.propertyValidator('imageScanLimit', ros.validateRange)({
            data: properties.imageScanLimit,
            min: 1,
            max: 1,
        }));
    }
    errors.collect(ros.propertyValidator('imageScanLimit', ros.validateNumber)(properties.imageScanLimit));
    errors.collect(ros.propertyValidator('bizType', ros.validateString)(properties.bizType));
    errors.collect(ros.propertyValidator('imageAdFreezeConfig', ros.hashValidator(ros.validateAny))(properties.imageAdFreezeConfig));
    if (properties.audioScenes && (Array.isArray(properties.audioScenes) || (typeof properties.audioScenes) === 'string')) {
        errors.collect(ros.propertyValidator('audioScenes', ros.validateLength)({
            data: properties.audioScenes.length,
            min: 1,
            max: 1,
        }));
    }
    errors.collect(ros.propertyValidator('audioScenes', ros.listValidator(ros.validateString))(properties.audioScenes));
    if (properties.videoFrameInterval && (typeof properties.videoFrameInterval) !== 'object') {
        errors.collect(ros.propertyValidator('videoFrameInterval', ros.validateRange)({
            data: properties.videoFrameInterval,
            min: 1,
            max: 60,
        }));
    }
    errors.collect(ros.propertyValidator('videoFrameInterval', ros.validateNumber)(properties.videoFrameInterval));
    errors.collect(ros.propertyValidator('endDate', ros.validateString)(properties.endDate));
    errors.collect(ros.propertyValidator('imagePornFreezeConfig', ros.hashValidator(ros.validateAny))(properties.imagePornFreezeConfig));
    errors.collect(ros.propertyValidator('videoLiveFreezeConfig', ros.hashValidator(ros.validateAny))(properties.videoLiveFreezeConfig));
    errors.collect(ros.propertyValidator('audioAutoFreezeOpened', ros.validateBoolean)(properties.audioAutoFreezeOpened));
    if (properties.videoScanLimit && (typeof properties.videoScanLimit) !== 'object') {
        errors.collect(ros.propertyValidator('videoScanLimit', ros.validateRange)({
            data: properties.videoScanLimit,
            min: 1,
            max: undefined,
        }));
    }
    errors.collect(ros.propertyValidator('videoScanLimit', ros.validateNumber)(properties.videoScanLimit));
    errors.collect(ros.propertyValidator('videoPornFreezeConfig', ros.hashValidator(ros.validateAny))(properties.videoPornFreezeConfig));
    errors.collect(ros.propertyValidator('videoAutoFreezeOpened', ros.validateBoolean)(properties.videoAutoFreezeOpened));
    errors.collect(ros.propertyValidator('videoVoiceAntispamFreezeConfig', ros.hashValidator(ros.validateAny))(properties.videoVoiceAntispamFreezeConfig));
    if (properties.audioScanLimit && (typeof properties.audioScanLimit) !== 'object') {
        errors.collect(ros.propertyValidator('audioScanLimit', ros.validateRange)({
            data: properties.audioScanLimit,
            min: 1,
            max: undefined,
        }));
    }
    errors.collect(ros.propertyValidator('audioScanLimit', ros.validateNumber)(properties.audioScanLimit));
    if (properties.videoScenes && (Array.isArray(properties.videoScenes) || (typeof properties.videoScenes) === 'string')) {
        errors.collect(ros.propertyValidator('videoScenes', ros.validateLength)({
            data: properties.videoScenes.length,
            min: undefined,
            max: 5,
        }));
    }
    errors.collect(ros.propertyValidator('videoScenes', ros.listValidator(ros.validateString))(properties.videoScenes));
    errors.collect(ros.propertyValidator('videoAdFreezeConfig', ros.hashValidator(ros.validateAny))(properties.videoAdFreezeConfig));
    if (properties.videoMaxFrames && (typeof properties.videoMaxFrames) !== 'object') {
        errors.collect(ros.propertyValidator('videoMaxFrames', ros.validateRange)({
            data: properties.videoMaxFrames,
            min: 5,
            max: 20000,
        }));
    }
    errors.collect(ros.propertyValidator('videoMaxFrames', ros.validateNumber)(properties.videoMaxFrames));
    errors.collect(ros.propertyValidator('videoMaxSize', ros.validateNumber)(properties.videoMaxSize));
    return errors.wrap('supplied properties not correct for "RosOssStockTaskProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::Aligreen::OssStockTask` resource
 *
 * @param properties - the TypeScript properties of a `RosOssStockTaskProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::Aligreen::OssStockTask` resource.
 */
// @ts-ignore TS6133
function rosOssStockTaskPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosOssStockTaskPropsValidator(properties).assertSuccess();
    }
    return {
        'Buckets': ros.listMapper(ros.objectToRosTemplate)(properties.buckets),
        'StartDate': ros.stringToRosTemplate(properties.startDate),
        'AudioAntispamFreezeConfig': ros.hashMapper(ros.objectToRosTemplate)(properties.audioAntispamFreezeConfig),
        'AudioAutoFreezeOpened': ros.booleanToRosTemplate(properties.audioAutoFreezeOpened),
        'AudioMaxSize': ros.numberToRosTemplate(properties.audioMaxSize),
        'AudioOpened': ros.booleanToRosTemplate(properties.audioOpened),
        'AudioScanLimit': ros.numberToRosTemplate(properties.audioScanLimit),
        'AudioScenes': ros.listMapper(ros.stringToRosTemplate)(properties.audioScenes),
        'AutoFreezeType': ros.stringToRosTemplate(properties.autoFreezeType),
        'BizType': ros.stringToRosTemplate(properties.bizType),
        'CallbackId': ros.numberToRosTemplate(properties.callbackId),
        'EndDate': ros.stringToRosTemplate(properties.endDate),
        'ImageAdFreezeConfig': ros.hashMapper(ros.objectToRosTemplate)(properties.imageAdFreezeConfig),
        'ImageAutoFreezeOpened': ros.booleanToRosTemplate(properties.imageAutoFreezeOpened),
        'ImageLiveFreezeConfig': ros.hashMapper(ros.objectToRosTemplate)(properties.imageLiveFreezeConfig),
        'ImageOpened': ros.booleanToRosTemplate(properties.imageOpened),
        'ImagePornFreezeConfig': ros.hashMapper(ros.objectToRosTemplate)(properties.imagePornFreezeConfig),
        'ImageScanLimit': ros.numberToRosTemplate(properties.imageScanLimit),
        'ImageScenes': ros.listMapper(ros.stringToRosTemplate)(properties.imageScenes),
        'ImageTerrorismFreezeConfig': ros.hashMapper(ros.objectToRosTemplate)(properties.imageTerrorismFreezeConfig),
        'OssStockTaskName': ros.stringToRosTemplate(properties.ossStockTaskName),
        'ScanImageNoFileType': ros.booleanToRosTemplate(properties.scanImageNoFileType),
        'VideoAdFreezeConfig': ros.hashMapper(ros.objectToRosTemplate)(properties.videoAdFreezeConfig),
        'VideoAutoFreezeOpened': ros.booleanToRosTemplate(properties.videoAutoFreezeOpened),
        'VideoFrameInterval': ros.numberToRosTemplate(properties.videoFrameInterval),
        'VideoLiveFreezeConfig': ros.hashMapper(ros.objectToRosTemplate)(properties.videoLiveFreezeConfig),
        'VideoMaxFrames': ros.numberToRosTemplate(properties.videoMaxFrames),
        'VideoMaxSize': ros.numberToRosTemplate(properties.videoMaxSize),
        'VideoOpened': ros.booleanToRosTemplate(properties.videoOpened),
        'VideoPornFreezeConfig': ros.hashMapper(ros.objectToRosTemplate)(properties.videoPornFreezeConfig),
        'VideoScanLimit': ros.numberToRosTemplate(properties.videoScanLimit),
        'VideoScenes': ros.listMapper(ros.stringToRosTemplate)(properties.videoScenes),
        'VideoTerrorismFreezeConfig': ros.hashMapper(ros.objectToRosTemplate)(properties.videoTerrorismFreezeConfig),
        'VideoVoiceAntispamFreezeConfig': ros.hashMapper(ros.objectToRosTemplate)(properties.videoVoiceAntispamFreezeConfig),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::Aligreen::OssStockTask`.
 * @Note This class does not contain additional functions, so it is recommended to use the `OssStockTask` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-aligreen-ossstocktask
 */
class RosOssStockTask extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosOssStockTask.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrAudioAntispamFreezeConfig = this.getAtt('AudioAntispamFreezeConfig');
        this.attrAudioAutoFreezeOpened = this.getAtt('AudioAutoFreezeOpened');
        this.attrAudioMaxSize = this.getAtt('AudioMaxSize');
        this.attrAudioOpened = this.getAtt('AudioOpened');
        this.attrAudioScanLimit = this.getAtt('AudioScanLimit');
        this.attrAudioScenes = this.getAtt('AudioScenes');
        this.attrAutoFreezeType = this.getAtt('AutoFreezeType');
        this.attrBizType = this.getAtt('BizType');
        this.attrBuckets = this.getAtt('Buckets');
        this.attrCallbackId = this.getAtt('CallbackId');
        this.attrEndDate = this.getAtt('EndDate');
        this.attrImageAdFreezeConfig = this.getAtt('ImageAdFreezeConfig');
        this.attrImageAutoFreezeOpened = this.getAtt('ImageAutoFreezeOpened');
        this.attrImageLiveFreezeConfig = this.getAtt('ImageLiveFreezeConfig');
        this.attrImageOpened = this.getAtt('ImageOpened');
        this.attrImagePornFreezeConfig = this.getAtt('ImagePornFreezeConfig');
        this.attrImageScanLimit = this.getAtt('ImageScanLimit');
        this.attrImageScenes = this.getAtt('ImageScenes');
        this.attrImageTerrorismFreezeConfig = this.getAtt('ImageTerrorismFreezeConfig');
        this.attrScanImageNoFileType = this.getAtt('ScanImageNoFileType');
        this.attrStartDate = this.getAtt('StartDate');
        this.attrVideoAdFreezeConfig = this.getAtt('VideoAdFreezeConfig');
        this.attrVideoAutoFreezeOpened = this.getAtt('VideoAutoFreezeOpened');
        this.attrVideoFrameInterval = this.getAtt('VideoFrameInterval');
        this.attrVideoLiveFreezeConfig = this.getAtt('VideoLiveFreezeConfig');
        this.attrVideoMaxFrames = this.getAtt('VideoMaxFrames');
        this.attrVideoMaxSize = this.getAtt('VideoMaxSize');
        this.attrVideoOpened = this.getAtt('VideoOpened');
        this.attrVideoPornFreezeConfig = this.getAtt('VideoPornFreezeConfig');
        this.attrVideoScanLimit = this.getAtt('VideoScanLimit');
        this.attrVideoScenes = this.getAtt('VideoScenes');
        this.attrVideoTerrorismFreezeConfig = this.getAtt('VideoTerrorismFreezeConfig');
        this.attrVideoVoiceAntispamFreezeConfig = this.getAtt('VideoVoiceAntispamFreezeConfig');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.buckets = props.buckets;
        this.startDate = props.startDate;
        this.audioAntispamFreezeConfig = props.audioAntispamFreezeConfig;
        this.audioAutoFreezeOpened = props.audioAutoFreezeOpened;
        this.audioMaxSize = props.audioMaxSize;
        this.audioOpened = props.audioOpened;
        this.audioScanLimit = props.audioScanLimit;
        this.audioScenes = props.audioScenes;
        this.autoFreezeType = props.autoFreezeType;
        this.bizType = props.bizType;
        this.callbackId = props.callbackId;
        this.endDate = props.endDate;
        this.imageAdFreezeConfig = props.imageAdFreezeConfig;
        this.imageAutoFreezeOpened = props.imageAutoFreezeOpened;
        this.imageLiveFreezeConfig = props.imageLiveFreezeConfig;
        this.imageOpened = props.imageOpened;
        this.imagePornFreezeConfig = props.imagePornFreezeConfig;
        this.imageScanLimit = props.imageScanLimit;
        this.imageScenes = props.imageScenes;
        this.imageTerrorismFreezeConfig = props.imageTerrorismFreezeConfig;
        this.ossStockTaskName = props.ossStockTaskName;
        this.scanImageNoFileType = props.scanImageNoFileType;
        this.videoAdFreezeConfig = props.videoAdFreezeConfig;
        this.videoAutoFreezeOpened = props.videoAutoFreezeOpened;
        this.videoFrameInterval = props.videoFrameInterval;
        this.videoLiveFreezeConfig = props.videoLiveFreezeConfig;
        this.videoMaxFrames = props.videoMaxFrames;
        this.videoMaxSize = props.videoMaxSize;
        this.videoOpened = props.videoOpened;
        this.videoPornFreezeConfig = props.videoPornFreezeConfig;
        this.videoScanLimit = props.videoScanLimit;
        this.videoScenes = props.videoScenes;
        this.videoTerrorismFreezeConfig = props.videoTerrorismFreezeConfig;
        this.videoVoiceAntispamFreezeConfig = props.videoVoiceAntispamFreezeConfig;
    }
    get rosProperties() {
        return {
            buckets: this.buckets,
            startDate: this.startDate,
            audioAntispamFreezeConfig: this.audioAntispamFreezeConfig,
            audioAutoFreezeOpened: this.audioAutoFreezeOpened,
            audioMaxSize: this.audioMaxSize,
            audioOpened: this.audioOpened,
            audioScanLimit: this.audioScanLimit,
            audioScenes: this.audioScenes,
            autoFreezeType: this.autoFreezeType,
            bizType: this.bizType,
            callbackId: this.callbackId,
            endDate: this.endDate,
            imageAdFreezeConfig: this.imageAdFreezeConfig,
            imageAutoFreezeOpened: this.imageAutoFreezeOpened,
            imageLiveFreezeConfig: this.imageLiveFreezeConfig,
            imageOpened: this.imageOpened,
            imagePornFreezeConfig: this.imagePornFreezeConfig,
            imageScanLimit: this.imageScanLimit,
            imageScenes: this.imageScenes,
            imageTerrorismFreezeConfig: this.imageTerrorismFreezeConfig,
            ossStockTaskName: this.ossStockTaskName,
            scanImageNoFileType: this.scanImageNoFileType,
            videoAdFreezeConfig: this.videoAdFreezeConfig,
            videoAutoFreezeOpened: this.videoAutoFreezeOpened,
            videoFrameInterval: this.videoFrameInterval,
            videoLiveFreezeConfig: this.videoLiveFreezeConfig,
            videoMaxFrames: this.videoMaxFrames,
            videoMaxSize: this.videoMaxSize,
            videoOpened: this.videoOpened,
            videoPornFreezeConfig: this.videoPornFreezeConfig,
            videoScanLimit: this.videoScanLimit,
            videoScenes: this.videoScenes,
            videoTerrorismFreezeConfig: this.videoTerrorismFreezeConfig,
            videoVoiceAntispamFreezeConfig: this.videoVoiceAntispamFreezeConfig,
        };
    }
    renderProperties(props) {
        return rosOssStockTaskPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosOssStockTask = RosOssStockTask;
/**
 * The resource type name for this resource class.
 */
RosOssStockTask.ROS_RESOURCE_TYPE_NAME = "ALIYUN::Aligreen::OssStockTask";
//# sourceMappingURL=data:application/json;base64,