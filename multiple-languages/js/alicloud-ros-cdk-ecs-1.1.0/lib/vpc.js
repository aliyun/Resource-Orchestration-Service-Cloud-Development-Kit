"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Vpc = exports.VPCProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ecs_generated_1 = require("./ecs.generated");
Object.defineProperty(exports, "VPCProperty", { enumerable: true, get: function () { return ecs_generated_1.RosVPC; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::ECS::VPC`, which is used to create a virtual private cloud (VPC).
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosVPC`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-ecs-vpc
 */
class Vpc extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props = {}, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosVPC = new ecs_generated_1.RosVPC(this, id, {
            ipv6Isp: props.ipv6Isp,
            description: props.description,
            resourceGroupId: props.resourceGroupId,
            secondaryCidrBlocks: props.secondaryCidrBlocks,
            cidrBlock: props.cidrBlock,
            vpcName: props.vpcName,
            ipv6CidrBlock: props.ipv6CidrBlock,
            tags: props.tags,
            enableIpv6: props.enableIpv6 === undefined || props.enableIpv6 === null ? false : props.enableIpv6,
            userCidr: props.userCidr,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosVPC;
        this.attrRouteTableId = rosVPC.attrRouteTableId;
        this.attrVRouterId = rosVPC.attrVRouterId;
        this.attrVpcId = rosVPC.attrVpcId;
        this.attrVpcName = rosVPC.attrVpcName;
    }
}
exports.Vpc = Vpc;
//# sourceMappingURL=data:application/json;base64,