"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AutoSnapshotPolicy = exports.AutoSnapshotPolicyProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ecs_generated_1 = require("./ecs.generated");
Object.defineProperty(exports, "AutoSnapshotPolicyProperty", { enumerable: true, get: function () { return ecs_generated_1.RosAutoSnapshotPolicy; } });
/**
 * This class encapsulates and extends the ROS resource type `DATASOURCE::ECS::AutoSnapshotPolicy`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosAutoSnapshotPolicy`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/datasource-ecs-autosnapshotpolicy
 */
class AutoSnapshotPolicy extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosAutoSnapshotPolicy = new ecs_generated_1.RosAutoSnapshotPolicy(this, id, {
            autoSnapshotPolicyId: props.autoSnapshotPolicyId,
            refreshOptions: props.refreshOptions === undefined || props.refreshOptions === null ? 'Never' : props.refreshOptions,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosAutoSnapshotPolicy;
        this.attrAutoSnapshotPolicyName = rosAutoSnapshotPolicy.attrAutoSnapshotPolicyName;
        this.attrCreateTime = rosAutoSnapshotPolicy.attrCreateTime;
        this.attrDiskNums = rosAutoSnapshotPolicy.attrDiskNums;
        this.attrRepeatWeekdays = rosAutoSnapshotPolicy.attrRepeatWeekdays;
        this.attrResourceGroupId = rosAutoSnapshotPolicy.attrResourceGroupId;
        this.attrRetentionDays = rosAutoSnapshotPolicy.attrRetentionDays;
        this.attrTags = rosAutoSnapshotPolicy.attrTags;
        this.attrTimePoints = rosAutoSnapshotPolicy.attrTimePoints;
        this.attrVolumeNums = rosAutoSnapshotPolicy.attrVolumeNums;
    }
}
exports.AutoSnapshotPolicy = AutoSnapshotPolicy;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0b3NuYXBzaG90cG9saWN5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYXV0b3NuYXBzaG90cG9saWN5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDhDQUE4QztBQUM5QyxtREFBd0Q7QUFFdEIsMkdBRnpCLHFDQUFxQixPQUU4QjtBQXNCNUQ7Ozs7R0FJRztBQUNILE1BQWEsa0JBQW1CLFNBQVEsR0FBRyxDQUFDLFFBQVE7SUFxRGhEOzs7O09BSUc7SUFDSCxZQUFZLEtBQW9CLEVBQUUsRUFBVSxFQUFFLEtBQThCLEVBQUUsbUNBQTJDLElBQUk7UUFDekgsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNqQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUNiLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxnQ0FBZ0MsR0FBRyxnQ0FBZ0MsQ0FBQztRQUV6RSxNQUFNLHFCQUFxQixHQUFHLElBQUkscUNBQXFCLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRztZQUMvRCxvQkFBb0IsRUFBRSxLQUFLLENBQUMsb0JBQW9CO1lBQ2hELGNBQWMsRUFBRSxLQUFLLENBQUMsY0FBYyxLQUFLLFNBQVMsSUFBSSxLQUFLLENBQUMsY0FBYyxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsY0FBYztTQUN2SCxFQUFFLGdDQUFnQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztRQUNwRixJQUFJLENBQUMsUUFBUSxHQUFHLHFCQUFxQixDQUFDO1FBQ3RDLElBQUksQ0FBQywwQkFBMEIsR0FBRyxxQkFBcUIsQ0FBQywwQkFBMEIsQ0FBQztRQUNuRixJQUFJLENBQUMsY0FBYyxHQUFHLHFCQUFxQixDQUFDLGNBQWMsQ0FBQztRQUMzRCxJQUFJLENBQUMsWUFBWSxHQUFHLHFCQUFxQixDQUFDLFlBQVksQ0FBQztRQUN2RCxJQUFJLENBQUMsa0JBQWtCLEdBQUcscUJBQXFCLENBQUMsa0JBQWtCLENBQUM7UUFDbkUsSUFBSSxDQUFDLG1CQUFtQixHQUFHLHFCQUFxQixDQUFDLG1CQUFtQixDQUFDO1FBQ3JFLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxxQkFBcUIsQ0FBQyxpQkFBaUIsQ0FBQztRQUNqRSxJQUFJLENBQUMsUUFBUSxHQUFHLHFCQUFxQixDQUFDLFFBQVEsQ0FBQztRQUMvQyxJQUFJLENBQUMsY0FBYyxHQUFHLHFCQUFxQixDQUFDLGNBQWMsQ0FBQztRQUMzRCxJQUFJLENBQUMsY0FBYyxHQUFHLHFCQUFxQixDQUFDLGNBQWMsQ0FBQztJQUMvRCxDQUFDO0NBQ0o7QUFoRkQsZ0RBZ0ZDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcm9zIGZyb20gJ0BhbGljbG91ZC9yb3MtY2RrLWNvcmUnO1xuaW1wb3J0IHsgUm9zQXV0b1NuYXBzaG90UG9saWN5IH0gZnJvbSAnLi9lY3MuZ2VuZXJhdGVkJztcbi8vIEdlbmVyYXRlZCBmcm9tIHRoZSBBbGlDbG91ZCBST1MgUmVzb3VyY2UgU3BlY2lmaWNhdGlvblxuZXhwb3J0IHsgUm9zQXV0b1NuYXBzaG90UG9saWN5IGFzIEF1dG9TbmFwc2hvdFBvbGljeVByb3BlcnR5IH07XG5cbi8qKlxuICogUHJvcGVydGllcyBmb3IgZGVmaW5pbmcgYSBgQXV0b1NuYXBzaG90UG9saWN5YC5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvZGF0YXNvdXJjZS1lY3MtYXV0b3NuYXBzaG90cG9saWN5XG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQXV0b1NuYXBzaG90UG9saWN5UHJvcHMge1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgYXV0b1NuYXBzaG90UG9saWN5SWQ6IFRoZSBuYW1lIG9mIHRoZSBhdXRvbWF0aWMgc25hcHNob3QgcG9saWN5LlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGF1dG9TbmFwc2hvdFBvbGljeUlkOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSByZWZyZXNoT3B0aW9uczogVGhlIHJlZnJlc2ggc3RyYXRlZ3kgZm9yIHRoZSBkYXRhc291cmNlIHJlc291cmNlIHdoZW4gdGhlIHN0YWNrIGlzIHVwZGF0ZWQuIFZhbGlkIHZhbHVlczpcbiAgICAgKiAtIE5ldmVyOiBOZXZlciByZWZyZXNoIHRoZSBkYXRhc291cmNlIHJlc291cmNlIHdoZW4gdGhlIHN0YWNrIGlzIHVwZGF0ZWQuXG4gICAgICogLSBBbHdheXM6IEFsd2F5cyByZWZyZXNoIHRoZSBkYXRhc291cmNlIHJlc291cmNlIHdoZW4gdGhlIHN0YWNrIGlzIHVwZGF0ZWQuXG4gICAgICogRGVmYXVsdCBpcyBOZXZlci5cbiAgICAgKi9cbiAgICByZWFkb25seSByZWZyZXNoT3B0aW9ucz86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcbn1cblxuLyoqXG4gKiBUaGlzIGNsYXNzIGVuY2Fwc3VsYXRlcyBhbmQgZXh0ZW5kcyB0aGUgUk9TIHJlc291cmNlIHR5cGUgYERBVEFTT1VSQ0U6OkVDUzo6QXV0b1NuYXBzaG90UG9saWN5YC5cbiAqIEBOb3RlIFRoaXMgY2xhc3MgbWF5IGhhdmUgc29tZSBuZXcgZnVuY3Rpb25zIHRvIGZhY2lsaXRhdGUgZGV2ZWxvcG1lbnQsIHNvIGl0IGlzIHJlY29tbWVuZGVkIHRvIHVzZSB0aGlzIGNsYXNzIGluc3RlYWQgb2YgYFJvc0F1dG9TbmFwc2hvdFBvbGljeWBmb3IgYSBtb3JlIGNvbnZlbmllbnQgZGV2ZWxvcG1lbnQgZXhwZXJpZW5jZS5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvZGF0YXNvdXJjZS1lY3MtYXV0b3NuYXBzaG90cG9saWN5XG4gKi9cbmV4cG9ydCBjbGFzcyBBdXRvU25hcHNob3RQb2xpY3kgZXh0ZW5kcyByb3MuUmVzb3VyY2Uge1xuICAgIHByb3RlY3RlZCBzY29wZTogcm9zLkNvbnN0cnVjdDtcbiAgICBwcm90ZWN0ZWQgaWQ6IHN0cmluZztcbiAgICBwcm90ZWN0ZWQgcHJvcHM6IEF1dG9TbmFwc2hvdFBvbGljeVByb3BzO1xuICAgIHByb3RlY3RlZCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBBdXRvU25hcHNob3RQb2xpY3lOYW1lOiBOYW1lIG9mIHRoZSBhdXRvbWF0aWMgc25hcHNob3QgcG9saWN5LlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyQXV0b1NuYXBzaG90UG9saWN5TmFtZTogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIENyZWF0ZVRpbWU6IFRoZSB0aW1lIHdoZW4gdGhlIGF1dG9tYXRpYyBzbmFwc2hvdCBwb2xpY3kgd2FzIGNyZWF0ZWQuIFRoZSB0aW1lIGZvbGxvd3MgdGhlIElTTyA4NjAxIHN0YW5kYXJkIGluIHRoZSB5eXl5LU1NLWRkVGhoOm1tOnNzWiBmb3JtYXQuIFRoZSB0aW1lIGlzIGRpc3BsYXllZCBpbiBVVEMuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJDcmVhdGVUaW1lOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgRGlza051bXM6IE51bWJlciBvZiBjbG91ZCBkaXNrcyB3aXRoIHRoaXMgcG9saWN5IGVuYWJsZWQuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJEaXNrTnVtczogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIFJlcGVhdFdlZWtkYXlzOiBUaGUgZGF5cyBvZiB0aGUgd2VlayBvbiB3aGljaCB0byBjcmVhdGUgYXV0b21hdGljIHNuYXBzaG90cy4gVmFsaWQgdmFsdWVzOiAxIHRvIDcsIHdoaWNoIGNvcnJlc3BvbmQgdG8gdGhlIGRheXMgb2YgdGhlIHdlZWsuIDEgaW5kaWNhdGVzIE1vbmRheS4gT25lIG9yIG1vcmUgZGF5cyBjYW4gYmUgc3BlY2lmaWVkLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyUmVwZWF0V2Vla2RheXM6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBSZXNvdXJjZUdyb3VwSWQ6IFRoZSBJRCBvZiB0aGUgcmVzb3VyY2UgZ3JvdXAuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJSZXNvdXJjZUdyb3VwSWQ6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBSZXRlbnRpb25EYXlzOiBUaGUgcmV0ZW50aW9uIHBlcmlvZCBvZiB0aGUgYXV0b21hdGljIHNuYXBzaG90LiBVbml0OiBkYXlzLiBWYWxpZCB2YWx1ZXM6XG4tIC0xOiBUaGUgYXV0b21hdGljIHNuYXBzaG90IGlzIHJldGFpbmVkIHVudGlsIGl0IGlzIGRlbGV0ZWQuXG4tIDEgdG8gNjU1MzY6IFRoZSBhdXRvbWF0aWMgc25hcHNob3QgaXMgcmV0YWluZWQgZm9yIHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIGRheXMuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJSZXRlbnRpb25EYXlzOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgVGFnczogVGhlIHRhZ3Mgb2YgdGhlIGF1dG9tYXRpYyBzbmFwc2hvdCBwb2xpY3kuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJUYWdzOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgVGltZVBvaW50czogVGhlIHRpbWUgd2hlbiB0aGUgYXV0b21hdGljIHNuYXBzaG90IHBvbGljeSB3YXMgY3JlYXRlZC4gVGhlIHRpbWUgZm9sbG93cyB0aGUgSVNPIDg2MDEgc3RhbmRhcmQgaW4gdGhlIHl5eXktTU0tZGRUaGg6bW06c3NaIGZvcm1hdC4gVGhlIHRpbWUgaXMgZGlzcGxheWVkIGluIFVUQy5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0clRpbWVQb2ludHM6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBWb2x1bWVOdW1zOiBUaGUgbnVtYmVyIG9mIGV4dGVuZGVkIHZvbHVtZXMgdG8gd2hpY2ggdGhlIGF1dG9tYXRpYyBzbmFwc2hvdCBwb2xpY3kgaXMgYXBwbGllZC5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0clZvbHVtZU51bXM6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFBhcmFtIHNjb3BlIC0gc2NvcGUgaW4gd2hpY2ggdGhpcyByZXNvdXJjZSBpcyBkZWZpbmVkXG4gICAgICogUGFyYW0gaWQgICAgLSBzY29wZWQgaWQgb2YgdGhlIHJlc291cmNlXG4gICAgICogUGFyYW0gcHJvcHMgLSByZXNvdXJjZSBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IHJvcy5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBBdXRvU25hcHNob3RQb2xpY3lQcm9wcywgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6Ym9vbGVhbiA9IHRydWUpIHtcbiAgICAgICAgc3VwZXIoc2NvcGUsIGlkKTtcbiAgICAgICAgdGhpcy5zY29wZSA9IHNjb3BlO1xuICAgICAgICB0aGlzLmlkID0gaWQ7XG4gICAgICAgIHRoaXMucHJvcHMgPSBwcm9wcztcbiAgICAgICAgdGhpcy5lbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCA9IGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50O1xuXG4gICAgICAgIGNvbnN0IHJvc0F1dG9TbmFwc2hvdFBvbGljeSA9IG5ldyBSb3NBdXRvU25hcHNob3RQb2xpY3kodGhpcywgaWQsICB7XG4gICAgICAgICAgICBhdXRvU25hcHNob3RQb2xpY3lJZDogcHJvcHMuYXV0b1NuYXBzaG90UG9saWN5SWQsXG4gICAgICAgICAgICByZWZyZXNoT3B0aW9uczogcHJvcHMucmVmcmVzaE9wdGlvbnMgPT09IHVuZGVmaW5lZCB8fCBwcm9wcy5yZWZyZXNoT3B0aW9ucyA9PT0gbnVsbCA/ICdOZXZlcicgOiBwcm9wcy5yZWZyZXNoT3B0aW9ucyxcbiAgICAgICAgfSwgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgJiYgdGhpcy5zdGFjay5lbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCk7XG4gICAgICAgIHRoaXMucmVzb3VyY2UgPSByb3NBdXRvU25hcHNob3RQb2xpY3k7XG4gICAgICAgIHRoaXMuYXR0ckF1dG9TbmFwc2hvdFBvbGljeU5hbWUgPSByb3NBdXRvU25hcHNob3RQb2xpY3kuYXR0ckF1dG9TbmFwc2hvdFBvbGljeU5hbWU7XG4gICAgICAgIHRoaXMuYXR0ckNyZWF0ZVRpbWUgPSByb3NBdXRvU25hcHNob3RQb2xpY3kuYXR0ckNyZWF0ZVRpbWU7XG4gICAgICAgIHRoaXMuYXR0ckRpc2tOdW1zID0gcm9zQXV0b1NuYXBzaG90UG9saWN5LmF0dHJEaXNrTnVtcztcbiAgICAgICAgdGhpcy5hdHRyUmVwZWF0V2Vla2RheXMgPSByb3NBdXRvU25hcHNob3RQb2xpY3kuYXR0clJlcGVhdFdlZWtkYXlzO1xuICAgICAgICB0aGlzLmF0dHJSZXNvdXJjZUdyb3VwSWQgPSByb3NBdXRvU25hcHNob3RQb2xpY3kuYXR0clJlc291cmNlR3JvdXBJZDtcbiAgICAgICAgdGhpcy5hdHRyUmV0ZW50aW9uRGF5cyA9IHJvc0F1dG9TbmFwc2hvdFBvbGljeS5hdHRyUmV0ZW50aW9uRGF5cztcbiAgICAgICAgdGhpcy5hdHRyVGFncyA9IHJvc0F1dG9TbmFwc2hvdFBvbGljeS5hdHRyVGFncztcbiAgICAgICAgdGhpcy5hdHRyVGltZVBvaW50cyA9IHJvc0F1dG9TbmFwc2hvdFBvbGljeS5hdHRyVGltZVBvaW50cztcbiAgICAgICAgdGhpcy5hdHRyVm9sdW1lTnVtcyA9IHJvc0F1dG9TbmFwc2hvdFBvbGljeS5hdHRyVm9sdW1lTnVtcztcbiAgICB9XG59XG4iXX0=