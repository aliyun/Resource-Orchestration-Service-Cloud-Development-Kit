"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Instance = exports.InstanceProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ecs_generated_1 = require("./ecs.generated");
Object.defineProperty(exports, "InstanceProperty", { enumerable: true, get: function () { return ecs_generated_1.RosInstance; } });
/**
 * This class encapsulates and extends the ROS resource type `DATASOURCE::ECS::Instance`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosInstance`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/datasource-ecs-instance
 */
class Instance extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosInstance = new ecs_generated_1.RosInstance(this, id, {
            instanceId: props.instanceId,
            refreshOptions: props.refreshOptions === undefined || props.refreshOptions === null ? 'Never' : props.refreshOptions,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosInstance;
        this.attrActionOnMaintenance = rosInstance.attrActionOnMaintenance;
        this.attrAutoRebootTime = rosInstance.attrAutoRebootTime;
        this.attrAutoReleaseTime = rosInstance.attrAutoReleaseTime;
        this.attrAutoRenewEnabled = rosInstance.attrAutoRenewEnabled;
        this.attrClusterId = rosInstance.attrClusterId;
        this.attrCpu = rosInstance.attrCpu;
        this.attrCpuOptions = rosInstance.attrCpuOptions;
        this.attrCreateTime = rosInstance.attrCreateTime;
        this.attrCreditSpecification = rosInstance.attrCreditSpecification;
        this.attrDedicatedHostAttribute = rosInstance.attrDedicatedHostAttribute;
        this.attrDedicatedInstanceAttribute = rosInstance.attrDedicatedInstanceAttribute;
        this.attrDeletionProtection = rosInstance.attrDeletionProtection;
        this.attrDeploymentSetGroupNo = rosInstance.attrDeploymentSetGroupNo;
        this.attrDeploymentSetId = rosInstance.attrDeploymentSetId;
        this.attrDescription = rosInstance.attrDescription;
        this.attrDeviceAvailable = rosInstance.attrDeviceAvailable;
        this.attrDuration = rosInstance.attrDuration;
        this.attrEcsCapacityReservationAttr = rosInstance.attrEcsCapacityReservationAttr;
        this.attrEipAddress = rosInstance.attrEipAddress;
        this.attrExpiredTime = rosInstance.attrExpiredTime;
        this.attrGpuAmount = rosInstance.attrGpuAmount;
        this.attrGpuSpec = rosInstance.attrGpuSpec;
        this.attrHostName = rosInstance.attrHostName;
        this.attrHpcClusterId = rosInstance.attrHpcClusterId;
        this.attrImageId = rosInstance.attrImageId;
        this.attrInstanceId = rosInstance.attrInstanceId;
        this.attrInstanceName = rosInstance.attrInstanceName;
        this.attrInstanceNetworkType = rosInstance.attrInstanceNetworkType;
        this.attrInstanceType = rosInstance.attrInstanceType;
        this.attrInstanceTypeFamily = rosInstance.attrInstanceTypeFamily;
        this.attrInternetChargeType = rosInstance.attrInternetChargeType;
        this.attrInternetMaxBandwidthIn = rosInstance.attrInternetMaxBandwidthIn;
        this.attrInternetMaxBandwidthOut = rosInstance.attrInternetMaxBandwidthOut;
        this.attrIoOptimized = rosInstance.attrIoOptimized;
        this.attrKeyPairName = rosInstance.attrKeyPairName;
        this.attrLocalStorageAmount = rosInstance.attrLocalStorageAmount;
        this.attrLocalStorageCapacity = rosInstance.attrLocalStorageCapacity;
        this.attrMaintenanceWindows = rosInstance.attrMaintenanceWindows;
        this.attrMemory = rosInstance.attrMemory;
        this.attrMetadataOptions = rosInstance.attrMetadataOptions;
        this.attrNetworkInterfaces = rosInstance.attrNetworkInterfaces;
        this.attrNotifyOnMaintenance = rosInstance.attrNotifyOnMaintenance;
        this.attrOperationLocks = rosInstance.attrOperationLocks;
        this.attrOsName = rosInstance.attrOsName;
        this.attrOsNameEn = rosInstance.attrOsNameEn;
        this.attrOsType = rosInstance.attrOsType;
        this.attrPaymentType = rosInstance.attrPaymentType;
        this.attrPeriodUnit = rosInstance.attrPeriodUnit;
        this.attrPrivatePoolOptionsId = rosInstance.attrPrivatePoolOptionsId;
        this.attrPrivatePoolOptionsMatchCriteria = rosInstance.attrPrivatePoolOptionsMatchCriteria;
        this.attrPublicIpAddress = rosInstance.attrPublicIpAddress;
        this.attrRdmaIpAddress = rosInstance.attrRdmaIpAddress;
        this.attrRecyclable = rosInstance.attrRecyclable;
        this.attrRenewalStatus = rosInstance.attrRenewalStatus;
        this.attrResourceGroupId = rosInstance.attrResourceGroupId;
        this.attrSaleCycle = rosInstance.attrSaleCycle;
        this.attrSecurityGroupIds = rosInstance.attrSecurityGroupIds;
        this.attrSerialNumber = rosInstance.attrSerialNumber;
        this.attrSpotDuration = rosInstance.attrSpotDuration;
        this.attrSpotPriceLimit = rosInstance.attrSpotPriceLimit;
        this.attrSpotStrategy = rosInstance.attrSpotStrategy;
        this.attrStartTime = rosInstance.attrStartTime;
        this.attrStoppedMode = rosInstance.attrStoppedMode;
        this.attrTags = rosInstance.attrTags;
        this.attrUserData = rosInstance.attrUserData;
        this.attrVpcAttributes = rosInstance.attrVpcAttributes;
        this.attrZoneId = rosInstance.attrZoneId;
    }
}
exports.Instance = Instance;
//# sourceMappingURL=data:application/json;base64,