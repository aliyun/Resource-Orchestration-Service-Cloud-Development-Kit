"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Assert = exports.AssertProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ros_generated_1 = require("./ros.generated");
Object.defineProperty(exports, "AssertProperty", { enumerable: true, get: function () { return ros_generated_1.RosAssert; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::ROS::Assert`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosAssert`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-ros-assert
 */
class Assert extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosAssert = new ros_generated_1.RosAssert(this, id, {
            values: props.values,
            operation: props.operation === undefined || props.operation === null ? 'Equal' : props.operation,
            errorMessage: props.errorMessage,
            abortCreation: props.abortCreation === undefined || props.abortCreation === null ? true : props.abortCreation,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosAssert;
        this.attrFailureCause = rosAssert.attrFailureCause;
        this.attrResult = rosAssert.attrResult;
    }
}
exports.Assert = Assert;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzZXJ0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYXNzZXJ0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDhDQUE4QztBQUM5QyxtREFBNEM7QUFFdEIsK0ZBRmIseUJBQVMsT0FFa0I7QUFpQ3BDOzs7O0dBSUc7QUFDSCxNQUFhLE1BQU8sU0FBUSxHQUFHLENBQUMsUUFBUTtJQWdCcEM7Ozs7T0FJRztJQUNILFlBQVksS0FBb0IsRUFBRSxFQUFVLEVBQUUsS0FBa0IsRUFBRSxtQ0FBMkMsSUFBSTtRQUM3RyxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ2pCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQ2IsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLGdDQUFnQyxHQUFHLGdDQUFnQyxDQUFDO1FBRXpFLE1BQU0sU0FBUyxHQUFHLElBQUkseUJBQVMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFHO1lBQ3ZDLE1BQU0sRUFBRSxLQUFLLENBQUMsTUFBTTtZQUNwQixTQUFTLEVBQUUsS0FBSyxDQUFDLFNBQVMsS0FBSyxTQUFTLElBQUksS0FBSyxDQUFDLFNBQVMsS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFNBQVM7WUFDaEcsWUFBWSxFQUFFLEtBQUssQ0FBQyxZQUFZO1lBQ2hDLGFBQWEsRUFBRSxLQUFLLENBQUMsYUFBYSxLQUFLLFNBQVMsSUFBSSxLQUFLLENBQUMsYUFBYSxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsYUFBYTtTQUNoSCxFQUFFLGdDQUFnQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztRQUNwRixJQUFJLENBQUMsUUFBUSxHQUFHLFNBQVMsQ0FBQztRQUMxQixJQUFJLENBQUMsZ0JBQWdCLEdBQUcsU0FBUyxDQUFDLGdCQUFnQixDQUFDO1FBQ25ELElBQUksQ0FBQyxVQUFVLEdBQUcsU0FBUyxDQUFDLFVBQVUsQ0FBQztJQUMzQyxDQUFDO0NBQ0o7QUF0Q0Qsd0JBc0NDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcm9zIGZyb20gJ0BhbGljbG91ZC9yb3MtY2RrLWNvcmUnO1xuaW1wb3J0IHsgUm9zQXNzZXJ0IH0gZnJvbSAnLi9yb3MuZ2VuZXJhdGVkJztcbi8vIEdlbmVyYXRlZCBmcm9tIHRoZSBBbGlDbG91ZCBST1MgUmVzb3VyY2UgU3BlY2lmaWNhdGlvblxuZXhwb3J0IHsgUm9zQXNzZXJ0IGFzIEFzc2VydFByb3BlcnR5IH07XG5cbi8qKlxuICogUHJvcGVydGllcyBmb3IgZGVmaW5pbmcgYSBgQXNzZXJ0YC5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvYWxpeXVuLXJvcy1hc3NlcnRcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBBc3NlcnRQcm9wcyB7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSB2YWx1ZXM6IEEgbGlzdCBvZiB2YWx1ZXMgdG8gYXNzZXJ0LiBUaGUgaXRlbXMgaW4gdGhlIGxpc3QgYXJlIGNvbXBhcmVkIGluIG9yZGVyLiBUaGUgcmFuZ2Ugb2YgbGVuZ3RoIGlzIG9uZSB0byB0aHJlZS4gXG4gICAgICogLSBUaHJlZSB2YWx1ZXMgYXJlIHN1cHBvcnRlZCBvbmx5IGlmIHRoZSBvcGVyYXRpb24gaXMgRXF1YWwgb3IgTm90RXF1YWwuXG4gICAgICogLSBPbmUgdmFsdWUgaXMgc3VwcG9ydGVkIG9ubHkgaWYgdGhlIG9wZXJhdGlvbiBpcyBOb3QuXG4gICAgICovXG4gICAgcmVhZG9ubHkgdmFsdWVzOiBBcnJheTxhbnkgfCByb3MuSVJlc29sdmFibGU+IHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgYWJvcnRDcmVhdGlvbjogV2hldGhlciB0byBhYm9ydCBjcmVhdGlvbiB3aGVuIHRoZSBhc3NlcnQgZmFpbHMuIERlZmF1bHQgaXMgVHJ1ZS5cbiAgICAgKi9cbiAgICByZWFkb25seSBhYm9ydENyZWF0aW9uPzogYm9vbGVhbiB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGVycm9yTWVzc2FnZTogVGhlIGVycm9yIG1lc3NhZ2UgdG8gYmUgcmV0dXJuZWQgd2hlbiB0aGUgYXNzZXJ0IGZhaWxzLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGVycm9yTWVzc2FnZT86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IG9wZXJhdGlvbjogVGhlIHR5cGUgb2YgYXNzZXJ0aW9uIHRvIG1ha2UuIFRoZSBzdXBwb3J0ZWQgb3BlcmF0aW9ucyBhcmU6XG4gICAgICogRXF1YWwsIE5vdEVxdWFsLCBHcmVhdGVyLCBHcmVhdGVyT3JFcXVhbCwgTGVzcywgTGVzc09yRXF1YWwsIENvbnRhaW4sIE5vdENvbnRhaW4sIEFuZCwgT3IsIE5vdC5cbiAgICAgKiBEZWZhdWx0IGlzIEVxdWFsLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IG9wZXJhdGlvbj86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcbn1cblxuLyoqXG4gKiBUaGlzIGNsYXNzIGVuY2Fwc3VsYXRlcyBhbmQgZXh0ZW5kcyB0aGUgUk9TIHJlc291cmNlIHR5cGUgYEFMSVlVTjo6Uk9TOjpBc3NlcnRgLlxuICogQE5vdGUgVGhpcyBjbGFzcyBtYXkgaGF2ZSBzb21lIG5ldyBmdW5jdGlvbnMgdG8gZmFjaWxpdGF0ZSBkZXZlbG9wbWVudCwgc28gaXQgaXMgcmVjb21tZW5kZWQgdG8gdXNlIHRoaXMgY2xhc3MgaW5zdGVhZCBvZiBgUm9zQXNzZXJ0YGZvciBhIG1vcmUgY29udmVuaWVudCBkZXZlbG9wbWVudCBleHBlcmllbmNlLlxuICogU2VlIGh0dHBzOi8vd3d3LmFsaWJhYmFjbG91ZC5jb20vaGVscC9yb3MvZGV2ZWxvcGVyLXJlZmVyZW5jZS9hbGl5dW4tcm9zLWFzc2VydFxuICovXG5leHBvcnQgY2xhc3MgQXNzZXJ0IGV4dGVuZHMgcm9zLlJlc291cmNlIHtcbiAgICBwcm90ZWN0ZWQgc2NvcGU6IHJvcy5Db25zdHJ1Y3Q7XG4gICAgcHJvdGVjdGVkIGlkOiBzdHJpbmc7XG4gICAgcHJvdGVjdGVkIHByb3BzOiBBc3NlcnRQcm9wcztcbiAgICBwcm90ZWN0ZWQgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6IGJvb2xlYW47XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgRmFpbHVyZUNhdXNlOiBUaGUgcmVhc29uIHRoZSBhc3NlcnRpb24gZmFpbGVkXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJGYWlsdXJlQ2F1c2U6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBSZXN1bHQ6IFRoZSByZXN1bHQgb2YgdGhlIGFzc2VydC5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0clJlc3VsdDogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUGFyYW0gc2NvcGUgLSBzY29wZSBpbiB3aGljaCB0aGlzIHJlc291cmNlIGlzIGRlZmluZWRcbiAgICAgKiBQYXJhbSBpZCAgICAtIHNjb3BlZCBpZCBvZiB0aGUgcmVzb3VyY2VcbiAgICAgKiBQYXJhbSBwcm9wcyAtIHJlc291cmNlIHByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihzY29wZTogcm9zLkNvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IEFzc2VydFByb3BzLCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDpib29sZWFuID0gdHJ1ZSkge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQpO1xuICAgICAgICB0aGlzLnNjb3BlID0gc2NvcGU7XG4gICAgICAgIHRoaXMuaWQgPSBpZDtcbiAgICAgICAgdGhpcy5wcm9wcyA9IHByb3BzO1xuICAgICAgICB0aGlzLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ID0gZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ7XG5cbiAgICAgICAgY29uc3Qgcm9zQXNzZXJ0ID0gbmV3IFJvc0Fzc2VydCh0aGlzLCBpZCwgIHtcbiAgICAgICAgICAgIHZhbHVlczogcHJvcHMudmFsdWVzLFxuICAgICAgICAgICAgb3BlcmF0aW9uOiBwcm9wcy5vcGVyYXRpb24gPT09IHVuZGVmaW5lZCB8fCBwcm9wcy5vcGVyYXRpb24gPT09IG51bGwgPyAnRXF1YWwnIDogcHJvcHMub3BlcmF0aW9uLFxuICAgICAgICAgICAgZXJyb3JNZXNzYWdlOiBwcm9wcy5lcnJvck1lc3NhZ2UsXG4gICAgICAgICAgICBhYm9ydENyZWF0aW9uOiBwcm9wcy5hYm9ydENyZWF0aW9uID09PSB1bmRlZmluZWQgfHwgcHJvcHMuYWJvcnRDcmVhdGlvbiA9PT0gbnVsbCA/IHRydWUgOiBwcm9wcy5hYm9ydENyZWF0aW9uLFxuICAgICAgICB9LCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCAmJiB0aGlzLnN0YWNrLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50KTtcbiAgICAgICAgdGhpcy5yZXNvdXJjZSA9IHJvc0Fzc2VydDtcbiAgICAgICAgdGhpcy5hdHRyRmFpbHVyZUNhdXNlID0gcm9zQXNzZXJ0LmF0dHJGYWlsdXJlQ2F1c2U7XG4gICAgICAgIHRoaXMuYXR0clJlc3VsdCA9IHJvc0Fzc2VydC5hdHRyUmVzdWx0O1xuICAgIH1cbn1cbiJdfQ==