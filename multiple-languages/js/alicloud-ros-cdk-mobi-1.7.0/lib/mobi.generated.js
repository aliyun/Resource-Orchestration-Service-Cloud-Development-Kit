"use strict";
// Generated from the AliCloud ROS Resource Specification
Object.defineProperty(exports, "__esModule", { value: true });
exports.RosApp = void 0;
const ros = require("@alicloud/ros-cdk-core");
/**
 * Determine whether the given properties match those of a `RosAppProps`
 *
 * @param properties - the TypeScript properties of a `RosAppProps`
 *
 * @returns the result of the validation.
 */
function RosAppPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('appDescription', ros.validateString)(properties.appDescription));
    errors.collect(ros.propertyValidator('appIcon', ros.requiredValidator)(properties.appIcon));
    errors.collect(ros.propertyValidator('appIcon', ros.validateString)(properties.appIcon));
    errors.collect(ros.propertyValidator('appWorkspaceId', ros.requiredValidator)(properties.appWorkspaceId));
    errors.collect(ros.propertyValidator('appWorkspaceId', ros.validateString)(properties.appWorkspaceId));
    if (properties.appType && (typeof properties.appType) !== 'object') {
        errors.collect(ros.propertyValidator('appType', ros.validateAllowedValues)({
            data: properties.appType,
            allowedValues: ["Web", "Copilot"],
        }));
    }
    errors.collect(ros.propertyValidator('appType', ros.validateString)(properties.appType));
    errors.collect(ros.propertyValidator('appName', ros.requiredValidator)(properties.appName));
    errors.collect(ros.propertyValidator('appName', ros.validateString)(properties.appName));
    errors.collect(ros.propertyValidator('template', ros.requiredValidator)(properties.template));
    errors.collect(ros.propertyValidator('template', RosApp_TemplatePropertyValidator)(properties.template));
    return errors.wrap('supplied properties not correct for "RosAppProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::MOBI::App` resource
 *
 * @param properties - the TypeScript properties of a `RosAppProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::MOBI::App` resource.
 */
// @ts-ignore TS6133
function rosAppPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosAppPropsValidator(properties).assertSuccess();
    }
    return {
        'AppIcon': ros.stringToRosTemplate(properties.appIcon),
        'AppName': ros.stringToRosTemplate(properties.appName),
        'AppWorkspaceId': ros.stringToRosTemplate(properties.appWorkspaceId),
        'Template': rosAppTemplatePropertyToRosTemplate(properties.template),
        'AppDescription': ros.stringToRosTemplate(properties.appDescription),
        'AppType': ros.stringToRosTemplate(properties.appType),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::MOBI::App`, which is used to create an application.
 * @Note This class does not contain additional functions, so it is recommended to use the `App` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-mobi-app
 */
class RosApp extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosApp.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrAppDescription = this.getAtt('AppDescription');
        this.attrAppIcon = this.getAtt('AppIcon');
        this.attrAppId = this.getAtt('AppId');
        this.attrAppName = this.getAtt('AppName');
        this.attrAppType = this.getAtt('AppType');
        this.attrAppWorkspaceId = this.getAtt('AppWorkspaceId');
        this.attrCreateTime = this.getAtt('CreateTime');
        this.attrModifiedTime = this.getAtt('ModifiedTime');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.appIcon = props.appIcon;
        this.appName = props.appName;
        this.appWorkspaceId = props.appWorkspaceId;
        this.template = props.template;
        this.appDescription = props.appDescription;
        this.appType = props.appType;
    }
    get rosProperties() {
        return {
            appIcon: this.appIcon,
            appName: this.appName,
            appWorkspaceId: this.appWorkspaceId,
            template: this.template,
            appDescription: this.appDescription,
            appType: this.appType,
        };
    }
    renderProperties(props) {
        return rosAppPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosApp = RosApp;
/**
 * The resource type name for this resource class.
 */
RosApp.ROS_RESOURCE_TYPE_NAME = "ALIYUN::MOBI::App";
/**
 * Determine whether the given properties match those of a `TemplateProperty`
 *
 * @param properties - the TypeScript properties of a `TemplateProperty`
 *
 * @returns the result of the validation.
 */
function RosApp_TemplatePropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('actualParameters', ros.validateString)(properties.actualParameters));
    errors.collect(ros.propertyValidator('connectionsContent', ros.requiredValidator)(properties.connectionsContent));
    errors.collect(ros.propertyValidator('connectionsContent', ros.validateString)(properties.connectionsContent));
    errors.collect(ros.propertyValidator('templateId', ros.requiredValidator)(properties.templateId));
    errors.collect(ros.propertyValidator('templateId', ros.validateString)(properties.templateId));
    return errors.wrap('supplied properties not correct for "TemplateProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::MOBI::App.Template` resource
 *
 * @param properties - the TypeScript properties of a `TemplateProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::MOBI::App.Template` resource.
 */
// @ts-ignore TS6133
function rosAppTemplatePropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosApp_TemplatePropertyValidator(properties).assertSuccess();
    return {
        'ActualParameters': ros.stringToRosTemplate(properties.actualParameters),
        'ConnectionsContent': ros.stringToRosTemplate(properties.connectionsContent),
        'TemplateId': ros.stringToRosTemplate(properties.templateId),
    };
}
//# sourceMappingURL=data:application/json;base64,