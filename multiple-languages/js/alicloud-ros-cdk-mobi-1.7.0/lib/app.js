"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.App = exports.AppProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const mobi_generated_1 = require("./mobi.generated");
Object.defineProperty(exports, "AppProperty", { enumerable: true, get: function () { return mobi_generated_1.RosApp; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::MOBI::App`, which is used to create an application.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosApp`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-mobi-app
 */
class App extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosApp = new mobi_generated_1.RosApp(this, id, {
            appDescription: props.appDescription,
            appIcon: props.appIcon,
            appWorkspaceId: props.appWorkspaceId,
            appType: props.appType,
            appName: props.appName,
            template: props.template,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosApp;
        this.attrAppDescription = rosApp.attrAppDescription;
        this.attrAppIcon = rosApp.attrAppIcon;
        this.attrAppId = rosApp.attrAppId;
        this.attrAppName = rosApp.attrAppName;
        this.attrAppType = rosApp.attrAppType;
        this.attrAppWorkspaceId = rosApp.attrAppWorkspaceId;
        this.attrCreateTime = rosApp.attrCreateTime;
        this.attrModifiedTime = rosApp.attrModifiedTime;
    }
}
exports.App = App;
//# sourceMappingURL=data:application/json;base64,