"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.JobMonitorRule = exports.JobMonitorRuleProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const dts_generated_1 = require("./dts.generated");
Object.defineProperty(exports, "JobMonitorRuleProperty", { enumerable: true, get: function () { return dts_generated_1.RosJobMonitorRule; } });
/**
 * This class encapsulates and extends the ROS resource type `DATASOURCE::DTS::JobMonitorRule`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosJobMonitorRule`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/datasource-dts-jobmonitorrule
 */
class JobMonitorRule extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosJobMonitorRule = new dts_generated_1.RosJobMonitorRule(this, id, {
            dtsJobId: props.dtsJobId,
            refreshOptions: props.refreshOptions === undefined || props.refreshOptions === null ? 'Never' : props.refreshOptions,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosJobMonitorRule;
        this.attrDelayRuleTime = rosJobMonitorRule.attrDelayRuleTime;
        this.attrDtsJobId = rosJobMonitorRule.attrDtsJobId;
        this.attrPeriod = rosJobMonitorRule.attrPeriod;
        this.attrPhone = rosJobMonitorRule.attrPhone;
        this.attrState = rosJobMonitorRule.attrState;
        this.attrTimes = rosJobMonitorRule.attrTimes;
        this.attrType = rosJobMonitorRule.attrType;
    }
}
exports.JobMonitorRule = JobMonitorRule;
//# sourceMappingURL=data:application/json;base64,