"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UploadMedia = exports.UploadMediaProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ice_generated_1 = require("./ice.generated");
Object.defineProperty(exports, "UploadMediaProperty", { enumerable: true, get: function () { return ice_generated_1.RosUploadMedia; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::ICE::UploadMedia`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosUploadMedia`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-ice-uploadmedia
 */
class UploadMedia extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props = {}, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosUploadMedia = new ice_generated_1.RosUploadMedia(this, id, {
            entityId: props.entityId,
            appId: props.appId,
            fileInfo: props.fileInfo,
            userData: props.userData,
            uploadTargetConfig: props.uploadTargetConfig,
            mediaMetaData: props.mediaMetaData,
            postProcessConfig: props.postProcessConfig,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosUploadMedia;
        this.attrFileUrl = rosUploadMedia.attrFileUrl;
        this.attrMediaId = rosUploadMedia.attrMediaId;
        this.attrMediaUrl = rosUploadMedia.attrMediaUrl;
        this.attrUploadAddress = rosUploadMedia.attrUploadAddress;
        this.attrUploadAuth = rosUploadMedia.attrUploadAuth;
    }
}
exports.UploadMedia = UploadMedia;
//# sourceMappingURL=data:application/json;base64,