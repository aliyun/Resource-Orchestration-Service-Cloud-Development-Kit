"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MediaInfo = exports.MediaInfoProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ice_generated_1 = require("./ice.generated");
Object.defineProperty(exports, "MediaInfoProperty", { enumerable: true, get: function () { return ice_generated_1.RosMediaInfo; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::ICE::MediaInfo`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosMediaInfo`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-ice-mediainfo
 */
class MediaInfo extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosMediaInfo = new ice_generated_1.RosMediaInfo(this, id, {
            registerConfig: props.registerConfig,
            overwrite: props.overwrite,
            description: props.description,
            userData: props.userData,
            businessType: props.businessType,
            title: props.title,
            cateId: props.cateId,
            workflowId: props.workflowId,
            inputUrl: props.inputUrl,
            smartTagTemplateId: props.smartTagTemplateId,
            referenceId: props.referenceId,
            mediaType: props.mediaType,
            coverUrl: props.coverUrl,
            mediaTags: props.mediaTags,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosMediaInfo;
        this.attrMediaId = rosMediaInfo.attrMediaId;
    }
}
exports.MediaInfo = MediaInfo;
//# sourceMappingURL=data:application/json;base64,