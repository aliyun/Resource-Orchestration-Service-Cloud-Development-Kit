"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Order = exports.OrderProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const cas_generated_1 = require("./cas.generated");
Object.defineProperty(exports, "OrderProperty", { enumerable: true, get: function () { return cas_generated_1.RosOrder; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::CAS::Order`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosOrder`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-cas-order
 */
class Order extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosOrder = new cas_generated_1.RosOrder(this, id, {
            domains: props.domains,
            domainCnt: props.domainCnt === undefined || props.domainCnt === null ? 1 : props.domainCnt,
            domainType: props.domainType === undefined || props.domainType === null ? 'one' : props.domainType,
            monitor: props.monitor === undefined || props.monitor === null ? false : props.monitor,
            merge: props.merge === undefined || props.merge === null ? false : props.merge,
            service: props.service === undefined || props.service === null ? 'NoNeed' : props.service,
            period: props.period === undefined || props.period === null ? 1 : props.period,
            certType: props.certType,
            certBrand: props.certBrand,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosOrder;
    }
}
exports.Order = Order;
//# sourceMappingURL=data:application/json;base64,