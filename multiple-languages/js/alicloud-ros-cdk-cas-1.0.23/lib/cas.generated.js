"use strict";
// Generated from the AliCloud ROS Resource Specification
Object.defineProperty(exports, "__esModule", { value: true });
exports.RosSslCertificate = exports.RosOrder = exports.RosCertificate = void 0;
const ros = require("@alicloud/ros-cdk-core");
/**
 * Determine whether the given properties match those of a `RosCertificateProps`
 *
 * @param properties - the TypeScript properties of a `RosCertificateProps`
 *
 * @returns the result of the validation.
 */
function RosCertificatePropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('sourceIp', ros.validateString)(properties.sourceIp));
    errors.collect(ros.propertyValidator('lang', ros.validateString)(properties.lang));
    errors.collect(ros.propertyValidator('cert', ros.requiredValidator)(properties.cert));
    errors.collect(ros.propertyValidator('cert', ros.validateString)(properties.cert));
    errors.collect(ros.propertyValidator('key', ros.requiredValidator)(properties.key));
    errors.collect(ros.propertyValidator('key', ros.validateString)(properties.key));
    errors.collect(ros.propertyValidator('name', ros.requiredValidator)(properties.name));
    errors.collect(ros.propertyValidator('name', ros.validateString)(properties.name));
    return errors.wrap('supplied properties not correct for "RosCertificateProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::CAS::Certificate` resource
 *
 * @param properties - the TypeScript properties of a `RosCertificateProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::CAS::Certificate` resource.
 */
// @ts-ignore TS6133
function rosCertificatePropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosCertificatePropsValidator(properties).assertSuccess();
    }
    return {
        Cert: ros.stringToRosTemplate(properties.cert),
        Key: ros.stringToRosTemplate(properties.key),
        Name: ros.stringToRosTemplate(properties.name),
        Lang: ros.stringToRosTemplate(properties.lang),
        SourceIp: ros.stringToRosTemplate(properties.sourceIp),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::CAS::Certificate`, which is used to add a certificate.
 * @Note This class does not contain additional functions, so it is recommended to use the `Certificate` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-cas-certificate
 */
class RosCertificate extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosCertificate.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrCertId = this.getAtt('CertId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.cert = props.cert;
        this.key = props.key;
        this.name = props.name;
        this.lang = props.lang;
        this.sourceIp = props.sourceIp;
    }
    get rosProperties() {
        return {
            cert: this.cert,
            key: this.key,
            name: this.name,
            lang: this.lang,
            sourceIp: this.sourceIp,
        };
    }
    renderProperties(props) {
        return rosCertificatePropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosCertificate = RosCertificate;
/**
 * The resource type name for this resource class.
 */
RosCertificate.ROS_RESOURCE_TYPE_NAME = "ALIYUN::CAS::Certificate";
/**
 * Determine whether the given properties match those of a `RosOrderProps`
 *
 * @param properties - the TypeScript properties of a `RosOrderProps`
 *
 * @returns the result of the validation.
 */
function RosOrderPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    if (properties.domains && (Array.isArray(properties.domains) || (typeof properties.domains) === 'string')) {
        errors.collect(ros.propertyValidator('domains', ros.validateLength)({
            data: properties.domains.length,
            min: 1,
            max: 500,
        }));
    }
    errors.collect(ros.propertyValidator('domains', ros.listValidator(ros.validateString))(properties.domains));
    if (properties.domainCnt && (typeof properties.domainCnt) !== 'object') {
        errors.collect(ros.propertyValidator('domainCnt', ros.validateRange)({
            data: properties.domainCnt,
            min: 1,
            max: 500,
        }));
    }
    errors.collect(ros.propertyValidator('domainCnt', ros.validateNumber)(properties.domainCnt));
    if (properties.domainType && (typeof properties.domainType) !== 'object') {
        errors.collect(ros.propertyValidator('domainType', ros.validateAllowedValues)({
            data: properties.domainType,
            allowedValues: ["all", "one", "multiple"],
        }));
    }
    errors.collect(ros.propertyValidator('domainType', ros.validateString)(properties.domainType));
    errors.collect(ros.propertyValidator('monitor', ros.validateBoolean)(properties.monitor));
    errors.collect(ros.propertyValidator('merge', ros.validateBoolean)(properties.merge));
    if (properties.service && (typeof properties.service) !== 'object') {
        errors.collect(ros.propertyValidator('service', ros.validateAllowedValues)({
            data: properties.service,
            allowedValues: ["VipProduct", "NoNeed", "ExpeditedProduct", "DeployProduct", "SM2DeployProduct"],
        }));
    }
    errors.collect(ros.propertyValidator('service', ros.validateString)(properties.service));
    if (properties.period && (typeof properties.period) !== 'object') {
        errors.collect(ros.propertyValidator('period', ros.validateRange)({
            data: properties.period,
            min: 1,
            max: 3,
        }));
    }
    errors.collect(ros.propertyValidator('period', ros.validateNumber)(properties.period));
    errors.collect(ros.propertyValidator('certType', ros.requiredValidator)(properties.certType));
    if (properties.certType && (typeof properties.certType) !== 'object') {
        errors.collect(ros.propertyValidator('certType', ros.validateAllowedValues)({
            data: properties.certType,
            allowedValues: ["DV", "OV", "EV"],
        }));
    }
    errors.collect(ros.propertyValidator('certType', ros.validateString)(properties.certType));
    errors.collect(ros.propertyValidator('certBrand', ros.requiredValidator)(properties.certBrand));
    if (properties.certBrand && (typeof properties.certBrand) !== 'object') {
        errors.collect(ros.propertyValidator('certBrand', ros.validateAllowedValues)({
            data: properties.certBrand,
            allowedValues: ["Rapid", "Globalsign", "vTrus", "Wosign", "Digicert", "Digicert pro", "Geotrust", "CFCA"],
        }));
    }
    errors.collect(ros.propertyValidator('certBrand', ros.validateString)(properties.certBrand));
    return errors.wrap('supplied properties not correct for "RosOrderProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::CAS::Order` resource
 *
 * @param properties - the TypeScript properties of a `RosOrderProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::CAS::Order` resource.
 */
// @ts-ignore TS6133
function rosOrderPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosOrderPropsValidator(properties).assertSuccess();
    }
    return {
        CertBrand: ros.stringToRosTemplate(properties.certBrand),
        CertType: ros.stringToRosTemplate(properties.certType),
        DomainCnt: ros.numberToRosTemplate(properties.domainCnt),
        Domains: ros.listMapper(ros.stringToRosTemplate)(properties.domains),
        DomainType: ros.stringToRosTemplate(properties.domainType),
        Merge: ros.booleanToRosTemplate(properties.merge),
        Monitor: ros.booleanToRosTemplate(properties.monitor),
        Period: ros.numberToRosTemplate(properties.period),
        Service: ros.stringToRosTemplate(properties.service),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::CAS::Order`.
 * @Note This class does not contain additional functions, so it is recommended to use the `Order` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-cas-order
 */
class RosOrder extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosOrder.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.certBrand = props.certBrand;
        this.certType = props.certType;
        this.domainCnt = props.domainCnt;
        this.domains = props.domains;
        this.domainType = props.domainType;
        this.merge = props.merge;
        this.monitor = props.monitor;
        this.period = props.period;
        this.service = props.service;
    }
    get rosProperties() {
        return {
            certBrand: this.certBrand,
            certType: this.certType,
            domainCnt: this.domainCnt,
            domains: this.domains,
            domainType: this.domainType,
            merge: this.merge,
            monitor: this.monitor,
            period: this.period,
            service: this.service,
        };
    }
    renderProperties(props) {
        return rosOrderPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosOrder = RosOrder;
/**
 * The resource type name for this resource class.
 */
RosOrder.ROS_RESOURCE_TYPE_NAME = "ALIYUN::CAS::Order";
/**
 * Determine whether the given properties match those of a `RosSslCertificateProps`
 *
 * @param properties - the TypeScript properties of a `RosSslCertificateProps`
 *
 * @returns the result of the validation.
 */
function RosSslCertificatePropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    if (properties.domains && (Array.isArray(properties.domains) || (typeof properties.domains) === 'string')) {
        errors.collect(ros.propertyValidator('domains', ros.validateLength)({
            data: properties.domains.length,
            min: 1,
            max: 5,
        }));
    }
    errors.collect(ros.propertyValidator('domains', ros.listValidator(ros.validateString))(properties.domains));
    errors.collect(ros.propertyValidator('companyName', ros.validateString)(properties.companyName));
    if (properties.domainType && (typeof properties.domainType) !== 'object') {
        errors.collect(ros.propertyValidator('domainType', ros.validateAllowedValues)({
            data: properties.domainType,
            allowedValues: ["all", "one", "multiple"],
        }));
    }
    errors.collect(ros.propertyValidator('domainType', ros.validateString)(properties.domainType));
    errors.collect(ros.propertyValidator('email', ros.validateString)(properties.email));
    errors.collect(ros.propertyValidator('csr', ros.validateString)(properties.csr));
    errors.collect(ros.propertyValidator('username', ros.validateString)(properties.username));
    errors.collect(ros.propertyValidator('productCode', ros.validateString)(properties.productCode));
    errors.collect(ros.propertyValidator('phone', ros.validateString)(properties.phone));
    if (properties.certType && (typeof properties.certType) !== 'object') {
        errors.collect(ros.propertyValidator('certType', ros.validateAllowedValues)({
            data: properties.certType,
            allowedValues: ["DV", "OV", "EV"],
        }));
    }
    errors.collect(ros.propertyValidator('certType', ros.validateString)(properties.certType));
    if (properties.certBrand && (typeof properties.certBrand) !== 'object') {
        errors.collect(ros.propertyValidator('certBrand', ros.validateAllowedValues)({
            data: properties.certBrand,
            allowedValues: ["Rapid", "Globalsign", "vTrus", "Wosign", "Digicert", "Digicert pro", "Geotrust", "CFCA"],
        }));
    }
    errors.collect(ros.propertyValidator('certBrand', ros.validateString)(properties.certBrand));
    if (properties.validateType && (typeof properties.validateType) !== 'object') {
        errors.collect(ros.propertyValidator('validateType', ros.validateAllowedValues)({
            data: properties.validateType,
            allowedValues: ["DNS", "FILE"],
        }));
    }
    errors.collect(ros.propertyValidator('validateType', ros.validateString)(properties.validateType));
    return errors.wrap('supplied properties not correct for "RosSslCertificateProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::CAS::SslCertificate` resource
 *
 * @param properties - the TypeScript properties of a `RosSslCertificateProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::CAS::SslCertificate` resource.
 */
// @ts-ignore TS6133
function rosSslCertificatePropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosSslCertificatePropsValidator(properties).assertSuccess();
    }
    return {
        CertBrand: ros.stringToRosTemplate(properties.certBrand),
        CertType: ros.stringToRosTemplate(properties.certType),
        CompanyName: ros.stringToRosTemplate(properties.companyName),
        Csr: ros.stringToRosTemplate(properties.csr),
        Domains: ros.listMapper(ros.stringToRosTemplate)(properties.domains),
        DomainType: ros.stringToRosTemplate(properties.domainType),
        Email: ros.stringToRosTemplate(properties.email),
        Phone: ros.stringToRosTemplate(properties.phone),
        ProductCode: ros.stringToRosTemplate(properties.productCode),
        Username: ros.stringToRosTemplate(properties.username),
        ValidateType: ros.stringToRosTemplate(properties.validateType),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::CAS::SslCertificate`.
 * @Note This class does not contain additional functions, so it is recommended to use the `SslCertificate` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-cas-sslcertificate
 */
class RosSslCertificate extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosSslCertificate.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrCertificateId = this.getAtt('CertificateId');
        this.attrOrderId = this.getAtt('OrderId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.certBrand = props.certBrand;
        this.certType = props.certType;
        this.companyName = props.companyName;
        this.csr = props.csr;
        this.domains = props.domains;
        this.domainType = props.domainType;
        this.email = props.email;
        this.phone = props.phone;
        this.productCode = props.productCode;
        this.username = props.username;
        this.validateType = props.validateType;
    }
    get rosProperties() {
        return {
            certBrand: this.certBrand,
            certType: this.certType,
            companyName: this.companyName,
            csr: this.csr,
            domains: this.domains,
            domainType: this.domainType,
            email: this.email,
            phone: this.phone,
            productCode: this.productCode,
            username: this.username,
            validateType: this.validateType,
        };
    }
    renderProperties(props) {
        return rosSslCertificatePropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosSslCertificate = RosSslCertificate;
/**
 * The resource type name for this resource class.
 */
RosSslCertificate.ROS_RESOURCE_TYPE_NAME = "ALIYUN::CAS::SslCertificate";
//# sourceMappingURL=data:application/json;base64,