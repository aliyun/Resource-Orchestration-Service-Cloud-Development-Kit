"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AccessConfigurationProvision = exports.AccessConfigurationProvisionProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const cloudsso_generated_1 = require("./cloudsso.generated");
Object.defineProperty(exports, "AccessConfigurationProvisionProperty", { enumerable: true, get: function () { return cloudsso_generated_1.RosAccessConfigurationProvision; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::CloudSSO::AccessConfigurationProvision`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosAccessConfigurationProvision`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-cloudsso-accessconfigurationprovision
 */
class AccessConfigurationProvision extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosAccessConfigurationProvision = new cloudsso_generated_1.RosAccessConfigurationProvision(this, id, {
            directoryId: props.directoryId,
            targetType: props.targetType,
            accessConfigurationId: props.accessConfigurationId,
            targetId: props.targetId,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosAccessConfigurationProvision;
    }
}
exports.AccessConfigurationProvision = AccessConfigurationProvision;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjZXNzY29uZmlndXJhdGlvbnByb3Zpc2lvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImFjY2Vzc2NvbmZpZ3VyYXRpb25wcm92aXNpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsOENBQThDO0FBQzlDLDZEQUF1RTtBQUUzQixxSEFGbkMsb0RBQStCLE9BRXdDO0FBNkJoRjs7OztHQUlHO0FBQ0gsTUFBYSw0QkFBNkIsU0FBUSxHQUFHLENBQUMsUUFBUTtJQU0xRDs7OztPQUlHO0lBQ0gsWUFBWSxLQUFvQixFQUFFLEVBQVUsRUFBRSxLQUF3QyxFQUFFLG1DQUEyQyxJQUFJO1FBQ25JLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDakIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUM7UUFDYixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsZ0NBQWdDLEdBQUcsZ0NBQWdDLENBQUM7UUFFekUsTUFBTSwrQkFBK0IsR0FBRyxJQUFJLG9EQUErQixDQUFDLElBQUksRUFBRSxFQUFFLEVBQUc7WUFDbkYsV0FBVyxFQUFFLEtBQUssQ0FBQyxXQUFXO1lBQzlCLFVBQVUsRUFBRSxLQUFLLENBQUMsVUFBVTtZQUM1QixxQkFBcUIsRUFBRSxLQUFLLENBQUMscUJBQXFCO1lBQ2xELFFBQVEsRUFBRSxLQUFLLENBQUMsUUFBUTtTQUMzQixFQUFFLGdDQUFnQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztRQUNwRixJQUFJLENBQUMsUUFBUSxHQUFHLCtCQUErQixDQUFDO0lBQ3BELENBQUM7Q0FDSjtBQTFCRCxvRUEwQkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyByb3MgZnJvbSAnQGFsaWNsb3VkL3Jvcy1jZGstY29yZSc7XG5pbXBvcnQgeyBSb3NBY2Nlc3NDb25maWd1cmF0aW9uUHJvdmlzaW9uIH0gZnJvbSAnLi9jbG91ZHNzby5nZW5lcmF0ZWQnO1xuLy8gR2VuZXJhdGVkIGZyb20gdGhlIEFsaUNsb3VkIFJPUyBSZXNvdXJjZSBTcGVjaWZpY2F0aW9uXG5leHBvcnQgeyBSb3NBY2Nlc3NDb25maWd1cmF0aW9uUHJvdmlzaW9uIGFzIEFjY2Vzc0NvbmZpZ3VyYXRpb25Qcm92aXNpb25Qcm9wZXJ0eSB9O1xuXG4vKipcbiAqIFByb3BlcnRpZXMgZm9yIGRlZmluaW5nIGEgYEFjY2Vzc0NvbmZpZ3VyYXRpb25Qcm92aXNpb25gLlxuICogU2VlIGh0dHBzOi8vd3d3LmFsaWJhYmFjbG91ZC5jb20vaGVscC9yb3MvZGV2ZWxvcGVyLXJlZmVyZW5jZS9hbGl5dW4tY2xvdWRzc28tYWNjZXNzY29uZmlndXJhdGlvbnByb3Zpc2lvblxuICovXG5leHBvcnQgaW50ZXJmYWNlIEFjY2Vzc0NvbmZpZ3VyYXRpb25Qcm92aXNpb25Qcm9wcyB7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBhY2Nlc3NDb25maWd1cmF0aW9uSWQ6IFRoZSBJRCBvZiB0aGUgYWNjZXNzIGNvbmZpZ3VyYXRpb24uXG4gICAgICovXG4gICAgcmVhZG9ubHkgYWNjZXNzQ29uZmlndXJhdGlvbklkOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBkaXJlY3RvcnlJZDogVGhlIElEIG9mIHRoZSBkaXJlY3RvcnkuXG4gICAgICovXG4gICAgcmVhZG9ubHkgZGlyZWN0b3J5SWQ6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHRhcmdldElkOiBUaGUgSUQgb2YgdGhlIHRhc2sgb2JqZWN0LlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHRhcmdldElkOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSB0YXJnZXRUeXBlOiBUaGUgdHlwZSBvZiB0aGUgdGFzayBvYmplY3QuIFNldCB0aGUgdmFsdWUgdG8gUkQtQWNjb3VudCwgd2hpY2ggc3BlY2lmaWVzIHRoZSBhY2NvdW50cyBpbiB0aGUgcmVzb3VyY2UgZGlyZWN0b3J5LlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHRhcmdldFR5cGU6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcbn1cblxuLyoqXG4gKiBUaGlzIGNsYXNzIGVuY2Fwc3VsYXRlcyBhbmQgZXh0ZW5kcyB0aGUgUk9TIHJlc291cmNlIHR5cGUgYEFMSVlVTjo6Q2xvdWRTU086OkFjY2Vzc0NvbmZpZ3VyYXRpb25Qcm92aXNpb25gLlxuICogQE5vdGUgVGhpcyBjbGFzcyBtYXkgaGF2ZSBzb21lIG5ldyBmdW5jdGlvbnMgdG8gZmFjaWxpdGF0ZSBkZXZlbG9wbWVudCwgc28gaXQgaXMgcmVjb21tZW5kZWQgdG8gdXNlIHRoaXMgY2xhc3MgaW5zdGVhZCBvZiBgUm9zQWNjZXNzQ29uZmlndXJhdGlvblByb3Zpc2lvbmBmb3IgYSBtb3JlIGNvbnZlbmllbnQgZGV2ZWxvcG1lbnQgZXhwZXJpZW5jZS5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvYWxpeXVuLWNsb3Vkc3NvLWFjY2Vzc2NvbmZpZ3VyYXRpb25wcm92aXNpb25cbiAqL1xuZXhwb3J0IGNsYXNzIEFjY2Vzc0NvbmZpZ3VyYXRpb25Qcm92aXNpb24gZXh0ZW5kcyByb3MuUmVzb3VyY2Uge1xuICAgIHByb3RlY3RlZCBzY29wZTogcm9zLkNvbnN0cnVjdDtcbiAgICBwcm90ZWN0ZWQgaWQ6IHN0cmluZztcbiAgICBwcm90ZWN0ZWQgcHJvcHM6IEFjY2Vzc0NvbmZpZ3VyYXRpb25Qcm92aXNpb25Qcm9wcztcbiAgICBwcm90ZWN0ZWQgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6IGJvb2xlYW47XG5cbiAgICAvKipcbiAgICAgKiBQYXJhbSBzY29wZSAtIHNjb3BlIGluIHdoaWNoIHRoaXMgcmVzb3VyY2UgaXMgZGVmaW5lZFxuICAgICAqIFBhcmFtIGlkICAgIC0gc2NvcGVkIGlkIG9mIHRoZSByZXNvdXJjZVxuICAgICAqIFBhcmFtIHByb3BzIC0gcmVzb3VyY2UgcHJvcGVydGllc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiByb3MuQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogQWNjZXNzQ29uZmlndXJhdGlvblByb3Zpc2lvblByb3BzLCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDpib29sZWFuID0gdHJ1ZSkge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQpO1xuICAgICAgICB0aGlzLnNjb3BlID0gc2NvcGU7XG4gICAgICAgIHRoaXMuaWQgPSBpZDtcbiAgICAgICAgdGhpcy5wcm9wcyA9IHByb3BzO1xuICAgICAgICB0aGlzLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ID0gZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ7XG5cbiAgICAgICAgY29uc3Qgcm9zQWNjZXNzQ29uZmlndXJhdGlvblByb3Zpc2lvbiA9IG5ldyBSb3NBY2Nlc3NDb25maWd1cmF0aW9uUHJvdmlzaW9uKHRoaXMsIGlkLCAge1xuICAgICAgICAgICAgZGlyZWN0b3J5SWQ6IHByb3BzLmRpcmVjdG9yeUlkLFxuICAgICAgICAgICAgdGFyZ2V0VHlwZTogcHJvcHMudGFyZ2V0VHlwZSxcbiAgICAgICAgICAgIGFjY2Vzc0NvbmZpZ3VyYXRpb25JZDogcHJvcHMuYWNjZXNzQ29uZmlndXJhdGlvbklkLFxuICAgICAgICAgICAgdGFyZ2V0SWQ6IHByb3BzLnRhcmdldElkLFxuICAgICAgICB9LCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCAmJiB0aGlzLnN0YWNrLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50KTtcbiAgICAgICAgdGhpcy5yZXNvdXJjZSA9IHJvc0FjY2Vzc0NvbmZpZ3VyYXRpb25Qcm92aXNpb247XG4gICAgfVxufVxuIl19