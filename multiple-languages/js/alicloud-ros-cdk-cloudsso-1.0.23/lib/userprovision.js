"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserProvision = exports.UserProvisionProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const cloudsso_generated_1 = require("./cloudsso.generated");
Object.defineProperty(exports, "UserProvisionProperty", { enumerable: true, get: function () { return cloudsso_generated_1.RosUserProvision; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::CloudSSO::UserProvision`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosUserProvision`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-cloudsso-userprovision
 */
class UserProvision extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosUserProvision = new cloudsso_generated_1.RosUserProvision(this, id, {
            description: props.description,
            directoryId: props.directoryId,
            principalId: props.principalId,
            targetType: props.targetType,
            duplicationStrategy: props.duplicationStrategy,
            deletionStrategy: props.deletionStrategy,
            principalType: props.principalType,
            targetId: props.targetId,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosUserProvision;
        this.attrUserProvisionId = rosUserProvision.attrUserProvisionId;
    }
}
exports.UserProvision = UserProvision;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlcnByb3Zpc2lvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInVzZXJwcm92aXNpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsOENBQThDO0FBQzlDLDZEQUF3RDtBQUUzQixzR0FGcEIscUNBQWdCLE9BRXlCO0FBeURsRDs7OztHQUlHO0FBQ0gsTUFBYSxhQUFjLFNBQVEsR0FBRyxDQUFDLFFBQVE7SUFXM0M7Ozs7T0FJRztJQUNILFlBQVksS0FBb0IsRUFBRSxFQUFVLEVBQUUsS0FBeUIsRUFBRSxtQ0FBMkMsSUFBSTtRQUNwSCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ2pCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQ2IsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLGdDQUFnQyxHQUFHLGdDQUFnQyxDQUFDO1FBRXpFLE1BQU0sZ0JBQWdCLEdBQUcsSUFBSSxxQ0FBZ0IsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFHO1lBQ3JELFdBQVcsRUFBRSxLQUFLLENBQUMsV0FBVztZQUM5QixXQUFXLEVBQUUsS0FBSyxDQUFDLFdBQVc7WUFDOUIsV0FBVyxFQUFFLEtBQUssQ0FBQyxXQUFXO1lBQzlCLFVBQVUsRUFBRSxLQUFLLENBQUMsVUFBVTtZQUM1QixtQkFBbUIsRUFBRSxLQUFLLENBQUMsbUJBQW1CO1lBQzlDLGdCQUFnQixFQUFFLEtBQUssQ0FBQyxnQkFBZ0I7WUFDeEMsYUFBYSxFQUFFLEtBQUssQ0FBQyxhQUFhO1lBQ2xDLFFBQVEsRUFBRSxLQUFLLENBQUMsUUFBUTtTQUMzQixFQUFFLGdDQUFnQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztRQUNwRixJQUFJLENBQUMsUUFBUSxHQUFHLGdCQUFnQixDQUFDO1FBQ2pDLElBQUksQ0FBQyxtQkFBbUIsR0FBRyxnQkFBZ0IsQ0FBQyxtQkFBbUIsQ0FBQztJQUNwRSxDQUFDO0NBQ0o7QUFwQ0Qsc0NBb0NDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcm9zIGZyb20gJ0BhbGljbG91ZC9yb3MtY2RrLWNvcmUnO1xuaW1wb3J0IHsgUm9zVXNlclByb3Zpc2lvbiB9IGZyb20gJy4vY2xvdWRzc28uZ2VuZXJhdGVkJztcbi8vIEdlbmVyYXRlZCBmcm9tIHRoZSBBbGlDbG91ZCBST1MgUmVzb3VyY2UgU3BlY2lmaWNhdGlvblxuZXhwb3J0IHsgUm9zVXNlclByb3Zpc2lvbiBhcyBVc2VyUHJvdmlzaW9uUHJvcGVydHkgfTtcblxuLyoqXG4gKiBQcm9wZXJ0aWVzIGZvciBkZWZpbmluZyBhIGBVc2VyUHJvdmlzaW9uYC5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvYWxpeXVuLWNsb3Vkc3NvLXVzZXJwcm92aXNpb25cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBVc2VyUHJvdmlzaW9uUHJvcHMge1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgZGVsZXRpb25TdHJhdGVneTogRGVsZXRlIHBvbGljeS4gVGhlIHRyZWF0bWVudCBzdHJhdGVneSBmb3IgdGhlIHN5bmNocm9uaXplZCBSQU0gdXNlcnMgd2hlbiB0aGUgUkFNIHVzZXIgc3luY2hyb25pemF0aW9uIGlzIHJlbW92ZWQuIFZhbGlkIHZhbHVlczpcbiAgICAgKiAtIERlbGV0ZTogRGVsZXRlIFdoZW4gdGhlIFJBTSB1c2VyIHN5bmNocm9uaXphdGlvbiBpcyByZW1vdmVkLCB0aGUgUkFNIHVzZXJzIHRoYXQgaGF2ZSBiZWVuIHN5bmNocm9uaXplZCB0byB0aGUgUkFNIGZyb20gdGhlIGNsb3VkIFNTTyBhcmUgZGVsZXRlZC5cbiAgICAgKiAtIEtlZXA6IFdoZW4gdGhlIFJBTSB1c2VyIHN5bmNocm9uaXphdGlvbiBpcyByZW1vdmVkLCB0aGUgUkFNIHVzZXJzIHRoYXQgaGF2ZSBiZWVuIHN5bmNocm9uaXplZCB0byB0aGUgUkFNIGZyb20gdGhlIGNsb3VkIFNTTyBhcmUgcmV0YWluZWQuXG4gICAgICovXG4gICAgcmVhZG9ubHkgZGVsZXRpb25TdHJhdGVneTogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgZGlyZWN0b3J5SWQ6IFRoZSBJRCBvZiB0aGUgZGlyZWN0b3J5LlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGRpcmVjdG9yeUlkOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBkdXBsaWNhdGlvblN0cmF0ZWd5OiBDb25mbGljdCBwb2xpY3kuIFdoZW4gdGhlIGNsb3VkIFNTTyB1c2VyIGlzIHN5bmNocm9uaXplZCB0byB0aGUgUkFNLCB0aGUgcHJvY2Vzc2luZyBzdHJhdGVneSBpZiB0aGVyZSBpcyBhIHVzZXIgd2l0aCB0aGUgc2FtZSBuYW1lIGluIHRoZSBSQU0uIFZhbGlkIHZhbHVlczpcbiAgICAgKiAtIEtlZXBCb3RoOiBLZWVwIGJvdGggb2YgdGhlbS4gV2hlbiB0aGUgY2xvdWQgU1NPIHVzZXIgaXMgc3luY2hyb25pemVkIHRvIFJBTSwgaWYgdGhlIFJBTSBhbHJlYWR5IGhhcyBhIHVzZXIgd2l0aCB0aGUgc2FtZSBuYW1lLCBpdCB3aWxsIHRyeSB0byBjcmVhdGUgYSBSQU0gdXNlciB3aXRoIHRoZSB1c2VyIG5hbWUgYWZ0ZXIgYWRkaW5nIHRoZSBzdWZmaXggX3NzbyB0byB0aGUgdXNlciBuYW1lIG9mIHRoZSBjbG91ZCBTU08gdXNlci5cbiAgICAgKiAtIFRha2VPdmVyOiBUYWtlIG92ZXIuIFdoZW4gdGhlIGNsb3VkIFNTTyB1c2VyIGlzIHN5bmNocm9uaXplZCB0byB0aGUgUkFNLCBpZiB0aGUgUkFNIGFscmVhZHkgaGFzIGEgdXNlciB3aXRoIHRoZSBzYW1lIG5hbWUsIHRoZSBleGlzdGluZyBSQU0gdXNlciBpcyBkaXJlY3RseSByZXBsYWNlZCBieSB0aGUgY2xvdWQgU1NPIHN5bmNocm9uaXphdGlvbiB1c2VyLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGR1cGxpY2F0aW9uU3RyYXRlZ3k6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHByaW5jaXBhbElkOiBUaGUgSUQgb2YgdGhlIHByaW5jaXBhbC4gVmFsaWQgdmFsdWVzOlxuICAgICAqIC0gV2hlbiB0aGUgUHJpbmNpcGFsVHlwZSB2YWx1ZSBpcyBHcm91cCwgdGhlIHZhbHVlIGlzIHRoZSBjbG91ZCBTU08gdXNlciBncm91cCBJRCAoZy0qKioqKioqKikuXG4gICAgICogLSBXaGVuIFByaW5jaXBhbFR5cGUgdGFrZXMgdGhlIHZhbHVlIFVzZXIsIHRoaXMgdmFsdWUgaXMgdGhlIGNsb3VkIFNTTyB1c2VyIElEICh1LSoqKioqKioqKS5cbiAgICAgKi9cbiAgICByZWFkb25seSBwcmluY2lwYWxJZDogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgcHJpbmNpcGFsVHlwZTogVGhlIHR5cGUgb2YgdGhlIHByaW5jaXBhbC4gVmFsaWQgdmFsdWVzOlxuICAgICAqIC0gVXNlcjogVGhlIHByaW5jaXBhbCBpcyBhIGNsb3VkIFNTTyB1c2VyLlxuICAgICAqIC0gR3JvdXA6IFRoZSBwcmluY2lwYWwgaXMgYSBjbG91ZCBTU08gZ3JvdXAuXG4gICAgICovXG4gICAgcmVhZG9ubHkgcHJpbmNpcGFsVHlwZTogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgdGFyZ2V0SWQ6IFRhcmdldCBJRCBmb3IgUkFNIHVzZXIgc3luY2hyb25pemF0aW9uLiBDdXJyZW50bHksIGl0IGlzIHRoZSBSRCBhY2NvdW50IElELlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHRhcmdldElkOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSB0YXJnZXRUeXBlOiBUYXJnZXQgdHlwZSBmb3IgUkFNIHVzZXIgc3luY2hyb25pemF0aW9uLiBDdXJyZW50bHksIGl0IGlzIFJELUFjY291bnQuXG4gICAgICovXG4gICAgcmVhZG9ubHkgdGFyZ2V0VHlwZTogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgZGVzY3JpcHRpb246IFRoZSBkZXNjcmlwdGlvbiBvZiB0aGUgdXNlci5cbiAgICAgKi9cbiAgICByZWFkb25seSBkZXNjcmlwdGlvbj86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcbn1cblxuLyoqXG4gKiBUaGlzIGNsYXNzIGVuY2Fwc3VsYXRlcyBhbmQgZXh0ZW5kcyB0aGUgUk9TIHJlc291cmNlIHR5cGUgYEFMSVlVTjo6Q2xvdWRTU086OlVzZXJQcm92aXNpb25gLlxuICogQE5vdGUgVGhpcyBjbGFzcyBtYXkgaGF2ZSBzb21lIG5ldyBmdW5jdGlvbnMgdG8gZmFjaWxpdGF0ZSBkZXZlbG9wbWVudCwgc28gaXQgaXMgcmVjb21tZW5kZWQgdG8gdXNlIHRoaXMgY2xhc3MgaW5zdGVhZCBvZiBgUm9zVXNlclByb3Zpc2lvbmBmb3IgYSBtb3JlIGNvbnZlbmllbnQgZGV2ZWxvcG1lbnQgZXhwZXJpZW5jZS5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvYWxpeXVuLWNsb3Vkc3NvLXVzZXJwcm92aXNpb25cbiAqL1xuZXhwb3J0IGNsYXNzIFVzZXJQcm92aXNpb24gZXh0ZW5kcyByb3MuUmVzb3VyY2Uge1xuICAgIHByb3RlY3RlZCBzY29wZTogcm9zLkNvbnN0cnVjdDtcbiAgICBwcm90ZWN0ZWQgaWQ6IHN0cmluZztcbiAgICBwcm90ZWN0ZWQgcHJvcHM6IFVzZXJQcm92aXNpb25Qcm9wcztcbiAgICBwcm90ZWN0ZWQgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6IGJvb2xlYW47XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgVXNlclByb3Zpc2lvbklkOiBUaGUgSUQgb2YgdGhlIHVzZXIgcHJvdmlzaW9uaW5nLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyVXNlclByb3Zpc2lvbklkOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQYXJhbSBzY29wZSAtIHNjb3BlIGluIHdoaWNoIHRoaXMgcmVzb3VyY2UgaXMgZGVmaW5lZFxuICAgICAqIFBhcmFtIGlkICAgIC0gc2NvcGVkIGlkIG9mIHRoZSByZXNvdXJjZVxuICAgICAqIFBhcmFtIHByb3BzIC0gcmVzb3VyY2UgcHJvcGVydGllc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiByb3MuQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogVXNlclByb3Zpc2lvblByb3BzLCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDpib29sZWFuID0gdHJ1ZSkge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQpO1xuICAgICAgICB0aGlzLnNjb3BlID0gc2NvcGU7XG4gICAgICAgIHRoaXMuaWQgPSBpZDtcbiAgICAgICAgdGhpcy5wcm9wcyA9IHByb3BzO1xuICAgICAgICB0aGlzLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ID0gZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ7XG5cbiAgICAgICAgY29uc3Qgcm9zVXNlclByb3Zpc2lvbiA9IG5ldyBSb3NVc2VyUHJvdmlzaW9uKHRoaXMsIGlkLCAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IHByb3BzLmRlc2NyaXB0aW9uLFxuICAgICAgICAgICAgZGlyZWN0b3J5SWQ6IHByb3BzLmRpcmVjdG9yeUlkLFxuICAgICAgICAgICAgcHJpbmNpcGFsSWQ6IHByb3BzLnByaW5jaXBhbElkLFxuICAgICAgICAgICAgdGFyZ2V0VHlwZTogcHJvcHMudGFyZ2V0VHlwZSxcbiAgICAgICAgICAgIGR1cGxpY2F0aW9uU3RyYXRlZ3k6IHByb3BzLmR1cGxpY2F0aW9uU3RyYXRlZ3ksXG4gICAgICAgICAgICBkZWxldGlvblN0cmF0ZWd5OiBwcm9wcy5kZWxldGlvblN0cmF0ZWd5LFxuICAgICAgICAgICAgcHJpbmNpcGFsVHlwZTogcHJvcHMucHJpbmNpcGFsVHlwZSxcbiAgICAgICAgICAgIHRhcmdldElkOiBwcm9wcy50YXJnZXRJZCxcbiAgICAgICAgfSwgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgJiYgdGhpcy5zdGFjay5lbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCk7XG4gICAgICAgIHRoaXMucmVzb3VyY2UgPSByb3NVc2VyUHJvdmlzaW9uO1xuICAgICAgICB0aGlzLmF0dHJVc2VyUHJvdmlzaW9uSWQgPSByb3NVc2VyUHJvdmlzaW9uLmF0dHJVc2VyUHJvdmlzaW9uSWQ7XG4gICAgfVxufVxuIl19