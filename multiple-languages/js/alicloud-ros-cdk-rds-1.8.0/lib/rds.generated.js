"use strict";
// Generated from the AliCloud ROS Resource Specification
Object.defineProperty(exports, "__esModule", { value: true });
exports.RosReadOnlyDBInstance = exports.RosPrepayDBInstance = exports.RosPostgresExtensions = exports.RosMigrateTask = exports.RosDatabase = exports.RosDBInstanceSecurityIps = exports.RosDBInstanceParameterGroup = exports.RosDBInstanceClone = exports.RosDBInstance = exports.RosConnection = exports.RosAccountPrivilege = exports.RosAccount = exports.RosADInfo = void 0;
const ros = require("@alicloud/ros-cdk-core");
/**
 * Determine whether the given properties match those of a `RosADInfoProps`
 *
 * @param properties - the TypeScript properties of a `RosADInfoProps`
 *
 * @returns the result of the validation.
 */
function RosADInfoPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('adServerIpAddress', ros.requiredValidator)(properties.adServerIpAddress));
    errors.collect(ros.propertyValidator('adServerIpAddress', ros.validateString)(properties.adServerIpAddress));
    errors.collect(ros.propertyValidator('addns', ros.requiredValidator)(properties.addns));
    errors.collect(ros.propertyValidator('addns', ros.validateString)(properties.addns));
    errors.collect(ros.propertyValidator('dbInstanceId', ros.requiredValidator)(properties.dbInstanceId));
    errors.collect(ros.propertyValidator('dbInstanceId', ros.validateString)(properties.dbInstanceId));
    errors.collect(ros.propertyValidator('adPassword', ros.requiredValidator)(properties.adPassword));
    errors.collect(ros.propertyValidator('adPassword', ros.validateString)(properties.adPassword));
    errors.collect(ros.propertyValidator('adAccountName', ros.requiredValidator)(properties.adAccountName));
    errors.collect(ros.propertyValidator('adAccountName', ros.validateString)(properties.adAccountName));
    return errors.wrap('supplied properties not correct for "RosADInfoProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::RDS::ADInfo` resource
 *
 * @param properties - the TypeScript properties of a `RosADInfoProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::RDS::ADInfo` resource.
 */
// @ts-ignore TS6133
function rosADInfoPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosADInfoPropsValidator(properties).assertSuccess();
    }
    return {
        'ADAccountName': ros.stringToRosTemplate(properties.adAccountName),
        'ADDNS': ros.stringToRosTemplate(properties.addns),
        'ADPassword': ros.stringToRosTemplate(properties.adPassword),
        'ADServerIpAddress': ros.stringToRosTemplate(properties.adServerIpAddress),
        'DBInstanceId': ros.stringToRosTemplate(properties.dbInstanceId),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::RDS::ADInfo`.
 * @Note This class does not contain additional functions, so it is recommended to use the `ADInfo` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-rds-adinfo
 */
class RosADInfo extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosADInfo.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrAddns = this.getAtt('ADDNS');
        this.attrDbInstanceId = this.getAtt('DBInstanceId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.adAccountName = props.adAccountName;
        this.addns = props.addns;
        this.adPassword = props.adPassword;
        this.adServerIpAddress = props.adServerIpAddress;
        this.dbInstanceId = props.dbInstanceId;
    }
    get rosProperties() {
        return {
            adAccountName: this.adAccountName,
            addns: this.addns,
            adPassword: this.adPassword,
            adServerIpAddress: this.adServerIpAddress,
            dbInstanceId: this.dbInstanceId,
        };
    }
    renderProperties(props) {
        return rosADInfoPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosADInfo = RosADInfo;
/**
 * The resource type name for this resource class.
 */
RosADInfo.ROS_RESOURCE_TYPE_NAME = "ALIYUN::RDS::ADInfo";
/**
 * Determine whether the given properties match those of a `RosAccountProps`
 *
 * @param properties - the TypeScript properties of a `RosAccountProps`
 *
 * @returns the result of the validation.
 */
function RosAccountPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('accountDescription', ros.validateString)(properties.accountDescription));
    errors.collect(ros.propertyValidator('dbInstanceId', ros.requiredValidator)(properties.dbInstanceId));
    errors.collect(ros.propertyValidator('dbInstanceId', ros.validateString)(properties.dbInstanceId));
    if (properties.accountType && (typeof properties.accountType) !== 'object') {
        errors.collect(ros.propertyValidator('accountType', ros.validateAllowedValues)({
            data: properties.accountType,
            allowedValues: ["Normal", "Super", "Sysadmin"],
        }));
    }
    errors.collect(ros.propertyValidator('accountType', ros.validateString)(properties.accountType));
    errors.collect(ros.propertyValidator('accountPassword', ros.requiredValidator)(properties.accountPassword));
    if (properties.accountPassword && (Array.isArray(properties.accountPassword) || (typeof properties.accountPassword) === 'string')) {
        errors.collect(ros.propertyValidator('accountPassword', ros.validateLength)({
            data: properties.accountPassword.length,
            min: 8,
            max: 32,
        }));
    }
    errors.collect(ros.propertyValidator('accountPassword', ros.validateString)(properties.accountPassword));
    errors.collect(ros.propertyValidator('accountName', ros.requiredValidator)(properties.accountName));
    errors.collect(ros.propertyValidator('accountName', ros.validateString)(properties.accountName));
    return errors.wrap('supplied properties not correct for "RosAccountProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::RDS::Account` resource
 *
 * @param properties - the TypeScript properties of a `RosAccountProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::RDS::Account` resource.
 */
// @ts-ignore TS6133
function rosAccountPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosAccountPropsValidator(properties).assertSuccess();
    }
    return {
        'AccountName': ros.stringToRosTemplate(properties.accountName),
        'AccountPassword': ros.stringToRosTemplate(properties.accountPassword),
        'DBInstanceId': ros.stringToRosTemplate(properties.dbInstanceId),
        'AccountDescription': ros.stringToRosTemplate(properties.accountDescription),
        'AccountType': ros.stringToRosTemplate(properties.accountType),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::RDS::Account`.
 * @Note This class does not contain additional functions, so it is recommended to use the `Account` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-rds-account
 */
class RosAccount extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosAccount.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrAccountName = this.getAtt('AccountName');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.accountName = props.accountName;
        this.accountPassword = props.accountPassword;
        this.dbInstanceId = props.dbInstanceId;
        this.accountDescription = props.accountDescription;
        this.accountType = props.accountType;
    }
    get rosProperties() {
        return {
            accountName: this.accountName,
            accountPassword: this.accountPassword,
            dbInstanceId: this.dbInstanceId,
            accountDescription: this.accountDescription,
            accountType: this.accountType,
        };
    }
    renderProperties(props) {
        return rosAccountPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosAccount = RosAccount;
/**
 * The resource type name for this resource class.
 */
RosAccount.ROS_RESOURCE_TYPE_NAME = "ALIYUN::RDS::Account";
/**
 * Determine whether the given properties match those of a `RosAccountPrivilegeProps`
 *
 * @param properties - the TypeScript properties of a `RosAccountPrivilegeProps`
 *
 * @returns the result of the validation.
 */
function RosAccountPrivilegePropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('accountPrivilege', ros.requiredValidator)(properties.accountPrivilege));
    errors.collect(ros.propertyValidator('accountPrivilege', ros.validateString)(properties.accountPrivilege));
    errors.collect(ros.propertyValidator('dbInstanceId', ros.requiredValidator)(properties.dbInstanceId));
    errors.collect(ros.propertyValidator('dbInstanceId', ros.validateString)(properties.dbInstanceId));
    errors.collect(ros.propertyValidator('dbName', ros.requiredValidator)(properties.dbName));
    errors.collect(ros.propertyValidator('dbName', ros.validateString)(properties.dbName));
    errors.collect(ros.propertyValidator('accountName', ros.requiredValidator)(properties.accountName));
    errors.collect(ros.propertyValidator('accountName', ros.validateString)(properties.accountName));
    return errors.wrap('supplied properties not correct for "RosAccountPrivilegeProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::RDS::AccountPrivilege` resource
 *
 * @param properties - the TypeScript properties of a `RosAccountPrivilegeProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::RDS::AccountPrivilege` resource.
 */
// @ts-ignore TS6133
function rosAccountPrivilegePropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosAccountPrivilegePropsValidator(properties).assertSuccess();
    }
    return {
        'AccountName': ros.stringToRosTemplate(properties.accountName),
        'AccountPrivilege': ros.stringToRosTemplate(properties.accountPrivilege),
        'DBInstanceId': ros.stringToRosTemplate(properties.dbInstanceId),
        'DBName': ros.stringToRosTemplate(properties.dbName),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::RDS::AccountPrivilege`.
 * @Note This class does not contain additional functions, so it is recommended to use the `AccountPrivilege` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-rds-accountprivilege
 */
class RosAccountPrivilege extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosAccountPrivilege.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.accountName = props.accountName;
        this.accountPrivilege = props.accountPrivilege;
        this.dbInstanceId = props.dbInstanceId;
        this.dbName = props.dbName;
    }
    get rosProperties() {
        return {
            accountName: this.accountName,
            accountPrivilege: this.accountPrivilege,
            dbInstanceId: this.dbInstanceId,
            dbName: this.dbName,
        };
    }
    renderProperties(props) {
        return rosAccountPrivilegePropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosAccountPrivilege = RosAccountPrivilege;
/**
 * The resource type name for this resource class.
 */
RosAccountPrivilege.ROS_RESOURCE_TYPE_NAME = "ALIYUN::RDS::AccountPrivilege";
/**
 * Determine whether the given properties match those of a `RosConnectionProps`
 *
 * @param properties - the TypeScript properties of a `RosConnectionProps`
 *
 * @returns the result of the validation.
 */
function RosConnectionPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('dbInstanceId', ros.requiredValidator)(properties.dbInstanceId));
    errors.collect(ros.propertyValidator('dbInstanceId', ros.validateString)(properties.dbInstanceId));
    errors.collect(ros.propertyValidator('port', ros.requiredValidator)(properties.port));
    if (properties.port && (typeof properties.port) !== 'object') {
        errors.collect(ros.propertyValidator('port', ros.validateRange)({
            data: properties.port,
            min: 1,
            max: 65535,
        }));
    }
    errors.collect(ros.propertyValidator('port', ros.validateNumber)(properties.port));
    errors.collect(ros.propertyValidator('babelfishPort', ros.validateString)(properties.babelfishPort));
    if (properties.connectionStringPrefix && (typeof properties.connectionStringPrefix) !== 'object') {
        errors.collect(ros.propertyValidator('connectionStringPrefix', ros.validateAllowedPattern)({
            data: properties.connectionStringPrefix,
            reg: /[a-zA-Z0-9-]{5,40}/
        }));
    }
    errors.collect(ros.propertyValidator('connectionStringPrefix', ros.validateString)(properties.connectionStringPrefix));
    errors.collect(ros.propertyValidator('generalGroupName', ros.validateString)(properties.generalGroupName));
    return errors.wrap('supplied properties not correct for "RosConnectionProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::RDS::Connection` resource
 *
 * @param properties - the TypeScript properties of a `RosConnectionProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::RDS::Connection` resource.
 */
// @ts-ignore TS6133
function rosConnectionPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosConnectionPropsValidator(properties).assertSuccess();
    }
    return {
        'DBInstanceId': ros.stringToRosTemplate(properties.dbInstanceId),
        'Port': ros.numberToRosTemplate(properties.port),
        'BabelfishPort': ros.stringToRosTemplate(properties.babelfishPort),
        'ConnectionStringPrefix': ros.stringToRosTemplate(properties.connectionStringPrefix),
        'GeneralGroupName': ros.stringToRosTemplate(properties.generalGroupName),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::RDS::Connection`, which is used to apply for a public endpoint.
 * @Note This class does not contain additional functions, so it is recommended to use the `Connection` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-rds-connection
 */
class RosConnection extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosConnection.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrBabelfishPort = this.getAtt('BabelfishPort');
        this.attrConnectionString = this.getAtt('ConnectionString');
        this.attrDbInstanceId = this.getAtt('DBInstanceId');
        this.attrPort = this.getAtt('Port');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.dbInstanceId = props.dbInstanceId;
        this.port = props.port;
        this.babelfishPort = props.babelfishPort;
        this.connectionStringPrefix = props.connectionStringPrefix;
        this.generalGroupName = props.generalGroupName;
    }
    get rosProperties() {
        return {
            dbInstanceId: this.dbInstanceId,
            port: this.port,
            babelfishPort: this.babelfishPort,
            connectionStringPrefix: this.connectionStringPrefix,
            generalGroupName: this.generalGroupName,
        };
    }
    renderProperties(props) {
        return rosConnectionPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosConnection = RosConnection;
/**
 * The resource type name for this resource class.
 */
RosConnection.ROS_RESOURCE_TYPE_NAME = "ALIYUN::RDS::Connection";
/**
 * Determine whether the given properties match those of a `RosDBInstanceProps`
 *
 * @param properties - the TypeScript properties of a `RosDBInstanceProps`
 *
 * @returns the result of the validation.
 */
function RosDBInstancePropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    if (properties.periodType && (typeof properties.periodType) !== 'object') {
        errors.collect(ros.propertyValidator('periodType', ros.validateAllowedValues)({
            data: properties.periodType,
            allowedValues: ["Month", "Year"],
        }));
    }
    errors.collect(ros.propertyValidator('periodType', ros.validateString)(properties.periodType));
    errors.collect(ros.propertyValidator('resourceGroupId', ros.validateString)(properties.resourceGroupId));
    if (properties.archiveBackupRetentionPeriod && (typeof properties.archiveBackupRetentionPeriod) !== 'object') {
        errors.collect(ros.propertyValidator('archiveBackupRetentionPeriod', ros.validateRange)({
            data: properties.archiveBackupRetentionPeriod,
            min: 30,
            max: 1095,
        }));
    }
    errors.collect(ros.propertyValidator('archiveBackupRetentionPeriod', ros.validateNumber)(properties.archiveBackupRetentionPeriod));
    errors.collect(ros.propertyValidator('dbTimeZone', ros.validateString)(properties.dbTimeZone));
    if (properties.port && (typeof properties.port) !== 'object') {
        errors.collect(ros.propertyValidator('port', ros.validateRange)({
            data: properties.port,
            min: 1,
            max: 65535,
        }));
    }
    errors.collect(ros.propertyValidator('port', ros.validateNumber)(properties.port));
    errors.collect(ros.propertyValidator('storageThreshold', ros.validateNumber)(properties.storageThreshold));
    if (properties.storageAutoScale && (typeof properties.storageAutoScale) !== 'object') {
        errors.collect(ros.propertyValidator('storageAutoScale', ros.validateAllowedValues)({
            data: properties.storageAutoScale,
            allowedValues: ["Disable", "Enable"],
        }));
    }
    errors.collect(ros.propertyValidator('storageAutoScale', ros.validateString)(properties.storageAutoScale));
    errors.collect(ros.propertyValidator('instanceNetworkType', ros.validateString)(properties.instanceNetworkType));
    if (properties.archiveBackupKeepCount && (typeof properties.archiveBackupKeepCount) !== 'object') {
        errors.collect(ros.propertyValidator('archiveBackupKeepCount', ros.validateRange)({
            data: properties.archiveBackupKeepCount,
            min: 1,
            max: 31,
        }));
    }
    errors.collect(ros.propertyValidator('archiveBackupKeepCount', ros.validateNumber)(properties.archiveBackupKeepCount));
    if (properties.logBackupRetentionPeriod && (typeof properties.logBackupRetentionPeriod) !== 'object') {
        errors.collect(ros.propertyValidator('logBackupRetentionPeriod', ros.validateRange)({
            data: properties.logBackupRetentionPeriod,
            min: 7,
            max: 730,
        }));
    }
    errors.collect(ros.propertyValidator('logBackupRetentionPeriod', ros.validateNumber)(properties.logBackupRetentionPeriod));
    errors.collect(ros.propertyValidator('dbInstanceStorage', ros.requiredValidator)(properties.dbInstanceStorage));
    errors.collect(ros.propertyValidator('dbInstanceStorage', ros.validateNumber)(properties.dbInstanceStorage));
    errors.collect(ros.propertyValidator('dbMappings', ros.listValidator(RosDBInstance_DBMappingsPropertyValidator))(properties.dbMappings));
    if (properties.connectionStringPrefix && (typeof properties.connectionStringPrefix) !== 'object') {
        errors.collect(ros.propertyValidator('connectionStringPrefix', ros.validateAllowedPattern)({
            data: properties.connectionStringPrefix,
            reg: /[a-zA-Z0-9-]{8,64}/
        }));
    }
    errors.collect(ros.propertyValidator('connectionStringPrefix', ros.validateString)(properties.connectionStringPrefix));
    errors.collect(ros.propertyValidator('multiAz', ros.validateBoolean)(properties.multiAz));
    errors.collect(ros.propertyValidator('tags', ros.hashValidator(ros.validateAny))(properties.tags));
    errors.collect(ros.propertyValidator('engine', ros.requiredValidator)(properties.engine));
    if (properties.engine && (typeof properties.engine) !== 'object') {
        errors.collect(ros.propertyValidator('engine', ros.validateAllowedValues)({
            data: properties.engine,
            allowedValues: ["MySQL", "SQLServer", "PostgreSQL", "PPAS", "MariaDB"],
        }));
    }
    errors.collect(ros.propertyValidator('engine', ros.validateString)(properties.engine));
    errors.collect(ros.propertyValidator('dbInstanceDescription', ros.validateString)(properties.dbInstanceDescription));
    if (properties.ioAccelerationEnabled && (typeof properties.ioAccelerationEnabled) !== 'object') {
        errors.collect(ros.propertyValidator('ioAccelerationEnabled', ros.validateAllowedValues)({
            data: properties.ioAccelerationEnabled,
            allowedValues: ["0", "1"],
        }));
    }
    errors.collect(ros.propertyValidator('ioAccelerationEnabled', ros.validateString)(properties.ioAccelerationEnabled));
    errors.collect(ros.propertyValidator('targetDedicatedHostIdForMaster', ros.validateString)(properties.targetDedicatedHostIdForMaster));
    errors.collect(ros.propertyValidator('engineVersion', ros.requiredValidator)(properties.engineVersion));
    if (properties.engineVersion && (Array.isArray(properties.engineVersion) || (typeof properties.engineVersion) === 'string')) {
        errors.collect(ros.propertyValidator('engineVersion', ros.validateLength)({
            data: properties.engineVersion.length,
            min: 1,
            max: 16,
        }));
    }
    errors.collect(ros.propertyValidator('engineVersion', ros.validateString)(properties.engineVersion));
    errors.collect(ros.propertyValidator('dbInstanceClass', ros.requiredValidator)(properties.dbInstanceClass));
    if (properties.dbInstanceClass && (Array.isArray(properties.dbInstanceClass) || (typeof properties.dbInstanceClass) === 'string')) {
        errors.collect(ros.propertyValidator('dbInstanceClass', ros.validateLength)({
            data: properties.dbInstanceClass.length,
            min: 1,
            max: 64,
        }));
    }
    errors.collect(ros.propertyValidator('dbInstanceClass', ros.validateString)(properties.dbInstanceClass));
    if (properties.archiveBackupKeepPolicy && (typeof properties.archiveBackupKeepPolicy) !== 'object') {
        errors.collect(ros.propertyValidator('archiveBackupKeepPolicy', ros.validateAllowedValues)({
            data: properties.archiveBackupKeepPolicy,
            allowedValues: ["ByMonth", "ByWeek", "KeepAll"],
        }));
    }
    errors.collect(ros.propertyValidator('archiveBackupKeepPolicy', ros.validateString)(properties.archiveBackupKeepPolicy));
    if (properties.backupPolicyMode && (typeof properties.backupPolicyMode) !== 'object') {
        errors.collect(ros.propertyValidator('backupPolicyMode', ros.validateAllowedValues)({
            data: properties.backupPolicyMode,
            allowedValues: ["DataBackupPolicy", "LogBackupPolicy"],
        }));
    }
    errors.collect(ros.propertyValidator('backupPolicyMode', ros.validateString)(properties.backupPolicyMode));
    errors.collect(ros.propertyValidator('vSwitchId', ros.validateString)(properties.vSwitchId));
    if (properties.period && (typeof properties.period) !== 'object') {
        errors.collect(ros.propertyValidator('period', ros.validateAllowedValues)({
            data: properties.period,
            allowedValues: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 24, 36, 48, 60],
        }));
    }
    errors.collect(ros.propertyValidator('period', ros.validateNumber)(properties.period));
    if (properties.localLogRetentionHours && (typeof properties.localLogRetentionHours) !== 'object') {
        errors.collect(ros.propertyValidator('localLogRetentionHours', ros.validateRange)({
            data: properties.localLogRetentionHours,
            min: 0,
            max: 168,
        }));
    }
    errors.collect(ros.propertyValidator('localLogRetentionHours', ros.validateNumber)(properties.localLogRetentionHours));
    errors.collect(ros.propertyValidator('deletionProtection', ros.validateBoolean)(properties.deletionProtection));
    if (properties.payType && (typeof properties.payType) !== 'object') {
        errors.collect(ros.propertyValidator('payType', ros.validateAllowedValues)({
            data: properties.payType,
            allowedValues: ["PayAsYouGo", "PostPaid", "PayOnDemand", "Postpaid", "PostPay", "Postpay", "POSTPAY", "POST", "Subscription", "PrePaid", "Prepaid", "PrePay", "Prepay", "PREPAY", "PRE", "Serverless"],
        }));
    }
    errors.collect(ros.propertyValidator('payType', ros.validateString)(properties.payType));
    if (properties.highSpaceUsageProtection && (typeof properties.highSpaceUsageProtection) !== 'object') {
        errors.collect(ros.propertyValidator('highSpaceUsageProtection', ros.validateAllowedValues)({
            data: properties.highSpaceUsageProtection,
            allowedValues: ["Enable", "Disable"],
        }));
    }
    errors.collect(ros.propertyValidator('highSpaceUsageProtection', ros.validateString)(properties.highSpaceUsageProtection));
    errors.collect(ros.propertyValidator('roleArn', ros.validateString)(properties.roleArn));
    if (properties.masterUserPassword && (Array.isArray(properties.masterUserPassword) || (typeof properties.masterUserPassword) === 'string')) {
        errors.collect(ros.propertyValidator('masterUserPassword', ros.validateLength)({
            data: properties.masterUserPassword.length,
            min: 8,
            max: 32,
        }));
    }
    errors.collect(ros.propertyValidator('masterUserPassword', ros.validateString)(properties.masterUserPassword));
    errors.collect(ros.propertyValidator('vpcId', ros.validateString)(properties.vpcId));
    if (properties.sslSetting && (typeof properties.sslSetting) !== 'object') {
        errors.collect(ros.propertyValidator('sslSetting', ros.validateAllowedValues)({
            data: properties.sslSetting,
            allowedValues: ["Disabled", "EnabledForPublicConnection", "EnabledForInnerConnection"],
        }));
    }
    errors.collect(ros.propertyValidator('sslSetting', ros.validateString)(properties.sslSetting));
    errors.collect(ros.propertyValidator('masterUsername', ros.validateString)(properties.masterUsername));
    errors.collect(ros.propertyValidator('connectionMode', ros.validateString)(properties.connectionMode));
    if (properties.localLogRetentionSpace && (typeof properties.localLogRetentionSpace) !== 'object') {
        errors.collect(ros.propertyValidator('localLogRetentionSpace', ros.validateRange)({
            data: properties.localLogRetentionSpace,
            min: 0,
            max: 50,
        }));
    }
    errors.collect(ros.propertyValidator('localLogRetentionSpace', ros.validateNumber)(properties.localLogRetentionSpace));
    errors.collect(ros.propertyValidator('storageUpperBound', ros.validateNumber)(properties.storageUpperBound));
    errors.collect(ros.propertyValidator('category', ros.validateString)(properties.category));
    errors.collect(ros.propertyValidator('privateIpAddress', ros.validateString)(properties.privateIpAddress));
    errors.collect(ros.propertyValidator('targetDedicatedHostIdForSlave', ros.validateString)(properties.targetDedicatedHostIdForSlave));
    if (properties.dbInstanceNetType && (typeof properties.dbInstanceNetType) !== 'object') {
        errors.collect(ros.propertyValidator('dbInstanceNetType', ros.validateAllowedValues)({
            data: properties.dbInstanceNetType,
            allowedValues: ["Internet", "Intranet"],
        }));
    }
    errors.collect(ros.propertyValidator('dbInstanceNetType', ros.validateString)(properties.dbInstanceNetType));
    if (properties.releasedKeepPolicy && (typeof properties.releasedKeepPolicy) !== 'object') {
        errors.collect(ros.propertyValidator('releasedKeepPolicy', ros.validateAllowedValues)({
            data: properties.releasedKeepPolicy,
            allowedValues: ["Lastest", "All"],
        }));
    }
    errors.collect(ros.propertyValidator('releasedKeepPolicy', ros.validateString)(properties.releasedKeepPolicy));
    errors.collect(ros.propertyValidator('dedicatedHostGroupId', ros.validateString)(properties.dedicatedHostGroupId));
    errors.collect(ros.propertyValidator('autoRenew', ros.validateBoolean)(properties.autoRenew));
    errors.collect(ros.propertyValidator('encryptionKey', ros.validateString)(properties.encryptionKey));
    errors.collect(ros.propertyValidator('preferredBackupPeriod', ros.listValidator(ros.validateString))(properties.preferredBackupPeriod));
    if (properties.logBackupLocalRetentionNumber && (typeof properties.logBackupLocalRetentionNumber) !== 'object') {
        errors.collect(ros.propertyValidator('logBackupLocalRetentionNumber', ros.validateRange)({
            data: properties.logBackupLocalRetentionNumber,
            min: 6,
            max: 100,
        }));
    }
    errors.collect(ros.propertyValidator('logBackupLocalRetentionNumber', ros.validateNumber)(properties.logBackupLocalRetentionNumber));
    if (properties.slaveZoneIds && (Array.isArray(properties.slaveZoneIds) || (typeof properties.slaveZoneIds) === 'string')) {
        errors.collect(ros.propertyValidator('slaveZoneIds', ros.validateLength)({
            data: properties.slaveZoneIds.length,
            min: undefined,
            max: 2,
        }));
    }
    errors.collect(ros.propertyValidator('slaveZoneIds', ros.listValidator(ros.validateString))(properties.slaveZoneIds));
    errors.collect(ros.propertyValidator('securityIpList', ros.requiredValidator)(properties.securityIpList));
    errors.collect(ros.propertyValidator('securityIpList', ros.validateString)(properties.securityIpList));
    if (properties.dbIsIgnoreCase && (typeof properties.dbIsIgnoreCase) !== 'object') {
        errors.collect(ros.propertyValidator('dbIsIgnoreCase', ros.validateAllowedValues)({
            data: properties.dbIsIgnoreCase,
            allowedValues: [0, 1],
        }));
    }
    errors.collect(ros.propertyValidator('dbIsIgnoreCase', ros.validateNumber)(properties.dbIsIgnoreCase));
    errors.collect(ros.propertyValidator('maintainTime', ros.validateString)(properties.maintainTime));
    errors.collect(ros.propertyValidator('dbParamGroupId', ros.validateString)(properties.dbParamGroupId));
    errors.collect(ros.propertyValidator('burstingEnabled', ros.validateBoolean)(properties.burstingEnabled));
    errors.collect(ros.propertyValidator('coldDataEnabled', ros.validateBoolean)(properties.coldDataEnabled));
    errors.collect(ros.propertyValidator('zoneId', ros.validateString)(properties.zoneId));
    errors.collect(ros.propertyValidator('targetDedicatedHostIdForLog', ros.validateString)(properties.targetDedicatedHostIdForLog));
    errors.collect(ros.propertyValidator('allocatePublicConnection', ros.validateBoolean)(properties.allocatePublicConnection));
    errors.collect(ros.propertyValidator('securityGroupId', ros.validateString)(properties.securityGroupId));
    errors.collect(ros.propertyValidator('preferredBackupTime', ros.validateString)(properties.preferredBackupTime));
    errors.collect(ros.propertyValidator('dbInstanceStorageType', ros.validateString)(properties.dbInstanceStorageType));
    if (properties.backUpCategory && (typeof properties.backUpCategory) !== 'object') {
        errors.collect(ros.propertyValidator('backUpCategory', ros.validateAllowedValues)({
            data: properties.backUpCategory,
            allowedValues: ["Flash", "Standard"],
        }));
    }
    errors.collect(ros.propertyValidator('backUpCategory', ros.validateString)(properties.backUpCategory));
    errors.collect(ros.propertyValidator('compressType', ros.validateNumber)(properties.compressType));
    errors.collect(ros.propertyValidator('logBackupFrequency', ros.validateString)(properties.logBackupFrequency));
    if (properties.connectionStringType && (typeof properties.connectionStringType) !== 'object') {
        errors.collect(ros.propertyValidator('connectionStringType', ros.validateAllowedValues)({
            data: properties.connectionStringType,
            allowedValues: ["Inner", "Public"],
        }));
    }
    errors.collect(ros.propertyValidator('connectionStringType', ros.validateString)(properties.connectionStringType));
    if (properties.masterUserType && (typeof properties.masterUserType) !== 'object') {
        errors.collect(ros.propertyValidator('masterUserType', ros.validateAllowedValues)({
            data: properties.masterUserType,
            allowedValues: ["Normal", "Super", "Sysadmin"],
        }));
    }
    errors.collect(ros.propertyValidator('masterUserType', ros.validateString)(properties.masterUserType));
    errors.collect(ros.propertyValidator('serverlessConfig', RosDBInstance_ServerlessConfigPropertyValidator)(properties.serverlessConfig));
    errors.collect(ros.propertyValidator('enableBackupLog', ros.validateBoolean)(properties.enableBackupLog));
    if (properties.sqlCollectorStatus && (typeof properties.sqlCollectorStatus) !== 'object') {
        errors.collect(ros.propertyValidator('sqlCollectorStatus', ros.validateAllowedValues)({
            data: properties.sqlCollectorStatus,
            allowedValues: ["Enable", "Disabled"],
        }));
    }
    errors.collect(ros.propertyValidator('sqlCollectorStatus', ros.validateString)(properties.sqlCollectorStatus));
    errors.collect(ros.propertyValidator('backupRetentionPeriod', ros.validateNumber)(properties.backupRetentionPeriod));
    return errors.wrap('supplied properties not correct for "RosDBInstanceProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::RDS::DBInstance` resource
 *
 * @param properties - the TypeScript properties of a `RosDBInstanceProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::RDS::DBInstance` resource.
 */
// @ts-ignore TS6133
function rosDBInstancePropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosDBInstancePropsValidator(properties).assertSuccess();
    }
    return {
        'DBInstanceClass': ros.stringToRosTemplate(properties.dbInstanceClass),
        'DBInstanceStorage': ros.numberToRosTemplate(properties.dbInstanceStorage),
        'Engine': ros.stringToRosTemplate(properties.engine),
        'EngineVersion': ros.stringToRosTemplate(properties.engineVersion),
        'SecurityIPList': ros.stringToRosTemplate(properties.securityIpList),
        'AllocatePublicConnection': ros.booleanToRosTemplate(properties.allocatePublicConnection),
        'ArchiveBackupKeepCount': ros.numberToRosTemplate(properties.archiveBackupKeepCount),
        'ArchiveBackupKeepPolicy': ros.stringToRosTemplate(properties.archiveBackupKeepPolicy),
        'ArchiveBackupRetentionPeriod': ros.numberToRosTemplate(properties.archiveBackupRetentionPeriod),
        'AutoRenew': ros.booleanToRosTemplate(properties.autoRenew),
        'BackUpCategory': ros.stringToRosTemplate(properties.backUpCategory),
        'BackupPolicyMode': ros.stringToRosTemplate(properties.backupPolicyMode),
        'BackupRetentionPeriod': ros.numberToRosTemplate(properties.backupRetentionPeriod),
        'BurstingEnabled': ros.booleanToRosTemplate(properties.burstingEnabled),
        'Category': ros.stringToRosTemplate(properties.category),
        'ColdDataEnabled': ros.booleanToRosTemplate(properties.coldDataEnabled),
        'CompressType': ros.numberToRosTemplate(properties.compressType),
        'ConnectionMode': ros.stringToRosTemplate(properties.connectionMode),
        'ConnectionStringPrefix': ros.stringToRosTemplate(properties.connectionStringPrefix),
        'ConnectionStringType': ros.stringToRosTemplate(properties.connectionStringType),
        'DBInstanceDescription': ros.stringToRosTemplate(properties.dbInstanceDescription),
        'DBInstanceNetType': ros.stringToRosTemplate(properties.dbInstanceNetType),
        'DBInstanceStorageType': ros.stringToRosTemplate(properties.dbInstanceStorageType),
        'DBIsIgnoreCase': ros.numberToRosTemplate(properties.dbIsIgnoreCase),
        'DBMappings': ros.listMapper(rosDBInstanceDBMappingsPropertyToRosTemplate)(properties.dbMappings),
        'DBParamGroupId': ros.stringToRosTemplate(properties.dbParamGroupId),
        'DBTimeZone': ros.stringToRosTemplate(properties.dbTimeZone),
        'DedicatedHostGroupId': ros.stringToRosTemplate(properties.dedicatedHostGroupId),
        'DeletionProtection': ros.booleanToRosTemplate(properties.deletionProtection),
        'EnableBackupLog': ros.booleanToRosTemplate(properties.enableBackupLog),
        'EncryptionKey': ros.stringToRosTemplate(properties.encryptionKey),
        'HighSpaceUsageProtection': ros.stringToRosTemplate(properties.highSpaceUsageProtection),
        'InstanceNetworkType': ros.stringToRosTemplate(properties.instanceNetworkType),
        'IoAccelerationEnabled': ros.stringToRosTemplate(properties.ioAccelerationEnabled),
        'LocalLogRetentionHours': ros.numberToRosTemplate(properties.localLogRetentionHours),
        'LocalLogRetentionSpace': ros.numberToRosTemplate(properties.localLogRetentionSpace),
        'LogBackupFrequency': ros.stringToRosTemplate(properties.logBackupFrequency),
        'LogBackupLocalRetentionNumber': ros.numberToRosTemplate(properties.logBackupLocalRetentionNumber),
        'LogBackupRetentionPeriod': ros.numberToRosTemplate(properties.logBackupRetentionPeriod),
        'MaintainTime': ros.stringToRosTemplate(properties.maintainTime),
        'MasterUsername': ros.stringToRosTemplate(properties.masterUsername),
        'MasterUserPassword': ros.stringToRosTemplate(properties.masterUserPassword),
        'MasterUserType': ros.stringToRosTemplate(properties.masterUserType),
        'MultiAZ': ros.booleanToRosTemplate(properties.multiAz),
        'PayType': ros.stringToRosTemplate(properties.payType),
        'Period': ros.numberToRosTemplate(properties.period),
        'PeriodType': ros.stringToRosTemplate(properties.periodType),
        'Port': ros.numberToRosTemplate(properties.port),
        'PreferredBackupPeriod': ros.listMapper(ros.stringToRosTemplate)(properties.preferredBackupPeriod),
        'PreferredBackupTime': ros.stringToRosTemplate(properties.preferredBackupTime),
        'PrivateIpAddress': ros.stringToRosTemplate(properties.privateIpAddress),
        'ReleasedKeepPolicy': ros.stringToRosTemplate(properties.releasedKeepPolicy),
        'ResourceGroupId': ros.stringToRosTemplate(properties.resourceGroupId),
        'RoleARN': ros.stringToRosTemplate(properties.roleArn),
        'SecurityGroupId': ros.stringToRosTemplate(properties.securityGroupId),
        'ServerlessConfig': rosDBInstanceServerlessConfigPropertyToRosTemplate(properties.serverlessConfig),
        'SlaveZoneIds': ros.listMapper(ros.stringToRosTemplate)(properties.slaveZoneIds),
        'SQLCollectorStatus': ros.stringToRosTemplate(properties.sqlCollectorStatus),
        'SSLSetting': ros.stringToRosTemplate(properties.sslSetting),
        'StorageAutoScale': ros.stringToRosTemplate(properties.storageAutoScale),
        'StorageThreshold': ros.numberToRosTemplate(properties.storageThreshold),
        'StorageUpperBound': ros.numberToRosTemplate(properties.storageUpperBound),
        'Tags': ros.hashMapper(ros.objectToRosTemplate)(properties.tags),
        'TargetDedicatedHostIdForLog': ros.stringToRosTemplate(properties.targetDedicatedHostIdForLog),
        'TargetDedicatedHostIdForMaster': ros.stringToRosTemplate(properties.targetDedicatedHostIdForMaster),
        'TargetDedicatedHostIdForSlave': ros.stringToRosTemplate(properties.targetDedicatedHostIdForSlave),
        'VpcId': ros.stringToRosTemplate(properties.vpcId),
        'VSwitchId': ros.stringToRosTemplate(properties.vSwitchId),
        'ZoneId': ros.stringToRosTemplate(properties.zoneId),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::RDS::DBInstance`.
 * @Note This class does not contain additional functions, so it is recommended to use the `DBInstance` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-rds-dbinstance
 */
class RosDBInstance extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosDBInstance.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrDbInstanceId = this.getAtt('DBInstanceId');
        this.attrInnerConnectionString = this.getAtt('InnerConnectionString');
        this.attrInnerIpAddress = this.getAtt('InnerIPAddress');
        this.attrInnerPort = this.getAtt('InnerPort');
        this.attrPublicConnectionString = this.getAtt('PublicConnectionString');
        this.attrPublicIpAddress = this.getAtt('PublicIPAddress');
        this.attrPublicPort = this.getAtt('PublicPort');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.dbInstanceClass = props.dbInstanceClass;
        this.dbInstanceStorage = props.dbInstanceStorage;
        this.engine = props.engine;
        this.engineVersion = props.engineVersion;
        this.securityIpList = props.securityIpList;
        this.allocatePublicConnection = props.allocatePublicConnection;
        this.archiveBackupKeepCount = props.archiveBackupKeepCount;
        this.archiveBackupKeepPolicy = props.archiveBackupKeepPolicy;
        this.archiveBackupRetentionPeriod = props.archiveBackupRetentionPeriod;
        this.autoRenew = props.autoRenew;
        this.backUpCategory = props.backUpCategory;
        this.backupPolicyMode = props.backupPolicyMode;
        this.backupRetentionPeriod = props.backupRetentionPeriod;
        this.burstingEnabled = props.burstingEnabled;
        this.category = props.category;
        this.coldDataEnabled = props.coldDataEnabled;
        this.compressType = props.compressType;
        this.connectionMode = props.connectionMode;
        this.connectionStringPrefix = props.connectionStringPrefix;
        this.connectionStringType = props.connectionStringType;
        this.dbInstanceDescription = props.dbInstanceDescription;
        this.dbInstanceNetType = props.dbInstanceNetType;
        this.dbInstanceStorageType = props.dbInstanceStorageType;
        this.dbIsIgnoreCase = props.dbIsIgnoreCase;
        this.dbMappings = props.dbMappings;
        this.dbParamGroupId = props.dbParamGroupId;
        this.dbTimeZone = props.dbTimeZone;
        this.dedicatedHostGroupId = props.dedicatedHostGroupId;
        this.deletionProtection = props.deletionProtection;
        this.enableBackupLog = props.enableBackupLog;
        this.encryptionKey = props.encryptionKey;
        this.highSpaceUsageProtection = props.highSpaceUsageProtection;
        this.instanceNetworkType = props.instanceNetworkType;
        this.ioAccelerationEnabled = props.ioAccelerationEnabled;
        this.localLogRetentionHours = props.localLogRetentionHours;
        this.localLogRetentionSpace = props.localLogRetentionSpace;
        this.logBackupFrequency = props.logBackupFrequency;
        this.logBackupLocalRetentionNumber = props.logBackupLocalRetentionNumber;
        this.logBackupRetentionPeriod = props.logBackupRetentionPeriod;
        this.maintainTime = props.maintainTime;
        this.masterUsername = props.masterUsername;
        this.masterUserPassword = props.masterUserPassword;
        this.masterUserType = props.masterUserType;
        this.multiAz = props.multiAz;
        this.payType = props.payType;
        this.period = props.period;
        this.periodType = props.periodType;
        this.port = props.port;
        this.preferredBackupPeriod = props.preferredBackupPeriod;
        this.preferredBackupTime = props.preferredBackupTime;
        this.privateIpAddress = props.privateIpAddress;
        this.releasedKeepPolicy = props.releasedKeepPolicy;
        this.resourceGroupId = props.resourceGroupId;
        this.roleArn = props.roleArn;
        this.securityGroupId = props.securityGroupId;
        this.serverlessConfig = props.serverlessConfig;
        this.slaveZoneIds = props.slaveZoneIds;
        this.sqlCollectorStatus = props.sqlCollectorStatus;
        this.sslSetting = props.sslSetting;
        this.storageAutoScale = props.storageAutoScale;
        this.storageThreshold = props.storageThreshold;
        this.storageUpperBound = props.storageUpperBound;
        this.tags = props.tags;
        this.targetDedicatedHostIdForLog = props.targetDedicatedHostIdForLog;
        this.targetDedicatedHostIdForMaster = props.targetDedicatedHostIdForMaster;
        this.targetDedicatedHostIdForSlave = props.targetDedicatedHostIdForSlave;
        this.vpcId = props.vpcId;
        this.vSwitchId = props.vSwitchId;
        this.zoneId = props.zoneId;
    }
    get rosProperties() {
        return {
            dbInstanceClass: this.dbInstanceClass,
            dbInstanceStorage: this.dbInstanceStorage,
            engine: this.engine,
            engineVersion: this.engineVersion,
            securityIpList: this.securityIpList,
            allocatePublicConnection: this.allocatePublicConnection,
            archiveBackupKeepCount: this.archiveBackupKeepCount,
            archiveBackupKeepPolicy: this.archiveBackupKeepPolicy,
            archiveBackupRetentionPeriod: this.archiveBackupRetentionPeriod,
            autoRenew: this.autoRenew,
            backUpCategory: this.backUpCategory,
            backupPolicyMode: this.backupPolicyMode,
            backupRetentionPeriod: this.backupRetentionPeriod,
            burstingEnabled: this.burstingEnabled,
            category: this.category,
            coldDataEnabled: this.coldDataEnabled,
            compressType: this.compressType,
            connectionMode: this.connectionMode,
            connectionStringPrefix: this.connectionStringPrefix,
            connectionStringType: this.connectionStringType,
            dbInstanceDescription: this.dbInstanceDescription,
            dbInstanceNetType: this.dbInstanceNetType,
            dbInstanceStorageType: this.dbInstanceStorageType,
            dbIsIgnoreCase: this.dbIsIgnoreCase,
            dbMappings: this.dbMappings,
            dbParamGroupId: this.dbParamGroupId,
            dbTimeZone: this.dbTimeZone,
            dedicatedHostGroupId: this.dedicatedHostGroupId,
            deletionProtection: this.deletionProtection,
            enableBackupLog: this.enableBackupLog,
            encryptionKey: this.encryptionKey,
            highSpaceUsageProtection: this.highSpaceUsageProtection,
            instanceNetworkType: this.instanceNetworkType,
            ioAccelerationEnabled: this.ioAccelerationEnabled,
            localLogRetentionHours: this.localLogRetentionHours,
            localLogRetentionSpace: this.localLogRetentionSpace,
            logBackupFrequency: this.logBackupFrequency,
            logBackupLocalRetentionNumber: this.logBackupLocalRetentionNumber,
            logBackupRetentionPeriod: this.logBackupRetentionPeriod,
            maintainTime: this.maintainTime,
            masterUsername: this.masterUsername,
            masterUserPassword: this.masterUserPassword,
            masterUserType: this.masterUserType,
            multiAz: this.multiAz,
            payType: this.payType,
            period: this.period,
            periodType: this.periodType,
            port: this.port,
            preferredBackupPeriod: this.preferredBackupPeriod,
            preferredBackupTime: this.preferredBackupTime,
            privateIpAddress: this.privateIpAddress,
            releasedKeepPolicy: this.releasedKeepPolicy,
            resourceGroupId: this.resourceGroupId,
            roleArn: this.roleArn,
            securityGroupId: this.securityGroupId,
            serverlessConfig: this.serverlessConfig,
            slaveZoneIds: this.slaveZoneIds,
            sqlCollectorStatus: this.sqlCollectorStatus,
            sslSetting: this.sslSetting,
            storageAutoScale: this.storageAutoScale,
            storageThreshold: this.storageThreshold,
            storageUpperBound: this.storageUpperBound,
            tags: this.tags,
            targetDedicatedHostIdForLog: this.targetDedicatedHostIdForLog,
            targetDedicatedHostIdForMaster: this.targetDedicatedHostIdForMaster,
            targetDedicatedHostIdForSlave: this.targetDedicatedHostIdForSlave,
            vpcId: this.vpcId,
            vSwitchId: this.vSwitchId,
            zoneId: this.zoneId,
        };
    }
    renderProperties(props) {
        return rosDBInstancePropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosDBInstance = RosDBInstance;
/**
 * The resource type name for this resource class.
 */
RosDBInstance.ROS_RESOURCE_TYPE_NAME = "ALIYUN::RDS::DBInstance";
/**
 * Determine whether the given properties match those of a `DBMappingsProperty`
 *
 * @param properties - the TypeScript properties of a `DBMappingsProperty`
 *
 * @returns the result of the validation.
 */
function RosDBInstance_DBMappingsPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('characterSetName', ros.requiredValidator)(properties.characterSetName));
    errors.collect(ros.propertyValidator('characterSetName', ros.validateString)(properties.characterSetName));
    if (properties.dbDescription && (Array.isArray(properties.dbDescription) || (typeof properties.dbDescription) === 'string')) {
        errors.collect(ros.propertyValidator('dbDescription', ros.validateLength)({
            data: properties.dbDescription.length,
            min: undefined,
            max: 256,
        }));
    }
    errors.collect(ros.propertyValidator('dbDescription', ros.validateString)(properties.dbDescription));
    errors.collect(ros.propertyValidator('dbName', ros.requiredValidator)(properties.dbName));
    errors.collect(ros.propertyValidator('dbName', ros.validateString)(properties.dbName));
    return errors.wrap('supplied properties not correct for "DBMappingsProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::RDS::DBInstance.DBMappings` resource
 *
 * @param properties - the TypeScript properties of a `DBMappingsProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::RDS::DBInstance.DBMappings` resource.
 */
// @ts-ignore TS6133
function rosDBInstanceDBMappingsPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosDBInstance_DBMappingsPropertyValidator(properties).assertSuccess();
    return {
        'CharacterSetName': ros.stringToRosTemplate(properties.characterSetName),
        'DBDescription': ros.stringToRosTemplate(properties.dbDescription),
        'DBName': ros.stringToRosTemplate(properties.dbName),
    };
}
/**
 * Determine whether the given properties match those of a `ServerlessConfigProperty`
 *
 * @param properties - the TypeScript properties of a `ServerlessConfigProperty`
 *
 * @returns the result of the validation.
 */
function RosDBInstance_ServerlessConfigPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('switchForce', ros.validateBoolean)(properties.switchForce));
    errors.collect(ros.propertyValidator('minCapacity', ros.requiredValidator)(properties.minCapacity));
    if (properties.minCapacity && (typeof properties.minCapacity) !== 'object') {
        errors.collect(ros.propertyValidator('minCapacity', ros.validateRange)({
            data: properties.minCapacity,
            min: 0.5,
            max: 8,
        }));
    }
    errors.collect(ros.propertyValidator('minCapacity', ros.validateNumber)(properties.minCapacity));
    errors.collect(ros.propertyValidator('autoPause', ros.validateBoolean)(properties.autoPause));
    errors.collect(ros.propertyValidator('maxCapacity', ros.requiredValidator)(properties.maxCapacity));
    if (properties.maxCapacity && (typeof properties.maxCapacity) !== 'object') {
        errors.collect(ros.propertyValidator('maxCapacity', ros.validateRange)({
            data: properties.maxCapacity,
            min: 0.5,
            max: 8,
        }));
    }
    errors.collect(ros.propertyValidator('maxCapacity', ros.validateNumber)(properties.maxCapacity));
    return errors.wrap('supplied properties not correct for "ServerlessConfigProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::RDS::DBInstance.ServerlessConfig` resource
 *
 * @param properties - the TypeScript properties of a `ServerlessConfigProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::RDS::DBInstance.ServerlessConfig` resource.
 */
// @ts-ignore TS6133
function rosDBInstanceServerlessConfigPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosDBInstance_ServerlessConfigPropertyValidator(properties).assertSuccess();
    return {
        'SwitchForce': ros.booleanToRosTemplate(properties.switchForce),
        'MinCapacity': ros.numberToRosTemplate(properties.minCapacity),
        'AutoPause': ros.booleanToRosTemplate(properties.autoPause),
        'MaxCapacity': ros.numberToRosTemplate(properties.maxCapacity),
    };
}
/**
 * Determine whether the given properties match those of a `RosDBInstanceCloneProps`
 *
 * @param properties - the TypeScript properties of a `RosDBInstanceCloneProps`
 *
 * @returns the result of the validation.
 */
function RosDBInstanceClonePropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    if (properties.periodType && (typeof properties.periodType) !== 'object') {
        errors.collect(ros.propertyValidator('periodType', ros.validateAllowedValues)({
            data: properties.periodType,
            allowedValues: ["Month", "Year"],
        }));
    }
    errors.collect(ros.propertyValidator('periodType', ros.validateString)(properties.periodType));
    errors.collect(ros.propertyValidator('category', ros.validateString)(properties.category));
    errors.collect(ros.propertyValidator('privateIpAddress', ros.validateString)(properties.privateIpAddress));
    errors.collect(ros.propertyValidator('dedicatedHostGroupId', ros.validateString)(properties.dedicatedHostGroupId));
    if (properties.port && (typeof properties.port) !== 'object') {
        errors.collect(ros.propertyValidator('port', ros.validateRange)({
            data: properties.port,
            min: 1,
            max: 65535,
        }));
    }
    errors.collect(ros.propertyValidator('port', ros.validateNumber)(properties.port));
    errors.collect(ros.propertyValidator('backupId', ros.validateString)(properties.backupId));
    errors.collect(ros.propertyValidator('instanceNetworkType', ros.validateString)(properties.instanceNetworkType));
    errors.collect(ros.propertyValidator('restoreTime', ros.validateString)(properties.restoreTime));
    errors.collect(ros.propertyValidator('preferredBackupPeriod', ros.listValidator(ros.validateString))(properties.preferredBackupPeriod));
    errors.collect(ros.propertyValidator('dbNames', ros.validateString)(properties.dbNames));
    if (properties.slaveZoneIds && (Array.isArray(properties.slaveZoneIds) || (typeof properties.slaveZoneIds) === 'string')) {
        errors.collect(ros.propertyValidator('slaveZoneIds', ros.validateLength)({
            data: properties.slaveZoneIds.length,
            min: undefined,
            max: 2,
        }));
    }
    errors.collect(ros.propertyValidator('slaveZoneIds', ros.listValidator(ros.validateString))(properties.slaveZoneIds));
    errors.collect(ros.propertyValidator('dbInstanceId', ros.requiredValidator)(properties.dbInstanceId));
    errors.collect(ros.propertyValidator('dbInstanceId', ros.validateString)(properties.dbInstanceId));
    errors.collect(ros.propertyValidator('securityIpList', ros.validateString)(properties.securityIpList));
    errors.collect(ros.propertyValidator('dbInstanceStorage', ros.validateNumber)(properties.dbInstanceStorage));
    if (properties.backupType && (typeof properties.backupType) !== 'object') {
        errors.collect(ros.propertyValidator('backupType', ros.validateAllowedValues)({
            data: properties.backupType,
            allowedValues: ["FullBackup", "IncrementalBackup"],
        }));
    }
    errors.collect(ros.propertyValidator('backupType', ros.validateString)(properties.backupType));
    errors.collect(ros.propertyValidator('dbMappings', ros.listValidator(RosDBInstanceClone_DBMappingsPropertyValidator))(properties.dbMappings));
    if (properties.connectionStringPrefix && (typeof properties.connectionStringPrefix) !== 'object') {
        errors.collect(ros.propertyValidator('connectionStringPrefix', ros.validateAllowedPattern)({
            data: properties.connectionStringPrefix,
            reg: /[a-zA-Z0-9-]{8,64}/
        }));
    }
    errors.collect(ros.propertyValidator('connectionStringPrefix', ros.validateString)(properties.connectionStringPrefix));
    errors.collect(ros.propertyValidator('maintainTime', ros.validateString)(properties.maintainTime));
    errors.collect(ros.propertyValidator('tags', ros.hashValidator(ros.validateAny))(properties.tags));
    errors.collect(ros.propertyValidator('dbInstanceDescription', ros.validateString)(properties.dbInstanceDescription));
    errors.collect(ros.propertyValidator('zoneId', ros.validateString)(properties.zoneId));
    if (properties.dbInstanceClass && (Array.isArray(properties.dbInstanceClass) || (typeof properties.dbInstanceClass) === 'string')) {
        errors.collect(ros.propertyValidator('dbInstanceClass', ros.validateLength)({
            data: properties.dbInstanceClass.length,
            min: 1,
            max: 64,
        }));
    }
    errors.collect(ros.propertyValidator('dbInstanceClass', ros.validateString)(properties.dbInstanceClass));
    errors.collect(ros.propertyValidator('allocatePublicConnection', ros.validateBoolean)(properties.allocatePublicConnection));
    errors.collect(ros.propertyValidator('preferredBackupTime', ros.validateString)(properties.preferredBackupTime));
    errors.collect(ros.propertyValidator('vSwitchId', ros.validateString)(properties.vSwitchId));
    errors.collect(ros.propertyValidator('securityGroupId', ros.validateString)(properties.securityGroupId));
    if (properties.period && (typeof properties.period) !== 'object') {
        errors.collect(ros.propertyValidator('period', ros.validateAllowedValues)({
            data: properties.period,
            allowedValues: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 24, 36, 48, 60],
        }));
    }
    errors.collect(ros.propertyValidator('period', ros.validateNumber)(properties.period));
    errors.collect(ros.propertyValidator('payType', ros.requiredValidator)(properties.payType));
    if (properties.payType && (typeof properties.payType) !== 'object') {
        errors.collect(ros.propertyValidator('payType', ros.validateAllowedValues)({
            data: properties.payType,
            allowedValues: ["PayAsYouGo", "PostPaid", "PayOnDemand", "Postpaid", "PostPay", "Postpay", "POSTPAY", "POST", "Subscription", "PrePaid", "Prepaid", "PrePay", "Prepay", "PREPAY", "PRE", "Serverless"],
        }));
    }
    errors.collect(ros.propertyValidator('payType', ros.validateString)(properties.payType));
    errors.collect(ros.propertyValidator('dbInstanceStorageType', ros.validateString)(properties.dbInstanceStorageType));
    if (properties.connectionStringType && (typeof properties.connectionStringType) !== 'object') {
        errors.collect(ros.propertyValidator('connectionStringType', ros.validateAllowedValues)({
            data: properties.connectionStringType,
            allowedValues: ["Inner", "Public"],
        }));
    }
    errors.collect(ros.propertyValidator('connectionStringType', ros.validateString)(properties.connectionStringType));
    errors.collect(ros.propertyValidator('restoreTable', ros.validateString)(properties.restoreTable));
    if (properties.masterUserPassword && (Array.isArray(properties.masterUserPassword) || (typeof properties.masterUserPassword) === 'string')) {
        errors.collect(ros.propertyValidator('masterUserPassword', ros.validateLength)({
            data: properties.masterUserPassword.length,
            min: 8,
            max: 32,
        }));
    }
    errors.collect(ros.propertyValidator('masterUserPassword', ros.validateString)(properties.masterUserPassword));
    if (properties.masterUserType && (typeof properties.masterUserType) !== 'object') {
        errors.collect(ros.propertyValidator('masterUserType', ros.validateAllowedValues)({
            data: properties.masterUserType,
            allowedValues: ["Normal", "Super", "Sysadmin"],
        }));
    }
    errors.collect(ros.propertyValidator('masterUserType', ros.validateString)(properties.masterUserType));
    errors.collect(ros.propertyValidator('vpcId', ros.validateString)(properties.vpcId));
    if (properties.sslSetting && (typeof properties.sslSetting) !== 'object') {
        errors.collect(ros.propertyValidator('sslSetting', ros.validateAllowedValues)({
            data: properties.sslSetting,
            allowedValues: ["Disabled", "EnabledForPublicConnection", "EnabledForInnerConnection"],
        }));
    }
    errors.collect(ros.propertyValidator('sslSetting', ros.validateString)(properties.sslSetting));
    errors.collect(ros.propertyValidator('masterUsername', ros.validateString)(properties.masterUsername));
    if (properties.sqlCollectorStatus && (typeof properties.sqlCollectorStatus) !== 'object') {
        errors.collect(ros.propertyValidator('sqlCollectorStatus', ros.validateAllowedValues)({
            data: properties.sqlCollectorStatus,
            allowedValues: ["Enable", "Disabled"],
        }));
    }
    errors.collect(ros.propertyValidator('sqlCollectorStatus', ros.validateString)(properties.sqlCollectorStatus));
    errors.collect(ros.propertyValidator('backupRetentionPeriod', ros.validateNumber)(properties.backupRetentionPeriod));
    errors.collect(ros.propertyValidator('tableMeta', ros.listValidator(RosDBInstanceClone_TableMetaPropertyValidator))(properties.tableMeta));
    if (properties.timeoutInMinutes && (typeof properties.timeoutInMinutes) !== 'object') {
        errors.collect(ros.propertyValidator('timeoutInMinutes', ros.validateAllowedValues)({
            data: properties.timeoutInMinutes,
            allowedValues: [30, 60, 90, 120, 150, 180, 210, 240, 270, 300, 330, 360],
        }));
    }
    errors.collect(ros.propertyValidator('timeoutInMinutes', ros.validateNumber)(properties.timeoutInMinutes));
    return errors.wrap('supplied properties not correct for "RosDBInstanceCloneProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::RDS::DBInstanceClone` resource
 *
 * @param properties - the TypeScript properties of a `RosDBInstanceCloneProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::RDS::DBInstanceClone` resource.
 */
// @ts-ignore TS6133
function rosDBInstanceClonePropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosDBInstanceClonePropsValidator(properties).assertSuccess();
    }
    return {
        'DBInstanceId': ros.stringToRosTemplate(properties.dbInstanceId),
        'PayType': ros.stringToRosTemplate(properties.payType),
        'AllocatePublicConnection': ros.booleanToRosTemplate(properties.allocatePublicConnection),
        'BackupId': ros.stringToRosTemplate(properties.backupId),
        'BackupRetentionPeriod': ros.numberToRosTemplate(properties.backupRetentionPeriod),
        'BackupType': ros.stringToRosTemplate(properties.backupType),
        'Category': ros.stringToRosTemplate(properties.category),
        'ConnectionStringPrefix': ros.stringToRosTemplate(properties.connectionStringPrefix),
        'ConnectionStringType': ros.stringToRosTemplate(properties.connectionStringType),
        'DBInstanceClass': ros.stringToRosTemplate(properties.dbInstanceClass),
        'DBInstanceDescription': ros.stringToRosTemplate(properties.dbInstanceDescription),
        'DBInstanceStorage': ros.numberToRosTemplate(properties.dbInstanceStorage),
        'DBInstanceStorageType': ros.stringToRosTemplate(properties.dbInstanceStorageType),
        'DBMappings': ros.listMapper(rosDBInstanceCloneDBMappingsPropertyToRosTemplate)(properties.dbMappings),
        'DbNames': ros.stringToRosTemplate(properties.dbNames),
        'DedicatedHostGroupId': ros.stringToRosTemplate(properties.dedicatedHostGroupId),
        'InstanceNetworkType': ros.stringToRosTemplate(properties.instanceNetworkType),
        'MaintainTime': ros.stringToRosTemplate(properties.maintainTime),
        'MasterUsername': ros.stringToRosTemplate(properties.masterUsername),
        'MasterUserPassword': ros.stringToRosTemplate(properties.masterUserPassword),
        'MasterUserType': ros.stringToRosTemplate(properties.masterUserType),
        'Period': ros.numberToRosTemplate(properties.period),
        'PeriodType': ros.stringToRosTemplate(properties.periodType),
        'Port': ros.numberToRosTemplate(properties.port),
        'PreferredBackupPeriod': ros.listMapper(ros.stringToRosTemplate)(properties.preferredBackupPeriod),
        'PreferredBackupTime': ros.stringToRosTemplate(properties.preferredBackupTime),
        'PrivateIpAddress': ros.stringToRosTemplate(properties.privateIpAddress),
        'RestoreTable': ros.stringToRosTemplate(properties.restoreTable),
        'RestoreTime': ros.stringToRosTemplate(properties.restoreTime),
        'SecurityGroupId': ros.stringToRosTemplate(properties.securityGroupId),
        'SecurityIPList': ros.stringToRosTemplate(properties.securityIpList),
        'SlaveZoneIds': ros.listMapper(ros.stringToRosTemplate)(properties.slaveZoneIds),
        'SQLCollectorStatus': ros.stringToRosTemplate(properties.sqlCollectorStatus),
        'SSLSetting': ros.stringToRosTemplate(properties.sslSetting),
        'TableMeta': ros.listMapper(rosDBInstanceCloneTableMetaPropertyToRosTemplate)(properties.tableMeta),
        'Tags': ros.hashMapper(ros.objectToRosTemplate)(properties.tags),
        'TimeoutInMinutes': ros.numberToRosTemplate(properties.timeoutInMinutes),
        'VpcId': ros.stringToRosTemplate(properties.vpcId),
        'VSwitchId': ros.stringToRosTemplate(properties.vSwitchId),
        'ZoneId': ros.stringToRosTemplate(properties.zoneId),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::RDS::DBInstanceClone`.
 * @Note This class does not contain additional functions, so it is recommended to use the `DBInstanceClone` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-rds-dbinstanceclone
 */
class RosDBInstanceClone extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosDBInstanceClone.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrDbInstanceId = this.getAtt('DBInstanceId');
        this.attrInnerConnectionString = this.getAtt('InnerConnectionString');
        this.attrInnerIpAddress = this.getAtt('InnerIPAddress');
        this.attrInnerPort = this.getAtt('InnerPort');
        this.attrPublicConnectionString = this.getAtt('PublicConnectionString');
        this.attrPublicIpAddress = this.getAtt('PublicIPAddress');
        this.attrPublicPort = this.getAtt('PublicPort');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.dbInstanceId = props.dbInstanceId;
        this.payType = props.payType;
        this.allocatePublicConnection = props.allocatePublicConnection;
        this.backupId = props.backupId;
        this.backupRetentionPeriod = props.backupRetentionPeriod;
        this.backupType = props.backupType;
        this.category = props.category;
        this.connectionStringPrefix = props.connectionStringPrefix;
        this.connectionStringType = props.connectionStringType;
        this.dbInstanceClass = props.dbInstanceClass;
        this.dbInstanceDescription = props.dbInstanceDescription;
        this.dbInstanceStorage = props.dbInstanceStorage;
        this.dbInstanceStorageType = props.dbInstanceStorageType;
        this.dbMappings = props.dbMappings;
        this.dbNames = props.dbNames;
        this.dedicatedHostGroupId = props.dedicatedHostGroupId;
        this.instanceNetworkType = props.instanceNetworkType;
        this.maintainTime = props.maintainTime;
        this.masterUsername = props.masterUsername;
        this.masterUserPassword = props.masterUserPassword;
        this.masterUserType = props.masterUserType;
        this.period = props.period;
        this.periodType = props.periodType;
        this.port = props.port;
        this.preferredBackupPeriod = props.preferredBackupPeriod;
        this.preferredBackupTime = props.preferredBackupTime;
        this.privateIpAddress = props.privateIpAddress;
        this.restoreTable = props.restoreTable;
        this.restoreTime = props.restoreTime;
        this.securityGroupId = props.securityGroupId;
        this.securityIpList = props.securityIpList;
        this.slaveZoneIds = props.slaveZoneIds;
        this.sqlCollectorStatus = props.sqlCollectorStatus;
        this.sslSetting = props.sslSetting;
        this.tableMeta = props.tableMeta;
        this.tags = props.tags;
        this.timeoutInMinutes = props.timeoutInMinutes;
        this.vpcId = props.vpcId;
        this.vSwitchId = props.vSwitchId;
        this.zoneId = props.zoneId;
    }
    get rosProperties() {
        return {
            dbInstanceId: this.dbInstanceId,
            payType: this.payType,
            allocatePublicConnection: this.allocatePublicConnection,
            backupId: this.backupId,
            backupRetentionPeriod: this.backupRetentionPeriod,
            backupType: this.backupType,
            category: this.category,
            connectionStringPrefix: this.connectionStringPrefix,
            connectionStringType: this.connectionStringType,
            dbInstanceClass: this.dbInstanceClass,
            dbInstanceDescription: this.dbInstanceDescription,
            dbInstanceStorage: this.dbInstanceStorage,
            dbInstanceStorageType: this.dbInstanceStorageType,
            dbMappings: this.dbMappings,
            dbNames: this.dbNames,
            dedicatedHostGroupId: this.dedicatedHostGroupId,
            instanceNetworkType: this.instanceNetworkType,
            maintainTime: this.maintainTime,
            masterUsername: this.masterUsername,
            masterUserPassword: this.masterUserPassword,
            masterUserType: this.masterUserType,
            period: this.period,
            periodType: this.periodType,
            port: this.port,
            preferredBackupPeriod: this.preferredBackupPeriod,
            preferredBackupTime: this.preferredBackupTime,
            privateIpAddress: this.privateIpAddress,
            restoreTable: this.restoreTable,
            restoreTime: this.restoreTime,
            securityGroupId: this.securityGroupId,
            securityIpList: this.securityIpList,
            slaveZoneIds: this.slaveZoneIds,
            sqlCollectorStatus: this.sqlCollectorStatus,
            sslSetting: this.sslSetting,
            tableMeta: this.tableMeta,
            tags: this.tags,
            timeoutInMinutes: this.timeoutInMinutes,
            vpcId: this.vpcId,
            vSwitchId: this.vSwitchId,
            zoneId: this.zoneId,
        };
    }
    renderProperties(props) {
        return rosDBInstanceClonePropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosDBInstanceClone = RosDBInstanceClone;
/**
 * The resource type name for this resource class.
 */
RosDBInstanceClone.ROS_RESOURCE_TYPE_NAME = "ALIYUN::RDS::DBInstanceClone";
/**
 * Determine whether the given properties match those of a `DBMappingsProperty`
 *
 * @param properties - the TypeScript properties of a `DBMappingsProperty`
 *
 * @returns the result of the validation.
 */
function RosDBInstanceClone_DBMappingsPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('characterSetName', ros.requiredValidator)(properties.characterSetName));
    errors.collect(ros.propertyValidator('characterSetName', ros.validateString)(properties.characterSetName));
    if (properties.dbDescription && (Array.isArray(properties.dbDescription) || (typeof properties.dbDescription) === 'string')) {
        errors.collect(ros.propertyValidator('dbDescription', ros.validateLength)({
            data: properties.dbDescription.length,
            min: undefined,
            max: 256,
        }));
    }
    errors.collect(ros.propertyValidator('dbDescription', ros.validateString)(properties.dbDescription));
    errors.collect(ros.propertyValidator('dbName', ros.requiredValidator)(properties.dbName));
    errors.collect(ros.propertyValidator('dbName', ros.validateString)(properties.dbName));
    return errors.wrap('supplied properties not correct for "DBMappingsProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::RDS::DBInstanceClone.DBMappings` resource
 *
 * @param properties - the TypeScript properties of a `DBMappingsProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::RDS::DBInstanceClone.DBMappings` resource.
 */
// @ts-ignore TS6133
function rosDBInstanceCloneDBMappingsPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosDBInstanceClone_DBMappingsPropertyValidator(properties).assertSuccess();
    return {
        'CharacterSetName': ros.stringToRosTemplate(properties.characterSetName),
        'DBDescription': ros.stringToRosTemplate(properties.dbDescription),
        'DBName': ros.stringToRosTemplate(properties.dbName),
    };
}
/**
 * Determine whether the given properties match those of a `TableMetaProperty`
 *
 * @param properties - the TypeScript properties of a `TableMetaProperty`
 *
 * @returns the result of the validation.
 */
function RosDBInstanceClone_TableMetaPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('type', ros.validateString)(properties.type));
    errors.collect(ros.propertyValidator('tables', ros.listValidator(RosDBInstanceClone_TablesPropertyValidator))(properties.tables));
    errors.collect(ros.propertyValidator('newName', ros.validateString)(properties.newName));
    errors.collect(ros.propertyValidator('name', ros.validateString)(properties.name));
    return errors.wrap('supplied properties not correct for "TableMetaProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::RDS::DBInstanceClone.TableMeta` resource
 *
 * @param properties - the TypeScript properties of a `TableMetaProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::RDS::DBInstanceClone.TableMeta` resource.
 */
// @ts-ignore TS6133
function rosDBInstanceCloneTableMetaPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosDBInstanceClone_TableMetaPropertyValidator(properties).assertSuccess();
    return {
        'Type': ros.stringToRosTemplate(properties.type),
        'Tables': ros.listMapper(rosDBInstanceCloneTablesPropertyToRosTemplate)(properties.tables),
        'NewName': ros.stringToRosTemplate(properties.newName),
        'Name': ros.stringToRosTemplate(properties.name),
    };
}
/**
 * Determine whether the given properties match those of a `TablesProperty`
 *
 * @param properties - the TypeScript properties of a `TablesProperty`
 *
 * @returns the result of the validation.
 */
function RosDBInstanceClone_TablesPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('type', ros.validateString)(properties.type));
    errors.collect(ros.propertyValidator('newName', ros.validateString)(properties.newName));
    errors.collect(ros.propertyValidator('name', ros.validateString)(properties.name));
    return errors.wrap('supplied properties not correct for "TablesProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::RDS::DBInstanceClone.Tables` resource
 *
 * @param properties - the TypeScript properties of a `TablesProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::RDS::DBInstanceClone.Tables` resource.
 */
// @ts-ignore TS6133
function rosDBInstanceCloneTablesPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosDBInstanceClone_TablesPropertyValidator(properties).assertSuccess();
    return {
        'Type': ros.stringToRosTemplate(properties.type),
        'NewName': ros.stringToRosTemplate(properties.newName),
        'Name': ros.stringToRosTemplate(properties.name),
    };
}
/**
 * Determine whether the given properties match those of a `RosDBInstanceParameterGroupProps`
 *
 * @param properties - the TypeScript properties of a `RosDBInstanceParameterGroupProps`
 *
 * @returns the result of the validation.
 */
function RosDBInstanceParameterGroupPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('parameters', ros.requiredValidator)(properties.parameters));
    errors.collect(ros.propertyValidator('parameters', ros.listValidator(RosDBInstanceParameterGroup_ParametersPropertyValidator))(properties.parameters));
    errors.collect(ros.propertyValidator('dbInstanceId', ros.requiredValidator)(properties.dbInstanceId));
    errors.collect(ros.propertyValidator('dbInstanceId', ros.validateString)(properties.dbInstanceId));
    if (properties.forcerestart && (typeof properties.forcerestart) !== 'object') {
        errors.collect(ros.propertyValidator('forcerestart', ros.validateAllowedValues)({
            data: properties.forcerestart,
            allowedValues: ["true", "false"],
        }));
    }
    errors.collect(ros.propertyValidator('forcerestart', ros.validateString)(properties.forcerestart));
    return errors.wrap('supplied properties not correct for "RosDBInstanceParameterGroupProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::RDS::DBInstanceParameterGroup` resource
 *
 * @param properties - the TypeScript properties of a `RosDBInstanceParameterGroupProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::RDS::DBInstanceParameterGroup` resource.
 */
// @ts-ignore TS6133
function rosDBInstanceParameterGroupPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosDBInstanceParameterGroupPropsValidator(properties).assertSuccess();
    }
    return {
        'DBInstanceId': ros.stringToRosTemplate(properties.dbInstanceId),
        'Parameters': ros.listMapper(rosDBInstanceParameterGroupParametersPropertyToRosTemplate)(properties.parameters),
        'Forcerestart': ros.stringToRosTemplate(properties.forcerestart),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::RDS::DBInstanceParameterGroup`.
 * @Note This class does not contain additional functions, so it is recommended to use the `DBInstanceParameterGroup` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-rds-dbinstanceparametergroup
 */
class RosDBInstanceParameterGroup extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosDBInstanceParameterGroup.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.dbInstanceId = props.dbInstanceId;
        this.parameters = props.parameters;
        this.forcerestart = props.forcerestart;
    }
    get rosProperties() {
        return {
            dbInstanceId: this.dbInstanceId,
            parameters: this.parameters,
            forcerestart: this.forcerestart,
        };
    }
    renderProperties(props) {
        return rosDBInstanceParameterGroupPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosDBInstanceParameterGroup = RosDBInstanceParameterGroup;
/**
 * The resource type name for this resource class.
 */
RosDBInstanceParameterGroup.ROS_RESOURCE_TYPE_NAME = "ALIYUN::RDS::DBInstanceParameterGroup";
/**
 * Determine whether the given properties match those of a `ParametersProperty`
 *
 * @param properties - the TypeScript properties of a `ParametersProperty`
 *
 * @returns the result of the validation.
 */
function RosDBInstanceParameterGroup_ParametersPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('value', ros.requiredValidator)(properties.value));
    errors.collect(ros.propertyValidator('value', ros.validateString)(properties.value));
    errors.collect(ros.propertyValidator('key', ros.requiredValidator)(properties.key));
    errors.collect(ros.propertyValidator('key', ros.validateString)(properties.key));
    return errors.wrap('supplied properties not correct for "ParametersProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::RDS::DBInstanceParameterGroup.Parameters` resource
 *
 * @param properties - the TypeScript properties of a `ParametersProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::RDS::DBInstanceParameterGroup.Parameters` resource.
 */
// @ts-ignore TS6133
function rosDBInstanceParameterGroupParametersPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosDBInstanceParameterGroup_ParametersPropertyValidator(properties).assertSuccess();
    return {
        'Value': ros.stringToRosTemplate(properties.value),
        'Key': ros.stringToRosTemplate(properties.key),
    };
}
/**
 * Determine whether the given properties match those of a `RosDBInstanceSecurityIpsProps`
 *
 * @param properties - the TypeScript properties of a `RosDBInstanceSecurityIpsProps`
 *
 * @returns the result of the validation.
 */
function RosDBInstanceSecurityIpsPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('dbInstanceIpArrayAttribute', ros.requiredValidator)(properties.dbInstanceIpArrayAttribute));
    errors.collect(ros.propertyValidator('dbInstanceIpArrayAttribute', ros.validateString)(properties.dbInstanceIpArrayAttribute));
    errors.collect(ros.propertyValidator('dbInstanceId', ros.requiredValidator)(properties.dbInstanceId));
    errors.collect(ros.propertyValidator('dbInstanceId', ros.validateString)(properties.dbInstanceId));
    errors.collect(ros.propertyValidator('dbInstanceIpArrayName', ros.validateString)(properties.dbInstanceIpArrayName));
    return errors.wrap('supplied properties not correct for "RosDBInstanceSecurityIpsProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::RDS::DBInstanceSecurityIps` resource
 *
 * @param properties - the TypeScript properties of a `RosDBInstanceSecurityIpsProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::RDS::DBInstanceSecurityIps` resource.
 */
// @ts-ignore TS6133
function rosDBInstanceSecurityIpsPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosDBInstanceSecurityIpsPropsValidator(properties).assertSuccess();
    }
    return {
        'DBInstanceId': ros.stringToRosTemplate(properties.dbInstanceId),
        'DBInstanceIPArrayAttribute': ros.stringToRosTemplate(properties.dbInstanceIpArrayAttribute),
        'DBInstanceIPArrayName': ros.stringToRosTemplate(properties.dbInstanceIpArrayName),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::RDS::DBInstanceSecurityIps`.
 * @Note This class does not contain additional functions, so it is recommended to use the `DBInstanceSecurityIps` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-rds-dbinstancesecurityips
 */
class RosDBInstanceSecurityIps extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosDBInstanceSecurityIps.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrSecurityIps = this.getAtt('SecurityIps');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.dbInstanceId = props.dbInstanceId;
        this.dbInstanceIpArrayAttribute = props.dbInstanceIpArrayAttribute;
        this.dbInstanceIpArrayName = props.dbInstanceIpArrayName;
    }
    get rosProperties() {
        return {
            dbInstanceId: this.dbInstanceId,
            dbInstanceIpArrayAttribute: this.dbInstanceIpArrayAttribute,
            dbInstanceIpArrayName: this.dbInstanceIpArrayName,
        };
    }
    renderProperties(props) {
        return rosDBInstanceSecurityIpsPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosDBInstanceSecurityIps = RosDBInstanceSecurityIps;
/**
 * The resource type name for this resource class.
 */
RosDBInstanceSecurityIps.ROS_RESOURCE_TYPE_NAME = "ALIYUN::RDS::DBInstanceSecurityIps";
/**
 * Determine whether the given properties match those of a `RosDatabaseProps`
 *
 * @param properties - the TypeScript properties of a `RosDatabaseProps`
 *
 * @returns the result of the validation.
 */
function RosDatabasePropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('characterSetName', ros.requiredValidator)(properties.characterSetName));
    errors.collect(ros.propertyValidator('characterSetName', ros.validateString)(properties.characterSetName));
    errors.collect(ros.propertyValidator('dbInstanceId', ros.requiredValidator)(properties.dbInstanceId));
    errors.collect(ros.propertyValidator('dbInstanceId', ros.validateString)(properties.dbInstanceId));
    errors.collect(ros.propertyValidator('dbDescription', ros.validateString)(properties.dbDescription));
    errors.collect(ros.propertyValidator('dbName', ros.requiredValidator)(properties.dbName));
    errors.collect(ros.propertyValidator('dbName', ros.validateString)(properties.dbName));
    return errors.wrap('supplied properties not correct for "RosDatabaseProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::RDS::Database` resource
 *
 * @param properties - the TypeScript properties of a `RosDatabaseProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::RDS::Database` resource.
 */
// @ts-ignore TS6133
function rosDatabasePropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosDatabasePropsValidator(properties).assertSuccess();
    }
    return {
        'CharacterSetName': ros.stringToRosTemplate(properties.characterSetName),
        'DBInstanceId': ros.stringToRosTemplate(properties.dbInstanceId),
        'DBName': ros.stringToRosTemplate(properties.dbName),
        'DBDescription': ros.stringToRosTemplate(properties.dbDescription),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::RDS::Database`.
 * @Note This class does not contain additional functions, so it is recommended to use the `Database` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-rds-database
 */
class RosDatabase extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosDatabase.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrDbInstanceId = this.getAtt('DBInstanceId');
        this.attrDbName = this.getAtt('DBName');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.characterSetName = props.characterSetName;
        this.dbInstanceId = props.dbInstanceId;
        this.dbName = props.dbName;
        this.dbDescription = props.dbDescription;
    }
    get rosProperties() {
        return {
            characterSetName: this.characterSetName,
            dbInstanceId: this.dbInstanceId,
            dbName: this.dbName,
            dbDescription: this.dbDescription,
        };
    }
    renderProperties(props) {
        return rosDatabasePropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosDatabase = RosDatabase;
/**
 * The resource type name for this resource class.
 */
RosDatabase.ROS_RESOURCE_TYPE_NAME = "ALIYUN::RDS::Database";
/**
 * Determine whether the given properties match those of a `RosMigrateTaskProps`
 *
 * @param properties - the TypeScript properties of a `RosMigrateTaskProps`
 *
 * @returns the result of the validation.
 */
function RosMigrateTaskPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('isOnlineDb', ros.requiredValidator)(properties.isOnlineDb));
    errors.collect(ros.propertyValidator('isOnlineDb', ros.validateBoolean)(properties.isOnlineDb));
    errors.collect(ros.propertyValidator('dbInstanceId', ros.requiredValidator)(properties.dbInstanceId));
    errors.collect(ros.propertyValidator('dbInstanceId', ros.validateString)(properties.dbInstanceId));
    errors.collect(ros.propertyValidator('ossObjectPositions', ros.validateString)(properties.ossObjectPositions));
    if (properties.checkDbMode && (typeof properties.checkDbMode) !== 'object') {
        errors.collect(ros.propertyValidator('checkDbMode', ros.validateAllowedValues)({
            data: properties.checkDbMode,
            allowedValues: ["AsyncExecuteDBCheck", "SyncExecuteDBCheck"],
        }));
    }
    errors.collect(ros.propertyValidator('checkDbMode', ros.validateString)(properties.checkDbMode));
    errors.collect(ros.propertyValidator('backupMode', ros.requiredValidator)(properties.backupMode));
    if (properties.backupMode && (typeof properties.backupMode) !== 'object') {
        errors.collect(ros.propertyValidator('backupMode', ros.validateAllowedValues)({
            data: properties.backupMode,
            allowedValues: ["FULL", "UPDF"],
        }));
    }
    errors.collect(ros.propertyValidator('backupMode', ros.validateString)(properties.backupMode));
    errors.collect(ros.propertyValidator('dbName', ros.requiredValidator)(properties.dbName));
    errors.collect(ros.propertyValidator('dbName', ros.validateString)(properties.dbName));
    errors.collect(ros.propertyValidator('ossUrls', ros.validateString)(properties.ossUrls));
    return errors.wrap('supplied properties not correct for "RosMigrateTaskProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::RDS::MigrateTask` resource
 *
 * @param properties - the TypeScript properties of a `RosMigrateTaskProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::RDS::MigrateTask` resource.
 */
// @ts-ignore TS6133
function rosMigrateTaskPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosMigrateTaskPropsValidator(properties).assertSuccess();
    }
    return {
        'BackupMode': ros.stringToRosTemplate(properties.backupMode),
        'DBInstanceId': ros.stringToRosTemplate(properties.dbInstanceId),
        'DBName': ros.stringToRosTemplate(properties.dbName),
        'IsOnlineDB': ros.booleanToRosTemplate(properties.isOnlineDb),
        'CheckDBMode': ros.stringToRosTemplate(properties.checkDbMode),
        'OssObjectPositions': ros.stringToRosTemplate(properties.ossObjectPositions),
        'OSSUrls': ros.stringToRosTemplate(properties.ossUrls),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::RDS::MigrateTask`.
 * @Note This class does not contain additional functions, so it is recommended to use the `MigrateTask` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-rds-migratetask
 */
class RosMigrateTask extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosMigrateTask.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrDbName = this.getAtt('DBName');
        this.attrMigrateTaskId = this.getAtt('MigrateTaskId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.backupMode = props.backupMode;
        this.dbInstanceId = props.dbInstanceId;
        this.dbName = props.dbName;
        this.isOnlineDb = props.isOnlineDb;
        this.checkDbMode = props.checkDbMode;
        this.ossObjectPositions = props.ossObjectPositions;
        this.ossUrls = props.ossUrls;
    }
    get rosProperties() {
        return {
            backupMode: this.backupMode,
            dbInstanceId: this.dbInstanceId,
            dbName: this.dbName,
            isOnlineDb: this.isOnlineDb,
            checkDbMode: this.checkDbMode,
            ossObjectPositions: this.ossObjectPositions,
            ossUrls: this.ossUrls,
        };
    }
    renderProperties(props) {
        return rosMigrateTaskPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosMigrateTask = RosMigrateTask;
/**
 * The resource type name for this resource class.
 */
RosMigrateTask.ROS_RESOURCE_TYPE_NAME = "ALIYUN::RDS::MigrateTask";
/**
 * Determine whether the given properties match those of a `RosPostgresExtensionsProps`
 *
 * @param properties - the TypeScript properties of a `RosPostgresExtensionsProps`
 *
 * @returns the result of the validation.
 */
function RosPostgresExtensionsPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('resourceGroupId', ros.validateString)(properties.resourceGroupId));
    errors.collect(ros.propertyValidator('dbInstanceId', ros.requiredValidator)(properties.dbInstanceId));
    if (properties.dbInstanceId && (typeof properties.dbInstanceId) !== 'object') {
        errors.collect(ros.propertyValidator('dbInstanceId', ros.validateAllowedPattern)({
            data: properties.dbInstanceId,
            reg: /[_a-zA-Z0-9-]{1,65}/
        }));
    }
    errors.collect(ros.propertyValidator('dbInstanceId', ros.validateString)(properties.dbInstanceId));
    errors.collect(ros.propertyValidator('riskConfirmed', ros.validateBoolean)(properties.riskConfirmed));
    errors.collect(ros.propertyValidator('dbName', ros.requiredValidator)(properties.dbName));
    if (properties.dbName && (typeof properties.dbName) !== 'object') {
        errors.collect(ros.propertyValidator('dbName', ros.validateAllowedPattern)({
            data: properties.dbName,
            reg: /[_a-zA-Z0-9-]{1,65}/
        }));
    }
    errors.collect(ros.propertyValidator('dbName', ros.validateString)(properties.dbName));
    errors.collect(ros.propertyValidator('sourceDatabase', ros.validateString)(properties.sourceDatabase));
    if (properties.extensions && (Array.isArray(properties.extensions) || (typeof properties.extensions) === 'string')) {
        errors.collect(ros.propertyValidator('extensions', ros.validateLength)({
            data: properties.extensions.length,
            min: 1,
            max: 10,
        }));
    }
    errors.collect(ros.propertyValidator('extensions', ros.listValidator(ros.validateString))(properties.extensions));
    errors.collect(ros.propertyValidator('accountName', ros.requiredValidator)(properties.accountName));
    errors.collect(ros.propertyValidator('accountName', ros.validateString)(properties.accountName));
    return errors.wrap('supplied properties not correct for "RosPostgresExtensionsProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::RDS::PostgresExtensions` resource
 *
 * @param properties - the TypeScript properties of a `RosPostgresExtensionsProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::RDS::PostgresExtensions` resource.
 */
// @ts-ignore TS6133
function rosPostgresExtensionsPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosPostgresExtensionsPropsValidator(properties).assertSuccess();
    }
    return {
        'AccountName': ros.stringToRosTemplate(properties.accountName),
        'DBInstanceId': ros.stringToRosTemplate(properties.dbInstanceId),
        'DBName': ros.stringToRosTemplate(properties.dbName),
        'Extensions': ros.listMapper(ros.stringToRosTemplate)(properties.extensions),
        'ResourceGroupId': ros.stringToRosTemplate(properties.resourceGroupId),
        'RiskConfirmed': ros.booleanToRosTemplate(properties.riskConfirmed),
        'SourceDatabase': ros.stringToRosTemplate(properties.sourceDatabase),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::RDS::PostgresExtensions`.
 * @Note This class does not contain additional functions, so it is recommended to use the `PostgresExtensions` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-rds-postgresextensions
 */
class RosPostgresExtensions extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosPostgresExtensions.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrInstalledExtensionNames = this.getAtt('InstalledExtensionNames');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.accountName = props.accountName;
        this.dbInstanceId = props.dbInstanceId;
        this.dbName = props.dbName;
        this.extensions = props.extensions;
        this.resourceGroupId = props.resourceGroupId;
        this.riskConfirmed = props.riskConfirmed;
        this.sourceDatabase = props.sourceDatabase;
    }
    get rosProperties() {
        return {
            accountName: this.accountName,
            dbInstanceId: this.dbInstanceId,
            dbName: this.dbName,
            extensions: this.extensions,
            resourceGroupId: this.resourceGroupId,
            riskConfirmed: this.riskConfirmed,
            sourceDatabase: this.sourceDatabase,
        };
    }
    renderProperties(props) {
        return rosPostgresExtensionsPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosPostgresExtensions = RosPostgresExtensions;
/**
 * The resource type name for this resource class.
 */
RosPostgresExtensions.ROS_RESOURCE_TYPE_NAME = "ALIYUN::RDS::PostgresExtensions";
/**
 * Determine whether the given properties match those of a `RosPrepayDBInstanceProps`
 *
 * @param properties - the TypeScript properties of a `RosPrepayDBInstanceProps`
 *
 * @returns the result of the validation.
 */
function RosPrepayDBInstancePropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('periodType', ros.requiredValidator)(properties.periodType));
    if (properties.periodType && (typeof properties.periodType) !== 'object') {
        errors.collect(ros.propertyValidator('periodType', ros.validateAllowedValues)({
            data: properties.periodType,
            allowedValues: ["Month", "Year"],
        }));
    }
    errors.collect(ros.propertyValidator('periodType', ros.validateString)(properties.periodType));
    errors.collect(ros.propertyValidator('resourceGroupId', ros.validateString)(properties.resourceGroupId));
    if (properties.archiveBackupRetentionPeriod && (typeof properties.archiveBackupRetentionPeriod) !== 'object') {
        errors.collect(ros.propertyValidator('archiveBackupRetentionPeriod', ros.validateRange)({
            data: properties.archiveBackupRetentionPeriod,
            min: 30,
            max: 1095,
        }));
    }
    errors.collect(ros.propertyValidator('archiveBackupRetentionPeriod', ros.validateNumber)(properties.archiveBackupRetentionPeriod));
    errors.collect(ros.propertyValidator('dbTimeZone', ros.validateString)(properties.dbTimeZone));
    if (properties.port && (typeof properties.port) !== 'object') {
        errors.collect(ros.propertyValidator('port', ros.validateRange)({
            data: properties.port,
            min: 1,
            max: 65535,
        }));
    }
    errors.collect(ros.propertyValidator('port', ros.validateNumber)(properties.port));
    errors.collect(ros.propertyValidator('storageThreshold', ros.validateNumber)(properties.storageThreshold));
    if (properties.storageAutoScale && (typeof properties.storageAutoScale) !== 'object') {
        errors.collect(ros.propertyValidator('storageAutoScale', ros.validateAllowedValues)({
            data: properties.storageAutoScale,
            allowedValues: ["Disable", "Enable"],
        }));
    }
    errors.collect(ros.propertyValidator('storageAutoScale', ros.validateString)(properties.storageAutoScale));
    errors.collect(ros.propertyValidator('instanceNetworkType', ros.validateString)(properties.instanceNetworkType));
    if (properties.archiveBackupKeepCount && (typeof properties.archiveBackupKeepCount) !== 'object') {
        errors.collect(ros.propertyValidator('archiveBackupKeepCount', ros.validateRange)({
            data: properties.archiveBackupKeepCount,
            min: 1,
            max: 31,
        }));
    }
    errors.collect(ros.propertyValidator('archiveBackupKeepCount', ros.validateNumber)(properties.archiveBackupKeepCount));
    if (properties.logBackupRetentionPeriod && (typeof properties.logBackupRetentionPeriod) !== 'object') {
        errors.collect(ros.propertyValidator('logBackupRetentionPeriod', ros.validateRange)({
            data: properties.logBackupRetentionPeriod,
            min: 7,
            max: 730,
        }));
    }
    errors.collect(ros.propertyValidator('logBackupRetentionPeriod', ros.validateNumber)(properties.logBackupRetentionPeriod));
    errors.collect(ros.propertyValidator('dbInstanceStorage', ros.requiredValidator)(properties.dbInstanceStorage));
    errors.collect(ros.propertyValidator('dbInstanceStorage', ros.validateNumber)(properties.dbInstanceStorage));
    errors.collect(ros.propertyValidator('dbMappings', ros.listValidator(RosPrepayDBInstance_DBMappingsPropertyValidator))(properties.dbMappings));
    if (properties.connectionStringPrefix && (typeof properties.connectionStringPrefix) !== 'object') {
        errors.collect(ros.propertyValidator('connectionStringPrefix', ros.validateAllowedPattern)({
            data: properties.connectionStringPrefix,
            reg: /[a-zA-Z0-9-]{8,64}/
        }));
    }
    errors.collect(ros.propertyValidator('connectionStringPrefix', ros.validateString)(properties.connectionStringPrefix));
    errors.collect(ros.propertyValidator('multiAz', ros.validateBoolean)(properties.multiAz));
    errors.collect(ros.propertyValidator('tags', ros.hashValidator(ros.validateAny))(properties.tags));
    errors.collect(ros.propertyValidator('dbInstanceDescription', ros.validateString)(properties.dbInstanceDescription));
    errors.collect(ros.propertyValidator('engine', ros.requiredValidator)(properties.engine));
    if (properties.engine && (typeof properties.engine) !== 'object') {
        errors.collect(ros.propertyValidator('engine', ros.validateAllowedValues)({
            data: properties.engine,
            allowedValues: ["MySQL", "SQLServer", "PostgreSQL", "PPAS", "MariaDB"],
        }));
    }
    errors.collect(ros.propertyValidator('engine', ros.validateString)(properties.engine));
    if (properties.ioAccelerationEnabled && (typeof properties.ioAccelerationEnabled) !== 'object') {
        errors.collect(ros.propertyValidator('ioAccelerationEnabled', ros.validateAllowedValues)({
            data: properties.ioAccelerationEnabled,
            allowedValues: ["0", "1"],
        }));
    }
    errors.collect(ros.propertyValidator('ioAccelerationEnabled', ros.validateString)(properties.ioAccelerationEnabled));
    errors.collect(ros.propertyValidator('targetDedicatedHostIdForMaster', ros.validateString)(properties.targetDedicatedHostIdForMaster));
    errors.collect(ros.propertyValidator('engineVersion', ros.requiredValidator)(properties.engineVersion));
    if (properties.engineVersion && (Array.isArray(properties.engineVersion) || (typeof properties.engineVersion) === 'string')) {
        errors.collect(ros.propertyValidator('engineVersion', ros.validateLength)({
            data: properties.engineVersion.length,
            min: 1,
            max: 16,
        }));
    }
    errors.collect(ros.propertyValidator('engineVersion', ros.validateString)(properties.engineVersion));
    errors.collect(ros.propertyValidator('dbInstanceClass', ros.requiredValidator)(properties.dbInstanceClass));
    if (properties.dbInstanceClass && (Array.isArray(properties.dbInstanceClass) || (typeof properties.dbInstanceClass) === 'string')) {
        errors.collect(ros.propertyValidator('dbInstanceClass', ros.validateLength)({
            data: properties.dbInstanceClass.length,
            min: 1,
            max: 64,
        }));
    }
    errors.collect(ros.propertyValidator('dbInstanceClass', ros.validateString)(properties.dbInstanceClass));
    if (properties.archiveBackupKeepPolicy && (typeof properties.archiveBackupKeepPolicy) !== 'object') {
        errors.collect(ros.propertyValidator('archiveBackupKeepPolicy', ros.validateAllowedValues)({
            data: properties.archiveBackupKeepPolicy,
            allowedValues: ["ByMonth", "ByWeek", "KeepAll"],
        }));
    }
    errors.collect(ros.propertyValidator('archiveBackupKeepPolicy', ros.validateString)(properties.archiveBackupKeepPolicy));
    errors.collect(ros.propertyValidator('vSwitchId', ros.validateString)(properties.vSwitchId));
    if (properties.backupPolicyMode && (typeof properties.backupPolicyMode) !== 'object') {
        errors.collect(ros.propertyValidator('backupPolicyMode', ros.validateAllowedValues)({
            data: properties.backupPolicyMode,
            allowedValues: ["DataBackupPolicy", "LogBackupPolicy"],
        }));
    }
    errors.collect(ros.propertyValidator('backupPolicyMode', ros.validateString)(properties.backupPolicyMode));
    errors.collect(ros.propertyValidator('period', ros.requiredValidator)(properties.period));
    if (properties.period && (typeof properties.period) !== 'object') {
        errors.collect(ros.propertyValidator('period', ros.validateRange)({
            data: properties.period,
            min: 1,
            max: 9,
        }));
    }
    errors.collect(ros.propertyValidator('period', ros.validateNumber)(properties.period));
    if (properties.localLogRetentionHours && (typeof properties.localLogRetentionHours) !== 'object') {
        errors.collect(ros.propertyValidator('localLogRetentionHours', ros.validateRange)({
            data: properties.localLogRetentionHours,
            min: 0,
            max: 168,
        }));
    }
    errors.collect(ros.propertyValidator('localLogRetentionHours', ros.validateNumber)(properties.localLogRetentionHours));
    errors.collect(ros.propertyValidator('deletionProtection', ros.validateBoolean)(properties.deletionProtection));
    if (properties.highSpaceUsageProtection && (typeof properties.highSpaceUsageProtection) !== 'object') {
        errors.collect(ros.propertyValidator('highSpaceUsageProtection', ros.validateAllowedValues)({
            data: properties.highSpaceUsageProtection,
            allowedValues: ["Enable", "Disable"],
        }));
    }
    errors.collect(ros.propertyValidator('highSpaceUsageProtection', ros.validateString)(properties.highSpaceUsageProtection));
    errors.collect(ros.propertyValidator('roleArn', ros.validateString)(properties.roleArn));
    if (properties.masterUserPassword && (Array.isArray(properties.masterUserPassword) || (typeof properties.masterUserPassword) === 'string')) {
        errors.collect(ros.propertyValidator('masterUserPassword', ros.validateLength)({
            data: properties.masterUserPassword.length,
            min: 8,
            max: 32,
        }));
    }
    errors.collect(ros.propertyValidator('masterUserPassword', ros.validateString)(properties.masterUserPassword));
    errors.collect(ros.propertyValidator('vpcId', ros.validateString)(properties.vpcId));
    if (properties.sslSetting && (typeof properties.sslSetting) !== 'object') {
        errors.collect(ros.propertyValidator('sslSetting', ros.validateAllowedValues)({
            data: properties.sslSetting,
            allowedValues: ["Disabled", "EnabledForPublicConnection", "EnabledForInnerConnection"],
        }));
    }
    errors.collect(ros.propertyValidator('sslSetting', ros.validateString)(properties.sslSetting));
    errors.collect(ros.propertyValidator('masterUsername', ros.validateString)(properties.masterUsername));
    errors.collect(ros.propertyValidator('connectionMode', ros.validateString)(properties.connectionMode));
    if (properties.localLogRetentionSpace && (typeof properties.localLogRetentionSpace) !== 'object') {
        errors.collect(ros.propertyValidator('localLogRetentionSpace', ros.validateRange)({
            data: properties.localLogRetentionSpace,
            min: 0,
            max: 50,
        }));
    }
    errors.collect(ros.propertyValidator('localLogRetentionSpace', ros.validateNumber)(properties.localLogRetentionSpace));
    errors.collect(ros.propertyValidator('storageUpperBound', ros.validateNumber)(properties.storageUpperBound));
    errors.collect(ros.propertyValidator('category', ros.validateString)(properties.category));
    errors.collect(ros.propertyValidator('privateIpAddress', ros.validateString)(properties.privateIpAddress));
    errors.collect(ros.propertyValidator('targetDedicatedHostIdForSlave', ros.validateString)(properties.targetDedicatedHostIdForSlave));
    if (properties.dbInstanceNetType && (typeof properties.dbInstanceNetType) !== 'object') {
        errors.collect(ros.propertyValidator('dbInstanceNetType', ros.validateAllowedValues)({
            data: properties.dbInstanceNetType,
            allowedValues: ["Internet", "Intranet"],
        }));
    }
    errors.collect(ros.propertyValidator('dbInstanceNetType', ros.validateString)(properties.dbInstanceNetType));
    if (properties.releasedKeepPolicy && (typeof properties.releasedKeepPolicy) !== 'object') {
        errors.collect(ros.propertyValidator('releasedKeepPolicy', ros.validateAllowedValues)({
            data: properties.releasedKeepPolicy,
            allowedValues: ["Lastest", "All"],
        }));
    }
    errors.collect(ros.propertyValidator('releasedKeepPolicy', ros.validateString)(properties.releasedKeepPolicy));
    errors.collect(ros.propertyValidator('dedicatedHostGroupId', ros.validateString)(properties.dedicatedHostGroupId));
    errors.collect(ros.propertyValidator('autoRenew', ros.validateBoolean)(properties.autoRenew));
    errors.collect(ros.propertyValidator('encryptionKey', ros.validateString)(properties.encryptionKey));
    errors.collect(ros.propertyValidator('preferredBackupPeriod', ros.listValidator(ros.validateString))(properties.preferredBackupPeriod));
    if (properties.logBackupLocalRetentionNumber && (typeof properties.logBackupLocalRetentionNumber) !== 'object') {
        errors.collect(ros.propertyValidator('logBackupLocalRetentionNumber', ros.validateRange)({
            data: properties.logBackupLocalRetentionNumber,
            min: 6,
            max: 100,
        }));
    }
    errors.collect(ros.propertyValidator('logBackupLocalRetentionNumber', ros.validateNumber)(properties.logBackupLocalRetentionNumber));
    if (properties.slaveZoneIds && (Array.isArray(properties.slaveZoneIds) || (typeof properties.slaveZoneIds) === 'string')) {
        errors.collect(ros.propertyValidator('slaveZoneIds', ros.validateLength)({
            data: properties.slaveZoneIds.length,
            min: undefined,
            max: 2,
        }));
    }
    errors.collect(ros.propertyValidator('slaveZoneIds', ros.listValidator(ros.validateString))(properties.slaveZoneIds));
    if (properties.dbIsIgnoreCase && (typeof properties.dbIsIgnoreCase) !== 'object') {
        errors.collect(ros.propertyValidator('dbIsIgnoreCase', ros.validateAllowedValues)({
            data: properties.dbIsIgnoreCase,
            allowedValues: [0, 1],
        }));
    }
    errors.collect(ros.propertyValidator('dbIsIgnoreCase', ros.validateNumber)(properties.dbIsIgnoreCase));
    errors.collect(ros.propertyValidator('commodityCode', ros.requiredValidator)(properties.commodityCode));
    if (properties.commodityCode && (typeof properties.commodityCode) !== 'object') {
        errors.collect(ros.propertyValidator('commodityCode', ros.validateAllowedValues)({
            data: properties.commodityCode,
            allowedValues: ["rds", "bards", "rords"],
        }));
    }
    errors.collect(ros.propertyValidator('commodityCode', ros.validateString)(properties.commodityCode));
    errors.collect(ros.propertyValidator('maintainTime', ros.validateString)(properties.maintainTime));
    errors.collect(ros.propertyValidator('dbParamGroupId', ros.validateString)(properties.dbParamGroupId));
    errors.collect(ros.propertyValidator('burstingEnabled', ros.validateBoolean)(properties.burstingEnabled));
    errors.collect(ros.propertyValidator('coldDataEnabled', ros.validateBoolean)(properties.coldDataEnabled));
    errors.collect(ros.propertyValidator('zoneId', ros.validateString)(properties.zoneId));
    errors.collect(ros.propertyValidator('targetDedicatedHostIdForLog', ros.validateString)(properties.targetDedicatedHostIdForLog));
    errors.collect(ros.propertyValidator('allocatePublicConnection', ros.validateBoolean)(properties.allocatePublicConnection));
    errors.collect(ros.propertyValidator('securityGroupId', ros.validateString)(properties.securityGroupId));
    errors.collect(ros.propertyValidator('preferredBackupTime', ros.validateString)(properties.preferredBackupTime));
    if (properties.quantity && (typeof properties.quantity) !== 'object') {
        errors.collect(ros.propertyValidator('quantity', ros.validateRange)({
            data: properties.quantity,
            min: 1,
            max: 99,
        }));
    }
    errors.collect(ros.propertyValidator('quantity', ros.validateNumber)(properties.quantity));
    errors.collect(ros.propertyValidator('autoPay', ros.validateBoolean)(properties.autoPay));
    errors.collect(ros.propertyValidator('dbInstanceStorageType', ros.validateString)(properties.dbInstanceStorageType));
    if (properties.backUpCategory && (typeof properties.backUpCategory) !== 'object') {
        errors.collect(ros.propertyValidator('backUpCategory', ros.validateAllowedValues)({
            data: properties.backUpCategory,
            allowedValues: ["Flash", "Standard"],
        }));
    }
    errors.collect(ros.propertyValidator('backUpCategory', ros.validateString)(properties.backUpCategory));
    errors.collect(ros.propertyValidator('compressType', ros.validateNumber)(properties.compressType));
    errors.collect(ros.propertyValidator('logBackupFrequency', ros.validateString)(properties.logBackupFrequency));
    if (properties.connectionStringType && (typeof properties.connectionStringType) !== 'object') {
        errors.collect(ros.propertyValidator('connectionStringType', ros.validateAllowedValues)({
            data: properties.connectionStringType,
            allowedValues: ["Inner", "Public"],
        }));
    }
    errors.collect(ros.propertyValidator('connectionStringType', ros.validateString)(properties.connectionStringType));
    errors.collect(ros.propertyValidator('couponCode', ros.validateString)(properties.couponCode));
    if (properties.masterUserType && (typeof properties.masterUserType) !== 'object') {
        errors.collect(ros.propertyValidator('masterUserType', ros.validateAllowedValues)({
            data: properties.masterUserType,
            allowedValues: ["Normal", "Super", "Sysadmin"],
        }));
    }
    errors.collect(ros.propertyValidator('masterUserType', ros.validateString)(properties.masterUserType));
    errors.collect(ros.propertyValidator('serverlessConfig', RosPrepayDBInstance_ServerlessConfigPropertyValidator)(properties.serverlessConfig));
    errors.collect(ros.propertyValidator('enableBackupLog', ros.validateBoolean)(properties.enableBackupLog));
    if (properties.sqlCollectorStatus && (typeof properties.sqlCollectorStatus) !== 'object') {
        errors.collect(ros.propertyValidator('sqlCollectorStatus', ros.validateAllowedValues)({
            data: properties.sqlCollectorStatus,
            allowedValues: ["Enable", "Disabled"],
        }));
    }
    errors.collect(ros.propertyValidator('sqlCollectorStatus', ros.validateString)(properties.sqlCollectorStatus));
    errors.collect(ros.propertyValidator('backupRetentionPeriod', ros.validateNumber)(properties.backupRetentionPeriod));
    return errors.wrap('supplied properties not correct for "RosPrepayDBInstanceProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::RDS::PrepayDBInstance` resource
 *
 * @param properties - the TypeScript properties of a `RosPrepayDBInstanceProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::RDS::PrepayDBInstance` resource.
 */
// @ts-ignore TS6133
function rosPrepayDBInstancePropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosPrepayDBInstancePropsValidator(properties).assertSuccess();
    }
    return {
        'CommodityCode': ros.stringToRosTemplate(properties.commodityCode),
        'DBInstanceClass': ros.stringToRosTemplate(properties.dbInstanceClass),
        'DBInstanceStorage': ros.numberToRosTemplate(properties.dbInstanceStorage),
        'Engine': ros.stringToRosTemplate(properties.engine),
        'EngineVersion': ros.stringToRosTemplate(properties.engineVersion),
        'Period': ros.numberToRosTemplate(properties.period),
        'PeriodType': ros.stringToRosTemplate(properties.periodType),
        'AllocatePublicConnection': ros.booleanToRosTemplate(properties.allocatePublicConnection),
        'ArchiveBackupKeepCount': ros.numberToRosTemplate(properties.archiveBackupKeepCount),
        'ArchiveBackupKeepPolicy': ros.stringToRosTemplate(properties.archiveBackupKeepPolicy),
        'ArchiveBackupRetentionPeriod': ros.numberToRosTemplate(properties.archiveBackupRetentionPeriod),
        'AutoPay': ros.booleanToRosTemplate(properties.autoPay),
        'AutoRenew': ros.booleanToRosTemplate(properties.autoRenew),
        'BackUpCategory': ros.stringToRosTemplate(properties.backUpCategory),
        'BackupPolicyMode': ros.stringToRosTemplate(properties.backupPolicyMode),
        'BackupRetentionPeriod': ros.numberToRosTemplate(properties.backupRetentionPeriod),
        'BurstingEnabled': ros.booleanToRosTemplate(properties.burstingEnabled),
        'Category': ros.stringToRosTemplate(properties.category),
        'ColdDataEnabled': ros.booleanToRosTemplate(properties.coldDataEnabled),
        'CompressType': ros.numberToRosTemplate(properties.compressType),
        'ConnectionMode': ros.stringToRosTemplate(properties.connectionMode),
        'ConnectionStringPrefix': ros.stringToRosTemplate(properties.connectionStringPrefix),
        'ConnectionStringType': ros.stringToRosTemplate(properties.connectionStringType),
        'CouponCode': ros.stringToRosTemplate(properties.couponCode),
        'DBInstanceDescription': ros.stringToRosTemplate(properties.dbInstanceDescription),
        'DBInstanceNetType': ros.stringToRosTemplate(properties.dbInstanceNetType),
        'DBInstanceStorageType': ros.stringToRosTemplate(properties.dbInstanceStorageType),
        'DBIsIgnoreCase': ros.numberToRosTemplate(properties.dbIsIgnoreCase),
        'DBMappings': ros.listMapper(rosPrepayDBInstanceDBMappingsPropertyToRosTemplate)(properties.dbMappings),
        'DBParamGroupId': ros.stringToRosTemplate(properties.dbParamGroupId),
        'DBTimeZone': ros.stringToRosTemplate(properties.dbTimeZone),
        'DedicatedHostGroupId': ros.stringToRosTemplate(properties.dedicatedHostGroupId),
        'DeletionProtection': ros.booleanToRosTemplate(properties.deletionProtection),
        'EnableBackupLog': ros.booleanToRosTemplate(properties.enableBackupLog),
        'EncryptionKey': ros.stringToRosTemplate(properties.encryptionKey),
        'HighSpaceUsageProtection': ros.stringToRosTemplate(properties.highSpaceUsageProtection),
        'InstanceNetworkType': ros.stringToRosTemplate(properties.instanceNetworkType),
        'IoAccelerationEnabled': ros.stringToRosTemplate(properties.ioAccelerationEnabled),
        'LocalLogRetentionHours': ros.numberToRosTemplate(properties.localLogRetentionHours),
        'LocalLogRetentionSpace': ros.numberToRosTemplate(properties.localLogRetentionSpace),
        'LogBackupFrequency': ros.stringToRosTemplate(properties.logBackupFrequency),
        'LogBackupLocalRetentionNumber': ros.numberToRosTemplate(properties.logBackupLocalRetentionNumber),
        'LogBackupRetentionPeriod': ros.numberToRosTemplate(properties.logBackupRetentionPeriod),
        'MaintainTime': ros.stringToRosTemplate(properties.maintainTime),
        'MasterUsername': ros.stringToRosTemplate(properties.masterUsername),
        'MasterUserPassword': ros.stringToRosTemplate(properties.masterUserPassword),
        'MasterUserType': ros.stringToRosTemplate(properties.masterUserType),
        'MultiAZ': ros.booleanToRosTemplate(properties.multiAz),
        'Port': ros.numberToRosTemplate(properties.port),
        'PreferredBackupPeriod': ros.listMapper(ros.stringToRosTemplate)(properties.preferredBackupPeriod),
        'PreferredBackupTime': ros.stringToRosTemplate(properties.preferredBackupTime),
        'PrivateIpAddress': ros.stringToRosTemplate(properties.privateIpAddress),
        'Quantity': ros.numberToRosTemplate(properties.quantity),
        'ReleasedKeepPolicy': ros.stringToRosTemplate(properties.releasedKeepPolicy),
        'ResourceGroupId': ros.stringToRosTemplate(properties.resourceGroupId),
        'RoleARN': ros.stringToRosTemplate(properties.roleArn),
        'SecurityGroupId': ros.stringToRosTemplate(properties.securityGroupId),
        'ServerlessConfig': rosPrepayDBInstanceServerlessConfigPropertyToRosTemplate(properties.serverlessConfig),
        'SlaveZoneIds': ros.listMapper(ros.stringToRosTemplate)(properties.slaveZoneIds),
        'SQLCollectorStatus': ros.stringToRosTemplate(properties.sqlCollectorStatus),
        'SSLSetting': ros.stringToRosTemplate(properties.sslSetting),
        'StorageAutoScale': ros.stringToRosTemplate(properties.storageAutoScale),
        'StorageThreshold': ros.numberToRosTemplate(properties.storageThreshold),
        'StorageUpperBound': ros.numberToRosTemplate(properties.storageUpperBound),
        'Tags': ros.hashMapper(ros.objectToRosTemplate)(properties.tags),
        'TargetDedicatedHostIdForLog': ros.stringToRosTemplate(properties.targetDedicatedHostIdForLog),
        'TargetDedicatedHostIdForMaster': ros.stringToRosTemplate(properties.targetDedicatedHostIdForMaster),
        'TargetDedicatedHostIdForSlave': ros.stringToRosTemplate(properties.targetDedicatedHostIdForSlave),
        'VpcId': ros.stringToRosTemplate(properties.vpcId),
        'VSwitchId': ros.stringToRosTemplate(properties.vSwitchId),
        'ZoneId': ros.stringToRosTemplate(properties.zoneId),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::RDS::PrepayDBInstance`.
 * @Note This class does not contain additional functions, so it is recommended to use the `PrepayDBInstance` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-rds-prepaydbinstance
 */
class RosPrepayDBInstance extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosPrepayDBInstance.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrDbInstanceId = this.getAtt('DBInstanceId');
        this.attrInnerConnectionString = this.getAtt('InnerConnectionString');
        this.attrInnerIpAddress = this.getAtt('InnerIPAddress');
        this.attrInnerPort = this.getAtt('InnerPort');
        this.attrOrderId = this.getAtt('OrderId');
        this.attrPublicConnectionString = this.getAtt('PublicConnectionString');
        this.attrPublicIpAddress = this.getAtt('PublicIPAddress');
        this.attrPublicPort = this.getAtt('PublicPort');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.commodityCode = props.commodityCode;
        this.dbInstanceClass = props.dbInstanceClass;
        this.dbInstanceStorage = props.dbInstanceStorage;
        this.engine = props.engine;
        this.engineVersion = props.engineVersion;
        this.period = props.period;
        this.periodType = props.periodType;
        this.allocatePublicConnection = props.allocatePublicConnection;
        this.archiveBackupKeepCount = props.archiveBackupKeepCount;
        this.archiveBackupKeepPolicy = props.archiveBackupKeepPolicy;
        this.archiveBackupRetentionPeriod = props.archiveBackupRetentionPeriod;
        this.autoPay = props.autoPay;
        this.autoRenew = props.autoRenew;
        this.backUpCategory = props.backUpCategory;
        this.backupPolicyMode = props.backupPolicyMode;
        this.backupRetentionPeriod = props.backupRetentionPeriod;
        this.burstingEnabled = props.burstingEnabled;
        this.category = props.category;
        this.coldDataEnabled = props.coldDataEnabled;
        this.compressType = props.compressType;
        this.connectionMode = props.connectionMode;
        this.connectionStringPrefix = props.connectionStringPrefix;
        this.connectionStringType = props.connectionStringType;
        this.couponCode = props.couponCode;
        this.dbInstanceDescription = props.dbInstanceDescription;
        this.dbInstanceNetType = props.dbInstanceNetType;
        this.dbInstanceStorageType = props.dbInstanceStorageType;
        this.dbIsIgnoreCase = props.dbIsIgnoreCase;
        this.dbMappings = props.dbMappings;
        this.dbParamGroupId = props.dbParamGroupId;
        this.dbTimeZone = props.dbTimeZone;
        this.dedicatedHostGroupId = props.dedicatedHostGroupId;
        this.deletionProtection = props.deletionProtection;
        this.enableBackupLog = props.enableBackupLog;
        this.encryptionKey = props.encryptionKey;
        this.highSpaceUsageProtection = props.highSpaceUsageProtection;
        this.instanceNetworkType = props.instanceNetworkType;
        this.ioAccelerationEnabled = props.ioAccelerationEnabled;
        this.localLogRetentionHours = props.localLogRetentionHours;
        this.localLogRetentionSpace = props.localLogRetentionSpace;
        this.logBackupFrequency = props.logBackupFrequency;
        this.logBackupLocalRetentionNumber = props.logBackupLocalRetentionNumber;
        this.logBackupRetentionPeriod = props.logBackupRetentionPeriod;
        this.maintainTime = props.maintainTime;
        this.masterUsername = props.masterUsername;
        this.masterUserPassword = props.masterUserPassword;
        this.masterUserType = props.masterUserType;
        this.multiAz = props.multiAz;
        this.port = props.port;
        this.preferredBackupPeriod = props.preferredBackupPeriod;
        this.preferredBackupTime = props.preferredBackupTime;
        this.privateIpAddress = props.privateIpAddress;
        this.quantity = props.quantity;
        this.releasedKeepPolicy = props.releasedKeepPolicy;
        this.resourceGroupId = props.resourceGroupId;
        this.roleArn = props.roleArn;
        this.securityGroupId = props.securityGroupId;
        this.serverlessConfig = props.serverlessConfig;
        this.slaveZoneIds = props.slaveZoneIds;
        this.sqlCollectorStatus = props.sqlCollectorStatus;
        this.sslSetting = props.sslSetting;
        this.storageAutoScale = props.storageAutoScale;
        this.storageThreshold = props.storageThreshold;
        this.storageUpperBound = props.storageUpperBound;
        this.tags = props.tags;
        this.targetDedicatedHostIdForLog = props.targetDedicatedHostIdForLog;
        this.targetDedicatedHostIdForMaster = props.targetDedicatedHostIdForMaster;
        this.targetDedicatedHostIdForSlave = props.targetDedicatedHostIdForSlave;
        this.vpcId = props.vpcId;
        this.vSwitchId = props.vSwitchId;
        this.zoneId = props.zoneId;
    }
    get rosProperties() {
        return {
            commodityCode: this.commodityCode,
            dbInstanceClass: this.dbInstanceClass,
            dbInstanceStorage: this.dbInstanceStorage,
            engine: this.engine,
            engineVersion: this.engineVersion,
            period: this.period,
            periodType: this.periodType,
            allocatePublicConnection: this.allocatePublicConnection,
            archiveBackupKeepCount: this.archiveBackupKeepCount,
            archiveBackupKeepPolicy: this.archiveBackupKeepPolicy,
            archiveBackupRetentionPeriod: this.archiveBackupRetentionPeriod,
            autoPay: this.autoPay,
            autoRenew: this.autoRenew,
            backUpCategory: this.backUpCategory,
            backupPolicyMode: this.backupPolicyMode,
            backupRetentionPeriod: this.backupRetentionPeriod,
            burstingEnabled: this.burstingEnabled,
            category: this.category,
            coldDataEnabled: this.coldDataEnabled,
            compressType: this.compressType,
            connectionMode: this.connectionMode,
            connectionStringPrefix: this.connectionStringPrefix,
            connectionStringType: this.connectionStringType,
            couponCode: this.couponCode,
            dbInstanceDescription: this.dbInstanceDescription,
            dbInstanceNetType: this.dbInstanceNetType,
            dbInstanceStorageType: this.dbInstanceStorageType,
            dbIsIgnoreCase: this.dbIsIgnoreCase,
            dbMappings: this.dbMappings,
            dbParamGroupId: this.dbParamGroupId,
            dbTimeZone: this.dbTimeZone,
            dedicatedHostGroupId: this.dedicatedHostGroupId,
            deletionProtection: this.deletionProtection,
            enableBackupLog: this.enableBackupLog,
            encryptionKey: this.encryptionKey,
            highSpaceUsageProtection: this.highSpaceUsageProtection,
            instanceNetworkType: this.instanceNetworkType,
            ioAccelerationEnabled: this.ioAccelerationEnabled,
            localLogRetentionHours: this.localLogRetentionHours,
            localLogRetentionSpace: this.localLogRetentionSpace,
            logBackupFrequency: this.logBackupFrequency,
            logBackupLocalRetentionNumber: this.logBackupLocalRetentionNumber,
            logBackupRetentionPeriod: this.logBackupRetentionPeriod,
            maintainTime: this.maintainTime,
            masterUsername: this.masterUsername,
            masterUserPassword: this.masterUserPassword,
            masterUserType: this.masterUserType,
            multiAz: this.multiAz,
            port: this.port,
            preferredBackupPeriod: this.preferredBackupPeriod,
            preferredBackupTime: this.preferredBackupTime,
            privateIpAddress: this.privateIpAddress,
            quantity: this.quantity,
            releasedKeepPolicy: this.releasedKeepPolicy,
            resourceGroupId: this.resourceGroupId,
            roleArn: this.roleArn,
            securityGroupId: this.securityGroupId,
            serverlessConfig: this.serverlessConfig,
            slaveZoneIds: this.slaveZoneIds,
            sqlCollectorStatus: this.sqlCollectorStatus,
            sslSetting: this.sslSetting,
            storageAutoScale: this.storageAutoScale,
            storageThreshold: this.storageThreshold,
            storageUpperBound: this.storageUpperBound,
            tags: this.tags,
            targetDedicatedHostIdForLog: this.targetDedicatedHostIdForLog,
            targetDedicatedHostIdForMaster: this.targetDedicatedHostIdForMaster,
            targetDedicatedHostIdForSlave: this.targetDedicatedHostIdForSlave,
            vpcId: this.vpcId,
            vSwitchId: this.vSwitchId,
            zoneId: this.zoneId,
        };
    }
    renderProperties(props) {
        return rosPrepayDBInstancePropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosPrepayDBInstance = RosPrepayDBInstance;
/**
 * The resource type name for this resource class.
 */
RosPrepayDBInstance.ROS_RESOURCE_TYPE_NAME = "ALIYUN::RDS::PrepayDBInstance";
/**
 * Determine whether the given properties match those of a `DBMappingsProperty`
 *
 * @param properties - the TypeScript properties of a `DBMappingsProperty`
 *
 * @returns the result of the validation.
 */
function RosPrepayDBInstance_DBMappingsPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('characterSetName', ros.requiredValidator)(properties.characterSetName));
    errors.collect(ros.propertyValidator('characterSetName', ros.validateString)(properties.characterSetName));
    if (properties.dbDescription && (Array.isArray(properties.dbDescription) || (typeof properties.dbDescription) === 'string')) {
        errors.collect(ros.propertyValidator('dbDescription', ros.validateLength)({
            data: properties.dbDescription.length,
            min: undefined,
            max: 256,
        }));
    }
    errors.collect(ros.propertyValidator('dbDescription', ros.validateString)(properties.dbDescription));
    errors.collect(ros.propertyValidator('dbName', ros.requiredValidator)(properties.dbName));
    errors.collect(ros.propertyValidator('dbName', ros.validateString)(properties.dbName));
    return errors.wrap('supplied properties not correct for "DBMappingsProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::RDS::PrepayDBInstance.DBMappings` resource
 *
 * @param properties - the TypeScript properties of a `DBMappingsProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::RDS::PrepayDBInstance.DBMappings` resource.
 */
// @ts-ignore TS6133
function rosPrepayDBInstanceDBMappingsPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosPrepayDBInstance_DBMappingsPropertyValidator(properties).assertSuccess();
    return {
        'CharacterSetName': ros.stringToRosTemplate(properties.characterSetName),
        'DBDescription': ros.stringToRosTemplate(properties.dbDescription),
        'DBName': ros.stringToRosTemplate(properties.dbName),
    };
}
/**
 * Determine whether the given properties match those of a `ServerlessConfigProperty`
 *
 * @param properties - the TypeScript properties of a `ServerlessConfigProperty`
 *
 * @returns the result of the validation.
 */
function RosPrepayDBInstance_ServerlessConfigPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('switchForce', ros.validateBoolean)(properties.switchForce));
    errors.collect(ros.propertyValidator('minCapacity', ros.requiredValidator)(properties.minCapacity));
    if (properties.minCapacity && (typeof properties.minCapacity) !== 'object') {
        errors.collect(ros.propertyValidator('minCapacity', ros.validateRange)({
            data: properties.minCapacity,
            min: 0.5,
            max: 8,
        }));
    }
    errors.collect(ros.propertyValidator('minCapacity', ros.validateNumber)(properties.minCapacity));
    errors.collect(ros.propertyValidator('autoPause', ros.validateBoolean)(properties.autoPause));
    errors.collect(ros.propertyValidator('maxCapacity', ros.requiredValidator)(properties.maxCapacity));
    if (properties.maxCapacity && (typeof properties.maxCapacity) !== 'object') {
        errors.collect(ros.propertyValidator('maxCapacity', ros.validateRange)({
            data: properties.maxCapacity,
            min: 0.5,
            max: 8,
        }));
    }
    errors.collect(ros.propertyValidator('maxCapacity', ros.validateNumber)(properties.maxCapacity));
    return errors.wrap('supplied properties not correct for "ServerlessConfigProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::RDS::PrepayDBInstance.ServerlessConfig` resource
 *
 * @param properties - the TypeScript properties of a `ServerlessConfigProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::RDS::PrepayDBInstance.ServerlessConfig` resource.
 */
// @ts-ignore TS6133
function rosPrepayDBInstanceServerlessConfigPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosPrepayDBInstance_ServerlessConfigPropertyValidator(properties).assertSuccess();
    return {
        'SwitchForce': ros.booleanToRosTemplate(properties.switchForce),
        'MinCapacity': ros.numberToRosTemplate(properties.minCapacity),
        'AutoPause': ros.booleanToRosTemplate(properties.autoPause),
        'MaxCapacity': ros.numberToRosTemplate(properties.maxCapacity),
    };
}
/**
 * Determine whether the given properties match those of a `RosReadOnlyDBInstanceProps`
 *
 * @param properties - the TypeScript properties of a `RosReadOnlyDBInstanceProps`
 *
 * @returns the result of the validation.
 */
function RosReadOnlyDBInstancePropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    if (properties.periodType && (typeof properties.periodType) !== 'object') {
        errors.collect(ros.propertyValidator('periodType', ros.validateAllowedValues)({
            data: properties.periodType,
            allowedValues: ["Month", "Year"],
        }));
    }
    errors.collect(ros.propertyValidator('periodType', ros.validateString)(properties.periodType));
    errors.collect(ros.propertyValidator('targetDedicatedHostIdForMaster', ros.validateString)(properties.targetDedicatedHostIdForMaster));
    if (properties.category && (typeof properties.category) !== 'object') {
        errors.collect(ros.propertyValidator('category', ros.validateAllowedValues)({
            data: properties.category,
            allowedValues: ["Basic", "HighAvailability", "AlwaysOn", "Finance"],
        }));
    }
    errors.collect(ros.propertyValidator('category', ros.validateString)(properties.category));
    errors.collect(ros.propertyValidator('engineVersion', ros.requiredValidator)(properties.engineVersion));
    errors.collect(ros.propertyValidator('engineVersion', ros.validateString)(properties.engineVersion));
    errors.collect(ros.propertyValidator('privateIpAddress', ros.validateString)(properties.privateIpAddress));
    errors.collect(ros.propertyValidator('resourceGroupId', ros.validateString)(properties.resourceGroupId));
    errors.collect(ros.propertyValidator('zoneId', ros.requiredValidator)(properties.zoneId));
    errors.collect(ros.propertyValidator('zoneId', ros.validateString)(properties.zoneId));
    errors.collect(ros.propertyValidator('vpcId', ros.validateString)(properties.vpcId));
    errors.collect(ros.propertyValidator('dbInstanceClass', ros.requiredValidator)(properties.dbInstanceClass));
    errors.collect(ros.propertyValidator('dbInstanceClass', ros.validateString)(properties.dbInstanceClass));
    errors.collect(ros.propertyValidator('dedicatedHostGroupId', ros.validateString)(properties.dedicatedHostGroupId));
    errors.collect(ros.propertyValidator('autoRenew', ros.validateBoolean)(properties.autoRenew));
    errors.collect(ros.propertyValidator('vSwitchId', ros.validateString)(properties.vSwitchId));
    if (properties.period && (typeof properties.period) !== 'object') {
        errors.collect(ros.propertyValidator('period', ros.validateAllowedValues)({
            data: properties.period,
            allowedValues: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 24, 36, 48, 60],
        }));
    }
    errors.collect(ros.propertyValidator('period', ros.validateNumber)(properties.period));
    if (properties.payType && (typeof properties.payType) !== 'object') {
        errors.collect(ros.propertyValidator('payType', ros.validateAllowedValues)({
            data: properties.payType,
            allowedValues: ["PayAsYouGo", "PostPaid", "PayOnDemand", "Postpaid", "PostPay", "Postpay", "POSTPAY", "POST", "Subscription", "PrePaid", "Prepaid", "PrePay", "Prepay", "PREPAY", "PRE"],
        }));
    }
    errors.collect(ros.propertyValidator('payType', ros.validateString)(properties.payType));
    errors.collect(ros.propertyValidator('deletionProtection', ros.validateBoolean)(properties.deletionProtection));
    errors.collect(ros.propertyValidator('dbInstanceStorageType', ros.validateString)(properties.dbInstanceStorageType));
    errors.collect(ros.propertyValidator('dbInstanceId', ros.requiredValidator)(properties.dbInstanceId));
    errors.collect(ros.propertyValidator('dbInstanceId', ros.validateString)(properties.dbInstanceId));
    errors.collect(ros.propertyValidator('dbInstanceStorage', ros.requiredValidator)(properties.dbInstanceStorage));
    errors.collect(ros.propertyValidator('dbInstanceStorage', ros.validateNumber)(properties.dbInstanceStorage));
    errors.collect(ros.propertyValidator('dbInstanceDescription', ros.validateString)(properties.dbInstanceDescription));
    errors.collect(ros.propertyValidator('tags', ros.hashValidator(ros.validateAny))(properties.tags));
    return errors.wrap('supplied properties not correct for "RosReadOnlyDBInstanceProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::RDS::ReadOnlyDBInstance` resource
 *
 * @param properties - the TypeScript properties of a `RosReadOnlyDBInstanceProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::RDS::ReadOnlyDBInstance` resource.
 */
// @ts-ignore TS6133
function rosReadOnlyDBInstancePropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosReadOnlyDBInstancePropsValidator(properties).assertSuccess();
    }
    return {
        'DBInstanceClass': ros.stringToRosTemplate(properties.dbInstanceClass),
        'DBInstanceId': ros.stringToRosTemplate(properties.dbInstanceId),
        'DBInstanceStorage': ros.numberToRosTemplate(properties.dbInstanceStorage),
        'EngineVersion': ros.stringToRosTemplate(properties.engineVersion),
        'ZoneId': ros.stringToRosTemplate(properties.zoneId),
        'AutoRenew': ros.booleanToRosTemplate(properties.autoRenew),
        'Category': ros.stringToRosTemplate(properties.category),
        'DBInstanceDescription': ros.stringToRosTemplate(properties.dbInstanceDescription),
        'DBInstanceStorageType': ros.stringToRosTemplate(properties.dbInstanceStorageType),
        'DedicatedHostGroupId': ros.stringToRosTemplate(properties.dedicatedHostGroupId),
        'DeletionProtection': ros.booleanToRosTemplate(properties.deletionProtection),
        'PayType': ros.stringToRosTemplate(properties.payType),
        'Period': ros.numberToRosTemplate(properties.period),
        'PeriodType': ros.stringToRosTemplate(properties.periodType),
        'PrivateIpAddress': ros.stringToRosTemplate(properties.privateIpAddress),
        'ResourceGroupId': ros.stringToRosTemplate(properties.resourceGroupId),
        'Tags': ros.hashMapper(ros.objectToRosTemplate)(properties.tags),
        'TargetDedicatedHostIdForMaster': ros.stringToRosTemplate(properties.targetDedicatedHostIdForMaster),
        'VPCId': ros.stringToRosTemplate(properties.vpcId),
        'VSwitchId': ros.stringToRosTemplate(properties.vSwitchId),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::RDS::ReadOnlyDBInstance`.
 * @Note This class does not contain additional functions, so it is recommended to use the `ReadOnlyDBInstance` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-rds-readonlydbinstance
 */
class RosReadOnlyDBInstance extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosReadOnlyDBInstance.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrConnectionString = this.getAtt('ConnectionString');
        this.attrDbInstanceId = this.getAtt('DBInstanceId');
        this.attrPort = this.getAtt('Port');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.dbInstanceClass = props.dbInstanceClass;
        this.dbInstanceId = props.dbInstanceId;
        this.dbInstanceStorage = props.dbInstanceStorage;
        this.engineVersion = props.engineVersion;
        this.zoneId = props.zoneId;
        this.autoRenew = props.autoRenew;
        this.category = props.category;
        this.dbInstanceDescription = props.dbInstanceDescription;
        this.dbInstanceStorageType = props.dbInstanceStorageType;
        this.dedicatedHostGroupId = props.dedicatedHostGroupId;
        this.deletionProtection = props.deletionProtection;
        this.payType = props.payType;
        this.period = props.period;
        this.periodType = props.periodType;
        this.privateIpAddress = props.privateIpAddress;
        this.resourceGroupId = props.resourceGroupId;
        this.tags = props.tags;
        this.targetDedicatedHostIdForMaster = props.targetDedicatedHostIdForMaster;
        this.vpcId = props.vpcId;
        this.vSwitchId = props.vSwitchId;
    }
    get rosProperties() {
        return {
            dbInstanceClass: this.dbInstanceClass,
            dbInstanceId: this.dbInstanceId,
            dbInstanceStorage: this.dbInstanceStorage,
            engineVersion: this.engineVersion,
            zoneId: this.zoneId,
            autoRenew: this.autoRenew,
            category: this.category,
            dbInstanceDescription: this.dbInstanceDescription,
            dbInstanceStorageType: this.dbInstanceStorageType,
            dedicatedHostGroupId: this.dedicatedHostGroupId,
            deletionProtection: this.deletionProtection,
            payType: this.payType,
            period: this.period,
            periodType: this.periodType,
            privateIpAddress: this.privateIpAddress,
            resourceGroupId: this.resourceGroupId,
            tags: this.tags,
            targetDedicatedHostIdForMaster: this.targetDedicatedHostIdForMaster,
            vpcId: this.vpcId,
            vSwitchId: this.vSwitchId,
        };
    }
    renderProperties(props) {
        return rosReadOnlyDBInstancePropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosReadOnlyDBInstance = RosReadOnlyDBInstance;
/**
 * The resource type name for this resource class.
 */
RosReadOnlyDBInstance.ROS_RESOURCE_TYPE_NAME = "ALIYUN::RDS::ReadOnlyDBInstance";
//# sourceMappingURL=data:application/json;base64,