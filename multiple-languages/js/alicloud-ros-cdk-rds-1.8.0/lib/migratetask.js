"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MigrateTask = exports.MigrateTaskProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const rds_generated_1 = require("./rds.generated");
Object.defineProperty(exports, "MigrateTaskProperty", { enumerable: true, get: function () { return rds_generated_1.RosMigrateTask; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::RDS::MigrateTask`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosMigrateTask`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-rds-migratetask
 */
class MigrateTask extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosMigrateTask = new rds_generated_1.RosMigrateTask(this, id, {
            isOnlineDb: props.isOnlineDb,
            dbInstanceId: props.dbInstanceId,
            ossObjectPositions: props.ossObjectPositions,
            checkDbMode: props.checkDbMode,
            backupMode: props.backupMode,
            dbName: props.dbName,
            ossUrls: props.ossUrls,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosMigrateTask;
        this.attrDbName = rosMigrateTask.attrDbName;
        this.attrMigrateTaskId = rosMigrateTask.attrMigrateTaskId;
    }
}
exports.MigrateTask = MigrateTask;
//# sourceMappingURL=data:application/json;base64,