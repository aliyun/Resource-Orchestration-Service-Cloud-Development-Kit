"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ControlPolicy = exports.ControlPolicyProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const cloudfw_generated_1 = require("./cloudfw.generated");
Object.defineProperty(exports, "ControlPolicyProperty", { enumerable: true, get: function () { return cloudfw_generated_1.RosControlPolicy; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::CLOUDFW::ControlPolicy`, which is used to add an access control policy.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosControlPolicy`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-cloudfw-controlpolicy
 */
class ControlPolicy extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosControlPolicy = new cloudfw_generated_1.RosControlPolicy(this, id, {
            destination: props.destination,
            description: props.description,
            applicationName: props.applicationName,
            endTime: props.endTime,
            ipVersion: props.ipVersion,
            sourceType: props.sourceType,
            destPort: props.destPort,
            applicationNameList: props.applicationNameList,
            startTime: props.startTime,
            aclAction: props.aclAction,
            destinationType: props.destinationType,
            direction: props.direction,
            source: props.source,
            destPortType: props.destPortType,
            proto: props.proto,
            repeatEndTime: props.repeatEndTime,
            domainResolveType: props.domainResolveType,
            repeatDays: props.repeatDays,
            repeatType: props.repeatType,
            regionId: props.regionId === undefined || props.regionId === null ? 'cn-hangzhou' : props.regionId,
            repeatStartTime: props.repeatStartTime,
            release: props.release,
            newOrder: props.newOrder,
            destPortGroup: props.destPortGroup,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosControlPolicy;
        this.attrAclUuid = rosControlPolicy.attrAclUuid;
    }
}
exports.ControlPolicy = ControlPolicy;
//# sourceMappingURL=data:application/json;base64,