"use strict";
// Generated from the AliCloud ROS Resource Specification
Object.defineProperty(exports, "__esModule", { value: true });
exports.RosStackInstance = exports.RosStackGroups = void 0;
const ros = require("@alicloud/ros-cdk-core");
/**
 * Determine whether the given properties match those of a `RosStackGroupsProps`
 *
 * @param properties - the TypeScript properties of a `RosStackGroupsProps`
 *
 * @returns the result of the validation.
 */
function RosStackGroupsPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('resourceGroupId', ros.validateString)(properties.resourceGroupId));
    if (properties.refreshOptions && (typeof properties.refreshOptions) !== 'object') {
        errors.collect(ros.propertyValidator('refreshOptions', ros.validateAllowedValues)({
            data: properties.refreshOptions,
            allowedValues: ["Always", "Never"],
        }));
    }
    errors.collect(ros.propertyValidator('refreshOptions', ros.validateString)(properties.refreshOptions));
    return errors.wrap('supplied properties not correct for "RosStackGroupsProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `DATASOURCE::ROS::StackGroups` resource
 *
 * @param properties - the TypeScript properties of a `RosStackGroupsProps`
 *
 * @returns the AliCloud ROS Resource properties of an `DATASOURCE::ROS::StackGroups` resource.
 */
// @ts-ignore TS6133
function rosStackGroupsPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosStackGroupsPropsValidator(properties).assertSuccess();
    }
    return {
        RefreshOptions: ros.stringToRosTemplate(properties.refreshOptions),
        ResourceGroupId: ros.stringToRosTemplate(properties.resourceGroupId),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `DATASOURCE::ROS::StackGroups`, which is used to query the details of stack groups.
 * @Note This class does not contain additional functions, so it is recommended to use the `StackGroups` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/datasource-ros-stackgroups
 */
class RosStackGroups extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosStackGroups.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrStackGroupNames = this.getAtt('StackGroupNames');
        this.attrStackGroups = this.getAtt('StackGroups');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.refreshOptions = props.refreshOptions;
        this.resourceGroupId = props.resourceGroupId;
    }
    get rosProperties() {
        return {
            refreshOptions: this.refreshOptions,
            resourceGroupId: this.resourceGroupId,
        };
    }
    renderProperties(props) {
        return rosStackGroupsPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosStackGroups = RosStackGroups;
/**
 * The resource type name for this resource class.
 */
RosStackGroups.ROS_RESOURCE_TYPE_NAME = "DATASOURCE::ROS::StackGroups";
/**
 * Determine whether the given properties match those of a `RosStackInstanceProps`
 *
 * @param properties - the TypeScript properties of a `RosStackInstanceProps`
 *
 * @returns the result of the validation.
 */
function RosStackInstancePropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('stackInstanceAccountId', ros.requiredValidator)(properties.stackInstanceAccountId));
    errors.collect(ros.propertyValidator('stackInstanceAccountId', ros.validateString)(properties.stackInstanceAccountId));
    errors.collect(ros.propertyValidator('stackGroupName', ros.requiredValidator)(properties.stackGroupName));
    errors.collect(ros.propertyValidator('stackGroupName', ros.validateString)(properties.stackGroupName));
    errors.collect(ros.propertyValidator('stackInstanceRegionId', ros.requiredValidator)(properties.stackInstanceRegionId));
    errors.collect(ros.propertyValidator('stackInstanceRegionId', ros.validateString)(properties.stackInstanceRegionId));
    errors.collect(ros.propertyValidator('outputOption', ros.validateString)(properties.outputOption));
    if (properties.refreshOptions && (typeof properties.refreshOptions) !== 'object') {
        errors.collect(ros.propertyValidator('refreshOptions', ros.validateAllowedValues)({
            data: properties.refreshOptions,
            allowedValues: ["Always", "Never"],
        }));
    }
    errors.collect(ros.propertyValidator('refreshOptions', ros.validateString)(properties.refreshOptions));
    return errors.wrap('supplied properties not correct for "RosStackInstanceProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `DATASOURCE::ROS::StackInstance` resource
 *
 * @param properties - the TypeScript properties of a `RosStackInstanceProps`
 *
 * @returns the AliCloud ROS Resource properties of an `DATASOURCE::ROS::StackInstance` resource.
 */
// @ts-ignore TS6133
function rosStackInstancePropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosStackInstancePropsValidator(properties).assertSuccess();
    }
    return {
        StackGroupName: ros.stringToRosTemplate(properties.stackGroupName),
        StackInstanceAccountId: ros.stringToRosTemplate(properties.stackInstanceAccountId),
        StackInstanceRegionId: ros.stringToRosTemplate(properties.stackInstanceRegionId),
        OutputOption: ros.stringToRosTemplate(properties.outputOption),
        RefreshOptions: ros.stringToRosTemplate(properties.refreshOptions),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `DATASOURCE::ROS::StackInstance`, which is used to query the information about a stack instance that is associated with a stack group.
 * @Note This class does not contain additional functions, so it is recommended to use the `StackInstance` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/datasource-ros-stackinstance
 */
class RosStackInstance extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosStackInstance.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrAccountId = this.getAtt('AccountId');
        this.attrDriftDetectionTime = this.getAtt('DriftDetectionTime');
        this.attrOutputs = this.getAtt('Outputs');
        this.attrParameterOverrides = this.getAtt('ParameterOverrides');
        this.attrRdFolderId = this.getAtt('RdFolderId');
        this.attrRegionId = this.getAtt('RegionId');
        this.attrStackDriftStatus = this.getAtt('StackDriftStatus');
        this.attrStackGroupId = this.getAtt('StackGroupId');
        this.attrStackGroupName = this.getAtt('StackGroupName');
        this.attrStackId = this.getAtt('StackId');
        this.attrStatus = this.getAtt('Status');
        this.attrStatusReason = this.getAtt('StatusReason');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.stackGroupName = props.stackGroupName;
        this.stackInstanceAccountId = props.stackInstanceAccountId;
        this.stackInstanceRegionId = props.stackInstanceRegionId;
        this.outputOption = props.outputOption;
        this.refreshOptions = props.refreshOptions;
    }
    get rosProperties() {
        return {
            stackGroupName: this.stackGroupName,
            stackInstanceAccountId: this.stackInstanceAccountId,
            stackInstanceRegionId: this.stackInstanceRegionId,
            outputOption: this.outputOption,
            refreshOptions: this.refreshOptions,
        };
    }
    renderProperties(props) {
        return rosStackInstancePropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosStackInstance = RosStackInstance;
/**
 * The resource type name for this resource class.
 */
RosStackInstance.ROS_RESOURCE_TYPE_NAME = "DATASOURCE::ROS::StackInstance";
//# sourceMappingURL=data:application/json;base64,