"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Application = exports.ApplicationProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const sae_generated_1 = require("./sae.generated");
Object.defineProperty(exports, "ApplicationProperty", { enumerable: true, get: function () { return sae_generated_1.RosApplication; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::SAE::Application`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosApplication`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-sae-application
 */
class Application extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosApplication = new sae_generated_1.RosApplication(this, id, {
            timezone: props.timezone,
            phpConfig: props.phpConfig,
            mountDesc: props.mountDesc,
            microRegistrationConfig: props.microRegistrationConfig,
            liveness: props.liveness,
            warStartOptions: props.warStartOptions,
            memory: props.memory,
            webContainer: props.webContainer,
            cpu: props.cpu,
            nasConfigs: props.nasConfigs,
            jarStartArgs: props.jarStartArgs,
            preStop: props.preStop,
            phpArmsConfigLocation: props.phpArmsConfigLocation,
            packageType: props.packageType,
            autoConfig: props.autoConfig,
            tags: props.tags,
            python: props.python,
            ossAkSecret: props.ossAkSecret,
            vSwitchId: props.vSwitchId,
            imageUrl: props.imageUrl,
            postStart: props.postStart,
            baseAppId: props.baseAppId,
            configMapMountDesc: props.configMapMountDesc,
            vpcId: props.vpcId,
            enableEbpf: props.enableEbpf,
            edasContainerVersion: props.edasContainerVersion,
            serviceTags: props.serviceTags,
            namespaceId: props.namespaceId,
            tomcatConfig: props.tomcatConfig,
            appDescription: props.appDescription,
            nasId: props.nasId,
            pythonModules: props.pythonModules,
            acrInstanceId: props.acrInstanceId,
            kafkaConfigs: props.kafkaConfigs,
            slsConfigs: props.slsConfigs,
            ossAkId: props.ossAkId,
            ossMountDescs: props.ossMountDescs,
            deploy: props.deploy,
            packageVersion: props.packageVersion,
            appName: props.appName,
            jdk: props.jdk,
            readiness: props.readiness,
            microRegistration: props.microRegistration,
            php: props.php,
            commandArgs: props.commandArgs,
            acrAssumeRoleArn: props.acrAssumeRoleArn,
            saeVersion: props.saeVersion,
            terminationGracePeriodSeconds: props.terminationGracePeriodSeconds,
            envs: props.envs,
            securityGroupId: props.securityGroupId,
            pvtzDiscoverySvc: props.pvtzDiscoverySvc,
            jarStartOptions: props.jarStartOptions,
            imagePullSecrets: props.imagePullSecrets,
            mountHost: props.mountHost,
            replicas: props.replicas,
            customHostAlias: props.customHostAlias,
            appSource: props.appSource,
            associateEip: props.associateEip,
            command: props.command,
            packageUrl: props.packageUrl,
            phpConfigLocation: props.phpConfigLocation,
            programmingLanguage: props.programmingLanguage,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosApplication;
        this.attrAppId = rosApplication.attrAppId;
        this.attrChangeOrderId = rosApplication.attrChangeOrderId;
    }
}
exports.Application = Application;
//# sourceMappingURL=data:application/json;base64,