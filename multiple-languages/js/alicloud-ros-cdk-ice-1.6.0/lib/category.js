"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Category = exports.CategoryProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ice_generated_1 = require("./ice.generated");
Object.defineProperty(exports, "CategoryProperty", { enumerable: true, get: function () { return ice_generated_1.RosCategory; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::ICE::Category`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosCategory`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-ice-category
 */
class Category extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosCategory = new ice_generated_1.RosCategory(this, id, {
            parentId: props.parentId,
            type: props.type,
            cateName: props.cateName,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosCategory;
        this.attrCateId = rosCategory.attrCateId;
        this.attrLevel = rosCategory.attrLevel;
        this.attrParentId = rosCategory.attrParentId;
    }
}
exports.Category = Category;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2F0ZWdvcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjYXRlZ29yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw4Q0FBOEM7QUFDOUMsbURBQThDO0FBRXRCLGlHQUZmLDJCQUFXLE9BRW9CO0FBaUR4Qzs7OztHQUlHO0FBQ0gsTUFBYSxRQUFTLFNBQVEsR0FBRyxDQUFDLFFBQVE7SUFxQnRDOzs7O09BSUc7SUFDSCxZQUFZLEtBQW9CLEVBQUUsRUFBVSxFQUFFLEtBQW9CLEVBQUUsbUNBQTJDLElBQUk7UUFDL0csS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNqQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUNiLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxnQ0FBZ0MsR0FBRyxnQ0FBZ0MsQ0FBQztRQUV6RSxNQUFNLFdBQVcsR0FBRyxJQUFJLDJCQUFXLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRztZQUMzQyxRQUFRLEVBQUUsS0FBSyxDQUFDLFFBQVE7WUFDeEIsSUFBSSxFQUFFLEtBQUssQ0FBQyxJQUFJO1lBQ2hCLFFBQVEsRUFBRSxLQUFLLENBQUMsUUFBUTtTQUMzQixFQUFFLGdDQUFnQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztRQUNwRixJQUFJLENBQUMsUUFBUSxHQUFHLFdBQVcsQ0FBQztRQUM1QixJQUFJLENBQUMsVUFBVSxHQUFHLFdBQVcsQ0FBQyxVQUFVLENBQUM7UUFDekMsSUFBSSxDQUFDLFNBQVMsR0FBRyxXQUFXLENBQUMsU0FBUyxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxZQUFZLEdBQUcsV0FBVyxDQUFDLFlBQVksQ0FBQztJQUNqRCxDQUFDO0NBQ0o7QUEzQ0QsNEJBMkNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcm9zIGZyb20gJ0BhbGljbG91ZC9yb3MtY2RrLWNvcmUnO1xuaW1wb3J0IHsgUm9zQ2F0ZWdvcnkgfSBmcm9tICcuL2ljZS5nZW5lcmF0ZWQnO1xuLy8gR2VuZXJhdGVkIGZyb20gdGhlIEFsaUNsb3VkIFJPUyBSZXNvdXJjZSBTcGVjaWZpY2F0aW9uXG5leHBvcnQgeyBSb3NDYXRlZ29yeSBhcyBDYXRlZ29yeVByb3BlcnR5IH07XG5cbi8qKlxuICogUHJvcGVydGllcyBmb3IgZGVmaW5pbmcgYSBgQ2F0ZWdvcnlgLlxuICogU2VlIGh0dHBzOi8vd3d3LmFsaWJhYmFjbG91ZC5jb20vaGVscC9yb3MvZGV2ZWxvcGVyLXJlZmVyZW5jZS9hbGl5dW4taWNlLWNhdGVnb3J5XG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQ2F0ZWdvcnlQcm9wcyB7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBjYXRlTmFtZTogVGhlIGNhdGVnb3J5IG5hbWUuXG4gICAgICogVGhlIHZhbHVlIGNhbiBiZSB1cCB0byA2NCBieXRlcyBpbiBsZW5ndGguXG4gICAgICogVGhlIHZhbHVlIG11c3QgYmUgZW5jb2RlZCBpbiBVVEYtOC5cbiAgICAgKi9cbiAgICByZWFkb25seSBjYXRlTmFtZTogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgcGFyZW50SWQ6IFRoZSBJRCBvZiB0aGUgcGFyZW50IGNhdGVnb3J5LlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHBhcmVudElkPzogbnVtYmVyIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgdHlwZTogVGhlIHR5cGUgb2YgdGhlIGNhdGVnb3J5LiBWYWxpZCB2YWx1ZXM6XG4gICAgICogZGVmYXVsdDogYXVkaW8sIHZpZGVvLCBhbmQgaW1hZ2UgZmlsZXMuIFRoaXMgaXMgdGhlIGRlZmF1bHQgdmFsdWUuXG4gICAgICogbWF0ZXJpYWw6IHNob3J0IHZpZGVvIG1hdGVyaWFscy5cbiAgICAgKi9cbiAgICByZWFkb25seSB0eXBlPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xufVxuXG4vKipcbiAqIFJlcHJlc2VudHMgYSBgQ2F0ZWdvcnlgLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIElDYXRlZ29yeSBleHRlbmRzIHJvcy5JUmVzb3VyY2Uge1xuICAgIHJlYWRvbmx5IHByb3BzOiBDYXRlZ29yeVByb3BzO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIENhdGVJZDogVGhlIElEIG9mIHRoZSBjYXRlZ29yeS5cbiAgICAgKi9cbiAgICByZWFkb25seSBhdHRyQ2F0ZUlkOiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgTGV2ZWw6IFRoZSBsZXZlbCBvZiB0aGUgY2F0ZWdvcnkuIFRoZSBwcmltYXJ5IGNsYXNzaWZpY2F0aW9uIGxldmVsIGlzIDAsIHRoZSBzZWNvbmRhcnkgY2xhc3NpZmljYXRpb24gbGV2ZWwgaXMgMSwgYW5kIHRoZSB0ZXJ0aWFyeSBjbGFzc2lmaWNhdGlvbiBsZXZlbCBpcyAyLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGF0dHJMZXZlbDogcm9zLklSZXNvbHZhYmxlIHwgc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIFBhcmVudElkOiBUaGUgSUQgb2YgdGhlIHBhcmVudCBjYXRlZ29yeS5cbiAgICAgKi9cbiAgICByZWFkb25seSBhdHRyUGFyZW50SWQ6IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcbn1cbi8qKlxuICogVGhpcyBjbGFzcyBlbmNhcHN1bGF0ZXMgYW5kIGV4dGVuZHMgdGhlIFJPUyByZXNvdXJjZSB0eXBlIGBBTElZVU46OklDRTo6Q2F0ZWdvcnlgLlxuICogQE5vdGUgVGhpcyBjbGFzcyBtYXkgaGF2ZSBzb21lIG5ldyBmdW5jdGlvbnMgdG8gZmFjaWxpdGF0ZSBkZXZlbG9wbWVudCwgc28gaXQgaXMgcmVjb21tZW5kZWQgdG8gdXNlIHRoaXMgY2xhc3MgaW5zdGVhZCBvZiBgUm9zQ2F0ZWdvcnlgZm9yIGEgbW9yZSBjb252ZW5pZW50IGRldmVsb3BtZW50IGV4cGVyaWVuY2UuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2FsaXl1bi1pY2UtY2F0ZWdvcnlcbiAqL1xuZXhwb3J0IGNsYXNzIENhdGVnb3J5IGV4dGVuZHMgcm9zLlJlc291cmNlIGltcGxlbWVudHMgSUNhdGVnb3J5IHtcbiAgICBwcm90ZWN0ZWQgc2NvcGU6IHJvcy5Db25zdHJ1Y3Q7XG4gICAgcHJvdGVjdGVkIGlkOiBzdHJpbmc7XG4gICAgcHVibGljIHJlYWRvbmx5IHByb3BzOiBDYXRlZ29yeVByb3BzO1xuICAgIHByb3RlY3RlZCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBDYXRlSWQ6IFRoZSBJRCBvZiB0aGUgY2F0ZWdvcnkuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJDYXRlSWQ6IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBMZXZlbDogVGhlIGxldmVsIG9mIHRoZSBjYXRlZ29yeS4gVGhlIHByaW1hcnkgY2xhc3NpZmljYXRpb24gbGV2ZWwgaXMgMCwgdGhlIHNlY29uZGFyeSBjbGFzc2lmaWNhdGlvbiBsZXZlbCBpcyAxLCBhbmQgdGhlIHRlcnRpYXJ5IGNsYXNzaWZpY2F0aW9uIGxldmVsIGlzIDIuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJMZXZlbDogcm9zLklSZXNvbHZhYmxlIHwgc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIFBhcmVudElkOiBUaGUgSUQgb2YgdGhlIHBhcmVudCBjYXRlZ29yeS5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0clBhcmVudElkOiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBQYXJhbSBzY29wZSAtIHNjb3BlIGluIHdoaWNoIHRoaXMgcmVzb3VyY2UgaXMgZGVmaW5lZFxuICAgICAqIFBhcmFtIGlkICAgIC0gc2NvcGVkIGlkIG9mIHRoZSByZXNvdXJjZVxuICAgICAqIFBhcmFtIHByb3BzIC0gcmVzb3VyY2UgcHJvcGVydGllc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiByb3MuQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogQ2F0ZWdvcnlQcm9wcywgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6Ym9vbGVhbiA9IHRydWUpIHtcbiAgICAgICAgc3VwZXIoc2NvcGUsIGlkKTtcbiAgICAgICAgdGhpcy5zY29wZSA9IHNjb3BlO1xuICAgICAgICB0aGlzLmlkID0gaWQ7XG4gICAgICAgIHRoaXMucHJvcHMgPSBwcm9wcztcbiAgICAgICAgdGhpcy5lbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCA9IGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50O1xuXG4gICAgICAgIGNvbnN0IHJvc0NhdGVnb3J5ID0gbmV3IFJvc0NhdGVnb3J5KHRoaXMsIGlkLCAge1xuICAgICAgICAgICAgcGFyZW50SWQ6IHByb3BzLnBhcmVudElkLFxuICAgICAgICAgICAgdHlwZTogcHJvcHMudHlwZSxcbiAgICAgICAgICAgIGNhdGVOYW1lOiBwcm9wcy5jYXRlTmFtZSxcbiAgICAgICAgfSwgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgJiYgdGhpcy5zdGFjay5lbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCk7XG4gICAgICAgIHRoaXMucmVzb3VyY2UgPSByb3NDYXRlZ29yeTtcbiAgICAgICAgdGhpcy5hdHRyQ2F0ZUlkID0gcm9zQ2F0ZWdvcnkuYXR0ckNhdGVJZDtcbiAgICAgICAgdGhpcy5hdHRyTGV2ZWwgPSByb3NDYXRlZ29yeS5hdHRyTGV2ZWw7XG4gICAgICAgIHRoaXMuYXR0clBhcmVudElkID0gcm9zQ2F0ZWdvcnkuYXR0clBhcmVudElkO1xuICAgIH1cbn1cbiJdfQ==