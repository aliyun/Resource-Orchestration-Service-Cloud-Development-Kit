"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InsertMediaToSearchLib = exports.InsertMediaToSearchLibProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ice_generated_1 = require("./ice.generated");
Object.defineProperty(exports, "InsertMediaToSearchLibProperty", { enumerable: true, get: function () { return ice_generated_1.RosInsertMediaToSearchLib; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::ICE::InsertMediaToSearchLib`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosInsertMediaToSearchLib`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-ice-insertmediatosearchlib
 */
class InsertMediaToSearchLib extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosInsertMediaToSearchLib = new ice_generated_1.RosInsertMediaToSearchLib(this, id, {
            input: props.input,
            mediaId: props.mediaId,
            searchLibName: props.searchLibName,
            mediaType: props.mediaType,
            msgBody: props.msgBody,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosInsertMediaToSearchLib;
        this.attrMediaId = rosInsertMediaToSearchLib.attrMediaId;
    }
}
exports.InsertMediaToSearchLib = InsertMediaToSearchLib;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5zZXJ0bWVkaWF0b3NlYXJjaGxpYi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImluc2VydG1lZGlhdG9zZWFyY2hsaWIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsOENBQThDO0FBQzlDLG1EQUE0RDtBQUV0QiwrR0FGN0IseUNBQXlCLE9BRWtDO0FBbURwRTs7OztHQUlHO0FBQ0gsTUFBYSxzQkFBdUIsU0FBUSxHQUFHLENBQUMsUUFBUTtJQVdwRDs7OztPQUlHO0lBQ0gsWUFBWSxLQUFvQixFQUFFLEVBQVUsRUFBRSxLQUFrQyxFQUFFLG1DQUEyQyxJQUFJO1FBQzdILEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDakIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUM7UUFDYixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsZ0NBQWdDLEdBQUcsZ0NBQWdDLENBQUM7UUFFekUsTUFBTSx5QkFBeUIsR0FBRyxJQUFJLHlDQUF5QixDQUFDLElBQUksRUFBRSxFQUFFLEVBQUc7WUFDdkUsS0FBSyxFQUFFLEtBQUssQ0FBQyxLQUFLO1lBQ2xCLE9BQU8sRUFBRSxLQUFLLENBQUMsT0FBTztZQUN0QixhQUFhLEVBQUUsS0FBSyxDQUFDLGFBQWE7WUFDbEMsU0FBUyxFQUFFLEtBQUssQ0FBQyxTQUFTO1lBQzFCLE9BQU8sRUFBRSxLQUFLLENBQUMsT0FBTztTQUN6QixFQUFFLGdDQUFnQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztRQUNwRixJQUFJLENBQUMsUUFBUSxHQUFHLHlCQUF5QixDQUFDO1FBQzFDLElBQUksQ0FBQyxXQUFXLEdBQUcseUJBQXlCLENBQUMsV0FBVyxDQUFDO0lBQzdELENBQUM7Q0FDSjtBQWpDRCx3REFpQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyByb3MgZnJvbSAnQGFsaWNsb3VkL3Jvcy1jZGstY29yZSc7XG5pbXBvcnQgeyBSb3NJbnNlcnRNZWRpYVRvU2VhcmNoTGliIH0gZnJvbSAnLi9pY2UuZ2VuZXJhdGVkJztcbi8vIEdlbmVyYXRlZCBmcm9tIHRoZSBBbGlDbG91ZCBST1MgUmVzb3VyY2UgU3BlY2lmaWNhdGlvblxuZXhwb3J0IHsgUm9zSW5zZXJ0TWVkaWFUb1NlYXJjaExpYiBhcyBJbnNlcnRNZWRpYVRvU2VhcmNoTGliUHJvcGVydHkgfTtcblxuLyoqXG4gKiBQcm9wZXJ0aWVzIGZvciBkZWZpbmluZyBhIGBJbnNlcnRNZWRpYVRvU2VhcmNoTGliYC5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvYWxpeXVuLWljZS1pbnNlcnRtZWRpYXRvc2VhcmNobGliXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSW5zZXJ0TWVkaWFUb1NlYXJjaExpYlByb3BzIHtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGlucHV0OiBUaGUgVVJMIG9mIHRoZSB2aWRlbywgYXVkaW8sIG9yIGltYWdlIGZpbGUgdGhhdCB5b3Ugd2FudCB0byBpbXBvcnQgdG8gdGhlIHNlYXJjaCBsaWJyYXJ5LlxuICAgICAqIE5vdGU6IE1ha2Ugc3VyZSB0aGF0IHlvdSBzcGVjaWZ5IGEgY29ycmVjdCBmaWxlIG5hbWUgYW5kIHRoZSBidWNrZXQgaW4gd2hpY2ggdGhlIGZpbGUgcmVzaWRlcyBpcyBpbiB0aGUgc2FtZSByZWdpb24gd2hlcmUgdGhpcyBvcGVyYXRpb24gaXMgY2FsbGVkLiBPdGhlcndpc2UsIHRoZSBmaWxlIGNhbm5vdCBiZSBmb3VuZCBvciB0aGUgb3BlcmF0aW9uIG1heSBmYWlsLlxuICAgICAqIFNwZWNpZnkgYW4gT2JqZWN0IFN0b3JhZ2UgU2VydmljZSAoT1NTKSBVUkwgaW4gdGhlIGZvbGxvd2luZyBmb3JtYXQ6IG9zczpcXC9cXC9bQnVja2V0IG5hbWVdXFwvW0ZpbGUgcGF0aF0uIEZvciBleGFtcGxlLCB5b3UgY2FuIHNwZWNpZnkgb3NzOlxcL1xcL1tleGFtcGxlLWJ1Y2tldC1dXFwvW29iamVjdF9wYXRoLV0uXG4gICAgICogU3BlY2lmeSBhbiBIVFRQIFVSTCBpbiB0aGUgZm9sbG93aW5nIGZvcm1hdDogcHVibGljIGVuZHBvaW50LiBGb3IgZXhhbXBsZSwgeW91IGNhbiBzcGVjaWZ5IGh0dHA6XFwvXFwvZXhhbXBsZS10ZXN0LSoqKioubXA0LlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGlucHV0OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBtZWRpYUlkOiBUaGUgSUQgb2YgdGhlIG1lZGlhIGFzc2V0LiBFYWNoIG1lZGlhIElEIGlzIHVuaXF1ZS4gSWYgeW91IGxlYXZlIHRoaXMgcGFyYW1ldGVyIGVtcHR5LCBhIG1lZGlhIElEIGlzIGF1dG9tYXRpY2FsbHkgZ2VuZXJhdGVkIGZvciB0aGlzIHBhcmFtZXRlci5cbiAgICAgKi9cbiAgICByZWFkb25seSBtZWRpYUlkPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgbWVkaWFUeXBlOiBUaGUgdHlwZSBvZiB0aGUgbWVkaWEgYXNzZXQuIFZhbGlkIHZhbHVlczpcbiAgICAgKiB2aWRlbyAoZGVmYXVsdClcbiAgICAgKiBpbWFnZVxuICAgICAqIGF1ZGlvXG4gICAgICovXG4gICAgcmVhZG9ubHkgbWVkaWFUeXBlPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgbXNnQm9keTogVGhlIG1lc3NhZ2UgYm9keS5cbiAgICAgKi9cbiAgICByZWFkb25seSBtc2dCb2R5PzogeyBba2V5OiBzdHJpbmddOiAoYW55IHwgcm9zLklSZXNvbHZhYmxlKSB9IHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgc2VhcmNoTGliTmFtZTogVGhlIG5hbWUgb2YgdGhlIHNlYXJjaCBsaWJyYXJ5LiBEZWZhdWx0IHZhbHVlOiBpbXMtZGVmYXVsdC1zZWFyY2gtbGliLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHNlYXJjaExpYk5hbWU/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG59XG5cbi8qKlxuICogUmVwcmVzZW50cyBhIGBJbnNlcnRNZWRpYVRvU2VhcmNoTGliYC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJSW5zZXJ0TWVkaWFUb1NlYXJjaExpYiBleHRlbmRzIHJvcy5JUmVzb3VyY2Uge1xuICAgIHJlYWRvbmx5IHByb3BzOiBJbnNlcnRNZWRpYVRvU2VhcmNoTGliUHJvcHM7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgTWVkaWFJZDogVGhlIElEIG9mIHRoZSBtZWRpYSBhc3NldC5cbiAgICAgKi9cbiAgICByZWFkb25seSBhdHRyTWVkaWFJZDogcm9zLklSZXNvbHZhYmxlIHwgc3RyaW5nO1xufVxuLyoqXG4gKiBUaGlzIGNsYXNzIGVuY2Fwc3VsYXRlcyBhbmQgZXh0ZW5kcyB0aGUgUk9TIHJlc291cmNlIHR5cGUgYEFMSVlVTjo6SUNFOjpJbnNlcnRNZWRpYVRvU2VhcmNoTGliYC5cbiAqIEBOb3RlIFRoaXMgY2xhc3MgbWF5IGhhdmUgc29tZSBuZXcgZnVuY3Rpb25zIHRvIGZhY2lsaXRhdGUgZGV2ZWxvcG1lbnQsIHNvIGl0IGlzIHJlY29tbWVuZGVkIHRvIHVzZSB0aGlzIGNsYXNzIGluc3RlYWQgb2YgYFJvc0luc2VydE1lZGlhVG9TZWFyY2hMaWJgZm9yIGEgbW9yZSBjb252ZW5pZW50IGRldmVsb3BtZW50IGV4cGVyaWVuY2UuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2FsaXl1bi1pY2UtaW5zZXJ0bWVkaWF0b3NlYXJjaGxpYlxuICovXG5leHBvcnQgY2xhc3MgSW5zZXJ0TWVkaWFUb1NlYXJjaExpYiBleHRlbmRzIHJvcy5SZXNvdXJjZSBpbXBsZW1lbnRzIElJbnNlcnRNZWRpYVRvU2VhcmNoTGliIHtcbiAgICBwcm90ZWN0ZWQgc2NvcGU6IHJvcy5Db25zdHJ1Y3Q7XG4gICAgcHJvdGVjdGVkIGlkOiBzdHJpbmc7XG4gICAgcHVibGljIHJlYWRvbmx5IHByb3BzOiBJbnNlcnRNZWRpYVRvU2VhcmNoTGliUHJvcHM7XG4gICAgcHJvdGVjdGVkIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OiBib29sZWFuO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIE1lZGlhSWQ6IFRoZSBJRCBvZiB0aGUgbWVkaWEgYXNzZXQuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJNZWRpYUlkOiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBQYXJhbSBzY29wZSAtIHNjb3BlIGluIHdoaWNoIHRoaXMgcmVzb3VyY2UgaXMgZGVmaW5lZFxuICAgICAqIFBhcmFtIGlkICAgIC0gc2NvcGVkIGlkIG9mIHRoZSByZXNvdXJjZVxuICAgICAqIFBhcmFtIHByb3BzIC0gcmVzb3VyY2UgcHJvcGVydGllc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiByb3MuQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogSW5zZXJ0TWVkaWFUb1NlYXJjaExpYlByb3BzLCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDpib29sZWFuID0gdHJ1ZSkge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQpO1xuICAgICAgICB0aGlzLnNjb3BlID0gc2NvcGU7XG4gICAgICAgIHRoaXMuaWQgPSBpZDtcbiAgICAgICAgdGhpcy5wcm9wcyA9IHByb3BzO1xuICAgICAgICB0aGlzLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ID0gZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ7XG5cbiAgICAgICAgY29uc3Qgcm9zSW5zZXJ0TWVkaWFUb1NlYXJjaExpYiA9IG5ldyBSb3NJbnNlcnRNZWRpYVRvU2VhcmNoTGliKHRoaXMsIGlkLCAge1xuICAgICAgICAgICAgaW5wdXQ6IHByb3BzLmlucHV0LFxuICAgICAgICAgICAgbWVkaWFJZDogcHJvcHMubWVkaWFJZCxcbiAgICAgICAgICAgIHNlYXJjaExpYk5hbWU6IHByb3BzLnNlYXJjaExpYk5hbWUsXG4gICAgICAgICAgICBtZWRpYVR5cGU6IHByb3BzLm1lZGlhVHlwZSxcbiAgICAgICAgICAgIG1zZ0JvZHk6IHByb3BzLm1zZ0JvZHksXG4gICAgICAgIH0sIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ICYmIHRoaXMuc3RhY2suZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQpO1xuICAgICAgICB0aGlzLnJlc291cmNlID0gcm9zSW5zZXJ0TWVkaWFUb1NlYXJjaExpYjtcbiAgICAgICAgdGhpcy5hdHRyTWVkaWFJZCA9IHJvc0luc2VydE1lZGlhVG9TZWFyY2hMaWIuYXR0ck1lZGlhSWQ7XG4gICAgfVxufVxuIl19