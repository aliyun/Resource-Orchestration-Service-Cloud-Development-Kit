"use strict";
// Generated from the AliCloud ROS Resource Specification
Object.defineProperty(exports, "__esModule", { value: true });
exports.RosUploadMedia = exports.RosSearchLib = exports.RosMediaInfo = exports.RosInsertMediaToSearchLib = exports.RosCategory = void 0;
const ros = require("@alicloud/ros-cdk-core");
/**
 * Determine whether the given properties match those of a `RosCategoryProps`
 *
 * @param properties - the TypeScript properties of a `RosCategoryProps`
 *
 * @returns the result of the validation.
 */
function RosCategoryPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('parentId', ros.validateNumber)(properties.parentId));
    if (properties.type && (typeof properties.type) !== 'object') {
        errors.collect(ros.propertyValidator('type', ros.validateAllowedValues)({
            data: properties.type,
            allowedValues: ["material", "default"],
        }));
    }
    errors.collect(ros.propertyValidator('type', ros.validateString)(properties.type));
    errors.collect(ros.propertyValidator('cateName', ros.requiredValidator)(properties.cateName));
    errors.collect(ros.propertyValidator('cateName', ros.validateString)(properties.cateName));
    return errors.wrap('supplied properties not correct for "RosCategoryProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ICE::Category` resource
 *
 * @param properties - the TypeScript properties of a `RosCategoryProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ICE::Category` resource.
 */
// @ts-ignore TS6133
function rosCategoryPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosCategoryPropsValidator(properties).assertSuccess();
    }
    return {
        'CateName': ros.stringToRosTemplate(properties.cateName),
        'ParentId': ros.numberToRosTemplate(properties.parentId),
        'Type': ros.stringToRosTemplate(properties.type),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::ICE::Category`.
 * @Note This class does not contain additional functions, so it is recommended to use the `Category` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-ice-category
 */
class RosCategory extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosCategory.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrCateId = this.getAtt('CateId');
        this.attrLevel = this.getAtt('Level');
        this.attrParentId = this.getAtt('ParentId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.cateName = props.cateName;
        this.parentId = props.parentId;
        this.type = props.type;
    }
    get rosProperties() {
        return {
            cateName: this.cateName,
            parentId: this.parentId,
            type: this.type,
        };
    }
    renderProperties(props) {
        return rosCategoryPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosCategory = RosCategory;
/**
 * The resource type name for this resource class.
 */
RosCategory.ROS_RESOURCE_TYPE_NAME = "ALIYUN::ICE::Category";
/**
 * Determine whether the given properties match those of a `RosInsertMediaToSearchLibProps`
 *
 * @param properties - the TypeScript properties of a `RosInsertMediaToSearchLibProps`
 *
 * @returns the result of the validation.
 */
function RosInsertMediaToSearchLibPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('input', ros.requiredValidator)(properties.input));
    errors.collect(ros.propertyValidator('input', ros.validateString)(properties.input));
    errors.collect(ros.propertyValidator('mediaId', ros.validateString)(properties.mediaId));
    errors.collect(ros.propertyValidator('searchLibName', ros.validateString)(properties.searchLibName));
    if (properties.mediaType && (typeof properties.mediaType) !== 'object') {
        errors.collect(ros.propertyValidator('mediaType', ros.validateAllowedValues)({
            data: properties.mediaType,
            allowedValues: ["video", "image", "audio"],
        }));
    }
    errors.collect(ros.propertyValidator('mediaType', ros.validateString)(properties.mediaType));
    errors.collect(ros.propertyValidator('msgBody', ros.hashValidator(ros.validateAny))(properties.msgBody));
    return errors.wrap('supplied properties not correct for "RosInsertMediaToSearchLibProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ICE::InsertMediaToSearchLib` resource
 *
 * @param properties - the TypeScript properties of a `RosInsertMediaToSearchLibProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ICE::InsertMediaToSearchLib` resource.
 */
// @ts-ignore TS6133
function rosInsertMediaToSearchLibPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosInsertMediaToSearchLibPropsValidator(properties).assertSuccess();
    }
    return {
        'Input': ros.stringToRosTemplate(properties.input),
        'MediaId': ros.stringToRosTemplate(properties.mediaId),
        'MediaType': ros.stringToRosTemplate(properties.mediaType),
        'MsgBody': ros.hashMapper(ros.objectToRosTemplate)(properties.msgBody),
        'SearchLibName': ros.stringToRosTemplate(properties.searchLibName),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::ICE::InsertMediaToSearchLib`.
 * @Note This class does not contain additional functions, so it is recommended to use the `InsertMediaToSearchLib` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-ice-insertmediatosearchlib
 */
class RosInsertMediaToSearchLib extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosInsertMediaToSearchLib.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrMediaId = this.getAtt('MediaId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.input = props.input;
        this.mediaId = props.mediaId;
        this.mediaType = props.mediaType;
        this.msgBody = props.msgBody;
        this.searchLibName = props.searchLibName;
    }
    get rosProperties() {
        return {
            input: this.input,
            mediaId: this.mediaId,
            mediaType: this.mediaType,
            msgBody: this.msgBody,
            searchLibName: this.searchLibName,
        };
    }
    renderProperties(props) {
        return rosInsertMediaToSearchLibPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosInsertMediaToSearchLib = RosInsertMediaToSearchLib;
/**
 * The resource type name for this resource class.
 */
RosInsertMediaToSearchLib.ROS_RESOURCE_TYPE_NAME = "ALIYUN::ICE::InsertMediaToSearchLib";
/**
 * Determine whether the given properties match those of a `RosMediaInfoProps`
 *
 * @param properties - the TypeScript properties of a `RosMediaInfoProps`
 *
 * @returns the result of the validation.
 */
function RosMediaInfoPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('registerConfig', ros.validateString)(properties.registerConfig));
    errors.collect(ros.propertyValidator('overwrite', ros.validateBoolean)(properties.overwrite));
    if (properties.description && (Array.isArray(properties.description) || (typeof properties.description) === 'string')) {
        errors.collect(ros.propertyValidator('description', ros.validateLength)({
            data: properties.description.length,
            min: undefined,
            max: 1024,
        }));
    }
    errors.collect(ros.propertyValidator('description', ros.validateString)(properties.description));
    errors.collect(ros.propertyValidator('userData', ros.hashValidator(ros.validateAny))(properties.userData));
    if (properties.businessType && (typeof properties.businessType) !== 'object') {
        errors.collect(ros.propertyValidator('businessType', ros.validateAllowedValues)({
            data: properties.businessType,
            allowedValues: ["subtitles", "watermark", "opening", "ending", "general"],
        }));
    }
    errors.collect(ros.propertyValidator('businessType', ros.validateString)(properties.businessType));
    if (properties.title && (Array.isArray(properties.title) || (typeof properties.title) === 'string')) {
        errors.collect(ros.propertyValidator('title', ros.validateLength)({
            data: properties.title.length,
            min: undefined,
            max: 128,
        }));
    }
    errors.collect(ros.propertyValidator('title', ros.validateString)(properties.title));
    errors.collect(ros.propertyValidator('cateId', ros.validateNumber)(properties.cateId));
    errors.collect(ros.propertyValidator('workflowId', ros.validateString)(properties.workflowId));
    errors.collect(ros.propertyValidator('inputUrl', ros.requiredValidator)(properties.inputUrl));
    errors.collect(ros.propertyValidator('inputUrl', ros.validateString)(properties.inputUrl));
    if (properties.smartTagTemplateId && (typeof properties.smartTagTemplateId) !== 'object') {
        errors.collect(ros.propertyValidator('smartTagTemplateId', ros.validateAllowedValues)({
            data: properties.smartTagTemplateId,
            allowedValues: ["S00000101-300080", "S00000103-000001", "S00000103-000002"],
        }));
    }
    errors.collect(ros.propertyValidator('smartTagTemplateId', ros.validateString)(properties.smartTagTemplateId));
    if (properties.referenceId && (Array.isArray(properties.referenceId) || (typeof properties.referenceId) === 'string')) {
        errors.collect(ros.propertyValidator('referenceId', ros.validateLength)({
            data: properties.referenceId.length,
            min: 6,
            max: 64,
        }));
    }
    errors.collect(ros.propertyValidator('referenceId', ros.validateString)(properties.referenceId));
    if (properties.mediaType && (typeof properties.mediaType) !== 'object') {
        errors.collect(ros.propertyValidator('mediaType', ros.validateAllowedValues)({
            data: properties.mediaType,
            allowedValues: ["image", "video", "audio", "text"],
        }));
    }
    errors.collect(ros.propertyValidator('mediaType', ros.validateString)(properties.mediaType));
    if (properties.coverUrl && (Array.isArray(properties.coverUrl) || (typeof properties.coverUrl) === 'string')) {
        errors.collect(ros.propertyValidator('coverUrl', ros.validateLength)({
            data: properties.coverUrl.length,
            min: undefined,
            max: 128,
        }));
    }
    errors.collect(ros.propertyValidator('coverUrl', ros.validateString)(properties.coverUrl));
    if (properties.mediaTags && (Array.isArray(properties.mediaTags) || (typeof properties.mediaTags) === 'string')) {
        errors.collect(ros.propertyValidator('mediaTags', ros.validateLength)({
            data: properties.mediaTags.length,
            min: undefined,
            max: 16,
        }));
    }
    errors.collect(ros.propertyValidator('mediaTags', ros.listValidator(ros.validateString))(properties.mediaTags));
    return errors.wrap('supplied properties not correct for "RosMediaInfoProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ICE::MediaInfo` resource
 *
 * @param properties - the TypeScript properties of a `RosMediaInfoProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ICE::MediaInfo` resource.
 */
// @ts-ignore TS6133
function rosMediaInfoPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosMediaInfoPropsValidator(properties).assertSuccess();
    }
    return {
        'InputURL': ros.stringToRosTemplate(properties.inputUrl),
        'BusinessType': ros.stringToRosTemplate(properties.businessType),
        'CateId': ros.numberToRosTemplate(properties.cateId),
        'CoverURL': ros.stringToRosTemplate(properties.coverUrl),
        'Description': ros.stringToRosTemplate(properties.description),
        'MediaTags': ros.listMapper(ros.stringToRosTemplate)(properties.mediaTags),
        'MediaType': ros.stringToRosTemplate(properties.mediaType),
        'Overwrite': ros.booleanToRosTemplate(properties.overwrite),
        'ReferenceId': ros.stringToRosTemplate(properties.referenceId),
        'RegisterConfig': ros.stringToRosTemplate(properties.registerConfig),
        'SmartTagTemplateId': ros.stringToRosTemplate(properties.smartTagTemplateId),
        'Title': ros.stringToRosTemplate(properties.title),
        'UserData': ros.hashMapper(ros.objectToRosTemplate)(properties.userData),
        'WorkflowId': ros.stringToRosTemplate(properties.workflowId),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::ICE::MediaInfo`.
 * @Note This class does not contain additional functions, so it is recommended to use the `MediaInfo` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-ice-mediainfo
 */
class RosMediaInfo extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosMediaInfo.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrMediaId = this.getAtt('MediaId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.inputUrl = props.inputUrl;
        this.businessType = props.businessType;
        this.cateId = props.cateId;
        this.coverUrl = props.coverUrl;
        this.description = props.description;
        this.mediaTags = props.mediaTags;
        this.mediaType = props.mediaType;
        this.overwrite = props.overwrite;
        this.referenceId = props.referenceId;
        this.registerConfig = props.registerConfig;
        this.smartTagTemplateId = props.smartTagTemplateId;
        this.title = props.title;
        this.userData = props.userData;
        this.workflowId = props.workflowId;
    }
    get rosProperties() {
        return {
            inputUrl: this.inputUrl,
            businessType: this.businessType,
            cateId: this.cateId,
            coverUrl: this.coverUrl,
            description: this.description,
            mediaTags: this.mediaTags,
            mediaType: this.mediaType,
            overwrite: this.overwrite,
            referenceId: this.referenceId,
            registerConfig: this.registerConfig,
            smartTagTemplateId: this.smartTagTemplateId,
            title: this.title,
            userData: this.userData,
            workflowId: this.workflowId,
        };
    }
    renderProperties(props) {
        return rosMediaInfoPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosMediaInfo = RosMediaInfo;
/**
 * The resource type name for this resource class.
 */
RosMediaInfo.ROS_RESOURCE_TYPE_NAME = "ALIYUN::ICE::MediaInfo";
/**
 * Determine whether the given properties match those of a `RosSearchLibProps`
 *
 * @param properties - the TypeScript properties of a `RosSearchLibProps`
 *
 * @returns the result of the validation.
 */
function RosSearchLibPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('searchLibName', ros.requiredValidator)(properties.searchLibName));
    errors.collect(ros.propertyValidator('searchLibName', ros.validateString)(properties.searchLibName));
    return errors.wrap('supplied properties not correct for "RosSearchLibProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ICE::SearchLib` resource
 *
 * @param properties - the TypeScript properties of a `RosSearchLibProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ICE::SearchLib` resource.
 */
// @ts-ignore TS6133
function rosSearchLibPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosSearchLibPropsValidator(properties).assertSuccess();
    }
    return {
        'SearchLibName': ros.stringToRosTemplate(properties.searchLibName),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::ICE::SearchLib`, which is used to create a search library.
 * @Note This class does not contain additional functions, so it is recommended to use the `SearchLib` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-ice-searchlib
 */
class RosSearchLib extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosSearchLib.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrSearchLibName = this.getAtt('SearchLibName');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.searchLibName = props.searchLibName;
    }
    get rosProperties() {
        return {
            searchLibName: this.searchLibName,
        };
    }
    renderProperties(props) {
        return rosSearchLibPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosSearchLib = RosSearchLib;
/**
 * The resource type name for this resource class.
 */
RosSearchLib.ROS_RESOURCE_TYPE_NAME = "ALIYUN::ICE::SearchLib";
/**
 * Determine whether the given properties match those of a `RosUploadMediaProps`
 *
 * @param properties - the TypeScript properties of a `RosUploadMediaProps`
 *
 * @returns the result of the validation.
 */
function RosUploadMediaPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('entityId', ros.validateString)(properties.entityId));
    errors.collect(ros.propertyValidator('appId', ros.validateString)(properties.appId));
    errors.collect(ros.propertyValidator('fileInfo', ros.hashValidator(ros.validateAny))(properties.fileInfo));
    errors.collect(ros.propertyValidator('userData', ros.hashValidator(ros.validateAny))(properties.userData));
    errors.collect(ros.propertyValidator('uploadTargetConfig', ros.hashValidator(ros.validateAny))(properties.uploadTargetConfig));
    errors.collect(ros.propertyValidator('mediaMetaData', ros.hashValidator(ros.validateAny))(properties.mediaMetaData));
    errors.collect(ros.propertyValidator('postProcessConfig', ros.hashValidator(ros.validateAny))(properties.postProcessConfig));
    return errors.wrap('supplied properties not correct for "RosUploadMediaProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ICE::UploadMedia` resource
 *
 * @param properties - the TypeScript properties of a `RosUploadMediaProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ICE::UploadMedia` resource.
 */
// @ts-ignore TS6133
function rosUploadMediaPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosUploadMediaPropsValidator(properties).assertSuccess();
    }
    return {
        'AppId': ros.stringToRosTemplate(properties.appId),
        'EntityId': ros.stringToRosTemplate(properties.entityId),
        'FileInfo': ros.hashMapper(ros.objectToRosTemplate)(properties.fileInfo),
        'MediaMetaData': ros.hashMapper(ros.objectToRosTemplate)(properties.mediaMetaData),
        'PostProcessConfig': ros.hashMapper(ros.objectToRosTemplate)(properties.postProcessConfig),
        'UploadTargetConfig': ros.hashMapper(ros.objectToRosTemplate)(properties.uploadTargetConfig),
        'UserData': ros.hashMapper(ros.objectToRosTemplate)(properties.userData),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::ICE::UploadMedia`.
 * @Note This class does not contain additional functions, so it is recommended to use the `UploadMedia` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-ice-uploadmedia
 */
class RosUploadMedia extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosUploadMedia.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrFileUrl = this.getAtt('FileURL');
        this.attrMediaId = this.getAtt('MediaId');
        this.attrMediaUrl = this.getAtt('MediaURL');
        this.attrUploadAddress = this.getAtt('UploadAddress');
        this.attrUploadAuth = this.getAtt('UploadAuth');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.appId = props.appId;
        this.entityId = props.entityId;
        this.fileInfo = props.fileInfo;
        this.mediaMetaData = props.mediaMetaData;
        this.postProcessConfig = props.postProcessConfig;
        this.uploadTargetConfig = props.uploadTargetConfig;
        this.userData = props.userData;
    }
    get rosProperties() {
        return {
            appId: this.appId,
            entityId: this.entityId,
            fileInfo: this.fileInfo,
            mediaMetaData: this.mediaMetaData,
            postProcessConfig: this.postProcessConfig,
            uploadTargetConfig: this.uploadTargetConfig,
            userData: this.userData,
        };
    }
    renderProperties(props) {
        return rosUploadMediaPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosUploadMedia = RosUploadMedia;
/**
 * The resource type name for this resource class.
 */
RosUploadMedia.ROS_RESOURCE_TYPE_NAME = "ALIYUN::ICE::UploadMedia";
//# sourceMappingURL=data:application/json;base64,