"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CenRouteService = exports.CenRouteServiceProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const cen_generated_1 = require("./cen.generated");
Object.defineProperty(exports, "CenRouteServiceProperty", { enumerable: true, get: function () { return cen_generated_1.RosCenRouteService; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::CEN::CenRouteService`, which is used to access an Alibaba Cloud service.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosCenRouteService`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-cen-cenrouteservice
 */
class CenRouteService extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosCenRouteService = new cen_generated_1.RosCenRouteService(this, id, {
            conflictIgnore: props.conflictIgnore === undefined || props.conflictIgnore === null ? false : props.conflictIgnore,
            description: props.description,
            hostRegionId: props.hostRegionId,
            cenId: props.cenId,
            accessRegionId: props.accessRegionId,
            host: props.host,
            hostVpcId: props.hostVpcId,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosCenRouteService;
        this.attrId = rosCenRouteService.attrId;
    }
}
exports.CenRouteService = CenRouteService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2Vucm91dGVzZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY2Vucm91dGVzZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDhDQUE4QztBQUM5QyxtREFBcUQ7QUFFdEIsd0dBRnRCLGtDQUFrQixPQUUyQjtBQTBEdEQ7Ozs7R0FJRztBQUNILE1BQWEsZUFBZ0IsU0FBUSxHQUFHLENBQUMsUUFBUTtJQVc3Qzs7OztPQUlHO0lBQ0gsWUFBWSxLQUFvQixFQUFFLEVBQVUsRUFBRSxLQUEyQixFQUFFLG1DQUEyQyxJQUFJO1FBQ3RILEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDakIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUM7UUFDYixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsZ0NBQWdDLEdBQUcsZ0NBQWdDLENBQUM7UUFFekUsTUFBTSxrQkFBa0IsR0FBRyxJQUFJLGtDQUFrQixDQUFDLElBQUksRUFBRSxFQUFFLEVBQUc7WUFDekQsY0FBYyxFQUFFLEtBQUssQ0FBQyxjQUFjLEtBQUssU0FBUyxJQUFJLEtBQUssQ0FBQyxjQUFjLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxjQUFjO1lBQ2xILFdBQVcsRUFBRSxLQUFLLENBQUMsV0FBVztZQUM5QixZQUFZLEVBQUUsS0FBSyxDQUFDLFlBQVk7WUFDaEMsS0FBSyxFQUFFLEtBQUssQ0FBQyxLQUFLO1lBQ2xCLGNBQWMsRUFBRSxLQUFLLENBQUMsY0FBYztZQUNwQyxJQUFJLEVBQUUsS0FBSyxDQUFDLElBQUk7WUFDaEIsU0FBUyxFQUFFLEtBQUssQ0FBQyxTQUFTO1NBQzdCLEVBQUUsZ0NBQWdDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO1FBQ3BGLElBQUksQ0FBQyxRQUFRLEdBQUcsa0JBQWtCLENBQUM7UUFDbkMsSUFBSSxDQUFDLE1BQU0sR0FBRyxrQkFBa0IsQ0FBQyxNQUFNLENBQUM7SUFDNUMsQ0FBQztDQUNKO0FBbkNELDBDQW1DQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHJvcyBmcm9tICdAYWxpY2xvdWQvcm9zLWNkay1jb3JlJztcbmltcG9ydCB7IFJvc0NlblJvdXRlU2VydmljZSB9IGZyb20gJy4vY2VuLmdlbmVyYXRlZCc7XG4vLyBHZW5lcmF0ZWQgZnJvbSB0aGUgQWxpQ2xvdWQgUk9TIFJlc291cmNlIFNwZWNpZmljYXRpb25cbmV4cG9ydCB7IFJvc0NlblJvdXRlU2VydmljZSBhcyBDZW5Sb3V0ZVNlcnZpY2VQcm9wZXJ0eSB9O1xuXG4vKipcbiAqIFByb3BlcnRpZXMgZm9yIGRlZmluaW5nIGEgYENlblJvdXRlU2VydmljZWAuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2FsaXl1bi1jZW4tY2Vucm91dGVzZXJ2aWNlXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQ2VuUm91dGVTZXJ2aWNlUHJvcHMge1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgYWNjZXNzUmVnaW9uSWQ6IFRoZSByZWdpb24gd2hlcmUgdGhlIGNsb3VkIHNlcnZpY2UgaXMgZGVwbG95ZWQuXG4gICAgICovXG4gICAgcmVhZG9ubHkgYWNjZXNzUmVnaW9uSWQ6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGNlbklkOiBUaGUgSUQgb2YgdGhlIENsb3VkIEVudGVycHJpc2UgTmV0d29yayAoQ0VOKSBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICByZWFkb25seSBjZW5JZDogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgaG9zdDogVGhlIGRvbWFpbiBvciBJUCBhZGRyZXNzIG9mIHRoZSBjbG91ZCBzZXJ2aWNlLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGhvc3Q6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGhvc3RSZWdpb25JZDogVGhlIHJlZ2lvbiB3aGVyZSB0aGUgY2xvdWQgc2VydmljZSBpcyBkZXBsb3llZC5cbiAgICAgKiBZb3UgY2FuIGNhbGwgdGhlIERlc2NyaWJlUmVnaW9ucyBvcGVyYXRpb24gdG8gcXVlcnkgcmVnaW9uIElEcy5cbiAgICAgKiBOb3RlIFRoZSBIb3N0UmVnaW9uSWQgYW5kIEFjY2Vzc1JlZ2lvbklkcy5OIG11c3QgYmUgc2V0IHRvIHRoZSBzYW1lIHZhbHVlLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGhvc3RSZWdpb25JZDogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgaG9zdFZwY0lkOiBUaGUgdmlydHVhbCBwcml2YXRlIGNsb3VkIChWUEMpIHRoYXQgaXMgYXNzb2NpYXRlZCB3aXRoIHRoZSBjbG91ZCBzZXJ2aWNlLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGhvc3RWcGNJZDogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgY29uZmxpY3RJZ25vcmU6IFdoZXRoZXIgdG8gaWdub3JlIGNvbmZsaWN0IHdoZW4gY3JlYXRpbmcuIElmIHRydWUsIHdoZW4gdGhlIENsb3VkUm91dGUuQ29uZmxpY3QgZXJyb3IgY29kZSBpcyBlbmNvdW50ZXJlZCBkdXJpbmcgY3JlYXRpb24sIGl0IHdpbGwgYmUgaWdub3JlZCBhcyB0aGUgY3JlYXRpb24gaXMgc3VjY2Vzc2Z1bCwgYW5kIHRoZSBkZWxldGlvbiBwaGFzZSB3aWxsIGJlIHNraXBwZWQuXG4gICAgICogRGVmYXVsdCBmYWxzZS5cbiAgICAgKi9cbiAgICByZWFkb25seSBjb25mbGljdElnbm9yZT86IGJvb2xlYW4gfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBkZXNjcmlwdGlvbjogVGhlIGRlc2NyaXB0aW9uIG9mIHRoZSBjbG91ZCBzZXJ2aWNlLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGRlc2NyaXB0aW9uPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xufVxuXG4vKipcbiAqIFJlcHJlc2VudHMgYSBgQ2VuUm91dGVTZXJ2aWNlYC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJQ2VuUm91dGVTZXJ2aWNlIGV4dGVuZHMgcm9zLklSZXNvdXJjZSB7XG4gICAgcmVhZG9ubHkgcHJvcHM6IENlblJvdXRlU2VydmljZVByb3BzO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIElkOiBUaGUgSUQgb2YgdGhlIGNsb3VkIHNlcnZpY2UuIEl0IGlzIGZvcm1hdHRlZCB0byB7Q2VuSWR9L3tIb3N0UmVnaW9uSWR9L3tIb3N0fS97QWNjZXNzUmVnaW9uSWR9XG4gICAgICovXG4gICAgcmVhZG9ubHkgYXR0cklkOiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG59XG4vKipcbiAqIFRoaXMgY2xhc3MgZW5jYXBzdWxhdGVzIGFuZCBleHRlbmRzIHRoZSBST1MgcmVzb3VyY2UgdHlwZSBgQUxJWVVOOjpDRU46OkNlblJvdXRlU2VydmljZWAsIHdoaWNoIGlzIHVzZWQgdG8gYWNjZXNzIGFuIEFsaWJhYmEgQ2xvdWQgc2VydmljZS5cbiAqIEBOb3RlIFRoaXMgY2xhc3MgbWF5IGhhdmUgc29tZSBuZXcgZnVuY3Rpb25zIHRvIGZhY2lsaXRhdGUgZGV2ZWxvcG1lbnQsIHNvIGl0IGlzIHJlY29tbWVuZGVkIHRvIHVzZSB0aGlzIGNsYXNzIGluc3RlYWQgb2YgYFJvc0NlblJvdXRlU2VydmljZWBmb3IgYSBtb3JlIGNvbnZlbmllbnQgZGV2ZWxvcG1lbnQgZXhwZXJpZW5jZS5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvYWxpeXVuLWNlbi1jZW5yb3V0ZXNlcnZpY2VcbiAqL1xuZXhwb3J0IGNsYXNzIENlblJvdXRlU2VydmljZSBleHRlbmRzIHJvcy5SZXNvdXJjZSBpbXBsZW1lbnRzIElDZW5Sb3V0ZVNlcnZpY2Uge1xuICAgIHByb3RlY3RlZCBzY29wZTogcm9zLkNvbnN0cnVjdDtcbiAgICBwcm90ZWN0ZWQgaWQ6IHN0cmluZztcbiAgICBwdWJsaWMgcmVhZG9ubHkgcHJvcHM6IENlblJvdXRlU2VydmljZVByb3BzO1xuICAgIHByb3RlY3RlZCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBJZDogVGhlIElEIG9mIHRoZSBjbG91ZCBzZXJ2aWNlLiBJdCBpcyBmb3JtYXR0ZWQgdG8ge0NlbklkfS97SG9zdFJlZ2lvbklkfS97SG9zdH0ve0FjY2Vzc1JlZ2lvbklkfVxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRySWQ6IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFBhcmFtIHNjb3BlIC0gc2NvcGUgaW4gd2hpY2ggdGhpcyByZXNvdXJjZSBpcyBkZWZpbmVkXG4gICAgICogUGFyYW0gaWQgICAgLSBzY29wZWQgaWQgb2YgdGhlIHJlc291cmNlXG4gICAgICogUGFyYW0gcHJvcHMgLSByZXNvdXJjZSBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IHJvcy5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBDZW5Sb3V0ZVNlcnZpY2VQcm9wcywgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6Ym9vbGVhbiA9IHRydWUpIHtcbiAgICAgICAgc3VwZXIoc2NvcGUsIGlkKTtcbiAgICAgICAgdGhpcy5zY29wZSA9IHNjb3BlO1xuICAgICAgICB0aGlzLmlkID0gaWQ7XG4gICAgICAgIHRoaXMucHJvcHMgPSBwcm9wcztcbiAgICAgICAgdGhpcy5lbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCA9IGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50O1xuXG4gICAgICAgIGNvbnN0IHJvc0NlblJvdXRlU2VydmljZSA9IG5ldyBSb3NDZW5Sb3V0ZVNlcnZpY2UodGhpcywgaWQsICB7XG4gICAgICAgICAgICBjb25mbGljdElnbm9yZTogcHJvcHMuY29uZmxpY3RJZ25vcmUgPT09IHVuZGVmaW5lZCB8fCBwcm9wcy5jb25mbGljdElnbm9yZSA9PT0gbnVsbCA/IGZhbHNlIDogcHJvcHMuY29uZmxpY3RJZ25vcmUsXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogcHJvcHMuZGVzY3JpcHRpb24sXG4gICAgICAgICAgICBob3N0UmVnaW9uSWQ6IHByb3BzLmhvc3RSZWdpb25JZCxcbiAgICAgICAgICAgIGNlbklkOiBwcm9wcy5jZW5JZCxcbiAgICAgICAgICAgIGFjY2Vzc1JlZ2lvbklkOiBwcm9wcy5hY2Nlc3NSZWdpb25JZCxcbiAgICAgICAgICAgIGhvc3Q6IHByb3BzLmhvc3QsXG4gICAgICAgICAgICBob3N0VnBjSWQ6IHByb3BzLmhvc3RWcGNJZCxcbiAgICAgICAgfSwgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgJiYgdGhpcy5zdGFjay5lbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCk7XG4gICAgICAgIHRoaXMucmVzb3VyY2UgPSByb3NDZW5Sb3V0ZVNlcnZpY2U7XG4gICAgICAgIHRoaXMuYXR0cklkID0gcm9zQ2VuUm91dGVTZXJ2aWNlLmF0dHJJZDtcbiAgICB9XG59XG4iXX0=