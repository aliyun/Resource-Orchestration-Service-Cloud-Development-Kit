"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DeliveryChannel = exports.DeliveryChannelProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const config_generated_1 = require("./config.generated");
Object.defineProperty(exports, "DeliveryChannelProperty", { enumerable: true, get: function () { return config_generated_1.RosDeliveryChannel; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::Config::DeliveryChannel`, which is used to create or update a delivery channel.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosDeliveryChannel`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-config-deliverychannel
 */
class DeliveryChannel extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosDeliveryChannel = new config_generated_1.RosDeliveryChannel(this, id, {
            description: props.description,
            deliveryChannelName: props.deliveryChannelName,
            deliveryChannelTargetArn: props.deliveryChannelTargetArn,
            deliveryChannelAssumeRoleArn: props.deliveryChannelAssumeRoleArn,
            deliveryChannelType: props.deliveryChannelType,
            deliveryChannelCondition: props.deliveryChannelCondition,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosDeliveryChannel;
        this.attrDeliveryChannelId = rosDeliveryChannel.attrDeliveryChannelId;
    }
}
exports.DeliveryChannel = DeliveryChannel;
//# sourceMappingURL=data:application/json;base64,