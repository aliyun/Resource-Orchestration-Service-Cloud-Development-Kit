"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Cluster = exports.ClusterProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const mse_generated_1 = require("./mse.generated");
Object.defineProperty(exports, "ClusterProperty", { enumerable: true, get: function () { return mse_generated_1.RosCluster; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::MSE::Cluster`, which is used to create a cluster.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosCluster`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-mse-cluster
 */
class Cluster extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosCluster = new mse_generated_1.RosCluster(this, id, {
            mseVersion: props.mseVersion,
            privateSlbSpecification: props.privateSlbSpecification,
            clusterVersion: props.clusterVersion,
            connectionType: props.connectionType,
            aclEntryList: props.aclEntryList,
            clusterSpecification: props.clusterSpecification,
            vSwitchId: props.vSwitchId,
            pubSlbSpecification: props.pubSlbSpecification,
            clusterType: props.clusterType,
            diskType: props.diskType,
            clusterAliasName: props.clusterAliasName,
            instanceCount: props.instanceCount,
            vpcId: props.vpcId,
            requestPars: props.requestPars,
            pubNetworkFlow: props.pubNetworkFlow,
            acceptLanguage: props.acceptLanguage,
            netType: props.netType,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosCluster;
        this.attrAclEntryList = rosCluster.attrAclEntryList;
        this.attrAclId = rosCluster.attrAclId;
        this.attrAppVersion = rosCluster.attrAppVersion;
        this.attrClusterAliasName = rosCluster.attrClusterAliasName;
        this.attrClusterId = rosCluster.attrClusterId;
        this.attrClusterName = rosCluster.attrClusterName;
        this.attrClusterSpecification = rosCluster.attrClusterSpecification;
        this.attrClusterType = rosCluster.attrClusterType;
        this.attrClusterVersion = rosCluster.attrClusterVersion;
        this.attrConfigAuthEnabled = rosCluster.attrConfigAuthEnabled;
        this.attrConfigSecretEnabled = rosCluster.attrConfigSecretEnabled;
        this.attrConnectionType = rosCluster.attrConnectionType;
        this.attrCpu = rosCluster.attrCpu;
        this.attrDiskCapacity = rosCluster.attrDiskCapacity;
        this.attrDiskType = rosCluster.attrDiskType;
        this.attrHealthStatus = rosCluster.attrHealthStatus;
        this.attrInstanceCount = rosCluster.attrInstanceCount;
        this.attrInstanceId = rosCluster.attrInstanceId;
        this.attrInternetAddress = rosCluster.attrInternetAddress;
        this.attrInternetDomain = rosCluster.attrInternetDomain;
        this.attrInternetPort = rosCluster.attrInternetPort;
        this.attrIntranetAddress = rosCluster.attrIntranetAddress;
        this.attrIntranetDomain = rosCluster.attrIntranetDomain;
        this.attrIntranetPort = rosCluster.attrIntranetPort;
        this.attrMcpEnabled = rosCluster.attrMcpEnabled;
        this.attrMemoryCapacity = rosCluster.attrMemoryCapacity;
        this.attrMseVersion = rosCluster.attrMseVersion;
        this.attrNetType = rosCluster.attrNetType;
        this.attrPayInfo = rosCluster.attrPayInfo;
        this.attrPubNetworkFlow = rosCluster.attrPubNetworkFlow;
        this.attrVSwitchId = rosCluster.attrVSwitchId;
        this.attrVpcId = rosCluster.attrVpcId;
    }
}
exports.Cluster = Cluster;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2x1c3Rlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNsdXN0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsOENBQThDO0FBQzlDLG1EQUE2QztBQUV0QixnR0FGZCwwQkFBVSxPQUVtQjtBQXVHdEM7Ozs7R0FJRztBQUNILE1BQWEsT0FBUSxTQUFRLEdBQUcsQ0FBQyxRQUFRO0lBMktyQzs7OztPQUlHO0lBQ0gsWUFBWSxLQUFvQixFQUFFLEVBQVUsRUFBRSxLQUFtQixFQUFFLG1DQUEyQyxJQUFJO1FBQzlHLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFakIsTUFBTSxVQUFVLEdBQUcsSUFBSSwwQkFBVSxDQUFDLElBQUksRUFBRSxFQUFFLEVBQUc7WUFDekMsVUFBVSxFQUFFLEtBQUssQ0FBQyxVQUFVO1lBQzVCLHVCQUF1QixFQUFFLEtBQUssQ0FBQyx1QkFBdUI7WUFDdEQsY0FBYyxFQUFFLEtBQUssQ0FBQyxjQUFjO1lBQ3BDLGNBQWMsRUFBRSxLQUFLLENBQUMsY0FBYztZQUNwQyxZQUFZLEVBQUUsS0FBSyxDQUFDLFlBQVk7WUFDaEMsb0JBQW9CLEVBQUUsS0FBSyxDQUFDLG9CQUFvQjtZQUNoRCxTQUFTLEVBQUUsS0FBSyxDQUFDLFNBQVM7WUFDMUIsbUJBQW1CLEVBQUUsS0FBSyxDQUFDLG1CQUFtQjtZQUM5QyxXQUFXLEVBQUUsS0FBSyxDQUFDLFdBQVc7WUFDOUIsUUFBUSxFQUFFLEtBQUssQ0FBQyxRQUFRO1lBQ3hCLGdCQUFnQixFQUFFLEtBQUssQ0FBQyxnQkFBZ0I7WUFDeEMsYUFBYSxFQUFFLEtBQUssQ0FBQyxhQUFhO1lBQ2xDLEtBQUssRUFBRSxLQUFLLENBQUMsS0FBSztZQUNsQixXQUFXLEVBQUUsS0FBSyxDQUFDLFdBQVc7WUFDOUIsY0FBYyxFQUFFLEtBQUssQ0FBQyxjQUFjO1lBQ3BDLGNBQWMsRUFBRSxLQUFLLENBQUMsY0FBYztZQUNwQyxPQUFPLEVBQUUsS0FBSyxDQUFDLE9BQU87U0FDekIsRUFBRSxnQ0FBZ0MsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7UUFDcEYsSUFBSSxDQUFDLFFBQVEsR0FBRyxVQUFVLENBQUM7UUFDM0IsSUFBSSxDQUFDLGdCQUFnQixHQUFHLFVBQVUsQ0FBQyxnQkFBZ0IsQ0FBQztRQUNwRCxJQUFJLENBQUMsU0FBUyxHQUFHLFVBQVUsQ0FBQyxTQUFTLENBQUM7UUFDdEMsSUFBSSxDQUFDLGNBQWMsR0FBRyxVQUFVLENBQUMsY0FBYyxDQUFDO1FBQ2hELElBQUksQ0FBQyxvQkFBb0IsR0FBRyxVQUFVLENBQUMsb0JBQW9CLENBQUM7UUFDNUQsSUFBSSxDQUFDLGFBQWEsR0FBRyxVQUFVLENBQUMsYUFBYSxDQUFDO1FBQzlDLElBQUksQ0FBQyxlQUFlLEdBQUcsVUFBVSxDQUFDLGVBQWUsQ0FBQztRQUNsRCxJQUFJLENBQUMsd0JBQXdCLEdBQUcsVUFBVSxDQUFDLHdCQUF3QixDQUFDO1FBQ3BFLElBQUksQ0FBQyxlQUFlLEdBQUcsVUFBVSxDQUFDLGVBQWUsQ0FBQztRQUNsRCxJQUFJLENBQUMsa0JBQWtCLEdBQUcsVUFBVSxDQUFDLGtCQUFrQixDQUFDO1FBQ3hELElBQUksQ0FBQyxxQkFBcUIsR0FBRyxVQUFVLENBQUMscUJBQXFCLENBQUM7UUFDOUQsSUFBSSxDQUFDLHVCQUF1QixHQUFHLFVBQVUsQ0FBQyx1QkFBdUIsQ0FBQztRQUNsRSxJQUFJLENBQUMsa0JBQWtCLEdBQUcsVUFBVSxDQUFDLGtCQUFrQixDQUFDO1FBQ3hELElBQUksQ0FBQyxPQUFPLEdBQUcsVUFBVSxDQUFDLE9BQU8sQ0FBQztRQUNsQyxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsVUFBVSxDQUFDLGdCQUFnQixDQUFDO1FBQ3BELElBQUksQ0FBQyxZQUFZLEdBQUcsVUFBVSxDQUFDLFlBQVksQ0FBQztRQUM1QyxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsVUFBVSxDQUFDLGdCQUFnQixDQUFDO1FBQ3BELElBQUksQ0FBQyxpQkFBaUIsR0FBRyxVQUFVLENBQUMsaUJBQWlCLENBQUM7UUFDdEQsSUFBSSxDQUFDLGNBQWMsR0FBRyxVQUFVLENBQUMsY0FBYyxDQUFDO1FBQ2hELElBQUksQ0FBQyxtQkFBbUIsR0FBRyxVQUFVLENBQUMsbUJBQW1CLENBQUM7UUFDMUQsSUFBSSxDQUFDLGtCQUFrQixHQUFHLFVBQVUsQ0FBQyxrQkFBa0IsQ0FBQztRQUN4RCxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsVUFBVSxDQUFDLGdCQUFnQixDQUFDO1FBQ3BELElBQUksQ0FBQyxtQkFBbUIsR0FBRyxVQUFVLENBQUMsbUJBQW1CLENBQUM7UUFDMUQsSUFBSSxDQUFDLGtCQUFrQixHQUFHLFVBQVUsQ0FBQyxrQkFBa0IsQ0FBQztRQUN4RCxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsVUFBVSxDQUFDLGdCQUFnQixDQUFDO1FBQ3BELElBQUksQ0FBQyxjQUFjLEdBQUcsVUFBVSxDQUFDLGNBQWMsQ0FBQztRQUNoRCxJQUFJLENBQUMsa0JBQWtCLEdBQUcsVUFBVSxDQUFDLGtCQUFrQixDQUFDO1FBQ3hELElBQUksQ0FBQyxjQUFjLEdBQUcsVUFBVSxDQUFDLGNBQWMsQ0FBQztRQUNoRCxJQUFJLENBQUMsV0FBVyxHQUFHLFVBQVUsQ0FBQyxXQUFXLENBQUM7UUFDMUMsSUFBSSxDQUFDLFdBQVcsR0FBRyxVQUFVLENBQUMsV0FBVyxDQUFDO1FBQzFDLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxVQUFVLENBQUMsa0JBQWtCLENBQUM7UUFDeEQsSUFBSSxDQUFDLGFBQWEsR0FBRyxVQUFVLENBQUMsYUFBYSxDQUFDO1FBQzlDLElBQUksQ0FBQyxTQUFTLEdBQUcsVUFBVSxDQUFDLFNBQVMsQ0FBQztJQUMxQyxDQUFDO0NBQ0o7QUF4T0QsMEJBd09DIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcm9zIGZyb20gJ0BhbGljbG91ZC9yb3MtY2RrLWNvcmUnO1xuaW1wb3J0IHsgUm9zQ2x1c3RlciB9IGZyb20gJy4vbXNlLmdlbmVyYXRlZCc7XG4vLyBHZW5lcmF0ZWQgZnJvbSB0aGUgQWxpQ2xvdWQgUk9TIFJlc291cmNlIFNwZWNpZmljYXRpb25cbmV4cG9ydCB7IFJvc0NsdXN0ZXIgYXMgQ2x1c3RlclByb3BlcnR5IH07XG5cbi8qKlxuICogUHJvcGVydGllcyBmb3IgZGVmaW5pbmcgYSBgQ2x1c3RlcmAuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2FsaXl1bi1tc2UtY2x1c3RlclxuICovXG5leHBvcnQgaW50ZXJmYWNlIENsdXN0ZXJQcm9wcyB7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBjbHVzdGVyU3BlY2lmaWNhdGlvbjogQ2x1c3RlciBzcGVjaWZpY2F0aW9ucy4gTm90ZSB0aGUgbXN2ZXJzaW9uIHJlcXVpcmVtZW50cyBvZiB0aGUgdmVyc2lvbiBwYXJhbWV0ZXIsXG4gICAgICogT3B0aW9uYWwgcGFyYW1ldGVyczpcbiAgICAgKiBcIk1TRV8gU0MgXzFfMl82MF9jXCIsXG4gICAgICogXCJNU0VfIFNDIF8yXzRfNjBfY1wiLFxuICAgICAqIFwiTVNFXyBTQyBfNF84XzYwX2NcIixcbiAgICAgKiBcIk1TRV8gU0MgXzhfMTZfNjBfY1wiLFxuICAgICAqIFwiTVNFXyBTQyBfMTZfMzJfNjBfY1wiXG4gICAgICovXG4gICAgcmVhZG9ubHkgY2x1c3RlclNwZWNpZmljYXRpb246IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGNsdXN0ZXJUeXBlOiBjbHVzdGVyIHR5cGVcbiAgICAgKi9cbiAgICByZWFkb25seSBjbHVzdGVyVHlwZTogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgY2x1c3RlclZlcnNpb246IENsdXN0ZXIgdmVyc2lvbiwgc3VjaCBhcyBab29LZWVwZXJfM184XzAsTkFDT1NfMl8wXzBcbiAgICAgKi9cbiAgICByZWFkb25seSBjbHVzdGVyVmVyc2lvbjogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgaW5zdGFuY2VDb3VudDogaW5zdGFuY2UgY291bnRcbiAgICAgKi9cbiAgICByZWFkb25seSBpbnN0YW5jZUNvdW50OiBudW1iZXIgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBuZXRUeXBlOiBOZXR3b3JrIHR5cGUgKHdoZXRoZXIgcHJpdmF0ZSBuZXR3b3JrIGlzIGVuYWJsZWQgb3Igbm90KS4gcHJpdmF0ZW5ldCBpbmRpY2F0ZXMgdGhhdCBwcml2YXRlIG5ldHdvcmsgaXMgZW5hYmxlZC5cbiAgICAgKi9cbiAgICByZWFkb25seSBuZXRUeXBlOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBhY2NlcHRMYW5ndWFnZTpcbiAgICAgKi9cbiAgICByZWFkb25seSBhY2NlcHRMYW5ndWFnZT86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGFjbEVudHJ5TGlzdDogVGhlIHB1YmxpYyBuZXR3b3JrIHdoaXRlbGlzdCBsaXN0IGlzIHVzZWQgb25seSB3aGVuIHRoZSBwdWJsaWMgbmV0d29yayBpcyBlbmFibGVkLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGFjbEVudHJ5TGlzdD86IEFycmF5PHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZT4gfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBjbHVzdGVyQWxpYXNOYW1lOiBjbHVzdGVyIGFsaWFzIG5hbWVcbiAgICAgKi9cbiAgICByZWFkb25seSBjbHVzdGVyQWxpYXNOYW1lPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgY29ubmVjdGlvblR5cGU6IG5ldHdvcmsgY29ubmVjdCB0eXBlXG4gICAgICovXG4gICAgcmVhZG9ubHkgY29ubmVjdGlvblR5cGU/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBkaXNrVHlwZTogZGlzayB0eXBlXG4gICAgICovXG4gICAgcmVhZG9ubHkgZGlza1R5cGU/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBtc2VWZXJzaW9uOiBSZXF1aXJlZCwgdGhlIHZhbHVlIGlzIGFzIGZvbGxvd3M6XG4gICAgICogXG4gICAgICogLSdtc2VfZGV2JzogaW5kaWNhdGVzIHRoZSBkZXZlbG9wbWVudCB2ZXJzaW9uLlxuICAgICAqIC0nTXNlX3Bybyc6IG1lYW5zIHByb2Zlc3Npb25hbCB2ZXJzaW9uLiBXaGVuIHRoaXMgdmVyc2lvbiBpcyBzZWxlY3RlZCwgdGhlIHNwZWNpZmljYXRpb24gaXMgMmM0ZyBvciBhYm92ZSwgYW5kIHRoZSBzcGVjaWZpY2F0aW9uIGlzIDMgbm9kZXMgb3IgYWJvdmUuXG4gICAgICovXG4gICAgcmVhZG9ubHkgbXNlVmVyc2lvbj86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHByaXZhdGVTbGJTcGVjaWZpY2F0aW9uOlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHByaXZhdGVTbGJTcGVjaWZpY2F0aW9uPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgcHViTmV0d29ya0Zsb3c6IFB1YmxpYyBuZXR3b3JrIGJhbmR3aWR0aC4gSWYgdGhlIGJhbmR3aWR0aCBpcyBncmVhdGVyIHRoYW4gMCwgdGhlIHB1YmxpYyBuZXR3b3JrIGlzIGVuYWJsZWQuXG4gICAgICovXG4gICAgcmVhZG9ubHkgcHViTmV0d29ya0Zsb3c/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBwdWJTbGJTcGVjaWZpY2F0aW9uOlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHB1YlNsYlNwZWNpZmljYXRpb24/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSByZXF1ZXN0UGFyczpcbiAgICAgKi9cbiAgICByZWFkb25seSByZXF1ZXN0UGFycz86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHZwY0lkOiB2cGMgaWRcbiAgICAgKi9cbiAgICByZWFkb25seSB2cGNJZD86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHZTd2l0Y2hJZDogc3dpdGNoZXIgSWRcbiAgICAgKi9cbiAgICByZWFkb25seSB2U3dpdGNoSWQ/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG59XG5cbi8qKlxuICogVGhpcyBjbGFzcyBlbmNhcHN1bGF0ZXMgYW5kIGV4dGVuZHMgdGhlIFJPUyByZXNvdXJjZSB0eXBlIGBBTElZVU46Ok1TRTo6Q2x1c3RlcmAsIHdoaWNoIGlzIHVzZWQgdG8gY3JlYXRlIGEgY2x1c3Rlci5cbiAqIEBOb3RlIFRoaXMgY2xhc3MgbWF5IGhhdmUgc29tZSBuZXcgZnVuY3Rpb25zIHRvIGZhY2lsaXRhdGUgZGV2ZWxvcG1lbnQsIHNvIGl0IGlzIHJlY29tbWVuZGVkIHRvIHVzZSB0aGlzIGNsYXNzIGluc3RlYWQgb2YgYFJvc0NsdXN0ZXJgZm9yIGEgbW9yZSBjb252ZW5pZW50IGRldmVsb3BtZW50IGV4cGVyaWVuY2UuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2FsaXl1bi1tc2UtY2x1c3RlclxuICovXG5leHBvcnQgY2xhc3MgQ2x1c3RlciBleHRlbmRzIHJvcy5SZXNvdXJjZSB7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgQWNsRW50cnlMaXN0OiBUaGUgcHVibGljIG5ldHdvcmsgd2hpdGVsaXN0IGxpc3QgaXMgdXNlZCBvbmx5IHdoZW4gdGhlIHB1YmxpYyBuZXR3b3JrIGlzIGVuYWJsZWQuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJBY2xFbnRyeUxpc3Q6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBBY2xJZDogYWNsIGlkXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJBY2xJZDogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIEFwcFZlcnNpb246IGFwcCB2ZXJzaW9uXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJBcHBWZXJzaW9uOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgQ2x1c3RlckFsaWFzTmFtZTogY2x1c3RlciBhbGlhcyBuYW1lXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJDbHVzdGVyQWxpYXNOYW1lOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgQ2x1c3RlcklkOiBjbHVzdGVyIGlkXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJDbHVzdGVySWQ6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBDbHVzdGVyTmFtZTogY2x1c3RlciBuYW1lXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJDbHVzdGVyTmFtZTogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIENsdXN0ZXJTcGVjaWZpY2F0aW9uOiBDbHVzdGVyIHNwZWNpZmljYXRpb25zLiBOb3RlIHRoZSBtc3ZlcnNpb24gcmVxdWlyZW1lbnRzIG9mIHRoZSB2ZXJzaW9uIHBhcmFtZXRlcixcbk9wdGlvbmFsIHBhcmFtZXRlcnM6XG5cIk1TRV8gU0MgXzFfMl82MF9jXCIsXG5cIk1TRV8gU0MgXzJfNF82MF9jXCIsXG5cIk1TRV8gU0MgXzRfOF82MF9jXCIsXG5cIk1TRV8gU0MgXzhfMTZfNjBfY1wiLFxuXCJNU0VfIFNDIF8xNl8zMl82MF9jXCJcbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckNsdXN0ZXJTcGVjaWZpY2F0aW9uOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgQ2x1c3RlclR5cGU6IGNsdXN0ZXIgdHlwZVxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyQ2x1c3RlclR5cGU6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBDbHVzdGVyVmVyc2lvbjogQ2x1c3RlciB2ZXJzaW9uLCBzdWNoIGFzIFpvb0tlZXBlcl8zXzhfMCxOQUNPU18yXzBfMFxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyQ2x1c3RlclZlcnNpb246IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBDb25maWdBdXRoRW5hYmxlZDogV2hldGhlciB0aGUgY29uZmlndXJhdGlvbiBzdXBwb3J0cyBpdC4gVmFsaWQgdmFsdWVzOiB0cnVlOiBmYWxzZTogbm90IHN1cHBvcnRlZFxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyQ29uZmlnQXV0aEVuYWJsZWQ6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBDb25maWdTZWNyZXRFbmFibGVkOiBXaGV0aGVyIHRoZSBjb25maWd1cmF0aW9uIHBhc3N3b3JkIHRha2VzIGVmZmVjdC4gVGhlIHZhbHVlIGlzIGFzIGZvbGxvd3M6IHRydWU6IHZhbGlkIGZhbHNlOiBub3QgdmFsaWRcbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckNvbmZpZ1NlY3JldEVuYWJsZWQ6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBDb25uZWN0aW9uVHlwZTogbmV0d29yayBjb25uZWN0IHR5cGVcbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckNvbm5lY3Rpb25UeXBlOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgQ3B1OiBjcHUgY29yZSBzaXplXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJDcHU6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBEaXNrQ2FwYWNpdHk6IGRpc2sgY2FwYWNpdHksIHVuaXQ6IEdcbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckRpc2tDYXBhY2l0eTogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIERpc2tUeXBlOiBkaXNrIHR5cGVcbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckRpc2tUeXBlOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgSGVhbHRoU3RhdHVzOiBoZWFsdGggc3RhdHVzXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJIZWFsdGhTdGF0dXM6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBJbnN0YW5jZUNvdW50OiBpbnN0YW5jZSBjb3VudFxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRySW5zdGFuY2VDb3VudDogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIEluc3RhbmNlSWQ6IGluc3RhbmNlIGlkXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJJbnN0YW5jZUlkOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgSW50ZXJuZXRBZGRyZXNzOiBpbnRlcm5ldCBhZGRyZXNzXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJJbnRlcm5ldEFkZHJlc3M6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBJbnRlcm5ldERvbWFpbjogaW50ZXJuZXQgZG9tYWluXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJJbnRlcm5ldERvbWFpbjogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIEludGVybmV0UG9ydDogaW50ZXJuZXQgcG9ydFxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRySW50ZXJuZXRQb3J0OiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgSW50cmFuZXRBZGRyZXNzOiBpbnRyYW5ldCBhZGRyZXNzXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJJbnRyYW5ldEFkZHJlc3M6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBJbnRyYW5ldERvbWFpbjogaW50cmFuZXQgZG9tYWluXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJJbnRyYW5ldERvbWFpbjogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIEludHJhbmV0UG9ydDogaW50cmFuZXQgcG9ydFxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRySW50cmFuZXRQb3J0OiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgTUNQRW5hYmxlZDogV2hldGhlciBNQ1AgdGFrZXMgZWZmZWN0LCB0aGUgdmFsdWUgaXMgYXMgZm9sbG93czogdHJ1ZTogdmFsaWQgZmFsc2U6IG5vdCB2YWxpZFxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyTWNwRW5hYmxlZDogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIE1lbW9yeUNhcGFjaXR5OiBtZW1vcnkgY2FwYWNpdHlcbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ck1lbW9yeUNhcGFjaXR5OiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgTXNlVmVyc2lvbjogUmVxdWlyZWQsIHRoZSB2YWx1ZSBpcyBhcyBmb2xsb3dzOlxuXG4tJ21zZV9kZXYnOiBpbmRpY2F0ZXMgdGhlIGRldmVsb3BtZW50IHZlcnNpb24uXG4tJ01zZV9wcm8nOiBtZWFucyBwcm9mZXNzaW9uYWwgdmVyc2lvbi4gV2hlbiB0aGlzIHZlcnNpb24gaXMgc2VsZWN0ZWQsIHRoZSBzcGVjaWZpY2F0aW9uIGlzIDJjNGcgb3IgYWJvdmUsIGFuZCB0aGUgc3BlY2lmaWNhdGlvbiBpcyAzIG5vZGVzIG9yIGFib3ZlLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyTXNlVmVyc2lvbjogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIE5ldFR5cGU6IE5ldHdvcmsgdHlwZSAod2hldGhlciBwcml2YXRlIG5ldHdvcmsgaXMgZW5hYmxlZCBvciBub3QpLiBwcml2YXRlbmV0IGluZGljYXRlcyB0aGF0IHByaXZhdGUgbmV0d29yayBpcyBlbmFibGVkLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyTmV0VHlwZTogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIFBheUluZm86IHBheSBpbmZvXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJQYXlJbmZvOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgUHViTmV0d29ya0Zsb3c6IFB1YmxpYyBuZXR3b3JrIGJhbmR3aWR0aC4gSWYgdGhlIGJhbmR3aWR0aCBpcyBncmVhdGVyIHRoYW4gMCwgdGhlIHB1YmxpYyBuZXR3b3JrIGlzIGVuYWJsZWQuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJQdWJOZXR3b3JrRmxvdzogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIFZTd2l0Y2hJZDogc3dpdGNoZXIgSWRcbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0clZTd2l0Y2hJZDogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIFZwY0lkOiB2cGMgaWRcbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0clZwY0lkOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQYXJhbSBzY29wZSAtIHNjb3BlIGluIHdoaWNoIHRoaXMgcmVzb3VyY2UgaXMgZGVmaW5lZFxuICAgICAqIFBhcmFtIGlkICAgIC0gc2NvcGVkIGlkIG9mIHRoZSByZXNvdXJjZVxuICAgICAqIFBhcmFtIHByb3BzIC0gcmVzb3VyY2UgcHJvcGVydGllc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiByb3MuQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogQ2x1c3RlclByb3BzLCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDpib29sZWFuID0gdHJ1ZSkge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQpO1xuXG4gICAgICAgIGNvbnN0IHJvc0NsdXN0ZXIgPSBuZXcgUm9zQ2x1c3Rlcih0aGlzLCBpZCwgIHtcbiAgICAgICAgICAgIG1zZVZlcnNpb246IHByb3BzLm1zZVZlcnNpb24sXG4gICAgICAgICAgICBwcml2YXRlU2xiU3BlY2lmaWNhdGlvbjogcHJvcHMucHJpdmF0ZVNsYlNwZWNpZmljYXRpb24sXG4gICAgICAgICAgICBjbHVzdGVyVmVyc2lvbjogcHJvcHMuY2x1c3RlclZlcnNpb24sXG4gICAgICAgICAgICBjb25uZWN0aW9uVHlwZTogcHJvcHMuY29ubmVjdGlvblR5cGUsXG4gICAgICAgICAgICBhY2xFbnRyeUxpc3Q6IHByb3BzLmFjbEVudHJ5TGlzdCxcbiAgICAgICAgICAgIGNsdXN0ZXJTcGVjaWZpY2F0aW9uOiBwcm9wcy5jbHVzdGVyU3BlY2lmaWNhdGlvbixcbiAgICAgICAgICAgIHZTd2l0Y2hJZDogcHJvcHMudlN3aXRjaElkLFxuICAgICAgICAgICAgcHViU2xiU3BlY2lmaWNhdGlvbjogcHJvcHMucHViU2xiU3BlY2lmaWNhdGlvbixcbiAgICAgICAgICAgIGNsdXN0ZXJUeXBlOiBwcm9wcy5jbHVzdGVyVHlwZSxcbiAgICAgICAgICAgIGRpc2tUeXBlOiBwcm9wcy5kaXNrVHlwZSxcbiAgICAgICAgICAgIGNsdXN0ZXJBbGlhc05hbWU6IHByb3BzLmNsdXN0ZXJBbGlhc05hbWUsXG4gICAgICAgICAgICBpbnN0YW5jZUNvdW50OiBwcm9wcy5pbnN0YW5jZUNvdW50LFxuICAgICAgICAgICAgdnBjSWQ6IHByb3BzLnZwY0lkLFxuICAgICAgICAgICAgcmVxdWVzdFBhcnM6IHByb3BzLnJlcXVlc3RQYXJzLFxuICAgICAgICAgICAgcHViTmV0d29ya0Zsb3c6IHByb3BzLnB1Yk5ldHdvcmtGbG93LFxuICAgICAgICAgICAgYWNjZXB0TGFuZ3VhZ2U6IHByb3BzLmFjY2VwdExhbmd1YWdlLFxuICAgICAgICAgICAgbmV0VHlwZTogcHJvcHMubmV0VHlwZSxcbiAgICAgICAgfSwgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgJiYgdGhpcy5zdGFjay5lbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCk7XG4gICAgICAgIHRoaXMucmVzb3VyY2UgPSByb3NDbHVzdGVyO1xuICAgICAgICB0aGlzLmF0dHJBY2xFbnRyeUxpc3QgPSByb3NDbHVzdGVyLmF0dHJBY2xFbnRyeUxpc3Q7XG4gICAgICAgIHRoaXMuYXR0ckFjbElkID0gcm9zQ2x1c3Rlci5hdHRyQWNsSWQ7XG4gICAgICAgIHRoaXMuYXR0ckFwcFZlcnNpb24gPSByb3NDbHVzdGVyLmF0dHJBcHBWZXJzaW9uO1xuICAgICAgICB0aGlzLmF0dHJDbHVzdGVyQWxpYXNOYW1lID0gcm9zQ2x1c3Rlci5hdHRyQ2x1c3RlckFsaWFzTmFtZTtcbiAgICAgICAgdGhpcy5hdHRyQ2x1c3RlcklkID0gcm9zQ2x1c3Rlci5hdHRyQ2x1c3RlcklkO1xuICAgICAgICB0aGlzLmF0dHJDbHVzdGVyTmFtZSA9IHJvc0NsdXN0ZXIuYXR0ckNsdXN0ZXJOYW1lO1xuICAgICAgICB0aGlzLmF0dHJDbHVzdGVyU3BlY2lmaWNhdGlvbiA9IHJvc0NsdXN0ZXIuYXR0ckNsdXN0ZXJTcGVjaWZpY2F0aW9uO1xuICAgICAgICB0aGlzLmF0dHJDbHVzdGVyVHlwZSA9IHJvc0NsdXN0ZXIuYXR0ckNsdXN0ZXJUeXBlO1xuICAgICAgICB0aGlzLmF0dHJDbHVzdGVyVmVyc2lvbiA9IHJvc0NsdXN0ZXIuYXR0ckNsdXN0ZXJWZXJzaW9uO1xuICAgICAgICB0aGlzLmF0dHJDb25maWdBdXRoRW5hYmxlZCA9IHJvc0NsdXN0ZXIuYXR0ckNvbmZpZ0F1dGhFbmFibGVkO1xuICAgICAgICB0aGlzLmF0dHJDb25maWdTZWNyZXRFbmFibGVkID0gcm9zQ2x1c3Rlci5hdHRyQ29uZmlnU2VjcmV0RW5hYmxlZDtcbiAgICAgICAgdGhpcy5hdHRyQ29ubmVjdGlvblR5cGUgPSByb3NDbHVzdGVyLmF0dHJDb25uZWN0aW9uVHlwZTtcbiAgICAgICAgdGhpcy5hdHRyQ3B1ID0gcm9zQ2x1c3Rlci5hdHRyQ3B1O1xuICAgICAgICB0aGlzLmF0dHJEaXNrQ2FwYWNpdHkgPSByb3NDbHVzdGVyLmF0dHJEaXNrQ2FwYWNpdHk7XG4gICAgICAgIHRoaXMuYXR0ckRpc2tUeXBlID0gcm9zQ2x1c3Rlci5hdHRyRGlza1R5cGU7XG4gICAgICAgIHRoaXMuYXR0ckhlYWx0aFN0YXR1cyA9IHJvc0NsdXN0ZXIuYXR0ckhlYWx0aFN0YXR1cztcbiAgICAgICAgdGhpcy5hdHRySW5zdGFuY2VDb3VudCA9IHJvc0NsdXN0ZXIuYXR0ckluc3RhbmNlQ291bnQ7XG4gICAgICAgIHRoaXMuYXR0ckluc3RhbmNlSWQgPSByb3NDbHVzdGVyLmF0dHJJbnN0YW5jZUlkO1xuICAgICAgICB0aGlzLmF0dHJJbnRlcm5ldEFkZHJlc3MgPSByb3NDbHVzdGVyLmF0dHJJbnRlcm5ldEFkZHJlc3M7XG4gICAgICAgIHRoaXMuYXR0ckludGVybmV0RG9tYWluID0gcm9zQ2x1c3Rlci5hdHRySW50ZXJuZXREb21haW47XG4gICAgICAgIHRoaXMuYXR0ckludGVybmV0UG9ydCA9IHJvc0NsdXN0ZXIuYXR0ckludGVybmV0UG9ydDtcbiAgICAgICAgdGhpcy5hdHRySW50cmFuZXRBZGRyZXNzID0gcm9zQ2x1c3Rlci5hdHRySW50cmFuZXRBZGRyZXNzO1xuICAgICAgICB0aGlzLmF0dHJJbnRyYW5ldERvbWFpbiA9IHJvc0NsdXN0ZXIuYXR0ckludHJhbmV0RG9tYWluO1xuICAgICAgICB0aGlzLmF0dHJJbnRyYW5ldFBvcnQgPSByb3NDbHVzdGVyLmF0dHJJbnRyYW5ldFBvcnQ7XG4gICAgICAgIHRoaXMuYXR0ck1jcEVuYWJsZWQgPSByb3NDbHVzdGVyLmF0dHJNY3BFbmFibGVkO1xuICAgICAgICB0aGlzLmF0dHJNZW1vcnlDYXBhY2l0eSA9IHJvc0NsdXN0ZXIuYXR0ck1lbW9yeUNhcGFjaXR5O1xuICAgICAgICB0aGlzLmF0dHJNc2VWZXJzaW9uID0gcm9zQ2x1c3Rlci5hdHRyTXNlVmVyc2lvbjtcbiAgICAgICAgdGhpcy5hdHRyTmV0VHlwZSA9IHJvc0NsdXN0ZXIuYXR0ck5ldFR5cGU7XG4gICAgICAgIHRoaXMuYXR0clBheUluZm8gPSByb3NDbHVzdGVyLmF0dHJQYXlJbmZvO1xuICAgICAgICB0aGlzLmF0dHJQdWJOZXR3b3JrRmxvdyA9IHJvc0NsdXN0ZXIuYXR0clB1Yk5ldHdvcmtGbG93O1xuICAgICAgICB0aGlzLmF0dHJWU3dpdGNoSWQgPSByb3NDbHVzdGVyLmF0dHJWU3dpdGNoSWQ7XG4gICAgICAgIHRoaXMuYXR0clZwY0lkID0gcm9zQ2x1c3Rlci5hdHRyVnBjSWQ7XG4gICAgfVxufVxuIl19