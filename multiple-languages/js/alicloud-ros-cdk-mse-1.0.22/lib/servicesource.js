"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServiceSource = exports.ServiceSourceProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const mse_generated_1 = require("./mse.generated");
Object.defineProperty(exports, "ServiceSourceProperty", { enumerable: true, get: function () { return mse_generated_1.RosServiceSource; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::MSE::ServiceSource`, which is used to create a Nacos service source.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosServiceSource`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-mse-servicesource
 */
class ServiceSource extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosServiceSource = new mse_generated_1.RosServiceSource(this, id, {
            gatewayUniqueId: props.gatewayUniqueId,
            ingressOptions: props.ingressOptions,
            groupList: props.groupList,
            address: props.address,
            pathList: props.pathList,
            source: props.source,
            name: props.name,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosServiceSource;
        this.attrAddress = rosServiceSource.attrAddress;
        this.attrGatewayUniqueId = rosServiceSource.attrGatewayUniqueId;
        this.attrId = rosServiceSource.attrId;
        this.attrName = rosServiceSource.attrName;
    }
}
exports.ServiceSource = ServiceSource;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmljZXNvdXJjZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInNlcnZpY2Vzb3VyY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsOENBQThDO0FBQzlDLG1EQUFtRDtBQUV0QixzR0FGcEIsZ0NBQWdCLE9BRXlCO0FBbURsRDs7OztHQUlHO0FBQ0gsTUFBYSxhQUFjLFNBQVEsR0FBRyxDQUFDLFFBQVE7SUF3QjNDOzs7O09BSUc7SUFDSCxZQUFZLEtBQW9CLEVBQUUsRUFBVSxFQUFFLEtBQXlCLEVBQUUsbUNBQTJDLElBQUk7UUFDcEgsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUVqQixNQUFNLGdCQUFnQixHQUFHLElBQUksZ0NBQWdCLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRztZQUNyRCxlQUFlLEVBQUUsS0FBSyxDQUFDLGVBQWU7WUFDdEMsY0FBYyxFQUFFLEtBQUssQ0FBQyxjQUFjO1lBQ3BDLFNBQVMsRUFBRSxLQUFLLENBQUMsU0FBUztZQUMxQixPQUFPLEVBQUUsS0FBSyxDQUFDLE9BQU87WUFDdEIsUUFBUSxFQUFFLEtBQUssQ0FBQyxRQUFRO1lBQ3hCLE1BQU0sRUFBRSxLQUFLLENBQUMsTUFBTTtZQUNwQixJQUFJLEVBQUUsS0FBSyxDQUFDLElBQUk7U0FDbkIsRUFBRSxnQ0FBZ0MsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7UUFDcEYsSUFBSSxDQUFDLFFBQVEsR0FBRyxnQkFBZ0IsQ0FBQztRQUNqQyxJQUFJLENBQUMsV0FBVyxHQUFHLGdCQUFnQixDQUFDLFdBQVcsQ0FBQztRQUNoRCxJQUFJLENBQUMsbUJBQW1CLEdBQUcsZ0JBQWdCLENBQUMsbUJBQW1CLENBQUM7UUFDaEUsSUFBSSxDQUFDLE1BQU0sR0FBRyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUM7UUFDdEMsSUFBSSxDQUFDLFFBQVEsR0FBRyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUM7SUFDOUMsQ0FBQztDQUNKO0FBL0NELHNDQStDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHJvcyBmcm9tICdAYWxpY2xvdWQvcm9zLWNkay1jb3JlJztcbmltcG9ydCB7IFJvc1NlcnZpY2VTb3VyY2UgfSBmcm9tICcuL21zZS5nZW5lcmF0ZWQnO1xuLy8gR2VuZXJhdGVkIGZyb20gdGhlIEFsaUNsb3VkIFJPUyBSZXNvdXJjZSBTcGVjaWZpY2F0aW9uXG5leHBvcnQgeyBSb3NTZXJ2aWNlU291cmNlIGFzIFNlcnZpY2VTb3VyY2VQcm9wZXJ0eSB9O1xuXG4vKipcbiAqIFByb3BlcnRpZXMgZm9yIGRlZmluaW5nIGEgYFNlcnZpY2VTb3VyY2VgLlxuICogU2VlIGh0dHBzOi8vd3d3LmFsaWJhYmFjbG91ZC5jb20vaGVscC9yb3MvZGV2ZWxvcGVyLXJlZmVyZW5jZS9hbGl5dW4tbXNlLXNlcnZpY2Vzb3VyY2VcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBTZXJ2aWNlU291cmNlUHJvcHMge1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgZ2F0ZXdheVVuaXF1ZUlkOiBUaGUgdW5pcXVlIElEIG9mIHRoZSBnYXRld2F5LlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGdhdGV3YXlVbmlxdWVJZDogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgbmFtZTogVGhlIG5hbWUuXG4gICAgICogSWYgU291cmNlPUs4UywgdGhpcyBwYXJhbWV0ZXIgc3BlY2lmaWVzIHRoZSBuYW1lIG9mIHRoZSBBQ0sgY2x1c3Rlci5cbiAgICAgKiBJZiBTb3VyY2U9TVNFLCB0aGlzIHBhcmFtZXRlciBzcGVjaWZpZXMgdGhlIElEIG9mIHRoZSBOYWNvcyBpbnN0YW5jZS5cbiAgICAgKiBJZiBTb3VyY2U9TVNFX1pLLCB0aGlzIHBhcmFtZXRlciBzcGVjaWZpZXMgdGhlIElEIG9mIHRoZSBab29LZWVwZXIgaW5zdGFuY2UuXG4gICAgICogSWYgU291cmNlPUVEQVMsIHRoaXMgcGFyYW1ldGVyIHNwZWNpZmllcyB0aGUgSUQgb2YgdGhlIEVEQVMgbmFtZXNwYWNlLlxuICAgICAqIElmIFNvdXJjZT1TQUUsIHRoaXMgcGFyYW1ldGVyIHNwZWNpZmllcyB0aGUgSUQgb2YgdGhlIFNBRSBuYW1lc3BhY2UuXG4gICAgICovXG4gICAgcmVhZG9ubHkgbmFtZTogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgc291cmNlOiBUaGUgc2VydmljZSBzb3VyY2UuIFZhbGlkIHZhbHVlczpcbiAgICAgKiBLOFM6IEFDSyBjbHVzdGVyXG4gICAgICogTVNFOiBNU0UgTmFjb3MgaW5zdGFuY2VcbiAgICAgKi9cbiAgICByZWFkb25seSBzb3VyY2U6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGFkZHJlc3M6IFJlZ2lzdHJhdGlvbiBBZGRyZXNzLiBJZiBub3Qgc3BlY2lmaWVkLCBpdCB3aWxsIGJlIGF1dG9tYXRpY2FsbHkgZ2VuZXJhdGVkIGJhc2VkIG9uIHRoZSBzZWxlY3RlZCBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICByZWFkb25seSBhZGRyZXNzPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgZ3JvdXBMaXN0OiBUaGUgbGlzdCBvZiBzZXJ2aWNlIGdyb3Vwcy4gVGhpcyBpcyByZXF1aXJlZCB3aGVuIFNvdXJjZT1FREFTLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGdyb3VwTGlzdD86IEFycmF5PGFueSB8IHJvcy5JUmVzb2x2YWJsZT4gfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBpbmdyZXNzT3B0aW9uczogVGhlIEluZ3Jlc3MgY29uZmlndXJhdGlvbi5cbiAgICAgKi9cbiAgICByZWFkb25seSBpbmdyZXNzT3B0aW9ucz86IFJvc1NlcnZpY2VTb3VyY2UuSW5ncmVzc09wdGlvbnNQcm9wZXJ0eSB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHBhdGhMaXN0OiBBbiBhcnJheSBvZiBzZXJ2aWNlIHJvb3QgcGF0aHMuXG4gICAgICovXG4gICAgcmVhZG9ubHkgcGF0aExpc3Q/OiBBcnJheTxhbnkgfCByb3MuSVJlc29sdmFibGU+IHwgcm9zLklSZXNvbHZhYmxlO1xufVxuXG4vKipcbiAqIFRoaXMgY2xhc3MgZW5jYXBzdWxhdGVzIGFuZCBleHRlbmRzIHRoZSBST1MgcmVzb3VyY2UgdHlwZSBgQUxJWVVOOjpNU0U6OlNlcnZpY2VTb3VyY2VgLCB3aGljaCBpcyB1c2VkIHRvIGNyZWF0ZSBhIE5hY29zIHNlcnZpY2Ugc291cmNlLlxuICogQE5vdGUgVGhpcyBjbGFzcyBtYXkgaGF2ZSBzb21lIG5ldyBmdW5jdGlvbnMgdG8gZmFjaWxpdGF0ZSBkZXZlbG9wbWVudCwgc28gaXQgaXMgcmVjb21tZW5kZWQgdG8gdXNlIHRoaXMgY2xhc3MgaW5zdGVhZCBvZiBgUm9zU2VydmljZVNvdXJjZWBmb3IgYSBtb3JlIGNvbnZlbmllbnQgZGV2ZWxvcG1lbnQgZXhwZXJpZW5jZS5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvYWxpeXVuLW1zZS1zZXJ2aWNlc291cmNlXG4gKi9cbmV4cG9ydCBjbGFzcyBTZXJ2aWNlU291cmNlIGV4dGVuZHMgcm9zLlJlc291cmNlIHtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBBZGRyZXNzOiBSZWdpc3RyYXRpb24gQWRkcmVzcy4gSWYgbm90IHNwZWNpZmllZCwgaXQgd2lsbCBiZSBhdXRvbWF0aWNhbGx5IGdlbmVyYXRlZCBiYXNlZCBvbiB0aGUgc2VsZWN0ZWQgaW5zdGFuY2UuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJBZGRyZXNzOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgR2F0ZXdheVVuaXF1ZUlkOiBUaGUgdW5pcXVlIElEIG9mIHRoZSBnYXRld2F5LlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyR2F0ZXdheVVuaXF1ZUlkOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgSWQ6IFRoZSBJRCBvZiBzZXJ2aWNlIHNvdXJjZS5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0cklkOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgTmFtZTogVGhlIG5hbWUuXG5JZiBUeXBlIGlzIHNldCB0byBLOFMsIHRoaXMgcGFyYW1ldGVyIHNwZWNpZmllcyB0aGUgbmFtZSBvZiB0aGUgQUNLIGNsdXN0ZXIuXG5JZiBUeXBlIGlzIHNldCB0byBOQUNPUywgdGhpcyBwYXJhbWV0ZXIgc3BlY2lmaWVzIHRoZSBJRCBvZiB0aGUgTmFjb3MgaW5zdGFuY2UuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJOYW1lOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQYXJhbSBzY29wZSAtIHNjb3BlIGluIHdoaWNoIHRoaXMgcmVzb3VyY2UgaXMgZGVmaW5lZFxuICAgICAqIFBhcmFtIGlkICAgIC0gc2NvcGVkIGlkIG9mIHRoZSByZXNvdXJjZVxuICAgICAqIFBhcmFtIHByb3BzIC0gcmVzb3VyY2UgcHJvcGVydGllc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiByb3MuQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogU2VydmljZVNvdXJjZVByb3BzLCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDpib29sZWFuID0gdHJ1ZSkge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQpO1xuXG4gICAgICAgIGNvbnN0IHJvc1NlcnZpY2VTb3VyY2UgPSBuZXcgUm9zU2VydmljZVNvdXJjZSh0aGlzLCBpZCwgIHtcbiAgICAgICAgICAgIGdhdGV3YXlVbmlxdWVJZDogcHJvcHMuZ2F0ZXdheVVuaXF1ZUlkLFxuICAgICAgICAgICAgaW5ncmVzc09wdGlvbnM6IHByb3BzLmluZ3Jlc3NPcHRpb25zLFxuICAgICAgICAgICAgZ3JvdXBMaXN0OiBwcm9wcy5ncm91cExpc3QsXG4gICAgICAgICAgICBhZGRyZXNzOiBwcm9wcy5hZGRyZXNzLFxuICAgICAgICAgICAgcGF0aExpc3Q6IHByb3BzLnBhdGhMaXN0LFxuICAgICAgICAgICAgc291cmNlOiBwcm9wcy5zb3VyY2UsXG4gICAgICAgICAgICBuYW1lOiBwcm9wcy5uYW1lLFxuICAgICAgICB9LCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCAmJiB0aGlzLnN0YWNrLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50KTtcbiAgICAgICAgdGhpcy5yZXNvdXJjZSA9IHJvc1NlcnZpY2VTb3VyY2U7XG4gICAgICAgIHRoaXMuYXR0ckFkZHJlc3MgPSByb3NTZXJ2aWNlU291cmNlLmF0dHJBZGRyZXNzO1xuICAgICAgICB0aGlzLmF0dHJHYXRld2F5VW5pcXVlSWQgPSByb3NTZXJ2aWNlU291cmNlLmF0dHJHYXRld2F5VW5pcXVlSWQ7XG4gICAgICAgIHRoaXMuYXR0cklkID0gcm9zU2VydmljZVNvdXJjZS5hdHRySWQ7XG4gICAgICAgIHRoaXMuYXR0ck5hbWUgPSByb3NTZXJ2aWNlU291cmNlLmF0dHJOYW1lO1xuICAgIH1cbn1cbiJdfQ==