"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OriginInstance = exports.OriginInstanceProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ddos_generated_1 = require("./ddos.generated");
Object.defineProperty(exports, "OriginInstanceProperty", { enumerable: true, get: function () { return ddos_generated_1.RosOriginInstance; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::DDoS::OriginInstance`, which is used to create an Anti-DDoS Origin instance.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosOriginInstance`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-ddos-origininstance
 */
class OriginInstance extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosOriginInstance = new ddos_generated_1.RosOriginInstance(this, id, {
            ipAddresses: props.ipAddresses,
            chargeType: props.chargeType === undefined || props.chargeType === null ? 'POSTPAY' : props.chargeType,
            period: props.period,
            enableLog: props.enableLog,
            networkProtocol: props.networkProtocol,
            cleanBandwidth: props.cleanBandwidth,
            tags: props.tags,
            edition: props.edition,
            periodUnit: props.periodUnit,
            protectionMode: props.protectionMode,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosOriginInstance;
        this.attrArn = rosOriginInstance.attrArn;
        this.attrInstanceId = rosOriginInstance.attrInstanceId;
    }
}
exports.OriginInstance = OriginInstance;
//# sourceMappingURL=data:application/json;base64,