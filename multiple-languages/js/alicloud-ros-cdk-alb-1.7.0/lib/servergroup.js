"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServerGroup = exports.ServerGroupProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const alb_generated_1 = require("./alb.generated");
Object.defineProperty(exports, "ServerGroupProperty", { enumerable: true, get: function () { return alb_generated_1.RosServerGroup; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::ALB::ServerGroup`, which is used to create a server group.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosServerGroup`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-alb-servergroup
 */
class ServerGroup extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosServerGroup = new alb_generated_1.RosServerGroup(this, id, {
            connectionDrainConfig: props.connectionDrainConfig,
            resourceGroupId: props.resourceGroupId,
            uchConfig: props.uchConfig,
            upstreamKeepaliveEnabled: props.upstreamKeepaliveEnabled === undefined || props.upstreamKeepaliveEnabled === null ? false : props.upstreamKeepaliveEnabled,
            scheduler: props.scheduler,
            stickySessionConfig: props.stickySessionConfig,
            serverGroupType: props.serverGroupType,
            crossZoneEnabled: props.crossZoneEnabled,
            ipv6Enabled: props.ipv6Enabled,
            slowStartConfig: props.slowStartConfig,
            vpcId: props.vpcId,
            serviceName: props.serviceName,
            healthCheckConfig: props.healthCheckConfig,
            protocol: props.protocol,
            tags: props.tags,
            serverGroupName: props.serverGroupName,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosServerGroup;
        this.attrArn = rosServerGroup.attrArn;
        this.attrServerGroupId = rosServerGroup.attrServerGroupId;
    }
}
exports.ServerGroup = ServerGroup;
//# sourceMappingURL=data:application/json;base64,