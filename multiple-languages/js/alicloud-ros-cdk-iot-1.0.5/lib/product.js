"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Product = exports.ProductProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const iot_generated_1 = require("./iot.generated");
Object.defineProperty(exports, "ProductProperty", { enumerable: true, get: function () { return iot_generated_1.RosProduct; } });
/**
 * A ROS resource type:  `ALIYUN::IOT::Product`
 */
class Product extends ros.Resource {
    /**
     * Create a new `ALIYUN::IOT::Product`.
     *
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosProduct = new iot_generated_1.RosProduct(this, id, {
            publishAuto: props.publishAuto,
            description: props.description,
            iotInstanceId: props.iotInstanceId,
            productName: props.productName,
            resourceGroupId: props.resourceGroupId,
            aliyunCommodityCode: props.aliyunCommodityCode,
            categoryKey: props.categoryKey,
            protocolType: props.protocolType,
            id2: props.id2,
            nodeType: props.nodeType,
            dataFormat: props.dataFormat,
            authType: props.authType,
            joinPermissionId: props.joinPermissionId,
            netType: props.netType,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosProduct;
        this.attrIotInstanceId = rosProduct.attrIotInstanceId;
        this.attrProductKey = rosProduct.attrProductKey;
    }
}
exports.Product = Product;
//# sourceMappingURL=data:application/json;base64,