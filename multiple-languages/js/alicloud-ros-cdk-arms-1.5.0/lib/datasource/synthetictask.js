"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SyntheticTask = exports.SyntheticTaskProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const arms_generated_1 = require("./arms.generated");
Object.defineProperty(exports, "SyntheticTaskProperty", { enumerable: true, get: function () { return arms_generated_1.RosSyntheticTask; } });
/**
 * This class encapsulates and extends the ROS resource type `DATASOURCE::ARMS::SyntheticTask`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosSyntheticTask`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/datasource-arms-synthetictask
 */
class SyntheticTask extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosSyntheticTask = new arms_generated_1.RosSyntheticTask(this, id, {
            taskId: props.taskId,
            refreshOptions: props.refreshOptions === undefined || props.refreshOptions === null ? 'Never' : props.refreshOptions,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosSyntheticTask;
        this.attrAvailableAssertions = rosSyntheticTask.attrAvailableAssertions;
        this.attrCommonSetting = rosSyntheticTask.attrCommonSetting;
        this.attrCustomPeriod = rosSyntheticTask.attrCustomPeriod;
        this.attrFrequency = rosSyntheticTask.attrFrequency;
        this.attrMonitorCategory = rosSyntheticTask.attrMonitorCategory;
        this.attrMonitorConf = rosSyntheticTask.attrMonitorConf;
        this.attrMonitors = rosSyntheticTask.attrMonitors;
        this.attrResourceGroupId = rosSyntheticTask.attrResourceGroupId;
        this.attrSyntheticTaskName = rosSyntheticTask.attrSyntheticTaskName;
        this.attrTags = rosSyntheticTask.attrTags;
        this.attrTaskId = rosSyntheticTask.attrTaskId;
        this.attrTaskType = rosSyntheticTask.attrTaskType;
    }
}
exports.SyntheticTask = SyntheticTask;
//# sourceMappingURL=data:application/json;base64,