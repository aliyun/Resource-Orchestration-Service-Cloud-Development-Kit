"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Flow = exports.FlowProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const fnf_generated_1 = require("./fnf.generated");
Object.defineProperty(exports, "FlowProperty", { enumerable: true, get: function () { return fnf_generated_1.RosFlow; } });
/**
 * This class encapsulates and extends the ROS resource type `DATASOURCE::FNF::Flow`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosFlow`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/datasource-fnf-flow
 */
class Flow extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosFlow = new fnf_generated_1.RosFlow(this, id, {
            flowName: props.flowName,
            refreshOptions: props.refreshOptions === undefined || props.refreshOptions === null ? 'Never' : props.refreshOptions,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosFlow;
        this.attrCreateTime = rosFlow.attrCreateTime;
        this.attrDefinition = rosFlow.attrDefinition;
        this.attrDescription = rosFlow.attrDescription;
        this.attrFlowId = rosFlow.attrFlowId;
        this.attrFlowName = rosFlow.attrFlowName;
        this.attrLastModifiedTime = rosFlow.attrLastModifiedTime;
        this.attrRoleArn = rosFlow.attrRoleArn;
        this.attrType = rosFlow.attrType;
    }
}
exports.Flow = Flow;
//# sourceMappingURL=data:application/json;base64,