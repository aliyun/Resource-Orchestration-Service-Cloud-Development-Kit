"use strict";
// Generated from the AliCloud ROS Resource Specification
Object.defineProperty(exports, "__esModule", { value: true });
exports.RosPipeline = exports.RosMediaWorkflow = void 0;
const ros = require("@alicloud/ros-cdk-core");
/**
 * Determine whether the given properties match those of a `RosMediaWorkflowProps`
 *
 * @param properties - the TypeScript properties of a `RosMediaWorkflowProps`
 *
 * @returns the result of the validation.
 */
function RosMediaWorkflowPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    if (properties.triggerMode && (typeof properties.triggerMode) !== 'object') {
        errors.collect(ros.propertyValidator('triggerMode', ros.validateAllowedValues)({
            data: properties.triggerMode,
            allowedValues: ["OssAutoTrigger", "NotInAuto"],
        }));
    }
    errors.collect(ros.propertyValidator('triggerMode', ros.validateString)(properties.triggerMode));
    errors.collect(ros.propertyValidator('topology', ros.requiredValidator)(properties.topology));
    errors.collect(ros.propertyValidator('topology', ros.hashValidator(ros.validateAny))(properties.topology));
    errors.collect(ros.propertyValidator('name', ros.requiredValidator)(properties.name));
    errors.collect(ros.propertyValidator('name', ros.validateString)(properties.name));
    return errors.wrap('supplied properties not correct for "RosMediaWorkflowProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::MPS::MediaWorkflow` resource
 *
 * @param properties - the TypeScript properties of a `RosMediaWorkflowProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::MPS::MediaWorkflow` resource.
 */
// @ts-ignore TS6133
function rosMediaWorkflowPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosMediaWorkflowPropsValidator(properties).assertSuccess();
    }
    return {
        'Name': ros.stringToRosTemplate(properties.name),
        'Topology': ros.hashMapper(ros.objectToRosTemplate)(properties.topology),
        'TriggerMode': ros.stringToRosTemplate(properties.triggerMode),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::MPS::MediaWorkflow`.
 * @Note This class does not contain additional functions, so it is recommended to use the `MediaWorkflow` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-mps-mediaworkflow
 */
class RosMediaWorkflow extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosMediaWorkflow.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrCreationTime = this.getAtt('CreationTime');
        this.attrMediaWorkflowId = this.getAtt('MediaWorkflowId');
        this.attrName = this.getAtt('Name');
        this.attrState = this.getAtt('State');
        this.attrTopology = this.getAtt('Topology');
        this.attrTriggerMode = this.getAtt('TriggerMode');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.name = props.name;
        this.topology = props.topology;
        this.triggerMode = props.triggerMode;
    }
    get rosProperties() {
        return {
            name: this.name,
            topology: this.topology,
            triggerMode: this.triggerMode,
        };
    }
    renderProperties(props) {
        return rosMediaWorkflowPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosMediaWorkflow = RosMediaWorkflow;
/**
 * The resource type name for this resource class.
 */
RosMediaWorkflow.ROS_RESOURCE_TYPE_NAME = "ALIYUN::MPS::MediaWorkflow";
/**
 * Determine whether the given properties match those of a `RosPipelineProps`
 *
 * @param properties - the TypeScript properties of a `RosPipelineProps`
 *
 * @returns the result of the validation.
 */
function RosPipelinePropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('role', ros.validateString)(properties.role));
    errors.collect(ros.propertyValidator('speed', ros.validateString)(properties.speed));
    errors.collect(ros.propertyValidator('speedLevel', ros.validateNumber)(properties.speedLevel));
    if (properties.state && (typeof properties.state) !== 'object') {
        errors.collect(ros.propertyValidator('state', ros.validateAllowedValues)({
            data: properties.state,
            allowedValues: ["Active", "Paused"],
        }));
    }
    errors.collect(ros.propertyValidator('state', ros.validateString)(properties.state));
    errors.collect(ros.propertyValidator('notifyConfig', RosPipeline_NotifyConfigPropertyValidator)(properties.notifyConfig));
    errors.collect(ros.propertyValidator('name', ros.requiredValidator)(properties.name));
    errors.collect(ros.propertyValidator('name', ros.validateString)(properties.name));
    return errors.wrap('supplied properties not correct for "RosPipelineProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::MPS::Pipeline` resource
 *
 * @param properties - the TypeScript properties of a `RosPipelineProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::MPS::Pipeline` resource.
 */
// @ts-ignore TS6133
function rosPipelinePropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosPipelinePropsValidator(properties).assertSuccess();
    }
    return {
        'Name': ros.stringToRosTemplate(properties.name),
        'NotifyConfig': rosPipelineNotifyConfigPropertyToRosTemplate(properties.notifyConfig),
        'Role': ros.stringToRosTemplate(properties.role),
        'Speed': ros.stringToRosTemplate(properties.speed),
        'SpeedLevel': ros.numberToRosTemplate(properties.speedLevel),
        'State': ros.stringToRosTemplate(properties.state),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::MPS::Pipeline`, which is used to create an ApsaraVideo Media Processing (MPS) queue.
 * @Note This class does not contain additional functions, so it is recommended to use the `Pipeline` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-mps-pipeline
 */
class RosPipeline extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosPipeline.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrPipelineId = this.getAtt('PipelineId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.name = props.name;
        this.notifyConfig = props.notifyConfig;
        this.role = props.role;
        this.speed = props.speed;
        this.speedLevel = props.speedLevel;
        this.state = props.state;
    }
    get rosProperties() {
        return {
            name: this.name,
            notifyConfig: this.notifyConfig,
            role: this.role,
            speed: this.speed,
            speedLevel: this.speedLevel,
            state: this.state,
        };
    }
    renderProperties(props) {
        return rosPipelinePropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosPipeline = RosPipeline;
/**
 * The resource type name for this resource class.
 */
RosPipeline.ROS_RESOURCE_TYPE_NAME = "ALIYUN::MPS::Pipeline";
/**
 * Determine whether the given properties match those of a `NotifyConfigProperty`
 *
 * @param properties - the TypeScript properties of a `NotifyConfigProperty`
 *
 * @returns the result of the validation.
 */
function RosPipeline_NotifyConfigPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('topic', ros.validateString)(properties.topic));
    errors.collect(ros.propertyValidator('queueName', ros.validateString)(properties.queueName));
    return errors.wrap('supplied properties not correct for "NotifyConfigProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::MPS::Pipeline.NotifyConfig` resource
 *
 * @param properties - the TypeScript properties of a `NotifyConfigProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::MPS::Pipeline.NotifyConfig` resource.
 */
// @ts-ignore TS6133
function rosPipelineNotifyConfigPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosPipeline_NotifyConfigPropertyValidator(properties).assertSuccess();
    return {
        'Topic': ros.stringToRosTemplate(properties.topic),
        'QueueName': ros.stringToRosTemplate(properties.queueName),
    };
}
//# sourceMappingURL=data:application/json;base64,