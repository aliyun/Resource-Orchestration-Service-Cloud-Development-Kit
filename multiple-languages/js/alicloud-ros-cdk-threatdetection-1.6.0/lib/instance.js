"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Instance = exports.InstanceProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const threatdetection_generated_1 = require("./threatdetection.generated");
Object.defineProperty(exports, "InstanceProperty", { enumerable: true, get: function () { return threatdetection_generated_1.RosInstance; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::ThreatDetection::Instance`, which is used to purchase Security Center (SAS).
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosInstance`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-threatdetection-instance
 */
class Instance extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosInstance = new threatdetection_generated_1.RosInstance(this, id, {
            threatAnalysis: props.threatAnalysis,
            sasSlsStorage: props.sasSlsStorage,
            containerImageScan: props.containerImageScan,
            threatAnalysisSwitch: props.threatAnalysisSwitch,
            vCore: props.vCore,
            renewPeriod: props.renewPeriod,
            sasSc: props.sasSc,
            sasCspmSwitch: props.sasCspmSwitch,
            buyNumber: props.buyNumber,
            sasWebguardBoolean: props.sasWebguardBoolean,
            honeypotSwitch: props.honeypotSwitch,
            paymentType: props.paymentType,
            sasSdk: props.sasSdk,
            sasAntiRansomware: props.sasAntiRansomware,
            sasWebguardOrderNum: props.sasWebguardOrderNum,
            renewalStatus: props.renewalStatus,
            productType: props.productType,
            vulSwitch: props.vulSwitch,
            period: props.period,
            raspCount: props.raspCount,
            vulCount: props.vulCount,
            versionCode: props.versionCode,
            modifyType: props.modifyType,
            sasCspm: props.sasCspm,
            sasSdkSwitch: props.sasSdkSwitch,
            renewalPeriodUnit: props.renewalPeriodUnit,
            containerImageScanNew: props.containerImageScanNew,
            honeypot: props.honeypot,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosInstance;
        this.attrBuyNumber = rosInstance.attrBuyNumber;
        this.attrContainerImageScan = rosInstance.attrContainerImageScan;
        this.attrContainerImageScanNew = rosInstance.attrContainerImageScanNew;
        this.attrCreateTime = rosInstance.attrCreateTime;
        this.attrHoneypot = rosInstance.attrHoneypot;
        this.attrHoneypotSwitch = rosInstance.attrHoneypotSwitch;
        this.attrInstanceId = rosInstance.attrInstanceId;
        this.attrPaymentType = rosInstance.attrPaymentType;
        this.attrRaspCount = rosInstance.attrRaspCount;
        this.attrRenewPeriod = rosInstance.attrRenewPeriod;
        this.attrRenewalPeriodUnit = rosInstance.attrRenewalPeriodUnit;
        this.attrRenewalStatus = rosInstance.attrRenewalStatus;
        this.attrSasAntiRansomware = rosInstance.attrSasAntiRansomware;
        this.attrSasCspm = rosInstance.attrSasCspm;
        this.attrSasCspmSwitch = rosInstance.attrSasCspmSwitch;
        this.attrSasSc = rosInstance.attrSasSc;
        this.attrSasSdk = rosInstance.attrSasSdk;
        this.attrSasSdkSwitch = rosInstance.attrSasSdkSwitch;
        this.attrSasSlsStorage = rosInstance.attrSasSlsStorage;
        this.attrSasWebguardBoolean = rosInstance.attrSasWebguardBoolean;
        this.attrSasWebguardOrderNum = rosInstance.attrSasWebguardOrderNum;
        this.attrThreatAnalysis = rosInstance.attrThreatAnalysis;
        this.attrThreatAnalysisSwitch = rosInstance.attrThreatAnalysisSwitch;
        this.attrVCore = rosInstance.attrVCore;
        this.attrVersionCode = rosInstance.attrVersionCode;
        this.attrVulCount = rosInstance.attrVulCount;
        this.attrVulSwitch = rosInstance.attrVulSwitch;
    }
}
exports.Instance = Instance;
//# sourceMappingURL=data:application/json;base64,