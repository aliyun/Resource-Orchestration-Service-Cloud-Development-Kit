"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Run = exports.RunProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const pai_generated_1 = require("./pai.generated");
Object.defineProperty(exports, "RunProperty", { enumerable: true, get: function () { return pai_generated_1.RosRun; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::PAI::Run`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosRun`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-pai-run
 */
class Run extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosRun = new pai_generated_1.RosRun(this, id, {
            experimentId: props.experimentId,
            sourceId: props.sourceId,
            sourceType: props.sourceType,
            runName: props.runName,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosRun;
        this.attrAccessibility = rosRun.attrAccessibility;
        this.attrCreateTime = rosRun.attrCreateTime;
        this.attrExperimentId = rosRun.attrExperimentId;
        this.attrGmtModifiedTime = rosRun.attrGmtModifiedTime;
        this.attrLabels = rosRun.attrLabels;
        this.attrMetrics = rosRun.attrMetrics;
        this.attrOwnerId = rosRun.attrOwnerId;
        this.attrParams = rosRun.attrParams;
        this.attrRunId = rosRun.attrRunId;
        this.attrRunName = rosRun.attrRunName;
        this.attrSourceId = rosRun.attrSourceId;
        this.attrSourceType = rosRun.attrSourceType;
        this.attrUserId = rosRun.attrUserId;
        this.attrWorkspaceId = rosRun.attrWorkspaceId;
    }
}
exports.Run = Run;
//# sourceMappingURL=data:application/json;base64,