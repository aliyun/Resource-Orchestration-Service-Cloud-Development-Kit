"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Application = exports.ApplicationProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const edas_generated_1 = require("./edas.generated");
Object.defineProperty(exports, "ApplicationProperty", { enumerable: true, get: function () { return edas_generated_1.RosApplication; } });
/**
 * A ROS resource type:  `ALIYUN::EDAS::Application`
 */
class Application extends ros.Resource {
    /**
     * Create a new `ALIYUN::EDAS::Application`.
     *
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosApplication = new edas_generated_1.RosApplication(this, id, {
            componentIds: props.componentIds,
            logicalRegionId: props.logicalRegionId,
            applicationName: props.applicationName,
            description: props.description,
            ecuInfo: props.ecuInfo,
            healthCheckUrl: props.healthCheckUrl,
            clusterId: props.clusterId,
            packageType: props.packageType === undefined || props.packageType === null ? 'war' : props.packageType,
            buildPackId: props.buildPackId,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosApplication;
        this.attrAppId = rosApplication.attrAppId;
        this.attrPort = rosApplication.attrPort;
    }
}
exports.Application = Application;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwbGljYXRpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJhcHBsaWNhdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw4Q0FBOEM7QUFDOUMscURBQWtEO0FBRXZCLG9HQUZsQiwrQkFBYyxPQUV1QjtBQXlEOUM7O0dBRUc7QUFDSCxNQUFhLFdBQVksU0FBUSxHQUFHLENBQUMsUUFBUTtJQWlCekM7Ozs7OztPQU1HO0lBQ0gsWUFBWSxLQUFvQixFQUFFLEVBQVUsRUFBRSxLQUF1QixFQUFFLG1DQUEyQyxJQUFJO1FBQ2xILEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFakIsTUFBTSxjQUFjLEdBQUcsSUFBSSwrQkFBYyxDQUFDLElBQUksRUFBRSxFQUFFLEVBQUc7WUFDakQsWUFBWSxFQUFFLEtBQUssQ0FBQyxZQUFZO1lBQ2hDLGVBQWUsRUFBRSxLQUFLLENBQUMsZUFBZTtZQUN0QyxlQUFlLEVBQUUsS0FBSyxDQUFDLGVBQWU7WUFDdEMsV0FBVyxFQUFFLEtBQUssQ0FBQyxXQUFXO1lBQzlCLE9BQU8sRUFBRSxLQUFLLENBQUMsT0FBTztZQUN0QixjQUFjLEVBQUUsS0FBSyxDQUFDLGNBQWM7WUFDcEMsU0FBUyxFQUFFLEtBQUssQ0FBQyxTQUFTO1lBQzFCLFdBQVcsRUFBRSxLQUFLLENBQUMsV0FBVyxLQUFLLFNBQVMsSUFBSSxLQUFLLENBQUMsV0FBVyxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsV0FBVztZQUN0RyxXQUFXLEVBQUUsS0FBSyxDQUFDLFdBQVc7U0FDakMsRUFBRSxnQ0FBZ0MsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7UUFDcEYsSUFBSSxDQUFDLFFBQVEsR0FBRyxjQUFjLENBQUM7UUFDL0IsSUFBSSxDQUFDLFNBQVMsR0FBRyxjQUFjLENBQUMsU0FBUyxDQUFDO1FBQzFDLElBQUksQ0FBQyxRQUFRLEdBQUcsY0FBYyxDQUFDLFFBQVEsQ0FBQztJQUM1QyxDQUFDO0NBQ0o7QUExQ0Qsa0NBMENDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcm9zIGZyb20gJ0BhbGljbG91ZC9yb3MtY2RrLWNvcmUnO1xuaW1wb3J0IHsgUm9zQXBwbGljYXRpb24gfSBmcm9tICcuL2VkYXMuZ2VuZXJhdGVkJztcbi8vIEdlbmVyYXRlZCBmcm9tIHRoZSBBbGlDbG91ZCBST1MgUmVzb3VyY2UgU3BlY2lmaWNhdGlvblxuZXhwb3J0IHsgUm9zQXBwbGljYXRpb24gYXMgQXBwbGljYXRpb25Qcm9wZXJ0eSB9O1xuXG4vKipcbiAqIFByb3BlcnRpZXMgZm9yIGRlZmluaW5nIGEgYEFMSVlVTjo6RURBUzo6QXBwbGljYXRpb25gXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQXBwbGljYXRpb25Qcm9wcyB7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBhcHBsaWNhdGlvbk5hbWU6IFRoZSBhcHBsaWNhdGlvbiBuYW1lIChvbmx5IGFsbG93IHRoZSB1c2Ugb2YgbnVtYmVycywgbGV0dGVycywgLSwgXywgdXAgdG8gMzYgY2hhcmFjdGVycylcbiAgICAgKi9cbiAgICByZWFkb25seSBhcHBsaWNhdGlvbk5hbWU6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGNsdXN0ZXJJZDogQ2x1c3RlciBJRCBvZiBFQ1MgYXBwbGljYXRpb25cbiAgICAgKi9cbiAgICByZWFkb25seSBjbHVzdGVySWQ6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGJ1aWxkUGFja0lkOiBFREFTLUNvbnRhaW5lciBjb25zdHJ1Y3QgYSBwYWNrZXQgbnVtYmVyIChhdmFpbGFibGUgdmVyc2lvbiBsaXN0IGFjcXVpcmVkIHRocm91Z2ggdGhlIExpc3RCdWlsZFBhY2sgQVBJIChDb25maWdJZCBvZiByZXNwb25zZSkgb3IgXCJjb250YWluZXIgdmVyc2lvblwiIHRhYmxlIFwiQnVpbGRpbmcgcGFja2V0IG51bWJlclwiIGNvbHVtbiBhY3F1aXNpdGlvbikuIFdoZW4gY3JlYXRpbmcgSFNGIGFwcGxpY2F0aW9uLCB0aGlzIHBhcmFtZXRlciBtdXN0IGJlIHNwZWNpZmllZFxuICAgICAqL1xuICAgIHJlYWRvbmx5IGJ1aWxkUGFja0lkPzogbnVtYmVyIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgY29tcG9uZW50SWRzOiBBcHBsaWNhdGlvbiBjb21wb25lbnQgSUQgKGF2YWlsYWJsZSB0aHJvdWdoIHRoZSBxdWVyeSBpbnRlcmZhY2UgdG8gb2J0YWluIGEgbGlzdCBvZiBjb21wb25lbnRzIHRvIHRoZSBpbnRlcmZhY2UgTGlzdENvbXBvbmVudHMpLCB3aGVuIGNyZWF0aW5nIHRoZSBhcHBsaWNhdGlvbiBydW50aW1lIGVudmlyb25tZW50IHVzaW5nIEFwYWNoZSBUb21jYXQgKHdhciBwYWNrZXQgZm9ybWF0IER1YmJvXG4gICAgICogQXBwbGljYXRpb24gcmVxdWlyZWQpIG9yIHN0YW5kYXJkIEphdmEgYXBwbGljYXRpb24gKGphciBwYWNrYWdlIGZvcm1hdCBTcHJpbmcgQm9vdCAvIFNwcmluZyBDbG91ZCBhcHBsaWNhdGlvbnMgcmVxdWlyZSkgeW91IG5lZWQgdG8gc3BlY2lmeSB3aGVuIHRoZSBvcGVyYXRpbmcgZW52aXJvbm1lbnQuIENvbW1vbmx5IHVzZWQgYXBwbGljYXRpb24gY29tcG9uZW50IElEIGFuZCBtZWFuaW5nOlxuICAgICAqIDQgcmVwcmVzZW50cyBBcGFjaGUgVG9tY2F0IDcuMC45MSw3IHJlcHJlc2VudGVkIEFwYWNoZSBUb21jYXQgOC41LjQyLDUgcmVwcmVzZW50ZWQgT3BlbkpESyAxLjgueCwgNiByZXByZXNlbnRzIE9wZW5KREtcbiAgICAgKiAxLjcueFxuICAgICAqL1xuICAgIHJlYWRvbmx5IGNvbXBvbmVudElkcz86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGRlc2NyaXB0aW9uOiBEZXNjcmlwdGl2ZSBpbmZvcm1hdGlvblxuICAgICAqL1xuICAgIHJlYWRvbmx5IGRlc2NyaXB0aW9uPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgZWN1SW5mbzogTWFjaGluZSBjYXBhY2l0eSBpcyBuZWVkZWQgZWN1X2lkIChFQ1MgRXhhbXBsZXMgaW50cm9kdWNpbmcgYW5vdGhlciB1bmlxdWUgaWRlbnRpdHkgRURBUyBFREFTKSwgdGhlIHBsdXJhbGl0eSBvZiBcIixcIiBzZXBhcmF0ZWQgKGJ5IHF1ZXJ5aW5nIExpc3RTY2FsZU91dEVjdSB3aGVyZWluIGVjdV9pZFxuICAgICAqIEludGVyZmFjZSB0byBvYnRhaW4pLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGVjdUluZm8/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBoZWFsdGhDaGVja1VybDogQXBwbGljYXRpb24gSGVhbHRoIENoZWNrIFVSTFxuICAgICAqL1xuICAgIHJlYWRvbmx5IGhlYWx0aENoZWNrVXJsPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgbG9naWNhbFJlZ2lvbklkOiBOYW1lc3BhY2UgSURcbiAgICAgKi9cbiAgICByZWFkb25seSBsb2dpY2FsUmVnaW9uSWQ/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBwYWNrYWdlVHlwZTogQXBwbGljYXRpb24gcGFja2V0IGZvcm1hdCwgcG9zc2libGUgdmFsdWVzOiB3YXIgb3IgamFyXG4gICAgICovXG4gICAgcmVhZG9ubHkgcGFja2FnZVR5cGU/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG59XG5cbi8qKlxuICogQSBST1MgcmVzb3VyY2UgdHlwZTogIGBBTElZVU46OkVEQVM6OkFwcGxpY2F0aW9uYFxuICovXG5leHBvcnQgY2xhc3MgQXBwbGljYXRpb24gZXh0ZW5kcyByb3MuUmVzb3VyY2Uge1xuXG4gICAgLyoqXG4gICAgICogQSBmYWN0b3J5IG1ldGhvZCB0aGF0IGNyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgdGhpcyBjbGFzcyBmcm9tIGFuIG9iamVjdFxuICAgICAqIGNvbnRhaW5pbmcgdGhlIHByb3BlcnRpZXMgb2YgdGhpcyBST1MgcmVzb3VyY2UsIHdoaWNoIHdpbGwgYmUgYXNzaWduZWQgdG8gUk9TIHJlc291cmNlLlxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIEFwcElkOiBBcHBsaWNhdGlvbiBJZCwgYSB1bmlxdWUgaWRlbnRpZmllciBFREFTIGFwcGxpY2F0aW9uXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJBcHBJZDogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIFBvcnQ6IEFwcGxpY2F0aW9uIHBvcnRcbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0clBvcnQ6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBgQUxJWVVOOjpFREFTOjpBcHBsaWNhdGlvbmAuXG4gICAgICpcbiAgICAgKiBQYXJhbSBzY29wZSAtIHNjb3BlIGluIHdoaWNoIHRoaXMgcmVzb3VyY2UgaXMgZGVmaW5lZFxuICAgICAqIFBhcmFtIGlkICAgIC0gc2NvcGVkIGlkIG9mIHRoZSByZXNvdXJjZVxuICAgICAqIFBhcmFtIHByb3BzIC0gcmVzb3VyY2UgcHJvcGVydGllc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiByb3MuQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogQXBwbGljYXRpb25Qcm9wcywgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6Ym9vbGVhbiA9IHRydWUpIHtcbiAgICAgICAgc3VwZXIoc2NvcGUsIGlkKTtcblxuICAgICAgICBjb25zdCByb3NBcHBsaWNhdGlvbiA9IG5ldyBSb3NBcHBsaWNhdGlvbih0aGlzLCBpZCwgIHtcbiAgICAgICAgICAgIGNvbXBvbmVudElkczogcHJvcHMuY29tcG9uZW50SWRzLFxuICAgICAgICAgICAgbG9naWNhbFJlZ2lvbklkOiBwcm9wcy5sb2dpY2FsUmVnaW9uSWQsXG4gICAgICAgICAgICBhcHBsaWNhdGlvbk5hbWU6IHByb3BzLmFwcGxpY2F0aW9uTmFtZSxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBwcm9wcy5kZXNjcmlwdGlvbixcbiAgICAgICAgICAgIGVjdUluZm86IHByb3BzLmVjdUluZm8sXG4gICAgICAgICAgICBoZWFsdGhDaGVja1VybDogcHJvcHMuaGVhbHRoQ2hlY2tVcmwsXG4gICAgICAgICAgICBjbHVzdGVySWQ6IHByb3BzLmNsdXN0ZXJJZCxcbiAgICAgICAgICAgIHBhY2thZ2VUeXBlOiBwcm9wcy5wYWNrYWdlVHlwZSA9PT0gdW5kZWZpbmVkIHx8IHByb3BzLnBhY2thZ2VUeXBlID09PSBudWxsID8gJ3dhcicgOiBwcm9wcy5wYWNrYWdlVHlwZSxcbiAgICAgICAgICAgIGJ1aWxkUGFja0lkOiBwcm9wcy5idWlsZFBhY2tJZCxcbiAgICAgICAgfSwgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgJiYgdGhpcy5zdGFjay5lbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCk7XG4gICAgICAgIHRoaXMucmVzb3VyY2UgPSByb3NBcHBsaWNhdGlvbjtcbiAgICAgICAgdGhpcy5hdHRyQXBwSWQgPSByb3NBcHBsaWNhdGlvbi5hdHRyQXBwSWQ7XG4gICAgICAgIHRoaXMuYXR0clBvcnQgPSByb3NBcHBsaWNhdGlvbi5hdHRyUG9ydDtcbiAgICB9XG59XG4iXX0=