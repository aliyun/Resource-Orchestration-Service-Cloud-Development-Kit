"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PrometheusUrl = exports.PrometheusUrlProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const arms_generated_1 = require("./arms.generated");
Object.defineProperty(exports, "PrometheusUrlProperty", { enumerable: true, get: function () { return arms_generated_1.RosPrometheusUrl; } });
/**
 * This class encapsulates and extends the ROS resource type `DATASOURCE::ARMS::PrometheusUrl`, which is used to query all URLs of a cluster, including the URLs for remote read, remote write, Pushgateway, and Grafana.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosPrometheusUrl`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/datasource-arms-prometheusurl
 */
class PrometheusUrl extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props = {}, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosPrometheusUrl = new arms_generated_1.RosPrometheusUrl(this, id, {
            clusterId: props.clusterId,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosPrometheusUrl;
        this.attrClusterId = rosPrometheusUrl.attrClusterId;
        this.attrClusterType = rosPrometheusUrl.attrClusterType;
        this.attrGrafanaUrl = rosPrometheusUrl.attrGrafanaUrl;
        this.attrInternetGrafanaUrl = rosPrometheusUrl.attrInternetGrafanaUrl;
        this.attrInternetOpenTelemetryUrl = rosPrometheusUrl.attrInternetOpenTelemetryUrl;
        this.attrInternetPushGatewayUrl = rosPrometheusUrl.attrInternetPushGatewayUrl;
        this.attrInternetRemoteReadUrl = rosPrometheusUrl.attrInternetRemoteReadUrl;
        this.attrInternetRemoteWriteUrl = rosPrometheusUrl.attrInternetRemoteWriteUrl;
        this.attrOpenTelemetryUrl = rosPrometheusUrl.attrOpenTelemetryUrl;
        this.attrPushGatewayUrl = rosPrometheusUrl.attrPushGatewayUrl;
        this.attrRemoteReadUrl = rosPrometheusUrl.attrRemoteReadUrl;
        this.attrRemoteWriteUrl = rosPrometheusUrl.attrRemoteWriteUrl;
        this.attrToken = rosPrometheusUrl.attrToken;
    }
}
exports.PrometheusUrl = PrometheusUrl;
//# sourceMappingURL=data:application/json;base64,