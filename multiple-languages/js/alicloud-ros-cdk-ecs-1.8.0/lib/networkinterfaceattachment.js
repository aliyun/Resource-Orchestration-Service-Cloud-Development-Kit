"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NetworkInterfaceAttachment = exports.NetworkInterfaceAttachmentProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ecs_generated_1 = require("./ecs.generated");
Object.defineProperty(exports, "NetworkInterfaceAttachmentProperty", { enumerable: true, get: function () { return ecs_generated_1.RosNetworkInterfaceAttachment; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::ECS::NetworkInterfaceAttachment`, which is used to bind an elastic network interface (ENI) to an Elastic Compute Service (ECS) instance in a virtual private cloud (VPC).
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosNetworkInterfaceAttachment`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-ecs-networkinterfaceattachment
 */
class NetworkInterfaceAttachment extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosNetworkInterfaceAttachment = new ecs_generated_1.RosNetworkInterfaceAttachment(this, id, {
            trunkNetworkInstanceId: props.trunkNetworkInstanceId,
            instanceId: props.instanceId,
            ecsRestartOption: props.ecsRestartOption,
            networkInterfaceId: props.networkInterfaceId,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosNetworkInterfaceAttachment;
        this.attrInstanceId = rosNetworkInterfaceAttachment.attrInstanceId;
        this.attrNetworkInterfaceId = rosNetworkInterfaceAttachment.attrNetworkInterfaceId;
        this.attrTrunkNetworkInstanceId = rosNetworkInterfaceAttachment.attrTrunkNetworkInstanceId;
    }
}
exports.NetworkInterfaceAttachment = NetworkInterfaceAttachment;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmV0d29ya2ludGVyZmFjZWF0dGFjaG1lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJuZXR3b3JraW50ZXJmYWNlYXR0YWNobWVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw4Q0FBOEM7QUFDOUMsbURBQWdFO0FBRXRCLG1IQUZqQyw2Q0FBNkIsT0FFc0M7QUFrRDVFOzs7O0dBSUc7QUFDSCxNQUFhLDBCQUEyQixTQUFRLEdBQUcsQ0FBQyxRQUFRO0lBcUJ4RDs7OztPQUlHO0lBQ0gsWUFBWSxLQUFvQixFQUFFLEVBQVUsRUFBRSxLQUFzQyxFQUFFLG1DQUEyQyxJQUFJO1FBQ2pJLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDakIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUM7UUFDYixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsZ0NBQWdDLEdBQUcsZ0NBQWdDLENBQUM7UUFFekUsTUFBTSw2QkFBNkIsR0FBRyxJQUFJLDZDQUE2QixDQUFDLElBQUksRUFBRSxFQUFFLEVBQUc7WUFDL0Usc0JBQXNCLEVBQUUsS0FBSyxDQUFDLHNCQUFzQjtZQUNwRCxVQUFVLEVBQUUsS0FBSyxDQUFDLFVBQVU7WUFDNUIsZ0JBQWdCLEVBQUUsS0FBSyxDQUFDLGdCQUFnQjtZQUN4QyxrQkFBa0IsRUFBRSxLQUFLLENBQUMsa0JBQWtCO1NBQy9DLEVBQUUsZ0NBQWdDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO1FBQ3BGLElBQUksQ0FBQyxRQUFRLEdBQUcsNkJBQTZCLENBQUM7UUFDOUMsSUFBSSxDQUFDLGNBQWMsR0FBRyw2QkFBNkIsQ0FBQyxjQUFjLENBQUM7UUFDbkUsSUFBSSxDQUFDLHNCQUFzQixHQUFHLDZCQUE2QixDQUFDLHNCQUFzQixDQUFDO1FBQ25GLElBQUksQ0FBQywwQkFBMEIsR0FBRyw2QkFBNkIsQ0FBQywwQkFBMEIsQ0FBQztJQUMvRixDQUFDO0NBQ0o7QUE1Q0QsZ0VBNENDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcm9zIGZyb20gJ0BhbGljbG91ZC9yb3MtY2RrLWNvcmUnO1xuaW1wb3J0IHsgUm9zTmV0d29ya0ludGVyZmFjZUF0dGFjaG1lbnQgfSBmcm9tICcuL2Vjcy5nZW5lcmF0ZWQnO1xuLy8gR2VuZXJhdGVkIGZyb20gdGhlIEFsaUNsb3VkIFJPUyBSZXNvdXJjZSBTcGVjaWZpY2F0aW9uXG5leHBvcnQgeyBSb3NOZXR3b3JrSW50ZXJmYWNlQXR0YWNobWVudCBhcyBOZXR3b3JrSW50ZXJmYWNlQXR0YWNobWVudFByb3BlcnR5IH07XG5cbi8qKlxuICogUHJvcGVydGllcyBmb3IgZGVmaW5pbmcgYSBgTmV0d29ya0ludGVyZmFjZUF0dGFjaG1lbnRgLlxuICogU2VlIGh0dHBzOi8vd3d3LmFsaWJhYmFjbG91ZC5jb20vaGVscC9yb3MvZGV2ZWxvcGVyLXJlZmVyZW5jZS9hbGl5dW4tZWNzLW5ldHdvcmtpbnRlcmZhY2VhdHRhY2htZW50XG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgTmV0d29ya0ludGVyZmFjZUF0dGFjaG1lbnRQcm9wcyB7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBpbnN0YW5jZUlkOiBFQ1MgaW5zdGFuY2UgaWRcbiAgICAgKi9cbiAgICByZWFkb25seSBpbnN0YW5jZUlkOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBuZXR3b3JrSW50ZXJmYWNlSWQ6IE5ldHdvcmsgaW50ZXJmYWNlIGlkXG4gICAgICovXG4gICAgcmVhZG9ubHkgbmV0d29ya0ludGVyZmFjZUlkOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBlY3NSZXN0YXJ0T3B0aW9uOiBDb250cm9sIHdoZXRoZXIgdG8gcmVzdGFydCB0aGUgRUNTIGluc3RhbmNlIHdoZW4gYmluZGluZyBhbiBlbGFzdGljIG5ldHdvcmsgY2FyZC5Pbmx5IGVmZmVjdGl2ZSBmb3IgRU5JIHRoYXQgZG9lcyBub3Qgc3VwcG9ydCBob3Qgc3dhcHBpbmcuXG4gICAgICovXG4gICAgcmVhZG9ubHkgZWNzUmVzdGFydE9wdGlvbj86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHRydW5rTmV0d29ya0luc3RhbmNlSWQ6IHVuZGVmaW5lZFxuICAgICAqL1xuICAgIHJlYWRvbmx5IHRydW5rTmV0d29ya0luc3RhbmNlSWQ/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG59XG5cbi8qKlxuICogUmVwcmVzZW50cyBhIGBOZXR3b3JrSW50ZXJmYWNlQXR0YWNobWVudGAuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSU5ldHdvcmtJbnRlcmZhY2VBdHRhY2htZW50IGV4dGVuZHMgcm9zLklSZXNvdXJjZSB7XG4gICAgcmVhZG9ubHkgcHJvcHM6IE5ldHdvcmtJbnRlcmZhY2VBdHRhY2htZW50UHJvcHM7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgSW5zdGFuY2VJZDogSUQgb2YgRUNTIGluc3RhbmNlLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGF0dHJJbnN0YW5jZUlkOiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgTmV0d29ya0ludGVyZmFjZUlkOiBJRCBvZiB5b3VyIE5ldHdvcmsgSW50ZXJmYWNlLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGF0dHJOZXR3b3JrSW50ZXJmYWNlSWQ6IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBUcnVua05ldHdvcmtJbnN0YW5jZUlkOiBJRCBvZiBUcnVuayBOZXR3b3JrIEludGVyZmFjZS5cbiAgICAgKi9cbiAgICByZWFkb25seSBhdHRyVHJ1bmtOZXR3b3JrSW5zdGFuY2VJZDogcm9zLklSZXNvbHZhYmxlIHwgc3RyaW5nO1xufVxuLyoqXG4gKiBUaGlzIGNsYXNzIGVuY2Fwc3VsYXRlcyBhbmQgZXh0ZW5kcyB0aGUgUk9TIHJlc291cmNlIHR5cGUgYEFMSVlVTjo6RUNTOjpOZXR3b3JrSW50ZXJmYWNlQXR0YWNobWVudGAsIHdoaWNoIGlzIHVzZWQgdG8gYmluZCBhbiBlbGFzdGljIG5ldHdvcmsgaW50ZXJmYWNlIChFTkkpIHRvIGFuIEVsYXN0aWMgQ29tcHV0ZSBTZXJ2aWNlIChFQ1MpIGluc3RhbmNlIGluIGEgdmlydHVhbCBwcml2YXRlIGNsb3VkIChWUEMpLlxuICogQE5vdGUgVGhpcyBjbGFzcyBtYXkgaGF2ZSBzb21lIG5ldyBmdW5jdGlvbnMgdG8gZmFjaWxpdGF0ZSBkZXZlbG9wbWVudCwgc28gaXQgaXMgcmVjb21tZW5kZWQgdG8gdXNlIHRoaXMgY2xhc3MgaW5zdGVhZCBvZiBgUm9zTmV0d29ya0ludGVyZmFjZUF0dGFjaG1lbnRgZm9yIGEgbW9yZSBjb252ZW5pZW50IGRldmVsb3BtZW50IGV4cGVyaWVuY2UuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2FsaXl1bi1lY3MtbmV0d29ya2ludGVyZmFjZWF0dGFjaG1lbnRcbiAqL1xuZXhwb3J0IGNsYXNzIE5ldHdvcmtJbnRlcmZhY2VBdHRhY2htZW50IGV4dGVuZHMgcm9zLlJlc291cmNlIGltcGxlbWVudHMgSU5ldHdvcmtJbnRlcmZhY2VBdHRhY2htZW50IHtcbiAgICBwcm90ZWN0ZWQgc2NvcGU6IHJvcy5Db25zdHJ1Y3Q7XG4gICAgcHJvdGVjdGVkIGlkOiBzdHJpbmc7XG4gICAgcHVibGljIHJlYWRvbmx5IHByb3BzOiBOZXR3b3JrSW50ZXJmYWNlQXR0YWNobWVudFByb3BzO1xuICAgIHByb3RlY3RlZCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBJbnN0YW5jZUlkOiBJRCBvZiBFQ1MgaW5zdGFuY2UuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJJbnN0YW5jZUlkOiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgTmV0d29ya0ludGVyZmFjZUlkOiBJRCBvZiB5b3VyIE5ldHdvcmsgSW50ZXJmYWNlLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyTmV0d29ya0ludGVyZmFjZUlkOiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgVHJ1bmtOZXR3b3JrSW5zdGFuY2VJZDogSUQgb2YgVHJ1bmsgTmV0d29yayBJbnRlcmZhY2UuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJUcnVua05ldHdvcmtJbnN0YW5jZUlkOiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBQYXJhbSBzY29wZSAtIHNjb3BlIGluIHdoaWNoIHRoaXMgcmVzb3VyY2UgaXMgZGVmaW5lZFxuICAgICAqIFBhcmFtIGlkICAgIC0gc2NvcGVkIGlkIG9mIHRoZSByZXNvdXJjZVxuICAgICAqIFBhcmFtIHByb3BzIC0gcmVzb3VyY2UgcHJvcGVydGllc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiByb3MuQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogTmV0d29ya0ludGVyZmFjZUF0dGFjaG1lbnRQcm9wcywgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6Ym9vbGVhbiA9IHRydWUpIHtcbiAgICAgICAgc3VwZXIoc2NvcGUsIGlkKTtcbiAgICAgICAgdGhpcy5zY29wZSA9IHNjb3BlO1xuICAgICAgICB0aGlzLmlkID0gaWQ7XG4gICAgICAgIHRoaXMucHJvcHMgPSBwcm9wcztcbiAgICAgICAgdGhpcy5lbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCA9IGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50O1xuXG4gICAgICAgIGNvbnN0IHJvc05ldHdvcmtJbnRlcmZhY2VBdHRhY2htZW50ID0gbmV3IFJvc05ldHdvcmtJbnRlcmZhY2VBdHRhY2htZW50KHRoaXMsIGlkLCAge1xuICAgICAgICAgICAgdHJ1bmtOZXR3b3JrSW5zdGFuY2VJZDogcHJvcHMudHJ1bmtOZXR3b3JrSW5zdGFuY2VJZCxcbiAgICAgICAgICAgIGluc3RhbmNlSWQ6IHByb3BzLmluc3RhbmNlSWQsXG4gICAgICAgICAgICBlY3NSZXN0YXJ0T3B0aW9uOiBwcm9wcy5lY3NSZXN0YXJ0T3B0aW9uLFxuICAgICAgICAgICAgbmV0d29ya0ludGVyZmFjZUlkOiBwcm9wcy5uZXR3b3JrSW50ZXJmYWNlSWQsXG4gICAgICAgIH0sIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ICYmIHRoaXMuc3RhY2suZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQpO1xuICAgICAgICB0aGlzLnJlc291cmNlID0gcm9zTmV0d29ya0ludGVyZmFjZUF0dGFjaG1lbnQ7XG4gICAgICAgIHRoaXMuYXR0ckluc3RhbmNlSWQgPSByb3NOZXR3b3JrSW50ZXJmYWNlQXR0YWNobWVudC5hdHRySW5zdGFuY2VJZDtcbiAgICAgICAgdGhpcy5hdHRyTmV0d29ya0ludGVyZmFjZUlkID0gcm9zTmV0d29ya0ludGVyZmFjZUF0dGFjaG1lbnQuYXR0ck5ldHdvcmtJbnRlcmZhY2VJZDtcbiAgICAgICAgdGhpcy5hdHRyVHJ1bmtOZXR3b3JrSW5zdGFuY2VJZCA9IHJvc05ldHdvcmtJbnRlcmZhY2VBdHRhY2htZW50LmF0dHJUcnVua05ldHdvcmtJbnN0YW5jZUlkO1xuICAgIH1cbn1cbiJdfQ==