"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LaunchTemplate = exports.LaunchTemplateProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ecs_generated_1 = require("./ecs.generated");
Object.defineProperty(exports, "LaunchTemplateProperty", { enumerable: true, get: function () { return ecs_generated_1.RosLaunchTemplate; } });
/**
 * This class encapsulates and extends the ROS resource type `DATASOURCE::ECS::LaunchTemplate`, which is used to query the information about a launch template.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosLaunchTemplate`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/datasource-ecs-launchtemplate
 */
class LaunchTemplate extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosLaunchTemplate = new ecs_generated_1.RosLaunchTemplate(this, id, {
            launchTemplateId: props.launchTemplateId,
            refreshOptions: props.refreshOptions === undefined || props.refreshOptions === null ? 'Never' : props.refreshOptions,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosLaunchTemplate;
        this.attrAutoReleaseTime = rosLaunchTemplate.attrAutoReleaseTime;
        this.attrCreateTime = rosLaunchTemplate.attrCreateTime;
        this.attrCreatedBy = rosLaunchTemplate.attrCreatedBy;
        this.attrDataDisk = rosLaunchTemplate.attrDataDisk;
        this.attrDefaultVersionNumber = rosLaunchTemplate.attrDefaultVersionNumber;
        this.attrDeletionProtection = rosLaunchTemplate.attrDeletionProtection;
        this.attrDeploymentSetId = rosLaunchTemplate.attrDeploymentSetId;
        this.attrDescription = rosLaunchTemplate.attrDescription;
        this.attrHostName = rosLaunchTemplate.attrHostName;
        this.attrImageId = rosLaunchTemplate.attrImageId;
        this.attrImageOwnerAlias = rosLaunchTemplate.attrImageOwnerAlias;
        this.attrInstanceChargeType = rosLaunchTemplate.attrInstanceChargeType;
        this.attrInstanceName = rosLaunchTemplate.attrInstanceName;
        this.attrInstanceType = rosLaunchTemplate.attrInstanceType;
        this.attrInternetChargeType = rosLaunchTemplate.attrInternetChargeType;
        this.attrInternetMaxBandwidthIn = rosLaunchTemplate.attrInternetMaxBandwidthIn;
        this.attrInternetMaxBandwidthOut = rosLaunchTemplate.attrInternetMaxBandwidthOut;
        this.attrIoOptimized = rosLaunchTemplate.attrIoOptimized;
        this.attrIpv6AddressCount = rosLaunchTemplate.attrIpv6AddressCount;
        this.attrKeyPairName = rosLaunchTemplate.attrKeyPairName;
        this.attrLatestVersionNumber = rosLaunchTemplate.attrLatestVersionNumber;
        this.attrLaunchTemplateId = rosLaunchTemplate.attrLaunchTemplateId;
        this.attrLaunchTemplateName = rosLaunchTemplate.attrLaunchTemplateName;
        this.attrModifiedTime = rosLaunchTemplate.attrModifiedTime;
        this.attrNetworkInterface = rosLaunchTemplate.attrNetworkInterface;
        this.attrNetworkType = rosLaunchTemplate.attrNetworkType;
        this.attrPasswordInherit = rosLaunchTemplate.attrPasswordInherit;
        this.attrPeriod = rosLaunchTemplate.attrPeriod;
        this.attrPrivateIpAddress = rosLaunchTemplate.attrPrivateIpAddress;
        this.attrRamRoleName = rosLaunchTemplate.attrRamRoleName;
        this.attrResourceGroupId = rosLaunchTemplate.attrResourceGroupId;
        this.attrSecurityEnhancementStrategy = rosLaunchTemplate.attrSecurityEnhancementStrategy;
        this.attrSecurityGroupIds = rosLaunchTemplate.attrSecurityGroupIds;
        this.attrSpotPriceLimit = rosLaunchTemplate.attrSpotPriceLimit;
        this.attrSpotStrategy = rosLaunchTemplate.attrSpotStrategy;
        this.attrSystemDisk = rosLaunchTemplate.attrSystemDisk;
        this.attrTags = rosLaunchTemplate.attrTags;
        this.attrTemplateResourceGroupId = rosLaunchTemplate.attrTemplateResourceGroupId;
        this.attrTemplateTag = rosLaunchTemplate.attrTemplateTag;
        this.attrUserData = rosLaunchTemplate.attrUserData;
        this.attrVSwitchId = rosLaunchTemplate.attrVSwitchId;
        this.attrVersionDescription = rosLaunchTemplate.attrVersionDescription;
        this.attrVpcId = rosLaunchTemplate.attrVpcId;
        this.attrZoneId = rosLaunchTemplate.attrZoneId;
    }
}
exports.LaunchTemplate = LaunchTemplate;
//# sourceMappingURL=data:application/json;base64,