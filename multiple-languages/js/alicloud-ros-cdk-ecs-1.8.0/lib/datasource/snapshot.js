"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Snapshot = exports.SnapshotProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ecs_generated_1 = require("./ecs.generated");
Object.defineProperty(exports, "SnapshotProperty", { enumerable: true, get: function () { return ecs_generated_1.RosSnapshot; } });
/**
 * This class encapsulates and extends the ROS resource type `DATASOURCE::ECS::Snapshot`, which is used to query the information about a snapshot.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosSnapshot`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/datasource-ecs-snapshot
 */
class Snapshot extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosSnapshot = new ecs_generated_1.RosSnapshot(this, id, {
            snapshotId: props.snapshotId,
            refreshOptions: props.refreshOptions === undefined || props.refreshOptions === null ? 'Never' : props.refreshOptions,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosSnapshot;
        this.attrCreateTime = rosSnapshot.attrCreateTime;
        this.attrDescription = rosSnapshot.attrDescription;
        this.attrDiskId = rosSnapshot.attrDiskId;
        this.attrEncrypted = rosSnapshot.attrEncrypted;
        this.attrInstantAccess = rosSnapshot.attrInstantAccess;
        this.attrInstantAccessRetentionDays = rosSnapshot.attrInstantAccessRetentionDays;
        this.attrProductCode = rosSnapshot.attrProductCode;
        this.attrProgress = rosSnapshot.attrProgress;
        this.attrRemainTime = rosSnapshot.attrRemainTime;
        this.attrResourceGroupId = rosSnapshot.attrResourceGroupId;
        this.attrRetentionDays = rosSnapshot.attrRetentionDays;
        this.attrSnapshotId = rosSnapshot.attrSnapshotId;
        this.attrSnapshotName = rosSnapshot.attrSnapshotName;
        this.attrSnapshotSn = rosSnapshot.attrSnapshotSn;
        this.attrSnapshotType = rosSnapshot.attrSnapshotType;
        this.attrSourceDiskSize = rosSnapshot.attrSourceDiskSize;
        this.attrSourceDiskType = rosSnapshot.attrSourceDiskType;
        this.attrSourceStorageType = rosSnapshot.attrSourceStorageType;
        this.attrTags = rosSnapshot.attrTags;
        this.attrUsage = rosSnapshot.attrUsage;
    }
}
exports.Snapshot = Snapshot;
//# sourceMappingURL=data:application/json;base64,