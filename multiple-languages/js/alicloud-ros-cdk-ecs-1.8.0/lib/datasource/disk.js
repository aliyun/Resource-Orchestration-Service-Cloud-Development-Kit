"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Disk = exports.DiskProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ecs_generated_1 = require("./ecs.generated");
Object.defineProperty(exports, "DiskProperty", { enumerable: true, get: function () { return ecs_generated_1.RosDisk; } });
/**
 * This class encapsulates and extends the ROS resource type `DATASOURCE::ECS::Disk`, which is used to query the information about a cloud disk.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosDisk`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/datasource-ecs-disk
 */
class Disk extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosDisk = new ecs_generated_1.RosDisk(this, id, {
            refreshOptions: props.refreshOptions === undefined || props.refreshOptions === null ? 'Never' : props.refreshOptions,
            diskId: props.diskId,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosDisk;
        this.attrAttachedTime = rosDisk.attrAttachedTime;
        this.attrAutoSnapshotPolicyId = rosDisk.attrAutoSnapshotPolicyId;
        this.attrBurstingEnabled = rosDisk.attrBurstingEnabled;
        this.attrCategory = rosDisk.attrCategory;
        this.attrCreateTime = rosDisk.attrCreateTime;
        this.attrDeleteAutoSnapshot = rosDisk.attrDeleteAutoSnapshot;
        this.attrDeleteWithInstance = rosDisk.attrDeleteWithInstance;
        this.attrDescription = rosDisk.attrDescription;
        this.attrDetachedTime = rosDisk.attrDetachedTime;
        this.attrDevice = rosDisk.attrDevice;
        this.attrDiskId = rosDisk.attrDiskId;
        this.attrDiskName = rosDisk.attrDiskName;
        this.attrEnableAutoSnapshot = rosDisk.attrEnableAutoSnapshot;
        this.attrEnableAutomatedSnapshotPolicy = rosDisk.attrEnableAutomatedSnapshotPolicy;
        this.attrEncrypted = rosDisk.attrEncrypted;
        this.attrExpiredTime = rosDisk.attrExpiredTime;
        this.attrImageId = rosDisk.attrImageId;
        this.attrInstanceId = rosDisk.attrInstanceId;
        this.attrIops = rosDisk.attrIops;
        this.attrIopsRead = rosDisk.attrIopsRead;
        this.attrIopsWrite = rosDisk.attrIopsWrite;
        this.attrKmsKeyId = rosDisk.attrKmsKeyId;
        this.attrMountInstanceNum = rosDisk.attrMountInstanceNum;
        this.attrMountInstances = rosDisk.attrMountInstances;
        this.attrMultiAttach = rosDisk.attrMultiAttach;
        this.attrOperationLocks = rosDisk.attrOperationLocks;
        this.attrPaymentType = rosDisk.attrPaymentType;
        this.attrPerformanceLevel = rosDisk.attrPerformanceLevel;
        this.attrPortable = rosDisk.attrPortable;
        this.attrProductCode = rosDisk.attrProductCode;
        this.attrProvisionedIops = rosDisk.attrProvisionedIops;
        this.attrResourceGroupId = rosDisk.attrResourceGroupId;
        this.attrSize = rosDisk.attrSize;
        this.attrSnapshotId = rosDisk.attrSnapshotId;
        this.attrStorageClusterId = rosDisk.attrStorageClusterId;
        this.attrStorageSetId = rosDisk.attrStorageSetId;
        this.attrStorageSetPartitionNumber = rosDisk.attrStorageSetPartitionNumber;
        this.attrTags = rosDisk.attrTags;
        this.attrZoneId = rosDisk.attrZoneId;
    }
}
exports.Disk = Disk;
//# sourceMappingURL=data:application/json;base64,