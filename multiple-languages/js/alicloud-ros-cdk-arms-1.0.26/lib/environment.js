"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Environment = exports.EnvironmentProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const arms_generated_1 = require("./arms.generated");
Object.defineProperty(exports, "EnvironmentProperty", { enumerable: true, get: function () { return arms_generated_1.RosEnvironment; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::ARMS::Environment`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosEnvironment`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-arms-environment
 */
class Environment extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosEnvironment = new arms_generated_1.RosEnvironment(this, id, {
            managedType: props.managedType === undefined || props.managedType === null ? 'none' : props.managedType,
            environmentSubType: props.environmentSubType,
            environmentType: props.environmentType,
            resourceGroupId: props.resourceGroupId,
            environmentName: props.environmentName,
            bindResourceId: props.bindResourceId,
            grafanaWorkspaceId: props.grafanaWorkspaceId,
            prometheusInstanceId: props.prometheusInstanceId,
            feePackage: props.feePackage,
            tags: props.tags,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosEnvironment;
        this.attrEnvironmentId = rosEnvironment.attrEnvironmentId;
        this.attrEnvironmentName = rosEnvironment.attrEnvironmentName;
        this.attrEnvironmentSubType = rosEnvironment.attrEnvironmentSubType;
        this.attrEnvironmentType = rosEnvironment.attrEnvironmentType;
        this.attrFeePackage = rosEnvironment.attrFeePackage;
        this.attrGrafanaWorkspaceId = rosEnvironment.attrGrafanaWorkspaceId;
        this.attrManagedType = rosEnvironment.attrManagedType;
        this.attrPrometheusInstanceId = rosEnvironment.attrPrometheusInstanceId;
        this.attrResourceGroupId = rosEnvironment.attrResourceGroupId;
    }
}
exports.Environment = Environment;
//# sourceMappingURL=data:application/json;base64,