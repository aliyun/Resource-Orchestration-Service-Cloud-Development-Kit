"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.App = exports.AppProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const sag_generated_1 = require("./sag.generated");
Object.defineProperty(exports, "AppProperty", { enumerable: true, get: function () { return sag_generated_1.RosApp; } });
/**
 * A ROS resource type:  `ALIYUN::SAG::App`
 */
class App extends ros.Resource {
    /**
     * Create a new `ALIYUN::SAG::App`.
     *
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosApp = new sag_generated_1.RosApp(this, id, {
            chargeType: props.chargeType === undefined || props.chargeType === null ? 'PREPAY' : props.chargeType,
            userCount: props.userCount,
            dataPlan: props.dataPlan,
            period: props.period,
            autoPay: props.autoPay,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosApp;
        this.attrOrderId = rosApp.attrOrderId;
        this.attrSmartAgId = rosApp.attrSmartAgId;
    }
}
exports.App = App;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYXBwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDhDQUE4QztBQUM5QyxtREFBeUM7QUFFdEIsNEZBRlYsc0JBQU0sT0FFZTtBQTJDOUI7O0dBRUc7QUFDSCxNQUFhLEdBQUksU0FBUSxHQUFHLENBQUMsUUFBUTtJQWlCakM7Ozs7OztPQU1HO0lBQ0gsWUFBWSxLQUFvQixFQUFFLEVBQVUsRUFBRSxLQUFlLEVBQUUsbUNBQTJDLElBQUk7UUFDMUcsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUVqQixNQUFNLE1BQU0sR0FBRyxJQUFJLHNCQUFNLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRztZQUNqQyxVQUFVLEVBQUUsS0FBSyxDQUFDLFVBQVUsS0FBSyxTQUFTLElBQUksS0FBSyxDQUFDLFVBQVUsS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFVBQVU7WUFDckcsU0FBUyxFQUFFLEtBQUssQ0FBQyxTQUFTO1lBQzFCLFFBQVEsRUFBRSxLQUFLLENBQUMsUUFBUTtZQUN4QixNQUFNLEVBQUUsS0FBSyxDQUFDLE1BQU07WUFDcEIsT0FBTyxFQUFFLEtBQUssQ0FBQyxPQUFPO1NBQ3pCLEVBQUUsZ0NBQWdDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO1FBQ3BGLElBQUksQ0FBQyxRQUFRLEdBQUcsTUFBTSxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxXQUFXLEdBQUcsTUFBTSxDQUFDLFdBQVcsQ0FBQztRQUN0QyxJQUFJLENBQUMsYUFBYSxHQUFHLE1BQU0sQ0FBQyxhQUFhLENBQUM7SUFDOUMsQ0FBQztDQUNKO0FBdENELGtCQXNDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHJvcyBmcm9tICdAYWxpY2xvdWQvcm9zLWNkay1jb3JlJztcbmltcG9ydCB7IFJvc0FwcCB9IGZyb20gJy4vc2FnLmdlbmVyYXRlZCc7XG4vLyBHZW5lcmF0ZWQgZnJvbSB0aGUgQWxpQ2xvdWQgUk9TIFJlc291cmNlIFNwZWNpZmljYXRpb25cbmV4cG9ydCB7IFJvc0FwcCBhcyBBcHBQcm9wZXJ0eSB9O1xuXG4vKipcbiAqIFByb3BlcnRpZXMgZm9yIGRlZmluaW5nIGEgYEFMSVlVTjo6U0FHOjpBcHBgXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQXBwUHJvcHMge1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgYXV0b1BheTogU3BlY2lmaWVzIHdoZXRoZXIgdG8gYXV0b21hdGljYWxseSBwYXkgdGhlIGJpbGxzIG9mIFNBRyBBUFAgaW5zdGFuY2VzLiBEZWZhdWx0IHZhbHVlOlxuICAgICAqIGZhbHNlLiBWYWxpZCB2YWx1ZXM6XG4gICAgICogdHJ1ZTogYXV0b21hdGljYWxseSBwYXlzIHRoZSBiaWxscyBvZiBTQUcgQVBQIGluc3RhbmNlcy5cbiAgICAgKiBmYWxzZTogZG9lcyBub3QgYXV0b21hdGljYWxseSBwYXkgdGhlIGJpbGxzIG9mIFNBRyBBUFAgaW5zdGFuY2VzLlxuICAgICAqIElmIHlvdSBzZXQgdGhlIHBhcmFtZXRlciB0byBmYWxzZSwgYWZ0ZXIgeW91IGNhbGwgdGhpcyBvcGVyYXRpb24sIGdvIHRvIEJpbGxpbmcgTWFuYWdlbWVudFxuICAgICAqIG9mIHRoZSBTQUcgY29uc29sZSB0byBjb21wbGV0ZSB0aGUgcGF5bWVudCwgdGhlIGluc3RhbmNlIGNhbiBiZSBjcmVhdGVkLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGF1dG9QYXk6IGJvb2xlYW4gfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBkYXRhUGxhbjogVGhlIHF1b3RhIG9mIHRoZSB0cmFmZmljIHBsYW4gdGhhdCB0aGUgc3lzdGVtIGFsbG93cyBlYWNoIGNsaWVudCBhY2NvdW50IHRvIHVzZSBmb3JcbiAgICAgKiBmcmVlIGVhY2ggbW9udGguIFVuaXQ6IEdCLiBTZXQgdGhlIHZhbHVlIHRvIDUuXG4gICAgICogTm90ZSBUaGUgc3lzdGVtIGFsbG93cyBlYWNoIGNsaWVudCBhY2NvdW50IHRvIHVzZSA1IEdCIHRyYWZmaWMgcGxhbiBmb3IgZnJlZS5cbiAgICAgKi9cbiAgICByZWFkb25seSBkYXRhUGxhbjogbnVtYmVyIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgcGVyaW9kOiBUaGUgc3Vic2NyaXB0aW9uIHBlcmlvZCBvZiB0aGUgU0FHIEFQUCBpbnN0YW5jZS4gVW5pdDogbW9udGhzLlxuICAgICAqIFZhbGlkIHZhbHVlczogMX45LCAxMiwgMjQsIGFuZCAzNi5cbiAgICAgKi9cbiAgICByZWFkb25seSBwZXJpb2Q6IG51bWJlciB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHVzZXJDb3VudDogVGhlIHF1b3RhIG9mIGNsaWVudCBhY2NvdW50cyBmb3IgdGhlIFNBRyBBUFAgaW5zdGFuY2UuXG4gICAgICogTm90ZSBUaGUgcXVvdGEgbXVzdCBiZSBhIHBvc2l0aXZlIG11bHRpcGxlIG9mIDUsIGZvciBleGFtcGxlLCA1LCAxMCwgYW5kIDE1LlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHVzZXJDb3VudDogbnVtYmVyIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgY2hhcmdlVHlwZTogVGhlIGJpbGxpbmcgbWV0aG9kIG9mIHRoZSBTQUcgQVBQIGluc3RhbmNlLiBTZXQgdGhlIHZhbHVlIHRvIFBSRVBBWS5cbiAgICAgKiBUaGlzIHZhbHVlIGluZGljYXRlcyB0aGF0IHRoZSBTQUcgQVBQIGluc3RhbmNlIGlzIGEgc3Vic2NyaXB0aW9uIHJlc291cmNlLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGNoYXJnZVR5cGU/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG59XG5cbi8qKlxuICogQSBST1MgcmVzb3VyY2UgdHlwZTogIGBBTElZVU46OlNBRzo6QXBwYFxuICovXG5leHBvcnQgY2xhc3MgQXBwIGV4dGVuZHMgcm9zLlJlc291cmNlIHtcblxuICAgIC8qKlxuICAgICAqIEEgZmFjdG9yeSBtZXRob2QgdGhhdCBjcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIHRoaXMgY2xhc3MgZnJvbSBhbiBvYmplY3RcbiAgICAgKiBjb250YWluaW5nIHRoZSBwcm9wZXJ0aWVzIG9mIHRoaXMgUk9TIHJlc291cmNlLCB3aGljaCB3aWxsIGJlIGFzc2lnbmVkIHRvIFJPUyByZXNvdXJjZS5cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBPcmRlcklkOiBUaGUgSUQgb2YgdGhlIG9yZGVyIHRoYXQgeW91IHBsYWNlZCB0byBzdWJzY3JpYmUgdG8gdGhlIFNBRyBBUFAgaW5zdGFuY2UuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJPcmRlcklkOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgU21hcnRBR0lkOiBUaGUgSUQgb2YgdGhlIFNBRyBBUFAgaW5zdGFuY2UuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJTbWFydEFnSWQ6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBgQUxJWVVOOjpTQUc6OkFwcGAuXG4gICAgICpcbiAgICAgKiBQYXJhbSBzY29wZSAtIHNjb3BlIGluIHdoaWNoIHRoaXMgcmVzb3VyY2UgaXMgZGVmaW5lZFxuICAgICAqIFBhcmFtIGlkICAgIC0gc2NvcGVkIGlkIG9mIHRoZSByZXNvdXJjZVxuICAgICAqIFBhcmFtIHByb3BzIC0gcmVzb3VyY2UgcHJvcGVydGllc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiByb3MuQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogQXBwUHJvcHMsIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OmJvb2xlYW4gPSB0cnVlKSB7XG4gICAgICAgIHN1cGVyKHNjb3BlLCBpZCk7XG5cbiAgICAgICAgY29uc3Qgcm9zQXBwID0gbmV3IFJvc0FwcCh0aGlzLCBpZCwgIHtcbiAgICAgICAgICAgIGNoYXJnZVR5cGU6IHByb3BzLmNoYXJnZVR5cGUgPT09IHVuZGVmaW5lZCB8fCBwcm9wcy5jaGFyZ2VUeXBlID09PSBudWxsID8gJ1BSRVBBWScgOiBwcm9wcy5jaGFyZ2VUeXBlLFxuICAgICAgICAgICAgdXNlckNvdW50OiBwcm9wcy51c2VyQ291bnQsXG4gICAgICAgICAgICBkYXRhUGxhbjogcHJvcHMuZGF0YVBsYW4sXG4gICAgICAgICAgICBwZXJpb2Q6IHByb3BzLnBlcmlvZCxcbiAgICAgICAgICAgIGF1dG9QYXk6IHByb3BzLmF1dG9QYXksXG4gICAgICAgIH0sIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ICYmIHRoaXMuc3RhY2suZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQpO1xuICAgICAgICB0aGlzLnJlc291cmNlID0gcm9zQXBwO1xuICAgICAgICB0aGlzLmF0dHJPcmRlcklkID0gcm9zQXBwLmF0dHJPcmRlcklkO1xuICAgICAgICB0aGlzLmF0dHJTbWFydEFnSWQgPSByb3NBcHAuYXR0clNtYXJ0QWdJZDtcbiAgICB9XG59XG4iXX0=