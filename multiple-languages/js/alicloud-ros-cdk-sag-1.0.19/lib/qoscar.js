"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.QosCar = exports.QosCarProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const sag_generated_1 = require("./sag.generated");
Object.defineProperty(exports, "QosCarProperty", { enumerable: true, get: function () { return sag_generated_1.RosQosCar; } });
/**
 * A ROS resource type:  `ALIYUN::SAG::QosCar`
 */
class QosCar extends ros.Resource {
    /**
     * Create a new `ALIYUN::SAG::QosCar`.
     *
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosQosCar = new sag_generated_1.RosQosCar(this, id, {
            minBandwidthAbs: props.minBandwidthAbs,
            description: props.description,
            priority: props.priority,
            maxBandwidthPercent: props.maxBandwidthPercent,
            maxBandwidthAbs: props.maxBandwidthAbs,
            qosId: props.qosId,
            percentSourceType: props.percentSourceType,
            minBandwidthPercent: props.minBandwidthPercent,
            limitType: props.limitType,
            name: props.name,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosQosCar;
        this.attrQosCarId = rosQosCar.attrQosCarId;
    }
}
exports.QosCar = QosCar;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicW9zY2FyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicW9zY2FyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDhDQUE4QztBQUM5QyxtREFBNEM7QUFFdEIsK0ZBRmIseUJBQVMsT0FFa0I7QUF1RXBDOztHQUVHO0FBQ0gsTUFBYSxNQUFPLFNBQVEsR0FBRyxDQUFDLFFBQVE7SUFZcEM7Ozs7OztPQU1HO0lBQ0gsWUFBWSxLQUFvQixFQUFFLEVBQVUsRUFBRSxLQUFrQixFQUFFLG1DQUEyQyxJQUFJO1FBQzdHLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFakIsTUFBTSxTQUFTLEdBQUcsSUFBSSx5QkFBUyxDQUFDLElBQUksRUFBRSxFQUFFLEVBQUc7WUFDdkMsZUFBZSxFQUFFLEtBQUssQ0FBQyxlQUFlO1lBQ3RDLFdBQVcsRUFBRSxLQUFLLENBQUMsV0FBVztZQUM5QixRQUFRLEVBQUUsS0FBSyxDQUFDLFFBQVE7WUFDeEIsbUJBQW1CLEVBQUUsS0FBSyxDQUFDLG1CQUFtQjtZQUM5QyxlQUFlLEVBQUUsS0FBSyxDQUFDLGVBQWU7WUFDdEMsS0FBSyxFQUFFLEtBQUssQ0FBQyxLQUFLO1lBQ2xCLGlCQUFpQixFQUFFLEtBQUssQ0FBQyxpQkFBaUI7WUFDMUMsbUJBQW1CLEVBQUUsS0FBSyxDQUFDLG1CQUFtQjtZQUM5QyxTQUFTLEVBQUUsS0FBSyxDQUFDLFNBQVM7WUFDMUIsSUFBSSxFQUFFLEtBQUssQ0FBQyxJQUFJO1NBQ25CLEVBQUUsZ0NBQWdDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO1FBQ3BGLElBQUksQ0FBQyxRQUFRLEdBQUcsU0FBUyxDQUFDO1FBQzFCLElBQUksQ0FBQyxZQUFZLEdBQUcsU0FBUyxDQUFDLFlBQVksQ0FBQztJQUMvQyxDQUFDO0NBQ0o7QUFyQ0Qsd0JBcUNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcm9zIGZyb20gJ0BhbGljbG91ZC9yb3MtY2RrLWNvcmUnO1xuaW1wb3J0IHsgUm9zUW9zQ2FyIH0gZnJvbSAnLi9zYWcuZ2VuZXJhdGVkJztcbi8vIEdlbmVyYXRlZCBmcm9tIHRoZSBBbGlDbG91ZCBST1MgUmVzb3VyY2UgU3BlY2lmaWNhdGlvblxuZXhwb3J0IHsgUm9zUW9zQ2FyIGFzIFFvc0NhclByb3BlcnR5IH07XG5cbi8qKlxuICogUHJvcGVydGllcyBmb3IgZGVmaW5pbmcgYSBgQUxJWVVOOjpTQUc6OlFvc0NhcmBcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBRb3NDYXJQcm9wcyB7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBsaW1pdFR5cGU6IFRoZSB0eXBlIG9mIHRoZSB0cmFmZmljIHRocm90dGxpbmcgcG9saWN5LiBWYWxpZCB2YWx1ZXM6XG4gICAgICogQWJzb2x1dGU6IHRocm90dGxlcyB0cmFmZmljIGJ5IGEgc3BlY2lmaWMgYmFuZHdpZHRoIHJhbmdlLlxuICAgICAqIFBlcmNlbnQ6IHRocm90dGxlcyB0cmFmZmljIGJ5IGEgc3BlY2lmaWMgcmFuZ2Ugb2YgYmFuZHdpZHRoIHBlcmNlbnRhZ2UuXG4gICAgICovXG4gICAgcmVhZG9ubHkgbGltaXRUeXBlOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBwcmlvcml0eTogVGhlIHByaW9yaXR5IG9mIHRoZSB0cmFmZmljIHRocm90dGxpbmcgcG9saWN5LiBBIHNtYWxsZXIgdmFsdWUgcmVwcmVzZW50cyBhIGhpZ2hlclxuICAgICAqIHByaW9yaXR5LiBJZiBwb2xpY2llcyBhcmUgYXNzaWduZWQgdGhlIHNhbWUgcHJpb3JpdHksIHRoZSBvbmUgYXBwbGllZCB0aGUgZWFybGllc3RcbiAgICAgKiBwcmV2YWlscy4gVmFsaWQgdmFsdWVzOiAxIHRvIDcuXG4gICAgICovXG4gICAgcmVhZG9ubHkgcHJpb3JpdHk6IG51bWJlciB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHFvc0lkOiBUaGUgSUQgb2YgdGhlIFFvUyBwb2xpY3kuXG4gICAgICovXG4gICAgcmVhZG9ubHkgcW9zSWQ6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGRlc2NyaXB0aW9uOiBUaGUgZGVzY3JpcHRpb24gb2YgdGhlIHRyYWZmaWMgdGhyb3R0bGluZyBwb2xpY3kuXG4gICAgICovXG4gICAgcmVhZG9ubHkgZGVzY3JpcHRpb24/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBtYXhCYW5kd2lkdGhBYnM6IFRoZSBtYXhpbXVtIGJhbmR3aWR0aC4gVGhpcyBwYXJhbWV0ZXIgaXMgcmVxdWlyZWQgd2hlbiBMaW1pdFR5cGUgaXMgc2V0IHRvIEFic29sdXRlLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IG1heEJhbmR3aWR0aEFicz86IG51bWJlciB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IG1heEJhbmR3aWR0aFBlcmNlbnQ6IFRoZSBtYXhpbXVtIHBlcmNlbnRhZ2UgdGhhdCBpcyBiYXNlZCBvbiB0aGUgbWF4aW11bSB1cHN0cmVhbSBiYW5kd2lkdGggb2YgdGhlIFNBR1xuICAgICAqIGluc3RhbmNlLlxuICAgICAqIFRoaXMgcGFyYW1ldGVyIGlzIHJlcXVpcmVkIHdoZW4gTGltaXRUeXBlIGlzIHNldCB0byBQZXJjZW50LlxuICAgICAqL1xuICAgIHJlYWRvbmx5IG1heEJhbmR3aWR0aFBlcmNlbnQ/OiBudW1iZXIgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBtaW5CYW5kd2lkdGhBYnM6IFRoZSBtaW5pbXVtIGJhbmR3aWR0aC4gVGhpcyBwYXJhbWV0ZXIgaXMgcmVxdWlyZWQgd2hlbiBMaW1pdFR5cGUgaXMgc2V0IHRvIEFic29sdXRlLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IG1pbkJhbmR3aWR0aEFicz86IG51bWJlciB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IG1pbkJhbmR3aWR0aFBlcmNlbnQ6IFRoZSBtaW5pbXVtIHBlcmNlbnRhZ2UgdGhhdCBpcyBiYXNlZCBvbiB0aGUgbWF4aW11bSB1cHN0cmVhbSBiYW5kd2lkdGggb2YgdGhlIFNBR1xuICAgICAqIGluc3RhbmNlLlxuICAgICAqIFRoaXMgcGFyYW1ldGVyIGlzIHJlcXVpcmVkIHdoZW4gTGltaXRUeXBlIGlzIHNldCB0byBQZXJjZW50LlxuICAgICAqL1xuICAgIHJlYWRvbmx5IG1pbkJhbmR3aWR0aFBlcmNlbnQ/OiBudW1iZXIgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBuYW1lOiBUaGUgbmFtZSBvZiB0aGUgdHJhZmZpYyB0aHJvdHRsaW5nIHBvbGljeS4gVGhlIG5hbWUgbXVzdCBiZSAyIHRvIDEyOCBjaGFyYWN0ZXJzIGluXG4gICAgICogbGVuZ3RoLCBhbmQgY2FuIGNvbnRhaW4gQ2hpbmVzZSBjaGFyYWN0ZXJzLCBsZXR0ZXJzLCBkaWdpdHMsIHBlcmlvZHMgKC4pLCB1bmRlcnNjb3Jlc1xuICAgICAqIChfKSwgYW5kIGh5cGhlbnMgKC0pLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IG5hbWU/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBwZXJjZW50U291cmNlVHlwZTogSWYgdGhlIHBvbGljeSB0aHJvdHRsZXMgdHJhZmZpYyBiYXNlZCBvbiBhIHNwZWNpZmllZCBiYW5kd2lkdGggcGVyY2VudGFnZSwgdGhlIGZvbGxvd2luZ1xuICAgICAqIG9wdGlvbnMgYXJlIGF2YWlsYWJsZTpcbiAgICAgKiBDY25CYW5kd2lkdGg6IENsb3VkIEVudGVycHJpc2UgTmV0d29yayAoQ0NOKSBiYW5kd2lkdGguXG4gICAgICogSW50ZXJuZXRVcEJhbmR3aWR0aDogSW50ZXJuZXQgdXBzdHJlYW0gYmFuZHdpZHRoLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHBlcmNlbnRTb3VyY2VUeXBlPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xufVxuXG4vKipcbiAqIEEgUk9TIHJlc291cmNlIHR5cGU6ICBgQUxJWVVOOjpTQUc6OlFvc0NhcmBcbiAqL1xuZXhwb3J0IGNsYXNzIFFvc0NhciBleHRlbmRzIHJvcy5SZXNvdXJjZSB7XG5cbiAgICAvKipcbiAgICAgKiBBIGZhY3RvcnkgbWV0aG9kIHRoYXQgY3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzIGZyb20gYW4gb2JqZWN0XG4gICAgICogY29udGFpbmluZyB0aGUgcHJvcGVydGllcyBvZiB0aGlzIFJPUyByZXNvdXJjZSwgd2hpY2ggd2lsbCBiZSBhc3NpZ25lZCB0byBST1MgcmVzb3VyY2UuXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgUW9zQ2FySWQ6IFRoZSBJRCBvZiB0aGUgdHJhZmZpYyB0aHJvdHRsaW5nIHBvbGljeS5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0clFvc0NhcklkOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgYEFMSVlVTjo6U0FHOjpRb3NDYXJgLlxuICAgICAqXG4gICAgICogUGFyYW0gc2NvcGUgLSBzY29wZSBpbiB3aGljaCB0aGlzIHJlc291cmNlIGlzIGRlZmluZWRcbiAgICAgKiBQYXJhbSBpZCAgICAtIHNjb3BlZCBpZCBvZiB0aGUgcmVzb3VyY2VcbiAgICAgKiBQYXJhbSBwcm9wcyAtIHJlc291cmNlIHByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihzY29wZTogcm9zLkNvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IFFvc0NhclByb3BzLCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDpib29sZWFuID0gdHJ1ZSkge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQpO1xuXG4gICAgICAgIGNvbnN0IHJvc1Fvc0NhciA9IG5ldyBSb3NRb3NDYXIodGhpcywgaWQsICB7XG4gICAgICAgICAgICBtaW5CYW5kd2lkdGhBYnM6IHByb3BzLm1pbkJhbmR3aWR0aEFicyxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBwcm9wcy5kZXNjcmlwdGlvbixcbiAgICAgICAgICAgIHByaW9yaXR5OiBwcm9wcy5wcmlvcml0eSxcbiAgICAgICAgICAgIG1heEJhbmR3aWR0aFBlcmNlbnQ6IHByb3BzLm1heEJhbmR3aWR0aFBlcmNlbnQsXG4gICAgICAgICAgICBtYXhCYW5kd2lkdGhBYnM6IHByb3BzLm1heEJhbmR3aWR0aEFicyxcbiAgICAgICAgICAgIHFvc0lkOiBwcm9wcy5xb3NJZCxcbiAgICAgICAgICAgIHBlcmNlbnRTb3VyY2VUeXBlOiBwcm9wcy5wZXJjZW50U291cmNlVHlwZSxcbiAgICAgICAgICAgIG1pbkJhbmR3aWR0aFBlcmNlbnQ6IHByb3BzLm1pbkJhbmR3aWR0aFBlcmNlbnQsXG4gICAgICAgICAgICBsaW1pdFR5cGU6IHByb3BzLmxpbWl0VHlwZSxcbiAgICAgICAgICAgIG5hbWU6IHByb3BzLm5hbWUsXG4gICAgICAgIH0sIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ICYmIHRoaXMuc3RhY2suZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQpO1xuICAgICAgICB0aGlzLnJlc291cmNlID0gcm9zUW9zQ2FyO1xuICAgICAgICB0aGlzLmF0dHJRb3NDYXJJZCA9IHJvc1Fvc0Nhci5hdHRyUW9zQ2FySWQ7XG4gICAgfVxufVxuIl19