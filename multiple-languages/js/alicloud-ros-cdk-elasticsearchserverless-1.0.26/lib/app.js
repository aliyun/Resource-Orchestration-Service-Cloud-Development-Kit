"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.App = exports.AppProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const elasticsearchserverless_generated_1 = require("./elasticsearchserverless.generated");
Object.defineProperty(exports, "AppProperty", { enumerable: true, get: function () { return elasticsearchserverless_generated_1.RosApp; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::ElasticSearchServerless::App`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosApp`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-elasticsearchserverless-app
 */
class App extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosApp = new elasticsearchserverless_generated_1.RosApp(this, id, {
            appVersion: props.appVersion === undefined || props.appVersion === null ? '7.10' : props.appVersion,
            description: props.description,
            authentication: props.authentication,
            quotaInfo: props.quotaInfo,
            network: props.network,
            privateNetwork: props.privateNetwork,
            appName: props.appName,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosApp;
        this.attrInstanceId = rosApp.attrInstanceId;
        this.attrPrivateEsDomain = rosApp.attrPrivateEsDomain;
        this.attrPrivateKibanaDomain = rosApp.attrPrivateKibanaDomain;
        this.attrPublicEsDomain = rosApp.attrPublicEsDomain;
        this.attrPublicKibanaDomain = rosApp.attrPublicKibanaDomain;
    }
}
exports.App = App;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYXBwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDhDQUE4QztBQUM5QywyRkFBNkQ7QUFFMUMsNEZBRlYsMENBQU0sT0FFZTtBQTRDOUI7Ozs7R0FJRztBQUNILE1BQWEsR0FBSSxTQUFRLEdBQUcsQ0FBQyxRQUFRO0lBK0JqQzs7OztPQUlHO0lBQ0gsWUFBWSxLQUFvQixFQUFFLEVBQVUsRUFBRSxLQUFlLEVBQUUsbUNBQTJDLElBQUk7UUFDMUcsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNqQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUNiLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxnQ0FBZ0MsR0FBRyxnQ0FBZ0MsQ0FBQztRQUV6RSxNQUFNLE1BQU0sR0FBRyxJQUFJLDBDQUFNLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRztZQUNqQyxVQUFVLEVBQUUsS0FBSyxDQUFDLFVBQVUsS0FBSyxTQUFTLElBQUksS0FBSyxDQUFDLFVBQVUsS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFVBQVU7WUFDbkcsV0FBVyxFQUFFLEtBQUssQ0FBQyxXQUFXO1lBQzlCLGNBQWMsRUFBRSxLQUFLLENBQUMsY0FBYztZQUNwQyxTQUFTLEVBQUUsS0FBSyxDQUFDLFNBQVM7WUFDMUIsT0FBTyxFQUFFLEtBQUssQ0FBQyxPQUFPO1lBQ3RCLGNBQWMsRUFBRSxLQUFLLENBQUMsY0FBYztZQUNwQyxPQUFPLEVBQUUsS0FBSyxDQUFDLE9BQU87U0FDekIsRUFBRSxnQ0FBZ0MsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7UUFDcEYsSUFBSSxDQUFDLFFBQVEsR0FBRyxNQUFNLENBQUM7UUFDdkIsSUFBSSxDQUFDLGNBQWMsR0FBRyxNQUFNLENBQUMsY0FBYyxDQUFDO1FBQzVDLElBQUksQ0FBQyxtQkFBbUIsR0FBRyxNQUFNLENBQUMsbUJBQW1CLENBQUM7UUFDdEQsSUFBSSxDQUFDLHVCQUF1QixHQUFHLE1BQU0sQ0FBQyx1QkFBdUIsQ0FBQztRQUM5RCxJQUFJLENBQUMsa0JBQWtCLEdBQUcsTUFBTSxDQUFDLGtCQUFrQixDQUFDO1FBQ3BELElBQUksQ0FBQyxzQkFBc0IsR0FBRyxNQUFNLENBQUMsc0JBQXNCLENBQUM7SUFDaEUsQ0FBQztDQUNKO0FBM0RELGtCQTJEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHJvcyBmcm9tICdAYWxpY2xvdWQvcm9zLWNkay1jb3JlJztcbmltcG9ydCB7IFJvc0FwcCB9IGZyb20gJy4vZWxhc3RpY3NlYXJjaHNlcnZlcmxlc3MuZ2VuZXJhdGVkJztcbi8vIEdlbmVyYXRlZCBmcm9tIHRoZSBBbGlDbG91ZCBST1MgUmVzb3VyY2UgU3BlY2lmaWNhdGlvblxuZXhwb3J0IHsgUm9zQXBwIGFzIEFwcFByb3BlcnR5IH07XG5cbi8qKlxuICogUHJvcGVydGllcyBmb3IgZGVmaW5pbmcgYSBgQXBwYC5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvYWxpeXVuLWVsYXN0aWNzZWFyY2hzZXJ2ZXJsZXNzLWFwcFxuICovXG5leHBvcnQgaW50ZXJmYWNlIEFwcFByb3BzIHtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGFwcE5hbWU6IFRoZSBuYW1lIG9mIHRoZSBlbGFzdGljIHNlYXJjaCBzZXJ2ZXJsZXNzIHZlcnNpb24gYXBwLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGFwcE5hbWU6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGF1dGhlbnRpY2F0aW9uOiBUaGUgYXV0aGVudGljYXRpb24gb2YgdGhlIGFwcC4gQ3VycmVudGx5IG9ubHkgc3VwcG9ydHMgc3BlY2lmeWluZyBwYXNzd29yZHMgZm9yIGluaXRpYWwgdXNlcnNcbiAgICAgKi9cbiAgICByZWFkb25seSBhdXRoZW50aWNhdGlvbjogUm9zQXBwLkF1dGhlbnRpY2F0aW9uUHJvcGVydHkgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBxdW90YUluZm86IFRoZSBxdW90YSBpbmZvIG9mIHRoZSBhcHAuXG4gICAgICovXG4gICAgcmVhZG9ubHkgcXVvdGFJbmZvOiBSb3NBcHAuUXVvdGFJbmZvUHJvcGVydHkgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBhcHBWZXJzaW9uOiBUaGUgdmVyc2lvbiBvZiB0aGUgYXBwLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGFwcFZlcnNpb24/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBkZXNjcmlwdGlvbjogVGhlIGRlc2NyaXB0aW9uIG9mIHRoZSBhcHAuXG4gICAgICovXG4gICAgcmVhZG9ubHkgZGVzY3JpcHRpb24/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBuZXR3b3JrOiBUaGUgcHVibGljIG5ldHdvcmsgb2YgdGhlIGFwcC5cbiAgICAgKi9cbiAgICByZWFkb25seSBuZXR3b3JrPzogQXJyYXk8Um9zQXBwLk5ldHdvcmtQcm9wZXJ0eSB8IHJvcy5JUmVzb2x2YWJsZT4gfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBwcml2YXRlTmV0d29yazogVGhlIHByaXZhdGUgbmV0d29yayBvZiB0aGUgYXBwLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHByaXZhdGVOZXR3b3JrPzogQXJyYXk8Um9zQXBwLlByaXZhdGVOZXR3b3JrUHJvcGVydHkgfCByb3MuSVJlc29sdmFibGU+IHwgcm9zLklSZXNvbHZhYmxlO1xufVxuXG4vKipcbiAqIFRoaXMgY2xhc3MgZW5jYXBzdWxhdGVzIGFuZCBleHRlbmRzIHRoZSBST1MgcmVzb3VyY2UgdHlwZSBgQUxJWVVOOjpFbGFzdGljU2VhcmNoU2VydmVybGVzczo6QXBwYC5cbiAqIEBOb3RlIFRoaXMgY2xhc3MgbWF5IGhhdmUgc29tZSBuZXcgZnVuY3Rpb25zIHRvIGZhY2lsaXRhdGUgZGV2ZWxvcG1lbnQsIHNvIGl0IGlzIHJlY29tbWVuZGVkIHRvIHVzZSB0aGlzIGNsYXNzIGluc3RlYWQgb2YgYFJvc0FwcGBmb3IgYSBtb3JlIGNvbnZlbmllbnQgZGV2ZWxvcG1lbnQgZXhwZXJpZW5jZS5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvYWxpeXVuLWVsYXN0aWNzZWFyY2hzZXJ2ZXJsZXNzLWFwcFxuICovXG5leHBvcnQgY2xhc3MgQXBwIGV4dGVuZHMgcm9zLlJlc291cmNlIHtcbiAgICBwcm90ZWN0ZWQgc2NvcGU6IHJvcy5Db25zdHJ1Y3Q7XG4gICAgcHJvdGVjdGVkIGlkOiBzdHJpbmc7XG4gICAgcHJvdGVjdGVkIHByb3BzOiBBcHBQcm9wcztcbiAgICBwcm90ZWN0ZWQgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6IGJvb2xlYW47XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgSW5zdGFuY2VJZDogVGhlIElkIG9mIHRoZSBFbGFzdGljU2VhcmNoIHNlcnZlcmxlc3MgaW5zdGFuY2UuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJJbnN0YW5jZUlkOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgUHJpdmF0ZUVTRG9tYWluOiBUaGUgcHJpdmF0ZSBuZXR3b3JrIGRvbWFpbiBvZiB0aGUgYXBwLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyUHJpdmF0ZUVzRG9tYWluOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgUHJpdmF0ZUtpYmFuYURvbWFpbjogVGhlIHByaXZhdGUgbmV0d29yayBraWJhbmEgZG9tYWluIG9mIHRoZSBhcHAuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJQcml2YXRlS2liYW5hRG9tYWluOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgUHVibGljRVNEb21haW46IFRoZSBwdWJsaWMgbmV0d29yayBkb21haW4gb2YgdGhlIGFwcC5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0clB1YmxpY0VzRG9tYWluOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgUHVibGljS2liYW5hRG9tYWluOiBUaGUgcHVibGljIG5ldHdvcmsga2liYW5hIGRvbWFpbiBvZiB0aGUgYXBwLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyUHVibGljS2liYW5hRG9tYWluOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQYXJhbSBzY29wZSAtIHNjb3BlIGluIHdoaWNoIHRoaXMgcmVzb3VyY2UgaXMgZGVmaW5lZFxuICAgICAqIFBhcmFtIGlkICAgIC0gc2NvcGVkIGlkIG9mIHRoZSByZXNvdXJjZVxuICAgICAqIFBhcmFtIHByb3BzIC0gcmVzb3VyY2UgcHJvcGVydGllc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiByb3MuQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogQXBwUHJvcHMsIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OmJvb2xlYW4gPSB0cnVlKSB7XG4gICAgICAgIHN1cGVyKHNjb3BlLCBpZCk7XG4gICAgICAgIHRoaXMuc2NvcGUgPSBzY29wZTtcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xuICAgICAgICB0aGlzLnByb3BzID0gcHJvcHM7XG4gICAgICAgIHRoaXMuZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgPSBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDtcblxuICAgICAgICBjb25zdCByb3NBcHAgPSBuZXcgUm9zQXBwKHRoaXMsIGlkLCAge1xuICAgICAgICAgICAgYXBwVmVyc2lvbjogcHJvcHMuYXBwVmVyc2lvbiA9PT0gdW5kZWZpbmVkIHx8IHByb3BzLmFwcFZlcnNpb24gPT09IG51bGwgPyAnNy4xMCcgOiBwcm9wcy5hcHBWZXJzaW9uLFxuICAgICAgICAgICAgZGVzY3JpcHRpb246IHByb3BzLmRlc2NyaXB0aW9uLFxuICAgICAgICAgICAgYXV0aGVudGljYXRpb246IHByb3BzLmF1dGhlbnRpY2F0aW9uLFxuICAgICAgICAgICAgcXVvdGFJbmZvOiBwcm9wcy5xdW90YUluZm8sXG4gICAgICAgICAgICBuZXR3b3JrOiBwcm9wcy5uZXR3b3JrLFxuICAgICAgICAgICAgcHJpdmF0ZU5ldHdvcms6IHByb3BzLnByaXZhdGVOZXR3b3JrLFxuICAgICAgICAgICAgYXBwTmFtZTogcHJvcHMuYXBwTmFtZSxcbiAgICAgICAgfSwgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgJiYgdGhpcy5zdGFjay5lbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCk7XG4gICAgICAgIHRoaXMucmVzb3VyY2UgPSByb3NBcHA7XG4gICAgICAgIHRoaXMuYXR0ckluc3RhbmNlSWQgPSByb3NBcHAuYXR0ckluc3RhbmNlSWQ7XG4gICAgICAgIHRoaXMuYXR0clByaXZhdGVFc0RvbWFpbiA9IHJvc0FwcC5hdHRyUHJpdmF0ZUVzRG9tYWluO1xuICAgICAgICB0aGlzLmF0dHJQcml2YXRlS2liYW5hRG9tYWluID0gcm9zQXBwLmF0dHJQcml2YXRlS2liYW5hRG9tYWluO1xuICAgICAgICB0aGlzLmF0dHJQdWJsaWNFc0RvbWFpbiA9IHJvc0FwcC5hdHRyUHVibGljRXNEb21haW47XG4gICAgICAgIHRoaXMuYXR0clB1YmxpY0tpYmFuYURvbWFpbiA9IHJvc0FwcC5hdHRyUHVibGljS2liYW5hRG9tYWluO1xuICAgIH1cbn1cbiJdfQ==