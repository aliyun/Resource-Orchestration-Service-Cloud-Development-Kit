"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Snapshots = exports.SnapshotsProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ecs_generated_1 = require("./ecs.generated");
Object.defineProperty(exports, "SnapshotsProperty", { enumerable: true, get: function () { return ecs_generated_1.RosSnapshots; } });
/**
 * This class encapsulates and extends the ROS resource type `DATASOURCE::ECS::Snapshots`, which is used to query all snapshots of an Elastic Compute Service (ECS) instance or a disk.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosSnapshots`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/datasource-ecs-snapshots
 */
class Snapshots extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props = {}, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosSnapshots = new ecs_generated_1.RosSnapshots(this, id, {
            status: props.status,
            usage: props.usage,
            category: props.category,
            kmsKeyId: props.kmsKeyId,
            resourceGroupId: props.resourceGroupId,
            instanceId: props.instanceId,
            encrypted: props.encrypted,
            snapshotLinkId: props.snapshotLinkId,
            snapshotIds: props.snapshotIds,
            snapshotName: props.snapshotName,
            filters: props.filters,
            snapshotType: props.snapshotType,
            sourceDiskType: props.sourceDiskType,
            tags: props.tags,
            diskId: props.diskId,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosSnapshots;
        this.attrSnapshotIds = rosSnapshots.attrSnapshotIds;
        this.attrSnapshots = rosSnapshots.attrSnapshots;
    }
}
exports.Snapshots = Snapshots;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic25hcHNob3RzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic25hcHNob3RzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDhDQUE4QztBQUM5QyxtREFBK0M7QUFFdEIsa0dBRmhCLDRCQUFZLE9BRXFCO0FBd0cxQzs7OztHQUlHO0FBQ0gsTUFBYSxTQUFVLFNBQVEsR0FBRyxDQUFDLFFBQVE7SUFnQnZDOzs7O09BSUc7SUFDSCxZQUFZLEtBQW9CLEVBQUUsRUFBVSxFQUFFLFFBQXdCLEVBQUUsRUFBRSxtQ0FBMkMsSUFBSTtRQUNySCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ2pCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQ2IsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLGdDQUFnQyxHQUFHLGdDQUFnQyxDQUFDO1FBRXpFLE1BQU0sWUFBWSxHQUFHLElBQUksNEJBQVksQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFHO1lBQzdDLE1BQU0sRUFBRSxLQUFLLENBQUMsTUFBTTtZQUNwQixLQUFLLEVBQUUsS0FBSyxDQUFDLEtBQUs7WUFDbEIsUUFBUSxFQUFFLEtBQUssQ0FBQyxRQUFRO1lBQ3hCLFFBQVEsRUFBRSxLQUFLLENBQUMsUUFBUTtZQUN4QixlQUFlLEVBQUUsS0FBSyxDQUFDLGVBQWU7WUFDdEMsVUFBVSxFQUFFLEtBQUssQ0FBQyxVQUFVO1lBQzVCLFNBQVMsRUFBRSxLQUFLLENBQUMsU0FBUztZQUMxQixjQUFjLEVBQUUsS0FBSyxDQUFDLGNBQWM7WUFDcEMsV0FBVyxFQUFFLEtBQUssQ0FBQyxXQUFXO1lBQzlCLFlBQVksRUFBRSxLQUFLLENBQUMsWUFBWTtZQUNoQyxPQUFPLEVBQUUsS0FBSyxDQUFDLE9BQU87WUFDdEIsWUFBWSxFQUFFLEtBQUssQ0FBQyxZQUFZO1lBQ2hDLGNBQWMsRUFBRSxLQUFLLENBQUMsY0FBYztZQUNwQyxJQUFJLEVBQUUsS0FBSyxDQUFDLElBQUk7WUFDaEIsTUFBTSxFQUFFLEtBQUssQ0FBQyxNQUFNO1NBQ3ZCLEVBQUUsZ0NBQWdDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO1FBQ3BGLElBQUksQ0FBQyxRQUFRLEdBQUcsWUFBWSxDQUFDO1FBQzdCLElBQUksQ0FBQyxlQUFlLEdBQUcsWUFBWSxDQUFDLGVBQWUsQ0FBQztRQUNwRCxJQUFJLENBQUMsYUFBYSxHQUFHLFlBQVksQ0FBQyxhQUFhLENBQUM7SUFDcEQsQ0FBQztDQUNKO0FBakRELDhCQWlEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHJvcyBmcm9tICdAYWxpY2xvdWQvcm9zLWNkay1jb3JlJztcbmltcG9ydCB7IFJvc1NuYXBzaG90cyB9IGZyb20gJy4vZWNzLmdlbmVyYXRlZCc7XG4vLyBHZW5lcmF0ZWQgZnJvbSB0aGUgQWxpQ2xvdWQgUk9TIFJlc291cmNlIFNwZWNpZmljYXRpb25cbmV4cG9ydCB7IFJvc1NuYXBzaG90cyBhcyBTbmFwc2hvdHNQcm9wZXJ0eSB9O1xuXG4vKipcbiAqIFByb3BlcnRpZXMgZm9yIGRlZmluaW5nIGEgYFNuYXBzaG90c2AuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2RhdGFzb3VyY2UtZWNzLXNuYXBzaG90c1xuICovXG5leHBvcnQgaW50ZXJmYWNlIFNuYXBzaG90c1Byb3BzIHtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGNhdGVnb3J5OiBUaGUgY2F0ZWdvcnkgb2YgdGhlIHNuYXBzaG90LiBWYWxpZCB2YWx1ZXM6XG4gICAgICogU3RhbmRhcmQ6IG5vcm1hbCBzbmFwc2hvdFxuICAgICAqIEZsYXNoOiBsb2NhbCBzbmFwc2hvdFxuICAgICAqIFRoZSBsb2NhbCBzbmFwc2hvdCBmZWF0dXJlIGlzIHJlcGxhY2VkIGJ5IHRoZSBpbnN0YW50IGFjY2VzcyBmZWF0dXJlLiBXaGVuIHlvdSBzcGVjaWZ5IHRoaXMgcGFyYW1ldGVyLCB0YWtlIG5vdGUgb2YgdGhlIGZvbGxvd2luZyBpdGVtczpcbiAgICAgKiAgSWYgeW91IGhhdmUgdXNlZCBsb2NhbCBzbmFwc2hvdHMgYmVmb3JlIERlY2VtYmVyIDE0LCAyMDIwLCB5b3UgY2FuIHVzZSB0aGlzIHBhcmFtZXRlci5cbiAgICAgKiAgSWYgeW91IGhhdmUgbm90IHVzZWQgbG9jYWwgc25hcHNob3RzIGJlZm9yZSBEZWNlbWJlciAxNCwgMjAyMCwgeW91IGNhbm5vdCB1c2UgdGhpcyBwYXJhbWV0ZXIuXG4gICAgICogIE5vdGUgVGhpcyBwYXJhbWV0ZXIgd2lsbCBiZSByZW1vdmVkIGluIHRoZSBmdXR1cmUuIFdlIHJlY29tbWVuZCB0aGF0IHlvdSB1c2Ugb3RoZXIgcGFyYW1ldGVycyB0byBlbnN1cmUgZnV0dXJlIGNvbXBhdGliaWxpdHkuXG4gICAgICovXG4gICAgcmVhZG9ubHkgY2F0ZWdvcnk/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBkaXNrSWQ6IFRoZSBJRCBvZiB0aGUgZGlzay5cbiAgICAgKi9cbiAgICByZWFkb25seSBkaXNrSWQ/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBlbmNyeXB0ZWQ6IFNwZWNpZmllcyB3aGV0aGVyIHRoZSBzbmFwc2hvdCBpcyBlbmNyeXB0ZWQuIERlZmF1bHQgdmFsdWU6IGZhbHNlLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGVuY3J5cHRlZD86IGJvb2xlYW4gfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBmaWx0ZXJzOiBGaWx0ZXIgdmFsdWUgd2hlbiBxdWVyeWluZyByZXNvdXJjZXNcbiAgICAgKi9cbiAgICByZWFkb25seSBmaWx0ZXJzPzogQXJyYXk8Um9zU25hcHNob3RzLkZpbHRlcnNQcm9wZXJ0eSB8IHJvcy5JUmVzb2x2YWJsZT4gfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBpbnN0YW5jZUlkOiBUaGUgSUQgb2YgdGhlIGluc3RhbmNlLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGluc3RhbmNlSWQ/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBrbXNLZXlJZDogVGhlIElEIG9mIHRoZSBLZXkgTWFuYWdlbWVudCBTZXJ2aWNlIChLTVMpIGtleSB1c2VkIGJ5IHRoZSBkYXRhIGRpc2suXG4gICAgICovXG4gICAgcmVhZG9ubHkga21zS2V5SWQ/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSByZXNvdXJjZUdyb3VwSWQ6IFRoZSBJRCBvZiB0aGUgcmVzb3VyY2UgZ3JvdXAgdG8gd2hpY2ggdGhlIHNuYXBzaG90IGJlbG9uZ3MuIElmIHRoaXMgcGFyYW1ldGVyIGlzIHNwZWNpZmllZCB0byBxdWVyeSByZXNvdXJjZXMsIHVwIHRvIDEsMDAwIHJlc291cmNlcyB0aGF0IGJlbG9uZyB0byB0aGUgc3BlY2lmaWVkIHJlc291cmNlIGdyb3VwIGNhbiBiZSBkaXNwbGF5ZWQgaW4gdGhlIHJlc3BvbnNlLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHJlc291cmNlR3JvdXBJZD86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHNuYXBzaG90SWRzOiBUaGUgSURzIG9mIHNuYXBzaG90cy4gVGhlIHZhbHVlIGNhbiBiZSBhIEpTT04gYXJyYXkgdGhhdCBjb25zaXN0cyBvZiB1cCB0byAxMDAgc25hcHNob3QgSURzLiBTZXBhcmF0ZSBtdWx0aXBsZSBzbmFwc2hvdCBJRHMgd2l0aCBjb21tYXMgKCwpLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHNuYXBzaG90SWRzPzogQXJyYXk8c3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlPiB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHNuYXBzaG90TGlua0lkOiBUaGUgSUQgb2YgdGhlIHNuYXBzaG90IGNoYWluLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHNuYXBzaG90TGlua0lkPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgc25hcHNob3ROYW1lOiBUaGUgbmFtZSBvZiB0aGUgc25hcHNob3QuXG4gICAgICovXG4gICAgcmVhZG9ubHkgc25hcHNob3ROYW1lPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgc25hcHNob3RUeXBlOiBTcGVjaWZpZXMgd2hldGhlciB0aGUgc25hcHNob3QgaGFzIGJlZW4gdXNlZCB0byBjcmVhdGUgaW1hZ2VzIG9yIGRpc2tzLiBWYWxpZCB2YWx1ZXM6XG4gICAgICogYXV0bzogYXV0b21hdGljIHNuYXBzaG90XG4gICAgICogdXNlcjogbWFudWFsIHNuYXBzaG90XG4gICAgICogYWxsOiBhbGwgc25hcHNob3QgdHlwZXNcbiAgICAgKi9cbiAgICByZWFkb25seSBzbmFwc2hvdFR5cGU/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBzb3VyY2VEaXNrVHlwZTogVGhlIHR5cGUgb2YgdGhlIHNvdXJjZSBkaXNrIGZvciB3aGljaCB0aGUgc25hcHNob3Qgd2FzIGNyZWF0ZWQuIFZhbGlkIHZhbHVlczpcbiAgICAgKiBTeXN0ZW06IHN5c3RlbSBkaXNrXG4gICAgICogRGF0YTogZGF0YSBkaXNrXG4gICAgICogTm90ZSBUaGVzZSB2YWx1ZXMgYXJlIGNhc2UtaW5zZW5zaXRpdmUuXG4gICAgICovXG4gICAgcmVhZG9ubHkgc291cmNlRGlza1R5cGU/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBzdGF0dXM6IFRoZSBzdGF0dXMgb2YgdGhlIHNuYXBzaG90LiBEZWZhdWx0IHZhbHVlOiBhbGwuIFZhbGlkIHZhbHVlczpcbiAgICAgKiBwcm9ncmVzc2luZzogVGhlIHNuYXBzaG90IGlzIGJlaW5nIGNyZWF0ZWQuXG4gICAgICogYWNjb21wbGlzaGVkOiBUaGUgc25hcHNob3QgaXMgY3JlYXRlZC5cbiAgICAgKiBmYWlsZWQ6IFRoZSBzbmFwc2hvdCBmYWlscyB0byBiZSBjcmVhdGVkLlxuICAgICAqIGFsbDogYWxsIHNuYXBzaG90IHN0YXR1c2VzLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHN0YXR1cz86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHRhZ3M6IFRhZ3Mgb2Ygc25hcHNob3QuXG4gICAgICovXG4gICAgcmVhZG9ubHkgdGFncz86IFJvc1NuYXBzaG90cy5UYWdzUHJvcGVydHlbXTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHVzYWdlOiBUaGUgdHlwZSBvZiB0aGUgc25hcHNob3QuIERlZmF1bHQgdmFsdWU6IGFsbC4gVmFsaWQgdmFsdWVzOlxuICAgICAqIGltYWdlOiBUaGUgc25hcHNob3QgaGFzIGJlZW4gdXNlZCB0byBjcmVhdGUgY3VzdG9tIGltYWdlcy5cbiAgICAgKiBkaXNrOiBUaGUgc25hcHNob3QgaGFzIGJlZW4gdXNlZCB0byBjcmVhdGUgZGlza3MuXG4gICAgICogaW1hZ2VfZGlzazogVGhlIHNuYXBzaG90IGhhcyBiZWVuIHVzZWQgdG8gY3JlYXRlIGN1c3RvbSBpbWFnZXMgYW5kIGRhdGEgZGlza3MuXG4gICAgICogbm9uZTogVGhlIHNuYXBzaG90IGhhcyBub3QgYmVlbiB1c2VkIHRvIGNyZWF0ZSBjdXN0b20gaW1hZ2VzIG9yIGRpc2tzLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHVzYWdlPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xufVxuXG4vKipcbiAqIFRoaXMgY2xhc3MgZW5jYXBzdWxhdGVzIGFuZCBleHRlbmRzIHRoZSBST1MgcmVzb3VyY2UgdHlwZSBgREFUQVNPVVJDRTo6RUNTOjpTbmFwc2hvdHNgLCB3aGljaCBpcyB1c2VkIHRvIHF1ZXJ5IGFsbCBzbmFwc2hvdHMgb2YgYW4gRWxhc3RpYyBDb21wdXRlIFNlcnZpY2UgKEVDUykgaW5zdGFuY2Ugb3IgYSBkaXNrLlxuICogQE5vdGUgVGhpcyBjbGFzcyBtYXkgaGF2ZSBzb21lIG5ldyBmdW5jdGlvbnMgdG8gZmFjaWxpdGF0ZSBkZXZlbG9wbWVudCwgc28gaXQgaXMgcmVjb21tZW5kZWQgdG8gdXNlIHRoaXMgY2xhc3MgaW5zdGVhZCBvZiBgUm9zU25hcHNob3RzYGZvciBhIG1vcmUgY29udmVuaWVudCBkZXZlbG9wbWVudCBleHBlcmllbmNlLlxuICogU2VlIGh0dHBzOi8vd3d3LmFsaWJhYmFjbG91ZC5jb20vaGVscC9yb3MvZGV2ZWxvcGVyLXJlZmVyZW5jZS9kYXRhc291cmNlLWVjcy1zbmFwc2hvdHNcbiAqL1xuZXhwb3J0IGNsYXNzIFNuYXBzaG90cyBleHRlbmRzIHJvcy5SZXNvdXJjZSB7XG4gICAgcHJvdGVjdGVkIHNjb3BlOiByb3MuQ29uc3RydWN0O1xuICAgIHByb3RlY3RlZCBpZDogc3RyaW5nO1xuICAgIHByb3RlY3RlZCBwcm9wczogU25hcHNob3RzUHJvcHM7XG4gICAgcHJvdGVjdGVkIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OiBib29sZWFuO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIFNuYXBzaG90SWRzOiB0aGUgbGlzdCBvZiBzbmFwc2hvdCBpZHMuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJTbmFwc2hvdElkczogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIFNuYXBzaG90czogdGhlIGxpc3Qgb2Ygc25hcHNob3RzLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyU25hcHNob3RzOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQYXJhbSBzY29wZSAtIHNjb3BlIGluIHdoaWNoIHRoaXMgcmVzb3VyY2UgaXMgZGVmaW5lZFxuICAgICAqIFBhcmFtIGlkICAgIC0gc2NvcGVkIGlkIG9mIHRoZSByZXNvdXJjZVxuICAgICAqIFBhcmFtIHByb3BzIC0gcmVzb3VyY2UgcHJvcGVydGllc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiByb3MuQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogU25hcHNob3RzUHJvcHMgPSB7fSwgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6Ym9vbGVhbiA9IHRydWUpIHtcbiAgICAgICAgc3VwZXIoc2NvcGUsIGlkKTtcbiAgICAgICAgdGhpcy5zY29wZSA9IHNjb3BlO1xuICAgICAgICB0aGlzLmlkID0gaWQ7XG4gICAgICAgIHRoaXMucHJvcHMgPSBwcm9wcztcbiAgICAgICAgdGhpcy5lbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCA9IGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50O1xuXG4gICAgICAgIGNvbnN0IHJvc1NuYXBzaG90cyA9IG5ldyBSb3NTbmFwc2hvdHModGhpcywgaWQsICB7XG4gICAgICAgICAgICBzdGF0dXM6IHByb3BzLnN0YXR1cyxcbiAgICAgICAgICAgIHVzYWdlOiBwcm9wcy51c2FnZSxcbiAgICAgICAgICAgIGNhdGVnb3J5OiBwcm9wcy5jYXRlZ29yeSxcbiAgICAgICAgICAgIGttc0tleUlkOiBwcm9wcy5rbXNLZXlJZCxcbiAgICAgICAgICAgIHJlc291cmNlR3JvdXBJZDogcHJvcHMucmVzb3VyY2VHcm91cElkLFxuICAgICAgICAgICAgaW5zdGFuY2VJZDogcHJvcHMuaW5zdGFuY2VJZCxcbiAgICAgICAgICAgIGVuY3J5cHRlZDogcHJvcHMuZW5jcnlwdGVkLFxuICAgICAgICAgICAgc25hcHNob3RMaW5rSWQ6IHByb3BzLnNuYXBzaG90TGlua0lkLFxuICAgICAgICAgICAgc25hcHNob3RJZHM6IHByb3BzLnNuYXBzaG90SWRzLFxuICAgICAgICAgICAgc25hcHNob3ROYW1lOiBwcm9wcy5zbmFwc2hvdE5hbWUsXG4gICAgICAgICAgICBmaWx0ZXJzOiBwcm9wcy5maWx0ZXJzLFxuICAgICAgICAgICAgc25hcHNob3RUeXBlOiBwcm9wcy5zbmFwc2hvdFR5cGUsXG4gICAgICAgICAgICBzb3VyY2VEaXNrVHlwZTogcHJvcHMuc291cmNlRGlza1R5cGUsXG4gICAgICAgICAgICB0YWdzOiBwcm9wcy50YWdzLFxuICAgICAgICAgICAgZGlza0lkOiBwcm9wcy5kaXNrSWQsXG4gICAgICAgIH0sIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ICYmIHRoaXMuc3RhY2suZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQpO1xuICAgICAgICB0aGlzLnJlc291cmNlID0gcm9zU25hcHNob3RzO1xuICAgICAgICB0aGlzLmF0dHJTbmFwc2hvdElkcyA9IHJvc1NuYXBzaG90cy5hdHRyU25hcHNob3RJZHM7XG4gICAgICAgIHRoaXMuYXR0clNuYXBzaG90cyA9IHJvc1NuYXBzaG90cy5hdHRyU25hcHNob3RzO1xuICAgIH1cbn1cbiJdfQ==