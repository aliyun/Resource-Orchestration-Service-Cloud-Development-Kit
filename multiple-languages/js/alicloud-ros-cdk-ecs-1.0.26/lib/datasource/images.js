"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Images = exports.ImagesProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ecs_generated_1 = require("./ecs.generated");
Object.defineProperty(exports, "ImagesProperty", { enumerable: true, get: function () { return ecs_generated_1.RosImages; } });
/**
 * This class encapsulates and extends the ROS resource type `DATASOURCE::ECS::Images`, which is used to query available images.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosImages`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/datasource-ecs-images
 */
class Images extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props = {}, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosImages = new ecs_generated_1.RosImages(this, id, {
            status: props.status,
            imageOwnerAlias: props.imageOwnerAlias,
            usage: props.usage,
            actionType: props.actionType,
            resourceGroupId: props.resourceGroupId,
            architecture: props.architecture,
            imageFamily: props.imageFamily,
            isSupportIoOptimized: props.isSupportIoOptimized,
            isSupportCloudinit: props.isSupportCloudinit,
            imageName: props.imageName,
            snapshotId: props.snapshotId,
            isPublic: props.isPublic,
            osType: props.osType,
            imageId: props.imageId,
            instanceType: props.instanceType,
            tags: props.tags,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosImages;
        this.attrImageIds = rosImages.attrImageIds;
        this.attrImages = rosImages.attrImages;
    }
}
exports.Images = Images;
//# sourceMappingURL=data:application/json;base64,