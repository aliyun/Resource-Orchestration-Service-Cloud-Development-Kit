"use strict";
// Generated from the AliCloud ROS Resource Specification
Object.defineProperty(exports, "__esModule", { value: true });
exports.RosFlowProject = exports.RosClusterServiceConfigs = exports.RosCluster2 = exports.RosCluster = void 0;
const ros = require("@alicloud/ros-cdk-core");
/**
 * Determine whether the given properties match those of a `RosClusterProps`
 *
 * @param properties - the TypeScript properties of a `RosClusterProps`
 *
 * @returns the result of the validation.
 */
function RosClusterPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('bootstrapAction', ros.listValidator(RosCluster_BootstrapActionPropertyValidator))(properties.bootstrapAction));
    errors.collect(ros.propertyValidator('resourceGroupId', ros.validateString)(properties.resourceGroupId));
    errors.collect(ros.propertyValidator('securityGroupName', ros.validateString)(properties.securityGroupName));
    errors.collect(ros.propertyValidator('config', ros.listValidator(RosCluster_ConfigPropertyValidator))(properties.config));
    errors.collect(ros.propertyValidator('clickHouseConf', ros.hashValidator(ros.validateAny))(properties.clickHouseConf));
    errors.collect(ros.propertyValidator('autoRenew', ros.validateBoolean)(properties.autoRenew));
    errors.collect(ros.propertyValidator('hostGroup', ros.requiredValidator)(properties.hostGroup));
    errors.collect(ros.propertyValidator('hostGroup', ros.listValidator(RosCluster_HostGroupPropertyValidator))(properties.hostGroup));
    errors.collect(ros.propertyValidator('userInfo', ros.listValidator(RosCluster_UserInfoPropertyValidator))(properties.userInfo));
    errors.collect(ros.propertyValidator('highAvailabilityEnable', ros.validateBoolean)(properties.highAvailabilityEnable));
    errors.collect(ros.propertyValidator('name', ros.requiredValidator)(properties.name));
    errors.collect(ros.propertyValidator('name', ros.validateString)(properties.name));
    errors.collect(ros.propertyValidator('optionSoftWareList', ros.listValidator(ros.validateString))(properties.optionSoftWareList));
    if (properties.masterPwd && (Array.isArray(properties.masterPwd) || (typeof properties.masterPwd) === 'string')) {
        errors.collect(ros.propertyValidator('masterPwd', ros.validateLength)({
            data: properties.masterPwd.length,
            min: 8,
            max: 30,
        }));
    }
    errors.collect(ros.propertyValidator('masterPwd', ros.validateString)(properties.masterPwd));
    errors.collect(ros.propertyValidator('sshEnable', ros.validateBoolean)(properties.sshEnable));
    errors.collect(ros.propertyValidator('useCustomHiveMetaDb', ros.validateBoolean)(properties.useCustomHiveMetaDb));
    errors.collect(ros.propertyValidator('isOpenPublicIp', ros.validateBoolean)(properties.isOpenPublicIp));
    errors.collect(ros.propertyValidator('authorizeContent', ros.validateString)(properties.authorizeContent));
    errors.collect(ros.propertyValidator('configurations', ros.validateString)(properties.configurations));
    errors.collect(ros.propertyValidator('netType', ros.requiredValidator)(properties.netType));
    errors.collect(ros.propertyValidator('netType', ros.validateString)(properties.netType));
    errors.collect(ros.propertyValidator('userDefinedEmrEcsRole', ros.validateString)(properties.userDefinedEmrEcsRole));
    if (properties.tags && (Array.isArray(properties.tags) || (typeof properties.tags) === 'string')) {
        errors.collect(ros.propertyValidator('tags', ros.validateLength)({
            data: properties.tags.length,
            min: undefined,
            max: 20,
        }));
    }
    errors.collect(ros.propertyValidator('tags', ros.listValidator(RosCluster_TagsPropertyValidator))(properties.tags));
    errors.collect(ros.propertyValidator('useLocalMetaDb', ros.requiredValidator)(properties.useLocalMetaDb));
    errors.collect(ros.propertyValidator('useLocalMetaDb', ros.validateBoolean)(properties.useLocalMetaDb));
    errors.collect(ros.propertyValidator('keyPairName', ros.validateString)(properties.keyPairName));
    errors.collect(ros.propertyValidator('ioOptimized', ros.validateBoolean)(properties.ioOptimized));
    errors.collect(ros.propertyValidator('zoneId', ros.requiredValidator)(properties.zoneId));
    errors.collect(ros.propertyValidator('zoneId', ros.validateString)(properties.zoneId));
    errors.collect(ros.propertyValidator('vSwitchId', ros.validateString)(properties.vSwitchId));
    errors.collect(ros.propertyValidator('securityGroupId', ros.validateString)(properties.securityGroupId));
    errors.collect(ros.propertyValidator('machineType', ros.validateString)(properties.machineType));
    errors.collect(ros.propertyValidator('depositType', ros.validateString)(properties.depositType));
    errors.collect(ros.propertyValidator('metaStoreType', ros.validateString)(properties.metaStoreType));
    if (properties.period && (typeof properties.period) !== 'object') {
        errors.collect(ros.propertyValidator('period', ros.validateAllowedValues)({
            data: properties.period,
            allowedValues: [1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 24, 36],
        }));
    }
    errors.collect(ros.propertyValidator('period', ros.validateNumber)(properties.period));
    errors.collect(ros.propertyValidator('emrVer', ros.requiredValidator)(properties.emrVer));
    errors.collect(ros.propertyValidator('emrVer', ros.validateString)(properties.emrVer));
    errors.collect(ros.propertyValidator('clusterType', ros.requiredValidator)(properties.clusterType));
    errors.collect(ros.propertyValidator('clusterType', ros.validateString)(properties.clusterType));
    errors.collect(ros.propertyValidator('easEnable', ros.validateBoolean)(properties.easEnable));
    errors.collect(ros.propertyValidator('relatedClusterId', ros.validateString)(properties.relatedClusterId));
    errors.collect(ros.propertyValidator('vpcId', ros.validateString)(properties.vpcId));
    errors.collect(ros.propertyValidator('chargeType', ros.requiredValidator)(properties.chargeType));
    if (properties.chargeType && (typeof properties.chargeType) !== 'object') {
        errors.collect(ros.propertyValidator('chargeType', ros.validateAllowedValues)({
            data: properties.chargeType,
            allowedValues: ["PayAsYouGo", "PostPaid", "PayOnDemand", "Postpaid", "PostPay", "Postpay", "POSTPAY", "POST", "Subscription", "PrePaid", "Prepaid", "PrePay", "Prepay", "PREPAY", "PRE"],
        }));
    }
    errors.collect(ros.propertyValidator('chargeType', ros.validateString)(properties.chargeType));
    errors.collect(ros.propertyValidator('whiteListType', ros.validateString)(properties.whiteListType));
    errors.collect(ros.propertyValidator('metaStoreConf', ros.validateString)(properties.metaStoreConf));
    errors.collect(ros.propertyValidator('instanceGeneration', ros.validateString)(properties.instanceGeneration));
    errors.collect(ros.propertyValidator('logPath', ros.validateString)(properties.logPath));
    errors.collect(ros.propertyValidator('initCustomHiveMetaDb', ros.validateBoolean)(properties.initCustomHiveMetaDb));
    return errors.wrap('supplied properties not correct for "RosClusterProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::EMR::Cluster` resource
 *
 * @param properties - the TypeScript properties of a `RosClusterProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::EMR::Cluster` resource.
 */
// @ts-ignore TS6133
function rosClusterPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosClusterPropsValidator(properties).assertSuccess();
    }
    return {
        'ChargeType': ros.stringToRosTemplate(properties.chargeType),
        'ClusterType': ros.stringToRosTemplate(properties.clusterType),
        'EmrVer': ros.stringToRosTemplate(properties.emrVer),
        'HostGroup': ros.listMapper(rosClusterHostGroupPropertyToRosTemplate)(properties.hostGroup),
        'Name': ros.stringToRosTemplate(properties.name),
        'NetType': ros.stringToRosTemplate(properties.netType),
        'UseLocalMetaDb': ros.booleanToRosTemplate(properties.useLocalMetaDb),
        'ZoneId': ros.stringToRosTemplate(properties.zoneId),
        'AuthorizeContent': ros.stringToRosTemplate(properties.authorizeContent),
        'AutoRenew': ros.booleanToRosTemplate(properties.autoRenew),
        'BootstrapAction': ros.listMapper(rosClusterBootstrapActionPropertyToRosTemplate)(properties.bootstrapAction),
        'ClickHouseConf': ros.hashMapper(ros.objectToRosTemplate)(properties.clickHouseConf),
        'Config': ros.listMapper(rosClusterConfigPropertyToRosTemplate)(properties.config),
        'Configurations': ros.stringToRosTemplate(properties.configurations),
        'DepositType': ros.stringToRosTemplate(properties.depositType),
        'EasEnable': ros.booleanToRosTemplate(properties.easEnable),
        'HighAvailabilityEnable': ros.booleanToRosTemplate(properties.highAvailabilityEnable),
        'InitCustomHiveMetaDB': ros.booleanToRosTemplate(properties.initCustomHiveMetaDb),
        'InstanceGeneration': ros.stringToRosTemplate(properties.instanceGeneration),
        'IoOptimized': ros.booleanToRosTemplate(properties.ioOptimized),
        'IsOpenPublicIp': ros.booleanToRosTemplate(properties.isOpenPublicIp),
        'KeyPairName': ros.stringToRosTemplate(properties.keyPairName),
        'LogPath': ros.stringToRosTemplate(properties.logPath),
        'MachineType': ros.stringToRosTemplate(properties.machineType),
        'MasterPwd': ros.stringToRosTemplate(properties.masterPwd),
        'MetaStoreConf': ros.stringToRosTemplate(properties.metaStoreConf),
        'MetaStoreType': ros.stringToRosTemplate(properties.metaStoreType),
        'OptionSoftWareList': ros.listMapper(ros.stringToRosTemplate)(properties.optionSoftWareList),
        'Period': ros.numberToRosTemplate(properties.period),
        'RelatedClusterId': ros.stringToRosTemplate(properties.relatedClusterId),
        'ResourceGroupId': ros.stringToRosTemplate(properties.resourceGroupId),
        'SecurityGroupId': ros.stringToRosTemplate(properties.securityGroupId),
        'SecurityGroupName': ros.stringToRosTemplate(properties.securityGroupName),
        'SshEnable': ros.booleanToRosTemplate(properties.sshEnable),
        'Tags': ros.listMapper(rosClusterTagsPropertyToRosTemplate)(properties.tags),
        'UseCustomHiveMetaDB': ros.booleanToRosTemplate(properties.useCustomHiveMetaDb),
        'UserDefinedEmrEcsRole': ros.stringToRosTemplate(properties.userDefinedEmrEcsRole),
        'UserInfo': ros.listMapper(rosClusterUserInfoPropertyToRosTemplate)(properties.userInfo),
        'VpcId': ros.stringToRosTemplate(properties.vpcId),
        'VSwitchId': ros.stringToRosTemplate(properties.vSwitchId),
        'WhiteListType': ros.stringToRosTemplate(properties.whiteListType),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::EMR::Cluster`, which is used to create an E-MapReduce (EMR) cluster.
 * @Note This class does not contain additional functions, so it is recommended to use the `Cluster` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-emr-cluster
 */
class RosCluster extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosCluster.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrArn = this.getAtt('Arn');
        this.attrClusterId = this.getAtt('ClusterId');
        this.attrHostGroups = this.getAtt('HostGroups');
        this.attrMasterNodeInnerIps = this.getAtt('MasterNodeInnerIps');
        this.attrMasterNodePubIps = this.getAtt('MasterNodePubIps');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.chargeType = props.chargeType;
        this.clusterType = props.clusterType;
        this.emrVer = props.emrVer;
        this.hostGroup = props.hostGroup;
        this.name = props.name;
        this.netType = props.netType;
        this.useLocalMetaDb = props.useLocalMetaDb;
        this.zoneId = props.zoneId;
        this.authorizeContent = props.authorizeContent;
        this.autoRenew = props.autoRenew;
        this.bootstrapAction = props.bootstrapAction;
        this.clickHouseConf = props.clickHouseConf;
        this.config = props.config;
        this.configurations = props.configurations;
        this.depositType = props.depositType;
        this.easEnable = props.easEnable;
        this.highAvailabilityEnable = props.highAvailabilityEnable;
        this.initCustomHiveMetaDb = props.initCustomHiveMetaDb;
        this.instanceGeneration = props.instanceGeneration;
        this.ioOptimized = props.ioOptimized;
        this.isOpenPublicIp = props.isOpenPublicIp;
        this.keyPairName = props.keyPairName;
        this.logPath = props.logPath;
        this.machineType = props.machineType;
        this.masterPwd = props.masterPwd;
        this.metaStoreConf = props.metaStoreConf;
        this.metaStoreType = props.metaStoreType;
        this.optionSoftWareList = props.optionSoftWareList;
        this.period = props.period;
        this.relatedClusterId = props.relatedClusterId;
        this.resourceGroupId = props.resourceGroupId;
        this.securityGroupId = props.securityGroupId;
        this.securityGroupName = props.securityGroupName;
        this.sshEnable = props.sshEnable;
        this.tags = props.tags;
        this.useCustomHiveMetaDb = props.useCustomHiveMetaDb;
        this.userDefinedEmrEcsRole = props.userDefinedEmrEcsRole;
        this.userInfo = props.userInfo;
        this.vpcId = props.vpcId;
        this.vSwitchId = props.vSwitchId;
        this.whiteListType = props.whiteListType;
    }
    get rosProperties() {
        return {
            chargeType: this.chargeType,
            clusterType: this.clusterType,
            emrVer: this.emrVer,
            hostGroup: this.hostGroup,
            name: this.name,
            netType: this.netType,
            useLocalMetaDb: this.useLocalMetaDb,
            zoneId: this.zoneId,
            authorizeContent: this.authorizeContent,
            autoRenew: this.autoRenew,
            bootstrapAction: this.bootstrapAction,
            clickHouseConf: this.clickHouseConf,
            config: this.config,
            configurations: this.configurations,
            depositType: this.depositType,
            easEnable: this.easEnable,
            highAvailabilityEnable: this.highAvailabilityEnable,
            initCustomHiveMetaDb: this.initCustomHiveMetaDb,
            instanceGeneration: this.instanceGeneration,
            ioOptimized: this.ioOptimized,
            isOpenPublicIp: this.isOpenPublicIp,
            keyPairName: this.keyPairName,
            logPath: this.logPath,
            machineType: this.machineType,
            masterPwd: this.masterPwd,
            metaStoreConf: this.metaStoreConf,
            metaStoreType: this.metaStoreType,
            optionSoftWareList: this.optionSoftWareList,
            period: this.period,
            relatedClusterId: this.relatedClusterId,
            resourceGroupId: this.resourceGroupId,
            securityGroupId: this.securityGroupId,
            securityGroupName: this.securityGroupName,
            sshEnable: this.sshEnable,
            tags: this.tags,
            useCustomHiveMetaDb: this.useCustomHiveMetaDb,
            userDefinedEmrEcsRole: this.userDefinedEmrEcsRole,
            userInfo: this.userInfo,
            vpcId: this.vpcId,
            vSwitchId: this.vSwitchId,
            whiteListType: this.whiteListType,
        };
    }
    renderProperties(props) {
        return rosClusterPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosCluster = RosCluster;
/**
 * The resource type name for this resource class.
 */
RosCluster.ROS_RESOURCE_TYPE_NAME = "ALIYUN::EMR::Cluster";
/**
 * Determine whether the given properties match those of a `BootstrapActionProperty`
 *
 * @param properties - the TypeScript properties of a `BootstrapActionProperty`
 *
 * @returns the result of the validation.
 */
function RosCluster_BootstrapActionPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('path', ros.validateString)(properties.path));
    errors.collect(ros.propertyValidator('arg', ros.validateString)(properties.arg));
    errors.collect(ros.propertyValidator('name', ros.validateString)(properties.name));
    return errors.wrap('supplied properties not correct for "BootstrapActionProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::EMR::Cluster.BootstrapAction` resource
 *
 * @param properties - the TypeScript properties of a `BootstrapActionProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::EMR::Cluster.BootstrapAction` resource.
 */
// @ts-ignore TS6133
function rosClusterBootstrapActionPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosCluster_BootstrapActionPropertyValidator(properties).assertSuccess();
    return {
        'Path': ros.stringToRosTemplate(properties.path),
        'Arg': ros.stringToRosTemplate(properties.arg),
        'Name': ros.stringToRosTemplate(properties.name),
    };
}
/**
 * Determine whether the given properties match those of a `ConfigProperty`
 *
 * @param properties - the TypeScript properties of a `ConfigProperty`
 *
 * @returns the result of the validation.
 */
function RosCluster_ConfigPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('replace', ros.validateString)(properties.replace));
    errors.collect(ros.propertyValidator('configValue', ros.validateString)(properties.configValue));
    errors.collect(ros.propertyValidator('configKey', ros.validateString)(properties.configKey));
    errors.collect(ros.propertyValidator('serviceName', ros.validateString)(properties.serviceName));
    errors.collect(ros.propertyValidator('fileName', ros.validateString)(properties.fileName));
    errors.collect(ros.propertyValidator('encrypt', ros.validateString)(properties.encrypt));
    return errors.wrap('supplied properties not correct for "ConfigProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::EMR::Cluster.Config` resource
 *
 * @param properties - the TypeScript properties of a `ConfigProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::EMR::Cluster.Config` resource.
 */
// @ts-ignore TS6133
function rosClusterConfigPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosCluster_ConfigPropertyValidator(properties).assertSuccess();
    return {
        'Replace': ros.stringToRosTemplate(properties.replace),
        'ConfigValue': ros.stringToRosTemplate(properties.configValue),
        'ConfigKey': ros.stringToRosTemplate(properties.configKey),
        'ServiceName': ros.stringToRosTemplate(properties.serviceName),
        'FileName': ros.stringToRosTemplate(properties.fileName),
        'Encrypt': ros.stringToRosTemplate(properties.encrypt),
    };
}
/**
 * Determine whether the given properties match those of a `HostGroupProperty`
 *
 * @param properties - the TypeScript properties of a `HostGroupProperty`
 *
 * @returns the result of the validation.
 */
function RosCluster_HostGroupPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('hostGroupType', ros.requiredValidator)(properties.hostGroupType));
    if (properties.hostGroupType && (typeof properties.hostGroupType) !== 'object') {
        errors.collect(ros.propertyValidator('hostGroupType', ros.validateAllowedValues)({
            data: properties.hostGroupType,
            allowedValues: ["MASTER", "CORE", "TASK"],
        }));
    }
    errors.collect(ros.propertyValidator('hostGroupType', ros.validateString)(properties.hostGroupType));
    errors.collect(ros.propertyValidator('comment', ros.validateString)(properties.comment));
    errors.collect(ros.propertyValidator('diskCount', ros.requiredValidator)(properties.diskCount));
    if (properties.diskCount && (typeof properties.diskCount) !== 'object') {
        errors.collect(ros.propertyValidator('diskCount', ros.validateRange)({
            data: properties.diskCount,
            min: 1,
            max: undefined,
        }));
    }
    errors.collect(ros.propertyValidator('diskCount', ros.validateNumber)(properties.diskCount));
    errors.collect(ros.propertyValidator('nodeCount', ros.requiredValidator)(properties.nodeCount));
    errors.collect(ros.propertyValidator('nodeCount', ros.validateNumber)(properties.nodeCount));
    errors.collect(ros.propertyValidator('sysDiskType', ros.requiredValidator)(properties.sysDiskType));
    errors.collect(ros.propertyValidator('sysDiskType', ros.validateString)(properties.sysDiskType));
    errors.collect(ros.propertyValidator('clusterId', ros.validateString)(properties.clusterId));
    errors.collect(ros.propertyValidator('vSwitchId', ros.validateString)(properties.vSwitchId));
    errors.collect(ros.propertyValidator('autoRenew', ros.validateBoolean)(properties.autoRenew));
    errors.collect(ros.propertyValidator('hostPassword', ros.validateString)(properties.hostPassword));
    if (properties.period && (typeof properties.period) !== 'object') {
        errors.collect(ros.propertyValidator('period', ros.validateAllowedValues)({
            data: properties.period,
            allowedValues: [1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 24, 36],
        }));
    }
    errors.collect(ros.propertyValidator('period', ros.validateNumber)(properties.period));
    errors.collect(ros.propertyValidator('hostGroupName', ros.validateString)(properties.hostGroupName));
    errors.collect(ros.propertyValidator('gpuDriver', ros.validateString)(properties.gpuDriver));
    errors.collect(ros.propertyValidator('diskType', ros.requiredValidator)(properties.diskType));
    errors.collect(ros.propertyValidator('diskType', ros.validateString)(properties.diskType));
    errors.collect(ros.propertyValidator('diskCapacity', ros.requiredValidator)(properties.diskCapacity));
    errors.collect(ros.propertyValidator('diskCapacity', ros.validateNumber)(properties.diskCapacity));
    errors.collect(ros.propertyValidator('hostGroupId', ros.validateString)(properties.hostGroupId));
    errors.collect(ros.propertyValidator('chargeType', ros.requiredValidator)(properties.chargeType));
    if (properties.chargeType && (typeof properties.chargeType) !== 'object') {
        errors.collect(ros.propertyValidator('chargeType', ros.validateAllowedValues)({
            data: properties.chargeType,
            allowedValues: ["PayAsYouGo", "PostPaid", "PayOnDemand", "Postpaid", "PostPay", "Postpay", "POSTPAY", "POST", "Subscription", "PrePaid", "Prepaid", "PrePay", "Prepay", "PREPAY", "PRE"],
        }));
    }
    errors.collect(ros.propertyValidator('chargeType', ros.validateString)(properties.chargeType));
    errors.collect(ros.propertyValidator('createType', ros.validateString)(properties.createType));
    errors.collect(ros.propertyValidator('hostKeyPairName', ros.validateString)(properties.hostKeyPairName));
    errors.collect(ros.propertyValidator('sysDiskCapacity', ros.requiredValidator)(properties.sysDiskCapacity));
    errors.collect(ros.propertyValidator('sysDiskCapacity', ros.validateNumber)(properties.sysDiskCapacity));
    errors.collect(ros.propertyValidator('instanceType', ros.requiredValidator)(properties.instanceType));
    errors.collect(ros.propertyValidator('instanceType', ros.validateString)(properties.instanceType));
    return errors.wrap('supplied properties not correct for "HostGroupProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::EMR::Cluster.HostGroup` resource
 *
 * @param properties - the TypeScript properties of a `HostGroupProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::EMR::Cluster.HostGroup` resource.
 */
// @ts-ignore TS6133
function rosClusterHostGroupPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosCluster_HostGroupPropertyValidator(properties).assertSuccess();
    return {
        'HostGroupType': ros.stringToRosTemplate(properties.hostGroupType),
        'Comment': ros.stringToRosTemplate(properties.comment),
        'DiskCount': ros.numberToRosTemplate(properties.diskCount),
        'NodeCount': ros.numberToRosTemplate(properties.nodeCount),
        'SysDiskType': ros.stringToRosTemplate(properties.sysDiskType),
        'ClusterId': ros.stringToRosTemplate(properties.clusterId),
        'VSwitchId': ros.stringToRosTemplate(properties.vSwitchId),
        'AutoRenew': ros.booleanToRosTemplate(properties.autoRenew),
        'HostPassword': ros.stringToRosTemplate(properties.hostPassword),
        'Period': ros.numberToRosTemplate(properties.period),
        'HostGroupName': ros.stringToRosTemplate(properties.hostGroupName),
        'GpuDriver': ros.stringToRosTemplate(properties.gpuDriver),
        'DiskType': ros.stringToRosTemplate(properties.diskType),
        'DiskCapacity': ros.numberToRosTemplate(properties.diskCapacity),
        'HostGroupId': ros.stringToRosTemplate(properties.hostGroupId),
        'ChargeType': ros.stringToRosTemplate(properties.chargeType),
        'CreateType': ros.stringToRosTemplate(properties.createType),
        'HostKeyPairName': ros.stringToRosTemplate(properties.hostKeyPairName),
        'SysDiskCapacity': ros.numberToRosTemplate(properties.sysDiskCapacity),
        'InstanceType': ros.stringToRosTemplate(properties.instanceType),
    };
}
/**
 * Determine whether the given properties match those of a `TagsProperty`
 *
 * @param properties - the TypeScript properties of a `TagsProperty`
 *
 * @returns the result of the validation.
 */
function RosCluster_TagsPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('value', ros.validateString)(properties.value));
    errors.collect(ros.propertyValidator('key', ros.requiredValidator)(properties.key));
    errors.collect(ros.propertyValidator('key', ros.validateString)(properties.key));
    return errors.wrap('supplied properties not correct for "TagsProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::EMR::Cluster.Tags` resource
 *
 * @param properties - the TypeScript properties of a `TagsProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::EMR::Cluster.Tags` resource.
 */
// @ts-ignore TS6133
function rosClusterTagsPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosCluster_TagsPropertyValidator(properties).assertSuccess();
    return {
        'Value': ros.stringToRosTemplate(properties.value),
        'Key': ros.stringToRosTemplate(properties.key),
    };
}
/**
 * Determine whether the given properties match those of a `UserInfoProperty`
 *
 * @param properties - the TypeScript properties of a `UserInfoProperty`
 *
 * @returns the result of the validation.
 */
function RosCluster_UserInfoPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('userName', ros.validateString)(properties.userName));
    errors.collect(ros.propertyValidator('userId', ros.validateString)(properties.userId));
    errors.collect(ros.propertyValidator('password', ros.validateString)(properties.password));
    return errors.wrap('supplied properties not correct for "UserInfoProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::EMR::Cluster.UserInfo` resource
 *
 * @param properties - the TypeScript properties of a `UserInfoProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::EMR::Cluster.UserInfo` resource.
 */
// @ts-ignore TS6133
function rosClusterUserInfoPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosCluster_UserInfoPropertyValidator(properties).assertSuccess();
    return {
        'UserName': ros.stringToRosTemplate(properties.userName),
        'UserId': ros.stringToRosTemplate(properties.userId),
        'Password': ros.stringToRosTemplate(properties.password),
    };
}
/**
 * Determine whether the given properties match those of a `RosCluster2Props`
 *
 * @param properties - the TypeScript properties of a `RosCluster2Props`
 *
 * @returns the result of the validation.
 */
function RosCluster2PropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('applications', ros.requiredValidator)(properties.applications));
    errors.collect(ros.propertyValidator('applications', ros.listValidator(RosCluster2_ApplicationsPropertyValidator))(properties.applications));
    errors.collect(ros.propertyValidator('resourceGroupId', ros.validateString)(properties.resourceGroupId));
    if (properties.applicationConfigs && (Array.isArray(properties.applicationConfigs) || (typeof properties.applicationConfigs) === 'string')) {
        errors.collect(ros.propertyValidator('applicationConfigs', ros.validateLength)({
            data: properties.applicationConfigs.length,
            min: 1,
            max: 1000,
        }));
    }
    errors.collect(ros.propertyValidator('applicationConfigs', ros.listValidator(RosCluster2_ApplicationConfigsPropertyValidator))(properties.applicationConfigs));
    errors.collect(ros.propertyValidator('clusterType', ros.requiredValidator)(properties.clusterType));
    errors.collect(ros.propertyValidator('clusterType', ros.validateString)(properties.clusterType));
    errors.collect(ros.propertyValidator('nodeGroups', ros.requiredValidator)(properties.nodeGroups));
    if (properties.nodeGroups && (Array.isArray(properties.nodeGroups) || (typeof properties.nodeGroups) === 'string')) {
        errors.collect(ros.propertyValidator('nodeGroups', ros.validateLength)({
            data: properties.nodeGroups.length,
            min: 1,
            max: 100,
        }));
    }
    errors.collect(ros.propertyValidator('nodeGroups', ros.listValidator(RosCluster2_NodeGroupsPropertyValidator))(properties.nodeGroups));
    errors.collect(ros.propertyValidator('releaseVersion', ros.requiredValidator)(properties.releaseVersion));
    errors.collect(ros.propertyValidator('releaseVersion', ros.validateString)(properties.releaseVersion));
    errors.collect(ros.propertyValidator('bootstrapScripts', ros.listValidator(RosCluster2_BootstrapScriptsPropertyValidator))(properties.bootstrapScripts));
    errors.collect(ros.propertyValidator('subscriptionConfig', RosCluster2_SubscriptionConfigPropertyValidator)(properties.subscriptionConfig));
    if (properties.deployMode && (typeof properties.deployMode) !== 'object') {
        errors.collect(ros.propertyValidator('deployMode', ros.validateAllowedValues)({
            data: properties.deployMode,
            allowedValues: ["HA", "NORMAL"],
        }));
    }
    errors.collect(ros.propertyValidator('deployMode', ros.validateString)(properties.deployMode));
    if (properties.securityMode && (typeof properties.securityMode) !== 'object') {
        errors.collect(ros.propertyValidator('securityMode', ros.validateAllowedValues)({
            data: properties.securityMode,
            allowedValues: ["KERBEROS", "NORMAL"],
        }));
    }
    errors.collect(ros.propertyValidator('securityMode', ros.validateString)(properties.securityMode));
    errors.collect(ros.propertyValidator('nodeAttributes', ros.requiredValidator)(properties.nodeAttributes));
    errors.collect(ros.propertyValidator('nodeAttributes', RosCluster2_NodeAttributesPropertyValidator)(properties.nodeAttributes));
    errors.collect(ros.propertyValidator('clusterName', ros.requiredValidator)(properties.clusterName));
    errors.collect(ros.propertyValidator('clusterName', ros.validateString)(properties.clusterName));
    if (properties.paymentType && (typeof properties.paymentType) !== 'object') {
        errors.collect(ros.propertyValidator('paymentType', ros.validateAllowedValues)({
            data: properties.paymentType,
            allowedValues: ["PayAsYouGo", "PostPaid", "PayOnDemand", "Postpaid", "PostPay", "Postpay", "POSTPAY", "POST", "Subscription", "PrePaid", "Prepaid", "PrePay", "Prepay", "PREPAY", "PRE"],
        }));
    }
    errors.collect(ros.propertyValidator('paymentType', ros.validateString)(properties.paymentType));
    if (properties.tags && (Array.isArray(properties.tags) || (typeof properties.tags) === 'string')) {
        errors.collect(ros.propertyValidator('tags', ros.validateLength)({
            data: properties.tags.length,
            min: undefined,
            max: 20,
        }));
    }
    errors.collect(ros.propertyValidator('tags', ros.listValidator(RosCluster2_TagsPropertyValidator))(properties.tags));
    return errors.wrap('supplied properties not correct for "RosCluster2Props"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::EMR::Cluster2` resource
 *
 * @param properties - the TypeScript properties of a `RosCluster2Props`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::EMR::Cluster2` resource.
 */
// @ts-ignore TS6133
function rosCluster2PropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosCluster2PropsValidator(properties).assertSuccess();
    }
    return {
        'Applications': ros.listMapper(rosCluster2ApplicationsPropertyToRosTemplate)(properties.applications),
        'ClusterName': ros.stringToRosTemplate(properties.clusterName),
        'ClusterType': ros.stringToRosTemplate(properties.clusterType),
        'NodeAttributes': rosCluster2NodeAttributesPropertyToRosTemplate(properties.nodeAttributes),
        'NodeGroups': ros.listMapper(rosCluster2NodeGroupsPropertyToRosTemplate)(properties.nodeGroups),
        'ReleaseVersion': ros.stringToRosTemplate(properties.releaseVersion),
        'ApplicationConfigs': ros.listMapper(rosCluster2ApplicationConfigsPropertyToRosTemplate)(properties.applicationConfigs),
        'BootstrapScripts': ros.listMapper(rosCluster2BootstrapScriptsPropertyToRosTemplate)(properties.bootstrapScripts),
        'DeployMode': ros.stringToRosTemplate(properties.deployMode),
        'PaymentType': ros.stringToRosTemplate(properties.paymentType),
        'ResourceGroupId': ros.stringToRosTemplate(properties.resourceGroupId),
        'SecurityMode': ros.stringToRosTemplate(properties.securityMode),
        'SubscriptionConfig': rosCluster2SubscriptionConfigPropertyToRosTemplate(properties.subscriptionConfig),
        'Tags': ros.listMapper(rosCluster2TagsPropertyToRosTemplate)(properties.tags),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::EMR::Cluster2`, which is used to create an E-MapReduce (EMR) cluster.
 * @Note This class does not contain additional functions, so it is recommended to use the `Cluster2` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-emr-cluster2
 */
class RosCluster2 extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosCluster2.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrApplicationLinks = this.getAtt('ApplicationLinks');
        this.attrClusterId = this.getAtt('ClusterId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.applications = props.applications;
        this.clusterName = props.clusterName;
        this.clusterType = props.clusterType;
        this.nodeAttributes = props.nodeAttributes;
        this.nodeGroups = props.nodeGroups;
        this.releaseVersion = props.releaseVersion;
        this.applicationConfigs = props.applicationConfigs;
        this.bootstrapScripts = props.bootstrapScripts;
        this.deployMode = props.deployMode;
        this.paymentType = props.paymentType;
        this.resourceGroupId = props.resourceGroupId;
        this.securityMode = props.securityMode;
        this.subscriptionConfig = props.subscriptionConfig;
        this.tags = props.tags;
    }
    get rosProperties() {
        return {
            applications: this.applications,
            clusterName: this.clusterName,
            clusterType: this.clusterType,
            nodeAttributes: this.nodeAttributes,
            nodeGroups: this.nodeGroups,
            releaseVersion: this.releaseVersion,
            applicationConfigs: this.applicationConfigs,
            bootstrapScripts: this.bootstrapScripts,
            deployMode: this.deployMode,
            paymentType: this.paymentType,
            resourceGroupId: this.resourceGroupId,
            securityMode: this.securityMode,
            subscriptionConfig: this.subscriptionConfig,
            tags: this.tags,
        };
    }
    renderProperties(props) {
        return rosCluster2PropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosCluster2 = RosCluster2;
/**
 * The resource type name for this resource class.
 */
RosCluster2.ROS_RESOURCE_TYPE_NAME = "ALIYUN::EMR::Cluster2";
/**
 * Determine whether the given properties match those of a `ApplicationConfigsProperty`
 *
 * @param properties - the TypeScript properties of a `ApplicationConfigsProperty`
 *
 * @returns the result of the validation.
 */
function RosCluster2_ApplicationConfigsPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('configFileName', ros.validateString)(properties.configFileName));
    errors.collect(ros.propertyValidator('applicationName', ros.requiredValidator)(properties.applicationName));
    errors.collect(ros.propertyValidator('applicationName', ros.validateString)(properties.applicationName));
    errors.collect(ros.propertyValidator('configItemKey', ros.validateString)(properties.configItemKey));
    errors.collect(ros.propertyValidator('nodeGroupName', ros.validateString)(properties.nodeGroupName));
    errors.collect(ros.propertyValidator('nodeGroupId', ros.validateString)(properties.nodeGroupId));
    errors.collect(ros.propertyValidator('configScope', ros.validateString)(properties.configScope));
    errors.collect(ros.propertyValidator('configItemValue', ros.validateString)(properties.configItemValue));
    return errors.wrap('supplied properties not correct for "ApplicationConfigsProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::EMR::Cluster2.ApplicationConfigs` resource
 *
 * @param properties - the TypeScript properties of a `ApplicationConfigsProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::EMR::Cluster2.ApplicationConfigs` resource.
 */
// @ts-ignore TS6133
function rosCluster2ApplicationConfigsPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosCluster2_ApplicationConfigsPropertyValidator(properties).assertSuccess();
    return {
        'ConfigFileName': ros.stringToRosTemplate(properties.configFileName),
        'ApplicationName': ros.stringToRosTemplate(properties.applicationName),
        'ConfigItemKey': ros.stringToRosTemplate(properties.configItemKey),
        'NodeGroupName': ros.stringToRosTemplate(properties.nodeGroupName),
        'NodeGroupId': ros.stringToRosTemplate(properties.nodeGroupId),
        'ConfigScope': ros.stringToRosTemplate(properties.configScope),
        'ConfigItemValue': ros.stringToRosTemplate(properties.configItemValue),
    };
}
/**
 * Determine whether the given properties match those of a `ApplicationsProperty`
 *
 * @param properties - the TypeScript properties of a `ApplicationsProperty`
 *
 * @returns the result of the validation.
 */
function RosCluster2_ApplicationsPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('applicationName', ros.requiredValidator)(properties.applicationName));
    errors.collect(ros.propertyValidator('applicationName', ros.validateString)(properties.applicationName));
    return errors.wrap('supplied properties not correct for "ApplicationsProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::EMR::Cluster2.Applications` resource
 *
 * @param properties - the TypeScript properties of a `ApplicationsProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::EMR::Cluster2.Applications` resource.
 */
// @ts-ignore TS6133
function rosCluster2ApplicationsPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosCluster2_ApplicationsPropertyValidator(properties).assertSuccess();
    return {
        'ApplicationName': ros.stringToRosTemplate(properties.applicationName),
    };
}
/**
 * Determine whether the given properties match those of a `BootstrapScriptsProperty`
 *
 * @param properties - the TypeScript properties of a `BootstrapScriptsProperty`
 *
 * @returns the result of the validation.
 */
function RosCluster2_BootstrapScriptsPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('scriptPath', ros.requiredValidator)(properties.scriptPath));
    errors.collect(ros.propertyValidator('scriptPath', ros.validateString)(properties.scriptPath));
    errors.collect(ros.propertyValidator('scriptArgs', ros.validateString)(properties.scriptArgs));
    if (properties.executionFailStrategy && (typeof properties.executionFailStrategy) !== 'object') {
        errors.collect(ros.propertyValidator('executionFailStrategy', ros.validateAllowedValues)({
            data: properties.executionFailStrategy,
            allowedValues: ["FAILED_CONTINUE", "FAILED_BLOCK"],
        }));
    }
    errors.collect(ros.propertyValidator('executionFailStrategy', ros.validateString)(properties.executionFailStrategy));
    if (properties.priority && (typeof properties.priority) !== 'object') {
        errors.collect(ros.propertyValidator('priority', ros.validateRange)({
            data: properties.priority,
            min: 1,
            max: 100,
        }));
    }
    errors.collect(ros.propertyValidator('priority', ros.validateNumber)(properties.priority));
    errors.collect(ros.propertyValidator('scriptName', ros.requiredValidator)(properties.scriptName));
    errors.collect(ros.propertyValidator('scriptName', ros.validateString)(properties.scriptName));
    if (properties.executionMoment && (typeof properties.executionMoment) !== 'object') {
        errors.collect(ros.propertyValidator('executionMoment', ros.validateAllowedValues)({
            data: properties.executionMoment,
            allowedValues: ["BEFORE_INSTALL", "AFTER_STARTED"],
        }));
    }
    errors.collect(ros.propertyValidator('executionMoment', ros.validateString)(properties.executionMoment));
    errors.collect(ros.propertyValidator('nodeSelector', ros.requiredValidator)(properties.nodeSelector));
    errors.collect(ros.propertyValidator('nodeSelector', RosCluster2_NodeSelectorPropertyValidator)(properties.nodeSelector));
    return errors.wrap('supplied properties not correct for "BootstrapScriptsProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::EMR::Cluster2.BootstrapScripts` resource
 *
 * @param properties - the TypeScript properties of a `BootstrapScriptsProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::EMR::Cluster2.BootstrapScripts` resource.
 */
// @ts-ignore TS6133
function rosCluster2BootstrapScriptsPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosCluster2_BootstrapScriptsPropertyValidator(properties).assertSuccess();
    return {
        'ScriptPath': ros.stringToRosTemplate(properties.scriptPath),
        'ScriptArgs': ros.stringToRosTemplate(properties.scriptArgs),
        'ExecutionFailStrategy': ros.stringToRosTemplate(properties.executionFailStrategy),
        'Priority': ros.numberToRosTemplate(properties.priority),
        'ScriptName': ros.stringToRosTemplate(properties.scriptName),
        'ExecutionMoment': ros.stringToRosTemplate(properties.executionMoment),
        'NodeSelector': rosCluster2NodeSelectorPropertyToRosTemplate(properties.nodeSelector),
    };
}
/**
 * Determine whether the given properties match those of a `CostOptimizedConfigProperty`
 *
 * @param properties - the TypeScript properties of a `CostOptimizedConfigProperty`
 *
 * @returns the result of the validation.
 */
function RosCluster2_CostOptimizedConfigPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('onDemandBaseCapacity', ros.requiredValidator)(properties.onDemandBaseCapacity));
    if (properties.onDemandBaseCapacity && (typeof properties.onDemandBaseCapacity) !== 'object') {
        errors.collect(ros.propertyValidator('onDemandBaseCapacity', ros.validateRange)({
            data: properties.onDemandBaseCapacity,
            min: 0,
            max: 1000,
        }));
    }
    errors.collect(ros.propertyValidator('onDemandBaseCapacity', ros.validateNumber)(properties.onDemandBaseCapacity));
    errors.collect(ros.propertyValidator('onDemandPercentageAboveBaseCapacity', ros.requiredValidator)(properties.onDemandPercentageAboveBaseCapacity));
    if (properties.onDemandPercentageAboveBaseCapacity && (typeof properties.onDemandPercentageAboveBaseCapacity) !== 'object') {
        errors.collect(ros.propertyValidator('onDemandPercentageAboveBaseCapacity', ros.validateRange)({
            data: properties.onDemandPercentageAboveBaseCapacity,
            min: 0,
            max: 100,
        }));
    }
    errors.collect(ros.propertyValidator('onDemandPercentageAboveBaseCapacity', ros.validateNumber)(properties.onDemandPercentageAboveBaseCapacity));
    errors.collect(ros.propertyValidator('spotInstancePools', ros.requiredValidator)(properties.spotInstancePools));
    if (properties.spotInstancePools && (typeof properties.spotInstancePools) !== 'object') {
        errors.collect(ros.propertyValidator('spotInstancePools', ros.validateRange)({
            data: properties.spotInstancePools,
            min: 0,
            max: 10,
        }));
    }
    errors.collect(ros.propertyValidator('spotInstancePools', ros.validateNumber)(properties.spotInstancePools));
    return errors.wrap('supplied properties not correct for "CostOptimizedConfigProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::EMR::Cluster2.CostOptimizedConfig` resource
 *
 * @param properties - the TypeScript properties of a `CostOptimizedConfigProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::EMR::Cluster2.CostOptimizedConfig` resource.
 */
// @ts-ignore TS6133
function rosCluster2CostOptimizedConfigPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosCluster2_CostOptimizedConfigPropertyValidator(properties).assertSuccess();
    return {
        'OnDemandBaseCapacity': ros.numberToRosTemplate(properties.onDemandBaseCapacity),
        'OnDemandPercentageAboveBaseCapacity': ros.numberToRosTemplate(properties.onDemandPercentageAboveBaseCapacity),
        'SpotInstancePools': ros.numberToRosTemplate(properties.spotInstancePools),
    };
}
/**
 * Determine whether the given properties match those of a `DataDisksProperty`
 *
 * @param properties - the TypeScript properties of a `DataDisksProperty`
 *
 * @returns the result of the validation.
 */
function RosCluster2_DataDisksPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('category', ros.requiredValidator)(properties.category));
    errors.collect(ros.propertyValidator('category', ros.validateString)(properties.category));
    errors.collect(ros.propertyValidator('performanceLevel', ros.validateString)(properties.performanceLevel));
    errors.collect(ros.propertyValidator('size', ros.requiredValidator)(properties.size));
    if (properties.size && (typeof properties.size) !== 'object') {
        errors.collect(ros.propertyValidator('size', ros.validateRange)({
            data: properties.size,
            min: 20,
            max: undefined,
        }));
    }
    errors.collect(ros.propertyValidator('size', ros.validateNumber)(properties.size));
    errors.collect(ros.propertyValidator('count', ros.validateNumber)(properties.count));
    return errors.wrap('supplied properties not correct for "DataDisksProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::EMR::Cluster2.DataDisks` resource
 *
 * @param properties - the TypeScript properties of a `DataDisksProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::EMR::Cluster2.DataDisks` resource.
 */
// @ts-ignore TS6133
function rosCluster2DataDisksPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosCluster2_DataDisksPropertyValidator(properties).assertSuccess();
    return {
        'Category': ros.stringToRosTemplate(properties.category),
        'PerformanceLevel': ros.stringToRosTemplate(properties.performanceLevel),
        'Size': ros.numberToRosTemplate(properties.size),
        'Count': ros.numberToRosTemplate(properties.count),
    };
}
/**
 * Determine whether the given properties match those of a `NodeAttributesProperty`
 *
 * @param properties - the TypeScript properties of a `NodeAttributesProperty`
 *
 * @returns the result of the validation.
 */
function RosCluster2_NodeAttributesPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('keyPairName', ros.validateString)(properties.keyPairName));
    errors.collect(ros.propertyValidator('vpcId', ros.requiredValidator)(properties.vpcId));
    errors.collect(ros.propertyValidator('vpcId', ros.validateString)(properties.vpcId));
    errors.collect(ros.propertyValidator('zoneId', ros.requiredValidator)(properties.zoneId));
    errors.collect(ros.propertyValidator('zoneId', ros.validateString)(properties.zoneId));
    errors.collect(ros.propertyValidator('masterRootPassword', ros.validateString)(properties.masterRootPassword));
    errors.collect(ros.propertyValidator('securityGroupId', ros.requiredValidator)(properties.securityGroupId));
    errors.collect(ros.propertyValidator('securityGroupId', ros.validateString)(properties.securityGroupId));
    errors.collect(ros.propertyValidator('ramRole', ros.validateString)(properties.ramRole));
    return errors.wrap('supplied properties not correct for "NodeAttributesProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::EMR::Cluster2.NodeAttributes` resource
 *
 * @param properties - the TypeScript properties of a `NodeAttributesProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::EMR::Cluster2.NodeAttributes` resource.
 */
// @ts-ignore TS6133
function rosCluster2NodeAttributesPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosCluster2_NodeAttributesPropertyValidator(properties).assertSuccess();
    return {
        'KeyPairName': ros.stringToRosTemplate(properties.keyPairName),
        'VpcId': ros.stringToRosTemplate(properties.vpcId),
        'ZoneId': ros.stringToRosTemplate(properties.zoneId),
        'MasterRootPassword': ros.stringToRosTemplate(properties.masterRootPassword),
        'SecurityGroupId': ros.stringToRosTemplate(properties.securityGroupId),
        'RamRole': ros.stringToRosTemplate(properties.ramRole),
    };
}
/**
 * Determine whether the given properties match those of a `NodeGroupsProperty`
 *
 * @param properties - the TypeScript properties of a `NodeGroupsProperty`
 *
 * @returns the result of the validation.
 */
function RosCluster2_NodeGroupsPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('withPublicIp', ros.validateBoolean)(properties.withPublicIp));
    errors.collect(ros.propertyValidator('spotInstanceRemedy', ros.validateBoolean)(properties.spotInstanceRemedy));
    if (properties.nodeCount && (typeof properties.nodeCount) !== 'object') {
        errors.collect(ros.propertyValidator('nodeCount', ros.validateRange)({
            data: properties.nodeCount,
            min: 1,
            max: 1000,
        }));
    }
    errors.collect(ros.propertyValidator('nodeCount', ros.validateNumber)(properties.nodeCount));
    errors.collect(ros.propertyValidator('nodeGroupName', ros.validateString)(properties.nodeGroupName));
    errors.collect(ros.propertyValidator('dataDisks', ros.listValidator(RosCluster2_DataDisksPropertyValidator))(properties.dataDisks));
    if (properties.vSwitchIds && (Array.isArray(properties.vSwitchIds) || (typeof properties.vSwitchIds) === 'string')) {
        errors.collect(ros.propertyValidator('vSwitchIds', ros.validateLength)({
            data: properties.vSwitchIds.length,
            min: 1,
            max: 20,
        }));
    }
    errors.collect(ros.propertyValidator('vSwitchIds', ros.listValidator(ros.validateString))(properties.vSwitchIds));
    if (properties.spotBidPrices && (Array.isArray(properties.spotBidPrices) || (typeof properties.spotBidPrices) === 'string')) {
        errors.collect(ros.propertyValidator('spotBidPrices', ros.validateLength)({
            data: properties.spotBidPrices.length,
            min: 1,
            max: 100,
        }));
    }
    errors.collect(ros.propertyValidator('spotBidPrices', ros.listValidator(RosCluster2_SpotBidPricesPropertyValidator))(properties.spotBidPrices));
    if (properties.nodeResizeStrategy && (typeof properties.nodeResizeStrategy) !== 'object') {
        errors.collect(ros.propertyValidator('nodeResizeStrategy', ros.validateAllowedValues)({
            data: properties.nodeResizeStrategy,
            allowedValues: ["COST_OPTIMIZED", "PRIORITY"],
        }));
    }
    errors.collect(ros.propertyValidator('nodeResizeStrategy', ros.validateString)(properties.nodeResizeStrategy));
    errors.collect(ros.propertyValidator('systemDisk', RosCluster2_SystemDiskPropertyValidator)(properties.systemDisk));
    errors.collect(ros.propertyValidator('nodeGroupType', ros.requiredValidator)(properties.nodeGroupType));
    errors.collect(ros.propertyValidator('nodeGroupType', ros.validateString)(properties.nodeGroupType));
    errors.collect(ros.propertyValidator('instanceTypes', ros.requiredValidator)(properties.instanceTypes));
    if (properties.instanceTypes && (Array.isArray(properties.instanceTypes) || (typeof properties.instanceTypes) === 'string')) {
        errors.collect(ros.propertyValidator('instanceTypes', ros.validateLength)({
            data: properties.instanceTypes.length,
            min: 1,
            max: 100,
        }));
    }
    errors.collect(ros.propertyValidator('instanceTypes', ros.listValidator(ros.validateString))(properties.instanceTypes));
    if (properties.additionalSecurityGroupIds && (Array.isArray(properties.additionalSecurityGroupIds) || (typeof properties.additionalSecurityGroupIds) === 'string')) {
        errors.collect(ros.propertyValidator('additionalSecurityGroupIds', ros.validateLength)({
            data: properties.additionalSecurityGroupIds.length,
            min: 0,
            max: 2,
        }));
    }
    errors.collect(ros.propertyValidator('additionalSecurityGroupIds', ros.listValidator(ros.validateString))(properties.additionalSecurityGroupIds));
    errors.collect(ros.propertyValidator('costOptimizedConfig', RosCluster2_CostOptimizedConfigPropertyValidator)(properties.costOptimizedConfig));
    errors.collect(ros.propertyValidator('gracefulShutdown', ros.validateBoolean)(properties.gracefulShutdown));
    if (properties.deploymentSetStrategy && (typeof properties.deploymentSetStrategy) !== 'object') {
        errors.collect(ros.propertyValidator('deploymentSetStrategy', ros.validateAllowedValues)({
            data: properties.deploymentSetStrategy,
            allowedValues: ["NONE", "CLUSTER", "NODE_GROUP"],
        }));
    }
    errors.collect(ros.propertyValidator('deploymentSetStrategy', ros.validateString)(properties.deploymentSetStrategy));
    if (properties.spotStrategy && (typeof properties.spotStrategy) !== 'object') {
        errors.collect(ros.propertyValidator('spotStrategy', ros.validateAllowedValues)({
            data: properties.spotStrategy,
            allowedValues: ["NoSpot", "SpotWithPriceLimit", "SpotAsPriceGo"],
        }));
    }
    errors.collect(ros.propertyValidator('spotStrategy', ros.validateString)(properties.spotStrategy));
    return errors.wrap('supplied properties not correct for "NodeGroupsProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::EMR::Cluster2.NodeGroups` resource
 *
 * @param properties - the TypeScript properties of a `NodeGroupsProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::EMR::Cluster2.NodeGroups` resource.
 */
// @ts-ignore TS6133
function rosCluster2NodeGroupsPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosCluster2_NodeGroupsPropertyValidator(properties).assertSuccess();
    return {
        'WithPublicIp': ros.booleanToRosTemplate(properties.withPublicIp),
        'SpotInstanceRemedy': ros.booleanToRosTemplate(properties.spotInstanceRemedy),
        'NodeCount': ros.numberToRosTemplate(properties.nodeCount),
        'NodeGroupName': ros.stringToRosTemplate(properties.nodeGroupName),
        'DataDisks': ros.listMapper(rosCluster2DataDisksPropertyToRosTemplate)(properties.dataDisks),
        'VSwitchIds': ros.listMapper(ros.stringToRosTemplate)(properties.vSwitchIds),
        'SpotBidPrices': ros.listMapper(rosCluster2SpotBidPricesPropertyToRosTemplate)(properties.spotBidPrices),
        'NodeResizeStrategy': ros.stringToRosTemplate(properties.nodeResizeStrategy),
        'SystemDisk': rosCluster2SystemDiskPropertyToRosTemplate(properties.systemDisk),
        'NodeGroupType': ros.stringToRosTemplate(properties.nodeGroupType),
        'InstanceTypes': ros.listMapper(ros.stringToRosTemplate)(properties.instanceTypes),
        'AdditionalSecurityGroupIds': ros.listMapper(ros.stringToRosTemplate)(properties.additionalSecurityGroupIds),
        'CostOptimizedConfig': rosCluster2CostOptimizedConfigPropertyToRosTemplate(properties.costOptimizedConfig),
        'GracefulShutdown': ros.booleanToRosTemplate(properties.gracefulShutdown),
        'DeploymentSetStrategy': ros.stringToRosTemplate(properties.deploymentSetStrategy),
        'SpotStrategy': ros.stringToRosTemplate(properties.spotStrategy),
    };
}
/**
 * Determine whether the given properties match those of a `NodeSelectorProperty`
 *
 * @param properties - the TypeScript properties of a `NodeSelectorProperty`
 *
 * @returns the result of the validation.
 */
function RosCluster2_NodeSelectorPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('nodeGroupTypes', ros.listValidator(ros.validateString))(properties.nodeGroupTypes));
    errors.collect(ros.propertyValidator('nodeGroupName', ros.validateString)(properties.nodeGroupName));
    errors.collect(ros.propertyValidator('nodeGroupId', ros.validateString)(properties.nodeGroupId));
    errors.collect(ros.propertyValidator('nodeSelectType', ros.requiredValidator)(properties.nodeSelectType));
    if (properties.nodeSelectType && (typeof properties.nodeSelectType) !== 'object') {
        errors.collect(ros.propertyValidator('nodeSelectType', ros.validateAllowedValues)({
            data: properties.nodeSelectType,
            allowedValues: ["CLUSTER", "NODE_GROUP", "NODE"],
        }));
    }
    errors.collect(ros.propertyValidator('nodeSelectType', ros.validateString)(properties.nodeSelectType));
    errors.collect(ros.propertyValidator('nodeNames', ros.listValidator(ros.validateString))(properties.nodeNames));
    return errors.wrap('supplied properties not correct for "NodeSelectorProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::EMR::Cluster2.NodeSelector` resource
 *
 * @param properties - the TypeScript properties of a `NodeSelectorProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::EMR::Cluster2.NodeSelector` resource.
 */
// @ts-ignore TS6133
function rosCluster2NodeSelectorPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosCluster2_NodeSelectorPropertyValidator(properties).assertSuccess();
    return {
        'NodeGroupTypes': ros.listMapper(ros.stringToRosTemplate)(properties.nodeGroupTypes),
        'NodeGroupName': ros.stringToRosTemplate(properties.nodeGroupName),
        'NodeGroupId': ros.stringToRosTemplate(properties.nodeGroupId),
        'NodeSelectType': ros.stringToRosTemplate(properties.nodeSelectType),
        'NodeNames': ros.listMapper(ros.stringToRosTemplate)(properties.nodeNames),
    };
}
/**
 * Determine whether the given properties match those of a `SpotBidPricesProperty`
 *
 * @param properties - the TypeScript properties of a `SpotBidPricesProperty`
 *
 * @returns the result of the validation.
 */
function RosCluster2_SpotBidPricesPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('bidPrice', ros.validateNumber)(properties.bidPrice));
    errors.collect(ros.propertyValidator('instanceType', ros.validateString)(properties.instanceType));
    return errors.wrap('supplied properties not correct for "SpotBidPricesProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::EMR::Cluster2.SpotBidPrices` resource
 *
 * @param properties - the TypeScript properties of a `SpotBidPricesProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::EMR::Cluster2.SpotBidPrices` resource.
 */
// @ts-ignore TS6133
function rosCluster2SpotBidPricesPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosCluster2_SpotBidPricesPropertyValidator(properties).assertSuccess();
    return {
        'BidPrice': ros.numberToRosTemplate(properties.bidPrice),
        'InstanceType': ros.stringToRosTemplate(properties.instanceType),
    };
}
/**
 * Determine whether the given properties match those of a `SubscriptionConfigProperty`
 *
 * @param properties - the TypeScript properties of a `SubscriptionConfigProperty`
 *
 * @returns the result of the validation.
 */
function RosCluster2_SubscriptionConfigPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    if (properties.autoRenewDurationUnit && (typeof properties.autoRenewDurationUnit) !== 'object') {
        errors.collect(ros.propertyValidator('autoRenewDurationUnit', ros.validateAllowedValues)({
            data: properties.autoRenewDurationUnit,
            allowedValues: ["Month"],
        }));
    }
    errors.collect(ros.propertyValidator('autoRenewDurationUnit', ros.validateString)(properties.autoRenewDurationUnit));
    errors.collect(ros.propertyValidator('autoRenew', ros.validateBoolean)(properties.autoRenew));
    if (properties.paymentDurationUnit && (typeof properties.paymentDurationUnit) !== 'object') {
        errors.collect(ros.propertyValidator('paymentDurationUnit', ros.validateAllowedValues)({
            data: properties.paymentDurationUnit,
            allowedValues: ["Month"],
        }));
    }
    errors.collect(ros.propertyValidator('paymentDurationUnit', ros.validateString)(properties.paymentDurationUnit));
    if (properties.paymentDuration && (typeof properties.paymentDuration) !== 'object') {
        errors.collect(ros.propertyValidator('paymentDuration', ros.validateAllowedValues)({
            data: properties.paymentDuration,
            allowedValues: [1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 24, 36, 48, 60],
        }));
    }
    errors.collect(ros.propertyValidator('paymentDuration', ros.validateNumber)(properties.paymentDuration));
    if (properties.autoRenewDuration && (typeof properties.autoRenewDuration) !== 'object') {
        errors.collect(ros.propertyValidator('autoRenewDuration', ros.validateAllowedValues)({
            data: properties.autoRenewDuration,
            allowedValues: [1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 24, 36, 48, 60],
        }));
    }
    errors.collect(ros.propertyValidator('autoRenewDuration', ros.validateNumber)(properties.autoRenewDuration));
    return errors.wrap('supplied properties not correct for "SubscriptionConfigProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::EMR::Cluster2.SubscriptionConfig` resource
 *
 * @param properties - the TypeScript properties of a `SubscriptionConfigProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::EMR::Cluster2.SubscriptionConfig` resource.
 */
// @ts-ignore TS6133
function rosCluster2SubscriptionConfigPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosCluster2_SubscriptionConfigPropertyValidator(properties).assertSuccess();
    return {
        'AutoRenewDurationUnit': ros.stringToRosTemplate(properties.autoRenewDurationUnit),
        'AutoRenew': ros.booleanToRosTemplate(properties.autoRenew),
        'PaymentDurationUnit': ros.stringToRosTemplate(properties.paymentDurationUnit),
        'PaymentDuration': ros.numberToRosTemplate(properties.paymentDuration),
        'AutoRenewDuration': ros.numberToRosTemplate(properties.autoRenewDuration),
    };
}
/**
 * Determine whether the given properties match those of a `SystemDiskProperty`
 *
 * @param properties - the TypeScript properties of a `SystemDiskProperty`
 *
 * @returns the result of the validation.
 */
function RosCluster2_SystemDiskPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('category', ros.requiredValidator)(properties.category));
    errors.collect(ros.propertyValidator('category', ros.validateString)(properties.category));
    errors.collect(ros.propertyValidator('performanceLevel', ros.validateString)(properties.performanceLevel));
    errors.collect(ros.propertyValidator('size', ros.requiredValidator)(properties.size));
    if (properties.size && (typeof properties.size) !== 'object') {
        errors.collect(ros.propertyValidator('size', ros.validateRange)({
            data: properties.size,
            min: 20,
            max: undefined,
        }));
    }
    errors.collect(ros.propertyValidator('size', ros.validateNumber)(properties.size));
    errors.collect(ros.propertyValidator('count', ros.validateNumber)(properties.count));
    return errors.wrap('supplied properties not correct for "SystemDiskProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::EMR::Cluster2.SystemDisk` resource
 *
 * @param properties - the TypeScript properties of a `SystemDiskProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::EMR::Cluster2.SystemDisk` resource.
 */
// @ts-ignore TS6133
function rosCluster2SystemDiskPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosCluster2_SystemDiskPropertyValidator(properties).assertSuccess();
    return {
        'Category': ros.stringToRosTemplate(properties.category),
        'PerformanceLevel': ros.stringToRosTemplate(properties.performanceLevel),
        'Size': ros.numberToRosTemplate(properties.size),
        'Count': ros.numberToRosTemplate(properties.count),
    };
}
/**
 * Determine whether the given properties match those of a `TagsProperty`
 *
 * @param properties - the TypeScript properties of a `TagsProperty`
 *
 * @returns the result of the validation.
 */
function RosCluster2_TagsPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('value', ros.validateString)(properties.value));
    errors.collect(ros.propertyValidator('key', ros.requiredValidator)(properties.key));
    errors.collect(ros.propertyValidator('key', ros.validateString)(properties.key));
    return errors.wrap('supplied properties not correct for "TagsProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::EMR::Cluster2.Tags` resource
 *
 * @param properties - the TypeScript properties of a `TagsProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::EMR::Cluster2.Tags` resource.
 */
// @ts-ignore TS6133
function rosCluster2TagsPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosCluster2_TagsPropertyValidator(properties).assertSuccess();
    return {
        'Value': ros.stringToRosTemplate(properties.value),
        'Key': ros.stringToRosTemplate(properties.key),
    };
}
/**
 * Determine whether the given properties match those of a `RosClusterServiceConfigsProps`
 *
 * @param properties - the TypeScript properties of a `RosClusterServiceConfigsProps`
 *
 * @returns the result of the validation.
 */
function RosClusterServiceConfigsPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('clusterId', ros.requiredValidator)(properties.clusterId));
    errors.collect(ros.propertyValidator('clusterId', ros.validateString)(properties.clusterId));
    errors.collect(ros.propertyValidator('serviceConfigs', ros.requiredValidator)(properties.serviceConfigs));
    errors.collect(ros.propertyValidator('serviceConfigs', ros.listValidator(RosClusterServiceConfigs_ServiceConfigsPropertyValidator))(properties.serviceConfigs));
    return errors.wrap('supplied properties not correct for "RosClusterServiceConfigsProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::EMR::ClusterServiceConfigs` resource
 *
 * @param properties - the TypeScript properties of a `RosClusterServiceConfigsProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::EMR::ClusterServiceConfigs` resource.
 */
// @ts-ignore TS6133
function rosClusterServiceConfigsPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosClusterServiceConfigsPropsValidator(properties).assertSuccess();
    }
    return {
        'ClusterId': ros.stringToRosTemplate(properties.clusterId),
        'ServiceConfigs': ros.listMapper(rosClusterServiceConfigsServiceConfigsPropertyToRosTemplate)(properties.serviceConfigs),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::EMR::ClusterServiceConfigs`, which is used to create or modify the configurations of a specified service in a cluster.
 * @Note This class does not contain additional functions, so it is recommended to use the `ClusterServiceConfigs` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-emr-clusterserviceconfigs
 */
class RosClusterServiceConfigs extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosClusterServiceConfigs.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrClusterId = this.getAtt('ClusterId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.clusterId = props.clusterId;
        this.serviceConfigs = props.serviceConfigs;
    }
    get rosProperties() {
        return {
            clusterId: this.clusterId,
            serviceConfigs: this.serviceConfigs,
        };
    }
    renderProperties(props) {
        return rosClusterServiceConfigsPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosClusterServiceConfigs = RosClusterServiceConfigs;
/**
 * The resource type name for this resource class.
 */
RosClusterServiceConfigs.ROS_RESOURCE_TYPE_NAME = "ALIYUN::EMR::ClusterServiceConfigs";
/**
 * Determine whether the given properties match those of a `ServiceConfigsProperty`
 *
 * @param properties - the TypeScript properties of a `ServiceConfigsProperty`
 *
 * @returns the result of the validation.
 */
function RosClusterServiceConfigs_ServiceConfigsPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('comment', ros.validateString)(properties.comment));
    errors.collect(ros.propertyValidator('gatewayClusterIdList', ros.listValidator(ros.validateString))(properties.gatewayClusterIdList));
    errors.collect(ros.propertyValidator('serviceName', ros.requiredValidator)(properties.serviceName));
    errors.collect(ros.propertyValidator('serviceName', ros.validateString)(properties.serviceName));
    errors.collect(ros.propertyValidator('customConfigParams', ros.validateString)(properties.customConfigParams));
    errors.collect(ros.propertyValidator('refreshHostConfig', ros.validateBoolean)(properties.refreshHostConfig));
    errors.collect(ros.propertyValidator('hostInstanceId', ros.validateString)(properties.hostInstanceId));
    errors.collect(ros.propertyValidator('configType', ros.validateString)(properties.configType));
    errors.collect(ros.propertyValidator('configParams', ros.requiredValidator)(properties.configParams));
    errors.collect(ros.propertyValidator('configParams', ros.validateString)(properties.configParams));
    errors.collect(ros.propertyValidator('groupId', ros.validateString)(properties.groupId));
    return errors.wrap('supplied properties not correct for "ServiceConfigsProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::EMR::ClusterServiceConfigs.ServiceConfigs` resource
 *
 * @param properties - the TypeScript properties of a `ServiceConfigsProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::EMR::ClusterServiceConfigs.ServiceConfigs` resource.
 */
// @ts-ignore TS6133
function rosClusterServiceConfigsServiceConfigsPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosClusterServiceConfigs_ServiceConfigsPropertyValidator(properties).assertSuccess();
    return {
        'Comment': ros.stringToRosTemplate(properties.comment),
        'GatewayClusterIdList': ros.listMapper(ros.stringToRosTemplate)(properties.gatewayClusterIdList),
        'ServiceName': ros.stringToRosTemplate(properties.serviceName),
        'CustomConfigParams': ros.stringToRosTemplate(properties.customConfigParams),
        'RefreshHostConfig': ros.booleanToRosTemplate(properties.refreshHostConfig),
        'HostInstanceId': ros.stringToRosTemplate(properties.hostInstanceId),
        'ConfigType': ros.stringToRosTemplate(properties.configType),
        'ConfigParams': ros.stringToRosTemplate(properties.configParams),
        'GroupId': ros.stringToRosTemplate(properties.groupId),
    };
}
/**
 * Determine whether the given properties match those of a `RosFlowProjectProps`
 *
 * @param properties - the TypeScript properties of a `RosFlowProjectProps`
 *
 * @returns the result of the validation.
 */
function RosFlowProjectPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('description', ros.requiredValidator)(properties.description));
    errors.collect(ros.propertyValidator('description', ros.validateString)(properties.description));
    errors.collect(ros.propertyValidator('flowProjectName', ros.requiredValidator)(properties.flowProjectName));
    errors.collect(ros.propertyValidator('flowProjectName', ros.validateString)(properties.flowProjectName));
    errors.collect(ros.propertyValidator('resourceGroupId', ros.validateString)(properties.resourceGroupId));
    return errors.wrap('supplied properties not correct for "RosFlowProjectProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::EMR::FlowProject` resource
 *
 * @param properties - the TypeScript properties of a `RosFlowProjectProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::EMR::FlowProject` resource.
 */
// @ts-ignore TS6133
function rosFlowProjectPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosFlowProjectPropsValidator(properties).assertSuccess();
    }
    return {
        'Description': ros.stringToRosTemplate(properties.description),
        'FlowProjectName': ros.stringToRosTemplate(properties.flowProjectName),
        'ResourceGroupId': ros.stringToRosTemplate(properties.resourceGroupId),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::EMR::FlowProject`, which is used to create a data development project.
 * @Note This class does not contain additional functions, so it is recommended to use the `FlowProject` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-emr-flowproject
 */
class RosFlowProject extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosFlowProject.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrCreateTime = this.getAtt('CreateTime');
        this.attrDescription = this.getAtt('Description');
        this.attrFlowProjectId = this.getAtt('FlowProjectId');
        this.attrFlowProjectName = this.getAtt('FlowProjectName');
        this.attrGmtModified = this.getAtt('GmtModified');
        this.attrUserId = this.getAtt('UserId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.description = props.description;
        this.flowProjectName = props.flowProjectName;
        this.resourceGroupId = props.resourceGroupId;
    }
    get rosProperties() {
        return {
            description: this.description,
            flowProjectName: this.flowProjectName,
            resourceGroupId: this.resourceGroupId,
        };
    }
    renderProperties(props) {
        return rosFlowProjectPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosFlowProject = RosFlowProject;
/**
 * The resource type name for this resource class.
 */
RosFlowProject.ROS_RESOURCE_TYPE_NAME = "ALIYUN::EMR::FlowProject";
//# sourceMappingURL=data:application/json;base64,