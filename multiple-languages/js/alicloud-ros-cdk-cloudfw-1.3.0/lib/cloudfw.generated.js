"use strict";
// Generated from the AliCloud ROS Resource Specification
Object.defineProperty(exports, "__esModule", { value: true });
exports.RosVpcFirewallControlPolicy = exports.RosNatFirewallControlPolicy = exports.RosInstance = exports.RosFwSwitch = exports.RosControlPolicy = exports.RosAllFwSwitch = exports.RosAddressBook = void 0;
const ros = require("@alicloud/ros-cdk-core");
/**
 * Determine whether the given properties match those of a `RosAddressBookProps`
 *
 * @param properties - the TypeScript properties of a `RosAddressBookProps`
 *
 * @returns the result of the validation.
 */
function RosAddressBookPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('groupName', ros.requiredValidator)(properties.groupName));
    errors.collect(ros.propertyValidator('groupName', ros.validateString)(properties.groupName));
    errors.collect(ros.propertyValidator('description', ros.requiredValidator)(properties.description));
    if (properties.description && (Array.isArray(properties.description) || (typeof properties.description) === 'string')) {
        errors.collect(ros.propertyValidator('description', ros.validateLength)({
            data: properties.description.length,
            min: 1,
            max: undefined,
        }));
    }
    errors.collect(ros.propertyValidator('description', ros.validateString)(properties.description));
    if (properties.tagRelation && (typeof properties.tagRelation) !== 'object') {
        errors.collect(ros.propertyValidator('tagRelation', ros.validateAllowedValues)({
            data: properties.tagRelation,
            allowedValues: ["and", "or"],
        }));
    }
    errors.collect(ros.propertyValidator('tagRelation', ros.validateString)(properties.tagRelation));
    errors.collect(ros.propertyValidator('groupType', ros.requiredValidator)(properties.groupType));
    if (properties.groupType && (typeof properties.groupType) !== 'object') {
        errors.collect(ros.propertyValidator('groupType', ros.validateAllowedValues)({
            data: properties.groupType,
            allowedValues: ["domain", "ip", "port", "tag"],
        }));
    }
    errors.collect(ros.propertyValidator('groupType', ros.validateString)(properties.groupType));
    if (properties.tagList && (Array.isArray(properties.tagList) || (typeof properties.tagList) === 'string')) {
        errors.collect(ros.propertyValidator('tagList', ros.validateLength)({
            data: properties.tagList.length,
            min: undefined,
            max: 100,
        }));
    }
    errors.collect(ros.propertyValidator('tagList', ros.listValidator(RosAddressBook_TagListPropertyValidator))(properties.tagList));
    if (properties.regionId && (typeof properties.regionId) !== 'object') {
        errors.collect(ros.propertyValidator('regionId', ros.validateAllowedValues)({
            data: properties.regionId,
            allowedValues: ["cn-hangzhou", "ap-southeast-1"],
        }));
    }
    errors.collect(ros.propertyValidator('regionId', ros.validateString)(properties.regionId));
    errors.collect(ros.propertyValidator('autoAddTagEcs', ros.validateBoolean)(properties.autoAddTagEcs));
    errors.collect(ros.propertyValidator('addressList', ros.validateString)(properties.addressList));
    return errors.wrap('supplied properties not correct for "RosAddressBookProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::CLOUDFW::AddressBook` resource
 *
 * @param properties - the TypeScript properties of a `RosAddressBookProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::CLOUDFW::AddressBook` resource.
 */
// @ts-ignore TS6133
function rosAddressBookPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosAddressBookPropsValidator(properties).assertSuccess();
    }
    return {
        'Description': ros.stringToRosTemplate(properties.description),
        'GroupName': ros.stringToRosTemplate(properties.groupName),
        'GroupType': ros.stringToRosTemplate(properties.groupType),
        'AddressList': ros.stringToRosTemplate(properties.addressList),
        'AutoAddTagEcs': ros.booleanToRosTemplate(properties.autoAddTagEcs),
        'RegionId': ros.stringToRosTemplate(properties.regionId),
        'TagList': ros.listMapper(rosAddressBookTagListPropertyToRosTemplate)(properties.tagList),
        'TagRelation': ros.stringToRosTemplate(properties.tagRelation),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::CLOUDFW::AddressBook`, which is used to create an address book that is used for access control. Address books include IP address books, Elastic Compute Service (ECS) tag-based address books, port address books, and domain address books.
 * @Note This class does not contain additional functions, so it is recommended to use the `AddressBook` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-cloudfw-addressbook
 */
class RosAddressBook extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosAddressBook.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrGroupUuid = this.getAtt('GroupUuid');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.description = props.description;
        this.groupName = props.groupName;
        this.groupType = props.groupType;
        this.addressList = props.addressList;
        this.autoAddTagEcs = props.autoAddTagEcs;
        this.regionId = props.regionId;
        this.tagList = props.tagList;
        this.tagRelation = props.tagRelation;
    }
    get rosProperties() {
        return {
            description: this.description,
            groupName: this.groupName,
            groupType: this.groupType,
            addressList: this.addressList,
            autoAddTagEcs: this.autoAddTagEcs,
            regionId: this.regionId,
            tagList: this.tagList,
            tagRelation: this.tagRelation,
        };
    }
    renderProperties(props) {
        return rosAddressBookPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosAddressBook = RosAddressBook;
/**
 * The resource type name for this resource class.
 */
RosAddressBook.ROS_RESOURCE_TYPE_NAME = "ALIYUN::CLOUDFW::AddressBook";
/**
 * Determine whether the given properties match those of a `TagListProperty`
 *
 * @param properties - the TypeScript properties of a `TagListProperty`
 *
 * @returns the result of the validation.
 */
function RosAddressBook_TagListPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('tagKey', ros.validateString)(properties.tagKey));
    errors.collect(ros.propertyValidator('tagValue', ros.validateString)(properties.tagValue));
    return errors.wrap('supplied properties not correct for "TagListProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::CLOUDFW::AddressBook.TagList` resource
 *
 * @param properties - the TypeScript properties of a `TagListProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::CLOUDFW::AddressBook.TagList` resource.
 */
// @ts-ignore TS6133
function rosAddressBookTagListPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosAddressBook_TagListPropertyValidator(properties).assertSuccess();
    return {
        'TagKey': ros.stringToRosTemplate(properties.tagKey),
        'TagValue': ros.stringToRosTemplate(properties.tagValue),
    };
}
/**
 * Determine whether the given properties match those of a `RosAllFwSwitchProps`
 *
 * @param properties - the TypeScript properties of a `RosAllFwSwitchProps`
 *
 * @returns the result of the validation.
 */
function RosAllFwSwitchPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('instanceId', ros.validateString)(properties.instanceId));
    return errors.wrap('supplied properties not correct for "RosAllFwSwitchProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::CLOUDFW::AllFwSwitch` resource
 *
 * @param properties - the TypeScript properties of a `RosAllFwSwitchProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::CLOUDFW::AllFwSwitch` resource.
 */
// @ts-ignore TS6133
function rosAllFwSwitchPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosAllFwSwitchPropsValidator(properties).assertSuccess();
    }
    return {
        'InstanceId': ros.stringToRosTemplate(properties.instanceId),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::CLOUDFW::AllFwSwitch`, which is used to enable all firewalls.
 * @Note This class does not contain additional functions, so it is recommended to use the `AllFwSwitch` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-cloudfw-allfwswitch
 */
class RosAllFwSwitch extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosAllFwSwitch.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.instanceId = props.instanceId;
    }
    get rosProperties() {
        return {
            instanceId: this.instanceId,
        };
    }
    renderProperties(props) {
        return rosAllFwSwitchPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosAllFwSwitch = RosAllFwSwitch;
/**
 * The resource type name for this resource class.
 */
RosAllFwSwitch.ROS_RESOURCE_TYPE_NAME = "ALIYUN::CLOUDFW::AllFwSwitch";
/**
 * Determine whether the given properties match those of a `RosControlPolicyProps`
 *
 * @param properties - the TypeScript properties of a `RosControlPolicyProps`
 *
 * @returns the result of the validation.
 */
function RosControlPolicyPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('destination', ros.requiredValidator)(properties.destination));
    if (properties.destination && (Array.isArray(properties.destination) || (typeof properties.destination) === 'string')) {
        errors.collect(ros.propertyValidator('destination', ros.validateLength)({
            data: properties.destination.length,
            min: 1,
            max: undefined,
        }));
    }
    errors.collect(ros.propertyValidator('destination', ros.validateString)(properties.destination));
    errors.collect(ros.propertyValidator('description', ros.requiredValidator)(properties.description));
    if (properties.description && (Array.isArray(properties.description) || (typeof properties.description) === 'string')) {
        errors.collect(ros.propertyValidator('description', ros.validateLength)({
            data: properties.description.length,
            min: 1,
            max: undefined,
        }));
    }
    errors.collect(ros.propertyValidator('description', ros.validateString)(properties.description));
    if (properties.applicationName && (typeof properties.applicationName) !== 'object') {
        errors.collect(ros.propertyValidator('applicationName', ros.validateAllowedValues)({
            data: properties.applicationName,
            allowedValues: ["ANY", "HTTP", "HTTPS", "MQTT", "Memcache", "MongoDB", "MySQL", "RDP", "Redis", "SMTP", "SMTPS", "SSH", "SSL", "VNC"],
        }));
    }
    errors.collect(ros.propertyValidator('applicationName', ros.validateString)(properties.applicationName));
    errors.collect(ros.propertyValidator('endTime', ros.validateNumber)(properties.endTime));
    if (properties.ipVersion && (typeof properties.ipVersion) !== 'object') {
        errors.collect(ros.propertyValidator('ipVersion', ros.validateAllowedValues)({
            data: properties.ipVersion,
            allowedValues: ["4", "6"],
        }));
    }
    errors.collect(ros.propertyValidator('ipVersion', ros.validateString)(properties.ipVersion));
    errors.collect(ros.propertyValidator('sourceType', ros.requiredValidator)(properties.sourceType));
    if (properties.sourceType && (typeof properties.sourceType) !== 'object') {
        errors.collect(ros.propertyValidator('sourceType', ros.validateAllowedValues)({
            data: properties.sourceType,
            allowedValues: ["group", "location", "net"],
        }));
    }
    errors.collect(ros.propertyValidator('sourceType', ros.validateString)(properties.sourceType));
    errors.collect(ros.propertyValidator('destPort', ros.validateString)(properties.destPort));
    if (properties.applicationNameList && (Array.isArray(properties.applicationNameList) || (typeof properties.applicationNameList) === 'string')) {
        errors.collect(ros.propertyValidator('applicationNameList', ros.validateLength)({
            data: properties.applicationNameList.length,
            min: 1,
            max: 5,
        }));
    }
    errors.collect(ros.propertyValidator('applicationNameList', ros.listValidator(ros.validateString))(properties.applicationNameList));
    errors.collect(ros.propertyValidator('startTime', ros.validateNumber)(properties.startTime));
    errors.collect(ros.propertyValidator('aclAction', ros.requiredValidator)(properties.aclAction));
    if (properties.aclAction && (typeof properties.aclAction) !== 'object') {
        errors.collect(ros.propertyValidator('aclAction', ros.validateAllowedValues)({
            data: properties.aclAction,
            allowedValues: ["accept", "drop", "log"],
        }));
    }
    errors.collect(ros.propertyValidator('aclAction', ros.validateString)(properties.aclAction));
    errors.collect(ros.propertyValidator('destinationType', ros.requiredValidator)(properties.destinationType));
    if (properties.destinationType && (typeof properties.destinationType) !== 'object') {
        errors.collect(ros.propertyValidator('destinationType', ros.validateAllowedValues)({
            data: properties.destinationType,
            allowedValues: ["domain", "group", "location", "net"],
        }));
    }
    errors.collect(ros.propertyValidator('destinationType', ros.validateString)(properties.destinationType));
    errors.collect(ros.propertyValidator('direction', ros.requiredValidator)(properties.direction));
    if (properties.direction && (typeof properties.direction) !== 'object') {
        errors.collect(ros.propertyValidator('direction', ros.validateAllowedValues)({
            data: properties.direction,
            allowedValues: ["in", "out"],
        }));
    }
    errors.collect(ros.propertyValidator('direction', ros.validateString)(properties.direction));
    errors.collect(ros.propertyValidator('source', ros.requiredValidator)(properties.source));
    if (properties.source && (Array.isArray(properties.source) || (typeof properties.source) === 'string')) {
        errors.collect(ros.propertyValidator('source', ros.validateLength)({
            data: properties.source.length,
            min: 1,
            max: undefined,
        }));
    }
    errors.collect(ros.propertyValidator('source', ros.validateString)(properties.source));
    if (properties.destPortType && (typeof properties.destPortType) !== 'object') {
        errors.collect(ros.propertyValidator('destPortType', ros.validateAllowedValues)({
            data: properties.destPortType,
            allowedValues: ["group", "port"],
        }));
    }
    errors.collect(ros.propertyValidator('destPortType', ros.validateString)(properties.destPortType));
    errors.collect(ros.propertyValidator('proto', ros.requiredValidator)(properties.proto));
    if (properties.proto && (typeof properties.proto) !== 'object') {
        errors.collect(ros.propertyValidator('proto', ros.validateAllowedValues)({
            data: properties.proto,
            allowedValues: ["ANY", "ICMP", "TCP", "UDP"],
        }));
    }
    errors.collect(ros.propertyValidator('proto', ros.validateString)(properties.proto));
    errors.collect(ros.propertyValidator('repeatEndTime', ros.validateString)(properties.repeatEndTime));
    if (properties.domainResolveType && (typeof properties.domainResolveType) !== 'object') {
        errors.collect(ros.propertyValidator('domainResolveType', ros.validateAllowedValues)({
            data: properties.domainResolveType,
            allowedValues: ["FQDN", "DNS", "FQDN_AND_DNS"],
        }));
    }
    errors.collect(ros.propertyValidator('domainResolveType', ros.validateString)(properties.domainResolveType));
    if (properties.repeatDays && (Array.isArray(properties.repeatDays) || (typeof properties.repeatDays) === 'string')) {
        errors.collect(ros.propertyValidator('repeatDays', ros.validateLength)({
            data: properties.repeatDays.length,
            min: 1,
            max: 31,
        }));
    }
    errors.collect(ros.propertyValidator('repeatDays', ros.listValidator(ros.validateNumber))(properties.repeatDays));
    if (properties.repeatType && (typeof properties.repeatType) !== 'object') {
        errors.collect(ros.propertyValidator('repeatType', ros.validateAllowedValues)({
            data: properties.repeatType,
            allowedValues: ["Permanent", "None", "Daily", "Weekly", "Monthly"],
        }));
    }
    errors.collect(ros.propertyValidator('repeatType', ros.validateString)(properties.repeatType));
    if (properties.regionId && (typeof properties.regionId) !== 'object') {
        errors.collect(ros.propertyValidator('regionId', ros.validateAllowedValues)({
            data: properties.regionId,
            allowedValues: ["cn-hangzhou", "ap-southeast-1"],
        }));
    }
    errors.collect(ros.propertyValidator('regionId', ros.validateString)(properties.regionId));
    errors.collect(ros.propertyValidator('repeatStartTime', ros.validateString)(properties.repeatStartTime));
    errors.collect(ros.propertyValidator('release', ros.validateBoolean)(properties.release));
    errors.collect(ros.propertyValidator('newOrder', ros.requiredValidator)(properties.newOrder));
    if (properties.newOrder && (typeof properties.newOrder) !== 'object') {
        errors.collect(ros.propertyValidator('newOrder', ros.validateRange)({
            data: properties.newOrder,
            min: -1,
            max: undefined,
        }));
    }
    errors.collect(ros.propertyValidator('newOrder', ros.validateNumber)(properties.newOrder));
    errors.collect(ros.propertyValidator('destPortGroup', ros.validateString)(properties.destPortGroup));
    return errors.wrap('supplied properties not correct for "RosControlPolicyProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::CLOUDFW::ControlPolicy` resource
 *
 * @param properties - the TypeScript properties of a `RosControlPolicyProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::CLOUDFW::ControlPolicy` resource.
 */
// @ts-ignore TS6133
function rosControlPolicyPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosControlPolicyPropsValidator(properties).assertSuccess();
    }
    return {
        'AclAction': ros.stringToRosTemplate(properties.aclAction),
        'Description': ros.stringToRosTemplate(properties.description),
        'Destination': ros.stringToRosTemplate(properties.destination),
        'DestinationType': ros.stringToRosTemplate(properties.destinationType),
        'Direction': ros.stringToRosTemplate(properties.direction),
        'NewOrder': ros.numberToRosTemplate(properties.newOrder),
        'Proto': ros.stringToRosTemplate(properties.proto),
        'Source': ros.stringToRosTemplate(properties.source),
        'SourceType': ros.stringToRosTemplate(properties.sourceType),
        'ApplicationName': ros.stringToRosTemplate(properties.applicationName),
        'ApplicationNameList': ros.listMapper(ros.stringToRosTemplate)(properties.applicationNameList),
        'DestPort': ros.stringToRosTemplate(properties.destPort),
        'DestPortGroup': ros.stringToRosTemplate(properties.destPortGroup),
        'DestPortType': ros.stringToRosTemplate(properties.destPortType),
        'DomainResolveType': ros.stringToRosTemplate(properties.domainResolveType),
        'EndTime': ros.numberToRosTemplate(properties.endTime),
        'IpVersion': ros.stringToRosTemplate(properties.ipVersion),
        'RegionId': ros.stringToRosTemplate(properties.regionId),
        'Release': ros.booleanToRosTemplate(properties.release),
        'RepeatDays': ros.listMapper(ros.numberToRosTemplate)(properties.repeatDays),
        'RepeatEndTime': ros.stringToRosTemplate(properties.repeatEndTime),
        'RepeatStartTime': ros.stringToRosTemplate(properties.repeatStartTime),
        'RepeatType': ros.stringToRosTemplate(properties.repeatType),
        'StartTime': ros.numberToRosTemplate(properties.startTime),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::CLOUDFW::ControlPolicy`, which is used to add an access control policy.
 * @Note This class does not contain additional functions, so it is recommended to use the `ControlPolicy` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-cloudfw-controlpolicy
 */
class RosControlPolicy extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosControlPolicy.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrAclUuid = this.getAtt('AclUuid');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.aclAction = props.aclAction;
        this.description = props.description;
        this.destination = props.destination;
        this.destinationType = props.destinationType;
        this.direction = props.direction;
        this.newOrder = props.newOrder;
        this.proto = props.proto;
        this.source = props.source;
        this.sourceType = props.sourceType;
        this.applicationName = props.applicationName;
        this.applicationNameList = props.applicationNameList;
        this.destPort = props.destPort;
        this.destPortGroup = props.destPortGroup;
        this.destPortType = props.destPortType;
        this.domainResolveType = props.domainResolveType;
        this.endTime = props.endTime;
        this.ipVersion = props.ipVersion;
        this.regionId = props.regionId;
        this.release = props.release;
        this.repeatDays = props.repeatDays;
        this.repeatEndTime = props.repeatEndTime;
        this.repeatStartTime = props.repeatStartTime;
        this.repeatType = props.repeatType;
        this.startTime = props.startTime;
    }
    get rosProperties() {
        return {
            aclAction: this.aclAction,
            description: this.description,
            destination: this.destination,
            destinationType: this.destinationType,
            direction: this.direction,
            newOrder: this.newOrder,
            proto: this.proto,
            source: this.source,
            sourceType: this.sourceType,
            applicationName: this.applicationName,
            applicationNameList: this.applicationNameList,
            destPort: this.destPort,
            destPortGroup: this.destPortGroup,
            destPortType: this.destPortType,
            domainResolveType: this.domainResolveType,
            endTime: this.endTime,
            ipVersion: this.ipVersion,
            regionId: this.regionId,
            release: this.release,
            repeatDays: this.repeatDays,
            repeatEndTime: this.repeatEndTime,
            repeatStartTime: this.repeatStartTime,
            repeatType: this.repeatType,
            startTime: this.startTime,
        };
    }
    renderProperties(props) {
        return rosControlPolicyPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosControlPolicy = RosControlPolicy;
/**
 * The resource type name for this resource class.
 */
RosControlPolicy.ROS_RESOURCE_TYPE_NAME = "ALIYUN::CLOUDFW::ControlPolicy";
/**
 * Determine whether the given properties match those of a `RosFwSwitchProps`
 *
 * @param properties - the TypeScript properties of a `RosFwSwitchProps`
 *
 * @returns the result of the validation.
 */
function RosFwSwitchPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    if (properties.ipaddrList && (Array.isArray(properties.ipaddrList) || (typeof properties.ipaddrList) === 'string')) {
        errors.collect(ros.propertyValidator('ipaddrList', ros.validateLength)({
            data: properties.ipaddrList.length,
            min: undefined,
            max: 200,
        }));
    }
    errors.collect(ros.propertyValidator('ipaddrList', ros.listValidator(ros.validateAny))(properties.ipaddrList));
    if (properties.resourceTypeList && (Array.isArray(properties.resourceTypeList) || (typeof properties.resourceTypeList) === 'string')) {
        errors.collect(ros.propertyValidator('resourceTypeList', ros.validateLength)({
            data: properties.resourceTypeList.length,
            min: undefined,
            max: 200,
        }));
    }
    errors.collect(ros.propertyValidator('resourceTypeList', ros.listValidator(ros.validateAny))(properties.resourceTypeList));
    if (properties.regionList && (Array.isArray(properties.regionList) || (typeof properties.regionList) === 'string')) {
        errors.collect(ros.propertyValidator('regionList', ros.validateLength)({
            data: properties.regionList.length,
            min: undefined,
            max: 200,
        }));
    }
    errors.collect(ros.propertyValidator('regionList', ros.listValidator(ros.validateAny))(properties.regionList));
    return errors.wrap('supplied properties not correct for "RosFwSwitchProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::CLOUDFW::FwSwitch` resource
 *
 * @param properties - the TypeScript properties of a `RosFwSwitchProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::CLOUDFW::FwSwitch` resource.
 */
// @ts-ignore TS6133
function rosFwSwitchPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosFwSwitchPropsValidator(properties).assertSuccess();
    }
    return {
        'IpaddrList': ros.listMapper(ros.objectToRosTemplate)(properties.ipaddrList),
        'RegionList': ros.listMapper(ros.objectToRosTemplate)(properties.regionList),
        'ResourceTypeList': ros.listMapper(ros.objectToRosTemplate)(properties.resourceTypeList),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::CLOUDFW::FwSwitch`, which is used to enable a firewall.
 * @Note This class does not contain additional functions, so it is recommended to use the `FwSwitch` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-cloudfw-fwswitch
 */
class RosFwSwitch extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosFwSwitch.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.ipaddrList = props.ipaddrList;
        this.regionList = props.regionList;
        this.resourceTypeList = props.resourceTypeList;
    }
    get rosProperties() {
        return {
            ipaddrList: this.ipaddrList,
            regionList: this.regionList,
            resourceTypeList: this.resourceTypeList,
        };
    }
    renderProperties(props) {
        return rosFwSwitchPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosFwSwitch = RosFwSwitch;
/**
 * The resource type name for this resource class.
 */
RosFwSwitch.ROS_RESOURCE_TYPE_NAME = "ALIYUN::CLOUDFW::FwSwitch";
/**
 * Determine whether the given properties match those of a `RosInstanceProps`
 *
 * @param properties - the TypeScript properties of a `RosInstanceProps`
 *
 * @returns the result of the validation.
 */
function RosInstancePropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('ignoreExisting', ros.validateBoolean)(properties.ignoreExisting));
    if (properties.vpcBandwidth && (typeof properties.vpcBandwidth) !== 'object') {
        errors.collect(ros.propertyValidator('vpcBandwidth', ros.validateRange)({
            data: properties.vpcBandwidth,
            min: 1000,
            max: 15000,
        }));
    }
    errors.collect(ros.propertyValidator('vpcBandwidth', ros.validateNumber)(properties.vpcBandwidth));
    if (properties.aclExtension && (typeof properties.aclExtension) !== 'object') {
        errors.collect(ros.propertyValidator('aclExtension', ros.validateRange)({
            data: properties.aclExtension,
            min: 0,
            max: 50000,
        }));
    }
    errors.collect(ros.propertyValidator('aclExtension', ros.validateNumber)(properties.aclExtension));
    if (properties.natFirewallNum && (typeof properties.natFirewallNum) !== 'object') {
        errors.collect(ros.propertyValidator('natFirewallNum', ros.validateRange)({
            data: properties.natFirewallNum,
            min: 0,
            max: 20,
        }));
    }
    errors.collect(ros.propertyValidator('natFirewallNum', ros.validateNumber)(properties.natFirewallNum));
    if (properties.natBandwidth && (typeof properties.natBandwidth) !== 'object') {
        errors.collect(ros.propertyValidator('natBandwidth', ros.validateRange)({
            data: properties.natBandwidth,
            min: 0,
            max: 1000,
        }));
    }
    errors.collect(ros.propertyValidator('natBandwidth', ros.validateNumber)(properties.natBandwidth));
    if (properties.ipNum && (typeof properties.ipNum) !== 'object') {
        errors.collect(ros.propertyValidator('ipNum', ros.validateRange)({
            data: properties.ipNum,
            min: 20,
            max: 4000,
        }));
    }
    errors.collect(ros.propertyValidator('ipNum', ros.validateNumber)(properties.ipNum));
    errors.collect(ros.propertyValidator('autoRenew', ros.validateBoolean)(properties.autoRenew));
    if (properties.period && (typeof properties.period) !== 'object') {
        errors.collect(ros.propertyValidator('period', ros.validateAllowedValues)({
            data: properties.period,
            allowedValues: [1, 2, 3, 6],
        }));
    }
    errors.collect(ros.propertyValidator('period', ros.validateNumber)(properties.period));
    errors.collect(ros.propertyValidator('payType', ros.requiredValidator)(properties.payType));
    if (properties.payType && (typeof properties.payType) !== 'object') {
        errors.collect(ros.propertyValidator('payType', ros.validateAllowedValues)({
            data: properties.payType,
            allowedValues: ["PayAsYouGo", "PostPaid", "PayOnDemand", "Postpaid", "PostPay", "Postpay", "POSTPAY", "POST", "Subscription", "PrePaid", "Prepaid", "PrePay", "Prepay", "PREPAY", "PRE"],
        }));
    }
    errors.collect(ros.propertyValidator('payType', ros.validateString)(properties.payType));
    errors.collect(ros.propertyValidator('autoPay', ros.validateBoolean)(properties.autoPay));
    if (properties.logStorage && (typeof properties.logStorage) !== 'object') {
        errors.collect(ros.propertyValidator('logStorage', ros.validateRange)({
            data: properties.logStorage,
            min: 1000,
            max: 500000,
        }));
    }
    errors.collect(ros.propertyValidator('logStorage', ros.validateNumber)(properties.logStorage));
    errors.collect(ros.propertyValidator('logAnalysis', ros.validateBoolean)(properties.logAnalysis));
    if (properties.vpcFirewallNum && (typeof properties.vpcFirewallNum) !== 'object') {
        errors.collect(ros.propertyValidator('vpcFirewallNum', ros.validateRange)({
            data: properties.vpcFirewallNum,
            min: 2,
            max: 500,
        }));
    }
    errors.collect(ros.propertyValidator('vpcFirewallNum', ros.validateNumber)(properties.vpcFirewallNum));
    errors.collect(ros.propertyValidator('accountNum', ros.validateNumber)(properties.accountNum));
    errors.collect(ros.propertyValidator('multiAccountManagement', ros.validateBoolean)(properties.multiAccountManagement));
    if (properties.bandwidth && (typeof properties.bandwidth) !== 'object') {
        errors.collect(ros.propertyValidator('bandwidth', ros.validateRange)({
            data: properties.bandwidth,
            min: 10,
            max: 15000,
        }));
    }
    errors.collect(ros.propertyValidator('bandwidth', ros.validateNumber)(properties.bandwidth));
    if (properties.spec && (typeof properties.spec) !== 'object') {
        errors.collect(ros.propertyValidator('spec', ros.validateAllowedValues)({
            data: properties.spec,
            allowedValues: ["PremiumVersion", "EnterpriseVersion", "UltimateVersion"],
        }));
    }
    errors.collect(ros.propertyValidator('spec', ros.validateString)(properties.spec));
    if (properties.periodUnit && (typeof properties.periodUnit) !== 'object') {
        errors.collect(ros.propertyValidator('periodUnit', ros.validateAllowedValues)({
            data: properties.periodUnit,
            allowedValues: ["Month", "Year"],
        }));
    }
    errors.collect(ros.propertyValidator('periodUnit', ros.validateString)(properties.periodUnit));
    return errors.wrap('supplied properties not correct for "RosInstanceProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::CLOUDFW::Instance` resource
 *
 * @param properties - the TypeScript properties of a `RosInstanceProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::CLOUDFW::Instance` resource.
 */
// @ts-ignore TS6133
function rosInstancePropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosInstancePropsValidator(properties).assertSuccess();
    }
    return {
        'PayType': ros.stringToRosTemplate(properties.payType),
        'AccountNum': ros.numberToRosTemplate(properties.accountNum),
        'AclExtension': ros.numberToRosTemplate(properties.aclExtension),
        'AutoPay': ros.booleanToRosTemplate(properties.autoPay),
        'AutoRenew': ros.booleanToRosTemplate(properties.autoRenew),
        'Bandwidth': ros.numberToRosTemplate(properties.bandwidth),
        'IgnoreExisting': ros.booleanToRosTemplate(properties.ignoreExisting),
        'IpNum': ros.numberToRosTemplate(properties.ipNum),
        'LogAnalysis': ros.booleanToRosTemplate(properties.logAnalysis),
        'LogStorage': ros.numberToRosTemplate(properties.logStorage),
        'MultiAccountManagement': ros.booleanToRosTemplate(properties.multiAccountManagement),
        'NatBandwidth': ros.numberToRosTemplate(properties.natBandwidth),
        'NatFirewallNum': ros.numberToRosTemplate(properties.natFirewallNum),
        'Period': ros.numberToRosTemplate(properties.period),
        'PeriodUnit': ros.stringToRosTemplate(properties.periodUnit),
        'Spec': ros.stringToRosTemplate(properties.spec),
        'VpcBandwidth': ros.numberToRosTemplate(properties.vpcBandwidth),
        'VpcFirewallNum': ros.numberToRosTemplate(properties.vpcFirewallNum),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::CLOUDFW::Instance`, which is used to create a Cloud Firewall instance.
 * @Note This class does not contain additional functions, so it is recommended to use the `Instance` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-cloudfw-instance
 */
class RosInstance extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosInstance.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrInstanceId = this.getAtt('InstanceId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.payType = props.payType;
        this.accountNum = props.accountNum;
        this.aclExtension = props.aclExtension;
        this.autoPay = props.autoPay;
        this.autoRenew = props.autoRenew;
        this.bandwidth = props.bandwidth;
        this.ignoreExisting = props.ignoreExisting;
        this.ipNum = props.ipNum;
        this.logAnalysis = props.logAnalysis;
        this.logStorage = props.logStorage;
        this.multiAccountManagement = props.multiAccountManagement;
        this.natBandwidth = props.natBandwidth;
        this.natFirewallNum = props.natFirewallNum;
        this.period = props.period;
        this.periodUnit = props.periodUnit;
        this.spec = props.spec;
        this.vpcBandwidth = props.vpcBandwidth;
        this.vpcFirewallNum = props.vpcFirewallNum;
    }
    get rosProperties() {
        return {
            payType: this.payType,
            accountNum: this.accountNum,
            aclExtension: this.aclExtension,
            autoPay: this.autoPay,
            autoRenew: this.autoRenew,
            bandwidth: this.bandwidth,
            ignoreExisting: this.ignoreExisting,
            ipNum: this.ipNum,
            logAnalysis: this.logAnalysis,
            logStorage: this.logStorage,
            multiAccountManagement: this.multiAccountManagement,
            natBandwidth: this.natBandwidth,
            natFirewallNum: this.natFirewallNum,
            period: this.period,
            periodUnit: this.periodUnit,
            spec: this.spec,
            vpcBandwidth: this.vpcBandwidth,
            vpcFirewallNum: this.vpcFirewallNum,
        };
    }
    renderProperties(props) {
        return rosInstancePropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosInstance = RosInstance;
/**
 * The resource type name for this resource class.
 */
RosInstance.ROS_RESOURCE_TYPE_NAME = "ALIYUN::CLOUDFW::Instance";
/**
 * Determine whether the given properties match those of a `RosNatFirewallControlPolicyProps`
 *
 * @param properties - the TypeScript properties of a `RosNatFirewallControlPolicyProps`
 *
 * @returns the result of the validation.
 */
function RosNatFirewallControlPolicyPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('destination', ros.requiredValidator)(properties.destination));
    errors.collect(ros.propertyValidator('destination', ros.validateString)(properties.destination));
    errors.collect(ros.propertyValidator('description', ros.requiredValidator)(properties.description));
    errors.collect(ros.propertyValidator('description', ros.validateString)(properties.description));
    errors.collect(ros.propertyValidator('endTime', ros.validateString)(properties.endTime));
    errors.collect(ros.propertyValidator('ipVersion', ros.validateNumber)(properties.ipVersion));
    errors.collect(ros.propertyValidator('sourceType', ros.requiredValidator)(properties.sourceType));
    if (properties.sourceType && (typeof properties.sourceType) !== 'object') {
        errors.collect(ros.propertyValidator('sourceType', ros.validateAllowedValues)({
            data: properties.sourceType,
            allowedValues: ["net", "group"],
        }));
    }
    errors.collect(ros.propertyValidator('sourceType', ros.validateString)(properties.sourceType));
    errors.collect(ros.propertyValidator('destPort', ros.validateNumber)(properties.destPort));
    errors.collect(ros.propertyValidator('applicationNameList', ros.requiredValidator)(properties.applicationNameList));
    if (properties.applicationNameList && (Array.isArray(properties.applicationNameList) || (typeof properties.applicationNameList) === 'string')) {
        errors.collect(ros.propertyValidator('applicationNameList', ros.validateLength)({
            data: properties.applicationNameList.length,
            min: 1,
            max: 5,
        }));
    }
    errors.collect(ros.propertyValidator('applicationNameList', ros.listValidator(ros.validateString))(properties.applicationNameList));
    errors.collect(ros.propertyValidator('startTime', ros.validateString)(properties.startTime));
    errors.collect(ros.propertyValidator('aclAction', ros.requiredValidator)(properties.aclAction));
    if (properties.aclAction && (typeof properties.aclAction) !== 'object') {
        errors.collect(ros.propertyValidator('aclAction', ros.validateAllowedValues)({
            data: properties.aclAction,
            allowedValues: ["accept", "drop", "log"],
        }));
    }
    errors.collect(ros.propertyValidator('aclAction', ros.validateString)(properties.aclAction));
    errors.collect(ros.propertyValidator('destinationType', ros.requiredValidator)(properties.destinationType));
    if (properties.destinationType && (typeof properties.destinationType) !== 'object') {
        errors.collect(ros.propertyValidator('destinationType', ros.validateAllowedValues)({
            data: properties.destinationType,
            allowedValues: ["net", "group", "domain"],
        }));
    }
    errors.collect(ros.propertyValidator('destinationType', ros.validateString)(properties.destinationType));
    errors.collect(ros.propertyValidator('direction', ros.requiredValidator)(properties.direction));
    if (properties.direction && (typeof properties.direction) !== 'object') {
        errors.collect(ros.propertyValidator('direction', ros.validateAllowedValues)({
            data: properties.direction,
            allowedValues: ["out"],
        }));
    }
    errors.collect(ros.propertyValidator('direction', ros.validateString)(properties.direction));
    errors.collect(ros.propertyValidator('source', ros.requiredValidator)(properties.source));
    errors.collect(ros.propertyValidator('source', ros.validateString)(properties.source));
    if (properties.destPortType && (typeof properties.destPortType) !== 'object') {
        errors.collect(ros.propertyValidator('destPortType', ros.validateAllowedValues)({
            data: properties.destPortType,
            allowedValues: ["net", "group"],
        }));
    }
    errors.collect(ros.propertyValidator('destPortType', ros.validateString)(properties.destPortType));
    errors.collect(ros.propertyValidator('proto', ros.requiredValidator)(properties.proto));
    if (properties.proto && (typeof properties.proto) !== 'object') {
        errors.collect(ros.propertyValidator('proto', ros.validateAllowedValues)({
            data: properties.proto,
            allowedValues: ["ANY", "TCP", "UDP", "ICMP"],
        }));
    }
    errors.collect(ros.propertyValidator('proto', ros.validateString)(properties.proto));
    errors.collect(ros.propertyValidator('repeatEndTime', ros.validateString)(properties.repeatEndTime));
    if (properties.domainResolveType && (typeof properties.domainResolveType) !== 'object') {
        errors.collect(ros.propertyValidator('domainResolveType', ros.validateAllowedValues)({
            data: properties.domainResolveType,
            allowedValues: [0, 1, 2],
        }));
    }
    errors.collect(ros.propertyValidator('domainResolveType', ros.validateNumber)(properties.domainResolveType));
    errors.collect(ros.propertyValidator('repeatDays', ros.listValidator(ros.validateAny))(properties.repeatDays));
    if (properties.repeatType && (typeof properties.repeatType) !== 'object') {
        errors.collect(ros.propertyValidator('repeatType', ros.validateAllowedValues)({
            data: properties.repeatType,
            allowedValues: ["Permanent", "None", "Daily", "Weekly", "Monthly"],
        }));
    }
    errors.collect(ros.propertyValidator('repeatType', ros.validateString)(properties.repeatType));
    errors.collect(ros.propertyValidator('repeatStartTime', ros.validateString)(properties.repeatStartTime));
    errors.collect(ros.propertyValidator('natGatewayId', ros.requiredValidator)(properties.natGatewayId));
    errors.collect(ros.propertyValidator('natGatewayId', ros.validateString)(properties.natGatewayId));
    errors.collect(ros.propertyValidator('release', ros.validateBoolean)(properties.release));
    errors.collect(ros.propertyValidator('newOrder', ros.requiredValidator)(properties.newOrder));
    errors.collect(ros.propertyValidator('newOrder', ros.validateNumber)(properties.newOrder));
    errors.collect(ros.propertyValidator('destPortGroup', ros.validateString)(properties.destPortGroup));
    return errors.wrap('supplied properties not correct for "RosNatFirewallControlPolicyProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::CLOUDFW::NatFirewallControlPolicy` resource
 *
 * @param properties - the TypeScript properties of a `RosNatFirewallControlPolicyProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::CLOUDFW::NatFirewallControlPolicy` resource.
 */
// @ts-ignore TS6133
function rosNatFirewallControlPolicyPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosNatFirewallControlPolicyPropsValidator(properties).assertSuccess();
    }
    return {
        'AclAction': ros.stringToRosTemplate(properties.aclAction),
        'ApplicationNameList': ros.listMapper(ros.stringToRosTemplate)(properties.applicationNameList),
        'Description': ros.stringToRosTemplate(properties.description),
        'Destination': ros.stringToRosTemplate(properties.destination),
        'DestinationType': ros.stringToRosTemplate(properties.destinationType),
        'Direction': ros.stringToRosTemplate(properties.direction),
        'NatGatewayId': ros.stringToRosTemplate(properties.natGatewayId),
        'NewOrder': ros.numberToRosTemplate(properties.newOrder),
        'Proto': ros.stringToRosTemplate(properties.proto),
        'Source': ros.stringToRosTemplate(properties.source),
        'SourceType': ros.stringToRosTemplate(properties.sourceType),
        'DestPort': ros.numberToRosTemplate(properties.destPort),
        'DestPortGroup': ros.stringToRosTemplate(properties.destPortGroup),
        'DestPortType': ros.stringToRosTemplate(properties.destPortType),
        'DomainResolveType': ros.numberToRosTemplate(properties.domainResolveType),
        'EndTime': ros.stringToRosTemplate(properties.endTime),
        'IpVersion': ros.numberToRosTemplate(properties.ipVersion),
        'Release': ros.booleanToRosTemplate(properties.release),
        'RepeatDays': ros.listMapper(ros.objectToRosTemplate)(properties.repeatDays),
        'RepeatEndTime': ros.stringToRosTemplate(properties.repeatEndTime),
        'RepeatStartTime': ros.stringToRosTemplate(properties.repeatStartTime),
        'RepeatType': ros.stringToRosTemplate(properties.repeatType),
        'StartTime': ros.stringToRosTemplate(properties.startTime),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::CLOUDFW::NatFirewallControlPolicy`.
 * @Note This class does not contain additional functions, so it is recommended to use the `NatFirewallControlPolicy` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-cloudfw-natfirewallcontrolpolicy
 */
class RosNatFirewallControlPolicy extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosNatFirewallControlPolicy.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrAclUuid = this.getAtt('AclUuid');
        this.attrDirection = this.getAtt('Direction');
        this.attrNatGatewayId = this.getAtt('NatGatewayId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.aclAction = props.aclAction;
        this.applicationNameList = props.applicationNameList;
        this.description = props.description;
        this.destination = props.destination;
        this.destinationType = props.destinationType;
        this.direction = props.direction;
        this.natGatewayId = props.natGatewayId;
        this.newOrder = props.newOrder;
        this.proto = props.proto;
        this.source = props.source;
        this.sourceType = props.sourceType;
        this.destPort = props.destPort;
        this.destPortGroup = props.destPortGroup;
        this.destPortType = props.destPortType;
        this.domainResolveType = props.domainResolveType;
        this.endTime = props.endTime;
        this.ipVersion = props.ipVersion;
        this.release = props.release;
        this.repeatDays = props.repeatDays;
        this.repeatEndTime = props.repeatEndTime;
        this.repeatStartTime = props.repeatStartTime;
        this.repeatType = props.repeatType;
        this.startTime = props.startTime;
    }
    get rosProperties() {
        return {
            aclAction: this.aclAction,
            applicationNameList: this.applicationNameList,
            description: this.description,
            destination: this.destination,
            destinationType: this.destinationType,
            direction: this.direction,
            natGatewayId: this.natGatewayId,
            newOrder: this.newOrder,
            proto: this.proto,
            source: this.source,
            sourceType: this.sourceType,
            destPort: this.destPort,
            destPortGroup: this.destPortGroup,
            destPortType: this.destPortType,
            domainResolveType: this.domainResolveType,
            endTime: this.endTime,
            ipVersion: this.ipVersion,
            release: this.release,
            repeatDays: this.repeatDays,
            repeatEndTime: this.repeatEndTime,
            repeatStartTime: this.repeatStartTime,
            repeatType: this.repeatType,
            startTime: this.startTime,
        };
    }
    renderProperties(props) {
        return rosNatFirewallControlPolicyPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosNatFirewallControlPolicy = RosNatFirewallControlPolicy;
/**
 * The resource type name for this resource class.
 */
RosNatFirewallControlPolicy.ROS_RESOURCE_TYPE_NAME = "ALIYUN::CLOUDFW::NatFirewallControlPolicy";
/**
 * Determine whether the given properties match those of a `RosVpcFirewallControlPolicyProps`
 *
 * @param properties - the TypeScript properties of a `RosVpcFirewallControlPolicyProps`
 *
 * @returns the result of the validation.
 */
function RosVpcFirewallControlPolicyPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('destination', ros.requiredValidator)(properties.destination));
    errors.collect(ros.propertyValidator('destination', ros.validateString)(properties.destination));
    errors.collect(ros.propertyValidator('description', ros.requiredValidator)(properties.description));
    errors.collect(ros.propertyValidator('description', ros.validateString)(properties.description));
    if (properties.applicationName && (typeof properties.applicationName) !== 'object') {
        errors.collect(ros.propertyValidator('applicationName', ros.validateAllowedValues)({
            data: properties.applicationName,
            allowedValues: ["ANY", "FTP", "HTTP", "HTTPS", "MySQL", "SMTP", "SMTPS", "RDP", "VNC", "SSH", "Redis", "MQTT", "MongoDB", "Memcache", "SSL"],
        }));
    }
    errors.collect(ros.propertyValidator('applicationName', ros.validateString)(properties.applicationName));
    errors.collect(ros.propertyValidator('endTime', ros.validateNumber)(properties.endTime));
    errors.collect(ros.propertyValidator('memberUid', ros.validateString)(properties.memberUid));
    errors.collect(ros.propertyValidator('sourceType', ros.requiredValidator)(properties.sourceType));
    if (properties.sourceType && (typeof properties.sourceType) !== 'object') {
        errors.collect(ros.propertyValidator('sourceType', ros.validateAllowedValues)({
            data: properties.sourceType,
            allowedValues: ["group", "net"],
        }));
    }
    errors.collect(ros.propertyValidator('sourceType', ros.validateString)(properties.sourceType));
    errors.collect(ros.propertyValidator('destPort', ros.validateString)(properties.destPort));
    if (properties.applicationNameList && (Array.isArray(properties.applicationNameList) || (typeof properties.applicationNameList) === 'string')) {
        errors.collect(ros.propertyValidator('applicationNameList', ros.validateLength)({
            data: properties.applicationNameList.length,
            min: 1,
            max: 5,
        }));
    }
    errors.collect(ros.propertyValidator('applicationNameList', ros.listValidator(ros.validateString))(properties.applicationNameList));
    errors.collect(ros.propertyValidator('startTime', ros.validateNumber)(properties.startTime));
    errors.collect(ros.propertyValidator('aclAction', ros.requiredValidator)(properties.aclAction));
    if (properties.aclAction && (typeof properties.aclAction) !== 'object') {
        errors.collect(ros.propertyValidator('aclAction', ros.validateAllowedValues)({
            data: properties.aclAction,
            allowedValues: ["accept", "drop", "log"],
        }));
    }
    errors.collect(ros.propertyValidator('aclAction', ros.validateString)(properties.aclAction));
    if (properties.lang && (typeof properties.lang) !== 'object') {
        errors.collect(ros.propertyValidator('lang', ros.validateAllowedValues)({
            data: properties.lang,
            allowedValues: ["en", "zh"],
        }));
    }
    errors.collect(ros.propertyValidator('lang', ros.validateString)(properties.lang));
    errors.collect(ros.propertyValidator('destinationType', ros.requiredValidator)(properties.destinationType));
    if (properties.destinationType && (typeof properties.destinationType) !== 'object') {
        errors.collect(ros.propertyValidator('destinationType', ros.validateAllowedValues)({
            data: properties.destinationType,
            allowedValues: ["domain", "group", "net"],
        }));
    }
    errors.collect(ros.propertyValidator('destinationType', ros.validateString)(properties.destinationType));
    errors.collect(ros.propertyValidator('vpcFirewallId', ros.requiredValidator)(properties.vpcFirewallId));
    errors.collect(ros.propertyValidator('vpcFirewallId', ros.validateString)(properties.vpcFirewallId));
    errors.collect(ros.propertyValidator('source', ros.requiredValidator)(properties.source));
    errors.collect(ros.propertyValidator('source', ros.validateString)(properties.source));
    if (properties.destPortType && (typeof properties.destPortType) !== 'object') {
        errors.collect(ros.propertyValidator('destPortType', ros.validateAllowedValues)({
            data: properties.destPortType,
            allowedValues: ["group", "port"],
        }));
    }
    errors.collect(ros.propertyValidator('destPortType', ros.validateString)(properties.destPortType));
    errors.collect(ros.propertyValidator('proto', ros.requiredValidator)(properties.proto));
    if (properties.proto && (typeof properties.proto) !== 'object') {
        errors.collect(ros.propertyValidator('proto', ros.validateAllowedValues)({
            data: properties.proto,
            allowedValues: ["ANY", "TCP", "UDP", "ICMP"],
        }));
    }
    errors.collect(ros.propertyValidator('proto', ros.validateString)(properties.proto));
    errors.collect(ros.propertyValidator('repeatEndTime', ros.validateString)(properties.repeatEndTime));
    if (properties.repeatDays && (Array.isArray(properties.repeatDays) || (typeof properties.repeatDays) === 'string')) {
        errors.collect(ros.propertyValidator('repeatDays', ros.validateLength)({
            data: properties.repeatDays.length,
            min: 1,
            max: 31,
        }));
    }
    errors.collect(ros.propertyValidator('repeatDays', ros.listValidator(ros.validateNumber))(properties.repeatDays));
    if (properties.repeatType && (typeof properties.repeatType) !== 'object') {
        errors.collect(ros.propertyValidator('repeatType', ros.validateAllowedValues)({
            data: properties.repeatType,
            allowedValues: ["Permanent", "None", "Daily", "Weekly", "Monthly"],
        }));
    }
    errors.collect(ros.propertyValidator('repeatType', ros.validateString)(properties.repeatType));
    if (properties.regionId && (typeof properties.regionId) !== 'object') {
        errors.collect(ros.propertyValidator('regionId', ros.validateAllowedValues)({
            data: properties.regionId,
            allowedValues: ["cn-hangzhou", "ap-southeast-1"],
        }));
    }
    errors.collect(ros.propertyValidator('regionId', ros.validateString)(properties.regionId));
    errors.collect(ros.propertyValidator('repeatStartTime', ros.validateString)(properties.repeatStartTime));
    errors.collect(ros.propertyValidator('release', ros.validateBoolean)(properties.release));
    errors.collect(ros.propertyValidator('newOrder', ros.requiredValidator)(properties.newOrder));
    errors.collect(ros.propertyValidator('newOrder', ros.validateString)(properties.newOrder));
    errors.collect(ros.propertyValidator('destPortGroup', ros.validateString)(properties.destPortGroup));
    return errors.wrap('supplied properties not correct for "RosVpcFirewallControlPolicyProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::CLOUDFW::VpcFirewallControlPolicy` resource
 *
 * @param properties - the TypeScript properties of a `RosVpcFirewallControlPolicyProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::CLOUDFW::VpcFirewallControlPolicy` resource.
 */
// @ts-ignore TS6133
function rosVpcFirewallControlPolicyPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosVpcFirewallControlPolicyPropsValidator(properties).assertSuccess();
    }
    return {
        'AclAction': ros.stringToRosTemplate(properties.aclAction),
        'Description': ros.stringToRosTemplate(properties.description),
        'Destination': ros.stringToRosTemplate(properties.destination),
        'DestinationType': ros.stringToRosTemplate(properties.destinationType),
        'NewOrder': ros.stringToRosTemplate(properties.newOrder),
        'Proto': ros.stringToRosTemplate(properties.proto),
        'Source': ros.stringToRosTemplate(properties.source),
        'SourceType': ros.stringToRosTemplate(properties.sourceType),
        'VpcFirewallId': ros.stringToRosTemplate(properties.vpcFirewallId),
        'ApplicationName': ros.stringToRosTemplate(properties.applicationName),
        'ApplicationNameList': ros.listMapper(ros.stringToRosTemplate)(properties.applicationNameList),
        'DestPort': ros.stringToRosTemplate(properties.destPort),
        'DestPortGroup': ros.stringToRosTemplate(properties.destPortGroup),
        'DestPortType': ros.stringToRosTemplate(properties.destPortType),
        'EndTime': ros.numberToRosTemplate(properties.endTime),
        'Lang': ros.stringToRosTemplate(properties.lang),
        'MemberUid': ros.stringToRosTemplate(properties.memberUid),
        'RegionId': ros.stringToRosTemplate(properties.regionId),
        'Release': ros.booleanToRosTemplate(properties.release),
        'RepeatDays': ros.listMapper(ros.numberToRosTemplate)(properties.repeatDays),
        'RepeatEndTime': ros.stringToRosTemplate(properties.repeatEndTime),
        'RepeatStartTime': ros.stringToRosTemplate(properties.repeatStartTime),
        'RepeatType': ros.stringToRosTemplate(properties.repeatType),
        'StartTime': ros.numberToRosTemplate(properties.startTime),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::CLOUDFW::VpcFirewallControlPolicy`, which is used to add an access control policy to a policy group of a virtual private cloud (VPC) firewall.
 * @Note This class does not contain additional functions, so it is recommended to use the `VpcFirewallControlPolicy` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-cloudfw-vpcfirewallcontrolpolicy
 */
class RosVpcFirewallControlPolicy extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosVpcFirewallControlPolicy.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrAclUuid = this.getAtt('AclUuid');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.aclAction = props.aclAction;
        this.description = props.description;
        this.destination = props.destination;
        this.destinationType = props.destinationType;
        this.newOrder = props.newOrder;
        this.proto = props.proto;
        this.source = props.source;
        this.sourceType = props.sourceType;
        this.vpcFirewallId = props.vpcFirewallId;
        this.applicationName = props.applicationName;
        this.applicationNameList = props.applicationNameList;
        this.destPort = props.destPort;
        this.destPortGroup = props.destPortGroup;
        this.destPortType = props.destPortType;
        this.endTime = props.endTime;
        this.lang = props.lang;
        this.memberUid = props.memberUid;
        this.regionId = props.regionId;
        this.release = props.release;
        this.repeatDays = props.repeatDays;
        this.repeatEndTime = props.repeatEndTime;
        this.repeatStartTime = props.repeatStartTime;
        this.repeatType = props.repeatType;
        this.startTime = props.startTime;
    }
    get rosProperties() {
        return {
            aclAction: this.aclAction,
            description: this.description,
            destination: this.destination,
            destinationType: this.destinationType,
            newOrder: this.newOrder,
            proto: this.proto,
            source: this.source,
            sourceType: this.sourceType,
            vpcFirewallId: this.vpcFirewallId,
            applicationName: this.applicationName,
            applicationNameList: this.applicationNameList,
            destPort: this.destPort,
            destPortGroup: this.destPortGroup,
            destPortType: this.destPortType,
            endTime: this.endTime,
            lang: this.lang,
            memberUid: this.memberUid,
            regionId: this.regionId,
            release: this.release,
            repeatDays: this.repeatDays,
            repeatEndTime: this.repeatEndTime,
            repeatStartTime: this.repeatStartTime,
            repeatType: this.repeatType,
            startTime: this.startTime,
        };
    }
    renderProperties(props) {
        return rosVpcFirewallControlPolicyPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosVpcFirewallControlPolicy = RosVpcFirewallControlPolicy;
/**
 * The resource type name for this resource class.
 */
RosVpcFirewallControlPolicy.ROS_RESOURCE_TYPE_NAME = "ALIYUN::CLOUDFW::VpcFirewallControlPolicy";
//# sourceMappingURL=data:application/json;base64,