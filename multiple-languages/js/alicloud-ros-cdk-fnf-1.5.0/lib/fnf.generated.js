"use strict";
// Generated from the AliCloud ROS Resource Specification
Object.defineProperty(exports, "__esModule", { value: true });
exports.RosSchedule = exports.RosFlow = void 0;
const ros = require("@alicloud/ros-cdk-core");
/**
 * Determine whether the given properties match those of a `RosFlowProps`
 *
 * @param properties - the TypeScript properties of a `RosFlowProps`
 *
 * @returns the result of the validation.
 */
function RosFlowPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('description', ros.validateString)(properties.description));
    errors.collect(ros.propertyValidator('requestId', ros.validateString)(properties.requestId));
    errors.collect(ros.propertyValidator('definition', ros.requiredValidator)(properties.definition));
    errors.collect(ros.propertyValidator('definition', ros.validateString)(properties.definition));
    if (properties.executionMode && (typeof properties.executionMode) !== 'object') {
        errors.collect(ros.propertyValidator('executionMode', ros.validateAllowedValues)({
            data: properties.executionMode,
            allowedValues: ["Express", "Standard"],
        }));
    }
    errors.collect(ros.propertyValidator('executionMode', ros.validateString)(properties.executionMode));
    errors.collect(ros.propertyValidator('externalStorageLocation', ros.validateString)(properties.externalStorageLocation));
    errors.collect(ros.propertyValidator('roleArn', ros.validateString)(properties.roleArn));
    errors.collect(ros.propertyValidator('name', ros.requiredValidator)(properties.name));
    errors.collect(ros.propertyValidator('name', ros.validateString)(properties.name));
    return errors.wrap('supplied properties not correct for "RosFlowProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::FNF::Flow` resource
 *
 * @param properties - the TypeScript properties of a `RosFlowProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::FNF::Flow` resource.
 */
// @ts-ignore TS6133
function rosFlowPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosFlowPropsValidator(properties).assertSuccess();
    }
    return {
        'Definition': ros.stringToRosTemplate(properties.definition),
        'Name': ros.stringToRosTemplate(properties.name),
        'Description': ros.stringToRosTemplate(properties.description),
        'ExecutionMode': ros.stringToRosTemplate(properties.executionMode),
        'ExternalStorageLocation': ros.stringToRosTemplate(properties.externalStorageLocation),
        'RequestId': ros.stringToRosTemplate(properties.requestId),
        'RoleArn': ros.stringToRosTemplate(properties.roleArn),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::FNF::Flow`, which is used to create a flow.
 * @Note This class does not contain additional functions, so it is recommended to use the `Flow` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-fnf-flow
 */
class RosFlow extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosFlow.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrCreatedTime = this.getAtt('CreatedTime');
        this.attrId = this.getAtt('Id');
        this.attrLastModifiedTime = this.getAtt('LastModifiedTime');
        this.attrName = this.getAtt('Name');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.definition = props.definition;
        this.name = props.name;
        this.description = props.description;
        this.executionMode = props.executionMode;
        this.externalStorageLocation = props.externalStorageLocation;
        this.requestId = props.requestId;
        this.roleArn = props.roleArn;
    }
    get rosProperties() {
        return {
            definition: this.definition,
            name: this.name,
            description: this.description,
            executionMode: this.executionMode,
            externalStorageLocation: this.externalStorageLocation,
            requestId: this.requestId,
            roleArn: this.roleArn,
        };
    }
    renderProperties(props) {
        return rosFlowPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosFlow = RosFlow;
/**
 * The resource type name for this resource class.
 */
RosFlow.ROS_RESOURCE_TYPE_NAME = "ALIYUN::FNF::Flow";
/**
 * Determine whether the given properties match those of a `RosScheduleProps`
 *
 * @param properties - the TypeScript properties of a `RosScheduleProps`
 *
 * @returns the result of the validation.
 */
function RosSchedulePropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('description', ros.validateString)(properties.description));
    errors.collect(ros.propertyValidator('flowName', ros.requiredValidator)(properties.flowName));
    errors.collect(ros.propertyValidator('flowName', ros.validateString)(properties.flowName));
    errors.collect(ros.propertyValidator('enable', ros.validateBoolean)(properties.enable));
    errors.collect(ros.propertyValidator('payload', ros.validateString)(properties.payload));
    errors.collect(ros.propertyValidator('cronExpression', ros.requiredValidator)(properties.cronExpression));
    errors.collect(ros.propertyValidator('cronExpression', ros.validateString)(properties.cronExpression));
    errors.collect(ros.propertyValidator('scheduleName', ros.requiredValidator)(properties.scheduleName));
    errors.collect(ros.propertyValidator('scheduleName', ros.validateString)(properties.scheduleName));
    return errors.wrap('supplied properties not correct for "RosScheduleProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::FNF::Schedule` resource
 *
 * @param properties - the TypeScript properties of a `RosScheduleProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::FNF::Schedule` resource.
 */
// @ts-ignore TS6133
function rosSchedulePropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosSchedulePropsValidator(properties).assertSuccess();
    }
    return {
        'CronExpression': ros.stringToRosTemplate(properties.cronExpression),
        'FlowName': ros.stringToRosTemplate(properties.flowName),
        'ScheduleName': ros.stringToRosTemplate(properties.scheduleName),
        'Description': ros.stringToRosTemplate(properties.description),
        'Enable': ros.booleanToRosTemplate(properties.enable),
        'Payload': ros.stringToRosTemplate(properties.payload),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::FNF::Schedule`, which is used to create a time-based schedule.
 * @Note This class does not contain additional functions, so it is recommended to use the `Schedule` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-fnf-schedule
 */
class RosSchedule extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosSchedule.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrFlowName = this.getAtt('FlowName');
        this.attrScheduleId = this.getAtt('ScheduleId');
        this.attrScheduleName = this.getAtt('ScheduleName');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.cronExpression = props.cronExpression;
        this.flowName = props.flowName;
        this.scheduleName = props.scheduleName;
        this.description = props.description;
        this.enable = props.enable;
        this.payload = props.payload;
    }
    get rosProperties() {
        return {
            cronExpression: this.cronExpression,
            flowName: this.flowName,
            scheduleName: this.scheduleName,
            description: this.description,
            enable: this.enable,
            payload: this.payload,
        };
    }
    renderProperties(props) {
        return rosSchedulePropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosSchedule = RosSchedule;
/**
 * The resource type name for this resource class.
 */
RosSchedule.ROS_RESOURCE_TYPE_NAME = "ALIYUN::FNF::Schedule";
//# sourceMappingURL=data:application/json;base64,