"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TrafficMirrorSessionSourcesAddition = exports.TrafficMirrorSessionSourcesAdditionProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const vpc_generated_1 = require("./vpc.generated");
Object.defineProperty(exports, "TrafficMirrorSessionSourcesAdditionProperty", { enumerable: true, get: function () { return vpc_generated_1.RosTrafficMirrorSessionSourcesAddition; } });
/**
 * A ROS resource type:  `ALIYUN::VPC::TrafficMirrorSessionSourcesAddition`
 */
class TrafficMirrorSessionSourcesAddition extends ros.Resource {
    /**
     * A factory method that creates a new instance of this class from an object
     * containing the properties of this ROS resource, which will be assigned to ROS resource.
     */
    /**
     * Create a new `ALIYUN::VPC::TrafficMirrorSessionSourcesAddition`.
     *
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosTrafficMirrorSessionSourcesAddition = new vpc_generated_1.RosTrafficMirrorSessionSourcesAddition(this, id, {
            trafficMirrorSourceIds: props.trafficMirrorSourceIds,
            trafficMirrorSessionId: props.trafficMirrorSessionId,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosTrafficMirrorSessionSourcesAddition;
    }
}
exports.TrafficMirrorSessionSourcesAddition = TrafficMirrorSessionSourcesAddition;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhZmZpY21pcnJvcnNlc3Npb25zb3VyY2VzYWRkaXRpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ0cmFmZmljbWlycm9yc2Vzc2lvbnNvdXJjZXNhZGRpdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw4Q0FBOEM7QUFDOUMsbURBQXlFO0FBRXRCLDRIQUYxQyxzREFBc0MsT0FFK0M7QUFrQjlGOztHQUVHO0FBQ0gsTUFBYSxtQ0FBb0MsU0FBUSxHQUFHLENBQUMsUUFBUTtJQUVqRTs7O09BR0c7SUFFSDs7Ozs7O09BTUc7SUFDSCxZQUFZLEtBQW9CLEVBQUUsRUFBVSxFQUFFLEtBQStDLEVBQUUsbUNBQTJDLElBQUk7UUFDMUksS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUVqQixNQUFNLHNDQUFzQyxHQUFHLElBQUksc0RBQXNDLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRztZQUNqRyxzQkFBc0IsRUFBRSxLQUFLLENBQUMsc0JBQXNCO1lBQ3BELHNCQUFzQixFQUFFLEtBQUssQ0FBQyxzQkFBc0I7U0FDdkQsRUFBRSxnQ0FBZ0MsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7UUFDcEYsSUFBSSxDQUFDLFFBQVEsR0FBRyxzQ0FBc0MsQ0FBQztJQUMzRCxDQUFDO0NBQ0o7QUF2QkQsa0ZBdUJDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcm9zIGZyb20gJ0BhbGljbG91ZC9yb3MtY2RrLWNvcmUnO1xuaW1wb3J0IHsgUm9zVHJhZmZpY01pcnJvclNlc3Npb25Tb3VyY2VzQWRkaXRpb24gfSBmcm9tICcuL3ZwYy5nZW5lcmF0ZWQnO1xuLy8gR2VuZXJhdGVkIGZyb20gdGhlIEFsaUNsb3VkIFJPUyBSZXNvdXJjZSBTcGVjaWZpY2F0aW9uXG5leHBvcnQgeyBSb3NUcmFmZmljTWlycm9yU2Vzc2lvblNvdXJjZXNBZGRpdGlvbiBhcyBUcmFmZmljTWlycm9yU2Vzc2lvblNvdXJjZXNBZGRpdGlvblByb3BlcnR5IH07XG5cbi8qKlxuICogUHJvcGVydGllcyBmb3IgZGVmaW5pbmcgYSBgQUxJWVVOOjpWUEM6OlRyYWZmaWNNaXJyb3JTZXNzaW9uU291cmNlc0FkZGl0aW9uYFxuICovXG5leHBvcnQgaW50ZXJmYWNlIFRyYWZmaWNNaXJyb3JTZXNzaW9uU291cmNlc0FkZGl0aW9uUHJvcHMge1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgdHJhZmZpY01pcnJvclNlc3Npb25JZDogVGhlIElEIG9mIHRoZSB0cmFmZmljIG1pcnJvciBzZXNzaW9uLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHRyYWZmaWNNaXJyb3JTZXNzaW9uSWQ6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHRyYWZmaWNNaXJyb3JTb3VyY2VJZHM6IHVuZGVmaW5lZFxuICAgICAqL1xuICAgIHJlYWRvbmx5IHRyYWZmaWNNaXJyb3JTb3VyY2VJZHM6IEFycmF5PHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZT4gfCByb3MuSVJlc29sdmFibGU7XG59XG5cbi8qKlxuICogQSBST1MgcmVzb3VyY2UgdHlwZTogIGBBTElZVU46OlZQQzo6VHJhZmZpY01pcnJvclNlc3Npb25Tb3VyY2VzQWRkaXRpb25gXG4gKi9cbmV4cG9ydCBjbGFzcyBUcmFmZmljTWlycm9yU2Vzc2lvblNvdXJjZXNBZGRpdGlvbiBleHRlbmRzIHJvcy5SZXNvdXJjZSB7XG5cbiAgICAvKipcbiAgICAgKiBBIGZhY3RvcnkgbWV0aG9kIHRoYXQgY3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzIGZyb20gYW4gb2JqZWN0XG4gICAgICogY29udGFpbmluZyB0aGUgcHJvcGVydGllcyBvZiB0aGlzIFJPUyByZXNvdXJjZSwgd2hpY2ggd2lsbCBiZSBhc3NpZ25lZCB0byBST1MgcmVzb3VyY2UuXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgYEFMSVlVTjo6VlBDOjpUcmFmZmljTWlycm9yU2Vzc2lvblNvdXJjZXNBZGRpdGlvbmAuXG4gICAgICpcbiAgICAgKiBQYXJhbSBzY29wZSAtIHNjb3BlIGluIHdoaWNoIHRoaXMgcmVzb3VyY2UgaXMgZGVmaW5lZFxuICAgICAqIFBhcmFtIGlkICAgIC0gc2NvcGVkIGlkIG9mIHRoZSByZXNvdXJjZVxuICAgICAqIFBhcmFtIHByb3BzIC0gcmVzb3VyY2UgcHJvcGVydGllc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiByb3MuQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogVHJhZmZpY01pcnJvclNlc3Npb25Tb3VyY2VzQWRkaXRpb25Qcm9wcywgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6Ym9vbGVhbiA9IHRydWUpIHtcbiAgICAgICAgc3VwZXIoc2NvcGUsIGlkKTtcblxuICAgICAgICBjb25zdCByb3NUcmFmZmljTWlycm9yU2Vzc2lvblNvdXJjZXNBZGRpdGlvbiA9IG5ldyBSb3NUcmFmZmljTWlycm9yU2Vzc2lvblNvdXJjZXNBZGRpdGlvbih0aGlzLCBpZCwgIHtcbiAgICAgICAgICAgIHRyYWZmaWNNaXJyb3JTb3VyY2VJZHM6IHByb3BzLnRyYWZmaWNNaXJyb3JTb3VyY2VJZHMsXG4gICAgICAgICAgICB0cmFmZmljTWlycm9yU2Vzc2lvbklkOiBwcm9wcy50cmFmZmljTWlycm9yU2Vzc2lvbklkLFxuICAgICAgICB9LCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCAmJiB0aGlzLnN0YWNrLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50KTtcbiAgICAgICAgdGhpcy5yZXNvdXJjZSA9IHJvc1RyYWZmaWNNaXJyb3JTZXNzaW9uU291cmNlc0FkZGl0aW9uO1xuICAgIH1cbn1cbiJdfQ==