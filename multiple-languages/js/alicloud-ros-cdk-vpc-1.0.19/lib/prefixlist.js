"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PrefixList = exports.PrefixListProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const vpc_generated_1 = require("./vpc.generated");
Object.defineProperty(exports, "PrefixListProperty", { enumerable: true, get: function () { return vpc_generated_1.RosPrefixList; } });
/**
 * A ROS resource type:  `ALIYUN::VPC::PrefixList`
 */
class PrefixList extends ros.Resource {
    /**
     * Create a new `ALIYUN::VPC::PrefixList`.
     *
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props = {}, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosPrefixList = new vpc_generated_1.RosPrefixList(this, id, {
            maxEntries: props.maxEntries,
            resourceGroupId: props.resourceGroupId,
            prefixListDescription: props.prefixListDescription,
            ipVersion: props.ipVersion,
            prefixListName: props.prefixListName,
            entries: props.entries,
            tags: props.tags,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosPrefixList;
        this.attrCreateTime = rosPrefixList.attrCreateTime;
        this.attrEntries = rosPrefixList.attrEntries;
        this.attrIpVersion = rosPrefixList.attrIpVersion;
        this.attrMaxEntries = rosPrefixList.attrMaxEntries;
        this.attrOwnerId = rosPrefixList.attrOwnerId;
        this.attrPrefixListDescription = rosPrefixList.attrPrefixListDescription;
        this.attrPrefixListId = rosPrefixList.attrPrefixListId;
        this.attrPrefixListName = rosPrefixList.attrPrefixListName;
        this.attrResourceGroupId = rosPrefixList.attrResourceGroupId;
        this.attrShareType = rosPrefixList.attrShareType;
        this.attrTags = rosPrefixList.attrTags;
    }
}
exports.PrefixList = PrefixList;
//# sourceMappingURL=data:application/json;base64,