"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Ipv6InternetBandwidth = exports.Ipv6InternetBandwidthProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const vpc_generated_1 = require("./vpc.generated");
Object.defineProperty(exports, "Ipv6InternetBandwidthProperty", { enumerable: true, get: function () { return vpc_generated_1.RosIpv6InternetBandwidth; } });
/**
 * A ROS resource type:  `ALIYUN::VPC::Ipv6InternetBandwidth`
 */
class Ipv6InternetBandwidth extends ros.Resource {
    /**
     * Create a new `ALIYUN::VPC::Ipv6InternetBandwidth`.
     *
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosIpv6InternetBandwidth = new vpc_generated_1.RosIpv6InternetBandwidth(this, id, {
            bandwidth: props.bandwidth,
            ipv6AddressId: props.ipv6AddressId,
            ipv6GatewayId: props.ipv6GatewayId,
            internetChargeType: props.internetChargeType,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosIpv6InternetBandwidth;
        this.attrInternetBandwidthId = rosIpv6InternetBandwidth.attrInternetBandwidthId;
    }
}
exports.Ipv6InternetBandwidth = Ipv6InternetBandwidth;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXB2NmludGVybmV0YmFuZHdpZHRoLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiaXB2NmludGVybmV0YmFuZHdpZHRoLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDhDQUE4QztBQUM5QyxtREFBMkQ7QUFFdEIsOEdBRjVCLHdDQUF3QixPQUVpQztBQW1DbEU7O0dBRUc7QUFDSCxNQUFhLHFCQUFzQixTQUFRLEdBQUcsQ0FBQyxRQUFRO0lBWW5EOzs7Ozs7T0FNRztJQUNILFlBQVksS0FBb0IsRUFBRSxFQUFVLEVBQUUsS0FBaUMsRUFBRSxtQ0FBMkMsSUFBSTtRQUM1SCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRWpCLE1BQU0sd0JBQXdCLEdBQUcsSUFBSSx3Q0FBd0IsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFHO1lBQ3JFLFNBQVMsRUFBRSxLQUFLLENBQUMsU0FBUztZQUMxQixhQUFhLEVBQUUsS0FBSyxDQUFDLGFBQWE7WUFDbEMsYUFBYSxFQUFFLEtBQUssQ0FBQyxhQUFhO1lBQ2xDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxrQkFBa0I7U0FDL0MsRUFBRSxnQ0FBZ0MsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7UUFDcEYsSUFBSSxDQUFDLFFBQVEsR0FBRyx3QkFBd0IsQ0FBQztRQUN6QyxJQUFJLENBQUMsdUJBQXVCLEdBQUcsd0JBQXdCLENBQUMsdUJBQXVCLENBQUM7SUFDcEYsQ0FBQztDQUNKO0FBL0JELHNEQStCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHJvcyBmcm9tICdAYWxpY2xvdWQvcm9zLWNkay1jb3JlJztcbmltcG9ydCB7IFJvc0lwdjZJbnRlcm5ldEJhbmR3aWR0aCB9IGZyb20gJy4vdnBjLmdlbmVyYXRlZCc7XG4vLyBHZW5lcmF0ZWQgZnJvbSB0aGUgQWxpQ2xvdWQgUk9TIFJlc291cmNlIFNwZWNpZmljYXRpb25cbmV4cG9ydCB7IFJvc0lwdjZJbnRlcm5ldEJhbmR3aWR0aCBhcyBJcHY2SW50ZXJuZXRCYW5kd2lkdGhQcm9wZXJ0eSB9O1xuXG4vKipcbiAqIFByb3BlcnRpZXMgZm9yIGRlZmluaW5nIGEgYEFMSVlVTjo6VlBDOjpJcHY2SW50ZXJuZXRCYW5kd2lkdGhgXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSXB2NkludGVybmV0QmFuZHdpZHRoUHJvcHMge1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgYmFuZHdpZHRoOiBQdWJsaWMgSVB2NiBhZGRyZXNzIG9mIGJhbmR3aWR0aCwgdW5pdDogTWJwcywgcmFuZ2U6IDEtNTAwMC5cbiAgICAgKiBXaGVuIEludGVybmV0Q2hhcmdlVHlwZSBpcyBQYXlCeUJhbmR3aWR0aCwgdGhlIGJhbmR3aWR0aCBvZiB0aGUgcHVibGljIG5ldHdvcmsgaXMgdGhlIElQdjYgYWRkcmVzcyAxLTUwMDAuXG4gICAgICogV2hlbiBJbnRlcm5ldENoYXJnZVR5cGUgaXMgUGF5QnlUcmFmZmljLCBwdWJsaWMgbmV0d29yayBiYW5kd2lkdGggSVB2NiBhZGRyZXNzZXMgd2hpbGUgSVB2NiBnYXRld2F5IHJlc3RyaWN0ZWQgc3BlY2lmaWNhdGlvbnMuXG4gICAgICogU21hbGwgKGRlZmF1bHQgZnJlZSB2ZXJzaW9uKSwgdGhlIHB1YmxpYyBuZXR3b3JrIGJhbmR3aWR0aCByYW5nZSAxLTUwMC5cbiAgICAgKiBNZWRpdW0gKEVudGVycHJpc2UgRWRpdGlvbiksIHRoZSBwdWJsaWMgbmV0d29yayBiYW5kd2lkdGggcmFuZ2UgZnJvbSAxIHRvIDEwMDAuXG4gICAgICogTGFyZ2UgKEVudGVycHJpc2UgRWRpdGlvbiksIHRoZSBwdWJsaWMgbmV0d29yayBiYW5kd2lkdGggcmFuZ2UgMS0yMDAwLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGJhbmR3aWR0aDogbnVtYmVyIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgaXB2NkFkZHJlc3NJZDogSUQgb2YgSVB2NiBhZGRyZXNzLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGlwdjZBZGRyZXNzSWQ6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGlwdjZHYXRld2F5SWQ6IElEIG9mIElQdjYgZ2F0ZXdheS5cbiAgICAgKi9cbiAgICByZWFkb25seSBpcHY2R2F0ZXdheUlkOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBpbnRlcm5ldENoYXJnZVR5cGU6IElQdjYgcHVibGljIG5ldHdvcmsgYmFuZHdpZHRoIGJpbGxpbmcsIHZhbHVlOlxuICAgICAqIC0gKipQYXlCeVRyYWZmaWMqKjogYnkgdXNpbmcgdGhlIHRyYWZmaWMgYWNjb3VudGluZy5cbiAgICAgKiAtICoqUGF5QnlCYW5kd2lkdGgqKiAoZGVmYXVsdCk6IEJhbmR3aWR0aCBiaWxsaW5nLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGludGVybmV0Q2hhcmdlVHlwZT86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcbn1cblxuLyoqXG4gKiBBIFJPUyByZXNvdXJjZSB0eXBlOiAgYEFMSVlVTjo6VlBDOjpJcHY2SW50ZXJuZXRCYW5kd2lkdGhgXG4gKi9cbmV4cG9ydCBjbGFzcyBJcHY2SW50ZXJuZXRCYW5kd2lkdGggZXh0ZW5kcyByb3MuUmVzb3VyY2Uge1xuXG4gICAgLyoqXG4gICAgICogQSBmYWN0b3J5IG1ldGhvZCB0aGF0IGNyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgdGhpcyBjbGFzcyBmcm9tIGFuIG9iamVjdFxuICAgICAqIGNvbnRhaW5pbmcgdGhlIHByb3BlcnRpZXMgb2YgdGhpcyBST1MgcmVzb3VyY2UsIHdoaWNoIHdpbGwgYmUgYXNzaWduZWQgdG8gUk9TIHJlc291cmNlLlxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIEludGVybmV0QmFuZHdpZHRoSWQ6IFB1cmNoYXNlIG9mIHB1YmxpYyBuZXR3b3JrIGJhbmR3aWR0aC5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckludGVybmV0QmFuZHdpZHRoSWQ6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBgQUxJWVVOOjpWUEM6OklwdjZJbnRlcm5ldEJhbmR3aWR0aGAuXG4gICAgICpcbiAgICAgKiBQYXJhbSBzY29wZSAtIHNjb3BlIGluIHdoaWNoIHRoaXMgcmVzb3VyY2UgaXMgZGVmaW5lZFxuICAgICAqIFBhcmFtIGlkICAgIC0gc2NvcGVkIGlkIG9mIHRoZSByZXNvdXJjZVxuICAgICAqIFBhcmFtIHByb3BzIC0gcmVzb3VyY2UgcHJvcGVydGllc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiByb3MuQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogSXB2NkludGVybmV0QmFuZHdpZHRoUHJvcHMsIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OmJvb2xlYW4gPSB0cnVlKSB7XG4gICAgICAgIHN1cGVyKHNjb3BlLCBpZCk7XG5cbiAgICAgICAgY29uc3Qgcm9zSXB2NkludGVybmV0QmFuZHdpZHRoID0gbmV3IFJvc0lwdjZJbnRlcm5ldEJhbmR3aWR0aCh0aGlzLCBpZCwgIHtcbiAgICAgICAgICAgIGJhbmR3aWR0aDogcHJvcHMuYmFuZHdpZHRoLFxuICAgICAgICAgICAgaXB2NkFkZHJlc3NJZDogcHJvcHMuaXB2NkFkZHJlc3NJZCxcbiAgICAgICAgICAgIGlwdjZHYXRld2F5SWQ6IHByb3BzLmlwdjZHYXRld2F5SWQsXG4gICAgICAgICAgICBpbnRlcm5ldENoYXJnZVR5cGU6IHByb3BzLmludGVybmV0Q2hhcmdlVHlwZSxcbiAgICAgICAgfSwgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgJiYgdGhpcy5zdGFjay5lbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCk7XG4gICAgICAgIHRoaXMucmVzb3VyY2UgPSByb3NJcHY2SW50ZXJuZXRCYW5kd2lkdGg7XG4gICAgICAgIHRoaXMuYXR0ckludGVybmV0QmFuZHdpZHRoSWQgPSByb3NJcHY2SW50ZXJuZXRCYW5kd2lkdGguYXR0ckludGVybmV0QmFuZHdpZHRoSWQ7XG4gICAgfVxufVxuIl19