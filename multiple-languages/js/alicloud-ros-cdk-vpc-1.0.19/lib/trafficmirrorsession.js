"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TrafficMirrorSession = exports.TrafficMirrorSessionProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const vpc_generated_1 = require("./vpc.generated");
Object.defineProperty(exports, "TrafficMirrorSessionProperty", { enumerable: true, get: function () { return vpc_generated_1.RosTrafficMirrorSession; } });
/**
 * A ROS resource type:  `ALIYUN::VPC::TrafficMirrorSession`
 */
class TrafficMirrorSession extends ros.Resource {
    /**
     * Create a new `ALIYUN::VPC::TrafficMirrorSession`.
     *
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosTrafficMirrorSession = new vpc_generated_1.RosTrafficMirrorSession(this, id, {
            trafficMirrorTargetId: props.trafficMirrorTargetId,
            resourceGroupId: props.resourceGroupId,
            virtualNetworkId: props.virtualNetworkId,
            trafficMirrorSourceIds: props.trafficMirrorSourceIds,
            priority: props.priority,
            packetLength: props.packetLength,
            enabled: props.enabled,
            trafficMirrorSessionDescription: props.trafficMirrorSessionDescription,
            tag: props.tag,
            trafficMirrorSessionName: props.trafficMirrorSessionName,
            trafficMirrorFilterId: props.trafficMirrorFilterId,
            trafficMirrorTargetType: props.trafficMirrorTargetType,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosTrafficMirrorSession;
        this.attrTrafficMirrorSessionId = rosTrafficMirrorSession.attrTrafficMirrorSessionId;
    }
}
exports.TrafficMirrorSession = TrafficMirrorSession;
//# sourceMappingURL=data:application/json;base64,