"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NatGateways = exports.NatGatewaysProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const vpc_generated_1 = require("./vpc.generated");
Object.defineProperty(exports, "NatGatewaysProperty", { enumerable: true, get: function () { return vpc_generated_1.RosNatGateways; } });
/**
 * A ROS resource type:  `DATASOURCE::VPC::NatGateways`
 */
class NatGateways extends ros.Resource {
    /**
     * Create a new `DATASOURCE::VPC::NatGateways`.
     *
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props = {}, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosNatGateways = new vpc_generated_1.RosNatGateways(this, id, {
            status: props.status,
            vpcId: props.vpcId,
            zoneId: props.zoneId,
            resourceGroupId: props.resourceGroupId,
            instanceChargeType: props.instanceChargeType === undefined || props.instanceChargeType === null ? 'PostPaid' : props.instanceChargeType,
            networkType: props.networkType,
            natType: props.natType,
            natGatewayId: props.natGatewayId,
            name: props.name,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosNatGateways;
        this.attrNatGatewayIds = rosNatGateways.attrNatGatewayIds;
        this.attrNatGateways = rosNatGateways.attrNatGateways;
    }
}
exports.NatGateways = NatGateways;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF0Z2F0ZXdheXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJuYXRnYXRld2F5cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw4Q0FBOEM7QUFDOUMsbURBQWlEO0FBRXRCLG9HQUZsQiw4QkFBYyxPQUV1QjtBQTREOUM7O0dBRUc7QUFDSCxNQUFhLFdBQVksU0FBUSxHQUFHLENBQUMsUUFBUTtJQWlCekM7Ozs7OztPQU1HO0lBQ0gsWUFBWSxLQUFvQixFQUFFLEVBQVUsRUFBRSxRQUEwQixFQUFFLEVBQUUsbUNBQTJDLElBQUk7UUFDdkgsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUVqQixNQUFNLGNBQWMsR0FBRyxJQUFJLDhCQUFjLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRztZQUNqRCxNQUFNLEVBQUUsS0FBSyxDQUFDLE1BQU07WUFDcEIsS0FBSyxFQUFFLEtBQUssQ0FBQyxLQUFLO1lBQ2xCLE1BQU0sRUFBRSxLQUFLLENBQUMsTUFBTTtZQUNwQixlQUFlLEVBQUUsS0FBSyxDQUFDLGVBQWU7WUFDdEMsa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGtCQUFrQixLQUFLLFNBQVMsSUFBSSxLQUFLLENBQUMsa0JBQWtCLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxrQkFBa0I7WUFDdkksV0FBVyxFQUFFLEtBQUssQ0FBQyxXQUFXO1lBQzlCLE9BQU8sRUFBRSxLQUFLLENBQUMsT0FBTztZQUN0QixZQUFZLEVBQUUsS0FBSyxDQUFDLFlBQVk7WUFDaEMsSUFBSSxFQUFFLEtBQUssQ0FBQyxJQUFJO1NBQ25CLEVBQUUsZ0NBQWdDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO1FBQ3BGLElBQUksQ0FBQyxRQUFRLEdBQUcsY0FBYyxDQUFDO1FBQy9CLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxjQUFjLENBQUMsaUJBQWlCLENBQUM7UUFDMUQsSUFBSSxDQUFDLGVBQWUsR0FBRyxjQUFjLENBQUMsZUFBZSxDQUFDO0lBQzFELENBQUM7Q0FDSjtBQTFDRCxrQ0EwQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyByb3MgZnJvbSAnQGFsaWNsb3VkL3Jvcy1jZGstY29yZSc7XG5pbXBvcnQgeyBSb3NOYXRHYXRld2F5cyB9IGZyb20gJy4vdnBjLmdlbmVyYXRlZCc7XG4vLyBHZW5lcmF0ZWQgZnJvbSB0aGUgQWxpQ2xvdWQgUk9TIFJlc291cmNlIFNwZWNpZmljYXRpb25cbmV4cG9ydCB7IFJvc05hdEdhdGV3YXlzIGFzIE5hdEdhdGV3YXlzUHJvcGVydHkgfTtcblxuLyoqXG4gKiBQcm9wZXJ0aWVzIGZvciBkZWZpbmluZyBhIGBEQVRBU09VUkNFOjpWUEM6Ok5hdEdhdGV3YXlzYFxuICovXG5leHBvcnQgaW50ZXJmYWNlIE5hdEdhdGV3YXlzUHJvcHMge1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgaW5zdGFuY2VDaGFyZ2VUeXBlOiBUaGUgYmlsbGluZyBtZXRob2Qgb2YgdGhlIE5BVCBnYXRld2F5LiBTZXQgdGhlIHZhbHVlIHRvIFBvc3RQYWlkLCB3aGljaCBzcGVjaWZpZXMgdGhlIHBheS1hcy15b3UtZ28gYmlsbGluZyBtZXRob2QuXG4gICAgICovXG4gICAgcmVhZG9ubHkgaW5zdGFuY2VDaGFyZ2VUeXBlPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgbmFtZTogVGhlIG5hbWUgb2YgdGhlIE5BVCBnYXRld2F5LlxuICAgICAqL1xuICAgIHJlYWRvbmx5IG5hbWU/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBuYXRHYXRld2F5SWQ6IFRoZSBJRCBvZiB0aGUgTkFUIGdhdGV3YXkuXG4gICAgICovXG4gICAgcmVhZG9ubHkgbmF0R2F0ZXdheUlkPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgbmF0VHlwZTogVGhlIHR5cGUgb2YgTkFUIGdhdGV3YXkuIFNldCB0aGUgdmFsdWUgdG8gRW5oYW5jZWQgKGVuaGFuY2VkIE5BVCBnYXRld2F5KS5cbiAgICAgKi9cbiAgICByZWFkb25seSBuYXRUeXBlPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgbmV0d29ya1R5cGU6IFRoZSB0eXBlIG9mIHRoZSBOQVQgZ2F0ZXdheS4gVmFsaWQgdmFsdWVzOlxuICAgICAqIGludGVybmV0OiBhbiBJbnRlcm5ldCBOQVQgZ2F0ZXdheVxuICAgICAqICBpbnRyYW5ldDogYSBWUEMgTkFUIGdhdGV3YXlcbiAgICAgKi9cbiAgICByZWFkb25seSBuZXR3b3JrVHlwZT86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHJlc291cmNlR3JvdXBJZDogVGhlIElEIG9mIHRoZSByZXNvdXJjZSBncm91cCB0byB3aGljaCB0aGUgTkFUIGdhdGV3YXkgYmVsb25ncy5cbiAgICAgKi9cbiAgICByZWFkb25seSByZXNvdXJjZUdyb3VwSWQ/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBzdGF0dXM6IFRoZSBzdGF0dXMgb2YgdGhlIE5BVCBnYXRld2F5LiBWYWxpZCB2YWx1ZXM6XG4gICAgICogQ3JlYXRpbmc6IEFmdGVyIHlvdSBzZW5kIGEgcmVxdWVzdCB0byBjcmVhdGUgYSBOQVQgZ2F0ZXdheSwgdGhlIHN5c3RlbSBjcmVhdGVzIHRoZSBOQVQgZ2F0ZXdheSBpbiB0aGUgYmFja2dyb3VuZC4gVGhlIE5BVCBnYXRld2F5IHJlbWFpbnMgaW4gdGhlIENyZWF0aW5nIHN0YXRlIHVudGlsIHRoZSBvcGVyYXRpb24gaXMgY29tcGxldGVkLlxuICAgICAqICBBdmFpbGFibGU6IFRoZSBOQVQgZ2F0ZXdheSByZW1haW5zIGluIGEgc3RhYmxlIHN0YXRlIGFmdGVyIHRoZSBOQVQgZ2F0ZXdheSBpcyBjcmVhdGVkLlxuICAgICAqICBNb2RpZnlpbmc6IEFmdGVyIHlvdSBzZW5kIGEgcmVxdWVzdCB0byBtb2RpZnkgYSBOQVQgZ2F0ZXdheSwgdGhlIHN5c3RlbSBtb2RpZmllcyB0aGUgTkFUIGdhdGV3YXkgaW4gdGhlIGJhY2tncm91bmQuIFRoZSBOQVQgZ2F0ZXdheSByZW1haW5zIGluIHRoZSBNb2RpZnlpbmcgc3RhdGUgdW50aWwgdGhlIG9wZXJhdGlvbiBpcyBjb21wbGV0ZWQuXG4gICAgICogIERlbGV0aW5nOiBBZnRlciB5b3Ugc2VuZCBhIHJlcXVlc3QgdG8gZGVsZXRlIGEgTkFUIGdhdGV3YXksIHRoZSBzeXN0ZW0gZGVsZXRlcyB0aGUgTkFUIGdhdGV3YXkgaW4gdGhlIGJhY2tncm91bmQuIFRoZSBOQVQgZ2F0ZXdheSByZW1haW5zIGluIHRoZSBEZWxldGluZyBzdGF0ZSB1bnRpbCB0aGUgb3BlcmF0aW9uIGlzIGNvbXBsZXRlZC5cbiAgICAgKiAgQ29udmVydGluZzogQWZ0ZXIgeW91IHNlbmQgYSByZXF1ZXN0IHRvIHVwZ3JhZGUgYSBzdGFuZGFyZCBOQVQgZ2F0ZXdheSB0byBhbiBlbmhhbmNlZCBOQVQgZ2F0ZXdheSwgdGhlIHN5c3RlbSB1cGdyYWRlcyB0aGUgTkFUIGdhdGV3YXkgaW4gdGhlIGJhY2tncm91bmQuIFRoZSBOQVQgZ2F0ZXdheSByZW1haW5zIGluIHRoZSBDb252ZXJ0aW5nIHN0YXRlIHVudGlsIHRoZSBvcGVyYXRpb24gaXMgY29tcGxldGVkLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHN0YXR1cz86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHZwY0lkOiBUaGUgSUQgb2YgdGhlIFZQQyB0byB3aGljaCB0aGUgTkFUIGdhdGV3YXkgYmVsb25ncy5cbiAgICAgKi9cbiAgICByZWFkb25seSB2cGNJZD86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHpvbmVJZDogVGhlIElEIG9mIHRoZSB6b25lIHRvIHdoaWNoIHRoZSBOQVQgZ2F0ZXdheSBiZWxvbmdzLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHpvbmVJZD86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcbn1cblxuLyoqXG4gKiBBIFJPUyByZXNvdXJjZSB0eXBlOiAgYERBVEFTT1VSQ0U6OlZQQzo6TmF0R2F0ZXdheXNgXG4gKi9cbmV4cG9ydCBjbGFzcyBOYXRHYXRld2F5cyBleHRlbmRzIHJvcy5SZXNvdXJjZSB7XG5cbiAgICAvKipcbiAgICAgKiBBIGZhY3RvcnkgbWV0aG9kIHRoYXQgY3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzIGZyb20gYW4gb2JqZWN0XG4gICAgICogY29udGFpbmluZyB0aGUgcHJvcGVydGllcyBvZiB0aGlzIFJPUyByZXNvdXJjZSwgd2hpY2ggd2lsbCBiZSBhc3NpZ25lZCB0byBST1MgcmVzb3VyY2UuXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgTmF0R2F0ZXdheUlkczogVGhlIGxpc3Qgb2YgVGhlIG5hdCBnYXRld2F5IGlkcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ck5hdEdhdGV3YXlJZHM6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBOYXRHYXRld2F5czogVGhlIGxpc3Qgb2YgVGhlIG5hdCBnYXRld2F5cy5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ck5hdEdhdGV3YXlzOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgYERBVEFTT1VSQ0U6OlZQQzo6TmF0R2F0ZXdheXNgLlxuICAgICAqXG4gICAgICogUGFyYW0gc2NvcGUgLSBzY29wZSBpbiB3aGljaCB0aGlzIHJlc291cmNlIGlzIGRlZmluZWRcbiAgICAgKiBQYXJhbSBpZCAgICAtIHNjb3BlZCBpZCBvZiB0aGUgcmVzb3VyY2VcbiAgICAgKiBQYXJhbSBwcm9wcyAtIHJlc291cmNlIHByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihzY29wZTogcm9zLkNvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IE5hdEdhdGV3YXlzUHJvcHMgPSB7fSwgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6Ym9vbGVhbiA9IHRydWUpIHtcbiAgICAgICAgc3VwZXIoc2NvcGUsIGlkKTtcblxuICAgICAgICBjb25zdCByb3NOYXRHYXRld2F5cyA9IG5ldyBSb3NOYXRHYXRld2F5cyh0aGlzLCBpZCwgIHtcbiAgICAgICAgICAgIHN0YXR1czogcHJvcHMuc3RhdHVzLFxuICAgICAgICAgICAgdnBjSWQ6IHByb3BzLnZwY0lkLFxuICAgICAgICAgICAgem9uZUlkOiBwcm9wcy56b25lSWQsXG4gICAgICAgICAgICByZXNvdXJjZUdyb3VwSWQ6IHByb3BzLnJlc291cmNlR3JvdXBJZCxcbiAgICAgICAgICAgIGluc3RhbmNlQ2hhcmdlVHlwZTogcHJvcHMuaW5zdGFuY2VDaGFyZ2VUeXBlID09PSB1bmRlZmluZWQgfHwgcHJvcHMuaW5zdGFuY2VDaGFyZ2VUeXBlID09PSBudWxsID8gJ1Bvc3RQYWlkJyA6IHByb3BzLmluc3RhbmNlQ2hhcmdlVHlwZSxcbiAgICAgICAgICAgIG5ldHdvcmtUeXBlOiBwcm9wcy5uZXR3b3JrVHlwZSxcbiAgICAgICAgICAgIG5hdFR5cGU6IHByb3BzLm5hdFR5cGUsXG4gICAgICAgICAgICBuYXRHYXRld2F5SWQ6IHByb3BzLm5hdEdhdGV3YXlJZCxcbiAgICAgICAgICAgIG5hbWU6IHByb3BzLm5hbWUsXG4gICAgICAgIH0sIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ICYmIHRoaXMuc3RhY2suZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQpO1xuICAgICAgICB0aGlzLnJlc291cmNlID0gcm9zTmF0R2F0ZXdheXM7XG4gICAgICAgIHRoaXMuYXR0ck5hdEdhdGV3YXlJZHMgPSByb3NOYXRHYXRld2F5cy5hdHRyTmF0R2F0ZXdheUlkcztcbiAgICAgICAgdGhpcy5hdHRyTmF0R2F0ZXdheXMgPSByb3NOYXRHYXRld2F5cy5hdHRyTmF0R2F0ZXdheXM7XG4gICAgfVxufVxuIl19