"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NatIpCidrs = exports.NatIpCidrsProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const vpc_generated_1 = require("./vpc.generated");
Object.defineProperty(exports, "NatIpCidrsProperty", { enumerable: true, get: function () { return vpc_generated_1.RosNatIpCidrs; } });
/**
 * A ROS resource type:  `DATASOURCE::VPC::NatIpCidrs`
 */
class NatIpCidrs extends ros.Resource {
    /**
     * Create a new `DATASOURCE::VPC::NatIpCidrs`.
     *
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosNatIpCidrs = new vpc_generated_1.RosNatIpCidrs(this, id, {
            natIpCidr: props.natIpCidr,
            natGatewayId: props.natGatewayId,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosNatIpCidrs;
        this.attrNatIpCidrIds = rosNatIpCidrs.attrNatIpCidrIds;
        this.attrNatIpCidrs = rosNatIpCidrs.attrNatIpCidrs;
    }
}
exports.NatIpCidrs = NatIpCidrs;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF0aXBjaWRycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm5hdGlwY2lkcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsOENBQThDO0FBQzlDLG1EQUFnRDtBQUV0QixtR0FGakIsNkJBQWEsT0FFc0I7QUFrQjVDOztHQUVHO0FBQ0gsTUFBYSxVQUFXLFNBQVEsR0FBRyxDQUFDLFFBQVE7SUFpQnhDOzs7Ozs7T0FNRztJQUNILFlBQVksS0FBb0IsRUFBRSxFQUFVLEVBQUUsS0FBc0IsRUFBRSxtQ0FBMkMsSUFBSTtRQUNqSCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRWpCLE1BQU0sYUFBYSxHQUFHLElBQUksNkJBQWEsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFHO1lBQy9DLFNBQVMsRUFBRSxLQUFLLENBQUMsU0FBUztZQUMxQixZQUFZLEVBQUUsS0FBSyxDQUFDLFlBQVk7U0FDbkMsRUFBRSxnQ0FBZ0MsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7UUFDcEYsSUFBSSxDQUFDLFFBQVEsR0FBRyxhQUFhLENBQUM7UUFDOUIsSUFBSSxDQUFDLGdCQUFnQixHQUFHLGFBQWEsQ0FBQyxnQkFBZ0IsQ0FBQztRQUN2RCxJQUFJLENBQUMsY0FBYyxHQUFHLGFBQWEsQ0FBQyxjQUFjLENBQUM7SUFDdkQsQ0FBQztDQUNKO0FBbkNELGdDQW1DQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHJvcyBmcm9tICdAYWxpY2xvdWQvcm9zLWNkay1jb3JlJztcbmltcG9ydCB7IFJvc05hdElwQ2lkcnMgfSBmcm9tICcuL3ZwYy5nZW5lcmF0ZWQnO1xuLy8gR2VuZXJhdGVkIGZyb20gdGhlIEFsaUNsb3VkIFJPUyBSZXNvdXJjZSBTcGVjaWZpY2F0aW9uXG5leHBvcnQgeyBSb3NOYXRJcENpZHJzIGFzIE5hdElwQ2lkcnNQcm9wZXJ0eSB9O1xuXG4vKipcbiAqIFByb3BlcnRpZXMgZm9yIGRlZmluaW5nIGEgYERBVEFTT1VSQ0U6OlZQQzo6TmF0SXBDaWRyc2BcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBOYXRJcENpZHJzUHJvcHMge1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgbmF0R2F0ZXdheUlkOiBOQVQgSVAgQUREUkVTUyByYW5nZSB0byB0aGUgc2VjdXJpdHkgZ3JvdXAgb2YgdGhlIEthZmthIFZQQyBOQVQgZ2F0ZXdheSBpbnN0YW5jZSBJRC5cbiAgICAgKi9cbiAgICByZWFkb25seSBuYXRHYXRld2F5SWQ6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IG5hdElwQ2lkcjogQ3JlYXRlIGEgTkFUIElQIEFERFJFU1MuIFRoZSBuZXcgYWRkcmVzcyBzZWdtZW50IG11c3QgbWVldCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6IGJlbG9uZyB0byAxMC4wLjAuMC84LCAxNzIuMTYuMC4wLzEyIG9yIDE5Mi4xNjguMC4wLzE2IG5ldHdvcmsgc2VnbWVudCBhbmQgaXRzIHN1Ym5ldC4gU3VwcG9ydCB0aGUgc3VibmV0IG1hc2sgb2YgdGhlIG51bWJlciBvZiBiaXRzIGluIHRoZSByYW5nZSBvZiAxNiB0byAzMi1iaXQuIElmIHlvdSB3YW50IHRvIHVzZSB0aGUgSVAgYWRkcmVzcyBvZiBhIHB1YmxpYyBuZXR3b3JrIHNlZ21lbnQgYXMgdGhlIE5BVCBJUCBBRERSRVNTLCB0aGUgVmlydHVhbCBQcml2YXRlIENsb3VkIChWUEMgTkFUIGlzIGFscmVhZHkgdXNpbmcgdGhlIElQIGFkZHJlc3Mgb2YgYSBwdWJsaWMgbmV0d29yayBvZiBwZXJtaXNzaW9ucy4gRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSBjcmVhdGUgYSB2aXJ0dWFsIHByaXZhdGUgY2xvdWQgKFZQQyBOQVQgZ2F0ZXdheSBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICByZWFkb25seSBuYXRJcENpZHI/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG59XG5cbi8qKlxuICogQSBST1MgcmVzb3VyY2UgdHlwZTogIGBEQVRBU09VUkNFOjpWUEM6Ok5hdElwQ2lkcnNgXG4gKi9cbmV4cG9ydCBjbGFzcyBOYXRJcENpZHJzIGV4dGVuZHMgcm9zLlJlc291cmNlIHtcblxuICAgIC8qKlxuICAgICAqIEEgZmFjdG9yeSBtZXRob2QgdGhhdCBjcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIHRoaXMgY2xhc3MgZnJvbSBhbiBvYmplY3RcbiAgICAgKiBjb250YWluaW5nIHRoZSBwcm9wZXJ0aWVzIG9mIHRoaXMgUk9TIHJlc291cmNlLCB3aGljaCB3aWxsIGJlIGFzc2lnbmVkIHRvIFJPUyByZXNvdXJjZS5cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBOYXRJcENpZHJJZHM6IFRoZSBsaXN0IG9mIG5hdCBpcCBjaWRyIElEcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ck5hdElwQ2lkcklkczogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIE5hdElwQ2lkcnM6IFRoZSBsaXN0IG9mIG5hdCBpcCBjaWRycy5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ck5hdElwQ2lkcnM6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBgREFUQVNPVVJDRTo6VlBDOjpOYXRJcENpZHJzYC5cbiAgICAgKlxuICAgICAqIFBhcmFtIHNjb3BlIC0gc2NvcGUgaW4gd2hpY2ggdGhpcyByZXNvdXJjZSBpcyBkZWZpbmVkXG4gICAgICogUGFyYW0gaWQgICAgLSBzY29wZWQgaWQgb2YgdGhlIHJlc291cmNlXG4gICAgICogUGFyYW0gcHJvcHMgLSByZXNvdXJjZSBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IHJvcy5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBOYXRJcENpZHJzUHJvcHMsIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OmJvb2xlYW4gPSB0cnVlKSB7XG4gICAgICAgIHN1cGVyKHNjb3BlLCBpZCk7XG5cbiAgICAgICAgY29uc3Qgcm9zTmF0SXBDaWRycyA9IG5ldyBSb3NOYXRJcENpZHJzKHRoaXMsIGlkLCAge1xuICAgICAgICAgICAgbmF0SXBDaWRyOiBwcm9wcy5uYXRJcENpZHIsXG4gICAgICAgICAgICBuYXRHYXRld2F5SWQ6IHByb3BzLm5hdEdhdGV3YXlJZCxcbiAgICAgICAgfSwgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgJiYgdGhpcy5zdGFjay5lbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCk7XG4gICAgICAgIHRoaXMucmVzb3VyY2UgPSByb3NOYXRJcENpZHJzO1xuICAgICAgICB0aGlzLmF0dHJOYXRJcENpZHJJZHMgPSByb3NOYXRJcENpZHJzLmF0dHJOYXRJcENpZHJJZHM7XG4gICAgICAgIHRoaXMuYXR0ck5hdElwQ2lkcnMgPSByb3NOYXRJcENpZHJzLmF0dHJOYXRJcENpZHJzO1xuICAgIH1cbn1cbiJdfQ==