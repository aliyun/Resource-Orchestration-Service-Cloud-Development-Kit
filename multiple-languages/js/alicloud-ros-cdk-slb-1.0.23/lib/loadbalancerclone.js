"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LoadBalancerClone = exports.LoadBalancerCloneProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const slb_generated_1 = require("./slb.generated");
Object.defineProperty(exports, "LoadBalancerCloneProperty", { enumerable: true, get: function () { return slb_generated_1.RosLoadBalancerClone; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::SLB::LoadBalancerClone`, which is used to clone a Server Load Balancer (SLB) instance.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosLoadBalancerClone`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-slb-loadbalancerclone
 */
class LoadBalancerClone extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosLoadBalancerClone = new slb_generated_1.RosLoadBalancerClone(this, id, {
            loadBalancerName: props.loadBalancerName,
            sourceLoadBalancerId: props.sourceLoadBalancerId,
            resourceGroupId: props.resourceGroupId,
            tagsPolicy: props.tagsPolicy === undefined || props.tagsPolicy === null ? 'empty' : props.tagsPolicy,
            instanceChargeType: props.instanceChargeType,
            vSwitchId: props.vSwitchId,
            backendServers: props.backendServers,
            tags: props.tags,
            loadBalancerSpec: props.loadBalancerSpec,
            backendServersPolicy: props.backendServersPolicy === undefined || props.backendServersPolicy === null ? 'clone' : props.backendServersPolicy,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosLoadBalancerClone;
        this.attrLoadBalancerId = rosLoadBalancerClone.attrLoadBalancerId;
    }
}
exports.LoadBalancerClone = LoadBalancerClone;
//# sourceMappingURL=data:application/json;base64,