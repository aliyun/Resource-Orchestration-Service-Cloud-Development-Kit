"use strict";
// Generated from the AliCloud ROS Resource Specification
Object.defineProperty(exports, "__esModule", { value: true });
exports.RosInstances = exports.RosInstanceClasses = exports.RosInstance = exports.RosAccounts = void 0;
const ros = require("@alicloud/ros-cdk-core");
/**
 * Determine whether the given properties match those of a `RosAccountsProps`
 *
 * @param properties - the TypeScript properties of a `RosAccountsProps`
 *
 * @returns the result of the validation.
 */
function RosAccountsPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('instanceId', ros.requiredValidator)(properties.instanceId));
    errors.collect(ros.propertyValidator('instanceId', ros.validateString)(properties.instanceId));
    errors.collect(ros.propertyValidator('accountName', ros.validateString)(properties.accountName));
    return errors.wrap('supplied properties not correct for "RosAccountsProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `DATASOURCE::REDIS::Accounts` resource
 *
 * @param properties - the TypeScript properties of a `RosAccountsProps`
 *
 * @returns the AliCloud ROS Resource properties of an `DATASOURCE::REDIS::Accounts` resource.
 */
// @ts-ignore TS6133
function rosAccountsPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosAccountsPropsValidator(properties).assertSuccess();
    }
    return {
        InstanceId: ros.stringToRosTemplate(properties.instanceId),
        AccountName: ros.stringToRosTemplate(properties.accountName),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `DATASOURCE::REDIS::Accounts`.
 * @Note This class does not contain additional functions, so it is recommended to use the `Accounts` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/datasource-redis-accounts
 */
class RosAccounts extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosAccounts.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrAccountNames = this.getAtt('AccountNames');
        this.attrAccounts = this.getAtt('Accounts');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.instanceId = props.instanceId;
        this.accountName = props.accountName;
    }
    get rosProperties() {
        return {
            instanceId: this.instanceId,
            accountName: this.accountName,
        };
    }
    renderProperties(props) {
        return rosAccountsPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosAccounts = RosAccounts;
/**
 * The resource type name for this resource class.
 */
RosAccounts.ROS_RESOURCE_TYPE_NAME = "DATASOURCE::REDIS::Accounts";
/**
 * Determine whether the given properties match those of a `RosInstanceProps`
 *
 * @param properties - the TypeScript properties of a `RosInstanceProps`
 *
 * @returns the result of the validation.
 */
function RosInstancePropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('dbInstanceId', ros.requiredValidator)(properties.dbInstanceId));
    errors.collect(ros.propertyValidator('dbInstanceId', ros.validateString)(properties.dbInstanceId));
    return errors.wrap('supplied properties not correct for "RosInstanceProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `DATASOURCE::REDIS::Instance` resource
 *
 * @param properties - the TypeScript properties of a `RosInstanceProps`
 *
 * @returns the AliCloud ROS Resource properties of an `DATASOURCE::REDIS::Instance` resource.
 */
// @ts-ignore TS6133
function rosInstancePropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosInstancePropsValidator(properties).assertSuccess();
    }
    return {
        DBInstanceId: ros.stringToRosTemplate(properties.dbInstanceId),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `DATASOURCE::REDIS::Instance`.
 * @Note This class does not contain additional functions, so it is recommended to use the `Instance` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/datasource-redis-instance
 */
class RosInstance extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosInstance.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrArchitectureType = this.getAtt('ArchitectureType');
        this.attrBandwidth = this.getAtt('Bandwidth');
        this.attrCapacity = this.getAtt('Capacity');
        this.attrCloudType = this.getAtt('CloudType');
        this.attrConfig = this.getAtt('Config');
        this.attrConnectionDomain = this.getAtt('ConnectionDomain');
        this.attrCreateTime = this.getAtt('CreateTime');
        this.attrDbInstanceId = this.getAtt('DBInstanceId');
        this.attrDbInstanceName = this.getAtt('DBInstanceName');
        this.attrEndTime = this.getAtt('EndTime');
        this.attrEngineVersion = this.getAtt('EngineVersion');
        this.attrHasRenewChangeOrder = this.getAtt('HasRenewChangeOrder');
        this.attrInstanceClass = this.getAtt('InstanceClass');
        this.attrInstanceReleaseProtection = this.getAtt('InstanceReleaseProtection');
        this.attrInstanceType = this.getAtt('InstanceType');
        this.attrIsRds = this.getAtt('IsRds');
        this.attrMaintainEndTime = this.getAtt('MaintainEndTime');
        this.attrMaintainStartTime = this.getAtt('MaintainStartTime');
        this.attrNetworkType = this.getAtt('NetworkType');
        this.attrPackageType = this.getAtt('PackageType');
        this.attrPaymentType = this.getAtt('PaymentType');
        this.attrPort = this.getAtt('Port');
        this.attrPrivateIp = this.getAtt('PrivateIp');
        this.attrQps = this.getAtt('Qps');
        this.attrReadOnlyCount = this.getAtt('ReadOnlyCount');
        this.attrReplacateId = this.getAtt('ReplacateId');
        this.attrResourceGroupId = this.getAtt('ResourceGroupId');
        this.attrSecondaryZoneId = this.getAtt('SecondaryZoneId');
        this.attrSecurityGroupId = this.getAtt('SecurityGroupId');
        this.attrSecurityIpGroupAttribute = this.getAtt('SecurityIpGroupAttribute');
        this.attrSecurityIpGroupName = this.getAtt('SecurityIpGroupName');
        this.attrSecurityIps = this.getAtt('SecurityIps');
        this.attrShardCount = this.getAtt('ShardCount');
        this.attrTags = this.getAtt('Tags');
        this.attrVSwitchId = this.getAtt('VSwitchId');
        this.attrVpcAuthMode = this.getAtt('VpcAuthMode');
        this.attrVpcCloudInstanceId = this.getAtt('VpcCloudInstanceId');
        this.attrVpcId = this.getAtt('VpcId');
        this.attrZoneId = this.getAtt('ZoneId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.dbInstanceId = props.dbInstanceId;
    }
    get rosProperties() {
        return {
            dbInstanceId: this.dbInstanceId,
        };
    }
    renderProperties(props) {
        return rosInstancePropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosInstance = RosInstance;
/**
 * The resource type name for this resource class.
 */
RosInstance.ROS_RESOURCE_TYPE_NAME = "DATASOURCE::REDIS::Instance";
/**
 * Determine whether the given properties match those of a `RosInstanceClassesProps`
 *
 * @param properties - the TypeScript properties of a `RosInstanceClassesProps`
 *
 * @returns the result of the validation.
 */
function RosInstanceClassesPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('orderType', ros.validateString)(properties.orderType));
    errors.collect(ros.propertyValidator('zoneId', ros.validateString)(properties.zoneId));
    errors.collect(ros.propertyValidator('resourceGroupId', ros.validateString)(properties.resourceGroupId));
    errors.collect(ros.propertyValidator('instanceId', ros.validateString)(properties.instanceId));
    errors.collect(ros.propertyValidator('instanceChargeType', ros.validateString)(properties.instanceChargeType));
    errors.collect(ros.propertyValidator('nodeId', ros.validateString)(properties.nodeId));
    errors.collect(ros.propertyValidator('productType', ros.validateString)(properties.productType));
    errors.collect(ros.propertyValidator('acceptLanguage', ros.validateString)(properties.acceptLanguage));
    errors.collect(ros.propertyValidator('engine', ros.validateString)(properties.engine));
    return errors.wrap('supplied properties not correct for "RosInstanceClassesProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `DATASOURCE::REDIS::InstanceClasses` resource
 *
 * @param properties - the TypeScript properties of a `RosInstanceClassesProps`
 *
 * @returns the AliCloud ROS Resource properties of an `DATASOURCE::REDIS::InstanceClasses` resource.
 */
// @ts-ignore TS6133
function rosInstanceClassesPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosInstanceClassesPropsValidator(properties).assertSuccess();
    }
    return {
        AcceptLanguage: ros.stringToRosTemplate(properties.acceptLanguage),
        Engine: ros.stringToRosTemplate(properties.engine),
        InstanceChargeType: ros.stringToRosTemplate(properties.instanceChargeType),
        InstanceId: ros.stringToRosTemplate(properties.instanceId),
        NodeId: ros.stringToRosTemplate(properties.nodeId),
        OrderType: ros.stringToRosTemplate(properties.orderType),
        ProductType: ros.stringToRosTemplate(properties.productType),
        ResourceGroupId: ros.stringToRosTemplate(properties.resourceGroupId),
        ZoneId: ros.stringToRosTemplate(properties.zoneId),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `DATASOURCE::REDIS::InstanceClasses`, which is used to query the types of ApsaraDB for Redis instances.
 * @Note This class does not contain additional functions, so it is recommended to use the `InstanceClasses` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/datasource-redis-instanceclasses
 */
class RosInstanceClasses extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosInstanceClasses.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrInstanceClassIds = this.getAtt('InstanceClassIds');
        this.attrInstanceClasses = this.getAtt('InstanceClasses');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.acceptLanguage = props.acceptLanguage;
        this.engine = props.engine;
        this.instanceChargeType = props.instanceChargeType;
        this.instanceId = props.instanceId;
        this.nodeId = props.nodeId;
        this.orderType = props.orderType;
        this.productType = props.productType;
        this.resourceGroupId = props.resourceGroupId;
        this.zoneId = props.zoneId;
    }
    get rosProperties() {
        return {
            acceptLanguage: this.acceptLanguage,
            engine: this.engine,
            instanceChargeType: this.instanceChargeType,
            instanceId: this.instanceId,
            nodeId: this.nodeId,
            orderType: this.orderType,
            productType: this.productType,
            resourceGroupId: this.resourceGroupId,
            zoneId: this.zoneId,
        };
    }
    renderProperties(props) {
        return rosInstanceClassesPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosInstanceClasses = RosInstanceClasses;
/**
 * The resource type name for this resource class.
 */
RosInstanceClasses.ROS_RESOURCE_TYPE_NAME = "DATASOURCE::REDIS::InstanceClasses";
/**
 * Determine whether the given properties match those of a `RosInstancesProps`
 *
 * @param properties - the TypeScript properties of a `RosInstancesProps`
 *
 * @returns the result of the validation.
 */
function RosInstancesPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    if (properties.architectureType && (typeof properties.architectureType) !== 'object') {
        errors.collect(ros.propertyValidator('architectureType', ros.validateAllowedValues)({
            data: properties.architectureType,
            allowedValues: ["cluster", "standard", "rwsplit"],
        }));
    }
    errors.collect(ros.propertyValidator('architectureType', ros.validateString)(properties.architectureType));
    errors.collect(ros.propertyValidator('engineVersion', ros.validateString)(properties.engineVersion));
    if (properties.editionType && (typeof properties.editionType) !== 'object') {
        errors.collect(ros.propertyValidator('editionType', ros.validateAllowedValues)({
            data: properties.editionType,
            allowedValues: ["Community", "Enterprise"],
        }));
    }
    errors.collect(ros.propertyValidator('editionType', ros.validateString)(properties.editionType));
    errors.collect(ros.propertyValidator('zoneId', ros.validateString)(properties.zoneId));
    errors.collect(ros.propertyValidator('resourceGroupId', ros.validateString)(properties.resourceGroupId));
    errors.collect(ros.propertyValidator('vSwitchId', ros.validateString)(properties.vSwitchId));
    errors.collect(ros.propertyValidator('instanceClass', ros.validateString)(properties.instanceClass));
    if (properties.expired && (typeof properties.expired) !== 'object') {
        errors.collect(ros.propertyValidator('expired', ros.validateAllowedValues)({
            data: properties.expired,
            allowedValues: ["true", "false"],
        }));
    }
    errors.collect(ros.propertyValidator('expired', ros.validateString)(properties.expired));
    errors.collect(ros.propertyValidator('vpcId', ros.validateString)(properties.vpcId));
    errors.collect(ros.propertyValidator('privateIp', ros.validateString)(properties.privateIp));
    if (properties.instanceStatus && (typeof properties.instanceStatus) !== 'object') {
        errors.collect(ros.propertyValidator('instanceStatus', ros.validateAllowedValues)({
            data: properties.instanceStatus,
            allowedValues: ["Normal", "Creating", "Changing", "Inactive", "Flushing", "Released", "Transforming", "Unavailable", "Error", "Migrating", "BackupRecovering", "MinorVersionUpgrading", "NetworkModifying", "SSLModifying", "MajorVersionUpgrading"],
        }));
    }
    errors.collect(ros.propertyValidator('instanceStatus', ros.validateString)(properties.instanceStatus));
    if (properties.chargeType && (typeof properties.chargeType) !== 'object') {
        errors.collect(ros.propertyValidator('chargeType', ros.validateAllowedValues)({
            data: properties.chargeType,
            allowedValues: ["PrePaid", "PostPaid"],
        }));
    }
    errors.collect(ros.propertyValidator('chargeType', ros.validateString)(properties.chargeType));
    if (properties.networkType && (typeof properties.networkType) !== 'object') {
        errors.collect(ros.propertyValidator('networkType', ros.validateAllowedValues)({
            data: properties.networkType,
            allowedValues: ["CLASSIC", "VPC"],
        }));
    }
    errors.collect(ros.propertyValidator('networkType', ros.validateString)(properties.networkType));
    errors.collect(ros.propertyValidator('searchKey', ros.validateString)(properties.searchKey));
    if (properties.globalInstance && (typeof properties.globalInstance) !== 'object') {
        errors.collect(ros.propertyValidator('globalInstance', ros.validateAllowedValues)({
            data: properties.globalInstance,
            allowedValues: ["true", "false"],
        }));
    }
    errors.collect(ros.propertyValidator('globalInstance', ros.validateString)(properties.globalInstance));
    if (properties.instanceType && (typeof properties.instanceType) !== 'object') {
        errors.collect(ros.propertyValidator('instanceType', ros.validateAllowedValues)({
            data: properties.instanceType,
            allowedValues: ["Tair", "Redis", "Memcache"],
        }));
    }
    errors.collect(ros.propertyValidator('instanceType', ros.validateString)(properties.instanceType));
    errors.collect(ros.propertyValidator('instanceIds', ros.validateString)(properties.instanceIds));
    return errors.wrap('supplied properties not correct for "RosInstancesProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `DATASOURCE::REDIS::Instances` resource
 *
 * @param properties - the TypeScript properties of a `RosInstancesProps`
 *
 * @returns the AliCloud ROS Resource properties of an `DATASOURCE::REDIS::Instances` resource.
 */
// @ts-ignore TS6133
function rosInstancesPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosInstancesPropsValidator(properties).assertSuccess();
    }
    return {
        ArchitectureType: ros.stringToRosTemplate(properties.architectureType),
        ChargeType: ros.stringToRosTemplate(properties.chargeType),
        EditionType: ros.stringToRosTemplate(properties.editionType),
        EngineVersion: ros.stringToRosTemplate(properties.engineVersion),
        Expired: ros.stringToRosTemplate(properties.expired),
        GlobalInstance: ros.stringToRosTemplate(properties.globalInstance),
        InstanceClass: ros.stringToRosTemplate(properties.instanceClass),
        InstanceIds: ros.stringToRosTemplate(properties.instanceIds),
        InstanceStatus: ros.stringToRosTemplate(properties.instanceStatus),
        InstanceType: ros.stringToRosTemplate(properties.instanceType),
        NetworkType: ros.stringToRosTemplate(properties.networkType),
        PrivateIp: ros.stringToRosTemplate(properties.privateIp),
        ResourceGroupId: ros.stringToRosTemplate(properties.resourceGroupId),
        SearchKey: ros.stringToRosTemplate(properties.searchKey),
        VpcId: ros.stringToRosTemplate(properties.vpcId),
        VSwitchId: ros.stringToRosTemplate(properties.vSwitchId),
        ZoneId: ros.stringToRosTemplate(properties.zoneId),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `DATASOURCE::REDIS::Instances`, which is used to query the information about ApsaraDB for Redis instances.
 * @Note This class does not contain additional functions, so it is recommended to use the `Instances` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/datasource-redis-instances
 */
class RosInstances extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosInstances.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrInstanceIds = this.getAtt('InstanceIds');
        this.attrInstances = this.getAtt('Instances');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.architectureType = props.architectureType;
        this.chargeType = props.chargeType;
        this.editionType = props.editionType;
        this.engineVersion = props.engineVersion;
        this.expired = props.expired;
        this.globalInstance = props.globalInstance;
        this.instanceClass = props.instanceClass;
        this.instanceIds = props.instanceIds;
        this.instanceStatus = props.instanceStatus;
        this.instanceType = props.instanceType;
        this.networkType = props.networkType;
        this.privateIp = props.privateIp;
        this.resourceGroupId = props.resourceGroupId;
        this.searchKey = props.searchKey;
        this.vpcId = props.vpcId;
        this.vSwitchId = props.vSwitchId;
        this.zoneId = props.zoneId;
    }
    get rosProperties() {
        return {
            architectureType: this.architectureType,
            chargeType: this.chargeType,
            editionType: this.editionType,
            engineVersion: this.engineVersion,
            expired: this.expired,
            globalInstance: this.globalInstance,
            instanceClass: this.instanceClass,
            instanceIds: this.instanceIds,
            instanceStatus: this.instanceStatus,
            instanceType: this.instanceType,
            networkType: this.networkType,
            privateIp: this.privateIp,
            resourceGroupId: this.resourceGroupId,
            searchKey: this.searchKey,
            vpcId: this.vpcId,
            vSwitchId: this.vSwitchId,
            zoneId: this.zoneId,
        };
    }
    renderProperties(props) {
        return rosInstancesPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosInstances = RosInstances;
/**
 * The resource type name for this resource class.
 */
RosInstances.ROS_RESOURCE_TYPE_NAME = "DATASOURCE::REDIS::Instances";
//# sourceMappingURL=data:application/json;base64,