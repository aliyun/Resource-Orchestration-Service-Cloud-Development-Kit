"use strict";
// Generated from the AliCloud ROS Resource Specification
Object.defineProperty(exports, "__esModule", { value: true });
exports.RosTensorboard = exports.RosJob = void 0;
const ros = require("@alicloud/ros-cdk-core");
/**
 * Determine whether the given properties match those of a `RosJobProps`
 *
 * @param properties - the TypeScript properties of a `RosJobProps`
 *
 * @returns the result of the validation.
 */
function RosJobPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('thirdpartyLibs', ros.listValidator(ros.validateString))(properties.thirdpartyLibs));
    errors.collect(ros.propertyValidator('options', ros.validateString)(properties.options));
    errors.collect(ros.propertyValidator('priority', ros.validateNumber)(properties.priority));
    errors.collect(ros.propertyValidator('envs', ros.validateString)(properties.envs));
    errors.collect(ros.propertyValidator('jobMaxRunningTimeMinutes', ros.validateNumber)(properties.jobMaxRunningTimeMinutes));
    errors.collect(ros.propertyValidator('workspaceId', ros.requiredValidator)(properties.workspaceId));
    errors.collect(ros.propertyValidator('workspaceId', ros.validateString)(properties.workspaceId));
    errors.collect(ros.propertyValidator('codeSource', RosJob_CodeSourcePropertyValidator)(properties.codeSource));
    errors.collect(ros.propertyValidator('userVpc', RosJob_UserVpcPropertyValidator)(properties.userVpc));
    errors.collect(ros.propertyValidator('jobSpecs', ros.requiredValidator)(properties.jobSpecs));
    errors.collect(ros.propertyValidator('jobSpecs', ros.listValidator(RosJob_JobSpecsPropertyValidator))(properties.jobSpecs));
    errors.collect(ros.propertyValidator('userCommand', ros.requiredValidator)(properties.userCommand));
    errors.collect(ros.propertyValidator('userCommand', ros.validateString)(properties.userCommand));
    errors.collect(ros.propertyValidator('dataSources', ros.listValidator(RosJob_DataSourcesPropertyValidator))(properties.dataSources));
    errors.collect(ros.propertyValidator('jobType', ros.requiredValidator)(properties.jobType));
    if (properties.jobType && (typeof properties.jobType) !== 'object') {
        errors.collect(ros.propertyValidator('jobType', ros.validateAllowedValues)({
            data: properties.jobType,
            allowedValues: ["TFJob", "PyTorchJob", "XGBoostJob", "OneFlowJob", "ElasticBatch"],
        }));
    }
    errors.collect(ros.propertyValidator('jobType', ros.validateString)(properties.jobType));
    errors.collect(ros.propertyValidator('resourceId', ros.validateString)(properties.resourceId));
    errors.collect(ros.propertyValidator('thirdpartyLibDir', ros.validateString)(properties.thirdpartyLibDir));
    errors.collect(ros.propertyValidator('displayName', ros.requiredValidator)(properties.displayName));
    errors.collect(ros.propertyValidator('displayName', ros.validateString)(properties.displayName));
    errors.collect(ros.propertyValidator('successPolicy', ros.validateString)(properties.successPolicy));
    errors.collect(ros.propertyValidator('settings', ros.hashValidator(ros.validateAny))(properties.settings));
    return errors.wrap('supplied properties not correct for "RosJobProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::PAIDLC::Job` resource
 *
 * @param properties - the TypeScript properties of a `RosJobProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::PAIDLC::Job` resource.
 */
// @ts-ignore TS6133
function rosJobPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosJobPropsValidator(properties).assertSuccess();
    }
    return {
        DisplayName: ros.stringToRosTemplate(properties.displayName),
        JobSpecs: ros.listMapper(rosJobJobSpecsPropertyToRosTemplate)(properties.jobSpecs),
        JobType: ros.stringToRosTemplate(properties.jobType),
        UserCommand: ros.stringToRosTemplate(properties.userCommand),
        WorkspaceId: ros.stringToRosTemplate(properties.workspaceId),
        CodeSource: rosJobCodeSourcePropertyToRosTemplate(properties.codeSource),
        DataSources: ros.listMapper(rosJobDataSourcesPropertyToRosTemplate)(properties.dataSources),
        Envs: ros.stringToRosTemplate(properties.envs),
        JobMaxRunningTimeMinutes: ros.numberToRosTemplate(properties.jobMaxRunningTimeMinutes),
        Options: ros.stringToRosTemplate(properties.options),
        Priority: ros.numberToRosTemplate(properties.priority),
        ResourceId: ros.stringToRosTemplate(properties.resourceId),
        Settings: ros.hashMapper(ros.objectToRosTemplate)(properties.settings),
        SuccessPolicy: ros.stringToRosTemplate(properties.successPolicy),
        ThirdpartyLibDir: ros.stringToRosTemplate(properties.thirdpartyLibDir),
        ThirdpartyLibs: ros.listMapper(ros.stringToRosTemplate)(properties.thirdpartyLibs),
        UserVpc: rosJobUserVpcPropertyToRosTemplate(properties.userVpc),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::PAIDLC::Job`, which is used to create a Machine Learning Platform for AI (PAI) job to run in a cluster.
 * @Note This class does not contain additional functions, so it is recommended to use the `Job` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-paidlc-job
 */
class RosJob extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosJob.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrJobId = this.getAtt('JobId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.displayName = props.displayName;
        this.jobSpecs = props.jobSpecs;
        this.jobType = props.jobType;
        this.userCommand = props.userCommand;
        this.workspaceId = props.workspaceId;
        this.codeSource = props.codeSource;
        this.dataSources = props.dataSources;
        this.envs = props.envs;
        this.jobMaxRunningTimeMinutes = props.jobMaxRunningTimeMinutes;
        this.options = props.options;
        this.priority = props.priority;
        this.resourceId = props.resourceId;
        this.settings = props.settings;
        this.successPolicy = props.successPolicy;
        this.thirdpartyLibDir = props.thirdpartyLibDir;
        this.thirdpartyLibs = props.thirdpartyLibs;
        this.userVpc = props.userVpc;
    }
    get rosProperties() {
        return {
            displayName: this.displayName,
            jobSpecs: this.jobSpecs,
            jobType: this.jobType,
            userCommand: this.userCommand,
            workspaceId: this.workspaceId,
            codeSource: this.codeSource,
            dataSources: this.dataSources,
            envs: this.envs,
            jobMaxRunningTimeMinutes: this.jobMaxRunningTimeMinutes,
            options: this.options,
            priority: this.priority,
            resourceId: this.resourceId,
            settings: this.settings,
            successPolicy: this.successPolicy,
            thirdpartyLibDir: this.thirdpartyLibDir,
            thirdpartyLibs: this.thirdpartyLibs,
            userVpc: this.userVpc,
        };
    }
    renderProperties(props) {
        return rosJobPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosJob = RosJob;
/**
 * The resource type name for this resource class.
 */
RosJob.ROS_RESOURCE_TYPE_NAME = "ALIYUN::PAIDLC::Job";
/**
 * Determine whether the given properties match those of a `CodeSourceProperty`
 *
 * @param properties - the TypeScript properties of a `CodeSourceProperty`
 *
 * @returns the result of the validation.
 */
function RosJob_CodeSourcePropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('mountPath', ros.validateString)(properties.mountPath));
    errors.collect(ros.propertyValidator('commit', ros.validateString)(properties.commit));
    errors.collect(ros.propertyValidator('branch', ros.validateString)(properties.branch));
    errors.collect(ros.propertyValidator('codeSourceId', ros.requiredValidator)(properties.codeSourceId));
    errors.collect(ros.propertyValidator('codeSourceId', ros.validateString)(properties.codeSourceId));
    return errors.wrap('supplied properties not correct for "CodeSourceProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::PAIDLC::Job.CodeSource` resource
 *
 * @param properties - the TypeScript properties of a `CodeSourceProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::PAIDLC::Job.CodeSource` resource.
 */
// @ts-ignore TS6133
function rosJobCodeSourcePropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosJob_CodeSourcePropertyValidator(properties).assertSuccess();
    return {
        MountPath: ros.stringToRosTemplate(properties.mountPath),
        Commit: ros.stringToRosTemplate(properties.commit),
        Branch: ros.stringToRosTemplate(properties.branch),
        CodeSourceId: ros.stringToRosTemplate(properties.codeSourceId),
    };
}
/**
 * Determine whether the given properties match those of a `DataSourcesProperty`
 *
 * @param properties - the TypeScript properties of a `DataSourcesProperty`
 *
 * @returns the result of the validation.
 */
function RosJob_DataSourcesPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('mountPath', ros.validateString)(properties.mountPath));
    errors.collect(ros.propertyValidator('dataSourceId', ros.requiredValidator)(properties.dataSourceId));
    errors.collect(ros.propertyValidator('dataSourceId', ros.validateString)(properties.dataSourceId));
    return errors.wrap('supplied properties not correct for "DataSourcesProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::PAIDLC::Job.DataSources` resource
 *
 * @param properties - the TypeScript properties of a `DataSourcesProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::PAIDLC::Job.DataSources` resource.
 */
// @ts-ignore TS6133
function rosJobDataSourcesPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosJob_DataSourcesPropertyValidator(properties).assertSuccess();
    return {
        MountPath: ros.stringToRosTemplate(properties.mountPath),
        DataSourceId: ros.stringToRosTemplate(properties.dataSourceId),
    };
}
/**
 * Determine whether the given properties match those of a `JobSpecsProperty`
 *
 * @param properties - the TypeScript properties of a `JobSpecsProperty`
 *
 * @returns the result of the validation.
 */
function RosJob_JobSpecsPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('podCount', ros.requiredValidator)(properties.podCount));
    errors.collect(ros.propertyValidator('podCount', ros.validateNumber)(properties.podCount));
    errors.collect(ros.propertyValidator('imageConfig', ros.hashValidator(ros.validateAny))(properties.imageConfig));
    errors.collect(ros.propertyValidator('useSpotInstance', ros.requiredValidator)(properties.useSpotInstance));
    errors.collect(ros.propertyValidator('useSpotInstance', ros.validateBoolean)(properties.useSpotInstance));
    errors.collect(ros.propertyValidator('type', ros.requiredValidator)(properties.type));
    errors.collect(ros.propertyValidator('type', ros.validateString)(properties.type));
    errors.collect(ros.propertyValidator('ecsSpec', ros.requiredValidator)(properties.ecsSpec));
    errors.collect(ros.propertyValidator('ecsSpec', ros.validateString)(properties.ecsSpec));
    errors.collect(ros.propertyValidator('resourceConfig', ros.hashValidator(ros.validateAny))(properties.resourceConfig));
    errors.collect(ros.propertyValidator('image', ros.requiredValidator)(properties.image));
    errors.collect(ros.propertyValidator('image', ros.validateString)(properties.image));
    errors.collect(ros.propertyValidator('extraPodSpec', ros.hashValidator(ros.validateAny))(properties.extraPodSpec));
    return errors.wrap('supplied properties not correct for "JobSpecsProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::PAIDLC::Job.JobSpecs` resource
 *
 * @param properties - the TypeScript properties of a `JobSpecsProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::PAIDLC::Job.JobSpecs` resource.
 */
// @ts-ignore TS6133
function rosJobJobSpecsPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosJob_JobSpecsPropertyValidator(properties).assertSuccess();
    return {
        PodCount: ros.numberToRosTemplate(properties.podCount),
        ImageConfig: ros.hashMapper(ros.objectToRosTemplate)(properties.imageConfig),
        UseSpotInstance: ros.booleanToRosTemplate(properties.useSpotInstance),
        Type: ros.stringToRosTemplate(properties.type),
        EcsSpec: ros.stringToRosTemplate(properties.ecsSpec),
        ResourceConfig: ros.hashMapper(ros.objectToRosTemplate)(properties.resourceConfig),
        Image: ros.stringToRosTemplate(properties.image),
        ExtraPodSpec: ros.hashMapper(ros.objectToRosTemplate)(properties.extraPodSpec),
    };
}
/**
 * Determine whether the given properties match those of a `UserVpcProperty`
 *
 * @param properties - the TypeScript properties of a `UserVpcProperty`
 *
 * @returns the result of the validation.
 */
function RosJob_UserVpcPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('vpcId', ros.requiredValidator)(properties.vpcId));
    errors.collect(ros.propertyValidator('vpcId', ros.validateString)(properties.vpcId));
    errors.collect(ros.propertyValidator('securityGroupId', ros.validateString)(properties.securityGroupId));
    errors.collect(ros.propertyValidator('switchId', ros.validateString)(properties.switchId));
    errors.collect(ros.propertyValidator('extendedCidRs', ros.listValidator(ros.validateString))(properties.extendedCidRs));
    return errors.wrap('supplied properties not correct for "UserVpcProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::PAIDLC::Job.UserVpc` resource
 *
 * @param properties - the TypeScript properties of a `UserVpcProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::PAIDLC::Job.UserVpc` resource.
 */
// @ts-ignore TS6133
function rosJobUserVpcPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosJob_UserVpcPropertyValidator(properties).assertSuccess();
    return {
        VpcId: ros.stringToRosTemplate(properties.vpcId),
        SecurityGroupId: ros.stringToRosTemplate(properties.securityGroupId),
        SwitchId: ros.stringToRosTemplate(properties.switchId),
        ExtendedCIDRs: ros.listMapper(ros.stringToRosTemplate)(properties.extendedCidRs),
    };
}
/**
 * Determine whether the given properties match those of a `RosTensorboardProps`
 *
 * @param properties - the TypeScript properties of a `RosTensorboardProps`
 *
 * @returns the result of the validation.
 */
function RosTensorboardPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('maxRunningTimeMinutes', ros.validateNumber)(properties.maxRunningTimeMinutes));
    errors.collect(ros.propertyValidator('options', ros.validateString)(properties.options));
    errors.collect(ros.propertyValidator('memory', ros.validateNumber)(properties.memory));
    errors.collect(ros.propertyValidator('summaryPath', ros.validateString)(properties.summaryPath));
    errors.collect(ros.propertyValidator('sourceId', ros.validateString)(properties.sourceId));
    errors.collect(ros.propertyValidator('sourceType', ros.validateString)(properties.sourceType));
    errors.collect(ros.propertyValidator('workspaceId', ros.requiredValidator)(properties.workspaceId));
    errors.collect(ros.propertyValidator('workspaceId', ros.validateString)(properties.workspaceId));
    errors.collect(ros.propertyValidator('cpu', ros.validateNumber)(properties.cpu));
    errors.collect(ros.propertyValidator('uri', ros.validateString)(properties.uri));
    errors.collect(ros.propertyValidator('dataSources', ros.listValidator(ros.validateAny))(properties.dataSources));
    errors.collect(ros.propertyValidator('summaryRelativePath', ros.validateString)(properties.summaryRelativePath));
    if (properties.dataSourceType && (typeof properties.dataSourceType) !== 'object') {
        errors.collect(ros.propertyValidator('dataSourceType', ros.validateAllowedValues)({
            data: properties.dataSourceType,
            allowedValues: ["OSS", "NAS"],
        }));
    }
    errors.collect(ros.propertyValidator('dataSourceType', ros.validateString)(properties.dataSourceType));
    errors.collect(ros.propertyValidator('displayName', ros.requiredValidator)(properties.displayName));
    errors.collect(ros.propertyValidator('displayName', ros.validateString)(properties.displayName));
    errors.collect(ros.propertyValidator('jobId', ros.validateString)(properties.jobId));
    errors.collect(ros.propertyValidator('dataSourceId', ros.requiredValidator)(properties.dataSourceId));
    errors.collect(ros.propertyValidator('dataSourceId', ros.validateString)(properties.dataSourceId));
    return errors.wrap('supplied properties not correct for "RosTensorboardProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::PAIDLC::Tensorboard` resource
 *
 * @param properties - the TypeScript properties of a `RosTensorboardProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::PAIDLC::Tensorboard` resource.
 */
// @ts-ignore TS6133
function rosTensorboardPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosTensorboardPropsValidator(properties).assertSuccess();
    }
    return {
        DataSourceId: ros.stringToRosTemplate(properties.dataSourceId),
        DisplayName: ros.stringToRosTemplate(properties.displayName),
        WorkspaceId: ros.stringToRosTemplate(properties.workspaceId),
        Cpu: ros.numberToRosTemplate(properties.cpu),
        DataSources: ros.listMapper(ros.objectToRosTemplate)(properties.dataSources),
        DataSourceType: ros.stringToRosTemplate(properties.dataSourceType),
        JobId: ros.stringToRosTemplate(properties.jobId),
        MaxRunningTimeMinutes: ros.numberToRosTemplate(properties.maxRunningTimeMinutes),
        Memory: ros.numberToRosTemplate(properties.memory),
        Options: ros.stringToRosTemplate(properties.options),
        SourceId: ros.stringToRosTemplate(properties.sourceId),
        SourceType: ros.stringToRosTemplate(properties.sourceType),
        SummaryPath: ros.stringToRosTemplate(properties.summaryPath),
        SummaryRelativePath: ros.stringToRosTemplate(properties.summaryRelativePath),
        Uri: ros.stringToRosTemplate(properties.uri),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::PAIDLC::Tensorboard`, which is used to create a TensorBoard instance.
 * @Note This class does not contain additional functions, so it is recommended to use the `Tensorboard` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-paidlc-tensorboard
 */
class RosTensorboard extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosTensorboard.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrTensorboardId = this.getAtt('TensorboardId');
        this.attrTensorboardUrl = this.getAtt('TensorboardUrl');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.dataSourceId = props.dataSourceId;
        this.displayName = props.displayName;
        this.workspaceId = props.workspaceId;
        this.cpu = props.cpu;
        this.dataSources = props.dataSources;
        this.dataSourceType = props.dataSourceType;
        this.jobId = props.jobId;
        this.maxRunningTimeMinutes = props.maxRunningTimeMinutes;
        this.memory = props.memory;
        this.options = props.options;
        this.sourceId = props.sourceId;
        this.sourceType = props.sourceType;
        this.summaryPath = props.summaryPath;
        this.summaryRelativePath = props.summaryRelativePath;
        this.uri = props.uri;
    }
    get rosProperties() {
        return {
            dataSourceId: this.dataSourceId,
            displayName: this.displayName,
            workspaceId: this.workspaceId,
            cpu: this.cpu,
            dataSources: this.dataSources,
            dataSourceType: this.dataSourceType,
            jobId: this.jobId,
            maxRunningTimeMinutes: this.maxRunningTimeMinutes,
            memory: this.memory,
            options: this.options,
            sourceId: this.sourceId,
            sourceType: this.sourceType,
            summaryPath: this.summaryPath,
            summaryRelativePath: this.summaryRelativePath,
            uri: this.uri,
        };
    }
    renderProperties(props) {
        return rosTensorboardPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosTensorboard = RosTensorboard;
/**
 * The resource type name for this resource class.
 */
RosTensorboard.ROS_RESOURCE_TYPE_NAME = "ALIYUN::PAIDLC::Tensorboard";
//# sourceMappingURL=data:application/json;base64,