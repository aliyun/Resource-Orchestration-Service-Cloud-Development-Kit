"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Tensorboard = exports.TensorboardProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const paidlc_generated_1 = require("./paidlc.generated");
Object.defineProperty(exports, "TensorboardProperty", { enumerable: true, get: function () { return paidlc_generated_1.RosTensorboard; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::PAIDLC::Tensorboard`, which is used to create a TensorBoard instance.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosTensorboard`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-paidlc-tensorboard
 */
class Tensorboard extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosTensorboard = new paidlc_generated_1.RosTensorboard(this, id, {
            maxRunningTimeMinutes: props.maxRunningTimeMinutes,
            options: props.options,
            memory: props.memory,
            summaryPath: props.summaryPath,
            sourceId: props.sourceId,
            sourceType: props.sourceType,
            workspaceId: props.workspaceId,
            cpu: props.cpu,
            uri: props.uri,
            dataSources: props.dataSources,
            summaryRelativePath: props.summaryRelativePath,
            dataSourceType: props.dataSourceType,
            displayName: props.displayName,
            jobId: props.jobId,
            dataSourceId: props.dataSourceId,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosTensorboard;
        this.attrTensorboardId = rosTensorboard.attrTensorboardId;
        this.attrTensorboardUrl = rosTensorboard.attrTensorboardUrl;
    }
}
exports.Tensorboard = Tensorboard;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVuc29yYm9hcmQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ0ZW5zb3Jib2FyZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw4Q0FBOEM7QUFDOUMseURBQW9EO0FBRXpCLG9HQUZsQixpQ0FBYyxPQUV1QjtBQXNGOUM7Ozs7R0FJRztBQUNILE1BQWEsV0FBWSxTQUFRLEdBQUcsQ0FBQyxRQUFRO0lBWXpDOzs7O09BSUc7SUFDSCxZQUFZLEtBQW9CLEVBQUUsRUFBVSxFQUFFLEtBQXVCLEVBQUUsbUNBQTJDLElBQUk7UUFDbEgsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUVqQixNQUFNLGNBQWMsR0FBRyxJQUFJLGlDQUFjLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRztZQUNqRCxxQkFBcUIsRUFBRSxLQUFLLENBQUMscUJBQXFCO1lBQ2xELE9BQU8sRUFBRSxLQUFLLENBQUMsT0FBTztZQUN0QixNQUFNLEVBQUUsS0FBSyxDQUFDLE1BQU07WUFDcEIsV0FBVyxFQUFFLEtBQUssQ0FBQyxXQUFXO1lBQzlCLFFBQVEsRUFBRSxLQUFLLENBQUMsUUFBUTtZQUN4QixVQUFVLEVBQUUsS0FBSyxDQUFDLFVBQVU7WUFDNUIsV0FBVyxFQUFFLEtBQUssQ0FBQyxXQUFXO1lBQzlCLEdBQUcsRUFBRSxLQUFLLENBQUMsR0FBRztZQUNkLEdBQUcsRUFBRSxLQUFLLENBQUMsR0FBRztZQUNkLFdBQVcsRUFBRSxLQUFLLENBQUMsV0FBVztZQUM5QixtQkFBbUIsRUFBRSxLQUFLLENBQUMsbUJBQW1CO1lBQzlDLGNBQWMsRUFBRSxLQUFLLENBQUMsY0FBYztZQUNwQyxXQUFXLEVBQUUsS0FBSyxDQUFDLFdBQVc7WUFDOUIsS0FBSyxFQUFFLEtBQUssQ0FBQyxLQUFLO1lBQ2xCLFlBQVksRUFBRSxLQUFLLENBQUMsWUFBWTtTQUNuQyxFQUFFLGdDQUFnQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztRQUNwRixJQUFJLENBQUMsUUFBUSxHQUFHLGNBQWMsQ0FBQztRQUMvQixJQUFJLENBQUMsaUJBQWlCLEdBQUcsY0FBYyxDQUFDLGlCQUFpQixDQUFDO1FBQzFELElBQUksQ0FBQyxrQkFBa0IsR0FBRyxjQUFjLENBQUMsa0JBQWtCLENBQUM7SUFDaEUsQ0FBQztDQUNKO0FBekNELGtDQXlDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHJvcyBmcm9tICdAYWxpY2xvdWQvcm9zLWNkay1jb3JlJztcbmltcG9ydCB7IFJvc1RlbnNvcmJvYXJkIH0gZnJvbSAnLi9wYWlkbGMuZ2VuZXJhdGVkJztcbi8vIEdlbmVyYXRlZCBmcm9tIHRoZSBBbGlDbG91ZCBST1MgUmVzb3VyY2UgU3BlY2lmaWNhdGlvblxuZXhwb3J0IHsgUm9zVGVuc29yYm9hcmQgYXMgVGVuc29yYm9hcmRQcm9wZXJ0eSB9O1xuXG4vKipcbiAqIFByb3BlcnRpZXMgZm9yIGRlZmluaW5nIGEgYFRlbnNvcmJvYXJkYC5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvYWxpeXVuLXBhaWRsYy10ZW5zb3Jib2FyZFxuICovXG5leHBvcnQgaW50ZXJmYWNlIFRlbnNvcmJvYXJkUHJvcHMge1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgZGF0YVNvdXJjZUlkOiBGb3IgZGF0YXNldCBJRCwgc2VlIHRoZSBkYXRhIHNldCBJRCwgc2VlIExpc3REYXRhU2V0cy5cbiAgICAgKi9cbiAgICByZWFkb25seSBkYXRhU291cmNlSWQ6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGRpc3BsYXlOYW1lOiBUZW5zb3Jib2FyZCBuYW1lLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGRpc3BsYXlOYW1lOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSB3b3Jrc3BhY2VJZDogV29yayBzcGFjZSBJRC5Ib3cgdG8gZ2V0IHdvcmtpbmcgc3BhY2UgSUQsIHNlZSBMaXN0d29ya1NwYWNlcy5cbiAgICAgKi9cbiAgICByZWFkb25seSB3b3Jrc3BhY2VJZDogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgY3B1OiBDUFUgbnVjbGVhciBudW1iZXIuXG4gICAgICovXG4gICAgcmVhZG9ubHkgY3B1PzogbnVtYmVyIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgZGF0YVNvdXJjZXM6IERhdGEgc291cmNlIGNvbmZpZ3VyYXRpb24uXG4gICAgICovXG4gICAgcmVhZG9ubHkgZGF0YVNvdXJjZXM/OiBBcnJheTxhbnkgfCByb3MuSVJlc29sdmFibGU+IHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgZGF0YVNvdXJjZVR5cGU6IFRoZSB0eXBlIG9mIGRhdGFzZXQuIFZhbHVlczogT1NTLE5BU1xuICAgICAqL1xuICAgIHJlYWRvbmx5IGRhdGFTb3VyY2VUeXBlPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgam9iSWQ6IFRhc2sgSUQuSG93IHRvIGdldCB0aGUgdGFzayBJRCwgc2VlIExpc3Rqb2JzLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGpvYklkPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgbWF4UnVubmluZ1RpbWVNaW51dGVzOiBUaGUgbG9uZ2VzdCBydW5uaW5nIHRpbWUsIHRoZSB1bml0IGlzOiBtaW51dGVzLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IG1heFJ1bm5pbmdUaW1lTWludXRlcz86IG51bWJlciB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IG1lbW9yeTogTWVtb3J5IHNpemUsIHRoZSB1bml0IGlzOiBHQi5cbiAgICAgKi9cbiAgICByZWFkb25seSBtZW1vcnk/OiBudW1iZXIgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBvcHRpb25zOiBUaGUgZXhwYW5zaW9uIGZpZWxkIG9mIHRoZSBkYXRhc2V0IGlzIEpTT04gZm9ybWF0LCB3aGljaCBjdXJyZW50bHkgc3VwcG9ydHMgTW91bnRwYXRoOiB0aGUgcGF0aCBvZiBjdXN0b20gZGF0YXNldCBtb3VudGluZy5cbiAgICAgKi9cbiAgICByZWFkb25seSBvcHRpb25zPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgc291cmNlSWQ6IFNvdXJjZSBJRC5cbiAgICAgKi9cbiAgICByZWFkb25seSBzb3VyY2VJZD86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHNvdXJjZVR5cGU6IFNvdXJjZSB0eXBlLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHNvdXJjZVR5cGU/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBzdW1tYXJ5UGF0aDogU3VtbWFyeSBkaXJlY3RvcnkuXG4gICAgICovXG4gICAgcmVhZG9ubHkgc3VtbWFyeVBhdGg/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBzdW1tYXJ5UmVsYXRpdmVQYXRoOiBTdW1tYXJ5IHJlbGF0aXZlIGRpcmVjdG9yeS4gU3VtbWFyeSByZWxhdGl2ZSBkaXJlY3RvcnkgYW5kIFN1bW1hcnkgZGlyZWN0b3J5IGFyZSBtdXR1YWxseSBleGNsdXNpdmVcbiAgICAgKi9cbiAgICByZWFkb25seSBzdW1tYXJ5UmVsYXRpdmVQYXRoPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgdXJpOiBVUkkgb2YgYSBkYXRhc2V0OlxuICAgICAqIFdoZW4gRGF0YVNvdXJjZVR5cGUgaXMgT1NTLCB0aGUgZm9ybWF0IGlzOiBPU1M6IFxcL1xcLyBbT1NTLUJVQ0VUXS4gW0VuZHBvaW50XVxcL1tQYXRoXS5cbiAgICAgKiBXaGVuIHRoZSBEYXRhU291cmNlVHlwZSBpcyBOQVMsIHRoZSBmb3JtYXQgaXM6IG5hczpcXC9cXC8gW25hcy1maWxlc3lzdGVtLWlkXS4gW1JlZ2lvbl1cXC9bUEFUSF0uXG4gICAgICovXG4gICAgcmVhZG9ubHkgdXJpPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xufVxuXG4vKipcbiAqIFRoaXMgY2xhc3MgZW5jYXBzdWxhdGVzIGFuZCBleHRlbmRzIHRoZSBST1MgcmVzb3VyY2UgdHlwZSBgQUxJWVVOOjpQQUlETEM6OlRlbnNvcmJvYXJkYCwgd2hpY2ggaXMgdXNlZCB0byBjcmVhdGUgYSBUZW5zb3JCb2FyZCBpbnN0YW5jZS5cbiAqIEBOb3RlIFRoaXMgY2xhc3MgbWF5IGhhdmUgc29tZSBuZXcgZnVuY3Rpb25zIHRvIGZhY2lsaXRhdGUgZGV2ZWxvcG1lbnQsIHNvIGl0IGlzIHJlY29tbWVuZGVkIHRvIHVzZSB0aGlzIGNsYXNzIGluc3RlYWQgb2YgYFJvc1RlbnNvcmJvYXJkYGZvciBhIG1vcmUgY29udmVuaWVudCBkZXZlbG9wbWVudCBleHBlcmllbmNlLlxuICogU2VlIGh0dHBzOi8vd3d3LmFsaWJhYmFjbG91ZC5jb20vaGVscC9yb3MvZGV2ZWxvcGVyLXJlZmVyZW5jZS9hbGl5dW4tcGFpZGxjLXRlbnNvcmJvYXJkXG4gKi9cbmV4cG9ydCBjbGFzcyBUZW5zb3Jib2FyZCBleHRlbmRzIHJvcy5SZXNvdXJjZSB7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgVGVuc29yYm9hcmRJZDogVGVuc29yYm9hcmQgaWQuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJUZW5zb3Jib2FyZElkOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgVGVuc29yYm9hcmRVcmw6IFRlbnNvcmJvYXJkIHVybC5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0clRlbnNvcmJvYXJkVXJsOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQYXJhbSBzY29wZSAtIHNjb3BlIGluIHdoaWNoIHRoaXMgcmVzb3VyY2UgaXMgZGVmaW5lZFxuICAgICAqIFBhcmFtIGlkICAgIC0gc2NvcGVkIGlkIG9mIHRoZSByZXNvdXJjZVxuICAgICAqIFBhcmFtIHByb3BzIC0gcmVzb3VyY2UgcHJvcGVydGllc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiByb3MuQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogVGVuc29yYm9hcmRQcm9wcywgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6Ym9vbGVhbiA9IHRydWUpIHtcbiAgICAgICAgc3VwZXIoc2NvcGUsIGlkKTtcblxuICAgICAgICBjb25zdCByb3NUZW5zb3Jib2FyZCA9IG5ldyBSb3NUZW5zb3Jib2FyZCh0aGlzLCBpZCwgIHtcbiAgICAgICAgICAgIG1heFJ1bm5pbmdUaW1lTWludXRlczogcHJvcHMubWF4UnVubmluZ1RpbWVNaW51dGVzLFxuICAgICAgICAgICAgb3B0aW9uczogcHJvcHMub3B0aW9ucyxcbiAgICAgICAgICAgIG1lbW9yeTogcHJvcHMubWVtb3J5LFxuICAgICAgICAgICAgc3VtbWFyeVBhdGg6IHByb3BzLnN1bW1hcnlQYXRoLFxuICAgICAgICAgICAgc291cmNlSWQ6IHByb3BzLnNvdXJjZUlkLFxuICAgICAgICAgICAgc291cmNlVHlwZTogcHJvcHMuc291cmNlVHlwZSxcbiAgICAgICAgICAgIHdvcmtzcGFjZUlkOiBwcm9wcy53b3Jrc3BhY2VJZCxcbiAgICAgICAgICAgIGNwdTogcHJvcHMuY3B1LFxuICAgICAgICAgICAgdXJpOiBwcm9wcy51cmksXG4gICAgICAgICAgICBkYXRhU291cmNlczogcHJvcHMuZGF0YVNvdXJjZXMsXG4gICAgICAgICAgICBzdW1tYXJ5UmVsYXRpdmVQYXRoOiBwcm9wcy5zdW1tYXJ5UmVsYXRpdmVQYXRoLFxuICAgICAgICAgICAgZGF0YVNvdXJjZVR5cGU6IHByb3BzLmRhdGFTb3VyY2VUeXBlLFxuICAgICAgICAgICAgZGlzcGxheU5hbWU6IHByb3BzLmRpc3BsYXlOYW1lLFxuICAgICAgICAgICAgam9iSWQ6IHByb3BzLmpvYklkLFxuICAgICAgICAgICAgZGF0YVNvdXJjZUlkOiBwcm9wcy5kYXRhU291cmNlSWQsXG4gICAgICAgIH0sIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ICYmIHRoaXMuc3RhY2suZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQpO1xuICAgICAgICB0aGlzLnJlc291cmNlID0gcm9zVGVuc29yYm9hcmQ7XG4gICAgICAgIHRoaXMuYXR0clRlbnNvcmJvYXJkSWQgPSByb3NUZW5zb3Jib2FyZC5hdHRyVGVuc29yYm9hcmRJZDtcbiAgICAgICAgdGhpcy5hdHRyVGVuc29yYm9hcmRVcmwgPSByb3NUZW5zb3Jib2FyZC5hdHRyVGVuc29yYm9hcmRVcmw7XG4gICAgfVxufVxuIl19