"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SchedulerRule = exports.SchedulerRuleProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ddospro_generated_1 = require("./ddospro.generated");
Object.defineProperty(exports, "SchedulerRuleProperty", { enumerable: true, get: function () { return ddospro_generated_1.RosSchedulerRule; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::DDoSPro::SchedulerRule`, which is used to create a scheduling rule for Sec-Traffic Manager.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosSchedulerRule`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-ddospro-schedulerrule
 */
class SchedulerRule extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosSchedulerRule = new ddospro_generated_1.RosSchedulerRule(this, id, {
            resourceGroupId: props.resourceGroupId,
            param: props.param,
            ruleType: props.ruleType,
            rules: props.rules,
            ruleName: props.ruleName,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosSchedulerRule;
        this.attrRuleName = rosSchedulerRule.attrRuleName;
    }
}
exports.SchedulerRule = SchedulerRule;
//# sourceMappingURL=data:application/json;base64,