"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApplicationMonitor = exports.ApplicationMonitorProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ga_generated_1 = require("./ga.generated");
Object.defineProperty(exports, "ApplicationMonitorProperty", { enumerable: true, get: function () { return ga_generated_1.RosApplicationMonitor; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::GA::ApplicationMonitor`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosApplicationMonitor`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-ga-applicationmonitor
 */
class ApplicationMonitor extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosApplicationMonitor = new ga_generated_1.RosApplicationMonitor(this, id, {
            silenceTime: props.silenceTime,
            detectThreshold: props.detectThreshold,
            detectEnable: props.detectEnable,
            address: props.address,
            optionsJson: props.optionsJson,
            taskName: props.taskName,
            acceleratorId: props.acceleratorId,
            detectTimes: props.detectTimes,
            listenerId: props.listenerId,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosApplicationMonitor;
        this.attrTaskId = rosApplicationMonitor.attrTaskId;
    }
}
exports.ApplicationMonitor = ApplicationMonitor;
//# sourceMappingURL=data:application/json;base64,