"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SCIMServerCredential = exports.SCIMServerCredentialProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const cloudsso_generated_1 = require("./cloudsso.generated");
Object.defineProperty(exports, "SCIMServerCredentialProperty", { enumerable: true, get: function () { return cloudsso_generated_1.RosSCIMServerCredential; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::CloudSSO::SCIMServerCredential`, which is used to create a System for Cross-domain Identity Management (SCIM) credential.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosSCIMServerCredential`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-cloudsso-scimservercredential
 */
class SCIMServerCredential extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosSCIMServerCredential = new cloudsso_generated_1.RosSCIMServerCredential(this, id, {
            status: props.status === undefined || props.status === null ? 'Enabled' : props.status,
            directoryId: props.directoryId,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosSCIMServerCredential;
        this.attrCredentialId = rosSCIMServerCredential.attrCredentialId;
        this.attrCredentialSecret = rosSCIMServerCredential.attrCredentialSecret;
    }
}
exports.SCIMServerCredential = SCIMServerCredential;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NpbXNlcnZlcmNyZWRlbnRpYWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJzY2ltc2VydmVyY3JlZGVudGlhbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw4Q0FBOEM7QUFDOUMsNkRBQStEO0FBRTNCLDZHQUYzQiw0Q0FBdUIsT0FFZ0M7QUFzQmhFOzs7O0dBSUc7QUFDSCxNQUFhLG9CQUFxQixTQUFRLEdBQUcsQ0FBQyxRQUFRO0lBZ0JsRDs7OztPQUlHO0lBQ0gsWUFBWSxLQUFvQixFQUFFLEVBQVUsRUFBRSxLQUFnQyxFQUFFLG1DQUEyQyxJQUFJO1FBQzNILEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDakIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUM7UUFDYixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsZ0NBQWdDLEdBQUcsZ0NBQWdDLENBQUM7UUFFekUsTUFBTSx1QkFBdUIsR0FBRyxJQUFJLDRDQUF1QixDQUFDLElBQUksRUFBRSxFQUFFLEVBQUc7WUFDbkUsTUFBTSxFQUFFLEtBQUssQ0FBQyxNQUFNLEtBQUssU0FBUyxJQUFJLEtBQUssQ0FBQyxNQUFNLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxNQUFNO1lBQ3RGLFdBQVcsRUFBRSxLQUFLLENBQUMsV0FBVztTQUNqQyxFQUFFLGdDQUFnQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztRQUNwRixJQUFJLENBQUMsUUFBUSxHQUFHLHVCQUF1QixDQUFDO1FBQ3hDLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyx1QkFBdUIsQ0FBQyxnQkFBZ0IsQ0FBQztRQUNqRSxJQUFJLENBQUMsb0JBQW9CLEdBQUcsdUJBQXVCLENBQUMsb0JBQW9CLENBQUM7SUFDN0UsQ0FBQztDQUNKO0FBcENELG9EQW9DQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHJvcyBmcm9tICdAYWxpY2xvdWQvcm9zLWNkay1jb3JlJztcbmltcG9ydCB7IFJvc1NDSU1TZXJ2ZXJDcmVkZW50aWFsIH0gZnJvbSAnLi9jbG91ZHNzby5nZW5lcmF0ZWQnO1xuLy8gR2VuZXJhdGVkIGZyb20gdGhlIEFsaUNsb3VkIFJPUyBSZXNvdXJjZSBTcGVjaWZpY2F0aW9uXG5leHBvcnQgeyBSb3NTQ0lNU2VydmVyQ3JlZGVudGlhbCBhcyBTQ0lNU2VydmVyQ3JlZGVudGlhbFByb3BlcnR5IH07XG5cbi8qKlxuICogUHJvcGVydGllcyBmb3IgZGVmaW5pbmcgYSBgU0NJTVNlcnZlckNyZWRlbnRpYWxgLlxuICogU2VlIGh0dHBzOi8vd3d3LmFsaWJhYmFjbG91ZC5jb20vaGVscC9yb3MvZGV2ZWxvcGVyLXJlZmVyZW5jZS9hbGl5dW4tY2xvdWRzc28tc2NpbXNlcnZlcmNyZWRlbnRpYWxcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBTQ0lNU2VydmVyQ3JlZGVudGlhbFByb3BzIHtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGRpcmVjdG9yeUlkOiBUaGUgSUQgb2YgdGhlIGRpcmVjdG9yeS5cbiAgICAgKi9cbiAgICByZWFkb25seSBkaXJlY3RvcnlJZDogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgc3RhdHVzOiBUaGUgbmV3IHN0YXR1cyBvZiB0aGUgU0NJTSBjcmVkZW50aWFsLiBWYWxpZCB2YWx1ZXM6XG4gICAgICogLSBFbmFibGVkOiBUaGUgU0NJTSBjcmVkZW50aWFsIGlzIGVuYWJsZWQuXG4gICAgICogLSBEaXNhYmxlZDogVGhlIFNDSU0gY3JlZGVudGlhbCBpcyBkaXNhYmxlZC5cbiAgICAgKiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyBFbmFibGVkLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHN0YXR1cz86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcbn1cblxuLyoqXG4gKiBUaGlzIGNsYXNzIGVuY2Fwc3VsYXRlcyBhbmQgZXh0ZW5kcyB0aGUgUk9TIHJlc291cmNlIHR5cGUgYEFMSVlVTjo6Q2xvdWRTU086OlNDSU1TZXJ2ZXJDcmVkZW50aWFsYCwgd2hpY2ggaXMgdXNlZCB0byBjcmVhdGUgYSBTeXN0ZW0gZm9yIENyb3NzLWRvbWFpbiBJZGVudGl0eSBNYW5hZ2VtZW50IChTQ0lNKSBjcmVkZW50aWFsLlxuICogQE5vdGUgVGhpcyBjbGFzcyBtYXkgaGF2ZSBzb21lIG5ldyBmdW5jdGlvbnMgdG8gZmFjaWxpdGF0ZSBkZXZlbG9wbWVudCwgc28gaXQgaXMgcmVjb21tZW5kZWQgdG8gdXNlIHRoaXMgY2xhc3MgaW5zdGVhZCBvZiBgUm9zU0NJTVNlcnZlckNyZWRlbnRpYWxgZm9yIGEgbW9yZSBjb252ZW5pZW50IGRldmVsb3BtZW50IGV4cGVyaWVuY2UuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2FsaXl1bi1jbG91ZHNzby1zY2ltc2VydmVyY3JlZGVudGlhbFxuICovXG5leHBvcnQgY2xhc3MgU0NJTVNlcnZlckNyZWRlbnRpYWwgZXh0ZW5kcyByb3MuUmVzb3VyY2Uge1xuICAgIHByb3RlY3RlZCBzY29wZTogcm9zLkNvbnN0cnVjdDtcbiAgICBwcm90ZWN0ZWQgaWQ6IHN0cmluZztcbiAgICBwcm90ZWN0ZWQgcHJvcHM6IFNDSU1TZXJ2ZXJDcmVkZW50aWFsUHJvcHM7XG4gICAgcHJvdGVjdGVkIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OiBib29sZWFuO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIENyZWRlbnRpYWxJZDogVGhlIElEIG9mIHRoZSBTQ0lNIGNyZWRlbnRpYWwuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJDcmVkZW50aWFsSWQ6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBDcmVkZW50aWFsU2VjcmV0OiBUaGUgc2VjcmV0IG9mIHRoZSBTQ0lNIGNyZWRlbnRpYWwuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJDcmVkZW50aWFsU2VjcmV0OiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQYXJhbSBzY29wZSAtIHNjb3BlIGluIHdoaWNoIHRoaXMgcmVzb3VyY2UgaXMgZGVmaW5lZFxuICAgICAqIFBhcmFtIGlkICAgIC0gc2NvcGVkIGlkIG9mIHRoZSByZXNvdXJjZVxuICAgICAqIFBhcmFtIHByb3BzIC0gcmVzb3VyY2UgcHJvcGVydGllc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiByb3MuQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogU0NJTVNlcnZlckNyZWRlbnRpYWxQcm9wcywgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6Ym9vbGVhbiA9IHRydWUpIHtcbiAgICAgICAgc3VwZXIoc2NvcGUsIGlkKTtcbiAgICAgICAgdGhpcy5zY29wZSA9IHNjb3BlO1xuICAgICAgICB0aGlzLmlkID0gaWQ7XG4gICAgICAgIHRoaXMucHJvcHMgPSBwcm9wcztcbiAgICAgICAgdGhpcy5lbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCA9IGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50O1xuXG4gICAgICAgIGNvbnN0IHJvc1NDSU1TZXJ2ZXJDcmVkZW50aWFsID0gbmV3IFJvc1NDSU1TZXJ2ZXJDcmVkZW50aWFsKHRoaXMsIGlkLCAge1xuICAgICAgICAgICAgc3RhdHVzOiBwcm9wcy5zdGF0dXMgPT09IHVuZGVmaW5lZCB8fCBwcm9wcy5zdGF0dXMgPT09IG51bGwgPyAnRW5hYmxlZCcgOiBwcm9wcy5zdGF0dXMsXG4gICAgICAgICAgICBkaXJlY3RvcnlJZDogcHJvcHMuZGlyZWN0b3J5SWQsXG4gICAgICAgIH0sIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ICYmIHRoaXMuc3RhY2suZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQpO1xuICAgICAgICB0aGlzLnJlc291cmNlID0gcm9zU0NJTVNlcnZlckNyZWRlbnRpYWw7XG4gICAgICAgIHRoaXMuYXR0ckNyZWRlbnRpYWxJZCA9IHJvc1NDSU1TZXJ2ZXJDcmVkZW50aWFsLmF0dHJDcmVkZW50aWFsSWQ7XG4gICAgICAgIHRoaXMuYXR0ckNyZWRlbnRpYWxTZWNyZXQgPSByb3NTQ0lNU2VydmVyQ3JlZGVudGlhbC5hdHRyQ3JlZGVudGlhbFNlY3JldDtcbiAgICB9XG59XG4iXX0=