"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LoadBalancer = exports.LoadBalancerProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const slb_generated_1 = require("./slb.generated");
Object.defineProperty(exports, "LoadBalancerProperty", { enumerable: true, get: function () { return slb_generated_1.RosLoadBalancer; } });
/**
 * This class encapsulates and extends the ROS resource type `DATASOURCE::SLB::LoadBalancer`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosLoadBalancer`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/datasource-slb-loadbalancer
 */
class LoadBalancer extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosLoadBalancer = new slb_generated_1.RosLoadBalancer(this, id, {
            loadBalancerId: props.loadBalancerId,
            refreshOptions: props.refreshOptions === undefined || props.refreshOptions === null ? 'Never' : props.refreshOptions,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosLoadBalancer;
        this.attrAddress = rosLoadBalancer.attrAddress;
        this.attrAddressIpVersion = rosLoadBalancer.attrAddressIpVersion;
        this.attrAddressType = rosLoadBalancer.attrAddressType;
        this.attrAutoReleaseTime = rosLoadBalancer.attrAutoReleaseTime;
        this.attrBackendServers = rosLoadBalancer.attrBackendServers;
        this.attrBandwidth = rosLoadBalancer.attrBandwidth;
        this.attrCreateTime = rosLoadBalancer.attrCreateTime;
        this.attrCreateTimeStamp = rosLoadBalancer.attrCreateTimeStamp;
        this.attrDeleteProtection = rosLoadBalancer.attrDeleteProtection;
        this.attrEndTime = rosLoadBalancer.attrEndTime;
        this.attrEndTimeStamp = rosLoadBalancer.attrEndTimeStamp;
        this.attrInstanceChargeType = rosLoadBalancer.attrInstanceChargeType;
        this.attrInternetChargeType = rosLoadBalancer.attrInternetChargeType;
        this.attrListenerPortsAndProtocal = rosLoadBalancer.attrListenerPortsAndProtocal;
        this.attrListenerPortsAndProtocol = rosLoadBalancer.attrListenerPortsAndProtocol;
        this.attrLoadBalancerId = rosLoadBalancer.attrLoadBalancerId;
        this.attrLoadBalancerName = rosLoadBalancer.attrLoadBalancerName;
        this.attrLoadBalancerSpec = rosLoadBalancer.attrLoadBalancerSpec;
        this.attrMasterZoneId = rosLoadBalancer.attrMasterZoneId;
        this.attrModificationProtectionReason = rosLoadBalancer.attrModificationProtectionReason;
        this.attrModificationProtectionStatus = rosLoadBalancer.attrModificationProtectionStatus;
        this.attrNetworkType = rosLoadBalancer.attrNetworkType;
        this.attrPaymentType = rosLoadBalancer.attrPaymentType;
        this.attrRegionIdAlias = rosLoadBalancer.attrRegionIdAlias;
        this.attrRenewalCycUnit = rosLoadBalancer.attrRenewalCycUnit;
        this.attrRenewalDuration = rosLoadBalancer.attrRenewalDuration;
        this.attrRenewalStatus = rosLoadBalancer.attrRenewalStatus;
        this.attrResourceGroupId = rosLoadBalancer.attrResourceGroupId;
        this.attrSlaveZoneId = rosLoadBalancer.attrSlaveZoneId;
        this.attrTags = rosLoadBalancer.attrTags;
        this.attrVSwitchId = rosLoadBalancer.attrVSwitchId;
        this.attrVpcId = rosLoadBalancer.attrVpcId;
    }
}
exports.LoadBalancer = LoadBalancer;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9hZGJhbGFuY2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibG9hZGJhbGFuY2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDhDQUE4QztBQUM5QyxtREFBa0Q7QUFFdEIscUdBRm5CLCtCQUFlLE9BRXdCO0FBc0JoRDs7OztHQUlHO0FBQ0gsTUFBYSxZQUFhLFNBQVEsR0FBRyxDQUFDLFFBQVE7SUFzSzFDOzs7O09BSUc7SUFDSCxZQUFZLEtBQW9CLEVBQUUsRUFBVSxFQUFFLEtBQXdCLEVBQUUsbUNBQTJDLElBQUk7UUFDbkgsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNqQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUNiLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxnQ0FBZ0MsR0FBRyxnQ0FBZ0MsQ0FBQztRQUV6RSxNQUFNLGVBQWUsR0FBRyxJQUFJLCtCQUFlLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRztZQUNuRCxjQUFjLEVBQUUsS0FBSyxDQUFDLGNBQWM7WUFDcEMsY0FBYyxFQUFFLEtBQUssQ0FBQyxjQUFjLEtBQUssU0FBUyxJQUFJLEtBQUssQ0FBQyxjQUFjLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxjQUFjO1NBQ3ZILEVBQUUsZ0NBQWdDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO1FBQ3BGLElBQUksQ0FBQyxRQUFRLEdBQUcsZUFBZSxDQUFDO1FBQ2hDLElBQUksQ0FBQyxXQUFXLEdBQUcsZUFBZSxDQUFDLFdBQVcsQ0FBQztRQUMvQyxJQUFJLENBQUMsb0JBQW9CLEdBQUcsZUFBZSxDQUFDLG9CQUFvQixDQUFDO1FBQ2pFLElBQUksQ0FBQyxlQUFlLEdBQUcsZUFBZSxDQUFDLGVBQWUsQ0FBQztRQUN2RCxJQUFJLENBQUMsbUJBQW1CLEdBQUcsZUFBZSxDQUFDLG1CQUFtQixDQUFDO1FBQy9ELElBQUksQ0FBQyxrQkFBa0IsR0FBRyxlQUFlLENBQUMsa0JBQWtCLENBQUM7UUFDN0QsSUFBSSxDQUFDLGFBQWEsR0FBRyxlQUFlLENBQUMsYUFBYSxDQUFDO1FBQ25ELElBQUksQ0FBQyxjQUFjLEdBQUcsZUFBZSxDQUFDLGNBQWMsQ0FBQztRQUNyRCxJQUFJLENBQUMsbUJBQW1CLEdBQUcsZUFBZSxDQUFDLG1CQUFtQixDQUFDO1FBQy9ELElBQUksQ0FBQyxvQkFBb0IsR0FBRyxlQUFlLENBQUMsb0JBQW9CLENBQUM7UUFDakUsSUFBSSxDQUFDLFdBQVcsR0FBRyxlQUFlLENBQUMsV0FBVyxDQUFDO1FBQy9DLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxlQUFlLENBQUMsZ0JBQWdCLENBQUM7UUFDekQsSUFBSSxDQUFDLHNCQUFzQixHQUFHLGVBQWUsQ0FBQyxzQkFBc0IsQ0FBQztRQUNyRSxJQUFJLENBQUMsc0JBQXNCLEdBQUcsZUFBZSxDQUFDLHNCQUFzQixDQUFDO1FBQ3JFLElBQUksQ0FBQyw0QkFBNEIsR0FBRyxlQUFlLENBQUMsNEJBQTRCLENBQUM7UUFDakYsSUFBSSxDQUFDLDRCQUE0QixHQUFHLGVBQWUsQ0FBQyw0QkFBNEIsQ0FBQztRQUNqRixJQUFJLENBQUMsa0JBQWtCLEdBQUcsZUFBZSxDQUFDLGtCQUFrQixDQUFDO1FBQzdELElBQUksQ0FBQyxvQkFBb0IsR0FBRyxlQUFlLENBQUMsb0JBQW9CLENBQUM7UUFDakUsSUFBSSxDQUFDLG9CQUFvQixHQUFHLGVBQWUsQ0FBQyxvQkFBb0IsQ0FBQztRQUNqRSxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsZUFBZSxDQUFDLGdCQUFnQixDQUFDO1FBQ3pELElBQUksQ0FBQyxnQ0FBZ0MsR0FBRyxlQUFlLENBQUMsZ0NBQWdDLENBQUM7UUFDekYsSUFBSSxDQUFDLGdDQUFnQyxHQUFHLGVBQWUsQ0FBQyxnQ0FBZ0MsQ0FBQztRQUN6RixJQUFJLENBQUMsZUFBZSxHQUFHLGVBQWUsQ0FBQyxlQUFlLENBQUM7UUFDdkQsSUFBSSxDQUFDLGVBQWUsR0FBRyxlQUFlLENBQUMsZUFBZSxDQUFDO1FBQ3ZELElBQUksQ0FBQyxpQkFBaUIsR0FBRyxlQUFlLENBQUMsaUJBQWlCLENBQUM7UUFDM0QsSUFBSSxDQUFDLGtCQUFrQixHQUFHLGVBQWUsQ0FBQyxrQkFBa0IsQ0FBQztRQUM3RCxJQUFJLENBQUMsbUJBQW1CLEdBQUcsZUFBZSxDQUFDLG1CQUFtQixDQUFDO1FBQy9ELElBQUksQ0FBQyxpQkFBaUIsR0FBRyxlQUFlLENBQUMsaUJBQWlCLENBQUM7UUFDM0QsSUFBSSxDQUFDLG1CQUFtQixHQUFHLGVBQWUsQ0FBQyxtQkFBbUIsQ0FBQztRQUMvRCxJQUFJLENBQUMsZUFBZSxHQUFHLGVBQWUsQ0FBQyxlQUFlLENBQUM7UUFDdkQsSUFBSSxDQUFDLFFBQVEsR0FBRyxlQUFlLENBQUMsUUFBUSxDQUFDO1FBQ3pDLElBQUksQ0FBQyxhQUFhLEdBQUcsZUFBZSxDQUFDLGFBQWEsQ0FBQztRQUNuRCxJQUFJLENBQUMsU0FBUyxHQUFHLGVBQWUsQ0FBQyxTQUFTLENBQUM7SUFDL0MsQ0FBQztDQUNKO0FBeE5ELG9DQXdOQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHJvcyBmcm9tICdAYWxpY2xvdWQvcm9zLWNkay1jb3JlJztcbmltcG9ydCB7IFJvc0xvYWRCYWxhbmNlciB9IGZyb20gJy4vc2xiLmdlbmVyYXRlZCc7XG4vLyBHZW5lcmF0ZWQgZnJvbSB0aGUgQWxpQ2xvdWQgUk9TIFJlc291cmNlIFNwZWNpZmljYXRpb25cbmV4cG9ydCB7IFJvc0xvYWRCYWxhbmNlciBhcyBMb2FkQmFsYW5jZXJQcm9wZXJ0eSB9O1xuXG4vKipcbiAqIFByb3BlcnRpZXMgZm9yIGRlZmluaW5nIGEgYExvYWRCYWxhbmNlcmAuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2RhdGFzb3VyY2Utc2xiLWxvYWRiYWxhbmNlclxuICovXG5leHBvcnQgaW50ZXJmYWNlIExvYWRCYWxhbmNlclByb3BzIHtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGxvYWRCYWxhbmNlcklkOiBUaGUgQ0xCIGluc3RhbmNlIElELlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGxvYWRCYWxhbmNlcklkOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSByZWZyZXNoT3B0aW9uczogVGhlIHJlZnJlc2ggc3RyYXRlZ3kgZm9yIHRoZSBkYXRhc291cmNlIHJlc291cmNlIHdoZW4gdGhlIHN0YWNrIGlzIHVwZGF0ZWQuIFZhbGlkIHZhbHVlczpcbiAgICAgKiAtIE5ldmVyOiBOZXZlciByZWZyZXNoIHRoZSBkYXRhc291cmNlIHJlc291cmNlIHdoZW4gdGhlIHN0YWNrIGlzIHVwZGF0ZWQuXG4gICAgICogLSBBbHdheXM6IEFsd2F5cyByZWZyZXNoIHRoZSBkYXRhc291cmNlIHJlc291cmNlIHdoZW4gdGhlIHN0YWNrIGlzIHVwZGF0ZWQuXG4gICAgICogRGVmYXVsdCBpcyBOZXZlci5cbiAgICAgKi9cbiAgICByZWFkb25seSByZWZyZXNoT3B0aW9ucz86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcbn1cblxuLyoqXG4gKiBUaGlzIGNsYXNzIGVuY2Fwc3VsYXRlcyBhbmQgZXh0ZW5kcyB0aGUgUk9TIHJlc291cmNlIHR5cGUgYERBVEFTT1VSQ0U6OlNMQjo6TG9hZEJhbGFuY2VyYC5cbiAqIEBOb3RlIFRoaXMgY2xhc3MgbWF5IGhhdmUgc29tZSBuZXcgZnVuY3Rpb25zIHRvIGZhY2lsaXRhdGUgZGV2ZWxvcG1lbnQsIHNvIGl0IGlzIHJlY29tbWVuZGVkIHRvIHVzZSB0aGlzIGNsYXNzIGluc3RlYWQgb2YgYFJvc0xvYWRCYWxhbmNlcmBmb3IgYSBtb3JlIGNvbnZlbmllbnQgZGV2ZWxvcG1lbnQgZXhwZXJpZW5jZS5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvZGF0YXNvdXJjZS1zbGItbG9hZGJhbGFuY2VyXG4gKi9cbmV4cG9ydCBjbGFzcyBMb2FkQmFsYW5jZXIgZXh0ZW5kcyByb3MuUmVzb3VyY2Uge1xuICAgIHByb3RlY3RlZCBzY29wZTogcm9zLkNvbnN0cnVjdDtcbiAgICBwcm90ZWN0ZWQgaWQ6IHN0cmluZztcbiAgICBwcm90ZWN0ZWQgcHJvcHM6IExvYWRCYWxhbmNlclByb3BzO1xuICAgIHByb3RlY3RlZCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBBZGRyZXNzOiBUaGUgc2VydmljZSBJUCBhZGRyZXNzIG9mIHRoZSBDTEIgaW5zdGFuY2UuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJBZGRyZXNzOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgQWRkcmVzc0lwVmVyc2lvbjogVGhlIHZlcnNpb24gb2YgdGhlIElQIGFkZHJlc3MuIFZhbGlkIHZhbHVlczogaXB2NCBhbmQgaXB2Ni5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckFkZHJlc3NJcFZlcnNpb246IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBBZGRyZXNzVHlwZTogVGhlIGFkZHJlc3MgdHlwZSBvZiB0aGUgQ0xCIGluc3RhbmNlLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyQWRkcmVzc1R5cGU6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBBdXRvUmVsZWFzZVRpbWU6IFRoZSB0aW1lc3RhbXAgZ2VuZXJhdGVkIHdoZW4gdGhlIENMQiBpbnN0YW5jZSBpcyByZWxlYXNlZC5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckF1dG9SZWxlYXNlVGltZTogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIEJhY2tlbmRTZXJ2ZXJzOiBUaGUgYmFja2VuZCBzZXJ2ZXJzIG9mIHRoZSBDTEIgaW5zdGFuY2UuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJCYWNrZW5kU2VydmVyczogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIEJhbmR3aWR0aDogVGhlIG1heGltdW0gYmFuZHdpZHRoIG9mIHRoZSBJbnRlcm5ldC1mYWNpbmcgQ0xCIGluc3RhbmNlIHRoYXQgaXMgYmlsbGVkIG9uIGEgcGF5LWJ5LWJhbmR3aWR0aCBiYXNpcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckJhbmR3aWR0aDogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIENyZWF0ZVRpbWU6IFRoZSB0aW1lIHdoZW4gdGhlIENMQiBpbnN0YW5jZSB3YXMgY3JlYXRlZC5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckNyZWF0ZVRpbWU6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBDcmVhdGVUaW1lU3RhbXA6IFRoZSB0aW1lc3RhbXAgZ2VuZXJhdGVkIHdoZW4gdGhlIENBIGNlcnRpZmljYXRlIGlzIHVwbG9hZGVkLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyQ3JlYXRlVGltZVN0YW1wOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgRGVsZXRlUHJvdGVjdGlvbjogSW5kaWNhdGVzIHdoZXRoZXIgZGVsZXRpb24gcHJvdGVjdGlvbiBpcyBlbmFibGVkIGZvciB0aGUgQ0xCIGluc3RhbmNlLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyRGVsZXRlUHJvdGVjdGlvbjogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIEVuZFRpbWU6IFRoZSB0aW1lIHdoZW4gdGhlIENMQiBpbnN0YW5jZSBleHBpcmVzLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyRW5kVGltZTogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIEVuZFRpbWVTdGFtcDogVGhlIHRpbWVzdGFtcCB0aGF0IGluZGljYXRlcyB0aGUgZXhwaXJhdGlvbiB0aW1lIG9mIHRoZSBDTEIgaW5zdGFuY2UuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJFbmRUaW1lU3RhbXA6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBJbnN0YW5jZUNoYXJnZVR5cGU6IEluc3RhbmNlIGJpbGxpbmcgbWV0aG9kLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRySW5zdGFuY2VDaGFyZ2VUeXBlOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgSW50ZXJuZXRDaGFyZ2VUeXBlOiBUaGUgbWV0ZXJpbmcgbWV0aG9kIG9mIHRoZSBJbnRlcm5ldC1mYWNpbmcgQ0xCIGluc3RhbmNlLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRySW50ZXJuZXRDaGFyZ2VUeXBlOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgTGlzdGVuZXJQb3J0c0FuZFByb3RvY2FsOiBUaGUgcG9ydHMgb3IgcHJvdG9jb2xzIG9mIHRoZSBsaXN0ZW5lcnMuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJMaXN0ZW5lclBvcnRzQW5kUHJvdG9jYWw6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBMaXN0ZW5lclBvcnRzQW5kUHJvdG9jb2w6IFRoZSBwb3J0cyBvciBwcm90b2NvbHMgb2YgdGhlIGxpc3RlbmVycy5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckxpc3RlbmVyUG9ydHNBbmRQcm90b2NvbDogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIExvYWRCYWxhbmNlcklkOiBUaGUgQ0xCIGluc3RhbmNlIElELlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyTG9hZEJhbGFuY2VySWQ6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBMb2FkQmFsYW5jZXJOYW1lOiBUaGUgbmFtZSBvZiB0aGUgQ0xCIGluc3RhbmNlLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyTG9hZEJhbGFuY2VyTmFtZTogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIExvYWRCYWxhbmNlclNwZWM6IFRoZSBzcGVjaWZpY2F0aW9uIG9mIHRoZSBDTEIgaW5zdGFuY2UuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJMb2FkQmFsYW5jZXJTcGVjOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgTWFzdGVyWm9uZUlkOiBUaGUgSUQgb2YgdGhlIHByaW1hcnkgem9uZSB0byB3aGljaCB0aGUgQ0xCIGluc3RhbmNlIGJlbG9uZ3MuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJNYXN0ZXJab25lSWQ6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBNb2RpZmljYXRpb25Qcm90ZWN0aW9uUmVhc29uOiBUaGUgcmVhc29uIHdoeSB0aGUgY29uZmlndXJhdGlvbiByZWFkLW9ubHkgbW9kZSBpcyBlbmFibGVkLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyTW9kaWZpY2F0aW9uUHJvdGVjdGlvblJlYXNvbjogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIE1vZGlmaWNhdGlvblByb3RlY3Rpb25TdGF0dXM6IExvYWQgYmFsYW5jaW5nIG1vZGlmaWVzIHRoZSBwcm90ZWN0aW9uIHN0YXRlLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyTW9kaWZpY2F0aW9uUHJvdGVjdGlvblN0YXR1czogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIE5ldHdvcmtUeXBlOiBUaGUgbmV0d29yayB0eXBlIG9mIHRoZSBDTEIgaW5zdGFuY2UuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJOZXR3b3JrVHlwZTogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIFBheW1lbnRUeXBlOiBMb2FkIGJhbGFuY2luZyBpbnN0YW5jZSBwYXltZW50IHR5cGUuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJQYXltZW50VHlwZTogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIFJlZ2lvbklkQWxpYXM6IFRoZSBhbGlhcyBvZiB0aGUgcmVnaW9uIHRvIHdoaWNoIHRoZSBDTEIgaW5zdGFuY2UgYmVsb25ncy5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0clJlZ2lvbklkQWxpYXM6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBSZW5ld2FsQ3ljVW5pdDogVGhlIGF1dG8tcmVuZXdhbCBjeWNsZS4gVmFsaWQgdmFsdWVzOiBZZWFyIGFuZCBNb250aC4gRGVmYXVsdCB2YWx1ZTogTW9udGguXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJSZW5ld2FsQ3ljVW5pdDogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIFJlbmV3YWxEdXJhdGlvbjogVGhlIGF1dG8tcmVuZXdhbCBkdXJhdGlvbi4gVGhpcyBwYXJhbWV0ZXIgaXMgdmFsaWQgb25seSBpZiBSZW5ld2FsU3RhdHVzIGlzIHNldCB0byBBdXRvUmVuZXdhbC5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0clJlbmV3YWxEdXJhdGlvbjogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIFJlbmV3YWxTdGF0dXM6IEluZGljYXRlcyB3aGV0aGVyIGF1dG8tcmVuZXdhbCBpcyBlbmFibGVkLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyUmVuZXdhbFN0YXR1czogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIFJlc291cmNlR3JvdXBJZDogVGhlIHJlc291cmNlIGdyb3VwIElELlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyUmVzb3VyY2VHcm91cElkOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgU2xhdmVab25lSWQ6IFRoZSBJRCBvZiB0aGUgc2Vjb25kYXJ5IHpvbmUgdG8gd2hpY2ggdGhlIENMQiBpbnN0YW5jZSBiZWxvbmdzLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyU2xhdmVab25lSWQ6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBUYWdzOiBUaGUgdGFncyBvZiB0aGUgQ0xCIGluc3RhbmNlLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyVGFnczogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIFZTd2l0Y2hJZDogVGhlIElEIG9mIHRoZSB2U3dpdGNoIHRvIHdoaWNoIHRoZSBpbnRlcm5hbC1mYWNpbmcgQ0xCIGluc3RhbmNlIGJlbG9uZ3MuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJWU3dpdGNoSWQ6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBWcGNJZDogVGhlIElEIG9mIHRoZSB2aXJ0dWFsIHByaXZhdGUgY2xvdWQgKFZQQykgd2hlcmUgdGhlIGludGVybmFsLWZhY2luZyBDTEIgaW5zdGFuY2UgaXMgZGVwbG95ZWQuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJWcGNJZDogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUGFyYW0gc2NvcGUgLSBzY29wZSBpbiB3aGljaCB0aGlzIHJlc291cmNlIGlzIGRlZmluZWRcbiAgICAgKiBQYXJhbSBpZCAgICAtIHNjb3BlZCBpZCBvZiB0aGUgcmVzb3VyY2VcbiAgICAgKiBQYXJhbSBwcm9wcyAtIHJlc291cmNlIHByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihzY29wZTogcm9zLkNvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IExvYWRCYWxhbmNlclByb3BzLCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDpib29sZWFuID0gdHJ1ZSkge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQpO1xuICAgICAgICB0aGlzLnNjb3BlID0gc2NvcGU7XG4gICAgICAgIHRoaXMuaWQgPSBpZDtcbiAgICAgICAgdGhpcy5wcm9wcyA9IHByb3BzO1xuICAgICAgICB0aGlzLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ID0gZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ7XG5cbiAgICAgICAgY29uc3Qgcm9zTG9hZEJhbGFuY2VyID0gbmV3IFJvc0xvYWRCYWxhbmNlcih0aGlzLCBpZCwgIHtcbiAgICAgICAgICAgIGxvYWRCYWxhbmNlcklkOiBwcm9wcy5sb2FkQmFsYW5jZXJJZCxcbiAgICAgICAgICAgIHJlZnJlc2hPcHRpb25zOiBwcm9wcy5yZWZyZXNoT3B0aW9ucyA9PT0gdW5kZWZpbmVkIHx8IHByb3BzLnJlZnJlc2hPcHRpb25zID09PSBudWxsID8gJ05ldmVyJyA6IHByb3BzLnJlZnJlc2hPcHRpb25zLFxuICAgICAgICB9LCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCAmJiB0aGlzLnN0YWNrLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50KTtcbiAgICAgICAgdGhpcy5yZXNvdXJjZSA9IHJvc0xvYWRCYWxhbmNlcjtcbiAgICAgICAgdGhpcy5hdHRyQWRkcmVzcyA9IHJvc0xvYWRCYWxhbmNlci5hdHRyQWRkcmVzcztcbiAgICAgICAgdGhpcy5hdHRyQWRkcmVzc0lwVmVyc2lvbiA9IHJvc0xvYWRCYWxhbmNlci5hdHRyQWRkcmVzc0lwVmVyc2lvbjtcbiAgICAgICAgdGhpcy5hdHRyQWRkcmVzc1R5cGUgPSByb3NMb2FkQmFsYW5jZXIuYXR0ckFkZHJlc3NUeXBlO1xuICAgICAgICB0aGlzLmF0dHJBdXRvUmVsZWFzZVRpbWUgPSByb3NMb2FkQmFsYW5jZXIuYXR0ckF1dG9SZWxlYXNlVGltZTtcbiAgICAgICAgdGhpcy5hdHRyQmFja2VuZFNlcnZlcnMgPSByb3NMb2FkQmFsYW5jZXIuYXR0ckJhY2tlbmRTZXJ2ZXJzO1xuICAgICAgICB0aGlzLmF0dHJCYW5kd2lkdGggPSByb3NMb2FkQmFsYW5jZXIuYXR0ckJhbmR3aWR0aDtcbiAgICAgICAgdGhpcy5hdHRyQ3JlYXRlVGltZSA9IHJvc0xvYWRCYWxhbmNlci5hdHRyQ3JlYXRlVGltZTtcbiAgICAgICAgdGhpcy5hdHRyQ3JlYXRlVGltZVN0YW1wID0gcm9zTG9hZEJhbGFuY2VyLmF0dHJDcmVhdGVUaW1lU3RhbXA7XG4gICAgICAgIHRoaXMuYXR0ckRlbGV0ZVByb3RlY3Rpb24gPSByb3NMb2FkQmFsYW5jZXIuYXR0ckRlbGV0ZVByb3RlY3Rpb247XG4gICAgICAgIHRoaXMuYXR0ckVuZFRpbWUgPSByb3NMb2FkQmFsYW5jZXIuYXR0ckVuZFRpbWU7XG4gICAgICAgIHRoaXMuYXR0ckVuZFRpbWVTdGFtcCA9IHJvc0xvYWRCYWxhbmNlci5hdHRyRW5kVGltZVN0YW1wO1xuICAgICAgICB0aGlzLmF0dHJJbnN0YW5jZUNoYXJnZVR5cGUgPSByb3NMb2FkQmFsYW5jZXIuYXR0ckluc3RhbmNlQ2hhcmdlVHlwZTtcbiAgICAgICAgdGhpcy5hdHRySW50ZXJuZXRDaGFyZ2VUeXBlID0gcm9zTG9hZEJhbGFuY2VyLmF0dHJJbnRlcm5ldENoYXJnZVR5cGU7XG4gICAgICAgIHRoaXMuYXR0ckxpc3RlbmVyUG9ydHNBbmRQcm90b2NhbCA9IHJvc0xvYWRCYWxhbmNlci5hdHRyTGlzdGVuZXJQb3J0c0FuZFByb3RvY2FsO1xuICAgICAgICB0aGlzLmF0dHJMaXN0ZW5lclBvcnRzQW5kUHJvdG9jb2wgPSByb3NMb2FkQmFsYW5jZXIuYXR0ckxpc3RlbmVyUG9ydHNBbmRQcm90b2NvbDtcbiAgICAgICAgdGhpcy5hdHRyTG9hZEJhbGFuY2VySWQgPSByb3NMb2FkQmFsYW5jZXIuYXR0ckxvYWRCYWxhbmNlcklkO1xuICAgICAgICB0aGlzLmF0dHJMb2FkQmFsYW5jZXJOYW1lID0gcm9zTG9hZEJhbGFuY2VyLmF0dHJMb2FkQmFsYW5jZXJOYW1lO1xuICAgICAgICB0aGlzLmF0dHJMb2FkQmFsYW5jZXJTcGVjID0gcm9zTG9hZEJhbGFuY2VyLmF0dHJMb2FkQmFsYW5jZXJTcGVjO1xuICAgICAgICB0aGlzLmF0dHJNYXN0ZXJab25lSWQgPSByb3NMb2FkQmFsYW5jZXIuYXR0ck1hc3RlclpvbmVJZDtcbiAgICAgICAgdGhpcy5hdHRyTW9kaWZpY2F0aW9uUHJvdGVjdGlvblJlYXNvbiA9IHJvc0xvYWRCYWxhbmNlci5hdHRyTW9kaWZpY2F0aW9uUHJvdGVjdGlvblJlYXNvbjtcbiAgICAgICAgdGhpcy5hdHRyTW9kaWZpY2F0aW9uUHJvdGVjdGlvblN0YXR1cyA9IHJvc0xvYWRCYWxhbmNlci5hdHRyTW9kaWZpY2F0aW9uUHJvdGVjdGlvblN0YXR1cztcbiAgICAgICAgdGhpcy5hdHRyTmV0d29ya1R5cGUgPSByb3NMb2FkQmFsYW5jZXIuYXR0ck5ldHdvcmtUeXBlO1xuICAgICAgICB0aGlzLmF0dHJQYXltZW50VHlwZSA9IHJvc0xvYWRCYWxhbmNlci5hdHRyUGF5bWVudFR5cGU7XG4gICAgICAgIHRoaXMuYXR0clJlZ2lvbklkQWxpYXMgPSByb3NMb2FkQmFsYW5jZXIuYXR0clJlZ2lvbklkQWxpYXM7XG4gICAgICAgIHRoaXMuYXR0clJlbmV3YWxDeWNVbml0ID0gcm9zTG9hZEJhbGFuY2VyLmF0dHJSZW5ld2FsQ3ljVW5pdDtcbiAgICAgICAgdGhpcy5hdHRyUmVuZXdhbER1cmF0aW9uID0gcm9zTG9hZEJhbGFuY2VyLmF0dHJSZW5ld2FsRHVyYXRpb247XG4gICAgICAgIHRoaXMuYXR0clJlbmV3YWxTdGF0dXMgPSByb3NMb2FkQmFsYW5jZXIuYXR0clJlbmV3YWxTdGF0dXM7XG4gICAgICAgIHRoaXMuYXR0clJlc291cmNlR3JvdXBJZCA9IHJvc0xvYWRCYWxhbmNlci5hdHRyUmVzb3VyY2VHcm91cElkO1xuICAgICAgICB0aGlzLmF0dHJTbGF2ZVpvbmVJZCA9IHJvc0xvYWRCYWxhbmNlci5hdHRyU2xhdmVab25lSWQ7XG4gICAgICAgIHRoaXMuYXR0clRhZ3MgPSByb3NMb2FkQmFsYW5jZXIuYXR0clRhZ3M7XG4gICAgICAgIHRoaXMuYXR0clZTd2l0Y2hJZCA9IHJvc0xvYWRCYWxhbmNlci5hdHRyVlN3aXRjaElkO1xuICAgICAgICB0aGlzLmF0dHJWcGNJZCA9IHJvc0xvYWRCYWxhbmNlci5hdHRyVnBjSWQ7XG4gICAgfVxufVxuIl19