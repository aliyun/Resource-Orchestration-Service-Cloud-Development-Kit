"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LoadBalancerTCPListener = exports.LoadBalancerTCPListenerProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const slb_generated_1 = require("./slb.generated");
Object.defineProperty(exports, "LoadBalancerTCPListenerProperty", { enumerable: true, get: function () { return slb_generated_1.RosLoadBalancerTCPListener; } });
/**
 * This class encapsulates and extends the ROS resource type `DATASOURCE::SLB::LoadBalancerTCPListener`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosLoadBalancerTCPListener`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/datasource-slb-loadbalancertcplistener
 */
class LoadBalancerTCPListener extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosLoadBalancerTCPListener = new slb_generated_1.RosLoadBalancerTCPListener(this, id, {
            listenerPort: props.listenerPort,
            loadBalancerId: props.loadBalancerId,
            refreshOptions: props.refreshOptions === undefined || props.refreshOptions === null ? 'Never' : props.refreshOptions,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosLoadBalancerTCPListener;
        this.attrAclId = rosLoadBalancerTCPListener.attrAclId;
        this.attrAclIds = rosLoadBalancerTCPListener.attrAclIds;
        this.attrAclStatus = rosLoadBalancerTCPListener.attrAclStatus;
        this.attrAclType = rosLoadBalancerTCPListener.attrAclType;
        this.attrBackendServerPort = rosLoadBalancerTCPListener.attrBackendServerPort;
        this.attrBandwidth = rosLoadBalancerTCPListener.attrBandwidth;
        this.attrConnectionDrain = rosLoadBalancerTCPListener.attrConnectionDrain;
        this.attrConnectionDrainTimeout = rosLoadBalancerTCPListener.attrConnectionDrainTimeout;
        this.attrDescription = rosLoadBalancerTCPListener.attrDescription;
        this.attrEstablishedTimeout = rosLoadBalancerTCPListener.attrEstablishedTimeout;
        this.attrHealthCheck = rosLoadBalancerTCPListener.attrHealthCheck;
        this.attrHealthCheckConnectPort = rosLoadBalancerTCPListener.attrHealthCheckConnectPort;
        this.attrHealthCheckConnectTimeout = rosLoadBalancerTCPListener.attrHealthCheckConnectTimeout;
        this.attrHealthCheckDomain = rosLoadBalancerTCPListener.attrHealthCheckDomain;
        this.attrHealthCheckHttpCode = rosLoadBalancerTCPListener.attrHealthCheckHttpCode;
        this.attrHealthCheckInterval = rosLoadBalancerTCPListener.attrHealthCheckInterval;
        this.attrHealthCheckMethod = rosLoadBalancerTCPListener.attrHealthCheckMethod;
        this.attrHealthCheckType = rosLoadBalancerTCPListener.attrHealthCheckType;
        this.attrHealthCheckUri = rosLoadBalancerTCPListener.attrHealthCheckUri;
        this.attrHealthyThreshold = rosLoadBalancerTCPListener.attrHealthyThreshold;
        this.attrListenerPort = rosLoadBalancerTCPListener.attrListenerPort;
        this.attrLoadBalancerId = rosLoadBalancerTCPListener.attrLoadBalancerId;
        this.attrMasterSlaveServerGroupId = rosLoadBalancerTCPListener.attrMasterSlaveServerGroupId;
        this.attrPersistenceTimeout = rosLoadBalancerTCPListener.attrPersistenceTimeout;
        this.attrProxyProtocolV2Enabled = rosLoadBalancerTCPListener.attrProxyProtocolV2Enabled;
        this.attrScheduler = rosLoadBalancerTCPListener.attrScheduler;
        this.attrSynProxy = rosLoadBalancerTCPListener.attrSynProxy;
        this.attrUnhealthyThreshold = rosLoadBalancerTCPListener.attrUnhealthyThreshold;
        this.attrVServerGroupId = rosLoadBalancerTCPListener.attrVServerGroupId;
    }
}
exports.LoadBalancerTCPListener = LoadBalancerTCPListener;
//# sourceMappingURL=data:application/json;base64,