"use strict";
// Generated from the AliCloud ROS Resource Specification
Object.defineProperty(exports, "__esModule", { value: true });
exports.RosDomains = exports.RosDomainRecords = exports.RosDomainGroups = void 0;
const ros = require("@alicloud/ros-cdk-core");
/**
 * Determine whether the given properties match those of a `RosDomainGroupsProps`
 *
 * @param properties - the TypeScript properties of a `RosDomainGroupsProps`
 *
 * @returns the result of the validation.
 */
function RosDomainGroupsPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('keyWord', ros.validateString)(properties.keyWord));
    errors.collect(ros.propertyValidator('lang', ros.validateString)(properties.lang));
    return errors.wrap('supplied properties not correct for "RosDomainGroupsProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `DATASOURCE::DNS::DomainGroups` resource
 *
 * @param properties - the TypeScript properties of a `RosDomainGroupsProps`
 *
 * @returns the AliCloud ROS Resource properties of an `DATASOURCE::DNS::DomainGroups` resource.
 */
// @ts-ignore TS6133
function rosDomainGroupsPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosDomainGroupsPropsValidator(properties).assertSuccess();
    }
    return {
        KeyWord: ros.stringToRosTemplate(properties.keyWord),
        Lang: ros.stringToRosTemplate(properties.lang),
    };
}
/**
 * A ROS template type:  `DATASOURCE::DNS::DomainGroups`
 */
class RosDomainGroups extends ros.RosResource {
    /**
     * Create a new `DATASOURCE::DNS::DomainGroups`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosDomainGroups.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrDomainGroupIds = this.getAtt('DomainGroupIds');
        this.attrDomainGroups = this.getAtt('DomainGroups');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.keyWord = props.keyWord;
        this.lang = props.lang;
    }
    get rosProperties() {
        return {
            keyWord: this.keyWord,
            lang: this.lang,
        };
    }
    renderProperties(props) {
        return rosDomainGroupsPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosDomainGroups = RosDomainGroups;
/**
 * The resource type name for this resource class.
 */
RosDomainGroups.ROS_RESOURCE_TYPE_NAME = "DATASOURCE::DNS::DomainGroups";
/**
 * Determine whether the given properties match those of a `RosDomainRecordsProps`
 *
 * @param properties - the TypeScript properties of a `RosDomainRecordsProps`
 *
 * @returns the result of the validation.
 */
function RosDomainRecordsPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    if (properties.status && (typeof properties.status) !== 'object') {
        errors.collect(ros.propertyValidator('status', ros.validateAllowedValues)({
            data: properties.status,
            allowedValues: ["Enable", "Disable"],
        }));
    }
    errors.collect(ros.propertyValidator('status', ros.validateString)(properties.status));
    errors.collect(ros.propertyValidator('orderBy', ros.validateString)(properties.orderBy));
    errors.collect(ros.propertyValidator('rrKeyWord', ros.validateString)(properties.rrKeyWord));
    errors.collect(ros.propertyValidator('domainName', ros.requiredValidator)(properties.domainName));
    errors.collect(ros.propertyValidator('domainName', ros.validateString)(properties.domainName));
    errors.collect(ros.propertyValidator('typeKeyWord', ros.validateString)(properties.typeKeyWord));
    errors.collect(ros.propertyValidator('lang', ros.validateString)(properties.lang));
    errors.collect(ros.propertyValidator('direction', ros.validateString)(properties.direction));
    errors.collect(ros.propertyValidator('groupId', ros.validateString)(properties.groupId));
    errors.collect(ros.propertyValidator('line', ros.validateString)(properties.line));
    errors.collect(ros.propertyValidator('type', ros.validateString)(properties.type));
    errors.collect(ros.propertyValidator('valueKeyWord', ros.validateString)(properties.valueKeyWord));
    errors.collect(ros.propertyValidator('keyWord', ros.validateString)(properties.keyWord));
    if (properties.searchMode && (typeof properties.searchMode) !== 'object') {
        errors.collect(ros.propertyValidator('searchMode', ros.validateAllowedValues)({
            data: properties.searchMode,
            allowedValues: ["LIKE", "EXACT", "ADVANCED"],
        }));
    }
    errors.collect(ros.propertyValidator('searchMode', ros.validateString)(properties.searchMode));
    return errors.wrap('supplied properties not correct for "RosDomainRecordsProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `DATASOURCE::DNS::DomainRecords` resource
 *
 * @param properties - the TypeScript properties of a `RosDomainRecordsProps`
 *
 * @returns the AliCloud ROS Resource properties of an `DATASOURCE::DNS::DomainRecords` resource.
 */
// @ts-ignore TS6133
function rosDomainRecordsPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosDomainRecordsPropsValidator(properties).assertSuccess();
    }
    return {
        DomainName: ros.stringToRosTemplate(properties.domainName),
        Direction: ros.stringToRosTemplate(properties.direction),
        GroupId: ros.stringToRosTemplate(properties.groupId),
        KeyWord: ros.stringToRosTemplate(properties.keyWord),
        Lang: ros.stringToRosTemplate(properties.lang),
        Line: ros.stringToRosTemplate(properties.line),
        OrderBy: ros.stringToRosTemplate(properties.orderBy),
        RRKeyWord: ros.stringToRosTemplate(properties.rrKeyWord),
        SearchMode: ros.stringToRosTemplate(properties.searchMode),
        Status: ros.stringToRosTemplate(properties.status),
        Type: ros.stringToRosTemplate(properties.type),
        TypeKeyWord: ros.stringToRosTemplate(properties.typeKeyWord),
        ValueKeyWord: ros.stringToRosTemplate(properties.valueKeyWord),
    };
}
/**
 * A ROS template type:  `DATASOURCE::DNS::DomainRecords`
 */
class RosDomainRecords extends ros.RosResource {
    /**
     * Create a new `DATASOURCE::DNS::DomainRecords`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosDomainRecords.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrDomainRecordIds = this.getAtt('DomainRecordIds');
        this.attrDomainRecords = this.getAtt('DomainRecords');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.domainName = props.domainName;
        this.direction = props.direction;
        this.groupId = props.groupId;
        this.keyWord = props.keyWord;
        this.lang = props.lang;
        this.line = props.line;
        this.orderBy = props.orderBy;
        this.rrKeyWord = props.rrKeyWord;
        this.searchMode = props.searchMode;
        this.status = props.status;
        this.type = props.type;
        this.typeKeyWord = props.typeKeyWord;
        this.valueKeyWord = props.valueKeyWord;
    }
    get rosProperties() {
        return {
            domainName: this.domainName,
            direction: this.direction,
            groupId: this.groupId,
            keyWord: this.keyWord,
            lang: this.lang,
            line: this.line,
            orderBy: this.orderBy,
            rrKeyWord: this.rrKeyWord,
            searchMode: this.searchMode,
            status: this.status,
            type: this.type,
            typeKeyWord: this.typeKeyWord,
            valueKeyWord: this.valueKeyWord,
        };
    }
    renderProperties(props) {
        return rosDomainRecordsPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosDomainRecords = RosDomainRecords;
/**
 * The resource type name for this resource class.
 */
RosDomainRecords.ROS_RESOURCE_TYPE_NAME = "DATASOURCE::DNS::DomainRecords";
/**
 * Determine whether the given properties match those of a `RosDomainsProps`
 *
 * @param properties - the TypeScript properties of a `RosDomainsProps`
 *
 * @returns the result of the validation.
 */
function RosDomainsPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('resourceGroupId', ros.validateString)(properties.resourceGroupId));
    errors.collect(ros.propertyValidator('keyWord', ros.validateString)(properties.keyWord));
    errors.collect(ros.propertyValidator('lang', ros.validateString)(properties.lang));
    errors.collect(ros.propertyValidator('starmark', ros.validateBoolean)(properties.starmark));
    if (properties.searchMode && (typeof properties.searchMode) !== 'object') {
        errors.collect(ros.propertyValidator('searchMode', ros.validateAllowedValues)({
            data: properties.searchMode,
            allowedValues: ["LIKE", "EXACT"],
        }));
    }
    errors.collect(ros.propertyValidator('searchMode', ros.validateString)(properties.searchMode));
    errors.collect(ros.propertyValidator('groupId', ros.validateString)(properties.groupId));
    return errors.wrap('supplied properties not correct for "RosDomainsProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `DATASOURCE::DNS::Domains` resource
 *
 * @param properties - the TypeScript properties of a `RosDomainsProps`
 *
 * @returns the AliCloud ROS Resource properties of an `DATASOURCE::DNS::Domains` resource.
 */
// @ts-ignore TS6133
function rosDomainsPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosDomainsPropsValidator(properties).assertSuccess();
    }
    return {
        GroupId: ros.stringToRosTemplate(properties.groupId),
        KeyWord: ros.stringToRosTemplate(properties.keyWord),
        Lang: ros.stringToRosTemplate(properties.lang),
        ResourceGroupId: ros.stringToRosTemplate(properties.resourceGroupId),
        SearchMode: ros.stringToRosTemplate(properties.searchMode),
        Starmark: ros.booleanToRosTemplate(properties.starmark),
    };
}
/**
 * A ROS template type:  `DATASOURCE::DNS::Domains`
 */
class RosDomains extends ros.RosResource {
    /**
     * Create a new `DATASOURCE::DNS::Domains`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosDomains.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrDomainIds = this.getAtt('DomainIds');
        this.attrDomains = this.getAtt('Domains');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.groupId = props.groupId;
        this.keyWord = props.keyWord;
        this.lang = props.lang;
        this.resourceGroupId = props.resourceGroupId;
        this.searchMode = props.searchMode;
        this.starmark = props.starmark;
    }
    get rosProperties() {
        return {
            groupId: this.groupId,
            keyWord: this.keyWord,
            lang: this.lang,
            resourceGroupId: this.resourceGroupId,
            searchMode: this.searchMode,
            starmark: this.starmark,
        };
    }
    renderProperties(props) {
        return rosDomainsPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosDomains = RosDomains;
/**
 * The resource type name for this resource class.
 */
RosDomains.ROS_RESOURCE_TYPE_NAME = "DATASOURCE::DNS::Domains";
//# sourceMappingURL=data:application/json;base64,