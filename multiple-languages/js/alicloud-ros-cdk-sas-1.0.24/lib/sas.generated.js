"use strict";
// Generated from the AliCloud ROS Resource Specification
Object.defineProperty(exports, "__esModule", { value: true });
exports.RosInstance = void 0;
const ros = require("@alicloud/ros-cdk-core");
/**
 * Determine whether the given properties match those of a `RosInstanceProps`
 *
 * @param properties - the TypeScript properties of a `RosInstanceProps`
 *
 * @returns the result of the validation.
 */
function RosInstancePropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('quotaForApplicationProtection', ros.validateNumber)(properties.quotaForApplicationProtection));
    errors.collect(ros.propertyValidator('threatAnalysis', ros.validateBoolean)(properties.threatAnalysis));
    errors.collect(ros.propertyValidator('quotaForMaliciousFileDetectionSdk', ros.validateNumber)(properties.quotaForMaliciousFileDetectionSdk));
    errors.collect(ros.propertyValidator('containerImageScan', ros.validateNumber)(properties.containerImageScan));
    errors.collect(ros.propertyValidator('threatAnalysisLogStorageCapacity', ros.validateNumber)(properties.threatAnalysisLogStorageCapacity));
    errors.collect(ros.propertyValidator('autoRenew', ros.validateBoolean)(properties.autoRenew));
    errors.collect(ros.propertyValidator('maliciousFileDetectionSdk', ros.validateBoolean)(properties.maliciousFileDetectionSdk));
    errors.collect(ros.propertyValidator('vCore', ros.validateNumber)(properties.vCore));
    errors.collect(ros.propertyValidator('period', ros.requiredValidator)(properties.period));
    if (properties.period && (typeof properties.period) !== 'object') {
        errors.collect(ros.propertyValidator('period', ros.validateAllowedValues)({
            data: properties.period,
            allowedValues: [1, 2, 3, 6],
        }));
    }
    errors.collect(ros.propertyValidator('period', ros.validateNumber)(properties.period));
    errors.collect(ros.propertyValidator('vulnerabilityFixing', ros.validateBoolean)(properties.vulnerabilityFixing));
    errors.collect(ros.propertyValidator('quotaForCloudHoneypot', ros.validateNumber)(properties.quotaForCloudHoneypot));
    errors.collect(ros.propertyValidator('quotaForWebTamperProofing', ros.validateNumber)(properties.quotaForWebTamperProofing));
    errors.collect(ros.propertyValidator('autoPay', ros.validateBoolean)(properties.autoPay));
    if (properties.edition && (typeof properties.edition) !== 'object') {
        errors.collect(ros.propertyValidator('edition', ros.validateAllowedValues)({
            data: properties.edition,
            allowedValues: ["Anti-virus", "Advanced", "Enterprise", "Ultimate"],
        }));
    }
    errors.collect(ros.propertyValidator('edition', ros.validateString)(properties.edition));
    errors.collect(ros.propertyValidator('configurationAssessment', ros.validateBoolean)(properties.configurationAssessment));
    errors.collect(ros.propertyValidator('logAnalysis', ros.validateNumber)(properties.logAnalysis));
    errors.collect(ros.propertyValidator('protectedServers', ros.validateNumber)(properties.protectedServers));
    errors.collect(ros.propertyValidator('cloudHoneypot', ros.validateBoolean)(properties.cloudHoneypot));
    errors.collect(ros.propertyValidator('webTamperProtection', ros.validateBoolean)(properties.webTamperProtection));
    errors.collect(ros.propertyValidator('quotaForConfigurationAssessment', ros.validateNumber)(properties.quotaForConfigurationAssessment));
    errors.collect(ros.propertyValidator('quotaForVulnerabilityFixing', ros.validateNumber)(properties.quotaForVulnerabilityFixing));
    errors.collect(ros.propertyValidator('antiRansomware', ros.validateNumber)(properties.antiRansomware));
    errors.collect(ros.propertyValidator('periodUnit', ros.requiredValidator)(properties.periodUnit));
    if (properties.periodUnit && (typeof properties.periodUnit) !== 'object') {
        errors.collect(ros.propertyValidator('periodUnit', ros.validateAllowedValues)({
            data: properties.periodUnit,
            allowedValues: ["Month", "Year"],
        }));
    }
    errors.collect(ros.propertyValidator('periodUnit', ros.validateString)(properties.periodUnit));
    return errors.wrap('supplied properties not correct for "RosInstanceProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::SAS::Instance` resource
 *
 * @param properties - the TypeScript properties of a `RosInstanceProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::SAS::Instance` resource.
 */
// @ts-ignore TS6133
function rosInstancePropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosInstancePropsValidator(properties).assertSuccess();
    }
    return {
        Period: ros.numberToRosTemplate(properties.period),
        PeriodUnit: ros.stringToRosTemplate(properties.periodUnit),
        AntiRansomware: ros.numberToRosTemplate(properties.antiRansomware),
        AutoPay: ros.booleanToRosTemplate(properties.autoPay),
        AutoRenew: ros.booleanToRosTemplate(properties.autoRenew),
        CloudHoneypot: ros.booleanToRosTemplate(properties.cloudHoneypot),
        ConfigurationAssessment: ros.booleanToRosTemplate(properties.configurationAssessment),
        ContainerImageScan: ros.numberToRosTemplate(properties.containerImageScan),
        Edition: ros.stringToRosTemplate(properties.edition),
        LogAnalysis: ros.numberToRosTemplate(properties.logAnalysis),
        MaliciousFileDetectionSDK: ros.booleanToRosTemplate(properties.maliciousFileDetectionSdk),
        ProtectedServers: ros.numberToRosTemplate(properties.protectedServers),
        QuotaForApplicationProtection: ros.numberToRosTemplate(properties.quotaForApplicationProtection),
        QuotaForCloudHoneypot: ros.numberToRosTemplate(properties.quotaForCloudHoneypot),
        QuotaForConfigurationAssessment: ros.numberToRosTemplate(properties.quotaForConfigurationAssessment),
        QuotaForMaliciousFileDetectionSDK: ros.numberToRosTemplate(properties.quotaForMaliciousFileDetectionSdk),
        QuotaForVulnerabilityFixing: ros.numberToRosTemplate(properties.quotaForVulnerabilityFixing),
        QuotaForWebTamperProofing: ros.numberToRosTemplate(properties.quotaForWebTamperProofing),
        ThreatAnalysis: ros.booleanToRosTemplate(properties.threatAnalysis),
        ThreatAnalysisLogStorageCapacity: ros.numberToRosTemplate(properties.threatAnalysisLogStorageCapacity),
        VCore: ros.numberToRosTemplate(properties.vCore),
        VulnerabilityFixing: ros.booleanToRosTemplate(properties.vulnerabilityFixing),
        WebTamperProtection: ros.booleanToRosTemplate(properties.webTamperProtection),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::SAS::Instance`.
 * @Note This class does not contain additional functions, so it is recommended to use the `Instance` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-sas-instance
 */
class RosInstance extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosInstance.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrInstanceId = this.getAtt('InstanceId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.period = props.period;
        this.periodUnit = props.periodUnit;
        this.antiRansomware = props.antiRansomware;
        this.autoPay = props.autoPay;
        this.autoRenew = props.autoRenew;
        this.cloudHoneypot = props.cloudHoneypot;
        this.configurationAssessment = props.configurationAssessment;
        this.containerImageScan = props.containerImageScan;
        this.edition = props.edition;
        this.logAnalysis = props.logAnalysis;
        this.maliciousFileDetectionSdk = props.maliciousFileDetectionSdk;
        this.protectedServers = props.protectedServers;
        this.quotaForApplicationProtection = props.quotaForApplicationProtection;
        this.quotaForCloudHoneypot = props.quotaForCloudHoneypot;
        this.quotaForConfigurationAssessment = props.quotaForConfigurationAssessment;
        this.quotaForMaliciousFileDetectionSdk = props.quotaForMaliciousFileDetectionSdk;
        this.quotaForVulnerabilityFixing = props.quotaForVulnerabilityFixing;
        this.quotaForWebTamperProofing = props.quotaForWebTamperProofing;
        this.threatAnalysis = props.threatAnalysis;
        this.threatAnalysisLogStorageCapacity = props.threatAnalysisLogStorageCapacity;
        this.vCore = props.vCore;
        this.vulnerabilityFixing = props.vulnerabilityFixing;
        this.webTamperProtection = props.webTamperProtection;
    }
    get rosProperties() {
        return {
            period: this.period,
            periodUnit: this.periodUnit,
            antiRansomware: this.antiRansomware,
            autoPay: this.autoPay,
            autoRenew: this.autoRenew,
            cloudHoneypot: this.cloudHoneypot,
            configurationAssessment: this.configurationAssessment,
            containerImageScan: this.containerImageScan,
            edition: this.edition,
            logAnalysis: this.logAnalysis,
            maliciousFileDetectionSdk: this.maliciousFileDetectionSdk,
            protectedServers: this.protectedServers,
            quotaForApplicationProtection: this.quotaForApplicationProtection,
            quotaForCloudHoneypot: this.quotaForCloudHoneypot,
            quotaForConfigurationAssessment: this.quotaForConfigurationAssessment,
            quotaForMaliciousFileDetectionSdk: this.quotaForMaliciousFileDetectionSdk,
            quotaForVulnerabilityFixing: this.quotaForVulnerabilityFixing,
            quotaForWebTamperProofing: this.quotaForWebTamperProofing,
            threatAnalysis: this.threatAnalysis,
            threatAnalysisLogStorageCapacity: this.threatAnalysisLogStorageCapacity,
            vCore: this.vCore,
            vulnerabilityFixing: this.vulnerabilityFixing,
            webTamperProtection: this.webTamperProtection,
        };
    }
    renderProperties(props) {
        return rosInstancePropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosInstance = RosInstance;
/**
 * The resource type name for this resource class.
 */
RosInstance.ROS_RESOURCE_TYPE_NAME = "ALIYUN::SAS::Instance";
//# sourceMappingURL=data:application/json;base64,