"use strict";
// Generated from the AliCloud ROS Resource Specification
Object.defineProperty(exports, "__esModule", { value: true });
exports.RosWorkspaceResourceMaxCompute = exports.RosWorkspaceResourceFlink = exports.RosWorkspaceResourceDlc = exports.RosWorkspace = exports.RosService = exports.RosDataset = void 0;
const ros = require("@alicloud/ros-cdk-core");
/**
 * Determine whether the given properties match those of a `RosDatasetProps`
 *
 * @param properties - the TypeScript properties of a `RosDatasetProps`
 *
 * @returns the result of the validation.
 */
function RosDatasetPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('options', ros.validateString)(properties.options));
    errors.collect(ros.propertyValidator('description', ros.validateString)(properties.description));
    if (properties.accessibility && (typeof properties.accessibility) !== 'object') {
        errors.collect(ros.propertyValidator('accessibility', ros.validateAllowedValues)({
            data: properties.accessibility,
            allowedValues: ["PRIVATE", "PUBLIC"],
        }));
    }
    errors.collect(ros.propertyValidator('accessibility', ros.validateString)(properties.accessibility));
    errors.collect(ros.propertyValidator('datasetName', ros.requiredValidator)(properties.datasetName));
    errors.collect(ros.propertyValidator('datasetName', ros.validateString)(properties.datasetName));
    if (properties.sourceType && (typeof properties.sourceType) !== 'object') {
        errors.collect(ros.propertyValidator('sourceType', ros.validateAllowedValues)({
            data: properties.sourceType,
            allowedValues: ["USER", "ITAG", "PAI-PUBLIC-DATASET"],
        }));
    }
    errors.collect(ros.propertyValidator('sourceType', ros.validateString)(properties.sourceType));
    errors.collect(ros.propertyValidator('sourceId', ros.validateString)(properties.sourceId));
    errors.collect(ros.propertyValidator('dataSourceType', ros.requiredValidator)(properties.dataSourceType));
    if (properties.dataSourceType && (typeof properties.dataSourceType) !== 'object') {
        errors.collect(ros.propertyValidator('dataSourceType', ros.validateAllowedValues)({
            data: properties.dataSourceType,
            allowedValues: ["OSS", "NAS"],
        }));
    }
    errors.collect(ros.propertyValidator('dataSourceType', ros.validateString)(properties.dataSourceType));
    errors.collect(ros.propertyValidator('workspaceId', ros.requiredValidator)(properties.workspaceId));
    errors.collect(ros.propertyValidator('workspaceId', ros.validateString)(properties.workspaceId));
    if (properties.dataType && (typeof properties.dataType) !== 'object') {
        errors.collect(ros.propertyValidator('dataType', ros.validateAllowedValues)({
            data: properties.dataType,
            allowedValues: ["COMMON", "PIC", "TEXT", "VIDEO", "AUDIO"],
        }));
    }
    errors.collect(ros.propertyValidator('dataType', ros.validateString)(properties.dataType));
    errors.collect(ros.propertyValidator('uri', ros.requiredValidator)(properties.uri));
    errors.collect(ros.propertyValidator('uri', ros.validateString)(properties.uri));
    errors.collect(ros.propertyValidator('property', ros.requiredValidator)(properties.property));
    if (properties.property && (typeof properties.property) !== 'object') {
        errors.collect(ros.propertyValidator('property', ros.validateAllowedValues)({
            data: properties.property,
            allowedValues: ["FILE", "DIRECTORY"],
        }));
    }
    errors.collect(ros.propertyValidator('property', ros.validateString)(properties.property));
    return errors.wrap('supplied properties not correct for "RosDatasetProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::PAI::Dataset` resource
 *
 * @param properties - the TypeScript properties of a `RosDatasetProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::PAI::Dataset` resource.
 */
// @ts-ignore TS6133
function rosDatasetPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosDatasetPropsValidator(properties).assertSuccess();
    }
    return {
        DatasetName: ros.stringToRosTemplate(properties.datasetName),
        DataSourceType: ros.stringToRosTemplate(properties.dataSourceType),
        Property: ros.stringToRosTemplate(properties.property),
        Uri: ros.stringToRosTemplate(properties.uri),
        WorkspaceId: ros.stringToRosTemplate(properties.workspaceId),
        Accessibility: ros.stringToRosTemplate(properties.accessibility),
        DataType: ros.stringToRosTemplate(properties.dataType),
        Description: ros.stringToRosTemplate(properties.description),
        Options: ros.stringToRosTemplate(properties.options),
        SourceId: ros.stringToRosTemplate(properties.sourceId),
        SourceType: ros.stringToRosTemplate(properties.sourceType),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::PAI::Dataset`, which is used to create a dataset.
 * @Note This class does not contain additional functions, so it is recommended to use the `Dataset` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-pai-dataset
 */
class RosDataset extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosDataset.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrAccessibility = this.getAtt('Accessibility');
        this.attrCreateTime = this.getAtt('CreateTime');
        this.attrDataSourceType = this.getAtt('DataSourceType');
        this.attrDataType = this.getAtt('DataType');
        this.attrDatasetId = this.getAtt('DatasetId');
        this.attrDatasetName = this.getAtt('DatasetName');
        this.attrDescription = this.getAtt('Description');
        this.attrGmtModifiedTime = this.getAtt('GmtModifiedTime');
        this.attrOptions = this.getAtt('Options');
        this.attrOwnerId = this.getAtt('OwnerId');
        this.attrProperty = this.getAtt('Property');
        this.attrSourceId = this.getAtt('SourceId');
        this.attrSourceType = this.getAtt('SourceType');
        this.attrUri = this.getAtt('Uri');
        this.attrUserId = this.getAtt('UserId');
        this.attrWorkspaceId = this.getAtt('WorkspaceId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.datasetName = props.datasetName;
        this.dataSourceType = props.dataSourceType;
        this.property = props.property;
        this.uri = props.uri;
        this.workspaceId = props.workspaceId;
        this.accessibility = props.accessibility;
        this.dataType = props.dataType;
        this.description = props.description;
        this.options = props.options;
        this.sourceId = props.sourceId;
        this.sourceType = props.sourceType;
    }
    get rosProperties() {
        return {
            datasetName: this.datasetName,
            dataSourceType: this.dataSourceType,
            property: this.property,
            uri: this.uri,
            workspaceId: this.workspaceId,
            accessibility: this.accessibility,
            dataType: this.dataType,
            description: this.description,
            options: this.options,
            sourceId: this.sourceId,
            sourceType: this.sourceType,
        };
    }
    renderProperties(props) {
        return rosDatasetPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosDataset = RosDataset;
/**
 * The resource type name for this resource class.
 */
RosDataset.ROS_RESOURCE_TYPE_NAME = "ALIYUN::PAI::Dataset";
/**
 * Determine whether the given properties match those of a `RosServiceProps`
 *
 * @param properties - the TypeScript properties of a `RosServiceProps`
 *
 * @returns the result of the validation.
 */
function RosServicePropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('develop', ros.validateString)(properties.develop));
    errors.collect(ros.propertyValidator('serviceConfig', ros.requiredValidator)(properties.serviceConfig));
    errors.collect(ros.propertyValidator('serviceConfig', ros.hashValidator(ros.validateAny))(properties.serviceConfig));
    errors.collect(ros.propertyValidator('labels', ros.hashValidator(ros.validateAny))(properties.labels));
    return errors.wrap('supplied properties not correct for "RosServiceProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::PAI::Service` resource
 *
 * @param properties - the TypeScript properties of a `RosServiceProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::PAI::Service` resource.
 */
// @ts-ignore TS6133
function rosServicePropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosServicePropsValidator(properties).assertSuccess();
    }
    return {
        ServiceConfig: ros.hashMapper(ros.objectToRosTemplate)(properties.serviceConfig),
        Develop: ros.stringToRosTemplate(properties.develop),
        Labels: ros.hashMapper(ros.objectToRosTemplate)(properties.labels),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::PAI::Service`, which is used to create an Elastic Algorithm Service (EAS) service in Machine Learning Platform for AI (PAI).
 * @Note This class does not contain additional functions, so it is recommended to use the `Service` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-pai-service
 */
class RosService extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosService.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrAccessToken = this.getAtt('AccessToken');
        this.attrCallerUid = this.getAtt('CallerUid');
        this.attrCpu = this.getAtt('Cpu');
        this.attrCreateTime = this.getAtt('CreateTime');
        this.attrCurrentVersion = this.getAtt('CurrentVersion');
        this.attrExtraData = this.getAtt('ExtraData');
        this.attrGpu = this.getAtt('Gpu');
        this.attrImage = this.getAtt('Image');
        this.attrInternetEndpoint = this.getAtt('InternetEndpoint');
        this.attrIntranetEndpoint = this.getAtt('IntranetEndpoint');
        this.attrLabels = this.getAtt('Labels');
        this.attrLatestVersion = this.getAtt('LatestVersion');
        this.attrMemory = this.getAtt('Memory');
        this.attrMessage = this.getAtt('Message');
        this.attrNamespace = this.getAtt('Namespace');
        this.attrParentUid = this.getAtt('ParentUid');
        this.attrPendingInstance = this.getAtt('PendingInstance');
        this.attrReason = this.getAtt('Reason');
        this.attrResource = this.getAtt('Resource');
        this.attrResourceAlias = this.getAtt('ResourceAlias');
        this.attrRole = this.getAtt('Role');
        this.attrRoleAttrs = this.getAtt('RoleAttrs');
        this.attrRunningInstance = this.getAtt('RunningInstance');
        this.attrSafetyLock = this.getAtt('SafetyLock');
        this.attrServiceConfig = this.getAtt('ServiceConfig');
        this.attrServiceGroup = this.getAtt('ServiceGroup');
        this.attrServiceName = this.getAtt('ServiceName');
        this.attrServiceUid = this.getAtt('ServiceUid');
        this.attrTotalInstance = this.getAtt('TotalInstance');
        this.attrUpdateTime = this.getAtt('UpdateTime');
        this.attrWeight = this.getAtt('Weight');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.serviceConfig = props.serviceConfig;
        this.develop = props.develop;
        this.labels = props.labels;
    }
    get rosProperties() {
        return {
            serviceConfig: this.serviceConfig,
            develop: this.develop,
            labels: this.labels,
        };
    }
    renderProperties(props) {
        return rosServicePropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosService = RosService;
/**
 * The resource type name for this resource class.
 */
RosService.ROS_RESOURCE_TYPE_NAME = "ALIYUN::PAI::Service";
/**
 * Determine whether the given properties match those of a `RosWorkspaceProps`
 *
 * @param properties - the TypeScript properties of a `RosWorkspaceProps`
 *
 * @returns the result of the validation.
 */
function RosWorkspacePropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('description', ros.requiredValidator)(properties.description));
    errors.collect(ros.propertyValidator('description', ros.validateString)(properties.description));
    if (properties.displayName && (typeof properties.displayName) !== 'object') {
        errors.collect(ros.propertyValidator('displayName', ros.validateAllowedPattern)({
            data: properties.displayName,
            reg: /^[a-zA-Z][_a-zA-Z0-9]{2,22}$/
        }));
    }
    errors.collect(ros.propertyValidator('displayName', ros.validateString)(properties.displayName));
    errors.collect(ros.propertyValidator('workspaceName', ros.requiredValidator)(properties.workspaceName));
    if (properties.workspaceName && (typeof properties.workspaceName) !== 'object') {
        errors.collect(ros.propertyValidator('workspaceName', ros.validateAllowedPattern)({
            data: properties.workspaceName,
            reg: /^[a-zA-Z][_a-zA-Z0-9]{2,22}$/
        }));
    }
    errors.collect(ros.propertyValidator('workspaceName', ros.validateString)(properties.workspaceName));
    errors.collect(ros.propertyValidator('envTypes', ros.requiredValidator)(properties.envTypes));
    errors.collect(ros.propertyValidator('envTypes', ros.listValidator(ros.validateString))(properties.envTypes));
    return errors.wrap('supplied properties not correct for "RosWorkspaceProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::PAI::Workspace` resource
 *
 * @param properties - the TypeScript properties of a `RosWorkspaceProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::PAI::Workspace` resource.
 */
// @ts-ignore TS6133
function rosWorkspacePropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosWorkspacePropsValidator(properties).assertSuccess();
    }
    return {
        Description: ros.stringToRosTemplate(properties.description),
        EnvTypes: ros.listMapper(ros.stringToRosTemplate)(properties.envTypes),
        WorkspaceName: ros.stringToRosTemplate(properties.workspaceName),
        DisplayName: ros.stringToRosTemplate(properties.displayName),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::PAI::Workspace`, which is used to create a workspace.
 * @Note This class does not contain additional functions, so it is recommended to use the `Workspace` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-pai-workspace
 */
class RosWorkspace extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosWorkspace.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrAdminNames = this.getAtt('AdminNames');
        this.attrCreator = this.getAtt('Creator');
        this.attrDescription = this.getAtt('Description');
        this.attrDisplayName = this.getAtt('DisplayName');
        this.attrEnvTypes = this.getAtt('EnvTypes');
        this.attrExtraInfos = this.getAtt('ExtraInfos');
        this.attrOwner = this.getAtt('Owner');
        this.attrUsers = this.getAtt('Users');
        this.attrWorkspaceId = this.getAtt('WorkspaceId');
        this.attrWorkspaceName = this.getAtt('WorkspaceName');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.description = props.description;
        this.envTypes = props.envTypes;
        this.workspaceName = props.workspaceName;
        this.displayName = props.displayName;
    }
    get rosProperties() {
        return {
            description: this.description,
            envTypes: this.envTypes,
            workspaceName: this.workspaceName,
            displayName: this.displayName,
        };
    }
    renderProperties(props) {
        return rosWorkspacePropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosWorkspace = RosWorkspace;
/**
 * The resource type name for this resource class.
 */
RosWorkspace.ROS_RESOURCE_TYPE_NAME = "ALIYUN::PAI::Workspace";
/**
 * Determine whether the given properties match those of a `RosWorkspaceResourceDlcProps`
 *
 * @param properties - the TypeScript properties of a `RosWorkspaceResourceDlcProps`
 *
 * @returns the result of the validation.
 */
function RosWorkspaceResourceDlcPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('isDefault', ros.validateBoolean)(properties.isDefault));
    errors.collect(ros.propertyValidator('groupName', ros.requiredValidator)(properties.groupName));
    errors.collect(ros.propertyValidator('groupName', ros.validateString)(properties.groupName));
    errors.collect(ros.propertyValidator('workspaceId', ros.requiredValidator)(properties.workspaceId));
    errors.collect(ros.propertyValidator('workspaceId', ros.validateString)(properties.workspaceId));
    if (properties.option && (typeof properties.option) !== 'object') {
        errors.collect(ros.propertyValidator('option', ros.validateAllowedValues)({
            data: properties.option,
            allowedValues: ["CreateAndAttach", "Attach"],
        }));
    }
    errors.collect(ros.propertyValidator('option', ros.validateString)(properties.option));
    errors.collect(ros.propertyValidator('resources', ros.requiredValidator)(properties.resources));
    if (properties.resources && (Array.isArray(properties.resources) || (typeof properties.resources) === 'string')) {
        errors.collect(ros.propertyValidator('resources', ros.validateLength)({
            data: properties.resources.length,
            min: 1,
            max: 10,
        }));
    }
    errors.collect(ros.propertyValidator('resources', ros.listValidator(RosWorkspaceResourceDlc_ResourcesPropertyValidator))(properties.resources));
    return errors.wrap('supplied properties not correct for "RosWorkspaceResourceDlcProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::PAI::WorkspaceResourceDlc` resource
 *
 * @param properties - the TypeScript properties of a `RosWorkspaceResourceDlcProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::PAI::WorkspaceResourceDlc` resource.
 */
// @ts-ignore TS6133
function rosWorkspaceResourceDlcPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosWorkspaceResourceDlcPropsValidator(properties).assertSuccess();
    }
    return {
        GroupName: ros.stringToRosTemplate(properties.groupName),
        Resources: ros.listMapper(rosWorkspaceResourceDlcResourcesPropertyToRosTemplate)(properties.resources),
        WorkspaceId: ros.stringToRosTemplate(properties.workspaceId),
        IsDefault: ros.booleanToRosTemplate(properties.isDefault),
        Option: ros.stringToRosTemplate(properties.option),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::PAI::WorkspaceResourceDlc`.
 * @Note This class does not contain additional functions, so it is recommended to use the `WorkspaceResourceDlc` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-pai-workspaceresourcedlc
 */
class RosWorkspaceResourceDlc extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosWorkspaceResourceDlc.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrCreateTime = this.getAtt('CreateTime');
        this.attrGroupName = this.getAtt('GroupName');
        this.attrIsDefault = this.getAtt('IsDefault');
        this.attrResources = this.getAtt('Resources');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.groupName = props.groupName;
        this.resources = props.resources;
        this.workspaceId = props.workspaceId;
        this.isDefault = props.isDefault;
        this.option = props.option;
    }
    get rosProperties() {
        return {
            groupName: this.groupName,
            resources: this.resources,
            workspaceId: this.workspaceId,
            isDefault: this.isDefault,
            option: this.option,
        };
    }
    renderProperties(props) {
        return rosWorkspaceResourceDlcPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosWorkspaceResourceDlc = RosWorkspaceResourceDlc;
/**
 * The resource type name for this resource class.
 */
RosWorkspaceResourceDlc.ROS_RESOURCE_TYPE_NAME = "ALIYUN::PAI::WorkspaceResourceDlc";
/**
 * Determine whether the given properties match those of a `ResourcesProperty`
 *
 * @param properties - the TypeScript properties of a `ResourcesProperty`
 *
 * @returns the result of the validation.
 */
function RosWorkspaceResourceDlc_ResourcesPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('workspaceResourceWorkspaceId', ros.requiredValidator)(properties.workspaceResourceWorkspaceId));
    errors.collect(ros.propertyValidator('workspaceResourceWorkspaceId', ros.validateString)(properties.workspaceResourceWorkspaceId));
    errors.collect(ros.propertyValidator('workspaceResourceName', ros.requiredValidator)(properties.workspaceResourceName));
    errors.collect(ros.propertyValidator('workspaceResourceName', ros.validateString)(properties.workspaceResourceName));
    errors.collect(ros.propertyValidator('spec', ros.hashValidator(ros.validateAny))(properties.spec));
    errors.collect(ros.propertyValidator('envType', ros.requiredValidator)(properties.envType));
    if (properties.envType && (typeof properties.envType) !== 'object') {
        errors.collect(ros.propertyValidator('envType', ros.validateAllowedValues)({
            data: properties.envType,
            allowedValues: ["dev", "prod"],
        }));
    }
    errors.collect(ros.propertyValidator('envType', ros.validateString)(properties.envType));
    return errors.wrap('supplied properties not correct for "ResourcesProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::PAI::WorkspaceResourceDlc.Resources` resource
 *
 * @param properties - the TypeScript properties of a `ResourcesProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::PAI::WorkspaceResourceDlc.Resources` resource.
 */
// @ts-ignore TS6133
function rosWorkspaceResourceDlcResourcesPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosWorkspaceResourceDlc_ResourcesPropertyValidator(properties).assertSuccess();
    return {
        WorkspaceResourceWorkspaceId: ros.stringToRosTemplate(properties.workspaceResourceWorkspaceId),
        WorkspaceResourceName: ros.stringToRosTemplate(properties.workspaceResourceName),
        Spec: ros.hashMapper(ros.objectToRosTemplate)(properties.spec),
        EnvType: ros.stringToRosTemplate(properties.envType),
    };
}
/**
 * Determine whether the given properties match those of a `RosWorkspaceResourceFlinkProps`
 *
 * @param properties - the TypeScript properties of a `RosWorkspaceResourceFlinkProps`
 *
 * @returns the result of the validation.
 */
function RosWorkspaceResourceFlinkPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('isDefault', ros.validateBoolean)(properties.isDefault));
    errors.collect(ros.propertyValidator('groupName', ros.requiredValidator)(properties.groupName));
    errors.collect(ros.propertyValidator('groupName', ros.validateString)(properties.groupName));
    errors.collect(ros.propertyValidator('workspaceId', ros.requiredValidator)(properties.workspaceId));
    errors.collect(ros.propertyValidator('workspaceId', ros.validateString)(properties.workspaceId));
    if (properties.option && (typeof properties.option) !== 'object') {
        errors.collect(ros.propertyValidator('option', ros.validateAllowedValues)({
            data: properties.option,
            allowedValues: ["CreateAndAttach", "Attach"],
        }));
    }
    errors.collect(ros.propertyValidator('option', ros.validateString)(properties.option));
    errors.collect(ros.propertyValidator('resources', ros.requiredValidator)(properties.resources));
    if (properties.resources && (Array.isArray(properties.resources) || (typeof properties.resources) === 'string')) {
        errors.collect(ros.propertyValidator('resources', ros.validateLength)({
            data: properties.resources.length,
            min: 1,
            max: 10,
        }));
    }
    errors.collect(ros.propertyValidator('resources', ros.listValidator(RosWorkspaceResourceFlink_ResourcesPropertyValidator))(properties.resources));
    return errors.wrap('supplied properties not correct for "RosWorkspaceResourceFlinkProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::PAI::WorkspaceResourceFlink` resource
 *
 * @param properties - the TypeScript properties of a `RosWorkspaceResourceFlinkProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::PAI::WorkspaceResourceFlink` resource.
 */
// @ts-ignore TS6133
function rosWorkspaceResourceFlinkPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosWorkspaceResourceFlinkPropsValidator(properties).assertSuccess();
    }
    return {
        GroupName: ros.stringToRosTemplate(properties.groupName),
        Resources: ros.listMapper(rosWorkspaceResourceFlinkResourcesPropertyToRosTemplate)(properties.resources),
        WorkspaceId: ros.stringToRosTemplate(properties.workspaceId),
        IsDefault: ros.booleanToRosTemplate(properties.isDefault),
        Option: ros.stringToRosTemplate(properties.option),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::PAI::WorkspaceResourceFlink`.
 * @Note This class does not contain additional functions, so it is recommended to use the `WorkspaceResourceFlink` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-pai-workspaceresourceflink
 */
class RosWorkspaceResourceFlink extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosWorkspaceResourceFlink.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrCreateTime = this.getAtt('CreateTime');
        this.attrGroupName = this.getAtt('GroupName');
        this.attrIsDefault = this.getAtt('IsDefault');
        this.attrResources = this.getAtt('Resources');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.groupName = props.groupName;
        this.resources = props.resources;
        this.workspaceId = props.workspaceId;
        this.isDefault = props.isDefault;
        this.option = props.option;
    }
    get rosProperties() {
        return {
            groupName: this.groupName,
            resources: this.resources,
            workspaceId: this.workspaceId,
            isDefault: this.isDefault,
            option: this.option,
        };
    }
    renderProperties(props) {
        return rosWorkspaceResourceFlinkPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosWorkspaceResourceFlink = RosWorkspaceResourceFlink;
/**
 * The resource type name for this resource class.
 */
RosWorkspaceResourceFlink.ROS_RESOURCE_TYPE_NAME = "ALIYUN::PAI::WorkspaceResourceFlink";
/**
 * Determine whether the given properties match those of a `ResourcesProperty`
 *
 * @param properties - the TypeScript properties of a `ResourcesProperty`
 *
 * @returns the result of the validation.
 */
function RosWorkspaceResourceFlink_ResourcesPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('workspaceResourceWorkspaceId', ros.requiredValidator)(properties.workspaceResourceWorkspaceId));
    errors.collect(ros.propertyValidator('workspaceResourceWorkspaceId', ros.validateString)(properties.workspaceResourceWorkspaceId));
    errors.collect(ros.propertyValidator('workspaceResourceName', ros.requiredValidator)(properties.workspaceResourceName));
    errors.collect(ros.propertyValidator('workspaceResourceName', ros.validateString)(properties.workspaceResourceName));
    errors.collect(ros.propertyValidator('spec', ros.hashValidator(ros.validateAny))(properties.spec));
    errors.collect(ros.propertyValidator('envType', ros.requiredValidator)(properties.envType));
    if (properties.envType && (typeof properties.envType) !== 'object') {
        errors.collect(ros.propertyValidator('envType', ros.validateAllowedValues)({
            data: properties.envType,
            allowedValues: ["dev", "prod"],
        }));
    }
    errors.collect(ros.propertyValidator('envType', ros.validateString)(properties.envType));
    return errors.wrap('supplied properties not correct for "ResourcesProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::PAI::WorkspaceResourceFlink.Resources` resource
 *
 * @param properties - the TypeScript properties of a `ResourcesProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::PAI::WorkspaceResourceFlink.Resources` resource.
 */
// @ts-ignore TS6133
function rosWorkspaceResourceFlinkResourcesPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosWorkspaceResourceFlink_ResourcesPropertyValidator(properties).assertSuccess();
    return {
        WorkspaceResourceWorkspaceId: ros.stringToRosTemplate(properties.workspaceResourceWorkspaceId),
        WorkspaceResourceName: ros.stringToRosTemplate(properties.workspaceResourceName),
        Spec: ros.hashMapper(ros.objectToRosTemplate)(properties.spec),
        EnvType: ros.stringToRosTemplate(properties.envType),
    };
}
/**
 * Determine whether the given properties match those of a `RosWorkspaceResourceMaxComputeProps`
 *
 * @param properties - the TypeScript properties of a `RosWorkspaceResourceMaxComputeProps`
 *
 * @returns the result of the validation.
 */
function RosWorkspaceResourceMaxComputePropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('isDefault', ros.validateBoolean)(properties.isDefault));
    errors.collect(ros.propertyValidator('groupName', ros.requiredValidator)(properties.groupName));
    errors.collect(ros.propertyValidator('groupName', ros.validateString)(properties.groupName));
    errors.collect(ros.propertyValidator('workspaceId', ros.requiredValidator)(properties.workspaceId));
    errors.collect(ros.propertyValidator('workspaceId', ros.validateString)(properties.workspaceId));
    if (properties.option && (typeof properties.option) !== 'object') {
        errors.collect(ros.propertyValidator('option', ros.validateAllowedValues)({
            data: properties.option,
            allowedValues: ["CreateAndAttach", "Attach"],
        }));
    }
    errors.collect(ros.propertyValidator('option', ros.validateString)(properties.option));
    errors.collect(ros.propertyValidator('resources', ros.requiredValidator)(properties.resources));
    if (properties.resources && (Array.isArray(properties.resources) || (typeof properties.resources) === 'string')) {
        errors.collect(ros.propertyValidator('resources', ros.validateLength)({
            data: properties.resources.length,
            min: 1,
            max: 10,
        }));
    }
    errors.collect(ros.propertyValidator('resources', ros.listValidator(RosWorkspaceResourceMaxCompute_ResourcesPropertyValidator))(properties.resources));
    return errors.wrap('supplied properties not correct for "RosWorkspaceResourceMaxComputeProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::PAI::WorkspaceResourceMaxCompute` resource
 *
 * @param properties - the TypeScript properties of a `RosWorkspaceResourceMaxComputeProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::PAI::WorkspaceResourceMaxCompute` resource.
 */
// @ts-ignore TS6133
function rosWorkspaceResourceMaxComputePropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosWorkspaceResourceMaxComputePropsValidator(properties).assertSuccess();
    }
    return {
        GroupName: ros.stringToRosTemplate(properties.groupName),
        Resources: ros.listMapper(rosWorkspaceResourceMaxComputeResourcesPropertyToRosTemplate)(properties.resources),
        WorkspaceId: ros.stringToRosTemplate(properties.workspaceId),
        IsDefault: ros.booleanToRosTemplate(properties.isDefault),
        Option: ros.stringToRosTemplate(properties.option),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::PAI::WorkspaceResourceMaxCompute`.
 * @Note This class does not contain additional functions, so it is recommended to use the `WorkspaceResourceMaxCompute` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-pai-workspaceresourcemaxcompute
 */
class RosWorkspaceResourceMaxCompute extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosWorkspaceResourceMaxCompute.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrCreateTime = this.getAtt('CreateTime');
        this.attrGroupName = this.getAtt('GroupName');
        this.attrIsDefault = this.getAtt('IsDefault');
        this.attrResources = this.getAtt('Resources');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.groupName = props.groupName;
        this.resources = props.resources;
        this.workspaceId = props.workspaceId;
        this.isDefault = props.isDefault;
        this.option = props.option;
    }
    get rosProperties() {
        return {
            groupName: this.groupName,
            resources: this.resources,
            workspaceId: this.workspaceId,
            isDefault: this.isDefault,
            option: this.option,
        };
    }
    renderProperties(props) {
        return rosWorkspaceResourceMaxComputePropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosWorkspaceResourceMaxCompute = RosWorkspaceResourceMaxCompute;
/**
 * The resource type name for this resource class.
 */
RosWorkspaceResourceMaxCompute.ROS_RESOURCE_TYPE_NAME = "ALIYUN::PAI::WorkspaceResourceMaxCompute";
/**
 * Determine whether the given properties match those of a `QuotasProperty`
 *
 * @param properties - the TypeScript properties of a `QuotasProperty`
 *
 * @returns the result of the validation.
 */
function RosWorkspaceResourceMaxCompute_QuotasPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('quotaId', ros.requiredValidator)(properties.quotaId));
    errors.collect(ros.propertyValidator('quotaId', ros.validateString)(properties.quotaId));
    return errors.wrap('supplied properties not correct for "QuotasProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::PAI::WorkspaceResourceMaxCompute.Quotas` resource
 *
 * @param properties - the TypeScript properties of a `QuotasProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::PAI::WorkspaceResourceMaxCompute.Quotas` resource.
 */
// @ts-ignore TS6133
function rosWorkspaceResourceMaxComputeQuotasPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosWorkspaceResourceMaxCompute_QuotasPropertyValidator(properties).assertSuccess();
    return {
        QuotaId: ros.stringToRosTemplate(properties.quotaId),
    };
}
/**
 * Determine whether the given properties match those of a `ResourcesProperty`
 *
 * @param properties - the TypeScript properties of a `ResourcesProperty`
 *
 * @returns the result of the validation.
 */
function RosWorkspaceResourceMaxCompute_ResourcesPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('workspaceResourceWorkspaceId', ros.requiredValidator)(properties.workspaceResourceWorkspaceId));
    errors.collect(ros.propertyValidator('workspaceResourceWorkspaceId', ros.validateString)(properties.workspaceResourceWorkspaceId));
    if (properties.quotas && (Array.isArray(properties.quotas) || (typeof properties.quotas) === 'string')) {
        errors.collect(ros.propertyValidator('quotas', ros.validateLength)({
            data: properties.quotas.length,
            min: 0,
            max: 10,
        }));
    }
    errors.collect(ros.propertyValidator('quotas', ros.listValidator(RosWorkspaceResourceMaxCompute_QuotasPropertyValidator))(properties.quotas));
    errors.collect(ros.propertyValidator('workspaceResourceName', ros.requiredValidator)(properties.workspaceResourceName));
    errors.collect(ros.propertyValidator('workspaceResourceName', ros.validateString)(properties.workspaceResourceName));
    errors.collect(ros.propertyValidator('spec', ros.hashValidator(ros.validateAny))(properties.spec));
    errors.collect(ros.propertyValidator('envType', ros.requiredValidator)(properties.envType));
    if (properties.envType && (typeof properties.envType) !== 'object') {
        errors.collect(ros.propertyValidator('envType', ros.validateAllowedValues)({
            data: properties.envType,
            allowedValues: ["dev", "prod"],
        }));
    }
    errors.collect(ros.propertyValidator('envType', ros.validateString)(properties.envType));
    return errors.wrap('supplied properties not correct for "ResourcesProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::PAI::WorkspaceResourceMaxCompute.Resources` resource
 *
 * @param properties - the TypeScript properties of a `ResourcesProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::PAI::WorkspaceResourceMaxCompute.Resources` resource.
 */
// @ts-ignore TS6133
function rosWorkspaceResourceMaxComputeResourcesPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosWorkspaceResourceMaxCompute_ResourcesPropertyValidator(properties).assertSuccess();
    return {
        WorkspaceResourceWorkspaceId: ros.stringToRosTemplate(properties.workspaceResourceWorkspaceId),
        Quotas: ros.listMapper(rosWorkspaceResourceMaxComputeQuotasPropertyToRosTemplate)(properties.quotas),
        WorkspaceResourceName: ros.stringToRosTemplate(properties.workspaceResourceName),
        Spec: ros.hashMapper(ros.objectToRosTemplate)(properties.spec),
        EnvType: ros.stringToRosTemplate(properties.envType),
    };
}
//# sourceMappingURL=data:application/json;base64,