"use strict";
// Generated from the AliCloud ROS Resource Specification
Object.defineProperty(exports, "__esModule", { value: true });
exports.RosMyBase = exports.RosDedicatedHostGroup = exports.RosDedicatedHost = void 0;
const ros = require("@alicloud/ros-cdk-core");
/**
 * Determine whether the given properties match those of a `RosDedicatedHostProps`
 *
 * @param properties - the TypeScript properties of a `RosDedicatedHostProps`
 *
 * @returns the result of the validation.
 */
function RosDedicatedHostPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('hostClass', ros.requiredValidator)(properties.hostClass));
    errors.collect(ros.propertyValidator('hostClass', ros.validateString)(properties.hostClass));
    errors.collect(ros.propertyValidator('osPassword', ros.validateString)(properties.osPassword));
    errors.collect(ros.propertyValidator('zoneId', ros.requiredValidator)(properties.zoneId));
    errors.collect(ros.propertyValidator('zoneId', ros.validateString)(properties.zoneId));
    errors.collect(ros.propertyValidator('dedicatedHostGroupId', ros.requiredValidator)(properties.dedicatedHostGroupId));
    errors.collect(ros.propertyValidator('dedicatedHostGroupId', ros.validateString)(properties.dedicatedHostGroupId));
    errors.collect(ros.propertyValidator('autoRenew', ros.validateString)(properties.autoRenew));
    errors.collect(ros.propertyValidator('vSwitchId', ros.requiredValidator)(properties.vSwitchId));
    errors.collect(ros.propertyValidator('vSwitchId', ros.validateString)(properties.vSwitchId));
    errors.collect(ros.propertyValidator('usedTime', ros.validateString)(properties.usedTime));
    errors.collect(ros.propertyValidator('imageCategory', ros.validateString)(properties.imageCategory));
    errors.collect(ros.propertyValidator('period', ros.validateString)(properties.period));
    errors.collect(ros.propertyValidator('paymentType', ros.requiredValidator)(properties.paymentType));
    errors.collect(ros.propertyValidator('paymentType', ros.validateString)(properties.paymentType));
    errors.collect(ros.propertyValidator('hostName', ros.validateString)(properties.hostName));
    errors.collect(ros.propertyValidator('tags', ros.listValidator(RosDedicatedHost_TagsPropertyValidator))(properties.tags));
    return errors.wrap('supplied properties not correct for "RosDedicatedHostProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::CDDC::DedicatedHost` resource
 *
 * @param properties - the TypeScript properties of a `RosDedicatedHostProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::CDDC::DedicatedHost` resource.
 */
// @ts-ignore TS6133
function rosDedicatedHostPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosDedicatedHostPropsValidator(properties).assertSuccess();
    }
    return {
        'DedicatedHostGroupId': ros.stringToRosTemplate(properties.dedicatedHostGroupId),
        'HostClass': ros.stringToRosTemplate(properties.hostClass),
        'PaymentType': ros.stringToRosTemplate(properties.paymentType),
        'VSwitchId': ros.stringToRosTemplate(properties.vSwitchId),
        'ZoneId': ros.stringToRosTemplate(properties.zoneId),
        'AutoRenew': ros.stringToRosTemplate(properties.autoRenew),
        'HostName': ros.stringToRosTemplate(properties.hostName),
        'ImageCategory': ros.stringToRosTemplate(properties.imageCategory),
        'OsPassword': ros.stringToRosTemplate(properties.osPassword),
        'Period': ros.stringToRosTemplate(properties.period),
        'Tags': ros.listMapper(rosDedicatedHostTagsPropertyToRosTemplate)(properties.tags),
        'UsedTime': ros.stringToRosTemplate(properties.usedTime),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::CDDC::DedicatedHost`, which is used to create a host in a dedicated cluster.
 * @Note This class does not contain additional functions, so it is recommended to use the `DedicatedHost` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-cddc-dedicatedhost
 */
class RosDedicatedHost extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosDedicatedHost.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrAutoRenew = this.getAtt('AutoRenew');
        this.attrCpuAllocationRatio = this.getAtt('CpuAllocationRatio');
        this.attrCpuUsed = this.getAtt('CpuUsed');
        this.attrDedicatedHostGroupId = this.getAtt('DedicatedHostGroupId');
        this.attrDedicatedHostId = this.getAtt('DedicatedHostId');
        this.attrDiskAllocationRatio = this.getAtt('DiskAllocationRatio');
        this.attrEcsClassCode = this.getAtt('EcsClassCode');
        this.attrHostClass = this.getAtt('HostClass');
        this.attrHostCpu = this.getAtt('HostCpu');
        this.attrHostMem = this.getAtt('HostMem');
        this.attrHostName = this.getAtt('HostName');
        this.attrHostStorage = this.getAtt('HostStorage');
        this.attrHostType = this.getAtt('HostType');
        this.attrImageCategory = this.getAtt('ImageCategory');
        this.attrIpAddress = this.getAtt('IpAddress');
        this.attrMemAllocationRatio = this.getAtt('MemAllocationRatio');
        this.attrMemoryUsed = this.getAtt('MemoryUsed');
        this.attrOpenPermission = this.getAtt('OpenPermission');
        this.attrPaymentType = this.getAtt('PaymentType');
        this.attrStorageUsed = this.getAtt('StorageUsed');
        this.attrVSwitchId = this.getAtt('VSwitchId');
        this.attrVpcId = this.getAtt('VpcId');
        this.attrZoneId = this.getAtt('ZoneId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.dedicatedHostGroupId = props.dedicatedHostGroupId;
        this.hostClass = props.hostClass;
        this.paymentType = props.paymentType;
        this.vSwitchId = props.vSwitchId;
        this.zoneId = props.zoneId;
        this.autoRenew = props.autoRenew;
        this.hostName = props.hostName;
        this.imageCategory = props.imageCategory;
        this.osPassword = props.osPassword;
        this.period = props.period;
        this.tags = props.tags;
        this.usedTime = props.usedTime;
    }
    get rosProperties() {
        return {
            dedicatedHostGroupId: this.dedicatedHostGroupId,
            hostClass: this.hostClass,
            paymentType: this.paymentType,
            vSwitchId: this.vSwitchId,
            zoneId: this.zoneId,
            autoRenew: this.autoRenew,
            hostName: this.hostName,
            imageCategory: this.imageCategory,
            osPassword: this.osPassword,
            period: this.period,
            tags: this.tags,
            usedTime: this.usedTime,
        };
    }
    renderProperties(props) {
        return rosDedicatedHostPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosDedicatedHost = RosDedicatedHost;
/**
 * The resource type name for this resource class.
 */
RosDedicatedHost.ROS_RESOURCE_TYPE_NAME = "ALIYUN::CDDC::DedicatedHost";
/**
 * Determine whether the given properties match those of a `TagsProperty`
 *
 * @param properties - the TypeScript properties of a `TagsProperty`
 *
 * @returns the result of the validation.
 */
function RosDedicatedHost_TagsPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('tagKey', ros.validateString)(properties.tagKey));
    errors.collect(ros.propertyValidator('tagValue', ros.validateString)(properties.tagValue));
    return errors.wrap('supplied properties not correct for "TagsProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::CDDC::DedicatedHost.Tags` resource
 *
 * @param properties - the TypeScript properties of a `TagsProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::CDDC::DedicatedHost.Tags` resource.
 */
// @ts-ignore TS6133
function rosDedicatedHostTagsPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosDedicatedHost_TagsPropertyValidator(properties).assertSuccess();
    return {
        'TagKey': ros.stringToRosTemplate(properties.tagKey),
        'TagValue': ros.stringToRosTemplate(properties.tagValue),
    };
}
/**
 * Determine whether the given properties match those of a `RosDedicatedHostGroupProps`
 *
 * @param properties - the TypeScript properties of a `RosDedicatedHostGroupProps`
 *
 * @returns the result of the validation.
 */
function RosDedicatedHostGroupPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('diskAllocationRatio', ros.validateNumber)(properties.diskAllocationRatio));
    errors.collect(ros.propertyValidator('allocationPolicy', ros.validateString)(properties.allocationPolicy));
    errors.collect(ros.propertyValidator('vpcId', ros.requiredValidator)(properties.vpcId));
    errors.collect(ros.propertyValidator('vpcId', ros.validateString)(properties.vpcId));
    errors.collect(ros.propertyValidator('memAllocationRatio', ros.validateNumber)(properties.memAllocationRatio));
    errors.collect(ros.propertyValidator('hostReplacePolicy', ros.validateString)(properties.hostReplacePolicy));
    errors.collect(ros.propertyValidator('cpuAllocationRatio', ros.validateNumber)(properties.cpuAllocationRatio));
    errors.collect(ros.propertyValidator('engine', ros.requiredValidator)(properties.engine));
    errors.collect(ros.propertyValidator('engine', ros.validateString)(properties.engine));
    errors.collect(ros.propertyValidator('dedicatedHostGroupDesc', ros.validateString)(properties.dedicatedHostGroupDesc));
    errors.collect(ros.propertyValidator('openPermission', ros.validateString)(properties.openPermission));
    return errors.wrap('supplied properties not correct for "RosDedicatedHostGroupProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::CDDC::DedicatedHostGroup` resource
 *
 * @param properties - the TypeScript properties of a `RosDedicatedHostGroupProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::CDDC::DedicatedHostGroup` resource.
 */
// @ts-ignore TS6133
function rosDedicatedHostGroupPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosDedicatedHostGroupPropsValidator(properties).assertSuccess();
    }
    return {
        'Engine': ros.stringToRosTemplate(properties.engine),
        'VpcId': ros.stringToRosTemplate(properties.vpcId),
        'AllocationPolicy': ros.stringToRosTemplate(properties.allocationPolicy),
        'CpuAllocationRatio': ros.numberToRosTemplate(properties.cpuAllocationRatio),
        'DedicatedHostGroupDesc': ros.stringToRosTemplate(properties.dedicatedHostGroupDesc),
        'DiskAllocationRatio': ros.numberToRosTemplate(properties.diskAllocationRatio),
        'HostReplacePolicy': ros.stringToRosTemplate(properties.hostReplacePolicy),
        'MemAllocationRatio': ros.numberToRosTemplate(properties.memAllocationRatio),
        'OpenPermission': ros.stringToRosTemplate(properties.openPermission),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::CDDC::DedicatedHostGroup`, which is used to create a dedicated cluster.
 * @Note This class does not contain additional functions, so it is recommended to use the `DedicatedHostGroup` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-cddc-dedicatedhostgroup
 */
class RosDedicatedHostGroup extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosDedicatedHostGroup.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrAllocationPolicy = this.getAtt('AllocationPolicy');
        this.attrBastionInstanceId = this.getAtt('BastionInstanceId');
        this.attrCpuAllocateRation = this.getAtt('CpuAllocateRation');
        this.attrCpuAllocatedAmount = this.getAtt('CpuAllocatedAmount');
        this.attrCpuAllocationRatio = this.getAtt('CpuAllocationRatio');
        this.attrDedicatedHostGroupDesc = this.getAtt('DedicatedHostGroupDesc');
        this.attrDedicatedHostGroupId = this.getAtt('DedicatedHostGroupId');
        this.attrDeployType = this.getAtt('DeployType');
        this.attrDiskAllocateRation = this.getAtt('DiskAllocateRation');
        this.attrDiskAllocatedAmount = this.getAtt('DiskAllocatedAmount');
        this.attrDiskAllocationRatio = this.getAtt('DiskAllocationRatio');
        this.attrDiskUsedAmount = this.getAtt('DiskUsedAmount');
        this.attrDiskUtility = this.getAtt('DiskUtility');
        this.attrEngine = this.getAtt('Engine');
        this.attrHostNumber = this.getAtt('HostNumber');
        this.attrHostReplacePolicy = this.getAtt('HostReplacePolicy');
        this.attrInstanceNumber = this.getAtt('InstanceNumber');
        this.attrMemAllocateRation = this.getAtt('MemAllocateRation');
        this.attrMemAllocatedAmount = this.getAtt('MemAllocatedAmount');
        this.attrMemAllocationRatio = this.getAtt('MemAllocationRatio');
        this.attrMemUsedAmount = this.getAtt('MemUsedAmount');
        this.attrMemUtility = this.getAtt('MemUtility');
        this.attrOpenPermission = this.getAtt('OpenPermission');
        this.attrText = this.getAtt('Text');
        this.attrVpcId = this.getAtt('VpcId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.engine = props.engine;
        this.vpcId = props.vpcId;
        this.allocationPolicy = props.allocationPolicy;
        this.cpuAllocationRatio = props.cpuAllocationRatio;
        this.dedicatedHostGroupDesc = props.dedicatedHostGroupDesc;
        this.diskAllocationRatio = props.diskAllocationRatio;
        this.hostReplacePolicy = props.hostReplacePolicy;
        this.memAllocationRatio = props.memAllocationRatio;
        this.openPermission = props.openPermission;
    }
    get rosProperties() {
        return {
            engine: this.engine,
            vpcId: this.vpcId,
            allocationPolicy: this.allocationPolicy,
            cpuAllocationRatio: this.cpuAllocationRatio,
            dedicatedHostGroupDesc: this.dedicatedHostGroupDesc,
            diskAllocationRatio: this.diskAllocationRatio,
            hostReplacePolicy: this.hostReplacePolicy,
            memAllocationRatio: this.memAllocationRatio,
            openPermission: this.openPermission,
        };
    }
    renderProperties(props) {
        return rosDedicatedHostGroupPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosDedicatedHostGroup = RosDedicatedHostGroup;
/**
 * The resource type name for this resource class.
 */
RosDedicatedHostGroup.ROS_RESOURCE_TYPE_NAME = "ALIYUN::CDDC::DedicatedHostGroup";
/**
 * Determine whether the given properties match those of a `RosMyBaseProps`
 *
 * @param properties - the TypeScript properties of a `RosMyBaseProps`
 *
 * @returns the result of the validation.
 */
function RosMyBasePropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('ecsInstanceName', ros.validateString)(properties.ecsInstanceName));
    errors.collect(ros.propertyValidator('periodType', ros.validateString)(properties.periodType));
    errors.collect(ros.propertyValidator('resourceGroupId', ros.validateString)(properties.resourceGroupId));
    errors.collect(ros.propertyValidator('userData', ros.validateString)(properties.userData));
    errors.collect(ros.propertyValidator('dedicatedHostGroupDescription', ros.validateString)(properties.dedicatedHostGroupDescription));
    errors.collect(ros.propertyValidator('dedicatedHostGroupId', ros.validateString)(properties.dedicatedHostGroupId));
    errors.collect(ros.propertyValidator('autoRenew', ros.validateBoolean)(properties.autoRenew));
    errors.collect(ros.propertyValidator('ecsUniqueSuffix', ros.validateBoolean)(properties.ecsUniqueSuffix));
    errors.collect(ros.propertyValidator('imageId', ros.validateString)(properties.imageId));
    errors.collect(ros.propertyValidator('userDataInBase64', ros.validateBoolean)(properties.userDataInBase64));
    errors.collect(ros.propertyValidator('ecsHostName', ros.validateString)(properties.ecsHostName));
    errors.collect(ros.propertyValidator('engine', ros.requiredValidator)(properties.engine));
    errors.collect(ros.propertyValidator('engine', ros.validateString)(properties.engine));
    errors.collect(ros.propertyValidator('passwordInherit', ros.validateBoolean)(properties.passwordInherit));
    errors.collect(ros.propertyValidator('keyPairName', ros.validateString)(properties.keyPairName));
    errors.collect(ros.propertyValidator('zoneId', ros.requiredValidator)(properties.zoneId));
    errors.collect(ros.propertyValidator('zoneId', ros.validateString)(properties.zoneId));
    errors.collect(ros.propertyValidator('vSwitchId', ros.requiredValidator)(properties.vSwitchId));
    errors.collect(ros.propertyValidator('vSwitchId', ros.validateString)(properties.vSwitchId));
    errors.collect(ros.propertyValidator('securityGroupId', ros.requiredValidator)(properties.securityGroupId));
    errors.collect(ros.propertyValidator('securityGroupId', ros.validateString)(properties.securityGroupId));
    errors.collect(ros.propertyValidator('ecsClassList', ros.requiredValidator)(properties.ecsClassList));
    if (properties.ecsClassList && (Array.isArray(properties.ecsClassList) || (typeof properties.ecsClassList) === 'string')) {
        errors.collect(ros.propertyValidator('ecsClassList', ros.validateLength)({
            data: properties.ecsClassList.length,
            min: 1,
            max: 1,
        }));
    }
    errors.collect(ros.propertyValidator('ecsClassList', ros.listValidator(ros.validateAnyDict))(properties.ecsClassList));
    errors.collect(ros.propertyValidator('period', ros.requiredValidator)(properties.period));
    if (properties.period && (typeof properties.period) !== 'object') {
        errors.collect(ros.propertyValidator('period', ros.validateRange)({
            data: properties.period,
            min: 1,
            max: 12,
        }));
    }
    errors.collect(ros.propertyValidator('period', ros.validateNumber)(properties.period));
    errors.collect(ros.propertyValidator('payType', ros.requiredValidator)(properties.payType));
    if (properties.payType && (typeof properties.payType) !== 'object') {
        errors.collect(ros.propertyValidator('payType', ros.validateAllowedValues)({
            data: properties.payType,
            allowedValues: ["Subscription", "PrePaid", "Prepaid", "PrePay", "Prepay", "PREPAY", "PRE"],
        }));
    }
    errors.collect(ros.propertyValidator('payType', ros.validateString)(properties.payType));
    if (properties.internetChargeType && (typeof properties.internetChargeType) !== 'object') {
        errors.collect(ros.propertyValidator('internetChargeType', ros.validateAllowedValues)({
            data: properties.internetChargeType,
            allowedValues: ["PayByBandwidth", "PayByTraffic"],
        }));
    }
    errors.collect(ros.propertyValidator('internetChargeType', ros.validateString)(properties.internetChargeType));
    errors.collect(ros.propertyValidator('ecsDeploymentSetId', ros.validateString)(properties.ecsDeploymentSetId));
    if (properties.internetMaxBandwidthOut && (typeof properties.internetMaxBandwidthOut) !== 'object') {
        errors.collect(ros.propertyValidator('internetMaxBandwidthOut', ros.validateRange)({
            data: properties.internetMaxBandwidthOut,
            min: 0,
            max: undefined,
        }));
    }
    errors.collect(ros.propertyValidator('internetMaxBandwidthOut', ros.validateNumber)(properties.internetMaxBandwidthOut));
    errors.collect(ros.propertyValidator('vpcId', ros.requiredValidator)(properties.vpcId));
    errors.collect(ros.propertyValidator('vpcId', ros.validateString)(properties.vpcId));
    errors.collect(ros.propertyValidator('osPassword', ros.validateString)(properties.osPassword));
    return errors.wrap('supplied properties not correct for "RosMyBaseProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::CDDC::MyBase` resource
 *
 * @param properties - the TypeScript properties of a `RosMyBaseProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::CDDC::MyBase` resource.
 */
// @ts-ignore TS6133
function rosMyBasePropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosMyBasePropsValidator(properties).assertSuccess();
    }
    return {
        'ECSClassList': ros.listMapper(ros.anyDictToRosTemplate)(properties.ecsClassList),
        'Engine': ros.stringToRosTemplate(properties.engine),
        'PayType': ros.stringToRosTemplate(properties.payType),
        'Period': ros.numberToRosTemplate(properties.period),
        'SecurityGroupId': ros.stringToRosTemplate(properties.securityGroupId),
        'VpcId': ros.stringToRosTemplate(properties.vpcId),
        'VSwitchId': ros.stringToRosTemplate(properties.vSwitchId),
        'ZoneId': ros.stringToRosTemplate(properties.zoneId),
        'AutoRenew': ros.booleanToRosTemplate(properties.autoRenew),
        'DedicatedHostGroupDescription': ros.stringToRosTemplate(properties.dedicatedHostGroupDescription),
        'DedicatedHostGroupId': ros.stringToRosTemplate(properties.dedicatedHostGroupId),
        'EcsDeploymentSetId': ros.stringToRosTemplate(properties.ecsDeploymentSetId),
        'EcsHostName': ros.stringToRosTemplate(properties.ecsHostName),
        'EcsInstanceName': ros.stringToRosTemplate(properties.ecsInstanceName),
        'EcsUniqueSuffix': ros.booleanToRosTemplate(properties.ecsUniqueSuffix),
        'ImageId': ros.stringToRosTemplate(properties.imageId),
        'InternetChargeType': ros.stringToRosTemplate(properties.internetChargeType),
        'InternetMaxBandwidthOut': ros.numberToRosTemplate(properties.internetMaxBandwidthOut),
        'KeyPairName': ros.stringToRosTemplate(properties.keyPairName),
        'OsPassword': ros.stringToRosTemplate(properties.osPassword),
        'PasswordInherit': ros.booleanToRosTemplate(properties.passwordInherit),
        'PeriodType': ros.stringToRosTemplate(properties.periodType),
        'ResourceGroupId': ros.stringToRosTemplate(properties.resourceGroupId),
        'UserData': ros.stringToRosTemplate(properties.userData),
        'UserDataInBase64': ros.booleanToRosTemplate(properties.userDataInBase64),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::CDDC::MyBase`, which is used to create a host in a Proprietary MyBase dedicated cluster in ApsaraDB for MyBase.
 * @Note This class does not contain additional functions, so it is recommended to use the `MyBase` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-cddc-mybase
 */
class RosMyBase extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosMyBase.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrInstanceIds = this.getAtt('InstanceIds');
        this.attrOrderIds = this.getAtt('OrderIds');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.ecsClassList = props.ecsClassList;
        this.engine = props.engine;
        this.payType = props.payType;
        this.period = props.period;
        this.securityGroupId = props.securityGroupId;
        this.vpcId = props.vpcId;
        this.vSwitchId = props.vSwitchId;
        this.zoneId = props.zoneId;
        this.autoRenew = props.autoRenew;
        this.dedicatedHostGroupDescription = props.dedicatedHostGroupDescription;
        this.dedicatedHostGroupId = props.dedicatedHostGroupId;
        this.ecsDeploymentSetId = props.ecsDeploymentSetId;
        this.ecsHostName = props.ecsHostName;
        this.ecsInstanceName = props.ecsInstanceName;
        this.ecsUniqueSuffix = props.ecsUniqueSuffix;
        this.imageId = props.imageId;
        this.internetChargeType = props.internetChargeType;
        this.internetMaxBandwidthOut = props.internetMaxBandwidthOut;
        this.keyPairName = props.keyPairName;
        this.osPassword = props.osPassword;
        this.passwordInherit = props.passwordInherit;
        this.periodType = props.periodType;
        this.resourceGroupId = props.resourceGroupId;
        this.userData = props.userData;
        this.userDataInBase64 = props.userDataInBase64;
    }
    get rosProperties() {
        return {
            ecsClassList: this.ecsClassList,
            engine: this.engine,
            payType: this.payType,
            period: this.period,
            securityGroupId: this.securityGroupId,
            vpcId: this.vpcId,
            vSwitchId: this.vSwitchId,
            zoneId: this.zoneId,
            autoRenew: this.autoRenew,
            dedicatedHostGroupDescription: this.dedicatedHostGroupDescription,
            dedicatedHostGroupId: this.dedicatedHostGroupId,
            ecsDeploymentSetId: this.ecsDeploymentSetId,
            ecsHostName: this.ecsHostName,
            ecsInstanceName: this.ecsInstanceName,
            ecsUniqueSuffix: this.ecsUniqueSuffix,
            imageId: this.imageId,
            internetChargeType: this.internetChargeType,
            internetMaxBandwidthOut: this.internetMaxBandwidthOut,
            keyPairName: this.keyPairName,
            osPassword: this.osPassword,
            passwordInherit: this.passwordInherit,
            periodType: this.periodType,
            resourceGroupId: this.resourceGroupId,
            userData: this.userData,
            userDataInBase64: this.userDataInBase64,
        };
    }
    renderProperties(props) {
        return rosMyBasePropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosMyBase = RosMyBase;
/**
 * The resource type name for this resource class.
 */
RosMyBase.ROS_RESOURCE_TYPE_NAME = "ALIYUN::CDDC::MyBase";
//# sourceMappingURL=data:application/json;base64,