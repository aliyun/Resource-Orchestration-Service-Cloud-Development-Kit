"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Resource = void 0;
const construct_compat_1 = require("./construct-compat");
const physical_name_generator_1 = require("./private/physical-name-generator");
const token_1 = require("./token");
const lazy_1 = require("./lazy");
const stack_1 = require("./stack");
const arn_1 = require("./arn");
/**
 * A construct which represents a resource.
 */
class Resource extends construct_compat_1.Construct {
    constructor(scope, id, props = {}) {
        super(scope, id);
        this.stack = stack_1.Stack.of(this);
        const parsedArn = props.environmentFromArn ?
            // Since we only want the region and account, NO_RESOURCE_NAME is good enough
            arn_1.Arn.split(props.environmentFromArn, arn_1.ArnFormat.NO_RESOURCE_NAME)
            : undefined;
        this.env = {
            account: props.account ?? parsedArn?.account ?? this.stack.account,
            region: props.region ?? parsedArn?.region ?? this.stack.region,
        };
        let physicalName = props.physicalName;
        if (props.physicalName && physical_name_generator_1.isGeneratedWhenNeededMarker(props.physicalName)) {
            // auto-generate only if cross-env is required
            this._physicalName = undefined;
            this._allowCrossEnvironment = true;
            physicalName = lazy_1.Lazy.stringValue({ produce: () => this._physicalName });
        }
        else if (props.physicalName && !token_1.Token.isUnresolved(props.physicalName)) {
            // concrete value specified by the user
            this._physicalName = props.physicalName;
            this._allowCrossEnvironment = true;
        }
        else {
            // either undefined (deploy-time) or has tokens, which means we can't use for cross-env
            this._physicalName = props.physicalName;
            this._allowCrossEnvironment = false;
        }
        if (physicalName === undefined) {
            physicalName = token_1.Token.asString(undefined);
        }
        this.physicalName = physicalName;
    }
    addDependency(resource) {
        this.resource?.addRosDependency(resource.node.id);
    }
    fetchDependency() {
        return this.resource?.fetchRosDependency();
    }
    applyRemovalPolicy(policy) {
        this.resource?.applyRemovalPolicy(policy);
    }
    addCondition(condition) {
        this.resource?.addCondition(condition);
    }
    fetchCondition() {
        return this.resource?.fetchCondition();
    }
    addResourceDesc(desc) {
        this.resource?.addDesc(desc);
    }
    fetchResourceDesc() {
        return this.resource?.fetchDesc();
    }
    setMetadata(key, value) {
        if (this.resource) {
            this.resource.addMetaData(key, value);
        }
    }
    addCount(count) {
        this.resource?.addCount(count);
    }
    getAtt(name) {
        return token_1.Token.asAny(this.resource?.getAtt(name));
    }
    get ref() {
        return token_1.Token.asString(this.resource?.ref);
    }
    /**
     * Called when this resource is referenced across environments
     * (account/region) to order to request that a physical name will be generated
     * for this resource during synthesis, so the resource can be referenced
     * through it's absolute name/arn.
     *
     * @internal
     */
    _enableCrossEnvironment() {
        if (!this._allowCrossEnvironment) {
            // error out - a deploy-time name cannot be used across environments
            throw new Error(`Cannot use resource '${this.node.path}' in a cross-environment fashion, ` +
                "the resource's physical name must be explicit set or use `PhysicalName.GENERATE_IF_NEEDED`");
        }
        if (!this._physicalName) {
            this._physicalName = this.generatePhysicalName();
        }
    }
    generatePhysicalName() {
        return physical_name_generator_1.generatePhysicalName(this);
    }
}
exports.Resource = Resource;
//# sourceMappingURL=data:application/json;base64,