"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SecurityGroupRule = void 0;
/**
 * A single security group rule, either egress or ingress
 */
class SecurityGroupRule {
    constructor(ruleObject, groupRef) {
        this.ipProtocol = ruleObject.IpProtocol || '*unknown*';
        this.fromPort = ruleObject.FromPort;
        this.toPort = ruleObject.ToPort;
        this.groupId = ruleObject.GroupId || groupRef || '*unknown*'; // In case of an inline rule
        this.peer =
            findFirst(ruleObject, ['CidrIp', 'CidrIpv6'], (ip) => ({ kind: 'cidr-ip', ip })) ||
                findFirst(ruleObject, ['DestinationSecurityGroupId', 'SourceSecurityGroupId'], (securityGroupId) => ({ kind: 'security-group', securityGroupId })) ||
                findFirst(ruleObject, ['DestinationPrefixListId', 'SourcePrefixListId'], (prefixListId) => ({ kind: 'prefix-list', prefixListId }));
    }
    equal(other) {
        return (this.ipProtocol === other.ipProtocol &&
            this.fromPort === other.fromPort &&
            this.toPort === other.toPort &&
            peerEqual(this.peer, other.peer));
    }
    describeProtocol() {
        if (this.ipProtocol === '-1') {
            return 'Everything';
        }
        const ipProtocol = this.ipProtocol.toUpperCase();
        if (this.fromPort === -1) {
            return `All ${ipProtocol}`;
        }
        if (this.fromPort === this.toPort) {
            return `${ipProtocol} ${this.fromPort}`;
        }
        return `${ipProtocol} ${this.fromPort}-${this.toPort}`;
    }
    describePeer() {
        if (this.peer) {
            switch (this.peer.kind) {
                case 'cidr-ip':
                    if (this.peer.ip === '0.0.0.0/0') {
                        return 'Everyone (IPv4)';
                    }
                    if (this.peer.ip === '::/0') {
                        return 'Everyone (IPv6)';
                    }
                    return `${this.peer.ip}`;
                case 'prefix-list':
                    return `${this.peer.prefixListId}`;
                case 'security-group':
                    return `${this.peer.securityGroupId}`;
            }
        }
        return '?';
    }
    toJson() {
        return {
            groupId: this.groupId,
            ipProtocol: this.ipProtocol,
            fromPort: this.fromPort,
            toPort: this.toPort,
            peer: this.peer,
        };
    }
}
exports.SecurityGroupRule = SecurityGroupRule;
function peerEqual(a, b) {
    if ((a === undefined) !== (b === undefined)) {
        return false;
    }
    if (a === undefined) {
        return true;
    }
    if (a.kind !== b.kind) {
        return false;
    }
    switch (a.kind) {
        case 'cidr-ip':
            return a.ip === b.ip;
        case 'security-group':
            return a.securityGroupId === b.securityGroupId;
        case 'prefix-list':
            return a.prefixListId === b.prefixListId;
    }
}
function findFirst(obj, keys, fn) {
    for (const key of keys) {
        if (key in obj) {
            return fn(obj[key]);
        }
    }
    return undefined;
}
//# sourceMappingURL=data:application/json;base64,