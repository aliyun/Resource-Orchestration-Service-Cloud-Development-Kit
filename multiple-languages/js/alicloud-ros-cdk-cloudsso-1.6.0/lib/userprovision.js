"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserProvision = exports.UserProvisionProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const cloudsso_generated_1 = require("./cloudsso.generated");
Object.defineProperty(exports, "UserProvisionProperty", { enumerable: true, get: function () { return cloudsso_generated_1.RosUserProvision; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::CloudSSO::UserProvision`, which is used to create a Resource Access Management (RAM) user provisioning.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosUserProvision`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-cloudsso-userprovision
 */
class UserProvision extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosUserProvision = new cloudsso_generated_1.RosUserProvision(this, id, {
            description: props.description,
            directoryId: props.directoryId,
            principalId: props.principalId,
            targetType: props.targetType,
            duplicationStrategy: props.duplicationStrategy,
            deletionStrategy: props.deletionStrategy,
            principalType: props.principalType,
            targetId: props.targetId,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosUserProvision;
        this.attrUserProvisionId = rosUserProvision.attrUserProvisionId;
    }
}
exports.UserProvision = UserProvision;
//# sourceMappingURL=data:application/json;base64,