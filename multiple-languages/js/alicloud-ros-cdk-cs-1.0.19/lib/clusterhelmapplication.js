"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClusterHelmApplication = exports.ClusterHelmApplicationProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const cs_generated_1 = require("./cs.generated");
Object.defineProperty(exports, "ClusterHelmApplicationProperty", { enumerable: true, get: function () { return cs_generated_1.RosClusterHelmApplication; } });
/**
 * A ROS resource type:  `ALIYUN::CS::ClusterHelmApplication`
 */
class ClusterHelmApplication extends ros.Resource {
    /**
     * Create a new `ALIYUN::CS::ClusterHelmApplication`.
     *
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosClusterHelmApplication = new cs_generated_1.RosClusterHelmApplication(this, id, {
            credential: props.credential,
            chartValues: props.chartValues,
            clusterId: props.clusterId,
            chartUrl: props.chartUrl,
            namespace: props.namespace === undefined || props.namespace === null ? 'default' : props.namespace,
            name: props.name,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosClusterHelmApplication;
        this.attrClusterId = rosClusterHelmApplication.attrClusterId;
    }
}
exports.ClusterHelmApplication = ClusterHelmApplication;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2x1c3RlcmhlbG1hcHBsaWNhdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNsdXN0ZXJoZWxtYXBwbGljYXRpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsOENBQThDO0FBQzlDLGlEQUEyRDtBQUVyQiwrR0FGN0Isd0NBQXlCLE9BRWtDO0FBc0NwRTs7R0FFRztBQUNILE1BQWEsc0JBQXVCLFNBQVEsR0FBRyxDQUFDLFFBQVE7SUFZcEQ7Ozs7OztPQU1HO0lBQ0gsWUFBWSxLQUFvQixFQUFFLEVBQVUsRUFBRSxLQUFrQyxFQUFFLG1DQUEyQyxJQUFJO1FBQzdILEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFakIsTUFBTSx5QkFBeUIsR0FBRyxJQUFJLHdDQUF5QixDQUFDLElBQUksRUFBRSxFQUFFLEVBQUc7WUFDdkUsVUFBVSxFQUFFLEtBQUssQ0FBQyxVQUFVO1lBQzVCLFdBQVcsRUFBRSxLQUFLLENBQUMsV0FBVztZQUM5QixTQUFTLEVBQUUsS0FBSyxDQUFDLFNBQVM7WUFDMUIsUUFBUSxFQUFFLEtBQUssQ0FBQyxRQUFRO1lBQ3hCLFNBQVMsRUFBRSxLQUFLLENBQUMsU0FBUyxLQUFLLFNBQVMsSUFBSSxLQUFLLENBQUMsU0FBUyxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsU0FBUztZQUNsRyxJQUFJLEVBQUUsS0FBSyxDQUFDLElBQUk7U0FDbkIsRUFBRSxnQ0FBZ0MsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7UUFDcEYsSUFBSSxDQUFDLFFBQVEsR0FBRyx5QkFBeUIsQ0FBQztRQUMxQyxJQUFJLENBQUMsYUFBYSxHQUFHLHlCQUF5QixDQUFDLGFBQWEsQ0FBQztJQUNqRSxDQUFDO0NBQ0o7QUFqQ0Qsd0RBaUNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcm9zIGZyb20gJ0BhbGljbG91ZC9yb3MtY2RrLWNvcmUnO1xuaW1wb3J0IHsgUm9zQ2x1c3RlckhlbG1BcHBsaWNhdGlvbiB9IGZyb20gJy4vY3MuZ2VuZXJhdGVkJztcbi8vIEdlbmVyYXRlZCBmcm9tIHRoZSBBbGlDbG91ZCBST1MgUmVzb3VyY2UgU3BlY2lmaWNhdGlvblxuZXhwb3J0IHsgUm9zQ2x1c3RlckhlbG1BcHBsaWNhdGlvbiBhcyBDbHVzdGVySGVsbUFwcGxpY2F0aW9uUHJvcGVydHkgfTtcblxuLyoqXG4gKiBQcm9wZXJ0aWVzIGZvciBkZWZpbmluZyBhIGBBTElZVU46OkNTOjpDbHVzdGVySGVsbUFwcGxpY2F0aW9uYFxuICovXG5leHBvcnQgaW50ZXJmYWNlIENsdXN0ZXJIZWxtQXBwbGljYXRpb25Qcm9wcyB7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBjaGFydFVybDogVGhlIFVSTCBvZiBjaGFydC4gU3VwcG9ydHMgSFRUUCBvciBIVFRQUy5cbiAgICAgKi9cbiAgICByZWFkb25seSBjaGFydFVybDogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgY2x1c3RlcklkOiBUaGUgSUQgb2YgdGhlIGt1YmVybmV0ZXMgY2x1c3Rlci5cbiAgICAgKi9cbiAgICByZWFkb25seSBjbHVzdGVySWQ6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IG5hbWU6IFRoZSBuYW1lIGZvciBoZWxtIHJlbGVhc2UuXG4gICAgICovXG4gICAgcmVhZG9ubHkgbmFtZTogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgY2hhcnRWYWx1ZXM6IENoYXJ0IGN1c3RvbSB2YWx1ZXMuXG4gICAgICovXG4gICAgcmVhZG9ubHkgY2hhcnRWYWx1ZXM/OiB7IFtrZXk6IHN0cmluZ106IChhbnkgfCByb3MuSVJlc29sdmFibGUpIH0gfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBjcmVkZW50aWFsOiBUaGUgY3JlZGVudGlhbCBvZiBBQ1IgcmVwby4gT25seSB0YWtlIGVmZmVjdHMgd2hlbiBDaGFydFVybCBpcyB0aGUgYWRkcmVzcyBvZiBBQ1IgcmVwby5cbiAgICAgKi9cbiAgICByZWFkb25seSBjcmVkZW50aWFsPzogUm9zQ2x1c3RlckhlbG1BcHBsaWNhdGlvbi5DcmVkZW50aWFsUHJvcGVydHkgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBuYW1lc3BhY2U6IE5hbWVzcGFjZSB0byB1c2Ugd2l0aCBoZWxtLiBEZWZhdWx0IGlzIGRlZmF1bHRcbiAgICAgKi9cbiAgICByZWFkb25seSBuYW1lc3BhY2U/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG59XG5cbi8qKlxuICogQSBST1MgcmVzb3VyY2UgdHlwZTogIGBBTElZVU46OkNTOjpDbHVzdGVySGVsbUFwcGxpY2F0aW9uYFxuICovXG5leHBvcnQgY2xhc3MgQ2x1c3RlckhlbG1BcHBsaWNhdGlvbiBleHRlbmRzIHJvcy5SZXNvdXJjZSB7XG5cbiAgICAvKipcbiAgICAgKiBBIGZhY3RvcnkgbWV0aG9kIHRoYXQgY3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzIGZyb20gYW4gb2JqZWN0XG4gICAgICogY29udGFpbmluZyB0aGUgcHJvcGVydGllcyBvZiB0aGlzIFJPUyByZXNvdXJjZSwgd2hpY2ggd2lsbCBiZSBhc3NpZ25lZCB0byBST1MgcmVzb3VyY2UuXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgQ2x1c3RlcklkOiBUaGUgSUQgb2YgdGhlIGNsdXN0ZXIuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJDbHVzdGVySWQ6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBgQUxJWVVOOjpDUzo6Q2x1c3RlckhlbG1BcHBsaWNhdGlvbmAuXG4gICAgICpcbiAgICAgKiBQYXJhbSBzY29wZSAtIHNjb3BlIGluIHdoaWNoIHRoaXMgcmVzb3VyY2UgaXMgZGVmaW5lZFxuICAgICAqIFBhcmFtIGlkICAgIC0gc2NvcGVkIGlkIG9mIHRoZSByZXNvdXJjZVxuICAgICAqIFBhcmFtIHByb3BzIC0gcmVzb3VyY2UgcHJvcGVydGllc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiByb3MuQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogQ2x1c3RlckhlbG1BcHBsaWNhdGlvblByb3BzLCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDpib29sZWFuID0gdHJ1ZSkge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQpO1xuXG4gICAgICAgIGNvbnN0IHJvc0NsdXN0ZXJIZWxtQXBwbGljYXRpb24gPSBuZXcgUm9zQ2x1c3RlckhlbG1BcHBsaWNhdGlvbih0aGlzLCBpZCwgIHtcbiAgICAgICAgICAgIGNyZWRlbnRpYWw6IHByb3BzLmNyZWRlbnRpYWwsXG4gICAgICAgICAgICBjaGFydFZhbHVlczogcHJvcHMuY2hhcnRWYWx1ZXMsXG4gICAgICAgICAgICBjbHVzdGVySWQ6IHByb3BzLmNsdXN0ZXJJZCxcbiAgICAgICAgICAgIGNoYXJ0VXJsOiBwcm9wcy5jaGFydFVybCxcbiAgICAgICAgICAgIG5hbWVzcGFjZTogcHJvcHMubmFtZXNwYWNlID09PSB1bmRlZmluZWQgfHwgcHJvcHMubmFtZXNwYWNlID09PSBudWxsID8gJ2RlZmF1bHQnIDogcHJvcHMubmFtZXNwYWNlLFxuICAgICAgICAgICAgbmFtZTogcHJvcHMubmFtZSxcbiAgICAgICAgfSwgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgJiYgdGhpcy5zdGFjay5lbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCk7XG4gICAgICAgIHRoaXMucmVzb3VyY2UgPSByb3NDbHVzdGVySGVsbUFwcGxpY2F0aW9uO1xuICAgICAgICB0aGlzLmF0dHJDbHVzdGVySWQgPSByb3NDbHVzdGVySGVsbUFwcGxpY2F0aW9uLmF0dHJDbHVzdGVySWQ7XG4gICAgfVxufVxuIl19