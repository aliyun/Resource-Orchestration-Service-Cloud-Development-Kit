"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClusterUserKubeconfig = exports.ClusterUserKubeconfigProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const cs_generated_1 = require("./cs.generated");
Object.defineProperty(exports, "ClusterUserKubeconfigProperty", { enumerable: true, get: function () { return cs_generated_1.RosClusterUserKubeconfig; } });
/**
 * A ROS resource type:  `DATASOURCE::CS::ClusterUserKubeconfig`
 */
class ClusterUserKubeconfig extends ros.Resource {
    /**
     * Create a new `DATASOURCE::CS::ClusterUserKubeconfig`.
     *
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosClusterUserKubeconfig = new cs_generated_1.RosClusterUserKubeconfig(this, id, {
            privateIpAddress: props.privateIpAddress,
            clusterId: props.clusterId,
            temporaryDurationMinutes: props.temporaryDurationMinutes,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosClusterUserKubeconfig;
        this.attrClusterId = rosClusterUserKubeconfig.attrClusterId;
        this.attrConfig = rosClusterUserKubeconfig.attrConfig;
        this.attrExpiration = rosClusterUserKubeconfig.attrExpiration;
    }
}
exports.ClusterUserKubeconfig = ClusterUserKubeconfig;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2x1c3RlcnVzZXJrdWJlY29uZmlnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY2x1c3RlcnVzZXJrdWJlY29uZmlnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDhDQUE4QztBQUM5QyxpREFBMEQ7QUFFckIsOEdBRjVCLHVDQUF3QixPQUVpQztBQTJCbEU7O0dBRUc7QUFDSCxNQUFhLHFCQUFzQixTQUFRLEdBQUcsQ0FBQyxRQUFRO0lBc0JuRDs7Ozs7O09BTUc7SUFDSCxZQUFZLEtBQW9CLEVBQUUsRUFBVSxFQUFFLEtBQWlDLEVBQUUsbUNBQTJDLElBQUk7UUFDNUgsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUVqQixNQUFNLHdCQUF3QixHQUFHLElBQUksdUNBQXdCLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRztZQUNyRSxnQkFBZ0IsRUFBRSxLQUFLLENBQUMsZ0JBQWdCO1lBQ3hDLFNBQVMsRUFBRSxLQUFLLENBQUMsU0FBUztZQUMxQix3QkFBd0IsRUFBRSxLQUFLLENBQUMsd0JBQXdCO1NBQzNELEVBQUUsZ0NBQWdDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO1FBQ3BGLElBQUksQ0FBQyxRQUFRLEdBQUcsd0JBQXdCLENBQUM7UUFDekMsSUFBSSxDQUFDLGFBQWEsR0FBRyx3QkFBd0IsQ0FBQyxhQUFhLENBQUM7UUFDNUQsSUFBSSxDQUFDLFVBQVUsR0FBRyx3QkFBd0IsQ0FBQyxVQUFVLENBQUM7UUFDdEQsSUFBSSxDQUFDLGNBQWMsR0FBRyx3QkFBd0IsQ0FBQyxjQUFjLENBQUM7SUFDbEUsQ0FBQztDQUNKO0FBMUNELHNEQTBDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHJvcyBmcm9tICdAYWxpY2xvdWQvcm9zLWNkay1jb3JlJztcbmltcG9ydCB7IFJvc0NsdXN0ZXJVc2VyS3ViZWNvbmZpZyB9IGZyb20gJy4vY3MuZ2VuZXJhdGVkJztcbi8vIEdlbmVyYXRlZCBmcm9tIHRoZSBBbGlDbG91ZCBST1MgUmVzb3VyY2UgU3BlY2lmaWNhdGlvblxuZXhwb3J0IHsgUm9zQ2x1c3RlclVzZXJLdWJlY29uZmlnIGFzIENsdXN0ZXJVc2VyS3ViZWNvbmZpZ1Byb3BlcnR5IH07XG5cbi8qKlxuICogUHJvcGVydGllcyBmb3IgZGVmaW5pbmcgYSBgREFUQVNPVVJDRTo6Q1M6OkNsdXN0ZXJVc2VyS3ViZWNvbmZpZ2BcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBDbHVzdGVyVXNlckt1YmVjb25maWdQcm9wcyB7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBjbHVzdGVySWQ6IFRoZSBJRCBvZiB0aGUgQUNLIGNsdXN0ZXIuXG4gICAgICovXG4gICAgcmVhZG9ubHkgY2x1c3RlcklkOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBwcml2YXRlSXBBZGRyZXNzOiBTcGVjaWZpZXMgd2hldGhlciB0byBvYnRhaW4gdGhlIGNyZWRlbnRpYWwgdGhhdCBpcyB1c2VkIHRvIGNvbm5lY3QgdG8gdGhlIGNsdXN0ZXIgb3ZlciB0aGUgaW50ZXJuYWwgbmV0d29yay4gVmFsaWQgdmFsdWVzOlxuICAgICAqIHRydWU6IG9idGFpbnMgdGhlIGNyZWRlbnRpYWwgdGhhdCBpcyB1c2VkIHRvIGNvbm5lY3QgdG8gdGhlIGNsdXN0ZXIgb3ZlciB0aGUgaW50ZXJuYWwgbmV0d29yay5cbiAgICAgKiBmYWxzZTogb2J0YWlucyB0aGUgY3JlZGVudGlhbCB0aGF0IGlzIHVzZWQgdG8gY29ubmVjdCB0byB0aGUgY2x1c3RlciBvdmVyIHRoZSBJbnRlcm5ldC5cbiAgICAgKiBEZWZhdWx0IHZhbHVlOiBmYWxzZS5cbiAgICAgKi9cbiAgICByZWFkb25seSBwcml2YXRlSXBBZGRyZXNzPzogYm9vbGVhbiB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHRlbXBvcmFyeUR1cmF0aW9uTWludXRlczogVGhlIHZhbGlkaXR5IHBlcmlvZCBvZiBhIHRlbXBvcmFyeSBrdWJlY29uZmlnIGZpbGUuIFVuaXQ6IG1pbnV0ZXMuIFZhbGlkIHZhbHVlczogMTUgdG8gNDMyMC5cbiAgICAgKiBOb3RlIElmIHlvdSBkbyBub3Qgc3BlY2lmeSB0aGlzIHBhcmFtZXRlciwgdGhlIHN5c3RlbSBhdXRvbWF0aWNhbGx5IHNwZWNpZmllcyBhIHZhbGlkaXR5IHBlcmlvZCwgd2hpY2ggaXMgaW5kaWNhdGVkIGJ5IHRoZSBleHBpcmF0aW9uIGZpZWxkIGluIHRoZSByZXNwb25zZS5cbiAgICAgKi9cbiAgICByZWFkb25seSB0ZW1wb3JhcnlEdXJhdGlvbk1pbnV0ZXM/OiBudW1iZXIgfCByb3MuSVJlc29sdmFibGU7XG59XG5cbi8qKlxuICogQSBST1MgcmVzb3VyY2UgdHlwZTogIGBEQVRBU09VUkNFOjpDUzo6Q2x1c3RlclVzZXJLdWJlY29uZmlnYFxuICovXG5leHBvcnQgY2xhc3MgQ2x1c3RlclVzZXJLdWJlY29uZmlnIGV4dGVuZHMgcm9zLlJlc291cmNlIHtcblxuICAgIC8qKlxuICAgICAqIEEgZmFjdG9yeSBtZXRob2QgdGhhdCBjcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIHRoaXMgY2xhc3MgZnJvbSBhbiBvYmplY3RcbiAgICAgKiBjb250YWluaW5nIHRoZSBwcm9wZXJ0aWVzIG9mIHRoaXMgUk9TIHJlc291cmNlLCB3aGljaCB3aWxsIGJlIGFzc2lnbmVkIHRvIFJPUyByZXNvdXJjZS5cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBDbHVzdGVySWQ6IFRoZSBJRCBvZiB0aGUgQUNLIGNsdXN0ZXIuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJDbHVzdGVySWQ6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBDb25maWc6IFRoZSBjb250ZW50IG9mIHRoZSBrdWJlY29uZmlnIGZpbGUuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJDb25maWc6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBFeHBpcmF0aW9uOiBUaGUgZXhwaXJhdGlvbiB0aW1lIG9mIHRoZSBrdWJlY29uZmlnIGZpbGUuIFRoZSB2YWx1ZSBpcyB0aGUgVVRDIHRpbWUgZGlzcGxheWVkIGluIFJGQzMzMzkgZm9ybWF0LlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyRXhwaXJhdGlvbjogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IGBEQVRBU09VUkNFOjpDUzo6Q2x1c3RlclVzZXJLdWJlY29uZmlnYC5cbiAgICAgKlxuICAgICAqIFBhcmFtIHNjb3BlIC0gc2NvcGUgaW4gd2hpY2ggdGhpcyByZXNvdXJjZSBpcyBkZWZpbmVkXG4gICAgICogUGFyYW0gaWQgICAgLSBzY29wZWQgaWQgb2YgdGhlIHJlc291cmNlXG4gICAgICogUGFyYW0gcHJvcHMgLSByZXNvdXJjZSBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IHJvcy5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBDbHVzdGVyVXNlckt1YmVjb25maWdQcm9wcywgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6Ym9vbGVhbiA9IHRydWUpIHtcbiAgICAgICAgc3VwZXIoc2NvcGUsIGlkKTtcblxuICAgICAgICBjb25zdCByb3NDbHVzdGVyVXNlckt1YmVjb25maWcgPSBuZXcgUm9zQ2x1c3RlclVzZXJLdWJlY29uZmlnKHRoaXMsIGlkLCAge1xuICAgICAgICAgICAgcHJpdmF0ZUlwQWRkcmVzczogcHJvcHMucHJpdmF0ZUlwQWRkcmVzcyxcbiAgICAgICAgICAgIGNsdXN0ZXJJZDogcHJvcHMuY2x1c3RlcklkLFxuICAgICAgICAgICAgdGVtcG9yYXJ5RHVyYXRpb25NaW51dGVzOiBwcm9wcy50ZW1wb3JhcnlEdXJhdGlvbk1pbnV0ZXMsXG4gICAgICAgIH0sIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ICYmIHRoaXMuc3RhY2suZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQpO1xuICAgICAgICB0aGlzLnJlc291cmNlID0gcm9zQ2x1c3RlclVzZXJLdWJlY29uZmlnO1xuICAgICAgICB0aGlzLmF0dHJDbHVzdGVySWQgPSByb3NDbHVzdGVyVXNlckt1YmVjb25maWcuYXR0ckNsdXN0ZXJJZDtcbiAgICAgICAgdGhpcy5hdHRyQ29uZmlnID0gcm9zQ2x1c3RlclVzZXJLdWJlY29uZmlnLmF0dHJDb25maWc7XG4gICAgICAgIHRoaXMuYXR0ckV4cGlyYXRpb24gPSByb3NDbHVzdGVyVXNlckt1YmVjb25maWcuYXR0ckV4cGlyYXRpb247XG4gICAgfVxufVxuIl19