"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DBCluster = exports.DBClusterProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const adblake_generated_1 = require("./adblake.generated");
Object.defineProperty(exports, "DBClusterProperty", { enumerable: true, get: function () { return adblake_generated_1.RosDBCluster; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::ADBLake::DBCluster`, which is used to create an AnalyticDB for MySQL Data Lakehouse Edition (V3.0) cluster.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosDBCluster`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-adblake-dbcluster
 */
class DBCluster extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosDBCluster = new adblake_generated_1.RosDBCluster(this, id, {
            periodType: props.periodType,
            enableDefaultResourcePool: props.enableDefaultResourcePool,
            storageResource: props.storageResource,
            restoreToTime: props.restoreToTime,
            cloneSourceRegionId: props.cloneSourceRegionId,
            resourceGroupId: props.resourceGroupId,
            zoneId: props.zoneId,
            vpcId: props.vpcId,
            vSwitchId: props.vSwitchId,
            dbClusterDescription: props.dbClusterDescription,
            productForm: props.productForm,
            reservedNodeSize: props.reservedNodeSize,
            computeResource: props.computeResource,
            period: props.period,
            dbClusterNetworkType: props.dbClusterNetworkType,
            payType: props.payType === undefined || props.payType === null ? 'Postpaid' : props.payType,
            backupSetId: props.backupSetId,
            sourceDbClusterId: props.sourceDbClusterId,
            reservedNodeCount: props.reservedNodeCount,
            diskEncryption: props.diskEncryption,
            dbClusterVersion: props.dbClusterVersion,
            kmsId: props.kmsId,
            restoreType: props.restoreType,
            tags: props.tags,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosDBCluster;
        this.attrConnectionString = rosDBCluster.attrConnectionString;
        this.attrDbClusterId = rosDBCluster.attrDbClusterId;
        this.attrOrderId = rosDBCluster.attrOrderId;
    }
}
exports.DBCluster = DBCluster;
//# sourceMappingURL=data:application/json;base64,