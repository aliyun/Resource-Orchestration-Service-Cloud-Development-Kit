"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ScalingRule = exports.ScalingRuleProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ess_generated_1 = require("./ess.generated");
Object.defineProperty(exports, "ScalingRuleProperty", { enumerable: true, get: function () { return ess_generated_1.RosScalingRule; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::ESS::ScalingRule`, which is used to create a scaling rule.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosScalingRule`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-ess-scalingrule
 */
class ScalingRule extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosScalingRule = new ess_generated_1.RosScalingRule(this, id, {
            targetValue: props.targetValue,
            cooldown: props.cooldown,
            scalingGroupId: props.scalingGroupId,
            predictiveValueBehavior: props.predictiveValueBehavior,
            minAdjustmentMagnitude: props.minAdjustmentMagnitude,
            disableScaleIn: props.disableScaleIn,
            stepAdjustment: props.stepAdjustment,
            adjustmentType: props.adjustmentType,
            metricName: props.metricName,
            scalingRuleName: props.scalingRuleName,
            adjustmentValue: props.adjustmentValue,
            scaleOutEvaluationCount: props.scaleOutEvaluationCount,
            initialMaxSize: props.initialMaxSize,
            scalingRuleType: props.scalingRuleType,
            estimatedInstanceWarmup: props.estimatedInstanceWarmup,
            predictiveScalingMode: props.predictiveScalingMode,
            predictiveTaskBufferTime: props.predictiveTaskBufferTime,
            predictiveValueBuffer: props.predictiveValueBuffer,
            scaleInEvaluationCount: props.scaleInEvaluationCount,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosScalingRule;
        this.attrScalingRuleAri = rosScalingRule.attrScalingRuleAri;
        this.attrScalingRuleId = rosScalingRule.attrScalingRuleId;
    }
}
exports.ScalingRule = ScalingRule;
//# sourceMappingURL=data:application/json;base64,