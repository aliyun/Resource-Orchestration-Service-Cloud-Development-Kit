"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ScalingConfigurations = exports.ScalingConfigurationsProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ess_generated_1 = require("./ess.generated");
Object.defineProperty(exports, "ScalingConfigurationsProperty", { enumerable: true, get: function () { return ess_generated_1.RosScalingConfigurations; } });
/**
 * This class encapsulates and extends the ROS resource type `DATASOURCE::ESS::ScalingConfigurations`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosScalingConfigurations`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/datasource-ess-scalingconfigurations
 */
class ScalingConfigurations extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props = {}, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosScalingConfigurations = new ess_generated_1.RosScalingConfigurations(this, id, {
            scalingGroupId: props.scalingGroupId,
            scalingConfigurationIds: props.scalingConfigurationIds,
            scalingConfigurationNames: props.scalingConfigurationNames,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosScalingConfigurations;
        this.attrScalingConfigurationIds = rosScalingConfigurations.attrScalingConfigurationIds;
        this.attrScalingConfigurations = rosScalingConfigurations.attrScalingConfigurations;
    }
}
exports.ScalingConfigurations = ScalingConfigurations;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NhbGluZ2NvbmZpZ3VyYXRpb25zLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic2NhbGluZ2NvbmZpZ3VyYXRpb25zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDhDQUE4QztBQUM5QyxtREFBMkQ7QUFFdEIsOEdBRjVCLHdDQUF3QixPQUVpQztBQXdCbEU7Ozs7R0FJRztBQUNILE1BQWEscUJBQXNCLFNBQVEsR0FBRyxDQUFDLFFBQVE7SUFZbkQ7Ozs7T0FJRztJQUNILFlBQVksS0FBb0IsRUFBRSxFQUFVLEVBQUUsUUFBb0MsRUFBRSxFQUFFLG1DQUEyQyxJQUFJO1FBQ2pJLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFakIsTUFBTSx3QkFBd0IsR0FBRyxJQUFJLHdDQUF3QixDQUFDLElBQUksRUFBRSxFQUFFLEVBQUc7WUFDckUsY0FBYyxFQUFFLEtBQUssQ0FBQyxjQUFjO1lBQ3BDLHVCQUF1QixFQUFFLEtBQUssQ0FBQyx1QkFBdUI7WUFDdEQseUJBQXlCLEVBQUUsS0FBSyxDQUFDLHlCQUF5QjtTQUM3RCxFQUFFLGdDQUFnQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztRQUNwRixJQUFJLENBQUMsUUFBUSxHQUFHLHdCQUF3QixDQUFDO1FBQ3pDLElBQUksQ0FBQywyQkFBMkIsR0FBRyx3QkFBd0IsQ0FBQywyQkFBMkIsQ0FBQztRQUN4RixJQUFJLENBQUMseUJBQXlCLEdBQUcsd0JBQXdCLENBQUMseUJBQXlCLENBQUM7SUFDeEYsQ0FBQztDQUNKO0FBN0JELHNEQTZCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHJvcyBmcm9tICdAYWxpY2xvdWQvcm9zLWNkay1jb3JlJztcbmltcG9ydCB7IFJvc1NjYWxpbmdDb25maWd1cmF0aW9ucyB9IGZyb20gJy4vZXNzLmdlbmVyYXRlZCc7XG4vLyBHZW5lcmF0ZWQgZnJvbSB0aGUgQWxpQ2xvdWQgUk9TIFJlc291cmNlIFNwZWNpZmljYXRpb25cbmV4cG9ydCB7IFJvc1NjYWxpbmdDb25maWd1cmF0aW9ucyBhcyBTY2FsaW5nQ29uZmlndXJhdGlvbnNQcm9wZXJ0eSB9O1xuXG4vKipcbiAqIFByb3BlcnRpZXMgZm9yIGRlZmluaW5nIGEgYFNjYWxpbmdDb25maWd1cmF0aW9uc2AuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2RhdGFzb3VyY2UtZXNzLXNjYWxpbmdjb25maWd1cmF0aW9uc1xuICovXG5leHBvcnQgaW50ZXJmYWNlIFNjYWxpbmdDb25maWd1cmF0aW9uc1Byb3BzIHtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHNjYWxpbmdDb25maWd1cmF0aW9uSWRzOiBUaGUgSUQgb2Ygc2NhbGluZyBjb25maWd1cmF0aW9uIHRoYXQgeW91IHdhbnQgdG8gcXVlcnkuIFZhbGlkIHZhbHVlcyA6IDEgdG8gMTAuIFRoZSBJRHMgb2YgYWN0aXZlIGFuZCBpbmFjdGl2ZSBzY2FsaW5nIGNvbmZpZ3VyYXRpb25zIGFyZSBkaXNwbGF5ZWQgaW4gdGhlIHF1ZXJ5IHJlc3VsdHMsIGFuZCBjYW4gYmUgZGlmZmVyZW50aWF0ZWQgYnkgTGlmZWN5Y2xlU3RhdGUuXG4gICAgICovXG4gICAgcmVhZG9ubHkgc2NhbGluZ0NvbmZpZ3VyYXRpb25JZHM/OiBBcnJheTxzdHJpbmcgfCByb3MuSVJlc29sdmFibGU+IHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgc2NhbGluZ0NvbmZpZ3VyYXRpb25OYW1lczogVGhlIG5hbWUgb2Ygc2NhbGluZyBjb25maWd1cmF0aW9uIHRoYXQgeW91IHdhbnQgdG8gcXVlcnkuIFZhbGlkIHZhbHVlcyA6IDEgdG8gMTAuIFRoZSBuYW1lcyBvZiBpbmFjdGl2ZSBzY2FsaW5nIGNvbmZpZ3VyYXRpb25zIGFyZSBub3QgZGlzcGxheWVkIGluIHRoZSBxdWVyeSByZXN1bHRzLCBhbmQgbm8gZXJyb3IgaXMgcmVwb3J0ZWQuXG4gICAgICovXG4gICAgcmVhZG9ubHkgc2NhbGluZ0NvbmZpZ3VyYXRpb25OYW1lcz86IEFycmF5PHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZT4gfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBzY2FsaW5nR3JvdXBJZDogVGhlIElEIG9mIHRoZSBzY2FsaW5nIGdyb3VwLiBZb3UgY2FuIHVzZSB0aGUgSUQgdG8gcXVlcnkgYWxsIHNjYWxpbmcgY29uZmlndXJhdGlvbnMgaW4gdGhlIHNjYWxpbmcgZ3JvdXAuXG4gICAgICovXG4gICAgcmVhZG9ubHkgc2NhbGluZ0dyb3VwSWQ/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG59XG5cbi8qKlxuICogVGhpcyBjbGFzcyBlbmNhcHN1bGF0ZXMgYW5kIGV4dGVuZHMgdGhlIFJPUyByZXNvdXJjZSB0eXBlIGBEQVRBU09VUkNFOjpFU1M6OlNjYWxpbmdDb25maWd1cmF0aW9uc2AuXG4gKiBATm90ZSBUaGlzIGNsYXNzIG1heSBoYXZlIHNvbWUgbmV3IGZ1bmN0aW9ucyB0byBmYWNpbGl0YXRlIGRldmVsb3BtZW50LCBzbyBpdCBpcyByZWNvbW1lbmRlZCB0byB1c2UgdGhpcyBjbGFzcyBpbnN0ZWFkIG9mIGBSb3NTY2FsaW5nQ29uZmlndXJhdGlvbnNgZm9yIGEgbW9yZSBjb252ZW5pZW50IGRldmVsb3BtZW50IGV4cGVyaWVuY2UuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2RhdGFzb3VyY2UtZXNzLXNjYWxpbmdjb25maWd1cmF0aW9uc1xuICovXG5leHBvcnQgY2xhc3MgU2NhbGluZ0NvbmZpZ3VyYXRpb25zIGV4dGVuZHMgcm9zLlJlc291cmNlIHtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBTY2FsaW5nQ29uZmlndXJhdGlvbklkczogVGhlIGxpc3Qgb2Ygc2NhbGluZyBjb25maWd1cmF0aW9uIElEcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0clNjYWxpbmdDb25maWd1cmF0aW9uSWRzOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgU2NhbGluZ0NvbmZpZ3VyYXRpb25zOiBUaGUgbGlzdCBvZiBzY2FsaW5nIGNvbmZpZ3VyYXRpb25zLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyU2NhbGluZ0NvbmZpZ3VyYXRpb25zOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQYXJhbSBzY29wZSAtIHNjb3BlIGluIHdoaWNoIHRoaXMgcmVzb3VyY2UgaXMgZGVmaW5lZFxuICAgICAqIFBhcmFtIGlkICAgIC0gc2NvcGVkIGlkIG9mIHRoZSByZXNvdXJjZVxuICAgICAqIFBhcmFtIHByb3BzIC0gcmVzb3VyY2UgcHJvcGVydGllc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiByb3MuQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogU2NhbGluZ0NvbmZpZ3VyYXRpb25zUHJvcHMgPSB7fSwgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6Ym9vbGVhbiA9IHRydWUpIHtcbiAgICAgICAgc3VwZXIoc2NvcGUsIGlkKTtcblxuICAgICAgICBjb25zdCByb3NTY2FsaW5nQ29uZmlndXJhdGlvbnMgPSBuZXcgUm9zU2NhbGluZ0NvbmZpZ3VyYXRpb25zKHRoaXMsIGlkLCAge1xuICAgICAgICAgICAgc2NhbGluZ0dyb3VwSWQ6IHByb3BzLnNjYWxpbmdHcm91cElkLFxuICAgICAgICAgICAgc2NhbGluZ0NvbmZpZ3VyYXRpb25JZHM6IHByb3BzLnNjYWxpbmdDb25maWd1cmF0aW9uSWRzLFxuICAgICAgICAgICAgc2NhbGluZ0NvbmZpZ3VyYXRpb25OYW1lczogcHJvcHMuc2NhbGluZ0NvbmZpZ3VyYXRpb25OYW1lcyxcbiAgICAgICAgfSwgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgJiYgdGhpcy5zdGFjay5lbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCk7XG4gICAgICAgIHRoaXMucmVzb3VyY2UgPSByb3NTY2FsaW5nQ29uZmlndXJhdGlvbnM7XG4gICAgICAgIHRoaXMuYXR0clNjYWxpbmdDb25maWd1cmF0aW9uSWRzID0gcm9zU2NhbGluZ0NvbmZpZ3VyYXRpb25zLmF0dHJTY2FsaW5nQ29uZmlndXJhdGlvbklkcztcbiAgICAgICAgdGhpcy5hdHRyU2NhbGluZ0NvbmZpZ3VyYXRpb25zID0gcm9zU2NhbGluZ0NvbmZpZ3VyYXRpb25zLmF0dHJTY2FsaW5nQ29uZmlndXJhdGlvbnM7XG4gICAgfVxufVxuIl19