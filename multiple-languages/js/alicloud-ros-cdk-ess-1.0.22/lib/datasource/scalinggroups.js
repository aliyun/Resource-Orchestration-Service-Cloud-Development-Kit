"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ScalingGroups = exports.ScalingGroupsProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ess_generated_1 = require("./ess.generated");
Object.defineProperty(exports, "ScalingGroupsProperty", { enumerable: true, get: function () { return ess_generated_1.RosScalingGroups; } });
/**
 * This class encapsulates and extends the ROS resource type `DATASOURCE::ESS::ScalingGroups`, which is used to query scaling groups.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosScalingGroups`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/datasource-ess-scalinggroups
 */
class ScalingGroups extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props = {}, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosScalingGroups = new ess_generated_1.RosScalingGroups(this, id, {
            scalingGroupNames: props.scalingGroupNames,
            groupType: props.groupType === undefined || props.groupType === null ? 'ECS' : props.groupType,
            scalingGroupIds: props.scalingGroupIds,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosScalingGroups;
        this.attrScalingGroupIds = rosScalingGroups.attrScalingGroupIds;
        this.attrScalingGroups = rosScalingGroups.attrScalingGroups;
    }
}
exports.ScalingGroups = ScalingGroups;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NhbGluZ2dyb3Vwcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInNjYWxpbmdncm91cHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsOENBQThDO0FBQzlDLG1EQUFtRDtBQUV0QixzR0FGcEIsZ0NBQWdCLE9BRXlCO0FBMkJsRDs7OztHQUlHO0FBQ0gsTUFBYSxhQUFjLFNBQVEsR0FBRyxDQUFDLFFBQVE7SUFZM0M7Ozs7T0FJRztJQUNILFlBQVksS0FBb0IsRUFBRSxFQUFVLEVBQUUsUUFBNEIsRUFBRSxFQUFFLG1DQUEyQyxJQUFJO1FBQ3pILEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFakIsTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLGdDQUFnQixDQUFDLElBQUksRUFBRSxFQUFFLEVBQUc7WUFDckQsaUJBQWlCLEVBQUUsS0FBSyxDQUFDLGlCQUFpQjtZQUMxQyxTQUFTLEVBQUUsS0FBSyxDQUFDLFNBQVMsS0FBSyxTQUFTLElBQUksS0FBSyxDQUFDLFNBQVMsS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFNBQVM7WUFDOUYsZUFBZSxFQUFFLEtBQUssQ0FBQyxlQUFlO1NBQ3pDLEVBQUUsZ0NBQWdDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO1FBQ3BGLElBQUksQ0FBQyxRQUFRLEdBQUcsZ0JBQWdCLENBQUM7UUFDakMsSUFBSSxDQUFDLG1CQUFtQixHQUFHLGdCQUFnQixDQUFDLG1CQUFtQixDQUFDO1FBQ2hFLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxnQkFBZ0IsQ0FBQyxpQkFBaUIsQ0FBQztJQUNoRSxDQUFDO0NBQ0o7QUE3QkQsc0NBNkJDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcm9zIGZyb20gJ0BhbGljbG91ZC9yb3MtY2RrLWNvcmUnO1xuaW1wb3J0IHsgUm9zU2NhbGluZ0dyb3VwcyB9IGZyb20gJy4vZXNzLmdlbmVyYXRlZCc7XG4vLyBHZW5lcmF0ZWQgZnJvbSB0aGUgQWxpQ2xvdWQgUk9TIFJlc291cmNlIFNwZWNpZmljYXRpb25cbmV4cG9ydCB7IFJvc1NjYWxpbmdHcm91cHMgYXMgU2NhbGluZ0dyb3Vwc1Byb3BlcnR5IH07XG5cbi8qKlxuICogUHJvcGVydGllcyBmb3IgZGVmaW5pbmcgYSBgU2NhbGluZ0dyb3Vwc2AuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2RhdGFzb3VyY2UtZXNzLXNjYWxpbmdncm91cHNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBTY2FsaW5nR3JvdXBzUHJvcHMge1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgZ3JvdXBUeXBlOiBUaGUgdHlwZSBvZiBpbnN0YW5jZXMgdGhhdCBhcmUgbWFuYWdlZCBieSB0aGUgc2NhbGluZyBncm91cC4gVmFsaWQgdmFsdWVzOlxuICAgICAqIEVDUzogdGhlIEVsYXN0aWMgQ29tcHV0ZSBTZXJ2aWNlIChFQ1MpIGluc3RhbmNlc1xuICAgICAqIEVDSTogdGhlIGVsYXN0aWMgY29udGFpbmVyIGluc3RhbmNlc1xuICAgICAqIERlZmF1bHQgdmFsdWU6IEVDUy5cbiAgICAgKi9cbiAgICByZWFkb25seSBncm91cFR5cGU/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBzY2FsaW5nR3JvdXBJZHM6IFRoZSBJRCBvZiBzY2FsaW5nIGdyb3VwIHRoYXQgeW91IHdhbnQgdG8gcXVlcnkuVmFsaWQgdmFsdWVzOiAxIHRvIDIwLiBUaGUgSURzIG9mIGluYWN0aXZlIHNjYWxpbmcgZ3JvdXBzIGFyZSBub3QgZGlzcGxheWVkIGluIHRoZSBxdWVyeSByZXN1bHRzLCBhbmQgbm8gZXJyb3IgaXMgcmVwb3J0ZWQuXG4gICAgICovXG4gICAgcmVhZG9ubHkgc2NhbGluZ0dyb3VwSWRzPzogQXJyYXk8c3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlPiB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHNjYWxpbmdHcm91cE5hbWVzOiBUaGUgbmFtZSBvZiBzY2FsaW5nIGdyb3VwIHRoYXQgeW91IHdhbnQgdG8gcXVlcnkuIFZhbGlkIHZhbHVlczogMSB0byAyMC4gVGhlIG5hbWVzIG9mIGluYWN0aXZlIHNjYWxpbmcgZ3JvdXBzIGFyZSBub3QgZGlzcGxheWVkIGluIHRoZSBxdWVyeSByZXN1bHRzLCBhbmQgbm8gZXJyb3IgaXMgcmVwb3J0ZWQuXG4gICAgICovXG4gICAgcmVhZG9ubHkgc2NhbGluZ0dyb3VwTmFtZXM/OiBBcnJheTxzdHJpbmcgfCByb3MuSVJlc29sdmFibGU+IHwgcm9zLklSZXNvbHZhYmxlO1xufVxuXG4vKipcbiAqIFRoaXMgY2xhc3MgZW5jYXBzdWxhdGVzIGFuZCBleHRlbmRzIHRoZSBST1MgcmVzb3VyY2UgdHlwZSBgREFUQVNPVVJDRTo6RVNTOjpTY2FsaW5nR3JvdXBzYCwgd2hpY2ggaXMgdXNlZCB0byBxdWVyeSBzY2FsaW5nIGdyb3Vwcy5cbiAqIEBOb3RlIFRoaXMgY2xhc3MgbWF5IGhhdmUgc29tZSBuZXcgZnVuY3Rpb25zIHRvIGZhY2lsaXRhdGUgZGV2ZWxvcG1lbnQsIHNvIGl0IGlzIHJlY29tbWVuZGVkIHRvIHVzZSB0aGlzIGNsYXNzIGluc3RlYWQgb2YgYFJvc1NjYWxpbmdHcm91cHNgZm9yIGEgbW9yZSBjb252ZW5pZW50IGRldmVsb3BtZW50IGV4cGVyaWVuY2UuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2RhdGFzb3VyY2UtZXNzLXNjYWxpbmdncm91cHNcbiAqL1xuZXhwb3J0IGNsYXNzIFNjYWxpbmdHcm91cHMgZXh0ZW5kcyByb3MuUmVzb3VyY2Uge1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIFNjYWxpbmdHcm91cElkczogVGhlIGxpc3Qgb2Ygc2NhbGluZyBncm91cCBJRHMuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJTY2FsaW5nR3JvdXBJZHM6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBTY2FsaW5nR3JvdXBzOiBUaGUgbGlzdCBvZiBzY2FsaW5nIGdyb3Vwcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0clNjYWxpbmdHcm91cHM6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFBhcmFtIHNjb3BlIC0gc2NvcGUgaW4gd2hpY2ggdGhpcyByZXNvdXJjZSBpcyBkZWZpbmVkXG4gICAgICogUGFyYW0gaWQgICAgLSBzY29wZWQgaWQgb2YgdGhlIHJlc291cmNlXG4gICAgICogUGFyYW0gcHJvcHMgLSByZXNvdXJjZSBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IHJvcy5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBTY2FsaW5nR3JvdXBzUHJvcHMgPSB7fSwgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6Ym9vbGVhbiA9IHRydWUpIHtcbiAgICAgICAgc3VwZXIoc2NvcGUsIGlkKTtcblxuICAgICAgICBjb25zdCByb3NTY2FsaW5nR3JvdXBzID0gbmV3IFJvc1NjYWxpbmdHcm91cHModGhpcywgaWQsICB7XG4gICAgICAgICAgICBzY2FsaW5nR3JvdXBOYW1lczogcHJvcHMuc2NhbGluZ0dyb3VwTmFtZXMsXG4gICAgICAgICAgICBncm91cFR5cGU6IHByb3BzLmdyb3VwVHlwZSA9PT0gdW5kZWZpbmVkIHx8IHByb3BzLmdyb3VwVHlwZSA9PT0gbnVsbCA/ICdFQ1MnIDogcHJvcHMuZ3JvdXBUeXBlLFxuICAgICAgICAgICAgc2NhbGluZ0dyb3VwSWRzOiBwcm9wcy5zY2FsaW5nR3JvdXBJZHMsXG4gICAgICAgIH0sIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ICYmIHRoaXMuc3RhY2suZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQpO1xuICAgICAgICB0aGlzLnJlc291cmNlID0gcm9zU2NhbGluZ0dyb3VwcztcbiAgICAgICAgdGhpcy5hdHRyU2NhbGluZ0dyb3VwSWRzID0gcm9zU2NhbGluZ0dyb3Vwcy5hdHRyU2NhbGluZ0dyb3VwSWRzO1xuICAgICAgICB0aGlzLmF0dHJTY2FsaW5nR3JvdXBzID0gcm9zU2NhbGluZ0dyb3Vwcy5hdHRyU2NhbGluZ0dyb3VwcztcbiAgICB9XG59XG4iXX0=