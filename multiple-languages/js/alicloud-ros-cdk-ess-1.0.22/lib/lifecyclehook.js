"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LifecycleHook = exports.LifecycleHookProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ess_generated_1 = require("./ess.generated");
Object.defineProperty(exports, "LifecycleHookProperty", { enumerable: true, get: function () { return ess_generated_1.RosLifecycleHook; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::ESS::LifecycleHook`, which is used to create a lifecycle hook for a scaling group.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosLifecycleHook`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-ess-lifecyclehook
 */
class LifecycleHook extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosLifecycleHook = new ess_generated_1.RosLifecycleHook(this, id, {
            lifecycleHookName: props.lifecycleHookName,
            notificationArn: props.notificationArn,
            scalingGroupId: props.scalingGroupId,
            lifecycleTransition: props.lifecycleTransition,
            heartbeatTimeout: props.heartbeatTimeout,
            notificationMetadata: props.notificationMetadata,
            defaultResult: props.defaultResult,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosLifecycleHook;
        this.attrLifecycleHookId = rosLifecycleHook.attrLifecycleHookId;
        this.attrScalingGroupId = rosLifecycleHook.attrScalingGroupId;
    }
}
exports.LifecycleHook = LifecycleHook;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlmZWN5Y2xlaG9vay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImxpZmVjeWNsZWhvb2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsOENBQThDO0FBQzlDLG1EQUFtRDtBQUV0QixzR0FGcEIsZ0NBQWdCLE9BRXlCO0FBMERsRDs7OztHQUlHO0FBQ0gsTUFBYSxhQUFjLFNBQVEsR0FBRyxDQUFDLFFBQVE7SUFZM0M7Ozs7T0FJRztJQUNILFlBQVksS0FBb0IsRUFBRSxFQUFVLEVBQUUsS0FBeUIsRUFBRSxtQ0FBMkMsSUFBSTtRQUNwSCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRWpCLE1BQU0sZ0JBQWdCLEdBQUcsSUFBSSxnQ0FBZ0IsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFHO1lBQ3JELGlCQUFpQixFQUFFLEtBQUssQ0FBQyxpQkFBaUI7WUFDMUMsZUFBZSxFQUFFLEtBQUssQ0FBQyxlQUFlO1lBQ3RDLGNBQWMsRUFBRSxLQUFLLENBQUMsY0FBYztZQUNwQyxtQkFBbUIsRUFBRSxLQUFLLENBQUMsbUJBQW1CO1lBQzlDLGdCQUFnQixFQUFFLEtBQUssQ0FBQyxnQkFBZ0I7WUFDeEMsb0JBQW9CLEVBQUUsS0FBSyxDQUFDLG9CQUFvQjtZQUNoRCxhQUFhLEVBQUUsS0FBSyxDQUFDLGFBQWE7U0FDckMsRUFBRSxnQ0FBZ0MsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7UUFDcEYsSUFBSSxDQUFDLFFBQVEsR0FBRyxnQkFBZ0IsQ0FBQztRQUNqQyxJQUFJLENBQUMsbUJBQW1CLEdBQUcsZ0JBQWdCLENBQUMsbUJBQW1CLENBQUM7UUFDaEUsSUFBSSxDQUFDLGtCQUFrQixHQUFHLGdCQUFnQixDQUFDLGtCQUFrQixDQUFDO0lBQ2xFLENBQUM7Q0FDSjtBQWpDRCxzQ0FpQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyByb3MgZnJvbSAnQGFsaWNsb3VkL3Jvcy1jZGstY29yZSc7XG5pbXBvcnQgeyBSb3NMaWZlY3ljbGVIb29rIH0gZnJvbSAnLi9lc3MuZ2VuZXJhdGVkJztcbi8vIEdlbmVyYXRlZCBmcm9tIHRoZSBBbGlDbG91ZCBST1MgUmVzb3VyY2UgU3BlY2lmaWNhdGlvblxuZXhwb3J0IHsgUm9zTGlmZWN5Y2xlSG9vayBhcyBMaWZlY3ljbGVIb29rUHJvcGVydHkgfTtcblxuLyoqXG4gKiBQcm9wZXJ0aWVzIGZvciBkZWZpbmluZyBhIGBMaWZlY3ljbGVIb29rYC5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvYWxpeXVuLWVzcy1saWZlY3ljbGVob29rXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgTGlmZWN5Y2xlSG9va1Byb3BzIHtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGxpZmVjeWNsZVRyYW5zaXRpb246IFRoZSBzY2FsaW5nIGFjdGl2aXRpZXMgdG8gd2hpY2ggbGlmZWN5Y2xlIGhvb2tzIGFwcGx5IFZhbHVlIHJhbmdlOlxuICAgICAqICBTQ0FMRV9PVVQ6IHNjYWxlLW91dCBldmVudFxuICAgICAqICBTQ0FMRV9JTjogc2NhbGUtaW4gZXZlbnRcbiAgICAgKi9cbiAgICByZWFkb25seSBsaWZlY3ljbGVUcmFuc2l0aW9uOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBzY2FsaW5nR3JvdXBJZDogVGhlIElEIG9mIHRoZSBzY2FsaW5nIGdyb3VwLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHNjYWxpbmdHcm91cElkOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBkZWZhdWx0UmVzdWx0OiBUaGUgYWN0aW9uIHRoYXQgdGhlIHNjYWxpbmcgZ3JvdXAgdGFrZXMgd2hlbiB0aGUgbGlmZWN5Y2xlIGhvb2sgdGltZXMgb3V0LiBWYWx1ZSByYW5nZTpcbiAgICAgKiAgQ09OVElOVUU6IHRoZSBzY2FsaW5nIGdyb3VwIGNvbnRpbnVlcyB3aXRoIHRoZSBzY2FsZS1pbiBvciBzY2FsZS1vdXQgcHJvY2Vzcy5cbiAgICAgKiAgQUJBTkRPTjogdGhlIHNjYWxpbmcgZ3JvdXAgc3RvcHMgYW55IHJlbWFpbmluZyBhY3Rpb24gb2YgdGhlIHNjYWxlLWluIG9yIHNjYWxlLW91dCBldmVudC5cbiAgICAgKiBEZWZhdWx0IHZhbHVlOiBDT05USU5VRVxuICAgICAqIElmIHRoZSBzY2FsaW5nIGdyb3VwIGhhcyBtdWx0aXBsZSBsaWZlY3ljbGUgaG9va3MgYW5kIG9uZSBvZiB0aGVtIGlzIHRlcm1pbmF0ZWQgYnkgdGhlIERlZmF1bHRSZXN1bHQ9QUJBTkRPTiBwYXJhbWV0ZXIgZHVyaW5nIGEgc2NhbGUtaW4gZXZlbnQgKFNDQUxFX0lOKSwgdGhlIHJlbWFpbmluZyBsaWZlY3ljbGUgaG9va3MgdW5kZXIgdGhlIHNhbWUgc2NhbGluZyBncm91cCB3aWxsIGFsc28gYmUgdGVybWluYXRlZC4gT3RoZXJ3aXNlLCB0aGUgYWN0aW9uIGZvbGxvd2luZyB0aGUgd2FpdCBzdGF0ZSBpcyB0aGUgbmV4dCBhY3Rpb24sIGFzIHNwZWNpZmllZCBpbiB0aGUgcGFyYW1ldGVyIERlZmF1bHRSZXN1bHQsIGFmdGVyIHRoZSBsYXN0IGxpZmVjeWNsZSBldmVudCB1bmRlciB0aGUgc2FtZSBzY2FsaW5nIGdyb3VwLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGRlZmF1bHRSZXN1bHQ/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBoZWFydGJlYXRUaW1lb3V0OiBUaGUgdGltZSwgaW4gc2Vjb25kcywgdGhhdCBjYW4gZWxhcHNlIGJlZm9yZSB0aGUgbGlmZWN5Y2xlIGhvb2sgdGltZXMgb3V0LiBJZiB0aGUgbGlmZWN5Y2xlIGhvb2sgdGltZXMgb3V0LCB0aGUgc2NhbGluZyBncm91cCBwZXJmb3JtcyB0aGUgZGVmYXVsdCBhY3Rpb24gKERlZmF1bHRSZXN1bHQpLiBUaGUgcmFuZ2UgaXMgZnJvbSAzMCB0byA4NjQwMCBzZWNvbmRzLiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyA2MDAgc2Vjb25kcy5cbiAgICAgKiBZb3UgY2FuIHByZXZlbnQgdGhlIGxpZmVjeWNsZSBob29rIGZyb20gdGltaW5nIG91dCBieSBjYWxsaW5nIHRoZSBSZWNvcmRMaWZlY3ljbGVBY3Rpb25IZWFydGJlYXQgb3BlcmF0aW9uLiBZb3UgY2FuIGFsc28gdGVybWluYXRlIHRoZSBsaWZlY3ljbGUgYWN0aW9uIGJ5IGNhbGxpbmcgdGhlIENvbXBsZXRlTGlmZWN5Y2xlQWN0aW9uIG9wZXJhdGlvbi5cbiAgICAgKi9cbiAgICByZWFkb25seSBoZWFydGJlYXRUaW1lb3V0PzogbnVtYmVyIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgbGlmZWN5Y2xlSG9va05hbWU6IFRoZSBuYW1lIG9mIHRoZSBsaWZlY3ljbGUgaG9vay4gRWFjaCBuYW1lIG11c3QgYmUgdW5pcXVlIHdpdGhpbiBhIHNjYWxpbmcgZ3JvdXAuIFRoZSBuYW1lIG11c3QgYmUgMiB0byA2NCBjaGFyYWN0ZXJzIGluIGxlbmd0aCBhbmQgY2FuIGNvbnRhaW4gbGV0dGVycywgbnVtYmVycywgQ2hpbmVzZSBjaGFyYWN0ZXJzLCBhbmQgc3BlY2lhbCBjaGFyYWN0ZXJzIGluY2x1ZGluZyB1bmRlcnNjb3JlcyAoXyksIGh5cGhlbnMgKC0pIGFuZCBwZXJpb2RzICguKS5cbiAgICAgKiBEZWZhdWx0IHZhbHVlOiBMaWZlY3ljbGUgSG9vayBJRFxuICAgICAqL1xuICAgIHJlYWRvbmx5IGxpZmVjeWNsZUhvb2tOYW1lPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgbm90aWZpY2F0aW9uQXJuOiBUaGUgQWxpYmFiYSBDbG91ZCBSZXNvdXJjZSBOYW1lIChBUk4pIG9mIHRoZSBub3RpZmljYXRpb24gdGFyZ2V0IHRoYXQgQXV0byBTY2FsaW5nIHdpbGwgdXNlIHRvIG5vdGlmeSB5b3Ugd2hlbiBhbiBpbnN0YW5jZSBpcyBpbiB0aGUgdHJhbnNpdGlvbiBzdGF0ZSBmb3IgdGhlIGxpZmVjeWNsZSBob29rLiBUaGlzIHRhcmdldCBjYW4gYmUgZWl0aGVyIGFuIE1OUyBxdWV1ZSBvciBhbiBNTlMgdG9waWMuIFRoZSBmb3JtYXQgb2YgdGhlIHBhcmFtZXRlciB2YWx1ZSBpcyBhY3M6ZXNzOntyZWdpb259OnthY2NvdW50LWlkfTp7cmVzb3VyY2UtcmVsYXRpdmUtaWR9LlxuICAgICAqIHJlZ2lvbjogdGhlIHJlZ2lvbiB0byB3aGljaCB0aGUgc2NhbGluZyBncm91cCBsb2NhdGVzXG4gICAgICogYWNjb3VudC1pZDogQWxpYmFiYSBDbG91ZCBJRFxuICAgICAqIEZvciBleGFtcGxlOlxuICAgICAqIE1OUyBxdWV1ZTogYWNzOmVzczp7cmVnaW9ufTp7YWNjb3VudC1pZH06cXVldWVcXC97cXVldWVuYW1lfVxuICAgICAqIE1OUyB0b3BpYzogYWNzOmVzczp7cmVnaW9ufTp7YWNjb3VudC1pZH06dG9waWNcXC97dG9waWNuYW1lfVxuICAgICAqIE9PUyB0ZW1wbGF0ZTogYWNzOmVzczp7cmVnaW9ufTp7YWNjb3VudC1pZH06b29zXFwve3RlbXBsYXRlbmFtZX1cbiAgICAgKi9cbiAgICByZWFkb25seSBub3RpZmljYXRpb25Bcm4/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBub3RpZmljYXRpb25NZXRhZGF0YTogVGhlIGZpeGVkIHN0cmluZyB0aGF0IHlvdSB3YW50IHRvIGluY2x1ZGUgd2hlbiBBdXRvIFNjYWxpbmcgc2VuZHMgYSBtZXNzYWdlIGFib3V0IHRoZSB3YWl0IHN0YXRlIG9mIHRoZSBzY2FsaW5nIGFjdGl2aXR5IHRvIHRoZSBub3RpZmljYXRpb24gdGFyZ2V0LiBUaGUgbGVuZ3RoIG9mIHRoZSBwYXJhbWV0ZXIgY2FuIGJlIHVwIHRvIDQwOTYgY2hhcmFjdGVycy4gQXV0byBTY2FsaW5nIHdpbGwgc2VuZCB0aGUgc3BlY2lmaWVkIE5vdGlmaWNhdGlvbk1ldGFkYXRhIHBhcmFtZXRlciBhbG9uZyB3aXRoIHRoZSBub3RpZmljYXRpb24gbWVzc2FnZSBzbyB0aGF0IHlvdSBjYW4gZWFzaWx5IGNhdGVnb3JpemUgeW91ciBub3RpZmljYXRpb25zLiBUaGUgTm90aWZpY2F0aW9uTWV0YWRhdGEgcGFyYW1ldGVyIHdpbGwgb25seSB0YWtlIGVmZmVjdCBhZnRlciB5b3Ugc3BlY2lmeSB0aGUgTm90aWZpY2F0aW9uQXJuIHBhcmFtZXRlci5cbiAgICAgKi9cbiAgICByZWFkb25seSBub3RpZmljYXRpb25NZXRhZGF0YT86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcbn1cblxuLyoqXG4gKiBUaGlzIGNsYXNzIGVuY2Fwc3VsYXRlcyBhbmQgZXh0ZW5kcyB0aGUgUk9TIHJlc291cmNlIHR5cGUgYEFMSVlVTjo6RVNTOjpMaWZlY3ljbGVIb29rYCwgd2hpY2ggaXMgdXNlZCB0byBjcmVhdGUgYSBsaWZlY3ljbGUgaG9vayBmb3IgYSBzY2FsaW5nIGdyb3VwLlxuICogQE5vdGUgVGhpcyBjbGFzcyBtYXkgaGF2ZSBzb21lIG5ldyBmdW5jdGlvbnMgdG8gZmFjaWxpdGF0ZSBkZXZlbG9wbWVudCwgc28gaXQgaXMgcmVjb21tZW5kZWQgdG8gdXNlIHRoaXMgY2xhc3MgaW5zdGVhZCBvZiBgUm9zTGlmZWN5Y2xlSG9va2Bmb3IgYSBtb3JlIGNvbnZlbmllbnQgZGV2ZWxvcG1lbnQgZXhwZXJpZW5jZS5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvYWxpeXVuLWVzcy1saWZlY3ljbGVob29rXG4gKi9cbmV4cG9ydCBjbGFzcyBMaWZlY3ljbGVIb29rIGV4dGVuZHMgcm9zLlJlc291cmNlIHtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBMaWZlY3ljbGVIb29rSWQ6IFRoZSBsaWZlY3ljbGUgaG9vayBJRFxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyTGlmZWN5Y2xlSG9va0lkOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgU2NhbGluZ0dyb3VwSWQ6IFRoZSBpZCBvZiB0aGUgc2NhbGluZyBncm91cCB0byB3aGljaCB0aGUgbGlmZWN5Y2xlIGhvb2sgYmVsb25ncy5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0clNjYWxpbmdHcm91cElkOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQYXJhbSBzY29wZSAtIHNjb3BlIGluIHdoaWNoIHRoaXMgcmVzb3VyY2UgaXMgZGVmaW5lZFxuICAgICAqIFBhcmFtIGlkICAgIC0gc2NvcGVkIGlkIG9mIHRoZSByZXNvdXJjZVxuICAgICAqIFBhcmFtIHByb3BzIC0gcmVzb3VyY2UgcHJvcGVydGllc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiByb3MuQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogTGlmZWN5Y2xlSG9va1Byb3BzLCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDpib29sZWFuID0gdHJ1ZSkge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQpO1xuXG4gICAgICAgIGNvbnN0IHJvc0xpZmVjeWNsZUhvb2sgPSBuZXcgUm9zTGlmZWN5Y2xlSG9vayh0aGlzLCBpZCwgIHtcbiAgICAgICAgICAgIGxpZmVjeWNsZUhvb2tOYW1lOiBwcm9wcy5saWZlY3ljbGVIb29rTmFtZSxcbiAgICAgICAgICAgIG5vdGlmaWNhdGlvbkFybjogcHJvcHMubm90aWZpY2F0aW9uQXJuLFxuICAgICAgICAgICAgc2NhbGluZ0dyb3VwSWQ6IHByb3BzLnNjYWxpbmdHcm91cElkLFxuICAgICAgICAgICAgbGlmZWN5Y2xlVHJhbnNpdGlvbjogcHJvcHMubGlmZWN5Y2xlVHJhbnNpdGlvbixcbiAgICAgICAgICAgIGhlYXJ0YmVhdFRpbWVvdXQ6IHByb3BzLmhlYXJ0YmVhdFRpbWVvdXQsXG4gICAgICAgICAgICBub3RpZmljYXRpb25NZXRhZGF0YTogcHJvcHMubm90aWZpY2F0aW9uTWV0YWRhdGEsXG4gICAgICAgICAgICBkZWZhdWx0UmVzdWx0OiBwcm9wcy5kZWZhdWx0UmVzdWx0LFxuICAgICAgICB9LCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCAmJiB0aGlzLnN0YWNrLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50KTtcbiAgICAgICAgdGhpcy5yZXNvdXJjZSA9IHJvc0xpZmVjeWNsZUhvb2s7XG4gICAgICAgIHRoaXMuYXR0ckxpZmVjeWNsZUhvb2tJZCA9IHJvc0xpZmVjeWNsZUhvb2suYXR0ckxpZmVjeWNsZUhvb2tJZDtcbiAgICAgICAgdGhpcy5hdHRyU2NhbGluZ0dyb3VwSWQgPSByb3NMaWZlY3ljbGVIb29rLmF0dHJTY2FsaW5nR3JvdXBJZDtcbiAgICB9XG59XG4iXX0=