"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ScalingGroup = exports.ScalingGroupProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ess_generated_1 = require("./ess.generated");
Object.defineProperty(exports, "ScalingGroupProperty", { enumerable: true, get: function () { return ess_generated_1.RosScalingGroup; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::ESS::ScalingGroup`, which is used to create a scaling group. A scaling group is a group of Elastic Compute Service (ECS) instances that are dynamically scaled based on the configured scenario. A scaling group does not immediately take effect after it is created. You must use ALIYUN::ESS::ScalingGroupEnable to enable the scaling group to trigger scaling activities and execute scaling rules.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosScalingGroup`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-ess-scalinggroup
 */
class ScalingGroup extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosScalingGroup = new ess_generated_1.RosScalingGroup(this, id, {
            spotInstanceRemedy: props.spotInstanceRemedy,
            compensateWithOnDemand: props.compensateWithOnDemand,
            notificationConfigurations: props.notificationConfigurations,
            onDemandPercentageAboveBaseCapacity: props.onDemandPercentageAboveBaseCapacity,
            desiredCapacity: props.desiredCapacity,
            allocationStrategy: props.allocationStrategy,
            onDemandBaseCapacity: props.onDemandBaseCapacity,
            standbyInstances: props.standbyInstances,
            launchTemplateOverrides: props.launchTemplateOverrides,
            removalPolicys: props.removalPolicys,
            spotAllocationStrategy: props.spotAllocationStrategy,
            tags: props.tags,
            scalingPolicy: props.scalingPolicy,
            vSwitchIds: props.vSwitchIds,
            instanceId: props.instanceId,
            vSwitchId: props.vSwitchId,
            loadBalancerIds: props.loadBalancerIds,
            spotInstancePools: props.spotInstancePools,
            groupDeletionProtection: props.groupDeletionProtection === undefined || props.groupDeletionProtection === null ? false : props.groupDeletionProtection,
            launchTemplateId: props.launchTemplateId,
            customPolicyArn: props.customPolicyArn,
            maxSize: props.maxSize,
            scalingGroupName: props.scalingGroupName,
            minSize: props.minSize,
            defaultCooldown: props.defaultCooldown,
            azBalance: props.azBalance,
            groupType: props.groupType,
            launchTemplateVersion: props.launchTemplateVersion,
            multiAzPolicy: props.multiAzPolicy,
            protectedInstances: props.protectedInstances,
            containerGroupId: props.containerGroupId,
            dbInstanceIds: props.dbInstanceIds,
            healthCheckType: props.healthCheckType,
            maxInstanceLifetime: props.maxInstanceLifetime,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosScalingGroup;
        this.attrScalingGroupId = rosScalingGroup.attrScalingGroupId;
        this.attrScalingGroupName = rosScalingGroup.attrScalingGroupName;
    }
}
exports.ScalingGroup = ScalingGroup;
//# sourceMappingURL=data:application/json;base64,