"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DomainRecords = exports.DomainRecordsProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const dns_generated_1 = require("./dns.generated");
Object.defineProperty(exports, "DomainRecordsProperty", { enumerable: true, get: function () { return dns_generated_1.RosDomainRecords; } });
/**
 * This class encapsulates and extends the ROS resource type `DATASOURCE::DNS::DomainRecords`, which is used to query domain name system (DNS) records.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosDomainRecords`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/datasource-dns-domainrecords
 */
class DomainRecords extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosDomainRecords = new dns_generated_1.RosDomainRecords(this, id, {
            status: props.status,
            orderBy: props.orderBy,
            rrKeyWord: props.rrKeyWord,
            domainName: props.domainName,
            typeKeyWord: props.typeKeyWord,
            lang: props.lang,
            direction: props.direction,
            groupId: props.groupId,
            line: props.line,
            type: props.type,
            valueKeyWord: props.valueKeyWord,
            keyWord: props.keyWord,
            searchMode: props.searchMode,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosDomainRecords;
        this.attrDomainRecordIds = rosDomainRecords.attrDomainRecordIds;
        this.attrDomainRecords = rosDomainRecords.attrDomainRecords;
    }
}
exports.DomainRecords = DomainRecords;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG9tYWlucmVjb3Jkcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImRvbWFpbnJlY29yZHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsOENBQThDO0FBQzlDLG1EQUFtRDtBQUV0QixzR0FGcEIsZ0NBQWdCLE9BRXlCO0FBMEVsRDs7OztHQUlHO0FBQ0gsTUFBYSxhQUFjLFNBQVEsR0FBRyxDQUFDLFFBQVE7SUFnQjNDOzs7O09BSUc7SUFDSCxZQUFZLEtBQW9CLEVBQUUsRUFBVSxFQUFFLEtBQXlCLEVBQUUsbUNBQTJDLElBQUk7UUFDcEgsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNqQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUNiLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxnQ0FBZ0MsR0FBRyxnQ0FBZ0MsQ0FBQztRQUV6RSxNQUFNLGdCQUFnQixHQUFHLElBQUksZ0NBQWdCLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRztZQUNyRCxNQUFNLEVBQUUsS0FBSyxDQUFDLE1BQU07WUFDcEIsT0FBTyxFQUFFLEtBQUssQ0FBQyxPQUFPO1lBQ3RCLFNBQVMsRUFBRSxLQUFLLENBQUMsU0FBUztZQUMxQixVQUFVLEVBQUUsS0FBSyxDQUFDLFVBQVU7WUFDNUIsV0FBVyxFQUFFLEtBQUssQ0FBQyxXQUFXO1lBQzlCLElBQUksRUFBRSxLQUFLLENBQUMsSUFBSTtZQUNoQixTQUFTLEVBQUUsS0FBSyxDQUFDLFNBQVM7WUFDMUIsT0FBTyxFQUFFLEtBQUssQ0FBQyxPQUFPO1lBQ3RCLElBQUksRUFBRSxLQUFLLENBQUMsSUFBSTtZQUNoQixJQUFJLEVBQUUsS0FBSyxDQUFDLElBQUk7WUFDaEIsWUFBWSxFQUFFLEtBQUssQ0FBQyxZQUFZO1lBQ2hDLE9BQU8sRUFBRSxLQUFLLENBQUMsT0FBTztZQUN0QixVQUFVLEVBQUUsS0FBSyxDQUFDLFVBQVU7U0FDL0IsRUFBRSxnQ0FBZ0MsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7UUFDcEYsSUFBSSxDQUFDLFFBQVEsR0FBRyxnQkFBZ0IsQ0FBQztRQUNqQyxJQUFJLENBQUMsbUJBQW1CLEdBQUcsZ0JBQWdCLENBQUMsbUJBQW1CLENBQUM7UUFDaEUsSUFBSSxDQUFDLGlCQUFpQixHQUFHLGdCQUFnQixDQUFDLGlCQUFpQixDQUFDO0lBQ2hFLENBQUM7Q0FDSjtBQS9DRCxzQ0ErQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyByb3MgZnJvbSAnQGFsaWNsb3VkL3Jvcy1jZGstY29yZSc7XG5pbXBvcnQgeyBSb3NEb21haW5SZWNvcmRzIH0gZnJvbSAnLi9kbnMuZ2VuZXJhdGVkJztcbi8vIEdlbmVyYXRlZCBmcm9tIHRoZSBBbGlDbG91ZCBST1MgUmVzb3VyY2UgU3BlY2lmaWNhdGlvblxuZXhwb3J0IHsgUm9zRG9tYWluUmVjb3JkcyBhcyBEb21haW5SZWNvcmRzUHJvcGVydHkgfTtcblxuLyoqXG4gKiBQcm9wZXJ0aWVzIGZvciBkZWZpbmluZyBhIGBEb21haW5SZWNvcmRzYC5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvZGF0YXNvdXJjZS1kbnMtZG9tYWlucmVjb3Jkc1xuICovXG5leHBvcnQgaW50ZXJmYWNlIERvbWFpblJlY29yZHNQcm9wcyB7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBkb21haW5OYW1lOiBUaGUgZG9tYWluIG5hbWUgZm9yIHdoaWNoIHlvdSB3YW50IHRvIHF1ZXJ5IEROUyByZWNvcmRzLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGRvbWFpbk5hbWU6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGRpcmVjdGlvbjogVGhlIG9yZGVyIGluIHdoaWNoIHRoZSByZXR1cm5lZCBETlMgcmVjb3JkcyBhcmUgc29ydGVkLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGRpcmVjdGlvbj86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGdyb3VwSWQ6IFRoZSBJRCBvZiB0aGUgZG9tYWluIG5hbWUgZ3JvdXAuXG4gICAgICovXG4gICAgcmVhZG9ubHkgZ3JvdXBJZD86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGtleVdvcmQ6IFRoZSBrZXl3b3JkIGZvciBzZWFyY2hlcyBpbiBcIiVLZXlXb3JkJVwiIG1vZGUuIFRoZSB2YWx1ZSBpcyBub3QgY2FzZS1zZW5zaXRpdmUuXG4gICAgICovXG4gICAgcmVhZG9ubHkga2V5V29yZD86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGxhbmc6IFRoZSBsYW5ndWFnZSB0eXBlLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGxhbmc/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBsaW5lOiBUaGUgbGluZSBiYXNlZCBvbiB3aGljaCB0aGUgc3lzdGVtIHF1ZXJpZXMgRE5TIHJlY29yZHMuXG4gICAgICovXG4gICAgcmVhZG9ubHkgbGluZT86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IG9yZGVyQnk6IFRoZSBtZXRob2QgdGhhdCBpcyB1c2VkIHRvIHNvcnQgdGhlIHJldHVybmVkIEROUyByZWNvcmRzLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IG9yZGVyQnk/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBycktleVdvcmQ6IFRoZSByZXNvdXJjZSByZWNvcmQgKFJSKSBrZXl3b3JkIGJhc2VkIG9uIHdoaWNoIHRoZSBzeXN0ZW0gcXVlcmllcyBETlMgcmVjb3Jkcy5cbiAgICAgKi9cbiAgICByZWFkb25seSBycktleVdvcmQ/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBzZWFyY2hNb2RlOiBUaGUgc2VhcmNoIG1vZGUuXG4gICAgICovXG4gICAgcmVhZG9ubHkgc2VhcmNoTW9kZT86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHN0YXR1czogVGhlIHN0YXR1cyBvZiB0aGUgRE5TIHJlY29yZHMgdG8gcXVlcnkuXG4gICAgICovXG4gICAgcmVhZG9ubHkgc3RhdHVzPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgdHlwZTogVGhlIHR5cGUgb2YgdGhlIEROUyByZWNvcmRzIHRvIHF1ZXJ5LlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHR5cGU/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSB0eXBlS2V5V29yZDogVGhlIHR5cGUga2V5d29yZCBiYXNlZCBvbiB3aGljaCB0aGUgc3lzdGVtIHF1ZXJpZXMgRE5TIHJlY29yZHMuXG4gICAgICovXG4gICAgcmVhZG9ubHkgdHlwZUtleVdvcmQ/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSB2YWx1ZUtleVdvcmQ6IFRoZSByZWNvcmQgdmFsdWUga2V5d29yZCBiYXNlZCBvbiB3aGljaCB0aGUgc3lzdGVtIHF1ZXJpZXMgRE5TIHJlY29yZHMuXG4gICAgICovXG4gICAgcmVhZG9ubHkgdmFsdWVLZXlXb3JkPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xufVxuXG4vKipcbiAqIFRoaXMgY2xhc3MgZW5jYXBzdWxhdGVzIGFuZCBleHRlbmRzIHRoZSBST1MgcmVzb3VyY2UgdHlwZSBgREFUQVNPVVJDRTo6RE5TOjpEb21haW5SZWNvcmRzYCwgd2hpY2ggaXMgdXNlZCB0byBxdWVyeSBkb21haW4gbmFtZSBzeXN0ZW0gKEROUykgcmVjb3Jkcy5cbiAqIEBOb3RlIFRoaXMgY2xhc3MgbWF5IGhhdmUgc29tZSBuZXcgZnVuY3Rpb25zIHRvIGZhY2lsaXRhdGUgZGV2ZWxvcG1lbnQsIHNvIGl0IGlzIHJlY29tbWVuZGVkIHRvIHVzZSB0aGlzIGNsYXNzIGluc3RlYWQgb2YgYFJvc0RvbWFpblJlY29yZHNgZm9yIGEgbW9yZSBjb252ZW5pZW50IGRldmVsb3BtZW50IGV4cGVyaWVuY2UuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2RhdGFzb3VyY2UtZG5zLWRvbWFpbnJlY29yZHNcbiAqL1xuZXhwb3J0IGNsYXNzIERvbWFpblJlY29yZHMgZXh0ZW5kcyByb3MuUmVzb3VyY2Uge1xuICAgIHByb3RlY3RlZCBzY29wZTogcm9zLkNvbnN0cnVjdDtcbiAgICBwcm90ZWN0ZWQgaWQ6IHN0cmluZztcbiAgICBwcm90ZWN0ZWQgcHJvcHM6IERvbWFpblJlY29yZHNQcm9wcztcbiAgICBwcm90ZWN0ZWQgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6IGJvb2xlYW47XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgRG9tYWluUmVjb3JkSWRzOiBUaGUgbGlzdCBvZiBUaGUgRE5TIGRvbWFpbiByZWNvcmQgaWRzLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyRG9tYWluUmVjb3JkSWRzOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgRG9tYWluUmVjb3JkczogVGhlIGluZm9ybWF0aW9uIGFib3V0IEROUyByZWNvcmRzLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyRG9tYWluUmVjb3Jkczogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUGFyYW0gc2NvcGUgLSBzY29wZSBpbiB3aGljaCB0aGlzIHJlc291cmNlIGlzIGRlZmluZWRcbiAgICAgKiBQYXJhbSBpZCAgICAtIHNjb3BlZCBpZCBvZiB0aGUgcmVzb3VyY2VcbiAgICAgKiBQYXJhbSBwcm9wcyAtIHJlc291cmNlIHByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihzY29wZTogcm9zLkNvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IERvbWFpblJlY29yZHNQcm9wcywgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6Ym9vbGVhbiA9IHRydWUpIHtcbiAgICAgICAgc3VwZXIoc2NvcGUsIGlkKTtcbiAgICAgICAgdGhpcy5zY29wZSA9IHNjb3BlO1xuICAgICAgICB0aGlzLmlkID0gaWQ7XG4gICAgICAgIHRoaXMucHJvcHMgPSBwcm9wcztcbiAgICAgICAgdGhpcy5lbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCA9IGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50O1xuXG4gICAgICAgIGNvbnN0IHJvc0RvbWFpblJlY29yZHMgPSBuZXcgUm9zRG9tYWluUmVjb3Jkcyh0aGlzLCBpZCwgIHtcbiAgICAgICAgICAgIHN0YXR1czogcHJvcHMuc3RhdHVzLFxuICAgICAgICAgICAgb3JkZXJCeTogcHJvcHMub3JkZXJCeSxcbiAgICAgICAgICAgIHJyS2V5V29yZDogcHJvcHMucnJLZXlXb3JkLFxuICAgICAgICAgICAgZG9tYWluTmFtZTogcHJvcHMuZG9tYWluTmFtZSxcbiAgICAgICAgICAgIHR5cGVLZXlXb3JkOiBwcm9wcy50eXBlS2V5V29yZCxcbiAgICAgICAgICAgIGxhbmc6IHByb3BzLmxhbmcsXG4gICAgICAgICAgICBkaXJlY3Rpb246IHByb3BzLmRpcmVjdGlvbixcbiAgICAgICAgICAgIGdyb3VwSWQ6IHByb3BzLmdyb3VwSWQsXG4gICAgICAgICAgICBsaW5lOiBwcm9wcy5saW5lLFxuICAgICAgICAgICAgdHlwZTogcHJvcHMudHlwZSxcbiAgICAgICAgICAgIHZhbHVlS2V5V29yZDogcHJvcHMudmFsdWVLZXlXb3JkLFxuICAgICAgICAgICAga2V5V29yZDogcHJvcHMua2V5V29yZCxcbiAgICAgICAgICAgIHNlYXJjaE1vZGU6IHByb3BzLnNlYXJjaE1vZGUsXG4gICAgICAgIH0sIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ICYmIHRoaXMuc3RhY2suZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQpO1xuICAgICAgICB0aGlzLnJlc291cmNlID0gcm9zRG9tYWluUmVjb3JkcztcbiAgICAgICAgdGhpcy5hdHRyRG9tYWluUmVjb3JkSWRzID0gcm9zRG9tYWluUmVjb3Jkcy5hdHRyRG9tYWluUmVjb3JkSWRzO1xuICAgICAgICB0aGlzLmF0dHJEb21haW5SZWNvcmRzID0gcm9zRG9tYWluUmVjb3Jkcy5hdHRyRG9tYWluUmVjb3JkcztcbiAgICB9XG59XG4iXX0=