"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DBInstance = exports.DBInstanceProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const rds_generated_1 = require("./rds.generated");
Object.defineProperty(exports, "DBInstanceProperty", { enumerable: true, get: function () { return rds_generated_1.RosDBInstance; } });
/**
 * This class encapsulates and extends the ROS resource type `DATASOURCE::RDS::DBInstance`ALIYUN::REDIS::Account is used to create an account that has the specified permissions on an ApsaraDB for Redis instance.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosDBInstance`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/datasource-rds-dbinstance
 */
class DBInstance extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props = {}, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosDBInstance = new rds_generated_1.RosDBInstance(this, id, {
            dbInstanceId: props.dbInstanceId,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosDBInstance;
        this.attrAccountMaxQuantity = rosDBInstance.attrAccountMaxQuantity;
        this.attrAdvancedFeatures = rosDBInstance.attrAdvancedFeatures;
        this.attrAutoUpgradeMinorVersion = rosDBInstance.attrAutoUpgradeMinorVersion;
        this.attrAvailabilityValue = rosDBInstance.attrAvailabilityValue;
        this.attrBabelfishConfig = rosDBInstance.attrBabelfishConfig;
        this.attrCategory = rosDBInstance.attrCategory;
        this.attrCollation = rosDBInstance.attrCollation;
        this.attrConnectionMode = rosDBInstance.attrConnectionMode;
        this.attrConnectionString = rosDBInstance.attrConnectionString;
        this.attrConsoleVersion = rosDBInstance.attrConsoleVersion;
        this.attrCreationTime = rosDBInstance.attrCreationTime;
        this.attrCurrentKernelVersion = rosDBInstance.attrCurrentKernelVersion;
        this.attrDbClusterNodes = rosDBInstance.attrDbClusterNodes;
        this.attrDbInstanceCpu = rosDBInstance.attrDbInstanceCpu;
        this.attrDbInstanceClass = rosDBInstance.attrDbInstanceClass;
        this.attrDbInstanceClassType = rosDBInstance.attrDbInstanceClassType;
        this.attrDbInstanceDescription = rosDBInstance.attrDbInstanceDescription;
        this.attrDbInstanceDiskUsed = rosDBInstance.attrDbInstanceDiskUsed;
        this.attrDbInstanceId = rosDBInstance.attrDbInstanceId;
        this.attrDbInstanceMemory = rosDBInstance.attrDbInstanceMemory;
        this.attrDbInstanceNetType = rosDBInstance.attrDbInstanceNetType;
        this.attrDbInstanceStatus = rosDBInstance.attrDbInstanceStatus;
        this.attrDbInstanceStorage = rosDBInstance.attrDbInstanceStorage;
        this.attrDbInstanceStorageType = rosDBInstance.attrDbInstanceStorageType;
        this.attrDbInstanceType = rosDBInstance.attrDbInstanceType;
        this.attrDbMaxQuantity = rosDBInstance.attrDbMaxQuantity;
        this.attrDedicatedHostGroupId = rosDBInstance.attrDedicatedHostGroupId;
        this.attrDeletionProtection = rosDBInstance.attrDeletionProtection;
        this.attrEngine = rosDBInstance.attrEngine;
        this.attrEngineVersion = rosDBInstance.attrEngineVersion;
        this.attrExpireTime = rosDBInstance.attrExpireTime;
        this.attrExtra = rosDBInstance.attrExtra;
        this.attrGeneralGroupName = rosDBInstance.attrGeneralGroupName;
        this.attrGuardDbInstanceId = rosDBInstance.attrGuardDbInstanceId;
        this.attrIpType = rosDBInstance.attrIpType;
        this.attrIncrementSourceDbInstanceId = rosDBInstance.attrIncrementSourceDbInstanceId;
        this.attrInstanceNetworkType = rosDBInstance.attrInstanceNetworkType;
        this.attrInstructionSetArch = rosDBInstance.attrInstructionSetArch;
        this.attrLatestKernelVersion = rosDBInstance.attrLatestKernelVersion;
        this.attrLockMode = rosDBInstance.attrLockMode;
        this.attrLockReason = rosDBInstance.attrLockReason;
        this.attrMaintainTime = rosDBInstance.attrMaintainTime;
        this.attrMasterInstanceId = rosDBInstance.attrMasterInstanceId;
        this.attrMasterZone = rosDBInstance.attrMasterZone;
        this.attrMaxConnections = rosDBInstance.attrMaxConnections;
        this.attrMaxIombps = rosDBInstance.attrMaxIombps;
        this.attrMaxIops = rosDBInstance.attrMaxIops;
        this.attrPgBouncerEnabled = rosDBInstance.attrPgBouncerEnabled;
        this.attrPayType = rosDBInstance.attrPayType;
        this.attrPort = rosDBInstance.attrPort;
        this.attrProxyType = rosDBInstance.attrProxyType;
        this.attrReadOnlyDbInstanceIds = rosDBInstance.attrReadOnlyDbInstanceIds;
        this.attrReadonlyInstanceSqlDelayedTime = rosDBInstance.attrReadonlyInstanceSqlDelayedTime;
        this.attrResourceGroupId = rosDBInstance.attrResourceGroupId;
        this.attrSecurityIpList = rosDBInstance.attrSecurityIpList;
        this.attrSecurityIpMode = rosDBInstance.attrSecurityIpMode;
        this.attrServerlessConfig = rosDBInstance.attrServerlessConfig;
        this.attrSlaveZones = rosDBInstance.attrSlaveZones;
        this.attrSuperPermissionMode = rosDBInstance.attrSuperPermissionMode;
        this.attrTempDbInstanceId = rosDBInstance.attrTempDbInstanceId;
        this.attrTimeZone = rosDBInstance.attrTimeZone;
        this.attrTips = rosDBInstance.attrTips;
        this.attrTipsLevel = rosDBInstance.attrTipsLevel;
        this.attrVSwitchId = rosDBInstance.attrVSwitchId;
        this.attrVpcCloudInstanceId = rosDBInstance.attrVpcCloudInstanceId;
        this.attrVpcId = rosDBInstance.attrVpcId;
        this.attrZoneId = rosDBInstance.attrZoneId;
    }
}
exports.DBInstance = DBInstance;
//# sourceMappingURL=data:application/json;base64,