"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MigrateTask = exports.MigrateTaskProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const rds_generated_1 = require("./rds.generated");
Object.defineProperty(exports, "MigrateTaskProperty", { enumerable: true, get: function () { return rds_generated_1.RosMigrateTask; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::RDS::MigrateTask`, which is used to create a migration task to restore backup files from an Object Storage Service (OSS) bucket to an ApsaraDB RDS for SQL Server instance.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosMigrateTask`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-rds-migratetask
 */
class MigrateTask extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosMigrateTask = new rds_generated_1.RosMigrateTask(this, id, {
            isOnlineDb: props.isOnlineDb,
            dbInstanceId: props.dbInstanceId,
            ossObjectPositions: props.ossObjectPositions,
            checkDbMode: props.checkDbMode,
            backupMode: props.backupMode,
            dbName: props.dbName,
            ossUrls: props.ossUrls,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosMigrateTask;
        this.attrDbName = rosMigrateTask.attrDbName;
        this.attrMigrateTaskId = rosMigrateTask.attrMigrateTaskId;
    }
}
exports.MigrateTask = MigrateTask;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWlncmF0ZXRhc2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJtaWdyYXRldGFzay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw4Q0FBOEM7QUFDOUMsbURBQWlEO0FBRXRCLG9HQUZsQiw4QkFBYyxPQUV1QjtBQTZEOUM7Ozs7R0FJRztBQUNILE1BQWEsV0FBWSxTQUFRLEdBQUcsQ0FBQyxRQUFRO0lBWXpDOzs7O09BSUc7SUFDSCxZQUFZLEtBQW9CLEVBQUUsRUFBVSxFQUFFLEtBQXVCLEVBQUUsbUNBQTJDLElBQUk7UUFDbEgsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUVqQixNQUFNLGNBQWMsR0FBRyxJQUFJLDhCQUFjLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRztZQUNqRCxVQUFVLEVBQUUsS0FBSyxDQUFDLFVBQVU7WUFDNUIsWUFBWSxFQUFFLEtBQUssQ0FBQyxZQUFZO1lBQ2hDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxrQkFBa0I7WUFDNUMsV0FBVyxFQUFFLEtBQUssQ0FBQyxXQUFXO1lBQzlCLFVBQVUsRUFBRSxLQUFLLENBQUMsVUFBVTtZQUM1QixNQUFNLEVBQUUsS0FBSyxDQUFDLE1BQU07WUFDcEIsT0FBTyxFQUFFLEtBQUssQ0FBQyxPQUFPO1NBQ3pCLEVBQUUsZ0NBQWdDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO1FBQ3BGLElBQUksQ0FBQyxRQUFRLEdBQUcsY0FBYyxDQUFDO1FBQy9CLElBQUksQ0FBQyxVQUFVLEdBQUcsY0FBYyxDQUFDLFVBQVUsQ0FBQztRQUM1QyxJQUFJLENBQUMsaUJBQWlCLEdBQUcsY0FBYyxDQUFDLGlCQUFpQixDQUFDO0lBQzlELENBQUM7Q0FDSjtBQWpDRCxrQ0FpQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyByb3MgZnJvbSAnQGFsaWNsb3VkL3Jvcy1jZGstY29yZSc7XG5pbXBvcnQgeyBSb3NNaWdyYXRlVGFzayB9IGZyb20gJy4vcmRzLmdlbmVyYXRlZCc7XG4vLyBHZW5lcmF0ZWQgZnJvbSB0aGUgQWxpQ2xvdWQgUk9TIFJlc291cmNlIFNwZWNpZmljYXRpb25cbmV4cG9ydCB7IFJvc01pZ3JhdGVUYXNrIGFzIE1pZ3JhdGVUYXNrUHJvcGVydHkgfTtcblxuLyoqXG4gKiBQcm9wZXJ0aWVzIGZvciBkZWZpbmluZyBhIGBNaWdyYXRlVGFza2AuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2FsaXl1bi1yZHMtbWlncmF0ZXRhc2tcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBNaWdyYXRlVGFza1Byb3BzIHtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGJhY2t1cE1vZGU6IFRoZSB0eXBlIG9mIHRoZSBtaWdyYXRpb24gdGFzay4gVmFsaWQgdmFsdWVzOlxuICAgICAqIEZVTEw6IHNwZWNpZmllcyB0aGF0IGZ1bGwgYmFja3VwIGZpbGVzIGFyZSB1c2VkIHRvIHJlc3RvcmUgZGF0YS5cbiAgICAgKiBVUERGOiBzcGVjaWZpZXMgdGhhdCBpbmNyZW1lbnRhbCBiYWNrdXAgZmlsZXMgb3IgbG9nIGZpbGVzIGFyZSB1c2VkIHRvIHJlc3RvcmUgaW5jcmVtZW50YWwgZGF0YS5cbiAgICAgKi9cbiAgICByZWFkb25seSBiYWNrdXBNb2RlOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBkYkluc3RhbmNlSWQ6IFRoZSBJRCBvZiB0aGUgaW5zdGFuY2UuXG4gICAgICovXG4gICAgcmVhZG9ubHkgZGJJbnN0YW5jZUlkOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBkYk5hbWU6IFRoZSBuYW1lIG9mIHRoZSBkYXRhYmFzZSB0aGF0IHlvdSB3YW50IHRvIHJlc3RvcmUuXG4gICAgICovXG4gICAgcmVhZG9ubHkgZGJOYW1lOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBpc09ubGluZURiOiBTcGVjaWZpZXMgd2hldGhlciB0byBicmluZyB0aGUgcmVzdG9yZWQgZGF0YWJhc2Ugb25saW5lIGZvciB1c2VyIGFjY2Vzcy4gTm90ZSBUaGUgdmFsdWUgZm9yIFNRTCBTZXJ2ZXIgMjAwOCBSMiBpcyBmaXhlZCB0byBUcnVlLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGlzT25saW5lRGI6IGJvb2xlYW4gfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBjaGVja0RiTW9kZTogVGhlIGNvbnNpc3RlbmN5IGNoZWNrIG1ldGhvZCBvZiB0aGUgZGF0YWJhc2UuIFZhbGlkIHZhbHVlczpcbiAgICAgKiBTeW5jRXhlY3V0ZURCQ2hlY2s6IHN5bmNocm9ub3VzIGRhdGFiYXNlIGNoZWNrXG4gICAgICogQXN5bmNFeGVjdXRlREJDaGVjazogYXN5bmNocm9ub3VzIGRhdGFiYXNlIGNoZWNrXG4gICAgICogRGVmYXVsdCB2YWx1ZTogQXN5bmNFeGVjdXRlREJDaGVjayAoY29tcGF0aWJsZSB3aXRoIFNRTCBTZXJ2ZXIgMjAwOCBSMikuXG4gICAgICogTm90ZSBXaGVuIElzT25saW5lREIgaXMgc2V0IHRvIFRydWUsIHRoaXMgdmFsdWUgaXMgdmFsaWQuXG4gICAgICovXG4gICAgcmVhZG9ubHkgY2hlY2tEYk1vZGU/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBvc3NPYmplY3RQb3NpdGlvbnM6IFRoZSBpbmZvcm1hdGlvbiBvZiB0aGUgYmFja3VwIGZpbGUgaW4gdGhlIE9TUyBidWNrZXQuXG4gICAgICogVGhlIHZhbHVlcyBjb25zaXN0IG9mIHRocmVlIHBhcnRzIHRoYXQgYXJlIHNlcGFyYXRlZCBieSBjb2xvbnMgKDopOlxuICAgICAqIFRoZSBlbmRwb2ludCBvZiB0aGUgT1NTIGJ1Y2tldDogb3NzLWFwLXNvdXRoZWFzdC0xLmFsaXl1bmNzLmNvbS5cbiAgICAgKiBUaGUgbmFtZSBvZiB0aGUgT1NTIGJ1Y2tldDogcmRzbXNzcWxzaW5nYXBvcmUuXG4gICAgICogVGhlIGtleSBvZiB0aGUgYmFja3VwIGZpbGUgaW4gdGhlIE9TUyBidWNrZXQ6IGF1dG90ZXN0XzIwMDhSMl9UZXN0TWlncmF0aW9uX0ZVTEwuYmFrLlxuICAgICAqIE5vdGVcbiAgICAgKiBUaGlzIHBhcmFtZXRlciBpcyBvcHRpb25hbCBmb3IgaW5zdGFuY2VzIHRoYXQgcnVuIFNRTCBTZXJ2ZXIgMjAwOCBSMi5cbiAgICAgKiBUaGlzIHBhcmFtZXRlciBpcyByZXF1aXJlZCBmb3IgaW5zdGFuY2VzIHRoYXQgcnVuIGEgZGF0YWJhc2UgZW5naW5lIGxhdGVyIHRoYW4gU1FMXG4gICAgICogU2VydmVyIDIwMDggUjIuXG4gICAgICovXG4gICAgcmVhZG9ubHkgb3NzT2JqZWN0UG9zaXRpb25zPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgb3NzVXJsczogVGhlIHNoYXJlZCBVUkwgb2YgdGhlIGJhY2t1cCBmaWxlIGluIHRoZSBPU1MgYnVja2V0LiBUaGUgVVJMIG11c3QgYmUgZW5jb2RlZC5cbiAgICAgKiBJZiB5b3Ugc3BlY2lmeSBtdWx0aXBsZSBVUkxzLCBzZXBhcmF0ZSB0aGVtIHdpdGggdmVydGljYWwgYmFycyAofCkgYW5kIHRoZW4gZW5jb2RlXG4gICAgICogdGhlbS5cbiAgICAgKiBOb3RlIFRoaXMgcGFyYW1ldGVyIG11c3QgYmUgZW50ZXJlZCBmb3IgaW5zdGFuY2VzIHRoYXQgcnVuIFNRTCBTZXJ2ZXIgMjAwOCBSMi5cbiAgICAgKi9cbiAgICByZWFkb25seSBvc3NVcmxzPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xufVxuXG4vKipcbiAqIFRoaXMgY2xhc3MgZW5jYXBzdWxhdGVzIGFuZCBleHRlbmRzIHRoZSBST1MgcmVzb3VyY2UgdHlwZSBgQUxJWVVOOjpSRFM6Ok1pZ3JhdGVUYXNrYCwgd2hpY2ggaXMgdXNlZCB0byBjcmVhdGUgYSBtaWdyYXRpb24gdGFzayB0byByZXN0b3JlIGJhY2t1cCBmaWxlcyBmcm9tIGFuIE9iamVjdCBTdG9yYWdlIFNlcnZpY2UgKE9TUykgYnVja2V0IHRvIGFuIEFwc2FyYURCIFJEUyBmb3IgU1FMIFNlcnZlciBpbnN0YW5jZS5cbiAqIEBOb3RlIFRoaXMgY2xhc3MgbWF5IGhhdmUgc29tZSBuZXcgZnVuY3Rpb25zIHRvIGZhY2lsaXRhdGUgZGV2ZWxvcG1lbnQsIHNvIGl0IGlzIHJlY29tbWVuZGVkIHRvIHVzZSB0aGlzIGNsYXNzIGluc3RlYWQgb2YgYFJvc01pZ3JhdGVUYXNrYGZvciBhIG1vcmUgY29udmVuaWVudCBkZXZlbG9wbWVudCBleHBlcmllbmNlLlxuICogU2VlIGh0dHBzOi8vd3d3LmFsaWJhYmFjbG91ZC5jb20vaGVscC9yb3MvZGV2ZWxvcGVyLXJlZmVyZW5jZS9hbGl5dW4tcmRzLW1pZ3JhdGV0YXNrXG4gKi9cbmV4cG9ydCBjbGFzcyBNaWdyYXRlVGFzayBleHRlbmRzIHJvcy5SZXNvdXJjZSB7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgREJOYW1lOiBUaGUgbmFtZSBvZiB0aGUgZGF0YWJhc2UgdGhhdCB5b3Ugd2FudCB0byByZXN0b3JlLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyRGJOYW1lOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgTWlncmF0ZVRhc2tJZDogVGhlIElEIG9mIHRoZSBtaWdyYXRlIHRhc2suXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJNaWdyYXRlVGFza0lkOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQYXJhbSBzY29wZSAtIHNjb3BlIGluIHdoaWNoIHRoaXMgcmVzb3VyY2UgaXMgZGVmaW5lZFxuICAgICAqIFBhcmFtIGlkICAgIC0gc2NvcGVkIGlkIG9mIHRoZSByZXNvdXJjZVxuICAgICAqIFBhcmFtIHByb3BzIC0gcmVzb3VyY2UgcHJvcGVydGllc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiByb3MuQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogTWlncmF0ZVRhc2tQcm9wcywgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6Ym9vbGVhbiA9IHRydWUpIHtcbiAgICAgICAgc3VwZXIoc2NvcGUsIGlkKTtcblxuICAgICAgICBjb25zdCByb3NNaWdyYXRlVGFzayA9IG5ldyBSb3NNaWdyYXRlVGFzayh0aGlzLCBpZCwgIHtcbiAgICAgICAgICAgIGlzT25saW5lRGI6IHByb3BzLmlzT25saW5lRGIsXG4gICAgICAgICAgICBkYkluc3RhbmNlSWQ6IHByb3BzLmRiSW5zdGFuY2VJZCxcbiAgICAgICAgICAgIG9zc09iamVjdFBvc2l0aW9uczogcHJvcHMub3NzT2JqZWN0UG9zaXRpb25zLFxuICAgICAgICAgICAgY2hlY2tEYk1vZGU6IHByb3BzLmNoZWNrRGJNb2RlLFxuICAgICAgICAgICAgYmFja3VwTW9kZTogcHJvcHMuYmFja3VwTW9kZSxcbiAgICAgICAgICAgIGRiTmFtZTogcHJvcHMuZGJOYW1lLFxuICAgICAgICAgICAgb3NzVXJsczogcHJvcHMub3NzVXJscyxcbiAgICAgICAgfSwgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgJiYgdGhpcy5zdGFjay5lbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCk7XG4gICAgICAgIHRoaXMucmVzb3VyY2UgPSByb3NNaWdyYXRlVGFzaztcbiAgICAgICAgdGhpcy5hdHRyRGJOYW1lID0gcm9zTWlncmF0ZVRhc2suYXR0ckRiTmFtZTtcbiAgICAgICAgdGhpcy5hdHRyTWlncmF0ZVRhc2tJZCA9IHJvc01pZ3JhdGVUYXNrLmF0dHJNaWdyYXRlVGFza0lkO1xuICAgIH1cbn1cbiJdfQ==