"use strict";
// Generated from the AliCloud ROS Resource Specification
Object.defineProperty(exports, "__esModule", { value: true });
exports.RosWafSwitch = exports.RosLogServiceEnable = exports.RosInstance = exports.RosDomainConfig = exports.RosDomain = exports.RosAclRule = void 0;
const ros = require("@alicloud/ros-cdk-core");
/**
 * Determine whether the given properties match those of a `RosAclRuleProps`
 *
 * @param properties - the TypeScript properties of a `RosAclRuleProps`
 *
 * @returns the result of the validation.
 */
function RosAclRulePropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('instanceId', ros.requiredValidator)(properties.instanceId));
    errors.collect(ros.propertyValidator('instanceId', ros.validateString)(properties.instanceId));
    errors.collect(ros.propertyValidator('ruleId', ros.validateNumber)(properties.ruleId));
    if (properties.region && (typeof properties.region) !== 'object') {
        errors.collect(ros.propertyValidator('region', ros.validateAllowedValues)({
            data: properties.region,
            allowedValues: ["cn", "cn-hongkong"],
        }));
    }
    errors.collect(ros.propertyValidator('region', ros.validateString)(properties.region));
    errors.collect(ros.propertyValidator('domain', ros.requiredValidator)(properties.domain));
    errors.collect(ros.propertyValidator('domain', ros.validateString)(properties.domain));
    errors.collect(ros.propertyValidator('rules', ros.requiredValidator)(properties.rules));
    errors.collect(ros.propertyValidator('rules', ros.validateString)(properties.rules));
    return errors.wrap('supplied properties not correct for "RosAclRuleProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::WAF::AclRule` resource
 *
 * @param properties - the TypeScript properties of a `RosAclRuleProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::WAF::AclRule` resource.
 */
// @ts-ignore TS6133
function rosAclRulePropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosAclRulePropsValidator(properties).assertSuccess();
    }
    return {
        Domain: ros.stringToRosTemplate(properties.domain),
        InstanceId: ros.stringToRosTemplate(properties.instanceId),
        Rules: ros.stringToRosTemplate(properties.rules),
        Region: ros.stringToRosTemplate(properties.region),
        RuleId: ros.numberToRosTemplate(properties.ruleId),
    };
}
/**
 * A ROS template type:  `ALIYUN::WAF::AclRule`
 */
class RosAclRule extends ros.RosResource {
    /**
     * Create a new `ALIYUN::WAF::AclRule`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosAclRule.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.domain = props.domain;
        this.instanceId = props.instanceId;
        this.rules = props.rules;
        this.region = props.region;
        this.ruleId = props.ruleId;
    }
    get rosProperties() {
        return {
            domain: this.domain,
            instanceId: this.instanceId,
            rules: this.rules,
            region: this.region,
            ruleId: this.ruleId,
        };
    }
    renderProperties(props) {
        return rosAclRulePropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosAclRule = RosAclRule;
/**
 * The resource type name for this resource class.
 */
RosAclRule.ROS_RESOURCE_TYPE_NAME = "ALIYUN::WAF::AclRule";
/**
 * Determine whether the given properties match those of a `RosDomainProps`
 *
 * @param properties - the TypeScript properties of a `RosDomainProps`
 *
 * @returns the result of the validation.
 */
function RosDomainPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('httpToUserIp', ros.validateString)(properties.httpToUserIp));
    errors.collect(ros.propertyValidator('httpPort', ros.listValidator(ros.validateString))(properties.httpPort));
    errors.collect(ros.propertyValidator('isAccessProduct', ros.requiredValidator)(properties.isAccessProduct));
    errors.collect(ros.propertyValidator('isAccessProduct', ros.validateString)(properties.isAccessProduct));
    errors.collect(ros.propertyValidator('resourceGroupId', ros.validateString)(properties.resourceGroupId));
    errors.collect(ros.propertyValidator('domainName', ros.requiredValidator)(properties.domainName));
    errors.collect(ros.propertyValidator('domainName', ros.validateString)(properties.domainName));
    errors.collect(ros.propertyValidator('instanceId', ros.requiredValidator)(properties.instanceId));
    errors.collect(ros.propertyValidator('instanceId', ros.validateString)(properties.instanceId));
    errors.collect(ros.propertyValidator('sourceIps', ros.requiredValidator)(properties.sourceIps));
    errors.collect(ros.propertyValidator('sourceIps', ros.listValidator(ros.validateString))(properties.sourceIps));
    errors.collect(ros.propertyValidator('readTime', ros.validateNumber)(properties.readTime));
    errors.collect(ros.propertyValidator('clusterType', ros.validateString)(properties.clusterType));
    errors.collect(ros.propertyValidator('loadBalancing', ros.validateString)(properties.loadBalancing));
    errors.collect(ros.propertyValidator('logHeaders', ros.listValidator(RosDomain_LogHeadersPropertyValidator))(properties.logHeaders));
    errors.collect(ros.propertyValidator('writeTime', ros.validateNumber)(properties.writeTime));
    errors.collect(ros.propertyValidator('http2Port', ros.listValidator(ros.validateString))(properties.http2Port));
    errors.collect(ros.propertyValidator('connectionTime', ros.validateNumber)(properties.connectionTime));
    errors.collect(ros.propertyValidator('httpsRedirect', ros.validateString)(properties.httpsRedirect));
    errors.collect(ros.propertyValidator('httpsPort', ros.listValidator(ros.validateString))(properties.httpsPort));
    return errors.wrap('supplied properties not correct for "RosDomainProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::WAF::Domain` resource
 *
 * @param properties - the TypeScript properties of a `RosDomainProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::WAF::Domain` resource.
 */
// @ts-ignore TS6133
function rosDomainPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosDomainPropsValidator(properties).assertSuccess();
    }
    return {
        DomainName: ros.stringToRosTemplate(properties.domainName),
        InstanceId: ros.stringToRosTemplate(properties.instanceId),
        IsAccessProduct: ros.stringToRosTemplate(properties.isAccessProduct),
        SourceIps: ros.listMapper(ros.stringToRosTemplate)(properties.sourceIps),
        ClusterType: ros.stringToRosTemplate(properties.clusterType),
        ConnectionTime: ros.numberToRosTemplate(properties.connectionTime),
        Http2Port: ros.listMapper(ros.stringToRosTemplate)(properties.http2Port),
        HttpPort: ros.listMapper(ros.stringToRosTemplate)(properties.httpPort),
        HttpsPort: ros.listMapper(ros.stringToRosTemplate)(properties.httpsPort),
        HttpsRedirect: ros.stringToRosTemplate(properties.httpsRedirect),
        HttpToUserIp: ros.stringToRosTemplate(properties.httpToUserIp),
        LoadBalancing: ros.stringToRosTemplate(properties.loadBalancing),
        LogHeaders: ros.listMapper(rosDomainLogHeadersPropertyToRosTemplate)(properties.logHeaders),
        ReadTime: ros.numberToRosTemplate(properties.readTime),
        ResourceGroupId: ros.stringToRosTemplate(properties.resourceGroupId),
        WriteTime: ros.numberToRosTemplate(properties.writeTime),
    };
}
/**
 * A ROS template type:  `ALIYUN::WAF::Domain`
 */
class RosDomain extends ros.RosResource {
    /**
     * Create a new `ALIYUN::WAF::Domain`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosDomain.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrClusterType = this.getAtt('ClusterType');
        this.attrCname = this.getAtt('Cname');
        this.attrDomainName = this.getAtt('DomainName');
        this.attrHttp2Port = this.getAtt('Http2Port');
        this.attrHttpPort = this.getAtt('HttpPort');
        this.attrHttpToUserIp = this.getAtt('HttpToUserIp');
        this.attrHttpsPort = this.getAtt('HttpsPort');
        this.attrHttpsRedirect = this.getAtt('HttpsRedirect');
        this.attrInstanceId = this.getAtt('InstanceId');
        this.attrIsAccessProduct = this.getAtt('IsAccessProduct');
        this.attrLoadBalancing = this.getAtt('LoadBalancing');
        this.attrLogHeaders = this.getAtt('LogHeaders');
        this.attrResourceGroupId = this.getAtt('ResourceGroupId');
        this.attrSourceIps = this.getAtt('SourceIps');
        this.attrVersion = this.getAtt('Version');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.domainName = props.domainName;
        this.instanceId = props.instanceId;
        this.isAccessProduct = props.isAccessProduct;
        this.sourceIps = props.sourceIps;
        this.clusterType = props.clusterType;
        this.connectionTime = props.connectionTime;
        this.http2Port = props.http2Port;
        this.httpPort = props.httpPort;
        this.httpsPort = props.httpsPort;
        this.httpsRedirect = props.httpsRedirect;
        this.httpToUserIp = props.httpToUserIp;
        this.loadBalancing = props.loadBalancing;
        this.logHeaders = props.logHeaders;
        this.readTime = props.readTime;
        this.resourceGroupId = props.resourceGroupId;
        this.writeTime = props.writeTime;
    }
    get rosProperties() {
        return {
            domainName: this.domainName,
            instanceId: this.instanceId,
            isAccessProduct: this.isAccessProduct,
            sourceIps: this.sourceIps,
            clusterType: this.clusterType,
            connectionTime: this.connectionTime,
            http2Port: this.http2Port,
            httpPort: this.httpPort,
            httpsPort: this.httpsPort,
            httpsRedirect: this.httpsRedirect,
            httpToUserIp: this.httpToUserIp,
            loadBalancing: this.loadBalancing,
            logHeaders: this.logHeaders,
            readTime: this.readTime,
            resourceGroupId: this.resourceGroupId,
            writeTime: this.writeTime,
        };
    }
    renderProperties(props) {
        return rosDomainPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosDomain = RosDomain;
/**
 * The resource type name for this resource class.
 */
RosDomain.ROS_RESOURCE_TYPE_NAME = "ALIYUN::WAF::Domain";
/**
 * Determine whether the given properties match those of a `LogHeadersProperty`
 *
 * @param properties - the TypeScript properties of a `LogHeadersProperty`
 *
 * @returns the result of the validation.
 */
function RosDomain_LogHeadersPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('v', ros.validateString)(properties.v));
    errors.collect(ros.propertyValidator('k', ros.validateString)(properties.k));
    return errors.wrap('supplied properties not correct for "LogHeadersProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::WAF::Domain.LogHeaders` resource
 *
 * @param properties - the TypeScript properties of a `LogHeadersProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::WAF::Domain.LogHeaders` resource.
 */
// @ts-ignore TS6133
function rosDomainLogHeadersPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosDomain_LogHeadersPropertyValidator(properties).assertSuccess();
    return {
        V: ros.stringToRosTemplate(properties.v),
        K: ros.stringToRosTemplate(properties.k),
    };
}
/**
 * Determine whether the given properties match those of a `RosDomainConfigProps`
 *
 * @param properties - the TypeScript properties of a `RosDomainConfigProps`
 *
 * @returns the result of the validation.
 */
function RosDomainConfigPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    if (properties.httpToUserIp && (typeof properties.httpToUserIp) !== 'object') {
        errors.collect(ros.propertyValidator('httpToUserIp', ros.validateAllowedValues)({
            data: properties.httpToUserIp,
            allowedValues: [0, 1],
        }));
    }
    errors.collect(ros.propertyValidator('httpToUserIp', ros.validateNumber)(properties.httpToUserIp));
    errors.collect(ros.propertyValidator('httpPort', ros.validateString)(properties.httpPort));
    errors.collect(ros.propertyValidator('isAccessProduct', ros.requiredValidator)(properties.isAccessProduct));
    if (properties.isAccessProduct && (typeof properties.isAccessProduct) !== 'object') {
        errors.collect(ros.propertyValidator('isAccessProduct', ros.validateAllowedValues)({
            data: properties.isAccessProduct,
            allowedValues: [0, 1],
        }));
    }
    errors.collect(ros.propertyValidator('isAccessProduct', ros.validateNumber)(properties.isAccessProduct));
    if (properties.rsType && (typeof properties.rsType) !== 'object') {
        errors.collect(ros.propertyValidator('rsType', ros.validateAllowedValues)({
            data: properties.rsType,
            allowedValues: [0, 1],
        }));
    }
    errors.collect(ros.propertyValidator('rsType', ros.validateNumber)(properties.rsType));
    errors.collect(ros.propertyValidator('protocols', ros.requiredValidator)(properties.protocols));
    errors.collect(ros.propertyValidator('protocols', ros.validateString)(properties.protocols));
    errors.collect(ros.propertyValidator('instanceId', ros.requiredValidator)(properties.instanceId));
    errors.collect(ros.propertyValidator('instanceId', ros.validateString)(properties.instanceId));
    errors.collect(ros.propertyValidator('sourceIps', ros.validateString)(properties.sourceIps));
    if (properties.httpsRedirect && (typeof properties.httpsRedirect) !== 'object') {
        errors.collect(ros.propertyValidator('httpsRedirect', ros.validateAllowedValues)({
            data: properties.httpsRedirect,
            allowedValues: [0, 1],
        }));
    }
    errors.collect(ros.propertyValidator('httpsRedirect', ros.validateNumber)(properties.httpsRedirect));
    if (properties.region && (typeof properties.region) !== 'object') {
        errors.collect(ros.propertyValidator('region', ros.validateAllowedValues)({
            data: properties.region,
            allowedValues: ["cn", "cn-hongkong"],
        }));
    }
    errors.collect(ros.propertyValidator('region', ros.validateString)(properties.region));
    errors.collect(ros.propertyValidator('domain', ros.requiredValidator)(properties.domain));
    errors.collect(ros.propertyValidator('domain', ros.validateString)(properties.domain));
    if (properties.loadBalancing && (typeof properties.loadBalancing) !== 'object') {
        errors.collect(ros.propertyValidator('loadBalancing', ros.validateAllowedValues)({
            data: properties.loadBalancing,
            allowedValues: [0, 1],
        }));
    }
    errors.collect(ros.propertyValidator('loadBalancing', ros.validateNumber)(properties.loadBalancing));
    errors.collect(ros.propertyValidator('httpsPort', ros.validateString)(properties.httpsPort));
    return errors.wrap('supplied properties not correct for "RosDomainConfigProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::WAF::DomainConfig` resource
 *
 * @param properties - the TypeScript properties of a `RosDomainConfigProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::WAF::DomainConfig` resource.
 */
// @ts-ignore TS6133
function rosDomainConfigPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosDomainConfigPropsValidator(properties).assertSuccess();
    }
    return {
        Domain: ros.stringToRosTemplate(properties.domain),
        InstanceId: ros.stringToRosTemplate(properties.instanceId),
        IsAccessProduct: ros.numberToRosTemplate(properties.isAccessProduct),
        Protocols: ros.stringToRosTemplate(properties.protocols),
        HttpPort: ros.stringToRosTemplate(properties.httpPort),
        HttpsPort: ros.stringToRosTemplate(properties.httpsPort),
        HttpsRedirect: ros.numberToRosTemplate(properties.httpsRedirect),
        HttpToUserIp: ros.numberToRosTemplate(properties.httpToUserIp),
        LoadBalancing: ros.numberToRosTemplate(properties.loadBalancing),
        Region: ros.stringToRosTemplate(properties.region),
        RsType: ros.numberToRosTemplate(properties.rsType),
        SourceIps: ros.stringToRosTemplate(properties.sourceIps),
    };
}
/**
 * A ROS template type:  `ALIYUN::WAF::DomainConfig`
 */
class RosDomainConfig extends ros.RosResource {
    /**
     * Create a new `ALIYUN::WAF::DomainConfig`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosDomainConfig.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrCname = this.getAtt('Cname');
        this.attrProtocolType = this.getAtt('ProtocolType');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.domain = props.domain;
        this.instanceId = props.instanceId;
        this.isAccessProduct = props.isAccessProduct;
        this.protocols = props.protocols;
        this.httpPort = props.httpPort;
        this.httpsPort = props.httpsPort;
        this.httpsRedirect = props.httpsRedirect;
        this.httpToUserIp = props.httpToUserIp;
        this.loadBalancing = props.loadBalancing;
        this.region = props.region;
        this.rsType = props.rsType;
        this.sourceIps = props.sourceIps;
    }
    get rosProperties() {
        return {
            domain: this.domain,
            instanceId: this.instanceId,
            isAccessProduct: this.isAccessProduct,
            protocols: this.protocols,
            httpPort: this.httpPort,
            httpsPort: this.httpsPort,
            httpsRedirect: this.httpsRedirect,
            httpToUserIp: this.httpToUserIp,
            loadBalancing: this.loadBalancing,
            region: this.region,
            rsType: this.rsType,
            sourceIps: this.sourceIps,
        };
    }
    renderProperties(props) {
        return rosDomainConfigPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosDomainConfig = RosDomainConfig;
/**
 * The resource type name for this resource class.
 */
RosDomainConfig.ROS_RESOURCE_TYPE_NAME = "ALIYUN::WAF::DomainConfig";
/**
 * Determine whether the given properties match those of a `RosInstanceProps`
 *
 * @param properties - the TypeScript properties of a `RosInstanceProps`
 *
 * @returns the result of the validation.
 */
function RosInstancePropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('prefessionalService', ros.requiredValidator)(properties.prefessionalService));
    errors.collect(ros.propertyValidator('prefessionalService', ros.validateString)(properties.prefessionalService));
    errors.collect(ros.propertyValidator('bigScreen', ros.requiredValidator)(properties.bigScreen));
    errors.collect(ros.propertyValidator('bigScreen', ros.validateString)(properties.bigScreen));
    errors.collect(ros.propertyValidator('extDomainPackage', ros.requiredValidator)(properties.extDomainPackage));
    errors.collect(ros.propertyValidator('extDomainPackage', ros.validateString)(properties.extDomainPackage));
    errors.collect(ros.propertyValidator('logTime', ros.requiredValidator)(properties.logTime));
    errors.collect(ros.propertyValidator('logTime', ros.validateString)(properties.logTime));
    errors.collect(ros.propertyValidator('renewalStatus', ros.validateString)(properties.renewalStatus));
    errors.collect(ros.propertyValidator('renewPeriod', ros.validateString)(properties.renewPeriod));
    errors.collect(ros.propertyValidator('period', ros.validateString)(properties.period));
    errors.collect(ros.propertyValidator('exclusiveIpPackage', ros.requiredValidator)(properties.exclusiveIpPackage));
    errors.collect(ros.propertyValidator('exclusiveIpPackage', ros.validateString)(properties.exclusiveIpPackage));
    errors.collect(ros.propertyValidator('logStorage', ros.requiredValidator)(properties.logStorage));
    errors.collect(ros.propertyValidator('logStorage', ros.validateString)(properties.logStorage));
    errors.collect(ros.propertyValidator('subscriptionType', ros.requiredValidator)(properties.subscriptionType));
    errors.collect(ros.propertyValidator('subscriptionType', ros.validateString)(properties.subscriptionType));
    errors.collect(ros.propertyValidator('extBandwidth', ros.requiredValidator)(properties.extBandwidth));
    errors.collect(ros.propertyValidator('extBandwidth', ros.validateString)(properties.extBandwidth));
    errors.collect(ros.propertyValidator('wafLog', ros.requiredValidator)(properties.wafLog));
    errors.collect(ros.propertyValidator('wafLog', ros.validateString)(properties.wafLog));
    errors.collect(ros.propertyValidator('packageCode', ros.requiredValidator)(properties.packageCode));
    errors.collect(ros.propertyValidator('packageCode', ros.validateString)(properties.packageCode));
    return errors.wrap('supplied properties not correct for "RosInstanceProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::WAF::Instance` resource
 *
 * @param properties - the TypeScript properties of a `RosInstanceProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::WAF::Instance` resource.
 */
// @ts-ignore TS6133
function rosInstancePropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosInstancePropsValidator(properties).assertSuccess();
    }
    return {
        BigScreen: ros.stringToRosTemplate(properties.bigScreen),
        ExclusiveIpPackage: ros.stringToRosTemplate(properties.exclusiveIpPackage),
        ExtBandwidth: ros.stringToRosTemplate(properties.extBandwidth),
        ExtDomainPackage: ros.stringToRosTemplate(properties.extDomainPackage),
        LogStorage: ros.stringToRosTemplate(properties.logStorage),
        LogTime: ros.stringToRosTemplate(properties.logTime),
        PackageCode: ros.stringToRosTemplate(properties.packageCode),
        PrefessionalService: ros.stringToRosTemplate(properties.prefessionalService),
        SubscriptionType: ros.stringToRosTemplate(properties.subscriptionType),
        WafLog: ros.stringToRosTemplate(properties.wafLog),
        Period: ros.stringToRosTemplate(properties.period),
        RenewalStatus: ros.stringToRosTemplate(properties.renewalStatus),
        RenewPeriod: ros.stringToRosTemplate(properties.renewPeriod),
    };
}
/**
 * A ROS template type:  `ALIYUN::WAF::Instance`
 */
class RosInstance extends ros.RosResource {
    /**
     * Create a new `ALIYUN::WAF::Instance`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosInstance.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrEndDate = this.getAtt('EndDate');
        this.attrInDebt = this.getAtt('InDebt');
        this.attrInstanceId = this.getAtt('InstanceId');
        this.attrRemainDay = this.getAtt('RemainDay');
        this.attrSubscriptionType = this.getAtt('SubscriptionType');
        this.attrTrial = this.getAtt('Trial');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.bigScreen = props.bigScreen;
        this.exclusiveIpPackage = props.exclusiveIpPackage;
        this.extBandwidth = props.extBandwidth;
        this.extDomainPackage = props.extDomainPackage;
        this.logStorage = props.logStorage;
        this.logTime = props.logTime;
        this.packageCode = props.packageCode;
        this.prefessionalService = props.prefessionalService;
        this.subscriptionType = props.subscriptionType;
        this.wafLog = props.wafLog;
        this.period = props.period;
        this.renewalStatus = props.renewalStatus;
        this.renewPeriod = props.renewPeriod;
    }
    get rosProperties() {
        return {
            bigScreen: this.bigScreen,
            exclusiveIpPackage: this.exclusiveIpPackage,
            extBandwidth: this.extBandwidth,
            extDomainPackage: this.extDomainPackage,
            logStorage: this.logStorage,
            logTime: this.logTime,
            packageCode: this.packageCode,
            prefessionalService: this.prefessionalService,
            subscriptionType: this.subscriptionType,
            wafLog: this.wafLog,
            period: this.period,
            renewalStatus: this.renewalStatus,
            renewPeriod: this.renewPeriod,
        };
    }
    renderProperties(props) {
        return rosInstancePropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosInstance = RosInstance;
/**
 * The resource type name for this resource class.
 */
RosInstance.ROS_RESOURCE_TYPE_NAME = "ALIYUN::WAF::Instance";
/**
 * Determine whether the given properties match those of a `RosLogServiceEnableProps`
 *
 * @param properties - the TypeScript properties of a `RosLogServiceEnableProps`
 *
 * @returns the result of the validation.
 */
function RosLogServiceEnablePropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('instanceId', ros.requiredValidator)(properties.instanceId));
    errors.collect(ros.propertyValidator('instanceId', ros.validateString)(properties.instanceId));
    errors.collect(ros.propertyValidator('domain', ros.requiredValidator)(properties.domain));
    errors.collect(ros.propertyValidator('domain', ros.validateString)(properties.domain));
    return errors.wrap('supplied properties not correct for "RosLogServiceEnableProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::WAF::LogServiceEnable` resource
 *
 * @param properties - the TypeScript properties of a `RosLogServiceEnableProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::WAF::LogServiceEnable` resource.
 */
// @ts-ignore TS6133
function rosLogServiceEnablePropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosLogServiceEnablePropsValidator(properties).assertSuccess();
    }
    return {
        Domain: ros.stringToRosTemplate(properties.domain),
        InstanceId: ros.stringToRosTemplate(properties.instanceId),
    };
}
/**
 * A ROS template type:  `ALIYUN::WAF::LogServiceEnable`
 */
class RosLogServiceEnable extends ros.RosResource {
    /**
     * Create a new `ALIYUN::WAF::LogServiceEnable`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosLogServiceEnable.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrDomain = this.getAtt('Domain');
        this.attrInstanceId = this.getAtt('InstanceId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.domain = props.domain;
        this.instanceId = props.instanceId;
    }
    get rosProperties() {
        return {
            domain: this.domain,
            instanceId: this.instanceId,
        };
    }
    renderProperties(props) {
        return rosLogServiceEnablePropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosLogServiceEnable = RosLogServiceEnable;
/**
 * The resource type name for this resource class.
 */
RosLogServiceEnable.ROS_RESOURCE_TYPE_NAME = "ALIYUN::WAF::LogServiceEnable";
/**
 * Determine whether the given properties match those of a `RosWafSwitchProps`
 *
 * @param properties - the TypeScript properties of a `RosWafSwitchProps`
 *
 * @returns the result of the validation.
 */
function RosWafSwitchPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('instanceId', ros.requiredValidator)(properties.instanceId));
    errors.collect(ros.propertyValidator('instanceId', ros.validateString)(properties.instanceId));
    if (properties.region && (typeof properties.region) !== 'object') {
        errors.collect(ros.propertyValidator('region', ros.validateAllowedValues)({
            data: properties.region,
            allowedValues: ["cn", "cn-hongkong"],
        }));
    }
    errors.collect(ros.propertyValidator('region', ros.validateString)(properties.region));
    errors.collect(ros.propertyValidator('serviceOn', ros.requiredValidator)(properties.serviceOn));
    if (properties.serviceOn && (typeof properties.serviceOn) !== 'object') {
        errors.collect(ros.propertyValidator('serviceOn', ros.validateAllowedValues)({
            data: properties.serviceOn,
            allowedValues: [0, 1],
        }));
    }
    errors.collect(ros.propertyValidator('serviceOn', ros.validateNumber)(properties.serviceOn));
    errors.collect(ros.propertyValidator('domain', ros.requiredValidator)(properties.domain));
    errors.collect(ros.propertyValidator('domain', ros.validateString)(properties.domain));
    return errors.wrap('supplied properties not correct for "RosWafSwitchProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::WAF::WafSwitch` resource
 *
 * @param properties - the TypeScript properties of a `RosWafSwitchProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::WAF::WafSwitch` resource.
 */
// @ts-ignore TS6133
function rosWafSwitchPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosWafSwitchPropsValidator(properties).assertSuccess();
    }
    return {
        Domain: ros.stringToRosTemplate(properties.domain),
        InstanceId: ros.stringToRosTemplate(properties.instanceId),
        ServiceOn: ros.numberToRosTemplate(properties.serviceOn),
        Region: ros.stringToRosTemplate(properties.region),
    };
}
/**
 * A ROS template type:  `ALIYUN::WAF::WafSwitch`
 */
class RosWafSwitch extends ros.RosResource {
    /**
     * Create a new `ALIYUN::WAF::WafSwitch`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosWafSwitch.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.domain = props.domain;
        this.instanceId = props.instanceId;
        this.serviceOn = props.serviceOn;
        this.region = props.region;
    }
    get rosProperties() {
        return {
            domain: this.domain,
            instanceId: this.instanceId,
            serviceOn: this.serviceOn,
            region: this.region,
        };
    }
    renderProperties(props) {
        return rosWafSwitchPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosWafSwitch = RosWafSwitch;
/**
 * The resource type name for this resource class.
 */
RosWafSwitch.ROS_RESOURCE_TYPE_NAME = "ALIYUN::WAF::WafSwitch";
//# sourceMappingURL=data:application/json;base64,