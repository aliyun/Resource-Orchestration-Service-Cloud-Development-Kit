"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AggregateCompliancePack = exports.AggregateCompliancePackProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const config_generated_1 = require("./config.generated");
Object.defineProperty(exports, "AggregateCompliancePackProperty", { enumerable: true, get: function () { return config_generated_1.RosAggregateCompliancePack; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::Config::AggregateCompliancePack`, which is used to create a compliance package for an account group.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosAggregateCompliancePack`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-config-aggregatecompliancepack
 */
class AggregateCompliancePack extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosAggregateCompliancePack = new config_generated_1.RosAggregateCompliancePack(this, id, {
            tagKeyScope: props.tagKeyScope,
            tagValueScope: props.tagValueScope,
            excludeResourceGroupIdsScope: props.excludeResourceGroupIdsScope,
            description: props.description,
            excludeResourceIdsScope: props.excludeResourceIdsScope,
            resourceIdsScope: props.resourceIdsScope,
            templateContent: props.templateContent,
            configRules: props.configRules,
            defaultEnable: props.defaultEnable,
            compliancePackName: props.compliancePackName,
            excludeRegionIdsScope: props.excludeRegionIdsScope,
            regionIdsScope: props.regionIdsScope,
            resourceGroupIdsScope: props.resourceGroupIdsScope,
            compliancePackTemplateId: props.compliancePackTemplateId,
            riskLevel: props.riskLevel,
            aggregatorId: props.aggregatorId,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosAggregateCompliancePack;
        this.attrCompliancePackId = rosAggregateCompliancePack.attrCompliancePackId;
    }
}
exports.AggregateCompliancePack = AggregateCompliancePack;
//# sourceMappingURL=data:application/json;base64,