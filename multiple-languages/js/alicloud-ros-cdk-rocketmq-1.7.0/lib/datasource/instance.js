"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Instance = exports.InstanceProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const rocketmq_generated_1 = require("./rocketmq.generated");
Object.defineProperty(exports, "InstanceProperty", { enumerable: true, get: function () { return rocketmq_generated_1.RosInstance; } });
/**
 * This class encapsulates and extends the ROS resource type `DATASOURCE::ROCKETMQ::Instance`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosInstance`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/datasource-rocketmq-instance
 */
class Instance extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosInstance = new rocketmq_generated_1.RosInstance(this, id, {
            instanceId: props.instanceId,
            refreshOptions: props.refreshOptions === undefined || props.refreshOptions === null ? 'Never' : props.refreshOptions,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosInstance;
        this.attrAccountInfo = rosInstance.attrAccountInfo;
        this.attrAclInfo = rosInstance.attrAclInfo;
        this.attrCommodityCode = rosInstance.attrCommodityCode;
        this.attrCreateTime = rosInstance.attrCreateTime;
        this.attrExpireTime = rosInstance.attrExpireTime;
        this.attrGroupCount = rosInstance.attrGroupCount;
        this.attrInstanceId = rosInstance.attrInstanceId;
        this.attrInstanceName = rosInstance.attrInstanceName;
        this.attrInstanceQuotas = rosInstance.attrInstanceQuotas;
        this.attrNetworkInfo = rosInstance.attrNetworkInfo;
        this.attrPaymentType = rosInstance.attrPaymentType;
        this.attrProductInfo = rosInstance.attrProductInfo;
        this.attrReleaseTime = rosInstance.attrReleaseTime;
        this.attrRemark = rosInstance.attrRemark;
        this.attrResourceGroupId = rosInstance.attrResourceGroupId;
        this.attrSeriesCode = rosInstance.attrSeriesCode;
        this.attrServiceCode = rosInstance.attrServiceCode;
        this.attrSoftware = rosInstance.attrSoftware;
        this.attrStartTime = rosInstance.attrStartTime;
        this.attrSubSeriesCode = rosInstance.attrSubSeriesCode;
        this.attrTags = rosInstance.attrTags;
        this.attrTopicCount = rosInstance.attrTopicCount;
        this.attrUpdateTime = rosInstance.attrUpdateTime;
        this.attrUserId = rosInstance.attrUserId;
    }
}
exports.Instance = Instance;
//# sourceMappingURL=data:application/json;base64,