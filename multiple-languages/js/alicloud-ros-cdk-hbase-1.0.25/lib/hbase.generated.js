"use strict";
// Generated from the AliCloud ROS Resource Specification
Object.defineProperty(exports, "__esModule", { value: true });
exports.RosMultiZoneCluster = exports.RosCluster = void 0;
const ros = require("@alicloud/ros-cdk-core");
/**
 * Determine whether the given properties match those of a `RosClusterProps`
 *
 * @param properties - the TypeScript properties of a `RosClusterProps`
 *
 * @returns the result of the validation.
 */
function RosClusterPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('autoRenewPeriod', ros.validateNumber)(properties.autoRenewPeriod));
    errors.collect(ros.propertyValidator('coldStorageSize', ros.validateNumber)(properties.coldStorageSize));
    errors.collect(ros.propertyValidator('engineVersion', ros.requiredValidator)(properties.engineVersion));
    if (properties.engineVersion && (typeof properties.engineVersion) !== 'object') {
        errors.collect(ros.propertyValidator('engineVersion', ros.validateAllowedValues)({
            data: properties.engineVersion,
            allowedValues: ["1.0", "1.1", "2.0"],
        }));
    }
    errors.collect(ros.propertyValidator('engineVersion', ros.validateString)(properties.engineVersion));
    errors.collect(ros.propertyValidator('resourceGroupId', ros.validateString)(properties.resourceGroupId));
    errors.collect(ros.propertyValidator('nodeCount', ros.requiredValidator)(properties.nodeCount));
    errors.collect(ros.propertyValidator('nodeCount', ros.validateNumber)(properties.nodeCount));
    errors.collect(ros.propertyValidator('zoneId', ros.requiredValidator)(properties.zoneId));
    errors.collect(ros.propertyValidator('zoneId', ros.validateString)(properties.zoneId));
    errors.collect(ros.propertyValidator('vSwitchId', ros.validateString)(properties.vSwitchId));
    errors.collect(ros.propertyValidator('period', ros.validateNumber)(properties.period));
    errors.collect(ros.propertyValidator('encryptionKey', ros.validateString)(properties.encryptionKey));
    errors.collect(ros.propertyValidator('payType', ros.requiredValidator)(properties.payType));
    if (properties.payType && (typeof properties.payType) !== 'object') {
        errors.collect(ros.propertyValidator('payType', ros.validateAllowedValues)({
            data: properties.payType,
            allowedValues: ["PayAsYouGo", "PostPaid", "PayOnDemand", "Postpaid", "PostPay", "Postpay", "POSTPAY", "POST", "Subscription", "PrePaid", "Prepaid", "PrePay", "Prepay", "PREPAY", "PRE"],
        }));
    }
    errors.collect(ros.propertyValidator('payType', ros.validateString)(properties.payType));
    errors.collect(ros.propertyValidator('masterInstanceType', ros.validateString)(properties.masterInstanceType));
    if (properties.diskType && (typeof properties.diskType) !== 'object') {
        errors.collect(ros.propertyValidator('diskType', ros.validateAllowedValues)({
            data: properties.diskType,
            allowedValues: ["cloud_efficiency", "cloud_essd_pl1", "cloud_ssd", "local_hdd_pro", "local_ssd_pro"],
        }));
    }
    errors.collect(ros.propertyValidator('diskType', ros.validateString)(properties.diskType));
    errors.collect(ros.propertyValidator('vpcId', ros.validateString)(properties.vpcId));
    errors.collect(ros.propertyValidator('securityIpList', ros.validateString)(properties.securityIpList));
    errors.collect(ros.propertyValidator('coreInstanceType', ros.requiredValidator)(properties.coreInstanceType));
    errors.collect(ros.propertyValidator('coreInstanceType', ros.validateString)(properties.coreInstanceType));
    errors.collect(ros.propertyValidator('diskSize', ros.validateNumber)(properties.diskSize));
    if (properties.clusterName && (typeof properties.clusterName) !== 'object') {
        errors.collect(ros.propertyValidator('clusterName', ros.validateAllowedPattern)({
            data: properties.clusterName,
            reg: /^[a-zA-Z0-9_-]{2,30}$/
        }));
    }
    errors.collect(ros.propertyValidator('clusterName', ros.validateString)(properties.clusterName));
    errors.collect(ros.propertyValidator('engine', ros.requiredValidator)(properties.engine));
    if (properties.engine && (typeof properties.engine) !== 'object') {
        errors.collect(ros.propertyValidator('engine', ros.validateAllowedValues)({
            data: properties.engine,
            allowedValues: ["hbase", "hbaseue", "bds"],
        }));
    }
    errors.collect(ros.propertyValidator('engine', ros.validateString)(properties.engine));
    if (properties.periodUnit && (typeof properties.periodUnit) !== 'object') {
        errors.collect(ros.propertyValidator('periodUnit', ros.validateAllowedValues)({
            data: properties.periodUnit,
            allowedValues: ["Month", "Year", "month", "year"],
        }));
    }
    errors.collect(ros.propertyValidator('periodUnit', ros.validateString)(properties.periodUnit));
    return errors.wrap('supplied properties not correct for "RosClusterProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::HBase::Cluster` resource
 *
 * @param properties - the TypeScript properties of a `RosClusterProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::HBase::Cluster` resource.
 */
// @ts-ignore TS6133
function rosClusterPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosClusterPropsValidator(properties).assertSuccess();
    }
    return {
        CoreInstanceType: ros.stringToRosTemplate(properties.coreInstanceType),
        Engine: ros.stringToRosTemplate(properties.engine),
        EngineVersion: ros.stringToRosTemplate(properties.engineVersion),
        NodeCount: ros.numberToRosTemplate(properties.nodeCount),
        PayType: ros.stringToRosTemplate(properties.payType),
        ZoneId: ros.stringToRosTemplate(properties.zoneId),
        AutoRenewPeriod: ros.numberToRosTemplate(properties.autoRenewPeriod),
        ClusterName: ros.stringToRosTemplate(properties.clusterName),
        ColdStorageSize: ros.numberToRosTemplate(properties.coldStorageSize),
        DiskSize: ros.numberToRosTemplate(properties.diskSize),
        DiskType: ros.stringToRosTemplate(properties.diskType),
        EncryptionKey: ros.stringToRosTemplate(properties.encryptionKey),
        MasterInstanceType: ros.stringToRosTemplate(properties.masterInstanceType),
        Period: ros.numberToRosTemplate(properties.period),
        PeriodUnit: ros.stringToRosTemplate(properties.periodUnit),
        ResourceGroupId: ros.stringToRosTemplate(properties.resourceGroupId),
        SecurityIPList: ros.stringToRosTemplate(properties.securityIpList),
        VpcId: ros.stringToRosTemplate(properties.vpcId),
        VSwitchId: ros.stringToRosTemplate(properties.vSwitchId),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::HBase::Cluster`, which is used to create an ApsaraDB for HBase cluster.
 * @Note This class does not contain additional functions, so it is recommended to use the `Cluster` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-hbase-cluster
 */
class RosCluster extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosCluster.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrClusterId = this.getAtt('ClusterId');
        this.attrServiceConnAddrs = this.getAtt('ServiceConnAddrs');
        this.attrSlbConnAddrs = this.getAtt('SlbConnAddrs');
        this.attrThriftConn = this.getAtt('ThriftConn');
        this.attrUiProxyConnAddrInfo = this.getAtt('UiProxyConnAddrInfo');
        this.attrZkConnAddrs = this.getAtt('ZkConnAddrs');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.coreInstanceType = props.coreInstanceType;
        this.engine = props.engine;
        this.engineVersion = props.engineVersion;
        this.nodeCount = props.nodeCount;
        this.payType = props.payType;
        this.zoneId = props.zoneId;
        this.autoRenewPeriod = props.autoRenewPeriod;
        this.clusterName = props.clusterName;
        this.coldStorageSize = props.coldStorageSize;
        this.diskSize = props.diskSize;
        this.diskType = props.diskType;
        this.encryptionKey = props.encryptionKey;
        this.masterInstanceType = props.masterInstanceType;
        this.period = props.period;
        this.periodUnit = props.periodUnit;
        this.resourceGroupId = props.resourceGroupId;
        this.securityIpList = props.securityIpList;
        this.vpcId = props.vpcId;
        this.vSwitchId = props.vSwitchId;
    }
    get rosProperties() {
        return {
            coreInstanceType: this.coreInstanceType,
            engine: this.engine,
            engineVersion: this.engineVersion,
            nodeCount: this.nodeCount,
            payType: this.payType,
            zoneId: this.zoneId,
            autoRenewPeriod: this.autoRenewPeriod,
            clusterName: this.clusterName,
            coldStorageSize: this.coldStorageSize,
            diskSize: this.diskSize,
            diskType: this.diskType,
            encryptionKey: this.encryptionKey,
            masterInstanceType: this.masterInstanceType,
            period: this.period,
            periodUnit: this.periodUnit,
            resourceGroupId: this.resourceGroupId,
            securityIpList: this.securityIpList,
            vpcId: this.vpcId,
            vSwitchId: this.vSwitchId,
        };
    }
    renderProperties(props) {
        return rosClusterPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosCluster = RosCluster;
/**
 * The resource type name for this resource class.
 */
RosCluster.ROS_RESOURCE_TYPE_NAME = "ALIYUN::HBase::Cluster";
/**
 * Determine whether the given properties match those of a `RosMultiZoneClusterProps`
 *
 * @param properties - the TypeScript properties of a `RosMultiZoneClusterProps`
 *
 * @returns the result of the validation.
 */
function RosMultiZoneClusterPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('standbyZoneId', ros.requiredValidator)(properties.standbyZoneId));
    errors.collect(ros.propertyValidator('standbyZoneId', ros.validateString)(properties.standbyZoneId));
    errors.collect(ros.propertyValidator('resourceGroupId', ros.validateString)(properties.resourceGroupId));
    errors.collect(ros.propertyValidator('masterInstanceType', ros.validateString)(properties.masterInstanceType));
    errors.collect(ros.propertyValidator('logDiskSize', ros.requiredValidator)(properties.logDiskSize));
    errors.collect(ros.propertyValidator('logDiskSize', ros.validateNumber)(properties.logDiskSize));
    errors.collect(ros.propertyValidator('standbyVSwitchId', ros.requiredValidator)(properties.standbyVSwitchId));
    errors.collect(ros.propertyValidator('standbyVSwitchId', ros.validateString)(properties.standbyVSwitchId));
    errors.collect(ros.propertyValidator('securityIpList', ros.validateString)(properties.securityIpList));
    errors.collect(ros.propertyValidator('coreInstanceType', ros.requiredValidator)(properties.coreInstanceType));
    errors.collect(ros.propertyValidator('coreInstanceType', ros.validateString)(properties.coreInstanceType));
    if (properties.clusterName && (typeof properties.clusterName) !== 'object') {
        errors.collect(ros.propertyValidator('clusterName', ros.validateAllowedPattern)({
            data: properties.clusterName,
            reg: /^[a-zA-Z0-9_-]{2,30}$/
        }));
    }
    errors.collect(ros.propertyValidator('clusterName', ros.validateString)(properties.clusterName));
    errors.collect(ros.propertyValidator('engine', ros.requiredValidator)(properties.engine));
    if (properties.engine && (typeof properties.engine) !== 'object') {
        errors.collect(ros.propertyValidator('engine', ros.validateAllowedValues)({
            data: properties.engine,
            allowedValues: ["hbaseue"],
        }));
    }
    errors.collect(ros.propertyValidator('engine', ros.validateString)(properties.engine));
    errors.collect(ros.propertyValidator('arbiterZoneId', ros.requiredValidator)(properties.arbiterZoneId));
    errors.collect(ros.propertyValidator('arbiterZoneId', ros.validateString)(properties.arbiterZoneId));
    errors.collect(ros.propertyValidator('autoRenewPeriod', ros.validateNumber)(properties.autoRenewPeriod));
    errors.collect(ros.propertyValidator('primaryZoneId', ros.requiredValidator)(properties.primaryZoneId));
    errors.collect(ros.propertyValidator('primaryZoneId', ros.validateString)(properties.primaryZoneId));
    errors.collect(ros.propertyValidator('engineVersion', ros.requiredValidator)(properties.engineVersion));
    if (properties.engineVersion && (typeof properties.engineVersion) !== 'object') {
        errors.collect(ros.propertyValidator('engineVersion', ros.validateAllowedValues)({
            data: properties.engineVersion,
            allowedValues: ["2.0"],
        }));
    }
    errors.collect(ros.propertyValidator('engineVersion', ros.validateString)(properties.engineVersion));
    errors.collect(ros.propertyValidator('multiZoneCombination', ros.requiredValidator)(properties.multiZoneCombination));
    errors.collect(ros.propertyValidator('multiZoneCombination', ros.validateString)(properties.multiZoneCombination));
    errors.collect(ros.propertyValidator('coreNodeCount', ros.requiredValidator)(properties.coreNodeCount));
    errors.collect(ros.propertyValidator('coreNodeCount', ros.validateNumber)(properties.coreNodeCount));
    errors.collect(ros.propertyValidator('archVersion', ros.requiredValidator)(properties.archVersion));
    if (properties.archVersion && (typeof properties.archVersion) !== 'object') {
        errors.collect(ros.propertyValidator('archVersion', ros.validateAllowedValues)({
            data: properties.archVersion,
            allowedValues: ["2.0"],
        }));
    }
    errors.collect(ros.propertyValidator('archVersion', ros.validateString)(properties.archVersion));
    errors.collect(ros.propertyValidator('period', ros.validateNumber)(properties.period));
    errors.collect(ros.propertyValidator('logInstanceType', ros.requiredValidator)(properties.logInstanceType));
    errors.collect(ros.propertyValidator('logInstanceType', ros.validateString)(properties.logInstanceType));
    errors.collect(ros.propertyValidator('payType', ros.requiredValidator)(properties.payType));
    if (properties.payType && (typeof properties.payType) !== 'object') {
        errors.collect(ros.propertyValidator('payType', ros.validateAllowedValues)({
            data: properties.payType,
            allowedValues: ["PayAsYouGo", "PostPaid", "PayOnDemand", "Postpaid", "PostPay", "Postpay", "POSTPAY", "POST", "Subscription", "PrePaid", "Prepaid", "PrePay", "Prepay", "PREPAY", "PRE"],
        }));
    }
    errors.collect(ros.propertyValidator('payType', ros.validateString)(properties.payType));
    errors.collect(ros.propertyValidator('primaryVSwitchId', ros.requiredValidator)(properties.primaryVSwitchId));
    errors.collect(ros.propertyValidator('primaryVSwitchId', ros.validateString)(properties.primaryVSwitchId));
    errors.collect(ros.propertyValidator('arbiterVSwitchId', ros.requiredValidator)(properties.arbiterVSwitchId));
    errors.collect(ros.propertyValidator('arbiterVSwitchId', ros.validateString)(properties.arbiterVSwitchId));
    errors.collect(ros.propertyValidator('vpcId', ros.validateString)(properties.vpcId));
    errors.collect(ros.propertyValidator('coreDiskType', ros.requiredValidator)(properties.coreDiskType));
    errors.collect(ros.propertyValidator('coreDiskType', ros.validateString)(properties.coreDiskType));
    errors.collect(ros.propertyValidator('logNodeCount', ros.requiredValidator)(properties.logNodeCount));
    errors.collect(ros.propertyValidator('logNodeCount', ros.validateNumber)(properties.logNodeCount));
    errors.collect(ros.propertyValidator('logDiskType', ros.requiredValidator)(properties.logDiskType));
    errors.collect(ros.propertyValidator('logDiskType', ros.validateString)(properties.logDiskType));
    errors.collect(ros.propertyValidator('coreDiskSize', ros.requiredValidator)(properties.coreDiskSize));
    errors.collect(ros.propertyValidator('coreDiskSize', ros.validateNumber)(properties.coreDiskSize));
    if (properties.periodUnit && (typeof properties.periodUnit) !== 'object') {
        errors.collect(ros.propertyValidator('periodUnit', ros.validateAllowedValues)({
            data: properties.periodUnit,
            allowedValues: ["Month", "Year", "month", "year"],
        }));
    }
    errors.collect(ros.propertyValidator('periodUnit', ros.validateString)(properties.periodUnit));
    return errors.wrap('supplied properties not correct for "RosMultiZoneClusterProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::HBase::MultiZoneCluster` resource
 *
 * @param properties - the TypeScript properties of a `RosMultiZoneClusterProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::HBase::MultiZoneCluster` resource.
 */
// @ts-ignore TS6133
function rosMultiZoneClusterPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosMultiZoneClusterPropsValidator(properties).assertSuccess();
    }
    return {
        ArbiterVSwitchId: ros.stringToRosTemplate(properties.arbiterVSwitchId),
        ArbiterZoneId: ros.stringToRosTemplate(properties.arbiterZoneId),
        ArchVersion: ros.stringToRosTemplate(properties.archVersion),
        CoreDiskSize: ros.numberToRosTemplate(properties.coreDiskSize),
        CoreDiskType: ros.stringToRosTemplate(properties.coreDiskType),
        CoreInstanceType: ros.stringToRosTemplate(properties.coreInstanceType),
        CoreNodeCount: ros.numberToRosTemplate(properties.coreNodeCount),
        Engine: ros.stringToRosTemplate(properties.engine),
        EngineVersion: ros.stringToRosTemplate(properties.engineVersion),
        LogDiskSize: ros.numberToRosTemplate(properties.logDiskSize),
        LogDiskType: ros.stringToRosTemplate(properties.logDiskType),
        LogInstanceType: ros.stringToRosTemplate(properties.logInstanceType),
        LogNodeCount: ros.numberToRosTemplate(properties.logNodeCount),
        MultiZoneCombination: ros.stringToRosTemplate(properties.multiZoneCombination),
        PayType: ros.stringToRosTemplate(properties.payType),
        PrimaryVSwitchId: ros.stringToRosTemplate(properties.primaryVSwitchId),
        PrimaryZoneId: ros.stringToRosTemplate(properties.primaryZoneId),
        StandbyVSwitchId: ros.stringToRosTemplate(properties.standbyVSwitchId),
        StandbyZoneId: ros.stringToRosTemplate(properties.standbyZoneId),
        AutoRenewPeriod: ros.numberToRosTemplate(properties.autoRenewPeriod),
        ClusterName: ros.stringToRosTemplate(properties.clusterName),
        MasterInstanceType: ros.stringToRosTemplate(properties.masterInstanceType),
        Period: ros.numberToRosTemplate(properties.period),
        PeriodUnit: ros.stringToRosTemplate(properties.periodUnit),
        ResourceGroupId: ros.stringToRosTemplate(properties.resourceGroupId),
        SecurityIPList: ros.stringToRosTemplate(properties.securityIpList),
        VpcId: ros.stringToRosTemplate(properties.vpcId),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::HBase::MultiZoneCluster`, which is used to create an ApsaraDB for HBase cluster that resides in multiple zones.
 * @Note This class does not contain additional functions, so it is recommended to use the `MultiZoneCluster` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-hbase-multizonecluster
 */
class RosMultiZoneCluster extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosMultiZoneCluster.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrClusterId = this.getAtt('ClusterId');
        this.attrServiceConnAddrs = this.getAtt('ServiceConnAddrs');
        this.attrSlbConnAddrs = this.getAtt('SlbConnAddrs');
        this.attrThriftConn = this.getAtt('ThriftConn');
        this.attrUiProxyConnAddrInfo = this.getAtt('UiProxyConnAddrInfo');
        this.attrZkConnAddrs = this.getAtt('ZkConnAddrs');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.arbiterVSwitchId = props.arbiterVSwitchId;
        this.arbiterZoneId = props.arbiterZoneId;
        this.archVersion = props.archVersion;
        this.coreDiskSize = props.coreDiskSize;
        this.coreDiskType = props.coreDiskType;
        this.coreInstanceType = props.coreInstanceType;
        this.coreNodeCount = props.coreNodeCount;
        this.engine = props.engine;
        this.engineVersion = props.engineVersion;
        this.logDiskSize = props.logDiskSize;
        this.logDiskType = props.logDiskType;
        this.logInstanceType = props.logInstanceType;
        this.logNodeCount = props.logNodeCount;
        this.multiZoneCombination = props.multiZoneCombination;
        this.payType = props.payType;
        this.primaryVSwitchId = props.primaryVSwitchId;
        this.primaryZoneId = props.primaryZoneId;
        this.standbyVSwitchId = props.standbyVSwitchId;
        this.standbyZoneId = props.standbyZoneId;
        this.autoRenewPeriod = props.autoRenewPeriod;
        this.clusterName = props.clusterName;
        this.masterInstanceType = props.masterInstanceType;
        this.period = props.period;
        this.periodUnit = props.periodUnit;
        this.resourceGroupId = props.resourceGroupId;
        this.securityIpList = props.securityIpList;
        this.vpcId = props.vpcId;
    }
    get rosProperties() {
        return {
            arbiterVSwitchId: this.arbiterVSwitchId,
            arbiterZoneId: this.arbiterZoneId,
            archVersion: this.archVersion,
            coreDiskSize: this.coreDiskSize,
            coreDiskType: this.coreDiskType,
            coreInstanceType: this.coreInstanceType,
            coreNodeCount: this.coreNodeCount,
            engine: this.engine,
            engineVersion: this.engineVersion,
            logDiskSize: this.logDiskSize,
            logDiskType: this.logDiskType,
            logInstanceType: this.logInstanceType,
            logNodeCount: this.logNodeCount,
            multiZoneCombination: this.multiZoneCombination,
            payType: this.payType,
            primaryVSwitchId: this.primaryVSwitchId,
            primaryZoneId: this.primaryZoneId,
            standbyVSwitchId: this.standbyVSwitchId,
            standbyZoneId: this.standbyZoneId,
            autoRenewPeriod: this.autoRenewPeriod,
            clusterName: this.clusterName,
            masterInstanceType: this.masterInstanceType,
            period: this.period,
            periodUnit: this.periodUnit,
            resourceGroupId: this.resourceGroupId,
            securityIpList: this.securityIpList,
            vpcId: this.vpcId,
        };
    }
    renderProperties(props) {
        return rosMultiZoneClusterPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosMultiZoneCluster = RosMultiZoneCluster;
/**
 * The resource type name for this resource class.
 */
RosMultiZoneCluster.ROS_RESOURCE_TYPE_NAME = "ALIYUN::HBase::MultiZoneCluster";
//# sourceMappingURL=data:application/json;base64,