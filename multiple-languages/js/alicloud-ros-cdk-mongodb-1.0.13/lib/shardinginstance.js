"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ShardingInstance = exports.ShardingInstanceProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const mongodb_generated_1 = require("./mongodb.generated");
Object.defineProperty(exports, "ShardingInstanceProperty", { enumerable: true, get: function () { return mongodb_generated_1.RosShardingInstance; } });
/**
 * A ROS resource type:  `ALIYUN::MONGODB::ShardingInstance`
 */
class ShardingInstance extends ros.Resource {
    /**
     * Create a new `ALIYUN::MONGODB::ShardingInstance`.
     *
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosShardingInstance = new mongodb_generated_1.RosShardingInstance(this, id, {
            tdeStatus: props.tdeStatus,
            engineVersion: props.engineVersion === undefined || props.engineVersion === null ? '3.4' : props.engineVersion,
            storageType: props.storageType,
            resourceGroupId: props.resourceGroupId,
            zoneId: props.zoneId,
            hiddenZoneId: props.hiddenZoneId,
            autoRenew: props.autoRenew,
            vSwitchId: props.vSwitchId,
            period: props.period === undefined || props.period === null ? 1 : props.period,
            securityIpArray: props.securityIpArray,
            mongos: props.mongos,
            storageEngine: props.storageEngine === undefined || props.storageEngine === null ? 'WiredTiger' : props.storageEngine,
            secondaryZoneId: props.secondaryZoneId,
            accountPassword: props.accountPassword,
            restoreTime: props.restoreTime,
            vpcId: props.vpcId,
            protocolType: props.protocolType,
            chargeType: props.chargeType === undefined || props.chargeType === null ? 'PostPaid' : props.chargeType,
            networkType: props.networkType,
            configServer: props.configServer,
            srcDbInstanceId: props.srcDbInstanceId,
            replicaSet: props.replicaSet,
            tags: props.tags,
            dbInstanceDescription: props.dbInstanceDescription,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosShardingInstance;
        this.attrDbInstanceId = rosShardingInstance.attrDbInstanceId;
        this.attrDbInstanceStatus = rosShardingInstance.attrDbInstanceStatus;
        this.attrOrderId = rosShardingInstance.attrOrderId;
    }
}
exports.ShardingInstance = ShardingInstance;
//# sourceMappingURL=data:application/json;base64,