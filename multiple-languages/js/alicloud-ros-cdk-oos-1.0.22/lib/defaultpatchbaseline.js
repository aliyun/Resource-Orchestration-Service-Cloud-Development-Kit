"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DefaultPatchBaseline = exports.DefaultPatchBaselineProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const oos_generated_1 = require("./oos.generated");
Object.defineProperty(exports, "DefaultPatchBaselineProperty", { enumerable: true, get: function () { return oos_generated_1.RosDefaultPatchBaseline; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::OOS::DefaultPatchBaseline`, which is used to register a default patch baseline.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosDefaultPatchBaseline`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-oos-defaultpatchbaseline
 */
class DefaultPatchBaseline extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosDefaultPatchBaseline = new oos_generated_1.RosDefaultPatchBaseline(this, id, {
            patchBaselineName: props.patchBaselineName,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosDefaultPatchBaseline;
        this.attrApprovalRules = rosDefaultPatchBaseline.attrApprovalRules;
        this.attrCreatedBy = rosDefaultPatchBaseline.attrCreatedBy;
        this.attrCreatedDate = rosDefaultPatchBaseline.attrCreatedDate;
        this.attrDescription = rosDefaultPatchBaseline.attrDescription;
        this.attrOperationSystem = rosDefaultPatchBaseline.attrOperationSystem;
        this.attrPatchBaselineId = rosDefaultPatchBaseline.attrPatchBaselineId;
        this.attrPatchBaselineName = rosDefaultPatchBaseline.attrPatchBaselineName;
        this.attrShareType = rosDefaultPatchBaseline.attrShareType;
        this.attrUpdatedBy = rosDefaultPatchBaseline.attrUpdatedBy;
        this.attrUpdatedDate = rosDefaultPatchBaseline.attrUpdatedDate;
    }
}
exports.DefaultPatchBaseline = DefaultPatchBaseline;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVmYXVsdHBhdGNoYmFzZWxpbmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJkZWZhdWx0cGF0Y2hiYXNlbGluZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw4Q0FBOEM7QUFDOUMsbURBQTBEO0FBRXRCLDZHQUYzQix1Q0FBdUIsT0FFZ0M7QUFjaEU7Ozs7R0FJRztBQUNILE1BQWEsb0JBQXFCLFNBQVEsR0FBRyxDQUFDLFFBQVE7SUFvRGxEOzs7O09BSUc7SUFDSCxZQUFZLEtBQW9CLEVBQUUsRUFBVSxFQUFFLEtBQWdDLEVBQUUsbUNBQTJDLElBQUk7UUFDM0gsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUVqQixNQUFNLHVCQUF1QixHQUFHLElBQUksdUNBQXVCLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRztZQUNuRSxpQkFBaUIsRUFBRSxLQUFLLENBQUMsaUJBQWlCO1NBQzdDLEVBQUUsZ0NBQWdDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO1FBQ3BGLElBQUksQ0FBQyxRQUFRLEdBQUcsdUJBQXVCLENBQUM7UUFDeEMsSUFBSSxDQUFDLGlCQUFpQixHQUFHLHVCQUF1QixDQUFDLGlCQUFpQixDQUFDO1FBQ25FLElBQUksQ0FBQyxhQUFhLEdBQUcsdUJBQXVCLENBQUMsYUFBYSxDQUFDO1FBQzNELElBQUksQ0FBQyxlQUFlLEdBQUcsdUJBQXVCLENBQUMsZUFBZSxDQUFDO1FBQy9ELElBQUksQ0FBQyxlQUFlLEdBQUcsdUJBQXVCLENBQUMsZUFBZSxDQUFDO1FBQy9ELElBQUksQ0FBQyxtQkFBbUIsR0FBRyx1QkFBdUIsQ0FBQyxtQkFBbUIsQ0FBQztRQUN2RSxJQUFJLENBQUMsbUJBQW1CLEdBQUcsdUJBQXVCLENBQUMsbUJBQW1CLENBQUM7UUFDdkUsSUFBSSxDQUFDLHFCQUFxQixHQUFHLHVCQUF1QixDQUFDLHFCQUFxQixDQUFDO1FBQzNFLElBQUksQ0FBQyxhQUFhLEdBQUcsdUJBQXVCLENBQUMsYUFBYSxDQUFDO1FBQzNELElBQUksQ0FBQyxhQUFhLEdBQUcsdUJBQXVCLENBQUMsYUFBYSxDQUFDO1FBQzNELElBQUksQ0FBQyxlQUFlLEdBQUcsdUJBQXVCLENBQUMsZUFBZSxDQUFDO0lBQ25FLENBQUM7Q0FDSjtBQTNFRCxvREEyRUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyByb3MgZnJvbSAnQGFsaWNsb3VkL3Jvcy1jZGstY29yZSc7XG5pbXBvcnQgeyBSb3NEZWZhdWx0UGF0Y2hCYXNlbGluZSB9IGZyb20gJy4vb29zLmdlbmVyYXRlZCc7XG4vLyBHZW5lcmF0ZWQgZnJvbSB0aGUgQWxpQ2xvdWQgUk9TIFJlc291cmNlIFNwZWNpZmljYXRpb25cbmV4cG9ydCB7IFJvc0RlZmF1bHRQYXRjaEJhc2VsaW5lIGFzIERlZmF1bHRQYXRjaEJhc2VsaW5lUHJvcGVydHkgfTtcblxuLyoqXG4gKiBQcm9wZXJ0aWVzIGZvciBkZWZpbmluZyBhIGBEZWZhdWx0UGF0Y2hCYXNlbGluZWAuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2FsaXl1bi1vb3MtZGVmYXVsdHBhdGNoYmFzZWxpbmVcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBEZWZhdWx0UGF0Y2hCYXNlbGluZVByb3BzIHtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHBhdGNoQmFzZWxpbmVOYW1lOiBUaGUgbmFtZSBvZiB0aGUgcGF0Y2ggYmFzZWxpbmUuXG4gICAgICovXG4gICAgcmVhZG9ubHkgcGF0Y2hCYXNlbGluZU5hbWU6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcbn1cblxuLyoqXG4gKiBUaGlzIGNsYXNzIGVuY2Fwc3VsYXRlcyBhbmQgZXh0ZW5kcyB0aGUgUk9TIHJlc291cmNlIHR5cGUgYEFMSVlVTjo6T09TOjpEZWZhdWx0UGF0Y2hCYXNlbGluZWAsIHdoaWNoIGlzIHVzZWQgdG8gcmVnaXN0ZXIgYSBkZWZhdWx0IHBhdGNoIGJhc2VsaW5lLlxuICogQE5vdGUgVGhpcyBjbGFzcyBtYXkgaGF2ZSBzb21lIG5ldyBmdW5jdGlvbnMgdG8gZmFjaWxpdGF0ZSBkZXZlbG9wbWVudCwgc28gaXQgaXMgcmVjb21tZW5kZWQgdG8gdXNlIHRoaXMgY2xhc3MgaW5zdGVhZCBvZiBgUm9zRGVmYXVsdFBhdGNoQmFzZWxpbmVgZm9yIGEgbW9yZSBjb252ZW5pZW50IGRldmVsb3BtZW50IGV4cGVyaWVuY2UuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2FsaXl1bi1vb3MtZGVmYXVsdHBhdGNoYmFzZWxpbmVcbiAqL1xuZXhwb3J0IGNsYXNzIERlZmF1bHRQYXRjaEJhc2VsaW5lIGV4dGVuZHMgcm9zLlJlc291cmNlIHtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBBcHByb3ZhbFJ1bGVzOiBUaGUgcnVsZXMgb2Ygc2Nhbm5pbmcgYW5kIGluc3RhbGxpbmcgcGF0Y2hlcyBmb3IgdGhlIHNwZWNpZmllZCBvcGVyYXRpbmcgc3lzdGVtLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyQXBwcm92YWxSdWxlczogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIENyZWF0ZWRCeTogVGhlIGNyZWF0b3Igb2YgdGhlIHBhdGNoIGJhc2VsaW5lLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyQ3JlYXRlZEJ5OiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgQ3JlYXRlZERhdGU6IFRoZSB0aW1lIHdoZW4gdGhlIHBhdGNoIGJhc2VsaW5lIHdhcyBjcmVhdGVkLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyQ3JlYXRlZERhdGU6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBEZXNjcmlwdGlvbjogVGhlIGRlc2NyaXB0aW9uIG9mIHRoZSBwYXRjaCBiYXNlbGluZS5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckRlc2NyaXB0aW9uOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgT3BlcmF0aW9uU3lzdGVtOiBUaGUgdHlwZSBvZiB0aGUgb3BlcmF0aW5nIHN5c3RlbS5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ck9wZXJhdGlvblN5c3RlbTogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIFBhdGNoQmFzZWxpbmVJZDogVGhlIElEIG9mIHRoZSBwYXRjaCBiYXNlbGluZS5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0clBhdGNoQmFzZWxpbmVJZDogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIFBhdGNoQmFzZWxpbmVOYW1lOiBUaGUgbmFtZSBvZiB0aGUgcGF0Y2ggYmFzZWxpbmUuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJQYXRjaEJhc2VsaW5lTmFtZTogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIFNoYXJlVHlwZTogVGhlIHNoYXJlIHR5cGUgb2YgdGhlIHBhdGNoIGJhc2VsaW5lLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyU2hhcmVUeXBlOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgVXBkYXRlZEJ5OiBUaGUgdXNlciB3aG8gbGFzdCBtb2RpZmllZCB0aGUgcGF0Y2ggYmFzZWxpbmUuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJVcGRhdGVkQnk6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBVcGRhdGVkRGF0ZTogVGhlIHRpbWUgd2hlbiB0aGUgcGF0Y2ggYmFzZWxpbmUgd2FzIGxhc3QgbW9kaWZpZWQuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJVcGRhdGVkRGF0ZTogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUGFyYW0gc2NvcGUgLSBzY29wZSBpbiB3aGljaCB0aGlzIHJlc291cmNlIGlzIGRlZmluZWRcbiAgICAgKiBQYXJhbSBpZCAgICAtIHNjb3BlZCBpZCBvZiB0aGUgcmVzb3VyY2VcbiAgICAgKiBQYXJhbSBwcm9wcyAtIHJlc291cmNlIHByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihzY29wZTogcm9zLkNvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IERlZmF1bHRQYXRjaEJhc2VsaW5lUHJvcHMsIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OmJvb2xlYW4gPSB0cnVlKSB7XG4gICAgICAgIHN1cGVyKHNjb3BlLCBpZCk7XG5cbiAgICAgICAgY29uc3Qgcm9zRGVmYXVsdFBhdGNoQmFzZWxpbmUgPSBuZXcgUm9zRGVmYXVsdFBhdGNoQmFzZWxpbmUodGhpcywgaWQsICB7XG4gICAgICAgICAgICBwYXRjaEJhc2VsaW5lTmFtZTogcHJvcHMucGF0Y2hCYXNlbGluZU5hbWUsXG4gICAgICAgIH0sIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ICYmIHRoaXMuc3RhY2suZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQpO1xuICAgICAgICB0aGlzLnJlc291cmNlID0gcm9zRGVmYXVsdFBhdGNoQmFzZWxpbmU7XG4gICAgICAgIHRoaXMuYXR0ckFwcHJvdmFsUnVsZXMgPSByb3NEZWZhdWx0UGF0Y2hCYXNlbGluZS5hdHRyQXBwcm92YWxSdWxlcztcbiAgICAgICAgdGhpcy5hdHRyQ3JlYXRlZEJ5ID0gcm9zRGVmYXVsdFBhdGNoQmFzZWxpbmUuYXR0ckNyZWF0ZWRCeTtcbiAgICAgICAgdGhpcy5hdHRyQ3JlYXRlZERhdGUgPSByb3NEZWZhdWx0UGF0Y2hCYXNlbGluZS5hdHRyQ3JlYXRlZERhdGU7XG4gICAgICAgIHRoaXMuYXR0ckRlc2NyaXB0aW9uID0gcm9zRGVmYXVsdFBhdGNoQmFzZWxpbmUuYXR0ckRlc2NyaXB0aW9uO1xuICAgICAgICB0aGlzLmF0dHJPcGVyYXRpb25TeXN0ZW0gPSByb3NEZWZhdWx0UGF0Y2hCYXNlbGluZS5hdHRyT3BlcmF0aW9uU3lzdGVtO1xuICAgICAgICB0aGlzLmF0dHJQYXRjaEJhc2VsaW5lSWQgPSByb3NEZWZhdWx0UGF0Y2hCYXNlbGluZS5hdHRyUGF0Y2hCYXNlbGluZUlkO1xuICAgICAgICB0aGlzLmF0dHJQYXRjaEJhc2VsaW5lTmFtZSA9IHJvc0RlZmF1bHRQYXRjaEJhc2VsaW5lLmF0dHJQYXRjaEJhc2VsaW5lTmFtZTtcbiAgICAgICAgdGhpcy5hdHRyU2hhcmVUeXBlID0gcm9zRGVmYXVsdFBhdGNoQmFzZWxpbmUuYXR0clNoYXJlVHlwZTtcbiAgICAgICAgdGhpcy5hdHRyVXBkYXRlZEJ5ID0gcm9zRGVmYXVsdFBhdGNoQmFzZWxpbmUuYXR0clVwZGF0ZWRCeTtcbiAgICAgICAgdGhpcy5hdHRyVXBkYXRlZERhdGUgPSByb3NEZWZhdWx0UGF0Y2hCYXNlbGluZS5hdHRyVXBkYXRlZERhdGU7XG4gICAgfVxufVxuIl19