"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Rule = exports.RuleProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const slb_generated_1 = require("./slb.generated");
Object.defineProperty(exports, "RuleProperty", { enumerable: true, get: function () { return slb_generated_1.RosRule; } });
/**
 * This class encapsulates and extends the ROS resource type `DATASOURCE::SLB::Rule`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosRule`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/datasource-slb-rule
 */
class Rule extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosRule = new slb_generated_1.RosRule(this, id, {
            ruleId: props.ruleId,
            refreshOptions: props.refreshOptions === undefined || props.refreshOptions === null ? 'Never' : props.refreshOptions,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosRule;
        this.attrCookie = rosRule.attrCookie;
        this.attrCookieTimeout = rosRule.attrCookieTimeout;
        this.attrDomain = rosRule.attrDomain;
        this.attrHealthCheck = rosRule.attrHealthCheck;
        this.attrHealthCheckConnectPort = rosRule.attrHealthCheckConnectPort;
        this.attrHealthCheckDomain = rosRule.attrHealthCheckDomain;
        this.attrHealthCheckHttpCode = rosRule.attrHealthCheckHttpCode;
        this.attrHealthCheckInterval = rosRule.attrHealthCheckInterval;
        this.attrHealthCheckTimeout = rosRule.attrHealthCheckTimeout;
        this.attrHealthCheckUri = rosRule.attrHealthCheckUri;
        this.attrHealthyThreshold = rosRule.attrHealthyThreshold;
        this.attrListenerPort = rosRule.attrListenerPort;
        this.attrListenerSync = rosRule.attrListenerSync;
        this.attrLoadBalancerId = rosRule.attrLoadBalancerId;
        this.attrRuleId = rosRule.attrRuleId;
        this.attrRuleName = rosRule.attrRuleName;
        this.attrScheduler = rosRule.attrScheduler;
        this.attrStickySession = rosRule.attrStickySession;
        this.attrStickySessionType = rosRule.attrStickySessionType;
        this.attrUnhealthyThreshold = rosRule.attrUnhealthyThreshold;
        this.attrUrl = rosRule.attrUrl;
        this.attrVserverGroupId = rosRule.attrVserverGroupId;
    }
}
exports.Rule = Rule;
//# sourceMappingURL=data:application/json;base64,