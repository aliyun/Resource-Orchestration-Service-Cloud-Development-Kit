"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiAttachment = exports.ApiAttachmentProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const apig_generated_1 = require("./apig.generated");
Object.defineProperty(exports, "ApiAttachmentProperty", { enumerable: true, get: function () { return apig_generated_1.RosApiAttachment; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::APIG::ApiAttachment`, which is used to attach an API.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosApiAttachment`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-apig-apiattachment
 */
class ApiAttachment extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosApiAttachment = new apig_generated_1.RosApiAttachment(this, id, {
            environmentId: props.environmentId,
            description: props.description,
            backendScene: props.backendScene,
            serviceConfigs: props.serviceConfigs,
            routeId: props.routeId,
            httpApiId: props.httpApiId,
            domainIds: props.domainIds,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosApiAttachment;
        this.attrEnvironmentId = rosApiAttachment.attrEnvironmentId;
        this.attrHttpApiId = rosApiAttachment.attrHttpApiId;
        this.attrRouteId = rosApiAttachment.attrRouteId;
    }
}
exports.ApiAttachment = ApiAttachment;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpYXR0YWNobWVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImFwaWF0dGFjaG1lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsOENBQThDO0FBQzlDLHFEQUFvRDtBQUV2QixzR0FGcEIsaUNBQWdCLE9BRXlCO0FBaUVsRDs7OztHQUlHO0FBQ0gsTUFBYSxhQUFjLFNBQVEsR0FBRyxDQUFDLFFBQVE7SUFxQjNDOzs7O09BSUc7SUFDSCxZQUFZLEtBQW9CLEVBQUUsRUFBVSxFQUFFLEtBQXlCLEVBQUUsbUNBQTJDLElBQUk7UUFDcEgsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNqQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUNiLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxnQ0FBZ0MsR0FBRyxnQ0FBZ0MsQ0FBQztRQUV6RSxNQUFNLGdCQUFnQixHQUFHLElBQUksaUNBQWdCLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRztZQUNyRCxhQUFhLEVBQUUsS0FBSyxDQUFDLGFBQWE7WUFDbEMsV0FBVyxFQUFFLEtBQUssQ0FBQyxXQUFXO1lBQzlCLFlBQVksRUFBRSxLQUFLLENBQUMsWUFBWTtZQUNoQyxjQUFjLEVBQUUsS0FBSyxDQUFDLGNBQWM7WUFDcEMsT0FBTyxFQUFFLEtBQUssQ0FBQyxPQUFPO1lBQ3RCLFNBQVMsRUFBRSxLQUFLLENBQUMsU0FBUztZQUMxQixTQUFTLEVBQUUsS0FBSyxDQUFDLFNBQVM7U0FDN0IsRUFBRSxnQ0FBZ0MsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7UUFDcEYsSUFBSSxDQUFDLFFBQVEsR0FBRyxnQkFBZ0IsQ0FBQztRQUNqQyxJQUFJLENBQUMsaUJBQWlCLEdBQUcsZ0JBQWdCLENBQUMsaUJBQWlCLENBQUM7UUFDNUQsSUFBSSxDQUFDLGFBQWEsR0FBRyxnQkFBZ0IsQ0FBQyxhQUFhLENBQUM7UUFDcEQsSUFBSSxDQUFDLFdBQVcsR0FBRyxnQkFBZ0IsQ0FBQyxXQUFXLENBQUM7SUFDcEQsQ0FBQztDQUNKO0FBL0NELHNDQStDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHJvcyBmcm9tICdAYWxpY2xvdWQvcm9zLWNkay1jb3JlJztcbmltcG9ydCB7IFJvc0FwaUF0dGFjaG1lbnQgfSBmcm9tICcuL2FwaWcuZ2VuZXJhdGVkJztcbi8vIEdlbmVyYXRlZCBmcm9tIHRoZSBBbGlDbG91ZCBST1MgUmVzb3VyY2UgU3BlY2lmaWNhdGlvblxuZXhwb3J0IHsgUm9zQXBpQXR0YWNobWVudCBhcyBBcGlBdHRhY2htZW50UHJvcGVydHkgfTtcblxuLyoqXG4gKiBQcm9wZXJ0aWVzIGZvciBkZWZpbmluZyBhIGBBcGlBdHRhY2htZW50YC5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvYWxpeXVuLWFwaWctYXBpYXR0YWNobWVudFxuICovXG5leHBvcnQgaW50ZXJmYWNlIEFwaUF0dGFjaG1lbnRQcm9wcyB7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBiYWNrZW5kU2NlbmU6IEFQSSByZWxlYXNlIHNjZW5hcmlvLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGJhY2tlbmRTY2VuZTogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgZW52aXJvbm1lbnRJZDogVGhlIElEIG9mIHRoZSBlbnZpcm9ubWVudCB0byB3aGljaCB0aGUgQVBJIGlzIHRvIGRlcGxveS5cbiAgICAgKi9cbiAgICByZWFkb25seSBlbnZpcm9ubWVudElkOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBodHRwQXBpSWQ6IFRoZSBJRCBvZiB0aGUgSFRUUCBBUEkuXG4gICAgICovXG4gICAgcmVhZG9ubHkgaHR0cEFwaUlkOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBzZXJ2aWNlQ29uZmlnczogU2VydmljZXMgYXNzb2NpYXRlZCB3aXRoIEFQSSBwdWJsaXNoaW5nIGFuZCB0aGVpciBjb25maWd1cmF0aW9ucy5cbiAgICAgKi9cbiAgICByZWFkb25seSBzZXJ2aWNlQ29uZmlnczogQXJyYXk8Um9zQXBpQXR0YWNobWVudC5TZXJ2aWNlQ29uZmlnc1Byb3BlcnR5IHwgcm9zLklSZXNvbHZhYmxlPiB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGRlc2NyaXB0aW9uOiBUaGUgZGVzY3JpcHRpb24gb2YgcHVibGljYXRpb24uXG4gICAgICovXG4gICAgcmVhZG9ubHkgZGVzY3JpcHRpb24/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBkb21haW5JZHM6IFRoZSBsaXN0IG9mIHVzZXIgZG9tYWluIG5hbWVzIGFzc29jaWF0ZWQgd2l0aCBBUEkgcHVibGlzaGluZy5cbiAgICAgKi9cbiAgICByZWFkb25seSBkb21haW5JZHM/OiBBcnJheTxzdHJpbmcgfCByb3MuSVJlc29sdmFibGU+IHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgcm91dGVJZDogVGhlIHJvdXRlIElELiBXaGVuIHB1Ymxpc2hpbmcgYW4gSFRUUCBBUEkgcm91dGUsIGl0IG11c3QgYmUgcGFzc2VkIGluLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHJvdXRlSWQ/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG59XG5cbi8qKlxuICogUmVwcmVzZW50cyBhIGBBcGlBdHRhY2htZW50YC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJQXBpQXR0YWNobWVudCBleHRlbmRzIHJvcy5JUmVzb3VyY2Uge1xuICAgIHJlYWRvbmx5IHByb3BzOiBBcGlBdHRhY2htZW50UHJvcHM7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgRW52aXJvbm1lbnRJZDogVGhlIElEIG9mIHRoZSBlbnZpcm9ubWVudCB0byB3aGljaCB0aGUgQVBJIGlzIHRvIGRlcGxveS5cbiAgICAgKi9cbiAgICByZWFkb25seSBhdHRyRW52aXJvbm1lbnRJZDogcm9zLklSZXNvbHZhYmxlIHwgc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIEh0dHBBcGlJZDogVGhlIElEIG9mIHRoZSBIVFRQIEFQSS5cbiAgICAgKi9cbiAgICByZWFkb25seSBhdHRySHR0cEFwaUlkOiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgUm91dGVJZDogVGhlIHJvdXRlIElELiBXaGVuIHB1Ymxpc2hpbmcgYW4gSFRUUCBBUEkgcm91dGUsIGl0IG11c3QgYmUgcGFzc2VkIGluLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGF0dHJSb3V0ZUlkOiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG59XG4vKipcbiAqIFRoaXMgY2xhc3MgZW5jYXBzdWxhdGVzIGFuZCBleHRlbmRzIHRoZSBST1MgcmVzb3VyY2UgdHlwZSBgQUxJWVVOOjpBUElHOjpBcGlBdHRhY2htZW50YCwgd2hpY2ggaXMgdXNlZCB0byBhdHRhY2ggYW4gQVBJLlxuICogQE5vdGUgVGhpcyBjbGFzcyBtYXkgaGF2ZSBzb21lIG5ldyBmdW5jdGlvbnMgdG8gZmFjaWxpdGF0ZSBkZXZlbG9wbWVudCwgc28gaXQgaXMgcmVjb21tZW5kZWQgdG8gdXNlIHRoaXMgY2xhc3MgaW5zdGVhZCBvZiBgUm9zQXBpQXR0YWNobWVudGBmb3IgYSBtb3JlIGNvbnZlbmllbnQgZGV2ZWxvcG1lbnQgZXhwZXJpZW5jZS5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvYWxpeXVuLWFwaWctYXBpYXR0YWNobWVudFxuICovXG5leHBvcnQgY2xhc3MgQXBpQXR0YWNobWVudCBleHRlbmRzIHJvcy5SZXNvdXJjZSBpbXBsZW1lbnRzIElBcGlBdHRhY2htZW50IHtcbiAgICBwcm90ZWN0ZWQgc2NvcGU6IHJvcy5Db25zdHJ1Y3Q7XG4gICAgcHJvdGVjdGVkIGlkOiBzdHJpbmc7XG4gICAgcHVibGljIHJlYWRvbmx5IHByb3BzOiBBcGlBdHRhY2htZW50UHJvcHM7XG4gICAgcHJvdGVjdGVkIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OiBib29sZWFuO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIEVudmlyb25tZW50SWQ6IFRoZSBJRCBvZiB0aGUgZW52aXJvbm1lbnQgdG8gd2hpY2ggdGhlIEFQSSBpcyB0byBkZXBsb3kuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJFbnZpcm9ubWVudElkOiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgSHR0cEFwaUlkOiBUaGUgSUQgb2YgdGhlIEhUVFAgQVBJLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRySHR0cEFwaUlkOiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgUm91dGVJZDogVGhlIHJvdXRlIElELiBXaGVuIHB1Ymxpc2hpbmcgYW4gSFRUUCBBUEkgcm91dGUsIGl0IG11c3QgYmUgcGFzc2VkIGluLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyUm91dGVJZDogcm9zLklSZXNvbHZhYmxlIHwgc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogUGFyYW0gc2NvcGUgLSBzY29wZSBpbiB3aGljaCB0aGlzIHJlc291cmNlIGlzIGRlZmluZWRcbiAgICAgKiBQYXJhbSBpZCAgICAtIHNjb3BlZCBpZCBvZiB0aGUgcmVzb3VyY2VcbiAgICAgKiBQYXJhbSBwcm9wcyAtIHJlc291cmNlIHByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihzY29wZTogcm9zLkNvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IEFwaUF0dGFjaG1lbnRQcm9wcywgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6Ym9vbGVhbiA9IHRydWUpIHtcbiAgICAgICAgc3VwZXIoc2NvcGUsIGlkKTtcbiAgICAgICAgdGhpcy5zY29wZSA9IHNjb3BlO1xuICAgICAgICB0aGlzLmlkID0gaWQ7XG4gICAgICAgIHRoaXMucHJvcHMgPSBwcm9wcztcbiAgICAgICAgdGhpcy5lbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCA9IGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50O1xuXG4gICAgICAgIGNvbnN0IHJvc0FwaUF0dGFjaG1lbnQgPSBuZXcgUm9zQXBpQXR0YWNobWVudCh0aGlzLCBpZCwgIHtcbiAgICAgICAgICAgIGVudmlyb25tZW50SWQ6IHByb3BzLmVudmlyb25tZW50SWQsXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogcHJvcHMuZGVzY3JpcHRpb24sXG4gICAgICAgICAgICBiYWNrZW5kU2NlbmU6IHByb3BzLmJhY2tlbmRTY2VuZSxcbiAgICAgICAgICAgIHNlcnZpY2VDb25maWdzOiBwcm9wcy5zZXJ2aWNlQ29uZmlncyxcbiAgICAgICAgICAgIHJvdXRlSWQ6IHByb3BzLnJvdXRlSWQsXG4gICAgICAgICAgICBodHRwQXBpSWQ6IHByb3BzLmh0dHBBcGlJZCxcbiAgICAgICAgICAgIGRvbWFpbklkczogcHJvcHMuZG9tYWluSWRzLFxuICAgICAgICB9LCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCAmJiB0aGlzLnN0YWNrLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50KTtcbiAgICAgICAgdGhpcy5yZXNvdXJjZSA9IHJvc0FwaUF0dGFjaG1lbnQ7XG4gICAgICAgIHRoaXMuYXR0ckVudmlyb25tZW50SWQgPSByb3NBcGlBdHRhY2htZW50LmF0dHJFbnZpcm9ubWVudElkO1xuICAgICAgICB0aGlzLmF0dHJIdHRwQXBpSWQgPSByb3NBcGlBdHRhY2htZW50LmF0dHJIdHRwQXBpSWQ7XG4gICAgICAgIHRoaXMuYXR0clJvdXRlSWQgPSByb3NBcGlBdHRhY2htZW50LmF0dHJSb3V0ZUlkO1xuICAgIH1cbn1cbiJdfQ==