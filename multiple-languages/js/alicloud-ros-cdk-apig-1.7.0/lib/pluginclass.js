"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PluginClass = exports.PluginClassProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const apig_generated_1 = require("./apig.generated");
Object.defineProperty(exports, "PluginClassProperty", { enumerable: true, get: function () { return apig_generated_1.RosPluginClass; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::APIG::PluginClass`, which is used to create a plug-in class.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosPluginClass`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-apig-pluginclass
 */
class PluginClass extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosPluginClass = new apig_generated_1.RosPluginClass(this, id, {
            wasmUrl: props.wasmUrl,
            versionDescription: props.versionDescription,
            description: props.description,
            pluginClassName: props.pluginClassName,
            version: props.version,
            alias: props.alias,
            executePriority: props.executePriority,
            supportedMinGatewayVersion: props.supportedMinGatewayVersion,
            wasmLanguage: props.wasmLanguage,
            executeStage: props.executeStage,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosPluginClass;
        this.attrAlias = rosPluginClass.attrAlias;
        this.attrDescription = rosPluginClass.attrDescription;
        this.attrDocument = rosPluginClass.attrDocument;
        this.attrPluginClassName = rosPluginClass.attrPluginClassName;
        this.attrType = rosPluginClass.attrType;
        this.attrWasmLanguage = rosPluginClass.attrWasmLanguage;
    }
}
exports.PluginClass = PluginClass;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGx1Z2luY2xhc3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJwbHVnaW5jbGFzcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw4Q0FBOEM7QUFDOUMscURBQWtEO0FBRXZCLG9HQUZsQiwrQkFBYyxPQUV1QjtBQStGOUM7Ozs7R0FJRztBQUNILE1BQWEsV0FBWSxTQUFRLEdBQUcsQ0FBQyxRQUFRO0lBb0N6Qzs7OztPQUlHO0lBQ0gsWUFBWSxLQUFvQixFQUFFLEVBQVUsRUFBRSxLQUF1QixFQUFFLG1DQUEyQyxJQUFJO1FBQ2xILEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDakIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUM7UUFDYixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsZ0NBQWdDLEdBQUcsZ0NBQWdDLENBQUM7UUFFekUsTUFBTSxjQUFjLEdBQUcsSUFBSSwrQkFBYyxDQUFDLElBQUksRUFBRSxFQUFFLEVBQUc7WUFDakQsT0FBTyxFQUFFLEtBQUssQ0FBQyxPQUFPO1lBQ3RCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxrQkFBa0I7WUFDNUMsV0FBVyxFQUFFLEtBQUssQ0FBQyxXQUFXO1lBQzlCLGVBQWUsRUFBRSxLQUFLLENBQUMsZUFBZTtZQUN0QyxPQUFPLEVBQUUsS0FBSyxDQUFDLE9BQU87WUFDdEIsS0FBSyxFQUFFLEtBQUssQ0FBQyxLQUFLO1lBQ2xCLGVBQWUsRUFBRSxLQUFLLENBQUMsZUFBZTtZQUN0QywwQkFBMEIsRUFBRSxLQUFLLENBQUMsMEJBQTBCO1lBQzVELFlBQVksRUFBRSxLQUFLLENBQUMsWUFBWTtZQUNoQyxZQUFZLEVBQUUsS0FBSyxDQUFDLFlBQVk7U0FDbkMsRUFBRSxnQ0FBZ0MsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7UUFDcEYsSUFBSSxDQUFDLFFBQVEsR0FBRyxjQUFjLENBQUM7UUFDL0IsSUFBSSxDQUFDLFNBQVMsR0FBRyxjQUFjLENBQUMsU0FBUyxDQUFDO1FBQzFDLElBQUksQ0FBQyxlQUFlLEdBQUcsY0FBYyxDQUFDLGVBQWUsQ0FBQztRQUN0RCxJQUFJLENBQUMsWUFBWSxHQUFHLGNBQWMsQ0FBQyxZQUFZLENBQUM7UUFDaEQsSUFBSSxDQUFDLG1CQUFtQixHQUFHLGNBQWMsQ0FBQyxtQkFBbUIsQ0FBQztRQUM5RCxJQUFJLENBQUMsUUFBUSxHQUFHLGNBQWMsQ0FBQyxRQUFRLENBQUM7UUFDeEMsSUFBSSxDQUFDLGdCQUFnQixHQUFHLGNBQWMsQ0FBQyxnQkFBZ0IsQ0FBQztJQUM1RCxDQUFDO0NBQ0o7QUFwRUQsa0NBb0VDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcm9zIGZyb20gJ0BhbGljbG91ZC9yb3MtY2RrLWNvcmUnO1xuaW1wb3J0IHsgUm9zUGx1Z2luQ2xhc3MgfSBmcm9tICcuL2FwaWcuZ2VuZXJhdGVkJztcbi8vIEdlbmVyYXRlZCBmcm9tIHRoZSBBbGlDbG91ZCBST1MgUmVzb3VyY2UgU3BlY2lmaWNhdGlvblxuZXhwb3J0IHsgUm9zUGx1Z2luQ2xhc3MgYXMgUGx1Z2luQ2xhc3NQcm9wZXJ0eSB9O1xuXG4vKipcbiAqIFByb3BlcnRpZXMgZm9yIGRlZmluaW5nIGEgYFBsdWdpbkNsYXNzYC5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvYWxpeXVuLWFwaWctcGx1Z2luY2xhc3NcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBQbHVnaW5DbGFzc1Byb3BzIHtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGRlc2NyaXB0aW9uOiBUaGUgZGVzY3JpcHRpb24gb2YgdGhlIHBsdWdpbiBjbGFzcy5cbiAgICAgKi9cbiAgICByZWFkb25seSBkZXNjcmlwdGlvbjogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgZXhlY3V0ZVByaW9yaXR5OiBUaGUgZXhlY3V0ZSBwcmlvcml0eSBvZiB0aGUgUGx1Z2luLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGV4ZWN1dGVQcmlvcml0eTogbnVtYmVyIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgZXhlY3V0ZVN0YWdlOiBUaGUgRXhlY3V0aW9uIHN0YWdlLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGV4ZWN1dGVTdGFnZTogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgcGx1Z2luQ2xhc3NOYW1lOiBUaGUgbmFtZSBvZiB0aGUgcGx1Z2luIGNsYXNzLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHBsdWdpbkNsYXNzTmFtZTogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgdmVyc2lvbjogVGhlIHZlcnNpb24gb2YgcGx1Z2luIGNsYXNzLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHZlcnNpb246IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHZlcnNpb25EZXNjcmlwdGlvbjogVGhlIGRlc2NyaXB0aW9uIG9mIHRoZSB2ZXJzaW9uIC5cbiAgICAgKi9cbiAgICByZWFkb25seSB2ZXJzaW9uRGVzY3JpcHRpb246IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHdhc21MYW5ndWFnZTogdGhlIGxhbmd1YWdlIG9mIHRoZSB3YXNtLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHdhc21MYW5ndWFnZTogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgd2FzbVVybDogVGhlIHVybCBvZiB0aGUgd2FzbS5cbiAgICAgKi9cbiAgICByZWFkb25seSB3YXNtVXJsOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBhbGlhczogVGhlIGFsaWFzIG9mIHRoZSBwbHVnaW4gY2xhc3MuXG4gICAgICovXG4gICAgcmVhZG9ubHkgYWxpYXM/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBzdXBwb3J0ZWRNaW5HYXRld2F5VmVyc2lvbjogVGhlIHN1cHBvcnRlZCBtaW5pbXVtIGdhdGV3YXkgdmVyc2lvbi5cbiAgICAgKi9cbiAgICByZWFkb25seSBzdXBwb3J0ZWRNaW5HYXRld2F5VmVyc2lvbj86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcbn1cblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgYFBsdWdpbkNsYXNzYC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJUGx1Z2luQ2xhc3MgZXh0ZW5kcyByb3MuSVJlc291cmNlIHtcbiAgICByZWFkb25seSBwcm9wczogUGx1Z2luQ2xhc3NQcm9wcztcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBBbGlhczogVGhlIGFsaWFzIG9mIHRoZSBwbHVnaW4gY2xhc3MuXG4gICAgICovXG4gICAgcmVhZG9ubHkgYXR0ckFsaWFzOiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgRGVzY3JpcHRpb246IFRoZSBkZXNjcmlwdGlvbiBvZiB0aGUgcGx1Z2luIGNsYXNzLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGF0dHJEZXNjcmlwdGlvbjogcm9zLklSZXNvbHZhYmxlIHwgc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIERvY3VtZW50OiBUaGUgZG9jdW1lbnQgb2YgcGx1Z2luLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGF0dHJEb2N1bWVudDogcm9zLklSZXNvbHZhYmxlIHwgc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIFBsdWdpbkNsYXNzTmFtZTogVGhlIG5hbWUgb2YgdGhlIHBsdWdpbiBjbGFzcy5cbiAgICAgKi9cbiAgICByZWFkb25seSBhdHRyUGx1Z2luQ2xhc3NOYW1lOiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgVHlwZTogVGhlIHR5cGUgb2YgdGhlIHBsdWdpbiBjbGFzcy5cbiAgICAgKi9cbiAgICByZWFkb25seSBhdHRyVHlwZTogcm9zLklSZXNvbHZhYmxlIHwgc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIFdhc21MYW5ndWFnZTogV2FzbSBsYW5ndWFnZS5cbiAgICAgKi9cbiAgICByZWFkb25seSBhdHRyV2FzbUxhbmd1YWdlOiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG59XG4vKipcbiAqIFRoaXMgY2xhc3MgZW5jYXBzdWxhdGVzIGFuZCBleHRlbmRzIHRoZSBST1MgcmVzb3VyY2UgdHlwZSBgQUxJWVVOOjpBUElHOjpQbHVnaW5DbGFzc2AsIHdoaWNoIGlzIHVzZWQgdG8gY3JlYXRlIGEgcGx1Zy1pbiBjbGFzcy5cbiAqIEBOb3RlIFRoaXMgY2xhc3MgbWF5IGhhdmUgc29tZSBuZXcgZnVuY3Rpb25zIHRvIGZhY2lsaXRhdGUgZGV2ZWxvcG1lbnQsIHNvIGl0IGlzIHJlY29tbWVuZGVkIHRvIHVzZSB0aGlzIGNsYXNzIGluc3RlYWQgb2YgYFJvc1BsdWdpbkNsYXNzYGZvciBhIG1vcmUgY29udmVuaWVudCBkZXZlbG9wbWVudCBleHBlcmllbmNlLlxuICogU2VlIGh0dHBzOi8vd3d3LmFsaWJhYmFjbG91ZC5jb20vaGVscC9yb3MvZGV2ZWxvcGVyLXJlZmVyZW5jZS9hbGl5dW4tYXBpZy1wbHVnaW5jbGFzc1xuICovXG5leHBvcnQgY2xhc3MgUGx1Z2luQ2xhc3MgZXh0ZW5kcyByb3MuUmVzb3VyY2UgaW1wbGVtZW50cyBJUGx1Z2luQ2xhc3Mge1xuICAgIHByb3RlY3RlZCBzY29wZTogcm9zLkNvbnN0cnVjdDtcbiAgICBwcm90ZWN0ZWQgaWQ6IHN0cmluZztcbiAgICBwdWJsaWMgcmVhZG9ubHkgcHJvcHM6IFBsdWdpbkNsYXNzUHJvcHM7XG4gICAgcHJvdGVjdGVkIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OiBib29sZWFuO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIEFsaWFzOiBUaGUgYWxpYXMgb2YgdGhlIHBsdWdpbiBjbGFzcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckFsaWFzOiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgRGVzY3JpcHRpb246IFRoZSBkZXNjcmlwdGlvbiBvZiB0aGUgcGx1Z2luIGNsYXNzLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyRGVzY3JpcHRpb246IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBEb2N1bWVudDogVGhlIGRvY3VtZW50IG9mIHBsdWdpbi5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckRvY3VtZW50OiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgUGx1Z2luQ2xhc3NOYW1lOiBUaGUgbmFtZSBvZiB0aGUgcGx1Z2luIGNsYXNzLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyUGx1Z2luQ2xhc3NOYW1lOiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgVHlwZTogVGhlIHR5cGUgb2YgdGhlIHBsdWdpbiBjbGFzcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0clR5cGU6IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBXYXNtTGFuZ3VhZ2U6IFdhc20gbGFuZ3VhZ2UuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJXYXNtTGFuZ3VhZ2U6IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFBhcmFtIHNjb3BlIC0gc2NvcGUgaW4gd2hpY2ggdGhpcyByZXNvdXJjZSBpcyBkZWZpbmVkXG4gICAgICogUGFyYW0gaWQgICAgLSBzY29wZWQgaWQgb2YgdGhlIHJlc291cmNlXG4gICAgICogUGFyYW0gcHJvcHMgLSByZXNvdXJjZSBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IHJvcy5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBQbHVnaW5DbGFzc1Byb3BzLCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDpib29sZWFuID0gdHJ1ZSkge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQpO1xuICAgICAgICB0aGlzLnNjb3BlID0gc2NvcGU7XG4gICAgICAgIHRoaXMuaWQgPSBpZDtcbiAgICAgICAgdGhpcy5wcm9wcyA9IHByb3BzO1xuICAgICAgICB0aGlzLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ID0gZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ7XG5cbiAgICAgICAgY29uc3Qgcm9zUGx1Z2luQ2xhc3MgPSBuZXcgUm9zUGx1Z2luQ2xhc3ModGhpcywgaWQsICB7XG4gICAgICAgICAgICB3YXNtVXJsOiBwcm9wcy53YXNtVXJsLFxuICAgICAgICAgICAgdmVyc2lvbkRlc2NyaXB0aW9uOiBwcm9wcy52ZXJzaW9uRGVzY3JpcHRpb24sXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogcHJvcHMuZGVzY3JpcHRpb24sXG4gICAgICAgICAgICBwbHVnaW5DbGFzc05hbWU6IHByb3BzLnBsdWdpbkNsYXNzTmFtZSxcbiAgICAgICAgICAgIHZlcnNpb246IHByb3BzLnZlcnNpb24sXG4gICAgICAgICAgICBhbGlhczogcHJvcHMuYWxpYXMsXG4gICAgICAgICAgICBleGVjdXRlUHJpb3JpdHk6IHByb3BzLmV4ZWN1dGVQcmlvcml0eSxcbiAgICAgICAgICAgIHN1cHBvcnRlZE1pbkdhdGV3YXlWZXJzaW9uOiBwcm9wcy5zdXBwb3J0ZWRNaW5HYXRld2F5VmVyc2lvbixcbiAgICAgICAgICAgIHdhc21MYW5ndWFnZTogcHJvcHMud2FzbUxhbmd1YWdlLFxuICAgICAgICAgICAgZXhlY3V0ZVN0YWdlOiBwcm9wcy5leGVjdXRlU3RhZ2UsXG4gICAgICAgIH0sIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ICYmIHRoaXMuc3RhY2suZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQpO1xuICAgICAgICB0aGlzLnJlc291cmNlID0gcm9zUGx1Z2luQ2xhc3M7XG4gICAgICAgIHRoaXMuYXR0ckFsaWFzID0gcm9zUGx1Z2luQ2xhc3MuYXR0ckFsaWFzO1xuICAgICAgICB0aGlzLmF0dHJEZXNjcmlwdGlvbiA9IHJvc1BsdWdpbkNsYXNzLmF0dHJEZXNjcmlwdGlvbjtcbiAgICAgICAgdGhpcy5hdHRyRG9jdW1lbnQgPSByb3NQbHVnaW5DbGFzcy5hdHRyRG9jdW1lbnQ7XG4gICAgICAgIHRoaXMuYXR0clBsdWdpbkNsYXNzTmFtZSA9IHJvc1BsdWdpbkNsYXNzLmF0dHJQbHVnaW5DbGFzc05hbWU7XG4gICAgICAgIHRoaXMuYXR0clR5cGUgPSByb3NQbHVnaW5DbGFzcy5hdHRyVHlwZTtcbiAgICAgICAgdGhpcy5hdHRyV2FzbUxhbmd1YWdlID0gcm9zUGx1Z2luQ2xhc3MuYXR0cldhc21MYW5ndWFnZTtcbiAgICB9XG59XG4iXX0=