"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Cluster2 = exports.Cluster2Property = void 0;
const ros = require("@alicloud/ros-cdk-core");
const emr_generated_1 = require("./emr.generated");
Object.defineProperty(exports, "Cluster2Property", { enumerable: true, get: function () { return emr_generated_1.RosCluster2; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::EMR::Cluster2`, which is used to create an E-MapReduce (EMR) cluster.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosCluster2`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-emr-cluster2
 */
class Cluster2 extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosCluster2 = new emr_generated_1.RosCluster2(this, id, {
            applications: props.applications,
            resourceGroupId: props.resourceGroupId,
            applicationConfigs: props.applicationConfigs,
            clusterType: props.clusterType,
            nodeGroups: props.nodeGroups,
            releaseVersion: props.releaseVersion,
            bootstrapScripts: props.bootstrapScripts,
            subscriptionConfig: props.subscriptionConfig,
            deployMode: props.deployMode,
            securityMode: props.securityMode,
            nodeAttributes: props.nodeAttributes,
            clusterName: props.clusterName,
            paymentType: props.paymentType,
            tags: props.tags,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosCluster2;
        this.attrApplicationLinks = rosCluster2.attrApplicationLinks;
        this.attrClusterId = rosCluster2.attrClusterId;
    }
}
exports.Cluster2 = Cluster2;
//# sourceMappingURL=data:application/json;base64,