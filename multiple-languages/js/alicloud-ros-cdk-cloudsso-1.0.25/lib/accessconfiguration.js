"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AccessConfiguration = exports.AccessConfigurationProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const cloudsso_generated_1 = require("./cloudsso.generated");
Object.defineProperty(exports, "AccessConfigurationProperty", { enumerable: true, get: function () { return cloudsso_generated_1.RosAccessConfiguration; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::CloudSSO::AccessConfiguration`, which is used to create an access configuration.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosAccessConfiguration`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-cloudsso-accessconfiguration
 */
class AccessConfiguration extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosAccessConfiguration = new cloudsso_generated_1.RosAccessConfiguration(this, id, {
            sessionDuration: props.sessionDuration,
            accessConfigurationName: props.accessConfigurationName,
            directoryId: props.directoryId,
            relayState: props.relayState,
            description: props.description,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosAccessConfiguration;
        this.attrAccessConfigurationId = rosAccessConfiguration.attrAccessConfigurationId;
    }
}
exports.AccessConfiguration = AccessConfiguration;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjZXNzY29uZmlndXJhdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImFjY2Vzc2NvbmZpZ3VyYXRpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsOENBQThDO0FBQzlDLDZEQUE4RDtBQUUzQiw0R0FGMUIsMkNBQXNCLE9BRStCO0FBeUM5RDs7OztHQUlHO0FBQ0gsTUFBYSxtQkFBb0IsU0FBUSxHQUFHLENBQUMsUUFBUTtJQVdqRDs7OztPQUlHO0lBQ0gsWUFBWSxLQUFvQixFQUFFLEVBQVUsRUFBRSxLQUErQixFQUFFLG1DQUEyQyxJQUFJO1FBQzFILEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDakIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUM7UUFDYixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsZ0NBQWdDLEdBQUcsZ0NBQWdDLENBQUM7UUFFekUsTUFBTSxzQkFBc0IsR0FBRyxJQUFJLDJDQUFzQixDQUFDLElBQUksRUFBRSxFQUFFLEVBQUc7WUFDakUsZUFBZSxFQUFFLEtBQUssQ0FBQyxlQUFlO1lBQ3RDLHVCQUF1QixFQUFFLEtBQUssQ0FBQyx1QkFBdUI7WUFDdEQsV0FBVyxFQUFFLEtBQUssQ0FBQyxXQUFXO1lBQzlCLFVBQVUsRUFBRSxLQUFLLENBQUMsVUFBVTtZQUM1QixXQUFXLEVBQUUsS0FBSyxDQUFDLFdBQVc7U0FDakMsRUFBRSxnQ0FBZ0MsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7UUFDcEYsSUFBSSxDQUFDLFFBQVEsR0FBRyxzQkFBc0IsQ0FBQztRQUN2QyxJQUFJLENBQUMseUJBQXlCLEdBQUcsc0JBQXNCLENBQUMseUJBQXlCLENBQUM7SUFDdEYsQ0FBQztDQUNKO0FBakNELGtEQWlDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHJvcyBmcm9tICdAYWxpY2xvdWQvcm9zLWNkay1jb3JlJztcbmltcG9ydCB7IFJvc0FjY2Vzc0NvbmZpZ3VyYXRpb24gfSBmcm9tICcuL2Nsb3Vkc3NvLmdlbmVyYXRlZCc7XG4vLyBHZW5lcmF0ZWQgZnJvbSB0aGUgQWxpQ2xvdWQgUk9TIFJlc291cmNlIFNwZWNpZmljYXRpb25cbmV4cG9ydCB7IFJvc0FjY2Vzc0NvbmZpZ3VyYXRpb24gYXMgQWNjZXNzQ29uZmlndXJhdGlvblByb3BlcnR5IH07XG5cbi8qKlxuICogUHJvcGVydGllcyBmb3IgZGVmaW5pbmcgYSBgQWNjZXNzQ29uZmlndXJhdGlvbmAuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2FsaXl1bi1jbG91ZHNzby1hY2Nlc3Njb25maWd1cmF0aW9uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQWNjZXNzQ29uZmlndXJhdGlvblByb3BzIHtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGFjY2Vzc0NvbmZpZ3VyYXRpb25OYW1lOiBUaGUgbmFtZSBvZiB0aGUgYWNjZXNzIGNvbmZpZ3VyYXRpb24uXG4gICAgICogVGhlIG5hbWUgY2FuIGNvbnRhaW4gbGV0dGVycywgZGlnaXRzLCBhbmQgaHlwaGVucyAoLSkuXG4gICAgICogVGhlIG5hbWUgY2FuIGJlIHVwIHRvIDMyIGNoYXJhY3RlcnMgaW4gbGVuZ3RoLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGFjY2Vzc0NvbmZpZ3VyYXRpb25OYW1lOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBkaXJlY3RvcnlJZDogVGhlIElEIG9mIHRoZSBkaXJlY3RvcnkuXG4gICAgICovXG4gICAgcmVhZG9ubHkgZGlyZWN0b3J5SWQ6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGRlc2NyaXB0aW9uOiBUaGUgZGVzY3JpcHRpb24gb2YgdGhlIGFjY2VzcyBjb25maWd1cmF0aW9uLlxuICAgICAqIFRoZSBkZXNjcmlwdGlvbiBjYW4gYmUgdXAgdG8gMSwwMjQgY2hhcmFjdGVycyBpbiBsZW5ndGguXG4gICAgICovXG4gICAgcmVhZG9ubHkgZGVzY3JpcHRpb24/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSByZWxheVN0YXRlOiBUaGUgaW5pdGlhbCB3ZWIgcGFnZSB0aGF0IGlzIGRpc3BsYXllZCBhZnRlciBhIENsb3VkU1NPIHVzZXIgYWNjZXNzZXMgYW4gYWNjb3VudCBpbiB5b3VyIHJlc291cmNlIGRpcmVjdG9yeSBieSB1c2luZyB0aGUgYWNjZXNzIGNvbmZpZ3VyYXRpb24uXG4gICAgICogVGhlIHdlYiBwYWdlIG11c3QgYmUgYSBwYWdlIG9mIHRoZSBBbGliYWJhIENsb3VkIE1hbmFnZW1lbnQgQ29uc29sZS4gQnkgZGVmYXVsdCwgdGhpcyBwYXJhbWV0ZXIgaXMgZW1wdHksIHdoaWNoIGluZGljYXRlcyB0aGF0IHRoZSBpbml0aWFsIHdlYiBwYWdlIGlzIHRoZSBob21lcGFnZSBvZiB0aGUgQWxpYmFiYSBDbG91ZCBNYW5hZ2VtZW50IENvbnNvbGUuXG4gICAgICovXG4gICAgcmVhZG9ubHkgcmVsYXlTdGF0ZT86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHNlc3Npb25EdXJhdGlvbjogVGhlIGR1cmF0aW9uIG9mIGEgc2Vzc2lvbiBpbiB3aGljaCBhIENsb3VkU1NPIHVzZXIgYWNjZXNzZXMgYW4gYWNjb3VudCBpbiB5b3VyIHJlc291cmNlIGRpcmVjdG9yeSBieSB1c2luZyB0aGUgYWNjZXNzIGNvbmZpZ3VyYXRpb24uXG4gICAgICogVW5pdDogc2Vjb25kcy5cbiAgICAgKiBWYWxpZCB2YWx1ZXM6IDkwMCB0byA0MzIwMC4gVGhlIHZhbHVlIDkwMCBpbmRpY2F0ZXMgMTUgbWludXRlcy4gVGhlIHZhbHVlIDQzMjAwIGluZGljYXRlcyAxMiBob3Vycy5cbiAgICAgKiBEZWZhdWx0IHZhbHVlOiAzNjAwLiBUaGUgdmFsdWUgaW5kaWNhdGVzIDEgaG91ci5cbiAgICAgKi9cbiAgICByZWFkb25seSBzZXNzaW9uRHVyYXRpb24/OiBudW1iZXIgfCByb3MuSVJlc29sdmFibGU7XG59XG5cbi8qKlxuICogVGhpcyBjbGFzcyBlbmNhcHN1bGF0ZXMgYW5kIGV4dGVuZHMgdGhlIFJPUyByZXNvdXJjZSB0eXBlIGBBTElZVU46OkNsb3VkU1NPOjpBY2Nlc3NDb25maWd1cmF0aW9uYCwgd2hpY2ggaXMgdXNlZCB0byBjcmVhdGUgYW4gYWNjZXNzIGNvbmZpZ3VyYXRpb24uXG4gKiBATm90ZSBUaGlzIGNsYXNzIG1heSBoYXZlIHNvbWUgbmV3IGZ1bmN0aW9ucyB0byBmYWNpbGl0YXRlIGRldmVsb3BtZW50LCBzbyBpdCBpcyByZWNvbW1lbmRlZCB0byB1c2UgdGhpcyBjbGFzcyBpbnN0ZWFkIG9mIGBSb3NBY2Nlc3NDb25maWd1cmF0aW9uYGZvciBhIG1vcmUgY29udmVuaWVudCBkZXZlbG9wbWVudCBleHBlcmllbmNlLlxuICogU2VlIGh0dHBzOi8vd3d3LmFsaWJhYmFjbG91ZC5jb20vaGVscC9yb3MvZGV2ZWxvcGVyLXJlZmVyZW5jZS9hbGl5dW4tY2xvdWRzc28tYWNjZXNzY29uZmlndXJhdGlvblxuICovXG5leHBvcnQgY2xhc3MgQWNjZXNzQ29uZmlndXJhdGlvbiBleHRlbmRzIHJvcy5SZXNvdXJjZSB7XG4gICAgcHJvdGVjdGVkIHNjb3BlOiByb3MuQ29uc3RydWN0O1xuICAgIHByb3RlY3RlZCBpZDogc3RyaW5nO1xuICAgIHByb3RlY3RlZCBwcm9wczogQWNjZXNzQ29uZmlndXJhdGlvblByb3BzO1xuICAgIHByb3RlY3RlZCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBBY2Nlc3NDb25maWd1cmF0aW9uSWQ6IFRoZSBJRCBvZiB0aGUgYWNjZXNzIGNvbmZpZ3VyYXRpb24uXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJBY2Nlc3NDb25maWd1cmF0aW9uSWQ6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFBhcmFtIHNjb3BlIC0gc2NvcGUgaW4gd2hpY2ggdGhpcyByZXNvdXJjZSBpcyBkZWZpbmVkXG4gICAgICogUGFyYW0gaWQgICAgLSBzY29wZWQgaWQgb2YgdGhlIHJlc291cmNlXG4gICAgICogUGFyYW0gcHJvcHMgLSByZXNvdXJjZSBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IHJvcy5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBBY2Nlc3NDb25maWd1cmF0aW9uUHJvcHMsIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OmJvb2xlYW4gPSB0cnVlKSB7XG4gICAgICAgIHN1cGVyKHNjb3BlLCBpZCk7XG4gICAgICAgIHRoaXMuc2NvcGUgPSBzY29wZTtcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xuICAgICAgICB0aGlzLnByb3BzID0gcHJvcHM7XG4gICAgICAgIHRoaXMuZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgPSBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDtcblxuICAgICAgICBjb25zdCByb3NBY2Nlc3NDb25maWd1cmF0aW9uID0gbmV3IFJvc0FjY2Vzc0NvbmZpZ3VyYXRpb24odGhpcywgaWQsICB7XG4gICAgICAgICAgICBzZXNzaW9uRHVyYXRpb246IHByb3BzLnNlc3Npb25EdXJhdGlvbixcbiAgICAgICAgICAgIGFjY2Vzc0NvbmZpZ3VyYXRpb25OYW1lOiBwcm9wcy5hY2Nlc3NDb25maWd1cmF0aW9uTmFtZSxcbiAgICAgICAgICAgIGRpcmVjdG9yeUlkOiBwcm9wcy5kaXJlY3RvcnlJZCxcbiAgICAgICAgICAgIHJlbGF5U3RhdGU6IHByb3BzLnJlbGF5U3RhdGUsXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogcHJvcHMuZGVzY3JpcHRpb24sXG4gICAgICAgIH0sIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ICYmIHRoaXMuc3RhY2suZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQpO1xuICAgICAgICB0aGlzLnJlc291cmNlID0gcm9zQWNjZXNzQ29uZmlndXJhdGlvbjtcbiAgICAgICAgdGhpcy5hdHRyQWNjZXNzQ29uZmlndXJhdGlvbklkID0gcm9zQWNjZXNzQ29uZmlndXJhdGlvbi5hdHRyQWNjZXNzQ29uZmlndXJhdGlvbklkO1xuICAgIH1cbn1cbiJdfQ==