"use strict";
// Generated from the AliCloud ROS Resource Specification
Object.defineProperty(exports, "__esModule", { value: true });
exports.RosServiceLog = exports.RosSavedsearch = exports.RosProject = exports.RosMetricStore = exports.RosMachineGroup = exports.RosLogtailConfig = exports.RosLogstore = exports.RosIndex = exports.RosEtl = exports.RosDashboard = exports.RosAudit = exports.RosApplyConfigToMachineGroup = exports.RosAlert = void 0;
const ros = require("@alicloud/ros-cdk-core");
/**
 * Determine whether the given properties match those of a `RosAlertProps`
 *
 * @param properties - the TypeScript properties of a `RosAlertProps`
 *
 * @returns the result of the validation.
 */
function RosAlertPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('project', ros.requiredValidator)(properties.project));
    if (properties.project && (Array.isArray(properties.project) || (typeof properties.project) === 'string')) {
        errors.collect(ros.propertyValidator('project', ros.validateLength)({
            data: properties.project.length,
            min: 3,
            max: 63,
        }));
    }
    if (properties.project && (typeof properties.project) !== 'object') {
        errors.collect(ros.propertyValidator('project', ros.validateAllowedPattern)({
            data: properties.project,
            reg: /^[a-zA-Z0-9_-]+$/
        }));
    }
    errors.collect(ros.propertyValidator('project', ros.validateString)(properties.project));
    errors.collect(ros.propertyValidator('detail', ros.requiredValidator)(properties.detail));
    errors.collect(ros.propertyValidator('detail', RosAlert_DetailPropertyValidator)(properties.detail));
    return errors.wrap('supplied properties not correct for "RosAlertProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::SLS::Alert` resource
 *
 * @param properties - the TypeScript properties of a `RosAlertProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::SLS::Alert` resource.
 */
// @ts-ignore TS6133
function rosAlertPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosAlertPropsValidator(properties).assertSuccess();
    }
    return {
        Detail: rosAlertDetailPropertyToRosTemplate(properties.detail),
        Project: ros.stringToRosTemplate(properties.project),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::SLS::Alert`, which is used to create an alert rule.
 * @Note This class does not contain additional functions, so it is recommended to use the `Alert` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-sls-alert
 */
class RosAlert extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosAlert.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrName = this.getAtt('Name');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.detail = props.detail;
        this.project = props.project;
    }
    get rosProperties() {
        return {
            detail: this.detail,
            project: this.project,
        };
    }
    renderProperties(props) {
        return rosAlertPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosAlert = RosAlert;
/**
 * The resource type name for this resource class.
 */
RosAlert.ROS_RESOURCE_TYPE_NAME = "ALIYUN::SLS::Alert";
/**
 * Determine whether the given properties match those of a `AnnotationsProperty`
 *
 * @param properties - the TypeScript properties of a `AnnotationsProperty`
 *
 * @returns the result of the validation.
 */
function RosAlert_AnnotationsPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('value', ros.requiredValidator)(properties.value));
    errors.collect(ros.propertyValidator('value', ros.validateString)(properties.value));
    errors.collect(ros.propertyValidator('key', ros.requiredValidator)(properties.key));
    errors.collect(ros.propertyValidator('key', ros.validateString)(properties.key));
    return errors.wrap('supplied properties not correct for "AnnotationsProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::SLS::Alert.Annotations` resource
 *
 * @param properties - the TypeScript properties of a `AnnotationsProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::SLS::Alert.Annotations` resource.
 */
// @ts-ignore TS6133
function rosAlertAnnotationsPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosAlert_AnnotationsPropertyValidator(properties).assertSuccess();
    return {
        Value: ros.stringToRosTemplate(properties.value),
        Key: ros.stringToRosTemplate(properties.key),
    };
}
/**
 * Determine whether the given properties match those of a `ConfigurationProperty`
 *
 * @param properties - the TypeScript properties of a `ConfigurationProperty`
 *
 * @returns the result of the validation.
 */
function RosAlert_ConfigurationPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('throttling', ros.validateString)(properties.throttling));
    errors.collect(ros.propertyValidator('condition', ros.validateString)(properties.condition));
    errors.collect(ros.propertyValidator('autoAnnotation', ros.validateBoolean)(properties.autoAnnotation));
    errors.collect(ros.propertyValidator('severityConfigurations', ros.listValidator(RosAlert_SeverityConfigurationsPropertyValidator))(properties.severityConfigurations));
    errors.collect(ros.propertyValidator('noDataFire', ros.validateBoolean)(properties.noDataFire));
    errors.collect(ros.propertyValidator('notificationList', ros.listValidator(RosAlert_NotificationListPropertyValidator))(properties.notificationList));
    errors.collect(ros.propertyValidator('notifyThreshold', ros.validateNumber)(properties.notifyThreshold));
    errors.collect(ros.propertyValidator('muteUntil', ros.validateNumber)(properties.muteUntil));
    errors.collect(ros.propertyValidator('dashboard', ros.requiredValidator)(properties.dashboard));
    errors.collect(ros.propertyValidator('dashboard', ros.validateString)(properties.dashboard));
    errors.collect(ros.propertyValidator('labels', ros.listValidator(RosAlert_LabelsPropertyValidator))(properties.labels));
    errors.collect(ros.propertyValidator('groupConfiguration', RosAlert_GroupConfigurationPropertyValidator)(properties.groupConfiguration));
    if (properties.noDataSeverity && (typeof properties.noDataSeverity) !== 'object') {
        errors.collect(ros.propertyValidator('noDataSeverity', ros.validateAllowedValues)({
            data: properties.noDataSeverity,
            allowedValues: [2, 4, 6, 8, 10],
        }));
    }
    errors.collect(ros.propertyValidator('noDataSeverity', ros.validateNumber)(properties.noDataSeverity));
    errors.collect(ros.propertyValidator('type', ros.validateString)(properties.type));
    errors.collect(ros.propertyValidator('annotations', ros.listValidator(RosAlert_AnnotationsPropertyValidator))(properties.annotations));
    errors.collect(ros.propertyValidator('version', ros.validateString)(properties.version));
    errors.collect(ros.propertyValidator('joinConfigurations', ros.listValidator(RosAlert_JoinConfigurationsPropertyValidator))(properties.joinConfigurations));
    errors.collect(ros.propertyValidator('policyConfiguration', RosAlert_PolicyConfigurationPropertyValidator)(properties.policyConfiguration));
    errors.collect(ros.propertyValidator('queryList', ros.requiredValidator)(properties.queryList));
    errors.collect(ros.propertyValidator('queryList', ros.listValidator(RosAlert_QueryListPropertyValidator))(properties.queryList));
    errors.collect(ros.propertyValidator('sendResolved', ros.validateBoolean)(properties.sendResolved));
    errors.collect(ros.propertyValidator('threshold', ros.validateNumber)(properties.threshold));
    return errors.wrap('supplied properties not correct for "ConfigurationProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::SLS::Alert.Configuration` resource
 *
 * @param properties - the TypeScript properties of a `ConfigurationProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::SLS::Alert.Configuration` resource.
 */
// @ts-ignore TS6133
function rosAlertConfigurationPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosAlert_ConfigurationPropertyValidator(properties).assertSuccess();
    return {
        Throttling: ros.stringToRosTemplate(properties.throttling),
        Condition: ros.stringToRosTemplate(properties.condition),
        AutoAnnotation: ros.booleanToRosTemplate(properties.autoAnnotation),
        SeverityConfigurations: ros.listMapper(rosAlertSeverityConfigurationsPropertyToRosTemplate)(properties.severityConfigurations),
        NoDataFire: ros.booleanToRosTemplate(properties.noDataFire),
        NotificationList: ros.listMapper(rosAlertNotificationListPropertyToRosTemplate)(properties.notificationList),
        NotifyThreshold: ros.numberToRosTemplate(properties.notifyThreshold),
        MuteUntil: ros.numberToRosTemplate(properties.muteUntil),
        Dashboard: ros.stringToRosTemplate(properties.dashboard),
        Labels: ros.listMapper(rosAlertLabelsPropertyToRosTemplate)(properties.labels),
        GroupConfiguration: rosAlertGroupConfigurationPropertyToRosTemplate(properties.groupConfiguration),
        NoDataSeverity: ros.numberToRosTemplate(properties.noDataSeverity),
        Type: ros.stringToRosTemplate(properties.type),
        Annotations: ros.listMapper(rosAlertAnnotationsPropertyToRosTemplate)(properties.annotations),
        Version: ros.stringToRosTemplate(properties.version),
        JoinConfigurations: ros.listMapper(rosAlertJoinConfigurationsPropertyToRosTemplate)(properties.joinConfigurations),
        PolicyConfiguration: rosAlertPolicyConfigurationPropertyToRosTemplate(properties.policyConfiguration),
        QueryList: ros.listMapper(rosAlertQueryListPropertyToRosTemplate)(properties.queryList),
        SendResolved: ros.booleanToRosTemplate(properties.sendResolved),
        Threshold: ros.numberToRosTemplate(properties.threshold),
    };
}
/**
 * Determine whether the given properties match those of a `DetailProperty`
 *
 * @param properties - the TypeScript properties of a `DetailProperty`
 *
 * @returns the result of the validation.
 */
function RosAlert_DetailPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('type', ros.validateString)(properties.type));
    errors.collect(ros.propertyValidator('description', ros.validateString)(properties.description));
    errors.collect(ros.propertyValidator('configuration', ros.requiredValidator)(properties.configuration));
    errors.collect(ros.propertyValidator('configuration', RosAlert_ConfigurationPropertyValidator)(properties.configuration));
    errors.collect(ros.propertyValidator('state', ros.validateString)(properties.state));
    errors.collect(ros.propertyValidator('schedule', ros.requiredValidator)(properties.schedule));
    errors.collect(ros.propertyValidator('schedule', RosAlert_SchedulePropertyValidator)(properties.schedule));
    errors.collect(ros.propertyValidator('displayName', ros.requiredValidator)(properties.displayName));
    if (properties.displayName && (Array.isArray(properties.displayName) || (typeof properties.displayName) === 'string')) {
        errors.collect(ros.propertyValidator('displayName', ros.validateLength)({
            data: properties.displayName.length,
            min: 1,
            max: 64,
        }));
    }
    errors.collect(ros.propertyValidator('displayName', ros.validateString)(properties.displayName));
    errors.collect(ros.propertyValidator('name', ros.requiredValidator)(properties.name));
    errors.collect(ros.propertyValidator('name', ros.validateString)(properties.name));
    return errors.wrap('supplied properties not correct for "DetailProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::SLS::Alert.Detail` resource
 *
 * @param properties - the TypeScript properties of a `DetailProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::SLS::Alert.Detail` resource.
 */
// @ts-ignore TS6133
function rosAlertDetailPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosAlert_DetailPropertyValidator(properties).assertSuccess();
    return {
        Type: ros.stringToRosTemplate(properties.type),
        Description: ros.stringToRosTemplate(properties.description),
        Configuration: rosAlertConfigurationPropertyToRosTemplate(properties.configuration),
        State: ros.stringToRosTemplate(properties.state),
        Schedule: rosAlertSchedulePropertyToRosTemplate(properties.schedule),
        DisplayName: ros.stringToRosTemplate(properties.displayName),
        Name: ros.stringToRosTemplate(properties.name),
    };
}
/**
 * Determine whether the given properties match those of a `EvalConditionProperty`
 *
 * @param properties - the TypeScript properties of a `EvalConditionProperty`
 *
 * @returns the result of the validation.
 */
function RosAlert_EvalConditionPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('condition', ros.validateString)(properties.condition));
    errors.collect(ros.propertyValidator('countCondition', ros.validateString)(properties.countCondition));
    return errors.wrap('supplied properties not correct for "EvalConditionProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::SLS::Alert.EvalCondition` resource
 *
 * @param properties - the TypeScript properties of a `EvalConditionProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::SLS::Alert.EvalCondition` resource.
 */
// @ts-ignore TS6133
function rosAlertEvalConditionPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosAlert_EvalConditionPropertyValidator(properties).assertSuccess();
    return {
        Condition: ros.stringToRosTemplate(properties.condition),
        CountCondition: ros.stringToRosTemplate(properties.countCondition),
    };
}
/**
 * Determine whether the given properties match those of a `GroupConfigurationProperty`
 *
 * @param properties - the TypeScript properties of a `GroupConfigurationProperty`
 *
 * @returns the result of the validation.
 */
function RosAlert_GroupConfigurationPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('type', ros.requiredValidator)(properties.type));
    if (properties.type && (typeof properties.type) !== 'object') {
        errors.collect(ros.propertyValidator('type', ros.validateAllowedValues)({
            data: properties.type,
            allowedValues: ["no_group", "labels_auto", "custom"],
        }));
    }
    errors.collect(ros.propertyValidator('type', ros.validateString)(properties.type));
    errors.collect(ros.propertyValidator('fields', ros.listValidator(ros.validateString))(properties.fields));
    return errors.wrap('supplied properties not correct for "GroupConfigurationProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::SLS::Alert.GroupConfiguration` resource
 *
 * @param properties - the TypeScript properties of a `GroupConfigurationProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::SLS::Alert.GroupConfiguration` resource.
 */
// @ts-ignore TS6133
function rosAlertGroupConfigurationPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosAlert_GroupConfigurationPropertyValidator(properties).assertSuccess();
    return {
        Type: ros.stringToRosTemplate(properties.type),
        Fields: ros.listMapper(ros.stringToRosTemplate)(properties.fields),
    };
}
/**
 * Determine whether the given properties match those of a `JoinConfigurationsProperty`
 *
 * @param properties - the TypeScript properties of a `JoinConfigurationsProperty`
 *
 * @returns the result of the validation.
 */
function RosAlert_JoinConfigurationsPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('condition', ros.validateString)(properties.condition));
    errors.collect(ros.propertyValidator('type', ros.requiredValidator)(properties.type));
    if (properties.type && (typeof properties.type) !== 'object') {
        errors.collect(ros.propertyValidator('type', ros.validateAllowedValues)({
            data: properties.type,
            allowedValues: ["cross_join", "inner_join", "left_join", "right_join", "full_join", "left_exclude", "right_exclude", "concat", "no_join"],
        }));
    }
    errors.collect(ros.propertyValidator('type', ros.validateString)(properties.type));
    return errors.wrap('supplied properties not correct for "JoinConfigurationsProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::SLS::Alert.JoinConfigurations` resource
 *
 * @param properties - the TypeScript properties of a `JoinConfigurationsProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::SLS::Alert.JoinConfigurations` resource.
 */
// @ts-ignore TS6133
function rosAlertJoinConfigurationsPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosAlert_JoinConfigurationsPropertyValidator(properties).assertSuccess();
    return {
        Condition: ros.stringToRosTemplate(properties.condition),
        Type: ros.stringToRosTemplate(properties.type),
    };
}
/**
 * Determine whether the given properties match those of a `LabelsProperty`
 *
 * @param properties - the TypeScript properties of a `LabelsProperty`
 *
 * @returns the result of the validation.
 */
function RosAlert_LabelsPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('value', ros.requiredValidator)(properties.value));
    errors.collect(ros.propertyValidator('value', ros.validateString)(properties.value));
    errors.collect(ros.propertyValidator('key', ros.requiredValidator)(properties.key));
    errors.collect(ros.propertyValidator('key', ros.validateString)(properties.key));
    return errors.wrap('supplied properties not correct for "LabelsProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::SLS::Alert.Labels` resource
 *
 * @param properties - the TypeScript properties of a `LabelsProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::SLS::Alert.Labels` resource.
 */
// @ts-ignore TS6133
function rosAlertLabelsPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosAlert_LabelsPropertyValidator(properties).assertSuccess();
    return {
        Value: ros.stringToRosTemplate(properties.value),
        Key: ros.stringToRosTemplate(properties.key),
    };
}
/**
 * Determine whether the given properties match those of a `NotificationListProperty`
 *
 * @param properties - the TypeScript properties of a `NotificationListProperty`
 *
 * @returns the result of the validation.
 */
function RosAlert_NotificationListPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('type', ros.requiredValidator)(properties.type));
    errors.collect(ros.propertyValidator('type', ros.validateString)(properties.type));
    errors.collect(ros.propertyValidator('mobileList', ros.listValidator(ros.validateAny))(properties.mobileList));
    errors.collect(ros.propertyValidator('serviceUri', ros.validateString)(properties.serviceUri));
    errors.collect(ros.propertyValidator('content', ros.validateString)(properties.content));
    errors.collect(ros.propertyValidator('headers', ros.hashValidator(ros.validateAny))(properties.headers));
    errors.collect(ros.propertyValidator('emailList', ros.listValidator(ros.validateAny))(properties.emailList));
    errors.collect(ros.propertyValidator('method', ros.validateString)(properties.method));
    return errors.wrap('supplied properties not correct for "NotificationListProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::SLS::Alert.NotificationList` resource
 *
 * @param properties - the TypeScript properties of a `NotificationListProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::SLS::Alert.NotificationList` resource.
 */
// @ts-ignore TS6133
function rosAlertNotificationListPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosAlert_NotificationListPropertyValidator(properties).assertSuccess();
    return {
        Type: ros.stringToRosTemplate(properties.type),
        MobileList: ros.listMapper(ros.objectToRosTemplate)(properties.mobileList),
        ServiceUri: ros.stringToRosTemplate(properties.serviceUri),
        Content: ros.stringToRosTemplate(properties.content),
        Headers: ros.hashMapper(ros.objectToRosTemplate)(properties.headers),
        EmailList: ros.listMapper(ros.objectToRosTemplate)(properties.emailList),
        Method: ros.stringToRosTemplate(properties.method),
    };
}
/**
 * Determine whether the given properties match those of a `PolicyConfigurationProperty`
 *
 * @param properties - the TypeScript properties of a `PolicyConfigurationProperty`
 *
 * @returns the result of the validation.
 */
function RosAlert_PolicyConfigurationPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('alertPolicyId', ros.validateString)(properties.alertPolicyId));
    errors.collect(ros.propertyValidator('actionPolicyId', ros.validateString)(properties.actionPolicyId));
    errors.collect(ros.propertyValidator('useDefault', ros.validateBoolean)(properties.useDefault));
    errors.collect(ros.propertyValidator('repeatInterval', ros.validateString)(properties.repeatInterval));
    return errors.wrap('supplied properties not correct for "PolicyConfigurationProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::SLS::Alert.PolicyConfiguration` resource
 *
 * @param properties - the TypeScript properties of a `PolicyConfigurationProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::SLS::Alert.PolicyConfiguration` resource.
 */
// @ts-ignore TS6133
function rosAlertPolicyConfigurationPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosAlert_PolicyConfigurationPropertyValidator(properties).assertSuccess();
    return {
        AlertPolicyId: ros.stringToRosTemplate(properties.alertPolicyId),
        ActionPolicyId: ros.stringToRosTemplate(properties.actionPolicyId),
        UseDefault: ros.booleanToRosTemplate(properties.useDefault),
        RepeatInterval: ros.stringToRosTemplate(properties.repeatInterval),
    };
}
/**
 * Determine whether the given properties match those of a `QueryListProperty`
 *
 * @param properties - the TypeScript properties of a `QueryListProperty`
 *
 * @returns the result of the validation.
 */
function RosAlert_QueryListPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('query', ros.requiredValidator)(properties.query));
    errors.collect(ros.propertyValidator('query', ros.validateString)(properties.query));
    errors.collect(ros.propertyValidator('logStore', ros.validateString)(properties.logStore));
    errors.collect(ros.propertyValidator('start', ros.requiredValidator)(properties.start));
    errors.collect(ros.propertyValidator('start', ros.validateString)(properties.start));
    errors.collect(ros.propertyValidator('timeSpanType', ros.requiredValidator)(properties.timeSpanType));
    errors.collect(ros.propertyValidator('timeSpanType', ros.validateString)(properties.timeSpanType));
    errors.collect(ros.propertyValidator('powerSqlMode', ros.validateString)(properties.powerSqlMode));
    errors.collect(ros.propertyValidator('store', ros.validateString)(properties.store));
    errors.collect(ros.propertyValidator('dashboardId', ros.validateString)(properties.dashboardId));
    errors.collect(ros.propertyValidator('roleArn', ros.validateString)(properties.roleArn));
    if (properties.storeType && (typeof properties.storeType) !== 'object') {
        errors.collect(ros.propertyValidator('storeType', ros.validateAllowedValues)({
            data: properties.storeType,
            allowedValues: ["log", "metric", "meta"],
        }));
    }
    errors.collect(ros.propertyValidator('storeType', ros.validateString)(properties.storeType));
    errors.collect(ros.propertyValidator('project', ros.validateString)(properties.project));
    errors.collect(ros.propertyValidator('region', ros.validateString)(properties.region));
    errors.collect(ros.propertyValidator('end', ros.requiredValidator)(properties.end));
    errors.collect(ros.propertyValidator('end', ros.validateString)(properties.end));
    errors.collect(ros.propertyValidator('chartTitle', ros.validateString)(properties.chartTitle));
    return errors.wrap('supplied properties not correct for "QueryListProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::SLS::Alert.QueryList` resource
 *
 * @param properties - the TypeScript properties of a `QueryListProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::SLS::Alert.QueryList` resource.
 */
// @ts-ignore TS6133
function rosAlertQueryListPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosAlert_QueryListPropertyValidator(properties).assertSuccess();
    return {
        Query: ros.stringToRosTemplate(properties.query),
        LogStore: ros.stringToRosTemplate(properties.logStore),
        Start: ros.stringToRosTemplate(properties.start),
        TimeSpanType: ros.stringToRosTemplate(properties.timeSpanType),
        PowerSqlMode: ros.stringToRosTemplate(properties.powerSqlMode),
        Store: ros.stringToRosTemplate(properties.store),
        DashboardId: ros.stringToRosTemplate(properties.dashboardId),
        RoleArn: ros.stringToRosTemplate(properties.roleArn),
        StoreType: ros.stringToRosTemplate(properties.storeType),
        Project: ros.stringToRosTemplate(properties.project),
        Region: ros.stringToRosTemplate(properties.region),
        End: ros.stringToRosTemplate(properties.end),
        ChartTitle: ros.stringToRosTemplate(properties.chartTitle),
    };
}
/**
 * Determine whether the given properties match those of a `ScheduleProperty`
 *
 * @param properties - the TypeScript properties of a `ScheduleProperty`
 *
 * @returns the result of the validation.
 */
function RosAlert_SchedulePropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('dayOfWeek', ros.validateNumber)(properties.dayOfWeek));
    errors.collect(ros.propertyValidator('type', ros.requiredValidator)(properties.type));
    errors.collect(ros.propertyValidator('type', ros.validateString)(properties.type));
    errors.collect(ros.propertyValidator('runImmediately', ros.validateBoolean)(properties.runImmediately));
    errors.collect(ros.propertyValidator('hour', ros.validateNumber)(properties.hour));
    errors.collect(ros.propertyValidator('cronExpression', ros.validateString)(properties.cronExpression));
    errors.collect(ros.propertyValidator('delay', ros.validateNumber)(properties.delay));
    errors.collect(ros.propertyValidator('interval', ros.validateString)(properties.interval));
    return errors.wrap('supplied properties not correct for "ScheduleProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::SLS::Alert.Schedule` resource
 *
 * @param properties - the TypeScript properties of a `ScheduleProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::SLS::Alert.Schedule` resource.
 */
// @ts-ignore TS6133
function rosAlertSchedulePropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosAlert_SchedulePropertyValidator(properties).assertSuccess();
    return {
        DayOfWeek: ros.numberToRosTemplate(properties.dayOfWeek),
        Type: ros.stringToRosTemplate(properties.type),
        RunImmediately: ros.booleanToRosTemplate(properties.runImmediately),
        Hour: ros.numberToRosTemplate(properties.hour),
        CronExpression: ros.stringToRosTemplate(properties.cronExpression),
        Delay: ros.numberToRosTemplate(properties.delay),
        Interval: ros.stringToRosTemplate(properties.interval),
    };
}
/**
 * Determine whether the given properties match those of a `SeverityConfigurationsProperty`
 *
 * @param properties - the TypeScript properties of a `SeverityConfigurationsProperty`
 *
 * @returns the result of the validation.
 */
function RosAlert_SeverityConfigurationsPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('severity', ros.requiredValidator)(properties.severity));
    errors.collect(ros.propertyValidator('severity', ros.validateNumber)(properties.severity));
    errors.collect(ros.propertyValidator('evalCondition', RosAlert_EvalConditionPropertyValidator)(properties.evalCondition));
    return errors.wrap('supplied properties not correct for "SeverityConfigurationsProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::SLS::Alert.SeverityConfigurations` resource
 *
 * @param properties - the TypeScript properties of a `SeverityConfigurationsProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::SLS::Alert.SeverityConfigurations` resource.
 */
// @ts-ignore TS6133
function rosAlertSeverityConfigurationsPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosAlert_SeverityConfigurationsPropertyValidator(properties).assertSuccess();
    return {
        Severity: ros.numberToRosTemplate(properties.severity),
        EvalCondition: rosAlertEvalConditionPropertyToRosTemplate(properties.evalCondition),
    };
}
/**
 * Determine whether the given properties match those of a `RosApplyConfigToMachineGroupProps`
 *
 * @param properties - the TypeScript properties of a `RosApplyConfigToMachineGroupProps`
 *
 * @returns the result of the validation.
 */
function RosApplyConfigToMachineGroupPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('groupName', ros.validateString)(properties.groupName));
    errors.collect(ros.propertyValidator('configName', ros.validateString)(properties.configName));
    errors.collect(ros.propertyValidator('projectName', ros.validateString)(properties.projectName));
    return errors.wrap('supplied properties not correct for "RosApplyConfigToMachineGroupProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::SLS::ApplyConfigToMachineGroup` resource
 *
 * @param properties - the TypeScript properties of a `RosApplyConfigToMachineGroupProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::SLS::ApplyConfigToMachineGroup` resource.
 */
// @ts-ignore TS6133
function rosApplyConfigToMachineGroupPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosApplyConfigToMachineGroupPropsValidator(properties).assertSuccess();
    }
    return {
        ConfigName: ros.stringToRosTemplate(properties.configName),
        GroupName: ros.stringToRosTemplate(properties.groupName),
        ProjectName: ros.stringToRosTemplate(properties.projectName),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::SLS::ApplyConfigToMachineGroup`, which is used to apply Log Service configurations to machine groups.
 * @Note This class does not contain additional functions, so it is recommended to use the `ApplyConfigToMachineGroup` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-sls-applyconfigtomachinegroup
 */
class RosApplyConfigToMachineGroup extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosApplyConfigToMachineGroup.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.configName = props.configName;
        this.groupName = props.groupName;
        this.projectName = props.projectName;
    }
    get rosProperties() {
        return {
            configName: this.configName,
            groupName: this.groupName,
            projectName: this.projectName,
        };
    }
    renderProperties(props) {
        return rosApplyConfigToMachineGroupPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosApplyConfigToMachineGroup = RosApplyConfigToMachineGroup;
/**
 * The resource type name for this resource class.
 */
RosApplyConfigToMachineGroup.ROS_RESOURCE_TYPE_NAME = "ALIYUN::SLS::ApplyConfigToMachineGroup";
/**
 * Determine whether the given properties match those of a `RosAuditProps`
 *
 * @param properties - the TypeScript properties of a `RosAuditProps`
 *
 * @returns the result of the validation.
 */
function RosAuditPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('variableMap', ros.requiredValidator)(properties.variableMap));
    errors.collect(ros.propertyValidator('variableMap', RosAudit_VariableMapPropertyValidator)(properties.variableMap));
    errors.collect(ros.propertyValidator('displayName', ros.requiredValidator)(properties.displayName));
    if (properties.displayName && (Array.isArray(properties.displayName) || (typeof properties.displayName) === 'string')) {
        errors.collect(ros.propertyValidator('displayName', ros.validateLength)({
            data: properties.displayName.length,
            min: undefined,
            max: 128,
        }));
    }
    errors.collect(ros.propertyValidator('displayName', ros.validateString)(properties.displayName));
    if (properties.multiAccount && (Array.isArray(properties.multiAccount) || (typeof properties.multiAccount) === 'string')) {
        errors.collect(ros.propertyValidator('multiAccount', ros.validateLength)({
            data: properties.multiAccount.length,
            min: 0,
            max: 100,
        }));
    }
    errors.collect(ros.propertyValidator('multiAccount', ros.listValidator(ros.validateString))(properties.multiAccount));
    return errors.wrap('supplied properties not correct for "RosAuditProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::SLS::Audit` resource
 *
 * @param properties - the TypeScript properties of a `RosAuditProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::SLS::Audit` resource.
 */
// @ts-ignore TS6133
function rosAuditPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosAuditPropsValidator(properties).assertSuccess();
    }
    return {
        DisplayName: ros.stringToRosTemplate(properties.displayName),
        VariableMap: rosAuditVariableMapPropertyToRosTemplate(properties.variableMap),
        MultiAccount: ros.listMapper(ros.stringToRosTemplate)(properties.multiAccount),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::SLS::Audit`, which is used to configure Log Audit Service.
 * @Note This class does not contain additional functions, so it is recommended to use the `Audit` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-sls-audit
 */
class RosAudit extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosAudit.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrDisplayName = this.getAtt('DisplayName');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.displayName = props.displayName;
        this.variableMap = props.variableMap;
        this.multiAccount = props.multiAccount;
    }
    get rosProperties() {
        return {
            displayName: this.displayName,
            variableMap: this.variableMap,
            multiAccount: this.multiAccount,
        };
    }
    renderProperties(props) {
        return rosAuditPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosAudit = RosAudit;
/**
 * The resource type name for this resource class.
 */
RosAudit.ROS_RESOURCE_TYPE_NAME = "ALIYUN::SLS::Audit";
/**
 * Determine whether the given properties match those of a `VariableMapProperty`
 *
 * @param properties - the TypeScript properties of a `VariableMapProperty`
 *
 * @returns the result of the validation.
 */
function RosAudit_VariableMapPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('polardbPerfPolicySetting', ros.listValidator(ros.validateAny))(properties.polardbPerfPolicySetting));
    errors.collect(ros.propertyValidator('wafEnabled', ros.validateBoolean)(properties.wafEnabled));
    errors.collect(ros.propertyValidator('rdsPerfEnabled', ros.validateBoolean)(properties.rdsPerfEnabled));
    errors.collect(ros.propertyValidator('cpsCallbackCollectionPolicy', ros.validateString)(properties.cpsCallbackCollectionPolicy));
    errors.collect(ros.propertyValidator('redisAuditTiEnabled', ros.validateBoolean)(properties.redisAuditTiEnabled));
    errors.collect(ros.propertyValidator('rdsPerfTiEnabled', ros.validateBoolean)(properties.rdsPerfTiEnabled));
    errors.collect(ros.propertyValidator('rdsSlowPolicySetting', ros.listValidator(ros.validateAny))(properties.rdsSlowPolicySetting));
    errors.collect(ros.propertyValidator('k8SIngressTtl', ros.validateNumber)(properties.k8SIngressTtl));
    errors.collect(ros.propertyValidator('ossSyncEnabled', ros.validateBoolean)(properties.ossSyncEnabled));
    errors.collect(ros.propertyValidator('rdsAuditCollectionPolicy', ros.validateString)(properties.rdsAuditCollectionPolicy));
    errors.collect(ros.propertyValidator('bastionAuditCollectionPolicy', ros.validateString)(properties.bastionAuditCollectionPolicy));
    errors.collect(ros.propertyValidator('bastionEnabled', ros.validateBoolean)(properties.bastionEnabled));
    errors.collect(ros.propertyValidator('redisSyncTtl', ros.validateNumber)(properties.redisSyncTtl));
    errors.collect(ros.propertyValidator('rdsEnabled', ros.validateBoolean)(properties.rdsEnabled));
    errors.collect(ros.propertyValidator('sasSessionEnabled', ros.validateBoolean)(properties.sasSessionEnabled));
    errors.collect(ros.propertyValidator('rdsAuditPolicySetting', ros.listValidator(ros.validateAny))(properties.rdsAuditPolicySetting));
    errors.collect(ros.propertyValidator('ddosCooAccessTtl', ros.validateNumber)(properties.ddosCooAccessTtl));
    errors.collect(ros.propertyValidator('bastionTtl', ros.validateNumber)(properties.bastionTtl));
    errors.collect(ros.propertyValidator('rdsSlowEnabled', ros.validateBoolean)(properties.rdsSlowEnabled));
    errors.collect(ros.propertyValidator('wafAccessCollectionPolicy', ros.validateString)(properties.wafAccessCollectionPolicy));
    errors.collect(ros.propertyValidator('k8SAuditTtl', ros.validateNumber)(properties.k8SAuditTtl));
    errors.collect(ros.propertyValidator('polardbTtl', ros.validateNumber)(properties.polardbTtl));
    errors.collect(ros.propertyValidator('drdsAuditCollectionPolicy', ros.validateString)(properties.drdsAuditCollectionPolicy));
    errors.collect(ros.propertyValidator('slbAccessCollectionPolicy', ros.validateString)(properties.slbAccessCollectionPolicy));
    errors.collect(ros.propertyValidator('sasSnapshotPortEnabled', ros.validateBoolean)(properties.sasSnapshotPortEnabled));
    errors.collect(ros.propertyValidator('rdsSlowTtl', ros.validateNumber)(properties.rdsSlowTtl));
    errors.collect(ros.propertyValidator('polardbEnabled', ros.validateBoolean)(properties.polardbEnabled));
    errors.collect(ros.propertyValidator('sasSnapshotProcessEnabled', ros.validateBoolean)(properties.sasSnapshotProcessEnabled));
    errors.collect(ros.propertyValidator('actiontrailTiEnabled', ros.validateBoolean)(properties.actiontrailTiEnabled));
    errors.collect(ros.propertyValidator('nasTiEnabled', ros.validateBoolean)(properties.nasTiEnabled));
    errors.collect(ros.propertyValidator('appconnectTiEnabled', ros.validateBoolean)(properties.appconnectTiEnabled));
    errors.collect(ros.propertyValidator('cpsTtl', ros.validateNumber)(properties.cpsTtl));
    errors.collect(ros.propertyValidator('slbSyncTtl', ros.validateNumber)(properties.slbSyncTtl));
    errors.collect(ros.propertyValidator('cloudfirewallAccessCollectionPolicy', ros.validateString)(properties.cloudfirewallAccessCollectionPolicy));
    errors.collect(ros.propertyValidator('ddosCooAccessEnabled', ros.validateBoolean)(properties.ddosCooAccessEnabled));
    errors.collect(ros.propertyValidator('k8SIngressTiEnabled', ros.validateBoolean)(properties.k8SIngressTiEnabled));
    errors.collect(ros.propertyValidator('drdsAuditTiEnabled', ros.validateBoolean)(properties.drdsAuditTiEnabled));
    errors.collect(ros.propertyValidator('sasSecurityVulEnabled', ros.validateBoolean)(properties.sasSecurityVulEnabled));
    errors.collect(ros.propertyValidator('polardbSlowPolicySetting', ros.listValidator(ros.validateAny))(properties.polardbSlowPolicySetting));
    errors.collect(ros.propertyValidator('k8SIngressCollectionPolicy', ros.validateString)(properties.k8SIngressCollectionPolicy));
    errors.collect(ros.propertyValidator('apigatewayTtl', ros.validateNumber)(properties.apigatewayTtl));
    errors.collect(ros.propertyValidator('cpsEnabled', ros.validateBoolean)(properties.cpsEnabled));
    errors.collect(ros.propertyValidator('rdsSlowCollectionPolicy', ros.validateString)(properties.rdsSlowCollectionPolicy));
    errors.collect(ros.propertyValidator('actiontrailOpenapiCollectionPolicy', ros.validateString)(properties.actiontrailOpenapiCollectionPolicy));
    errors.collect(ros.propertyValidator('rdsPerfPolicySetting', ros.listValidator(ros.validateAny))(properties.rdsPerfPolicySetting));
    errors.collect(ros.propertyValidator('cloudfirewallAccessPolicySetting', ros.listValidator(ros.validateAny))(properties.cloudfirewallAccessPolicySetting));
    errors.collect(ros.propertyValidator('ossAccessEnabled', ros.validateBoolean)(properties.ossAccessEnabled));
    errors.collect(ros.propertyValidator('cpsCallbackPolicySetting', ros.listValidator(ros.validateAny))(properties.cpsCallbackPolicySetting));
    errors.collect(ros.propertyValidator('slbAccessTtl', ros.validateNumber)(properties.slbAccessTtl));
    errors.collect(ros.propertyValidator('wafAccessPolicySetting', ros.listValidator(ros.validateAny))(properties.wafAccessPolicySetting));
    errors.collect(ros.propertyValidator('polardbPerfTiEnabled', ros.validateBoolean)(properties.polardbPerfTiEnabled));
    errors.collect(ros.propertyValidator('sasLocalDnsEnabled', ros.validateBoolean)(properties.sasLocalDnsEnabled));
    errors.collect(ros.propertyValidator('ossAccessTtl', ros.validateNumber)(properties.ossAccessTtl));
    errors.collect(ros.propertyValidator('ossMeteringPolicySetting', ros.listValidator(ros.validateAny))(properties.ossMeteringPolicySetting));
    errors.collect(ros.propertyValidator('sasHttpEnabled', ros.validateBoolean)(properties.sasHttpEnabled));
    errors.collect(ros.propertyValidator('ossMeteringEnabled', ros.validateBoolean)(properties.ossMeteringEnabled));
    errors.collect(ros.propertyValidator('cloudfirewallEnabled', ros.validateBoolean)(properties.cloudfirewallEnabled));
    errors.collect(ros.propertyValidator('slbAccessTiEnabled', ros.validateBoolean)(properties.slbAccessTiEnabled));
    errors.collect(ros.propertyValidator('drdsSyncTtl', ros.validateNumber)(properties.drdsSyncTtl));
    errors.collect(ros.propertyValidator('k8SEventPolicySetting', ros.listValidator(ros.validateAny))(properties.k8SEventPolicySetting));
    errors.collect(ros.propertyValidator('nasTtl', ros.validateNumber)(properties.nasTtl));
    errors.collect(ros.propertyValidator('sasLoginEnabled', ros.validateBoolean)(properties.sasLoginEnabled));
    errors.collect(ros.propertyValidator('wafTtl', ros.validateNumber)(properties.wafTtl));
    errors.collect(ros.propertyValidator('nasAuditPolicySetting', ros.listValidator(ros.validateAny))(properties.nasAuditPolicySetting));
    errors.collect(ros.propertyValidator('rdsTtl', ros.validateNumber)(properties.rdsTtl));
    errors.collect(ros.propertyValidator('k8SIngressEnabled', ros.validateBoolean)(properties.k8SIngressEnabled));
    errors.collect(ros.propertyValidator('cloudfirewallTiEnabled', ros.validateBoolean)(properties.cloudfirewallTiEnabled));
    errors.collect(ros.propertyValidator('k8SEventCollectionPolicy', ros.validateString)(properties.k8SEventCollectionPolicy));
    errors.collect(ros.propertyValidator('actiontrailEnabled', ros.validateBoolean)(properties.actiontrailEnabled));
    errors.collect(ros.propertyValidator('drdsSyncEnabled', ros.validateBoolean)(properties.drdsSyncEnabled));
    errors.collect(ros.propertyValidator('apigatewayEnabled', ros.validateBoolean)(properties.apigatewayEnabled));
    errors.collect(ros.propertyValidator('sasCrackEnabled', ros.validateBoolean)(properties.sasCrackEnabled));
    errors.collect(ros.propertyValidator('cpsTiEnabled', ros.validateBoolean)(properties.cpsTiEnabled));
    errors.collect(ros.propertyValidator('k8SEventEnabled', ros.validateBoolean)(properties.k8SEventEnabled));
    errors.collect(ros.propertyValidator('ossSyncTtl', ros.validateNumber)(properties.ossSyncTtl));
    errors.collect(ros.propertyValidator('rdsPerfTtl', ros.validateNumber)(properties.rdsPerfTtl));
    errors.collect(ros.propertyValidator('sasSnapshotAccountEnabled', ros.validateBoolean)(properties.sasSnapshotAccountEnabled));
    errors.collect(ros.propertyValidator('slbSyncEnabled', ros.validateBoolean)(properties.slbSyncEnabled));
    errors.collect(ros.propertyValidator('bastionTiEnabled', ros.validateBoolean)(properties.bastionTiEnabled));
    errors.collect(ros.propertyValidator('ossAccessPolicySetting', ros.listValidator(ros.validateAny))(properties.ossAccessPolicySetting));
    errors.collect(ros.propertyValidator('sasTiEnabled', ros.validateBoolean)(properties.sasTiEnabled));
    errors.collect(ros.propertyValidator('drdsAuditTtl', ros.validateNumber)(properties.drdsAuditTtl));
    errors.collect(ros.propertyValidator('redisAuditCollectionPolicy', ros.validateString)(properties.redisAuditCollectionPolicy));
    errors.collect(ros.propertyValidator('polardbPerfEnabled', ros.validateBoolean)(properties.polardbPerfEnabled));
    errors.collect(ros.propertyValidator('ddosCooAccessCollectionPolicy', ros.validateString)(properties.ddosCooAccessCollectionPolicy));
    errors.collect(ros.propertyValidator('k8SAuditEnabled', ros.validateBoolean)(properties.k8SAuditEnabled));
    errors.collect(ros.propertyValidator('ossMeteringTiEnabled', ros.validateBoolean)(properties.ossMeteringTiEnabled));
    errors.collect(ros.propertyValidator('polardbPerfTtl', ros.validateNumber)(properties.polardbPerfTtl));
    errors.collect(ros.propertyValidator('apigatewayAccessPolicySetting', ros.listValidator(ros.validateAny))(properties.apigatewayAccessPolicySetting));
    errors.collect(ros.propertyValidator('nasEnabled', ros.validateBoolean)(properties.nasEnabled));
    errors.collect(ros.propertyValidator('sasDnsEnabled', ros.validateBoolean)(properties.sasDnsEnabled));
    errors.collect(ros.propertyValidator('nasAuditCollectionPolicy', ros.validateString)(properties.nasAuditCollectionPolicy));
    errors.collect(ros.propertyValidator('polardbSlowCollectionPolicy', ros.validateString)(properties.polardbSlowCollectionPolicy));
    errors.collect(ros.propertyValidator('appconnectTtl', ros.validateNumber)(properties.appconnectTtl));
    errors.collect(ros.propertyValidator('ossMeteringTtl', ros.validateNumber)(properties.ossMeteringTtl));
    errors.collect(ros.propertyValidator('sasSecurityHcEnabled', ros.validateBoolean)(properties.sasSecurityHcEnabled));
    errors.collect(ros.propertyValidator('k8SAuditCollectionPolicy', ros.validateString)(properties.k8SAuditCollectionPolicy));
    errors.collect(ros.propertyValidator('ddosCooAccessTiEnabled', ros.validateBoolean)(properties.ddosCooAccessTiEnabled));
    errors.collect(ros.propertyValidator('appconnectOpCollectionPolicy', ros.validateString)(properties.appconnectOpCollectionPolicy));
    errors.collect(ros.propertyValidator('appconnectOpPolicySetting', ros.listValidator(ros.validateAny))(properties.appconnectOpPolicySetting));
    errors.collect(ros.propertyValidator('polardbTiEnabled', ros.validateBoolean)(properties.polardbTiEnabled));
    errors.collect(ros.propertyValidator('redisAuditTtl', ros.validateNumber)(properties.redisAuditTtl));
    errors.collect(ros.propertyValidator('rdsSlowTiEnabled', ros.validateBoolean)(properties.rdsSlowTiEnabled));
    errors.collect(ros.propertyValidator('sasTtl', ros.validateNumber)(properties.sasTtl));
    errors.collect(ros.propertyValidator('actiontrailTtl', ros.validateNumber)(properties.actiontrailTtl));
    errors.collect(ros.propertyValidator('rdsPerfCollectionPolicy', ros.validateString)(properties.rdsPerfCollectionPolicy));
    errors.collect(ros.propertyValidator('ossAccessCollectionPolicy', ros.validateString)(properties.ossAccessCollectionPolicy));
    errors.collect(ros.propertyValidator('redisAuditEnabled', ros.validateBoolean)(properties.redisAuditEnabled));
    errors.collect(ros.propertyValidator('wafTiEnabled', ros.validateBoolean)(properties.wafTiEnabled));
    errors.collect(ros.propertyValidator('redisSyncEnabled', ros.validateBoolean)(properties.redisSyncEnabled));
    errors.collect(ros.propertyValidator('k8SAuditTiEnabled', ros.validateBoolean)(properties.k8SAuditTiEnabled));
    errors.collect(ros.propertyValidator('sasProcessEnabled', ros.validateBoolean)(properties.sasProcessEnabled));
    errors.collect(ros.propertyValidator('redisAuditPolicySetting', ros.listValidator(ros.validateAny))(properties.redisAuditPolicySetting));
    errors.collect(ros.propertyValidator('appconnectEnabled', ros.validateBoolean)(properties.appconnectEnabled));
    errors.collect(ros.propertyValidator('drdsAuditPolicySetting', ros.listValidator(ros.validateAny))(properties.drdsAuditPolicySetting));
    errors.collect(ros.propertyValidator('k8SEventTiEnabled', ros.validateBoolean)(properties.k8SEventTiEnabled));
    errors.collect(ros.propertyValidator('polardbAuditCollectionPolicy', ros.validateString)(properties.polardbAuditCollectionPolicy));
    errors.collect(ros.propertyValidator('ddosCooAccessPolicySetting', ros.listValidator(ros.validateAny))(properties.ddosCooAccessPolicySetting));
    errors.collect(ros.propertyValidator('k8SEventTtl', ros.validateNumber)(properties.k8SEventTtl));
    errors.collect(ros.propertyValidator('polardbSlowEnabled', ros.validateBoolean)(properties.polardbSlowEnabled));
    errors.collect(ros.propertyValidator('sasSecurityAlertEnabled', ros.validateBoolean)(properties.sasSecurityAlertEnabled));
    errors.collect(ros.propertyValidator('slbAccessEnabled', ros.validateBoolean)(properties.slbAccessEnabled));
    errors.collect(ros.propertyValidator('drdsAuditEnabled', ros.validateBoolean)(properties.drdsAuditEnabled));
    errors.collect(ros.propertyValidator('sasNetworkEnabled', ros.validateBoolean)(properties.sasNetworkEnabled));
    errors.collect(ros.propertyValidator('k8SIngressPolicySetting', ros.listValidator(ros.validateAny))(properties.k8SIngressPolicySetting));
    errors.collect(ros.propertyValidator('ossMeteringCollectionPolicy', ros.validateString)(properties.ossMeteringCollectionPolicy));
    errors.collect(ros.propertyValidator('polardbSlowTiEnabled', ros.validateBoolean)(properties.polardbSlowTiEnabled));
    errors.collect(ros.propertyValidator('polardbSlowTtl', ros.validateNumber)(properties.polardbSlowTtl));
    errors.collect(ros.propertyValidator('ossAccessTiEnabled', ros.validateBoolean)(properties.ossAccessTiEnabled));
    errors.collect(ros.propertyValidator('polardbPerfCollectionPolicy', ros.validateString)(properties.polardbPerfCollectionPolicy));
    errors.collect(ros.propertyValidator('actiontrailOpenapiPolicySetting', ros.listValidator(ros.validateAny))(properties.actiontrailOpenapiPolicySetting));
    errors.collect(ros.propertyValidator('apigatewayTiEnabled', ros.validateBoolean)(properties.apigatewayTiEnabled));
    errors.collect(ros.propertyValidator('bastionAuditPolicySetting', ros.listValidator(ros.validateAny))(properties.bastionAuditPolicySetting));
    errors.collect(ros.propertyValidator('slbAccessPolicySetting', ros.listValidator(ros.validateAny))(properties.slbAccessPolicySetting));
    errors.collect(ros.propertyValidator('rdsTiEnabled', ros.validateBoolean)(properties.rdsTiEnabled));
    errors.collect(ros.propertyValidator('apigatewayAccessCollectionPolicy', ros.validateString)(properties.apigatewayAccessCollectionPolicy));
    errors.collect(ros.propertyValidator('cloudfirewallTtl', ros.validateNumber)(properties.cloudfirewallTtl));
    errors.collect(ros.propertyValidator('polardbAuditPolicySetting', ros.listValidator(ros.validateAny))(properties.polardbAuditPolicySetting));
    errors.collect(ros.propertyValidator('k8SAuditPolicySetting', ros.listValidator(ros.validateAny))(properties.k8SAuditPolicySetting));
    return errors.wrap('supplied properties not correct for "VariableMapProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::SLS::Audit.VariableMap` resource
 *
 * @param properties - the TypeScript properties of a `VariableMapProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::SLS::Audit.VariableMap` resource.
 */
// @ts-ignore TS6133
function rosAuditVariableMapPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosAudit_VariableMapPropertyValidator(properties).assertSuccess();
    return {
        PolardbPerfPolicySetting: ros.listMapper(ros.objectToRosTemplate)(properties.polardbPerfPolicySetting),
        WafEnabled: ros.booleanToRosTemplate(properties.wafEnabled),
        RdsPerfEnabled: ros.booleanToRosTemplate(properties.rdsPerfEnabled),
        CpsCallbackCollectionPolicy: ros.stringToRosTemplate(properties.cpsCallbackCollectionPolicy),
        RedisAuditTiEnabled: ros.booleanToRosTemplate(properties.redisAuditTiEnabled),
        RdsPerfTiEnabled: ros.booleanToRosTemplate(properties.rdsPerfTiEnabled),
        RdsSlowPolicySetting: ros.listMapper(ros.objectToRosTemplate)(properties.rdsSlowPolicySetting),
        K8sIngressTtl: ros.numberToRosTemplate(properties.k8SIngressTtl),
        OssSyncEnabled: ros.booleanToRosTemplate(properties.ossSyncEnabled),
        RdsAuditCollectionPolicy: ros.stringToRosTemplate(properties.rdsAuditCollectionPolicy),
        BastionAuditCollectionPolicy: ros.stringToRosTemplate(properties.bastionAuditCollectionPolicy),
        BastionEnabled: ros.booleanToRosTemplate(properties.bastionEnabled),
        RedisSyncTtl: ros.numberToRosTemplate(properties.redisSyncTtl),
        RdsEnabled: ros.booleanToRosTemplate(properties.rdsEnabled),
        SasSessionEnabled: ros.booleanToRosTemplate(properties.sasSessionEnabled),
        RdsAuditPolicySetting: ros.listMapper(ros.objectToRosTemplate)(properties.rdsAuditPolicySetting),
        DdosCooAccessTtl: ros.numberToRosTemplate(properties.ddosCooAccessTtl),
        BastionTtl: ros.numberToRosTemplate(properties.bastionTtl),
        RdsSlowEnabled: ros.booleanToRosTemplate(properties.rdsSlowEnabled),
        WafAccessCollectionPolicy: ros.stringToRosTemplate(properties.wafAccessCollectionPolicy),
        K8sAuditTtl: ros.numberToRosTemplate(properties.k8SAuditTtl),
        PolardbTtl: ros.numberToRosTemplate(properties.polardbTtl),
        DrdsAuditCollectionPolicy: ros.stringToRosTemplate(properties.drdsAuditCollectionPolicy),
        SlbAccessCollectionPolicy: ros.stringToRosTemplate(properties.slbAccessCollectionPolicy),
        SasSnapshotPortEnabled: ros.booleanToRosTemplate(properties.sasSnapshotPortEnabled),
        RdsSlowTtl: ros.numberToRosTemplate(properties.rdsSlowTtl),
        PolardbEnabled: ros.booleanToRosTemplate(properties.polardbEnabled),
        SasSnapshotProcessEnabled: ros.booleanToRosTemplate(properties.sasSnapshotProcessEnabled),
        ActiontrailTiEnabled: ros.booleanToRosTemplate(properties.actiontrailTiEnabled),
        NasTiEnabled: ros.booleanToRosTemplate(properties.nasTiEnabled),
        AppconnectTiEnabled: ros.booleanToRosTemplate(properties.appconnectTiEnabled),
        CpsTtl: ros.numberToRosTemplate(properties.cpsTtl),
        SlbSyncTtl: ros.numberToRosTemplate(properties.slbSyncTtl),
        CloudfirewallAccessCollectionPolicy: ros.stringToRosTemplate(properties.cloudfirewallAccessCollectionPolicy),
        DdosCooAccessEnabled: ros.booleanToRosTemplate(properties.ddosCooAccessEnabled),
        K8sIngressTiEnabled: ros.booleanToRosTemplate(properties.k8SIngressTiEnabled),
        DrdsAuditTiEnabled: ros.booleanToRosTemplate(properties.drdsAuditTiEnabled),
        SasSecurityVulEnabled: ros.booleanToRosTemplate(properties.sasSecurityVulEnabled),
        PolardbSlowPolicySetting: ros.listMapper(ros.objectToRosTemplate)(properties.polardbSlowPolicySetting),
        K8sIngressCollectionPolicy: ros.stringToRosTemplate(properties.k8SIngressCollectionPolicy),
        ApigatewayTtl: ros.numberToRosTemplate(properties.apigatewayTtl),
        CpsEnabled: ros.booleanToRosTemplate(properties.cpsEnabled),
        RdsSlowCollectionPolicy: ros.stringToRosTemplate(properties.rdsSlowCollectionPolicy),
        ActiontrailOpenapiCollectionPolicy: ros.stringToRosTemplate(properties.actiontrailOpenapiCollectionPolicy),
        RdsPerfPolicySetting: ros.listMapper(ros.objectToRosTemplate)(properties.rdsPerfPolicySetting),
        CloudfirewallAccessPolicySetting: ros.listMapper(ros.objectToRosTemplate)(properties.cloudfirewallAccessPolicySetting),
        OssAccessEnabled: ros.booleanToRosTemplate(properties.ossAccessEnabled),
        CpsCallbackPolicySetting: ros.listMapper(ros.objectToRosTemplate)(properties.cpsCallbackPolicySetting),
        SlbAccessTtl: ros.numberToRosTemplate(properties.slbAccessTtl),
        WafAccessPolicySetting: ros.listMapper(ros.objectToRosTemplate)(properties.wafAccessPolicySetting),
        PolardbPerfTiEnabled: ros.booleanToRosTemplate(properties.polardbPerfTiEnabled),
        SasLocalDnsEnabled: ros.booleanToRosTemplate(properties.sasLocalDnsEnabled),
        OssAccessTtl: ros.numberToRosTemplate(properties.ossAccessTtl),
        OssMeteringPolicySetting: ros.listMapper(ros.objectToRosTemplate)(properties.ossMeteringPolicySetting),
        SasHttpEnabled: ros.booleanToRosTemplate(properties.sasHttpEnabled),
        OssMeteringEnabled: ros.booleanToRosTemplate(properties.ossMeteringEnabled),
        CloudfirewallEnabled: ros.booleanToRosTemplate(properties.cloudfirewallEnabled),
        SlbAccessTiEnabled: ros.booleanToRosTemplate(properties.slbAccessTiEnabled),
        DrdsSyncTtl: ros.numberToRosTemplate(properties.drdsSyncTtl),
        K8sEventPolicySetting: ros.listMapper(ros.objectToRosTemplate)(properties.k8SEventPolicySetting),
        NasTtl: ros.numberToRosTemplate(properties.nasTtl),
        SasLoginEnabled: ros.booleanToRosTemplate(properties.sasLoginEnabled),
        WafTtl: ros.numberToRosTemplate(properties.wafTtl),
        NasAuditPolicySetting: ros.listMapper(ros.objectToRosTemplate)(properties.nasAuditPolicySetting),
        RdsTtl: ros.numberToRosTemplate(properties.rdsTtl),
        K8sIngressEnabled: ros.booleanToRosTemplate(properties.k8SIngressEnabled),
        CloudfirewallTiEnabled: ros.booleanToRosTemplate(properties.cloudfirewallTiEnabled),
        K8sEventCollectionPolicy: ros.stringToRosTemplate(properties.k8SEventCollectionPolicy),
        ActiontrailEnabled: ros.booleanToRosTemplate(properties.actiontrailEnabled),
        DrdsSyncEnabled: ros.booleanToRosTemplate(properties.drdsSyncEnabled),
        ApigatewayEnabled: ros.booleanToRosTemplate(properties.apigatewayEnabled),
        SasCrackEnabled: ros.booleanToRosTemplate(properties.sasCrackEnabled),
        CpsTiEnabled: ros.booleanToRosTemplate(properties.cpsTiEnabled),
        K8sEventEnabled: ros.booleanToRosTemplate(properties.k8SEventEnabled),
        OssSyncTtl: ros.numberToRosTemplate(properties.ossSyncTtl),
        RdsPerfTtl: ros.numberToRosTemplate(properties.rdsPerfTtl),
        SasSnapshotAccountEnabled: ros.booleanToRosTemplate(properties.sasSnapshotAccountEnabled),
        SlbSyncEnabled: ros.booleanToRosTemplate(properties.slbSyncEnabled),
        BastionTiEnabled: ros.booleanToRosTemplate(properties.bastionTiEnabled),
        OssAccessPolicySetting: ros.listMapper(ros.objectToRosTemplate)(properties.ossAccessPolicySetting),
        SasTiEnabled: ros.booleanToRosTemplate(properties.sasTiEnabled),
        DrdsAuditTtl: ros.numberToRosTemplate(properties.drdsAuditTtl),
        RedisAuditCollectionPolicy: ros.stringToRosTemplate(properties.redisAuditCollectionPolicy),
        PolardbPerfEnabled: ros.booleanToRosTemplate(properties.polardbPerfEnabled),
        DdosCooAccessCollectionPolicy: ros.stringToRosTemplate(properties.ddosCooAccessCollectionPolicy),
        K8sAuditEnabled: ros.booleanToRosTemplate(properties.k8SAuditEnabled),
        OssMeteringTiEnabled: ros.booleanToRosTemplate(properties.ossMeteringTiEnabled),
        PolardbPerfTtl: ros.numberToRosTemplate(properties.polardbPerfTtl),
        ApigatewayAccessPolicySetting: ros.listMapper(ros.objectToRosTemplate)(properties.apigatewayAccessPolicySetting),
        NasEnabled: ros.booleanToRosTemplate(properties.nasEnabled),
        SasDnsEnabled: ros.booleanToRosTemplate(properties.sasDnsEnabled),
        NasAuditCollectionPolicy: ros.stringToRosTemplate(properties.nasAuditCollectionPolicy),
        PolardbSlowCollectionPolicy: ros.stringToRosTemplate(properties.polardbSlowCollectionPolicy),
        AppconnectTtl: ros.numberToRosTemplate(properties.appconnectTtl),
        OssMeteringTtl: ros.numberToRosTemplate(properties.ossMeteringTtl),
        SasSecurityHcEnabled: ros.booleanToRosTemplate(properties.sasSecurityHcEnabled),
        K8sAuditCollectionPolicy: ros.stringToRosTemplate(properties.k8SAuditCollectionPolicy),
        DdosCooAccessTiEnabled: ros.booleanToRosTemplate(properties.ddosCooAccessTiEnabled),
        AppconnectOpCollectionPolicy: ros.stringToRosTemplate(properties.appconnectOpCollectionPolicy),
        AppconnectOpPolicySetting: ros.listMapper(ros.objectToRosTemplate)(properties.appconnectOpPolicySetting),
        PolardbTiEnabled: ros.booleanToRosTemplate(properties.polardbTiEnabled),
        RedisAuditTtl: ros.numberToRosTemplate(properties.redisAuditTtl),
        RdsSlowTiEnabled: ros.booleanToRosTemplate(properties.rdsSlowTiEnabled),
        SasTtl: ros.numberToRosTemplate(properties.sasTtl),
        ActiontrailTtl: ros.numberToRosTemplate(properties.actiontrailTtl),
        RdsPerfCollectionPolicy: ros.stringToRosTemplate(properties.rdsPerfCollectionPolicy),
        OssAccessCollectionPolicy: ros.stringToRosTemplate(properties.ossAccessCollectionPolicy),
        RedisAuditEnabled: ros.booleanToRosTemplate(properties.redisAuditEnabled),
        WafTiEnabled: ros.booleanToRosTemplate(properties.wafTiEnabled),
        RedisSyncEnabled: ros.booleanToRosTemplate(properties.redisSyncEnabled),
        K8sAuditTiEnabled: ros.booleanToRosTemplate(properties.k8SAuditTiEnabled),
        SasProcessEnabled: ros.booleanToRosTemplate(properties.sasProcessEnabled),
        RedisAuditPolicySetting: ros.listMapper(ros.objectToRosTemplate)(properties.redisAuditPolicySetting),
        AppconnectEnabled: ros.booleanToRosTemplate(properties.appconnectEnabled),
        DrdsAuditPolicySetting: ros.listMapper(ros.objectToRosTemplate)(properties.drdsAuditPolicySetting),
        K8sEventTiEnabled: ros.booleanToRosTemplate(properties.k8SEventTiEnabled),
        PolardbAuditCollectionPolicy: ros.stringToRosTemplate(properties.polardbAuditCollectionPolicy),
        DdosCooAccessPolicySetting: ros.listMapper(ros.objectToRosTemplate)(properties.ddosCooAccessPolicySetting),
        K8sEventTtl: ros.numberToRosTemplate(properties.k8SEventTtl),
        PolardbSlowEnabled: ros.booleanToRosTemplate(properties.polardbSlowEnabled),
        SasSecurityAlertEnabled: ros.booleanToRosTemplate(properties.sasSecurityAlertEnabled),
        SlbAccessEnabled: ros.booleanToRosTemplate(properties.slbAccessEnabled),
        DrdsAuditEnabled: ros.booleanToRosTemplate(properties.drdsAuditEnabled),
        SasNetworkEnabled: ros.booleanToRosTemplate(properties.sasNetworkEnabled),
        K8sIngressPolicySetting: ros.listMapper(ros.objectToRosTemplate)(properties.k8SIngressPolicySetting),
        OssMeteringCollectionPolicy: ros.stringToRosTemplate(properties.ossMeteringCollectionPolicy),
        PolardbSlowTiEnabled: ros.booleanToRosTemplate(properties.polardbSlowTiEnabled),
        PolardbSlowTtl: ros.numberToRosTemplate(properties.polardbSlowTtl),
        OssAccessTiEnabled: ros.booleanToRosTemplate(properties.ossAccessTiEnabled),
        PolardbPerfCollectionPolicy: ros.stringToRosTemplate(properties.polardbPerfCollectionPolicy),
        ActiontrailOpenapiPolicySetting: ros.listMapper(ros.objectToRosTemplate)(properties.actiontrailOpenapiPolicySetting),
        ApigatewayTiEnabled: ros.booleanToRosTemplate(properties.apigatewayTiEnabled),
        BastionAuditPolicySetting: ros.listMapper(ros.objectToRosTemplate)(properties.bastionAuditPolicySetting),
        SlbAccessPolicySetting: ros.listMapper(ros.objectToRosTemplate)(properties.slbAccessPolicySetting),
        RdsTiEnabled: ros.booleanToRosTemplate(properties.rdsTiEnabled),
        ApigatewayAccessCollectionPolicy: ros.stringToRosTemplate(properties.apigatewayAccessCollectionPolicy),
        CloudfirewallTtl: ros.numberToRosTemplate(properties.cloudfirewallTtl),
        PolardbAuditPolicySetting: ros.listMapper(ros.objectToRosTemplate)(properties.polardbAuditPolicySetting),
        K8sAuditPolicySetting: ros.listMapper(ros.objectToRosTemplate)(properties.k8SAuditPolicySetting),
    };
}
/**
 * Determine whether the given properties match those of a `RosDashboardProps`
 *
 * @param properties - the TypeScript properties of a `RosDashboardProps`
 *
 * @returns the result of the validation.
 */
function RosDashboardPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('dashboardName', ros.requiredValidator)(properties.dashboardName));
    errors.collect(ros.propertyValidator('dashboardName', ros.validateString)(properties.dashboardName));
    errors.collect(ros.propertyValidator('description', ros.validateString)(properties.description));
    errors.collect(ros.propertyValidator('projectName', ros.requiredValidator)(properties.projectName));
    if (properties.projectName && (Array.isArray(properties.projectName) || (typeof properties.projectName) === 'string')) {
        errors.collect(ros.propertyValidator('projectName', ros.validateLength)({
            data: properties.projectName.length,
            min: 3,
            max: 63,
        }));
    }
    if (properties.projectName && (typeof properties.projectName) !== 'object') {
        errors.collect(ros.propertyValidator('projectName', ros.validateAllowedPattern)({
            data: properties.projectName,
            reg: /^[a-zA-Z0-9_-]+$/
        }));
    }
    errors.collect(ros.propertyValidator('projectName', ros.validateString)(properties.projectName));
    if (properties.displayName && (Array.isArray(properties.displayName) || (typeof properties.displayName) === 'string')) {
        errors.collect(ros.propertyValidator('displayName', ros.validateLength)({
            data: properties.displayName.length,
            min: 1,
            max: undefined,
        }));
    }
    errors.collect(ros.propertyValidator('displayName', ros.validateString)(properties.displayName));
    errors.collect(ros.propertyValidator('charts', ros.requiredValidator)(properties.charts));
    if (properties.charts && (Array.isArray(properties.charts) || (typeof properties.charts) === 'string')) {
        errors.collect(ros.propertyValidator('charts', ros.validateLength)({
            data: properties.charts.length,
            min: 1,
            max: undefined,
        }));
    }
    errors.collect(ros.propertyValidator('charts', ros.listValidator(ros.validateAnyDict))(properties.charts));
    return errors.wrap('supplied properties not correct for "RosDashboardProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::SLS::Dashboard` resource
 *
 * @param properties - the TypeScript properties of a `RosDashboardProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::SLS::Dashboard` resource.
 */
// @ts-ignore TS6133
function rosDashboardPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosDashboardPropsValidator(properties).assertSuccess();
    }
    return {
        Charts: ros.listMapper(ros.anyDictToRosTemplate)(properties.charts),
        DashboardName: ros.stringToRosTemplate(properties.dashboardName),
        ProjectName: ros.stringToRosTemplate(properties.projectName),
        Description: ros.stringToRosTemplate(properties.description),
        DisplayName: ros.stringToRosTemplate(properties.displayName),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::SLS::Dashboard`, which is used to create a dashboard.
 * @Note This class does not contain additional functions, so it is recommended to use the `Dashboard` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-sls-dashboard
 */
class RosDashboard extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosDashboard.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrDashboardName = this.getAtt('DashboardName');
        this.attrDisplayName = this.getAtt('DisplayName');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.charts = props.charts;
        this.dashboardName = props.dashboardName;
        this.projectName = props.projectName;
        this.description = props.description;
        this.displayName = props.displayName;
    }
    get rosProperties() {
        return {
            charts: this.charts,
            dashboardName: this.dashboardName,
            projectName: this.projectName,
            description: this.description,
            displayName: this.displayName,
        };
    }
    renderProperties(props) {
        return rosDashboardPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosDashboard = RosDashboard;
/**
 * The resource type name for this resource class.
 */
RosDashboard.ROS_RESOURCE_TYPE_NAME = "ALIYUN::SLS::Dashboard";
/**
 * Determine whether the given properties match those of a `RosEtlProps`
 *
 * @param properties - the TypeScript properties of a `RosEtlProps`
 *
 * @returns the result of the validation.
 */
function RosEtlPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('description', ros.validateString)(properties.description));
    errors.collect(ros.propertyValidator('configuration', ros.requiredValidator)(properties.configuration));
    errors.collect(ros.propertyValidator('configuration', RosEtl_ConfigurationPropertyValidator)(properties.configuration));
    errors.collect(ros.propertyValidator('projectName', ros.requiredValidator)(properties.projectName));
    errors.collect(ros.propertyValidator('projectName', ros.validateString)(properties.projectName));
    errors.collect(ros.propertyValidator('schedule', ros.requiredValidator)(properties.schedule));
    errors.collect(ros.propertyValidator('schedule', RosEtl_SchedulePropertyValidator)(properties.schedule));
    errors.collect(ros.propertyValidator('displayName', ros.requiredValidator)(properties.displayName));
    errors.collect(ros.propertyValidator('displayName', ros.validateString)(properties.displayName));
    errors.collect(ros.propertyValidator('name', ros.requiredValidator)(properties.name));
    errors.collect(ros.propertyValidator('name', ros.validateString)(properties.name));
    return errors.wrap('supplied properties not correct for "RosEtlProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::SLS::Etl` resource
 *
 * @param properties - the TypeScript properties of a `RosEtlProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::SLS::Etl` resource.
 */
// @ts-ignore TS6133
function rosEtlPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosEtlPropsValidator(properties).assertSuccess();
    }
    return {
        Configuration: rosEtlConfigurationPropertyToRosTemplate(properties.configuration),
        DisplayName: ros.stringToRosTemplate(properties.displayName),
        Name: ros.stringToRosTemplate(properties.name),
        ProjectName: ros.stringToRosTemplate(properties.projectName),
        Schedule: rosEtlSchedulePropertyToRosTemplate(properties.schedule),
        Description: ros.stringToRosTemplate(properties.description),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::SLS::Etl`, which is used to create a data transformation task.
 * @Note This class does not contain additional functions, so it is recommended to use the `Etl` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-sls-etl
 */
class RosEtl extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosEtl.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrName = this.getAtt('Name');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.configuration = props.configuration;
        this.displayName = props.displayName;
        this.name = props.name;
        this.projectName = props.projectName;
        this.schedule = props.schedule;
        this.description = props.description;
    }
    get rosProperties() {
        return {
            configuration: this.configuration,
            displayName: this.displayName,
            name: this.name,
            projectName: this.projectName,
            schedule: this.schedule,
            description: this.description,
        };
    }
    renderProperties(props) {
        return rosEtlPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosEtl = RosEtl;
/**
 * The resource type name for this resource class.
 */
RosEtl.ROS_RESOURCE_TYPE_NAME = "ALIYUN::SLS::Etl";
/**
 * Determine whether the given properties match those of a `ConfigurationProperty`
 *
 * @param properties - the TypeScript properties of a `ConfigurationProperty`
 *
 * @returns the result of the validation.
 */
function RosEtl_ConfigurationPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('script', ros.requiredValidator)(properties.script));
    errors.collect(ros.propertyValidator('script', ros.validateString)(properties.script));
    errors.collect(ros.propertyValidator('sinks', ros.requiredValidator)(properties.sinks));
    errors.collect(ros.propertyValidator('sinks', ros.listValidator(RosEtl_SinksPropertyValidator))(properties.sinks));
    errors.collect(ros.propertyValidator('parameters', ros.hashValidator(ros.validateAny))(properties.parameters));
    errors.collect(ros.propertyValidator('toTime', ros.validateNumber)(properties.toTime));
    errors.collect(ros.propertyValidator('version', ros.validateNumber)(properties.version));
    errors.collect(ros.propertyValidator('logstore', ros.requiredValidator)(properties.logstore));
    errors.collect(ros.propertyValidator('logstore', ros.validateString)(properties.logstore));
    errors.collect(ros.propertyValidator('fromTime', ros.validateNumber)(properties.fromTime));
    errors.collect(ros.propertyValidator('roleArn', ros.validateString)(properties.roleArn));
    return errors.wrap('supplied properties not correct for "ConfigurationProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::SLS::Etl.Configuration` resource
 *
 * @param properties - the TypeScript properties of a `ConfigurationProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::SLS::Etl.Configuration` resource.
 */
// @ts-ignore TS6133
function rosEtlConfigurationPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosEtl_ConfigurationPropertyValidator(properties).assertSuccess();
    return {
        Script: ros.stringToRosTemplate(properties.script),
        Sinks: ros.listMapper(rosEtlSinksPropertyToRosTemplate)(properties.sinks),
        Parameters: ros.hashMapper(ros.objectToRosTemplate)(properties.parameters),
        ToTime: ros.numberToRosTemplate(properties.toTime),
        Version: ros.numberToRosTemplate(properties.version),
        Logstore: ros.stringToRosTemplate(properties.logstore),
        FromTime: ros.numberToRosTemplate(properties.fromTime),
        RoleArn: ros.stringToRosTemplate(properties.roleArn),
    };
}
/**
 * Determine whether the given properties match those of a `ScheduleProperty`
 *
 * @param properties - the TypeScript properties of a `ScheduleProperty`
 *
 * @returns the result of the validation.
 */
function RosEtl_SchedulePropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('type', ros.requiredValidator)(properties.type));
    errors.collect(ros.propertyValidator('type', ros.validateString)(properties.type));
    return errors.wrap('supplied properties not correct for "ScheduleProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::SLS::Etl.Schedule` resource
 *
 * @param properties - the TypeScript properties of a `ScheduleProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::SLS::Etl.Schedule` resource.
 */
// @ts-ignore TS6133
function rosEtlSchedulePropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosEtl_SchedulePropertyValidator(properties).assertSuccess();
    return {
        Type: ros.stringToRosTemplate(properties.type),
    };
}
/**
 * Determine whether the given properties match those of a `SinksProperty`
 *
 * @param properties - the TypeScript properties of a `SinksProperty`
 *
 * @returns the result of the validation.
 */
function RosEtl_SinksPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('project', ros.requiredValidator)(properties.project));
    errors.collect(ros.propertyValidator('project', ros.validateString)(properties.project));
    errors.collect(ros.propertyValidator('type', ros.validateString)(properties.type));
    errors.collect(ros.propertyValidator('endpoint', ros.validateString)(properties.endpoint));
    errors.collect(ros.propertyValidator('logstore', ros.requiredValidator)(properties.logstore));
    errors.collect(ros.propertyValidator('logstore', ros.validateString)(properties.logstore));
    errors.collect(ros.propertyValidator('roleArn', ros.validateString)(properties.roleArn));
    errors.collect(ros.propertyValidator('name', ros.requiredValidator)(properties.name));
    errors.collect(ros.propertyValidator('name', ros.validateString)(properties.name));
    return errors.wrap('supplied properties not correct for "SinksProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::SLS::Etl.Sinks` resource
 *
 * @param properties - the TypeScript properties of a `SinksProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::SLS::Etl.Sinks` resource.
 */
// @ts-ignore TS6133
function rosEtlSinksPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosEtl_SinksPropertyValidator(properties).assertSuccess();
    return {
        Project: ros.stringToRosTemplate(properties.project),
        Type: ros.stringToRosTemplate(properties.type),
        Endpoint: ros.stringToRosTemplate(properties.endpoint),
        Logstore: ros.stringToRosTemplate(properties.logstore),
        RoleArn: ros.stringToRosTemplate(properties.roleArn),
        Name: ros.stringToRosTemplate(properties.name),
    };
}
/**
 * Determine whether the given properties match those of a `RosIndexProps`
 *
 * @param properties - the TypeScript properties of a `RosIndexProps`
 *
 * @returns the result of the validation.
 */
function RosIndexPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('logstoreName', ros.requiredValidator)(properties.logstoreName));
    if (properties.logstoreName && (Array.isArray(properties.logstoreName) || (typeof properties.logstoreName) === 'string')) {
        errors.collect(ros.propertyValidator('logstoreName', ros.validateLength)({
            data: properties.logstoreName.length,
            min: 3,
            max: 63,
        }));
    }
    errors.collect(ros.propertyValidator('logstoreName', ros.validateString)(properties.logstoreName));
    errors.collect(ros.propertyValidator('projectName', ros.requiredValidator)(properties.projectName));
    if (properties.projectName && (Array.isArray(properties.projectName) || (typeof properties.projectName) === 'string')) {
        errors.collect(ros.propertyValidator('projectName', ros.validateLength)({
            data: properties.projectName.length,
            min: 3,
            max: 63,
        }));
    }
    if (properties.projectName && (typeof properties.projectName) !== 'object') {
        errors.collect(ros.propertyValidator('projectName', ros.validateAllowedPattern)({
            data: properties.projectName,
            reg: /^[a-zA-Z0-9_-]+$/
        }));
    }
    errors.collect(ros.propertyValidator('projectName', ros.validateString)(properties.projectName));
    errors.collect(ros.propertyValidator('keyIndices', ros.listValidator(RosIndex_KeyIndicesPropertyValidator))(properties.keyIndices));
    errors.collect(ros.propertyValidator('fullTextIndex', ros.requiredValidator)(properties.fullTextIndex));
    errors.collect(ros.propertyValidator('fullTextIndex', RosIndex_FullTextIndexPropertyValidator)(properties.fullTextIndex));
    errors.collect(ros.propertyValidator('logReduce', ros.validateBoolean)(properties.logReduce));
    return errors.wrap('supplied properties not correct for "RosIndexProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::SLS::Index` resource
 *
 * @param properties - the TypeScript properties of a `RosIndexProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::SLS::Index` resource.
 */
// @ts-ignore TS6133
function rosIndexPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosIndexPropsValidator(properties).assertSuccess();
    }
    return {
        FullTextIndex: rosIndexFullTextIndexPropertyToRosTemplate(properties.fullTextIndex),
        LogstoreName: ros.stringToRosTemplate(properties.logstoreName),
        ProjectName: ros.stringToRosTemplate(properties.projectName),
        KeyIndices: ros.listMapper(rosIndexKeyIndicesPropertyToRosTemplate)(properties.keyIndices),
        LogReduce: ros.booleanToRosTemplate(properties.logReduce),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::SLS::Index`, which is used to create an index for a specified Logstore.
 * @Note This class does not contain additional functions, so it is recommended to use the `Index` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-sls-index
 */
class RosIndex extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosIndex.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.fullTextIndex = props.fullTextIndex;
        this.logstoreName = props.logstoreName;
        this.projectName = props.projectName;
        this.keyIndices = props.keyIndices;
        this.logReduce = props.logReduce;
    }
    get rosProperties() {
        return {
            fullTextIndex: this.fullTextIndex,
            logstoreName: this.logstoreName,
            projectName: this.projectName,
            keyIndices: this.keyIndices,
            logReduce: this.logReduce,
        };
    }
    renderProperties(props) {
        return rosIndexPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosIndex = RosIndex;
/**
 * The resource type name for this resource class.
 */
RosIndex.ROS_RESOURCE_TYPE_NAME = "ALIYUN::SLS::Index";
/**
 * Determine whether the given properties match those of a `FullTextIndexProperty`
 *
 * @param properties - the TypeScript properties of a `FullTextIndexProperty`
 *
 * @returns the result of the validation.
 */
function RosIndex_FullTextIndexPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('delimiter', ros.validateString)(properties.delimiter));
    errors.collect(ros.propertyValidator('includeChinese', ros.validateBoolean)(properties.includeChinese));
    errors.collect(ros.propertyValidator('caseSensitive', ros.validateBoolean)(properties.caseSensitive));
    errors.collect(ros.propertyValidator('enable', ros.requiredValidator)(properties.enable));
    errors.collect(ros.propertyValidator('enable', ros.validateBoolean)(properties.enable));
    return errors.wrap('supplied properties not correct for "FullTextIndexProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::SLS::Index.FullTextIndex` resource
 *
 * @param properties - the TypeScript properties of a `FullTextIndexProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::SLS::Index.FullTextIndex` resource.
 */
// @ts-ignore TS6133
function rosIndexFullTextIndexPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosIndex_FullTextIndexPropertyValidator(properties).assertSuccess();
    return {
        Delimiter: ros.stringToRosTemplate(properties.delimiter),
        IncludeChinese: ros.booleanToRosTemplate(properties.includeChinese),
        CaseSensitive: ros.booleanToRosTemplate(properties.caseSensitive),
        Enable: ros.booleanToRosTemplate(properties.enable),
    };
}
/**
 * Determine whether the given properties match those of a `JsonKeyIndicesProperty`
 *
 * @param properties - the TypeScript properties of a `JsonKeyIndicesProperty`
 *
 * @returns the result of the validation.
 */
function RosIndex_JsonKeyIndicesPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('type', ros.requiredValidator)(properties.type));
    if (properties.type && (typeof properties.type) !== 'object') {
        errors.collect(ros.propertyValidator('type', ros.validateAllowedValues)({
            data: properties.type,
            allowedValues: ["text", "long", "double"],
        }));
    }
    errors.collect(ros.propertyValidator('type', ros.validateString)(properties.type));
    errors.collect(ros.propertyValidator('alias', ros.validateString)(properties.alias));
    errors.collect(ros.propertyValidator('enableAnalytics', ros.validateBoolean)(properties.enableAnalytics));
    errors.collect(ros.propertyValidator('name', ros.requiredValidator)(properties.name));
    errors.collect(ros.propertyValidator('name', ros.validateString)(properties.name));
    return errors.wrap('supplied properties not correct for "JsonKeyIndicesProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::SLS::Index.JsonKeyIndices` resource
 *
 * @param properties - the TypeScript properties of a `JsonKeyIndicesProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::SLS::Index.JsonKeyIndices` resource.
 */
// @ts-ignore TS6133
function rosIndexJsonKeyIndicesPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosIndex_JsonKeyIndicesPropertyValidator(properties).assertSuccess();
    return {
        Type: ros.stringToRosTemplate(properties.type),
        Alias: ros.stringToRosTemplate(properties.alias),
        EnableAnalytics: ros.booleanToRosTemplate(properties.enableAnalytics),
        Name: ros.stringToRosTemplate(properties.name),
    };
}
/**
 * Determine whether the given properties match those of a `KeyIndicesProperty`
 *
 * @param properties - the TypeScript properties of a `KeyIndicesProperty`
 *
 * @returns the result of the validation.
 */
function RosIndex_KeyIndicesPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('type', ros.requiredValidator)(properties.type));
    if (properties.type && (typeof properties.type) !== 'object') {
        errors.collect(ros.propertyValidator('type', ros.validateAllowedValues)({
            data: properties.type,
            allowedValues: ["text", "long", "double", "json"],
        }));
    }
    errors.collect(ros.propertyValidator('type', ros.validateString)(properties.type));
    errors.collect(ros.propertyValidator('jsonKeyIndices', ros.listValidator(RosIndex_JsonKeyIndicesPropertyValidator))(properties.jsonKeyIndices));
    errors.collect(ros.propertyValidator('delimiter', ros.validateString)(properties.delimiter));
    errors.collect(ros.propertyValidator('includeChinese', ros.validateBoolean)(properties.includeChinese));
    errors.collect(ros.propertyValidator('alias', ros.validateString)(properties.alias));
    errors.collect(ros.propertyValidator('enableAnalytics', ros.validateBoolean)(properties.enableAnalytics));
    errors.collect(ros.propertyValidator('caseSensitive', ros.validateBoolean)(properties.caseSensitive));
    errors.collect(ros.propertyValidator('name', ros.requiredValidator)(properties.name));
    errors.collect(ros.propertyValidator('name', ros.validateString)(properties.name));
    return errors.wrap('supplied properties not correct for "KeyIndicesProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::SLS::Index.KeyIndices` resource
 *
 * @param properties - the TypeScript properties of a `KeyIndicesProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::SLS::Index.KeyIndices` resource.
 */
// @ts-ignore TS6133
function rosIndexKeyIndicesPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosIndex_KeyIndicesPropertyValidator(properties).assertSuccess();
    return {
        Type: ros.stringToRosTemplate(properties.type),
        JsonKeyIndices: ros.listMapper(rosIndexJsonKeyIndicesPropertyToRosTemplate)(properties.jsonKeyIndices),
        Delimiter: ros.stringToRosTemplate(properties.delimiter),
        IncludeChinese: ros.booleanToRosTemplate(properties.includeChinese),
        Alias: ros.stringToRosTemplate(properties.alias),
        EnableAnalytics: ros.booleanToRosTemplate(properties.enableAnalytics),
        CaseSensitive: ros.booleanToRosTemplate(properties.caseSensitive),
        Name: ros.stringToRosTemplate(properties.name),
    };
}
/**
 * Determine whether the given properties match those of a `RosLogstoreProps`
 *
 * @param properties - the TypeScript properties of a `RosLogstoreProps`
 *
 * @returns the result of the validation.
 */
function RosLogstorePropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('logstoreName', ros.requiredValidator)(properties.logstoreName));
    if (properties.logstoreName && (Array.isArray(properties.logstoreName) || (typeof properties.logstoreName) === 'string')) {
        errors.collect(ros.propertyValidator('logstoreName', ros.validateLength)({
            data: properties.logstoreName.length,
            min: 3,
            max: 63,
        }));
    }
    errors.collect(ros.propertyValidator('logstoreName', ros.validateString)(properties.logstoreName));
    errors.collect(ros.propertyValidator('preserveStorage', ros.validateBoolean)(properties.preserveStorage));
    errors.collect(ros.propertyValidator('projectName', ros.requiredValidator)(properties.projectName));
    if (properties.projectName && (Array.isArray(properties.projectName) || (typeof properties.projectName) === 'string')) {
        errors.collect(ros.propertyValidator('projectName', ros.validateLength)({
            data: properties.projectName.length,
            min: 3,
            max: 63,
        }));
    }
    if (properties.projectName && (typeof properties.projectName) !== 'object') {
        errors.collect(ros.propertyValidator('projectName', ros.validateAllowedPattern)({
            data: properties.projectName,
            reg: /^[a-zA-Z0-9_-]+$/
        }));
    }
    errors.collect(ros.propertyValidator('projectName', ros.validateString)(properties.projectName));
    errors.collect(ros.propertyValidator('appendMeta', ros.validateBoolean)(properties.appendMeta));
    if (properties.maxSplitShard && (typeof properties.maxSplitShard) !== 'object') {
        errors.collect(ros.propertyValidator('maxSplitShard', ros.validateRange)({
            data: properties.maxSplitShard,
            min: 1,
            max: 64,
        }));
    }
    errors.collect(ros.propertyValidator('maxSplitShard', ros.validateNumber)(properties.maxSplitShard));
    errors.collect(ros.propertyValidator('autoSplit', ros.validateBoolean)(properties.autoSplit));
    errors.collect(ros.propertyValidator('enableTracking', ros.validateBoolean)(properties.enableTracking));
    errors.collect(ros.propertyValidator('encryptConf', RosLogstore_EncryptConfPropertyValidator)(properties.encryptConf));
    if (properties.ttl && (typeof properties.ttl) !== 'object') {
        errors.collect(ros.propertyValidator('ttl', ros.validateRange)({
            data: properties.ttl,
            min: 1,
            max: 3600,
        }));
    }
    errors.collect(ros.propertyValidator('ttl', ros.validateNumber)(properties.ttl));
    if (properties.shardCount && (typeof properties.shardCount) !== 'object') {
        errors.collect(ros.propertyValidator('shardCount', ros.validateRange)({
            data: properties.shardCount,
            min: 1,
            max: 100,
        }));
    }
    errors.collect(ros.propertyValidator('shardCount', ros.validateNumber)(properties.shardCount));
    return errors.wrap('supplied properties not correct for "RosLogstoreProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::SLS::Logstore` resource
 *
 * @param properties - the TypeScript properties of a `RosLogstoreProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::SLS::Logstore` resource.
 */
// @ts-ignore TS6133
function rosLogstorePropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosLogstorePropsValidator(properties).assertSuccess();
    }
    return {
        LogstoreName: ros.stringToRosTemplate(properties.logstoreName),
        ProjectName: ros.stringToRosTemplate(properties.projectName),
        AppendMeta: ros.booleanToRosTemplate(properties.appendMeta),
        AutoSplit: ros.booleanToRosTemplate(properties.autoSplit),
        EnableTracking: ros.booleanToRosTemplate(properties.enableTracking),
        EncryptConf: rosLogstoreEncryptConfPropertyToRosTemplate(properties.encryptConf),
        MaxSplitShard: ros.numberToRosTemplate(properties.maxSplitShard),
        PreserveStorage: ros.booleanToRosTemplate(properties.preserveStorage),
        ShardCount: ros.numberToRosTemplate(properties.shardCount),
        TTL: ros.numberToRosTemplate(properties.ttl),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::SLS::Logstore`, which is used to create a Logstore in a Log Service project.
 * @Note This class does not contain additional functions, so it is recommended to use the `Logstore` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-sls-logstore
 */
class RosLogstore extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosLogstore.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrLogstoreName = this.getAtt('LogstoreName');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.logstoreName = props.logstoreName;
        this.projectName = props.projectName;
        this.appendMeta = props.appendMeta;
        this.autoSplit = props.autoSplit;
        this.enableTracking = props.enableTracking;
        this.encryptConf = props.encryptConf;
        this.maxSplitShard = props.maxSplitShard;
        this.preserveStorage = props.preserveStorage;
        this.shardCount = props.shardCount;
        this.ttl = props.ttl;
    }
    get rosProperties() {
        return {
            logstoreName: this.logstoreName,
            projectName: this.projectName,
            appendMeta: this.appendMeta,
            autoSplit: this.autoSplit,
            enableTracking: this.enableTracking,
            encryptConf: this.encryptConf,
            maxSplitShard: this.maxSplitShard,
            preserveStorage: this.preserveStorage,
            shardCount: this.shardCount,
            ttl: this.ttl,
        };
    }
    renderProperties(props) {
        return rosLogstorePropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosLogstore = RosLogstore;
/**
 * The resource type name for this resource class.
 */
RosLogstore.ROS_RESOURCE_TYPE_NAME = "ALIYUN::SLS::Logstore";
/**
 * Determine whether the given properties match those of a `EncryptConfProperty`
 *
 * @param properties - the TypeScript properties of a `EncryptConfProperty`
 *
 * @returns the result of the validation.
 */
function RosLogstore_EncryptConfPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('encryptType', ros.requiredValidator)(properties.encryptType));
    errors.collect(ros.propertyValidator('encryptType', ros.validateString)(properties.encryptType));
    errors.collect(ros.propertyValidator('enable', ros.requiredValidator)(properties.enable));
    errors.collect(ros.propertyValidator('enable', ros.validateBoolean)(properties.enable));
    errors.collect(ros.propertyValidator('userCmkInfo', RosLogstore_UserCmkInfoPropertyValidator)(properties.userCmkInfo));
    return errors.wrap('supplied properties not correct for "EncryptConfProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::SLS::Logstore.EncryptConf` resource
 *
 * @param properties - the TypeScript properties of a `EncryptConfProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::SLS::Logstore.EncryptConf` resource.
 */
// @ts-ignore TS6133
function rosLogstoreEncryptConfPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosLogstore_EncryptConfPropertyValidator(properties).assertSuccess();
    return {
        EncryptType: ros.stringToRosTemplate(properties.encryptType),
        Enable: ros.booleanToRosTemplate(properties.enable),
        UserCmkInfo: rosLogstoreUserCmkInfoPropertyToRosTemplate(properties.userCmkInfo),
    };
}
/**
 * Determine whether the given properties match those of a `UserCmkInfoProperty`
 *
 * @param properties - the TypeScript properties of a `UserCmkInfoProperty`
 *
 * @returns the result of the validation.
 */
function RosLogstore_UserCmkInfoPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('cmkKeyId', ros.requiredValidator)(properties.cmkKeyId));
    errors.collect(ros.propertyValidator('cmkKeyId', ros.validateString)(properties.cmkKeyId));
    errors.collect(ros.propertyValidator('regionId', ros.requiredValidator)(properties.regionId));
    errors.collect(ros.propertyValidator('regionId', ros.validateString)(properties.regionId));
    errors.collect(ros.propertyValidator('arn', ros.requiredValidator)(properties.arn));
    errors.collect(ros.propertyValidator('arn', ros.validateString)(properties.arn));
    return errors.wrap('supplied properties not correct for "UserCmkInfoProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::SLS::Logstore.UserCmkInfo` resource
 *
 * @param properties - the TypeScript properties of a `UserCmkInfoProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::SLS::Logstore.UserCmkInfo` resource.
 */
// @ts-ignore TS6133
function rosLogstoreUserCmkInfoPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosLogstore_UserCmkInfoPropertyValidator(properties).assertSuccess();
    return {
        CmkKeyId: ros.stringToRosTemplate(properties.cmkKeyId),
        RegionId: ros.stringToRosTemplate(properties.regionId),
        Arn: ros.stringToRosTemplate(properties.arn),
    };
}
/**
 * Determine whether the given properties match those of a `RosLogtailConfigProps`
 *
 * @param properties - the TypeScript properties of a `RosLogtailConfigProps`
 *
 * @returns the result of the validation.
 */
function RosLogtailConfigPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('logtailConfigName', ros.requiredValidator)(properties.logtailConfigName));
    if (properties.logtailConfigName && (Array.isArray(properties.logtailConfigName) || (typeof properties.logtailConfigName) === 'string')) {
        errors.collect(ros.propertyValidator('logtailConfigName', ros.validateLength)({
            data: properties.logtailConfigName.length,
            min: 3,
            max: 63,
        }));
    }
    errors.collect(ros.propertyValidator('logtailConfigName', ros.validateString)(properties.logtailConfigName));
    errors.collect(ros.propertyValidator('logstoreName', ros.requiredValidator)(properties.logstoreName));
    if (properties.logstoreName && (Array.isArray(properties.logstoreName) || (typeof properties.logstoreName) === 'string')) {
        errors.collect(ros.propertyValidator('logstoreName', ros.validateLength)({
            data: properties.logstoreName.length,
            min: 3,
            max: 63,
        }));
    }
    errors.collect(ros.propertyValidator('logstoreName', ros.validateString)(properties.logstoreName));
    errors.collect(ros.propertyValidator('projectName', ros.requiredValidator)(properties.projectName));
    if (properties.projectName && (Array.isArray(properties.projectName) || (typeof properties.projectName) === 'string')) {
        errors.collect(ros.propertyValidator('projectName', ros.validateLength)({
            data: properties.projectName.length,
            min: 3,
            max: 63,
        }));
    }
    if (properties.projectName && (typeof properties.projectName) !== 'object') {
        errors.collect(ros.propertyValidator('projectName', ros.validateAllowedPattern)({
            data: properties.projectName,
            reg: /^[a-zA-Z0-9_-]+$/
        }));
    }
    errors.collect(ros.propertyValidator('projectName', ros.validateString)(properties.projectName));
    errors.collect(ros.propertyValidator('rawConfigData', ros.hashValidator(ros.validateAny))(properties.rawConfigData));
    errors.collect(ros.propertyValidator('cloneFrom', RosLogtailConfig_CloneFromPropertyValidator)(properties.cloneFrom));
    return errors.wrap('supplied properties not correct for "RosLogtailConfigProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::SLS::LogtailConfig` resource
 *
 * @param properties - the TypeScript properties of a `RosLogtailConfigProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::SLS::LogtailConfig` resource.
 */
// @ts-ignore TS6133
function rosLogtailConfigPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosLogtailConfigPropsValidator(properties).assertSuccess();
    }
    return {
        LogstoreName: ros.stringToRosTemplate(properties.logstoreName),
        LogtailConfigName: ros.stringToRosTemplate(properties.logtailConfigName),
        ProjectName: ros.stringToRosTemplate(properties.projectName),
        CloneFrom: rosLogtailConfigCloneFromPropertyToRosTemplate(properties.cloneFrom),
        RawConfigData: ros.hashMapper(ros.objectToRosTemplate)(properties.rawConfigData),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::SLS::LogtailConfig`, which is used to configure Logtail properties for data collection.
 * @Note This class does not contain additional functions, so it is recommended to use the `LogtailConfig` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-sls-logtailconfig
 */
class RosLogtailConfig extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosLogtailConfig.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrAppliedMachineGroups = this.getAtt('AppliedMachineGroups');
        this.attrEndpoint = this.getAtt('Endpoint');
        this.attrLogtailConfigName = this.getAtt('LogtailConfigName');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.logstoreName = props.logstoreName;
        this.logtailConfigName = props.logtailConfigName;
        this.projectName = props.projectName;
        this.cloneFrom = props.cloneFrom;
        this.rawConfigData = props.rawConfigData;
    }
    get rosProperties() {
        return {
            logstoreName: this.logstoreName,
            logtailConfigName: this.logtailConfigName,
            projectName: this.projectName,
            cloneFrom: this.cloneFrom,
            rawConfigData: this.rawConfigData,
        };
    }
    renderProperties(props) {
        return rosLogtailConfigPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosLogtailConfig = RosLogtailConfig;
/**
 * The resource type name for this resource class.
 */
RosLogtailConfig.ROS_RESOURCE_TYPE_NAME = "ALIYUN::SLS::LogtailConfig";
/**
 * Determine whether the given properties match those of a `CloneFromProperty`
 *
 * @param properties - the TypeScript properties of a `CloneFromProperty`
 *
 * @returns the result of the validation.
 */
function RosLogtailConfig_CloneFromPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('logtailConfigName', ros.requiredValidator)(properties.logtailConfigName));
    if (properties.logtailConfigName && (Array.isArray(properties.logtailConfigName) || (typeof properties.logtailConfigName) === 'string')) {
        errors.collect(ros.propertyValidator('logtailConfigName', ros.validateLength)({
            data: properties.logtailConfigName.length,
            min: 3,
            max: 63,
        }));
    }
    errors.collect(ros.propertyValidator('logtailConfigName', ros.validateString)(properties.logtailConfigName));
    errors.collect(ros.propertyValidator('projectName', ros.requiredValidator)(properties.projectName));
    if (properties.projectName && (Array.isArray(properties.projectName) || (typeof properties.projectName) === 'string')) {
        errors.collect(ros.propertyValidator('projectName', ros.validateLength)({
            data: properties.projectName.length,
            min: 3,
            max: 63,
        }));
    }
    errors.collect(ros.propertyValidator('projectName', ros.validateString)(properties.projectName));
    return errors.wrap('supplied properties not correct for "CloneFromProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::SLS::LogtailConfig.CloneFrom` resource
 *
 * @param properties - the TypeScript properties of a `CloneFromProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::SLS::LogtailConfig.CloneFrom` resource.
 */
// @ts-ignore TS6133
function rosLogtailConfigCloneFromPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosLogtailConfig_CloneFromPropertyValidator(properties).assertSuccess();
    return {
        LogtailConfigName: ros.stringToRosTemplate(properties.logtailConfigName),
        ProjectName: ros.stringToRosTemplate(properties.projectName),
    };
}
/**
 * Determine whether the given properties match those of a `RosMachineGroupProps`
 *
 * @param properties - the TypeScript properties of a `RosMachineGroupProps`
 *
 * @returns the result of the validation.
 */
function RosMachineGroupPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('machineList', ros.listValidator(ros.validateAny))(properties.machineList));
    errors.collect(ros.propertyValidator('groupName', ros.validateString)(properties.groupName));
    if (properties.groupType && (typeof properties.groupType) !== 'object') {
        errors.collect(ros.propertyValidator('groupType', ros.validateAllowedValues)({
            data: properties.groupType,
            allowedValues: ["", "Armory"],
        }));
    }
    errors.collect(ros.propertyValidator('groupType', ros.validateString)(properties.groupType));
    errors.collect(ros.propertyValidator('projectName', ros.validateString)(properties.projectName));
    if (properties.machineIdentifyType && (typeof properties.machineIdentifyType) !== 'object') {
        errors.collect(ros.propertyValidator('machineIdentifyType', ros.validateAllowedValues)({
            data: properties.machineIdentifyType,
            allowedValues: ["ip", "userdefined"],
        }));
    }
    errors.collect(ros.propertyValidator('machineIdentifyType', ros.validateString)(properties.machineIdentifyType));
    errors.collect(ros.propertyValidator('groupAttribute', ros.validateString)(properties.groupAttribute));
    return errors.wrap('supplied properties not correct for "RosMachineGroupProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::SLS::MachineGroup` resource
 *
 * @param properties - the TypeScript properties of a `RosMachineGroupProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::SLS::MachineGroup` resource.
 */
// @ts-ignore TS6133
function rosMachineGroupPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosMachineGroupPropsValidator(properties).assertSuccess();
    }
    return {
        GroupAttribute: ros.stringToRosTemplate(properties.groupAttribute),
        GroupName: ros.stringToRosTemplate(properties.groupName),
        GroupType: ros.stringToRosTemplate(properties.groupType),
        MachineIdentifyType: ros.stringToRosTemplate(properties.machineIdentifyType),
        MachineList: ros.listMapper(ros.objectToRosTemplate)(properties.machineList),
        ProjectName: ros.stringToRosTemplate(properties.projectName),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::SLS::MachineGroup`.
 * @Note This class does not contain additional functions, so it is recommended to use the `MachineGroup` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-sls-machinegroup
 */
class RosMachineGroup extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosMachineGroup.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrGroupName = this.getAtt('GroupName');
        this.attrProjectName = this.getAtt('ProjectName');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.groupAttribute = props.groupAttribute;
        this.groupName = props.groupName;
        this.groupType = props.groupType;
        this.machineIdentifyType = props.machineIdentifyType;
        this.machineList = props.machineList;
        this.projectName = props.projectName;
    }
    get rosProperties() {
        return {
            groupAttribute: this.groupAttribute,
            groupName: this.groupName,
            groupType: this.groupType,
            machineIdentifyType: this.machineIdentifyType,
            machineList: this.machineList,
            projectName: this.projectName,
        };
    }
    renderProperties(props) {
        return rosMachineGroupPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosMachineGroup = RosMachineGroup;
/**
 * The resource type name for this resource class.
 */
RosMachineGroup.ROS_RESOURCE_TYPE_NAME = "ALIYUN::SLS::MachineGroup";
/**
 * Determine whether the given properties match those of a `RosMetricStoreProps`
 *
 * @param properties - the TypeScript properties of a `RosMetricStoreProps`
 *
 * @returns the result of the validation.
 */
function RosMetricStorePropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('logstoreName', ros.requiredValidator)(properties.logstoreName));
    if (properties.logstoreName && (Array.isArray(properties.logstoreName) || (typeof properties.logstoreName) === 'string')) {
        errors.collect(ros.propertyValidator('logstoreName', ros.validateLength)({
            data: properties.logstoreName.length,
            min: 3,
            max: 63,
        }));
    }
    errors.collect(ros.propertyValidator('logstoreName', ros.validateString)(properties.logstoreName));
    errors.collect(ros.propertyValidator('preserveStorage', ros.validateBoolean)(properties.preserveStorage));
    errors.collect(ros.propertyValidator('projectName', ros.requiredValidator)(properties.projectName));
    if (properties.projectName && (Array.isArray(properties.projectName) || (typeof properties.projectName) === 'string')) {
        errors.collect(ros.propertyValidator('projectName', ros.validateLength)({
            data: properties.projectName.length,
            min: 3,
            max: 63,
        }));
    }
    if (properties.projectName && (typeof properties.projectName) !== 'object') {
        errors.collect(ros.propertyValidator('projectName', ros.validateAllowedPattern)({
            data: properties.projectName,
            reg: /^[a-zA-Z0-9_-]+$/
        }));
    }
    errors.collect(ros.propertyValidator('projectName', ros.validateString)(properties.projectName));
    if (properties.ttl && (typeof properties.ttl) !== 'object') {
        errors.collect(ros.propertyValidator('ttl', ros.validateRange)({
            data: properties.ttl,
            min: 1,
            max: 3000,
        }));
    }
    errors.collect(ros.propertyValidator('ttl', ros.validateNumber)(properties.ttl));
    if (properties.shardCount && (typeof properties.shardCount) !== 'object') {
        errors.collect(ros.propertyValidator('shardCount', ros.validateRange)({
            data: properties.shardCount,
            min: 1,
            max: 10,
        }));
    }
    errors.collect(ros.propertyValidator('shardCount', ros.validateNumber)(properties.shardCount));
    return errors.wrap('supplied properties not correct for "RosMetricStoreProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::SLS::MetricStore` resource
 *
 * @param properties - the TypeScript properties of a `RosMetricStoreProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::SLS::MetricStore` resource.
 */
// @ts-ignore TS6133
function rosMetricStorePropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosMetricStorePropsValidator(properties).assertSuccess();
    }
    return {
        LogstoreName: ros.stringToRosTemplate(properties.logstoreName),
        ProjectName: ros.stringToRosTemplate(properties.projectName),
        PreserveStorage: ros.booleanToRosTemplate(properties.preserveStorage),
        ShardCount: ros.numberToRosTemplate(properties.shardCount),
        TTL: ros.numberToRosTemplate(properties.ttl),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::SLS::MetricStore`, which is used to create a Logstore.
 * @Note This class does not contain additional functions, so it is recommended to use the `MetricStore` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-sls-metricstore
 */
class RosMetricStore extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosMetricStore.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrLogstoreName = this.getAtt('LogstoreName');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.logstoreName = props.logstoreName;
        this.projectName = props.projectName;
        this.preserveStorage = props.preserveStorage;
        this.shardCount = props.shardCount;
        this.ttl = props.ttl;
    }
    get rosProperties() {
        return {
            logstoreName: this.logstoreName,
            projectName: this.projectName,
            preserveStorage: this.preserveStorage,
            shardCount: this.shardCount,
            ttl: this.ttl,
        };
    }
    renderProperties(props) {
        return rosMetricStorePropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosMetricStore = RosMetricStore;
/**
 * The resource type name for this resource class.
 */
RosMetricStore.ROS_RESOURCE_TYPE_NAME = "ALIYUN::SLS::MetricStore";
/**
 * Determine whether the given properties match those of a `RosProjectProps`
 *
 * @param properties - the TypeScript properties of a `RosProjectProps`
 *
 * @returns the result of the validation.
 */
function RosProjectPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    if (properties.description && (Array.isArray(properties.description) || (typeof properties.description) === 'string')) {
        errors.collect(ros.propertyValidator('description', ros.validateLength)({
            data: properties.description.length,
            min: undefined,
            max: 64,
        }));
    }
    errors.collect(ros.propertyValidator('description', ros.validateString)(properties.description));
    if (properties.tags && (Array.isArray(properties.tags) || (typeof properties.tags) === 'string')) {
        errors.collect(ros.propertyValidator('tags', ros.validateLength)({
            data: properties.tags.length,
            min: undefined,
            max: 20,
        }));
    }
    errors.collect(ros.propertyValidator('tags', ros.listValidator(RosProject_TagsPropertyValidator))(properties.tags));
    errors.collect(ros.propertyValidator('name', ros.requiredValidator)(properties.name));
    if (properties.name && (Array.isArray(properties.name) || (typeof properties.name) === 'string')) {
        errors.collect(ros.propertyValidator('name', ros.validateLength)({
            data: properties.name.length,
            min: 3,
            max: 63,
        }));
    }
    if (properties.name && (typeof properties.name) !== 'object') {
        errors.collect(ros.propertyValidator('name', ros.validateAllowedPattern)({
            data: properties.name,
            reg: /^[a-zA-Z0-9_-]+$/
        }));
    }
    errors.collect(ros.propertyValidator('name', ros.validateString)(properties.name));
    return errors.wrap('supplied properties not correct for "RosProjectProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::SLS::Project` resource
 *
 * @param properties - the TypeScript properties of a `RosProjectProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::SLS::Project` resource.
 */
// @ts-ignore TS6133
function rosProjectPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosProjectPropsValidator(properties).assertSuccess();
    }
    return {
        Name: ros.stringToRosTemplate(properties.name),
        Description: ros.stringToRosTemplate(properties.description),
        Tags: ros.listMapper(rosProjectTagsPropertyToRosTemplate)(properties.tags),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::SLS::Project`.
 * @Note This class does not contain additional functions, so it is recommended to use the `Project` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-sls-project
 */
class RosProject extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosProject.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrName = this.getAtt('Name');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.name = props.name;
        this.description = props.description;
        this.tags = props.tags;
    }
    get rosProperties() {
        return {
            name: this.name,
            description: this.description,
            tags: this.tags,
        };
    }
    renderProperties(props) {
        return rosProjectPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosProject = RosProject;
/**
 * The resource type name for this resource class.
 */
RosProject.ROS_RESOURCE_TYPE_NAME = "ALIYUN::SLS::Project";
/**
 * Determine whether the given properties match those of a `TagsProperty`
 *
 * @param properties - the TypeScript properties of a `TagsProperty`
 *
 * @returns the result of the validation.
 */
function RosProject_TagsPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('value', ros.validateString)(properties.value));
    errors.collect(ros.propertyValidator('key', ros.requiredValidator)(properties.key));
    errors.collect(ros.propertyValidator('key', ros.validateString)(properties.key));
    return errors.wrap('supplied properties not correct for "TagsProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::SLS::Project.Tags` resource
 *
 * @param properties - the TypeScript properties of a `TagsProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::SLS::Project.Tags` resource.
 */
// @ts-ignore TS6133
function rosProjectTagsPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosProject_TagsPropertyValidator(properties).assertSuccess();
    return {
        Value: ros.stringToRosTemplate(properties.value),
        Key: ros.stringToRosTemplate(properties.key),
    };
}
/**
 * Determine whether the given properties match those of a `RosSavedsearchProps`
 *
 * @param properties - the TypeScript properties of a `RosSavedsearchProps`
 *
 * @returns the result of the validation.
 */
function RosSavedsearchPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('project', ros.requiredValidator)(properties.project));
    errors.collect(ros.propertyValidator('project', ros.validateString)(properties.project));
    errors.collect(ros.propertyValidator('detail', ros.requiredValidator)(properties.detail));
    errors.collect(ros.propertyValidator('detail', RosSavedsearch_DetailPropertyValidator)(properties.detail));
    return errors.wrap('supplied properties not correct for "RosSavedsearchProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::SLS::Savedsearch` resource
 *
 * @param properties - the TypeScript properties of a `RosSavedsearchProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::SLS::Savedsearch` resource.
 */
// @ts-ignore TS6133
function rosSavedsearchPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosSavedsearchPropsValidator(properties).assertSuccess();
    }
    return {
        Detail: rosSavedsearchDetailPropertyToRosTemplate(properties.detail),
        Project: ros.stringToRosTemplate(properties.project),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::SLS::Savedsearch`, which is used to save search results as a saved search.
 * @Note This class does not contain additional functions, so it is recommended to use the `Savedsearch` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-sls-savedsearch
 */
class RosSavedsearch extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosSavedsearch.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrSavedsearchName = this.getAtt('SavedsearchName');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.detail = props.detail;
        this.project = props.project;
    }
    get rosProperties() {
        return {
            detail: this.detail,
            project: this.project,
        };
    }
    renderProperties(props) {
        return rosSavedsearchPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosSavedsearch = RosSavedsearch;
/**
 * The resource type name for this resource class.
 */
RosSavedsearch.ROS_RESOURCE_TYPE_NAME = "ALIYUN::SLS::Savedsearch";
/**
 * Determine whether the given properties match those of a `DetailProperty`
 *
 * @param properties - the TypeScript properties of a `DetailProperty`
 *
 * @returns the result of the validation.
 */
function RosSavedsearch_DetailPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('searchQuery', ros.requiredValidator)(properties.searchQuery));
    errors.collect(ros.propertyValidator('searchQuery', ros.validateString)(properties.searchQuery));
    errors.collect(ros.propertyValidator('logstore', ros.requiredValidator)(properties.logstore));
    errors.collect(ros.propertyValidator('logstore', ros.validateString)(properties.logstore));
    errors.collect(ros.propertyValidator('displayName', ros.validateString)(properties.displayName));
    errors.collect(ros.propertyValidator('savedsearchName', ros.requiredValidator)(properties.savedsearchName));
    errors.collect(ros.propertyValidator('savedsearchName', ros.validateString)(properties.savedsearchName));
    errors.collect(ros.propertyValidator('topic', ros.requiredValidator)(properties.topic));
    errors.collect(ros.propertyValidator('topic', ros.validateString)(properties.topic));
    return errors.wrap('supplied properties not correct for "DetailProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::SLS::Savedsearch.Detail` resource
 *
 * @param properties - the TypeScript properties of a `DetailProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::SLS::Savedsearch.Detail` resource.
 */
// @ts-ignore TS6133
function rosSavedsearchDetailPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosSavedsearch_DetailPropertyValidator(properties).assertSuccess();
    return {
        SearchQuery: ros.stringToRosTemplate(properties.searchQuery),
        Logstore: ros.stringToRosTemplate(properties.logstore),
        DisplayName: ros.stringToRosTemplate(properties.displayName),
        SavedsearchName: ros.stringToRosTemplate(properties.savedsearchName),
        Topic: ros.stringToRosTemplate(properties.topic),
    };
}
/**
 * Determine whether the given properties match those of a `RosServiceLogProps`
 *
 * @param properties - the TypeScript properties of a `RosServiceLogProps`
 *
 * @returns the result of the validation.
 */
function RosServiceLogPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('serviceLogTypes', ros.requiredValidator)(properties.serviceLogTypes));
    if (properties.serviceLogTypes && (Array.isArray(properties.serviceLogTypes) || (typeof properties.serviceLogTypes) === 'string')) {
        errors.collect(ros.propertyValidator('serviceLogTypes', ros.validateLength)({
            data: properties.serviceLogTypes.length,
            min: 1,
            max: 3,
        }));
    }
    errors.collect(ros.propertyValidator('serviceLogTypes', ros.listValidator(ros.validateString))(properties.serviceLogTypes));
    errors.collect(ros.propertyValidator('projectName', ros.requiredValidator)(properties.projectName));
    errors.collect(ros.propertyValidator('projectName', ros.validateString)(properties.projectName));
    errors.collect(ros.propertyValidator('logStorageLocation', ros.requiredValidator)(properties.logStorageLocation));
    errors.collect(ros.propertyValidator('logStorageLocation', ros.validateString)(properties.logStorageLocation));
    return errors.wrap('supplied properties not correct for "RosServiceLogProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::SLS::ServiceLog` resource
 *
 * @param properties - the TypeScript properties of a `RosServiceLogProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::SLS::ServiceLog` resource.
 */
// @ts-ignore TS6133
function rosServiceLogPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosServiceLogPropsValidator(properties).assertSuccess();
    }
    return {
        LogStorageLocation: ros.stringToRosTemplate(properties.logStorageLocation),
        ProjectName: ros.stringToRosTemplate(properties.projectName),
        ServiceLogTypes: ros.listMapper(ros.stringToRosTemplate)(properties.serviceLogTypes),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::SLS::ServiceLog`, which is used to enable the service log feature.
 * @Note This class does not contain additional functions, so it is recommended to use the `ServiceLog` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-sls-servicelog
 */
class RosServiceLog extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosServiceLog.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrProjectName = this.getAtt('ProjectName');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.logStorageLocation = props.logStorageLocation;
        this.projectName = props.projectName;
        this.serviceLogTypes = props.serviceLogTypes;
    }
    get rosProperties() {
        return {
            logStorageLocation: this.logStorageLocation,
            projectName: this.projectName,
            serviceLogTypes: this.serviceLogTypes,
        };
    }
    renderProperties(props) {
        return rosServiceLogPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosServiceLog = RosServiceLog;
/**
 * The resource type name for this resource class.
 */
RosServiceLog.ROS_RESOURCE_TYPE_NAME = "ALIYUN::SLS::ServiceLog";
//# sourceMappingURL=data:application/json;base64,