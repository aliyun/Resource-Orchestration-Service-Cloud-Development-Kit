"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PidProject = exports.PidProjectProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const brainindustrial_generated_1 = require("./brainindustrial.generated");
Object.defineProperty(exports, "PidProjectProperty", { enumerable: true, get: function () { return brainindustrial_generated_1.RosPidProject; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::BrainIndustrial::PidProject`, which is used to add a project.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosPidProject`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-brainindustrial-pidproject
 */
class PidProject extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosPidProject = new brainindustrial_generated_1.RosPidProject(this, id, {
            pidProjectDesc: props.pidProjectDesc,
            pidProjectName: props.pidProjectName,
            pidOrganizationId: props.pidOrganizationId,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosPidProject;
        this.attrPidOrganizationId = rosPidProject.attrPidOrganizationId;
        this.attrPidProjectDesc = rosPidProject.attrPidProjectDesc;
        this.attrPidProjectId = rosPidProject.attrPidProjectId;
        this.attrPidProjectName = rosPidProject.attrPidProjectName;
    }
}
exports.PidProject = PidProject;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGlkcHJvamVjdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInBpZHByb2plY3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsOENBQThDO0FBQzlDLDJFQUE0RDtBQUVsQyxtR0FGakIseUNBQWEsT0FFc0I7QUF3QjVDOzs7O0dBSUc7QUFDSCxNQUFhLFVBQVcsU0FBUSxHQUFHLENBQUMsUUFBUTtJQXNCeEM7Ozs7T0FJRztJQUNILFlBQVksS0FBb0IsRUFBRSxFQUFVLEVBQUUsS0FBc0IsRUFBRSxtQ0FBMkMsSUFBSTtRQUNqSCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRWpCLE1BQU0sYUFBYSxHQUFHLElBQUkseUNBQWEsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFHO1lBQy9DLGNBQWMsRUFBRSxLQUFLLENBQUMsY0FBYztZQUNwQyxjQUFjLEVBQUUsS0FBSyxDQUFDLGNBQWM7WUFDcEMsaUJBQWlCLEVBQUUsS0FBSyxDQUFDLGlCQUFpQjtTQUM3QyxFQUFFLGdDQUFnQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztRQUNwRixJQUFJLENBQUMsUUFBUSxHQUFHLGFBQWEsQ0FBQztRQUM5QixJQUFJLENBQUMscUJBQXFCLEdBQUcsYUFBYSxDQUFDLHFCQUFxQixDQUFDO1FBQ2pFLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxhQUFhLENBQUMsa0JBQWtCLENBQUM7UUFDM0QsSUFBSSxDQUFDLGdCQUFnQixHQUFHLGFBQWEsQ0FBQyxnQkFBZ0IsQ0FBQztRQUN2RCxJQUFJLENBQUMsa0JBQWtCLEdBQUcsYUFBYSxDQUFDLGtCQUFrQixDQUFDO0lBQy9ELENBQUM7Q0FDSjtBQXpDRCxnQ0F5Q0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyByb3MgZnJvbSAnQGFsaWNsb3VkL3Jvcy1jZGstY29yZSc7XG5pbXBvcnQgeyBSb3NQaWRQcm9qZWN0IH0gZnJvbSAnLi9icmFpbmluZHVzdHJpYWwuZ2VuZXJhdGVkJztcbi8vIEdlbmVyYXRlZCBmcm9tIHRoZSBBbGlDbG91ZCBST1MgUmVzb3VyY2UgU3BlY2lmaWNhdGlvblxuZXhwb3J0IHsgUm9zUGlkUHJvamVjdCBhcyBQaWRQcm9qZWN0UHJvcGVydHkgfTtcblxuLyoqXG4gKiBQcm9wZXJ0aWVzIGZvciBkZWZpbmluZyBhIGBQaWRQcm9qZWN0YC5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvYWxpeXVuLWJyYWluaW5kdXN0cmlhbC1waWRwcm9qZWN0XG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUGlkUHJvamVjdFByb3BzIHtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHBpZE9yZ2FuaXphdGlvbklkOiBQaWRPcmdhbml6YXRpb25JZFxuICAgICAqL1xuICAgIHJlYWRvbmx5IHBpZE9yZ2FuaXphdGlvbklkOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBwaWRQcm9qZWN0TmFtZTogUGlkUHJvamVjdE5hbWVcbiAgICAgKi9cbiAgICByZWFkb25seSBwaWRQcm9qZWN0TmFtZTogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgcGlkUHJvamVjdERlc2M6IFBpZFByb2plY3REZXNjXG4gICAgICovXG4gICAgcmVhZG9ubHkgcGlkUHJvamVjdERlc2M/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG59XG5cbi8qKlxuICogVGhpcyBjbGFzcyBlbmNhcHN1bGF0ZXMgYW5kIGV4dGVuZHMgdGhlIFJPUyByZXNvdXJjZSB0eXBlIGBBTElZVU46OkJyYWluSW5kdXN0cmlhbDo6UGlkUHJvamVjdGAsIHdoaWNoIGlzIHVzZWQgdG8gYWRkIGEgcHJvamVjdC5cbiAqIEBOb3RlIFRoaXMgY2xhc3MgbWF5IGhhdmUgc29tZSBuZXcgZnVuY3Rpb25zIHRvIGZhY2lsaXRhdGUgZGV2ZWxvcG1lbnQsIHNvIGl0IGlzIHJlY29tbWVuZGVkIHRvIHVzZSB0aGlzIGNsYXNzIGluc3RlYWQgb2YgYFJvc1BpZFByb2plY3RgZm9yIGEgbW9yZSBjb252ZW5pZW50IGRldmVsb3BtZW50IGV4cGVyaWVuY2UuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2FsaXl1bi1icmFpbmluZHVzdHJpYWwtcGlkcHJvamVjdFxuICovXG5leHBvcnQgY2xhc3MgUGlkUHJvamVjdCBleHRlbmRzIHJvcy5SZXNvdXJjZSB7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgUGlkT3JnYW5pemF0aW9uSWQ6IFBpZE9yZ2FuaXphdGlvbklkXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJQaWRPcmdhbml6YXRpb25JZDogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIFBpZFByb2plY3REZXNjOiBQaWRQcm9qZWN0RGVzY1xuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyUGlkUHJvamVjdERlc2M6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBQaWRQcm9qZWN0SWQ6IFBpZFByb2plY3RJZFxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyUGlkUHJvamVjdElkOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgUGlkUHJvamVjdE5hbWU6IFBpZFByb2plY3ROYW1lXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJQaWRQcm9qZWN0TmFtZTogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUGFyYW0gc2NvcGUgLSBzY29wZSBpbiB3aGljaCB0aGlzIHJlc291cmNlIGlzIGRlZmluZWRcbiAgICAgKiBQYXJhbSBpZCAgICAtIHNjb3BlZCBpZCBvZiB0aGUgcmVzb3VyY2VcbiAgICAgKiBQYXJhbSBwcm9wcyAtIHJlc291cmNlIHByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihzY29wZTogcm9zLkNvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IFBpZFByb2plY3RQcm9wcywgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6Ym9vbGVhbiA9IHRydWUpIHtcbiAgICAgICAgc3VwZXIoc2NvcGUsIGlkKTtcblxuICAgICAgICBjb25zdCByb3NQaWRQcm9qZWN0ID0gbmV3IFJvc1BpZFByb2plY3QodGhpcywgaWQsICB7XG4gICAgICAgICAgICBwaWRQcm9qZWN0RGVzYzogcHJvcHMucGlkUHJvamVjdERlc2MsXG4gICAgICAgICAgICBwaWRQcm9qZWN0TmFtZTogcHJvcHMucGlkUHJvamVjdE5hbWUsXG4gICAgICAgICAgICBwaWRPcmdhbml6YXRpb25JZDogcHJvcHMucGlkT3JnYW5pemF0aW9uSWQsXG4gICAgICAgIH0sIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ICYmIHRoaXMuc3RhY2suZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQpO1xuICAgICAgICB0aGlzLnJlc291cmNlID0gcm9zUGlkUHJvamVjdDtcbiAgICAgICAgdGhpcy5hdHRyUGlkT3JnYW5pemF0aW9uSWQgPSByb3NQaWRQcm9qZWN0LmF0dHJQaWRPcmdhbml6YXRpb25JZDtcbiAgICAgICAgdGhpcy5hdHRyUGlkUHJvamVjdERlc2MgPSByb3NQaWRQcm9qZWN0LmF0dHJQaWRQcm9qZWN0RGVzYztcbiAgICAgICAgdGhpcy5hdHRyUGlkUHJvamVjdElkID0gcm9zUGlkUHJvamVjdC5hdHRyUGlkUHJvamVjdElkO1xuICAgICAgICB0aGlzLmF0dHJQaWRQcm9qZWN0TmFtZSA9IHJvc1BpZFByb2plY3QuYXR0clBpZFByb2plY3ROYW1lO1xuICAgIH1cbn1cbiJdfQ==