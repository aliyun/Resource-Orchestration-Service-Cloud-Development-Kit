"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PidOrganization = exports.PidOrganizationProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const brainindustrial_generated_1 = require("./brainindustrial.generated");
Object.defineProperty(exports, "PidOrganizationProperty", { enumerable: true, get: function () { return brainindustrial_generated_1.RosPidOrganization; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::BrainIndustrial::PidOrganization`, which is used to configure the architecture of a project.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosPidOrganization`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-brainindustrial-pidorganization
 */
class PidOrganization extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosPidOrganization = new brainindustrial_generated_1.RosPidOrganization(this, id, {
            pidOrganizationName: props.pidOrganizationName,
            parentPidOrganizationId: props.parentPidOrganizationId,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosPidOrganization;
        this.attrParentPidOrganizationId = rosPidOrganization.attrParentPidOrganizationId;
        this.attrPidOrganizationId = rosPidOrganization.attrPidOrganizationId;
        this.attrPidOrganizationLevel = rosPidOrganization.attrPidOrganizationLevel;
        this.attrPidOrganizationName = rosPidOrganization.attrPidOrganizationName;
    }
}
exports.PidOrganization = PidOrganization;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGlkb3JnYW5pemF0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicGlkb3JnYW5pemF0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDhDQUE4QztBQUM5QywyRUFBaUU7QUFFbEMsd0dBRnRCLDhDQUFrQixPQUUyQjtBQW1CdEQ7Ozs7R0FJRztBQUNILE1BQWEsZUFBZ0IsU0FBUSxHQUFHLENBQUMsUUFBUTtJQXNCN0M7Ozs7T0FJRztJQUNILFlBQVksS0FBb0IsRUFBRSxFQUFVLEVBQUUsS0FBMkIsRUFBRSxtQ0FBMkMsSUFBSTtRQUN0SCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRWpCLE1BQU0sa0JBQWtCLEdBQUcsSUFBSSw4Q0FBa0IsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFHO1lBQ3pELG1CQUFtQixFQUFFLEtBQUssQ0FBQyxtQkFBbUI7WUFDOUMsdUJBQXVCLEVBQUUsS0FBSyxDQUFDLHVCQUF1QjtTQUN6RCxFQUFFLGdDQUFnQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztRQUNwRixJQUFJLENBQUMsUUFBUSxHQUFHLGtCQUFrQixDQUFDO1FBQ25DLElBQUksQ0FBQywyQkFBMkIsR0FBRyxrQkFBa0IsQ0FBQywyQkFBMkIsQ0FBQztRQUNsRixJQUFJLENBQUMscUJBQXFCLEdBQUcsa0JBQWtCLENBQUMscUJBQXFCLENBQUM7UUFDdEUsSUFBSSxDQUFDLHdCQUF3QixHQUFHLGtCQUFrQixDQUFDLHdCQUF3QixDQUFDO1FBQzVFLElBQUksQ0FBQyx1QkFBdUIsR0FBRyxrQkFBa0IsQ0FBQyx1QkFBdUIsQ0FBQztJQUM5RSxDQUFDO0NBQ0o7QUF4Q0QsMENBd0NDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcm9zIGZyb20gJ0BhbGljbG91ZC9yb3MtY2RrLWNvcmUnO1xuaW1wb3J0IHsgUm9zUGlkT3JnYW5pemF0aW9uIH0gZnJvbSAnLi9icmFpbmluZHVzdHJpYWwuZ2VuZXJhdGVkJztcbi8vIEdlbmVyYXRlZCBmcm9tIHRoZSBBbGlDbG91ZCBST1MgUmVzb3VyY2UgU3BlY2lmaWNhdGlvblxuZXhwb3J0IHsgUm9zUGlkT3JnYW5pemF0aW9uIGFzIFBpZE9yZ2FuaXphdGlvblByb3BlcnR5IH07XG5cbi8qKlxuICogUHJvcGVydGllcyBmb3IgZGVmaW5pbmcgYSBgUGlkT3JnYW5pemF0aW9uYC5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvYWxpeXVuLWJyYWluaW5kdXN0cmlhbC1waWRvcmdhbml6YXRpb25cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBQaWRPcmdhbml6YXRpb25Qcm9wcyB7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBwaWRPcmdhbml6YXRpb25OYW1lOiBQaWRPcmdhbml6YXRpb25OYW1lXG4gICAgICovXG4gICAgcmVhZG9ubHkgcGlkT3JnYW5pemF0aW9uTmFtZTogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgcGFyZW50UGlkT3JnYW5pemF0aW9uSWQ6IFBhcmVudFBpZE9yZ2FuaXphdGlvbklkXG4gICAgICovXG4gICAgcmVhZG9ubHkgcGFyZW50UGlkT3JnYW5pemF0aW9uSWQ/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG59XG5cbi8qKlxuICogVGhpcyBjbGFzcyBlbmNhcHN1bGF0ZXMgYW5kIGV4dGVuZHMgdGhlIFJPUyByZXNvdXJjZSB0eXBlIGBBTElZVU46OkJyYWluSW5kdXN0cmlhbDo6UGlkT3JnYW5pemF0aW9uYCwgd2hpY2ggaXMgdXNlZCB0byBjb25maWd1cmUgdGhlIGFyY2hpdGVjdHVyZSBvZiBhIHByb2plY3QuXG4gKiBATm90ZSBUaGlzIGNsYXNzIG1heSBoYXZlIHNvbWUgbmV3IGZ1bmN0aW9ucyB0byBmYWNpbGl0YXRlIGRldmVsb3BtZW50LCBzbyBpdCBpcyByZWNvbW1lbmRlZCB0byB1c2UgdGhpcyBjbGFzcyBpbnN0ZWFkIG9mIGBSb3NQaWRPcmdhbml6YXRpb25gZm9yIGEgbW9yZSBjb252ZW5pZW50IGRldmVsb3BtZW50IGV4cGVyaWVuY2UuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2FsaXl1bi1icmFpbmluZHVzdHJpYWwtcGlkb3JnYW5pemF0aW9uXG4gKi9cbmV4cG9ydCBjbGFzcyBQaWRPcmdhbml6YXRpb24gZXh0ZW5kcyByb3MuUmVzb3VyY2Uge1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIFBhcmVudFBpZE9yZ2FuaXphdGlvbklkOiBQYXJlbnRQaWRPcmdhbml6YXRpb25JZFxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyUGFyZW50UGlkT3JnYW5pemF0aW9uSWQ6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBQaWRPcmdhbml6YXRpb25JZDogUGlkT3JnYW5pemF0aW9uSWRcbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0clBpZE9yZ2FuaXphdGlvbklkOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgUGlkT3JnYW5pemF0aW9uTGV2ZWw6IFBpZE9yZ2FuaXphdGlvbkxldmVsXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJQaWRPcmdhbml6YXRpb25MZXZlbDogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIFBpZE9yZ2FuaXphdGlvbk5hbWU6IFBpZE9yZ2FuaXphdGlvbk5hbWVcbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0clBpZE9yZ2FuaXphdGlvbk5hbWU6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFBhcmFtIHNjb3BlIC0gc2NvcGUgaW4gd2hpY2ggdGhpcyByZXNvdXJjZSBpcyBkZWZpbmVkXG4gICAgICogUGFyYW0gaWQgICAgLSBzY29wZWQgaWQgb2YgdGhlIHJlc291cmNlXG4gICAgICogUGFyYW0gcHJvcHMgLSByZXNvdXJjZSBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IHJvcy5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBQaWRPcmdhbml6YXRpb25Qcm9wcywgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6Ym9vbGVhbiA9IHRydWUpIHtcbiAgICAgICAgc3VwZXIoc2NvcGUsIGlkKTtcblxuICAgICAgICBjb25zdCByb3NQaWRPcmdhbml6YXRpb24gPSBuZXcgUm9zUGlkT3JnYW5pemF0aW9uKHRoaXMsIGlkLCAge1xuICAgICAgICAgICAgcGlkT3JnYW5pemF0aW9uTmFtZTogcHJvcHMucGlkT3JnYW5pemF0aW9uTmFtZSxcbiAgICAgICAgICAgIHBhcmVudFBpZE9yZ2FuaXphdGlvbklkOiBwcm9wcy5wYXJlbnRQaWRPcmdhbml6YXRpb25JZCxcbiAgICAgICAgfSwgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgJiYgdGhpcy5zdGFjay5lbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCk7XG4gICAgICAgIHRoaXMucmVzb3VyY2UgPSByb3NQaWRPcmdhbml6YXRpb247XG4gICAgICAgIHRoaXMuYXR0clBhcmVudFBpZE9yZ2FuaXphdGlvbklkID0gcm9zUGlkT3JnYW5pemF0aW9uLmF0dHJQYXJlbnRQaWRPcmdhbml6YXRpb25JZDtcbiAgICAgICAgdGhpcy5hdHRyUGlkT3JnYW5pemF0aW9uSWQgPSByb3NQaWRPcmdhbml6YXRpb24uYXR0clBpZE9yZ2FuaXphdGlvbklkO1xuICAgICAgICB0aGlzLmF0dHJQaWRPcmdhbml6YXRpb25MZXZlbCA9IHJvc1BpZE9yZ2FuaXphdGlvbi5hdHRyUGlkT3JnYW5pemF0aW9uTGV2ZWw7XG4gICAgICAgIHRoaXMuYXR0clBpZE9yZ2FuaXphdGlvbk5hbWUgPSByb3NQaWRPcmdhbml6YXRpb24uYXR0clBpZE9yZ2FuaXphdGlvbk5hbWU7XG4gICAgfVxufVxuIl19