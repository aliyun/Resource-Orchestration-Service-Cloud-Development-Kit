"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AggregateCompliancePack = exports.AggregateCompliancePackProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const config_generated_1 = require("./config.generated");
Object.defineProperty(exports, "AggregateCompliancePackProperty", { enumerable: true, get: function () { return config_generated_1.RosAggregateCompliancePack; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::Config::AggregateCompliancePack`, which is used to create a compliance package for an account group.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosAggregateCompliancePack`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-config-aggregatecompliancepack
 */
class AggregateCompliancePack extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosAggregateCompliancePack = new config_generated_1.RosAggregateCompliancePack(this, id, {
            tagKeyScope: props.tagKeyScope,
            tagValueScope: props.tagValueScope,
            description: props.description,
            compliancePackName: props.compliancePackName,
            excludeResourceIdsScope: props.excludeResourceIdsScope,
            regionIdsScope: props.regionIdsScope,
            resourceGroupIdsScope: props.resourceGroupIdsScope,
            configRules: props.configRules,
            compliancePackTemplateId: props.compliancePackTemplateId,
            riskLevel: props.riskLevel,
            defaultEnable: props.defaultEnable,
            aggregatorId: props.aggregatorId,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosAggregateCompliancePack;
        this.attrCompliancePackId = rosAggregateCompliancePack.attrCompliancePackId;
    }
}
exports.AggregateCompliancePack = AggregateCompliancePack;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWdncmVnYXRlY29tcGxpYW5jZXBhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJhZ2dyZWdhdGVjb21wbGlhbmNlcGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw4Q0FBOEM7QUFDOUMseURBQWdFO0FBRXpCLGdIQUY5Qiw2Q0FBMEIsT0FFbUM7QUEwRXRFOzs7O0dBSUc7QUFDSCxNQUFhLHVCQUF3QixTQUFRLEdBQUcsQ0FBQyxRQUFRO0lBV3JEOzs7O09BSUc7SUFDSCxZQUFZLEtBQW9CLEVBQUUsRUFBVSxFQUFFLEtBQW1DLEVBQUUsbUNBQTJDLElBQUk7UUFDOUgsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNqQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUNiLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxnQ0FBZ0MsR0FBRyxnQ0FBZ0MsQ0FBQztRQUV6RSxNQUFNLDBCQUEwQixHQUFHLElBQUksNkNBQTBCLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRztZQUN6RSxXQUFXLEVBQUUsS0FBSyxDQUFDLFdBQVc7WUFDOUIsYUFBYSxFQUFFLEtBQUssQ0FBQyxhQUFhO1lBQ2xDLFdBQVcsRUFBRSxLQUFLLENBQUMsV0FBVztZQUM5QixrQkFBa0IsRUFBRSxLQUFLLENBQUMsa0JBQWtCO1lBQzVDLHVCQUF1QixFQUFFLEtBQUssQ0FBQyx1QkFBdUI7WUFDdEQsY0FBYyxFQUFFLEtBQUssQ0FBQyxjQUFjO1lBQ3BDLHFCQUFxQixFQUFFLEtBQUssQ0FBQyxxQkFBcUI7WUFDbEQsV0FBVyxFQUFFLEtBQUssQ0FBQyxXQUFXO1lBQzlCLHdCQUF3QixFQUFFLEtBQUssQ0FBQyx3QkFBd0I7WUFDeEQsU0FBUyxFQUFFLEtBQUssQ0FBQyxTQUFTO1lBQzFCLGFBQWEsRUFBRSxLQUFLLENBQUMsYUFBYTtZQUNsQyxZQUFZLEVBQUUsS0FBSyxDQUFDLFlBQVk7U0FDbkMsRUFBRSxnQ0FBZ0MsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7UUFDcEYsSUFBSSxDQUFDLFFBQVEsR0FBRywwQkFBMEIsQ0FBQztRQUMzQyxJQUFJLENBQUMsb0JBQW9CLEdBQUcsMEJBQTBCLENBQUMsb0JBQW9CLENBQUM7SUFDaEYsQ0FBQztDQUNKO0FBeENELDBEQXdDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHJvcyBmcm9tICdAYWxpY2xvdWQvcm9zLWNkay1jb3JlJztcbmltcG9ydCB7IFJvc0FnZ3JlZ2F0ZUNvbXBsaWFuY2VQYWNrIH0gZnJvbSAnLi9jb25maWcuZ2VuZXJhdGVkJztcbi8vIEdlbmVyYXRlZCBmcm9tIHRoZSBBbGlDbG91ZCBST1MgUmVzb3VyY2UgU3BlY2lmaWNhdGlvblxuZXhwb3J0IHsgUm9zQWdncmVnYXRlQ29tcGxpYW5jZVBhY2sgYXMgQWdncmVnYXRlQ29tcGxpYW5jZVBhY2tQcm9wZXJ0eSB9O1xuXG4vKipcbiAqIFByb3BlcnRpZXMgZm9yIGRlZmluaW5nIGEgYEFnZ3JlZ2F0ZUNvbXBsaWFuY2VQYWNrYC5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvYWxpeXVuLWNvbmZpZy1hZ2dyZWdhdGVjb21wbGlhbmNlcGFja1xuICovXG5leHBvcnQgaW50ZXJmYWNlIEFnZ3JlZ2F0ZUNvbXBsaWFuY2VQYWNrUHJvcHMge1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgYWdncmVnYXRvcklkOiBBZ2dyZWdhdG9yIGlkLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGFnZ3JlZ2F0b3JJZDogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgY29tcGxpYW5jZVBhY2tOYW1lOiBDb21wbGlhbmNlIHBhY2thZ2UgbmFtZS5cbiAgICAgKi9cbiAgICByZWFkb25seSBjb21wbGlhbmNlUGFja05hbWU6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGNvbmZpZ1J1bGVzOiBMaXN0IG9mIHJ1bGVzIGluIHRoZSBjb21wbGlhbmNlIHBhY2thZ2UuXG4gICAgICovXG4gICAgcmVhZG9ubHkgY29uZmlnUnVsZXM6IEFycmF5PFJvc0FnZ3JlZ2F0ZUNvbXBsaWFuY2VQYWNrLkNvbmZpZ1J1bGVzUHJvcGVydHkgfCByb3MuSVJlc29sdmFibGU+IHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgZGVzY3JpcHRpb246IFRoZSBkZXNjcmlwdGlvbiBvZiBjb21wbGlhbmNlIHBhY2suXG4gICAgICovXG4gICAgcmVhZG9ubHkgZGVzY3JpcHRpb246IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHJpc2tMZXZlbDogQ29tcGxpYW5jZSBwYWNrYWdlIHJpc2sgbGV2ZWwuIFZhbHVlOlxuICAgICAqIDE6IEhpZ2ggcmlzay5cbiAgICAgKiAyOiBNZWRpdW0gcmlzay5cbiAgICAgKiAzOiBMb3cgcmlzay5cbiAgICAgKi9cbiAgICByZWFkb25seSByaXNrTGV2ZWw6IG51bWJlciB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGNvbXBsaWFuY2VQYWNrVGVtcGxhdGVJZDogQ29tcGxpYW5jZSBwYWNrYWdlIHRlbXBsYXRlIElELlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGNvbXBsaWFuY2VQYWNrVGVtcGxhdGVJZD86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGRlZmF1bHRFbmFibGU6IFdoZXRoZXIgdGhlIHJ1bGUgc3VwcG9ydHMgcXVpY2sgYWN0aXZhdGlvbi4gVmFsdWU6XG4gICAgICogdHJ1ZTogVGhpcyBydWxlIHdpbGwgYmUgZW5hYmxlZCB3aGVuIHRoZSBjb21wbGlhbmNlIHBhY2thZ2UgaXMgcXVpY2tseSBlbmFibGVkLlxuICAgICAqIGZhbHNlIChkZWZhdWx0KTogZGlzYWJsZVxuICAgICAqL1xuICAgIHJlYWRvbmx5IGRlZmF1bHRFbmFibGU/OiBib29sZWFuIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgZXhjbHVkZVJlc291cmNlSWRzU2NvcGU6IFRoZSBjb21wbGlhbmNlIHBhY2thZ2UgaXMgaW52YWxpZCBmb3IgdGhlIHNwZWNpZmllZCByZXNvdXJjZSBJRCwgdGhhdCBpcywgbm8gZXZhbHVhdGlvbiBpcyBwZXJmb3JtZWQgb24gdGhlIHJlc291cmNlLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGV4Y2x1ZGVSZXNvdXJjZUlkc1Njb3BlPzogQXJyYXk8c3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlPiB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHJlZ2lvbklkc1Njb3BlOiBUaGUgY29tcGxpYW5jZSBwYWNrYWdlIG9ubHkgdGFrZXMgZWZmZWN0IGZvciByZXNvdXJjZXMgaW4gdGhlIHNwZWNpZmllZCByZWdpb24gSUQuXG4gICAgICovXG4gICAgcmVhZG9ubHkgcmVnaW9uSWRzU2NvcGU/OiBBcnJheTxzdHJpbmcgfCByb3MuSVJlc29sdmFibGU+IHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgcmVzb3VyY2VHcm91cElkc1Njb3BlOiBUaGUgY29tcGxpYW5jZSBwYWNrYWdlIG9ubHkgdGFrZXMgZWZmZWN0IG9uIHJlc291cmNlcyBpbiB0aGUgc3BlY2lmaWVkIHJlc291cmNlIGdyb3VwIElELlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHJlc291cmNlR3JvdXBJZHNTY29wZT86IEFycmF5PHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZT4gfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSB0YWdLZXlTY29wZTogQ29tcGxpYW5jZSBwYWNrYWdlcyBvbmx5IHRha2UgZWZmZWN0IG9uIHJlc291cmNlcyBib3VuZCB0byB0aGUgc3BlY2lmaWVkIHRhZyBrZXkuXG4gICAgICovXG4gICAgcmVhZG9ubHkgdGFnS2V5U2NvcGU/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSB0YWdWYWx1ZVNjb3BlOiBDb21wbGlhbmNlIHBhY2thZ2VzIG9ubHkgdGFrZSBlZmZlY3Qgb24gcmVzb3VyY2VzIGJvdW5kIHRvIHNwZWNpZmllZCB0YWcga2V5LXZhbHVlIHBhaXJzLlRhZ1ZhbHVlU2NvcGUgbmVlZHMgdG8gYmUgdXNlZCBpbiBjb25qdW5jdGlvbiB3aXRoIFRhZ0tleVNjb3BlLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHRhZ1ZhbHVlU2NvcGU/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG59XG5cbi8qKlxuICogVGhpcyBjbGFzcyBlbmNhcHN1bGF0ZXMgYW5kIGV4dGVuZHMgdGhlIFJPUyByZXNvdXJjZSB0eXBlIGBBTElZVU46OkNvbmZpZzo6QWdncmVnYXRlQ29tcGxpYW5jZVBhY2tgLCB3aGljaCBpcyB1c2VkIHRvIGNyZWF0ZSBhIGNvbXBsaWFuY2UgcGFja2FnZSBmb3IgYW4gYWNjb3VudCBncm91cC5cbiAqIEBOb3RlIFRoaXMgY2xhc3MgbWF5IGhhdmUgc29tZSBuZXcgZnVuY3Rpb25zIHRvIGZhY2lsaXRhdGUgZGV2ZWxvcG1lbnQsIHNvIGl0IGlzIHJlY29tbWVuZGVkIHRvIHVzZSB0aGlzIGNsYXNzIGluc3RlYWQgb2YgYFJvc0FnZ3JlZ2F0ZUNvbXBsaWFuY2VQYWNrYGZvciBhIG1vcmUgY29udmVuaWVudCBkZXZlbG9wbWVudCBleHBlcmllbmNlLlxuICogU2VlIGh0dHBzOi8vd3d3LmFsaWJhYmFjbG91ZC5jb20vaGVscC9yb3MvZGV2ZWxvcGVyLXJlZmVyZW5jZS9hbGl5dW4tY29uZmlnLWFnZ3JlZ2F0ZWNvbXBsaWFuY2VwYWNrXG4gKi9cbmV4cG9ydCBjbGFzcyBBZ2dyZWdhdGVDb21wbGlhbmNlUGFjayBleHRlbmRzIHJvcy5SZXNvdXJjZSB7XG4gICAgcHJvdGVjdGVkIHNjb3BlOiByb3MuQ29uc3RydWN0O1xuICAgIHByb3RlY3RlZCBpZDogc3RyaW5nO1xuICAgIHByb3RlY3RlZCBwcm9wczogQWdncmVnYXRlQ29tcGxpYW5jZVBhY2tQcm9wcztcbiAgICBwcm90ZWN0ZWQgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6IGJvb2xlYW47XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgQ29tcGxpYW5jZVBhY2tJZDogVGhlIElEIG9mIHRoZSBjb21wbGlhbmNlIHBhY2sgaWQuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJDb21wbGlhbmNlUGFja0lkOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQYXJhbSBzY29wZSAtIHNjb3BlIGluIHdoaWNoIHRoaXMgcmVzb3VyY2UgaXMgZGVmaW5lZFxuICAgICAqIFBhcmFtIGlkICAgIC0gc2NvcGVkIGlkIG9mIHRoZSByZXNvdXJjZVxuICAgICAqIFBhcmFtIHByb3BzIC0gcmVzb3VyY2UgcHJvcGVydGllc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiByb3MuQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogQWdncmVnYXRlQ29tcGxpYW5jZVBhY2tQcm9wcywgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6Ym9vbGVhbiA9IHRydWUpIHtcbiAgICAgICAgc3VwZXIoc2NvcGUsIGlkKTtcbiAgICAgICAgdGhpcy5zY29wZSA9IHNjb3BlO1xuICAgICAgICB0aGlzLmlkID0gaWQ7XG4gICAgICAgIHRoaXMucHJvcHMgPSBwcm9wcztcbiAgICAgICAgdGhpcy5lbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCA9IGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50O1xuXG4gICAgICAgIGNvbnN0IHJvc0FnZ3JlZ2F0ZUNvbXBsaWFuY2VQYWNrID0gbmV3IFJvc0FnZ3JlZ2F0ZUNvbXBsaWFuY2VQYWNrKHRoaXMsIGlkLCAge1xuICAgICAgICAgICAgdGFnS2V5U2NvcGU6IHByb3BzLnRhZ0tleVNjb3BlLFxuICAgICAgICAgICAgdGFnVmFsdWVTY29wZTogcHJvcHMudGFnVmFsdWVTY29wZSxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBwcm9wcy5kZXNjcmlwdGlvbixcbiAgICAgICAgICAgIGNvbXBsaWFuY2VQYWNrTmFtZTogcHJvcHMuY29tcGxpYW5jZVBhY2tOYW1lLFxuICAgICAgICAgICAgZXhjbHVkZVJlc291cmNlSWRzU2NvcGU6IHByb3BzLmV4Y2x1ZGVSZXNvdXJjZUlkc1Njb3BlLFxuICAgICAgICAgICAgcmVnaW9uSWRzU2NvcGU6IHByb3BzLnJlZ2lvbklkc1Njb3BlLFxuICAgICAgICAgICAgcmVzb3VyY2VHcm91cElkc1Njb3BlOiBwcm9wcy5yZXNvdXJjZUdyb3VwSWRzU2NvcGUsXG4gICAgICAgICAgICBjb25maWdSdWxlczogcHJvcHMuY29uZmlnUnVsZXMsXG4gICAgICAgICAgICBjb21wbGlhbmNlUGFja1RlbXBsYXRlSWQ6IHByb3BzLmNvbXBsaWFuY2VQYWNrVGVtcGxhdGVJZCxcbiAgICAgICAgICAgIHJpc2tMZXZlbDogcHJvcHMucmlza0xldmVsLFxuICAgICAgICAgICAgZGVmYXVsdEVuYWJsZTogcHJvcHMuZGVmYXVsdEVuYWJsZSxcbiAgICAgICAgICAgIGFnZ3JlZ2F0b3JJZDogcHJvcHMuYWdncmVnYXRvcklkLFxuICAgICAgICB9LCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCAmJiB0aGlzLnN0YWNrLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50KTtcbiAgICAgICAgdGhpcy5yZXNvdXJjZSA9IHJvc0FnZ3JlZ2F0ZUNvbXBsaWFuY2VQYWNrO1xuICAgICAgICB0aGlzLmF0dHJDb21wbGlhbmNlUGFja0lkID0gcm9zQWdncmVnYXRlQ29tcGxpYW5jZVBhY2suYXR0ckNvbXBsaWFuY2VQYWNrSWQ7XG4gICAgfVxufVxuIl19