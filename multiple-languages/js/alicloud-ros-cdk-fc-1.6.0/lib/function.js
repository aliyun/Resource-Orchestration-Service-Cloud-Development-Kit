"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Function = exports.FunctionProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const fc_generated_1 = require("./fc.generated");
Object.defineProperty(exports, "FunctionProperty", { enumerable: true, get: function () { return fc_generated_1.RosFunction; } });
const ros_cdk_ossassets_1 = require("@alicloud/ros-cdk-ossassets");
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::FC::Function`, which is used to create a function. A function must belong to a service. All functions of a service share the same attributes as the service, such as the service authorization and log configurations.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosFunction`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-fc-function
 */
class Function extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosFunction = new fc_generated_1.RosFunction(this, id, {
            memorySize: props.memorySize === undefined || props.memorySize === null ? 128 : props.memorySize,
            description: props.description,
            timeout: props.timeout === undefined || props.timeout === null ? 3 : props.timeout,
            instanceLifecycleConfig: props.instanceLifecycleConfig,
            handler: props.handler,
            cpu: props.cpu,
            customHealthCheckConfig: props.customHealthCheckConfig,
            customContainerConfig: props.customContainerConfig,
            code: props.code,
            asyncConfiguration: props.asyncConfiguration,
            caPort: props.caPort === undefined || props.caPort === null ? 9000 : props.caPort,
            functionName: props.functionName,
            runtime: props.runtime,
            environmentVariables: props.environmentVariables,
            customRuntimeConfig: props.customRuntimeConfig,
            initializationTimeout: props.initializationTimeout,
            serviceName: props.serviceName,
            initializer: props.initializer,
            gpuMemorySize: props.gpuMemorySize,
            diskSize: props.diskSize,
            customDns: props.customDns,
            instanceConcurrency: props.instanceConcurrency,
            instanceType: props.instanceType,
            instanceSoftConcurrency: props.instanceSoftConcurrency,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosFunction;
        this.attrArn = rosFunction.attrArn;
        this.attrFunctionId = rosFunction.attrFunctionId;
        this.attrFunctionName = rosFunction.attrFunctionName;
        this.attrServiceId = rosFunction.attrServiceId;
        this.attrServiceName = rosFunction.attrServiceName;
    }
    /**
     * Function handler code as an OSS object.
     * @param bucket The OSS bucket
     * @param key The object key
     */
    codeFromBucket(bucket, key) {
        let fcFunction = this.resource;
        if (fcFunction.code !== undefined) {
            throw new Error("Function code already set");
        }
        fcFunction.code = {
            ossBucketName: bucket.attrName,
            ossObjectName: key
        };
    }
    /**
     * Inline code for FC fcFunction handler
     * @param code The actual handler code (limited to 4KiB)
     */
    codeFromInline(code) {
        let fcFunction = this.resource;
        if (fcFunction.code !== undefined) {
            throw new Error("Function code already set");
        }
        fcFunction.code = {
            sourceCode: code
        };
    }
    /**
     * Loads the fcFunction code from a local disk path.
     *
     * @param path Either a directory with the Lambda code bundle or a .zip file
     */
    codeFromAsset(path) {
        let fcFunction = this.resource;
        if (fcFunction.code !== undefined) {
            throw new Error("Function code already set");
        }
        const suffix = ros.generateRandomString(5);
        const asset = new ros_cdk_ossassets_1.Asset(this.scope, `CodeAsset${suffix}`, {
            path
        });
        if (!asset.isZipArchive) {
            throw new Error(`Asset must be a .zip file or a directory (${path})`);
        }
        fcFunction.code = {
            ossBucketName: asset.bucketName,
            ossObjectName: asset.objectKey
        };
    }
}
exports.Function = Function;
//# sourceMappingURL=data:application/json;base64,