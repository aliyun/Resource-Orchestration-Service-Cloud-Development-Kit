"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Disks = exports.DisksProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ecs_generated_1 = require("./ecs.generated");
Object.defineProperty(exports, "DisksProperty", { enumerable: true, get: function () { return ecs_generated_1.RosDisks; } });
/**
 * A ROS resource type:  `DATASOURCE::ECS::Disks`
 */
class Disks extends ros.Resource {
    /**
     * Create a new `DATASOURCE::ECS::Disks`.
     *
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props = {}, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosDisks = new ecs_generated_1.RosDisks(this, id, {
            status: props.status,
            diskIds: props.diskIds,
            enableShared: props.enableShared,
            category: props.category,
            kmsKeyId: props.kmsKeyId,
            resourceGroupId: props.resourceGroupId,
            zoneId: props.zoneId,
            instanceId: props.instanceId,
            encrypted: props.encrypted,
            deleteWithInstance: props.deleteWithInstance,
            deleteAutoSnapshot: props.deleteAutoSnapshot,
            enableAutomatedSnapshotPolicy: props.enableAutomatedSnapshotPolicy,
            diskChargeType: props.diskChargeType,
            enableAutoSnapshot: props.enableAutoSnapshot,
            autoSnapshotPolicyId: props.autoSnapshotPolicyId,
            diskName: props.diskName,
            multiAttach: props.multiAttach,
            diskType: props.diskType,
            snapshotId: props.snapshotId,
            portable: props.portable,
            filters: props.filters,
            additionalAttributes: props.additionalAttributes,
            tags: props.tags,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosDisks;
        this.attrDiskIds = rosDisks.attrDiskIds;
        this.attrDisks = rosDisks.attrDisks;
    }
}
exports.Disks = Disks;
//# sourceMappingURL=data:application/json;base64,