"use strict";
// Generated from the AliCloud ROS Resource Specification
Object.defineProperty(exports, "__esModule", { value: true });
exports.RosZones = exports.RosSnapshots = exports.RosSecurityGroups = exports.RosRecommendInstanceTypes = exports.RosNetworkInterfaces = exports.RosManagedInstances = exports.RosKeyPairs = exports.RosInstances = exports.RosImages = exports.RosHpcClusters = exports.RosDisks = exports.RosDiskCategories = exports.RosDeploymentSets = exports.RosDedicatedHosts = exports.RosDedicatedHostClusters = exports.RosCommands = exports.RosAutoSnapshotPolicies = exports.RosActivations = void 0;
const ros = require("@alicloud/ros-cdk-core");
/**
 * Determine whether the given properties match those of a `RosActivationsProps`
 *
 * @param properties - the TypeScript properties of a `RosActivationsProps`
 *
 * @returns the result of the validation.
 */
function RosActivationsPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('instanceName', ros.validateString)(properties.instanceName));
    errors.collect(ros.propertyValidator('activationId', ros.validateString)(properties.activationId));
    return errors.wrap('supplied properties not correct for "RosActivationsProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `DATASOURCE::ECS::Activations` resource
 *
 * @param properties - the TypeScript properties of a `RosActivationsProps`
 *
 * @returns the AliCloud ROS Resource properties of an `DATASOURCE::ECS::Activations` resource.
 */
// @ts-ignore TS6133
function rosActivationsPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosActivationsPropsValidator(properties).assertSuccess();
    }
    return {
        ActivationId: ros.stringToRosTemplate(properties.activationId),
        InstanceName: ros.stringToRosTemplate(properties.instanceName),
    };
}
/**
 * A ROS template type:  `DATASOURCE::ECS::Activations`
 */
class RosActivations extends ros.RosResource {
    /**
     * Create a new `DATASOURCE::ECS::Activations`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosActivations.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrActivationIds = this.getAtt('ActivationIds');
        this.attrActivations = this.getAtt('Activations');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.activationId = props.activationId;
        this.instanceName = props.instanceName;
    }
    get rosProperties() {
        return {
            activationId: this.activationId,
            instanceName: this.instanceName,
        };
    }
    renderProperties(props) {
        return rosActivationsPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosActivations = RosActivations;
/**
 * The resource type name for this resource class.
 */
RosActivations.ROS_RESOURCE_TYPE_NAME = "DATASOURCE::ECS::Activations";
/**
 * Determine whether the given properties match those of a `RosAutoSnapshotPoliciesProps`
 *
 * @param properties - the TypeScript properties of a `RosAutoSnapshotPoliciesProps`
 *
 * @returns the result of the validation.
 */
function RosAutoSnapshotPoliciesPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('resourceGroupId', ros.validateString)(properties.resourceGroupId));
    errors.collect(ros.propertyValidator('autoSnapshotPolicyId', ros.validateString)(properties.autoSnapshotPolicyId));
    if (properties.tags && (Array.isArray(properties.tags) || (typeof properties.tags) === 'string')) {
        errors.collect(ros.propertyValidator('tags', ros.validateLength)({
            data: properties.tags.length,
            min: undefined,
            max: 20,
        }));
    }
    errors.collect(ros.propertyValidator('tags', ros.listValidator(RosAutoSnapshotPolicies_TagsPropertyValidator))(properties.tags));
    return errors.wrap('supplied properties not correct for "RosAutoSnapshotPoliciesProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `DATASOURCE::ECS::AutoSnapshotPolicies` resource
 *
 * @param properties - the TypeScript properties of a `RosAutoSnapshotPoliciesProps`
 *
 * @returns the AliCloud ROS Resource properties of an `DATASOURCE::ECS::AutoSnapshotPolicies` resource.
 */
// @ts-ignore TS6133
function rosAutoSnapshotPoliciesPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosAutoSnapshotPoliciesPropsValidator(properties).assertSuccess();
    }
    return {
        AutoSnapshotPolicyId: ros.stringToRosTemplate(properties.autoSnapshotPolicyId),
        ResourceGroupId: ros.stringToRosTemplate(properties.resourceGroupId),
        Tags: ros.listMapper(rosAutoSnapshotPoliciesTagsPropertyToRosTemplate)(properties.tags),
    };
}
/**
 * A ROS template type:  `DATASOURCE::ECS::AutoSnapshotPolicies`
 */
class RosAutoSnapshotPolicies extends ros.RosResource {
    /**
     * Create a new `DATASOURCE::ECS::AutoSnapshotPolicies`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosAutoSnapshotPolicies.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrAutoSnapshotPolicies = this.getAtt('AutoSnapshotPolicies');
        this.attrAutoSnapshotPolicyIds = this.getAtt('AutoSnapshotPolicyIds');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.autoSnapshotPolicyId = props.autoSnapshotPolicyId;
        this.resourceGroupId = props.resourceGroupId;
        this.tags = props.tags;
    }
    get rosProperties() {
        return {
            autoSnapshotPolicyId: this.autoSnapshotPolicyId,
            resourceGroupId: this.resourceGroupId,
            tags: this.tags,
        };
    }
    renderProperties(props) {
        return rosAutoSnapshotPoliciesPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosAutoSnapshotPolicies = RosAutoSnapshotPolicies;
/**
 * The resource type name for this resource class.
 */
RosAutoSnapshotPolicies.ROS_RESOURCE_TYPE_NAME = "DATASOURCE::ECS::AutoSnapshotPolicies";
/**
 * Determine whether the given properties match those of a `TagsProperty`
 *
 * @param properties - the TypeScript properties of a `TagsProperty`
 *
 * @returns the result of the validation.
 */
function RosAutoSnapshotPolicies_TagsPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('value', ros.validateString)(properties.value));
    errors.collect(ros.propertyValidator('key', ros.requiredValidator)(properties.key));
    errors.collect(ros.propertyValidator('key', ros.validateString)(properties.key));
    return errors.wrap('supplied properties not correct for "TagsProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `DATASOURCE::ECS::AutoSnapshotPolicies.Tags` resource
 *
 * @param properties - the TypeScript properties of a `TagsProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `DATASOURCE::ECS::AutoSnapshotPolicies.Tags` resource.
 */
// @ts-ignore TS6133
function rosAutoSnapshotPoliciesTagsPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosAutoSnapshotPolicies_TagsPropertyValidator(properties).assertSuccess();
    return {
        Value: ros.stringToRosTemplate(properties.value),
        Key: ros.stringToRosTemplate(properties.key),
    };
}
/**
 * Determine whether the given properties match those of a `RosCommandsProps`
 *
 * @param properties - the TypeScript properties of a `RosCommandsProps`
 *
 * @returns the result of the validation.
 */
function RosCommandsPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    if (properties.type && (typeof properties.type) !== 'object') {
        errors.collect(ros.propertyValidator('type', ros.validateAllowedValues)({
            data: properties.type,
            allowedValues: ["RunBatScript", "RunPowerShellScript", "RunShellScript"],
        }));
    }
    errors.collect(ros.propertyValidator('type', ros.validateString)(properties.type));
    errors.collect(ros.propertyValidator('description', ros.validateString)(properties.description));
    errors.collect(ros.propertyValidator('commandId', ros.validateString)(properties.commandId));
    errors.collect(ros.propertyValidator('commandName', ros.validateString)(properties.commandName));
    return errors.wrap('supplied properties not correct for "RosCommandsProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `DATASOURCE::ECS::Commands` resource
 *
 * @param properties - the TypeScript properties of a `RosCommandsProps`
 *
 * @returns the AliCloud ROS Resource properties of an `DATASOURCE::ECS::Commands` resource.
 */
// @ts-ignore TS6133
function rosCommandsPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosCommandsPropsValidator(properties).assertSuccess();
    }
    return {
        CommandId: ros.stringToRosTemplate(properties.commandId),
        CommandName: ros.stringToRosTemplate(properties.commandName),
        Description: ros.stringToRosTemplate(properties.description),
        Type: ros.stringToRosTemplate(properties.type),
    };
}
/**
 * A ROS template type:  `DATASOURCE::ECS::Commands`
 */
class RosCommands extends ros.RosResource {
    /**
     * Create a new `DATASOURCE::ECS::Commands`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosCommands.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrCommandIds = this.getAtt('CommandIds');
        this.attrCommands = this.getAtt('Commands');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.commandId = props.commandId;
        this.commandName = props.commandName;
        this.description = props.description;
        this.type = props.type;
    }
    get rosProperties() {
        return {
            commandId: this.commandId,
            commandName: this.commandName,
            description: this.description,
            type: this.type,
        };
    }
    renderProperties(props) {
        return rosCommandsPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosCommands = RosCommands;
/**
 * The resource type name for this resource class.
 */
RosCommands.ROS_RESOURCE_TYPE_NAME = "DATASOURCE::ECS::Commands";
/**
 * Determine whether the given properties match those of a `RosDedicatedHostClustersProps`
 *
 * @param properties - the TypeScript properties of a `RosDedicatedHostClustersProps`
 *
 * @returns the result of the validation.
 */
function RosDedicatedHostClustersPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('dedicatedHostClusterName', ros.validateString)(properties.dedicatedHostClusterName));
    errors.collect(ros.propertyValidator('resourceGroupId', ros.validateString)(properties.resourceGroupId));
    errors.collect(ros.propertyValidator('zoneId', ros.validateString)(properties.zoneId));
    return errors.wrap('supplied properties not correct for "RosDedicatedHostClustersProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `DATASOURCE::ECS::DedicatedHostClusters` resource
 *
 * @param properties - the TypeScript properties of a `RosDedicatedHostClustersProps`
 *
 * @returns the AliCloud ROS Resource properties of an `DATASOURCE::ECS::DedicatedHostClusters` resource.
 */
// @ts-ignore TS6133
function rosDedicatedHostClustersPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosDedicatedHostClustersPropsValidator(properties).assertSuccess();
    }
    return {
        DedicatedHostClusterName: ros.stringToRosTemplate(properties.dedicatedHostClusterName),
        ResourceGroupId: ros.stringToRosTemplate(properties.resourceGroupId),
        ZoneId: ros.stringToRosTemplate(properties.zoneId),
    };
}
/**
 * A ROS template type:  `DATASOURCE::ECS::DedicatedHostClusters`
 */
class RosDedicatedHostClusters extends ros.RosResource {
    /**
     * Create a new `DATASOURCE::ECS::DedicatedHostClusters`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosDedicatedHostClusters.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrDedicatedHostClusterIds = this.getAtt('DedicatedHostClusterIds');
        this.attrDedicatedHostClusters = this.getAtt('DedicatedHostClusters');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.dedicatedHostClusterName = props.dedicatedHostClusterName;
        this.resourceGroupId = props.resourceGroupId;
        this.zoneId = props.zoneId;
    }
    get rosProperties() {
        return {
            dedicatedHostClusterName: this.dedicatedHostClusterName,
            resourceGroupId: this.resourceGroupId,
            zoneId: this.zoneId,
        };
    }
    renderProperties(props) {
        return rosDedicatedHostClustersPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosDedicatedHostClusters = RosDedicatedHostClusters;
/**
 * The resource type name for this resource class.
 */
RosDedicatedHostClusters.ROS_RESOURCE_TYPE_NAME = "DATASOURCE::ECS::DedicatedHostClusters";
/**
 * Determine whether the given properties match those of a `RosDedicatedHostsProps`
 *
 * @param properties - the TypeScript properties of a `RosDedicatedHostsProps`
 *
 * @returns the result of the validation.
 */
function RosDedicatedHostsPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('status', ros.validateString)(properties.status));
    errors.collect(ros.propertyValidator('zoneId', ros.validateString)(properties.zoneId));
    errors.collect(ros.propertyValidator('resourceGroupId', ros.validateString)(properties.resourceGroupId));
    errors.collect(ros.propertyValidator('dedicatedHostName', ros.validateString)(properties.dedicatedHostName));
    errors.collect(ros.propertyValidator('dedicatedHostType', ros.validateString)(properties.dedicatedHostType));
    if (properties.dedicatedHostIds && (Array.isArray(properties.dedicatedHostIds) || (typeof properties.dedicatedHostIds) === 'string')) {
        errors.collect(ros.propertyValidator('dedicatedHostIds', ros.validateLength)({
            data: properties.dedicatedHostIds.length,
            min: undefined,
            max: 100,
        }));
    }
    errors.collect(ros.propertyValidator('dedicatedHostIds', ros.listValidator(ros.validateString))(properties.dedicatedHostIds));
    if (properties.tags && (Array.isArray(properties.tags) || (typeof properties.tags) === 'string')) {
        errors.collect(ros.propertyValidator('tags', ros.validateLength)({
            data: properties.tags.length,
            min: undefined,
            max: 20,
        }));
    }
    errors.collect(ros.propertyValidator('tags', ros.listValidator(RosDedicatedHosts_TagsPropertyValidator))(properties.tags));
    errors.collect(ros.propertyValidator('dedicatedHostClusterId', ros.validateString)(properties.dedicatedHostClusterId));
    return errors.wrap('supplied properties not correct for "RosDedicatedHostsProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `DATASOURCE::ECS::DedicatedHosts` resource
 *
 * @param properties - the TypeScript properties of a `RosDedicatedHostsProps`
 *
 * @returns the AliCloud ROS Resource properties of an `DATASOURCE::ECS::DedicatedHosts` resource.
 */
// @ts-ignore TS6133
function rosDedicatedHostsPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosDedicatedHostsPropsValidator(properties).assertSuccess();
    }
    return {
        DedicatedHostClusterId: ros.stringToRosTemplate(properties.dedicatedHostClusterId),
        DedicatedHostIds: ros.listMapper(ros.stringToRosTemplate)(properties.dedicatedHostIds),
        DedicatedHostName: ros.stringToRosTemplate(properties.dedicatedHostName),
        DedicatedHostType: ros.stringToRosTemplate(properties.dedicatedHostType),
        ResourceGroupId: ros.stringToRosTemplate(properties.resourceGroupId),
        Status: ros.stringToRosTemplate(properties.status),
        Tags: ros.listMapper(rosDedicatedHostsTagsPropertyToRosTemplate)(properties.tags),
        ZoneId: ros.stringToRosTemplate(properties.zoneId),
    };
}
/**
 * A ROS template type:  `DATASOURCE::ECS::DedicatedHosts`
 */
class RosDedicatedHosts extends ros.RosResource {
    /**
     * Create a new `DATASOURCE::ECS::DedicatedHosts`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosDedicatedHosts.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrDedicatedHostIds = this.getAtt('DedicatedHostIds');
        this.attrDedicatedHosts = this.getAtt('DedicatedHosts');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.dedicatedHostClusterId = props.dedicatedHostClusterId;
        this.dedicatedHostIds = props.dedicatedHostIds;
        this.dedicatedHostName = props.dedicatedHostName;
        this.dedicatedHostType = props.dedicatedHostType;
        this.resourceGroupId = props.resourceGroupId;
        this.status = props.status;
        this.tags = props.tags;
        this.zoneId = props.zoneId;
    }
    get rosProperties() {
        return {
            dedicatedHostClusterId: this.dedicatedHostClusterId,
            dedicatedHostIds: this.dedicatedHostIds,
            dedicatedHostName: this.dedicatedHostName,
            dedicatedHostType: this.dedicatedHostType,
            resourceGroupId: this.resourceGroupId,
            status: this.status,
            tags: this.tags,
            zoneId: this.zoneId,
        };
    }
    renderProperties(props) {
        return rosDedicatedHostsPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosDedicatedHosts = RosDedicatedHosts;
/**
 * The resource type name for this resource class.
 */
RosDedicatedHosts.ROS_RESOURCE_TYPE_NAME = "DATASOURCE::ECS::DedicatedHosts";
/**
 * Determine whether the given properties match those of a `TagsProperty`
 *
 * @param properties - the TypeScript properties of a `TagsProperty`
 *
 * @returns the result of the validation.
 */
function RosDedicatedHosts_TagsPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('value', ros.validateString)(properties.value));
    errors.collect(ros.propertyValidator('key', ros.requiredValidator)(properties.key));
    errors.collect(ros.propertyValidator('key', ros.validateString)(properties.key));
    return errors.wrap('supplied properties not correct for "TagsProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `DATASOURCE::ECS::DedicatedHosts.Tags` resource
 *
 * @param properties - the TypeScript properties of a `TagsProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `DATASOURCE::ECS::DedicatedHosts.Tags` resource.
 */
// @ts-ignore TS6133
function rosDedicatedHostsTagsPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosDedicatedHosts_TagsPropertyValidator(properties).assertSuccess();
    return {
        Value: ros.stringToRosTemplate(properties.value),
        Key: ros.stringToRosTemplate(properties.key),
    };
}
/**
 * Determine whether the given properties match those of a `RosDeploymentSetsProps`
 *
 * @param properties - the TypeScript properties of a `RosDeploymentSetsProps`
 *
 * @returns the result of the validation.
 */
function RosDeploymentSetsPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    if (properties.deploymentSetIds && (Array.isArray(properties.deploymentSetIds) || (typeof properties.deploymentSetIds) === 'string')) {
        errors.collect(ros.propertyValidator('deploymentSetIds', ros.validateLength)({
            data: properties.deploymentSetIds.length,
            min: undefined,
            max: 100,
        }));
    }
    errors.collect(ros.propertyValidator('deploymentSetIds', ros.listValidator(ros.validateAny))(properties.deploymentSetIds));
    errors.collect(ros.propertyValidator('strategy', ros.validateString)(properties.strategy));
    errors.collect(ros.propertyValidator('deploymentSetName', ros.validateString)(properties.deploymentSetName));
    errors.collect(ros.propertyValidator('domain', ros.validateString)(properties.domain));
    return errors.wrap('supplied properties not correct for "RosDeploymentSetsProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `DATASOURCE::ECS::DeploymentSets` resource
 *
 * @param properties - the TypeScript properties of a `RosDeploymentSetsProps`
 *
 * @returns the AliCloud ROS Resource properties of an `DATASOURCE::ECS::DeploymentSets` resource.
 */
// @ts-ignore TS6133
function rosDeploymentSetsPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosDeploymentSetsPropsValidator(properties).assertSuccess();
    }
    return {
        DeploymentSetIds: ros.listMapper(ros.objectToRosTemplate)(properties.deploymentSetIds),
        DeploymentSetName: ros.stringToRosTemplate(properties.deploymentSetName),
        Domain: ros.stringToRosTemplate(properties.domain),
        Strategy: ros.stringToRosTemplate(properties.strategy),
    };
}
/**
 * A ROS template type:  `DATASOURCE::ECS::DeploymentSets`
 */
class RosDeploymentSets extends ros.RosResource {
    /**
     * Create a new `DATASOURCE::ECS::DeploymentSets`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosDeploymentSets.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrDeploymentSetIds = this.getAtt('DeploymentSetIds');
        this.attrDeploymentSets = this.getAtt('DeploymentSets');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.deploymentSetIds = props.deploymentSetIds;
        this.deploymentSetName = props.deploymentSetName;
        this.domain = props.domain;
        this.strategy = props.strategy;
    }
    get rosProperties() {
        return {
            deploymentSetIds: this.deploymentSetIds,
            deploymentSetName: this.deploymentSetName,
            domain: this.domain,
            strategy: this.strategy,
        };
    }
    renderProperties(props) {
        return rosDeploymentSetsPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosDeploymentSets = RosDeploymentSets;
/**
 * The resource type name for this resource class.
 */
RosDeploymentSets.ROS_RESOURCE_TYPE_NAME = "DATASOURCE::ECS::DeploymentSets";
/**
 * Determine whether the given properties match those of a `RosDiskCategoriesProps`
 *
 * @param properties - the TypeScript properties of a `RosDiskCategoriesProps`
 *
 * @returns the result of the validation.
 */
function RosDiskCategoriesPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('type', ros.requiredValidator)(properties.type));
    if (properties.type && (typeof properties.type) !== 'object') {
        errors.collect(ros.propertyValidator('type', ros.validateAllowedValues)({
            data: properties.type,
            allowedValues: ["system", "data"],
        }));
    }
    errors.collect(ros.propertyValidator('type', ros.validateString)(properties.type));
    errors.collect(ros.propertyValidator('zoneId', ros.requiredValidator)(properties.zoneId));
    errors.collect(ros.propertyValidator('zoneId', ros.validateString)(properties.zoneId));
    errors.collect(ros.propertyValidator('dataDiskCategory', ros.validateString)(properties.dataDiskCategory));
    errors.collect(ros.propertyValidator('instanceType', ros.validateString)(properties.instanceType));
    errors.collect(ros.propertyValidator('systemDiskCategory', ros.validateString)(properties.systemDiskCategory));
    return errors.wrap('supplied properties not correct for "RosDiskCategoriesProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `DATASOURCE::ECS::DiskCategories` resource
 *
 * @param properties - the TypeScript properties of a `RosDiskCategoriesProps`
 *
 * @returns the AliCloud ROS Resource properties of an `DATASOURCE::ECS::DiskCategories` resource.
 */
// @ts-ignore TS6133
function rosDiskCategoriesPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosDiskCategoriesPropsValidator(properties).assertSuccess();
    }
    return {
        Type: ros.stringToRosTemplate(properties.type),
        ZoneId: ros.stringToRosTemplate(properties.zoneId),
        DataDiskCategory: ros.stringToRosTemplate(properties.dataDiskCategory),
        InstanceType: ros.stringToRosTemplate(properties.instanceType),
        SystemDiskCategory: ros.stringToRosTemplate(properties.systemDiskCategory),
    };
}
/**
 * A ROS template type:  `DATASOURCE::ECS::DiskCategories`
 */
class RosDiskCategories extends ros.RosResource {
    /**
     * Create a new `DATASOURCE::ECS::DiskCategories`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosDiskCategories.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrDiskCategories = this.getAtt('DiskCategories');
        this.attrDiskCategoryIds = this.getAtt('DiskCategoryIds');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.type = props.type;
        this.zoneId = props.zoneId;
        this.dataDiskCategory = props.dataDiskCategory;
        this.instanceType = props.instanceType;
        this.systemDiskCategory = props.systemDiskCategory;
    }
    get rosProperties() {
        return {
            type: this.type,
            zoneId: this.zoneId,
            dataDiskCategory: this.dataDiskCategory,
            instanceType: this.instanceType,
            systemDiskCategory: this.systemDiskCategory,
        };
    }
    renderProperties(props) {
        return rosDiskCategoriesPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosDiskCategories = RosDiskCategories;
/**
 * The resource type name for this resource class.
 */
RosDiskCategories.ROS_RESOURCE_TYPE_NAME = "DATASOURCE::ECS::DiskCategories";
/**
 * Determine whether the given properties match those of a `RosDisksProps`
 *
 * @param properties - the TypeScript properties of a `RosDisksProps`
 *
 * @returns the result of the validation.
 */
function RosDisksPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    if (properties.status && (typeof properties.status) !== 'object') {
        errors.collect(ros.propertyValidator('status', ros.validateAllowedValues)({
            data: properties.status,
            allowedValues: ["In_use", "Available", "Attaching", "Detaching", "Creating", "ReIniting", "All"],
        }));
    }
    errors.collect(ros.propertyValidator('status', ros.validateString)(properties.status));
    if (properties.diskIds && (Array.isArray(properties.diskIds) || (typeof properties.diskIds) === 'string')) {
        errors.collect(ros.propertyValidator('diskIds', ros.validateLength)({
            data: properties.diskIds.length,
            min: undefined,
            max: 100,
        }));
    }
    errors.collect(ros.propertyValidator('diskIds', ros.listValidator(ros.validateString))(properties.diskIds));
    errors.collect(ros.propertyValidator('enableShared', ros.validateString)(properties.enableShared));
    errors.collect(ros.propertyValidator('category', ros.validateString)(properties.category));
    errors.collect(ros.propertyValidator('kmsKeyId', ros.validateString)(properties.kmsKeyId));
    errors.collect(ros.propertyValidator('resourceGroupId', ros.validateString)(properties.resourceGroupId));
    errors.collect(ros.propertyValidator('zoneId', ros.validateString)(properties.zoneId));
    errors.collect(ros.propertyValidator('instanceId', ros.validateString)(properties.instanceId));
    errors.collect(ros.propertyValidator('encrypted', ros.validateBoolean)(properties.encrypted));
    errors.collect(ros.propertyValidator('deleteWithInstance', ros.validateBoolean)(properties.deleteWithInstance));
    errors.collect(ros.propertyValidator('deleteAutoSnapshot', ros.validateString)(properties.deleteAutoSnapshot));
    errors.collect(ros.propertyValidator('enableAutomatedSnapshotPolicy', ros.validateBoolean)(properties.enableAutomatedSnapshotPolicy));
    errors.collect(ros.propertyValidator('diskChargeType', ros.validateString)(properties.diskChargeType));
    errors.collect(ros.propertyValidator('enableAutoSnapshot', ros.validateBoolean)(properties.enableAutoSnapshot));
    errors.collect(ros.propertyValidator('autoSnapshotPolicyId', ros.validateString)(properties.autoSnapshotPolicyId));
    errors.collect(ros.propertyValidator('diskName', ros.validateString)(properties.diskName));
    errors.collect(ros.propertyValidator('multiAttach', ros.validateString)(properties.multiAttach));
    if (properties.diskType && (typeof properties.diskType) !== 'object') {
        errors.collect(ros.propertyValidator('diskType', ros.validateAllowedValues)({
            data: properties.diskType,
            allowedValues: ["all", "system", "data"],
        }));
    }
    errors.collect(ros.propertyValidator('diskType', ros.validateString)(properties.diskType));
    errors.collect(ros.propertyValidator('snapshotId', ros.validateString)(properties.snapshotId));
    errors.collect(ros.propertyValidator('portable', ros.validateString)(properties.portable));
    if (properties.filters && (Array.isArray(properties.filters) || (typeof properties.filters) === 'string')) {
        errors.collect(ros.propertyValidator('filters', ros.validateLength)({
            data: properties.filters.length,
            min: undefined,
            max: 2,
        }));
    }
    errors.collect(ros.propertyValidator('filters', ros.listValidator(RosDisks_FiltersPropertyValidator))(properties.filters));
    if (properties.additionalAttributes && (Array.isArray(properties.additionalAttributes) || (typeof properties.additionalAttributes) === 'string')) {
        errors.collect(ros.propertyValidator('additionalAttributes', ros.validateLength)({
            data: properties.additionalAttributes.length,
            min: undefined,
            max: 3,
        }));
    }
    errors.collect(ros.propertyValidator('additionalAttributes', ros.listValidator(ros.validateString))(properties.additionalAttributes));
    if (properties.tags && (Array.isArray(properties.tags) || (typeof properties.tags) === 'string')) {
        errors.collect(ros.propertyValidator('tags', ros.validateLength)({
            data: properties.tags.length,
            min: undefined,
            max: 20,
        }));
    }
    errors.collect(ros.propertyValidator('tags', ros.listValidator(RosDisks_TagsPropertyValidator))(properties.tags));
    return errors.wrap('supplied properties not correct for "RosDisksProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `DATASOURCE::ECS::Disks` resource
 *
 * @param properties - the TypeScript properties of a `RosDisksProps`
 *
 * @returns the AliCloud ROS Resource properties of an `DATASOURCE::ECS::Disks` resource.
 */
// @ts-ignore TS6133
function rosDisksPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosDisksPropsValidator(properties).assertSuccess();
    }
    return {
        AdditionalAttributes: ros.listMapper(ros.stringToRosTemplate)(properties.additionalAttributes),
        AutoSnapshotPolicyId: ros.stringToRosTemplate(properties.autoSnapshotPolicyId),
        Category: ros.stringToRosTemplate(properties.category),
        DeleteAutoSnapshot: ros.stringToRosTemplate(properties.deleteAutoSnapshot),
        DeleteWithInstance: ros.booleanToRosTemplate(properties.deleteWithInstance),
        DiskChargeType: ros.stringToRosTemplate(properties.diskChargeType),
        DiskIds: ros.listMapper(ros.stringToRosTemplate)(properties.diskIds),
        DiskName: ros.stringToRosTemplate(properties.diskName),
        DiskType: ros.stringToRosTemplate(properties.diskType),
        EnableAutomatedSnapshotPolicy: ros.booleanToRosTemplate(properties.enableAutomatedSnapshotPolicy),
        EnableAutoSnapshot: ros.booleanToRosTemplate(properties.enableAutoSnapshot),
        EnableShared: ros.stringToRosTemplate(properties.enableShared),
        Encrypted: ros.booleanToRosTemplate(properties.encrypted),
        Filters: ros.listMapper(rosDisksFiltersPropertyToRosTemplate)(properties.filters),
        InstanceId: ros.stringToRosTemplate(properties.instanceId),
        KMSKeyId: ros.stringToRosTemplate(properties.kmsKeyId),
        MultiAttach: ros.stringToRosTemplate(properties.multiAttach),
        Portable: ros.stringToRosTemplate(properties.portable),
        ResourceGroupId: ros.stringToRosTemplate(properties.resourceGroupId),
        SnapshotId: ros.stringToRosTemplate(properties.snapshotId),
        Status: ros.stringToRosTemplate(properties.status),
        Tags: ros.listMapper(rosDisksTagsPropertyToRosTemplate)(properties.tags),
        ZoneId: ros.stringToRosTemplate(properties.zoneId),
    };
}
/**
 * A ROS template type:  `DATASOURCE::ECS::Disks`
 */
class RosDisks extends ros.RosResource {
    /**
     * Create a new `DATASOURCE::ECS::Disks`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosDisks.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrDiskIds = this.getAtt('DiskIds');
        this.attrDisks = this.getAtt('Disks');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.additionalAttributes = props.additionalAttributes;
        this.autoSnapshotPolicyId = props.autoSnapshotPolicyId;
        this.category = props.category;
        this.deleteAutoSnapshot = props.deleteAutoSnapshot;
        this.deleteWithInstance = props.deleteWithInstance;
        this.diskChargeType = props.diskChargeType;
        this.diskIds = props.diskIds;
        this.diskName = props.diskName;
        this.diskType = props.diskType;
        this.enableAutomatedSnapshotPolicy = props.enableAutomatedSnapshotPolicy;
        this.enableAutoSnapshot = props.enableAutoSnapshot;
        this.enableShared = props.enableShared;
        this.encrypted = props.encrypted;
        this.filters = props.filters;
        this.instanceId = props.instanceId;
        this.kmsKeyId = props.kmsKeyId;
        this.multiAttach = props.multiAttach;
        this.portable = props.portable;
        this.resourceGroupId = props.resourceGroupId;
        this.snapshotId = props.snapshotId;
        this.status = props.status;
        this.tags = props.tags;
        this.zoneId = props.zoneId;
    }
    get rosProperties() {
        return {
            additionalAttributes: this.additionalAttributes,
            autoSnapshotPolicyId: this.autoSnapshotPolicyId,
            category: this.category,
            deleteAutoSnapshot: this.deleteAutoSnapshot,
            deleteWithInstance: this.deleteWithInstance,
            diskChargeType: this.diskChargeType,
            diskIds: this.diskIds,
            diskName: this.diskName,
            diskType: this.diskType,
            enableAutomatedSnapshotPolicy: this.enableAutomatedSnapshotPolicy,
            enableAutoSnapshot: this.enableAutoSnapshot,
            enableShared: this.enableShared,
            encrypted: this.encrypted,
            filters: this.filters,
            instanceId: this.instanceId,
            kmsKeyId: this.kmsKeyId,
            multiAttach: this.multiAttach,
            portable: this.portable,
            resourceGroupId: this.resourceGroupId,
            snapshotId: this.snapshotId,
            status: this.status,
            tags: this.tags,
            zoneId: this.zoneId,
        };
    }
    renderProperties(props) {
        return rosDisksPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosDisks = RosDisks;
/**
 * The resource type name for this resource class.
 */
RosDisks.ROS_RESOURCE_TYPE_NAME = "DATASOURCE::ECS::Disks";
/**
 * Determine whether the given properties match those of a `FiltersProperty`
 *
 * @param properties - the TypeScript properties of a `FiltersProperty`
 *
 * @returns the result of the validation.
 */
function RosDisks_FiltersPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('value', ros.validateString)(properties.value));
    errors.collect(ros.propertyValidator('key', ros.requiredValidator)(properties.key));
    errors.collect(ros.propertyValidator('key', ros.validateString)(properties.key));
    return errors.wrap('supplied properties not correct for "FiltersProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `DATASOURCE::ECS::Disks.Filters` resource
 *
 * @param properties - the TypeScript properties of a `FiltersProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `DATASOURCE::ECS::Disks.Filters` resource.
 */
// @ts-ignore TS6133
function rosDisksFiltersPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosDisks_FiltersPropertyValidator(properties).assertSuccess();
    return {
        Value: ros.stringToRosTemplate(properties.value),
        Key: ros.stringToRosTemplate(properties.key),
    };
}
/**
 * Determine whether the given properties match those of a `TagsProperty`
 *
 * @param properties - the TypeScript properties of a `TagsProperty`
 *
 * @returns the result of the validation.
 */
function RosDisks_TagsPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('value', ros.validateString)(properties.value));
    errors.collect(ros.propertyValidator('key', ros.requiredValidator)(properties.key));
    errors.collect(ros.propertyValidator('key', ros.validateString)(properties.key));
    return errors.wrap('supplied properties not correct for "TagsProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `DATASOURCE::ECS::Disks.Tags` resource
 *
 * @param properties - the TypeScript properties of a `TagsProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `DATASOURCE::ECS::Disks.Tags` resource.
 */
// @ts-ignore TS6133
function rosDisksTagsPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosDisks_TagsPropertyValidator(properties).assertSuccess();
    return {
        Value: ros.stringToRosTemplate(properties.value),
        Key: ros.stringToRosTemplate(properties.key),
    };
}
/**
 * Determine whether the given properties match those of a `RosHpcClustersProps`
 *
 * @param properties - the TypeScript properties of a `RosHpcClustersProps`
 *
 * @returns the result of the validation.
 */
function RosHpcClustersPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    if (properties.hpcClusterIds && (Array.isArray(properties.hpcClusterIds) || (typeof properties.hpcClusterIds) === 'string')) {
        errors.collect(ros.propertyValidator('hpcClusterIds', ros.validateLength)({
            data: properties.hpcClusterIds.length,
            min: undefined,
            max: 100,
        }));
    }
    errors.collect(ros.propertyValidator('hpcClusterIds', ros.listValidator(ros.validateString))(properties.hpcClusterIds));
    return errors.wrap('supplied properties not correct for "RosHpcClustersProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `DATASOURCE::ECS::HpcClusters` resource
 *
 * @param properties - the TypeScript properties of a `RosHpcClustersProps`
 *
 * @returns the AliCloud ROS Resource properties of an `DATASOURCE::ECS::HpcClusters` resource.
 */
// @ts-ignore TS6133
function rosHpcClustersPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosHpcClustersPropsValidator(properties).assertSuccess();
    }
    return {
        HpcClusterIds: ros.listMapper(ros.stringToRosTemplate)(properties.hpcClusterIds),
    };
}
/**
 * A ROS template type:  `DATASOURCE::ECS::HpcClusters`
 */
class RosHpcClusters extends ros.RosResource {
    /**
     * Create a new `DATASOURCE::ECS::HpcClusters`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosHpcClusters.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrHpcClusterIds = this.getAtt('HpcClusterIds');
        this.attrHpcClusters = this.getAtt('HpcClusters');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.hpcClusterIds = props.hpcClusterIds;
    }
    get rosProperties() {
        return {
            hpcClusterIds: this.hpcClusterIds,
        };
    }
    renderProperties(props) {
        return rosHpcClustersPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosHpcClusters = RosHpcClusters;
/**
 * The resource type name for this resource class.
 */
RosHpcClusters.ROS_RESOURCE_TYPE_NAME = "DATASOURCE::ECS::HpcClusters";
/**
 * Determine whether the given properties match those of a `RosImagesProps`
 *
 * @param properties - the TypeScript properties of a `RosImagesProps`
 *
 * @returns the result of the validation.
 */
function RosImagesPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('status', ros.validateString)(properties.status));
    if (properties.imageOwnerAlias && (typeof properties.imageOwnerAlias) !== 'object') {
        errors.collect(ros.propertyValidator('imageOwnerAlias', ros.validateAllowedValues)({
            data: properties.imageOwnerAlias,
            allowedValues: ["system", "self", "others", "marketplace"],
        }));
    }
    errors.collect(ros.propertyValidator('imageOwnerAlias', ros.validateString)(properties.imageOwnerAlias));
    if (properties.usage && (typeof properties.usage) !== 'object') {
        errors.collect(ros.propertyValidator('usage', ros.validateAllowedValues)({
            data: properties.usage,
            allowedValues: ["instance", "none"],
        }));
    }
    errors.collect(ros.propertyValidator('usage', ros.validateString)(properties.usage));
    if (properties.actionType && (typeof properties.actionType) !== 'object') {
        errors.collect(ros.propertyValidator('actionType', ros.validateAllowedValues)({
            data: properties.actionType,
            allowedValues: ["CreateEcs", "ChangeOS"],
        }));
    }
    errors.collect(ros.propertyValidator('actionType', ros.validateString)(properties.actionType));
    errors.collect(ros.propertyValidator('resourceGroupId', ros.validateString)(properties.resourceGroupId));
    if (properties.architecture && (typeof properties.architecture) !== 'object') {
        errors.collect(ros.propertyValidator('architecture', ros.validateAllowedValues)({
            data: properties.architecture,
            allowedValues: ["i38", "x86_64", "arm64"],
        }));
    }
    errors.collect(ros.propertyValidator('architecture', ros.validateString)(properties.architecture));
    errors.collect(ros.propertyValidator('imageFamily', ros.validateString)(properties.imageFamily));
    errors.collect(ros.propertyValidator('isSupportIoOptimized', ros.validateBoolean)(properties.isSupportIoOptimized));
    errors.collect(ros.propertyValidator('isSupportCloudinit', ros.validateBoolean)(properties.isSupportCloudinit));
    errors.collect(ros.propertyValidator('imageName', ros.validateString)(properties.imageName));
    errors.collect(ros.propertyValidator('snapshotId', ros.validateString)(properties.snapshotId));
    errors.collect(ros.propertyValidator('isPublic', ros.validateBoolean)(properties.isPublic));
    if (properties.osType && (typeof properties.osType) !== 'object') {
        errors.collect(ros.propertyValidator('osType', ros.validateAllowedValues)({
            data: properties.osType,
            allowedValues: ["windows", "linux"],
        }));
    }
    errors.collect(ros.propertyValidator('osType', ros.validateString)(properties.osType));
    errors.collect(ros.propertyValidator('imageId', ros.validateString)(properties.imageId));
    errors.collect(ros.propertyValidator('instanceType', ros.validateString)(properties.instanceType));
    if (properties.tags && (Array.isArray(properties.tags) || (typeof properties.tags) === 'string')) {
        errors.collect(ros.propertyValidator('tags', ros.validateLength)({
            data: properties.tags.length,
            min: undefined,
            max: 20,
        }));
    }
    errors.collect(ros.propertyValidator('tags', ros.listValidator(RosImages_TagsPropertyValidator))(properties.tags));
    return errors.wrap('supplied properties not correct for "RosImagesProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `DATASOURCE::ECS::Images` resource
 *
 * @param properties - the TypeScript properties of a `RosImagesProps`
 *
 * @returns the AliCloud ROS Resource properties of an `DATASOURCE::ECS::Images` resource.
 */
// @ts-ignore TS6133
function rosImagesPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosImagesPropsValidator(properties).assertSuccess();
    }
    return {
        ActionType: ros.stringToRosTemplate(properties.actionType),
        Architecture: ros.stringToRosTemplate(properties.architecture),
        ImageFamily: ros.stringToRosTemplate(properties.imageFamily),
        ImageId: ros.stringToRosTemplate(properties.imageId),
        ImageName: ros.stringToRosTemplate(properties.imageName),
        ImageOwnerAlias: ros.stringToRosTemplate(properties.imageOwnerAlias),
        InstanceType: ros.stringToRosTemplate(properties.instanceType),
        IsPublic: ros.booleanToRosTemplate(properties.isPublic),
        IsSupportCloudinit: ros.booleanToRosTemplate(properties.isSupportCloudinit),
        IsSupportIoOptimized: ros.booleanToRosTemplate(properties.isSupportIoOptimized),
        OSType: ros.stringToRosTemplate(properties.osType),
        ResourceGroupId: ros.stringToRosTemplate(properties.resourceGroupId),
        SnapshotId: ros.stringToRosTemplate(properties.snapshotId),
        Status: ros.stringToRosTemplate(properties.status),
        Tags: ros.listMapper(rosImagesTagsPropertyToRosTemplate)(properties.tags),
        Usage: ros.stringToRosTemplate(properties.usage),
    };
}
/**
 * A ROS template type:  `DATASOURCE::ECS::Images`
 */
class RosImages extends ros.RosResource {
    /**
     * Create a new `DATASOURCE::ECS::Images`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosImages.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrImageIds = this.getAtt('ImageIds');
        this.attrImages = this.getAtt('Images');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.actionType = props.actionType;
        this.architecture = props.architecture;
        this.imageFamily = props.imageFamily;
        this.imageId = props.imageId;
        this.imageName = props.imageName;
        this.imageOwnerAlias = props.imageOwnerAlias;
        this.instanceType = props.instanceType;
        this.isPublic = props.isPublic;
        this.isSupportCloudinit = props.isSupportCloudinit;
        this.isSupportIoOptimized = props.isSupportIoOptimized;
        this.osType = props.osType;
        this.resourceGroupId = props.resourceGroupId;
        this.snapshotId = props.snapshotId;
        this.status = props.status;
        this.tags = props.tags;
        this.usage = props.usage;
    }
    get rosProperties() {
        return {
            actionType: this.actionType,
            architecture: this.architecture,
            imageFamily: this.imageFamily,
            imageId: this.imageId,
            imageName: this.imageName,
            imageOwnerAlias: this.imageOwnerAlias,
            instanceType: this.instanceType,
            isPublic: this.isPublic,
            isSupportCloudinit: this.isSupportCloudinit,
            isSupportIoOptimized: this.isSupportIoOptimized,
            osType: this.osType,
            resourceGroupId: this.resourceGroupId,
            snapshotId: this.snapshotId,
            status: this.status,
            tags: this.tags,
            usage: this.usage,
        };
    }
    renderProperties(props) {
        return rosImagesPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosImages = RosImages;
/**
 * The resource type name for this resource class.
 */
RosImages.ROS_RESOURCE_TYPE_NAME = "DATASOURCE::ECS::Images";
/**
 * Determine whether the given properties match those of a `TagsProperty`
 *
 * @param properties - the TypeScript properties of a `TagsProperty`
 *
 * @returns the result of the validation.
 */
function RosImages_TagsPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('value', ros.validateString)(properties.value));
    errors.collect(ros.propertyValidator('key', ros.requiredValidator)(properties.key));
    errors.collect(ros.propertyValidator('key', ros.validateString)(properties.key));
    return errors.wrap('supplied properties not correct for "TagsProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `DATASOURCE::ECS::Images.Tags` resource
 *
 * @param properties - the TypeScript properties of a `TagsProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `DATASOURCE::ECS::Images.Tags` resource.
 */
// @ts-ignore TS6133
function rosImagesTagsPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosImages_TagsPropertyValidator(properties).assertSuccess();
    return {
        Value: ros.stringToRosTemplate(properties.value),
        Key: ros.stringToRosTemplate(properties.key),
    };
}
/**
 * Determine whether the given properties match those of a `RosInstancesProps`
 *
 * @param properties - the TypeScript properties of a `RosInstancesProps`
 *
 * @returns the result of the validation.
 */
function RosInstancesPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    if (properties.innerIpAddresses && (Array.isArray(properties.innerIpAddresses) || (typeof properties.innerIpAddresses) === 'string')) {
        errors.collect(ros.propertyValidator('innerIpAddresses', ros.validateLength)({
            data: properties.innerIpAddresses.length,
            min: undefined,
            max: 100,
        }));
    }
    errors.collect(ros.propertyValidator('innerIpAddresses', ros.listValidator(ros.validateString))(properties.innerIpAddresses));
    errors.collect(ros.propertyValidator('resourceGroupId', ros.validateString)(properties.resourceGroupId));
    if (properties.privateIpAddresses && (Array.isArray(properties.privateIpAddresses) || (typeof properties.privateIpAddresses) === 'string')) {
        errors.collect(ros.propertyValidator('privateIpAddresses', ros.validateLength)({
            data: properties.privateIpAddresses.length,
            min: undefined,
            max: 100,
        }));
    }
    errors.collect(ros.propertyValidator('privateIpAddresses', ros.listValidator(ros.validateString))(properties.privateIpAddresses));
    errors.collect(ros.propertyValidator('instanceChargeType', ros.validateString)(properties.instanceChargeType));
    errors.collect(ros.propertyValidator('instanceTypeFamily', ros.validateString)(properties.instanceTypeFamily));
    errors.collect(ros.propertyValidator('instanceNetworkType', ros.validateString)(properties.instanceNetworkType));
    if (properties.filters && (Array.isArray(properties.filters) || (typeof properties.filters) === 'string')) {
        errors.collect(ros.propertyValidator('filters', ros.validateLength)({
            data: properties.filters.length,
            min: undefined,
            max: 2,
        }));
    }
    errors.collect(ros.propertyValidator('filters', ros.listValidator(RosInstances_FiltersPropertyValidator))(properties.filters));
    if (properties.additionalAttributes && (Array.isArray(properties.additionalAttributes) || (typeof properties.additionalAttributes) === 'string')) {
        errors.collect(ros.propertyValidator('additionalAttributes', ros.validateLength)({
            data: properties.additionalAttributes.length,
            min: undefined,
            max: 20,
        }));
    }
    errors.collect(ros.propertyValidator('additionalAttributes', ros.listValidator(ros.validateString))(properties.additionalAttributes));
    errors.collect(ros.propertyValidator('imageId', ros.validateString)(properties.imageId));
    if (properties.publicIpAddresses && (Array.isArray(properties.publicIpAddresses) || (typeof properties.publicIpAddresses) === 'string')) {
        errors.collect(ros.propertyValidator('publicIpAddresses', ros.validateLength)({
            data: properties.publicIpAddresses.length,
            min: undefined,
            max: 100,
        }));
    }
    errors.collect(ros.propertyValidator('publicIpAddresses', ros.listValidator(ros.validateString))(properties.publicIpAddresses));
    errors.collect(ros.propertyValidator('rdmaIpAddresses', ros.validateString)(properties.rdmaIpAddresses));
    if (properties.instanceIds && (Array.isArray(properties.instanceIds) || (typeof properties.instanceIds) === 'string')) {
        errors.collect(ros.propertyValidator('instanceIds', ros.validateLength)({
            data: properties.instanceIds.length,
            min: undefined,
            max: 100,
        }));
    }
    errors.collect(ros.propertyValidator('instanceIds', ros.listValidator(ros.validateString))(properties.instanceIds));
    errors.collect(ros.propertyValidator('instanceType', ros.validateString)(properties.instanceType));
    if (properties.ipv6Address && (Array.isArray(properties.ipv6Address) || (typeof properties.ipv6Address) === 'string')) {
        errors.collect(ros.propertyValidator('ipv6Address', ros.validateLength)({
            data: properties.ipv6Address.length,
            min: undefined,
            max: 100,
        }));
    }
    errors.collect(ros.propertyValidator('ipv6Address', ros.listValidator(ros.validateString))(properties.ipv6Address));
    if (properties.tags && (Array.isArray(properties.tags) || (typeof properties.tags) === 'string')) {
        errors.collect(ros.propertyValidator('tags', ros.validateLength)({
            data: properties.tags.length,
            min: undefined,
            max: 20,
        }));
    }
    errors.collect(ros.propertyValidator('tags', ros.listValidator(RosInstances_TagsPropertyValidator))(properties.tags));
    errors.collect(ros.propertyValidator('status', ros.validateString)(properties.status));
    errors.collect(ros.propertyValidator('keyPairName', ros.validateString)(properties.keyPairName));
    errors.collect(ros.propertyValidator('ioOptimized', ros.validateBoolean)(properties.ioOptimized));
    errors.collect(ros.propertyValidator('zoneId', ros.validateString)(properties.zoneId));
    errors.collect(ros.propertyValidator('instanceId', ros.validateString)(properties.instanceId));
    errors.collect(ros.propertyValidator('hpcClusterId', ros.validateString)(properties.hpcClusterId));
    errors.collect(ros.propertyValidator('vSwitchId', ros.validateString)(properties.vSwitchId));
    errors.collect(ros.propertyValidator('securityGroupId', ros.validateString)(properties.securityGroupId));
    errors.collect(ros.propertyValidator('internetChargeType', ros.validateString)(properties.internetChargeType));
    errors.collect(ros.propertyValidator('instanceName', ros.validateString)(properties.instanceName));
    if (properties.eipAddresses && (Array.isArray(properties.eipAddresses) || (typeof properties.eipAddresses) === 'string')) {
        errors.collect(ros.propertyValidator('eipAddresses', ros.validateLength)({
            data: properties.eipAddresses.length,
            min: undefined,
            max: 100,
        }));
    }
    errors.collect(ros.propertyValidator('eipAddresses', ros.listValidator(ros.validateString))(properties.eipAddresses));
    errors.collect(ros.propertyValidator('vpcId', ros.validateString)(properties.vpcId));
    return errors.wrap('supplied properties not correct for "RosInstancesProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `DATASOURCE::ECS::Instances` resource
 *
 * @param properties - the TypeScript properties of a `RosInstancesProps`
 *
 * @returns the AliCloud ROS Resource properties of an `DATASOURCE::ECS::Instances` resource.
 */
// @ts-ignore TS6133
function rosInstancesPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosInstancesPropsValidator(properties).assertSuccess();
    }
    return {
        AdditionalAttributes: ros.listMapper(ros.stringToRosTemplate)(properties.additionalAttributes),
        EipAddresses: ros.listMapper(ros.stringToRosTemplate)(properties.eipAddresses),
        Filters: ros.listMapper(rosInstancesFiltersPropertyToRosTemplate)(properties.filters),
        HpcClusterId: ros.stringToRosTemplate(properties.hpcClusterId),
        ImageId: ros.stringToRosTemplate(properties.imageId),
        InnerIpAddresses: ros.listMapper(ros.stringToRosTemplate)(properties.innerIpAddresses),
        InstanceChargeType: ros.stringToRosTemplate(properties.instanceChargeType),
        InstanceId: ros.stringToRosTemplate(properties.instanceId),
        InstanceIds: ros.listMapper(ros.stringToRosTemplate)(properties.instanceIds),
        InstanceName: ros.stringToRosTemplate(properties.instanceName),
        InstanceNetworkType: ros.stringToRosTemplate(properties.instanceNetworkType),
        InstanceType: ros.stringToRosTemplate(properties.instanceType),
        InstanceTypeFamily: ros.stringToRosTemplate(properties.instanceTypeFamily),
        InternetChargeType: ros.stringToRosTemplate(properties.internetChargeType),
        IoOptimized: ros.booleanToRosTemplate(properties.ioOptimized),
        Ipv6Address: ros.listMapper(ros.stringToRosTemplate)(properties.ipv6Address),
        KeyPairName: ros.stringToRosTemplate(properties.keyPairName),
        PrivateIpAddresses: ros.listMapper(ros.stringToRosTemplate)(properties.privateIpAddresses),
        PublicIpAddresses: ros.listMapper(ros.stringToRosTemplate)(properties.publicIpAddresses),
        RdmaIpAddresses: ros.stringToRosTemplate(properties.rdmaIpAddresses),
        ResourceGroupId: ros.stringToRosTemplate(properties.resourceGroupId),
        SecurityGroupId: ros.stringToRosTemplate(properties.securityGroupId),
        Status: ros.stringToRosTemplate(properties.status),
        Tags: ros.listMapper(rosInstancesTagsPropertyToRosTemplate)(properties.tags),
        VpcId: ros.stringToRosTemplate(properties.vpcId),
        VSwitchId: ros.stringToRosTemplate(properties.vSwitchId),
        ZoneId: ros.stringToRosTemplate(properties.zoneId),
    };
}
/**
 * A ROS template type:  `DATASOURCE::ECS::Instances`
 */
class RosInstances extends ros.RosResource {
    /**
     * Create a new `DATASOURCE::ECS::Instances`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosInstances.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrInstanceIds = this.getAtt('InstanceIds');
        this.attrInstances = this.getAtt('Instances');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.additionalAttributes = props.additionalAttributes;
        this.eipAddresses = props.eipAddresses;
        this.filters = props.filters;
        this.hpcClusterId = props.hpcClusterId;
        this.imageId = props.imageId;
        this.innerIpAddresses = props.innerIpAddresses;
        this.instanceChargeType = props.instanceChargeType;
        this.instanceId = props.instanceId;
        this.instanceIds = props.instanceIds;
        this.instanceName = props.instanceName;
        this.instanceNetworkType = props.instanceNetworkType;
        this.instanceType = props.instanceType;
        this.instanceTypeFamily = props.instanceTypeFamily;
        this.internetChargeType = props.internetChargeType;
        this.ioOptimized = props.ioOptimized;
        this.ipv6Address = props.ipv6Address;
        this.keyPairName = props.keyPairName;
        this.privateIpAddresses = props.privateIpAddresses;
        this.publicIpAddresses = props.publicIpAddresses;
        this.rdmaIpAddresses = props.rdmaIpAddresses;
        this.resourceGroupId = props.resourceGroupId;
        this.securityGroupId = props.securityGroupId;
        this.status = props.status;
        this.tags = props.tags;
        this.vpcId = props.vpcId;
        this.vSwitchId = props.vSwitchId;
        this.zoneId = props.zoneId;
    }
    get rosProperties() {
        return {
            additionalAttributes: this.additionalAttributes,
            eipAddresses: this.eipAddresses,
            filters: this.filters,
            hpcClusterId: this.hpcClusterId,
            imageId: this.imageId,
            innerIpAddresses: this.innerIpAddresses,
            instanceChargeType: this.instanceChargeType,
            instanceId: this.instanceId,
            instanceIds: this.instanceIds,
            instanceName: this.instanceName,
            instanceNetworkType: this.instanceNetworkType,
            instanceType: this.instanceType,
            instanceTypeFamily: this.instanceTypeFamily,
            internetChargeType: this.internetChargeType,
            ioOptimized: this.ioOptimized,
            ipv6Address: this.ipv6Address,
            keyPairName: this.keyPairName,
            privateIpAddresses: this.privateIpAddresses,
            publicIpAddresses: this.publicIpAddresses,
            rdmaIpAddresses: this.rdmaIpAddresses,
            resourceGroupId: this.resourceGroupId,
            securityGroupId: this.securityGroupId,
            status: this.status,
            tags: this.tags,
            vpcId: this.vpcId,
            vSwitchId: this.vSwitchId,
            zoneId: this.zoneId,
        };
    }
    renderProperties(props) {
        return rosInstancesPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosInstances = RosInstances;
/**
 * The resource type name for this resource class.
 */
RosInstances.ROS_RESOURCE_TYPE_NAME = "DATASOURCE::ECS::Instances";
/**
 * Determine whether the given properties match those of a `FiltersProperty`
 *
 * @param properties - the TypeScript properties of a `FiltersProperty`
 *
 * @returns the result of the validation.
 */
function RosInstances_FiltersPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('value', ros.validateString)(properties.value));
    errors.collect(ros.propertyValidator('key', ros.requiredValidator)(properties.key));
    errors.collect(ros.propertyValidator('key', ros.validateString)(properties.key));
    return errors.wrap('supplied properties not correct for "FiltersProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `DATASOURCE::ECS::Instances.Filters` resource
 *
 * @param properties - the TypeScript properties of a `FiltersProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `DATASOURCE::ECS::Instances.Filters` resource.
 */
// @ts-ignore TS6133
function rosInstancesFiltersPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosInstances_FiltersPropertyValidator(properties).assertSuccess();
    return {
        Value: ros.stringToRosTemplate(properties.value),
        Key: ros.stringToRosTemplate(properties.key),
    };
}
/**
 * Determine whether the given properties match those of a `TagsProperty`
 *
 * @param properties - the TypeScript properties of a `TagsProperty`
 *
 * @returns the result of the validation.
 */
function RosInstances_TagsPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('value', ros.validateString)(properties.value));
    errors.collect(ros.propertyValidator('key', ros.requiredValidator)(properties.key));
    errors.collect(ros.propertyValidator('key', ros.validateString)(properties.key));
    return errors.wrap('supplied properties not correct for "TagsProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `DATASOURCE::ECS::Instances.Tags` resource
 *
 * @param properties - the TypeScript properties of a `TagsProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `DATASOURCE::ECS::Instances.Tags` resource.
 */
// @ts-ignore TS6133
function rosInstancesTagsPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosInstances_TagsPropertyValidator(properties).assertSuccess();
    return {
        Value: ros.stringToRosTemplate(properties.value),
        Key: ros.stringToRosTemplate(properties.key),
    };
}
/**
 * Determine whether the given properties match those of a `RosKeyPairsProps`
 *
 * @param properties - the TypeScript properties of a `RosKeyPairsProps`
 *
 * @returns the result of the validation.
 */
function RosKeyPairsPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('keyPairFingerPrint', ros.validateString)(properties.keyPairFingerPrint));
    errors.collect(ros.propertyValidator('keyPairName', ros.validateString)(properties.keyPairName));
    errors.collect(ros.propertyValidator('resourceGroupId', ros.validateString)(properties.resourceGroupId));
    if (properties.tags && (Array.isArray(properties.tags) || (typeof properties.tags) === 'string')) {
        errors.collect(ros.propertyValidator('tags', ros.validateLength)({
            data: properties.tags.length,
            min: undefined,
            max: 20,
        }));
    }
    errors.collect(ros.propertyValidator('tags', ros.listValidator(RosKeyPairs_TagsPropertyValidator))(properties.tags));
    return errors.wrap('supplied properties not correct for "RosKeyPairsProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `DATASOURCE::ECS::KeyPairs` resource
 *
 * @param properties - the TypeScript properties of a `RosKeyPairsProps`
 *
 * @returns the AliCloud ROS Resource properties of an `DATASOURCE::ECS::KeyPairs` resource.
 */
// @ts-ignore TS6133
function rosKeyPairsPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosKeyPairsPropsValidator(properties).assertSuccess();
    }
    return {
        KeyPairFingerPrint: ros.stringToRosTemplate(properties.keyPairFingerPrint),
        KeyPairName: ros.stringToRosTemplate(properties.keyPairName),
        ResourceGroupId: ros.stringToRosTemplate(properties.resourceGroupId),
        Tags: ros.listMapper(rosKeyPairsTagsPropertyToRosTemplate)(properties.tags),
    };
}
/**
 * A ROS template type:  `DATASOURCE::ECS::KeyPairs`
 */
class RosKeyPairs extends ros.RosResource {
    /**
     * Create a new `DATASOURCE::ECS::KeyPairs`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosKeyPairs.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrKeyPairNames = this.getAtt('KeyPairNames');
        this.attrKeyPairs = this.getAtt('KeyPairs');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.keyPairFingerPrint = props.keyPairFingerPrint;
        this.keyPairName = props.keyPairName;
        this.resourceGroupId = props.resourceGroupId;
        this.tags = props.tags;
    }
    get rosProperties() {
        return {
            keyPairFingerPrint: this.keyPairFingerPrint,
            keyPairName: this.keyPairName,
            resourceGroupId: this.resourceGroupId,
            tags: this.tags,
        };
    }
    renderProperties(props) {
        return rosKeyPairsPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosKeyPairs = RosKeyPairs;
/**
 * The resource type name for this resource class.
 */
RosKeyPairs.ROS_RESOURCE_TYPE_NAME = "DATASOURCE::ECS::KeyPairs";
/**
 * Determine whether the given properties match those of a `TagsProperty`
 *
 * @param properties - the TypeScript properties of a `TagsProperty`
 *
 * @returns the result of the validation.
 */
function RosKeyPairs_TagsPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('value', ros.validateString)(properties.value));
    errors.collect(ros.propertyValidator('key', ros.requiredValidator)(properties.key));
    errors.collect(ros.propertyValidator('key', ros.validateString)(properties.key));
    return errors.wrap('supplied properties not correct for "TagsProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `DATASOURCE::ECS::KeyPairs.Tags` resource
 *
 * @param properties - the TypeScript properties of a `TagsProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `DATASOURCE::ECS::KeyPairs.Tags` resource.
 */
// @ts-ignore TS6133
function rosKeyPairsTagsPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosKeyPairs_TagsPropertyValidator(properties).assertSuccess();
    return {
        Value: ros.stringToRosTemplate(properties.value),
        Key: ros.stringToRosTemplate(properties.key),
    };
}
/**
 * Determine whether the given properties match those of a `RosManagedInstancesProps`
 *
 * @param properties - the TypeScript properties of a `RosManagedInstancesProps`
 *
 * @returns the result of the validation.
 */
function RosManagedInstancesPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('instanceName', ros.validateString)(properties.instanceName));
    if (properties.instanceId && (Array.isArray(properties.instanceId) || (typeof properties.instanceId) === 'string')) {
        errors.collect(ros.propertyValidator('instanceId', ros.validateLength)({
            data: properties.instanceId.length,
            min: undefined,
            max: 50,
        }));
    }
    errors.collect(ros.propertyValidator('instanceId', ros.listValidator(ros.validateString))(properties.instanceId));
    if (properties.osType && (typeof properties.osType) !== 'object') {
        errors.collect(ros.propertyValidator('osType', ros.validateAllowedValues)({
            data: properties.osType,
            allowedValues: ["windows", "linux"],
        }));
    }
    errors.collect(ros.propertyValidator('osType', ros.validateString)(properties.osType));
    errors.collect(ros.propertyValidator('activationId', ros.validateString)(properties.activationId));
    errors.collect(ros.propertyValidator('instanceIp', ros.validateString)(properties.instanceIp));
    if (properties.tags && (Array.isArray(properties.tags) || (typeof properties.tags) === 'string')) {
        errors.collect(ros.propertyValidator('tags', ros.validateLength)({
            data: properties.tags.length,
            min: undefined,
            max: 20,
        }));
    }
    errors.collect(ros.propertyValidator('tags', ros.listValidator(RosManagedInstances_TagsPropertyValidator))(properties.tags));
    return errors.wrap('supplied properties not correct for "RosManagedInstancesProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `DATASOURCE::ECS::ManagedInstances` resource
 *
 * @param properties - the TypeScript properties of a `RosManagedInstancesProps`
 *
 * @returns the AliCloud ROS Resource properties of an `DATASOURCE::ECS::ManagedInstances` resource.
 */
// @ts-ignore TS6133
function rosManagedInstancesPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosManagedInstancesPropsValidator(properties).assertSuccess();
    }
    return {
        ActivationId: ros.stringToRosTemplate(properties.activationId),
        InstanceId: ros.listMapper(ros.stringToRosTemplate)(properties.instanceId),
        InstanceIp: ros.stringToRosTemplate(properties.instanceIp),
        InstanceName: ros.stringToRosTemplate(properties.instanceName),
        OsType: ros.stringToRosTemplate(properties.osType),
        Tags: ros.listMapper(rosManagedInstancesTagsPropertyToRosTemplate)(properties.tags),
    };
}
/**
 * A ROS template type:  `DATASOURCE::ECS::ManagedInstances`
 */
class RosManagedInstances extends ros.RosResource {
    /**
     * Create a new `DATASOURCE::ECS::ManagedInstances`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosManagedInstances.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrInstanceIds = this.getAtt('InstanceIds');
        this.attrInstances = this.getAtt('Instances');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.activationId = props.activationId;
        this.instanceId = props.instanceId;
        this.instanceIp = props.instanceIp;
        this.instanceName = props.instanceName;
        this.osType = props.osType;
        this.tags = props.tags;
    }
    get rosProperties() {
        return {
            activationId: this.activationId,
            instanceId: this.instanceId,
            instanceIp: this.instanceIp,
            instanceName: this.instanceName,
            osType: this.osType,
            tags: this.tags,
        };
    }
    renderProperties(props) {
        return rosManagedInstancesPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosManagedInstances = RosManagedInstances;
/**
 * The resource type name for this resource class.
 */
RosManagedInstances.ROS_RESOURCE_TYPE_NAME = "DATASOURCE::ECS::ManagedInstances";
/**
 * Determine whether the given properties match those of a `TagsProperty`
 *
 * @param properties - the TypeScript properties of a `TagsProperty`
 *
 * @returns the result of the validation.
 */
function RosManagedInstances_TagsPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('value', ros.validateString)(properties.value));
    errors.collect(ros.propertyValidator('key', ros.requiredValidator)(properties.key));
    errors.collect(ros.propertyValidator('key', ros.validateString)(properties.key));
    return errors.wrap('supplied properties not correct for "TagsProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `DATASOURCE::ECS::ManagedInstances.Tags` resource
 *
 * @param properties - the TypeScript properties of a `TagsProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `DATASOURCE::ECS::ManagedInstances.Tags` resource.
 */
// @ts-ignore TS6133
function rosManagedInstancesTagsPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosManagedInstances_TagsPropertyValidator(properties).assertSuccess();
    return {
        Value: ros.stringToRosTemplate(properties.value),
        Key: ros.stringToRosTemplate(properties.key),
    };
}
/**
 * Determine whether the given properties match those of a `RosNetworkInterfacesProps`
 *
 * @param properties - the TypeScript properties of a `RosNetworkInterfacesProps`
 *
 * @returns the result of the validation.
 */
function RosNetworkInterfacesPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('status', ros.validateString)(properties.status));
    if (properties.privateIpAddresses && (Array.isArray(properties.privateIpAddresses) || (typeof properties.privateIpAddresses) === 'string')) {
        errors.collect(ros.propertyValidator('privateIpAddresses', ros.validateLength)({
            data: properties.privateIpAddresses.length,
            min: undefined,
            max: 100,
        }));
    }
    errors.collect(ros.propertyValidator('privateIpAddresses', ros.listValidator(ros.validateString))(properties.privateIpAddresses));
    errors.collect(ros.propertyValidator('serviceManaged', ros.validateBoolean)(properties.serviceManaged));
    errors.collect(ros.propertyValidator('resourceGroupId', ros.validateString)(properties.resourceGroupId));
    errors.collect(ros.propertyValidator('instanceId', ros.validateString)(properties.instanceId));
    errors.collect(ros.propertyValidator('securityGroupId', ros.validateString)(properties.securityGroupId));
    errors.collect(ros.propertyValidator('vSwitchId', ros.validateString)(properties.vSwitchId));
    errors.collect(ros.propertyValidator('networkInterfaceName', ros.validateString)(properties.networkInterfaceName));
    if (properties.networkInterfaceIds && (Array.isArray(properties.networkInterfaceIds) || (typeof properties.networkInterfaceIds) === 'string')) {
        errors.collect(ros.propertyValidator('networkInterfaceIds', ros.validateLength)({
            data: properties.networkInterfaceIds.length,
            min: undefined,
            max: 100,
        }));
    }
    errors.collect(ros.propertyValidator('networkInterfaceIds', ros.listValidator(ros.validateString))(properties.networkInterfaceIds));
    errors.collect(ros.propertyValidator('primaryIpAddress', ros.validateString)(properties.primaryIpAddress));
    if (properties.ipv6Addresses && (Array.isArray(properties.ipv6Addresses) || (typeof properties.ipv6Addresses) === 'string')) {
        errors.collect(ros.propertyValidator('ipv6Addresses', ros.validateLength)({
            data: properties.ipv6Addresses.length,
            min: undefined,
            max: 100,
        }));
    }
    errors.collect(ros.propertyValidator('ipv6Addresses', ros.listValidator(ros.validateString))(properties.ipv6Addresses));
    errors.collect(ros.propertyValidator('type', ros.validateString)(properties.type));
    errors.collect(ros.propertyValidator('vpcId', ros.validateString)(properties.vpcId));
    if (properties.tags && (Array.isArray(properties.tags) || (typeof properties.tags) === 'string')) {
        errors.collect(ros.propertyValidator('tags', ros.validateLength)({
            data: properties.tags.length,
            min: undefined,
            max: 20,
        }));
    }
    errors.collect(ros.propertyValidator('tags', ros.listValidator(RosNetworkInterfaces_TagsPropertyValidator))(properties.tags));
    return errors.wrap('supplied properties not correct for "RosNetworkInterfacesProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `DATASOURCE::ECS::NetworkInterfaces` resource
 *
 * @param properties - the TypeScript properties of a `RosNetworkInterfacesProps`
 *
 * @returns the AliCloud ROS Resource properties of an `DATASOURCE::ECS::NetworkInterfaces` resource.
 */
// @ts-ignore TS6133
function rosNetworkInterfacesPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosNetworkInterfacesPropsValidator(properties).assertSuccess();
    }
    return {
        InstanceId: ros.stringToRosTemplate(properties.instanceId),
        Ipv6Addresses: ros.listMapper(ros.stringToRosTemplate)(properties.ipv6Addresses),
        NetworkInterfaceIds: ros.listMapper(ros.stringToRosTemplate)(properties.networkInterfaceIds),
        NetworkInterfaceName: ros.stringToRosTemplate(properties.networkInterfaceName),
        PrimaryIpAddress: ros.stringToRosTemplate(properties.primaryIpAddress),
        PrivateIpAddresses: ros.listMapper(ros.stringToRosTemplate)(properties.privateIpAddresses),
        ResourceGroupId: ros.stringToRosTemplate(properties.resourceGroupId),
        SecurityGroupId: ros.stringToRosTemplate(properties.securityGroupId),
        ServiceManaged: ros.booleanToRosTemplate(properties.serviceManaged),
        Status: ros.stringToRosTemplate(properties.status),
        Tags: ros.listMapper(rosNetworkInterfacesTagsPropertyToRosTemplate)(properties.tags),
        Type: ros.stringToRosTemplate(properties.type),
        VpcId: ros.stringToRosTemplate(properties.vpcId),
        VSwitchId: ros.stringToRosTemplate(properties.vSwitchId),
    };
}
/**
 * A ROS template type:  `DATASOURCE::ECS::NetworkInterfaces`
 */
class RosNetworkInterfaces extends ros.RosResource {
    /**
     * Create a new `DATASOURCE::ECS::NetworkInterfaces`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosNetworkInterfaces.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrNetworkInterfaceIds = this.getAtt('NetworkInterfaceIds');
        this.attrNetworkInterfaces = this.getAtt('NetworkInterfaces');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.instanceId = props.instanceId;
        this.ipv6Addresses = props.ipv6Addresses;
        this.networkInterfaceIds = props.networkInterfaceIds;
        this.networkInterfaceName = props.networkInterfaceName;
        this.primaryIpAddress = props.primaryIpAddress;
        this.privateIpAddresses = props.privateIpAddresses;
        this.resourceGroupId = props.resourceGroupId;
        this.securityGroupId = props.securityGroupId;
        this.serviceManaged = props.serviceManaged;
        this.status = props.status;
        this.tags = props.tags;
        this.type = props.type;
        this.vpcId = props.vpcId;
        this.vSwitchId = props.vSwitchId;
    }
    get rosProperties() {
        return {
            instanceId: this.instanceId,
            ipv6Addresses: this.ipv6Addresses,
            networkInterfaceIds: this.networkInterfaceIds,
            networkInterfaceName: this.networkInterfaceName,
            primaryIpAddress: this.primaryIpAddress,
            privateIpAddresses: this.privateIpAddresses,
            resourceGroupId: this.resourceGroupId,
            securityGroupId: this.securityGroupId,
            serviceManaged: this.serviceManaged,
            status: this.status,
            tags: this.tags,
            type: this.type,
            vpcId: this.vpcId,
            vSwitchId: this.vSwitchId,
        };
    }
    renderProperties(props) {
        return rosNetworkInterfacesPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosNetworkInterfaces = RosNetworkInterfaces;
/**
 * The resource type name for this resource class.
 */
RosNetworkInterfaces.ROS_RESOURCE_TYPE_NAME = "DATASOURCE::ECS::NetworkInterfaces";
/**
 * Determine whether the given properties match those of a `TagsProperty`
 *
 * @param properties - the TypeScript properties of a `TagsProperty`
 *
 * @returns the result of the validation.
 */
function RosNetworkInterfaces_TagsPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('value', ros.validateString)(properties.value));
    errors.collect(ros.propertyValidator('key', ros.requiredValidator)(properties.key));
    errors.collect(ros.propertyValidator('key', ros.validateString)(properties.key));
    return errors.wrap('supplied properties not correct for "TagsProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `DATASOURCE::ECS::NetworkInterfaces.Tags` resource
 *
 * @param properties - the TypeScript properties of a `TagsProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `DATASOURCE::ECS::NetworkInterfaces.Tags` resource.
 */
// @ts-ignore TS6133
function rosNetworkInterfacesTagsPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosNetworkInterfaces_TagsPropertyValidator(properties).assertSuccess();
    return {
        Value: ros.stringToRosTemplate(properties.value),
        Key: ros.stringToRosTemplate(properties.key),
    };
}
/**
 * Determine whether the given properties match those of a `RosRecommendInstanceTypesProps`
 *
 * @param properties - the TypeScript properties of a `RosRecommendInstanceTypesProps`
 *
 * @returns the result of the validation.
 */
function RosRecommendInstanceTypesPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    if (properties.zoneMatchMode && (typeof properties.zoneMatchMode) !== 'object') {
        errors.collect(ros.propertyValidator('zoneMatchMode', ros.validateAllowedValues)({
            data: properties.zoneMatchMode,
            allowedValues: ["Strict", "Include"],
        }));
    }
    errors.collect(ros.propertyValidator('zoneMatchMode', ros.validateString)(properties.zoneMatchMode));
    if (properties.ioOptimized && (typeof properties.ioOptimized) !== 'object') {
        errors.collect(ros.propertyValidator('ioOptimized', ros.validateAllowedValues)({
            data: properties.ioOptimized,
            allowedValues: ["optimized", "none"],
        }));
    }
    errors.collect(ros.propertyValidator('ioOptimized', ros.validateString)(properties.ioOptimized));
    errors.collect(ros.propertyValidator('zoneId', ros.validateString)(properties.zoneId));
    if (properties.instanceChargeType && (typeof properties.instanceChargeType) !== 'object') {
        errors.collect(ros.propertyValidator('instanceChargeType', ros.validateAllowedValues)({
            data: properties.instanceChargeType,
            allowedValues: ["PrePaid", "PostPaid"],
        }));
    }
    errors.collect(ros.propertyValidator('instanceChargeType', ros.validateString)(properties.instanceChargeType));
    errors.collect(ros.propertyValidator('memory', ros.validateNumber)(properties.memory));
    if (properties.scene && (typeof properties.scene) !== 'object') {
        errors.collect(ros.propertyValidator('scene', ros.validateAllowedValues)({
            data: properties.scene,
            allowedValues: ["UPGRADE", "CREATE"],
        }));
    }
    errors.collect(ros.propertyValidator('scene', ros.validateString)(properties.scene));
    errors.collect(ros.propertyValidator('systemDiskCategory', ros.validateString)(properties.systemDiskCategory));
    errors.collect(ros.propertyValidator('cores', ros.validateNumber)(properties.cores));
    if (properties.priorityStrategy && (typeof properties.priorityStrategy) !== 'object') {
        errors.collect(ros.propertyValidator('priorityStrategy', ros.validateAllowedValues)({
            data: properties.priorityStrategy,
            allowedValues: ["InventoryFirst", "PriceFirst", "NewProductFirst"],
        }));
    }
    errors.collect(ros.propertyValidator('priorityStrategy', ros.validateString)(properties.priorityStrategy));
    if (properties.instanceFamilyLevel && (typeof properties.instanceFamilyLevel) !== 'object') {
        errors.collect(ros.propertyValidator('instanceFamilyLevel', ros.validateAllowedValues)({
            data: properties.instanceFamilyLevel,
            allowedValues: ["EntryLevel", "EnterpriseLevel", "CreditEntryLevel"],
        }));
    }
    errors.collect(ros.propertyValidator('instanceFamilyLevel', ros.validateString)(properties.instanceFamilyLevel));
    errors.collect(ros.propertyValidator('maxPrice', ros.validateNumber)(properties.maxPrice));
    errors.collect(ros.propertyValidator('instanceType', ros.validateString)(properties.instanceType));
    if (properties.instanceTypeFamilies && (Array.isArray(properties.instanceTypeFamilies) || (typeof properties.instanceTypeFamilies) === 'string')) {
        errors.collect(ros.propertyValidator('instanceTypeFamilies', ros.validateLength)({
            data: properties.instanceTypeFamilies.length,
            min: 1,
            max: 10,
        }));
    }
    errors.collect(ros.propertyValidator('instanceTypeFamilies', ros.listValidator(ros.validateString))(properties.instanceTypeFamilies));
    if (properties.spotStrategy && (typeof properties.spotStrategy) !== 'object') {
        errors.collect(ros.propertyValidator('spotStrategy', ros.validateAllowedValues)({
            data: properties.spotStrategy,
            allowedValues: ["NoSpot", "SpotWithPriceLimit", "SpotAsPriceGo"],
        }));
    }
    errors.collect(ros.propertyValidator('spotStrategy', ros.validateString)(properties.spotStrategy));
    return errors.wrap('supplied properties not correct for "RosRecommendInstanceTypesProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `DATASOURCE::ECS::RecommendInstanceTypes` resource
 *
 * @param properties - the TypeScript properties of a `RosRecommendInstanceTypesProps`
 *
 * @returns the AliCloud ROS Resource properties of an `DATASOURCE::ECS::RecommendInstanceTypes` resource.
 */
// @ts-ignore TS6133
function rosRecommendInstanceTypesPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosRecommendInstanceTypesPropsValidator(properties).assertSuccess();
    }
    return {
        Cores: ros.numberToRosTemplate(properties.cores),
        InstanceChargeType: ros.stringToRosTemplate(properties.instanceChargeType),
        InstanceFamilyLevel: ros.stringToRosTemplate(properties.instanceFamilyLevel),
        InstanceType: ros.stringToRosTemplate(properties.instanceType),
        InstanceTypeFamilies: ros.listMapper(ros.stringToRosTemplate)(properties.instanceTypeFamilies),
        IoOptimized: ros.stringToRosTemplate(properties.ioOptimized),
        MaxPrice: ros.numberToRosTemplate(properties.maxPrice),
        Memory: ros.numberToRosTemplate(properties.memory),
        PriorityStrategy: ros.stringToRosTemplate(properties.priorityStrategy),
        Scene: ros.stringToRosTemplate(properties.scene),
        SpotStrategy: ros.stringToRosTemplate(properties.spotStrategy),
        SystemDiskCategory: ros.stringToRosTemplate(properties.systemDiskCategory),
        ZoneId: ros.stringToRosTemplate(properties.zoneId),
        ZoneMatchMode: ros.stringToRosTemplate(properties.zoneMatchMode),
    };
}
/**
 * A ROS template type:  `DATASOURCE::ECS::RecommendInstanceTypes`
 */
class RosRecommendInstanceTypes extends ros.RosResource {
    /**
     * Create a new `DATASOURCE::ECS::RecommendInstanceTypes`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosRecommendInstanceTypes.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrInstanceTypeIds = this.getAtt('InstanceTypeIds');
        this.attrInstanceTypes = this.getAtt('InstanceTypes');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.cores = props.cores;
        this.instanceChargeType = props.instanceChargeType;
        this.instanceFamilyLevel = props.instanceFamilyLevel;
        this.instanceType = props.instanceType;
        this.instanceTypeFamilies = props.instanceTypeFamilies;
        this.ioOptimized = props.ioOptimized;
        this.maxPrice = props.maxPrice;
        this.memory = props.memory;
        this.priorityStrategy = props.priorityStrategy;
        this.scene = props.scene;
        this.spotStrategy = props.spotStrategy;
        this.systemDiskCategory = props.systemDiskCategory;
        this.zoneId = props.zoneId;
        this.zoneMatchMode = props.zoneMatchMode;
    }
    get rosProperties() {
        return {
            cores: this.cores,
            instanceChargeType: this.instanceChargeType,
            instanceFamilyLevel: this.instanceFamilyLevel,
            instanceType: this.instanceType,
            instanceTypeFamilies: this.instanceTypeFamilies,
            ioOptimized: this.ioOptimized,
            maxPrice: this.maxPrice,
            memory: this.memory,
            priorityStrategy: this.priorityStrategy,
            scene: this.scene,
            spotStrategy: this.spotStrategy,
            systemDiskCategory: this.systemDiskCategory,
            zoneId: this.zoneId,
            zoneMatchMode: this.zoneMatchMode,
        };
    }
    renderProperties(props) {
        return rosRecommendInstanceTypesPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosRecommendInstanceTypes = RosRecommendInstanceTypes;
/**
 * The resource type name for this resource class.
 */
RosRecommendInstanceTypes.ROS_RESOURCE_TYPE_NAME = "DATASOURCE::ECS::RecommendInstanceTypes";
/**
 * Determine whether the given properties match those of a `RosSecurityGroupsProps`
 *
 * @param properties - the TypeScript properties of a `RosSecurityGroupsProps`
 *
 * @returns the result of the validation.
 */
function RosSecurityGroupsPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('vpcId', ros.validateString)(properties.vpcId));
    errors.collect(ros.propertyValidator('securityGroupName', ros.validateString)(properties.securityGroupName));
    errors.collect(ros.propertyValidator('resourceGroupId', ros.validateString)(properties.resourceGroupId));
    errors.collect(ros.propertyValidator('networkType', ros.validateString)(properties.networkType));
    errors.collect(ros.propertyValidator('securityGroupId', ros.validateString)(properties.securityGroupId));
    errors.collect(ros.propertyValidator('securityGroupType', ros.validateString)(properties.securityGroupType));
    if (properties.securityGroupIds && (Array.isArray(properties.securityGroupIds) || (typeof properties.securityGroupIds) === 'string')) {
        errors.collect(ros.propertyValidator('securityGroupIds', ros.validateLength)({
            data: properties.securityGroupIds.length,
            min: undefined,
            max: 100,
        }));
    }
    errors.collect(ros.propertyValidator('securityGroupIds', ros.listValidator(ros.validateString))(properties.securityGroupIds));
    if (properties.tags && (Array.isArray(properties.tags) || (typeof properties.tags) === 'string')) {
        errors.collect(ros.propertyValidator('tags', ros.validateLength)({
            data: properties.tags.length,
            min: undefined,
            max: 20,
        }));
    }
    errors.collect(ros.propertyValidator('tags', ros.listValidator(RosSecurityGroups_TagsPropertyValidator))(properties.tags));
    return errors.wrap('supplied properties not correct for "RosSecurityGroupsProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `DATASOURCE::ECS::SecurityGroups` resource
 *
 * @param properties - the TypeScript properties of a `RosSecurityGroupsProps`
 *
 * @returns the AliCloud ROS Resource properties of an `DATASOURCE::ECS::SecurityGroups` resource.
 */
// @ts-ignore TS6133
function rosSecurityGroupsPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosSecurityGroupsPropsValidator(properties).assertSuccess();
    }
    return {
        NetworkType: ros.stringToRosTemplate(properties.networkType),
        ResourceGroupId: ros.stringToRosTemplate(properties.resourceGroupId),
        SecurityGroupId: ros.stringToRosTemplate(properties.securityGroupId),
        SecurityGroupIds: ros.listMapper(ros.stringToRosTemplate)(properties.securityGroupIds),
        SecurityGroupName: ros.stringToRosTemplate(properties.securityGroupName),
        SecurityGroupType: ros.stringToRosTemplate(properties.securityGroupType),
        Tags: ros.listMapper(rosSecurityGroupsTagsPropertyToRosTemplate)(properties.tags),
        VpcId: ros.stringToRosTemplate(properties.vpcId),
    };
}
/**
 * A ROS template type:  `DATASOURCE::ECS::SecurityGroups`
 */
class RosSecurityGroups extends ros.RosResource {
    /**
     * Create a new `DATASOURCE::ECS::SecurityGroups`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosSecurityGroups.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrSecurityGroupIds = this.getAtt('SecurityGroupIds');
        this.attrSecurityGroups = this.getAtt('SecurityGroups');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.networkType = props.networkType;
        this.resourceGroupId = props.resourceGroupId;
        this.securityGroupId = props.securityGroupId;
        this.securityGroupIds = props.securityGroupIds;
        this.securityGroupName = props.securityGroupName;
        this.securityGroupType = props.securityGroupType;
        this.tags = props.tags;
        this.vpcId = props.vpcId;
    }
    get rosProperties() {
        return {
            networkType: this.networkType,
            resourceGroupId: this.resourceGroupId,
            securityGroupId: this.securityGroupId,
            securityGroupIds: this.securityGroupIds,
            securityGroupName: this.securityGroupName,
            securityGroupType: this.securityGroupType,
            tags: this.tags,
            vpcId: this.vpcId,
        };
    }
    renderProperties(props) {
        return rosSecurityGroupsPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosSecurityGroups = RosSecurityGroups;
/**
 * The resource type name for this resource class.
 */
RosSecurityGroups.ROS_RESOURCE_TYPE_NAME = "DATASOURCE::ECS::SecurityGroups";
/**
 * Determine whether the given properties match those of a `TagsProperty`
 *
 * @param properties - the TypeScript properties of a `TagsProperty`
 *
 * @returns the result of the validation.
 */
function RosSecurityGroups_TagsPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('value', ros.validateString)(properties.value));
    errors.collect(ros.propertyValidator('key', ros.requiredValidator)(properties.key));
    errors.collect(ros.propertyValidator('key', ros.validateString)(properties.key));
    return errors.wrap('supplied properties not correct for "TagsProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `DATASOURCE::ECS::SecurityGroups.Tags` resource
 *
 * @param properties - the TypeScript properties of a `TagsProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `DATASOURCE::ECS::SecurityGroups.Tags` resource.
 */
// @ts-ignore TS6133
function rosSecurityGroupsTagsPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosSecurityGroups_TagsPropertyValidator(properties).assertSuccess();
    return {
        Value: ros.stringToRosTemplate(properties.value),
        Key: ros.stringToRosTemplate(properties.key),
    };
}
/**
 * Determine whether the given properties match those of a `RosSnapshotsProps`
 *
 * @param properties - the TypeScript properties of a `RosSnapshotsProps`
 *
 * @returns the result of the validation.
 */
function RosSnapshotsPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    if (properties.status && (typeof properties.status) !== 'object') {
        errors.collect(ros.propertyValidator('status', ros.validateAllowedValues)({
            data: properties.status,
            allowedValues: ["progressing", "accomplished", "failed", "all"],
        }));
    }
    errors.collect(ros.propertyValidator('status', ros.validateString)(properties.status));
    if (properties.usage && (typeof properties.usage) !== 'object') {
        errors.collect(ros.propertyValidator('usage', ros.validateAllowedValues)({
            data: properties.usage,
            allowedValues: ["image", "disk", "image_disk", "none"],
        }));
    }
    errors.collect(ros.propertyValidator('usage', ros.validateString)(properties.usage));
    if (properties.category && (typeof properties.category) !== 'object') {
        errors.collect(ros.propertyValidator('category', ros.validateAllowedValues)({
            data: properties.category,
            allowedValues: ["Standard", "Flash"],
        }));
    }
    errors.collect(ros.propertyValidator('category', ros.validateString)(properties.category));
    errors.collect(ros.propertyValidator('kmsKeyId', ros.validateString)(properties.kmsKeyId));
    errors.collect(ros.propertyValidator('resourceGroupId', ros.validateString)(properties.resourceGroupId));
    errors.collect(ros.propertyValidator('instanceId', ros.validateString)(properties.instanceId));
    errors.collect(ros.propertyValidator('encrypted', ros.validateBoolean)(properties.encrypted));
    errors.collect(ros.propertyValidator('snapshotLinkId', ros.validateString)(properties.snapshotLinkId));
    if (properties.snapshotIds && (Array.isArray(properties.snapshotIds) || (typeof properties.snapshotIds) === 'string')) {
        errors.collect(ros.propertyValidator('snapshotIds', ros.validateLength)({
            data: properties.snapshotIds.length,
            min: undefined,
            max: 100,
        }));
    }
    errors.collect(ros.propertyValidator('snapshotIds', ros.listValidator(ros.validateString))(properties.snapshotIds));
    errors.collect(ros.propertyValidator('snapshotName', ros.validateString)(properties.snapshotName));
    if (properties.filters && (Array.isArray(properties.filters) || (typeof properties.filters) === 'string')) {
        errors.collect(ros.propertyValidator('filters', ros.validateLength)({
            data: properties.filters.length,
            min: undefined,
            max: 2,
        }));
    }
    errors.collect(ros.propertyValidator('filters', ros.listValidator(RosSnapshots_FiltersPropertyValidator))(properties.filters));
    if (properties.snapshotType && (typeof properties.snapshotType) !== 'object') {
        errors.collect(ros.propertyValidator('snapshotType', ros.validateAllowedValues)({
            data: properties.snapshotType,
            allowedValues: ["auto", "user", "all"],
        }));
    }
    errors.collect(ros.propertyValidator('snapshotType', ros.validateString)(properties.snapshotType));
    if (properties.sourceDiskType && (typeof properties.sourceDiskType) !== 'object') {
        errors.collect(ros.propertyValidator('sourceDiskType', ros.validateAllowedValues)({
            data: properties.sourceDiskType,
            allowedValues: ["System", "Data"],
        }));
    }
    errors.collect(ros.propertyValidator('sourceDiskType', ros.validateString)(properties.sourceDiskType));
    if (properties.tags && (Array.isArray(properties.tags) || (typeof properties.tags) === 'string')) {
        errors.collect(ros.propertyValidator('tags', ros.validateLength)({
            data: properties.tags.length,
            min: undefined,
            max: 20,
        }));
    }
    errors.collect(ros.propertyValidator('tags', ros.listValidator(RosSnapshots_TagsPropertyValidator))(properties.tags));
    errors.collect(ros.propertyValidator('diskId', ros.validateString)(properties.diskId));
    return errors.wrap('supplied properties not correct for "RosSnapshotsProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `DATASOURCE::ECS::Snapshots` resource
 *
 * @param properties - the TypeScript properties of a `RosSnapshotsProps`
 *
 * @returns the AliCloud ROS Resource properties of an `DATASOURCE::ECS::Snapshots` resource.
 */
// @ts-ignore TS6133
function rosSnapshotsPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosSnapshotsPropsValidator(properties).assertSuccess();
    }
    return {
        Category: ros.stringToRosTemplate(properties.category),
        DiskId: ros.stringToRosTemplate(properties.diskId),
        Encrypted: ros.booleanToRosTemplate(properties.encrypted),
        Filters: ros.listMapper(rosSnapshotsFiltersPropertyToRosTemplate)(properties.filters),
        InstanceId: ros.stringToRosTemplate(properties.instanceId),
        KMSKeyId: ros.stringToRosTemplate(properties.kmsKeyId),
        ResourceGroupId: ros.stringToRosTemplate(properties.resourceGroupId),
        SnapshotIds: ros.listMapper(ros.stringToRosTemplate)(properties.snapshotIds),
        SnapshotLinkId: ros.stringToRosTemplate(properties.snapshotLinkId),
        SnapshotName: ros.stringToRosTemplate(properties.snapshotName),
        SnapshotType: ros.stringToRosTemplate(properties.snapshotType),
        SourceDiskType: ros.stringToRosTemplate(properties.sourceDiskType),
        Status: ros.stringToRosTemplate(properties.status),
        Tags: ros.listMapper(rosSnapshotsTagsPropertyToRosTemplate)(properties.tags),
        Usage: ros.stringToRosTemplate(properties.usage),
    };
}
/**
 * A ROS template type:  `DATASOURCE::ECS::Snapshots`
 */
class RosSnapshots extends ros.RosResource {
    /**
     * Create a new `DATASOURCE::ECS::Snapshots`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosSnapshots.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrSnapshotIds = this.getAtt('SnapshotIds');
        this.attrSnapshots = this.getAtt('Snapshots');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.category = props.category;
        this.diskId = props.diskId;
        this.encrypted = props.encrypted;
        this.filters = props.filters;
        this.instanceId = props.instanceId;
        this.kmsKeyId = props.kmsKeyId;
        this.resourceGroupId = props.resourceGroupId;
        this.snapshotIds = props.snapshotIds;
        this.snapshotLinkId = props.snapshotLinkId;
        this.snapshotName = props.snapshotName;
        this.snapshotType = props.snapshotType;
        this.sourceDiskType = props.sourceDiskType;
        this.status = props.status;
        this.tags = props.tags;
        this.usage = props.usage;
    }
    get rosProperties() {
        return {
            category: this.category,
            diskId: this.diskId,
            encrypted: this.encrypted,
            filters: this.filters,
            instanceId: this.instanceId,
            kmsKeyId: this.kmsKeyId,
            resourceGroupId: this.resourceGroupId,
            snapshotIds: this.snapshotIds,
            snapshotLinkId: this.snapshotLinkId,
            snapshotName: this.snapshotName,
            snapshotType: this.snapshotType,
            sourceDiskType: this.sourceDiskType,
            status: this.status,
            tags: this.tags,
            usage: this.usage,
        };
    }
    renderProperties(props) {
        return rosSnapshotsPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosSnapshots = RosSnapshots;
/**
 * The resource type name for this resource class.
 */
RosSnapshots.ROS_RESOURCE_TYPE_NAME = "DATASOURCE::ECS::Snapshots";
/**
 * Determine whether the given properties match those of a `FiltersProperty`
 *
 * @param properties - the TypeScript properties of a `FiltersProperty`
 *
 * @returns the result of the validation.
 */
function RosSnapshots_FiltersPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('value', ros.validateString)(properties.value));
    errors.collect(ros.propertyValidator('key', ros.requiredValidator)(properties.key));
    errors.collect(ros.propertyValidator('key', ros.validateString)(properties.key));
    return errors.wrap('supplied properties not correct for "FiltersProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `DATASOURCE::ECS::Snapshots.Filters` resource
 *
 * @param properties - the TypeScript properties of a `FiltersProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `DATASOURCE::ECS::Snapshots.Filters` resource.
 */
// @ts-ignore TS6133
function rosSnapshotsFiltersPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosSnapshots_FiltersPropertyValidator(properties).assertSuccess();
    return {
        Value: ros.stringToRosTemplate(properties.value),
        Key: ros.stringToRosTemplate(properties.key),
    };
}
/**
 * Determine whether the given properties match those of a `TagsProperty`
 *
 * @param properties - the TypeScript properties of a `TagsProperty`
 *
 * @returns the result of the validation.
 */
function RosSnapshots_TagsPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('value', ros.validateString)(properties.value));
    errors.collect(ros.propertyValidator('key', ros.requiredValidator)(properties.key));
    errors.collect(ros.propertyValidator('key', ros.validateString)(properties.key));
    return errors.wrap('supplied properties not correct for "TagsProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `DATASOURCE::ECS::Snapshots.Tags` resource
 *
 * @param properties - the TypeScript properties of a `TagsProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `DATASOURCE::ECS::Snapshots.Tags` resource.
 */
// @ts-ignore TS6133
function rosSnapshotsTagsPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosSnapshots_TagsPropertyValidator(properties).assertSuccess();
    return {
        Value: ros.stringToRosTemplate(properties.value),
        Key: ros.stringToRosTemplate(properties.key),
    };
}
/**
 * Determine whether the given properties match those of a `RosZonesProps`
 *
 * @param properties - the TypeScript properties of a `RosZonesProps`
 *
 * @returns the result of the validation.
 */
function RosZonesPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('ioOptimized', ros.validateString)(properties.ioOptimized));
    errors.collect(ros.propertyValidator('instanceChargeType', ros.validateString)(properties.instanceChargeType));
    errors.collect(ros.propertyValidator('resourceType', ros.validateString)(properties.resourceType));
    errors.collect(ros.propertyValidator('dataDiskCategory', ros.validateString)(properties.dataDiskCategory));
    errors.collect(ros.propertyValidator('instanceType', ros.validateString)(properties.instanceType));
    errors.collect(ros.propertyValidator('systemDiskCategory', ros.validateString)(properties.systemDiskCategory));
    return errors.wrap('supplied properties not correct for "RosZonesProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `DATASOURCE::ECS::Zones` resource
 *
 * @param properties - the TypeScript properties of a `RosZonesProps`
 *
 * @returns the AliCloud ROS Resource properties of an `DATASOURCE::ECS::Zones` resource.
 */
// @ts-ignore TS6133
function rosZonesPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosZonesPropsValidator(properties).assertSuccess();
    }
    return {
        DataDiskCategory: ros.stringToRosTemplate(properties.dataDiskCategory),
        InstanceChargeType: ros.stringToRosTemplate(properties.instanceChargeType),
        InstanceType: ros.stringToRosTemplate(properties.instanceType),
        IoOptimized: ros.stringToRosTemplate(properties.ioOptimized),
        ResourceType: ros.stringToRosTemplate(properties.resourceType),
        SystemDiskCategory: ros.stringToRosTemplate(properties.systemDiskCategory),
    };
}
/**
 * A ROS template type:  `DATASOURCE::ECS::Zones`
 */
class RosZones extends ros.RosResource {
    /**
     * Create a new `DATASOURCE::ECS::Zones`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosZones.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrZoneIds = this.getAtt('ZoneIds');
        this.attrZones = this.getAtt('Zones');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.dataDiskCategory = props.dataDiskCategory;
        this.instanceChargeType = props.instanceChargeType;
        this.instanceType = props.instanceType;
        this.ioOptimized = props.ioOptimized;
        this.resourceType = props.resourceType;
        this.systemDiskCategory = props.systemDiskCategory;
    }
    get rosProperties() {
        return {
            dataDiskCategory: this.dataDiskCategory,
            instanceChargeType: this.instanceChargeType,
            instanceType: this.instanceType,
            ioOptimized: this.ioOptimized,
            resourceType: this.resourceType,
            systemDiskCategory: this.systemDiskCategory,
        };
    }
    renderProperties(props) {
        return rosZonesPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosZones = RosZones;
/**
 * The resource type name for this resource class.
 */
RosZones.ROS_RESOURCE_TYPE_NAME = "DATASOURCE::ECS::Zones";
//# sourceMappingURL=data:application/json;base64,