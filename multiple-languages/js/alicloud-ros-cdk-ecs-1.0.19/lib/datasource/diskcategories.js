"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DiskCategories = exports.DiskCategoriesProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ecs_generated_1 = require("./ecs.generated");
Object.defineProperty(exports, "DiskCategoriesProperty", { enumerable: true, get: function () { return ecs_generated_1.RosDiskCategories; } });
/**
 * A ROS resource type:  `DATASOURCE::ECS::DiskCategories`
 */
class DiskCategories extends ros.Resource {
    /**
     * Create a new `DATASOURCE::ECS::DiskCategories`.
     *
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosDiskCategories = new ecs_generated_1.RosDiskCategories(this, id, {
            type: props.type,
            zoneId: props.zoneId,
            dataDiskCategory: props.dataDiskCategory,
            instanceType: props.instanceType,
            systemDiskCategory: props.systemDiskCategory,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosDiskCategories;
        this.attrDiskCategories = rosDiskCategories.attrDiskCategories;
        this.attrDiskCategoryIds = rosDiskCategories.attrDiskCategoryIds;
    }
}
exports.DiskCategories = DiskCategories;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlza2NhdGVnb3JpZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJkaXNrY2F0ZWdvcmllcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw4Q0FBOEM7QUFDOUMsbURBQW9EO0FBRXRCLHVHQUZyQixpQ0FBaUIsT0FFMEI7QUFpRHBEOztHQUVHO0FBQ0gsTUFBYSxjQUFlLFNBQVEsR0FBRyxDQUFDLFFBQVE7SUFpQjVDOzs7Ozs7T0FNRztJQUNILFlBQVksS0FBb0IsRUFBRSxFQUFVLEVBQUUsS0FBMEIsRUFBRSxtQ0FBMkMsSUFBSTtRQUNySCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRWpCLE1BQU0saUJBQWlCLEdBQUcsSUFBSSxpQ0FBaUIsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFHO1lBQ3ZELElBQUksRUFBRSxLQUFLLENBQUMsSUFBSTtZQUNoQixNQUFNLEVBQUUsS0FBSyxDQUFDLE1BQU07WUFDcEIsZ0JBQWdCLEVBQUUsS0FBSyxDQUFDLGdCQUFnQjtZQUN4QyxZQUFZLEVBQUUsS0FBSyxDQUFDLFlBQVk7WUFDaEMsa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGtCQUFrQjtTQUMvQyxFQUFFLGdDQUFnQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztRQUNwRixJQUFJLENBQUMsUUFBUSxHQUFHLGlCQUFpQixDQUFDO1FBQ2xDLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxpQkFBaUIsQ0FBQyxrQkFBa0IsQ0FBQztRQUMvRCxJQUFJLENBQUMsbUJBQW1CLEdBQUcsaUJBQWlCLENBQUMsbUJBQW1CLENBQUM7SUFDckUsQ0FBQztDQUNKO0FBdENELHdDQXNDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHJvcyBmcm9tICdAYWxpY2xvdWQvcm9zLWNkay1jb3JlJztcbmltcG9ydCB7IFJvc0Rpc2tDYXRlZ29yaWVzIH0gZnJvbSAnLi9lY3MuZ2VuZXJhdGVkJztcbi8vIEdlbmVyYXRlZCBmcm9tIHRoZSBBbGlDbG91ZCBST1MgUmVzb3VyY2UgU3BlY2lmaWNhdGlvblxuZXhwb3J0IHsgUm9zRGlza0NhdGVnb3JpZXMgYXMgRGlza0NhdGVnb3JpZXNQcm9wZXJ0eSB9O1xuXG4vKipcbiAqIFByb3BlcnRpZXMgZm9yIGRlZmluaW5nIGEgYERBVEFTT1VSQ0U6OkVDUzo6RGlza0NhdGVnb3JpZXNgXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRGlza0NhdGVnb3JpZXNQcm9wcyB7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSB0eXBlOiBUaGUgcmVzb3VyY2UgdHlwZSB0byBxdWVyeS5cbiAgICAgKiBJZiB5b3Ugc2V0IFR5cGUgdG8gZGF0YSx5b3UgY2FuIHNwZWNpZnkgdGhlIEluc3RhbmNlVHlwZSBwYXJhbWV0ZXIgdG8gZGlzay5cbiAgICAgKiBJZiB5b3Ugc2V0IFR5cGUgdG8gc3lzdGVtLCB5b3UgbXVzdCBzcGVjaWZ5IHRoZSBJbnN0YW5jZVR5cGUgcGFyYW1ldGVyLlxuICAgICAqIFZhbGlkIHZhbHVlczpcbiAgICAgKiBzeXN0ZW06IHN5c3RlbSBkaXNrXG4gICAgICogZGF0YTogZGF0YSBkaXNrXG4gICAgICovXG4gICAgcmVhZG9ubHkgdHlwZTogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgem9uZUlkOiBUaGUgSUQgb2YgdGhlIHpvbmUgZm9yIHdoaWNoIHRvIHF1ZXJ5IHJlc291cmNlcy5cbiAgICAgKi9cbiAgICByZWFkb25seSB6b25lSWQ6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGRhdGFEaXNrQ2F0ZWdvcnk6IFRoZSBjYXRlZ29yeSBvZiB0aGUgZGF0YSBkaXNrLiBWYWxpZCB2YWx1ZXM6IFxuICAgICAqIGNsb3VkOiBiYXNpYyBkaXNrXG4gICAgICogY2xvdWRfZWZmaWNpZW5jeTogdWx0cmEgZGlza1xuICAgICAqIGNsb3VkX3NzZDogc3RhbmRhcmQgU1NEXG4gICAgICogZXBoZW1lcmFsX3NzZDogbG9jYWwgU1NEXG4gICAgICogY2xvdWRfZXNzZDogRVNTRFxuICAgICAqL1xuICAgIHJlYWRvbmx5IGRhdGFEaXNrQ2F0ZWdvcnk/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBpbnN0YW5jZVR5cGU6IFRoZSBpbnN0YW5jZSB0eXBlLiBGb3IgbW9yZSBpbmZvcm1hdGlvbixzZWUgSW5zdGFuY2UgZmFtaWxpZXMgb3IgY2FsbCB0aGUgRGVzY3JpYmVJbnN0YW5jZVR5cGVzLG9wZXJhdGlvbiB0byBxdWVyeSB0aGUgbW9zdCByZWNlbnQgaW5zdGFuY2UgdHlwZSBsaXN0LlxuICAgICAqIFdoZW4gdGhlIFR5cGUgcGFyYW1ldGVyIGlzIHNldCB0byBzeXN0ZW0gb3IgZGF0YSx5b3UgbXVzdCBzZXQgdGhlIEluc3RhbmNlVHlwZSBwYXJhbWV0ZXIuXG4gICAgICovXG4gICAgcmVhZG9ubHkgaW5zdGFuY2VUeXBlPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgc3lzdGVtRGlza0NhdGVnb3J5OiBUaGUgY2F0ZWdvcnkgb2YgdGhlIHN5c3RlbSBkaXNrLiBWYWxpZCB2YWx1ZXM6IFxuICAgICAqIGNsb3VkOiBiYXNpYyBkaXNrXG4gICAgICogY2xvdWRfZWZmaWNpZW5jeTogdWx0cmEgZGlza1xuICAgICAqIGNsb3VkX3NzZDogc3RhbmRhcmQgU1NEXG4gICAgICogZXBoZW1lcmFsX3NzZDogbG9jYWwgU1NEXG4gICAgICogY2xvdWRfZXNzZDogRVNTRFxuICAgICAqL1xuICAgIHJlYWRvbmx5IHN5c3RlbURpc2tDYXRlZ29yeT86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcbn1cblxuLyoqXG4gKiBBIFJPUyByZXNvdXJjZSB0eXBlOiAgYERBVEFTT1VSQ0U6OkVDUzo6RGlza0NhdGVnb3JpZXNgXG4gKi9cbmV4cG9ydCBjbGFzcyBEaXNrQ2F0ZWdvcmllcyBleHRlbmRzIHJvcy5SZXNvdXJjZSB7XG5cbiAgICAvKipcbiAgICAgKiBBIGZhY3RvcnkgbWV0aG9kIHRoYXQgY3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzIGZyb20gYW4gb2JqZWN0XG4gICAgICogY29udGFpbmluZyB0aGUgcHJvcGVydGllcyBvZiB0aGlzIFJPUyByZXNvdXJjZSwgd2hpY2ggd2lsbCBiZSBhc3NpZ25lZCB0byBST1MgcmVzb3VyY2UuXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgRGlza0NhdGVnb3JpZXM6IFRoZSBsaXN0IG9mIGRpc2sgY2F0ZWdvcmllcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckRpc2tDYXRlZ29yaWVzOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgRGlza0NhdGVnb3J5SWRzOiBUaGUgbGlzdCBvZiBkaXNrIGNhdGVnb3J5IElEcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckRpc2tDYXRlZ29yeUlkczogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IGBEQVRBU09VUkNFOjpFQ1M6OkRpc2tDYXRlZ29yaWVzYC5cbiAgICAgKlxuICAgICAqIFBhcmFtIHNjb3BlIC0gc2NvcGUgaW4gd2hpY2ggdGhpcyByZXNvdXJjZSBpcyBkZWZpbmVkXG4gICAgICogUGFyYW0gaWQgICAgLSBzY29wZWQgaWQgb2YgdGhlIHJlc291cmNlXG4gICAgICogUGFyYW0gcHJvcHMgLSByZXNvdXJjZSBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IHJvcy5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBEaXNrQ2F0ZWdvcmllc1Byb3BzLCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDpib29sZWFuID0gdHJ1ZSkge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQpO1xuXG4gICAgICAgIGNvbnN0IHJvc0Rpc2tDYXRlZ29yaWVzID0gbmV3IFJvc0Rpc2tDYXRlZ29yaWVzKHRoaXMsIGlkLCAge1xuICAgICAgICAgICAgdHlwZTogcHJvcHMudHlwZSxcbiAgICAgICAgICAgIHpvbmVJZDogcHJvcHMuem9uZUlkLFxuICAgICAgICAgICAgZGF0YURpc2tDYXRlZ29yeTogcHJvcHMuZGF0YURpc2tDYXRlZ29yeSxcbiAgICAgICAgICAgIGluc3RhbmNlVHlwZTogcHJvcHMuaW5zdGFuY2VUeXBlLFxuICAgICAgICAgICAgc3lzdGVtRGlza0NhdGVnb3J5OiBwcm9wcy5zeXN0ZW1EaXNrQ2F0ZWdvcnksXG4gICAgICAgIH0sIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ICYmIHRoaXMuc3RhY2suZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQpO1xuICAgICAgICB0aGlzLnJlc291cmNlID0gcm9zRGlza0NhdGVnb3JpZXM7XG4gICAgICAgIHRoaXMuYXR0ckRpc2tDYXRlZ29yaWVzID0gcm9zRGlza0NhdGVnb3JpZXMuYXR0ckRpc2tDYXRlZ29yaWVzO1xuICAgICAgICB0aGlzLmF0dHJEaXNrQ2F0ZWdvcnlJZHMgPSByb3NEaXNrQ2F0ZWdvcmllcy5hdHRyRGlza0NhdGVnb3J5SWRzO1xuICAgIH1cbn1cbiJdfQ==