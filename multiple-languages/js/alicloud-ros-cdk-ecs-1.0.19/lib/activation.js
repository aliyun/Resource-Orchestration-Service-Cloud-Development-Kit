"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Activation = exports.ActivationProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ecs_generated_1 = require("./ecs.generated");
Object.defineProperty(exports, "ActivationProperty", { enumerable: true, get: function () { return ecs_generated_1.RosActivation; } });
/**
 * A ROS resource type:  `ALIYUN::ECS::Activation`
 */
class Activation extends ros.Resource {
    /**
     * Create a new `ALIYUN::ECS::Activation`.
     *
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props = {}, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosActivation = new ecs_generated_1.RosActivation(this, id, {
            instanceName: props.instanceName,
            instanceCount: props.instanceCount,
            description: props.description,
            timeToLiveInHours: props.timeToLiveInHours,
            ipAddressRange: props.ipAddressRange,
            tags: props.tags,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosActivation;
        this.attrActivationCode = rosActivation.attrActivationCode;
        this.attrActivationId = rosActivation.attrActivationId;
        this.attrDeregisteredCount = rosActivation.attrDeregisteredCount;
        this.attrRegisteredCount = rosActivation.attrRegisteredCount;
    }
}
exports.Activation = Activation;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWN0aXZhdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImFjdGl2YXRpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsOENBQThDO0FBQzlDLG1EQUFnRDtBQUV0QixtR0FGakIsNkJBQWEsT0FFc0I7QUFzQzVDOztHQUVHO0FBQ0gsTUFBYSxVQUFXLFNBQVEsR0FBRyxDQUFDLFFBQVE7SUEyQnhDOzs7Ozs7T0FNRztJQUNILFlBQVksS0FBb0IsRUFBRSxFQUFVLEVBQUUsUUFBeUIsRUFBRSxFQUFFLG1DQUEyQyxJQUFJO1FBQ3RILEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFakIsTUFBTSxhQUFhLEdBQUcsSUFBSSw2QkFBYSxDQUFDLElBQUksRUFBRSxFQUFFLEVBQUc7WUFDL0MsWUFBWSxFQUFFLEtBQUssQ0FBQyxZQUFZO1lBQ2hDLGFBQWEsRUFBRSxLQUFLLENBQUMsYUFBYTtZQUNsQyxXQUFXLEVBQUUsS0FBSyxDQUFDLFdBQVc7WUFDOUIsaUJBQWlCLEVBQUUsS0FBSyxDQUFDLGlCQUFpQjtZQUMxQyxjQUFjLEVBQUUsS0FBSyxDQUFDLGNBQWM7WUFDcEMsSUFBSSxFQUFFLEtBQUssQ0FBQyxJQUFJO1NBQ25CLEVBQUUsZ0NBQWdDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO1FBQ3BGLElBQUksQ0FBQyxRQUFRLEdBQUcsYUFBYSxDQUFDO1FBQzlCLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxhQUFhLENBQUMsa0JBQWtCLENBQUM7UUFDM0QsSUFBSSxDQUFDLGdCQUFnQixHQUFHLGFBQWEsQ0FBQyxnQkFBZ0IsQ0FBQztRQUN2RCxJQUFJLENBQUMscUJBQXFCLEdBQUcsYUFBYSxDQUFDLHFCQUFxQixDQUFDO1FBQ2pFLElBQUksQ0FBQyxtQkFBbUIsR0FBRyxhQUFhLENBQUMsbUJBQW1CLENBQUM7SUFDakUsQ0FBQztDQUNKO0FBbkRELGdDQW1EQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHJvcyBmcm9tICdAYWxpY2xvdWQvcm9zLWNkay1jb3JlJztcbmltcG9ydCB7IFJvc0FjdGl2YXRpb24gfSBmcm9tICcuL2Vjcy5nZW5lcmF0ZWQnO1xuLy8gR2VuZXJhdGVkIGZyb20gdGhlIEFsaUNsb3VkIFJPUyBSZXNvdXJjZSBTcGVjaWZpY2F0aW9uXG5leHBvcnQgeyBSb3NBY3RpdmF0aW9uIGFzIEFjdGl2YXRpb25Qcm9wZXJ0eSB9O1xuXG4vKipcbiAqIFByb3BlcnRpZXMgZm9yIGRlZmluaW5nIGEgYEFMSVlVTjo6RUNTOjpBY3RpdmF0aW9uYFxuICovXG5leHBvcnQgaW50ZXJmYWNlIEFjdGl2YXRpb25Qcm9wcyB7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBkZXNjcmlwdGlvbjogVGhlIGRlc2NyaXB0aW9uIG9mIHRoZSBhY3RpdmF0aW9uIGNvZGUuIEl0IG11c3QgYmUgMSB0byAxMDAgY2hhcmFjdGVycyBpbiBsZW5ndGguXG4gICAgICovXG4gICAgcmVhZG9ubHkgZGVzY3JpcHRpb24/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBpbnN0YW5jZUNvdW50OiBUaGUgbWF4aW11bSBudW1iZXIgb2YgdGltZXMgdGhhdCB5b3UgY2FuIHVzZSB0aGUgYWN0aXZhdGlvbiBjb2RlIHRvIHJlZ2lzdGVyIG1hbmFnZWQgaW5zdGFuY2VzLiBWYWxpZCB2YWx1ZXM6IDEgdG8gMTAwMC5EZWZhdWx0IHZhbHVlOiAxMC5cbiAgICAgKi9cbiAgICByZWFkb25seSBpbnN0YW5jZUNvdW50PzogbnVtYmVyIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgaW5zdGFuY2VOYW1lOiBUaGUgZGVmYXVsdCBpbnN0YW5jZSBuYW1lIHByZWZpeC4gVGhlIGluc3RhbmNlIG5hbWUgcHJlZml4IG11c3QgYmUgMiB0byA1MCBjaGFyYWN0ZXJzIGluIGxlbmd0aC4gSXQgbXVzdCBzdGFydCB3aXRoIGEgbGV0dGVyIGFuZCBjYW5ub3Qgc3RhcnQgd2l0aCBodHRwOi8vIG9yIGh0dHBzOi8vLiBJdCBjYW4gY29udGFpbiBsZXR0ZXJzLCBkaWdpdHMsIHBlcmlvZHMgKC4pLCB1bmRlcnNjb3JlcyAoXyksIGh5cGhlbnMgKC0pLCBhbmQgY29sb25zICg6KS4gSWYgeW91IHVzZSB0aGUgYWN0aXZhdGlvbiBjb2RlIHRoYXQgaXMgY3JlYXRlZCBieSBjYWxsaW5nIHRoaXMgb3BlcmF0aW9uIChDcmVhdGVBY3RpdmF0aW9uKSB0byByZWdpc3RlciBtYW5hZ2VkIGluc3RhbmNlcywgdGhlIGluc3RhbmNlcyBhcmUgYXNzaWduZWQgc2VxdWVudGlhbCBuYW1lcyB0aGF0IGFyZSBwcmVmaXhlZCBieSB0aGUgdmFsdWUgb2YgdGhpcyBwYXJhbWV0ZXIuIFlvdSBjYW4gYWxzbyBzcGVjaWZ5IGEgbmV3IGluc3RhbmNlIG5hbWUgdG8gcmVwbGFjZSB0aGUgYXNzaWduZWQgc2VxdWVudGlhbCBuYW1lIHdoZW4geW91IHJlZ2lzdGVyIGEgbWFuYWdlZCBpbnN0YW5jZS5JZiB5b3Ugc3BlY2lmeSBJbnN0YW5jZU5hbWUgd2hlbiB5b3UgcmVnaXN0ZXIgYSBtYW5hZ2VkIGluc3RhbmNlLCBhbiBpbnN0YW5jZSBuYW1lIGluIHRoZWZvcm1hdCBvZiA8SW5zdGFuY2VOYW1lPi08TnVtYmVyPiBpcyBnZW5lcmF0ZWQuIFRoZSBudW1iZXIgb2YgZGlnaXRzIGluIHRoZSA8TnVtYmVyPiB2YWx1ZSBpc2RldGVybWluZWQgYnkgdGhhdCBpbiB0aGUgSW5zdGFuY2VDb3VudCB2YWx1ZS4gRXhhbXBsZTogMDAxLiBJZiB5b3UgZG8gbm90IHNwZWNpZnkgSW5zdGFuY2VOYW1lLCB0aGUgaG9zdG5hbWUgKEhvc3RuYW1lKSBpcyB1c2VkIGFzIHRoZSBpbnN0YW5jZSBuYW1lLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGluc3RhbmNlTmFtZT86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGlwQWRkcmVzc1JhbmdlOiBUaGUgSVAgYWRkcmVzc2VzIG9mIGhvc3RzIHRoYXQgYXJlIGFsbG93ZWQgdG8gdXNlIHRoZSBhY3RpdmF0aW9uIGNvZGUuIFRoZSB2YWx1ZSBjYW4gYmUgSVB2NCBhZGRyZXNzZXMsIElQdjYgYWRkcmVzc2VzLCBvciBDSURSIGJsb2Nrcy5cbiAgICAgKi9cbiAgICByZWFkb25seSBpcEFkZHJlc3NSYW5nZT86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHRhZ3M6IFRhZ3MgdG8gYXR0YWNoIHRvIGluc3RhbmNlLiBNYXggc3VwcG9ydCAyMCB0YWdzIHRvIGFkZCBkdXJpbmcgY3JlYXRlIGluc3RhbmNlLiBFYWNoIHRhZyB3aXRoIHR3byBwcm9wZXJ0aWVzIEtleSBhbmQgVmFsdWUsIGFuZCBLZXkgaXMgcmVxdWlyZWQuXG4gICAgICovXG4gICAgcmVhZG9ubHkgdGFncz86IFJvc0FjdGl2YXRpb24uVGFnc1Byb3BlcnR5W107XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSB0aW1lVG9MaXZlSW5Ib3VyczogVGhlIHZhbGlkaXR5IHBlcmlvZCBvZiB0aGUgYWN0aXZhdGlvbiBjb2RlLiBUaGUgYWN0aXZhdGlvbiBjb2RlIGNhbiBubyBsb25nZXIgYmUgdXNlZCB0byByZWdpc3RlciBpbnN0YW5jZXMgYWZ0ZXIgdGhlIHBlcmlvZCBlbmRzLiBVbml0OiBob3Vycy4gVmFsaWQgdmFsdWVzOiAxIHRvIDg3NjU3Niwgd2hpY2ggcmVwcmVzZW50cyBhIHJhbmdlIG9mIHRpbWUgZnJvbSAxIGhvdXIgdG8gMTAwIHllYXJzLkRlZmF1bHQgdmFsdWU6IDQuXG4gICAgICovXG4gICAgcmVhZG9ubHkgdGltZVRvTGl2ZUluSG91cnM/OiBudW1iZXIgfCByb3MuSVJlc29sdmFibGU7XG59XG5cbi8qKlxuICogQSBST1MgcmVzb3VyY2UgdHlwZTogIGBBTElZVU46OkVDUzo6QWN0aXZhdGlvbmBcbiAqL1xuZXhwb3J0IGNsYXNzIEFjdGl2YXRpb24gZXh0ZW5kcyByb3MuUmVzb3VyY2Uge1xuXG4gICAgLyoqXG4gICAgICogQSBmYWN0b3J5IG1ldGhvZCB0aGF0IGNyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgdGhpcyBjbGFzcyBmcm9tIGFuIG9iamVjdFxuICAgICAqIGNvbnRhaW5pbmcgdGhlIHByb3BlcnRpZXMgb2YgdGhpcyBST1MgcmVzb3VyY2UsIHdoaWNoIHdpbGwgYmUgYXNzaWduZWQgdG8gUk9TIHJlc291cmNlLlxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIEFjdGl2YXRpb25Db2RlOiBBY3RpdmF0aW9uIGNvZGUuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJBY3RpdmF0aW9uQ29kZTogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIEFjdGl2YXRpb25JZDogQWN0aXZhdGlvbiBjb2RlIElELlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyQWN0aXZhdGlvbklkOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgRGVyZWdpc3RlcmVkQ291bnQ6IFRoZSBudW1iZXIgb2YgaW5zdGFuY2VzIHRoYXQgaGF2ZSBiZWVuIGxvZ2dlZCBvdXQuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJEZXJlZ2lzdGVyZWRDb3VudDogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIFJlZ2lzdGVyZWRDb3VudDogVGhlIG51bWJlciBvZiByZWdpc3RlcmVkIGluc3RhbmNlcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0clJlZ2lzdGVyZWRDb3VudDogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IGBBTElZVU46OkVDUzo6QWN0aXZhdGlvbmAuXG4gICAgICpcbiAgICAgKiBQYXJhbSBzY29wZSAtIHNjb3BlIGluIHdoaWNoIHRoaXMgcmVzb3VyY2UgaXMgZGVmaW5lZFxuICAgICAqIFBhcmFtIGlkICAgIC0gc2NvcGVkIGlkIG9mIHRoZSByZXNvdXJjZVxuICAgICAqIFBhcmFtIHByb3BzIC0gcmVzb3VyY2UgcHJvcGVydGllc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiByb3MuQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogQWN0aXZhdGlvblByb3BzID0ge30sIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OmJvb2xlYW4gPSB0cnVlKSB7XG4gICAgICAgIHN1cGVyKHNjb3BlLCBpZCk7XG5cbiAgICAgICAgY29uc3Qgcm9zQWN0aXZhdGlvbiA9IG5ldyBSb3NBY3RpdmF0aW9uKHRoaXMsIGlkLCAge1xuICAgICAgICAgICAgaW5zdGFuY2VOYW1lOiBwcm9wcy5pbnN0YW5jZU5hbWUsXG4gICAgICAgICAgICBpbnN0YW5jZUNvdW50OiBwcm9wcy5pbnN0YW5jZUNvdW50LFxuICAgICAgICAgICAgZGVzY3JpcHRpb246IHByb3BzLmRlc2NyaXB0aW9uLFxuICAgICAgICAgICAgdGltZVRvTGl2ZUluSG91cnM6IHByb3BzLnRpbWVUb0xpdmVJbkhvdXJzLFxuICAgICAgICAgICAgaXBBZGRyZXNzUmFuZ2U6IHByb3BzLmlwQWRkcmVzc1JhbmdlLFxuICAgICAgICAgICAgdGFnczogcHJvcHMudGFncyxcbiAgICAgICAgfSwgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgJiYgdGhpcy5zdGFjay5lbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCk7XG4gICAgICAgIHRoaXMucmVzb3VyY2UgPSByb3NBY3RpdmF0aW9uO1xuICAgICAgICB0aGlzLmF0dHJBY3RpdmF0aW9uQ29kZSA9IHJvc0FjdGl2YXRpb24uYXR0ckFjdGl2YXRpb25Db2RlO1xuICAgICAgICB0aGlzLmF0dHJBY3RpdmF0aW9uSWQgPSByb3NBY3RpdmF0aW9uLmF0dHJBY3RpdmF0aW9uSWQ7XG4gICAgICAgIHRoaXMuYXR0ckRlcmVnaXN0ZXJlZENvdW50ID0gcm9zQWN0aXZhdGlvbi5hdHRyRGVyZWdpc3RlcmVkQ291bnQ7XG4gICAgICAgIHRoaXMuYXR0clJlZ2lzdGVyZWRDb3VudCA9IHJvc0FjdGl2YXRpb24uYXR0clJlZ2lzdGVyZWRDb3VudDtcbiAgICB9XG59XG4iXX0=