"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Snapshot = exports.SnapshotProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ecs_generated_1 = require("./ecs.generated");
Object.defineProperty(exports, "SnapshotProperty", { enumerable: true, get: function () { return ecs_generated_1.RosSnapshot; } });
/**
 * A ROS resource type:  `ALIYUN::ECS::Snapshot`
 */
class Snapshot extends ros.Resource {
    /**
     * Create a new `ALIYUN::ECS::Snapshot`.
     *
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosSnapshot = new ecs_generated_1.RosSnapshot(this, id, {
            instantAccess: props.instantAccess,
            description: props.description,
            resourceGroupId: props.resourceGroupId,
            timeout: props.timeout === undefined || props.timeout === null ? 200 : props.timeout,
            retentionDays: props.retentionDays,
            snapshotName: props.snapshotName,
            instantAccessRetentionDays: props.instantAccessRetentionDays,
            tags: props.tags,
            diskId: props.diskId,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosSnapshot;
        this.attrSnapshotId = rosSnapshot.attrSnapshotId;
    }
}
exports.Snapshot = Snapshot;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic25hcHNob3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJzbmFwc2hvdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw4Q0FBOEM7QUFDOUMsbURBQThDO0FBRXRCLGlHQUZmLDJCQUFXLE9BRW9CO0FBK0R4Qzs7R0FFRztBQUNILE1BQWEsUUFBUyxTQUFRLEdBQUcsQ0FBQyxRQUFRO0lBWXRDOzs7Ozs7T0FNRztJQUNILFlBQVksS0FBb0IsRUFBRSxFQUFVLEVBQUUsS0FBb0IsRUFBRSxtQ0FBMkMsSUFBSTtRQUMvRyxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRWpCLE1BQU0sV0FBVyxHQUFHLElBQUksMkJBQVcsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFHO1lBQzNDLGFBQWEsRUFBRSxLQUFLLENBQUMsYUFBYTtZQUNsQyxXQUFXLEVBQUUsS0FBSyxDQUFDLFdBQVc7WUFDOUIsZUFBZSxFQUFFLEtBQUssQ0FBQyxlQUFlO1lBQ3RDLE9BQU8sRUFBRSxLQUFLLENBQUMsT0FBTyxLQUFLLFNBQVMsSUFBSSxLQUFLLENBQUMsT0FBTyxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTztZQUNwRixhQUFhLEVBQUUsS0FBSyxDQUFDLGFBQWE7WUFDbEMsWUFBWSxFQUFFLEtBQUssQ0FBQyxZQUFZO1lBQ2hDLDBCQUEwQixFQUFFLEtBQUssQ0FBQywwQkFBMEI7WUFDNUQsSUFBSSxFQUFFLEtBQUssQ0FBQyxJQUFJO1lBQ2hCLE1BQU0sRUFBRSxLQUFLLENBQUMsTUFBTTtTQUN2QixFQUFFLGdDQUFnQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztRQUNwRixJQUFJLENBQUMsUUFBUSxHQUFHLFdBQVcsQ0FBQztRQUM1QixJQUFJLENBQUMsY0FBYyxHQUFHLFdBQVcsQ0FBQyxjQUFjLENBQUM7SUFDckQsQ0FBQztDQUNKO0FBcENELDRCQW9DQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHJvcyBmcm9tICdAYWxpY2xvdWQvcm9zLWNkay1jb3JlJztcbmltcG9ydCB7IFJvc1NuYXBzaG90IH0gZnJvbSAnLi9lY3MuZ2VuZXJhdGVkJztcbi8vIEdlbmVyYXRlZCBmcm9tIHRoZSBBbGlDbG91ZCBST1MgUmVzb3VyY2UgU3BlY2lmaWNhdGlvblxuZXhwb3J0IHsgUm9zU25hcHNob3QgYXMgU25hcHNob3RQcm9wZXJ0eSB9O1xuXG4vKipcbiAqIFByb3BlcnRpZXMgZm9yIGRlZmluaW5nIGEgYEFMSVlVTjo6RUNTOjpTbmFwc2hvdGBcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBTbmFwc2hvdFByb3BzIHtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGRpc2tJZDogSW5kaWNhdGVzIHRoZSBJRCBvZiB0aGUgc3BlY2lmaWVkIGRpc2suXG4gICAgICovXG4gICAgcmVhZG9ubHkgZGlza0lkOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBkZXNjcmlwdGlvbjogVGhlIGRlc2NyaXB0aW9uIG9mIGEgc25hcHNob3QgY2FuIGJlIDIgdG8gMjU2IGNoYXJhY3RlcnMgaW4gbGVuZ3RoIGFuZCBjYW5ub3QgYmVnaW4gd2l0aCBodHRwOi8vIG9yIGh0dHBzOi8vLiBUaGUgZGVzY3JpcHRpb24gd2lsbCBhcHBlYXIgb24gdGhlIGNvbnNvbGUuIEJ5IGRlZmF1bHQsIHRoZSB2YWx1ZSBpcyB6ZXJvLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGRlc2NyaXB0aW9uPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgaW5zdGFudEFjY2VzczogU3BlY2lmaWVzIHdoZXRoZXIgdG8gZW5hYmxlIHRoZSBpbnN0YW50IGFjY2VzcyBmZWF0dXJlLiBWYWxpZCB2YWx1ZXM6IFxuICAgICAqIHRydWU6IGVuYWJsZXMgdGhlIGluc3RhbnQgYWNjZXNzIGZlYXR1cmUuIFRoaXMgZmVhdHVyZSBjYW4gYmUgZW5hYmxlZCBvbmx5IGZvciBlbmhhbmNlZCBTU0RzIChFU1NEcykgXG4gICAgICogZmFsc2U6IGRpc2FibGVzIHRoZSBpbnN0YW50IGFjY2VzcyBmZWF0dXJlLiBJZiBJbnN0YW50QWNjZXNzIGlzIHNldCB0byBmYWxzZSwgbm9ybWFsIHNuYXBzaG90cyBhcmUgY3JlYXRlZC5cbiAgICAgKiBEZWZhdWx0IHZhbHVlOiBmYWxzZS5cbiAgICAgKiBOb3RlIFRoaXMgcGFyYW1ldGVyIGFuZCB0aGUgQ2F0ZWdvcnkgcGFyYW1ldGVyIGNhbm5vdCBiZSBzcGVjaWZpZWQgYXQgdGhlIHNhbWUgdGltZS4gXG4gICAgICogRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSB0aGUgXCJEZXNjcmlwdGlvblwiIHNlY3Rpb24gaW4gdGhpcyB0b3BpYy5cbiAgICAgKi9cbiAgICByZWFkb25seSBpbnN0YW50QWNjZXNzPzogYm9vbGVhbiB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGluc3RhbnRBY2Nlc3NSZXRlbnRpb25EYXlzOiBTcGVjaWZpZXMgdGhlIHJldGVudGlvbiBwZXJpb2Qgb2YgdGhlIGluc3RhbnQgYWNjZXNzIGZlYXR1cmUuIEFmdGVyIHRoZSByZXRlbnRpb24gcGVyaW9kIGVuZHMsIFxuICAgICAqIHRoZSBzbmFwc2hvdCBpcyBhdXRvbWF0aWNhbGx5IHJlbGVhc2VkLiBUaGlzIHBhcmFtZXRlciB0YWtlcyBlZmZlY3Qgb25seSB3aGVuIEluc3RhbnRBY2Nlc3MgXG4gICAgICogaXMgc2V0IHRvIHRydWUuIFVuaXQ6IGRheXMuXG4gICAgICogVmFsaWQgdmFsdWVzOiAxIHRvIDY1NTM1LiBCeSBkZWZhdWx0LCB0aGUgdmFsdWUgb2YgXG4gICAgICogdGhpcyBwYXJhbWV0ZXIgaXMgdGhlIHNhbWUgYXMgdGhhdCBvZiBSZXRlbnRpb25EYXlzLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGluc3RhbnRBY2Nlc3NSZXRlbnRpb25EYXlzPzogbnVtYmVyIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgcmVzb3VyY2VHcm91cElkOiBSZXNvdXJjZSBncm91cCBpZC5cbiAgICAgKi9cbiAgICByZWFkb25seSByZXNvdXJjZUdyb3VwSWQ/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSByZXRlbnRpb25EYXlzOiBTZXQgdGhlIHJldGVudGlvbiBwZXJpb2Qgb2YgYSBzbmFwc2hvdCBpbiBkYXlzLiBUaGUgc25hcHNob3Qgd2lsbCBiZSBhdXRvbWF0aWNhbGx5IHJlbGVhc2VkIGFmdGVyIHRoZSByZXRlbnRpb24gcGVyaW9kIGV4cGlyZXMuXG4gICAgICogVGhlIHZhbHVlIHJhbmdlcyBmcm9tIDEgdG8gNjU1MzYuXG4gICAgICovXG4gICAgcmVhZG9ubHkgcmV0ZW50aW9uRGF5cz86IG51bWJlciB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHNuYXBzaG90TmFtZTogVGhlIG5hbWUgb2YgdGhlIHNuYXBzaG90LCBbMiwgMTI4XSBFbmdsaXNoIG9yIENoaW5lc2UgY2hhcmFjdGVycy4gSXQgbXVzdCBiZWdpbiB3aXRoIGFuIHVwcGVyY2FzZS9sb3dlcmNhc2UgbGV0dGVyIG9yIGEgQ2hpbmVzZSBjaGFyYWN0ZXIsIGFuZCBtYXkgY29udGFpbiBudW1iZXJzLCAnXycgb3IgJy0nLiBJdCBjYW5ub3QgYmVnaW4gd2l0aCBodHRwOi8vIG9yIGh0dHBzOi8vLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHNuYXBzaG90TmFtZT86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHRhZ3M6IFRhZ3MgdG8gYXR0YWNoIHRvIGluc3RhbmNlLiBNYXggc3VwcG9ydCAyMCB0YWdzIHRvIGFkZCBkdXJpbmcgY3JlYXRlIGluc3RhbmNlLiBFYWNoIHRhZyB3aXRoIHR3byBwcm9wZXJ0aWVzIEtleSBhbmQgVmFsdWUsIGFuZCBLZXkgaXMgcmVxdWlyZWQuXG4gICAgICovXG4gICAgcmVhZG9ubHkgdGFncz86IFJvc1NuYXBzaG90LlRhZ3NQcm9wZXJ0eVtdO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgdGltZW91dDogVGhlIG51bWJlciBvZiBtaW51dGVzIHRvIHdhaXQgZm9yIGNyZWF0ZSBzbmFwc2hvdC5cbiAgICAgKi9cbiAgICByZWFkb25seSB0aW1lb3V0PzogbnVtYmVyIHwgcm9zLklSZXNvbHZhYmxlO1xufVxuXG4vKipcbiAqIEEgUk9TIHJlc291cmNlIHR5cGU6ICBgQUxJWVVOOjpFQ1M6OlNuYXBzaG90YFxuICovXG5leHBvcnQgY2xhc3MgU25hcHNob3QgZXh0ZW5kcyByb3MuUmVzb3VyY2Uge1xuXG4gICAgLyoqXG4gICAgICogQSBmYWN0b3J5IG1ldGhvZCB0aGF0IGNyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgdGhpcyBjbGFzcyBmcm9tIGFuIG9iamVjdFxuICAgICAqIGNvbnRhaW5pbmcgdGhlIHByb3BlcnRpZXMgb2YgdGhpcyBST1MgcmVzb3VyY2UsIHdoaWNoIHdpbGwgYmUgYXNzaWduZWQgdG8gUk9TIHJlc291cmNlLlxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIFNuYXBzaG90SWQ6IFRoZSBzbmFwc2hvdCBJRC5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0clNuYXBzaG90SWQ6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBgQUxJWVVOOjpFQ1M6OlNuYXBzaG90YC5cbiAgICAgKlxuICAgICAqIFBhcmFtIHNjb3BlIC0gc2NvcGUgaW4gd2hpY2ggdGhpcyByZXNvdXJjZSBpcyBkZWZpbmVkXG4gICAgICogUGFyYW0gaWQgICAgLSBzY29wZWQgaWQgb2YgdGhlIHJlc291cmNlXG4gICAgICogUGFyYW0gcHJvcHMgLSByZXNvdXJjZSBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IHJvcy5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBTbmFwc2hvdFByb3BzLCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDpib29sZWFuID0gdHJ1ZSkge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQpO1xuXG4gICAgICAgIGNvbnN0IHJvc1NuYXBzaG90ID0gbmV3IFJvc1NuYXBzaG90KHRoaXMsIGlkLCAge1xuICAgICAgICAgICAgaW5zdGFudEFjY2VzczogcHJvcHMuaW5zdGFudEFjY2VzcyxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBwcm9wcy5kZXNjcmlwdGlvbixcbiAgICAgICAgICAgIHJlc291cmNlR3JvdXBJZDogcHJvcHMucmVzb3VyY2VHcm91cElkLFxuICAgICAgICAgICAgdGltZW91dDogcHJvcHMudGltZW91dCA9PT0gdW5kZWZpbmVkIHx8IHByb3BzLnRpbWVvdXQgPT09IG51bGwgPyAyMDAgOiBwcm9wcy50aW1lb3V0LFxuICAgICAgICAgICAgcmV0ZW50aW9uRGF5czogcHJvcHMucmV0ZW50aW9uRGF5cyxcbiAgICAgICAgICAgIHNuYXBzaG90TmFtZTogcHJvcHMuc25hcHNob3ROYW1lLFxuICAgICAgICAgICAgaW5zdGFudEFjY2Vzc1JldGVudGlvbkRheXM6IHByb3BzLmluc3RhbnRBY2Nlc3NSZXRlbnRpb25EYXlzLFxuICAgICAgICAgICAgdGFnczogcHJvcHMudGFncyxcbiAgICAgICAgICAgIGRpc2tJZDogcHJvcHMuZGlza0lkLFxuICAgICAgICB9LCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCAmJiB0aGlzLnN0YWNrLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50KTtcbiAgICAgICAgdGhpcy5yZXNvdXJjZSA9IHJvc1NuYXBzaG90O1xuICAgICAgICB0aGlzLmF0dHJTbmFwc2hvdElkID0gcm9zU25hcHNob3QuYXR0clNuYXBzaG90SWQ7XG4gICAgfVxufVxuIl19