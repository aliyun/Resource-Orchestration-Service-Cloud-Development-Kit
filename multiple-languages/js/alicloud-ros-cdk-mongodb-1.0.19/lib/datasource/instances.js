"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Instances = exports.InstancesProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const mongodb_generated_1 = require("./mongodb.generated");
Object.defineProperty(exports, "InstancesProperty", { enumerable: true, get: function () { return mongodb_generated_1.RosInstances; } });
/**
 * A ROS resource type:  `DATASOURCE::MONGODB::Instances`
 */
class Instances extends ros.Resource {
    /**
     * Create a new `DATASOURCE::MONGODB::Instances`.
     *
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props = {}, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosInstances = new mongodb_generated_1.RosInstances(this, id, {
            engineVersion: props.engineVersion,
            replicationFactor: props.replicationFactor,
            dbInstanceStatus: props.dbInstanceStatus,
            zoneId: props.zoneId,
            resourceGroupId: props.resourceGroupId,
            dbInstanceClass: props.dbInstanceClass,
            vSwitchId: props.vSwitchId,
            dbInstanceType: props.dbInstanceType === undefined || props.dbInstanceType === null ? 'replicate' : props.dbInstanceType,
            expired: props.expired,
            connectionDomain: props.connectionDomain,
            vpcId: props.vpcId,
            dbInstanceId: props.dbInstanceId,
            chargeType: props.chargeType === undefined || props.chargeType === null ? 'PostPaid' : props.chargeType,
            networkType: props.networkType,
            dbInstanceDescription: props.dbInstanceDescription,
            tags: props.tags,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosInstances;
        this.attrInstanceIds = rosInstances.attrInstanceIds;
        this.attrInstances = rosInstances.attrInstances;
    }
}
exports.Instances = Instances;
//# sourceMappingURL=data:application/json;base64,