"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NetworkInterface = exports.NetworkInterfaceProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ecs_generated_1 = require("./ecs.generated");
Object.defineProperty(exports, "NetworkInterfaceProperty", { enumerable: true, get: function () { return ecs_generated_1.RosNetworkInterface; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::ECS::NetworkInterface`, which is used to create an elastic network interface (ENI).
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosNetworkInterface`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-ecs-networkinterface
 */
class NetworkInterface extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosNetworkInterface = new ecs_generated_1.RosNetworkInterface(this, id, {
            networkInterfaceTrafficMode: props.networkInterfaceTrafficMode,
            description: props.description,
            deleteOnRelease: props.deleteOnRelease,
            privateIpAddresses: props.privateIpAddresses,
            resourceGroupId: props.resourceGroupId,
            secondaryPrivateIpAddressCount: props.secondaryPrivateIpAddressCount,
            ipv6PrefixCount: props.ipv6PrefixCount,
            ipv4Prefixes: props.ipv4Prefixes,
            vSwitchId: props.vSwitchId,
            securityGroupId: props.securityGroupId,
            networkInterfaceName: props.networkInterfaceName,
            ipv4PrefixCount: props.ipv4PrefixCount,
            primaryIpAddress: props.primaryIpAddress,
            ipv6Prefixes: props.ipv6Prefixes,
            ipv6Addresses: props.ipv6Addresses,
            securityGroupIds: props.securityGroupIds,
            queueNumber: props.queueNumber,
            txQueueSize: props.txQueueSize,
            ipv6AddressCount: props.ipv6AddressCount,
            rxQueueSize: props.rxQueueSize,
            tags: props.tags,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosNetworkInterface;
        this.attrArn = rosNetworkInterface.attrArn;
        this.attrMacAddress = rosNetworkInterface.attrMacAddress;
        this.attrNetworkInterfaceId = rosNetworkInterface.attrNetworkInterfaceId;
        this.attrPrivateIpAddress = rosNetworkInterface.attrPrivateIpAddress;
        this.attrSecondaryPrivateIpAddresses = rosNetworkInterface.attrSecondaryPrivateIpAddresses;
    }
}
exports.NetworkInterface = NetworkInterface;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmV0d29ya2ludGVyZmFjZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm5ldHdvcmtpbnRlcmZhY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsOENBQThDO0FBQzlDLG1EQUFzRDtBQUV0Qix5R0FGdkIsbUNBQW1CLE9BRTRCO0FBMkp4RDs7OztHQUlHO0FBQ0gsTUFBYSxnQkFBaUIsU0FBUSxHQUFHLENBQUMsUUFBUTtJQStCOUM7Ozs7T0FJRztJQUNILFlBQVksS0FBb0IsRUFBRSxFQUFVLEVBQUUsS0FBNEIsRUFBRSxtQ0FBMkMsSUFBSTtRQUN2SCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ2pCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQ2IsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLGdDQUFnQyxHQUFHLGdDQUFnQyxDQUFDO1FBRXpFLE1BQU0sbUJBQW1CLEdBQUcsSUFBSSxtQ0FBbUIsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFHO1lBQzNELDJCQUEyQixFQUFFLEtBQUssQ0FBQywyQkFBMkI7WUFDOUQsV0FBVyxFQUFFLEtBQUssQ0FBQyxXQUFXO1lBQzlCLGVBQWUsRUFBRSxLQUFLLENBQUMsZUFBZTtZQUN0QyxrQkFBa0IsRUFBRSxLQUFLLENBQUMsa0JBQWtCO1lBQzVDLGVBQWUsRUFBRSxLQUFLLENBQUMsZUFBZTtZQUN0Qyw4QkFBOEIsRUFBRSxLQUFLLENBQUMsOEJBQThCO1lBQ3BFLGVBQWUsRUFBRSxLQUFLLENBQUMsZUFBZTtZQUN0QyxZQUFZLEVBQUUsS0FBSyxDQUFDLFlBQVk7WUFDaEMsU0FBUyxFQUFFLEtBQUssQ0FBQyxTQUFTO1lBQzFCLGVBQWUsRUFBRSxLQUFLLENBQUMsZUFBZTtZQUN0QyxvQkFBb0IsRUFBRSxLQUFLLENBQUMsb0JBQW9CO1lBQ2hELGVBQWUsRUFBRSxLQUFLLENBQUMsZUFBZTtZQUN0QyxnQkFBZ0IsRUFBRSxLQUFLLENBQUMsZ0JBQWdCO1lBQ3hDLFlBQVksRUFBRSxLQUFLLENBQUMsWUFBWTtZQUNoQyxhQUFhLEVBQUUsS0FBSyxDQUFDLGFBQWE7WUFDbEMsZ0JBQWdCLEVBQUUsS0FBSyxDQUFDLGdCQUFnQjtZQUN4QyxXQUFXLEVBQUUsS0FBSyxDQUFDLFdBQVc7WUFDOUIsV0FBVyxFQUFFLEtBQUssQ0FBQyxXQUFXO1lBQzlCLGdCQUFnQixFQUFFLEtBQUssQ0FBQyxnQkFBZ0I7WUFDeEMsV0FBVyxFQUFFLEtBQUssQ0FBQyxXQUFXO1lBQzlCLElBQUksRUFBRSxLQUFLLENBQUMsSUFBSTtTQUNuQixFQUFFLGdDQUFnQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztRQUNwRixJQUFJLENBQUMsUUFBUSxHQUFHLG1CQUFtQixDQUFDO1FBQ3BDLElBQUksQ0FBQyxPQUFPLEdBQUcsbUJBQW1CLENBQUMsT0FBTyxDQUFDO1FBQzNDLElBQUksQ0FBQyxjQUFjLEdBQUcsbUJBQW1CLENBQUMsY0FBYyxDQUFDO1FBQ3pELElBQUksQ0FBQyxzQkFBc0IsR0FBRyxtQkFBbUIsQ0FBQyxzQkFBc0IsQ0FBQztRQUN6RSxJQUFJLENBQUMsb0JBQW9CLEdBQUcsbUJBQW1CLENBQUMsb0JBQW9CLENBQUM7UUFDckUsSUFBSSxDQUFDLCtCQUErQixHQUFHLG1CQUFtQixDQUFDLCtCQUErQixDQUFDO0lBQy9GLENBQUM7Q0FDSjtBQXpFRCw0Q0F5RUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyByb3MgZnJvbSAnQGFsaWNsb3VkL3Jvcy1jZGstY29yZSc7XG5pbXBvcnQgeyBSb3NOZXR3b3JrSW50ZXJmYWNlIH0gZnJvbSAnLi9lY3MuZ2VuZXJhdGVkJztcbi8vIEdlbmVyYXRlZCBmcm9tIHRoZSBBbGlDbG91ZCBST1MgUmVzb3VyY2UgU3BlY2lmaWNhdGlvblxuZXhwb3J0IHsgUm9zTmV0d29ya0ludGVyZmFjZSBhcyBOZXR3b3JrSW50ZXJmYWNlUHJvcGVydHkgfTtcblxuLyoqXG4gKiBQcm9wZXJ0aWVzIGZvciBkZWZpbmluZyBhIGBOZXR3b3JrSW50ZXJmYWNlYC5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvYWxpeXVuLWVjcy1uZXR3b3JraW50ZXJmYWNlXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgTmV0d29ya0ludGVyZmFjZVByb3BzIHtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHZTd2l0Y2hJZDogVlN3aXRjaCBJRCBvZiB0aGUgc3BlY2lmaWVkIFZQQy4gU3BlY2lmaWVzIHRoZSBzd2l0Y2ggSUQgZm9yIHRoZSBWUEMuXG4gICAgICovXG4gICAgcmVhZG9ubHkgdlN3aXRjaElkOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBkZWxldGVPblJlbGVhc2U6IFNwZWNpZmllcyB3aGV0aGVyIHRvIGRlbGV0ZSB0aGUgRU5JIHdoZW4gdGhlIGluc3RhbmNlIGlzIHJlbGVhc2VkLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGRlbGV0ZU9uUmVsZWFzZT86IGJvb2xlYW4gfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBkZXNjcmlwdGlvbjogRGVzY3JpcHRpb24gb2YgeW91ciBFTkkuIEl0IGlzIGEgc3RyaW5nIG9mIFsyLCAyNTZdIEVuZ2xpc2ggb3IgQ2hpbmVzZSBjaGFyYWN0ZXJzLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGRlc2NyaXB0aW9uPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgaXB2NFByZWZpeENvdW50OiBTcGVjaWZpZXMgb25lIG9yIG1vcmUgSVB2NCBwcmVmaXhlcyBmb3IgdGhlIGVsYXN0aWMgbmV0d29yayBpbnRlcmZhY2UuIFJhbmdlOiAxLTEwXG4gICAgICogKipOb3RlKio6IElmIHlvdSBuZWVkIHRvIHNldCBhbiBJUHY0IHByZWZpeCBmb3IgYW4gZWxhc3RpYyBuZXR3b3JrIGludGVyZmFjZSwgeW91IG11c3Qgc2V0IGVpdGhlciBJcHY0UHJlZml4ZXMgb3IgSXB2NFByZWZpeENvdW50LCBidXQgbm90IGJvdGguXG4gICAgICovXG4gICAgcmVhZG9ubHkgaXB2NFByZWZpeENvdW50PzogbnVtYmVyIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgaXB2NFByZWZpeGVzOiBTcGVjaWZpZXMgb25lIG9yIG1vcmUgSVB2NCBwcmVmaXhlcyBmb3IgdGhlIGVsYXN0aWMgbmV0d29yayBpbnRlcmZhY2UuXG4gICAgICovXG4gICAgcmVhZG9ubHkgaXB2NFByZWZpeGVzPzogQXJyYXk8c3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlPiB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGlwdjZBZGRyZXNzQ291bnQ6IFRoZSBudW1iZXIgb2YgcmFuZG9tbHkgZ2VuZXJhdGVkIElQdjYgYWRkcmVzc2VzIHRoYXQgYXJlIGFzc2lnbmVkIHRvIHRoZSBFTkkuXG4gICAgICovXG4gICAgcmVhZG9ubHkgaXB2NkFkZHJlc3NDb3VudD86IG51bWJlciB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGlwdjZBZGRyZXNzZXM6IFRoZSBJUHY2IGFkZHJlc3MgTiB0byBhc3NpZ24gdG8gdGhlIEVOSS5cbiAgICAgKi9cbiAgICByZWFkb25seSBpcHY2QWRkcmVzc2VzPzogQXJyYXk8c3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlPiB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGlwdjZQcmVmaXhDb3VudDogU3BlY2lmaWVzIG9uZSBvciBtb3JlIElQdjYgcHJlZml4ZXMgZm9yIHRoZSBlbGFzdGljIG5ldHdvcmsgaW50ZXJmYWNlLiBSYW5nZTogMS0xMFxuICAgICAqICoqTm90ZSoqOiBJZiB5b3UgbmVlZCB0byBzZXQgYW4gSVB2NiBwcmVmaXggZm9yIGFuIGVsYXN0aWMgbmV0d29yayBpbnRlcmZhY2UsIHlvdSBtdXN0IHNldCBlaXRoZXIgSXB2NlByZWZpeGVzIG9yIElwdjZQcmVmaXhDb3VudCwgYnV0IG5vdCBib3RoLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGlwdjZQcmVmaXhDb3VudD86IG51bWJlciB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGlwdjZQcmVmaXhlczogU3BlY2lmaWVzIG9uZSBvciBtb3JlIElQdjYgcHJlZml4ZXMgZm9yIHRoZSBlbGFzdGljIG5ldHdvcmsgaW50ZXJmYWNlLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGlwdjZQcmVmaXhlcz86IEFycmF5PHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZT4gfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBuZXR3b3JrSW50ZXJmYWNlTmFtZTogTmFtZSBvZiB5b3VyIEVOSS4gSXQgaXMgYSBzdHJpbmcgb2YgWzIsIDEyOF0gIENoaW5lc2Ugb3IgRW5nbGlzaCBjaGFyYWN0ZXJzLiBJdCBtdXN0IGJlZ2luIHdpdGggYSBsZXR0ZXIgYW5kIGNhbiBjb250YWluIG51bWJlcnMsIHVuZGVyc2NvcmVzIChfKSwgY29sb25zICg6KSwgb3IgaHlwaGVucyAoLSkuXG4gICAgICovXG4gICAgcmVhZG9ubHkgbmV0d29ya0ludGVyZmFjZU5hbWU/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBuZXR3b3JrSW50ZXJmYWNlVHJhZmZpY01vZGU6IFRoZSBjb21tdW5pY2F0aW9uIG1vZGUgb2YgdGhlIEVOSS4gVmFsaWQgdmFsdWVzOlxuICAgICAqIFN0YW5kYXJkOiB1c2VzIHRoZSBUQ1AgY29tbXVuaWNhdGlvbiBtb2RlLlxuICAgICAqIEhpZ2hQZXJmb3JtYW5jZTogZW5hYmxlcyB0aGUgRWxhc3RpYyBSRE1BIEludGVyZmFjZSAoRVJJKSBhbmQgdXNlcyB0aGUgcmVtb3RlIGRpcmVjdCBtZW1vcnkgYWNjZXNzIChSRE1BKSBjb21tdW5pY2F0aW9uIG1vZGUuXG4gICAgICovXG4gICAgcmVhZG9ubHkgbmV0d29ya0ludGVyZmFjZVRyYWZmaWNNb2RlPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgcHJpbWFyeUlwQWRkcmVzczogVGhlIHByaW1hcnkgcHJpdmF0ZSBJUCBhZGRyZXNzIG9mIHRoZSBFTkkuICBUaGUgc3BlY2lmaWVkIElQIGFkZHJlc3MgbXVzdCBoYXZlIHRoZSBzYW1lIEhvc3QgSUQgYXMgdGhlIFZTd2l0Y2guIElmIG5vIElQIGFkZHJlc3NlcyBhcmUgc3BlY2lmaWVkLCBhIHJhbmRvbSBuZXR3b3JrIElEIGlzIGFzc2lnbmVkIGZvciB0aGUgRU5JLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHByaW1hcnlJcEFkZHJlc3M/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBwcml2YXRlSXBBZGRyZXNzZXM6IFNwZWNpZmllcyBzZWNvbmRhcnkgcHJpdmF0ZSBJUCBhZGRyZXNzZXMgb2YgdGhlIEVOSS4gVGhpcyBJUCBhZGRyZXNzIG11c3QgYmUgYW4gYXZhaWxhYmxlIElQIGFkZHJlc3MgaW4gdGhlIENJRFIgYmxvY2sgb2YgdGhlIFZTd2l0Y2ggdG8gd2hpY2ggdGhlIEVOSSBiZWxvbmdzLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHByaXZhdGVJcEFkZHJlc3Nlcz86IEFycmF5PHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZT4gfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBxdWV1ZU51bWJlcjogVGhlIG51bWJlciBvZiBxdWV1ZXMgdGhhdCBhcmUgc3VwcG9ydGVkIGJ5IHRoZSBFTkkuIFZhbGlkIHZhbHVlczogMSB0byAyMDQ4LlxuICAgICAqIFdoZW4geW91IGF0dGFjaCB0aGUgRU5JIHRvIGFuIGluc3RhbmNlLCBtYWtlIHN1cmUgdGhhdCB0aGUgdmFsdWUgb2YgdGhpcyBwYXJhbWV0ZXIgaXMgbGVzcyB0aGFuIHRoZSBtYXhpbXVtIG51bWJlciBvZiBxdWV1ZXMgcGVyIEVOSSB0aGF0IGlzIGFsbG93ZWQgZm9yIHRoZSBpbnN0YW5jZSB0eXBlLiBUbyB2aWV3IHRoZSBtYXhpbXVtIG51bWJlciBvZiBxdWV1ZXMgcGVyIEVOSSBhbGxvd2VkIGZvciBhbiBpbnN0YW5jZSB0eXBlLCB5b3UgY2FuIGNhbGwgRGVzY3JpYmVJbnN0YW5jZVR5cGVzIGFuZCB0aGVuIGNoZWNrIHRoZSByZXR1cm4gdmFsdWUgb2YgTWF4aW11bVF1ZXVlTnVtYmVyUGVyRW5pLlxuICAgICAqIEJ5IGRlZmF1bHQsIHRoaXMgcGFyYW1ldGVyIGlzIGVtcHR5LiBJZiB5b3UgZG8gbm90IHNwZWNpZnkgdGhpcyBwYXJhbWV0ZXIsIHRoZSBkZWZhdWx0IG51bWJlciBvZiBxdWV1ZXMgcGVyIEVOSSBmb3IgdGhlIGluc3RhbmNlIHR5cGUgb2YgYW4gaW5zdGFuY2UgaXMgdXNlZCB3aGVuIHlvdSBhdHRhY2ggdGhlIEVOSSB0byB0aGUgaW5zdGFuY2UuIFRvIGxlYXJuIGFib3V0IHRoZSBkZWZhdWx0IG51bWJlciBvZiBxdWV1ZXMgcGVyIEVOSSBmb3IgYW4gaW5zdGFuY2UgdHlwZSwgeW91IGNhbiBjYWxsIERlc2NyaWJlSW5zdGFuY2VUeXBlcyBhbmQgdGhlbiBjaGVjayB0aGUgcmV0dXJuIHZhbHVlIG9mIFNlY29uZGFyeUVuaVF1ZXVlTnVtYmVyLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHF1ZXVlTnVtYmVyPzogbnVtYmVyIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgcmVzb3VyY2VHcm91cElkOiBSZXNvdXJjZSBncm91cCBpZC5cbiAgICAgKi9cbiAgICByZWFkb25seSByZXNvdXJjZUdyb3VwSWQ/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSByeFF1ZXVlU2l6ZTogRWxhc3RpYyBuZXR3b3JrIGNhcmQgaW5ib3VuZCBxdWV1ZSBkZXB0aC5cbiAgICAgKiAqKk5vdGUqKjogVGhlIGluYm91bmQgcXVldWUgZGVwdGggb2YgdGhlIG5ldHdvcmsgY2FyZCBtdXN0IGJlIGVxdWFsIHRvIHRoZSBvdXRib3VuZCBxdWV1ZSBkZXB0aCwgcmFuZ2luZyBmcm9tIDgxOTIgdG8gMTYzODQsIGFuZCBtdXN0IGJlIGEgcG93ZXIgb2YgdHdvLlxuICAgICAqIExhcmdlciBpbmJvdW5kIHF1ZXVlIGRlcHRoIGNhbiBpbXByb3ZlIGluYm91bmQgdGhyb3VnaHB1dCwgYnV0IGl0IGNvbnN1bWVzIG1vcmUgbWVtb3J5LlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHJ4UXVldWVTaXplPzogbnVtYmVyIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgc2Vjb25kYXJ5UHJpdmF0ZUlwQWRkcmVzc0NvdW50OiBUaGUgbnVtYmVyIG9mIHByaXZhdGUgSVAgYWRkcmVzc2VzIHRoYXQgY2FuIGJlIGNyZWF0ZWQgYXV0b21hdGljYWxseSBieSBFQ1MuXG4gICAgICovXG4gICAgcmVhZG9ubHkgc2Vjb25kYXJ5UHJpdmF0ZUlwQWRkcmVzc0NvdW50PzogbnVtYmVyIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgc2VjdXJpdHlHcm91cElkOiBUaGUgSUQgb2YgdGhlIHNlY3VyaXR5IGdyb3VwIHRoYXQgdGhlIEVOSSBqb2lucy4gVGhlIHNlY3VyaXR5IGdyb3VwIGFuZCB0aGUgRU5JIG11c3QgYmUgaW4gYSBzYW1lIFZQQy5cbiAgICAgKi9cbiAgICByZWFkb25seSBzZWN1cml0eUdyb3VwSWQ/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBzZWN1cml0eUdyb3VwSWRzOiBUaGUgSURzIG9mIHRoZSBzZWN1cml0eSBncm91cHMgdGhhdCB0aGUgRU5JIGpvaW5zLiBUaGUgc2VjdXJpdHkgZ3JvdXBzIGFuZCB0aGUgRU5JIG11c3QgYmVsb25nIHRvIHRoZSBzYW1lIFZQQy5cbiAgICAgKi9cbiAgICByZWFkb25seSBzZWN1cml0eUdyb3VwSWRzPzogQXJyYXk8c3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlPiB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHRhZ3M6IFRhZ3MgdG8gYXR0YWNoIHRvIGluc3RhbmNlLiBNYXggc3VwcG9ydCAyMCB0YWdzIHRvIGFkZCBkdXJpbmcgY3JlYXRlIGluc3RhbmNlLiBFYWNoIHRhZyB3aXRoIHR3byBwcm9wZXJ0aWVzIEtleSBhbmQgVmFsdWUsIGFuZCBLZXkgaXMgcmVxdWlyZWQuXG4gICAgICovXG4gICAgcmVhZG9ubHkgdGFncz86IFJvc05ldHdvcmtJbnRlcmZhY2UuVGFnc1Byb3BlcnR5W107XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSB0eFF1ZXVlU2l6ZTogRWxhc3RpYyBuZXR3b3JrIGNhcmQgb3V0Ym91bmQgcXVldWUgZGVwdGguXG4gICAgICogKipOb3RlKio6IFRoZSBvdXRib3VuZCBxdWV1ZSBkZXB0aCBvZiB0aGUgbmV0d29yayBjYXJkIG11c3QgYmUgZXF1YWwgdG8gdGhlIGluYm91bmQgcXVldWUgZGVwdGgsIHJhbmdpbmcgZnJvbSA4MTkyIHRvIDE2Mzg0LCBhbmQgbXVzdCBiZSBhIHBvd2VyIG9mIHR3by5cbiAgICAgKiBMYXJnZXIgb3V0Ym91bmQgcXVldWUgZGVwdGggY2FuIGltcHJvdmUgb3V0Ym91bmQgdGhyb3VnaHB1dCwgYnV0IGl0IGNvbnN1bWVzIG1vcmUgbWVtb3J5LlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHR4UXVldWVTaXplPzogbnVtYmVyIHwgcm9zLklSZXNvbHZhYmxlO1xufVxuXG4vKipcbiAqIFJlcHJlc2VudHMgYSBgTmV0d29ya0ludGVyZmFjZWAuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSU5ldHdvcmtJbnRlcmZhY2UgZXh0ZW5kcyByb3MuSVJlc291cmNlIHtcbiAgICByZWFkb25seSBwcm9wczogTmV0d29ya0ludGVyZmFjZVByb3BzO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIEFybjogVGhlIEFsaWJhYmEgQ2xvdWQgUmVzb3VyY2UgTmFtZSAoQVJOKS5cbiAgICAgKi9cbiAgICByZWFkb25seSBhdHRyQXJuOiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgTWFjQWRkcmVzczogVGhlIE1BQyBhZGRyZXNzIG9mIHlvdXIgTmV0d29yayBJbnRlcmZhY2UuXG4gICAgICovXG4gICAgcmVhZG9ubHkgYXR0ck1hY0FkZHJlc3M6IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBOZXR3b3JrSW50ZXJmYWNlSWQ6IElEIG9mIHlvdXIgTmV0d29yayBJbnRlcmZhY2UuXG4gICAgICovXG4gICAgcmVhZG9ubHkgYXR0ck5ldHdvcmtJbnRlcmZhY2VJZDogcm9zLklSZXNvbHZhYmxlIHwgc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIFByaXZhdGVJcEFkZHJlc3M6IFRoZSBwcmltYXJ5IHByaXZhdGUgaXAgYWRkcmVzcyBvZiB5b3VyIE5ldHdvcmsgSW50ZXJmYWNlLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGF0dHJQcml2YXRlSXBBZGRyZXNzOiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgU2Vjb25kYXJ5UHJpdmF0ZUlwQWRkcmVzc2VzOiBUaGUgc2Vjb25kYXJ5IHByaXZhdGUgSVAgYWRkcmVzc2VzIG9mIHlvdXIgTmV0d29yayBJbnRlcmZhY2UuXG4gICAgICovXG4gICAgcmVhZG9ubHkgYXR0clNlY29uZGFyeVByaXZhdGVJcEFkZHJlc3Nlczogcm9zLklSZXNvbHZhYmxlIHwgc3RyaW5nO1xufVxuLyoqXG4gKiBUaGlzIGNsYXNzIGVuY2Fwc3VsYXRlcyBhbmQgZXh0ZW5kcyB0aGUgUk9TIHJlc291cmNlIHR5cGUgYEFMSVlVTjo6RUNTOjpOZXR3b3JrSW50ZXJmYWNlYCwgd2hpY2ggaXMgdXNlZCB0byBjcmVhdGUgYW4gZWxhc3RpYyBuZXR3b3JrIGludGVyZmFjZSAoRU5JKS5cbiAqIEBOb3RlIFRoaXMgY2xhc3MgbWF5IGhhdmUgc29tZSBuZXcgZnVuY3Rpb25zIHRvIGZhY2lsaXRhdGUgZGV2ZWxvcG1lbnQsIHNvIGl0IGlzIHJlY29tbWVuZGVkIHRvIHVzZSB0aGlzIGNsYXNzIGluc3RlYWQgb2YgYFJvc05ldHdvcmtJbnRlcmZhY2VgZm9yIGEgbW9yZSBjb252ZW5pZW50IGRldmVsb3BtZW50IGV4cGVyaWVuY2UuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2FsaXl1bi1lY3MtbmV0d29ya2ludGVyZmFjZVxuICovXG5leHBvcnQgY2xhc3MgTmV0d29ya0ludGVyZmFjZSBleHRlbmRzIHJvcy5SZXNvdXJjZSBpbXBsZW1lbnRzIElOZXR3b3JrSW50ZXJmYWNlIHtcbiAgICBwcm90ZWN0ZWQgc2NvcGU6IHJvcy5Db25zdHJ1Y3Q7XG4gICAgcHJvdGVjdGVkIGlkOiBzdHJpbmc7XG4gICAgcHVibGljIHJlYWRvbmx5IHByb3BzOiBOZXR3b3JrSW50ZXJmYWNlUHJvcHM7XG4gICAgcHJvdGVjdGVkIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OiBib29sZWFuO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIEFybjogVGhlIEFsaWJhYmEgQ2xvdWQgUmVzb3VyY2UgTmFtZSAoQVJOKS5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckFybjogcm9zLklSZXNvbHZhYmxlIHwgc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIE1hY0FkZHJlc3M6IFRoZSBNQUMgYWRkcmVzcyBvZiB5b3VyIE5ldHdvcmsgSW50ZXJmYWNlLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyTWFjQWRkcmVzczogcm9zLklSZXNvbHZhYmxlIHwgc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIE5ldHdvcmtJbnRlcmZhY2VJZDogSUQgb2YgeW91ciBOZXR3b3JrIEludGVyZmFjZS5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ck5ldHdvcmtJbnRlcmZhY2VJZDogcm9zLklSZXNvbHZhYmxlIHwgc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIFByaXZhdGVJcEFkZHJlc3M6IFRoZSBwcmltYXJ5IHByaXZhdGUgaXAgYWRkcmVzcyBvZiB5b3VyIE5ldHdvcmsgSW50ZXJmYWNlLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyUHJpdmF0ZUlwQWRkcmVzczogcm9zLklSZXNvbHZhYmxlIHwgc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIFNlY29uZGFyeVByaXZhdGVJcEFkZHJlc3NlczogVGhlIHNlY29uZGFyeSBwcml2YXRlIElQIGFkZHJlc3NlcyBvZiB5b3VyIE5ldHdvcmsgSW50ZXJmYWNlLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyU2Vjb25kYXJ5UHJpdmF0ZUlwQWRkcmVzc2VzOiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBQYXJhbSBzY29wZSAtIHNjb3BlIGluIHdoaWNoIHRoaXMgcmVzb3VyY2UgaXMgZGVmaW5lZFxuICAgICAqIFBhcmFtIGlkICAgIC0gc2NvcGVkIGlkIG9mIHRoZSByZXNvdXJjZVxuICAgICAqIFBhcmFtIHByb3BzIC0gcmVzb3VyY2UgcHJvcGVydGllc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiByb3MuQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogTmV0d29ya0ludGVyZmFjZVByb3BzLCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDpib29sZWFuID0gdHJ1ZSkge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQpO1xuICAgICAgICB0aGlzLnNjb3BlID0gc2NvcGU7XG4gICAgICAgIHRoaXMuaWQgPSBpZDtcbiAgICAgICAgdGhpcy5wcm9wcyA9IHByb3BzO1xuICAgICAgICB0aGlzLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ID0gZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ7XG5cbiAgICAgICAgY29uc3Qgcm9zTmV0d29ya0ludGVyZmFjZSA9IG5ldyBSb3NOZXR3b3JrSW50ZXJmYWNlKHRoaXMsIGlkLCAge1xuICAgICAgICAgICAgbmV0d29ya0ludGVyZmFjZVRyYWZmaWNNb2RlOiBwcm9wcy5uZXR3b3JrSW50ZXJmYWNlVHJhZmZpY01vZGUsXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogcHJvcHMuZGVzY3JpcHRpb24sXG4gICAgICAgICAgICBkZWxldGVPblJlbGVhc2U6IHByb3BzLmRlbGV0ZU9uUmVsZWFzZSxcbiAgICAgICAgICAgIHByaXZhdGVJcEFkZHJlc3NlczogcHJvcHMucHJpdmF0ZUlwQWRkcmVzc2VzLFxuICAgICAgICAgICAgcmVzb3VyY2VHcm91cElkOiBwcm9wcy5yZXNvdXJjZUdyb3VwSWQsXG4gICAgICAgICAgICBzZWNvbmRhcnlQcml2YXRlSXBBZGRyZXNzQ291bnQ6IHByb3BzLnNlY29uZGFyeVByaXZhdGVJcEFkZHJlc3NDb3VudCxcbiAgICAgICAgICAgIGlwdjZQcmVmaXhDb3VudDogcHJvcHMuaXB2NlByZWZpeENvdW50LFxuICAgICAgICAgICAgaXB2NFByZWZpeGVzOiBwcm9wcy5pcHY0UHJlZml4ZXMsXG4gICAgICAgICAgICB2U3dpdGNoSWQ6IHByb3BzLnZTd2l0Y2hJZCxcbiAgICAgICAgICAgIHNlY3VyaXR5R3JvdXBJZDogcHJvcHMuc2VjdXJpdHlHcm91cElkLFxuICAgICAgICAgICAgbmV0d29ya0ludGVyZmFjZU5hbWU6IHByb3BzLm5ldHdvcmtJbnRlcmZhY2VOYW1lLFxuICAgICAgICAgICAgaXB2NFByZWZpeENvdW50OiBwcm9wcy5pcHY0UHJlZml4Q291bnQsXG4gICAgICAgICAgICBwcmltYXJ5SXBBZGRyZXNzOiBwcm9wcy5wcmltYXJ5SXBBZGRyZXNzLFxuICAgICAgICAgICAgaXB2NlByZWZpeGVzOiBwcm9wcy5pcHY2UHJlZml4ZXMsXG4gICAgICAgICAgICBpcHY2QWRkcmVzc2VzOiBwcm9wcy5pcHY2QWRkcmVzc2VzLFxuICAgICAgICAgICAgc2VjdXJpdHlHcm91cElkczogcHJvcHMuc2VjdXJpdHlHcm91cElkcyxcbiAgICAgICAgICAgIHF1ZXVlTnVtYmVyOiBwcm9wcy5xdWV1ZU51bWJlcixcbiAgICAgICAgICAgIHR4UXVldWVTaXplOiBwcm9wcy50eFF1ZXVlU2l6ZSxcbiAgICAgICAgICAgIGlwdjZBZGRyZXNzQ291bnQ6IHByb3BzLmlwdjZBZGRyZXNzQ291bnQsXG4gICAgICAgICAgICByeFF1ZXVlU2l6ZTogcHJvcHMucnhRdWV1ZVNpemUsXG4gICAgICAgICAgICB0YWdzOiBwcm9wcy50YWdzLFxuICAgICAgICB9LCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCAmJiB0aGlzLnN0YWNrLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50KTtcbiAgICAgICAgdGhpcy5yZXNvdXJjZSA9IHJvc05ldHdvcmtJbnRlcmZhY2U7XG4gICAgICAgIHRoaXMuYXR0ckFybiA9IHJvc05ldHdvcmtJbnRlcmZhY2UuYXR0ckFybjtcbiAgICAgICAgdGhpcy5hdHRyTWFjQWRkcmVzcyA9IHJvc05ldHdvcmtJbnRlcmZhY2UuYXR0ck1hY0FkZHJlc3M7XG4gICAgICAgIHRoaXMuYXR0ck5ldHdvcmtJbnRlcmZhY2VJZCA9IHJvc05ldHdvcmtJbnRlcmZhY2UuYXR0ck5ldHdvcmtJbnRlcmZhY2VJZDtcbiAgICAgICAgdGhpcy5hdHRyUHJpdmF0ZUlwQWRkcmVzcyA9IHJvc05ldHdvcmtJbnRlcmZhY2UuYXR0clByaXZhdGVJcEFkZHJlc3M7XG4gICAgICAgIHRoaXMuYXR0clNlY29uZGFyeVByaXZhdGVJcEFkZHJlc3NlcyA9IHJvc05ldHdvcmtJbnRlcmZhY2UuYXR0clNlY29uZGFyeVByaXZhdGVJcEFkZHJlc3NlcztcbiAgICB9XG59XG4iXX0=