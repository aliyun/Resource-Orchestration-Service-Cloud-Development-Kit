"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Instance = exports.InstanceProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ecs_generated_1 = require("./ecs.generated");
Object.defineProperty(exports, "InstanceProperty", { enumerable: true, get: function () { return ecs_generated_1.RosInstance; } });
// Generated from the AliCloud ROS Resource Specification
const vpc_1 = require("./vpc");
const vswitch_1 = require("./vswitch");
const securitygroup_1 = require("./securitygroup");
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::ECS::Instance`, which is used to create an Elastic Compute Service (ECS) instance.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosInstance`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-ecs-instance
 */
class Instance extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosInstance = new ecs_generated_1.RosInstance(this, id, {
            dedicatedHostId: props.dedicatedHostId,
            resourceGroupId: props.resourceGroupId,
            systemDiskDescription: props.systemDiskDescription,
            instanceChargeType: props.instanceChargeType === undefined || props.instanceChargeType === null ? 'PostPaid' : props.instanceChargeType,
            ramRoleName: props.ramRoleName,
            privatePoolOptions: props.privatePoolOptions,
            systemDiskPerformanceLevel: props.systemDiskPerformanceLevel,
            imageId: props.imageId,
            systemDiskDiskName: props.systemDiskDiskName,
            storageSetId: props.storageSetId,
            useAdditionalService: props.useAdditionalService,
            hostName: props.hostName,
            tags: props.tags,
            vSwitchId: props.vSwitchId,
            period: props.period === undefined || props.period === null ? 1 : props.period,
            imageFamily: props.imageFamily,
            deletionProtection: props.deletionProtection,
            httpEndpoint: props.httpEndpoint,
            securityGroupIds: props.securityGroupIds,
            internetChargeType: props.internetChargeType === undefined || props.internetChargeType === null ? 'PayByTraffic' : props.internetChargeType,
            spotInterruptionBehavior: props.spotInterruptionBehavior === undefined || props.spotInterruptionBehavior === null ? 'Terminate' : props.spotInterruptionBehavior,
            instanceName: props.instanceName,
            deploymentSetId: props.deploymentSetId,
            internetMaxBandwidthOut: props.internetMaxBandwidthOut === undefined || props.internetMaxBandwidthOut === null ? 1 : props.internetMaxBandwidthOut,
            vpcId: props.vpcId,
            affinity: props.affinity,
            securityEnhancementStrategy: props.securityEnhancementStrategy,
            periodUnit: props.periodUnit === undefined || props.periodUnit === null ? 'Month' : props.periodUnit,
            tenancy: props.tenancy,
            privateIpAddress: props.privateIpAddress,
            description: props.description,
            diskMappings: props.diskMappings,
            systemDiskSize: props.systemDiskSize,
            userData: props.userData,
            autoRenew: props.autoRenew === undefined || props.autoRenew === null ? 'False' : props.autoRenew,
            spotDuration: props.spotDuration,
            storageSetPartitionNumber: props.storageSetPartitionNumber,
            spotPriceLimit: props.spotPriceLimit,
            zoneIds: props.zoneIds,
            instanceType: props.instanceType,
            allocatePublicIp: props.allocatePublicIp === undefined || props.allocatePublicIp === null ? true : props.allocatePublicIp,
            spotStrategy: props.spotStrategy,
            passwordInherit: props.passwordInherit,
            password: props.password,
            autoRenewPeriod: props.autoRenewPeriod === undefined || props.autoRenewPeriod === null ? 1 : props.autoRenewPeriod,
            keyPairName: props.keyPairName,
            ioOptimized: props.ioOptimized === undefined || props.ioOptimized === null ? 'optimized' : props.ioOptimized,
            zoneId: props.zoneId,
            hpcClusterId: props.hpcClusterId,
            securityGroupId: props.securityGroupId,
            deploymentSetGroupNo: props.deploymentSetGroupNo,
            systemDiskCategory: props.systemDiskCategory === undefined || props.systemDiskCategory === null ? 'cloud_efficiency' : props.systemDiskCategory,
            httpTokens: props.httpTokens,
            creditSpecification: props.creditSpecification,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosInstance;
        this.attrHostName = rosInstance.attrHostName;
        this.attrInnerIp = rosInstance.attrInnerIp;
        this.attrInstanceId = rosInstance.attrInstanceId;
        this.attrPrimaryNetworkInterfaceId = rosInstance.attrPrimaryNetworkInterfaceId;
        this.attrPrivateIp = rosInstance.attrPrivateIp;
        this.attrPublicIp = rosInstance.attrPublicIp;
        this.attrSecurityGroupIds = rosInstance.attrSecurityGroupIds;
        this.attrZoneId = rosInstance.attrZoneId;
    }
    /**
     * Create prerequisite resource(s) required to an ECS instance: VPC, VSwitch, and(or) security group.
     * @param zoneId Required when creating a VSwitch.
     * @param vpcCidrBlock Optional when creating a VPC. Default value is 192.168.0.0/16.
     * @param vSwitchCidrBlock Optional when creating a VSwitch. Default value is 192.168.0.0/24.
     * @param whetherCreateSecurityGroup Whether to create a security group. Default value is true.
     */
    autoCreateDependencies(zoneId = undefined, vpcCidrBlock = undefined, vSwitchCidrBlock = undefined, whetherCreateSecurityGroup = true) {
        let vpc = undefined;
        let vSwitch = undefined;
        let securityGroup = undefined;
        let vpcId = undefined;
        let vSwitchId = undefined;
        let securityGroupId = undefined;
        let instance = this.resource;
        if (instance.vSwitchId === undefined) {
            zoneId = zoneId || instance.zoneId;
            if (zoneId === undefined) {
                throw new Error('zoneId is required when creating a VSwitch.');
            }
            if (instance.vpcId === undefined) {
                if ((vpcCidrBlock === undefined) !== (vSwitchCidrBlock === undefined)) {
                    throw new Error('Both vpcCidrBlock and vSwitchCidrBlock must be specified or neither.');
                }
                vpcCidrBlock = vpcCidrBlock || '192.168.0.0/16';
                vpc = new vpc_1.Vpc(this.scope, `AutoCreatedVpcFor${this.id}`, {
                    cidrBlock: vpcCidrBlock,
                    description: 'This is auto created by ROS-CDK.',
                });
                vpcId = vpc.attrVpcId;
            }
            else {
                vpcId = instance.vpcId;
                if (vSwitchCidrBlock === undefined) {
                    throw new Error('vSwitchCidrBlock is mandatory when giving a Vpc and creating a VSwitch.');
                }
            }
            vSwitchCidrBlock = vSwitchCidrBlock || '192.168.0.0/24';
            vSwitch = new vswitch_1.VSwitch(this.scope, `AutoCreatedVSwitchFor${this.id}`, {
                vpcId: vpcId,
                cidrBlock: vSwitchCidrBlock,
                description: 'This is auto created by ROS-CDK.',
                zoneId: zoneId,
            });
            vSwitchId = vSwitch.attrVSwitchId;
        }
        else {
            vSwitchId = instance.vSwitchId;
        }
        if (whetherCreateSecurityGroup && instance.securityGroupId === undefined && instance.securityGroupIds === undefined) {
            securityGroup = new securitygroup_1.SecurityGroup(this.scope, `AutoCreatedSecurityGroupFor${this.id}`, {
                vpcId: vpcId,
                description: 'This is auto created by ROS-CDK.',
            });
            securityGroupId = securityGroup.attrSecurityGroupId;
        }
        else {
            securityGroupId = instance.securityGroupId;
        }
        instance.vpcId = vpcId;
        instance.vSwitchId = vSwitchId;
        instance.securityGroupId = securityGroupId;
        return [vpc, vSwitch, securityGroup];
    }
    /**
     * Add one or more security groups to an ECS instance.
     * @param securityGroups Security groups or security group IDs.
     */
    addSecurityGroups(...securityGroups) {
        let instance = this.resource;
        let originalSecurityGroupIds = instance.securityGroupIds;
        let newSecurityGroupIds = [];
        if (instance.securityGroupId !== undefined) {
            newSecurityGroupIds.push(instance.securityGroupId);
        }
        for (let securityGroup of securityGroups) {
            if (typeof securityGroup === 'string') {
                newSecurityGroupIds.push(securityGroup);
            }
            else {
                newSecurityGroupIds.push(securityGroup.attrSecurityGroupId);
            }
        }
        if (ros.isResolvableObject(originalSecurityGroupIds)) {
            newSecurityGroupIds = ros.Fn.listMerge([originalSecurityGroupIds, newSecurityGroupIds]);
        }
        else if (originalSecurityGroupIds !== undefined) {
            newSecurityGroupIds = originalSecurityGroupIds.concat(newSecurityGroupIds);
        }
        instance.securityGroupId = undefined;
        instance.securityGroupIds = newSecurityGroupIds;
    }
    /**
     * Add one or more commands to the userdata of an ECS instance.
     * @param commands Commands to be added.
     */
    addUserDataCommands(...commands) {
        let instance = this.resource;
        let commandsAsString = [];
        if (instance.userData !== undefined) {
            commandsAsString.push(instance.userData);
        }
        for (let command of commands) {
            if (ros.isResolvableObject(command)) {
                command = command.toString();
            }
            commandsAsString.push(command);
        }
        instance.userData = ros.Fn.join('\n', commandsAsString);
    }
}
exports.Instance = Instance;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5zdGFuY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbnN0YW5jZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw4Q0FBOEM7QUFDOUMsbURBQThDO0FBT3RCLGlHQVBmLDJCQUFXLE9BT29CO0FBTnhDLHlEQUF5RDtBQUN6RCwrQkFBNEI7QUFDNUIsdUNBQW9DO0FBQ3BDLG1EQUFnRDtBQThWaEQ7Ozs7R0FJRztBQUNILE1BQWEsUUFBUyxTQUFRLEdBQUcsQ0FBQyxRQUFRO0lBOEN0Qzs7OztPQUlHO0lBQ0gsWUFBWSxLQUFvQixFQUFFLEVBQVUsRUFBRSxLQUFvQixFQUFFLG1DQUEyQyxJQUFJO1FBQy9HLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDakIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUM7UUFDYixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsZ0NBQWdDLEdBQUcsZ0NBQWdDLENBQUM7UUFFekUsTUFBTSxXQUFXLEdBQUcsSUFBSSwyQkFBVyxDQUFDLElBQUksRUFBRSxFQUFFLEVBQUc7WUFDM0MsZUFBZSxFQUFFLEtBQUssQ0FBQyxlQUFlO1lBQ3RDLGVBQWUsRUFBRSxLQUFLLENBQUMsZUFBZTtZQUN0QyxxQkFBcUIsRUFBRSxLQUFLLENBQUMscUJBQXFCO1lBQ2xELGtCQUFrQixFQUFFLEtBQUssQ0FBQyxrQkFBa0IsS0FBSyxTQUFTLElBQUksS0FBSyxDQUFDLGtCQUFrQixLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsa0JBQWtCO1lBQ3ZJLFdBQVcsRUFBRSxLQUFLLENBQUMsV0FBVztZQUM5QixrQkFBa0IsRUFBRSxLQUFLLENBQUMsa0JBQWtCO1lBQzVDLDBCQUEwQixFQUFFLEtBQUssQ0FBQywwQkFBMEI7WUFDNUQs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Q0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1NBQzlFO1FBRUQsUUFBUSxDQUFDLGVBQWUsR0FBRyxTQUFTLENBQUM7UUFDckMsUUFBUSxDQUFDLGdCQUFnQixHQUFHLG1CQUFtQixDQUFDO0lBQ3BELENBQUM7SUFFRDs7O09BR0c7SUFDSSxtQkFBbUIsQ0FBQyxHQUFHLFFBQXNDO1FBQ2hFLElBQUksUUFBUSxHQUFHLElBQUksQ0FBQyxRQUF1QixDQUFDO1FBQzVDLElBQUksZ0JBQWdCLEdBQWlDLEVBQUUsQ0FBQztRQUN4RCxJQUFJLFFBQVEsQ0FBQyxRQUFRLEtBQUssU0FBUyxFQUFFO1lBQ2pDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDNUM7UUFDRCxLQUFLLElBQUksT0FBTyxJQUFJLFFBQVEsRUFBRTtZQUMxQixJQUFJLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsRUFBRTtnQkFDakMsT0FBTyxHQUFHLE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQzthQUNoQztZQUNELGdCQUFnQixDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUNsQztRQUNELFFBQVEsQ0FBQyxRQUFRLEdBQUcsR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLGdCQUFnQixDQUFDLENBQUM7SUFDNUQsQ0FBQztDQUNKO0FBaFBELDRCQWdQQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHJvcyBmcm9tICdAYWxpY2xvdWQvcm9zLWNkay1jb3JlJztcbmltcG9ydCB7IFJvc0luc3RhbmNlIH0gZnJvbSAnLi9lY3MuZ2VuZXJhdGVkJztcbi8vIEdlbmVyYXRlZCBmcm9tIHRoZSBBbGlDbG91ZCBST1MgUmVzb3VyY2UgU3BlY2lmaWNhdGlvblxuaW1wb3J0IHsgVnBjIH0gZnJvbSAnLi92cGMnO1xuaW1wb3J0IHsgVlN3aXRjaCB9IGZyb20gJy4vdnN3aXRjaCc7XG5pbXBvcnQgeyBTZWN1cml0eUdyb3VwIH0gZnJvbSAnLi9zZWN1cml0eWdyb3VwJztcblxuXG5leHBvcnQgeyBSb3NJbnN0YW5jZSBhcyBJbnN0YW5jZVByb3BlcnR5IH07XG5cbi8qKlxuICogUHJvcGVydGllcyBmb3IgZGVmaW5pbmcgYSBgSW5zdGFuY2VgLlxuICogU2VlIGh0dHBzOi8vd3d3LmFsaWJhYmFjbG91ZC5jb20vaGVscC9yb3MvZGV2ZWxvcGVyLXJlZmVyZW5jZS9hbGl5dW4tZWNzLWluc3RhbmNlXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSW5zdGFuY2VQcm9wcyB7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBpbnN0YW5jZVR5cGU6IEVjcyBpbnN0YW5jZSBzdXBwb3J0ZWQgaW5zdGFuY2UgdHlwZSwgbWFrZSBzdXJlIGl0IHNob3VsZCBiZSBjb3JyZWN0LlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGluc3RhbmNlVHlwZTogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgYWZmaW5pdHk6IFNwZWNpZmllcyB3aGV0aGVyIHRvIGFzc29jaWF0ZSB0aGUgaW5zdGFuY2Ugb24gYSBkZWRpY2F0ZWQgaG9zdCB3aXRoIHRoZSBkZWRpY2F0ZWQgaG9zdC4gVmFsaWQgdmFsdWVzOlxuICAgICAqIC0gKipkZWZhdWx0Kio6IGRvZXMgbm90IGFzc29jaWF0ZSB0aGUgRUNTIGluc3RhbmNlIHdpdGggdGhlIGRlZGljYXRlZCBob3N0LiBXaGVuIHlvdSBzdGFydCBhbiBpbnN0YW5jZSB0aGF0IHdhcyBzdG9wcGVkIGluIGVjb25vbWljYWwgbW9kZSwgdGhlIGluc3RhbmNlIGlzIGF1dG9tYXRpY2FsbHkgZGVwbG95ZWQgdG8gYW5vdGhlciBkZWRpY2F0ZWQgaG9zdCBpbiB0aGUgYXV0b21hdGljIGRlcGxveW1lbnQgcmVzb3VyY2UgcG9vbCBpZiB0aGUgYXZhaWxhYmxlIHJlc291cmNlcyBvZiB0aGUgb3JpZ2luYWwgZGVkaWNhdGVkIGhvc3QgYXJlIGluc3VmZmljaWVudC5cbiAgICAgKiAtICoqaG9zdCoqOiBhc3NvY2lhdGVzIHRoZSBFQ1MgaW5zdGFuY2Ugd2l0aCB0aGUgZGVkaWNhdGVkIGhvc3QuIFdoZW4geW91IHN0YXJ0IGFuIGluc3RhbmNlIHRoYXQgd2FzIHN0b3BwZWQgaW4gZWNvbm9taWNhbCBtb2RlLCB0aGUgaW5zdGFuY2UgcmVtYWlucyBvbiB0aGUgb3JpZ2luYWwgZGVkaWNhdGVkIGhvc3QuIElmIHRoZSBhdmFpbGFibGUgcmVzb3VyY2VzIG9mIHRoZSBvcmlnaW5hbCBkZWRpY2F0ZWQgaG9zdCBhcmUgaW5zdWZmaWNpZW50LCB0aGUgaW5zdGFuY2UgY2Fubm90IHN0YXJ0LlxuICAgICAqIERlZmF1bHQgdmFsdWU6ICoqZGVmYXVsdCoqLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGFmZmluaXR5Pzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgYWxsb2NhdGVQdWJsaWNJcDogVGhlIHB1YmxpYyBpcCBmb3IgZWNzIGluc3RhbmNlLCBpZiBwcm9wZXJ0aWVzIGlzIHRydWUsIHdpbGwgYWxsb2NhdGUgcHVibGljIGlwLiBJZiBwcm9wZXJ0eSBJbnRlcm5ldE1heEJhbmR3aWR0aE91dCBzZXQgdG8gMCwgaXQgd2lsbCBub3QgYXNzaWduIHB1YmxpYyBpcC5cbiAgICAgKi9cbiAgICByZWFkb25seSBhbGxvY2F0ZVB1YmxpY0lwPzogYm9vbGVhbiB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGF1dG9SZW5ldzogV2hldGhlciByZW5ldyB0aGUgZmVlIGF1dG9tYXRpY2FsbHk/IFdoZW4gdGhlIHBhcmFtZXRlciBJbnN0YW5jZUNoYXJnZVR5cGUgaXMgUHJlUGFpZCwgaXQgd2lsbCB0YWtlIGVmZmVjdC4gUmFuZ2Ugb2YgdmFsdWU6VHJ1ZTogYXV0b21hdGljIHJlbmV3YWwuRmFsc2U6IG5vIGF1dG9tYXRpYyByZW5ld2FsLiBEZWZhdWx0IHZhbHVlIGlzIEZhbHNlLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGF1dG9SZW5ldz86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGF1dG9SZW5ld1BlcmlvZDogVGhlIHRpbWUgcGVyaW9kIG9mIGF1dG8gcmVuZXcuIFdoZW4gdGhlIHBhcmFtZXRlciBJbnN0YW5jZUNoYXJnZVR5cGUgaXMgUHJlUGFpZCwgaXQgd2lsbCB0YWtlIGVmZmVjdC5JdCBjb3VsZCBiZSAxLCAyLCAzLCA2LCAxMiwgMjQsIDM2LCA0OCwgNjAuIERlZmF1bHQgdmFsdWUgaXMgMS5cbiAgICAgKi9cbiAgICByZWFkb25seSBhdXRvUmVuZXdQZXJpb2Q/OiBudW1iZXIgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBjcmVkaXRTcGVjaWZpY2F0aW9uOiBUaGUgcGVyZm9ybWFuY2UgbW9kZSBvZiB0aGUgYnVyc3RhYmxlIGluc3RhbmNlLiBWYWxpZCB2YWx1ZXM6XG4gICAgICogLSAqKlN0YW5kYXJkKio6IHRoZSBzdGFuZGFyZCBtb2RlLlxuICAgICAqIC0gKipVbmxpbWl0ZWQqKjogdGhlIHVubGltaXRlZCBtb2RlLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGNyZWRpdFNwZWNpZmljYXRpb24/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBkZWRpY2F0ZWRIb3N0SWQ6IHdoaWNoIGRlZGljYXRlZCBob3N0IHdpbGwgYmUgZGVwbG95ZWRcbiAgICAgKi9cbiAgICByZWFkb25seSBkZWRpY2F0ZWRIb3N0SWQ/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBkZWxldGlvblByb3RlY3Rpb246IFdoZXRoZXIgYW4gaW5zdGFuY2UgY2FuIGJlIHJlbGVhc2VkIG1hbnVhbGx5IHRocm91Z2ggdGhlIGNvbnNvbGUgb3IgQVBJLCBkZWxldGlvbiBwcm90ZWN0aW9uIG9ubHkgc3VwcG9ydCBwb3N0UGFpZCBpbnN0YW5jZVxuICAgICAqL1xuICAgIHJlYWRvbmx5IGRlbGV0aW9uUHJvdGVjdGlvbj86IGJvb2xlYW4gfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBkZXBsb3ltZW50U2V0R3JvdXBObzogVGhlIG51bWJlciBvZiB0aGUgZGVwbG95bWVudCBzZXQgZ3JvdXAgdG8gd2hpY2ggdG8gZGVwbG95IHRoZSBpbnN0YW5jZS4gSWYgdGhlIGRlcGxveW1lbnQgc2V0IHNwZWNpZmllZCBieSAqKkRlcGxveW1lbnRTZXRJZCoqIHVzZXMgdGhlIGhpZ2ggYXZhaWxhYmlsaXR5IGdyb3VwIHN0cmF0ZWd5IChBdmFpbGFiaWxpdHlHcm91cCksIHlvdSBjYW4gdXNlICoqRGVwbG95bWVudFNldEdyb3VwTm8qKiB0byBzcGVjaWZ5IGEgZGVwbG95bWVudCBzZXQgZ3JvdXAgaW4gdGhlIGRlcGxveW1lbnQgc2V0LiBWYWxpZCB2YWx1ZXM6IDEgdG8gNy5cbiAgICAgKi9cbiAgICByZWFkb25seSBkZXBsb3ltZW50U2V0R3JvdXBObz86IG51bWJlciB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGRlcGxveW1lbnRTZXRJZDogRGVwbG95bWVudCBzZXQgSUQuXG4gICAgICovXG4gICAgcmVhZG9ubHkgZGVwbG95bWVudFNldElkPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgZGVzY3JpcHRpb246IERlc2NyaXB0aW9uIG9mIHRoZSBpbnN0YW5jZSwgWzIsIDI1Nl0gY2hhcmFjdGVycy4gRG8gbm90IGZpbGwgb3IgZW1wdHksIHRoZSBkZWZhdWx0IGlzIGVtcHR5LlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGRlc2NyaXB0aW9uPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgZGlza01hcHBpbmdzOiBEaXNrIG1hcHBpbmdzIHRvIGF0dGFjaCB0byBpbnN0YW5jZS4gTWF4IHN1cHBvcnQgMTYgZGlza3MuXG4gICAgICogSWYgdGhlIGltYWdlIGNvbnRhaW5zIGEgZGF0YSBkaXNrLCB5b3UgY2FuIHNwZWNpZnkgb3RoZXIgcGFyYW1ldGVycyBvZiB0aGUgZGF0YSBkaXNrIHZpYSB0aGUgc2FtZSB2YWx1ZSBvZiBwYXJhbWV0ZXIgXCJEZXZpY2VcIi4gSWYgcGFyYW1ldGVyIFwiQ2F0ZWdvcnlcIiBpcyBub3Qgc3BlY2lmaWVkLCBpdCB3aWxsIGJlIGNsb3VkX2VmZmljaWVuY3kgaW5zdGVhZCBvZiBcIkNhdGVnb3J5XCIgb2YgZGF0YSBkaXNrIGluIHRoZSBpbWFnZS5cbiAgICAgKi9cbiAgICByZWFkb25seSBkaXNrTWFwcGluZ3M/OiBBcnJheTxSb3NJbnN0YW5jZS5EaXNrTWFwcGluZ3NQcm9wZXJ0eSB8IHJvcy5JUmVzb2x2YWJsZT4gfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBob3N0TmFtZTogSG9zdCBuYW1lIG9mIGNyZWF0ZWQgZWNzIGluc3RhbmNlLiBhdCBsZWFzdCAyIGNoYXJhY3RlcnMsIGFuZCAnLicgJy0nIElzIG5vdCB0aGUgZmlyc3QgYW5kIGxhc3QgY2hhcmFjdGVycyBhcyBob3N0bmFtZSwgbm90IGNvbnRpbnVvdXMgdXNlLiBXaW5kb3dzIHBsYXRmb3JtIGNhbiBiZSB1cCB0byAxNSBjaGFyYWN0ZXJzLCBhbGxvd2luZyBsZXR0ZXJzICh3aXRob3V0IGxpbWl0aW5nIGNhc2UpLCBudW1iZXJzIGFuZCAnLScsIGFuZCBkb2VzIG5vdCBzdXBwb3J0IHRoZSBudW1iZXIgb2YgcG9pbnRzLCBub3QgYWxsIGlzIGRpZ2l0YWwgKCcuJykuT3RoZXIgKExpbnV4LCBldGMuKSBwbGF0Zm9ybSB1cCB0byA2NCBjaGFyYWN0ZXJzLCBhbGxvd2luZyBzdXBwb3J0IG51bWJlciBtdWx0aXBsZSBwb2ludHMgZm9yIHRoZSBwZXJpb2QgYmV0d2VlbiB0aGUgcG9pbnRzLCBlYWNoIHBlcm1pdCBsZXR0ZXJzICh3aXRob3V0IGxpbWl0aW5nIGNhc2UpLCBudW1iZXJzIGFuZCAnLScgY29tcG9uZW50cy5cbiAgICAgKi9cbiAgICByZWFkb25seSBob3N0TmFtZT86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGhwY0NsdXN0ZXJJZDogVGhlIEhQQyBjbHVzdGVyIElEIHRvIHdoaWNoIHRoZSBpbnN0YW5jZSBiZWxvbmdzLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGhwY0NsdXN0ZXJJZD86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGh0dHBFbmRwb2ludDogU3BlY2lmaWVzIHdoZXRoZXIgdGhlIGFjY2VzcyBjaGFubmVsIGlzIGVuYWJsZWQgZm9yIGluc3RhbmNlIG1ldGFkYXRhLiBWYWxpZCB2YWx1ZXM6XG4gICAgICogLSAqKmVuYWJsZWQqKlxuICAgICAqIC0gKipkaXNhYmxlZCoqXG4gICAgICogRGVmYXVsdCB2YWx1ZTogKiplbmFibGVkKiouXG4gICAgICovXG4gICAgcmVhZG9ubHkgaHR0cEVuZHBvaW50Pzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgaHR0cFRva2VuczogU3BlY2lmaWVzIHdoZXRoZXIgdGhlIHNlY3VyaXR5IGhhcmRlbmluZyBtb2RlIChJTURTdjIpIGlzIGZvcmNlZnVsbHkgdXNlZCB0byBhY2Nlc3MgaW5zdGFuY2UgbWV0YWRhdGEuIFZhbGlkIHZhbHVlczpcbiAgICAgKiAtICoqb3B0aW9uYWwqKjogZG9lcyBub3QgZm9yY2VmdWxseSB1c2UgdGhlIHNlY3VyaXR5LWVuaGFuY2VkIG1vZGUgKElNRFN2MikuXG4gICAgICogLSAqKnJlcXVpcmVkKio6IGZvcmNlZnVsbHkgdXNlcyB0aGUgc2VjdXJpdHktZW5oYW5jZWQgbW9kZSAoSU1EU3YyKS4gQWZ0ZXIgeW91IHNldCB0aGlzIHBhcmFtZXRlciB0byByZXF1aXJlZCwgeW91IGNhbm5vdCBhY2Nlc3MgaW5zdGFuY2UgbWV0YWRhdGEgaW4gbm9ybWFsIG1vZGUuXG4gICAgICogRGVmYXVsdCB2YWx1ZTogKipvcHRpb25hbCoqLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGh0dHBUb2tlbnM/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBpbWFnZUZhbWlseTogVGhlIG5hbWUgb2YgdGhlIGltYWdlIGZhbWlseS4gWW91IGNhbiBzZXQgdGhpcyBwYXJhbWV0ZXIgdG8gb2J0YWluIHRoZSBsYXRlc3QgYXZhaWxhYmxlIGN1c3RvbSBpbWFnZSBmcm9tIHRoZSBzcGVjaWZpZWQgaW1hZ2UgZmFtaWx5IHRvIGNyZWF0ZSB0aGUgaW5zdGFuY2UuXG4gICAgICogLSAqKkltYWdlRmFtaWx5KiogbXVzdCBiZSBlbXB0eSBpZiAqKkltYWdlSWQqKiBpcyBzcGVjaWZpZWQuXG4gICAgICogLSAqKkltYWdlRmFtaWx5KiogY2FuIGJlIHNwZWNpZmllZCBpZiAqKkltYWdlSWQqKiBpcyBub3Qgc3BlY2lmaWVkLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGltYWdlRmFtaWx5Pzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgaW1hZ2VJZDogSW1hZ2UgSUQgdG8gY3JlYXRlIGVjcyBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICByZWFkb25seSBpbWFnZUlkPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgaW5zdGFuY2VDaGFyZ2VUeXBlOiBJbnN0YW5jZSBDaGFyZ2UgdHlwZSwgYWxsb3dlZCB2YWx1ZTogUHJlcGFpZCBhbmQgUG9zdHBhaWQuIElmIHNwZWNpZmllZCBQcmVwYWlkLCBwbGVhc2UgZW5zdXJlIHlvdSBoYXZlIHN1ZmZpY2llbnQgYmFsYW5jZSBpbiB5b3VyIGFjY291bnQuIE9yIGluc3RhbmNlIGNyZWF0aW9uIHdpbGwgYmUgZmFpbHVyZS4gRGVmYXVsdCB2YWx1ZSBpcyBQb3N0cGFpZC5cbiAgICAgKi9cbiAgICByZWFkb25seSBpbnN0YW5jZUNoYXJnZVR5cGU/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBpbnN0YW5jZU5hbWU6IERpc3BsYXkgbmFtZSBvZiB0aGUgaW5zdGFuY2UsIFsyLCAxMjhdIEVuZ2xpc2ggb3IgQ2hpbmVzZSBjaGFyYWN0ZXJzLCBtdXN0IHN0YXJ0IHdpdGggYSBsZXR0ZXIgb3IgQ2hpbmVzZSBpbiBzaXplLCBjYW4gY29udGFpbiBudW1iZXJzLCAnXycgb3IgJy4nLCAnLSdcbiAgICAgKi9cbiAgICByZWFkb25seSBpbnN0YW5jZU5hbWU/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBpbnRlcm5ldENoYXJnZVR5cGU6IEluc3RhbmNlIGludGVybmV0IGFjY2VzcyBjaGFyZ2UgdHlwZS5TdXBwb3J0ICdQYXlCeUJhbmR3aWR0aCcgYW5kICdQYXlCeVRyYWZmaWMnIG9ubHkuIERlZmF1bHQgaXMgUGF5QnlUcmFmZmljXG4gICAgICovXG4gICAgcmVhZG9ubHkgaW50ZXJuZXRDaGFyZ2VUeXBlPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgaW50ZXJuZXRNYXhCYW5kd2lkdGhPdXQ6IFNldCBpbnRlcm5ldCBvdXRwdXQgYmFuZHdpZHRoIG9mIGluc3RhbmNlLiBVbml0IGlzIE1icHMoTWVnYSBiaXQgcGVyIHNlY29uZCkuIFJhbmdlIGlzIFswLDIwMF0uIERlZmF1bHQgaXMgMS5XaGlsZSB0aGUgcHJvcGVydHkgaXMgbm90IDAsIHB1YmxpYyBpcCB3aWxsIGJlIGFzc2lnbmVkIGZvciBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICByZWFkb25seSBpbnRlcm5ldE1heEJhbmR3aWR0aE91dD86IG51bWJlciB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGlvT3B0aW1pemVkOiBUaGUgJ29wdGltaXplZCcgaW5zdGFuY2UgY2FuIHByb3ZpZGUgYmV0dGVyIElPIHBlcmZvcm1hbmNlLiBTdXBwb3J0ICdub25lJyBhbmQgJ29wdGltaXplZCcgb25seSwgZGVmYXVsdCBpcyAnb3B0aW1pemVkJy5cbiAgICAgKi9cbiAgICByZWFkb25seSBpb09wdGltaXplZD86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGtleVBhaXJOYW1lOiBTU0gga2V5IHBhaXIgbmFtZS5cbiAgICAgKi9cbiAgICByZWFkb25seSBrZXlQYWlyTmFtZT86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHBhc3N3b3JkOiBQYXNzd29yZCBvZiBjcmVhdGVkIGVjcyBpbnN0YW5jZS4gTXVzdCBjb250YWluIGF0IGxlYXN0IDMgdHlwZXMgb2Ygc3BlY2lhbCBjaGFyYWN0ZXIsIGxvd2VyIGNoYXJhY3RlciwgdXBwZXIgY2hhcmFjdGVyLCBudW1iZXIuXG4gICAgICovXG4gICAgcmVhZG9ubHkgcGFzc3dvcmQ/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBwYXNzd29yZEluaGVyaXQ6IFNwZWNpZmllcyB3aGV0aGVyIHRvIHVzZSB0aGUgcGFzc3dvcmQgcHJlc2V0IGluIHRoZSBpbWFnZS4gVG8gdXNlIHRoZSBQYXNzd29yZEluaGVyaXQgcGFyYW1ldGVyLCB0aGUgUGFzc3dvcmQgcGFyYW1ldGVyIG11c3QgYmUgZW1wdHkgYW5kIHlvdSBtdXN0IG1ha2Ugc3VyZSB0aGF0IHRoZSBzZWxlY3RlZCBpbWFnZSBoYXMgYSBwYXNzd29yZCBjb25maWd1cmVkLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHBhc3N3b3JkSW5oZXJpdD86IGJvb2xlYW4gfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBwZXJpb2Q6IFByZXBhaWQgdGltZSBwZXJpb2QuIFVuaXQgaXMgbW9udGgsIGl0IGNvdWxkIGJlIGZyb20gMSB0byA5IG9yIDEyLCAyNCwgMzYsIDQ4LCA2MC4gRGVmYXVsdCB2YWx1ZSBpcyAxLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHBlcmlvZD86IG51bWJlciB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHBlcmlvZFVuaXQ6IFVuaXQgb2YgcHJlcGFpZCB0aW1lIHBlcmlvZCwgaXQgY291bGQgYmUgV2Vla1xcL01vbnRoXFwvWWVhci4gRGVmYXVsdCB2YWx1ZSBpcyBNb250aC5cbiAgICAgKi9cbiAgICByZWFkb25seSBwZXJpb2RVbml0Pzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgcHJpdmF0ZUlwQWRkcmVzczogUHJpdmF0ZSBJUCBmb3IgdGhlIGluc3RhbmNlIGNyZWF0ZWQuIE9ubHkgd29ya3MgZm9yIFZQQyBpbnN0YW5jZSBhbmQgY2Fubm90IGR1cGxpY2F0ZWQgd2l0aCBleGlzdGluZyBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICByZWFkb25seSBwcml2YXRlSXBBZGRyZXNzPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgcHJpdmF0ZVBvb2xPcHRpb25zOiBUaGUgb3B0aW9ucyBvZiB0aGUgcHJpdmF0ZSBwb29sLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHByaXZhdGVQb29sT3B0aW9ucz86IFJvc0luc3RhbmNlLlByaXZhdGVQb29sT3B0aW9uc1Byb3BlcnR5IHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgcmFtUm9sZU5hbWU6IEluc3RhbmNlIFJBTSByb2xlIG5hbWUuIFRoZSBuYW1lIGlzIHByb3ZpZGVkIGFuZCBtYWludGFpbmVkIGJ5IFJlc291cmNlIEFjY2VzcyBNYW5hZ2VtZW50IChSQU0pIGFuZCBjYW4gYmUgcXVlcmllZCB1c2luZyBMaXN0Um9sZXMuIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgUkFNIEFQSSBDcmVhdGVSb2xlIGFuZCBMaXN0Um9sZXMuXG4gICAgICovXG4gICAgcmVhZG9ubHkgcmFtUm9sZU5hbWU/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSByZXNvdXJjZUdyb3VwSWQ6IFJlc291cmNlIGdyb3VwIGlkLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHJlc291cmNlR3JvdXBJZD86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHNlY3VyaXR5RW5oYW5jZW1lbnRTdHJhdGVneTpcbiAgICAgKi9cbiAgICByZWFkb25seSBzZWN1cml0eUVuaGFuY2VtZW50U3RyYXRlZ3k/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBzZWN1cml0eUdyb3VwSWQ6IFNlY3VyaXR5IGdyb3VwIHRvIGNyZWF0ZSBlY3MgaW5zdGFuY2UuIEZvciBjbGFzc2ljIGluc3RhbmNlIG5lZWQgdGhlIHNlY3VyaXR5IGdyb3VwIG5vdCBiZWxvbmcgdG8gVlBDLCBmb3IgVlBDIGluc3RhbmNlLCBwbGVhc2UgbWFrZSBzdXJlIHRoZSBzZWN1cml0eSBncm91cCBiZWxvbmcgdG8gc3BlY2lmaWVkIFZQQy5cbiAgICAgKi9cbiAgICByZWFkb25seSBzZWN1cml0eUdyb3VwSWQ/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBzZWN1cml0eUdyb3VwSWRzOiBUaGUgSUQgbGlzdCBvZiBzZWN1cml0eSBncm91cCB0byB3aGljaCB0byBhc3NpZ24gdGhlIGluc3RhbmNlLiBUaGUgbWF4IGxlbmd0aCBpcyBiYXNlZCBvbiB0aGUgbWF4aW11bSBudW1iZXIgb2Ygc2VjdXJpdHkgZ3JvdXBzIHRvIHdoaWNoIGFuIGluc3RhbmNlIGNhbiBiZWxvbmcuIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgdGhlIFwiU2VjdXJpdHkgZ3JvdXAgbGltaXRzXCIgc2VjdGlvbiBpbiBMaW1pdHMuXG4gICAgICovXG4gICAgcmVhZG9ubHkgc2VjdXJpdHlHcm91cElkcz86IEFycmF5PHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZT4gfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBzcG90RHVyYXRpb246IFRoZSBwcm90ZWN0aW9uIHBlcmlvZCBvZiB0aGUgcHJlZW1wdGlibGUgaW5zdGFuY2UuIFVuaXQ6IGhvdXJzLiBWYWxpZCB2YWx1ZXM6IDAsIDEsIDIsIDMsIDQsIDUsIGFuZCA2LlxuICAgICAqIFByb3RlY3Rpb24gcGVyaW9kcyBvZiAyLCAzLCA0LCA1LCBhbmQgNiBob3VycyBhcmUgaW4gaW52aXRhdGlvbmFsIHByZXZpZXcuIElmIHlvdSB3YW50IHRvIHNldCB0aGlzIHBhcmFtZXRlciB0byBvbmUgb2YgdGhlc2UgdmFsdWVzLCBzdWJtaXQgYSB0aWNrZXQuXG4gICAgICogSWYgdGhpcyBwYXJhbWV0ZXIgaXMgc2V0IHRvIDAsIG5vIHByb3RlY3Rpb24gcGVyaW9kIGlzIGNvbmZpZ3VyZWQgZm9yIHRoZSBwcmVlbXB0aWJsZSBpbnN0YW5jZS5cbiAgICAgKiBEZWZhdWx0IHZhbHVlOiAxLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHNwb3REdXJhdGlvbj86IG51bWJlciB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHNwb3RJbnRlcnJ1cHRpb25CZWhhdmlvcjogVGhlIGludGVycnVwdGlvbiBtb2RlIG9mIHRoZSBwcmVlbXB0aWJsZSBpbnN0YW5jZS4gRGVmYXVsdCB2YWx1ZTogVGVybWluYXRlLiBTZXQgdGhlIHZhbHVlIHRvIFRlcm1pbmF0ZSwgd2hpY2ggc3BlY2lmaWVzIHRvIHJlbGVhc2UgdGhlIGluc3RhbmNlLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHNwb3RJbnRlcnJ1cHRpb25CZWhhdmlvcj86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHNwb3RQcmljZUxpbWl0OiBUaGUgaG91cmx5IHByaWNlIHRocmVzaG9sZCBvZiBhIGluc3RhbmNlLCBhbmQgaXQgdGFrZXMgZWZmZWN0IG9ubHkgd2hlbiBwYXJhbWV0ZXIgSW5zdGFuY2VDaGFyZ2VUeXBlIGlzIFBvc3RQYWlkLiBUaHJlZSBkZWNpbWFscyBpcyBhbGxvd2VkIGF0IG1vc3QuXG4gICAgICovXG4gICAgcmVhZG9ubHkgc3BvdFByaWNlTGltaXQ/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBzcG90U3RyYXRlZ3k6IFRoZSBzcG90IHN0cmF0ZWd5IG9mIGEgUGF5LUFzLVlvdS1HbyBpbnN0YW5jZSwgYW5kIGl0IHRha2VzIGVmZmVjdCBvbmx5IHdoZW4gcGFyYW1ldGVyIEluc3RhbmNlQ2hhcmdlVHlwZSBpcyBQb3N0UGFpZC4gVmFsdWUgcmFuZ2U6IFwiTm9TcG90OiBBIHJlZ3VsYXIgUGF5LUFzLVlvdS1HbyBpbnN0YW5jZVwiLCBcIlNwb3RXaXRoUHJpY2VMaW1pdDogQSBwcmljZSB0aHJlc2hvbGQgZm9yIGEgc3BvdCBpbnN0YW5jZSwgXCJcIlNwb3RBc1ByaWNlR286IEEgcHJpY2UgdGhhdCBpcyBiYXNlZCBvbiB0aGUgaGlnaGVzdCBQYXktQXMtWW91LUdvIGluc3RhbmNlLiBcIkRlZmF1bHQgdmFsdWU6IE5vU3BvdC5cbiAgICAgKi9cbiAgICByZWFkb25seSBzcG90U3RyYXRlZ3k/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBzdG9yYWdlU2V0SWQ6IFRoZSBzdG9yYWdlIHNldCBJRC5cbiAgICAgKi9cbiAgICByZWFkb25seSBzdG9yYWdlU2V0SWQ/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBzdG9yYWdlU2V0UGFydGl0aW9uTnVtYmVyOiBUaGUgbWF4aW11bSBudW1iZXIgb2YgcGFydGl0aW9ucyBpbiB0aGUgc3RvcmFnZSBzZXQuIFRoZSB2YWx1ZSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byAyLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHN0b3JhZ2VTZXRQYXJ0aXRpb25OdW1iZXI/OiBudW1iZXIgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBzeXN0ZW1EaXNrQ2F0ZWdvcnk6IENhdGVnb3J5IG9mIHN5c3RlbSBkaXNrLiBEZWZhdWx0IGlzIGNsb3VkX2VmZmljaWVuY3kuIHN1cHBvcnQgY2xvdWR8Y2xvdWRfZWZmaWNpZW5jeXxjbG91ZF9zc2R8Y2xvdWRfZXNzZHxlcGhlbWVyYWxfc3NkfGNsb3VkX2F1dG98Y2xvdWRfZXNzZF9lbnRyeVxuICAgICAqL1xuICAgIHJlYWRvbmx5IHN5c3RlbURpc2tDYXRlZ29yeT86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHN5c3RlbURpc2tEZXNjcmlwdGlvbjogRGVzY3JpcHRpb24gb2YgY3JlYXRlZCBzeXN0ZW0gZGlzay5cbiAgICAgKi9cbiAgICByZWFkb25seSBzeXN0ZW1EaXNrRGVzY3JpcHRpb24/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBzeXN0ZW1EaXNrRGlza05hbWU6IE5hbWUgb2YgY3JlYXRlZCBzeXN0ZW0gZGlzay5cbiAgICAgKi9cbiAgICByZWFkb25seSBzeXN0ZW1EaXNrRGlza05hbWU/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBzeXN0ZW1EaXNrUGVyZm9ybWFuY2VMZXZlbDogVGhlIHBlcmZvcm1hbmNlIGxldmVsIG9mIHRoZSBlbmhhbmNlZCBTU0QgdXNlZCBhcyB0aGUgc3lzdGVtIGRpc2suRGVmYXVsdCB2YWx1ZTogUEwxLiBWYWxpZCB2YWx1ZXM6UEwwOiBBIHNpbmdsZSBlbmhhbmNlZCBTU0QgZGVsaXZlcnMgdXAgdG8gMTAsMDAwIHJhbmRvbSByZWFkXFwvd3JpdGUgSU9QUy5QTDE6IEEgc2luZ2xlIGVuaGFuY2VkIFNTRCBkZWxpdmVycyB1cCB0byA1MCwwMDAgcmFuZG9tIHJlYWRcXC93cml0ZSBJT1BTLlBMMjogQSBzaW5nbGUgZW5oYW5jZWQgU1NEIGRlbGl2ZXJzIHVwIHRvIDEwMCwwMDAgcmFuZG9tIHJlYWRcXC93cml0ZSBJT1BTLlBMMzogQSBzaW5nbGUgZW5oYW5jZWQgU1NEIGRlbGl2ZXJzIHVwIHRvIDEsMDAwLDAwMCByYW5kb20gcmVhZFxcL3dyaXRlIElPUFMuXG4gICAgICovXG4gICAgcmVhZG9ubHkgc3lzdGVtRGlza1BlcmZvcm1hbmNlTGV2ZWw/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBzeXN0ZW1EaXNrU2l6ZTogRGlzayBzaXplIG9mIHRoZSBzeXN0ZW0gZGlzaywgcmFuZ2UgZnJvbSAyMCB0byA1MDAgR0IuIElmIHlvdSBzcGVjaWZ5IHdpdGggeW91ciBvd24gaW1hZ2UsIG1ha2Ugc3VyZSB0aGUgc3lzdGVtIGRpc2sgc2l6ZSBiaWdnZXIgdGhhbiBpbWFnZSBzaXplLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHN5c3RlbURpc2tTaXplPzogbnVtYmVyIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgdGFnczogVGFncyB0byBhdHRhY2ggdG8gaW5zdGFuY2UuIE1heCBzdXBwb3J0IDIwIHRhZ3MgdG8gYWRkIGR1cmluZyBjcmVhdGUgaW5zdGFuY2UuIEVhY2ggdGFnIHdpdGggdHdvIHByb3BlcnRpZXMgS2V5IGFuZCBWYWx1ZSwgYW5kIEtleSBpcyByZXF1aXJlZC5cbiAgICAgKi9cbiAgICByZWFkb25seSB0YWdzPzogUm9zSW5zdGFuY2UuVGFnc1Byb3BlcnR5W107XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSB0ZW5hbmN5OiBTcGVjaWZpZXMgd2hldGhlciB0byBjcmVhdGUgdGhlIGluc3RhbmNlIG9uIGEgZGVkaWNhdGVkIGhvc3QuIFZhbGlkIHZhbHVlczpcbiAgICAgKiAtICoqZGVmYXVsdCoqOiBjcmVhdGVzIHRoZSBpbnN0YW5jZSBvbiBhIG5vbi1kZWRpY2F0ZWQgaG9zdC5cbiAgICAgKiAtICoqaG9zdCoqOiBjcmVhdGVzIHRoZSBpbnN0YW5jZSBvbiBhIGRlZGljYXRlZCBob3N0LiBJZiB5b3UgZG8gbm90IHNwZWNpZnkgKipEZWRpY2F0ZWRIb3N0SWQqKiwgQWxpYmFiYSBDbG91ZCBzZWxlY3RzIGEgZGVkaWNhdGVkIGhvc3QgZm9yIHRoZSBpbnN0YW5jZS5cbiAgICAgKiBEZWZhdWx0IHZhbHVlOiAqKmRlZmF1bHQqKi5cbiAgICAgKi9cbiAgICByZWFkb25seSB0ZW5hbmN5Pzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgdXNlQWRkaXRpb25hbFNlcnZpY2U6IFNwZWNpZmllcyB3aGV0aGVyIHRvIHVzZSB0aGUgc3lzdGVtIGNvbmZpZ3VyYXRpb25zIGZvciB2aXJ0dWFsIG1hY2hpbmVzIHByb3ZpZGVkIGJ5IEFsaWJhYmEgQ2xvdWQuIFN5c3RlbSBjb25maWd1cmF0aW9ucyBmb3IgV2luZG93czogTlRQIGFuZCBLTVMuIFN5c3RlbSBjb25maWd1cmF0aW9ucyBmb3IgTGludXg6IE5UUCBhbmQgWVVNLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHVzZUFkZGl0aW9uYWxTZXJ2aWNlPzogYm9vbGVhbiB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHVzZXJEYXRhOiBVc2VyIGRhdGEgdG8gcGFzcyB0byBpbnN0YW5jZS4gWzEsIDE2S0JdIGNoYXJhY3RlcnMuVXNlciBkYXRhIHNob3VsZCBub3QgYmUgYmFzZTY0IGVuY29kZWQuIElmIHlvdSB3YW50IHRvIHBhc3MgYmFzZTY0IGVuY29kZWQgc3RyaW5nIHRvIHRoZSBwcm9wZXJ0eSwgdXNlIGZ1bmN0aW9uIEZuOjpCYXNlNjREZWNvZGUgdG8gZGVjb2RlIHRoZSBiYXNlNjQgc3RyaW5nIGZpcnN0LlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHVzZXJEYXRhPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgdnBjSWQ6IFRoZSBWUEMgaWQgdG8gY3JlYXRlIGVjcyBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICByZWFkb25seSB2cGNJZD86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHZTd2l0Y2hJZDogVGhlIHZTd2l0Y2ggSWQgdG8gY3JlYXRlIGVjcyBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICByZWFkb25seSB2U3dpdGNoSWQ/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSB6b25lSWQ6IFRoZSBJRCBvZiB0aGUgem9uZSB0byB3aGljaCB0aGUgaW5zdGFuY2UgYmVsb25ncy4gRm9yIG1vcmUgaW5mb3JtYXRpb24sIFxuICAgICAqIGNhbGwgdGhlIERlc2NyaWJlWm9uZXMgb3BlcmF0aW9uIHRvIHF1ZXJ5IHRoZSBtb3N0IHJlY2VudCB6b25lIGxpc3QuIFxuICAgICAqIERlZmF1bHQgdmFsdWUgaXMgZW1wdHksIHdoaWNoIG1lYW5zIHJhbmRvbSBzZWxlY3Rpb24uXG4gICAgICovXG4gICAgcmVhZG9ubHkgem9uZUlkPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgem9uZUlkczogWm9uZSBpZHMgZm9yIHF1ZXJ5IHBhcmFtZXRlcnNcbiAgICAgKi9cbiAgICByZWFkb25seSB6b25lSWRzPzogQXJyYXk8c3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlPiB8IHJvcy5JUmVzb2x2YWJsZTtcbn1cblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgYEluc3RhbmNlYC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJSW5zdGFuY2UgZXh0ZW5kcyByb3MuSVJlc291cmNlIHtcbiAgICByZWFkb25seSBwcm9wczogSW5zdGFuY2VQcm9wcztcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBIb3N0TmFtZTogSG9zdCBuYW1lIG9mIGNyZWF0ZWQgaW5zdGFuY2UuXG4gICAgICovXG4gICAgcmVhZG9ubHkgYXR0ckhvc3ROYW1lOiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgSW5uZXJJcDogSW5uZXIgSVAgYWRkcmVzcyBvZiB0aGUgc3BlY2lmaWVkIGluc3RhbmNlLiBPbmx5IGZvciBjbGFzc2ljYWwgaW5zdGFuY2UuXG4gICAgICovXG4gICAgcmVhZG9ubHkgYXR0cklubmVySXA6IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBJbnN0YW5jZUlkOiBUaGUgaW5zdGFuY2UgSUQgb2YgY3JlYXRlZCBlY3MgaW5zdGFuY2VcbiAgICAgKi9cbiAgICByZWFkb25seSBhdHRySW5zdGFuY2VJZDogcm9zLklSZXNvbHZhYmxlIHwgc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIFByaW1hcnlOZXR3b3JrSW50ZXJmYWNlSWQ6IFByaW1hcnkgbmV0d29yayBpbnRlcmZhY2UgSUQgb2YgY3JlYXRlZCBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICByZWFkb25seSBhdHRyUHJpbWFyeU5ldHdvcmtJbnRlcmZhY2VJZDogcm9zLklSZXNvbHZhYmxlIHwgc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIFByaXZhdGVJcDogUHJpdmF0ZSBJUCBhZGRyZXNzIG9mIGNyZWF0ZWQgZWNzIGluc3RhbmNlLiBPbmx5IGZvciBWUEMgaW5zdGFuY2UuXG4gICAgICovXG4gICAgcmVhZG9ubHkgYXR0clByaXZhdGVJcDogcm9zLklSZXNvbHZhYmxlIHwgc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIFB1YmxpY0lwOiBQdWJsaWMgSVAgYWRkcmVzcyBvZiBjcmVhdGVkIGVjcyBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICByZWFkb25seSBhdHRyUHVibGljSXA6IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBTZWN1cml0eUdyb3VwSWRzOiBTZWN1cml0eSBncm91cCBJRCBsaXN0IG9mIGNyZWF0ZWQgaW5zdGFuY2UuXG4gICAgICovXG4gICAgcmVhZG9ubHkgYXR0clNlY3VyaXR5R3JvdXBJZHM6IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBab25lSWQ6IFpvbmUgSUQgb2YgY3JlYXRlZCBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICByZWFkb25seSBhdHRyWm9uZUlkOiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG59XG4vKipcbiAqIFRoaXMgY2xhc3MgZW5jYXBzdWxhdGVzIGFuZCBleHRlbmRzIHRoZSBST1MgcmVzb3VyY2UgdHlwZSBgQUxJWVVOOjpFQ1M6Okluc3RhbmNlYCwgd2hpY2ggaXMgdXNlZCB0byBjcmVhdGUgYW4gRWxhc3RpYyBDb21wdXRlIFNlcnZpY2UgKEVDUykgaW5zdGFuY2UuXG4gKiBATm90ZSBUaGlzIGNsYXNzIG1heSBoYXZlIHNvbWUgbmV3IGZ1bmN0aW9ucyB0byBmYWNpbGl0YXRlIGRldmVsb3BtZW50LCBzbyBpdCBpcyByZWNvbW1lbmRlZCB0byB1c2UgdGhpcyBjbGFzcyBpbnN0ZWFkIG9mIGBSb3NJbnN0YW5jZWBmb3IgYSBtb3JlIGNvbnZlbmllbnQgZGV2ZWxvcG1lbnQgZXhwZXJpZW5jZS5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvYWxpeXVuLWVjcy1pbnN0YW5jZVxuICovXG5leHBvcnQgY2xhc3MgSW5zdGFuY2UgZXh0ZW5kcyByb3MuUmVzb3VyY2UgaW1wbGVtZW50cyBJSW5zdGFuY2Uge1xuICAgIHByb3RlY3RlZCBzY29wZTogcm9zLkNvbnN0cnVjdDtcbiAgICBwcm90ZWN0ZWQgaWQ6IHN0cmluZztcbiAgICBwdWJsaWMgcmVhZG9ubHkgcHJvcHM6IEluc3RhbmNlUHJvcHM7XG4gICAgcHJvdGVjdGVkIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OiBib29sZWFuO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIEhvc3ROYW1lOiBIb3N0IG5hbWUgb2YgY3JlYXRlZCBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckhvc3ROYW1lOiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgSW5uZXJJcDogSW5uZXIgSVAgYWRkcmVzcyBvZiB0aGUgc3BlY2lmaWVkIGluc3RhbmNlLiBPbmx5IGZvciBjbGFzc2ljYWwgaW5zdGFuY2UuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJJbm5lcklwOiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgSW5zdGFuY2VJZDogVGhlIGluc3RhbmNlIElEIG9mIGNyZWF0ZWQgZWNzIGluc3RhbmNlXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJJbnN0YW5jZUlkOiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgUHJpbWFyeU5ldHdvcmtJbnRlcmZhY2VJZDogUHJpbWFyeSBuZXR3b3JrIGludGVyZmFjZSBJRCBvZiBjcmVhdGVkIGluc3RhbmNlLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyUHJpbWFyeU5ldHdvcmtJbnRlcmZhY2VJZDogcm9zLklSZXNvbHZhYmxlIHwgc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIFByaXZhdGVJcDogUHJpdmF0ZSBJUCBhZGRyZXNzIG9mIGNyZWF0ZWQgZWNzIGluc3RhbmNlLiBPbmx5IGZvciBWUEMgaW5zdGFuY2UuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJQcml2YXRlSXA6IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBQdWJsaWNJcDogUHVibGljIElQIGFkZHJlc3Mgb2YgY3JlYXRlZCBlY3MgaW5zdGFuY2UuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJQdWJsaWNJcDogcm9zLklSZXNvbHZhYmxlIHwgc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIFNlY3VyaXR5R3JvdXBJZHM6IFNlY3VyaXR5IGdyb3VwIElEIGxpc3Qgb2YgY3JlYXRlZCBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0clNlY3VyaXR5R3JvdXBJZHM6IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBab25lSWQ6IFpvbmUgSUQgb2YgY3JlYXRlZCBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0clpvbmVJZDogcm9zLklSZXNvbHZhYmxlIHwgc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogUGFyYW0gc2NvcGUgLSBzY29wZSBpbiB3aGljaCB0aGlzIHJlc291cmNlIGlzIGRlZmluZWRcbiAgICAgKiBQYXJhbSBpZCAgICAtIHNjb3BlZCBpZCBvZiB0aGUgcmVzb3VyY2VcbiAgICAgKiBQYXJhbSBwcm9wcyAtIHJlc291cmNlIHByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihzY29wZTogcm9zLkNvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IEluc3RhbmNlUHJvcHMsIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OmJvb2xlYW4gPSB0cnVlKSB7XG4gICAgICAgIHN1cGVyKHNjb3BlLCBpZCk7XG4gICAgICAgIHRoaXMuc2NvcGUgPSBzY29wZTtcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xuICAgICAgICB0aGlzLnByb3BzID0gcHJvcHM7XG4gICAgICAgIHRoaXMuZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgPSBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDtcblxuICAgICAgICBjb25zdCByb3NJbnN0YW5jZSA9IG5ldyBSb3NJbnN0YW5jZSh0aGlzLCBpZCwgIHtcbiAgICAgICAgICAgIGRlZGljYXRlZEhvc3RJZDogcHJvcHMuZGVkaWNhdGVkSG9zdElkLFxuICAgICAgICAgICAgcmVzb3VyY2VHcm91cElkOiBwcm9wcy5yZXNvdXJjZUdyb3VwSWQsXG4gICAgICAgICAgICBzeXN0ZW1EaXNrRGVzY3JpcHRpb246IHByb3BzLnN5c3RlbURpc2tEZXNjcmlwdGlvbixcbiAgICAgICAgICAgIGluc3RhbmNlQ2hhcmdlVHlwZTogcHJvcHMuaW5zdGFuY2VDaGFyZ2VUeXBlID09PSB1bmRlZmluZWQgfHwgcHJvcHMuaW5zdGFuY2VDaGFyZ2VUeXBlID09PSBudWxsID8gJ1Bvc3RQYWlkJyA6IHByb3BzLmluc3RhbmNlQ2hhcmdlVHlwZSxcbiAgICAgICAgICAgIHJhbVJvbGVOYW1lOiBwcm9wcy5yYW1Sb2xlTmFtZSxcbiAgICAgICAgICAgIHByaXZhdGVQb29sT3B0aW9uczogcHJvcHMucHJpdmF0ZVBvb2xPcHRpb25zLFxuICAgICAgICAgICAgc3lzdGVtRGlza1BlcmZvcm1hbmNlTGV2ZWw6IHByb3BzLnN5c3RlbURpc2tQZXJmb3JtYW5jZUxldmVsLFxuICAgICAgICAgICAgaW1hZ2VJZDogcHJvcHMuaW1hZ2VJZCxcbiAgICAgICAgICAgIHN5c3RlbURpc2tEaXNrTmFtZTogcHJvcHMuc3lzdGVtRGlza0Rpc2tOYW1lLFxuICAgICAgICAgICAgc3RvcmFnZVNldElkOiBwcm9wcy5zdG9yYWdlU2V0SWQsXG4gICAgICAgICAgICB1c2VBZGRpdGlvbmFsU2VydmljZTogcHJvcHMudXNlQWRkaXRpb25hbFNlcnZpY2UsXG4gICAgICAgICAgICBob3N0TmFtZTogcHJvcHMuaG9zdE5hbWUsXG4gICAgICAgICAgICB0YWdzOiBwcm9wcy50YWdzLFxuICAgICAgICAgICAgdlN3aXRjaElkOiBwcm9wcy52U3dpdGNoSWQsXG4gICAgICAgICAgICBwZXJpb2Q6IHByb3BzLnBlcmlvZCA9PT0gdW5kZWZpbmVkIHx8IHByb3BzLnBlcmlvZCA9PT0gbnVsbCA/IDEgOiBwcm9wcy5wZXJpb2QsXG4gICAgICAgICAgICBpbWFnZUZhbWlseTogcHJvcHMuaW1hZ2VGYW1pbHksXG4gICAgICAgICAgICBkZWxldGlvblByb3RlY3Rpb246IHByb3BzLmRlbGV0aW9uUHJvdGVjdGlvbixcbiAgICAgICAgICAgIGh0dHBFbmRwb2ludDogcHJvcHMuaHR0cEVuZHBvaW50LFxuICAgICAgICAgICAgc2VjdXJpdHlHcm91cElkczogcHJvcHMuc2VjdXJpdHlHcm91cElkcyxcbiAgICAgICAgICAgIGludGVybmV0Q2hhcmdlVHlwZTogcHJvcHMuaW50ZXJuZXRDaGFyZ2VUeXBlID09PSB1bmRlZmluZWQgfHwgcHJvcHMuaW50ZXJuZXRDaGFyZ2VUeXBlID09PSBudWxsID8gJ1BheUJ5VHJhZmZpYycgOiBwcm9wcy5pbnRlcm5ldENoYXJnZVR5cGUsXG4gICAgICAgICAgICBzcG90SW50ZXJydXB0aW9uQmVoYXZpb3I6IHByb3BzLnNwb3RJbnRlcnJ1cHRpb25CZWhhdmlvciA9PT0gdW5kZWZpbmVkIHx8IHByb3BzLnNwb3RJbnRlcnJ1cHRpb25CZWhhdmlvciA9PT0gbnVsbCA/ICdUZXJtaW5hdGUnIDogcHJvcHMuc3BvdEludGVycnVwdGlvbkJlaGF2aW9yLFxuICAgICAgICAgICAgaW5zdGFuY2VOYW1lOiBwcm9wcy5pbnN0YW5jZU5hbWUsXG4gICAgICAgICAgICBkZXBsb3ltZW50U2V0SWQ6IHByb3BzLmRlcGxveW1lbnRTZXRJZCxcbiAgICAgICAgICAgIGludGVybmV0TWF4QmFuZHdpZHRoT3V0OiBwcm9wcy5pbnRlcm5ldE1heEJhbmR3aWR0aE91dCA9PT0gdW5kZWZpbmVkIHx8IHByb3BzLmludGVybmV0TWF4QmFuZHdpZHRoT3V0ID09PSBudWxsID8gMSA6IHByb3BzLmludGVybmV0TWF4QmFuZHdpZHRoT3V0LFxuICAgICAgICAgICAgdnBjSWQ6IHByb3BzLnZwY0lkLFxuICAgICAgICAgICAgYWZmaW5pdHk6IHByb3BzLmFmZmluaXR5LFxuICAgICAgICAgICAgc2VjdXJpdHlFbmhhbmNlbWVudFN0cmF0ZWd5OiBwcm9wcy5zZWN1cml0eUVuaGFuY2VtZW50U3RyYXRlZ3ksXG4gICAgICAgICAgICBwZXJpb2RVbml0OiBwcm9wcy5wZXJpb2RVbml0ID09PSB1bmRlZmluZWQgfHwgcHJvcHMucGVyaW9kVW5pdCA9PT0gbnVsbCA/ICdNb250aCcgOiBwcm9wcy5wZXJpb2RVbml0LFxuICAgICAgICAgICAgdGVuYW5jeTogcHJvcHMudGVuYW5jeSxcbiAgICAgICAgICAgIHByaXZhdGVJcEFkZHJlc3M6IHByb3BzLnByaXZhdGVJcEFkZHJlc3MsXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogcHJvcHMuZGVzY3JpcHRpb24sXG4gICAgICAgICAgICBkaXNrTWFwcGluZ3M6IHByb3BzLmRpc2tNYXBwaW5ncyxcbiAgICAgICAgICAgIHN5c3RlbURpc2tTaXplOiBwcm9wcy5zeXN0ZW1EaXNrU2l6ZSxcbiAgICAgICAgICAgIHVzZXJEYXRhOiBwcm9wcy51c2VyRGF0YSxcbiAgICAgICAgICAgIGF1dG9SZW5ldzogcHJvcHMuYXV0b1JlbmV3ID09PSB1bmRlZmluZWQgfHwgcHJvcHMuYXV0b1JlbmV3ID09PSBudWxsID8gJ0ZhbHNlJyA6IHByb3BzLmF1dG9SZW5ldyxcbiAgICAgICAgICAgIHNwb3REdXJhdGlvbjogcHJvcHMuc3BvdER1cmF0aW9uLFxuICAgICAgICAgICAgc3RvcmFnZVNldFBhcnRpdGlvbk51bWJlcjogcHJvcHMuc3RvcmFnZVNldFBhcnRpdGlvbk51bWJlcixcbiAgICAgICAgICAgIHNwb3RQcmljZUxpbWl0OiBwcm9wcy5zcG90UHJpY2VMaW1pdCxcbiAgICAgICAgICAgIHpvbmVJZHM6IHByb3BzLnpvbmVJZHMsXG4gICAgICAgICAgICBpbnN0YW5jZVR5cGU6IHByb3BzLmluc3RhbmNlVHlwZSxcbiAgICAgICAgICAgIGFsbG9jYXRlUHVibGljSXA6IHByb3BzLmFsbG9jYXRlUHVibGljSXAgPT09IHVuZGVmaW5lZCB8fCBwcm9wcy5hbGxvY2F0ZVB1YmxpY0lwID09PSBudWxsID8gdHJ1ZSA6IHByb3BzLmFsbG9jYXRlUHVibGljSXAsXG4gICAgICAgICAgICBzcG90U3RyYXRlZ3k6IHByb3BzLnNwb3RTdHJhdGVneSxcbiAgICAgICAgICAgIHBhc3N3b3JkSW5oZXJpdDogcHJvcHMucGFzc3dvcmRJbmhlcml0LFxuICAgICAgICAgICAgcGFzc3dvcmQ6IHByb3BzLnBhc3N3b3JkLFxuICAgICAgICAgICAgYXV0b1JlbmV3UGVyaW9kOiBwcm9wcy5hdXRvUmVuZXdQZXJpb2QgPT09IHVuZGVmaW5lZCB8fCBwcm9wcy5hdXRvUmVuZXdQZXJpb2QgPT09IG51bGwgPyAxIDogcHJvcHMuYXV0b1JlbmV3UGVyaW9kLFxuICAgICAgICAgICAga2V5UGFpck5hbWU6IHByb3BzLmtleVBhaXJOYW1lLFxuICAgICAgICAgICAgaW9PcHRpbWl6ZWQ6IHByb3BzLmlvT3B0aW1pemVkID09PSB1bmRlZmluZWQgfHwgcHJvcHMuaW9PcHRpbWl6ZWQgPT09IG51bGwgPyAnb3B0aW1pemVkJyA6IHByb3BzLmlvT3B0aW1pemVkLFxuICAgICAgICAgICAgem9uZUlkOiBwcm9wcy56b25lSWQsXG4gICAgICAgICAgICBocGNDbHVzdGVySWQ6IHByb3BzLmhwY0NsdXN0ZXJJZCxcbiAgICAgICAgICAgIHNlY3VyaXR5R3JvdXBJZDogcHJvcHMuc2VjdXJpdHlHcm91cElkLFxuICAgICAgICAgICAgZGVwbG95bWVudFNldEdyb3VwTm86IHByb3BzLmRlcGxveW1lbnRTZXRHcm91cE5vLFxuICAgICAgICAgICAgc3lzdGVtRGlza0NhdGVnb3J5OiBwcm9wcy5zeXN0ZW1EaXNrQ2F0ZWdvcnkgPT09IHVuZGVmaW5lZCB8fCBwcm9wcy5zeXN0ZW1EaXNrQ2F0ZWdvcnkgPT09IG51bGwgPyAnY2xvdWRfZWZmaWNpZW5jeScgOiBwcm9wcy5zeXN0ZW1EaXNrQ2F0ZWdvcnksXG4gICAgICAgICAgICBodHRwVG9rZW5zOiBwcm9wcy5odHRwVG9rZW5zLFxuICAgICAgICAgICAgY3JlZGl0U3BlY2lmaWNhdGlvbjogcHJvcHMuY3JlZGl0U3BlY2lmaWNhdGlvbixcbiAgICAgICAgfSwgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgJiYgdGhpcy5zdGFjay5lbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCk7XG4gICAgICAgIHRoaXMucmVzb3VyY2UgPSByb3NJbnN0YW5jZTtcbiAgICAgICAgdGhpcy5hdHRySG9zdE5hbWUgPSByb3NJbnN0YW5jZS5hdHRySG9zdE5hbWU7XG4gICAgICAgIHRoaXMuYXR0cklubmVySXAgPSByb3NJbnN0YW5jZS5hdHRySW5uZXJJcDtcbiAgICAgICAgdGhpcy5hdHRySW5zdGFuY2VJZCA9IHJvc0luc3RhbmNlLmF0dHJJbnN0YW5jZUlkO1xuICAgICAgICB0aGlzLmF0dHJQcmltYXJ5TmV0d29ya0ludGVyZmFjZUlkID0gcm9zSW5zdGFuY2UuYXR0clByaW1hcnlOZXR3b3JrSW50ZXJmYWNlSWQ7XG4gICAgICAgIHRoaXMuYXR0clByaXZhdGVJcCA9IHJvc0luc3RhbmNlLmF0dHJQcml2YXRlSXA7XG4gICAgICAgIHRoaXMuYXR0clB1YmxpY0lwID0gcm9zSW5zdGFuY2UuYXR0clB1YmxpY0lwO1xuICAgICAgICB0aGlzLmF0dHJTZWN1cml0eUdyb3VwSWRzID0gcm9zSW5zdGFuY2UuYXR0clNlY3VyaXR5R3JvdXBJZHM7XG4gICAgICAgIHRoaXMuYXR0clpvbmVJZCA9IHJvc0luc3RhbmNlLmF0dHJab25lSWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIHByZXJlcXVpc2l0ZSByZXNvdXJjZShzKSByZXF1aXJlZCB0byBhbiBFQ1MgaW5zdGFuY2U6IFZQQywgVlN3aXRjaCwgYW5kKG9yKSBzZWN1cml0eSBncm91cC5cbiAgICAgKiBAcGFyYW0gem9uZUlkIFJlcXVpcmVkIHdoZW4gY3JlYXRpbmcgYSBWU3dpdGNoLlxuICAgICAqIEBwYXJhbSB2cGNDaWRyQmxvY2sgT3B0aW9uYWwgd2hlbiBjcmVhdGluZyBhIFZQQy4gRGVmYXVsdCB2YWx1ZSBpcyAxOTIuMTY4LjAuMC8xNi5cbiAgICAgKiBAcGFyYW0gdlN3aXRjaENpZHJCbG9jayBPcHRpb25hbCB3aGVuIGNyZWF0aW5nIGEgVlN3aXRjaC4gRGVmYXVsdCB2YWx1ZSBpcyAxOTIuMTY4LjAuMC8yNC5cbiAgICAgKiBAcGFyYW0gd2hldGhlckNyZWF0ZVNlY3VyaXR5R3JvdXAgV2hldGhlciB0byBjcmVhdGUgYSBzZWN1cml0eSBncm91cC4gRGVmYXVsdCB2YWx1ZSBpcyB0cnVlLlxuICAgICAqL1xuICAgIHB1YmxpYyBhdXRvQ3JlYXRlRGVwZW5kZW5jaWVzKHpvbmVJZDogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZwY0NpZHJCbG9jazogc3RyaW5nIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZTd2l0Y2hDaWRyQmxvY2s6IHN0cmluZyB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGV0aGVyQ3JlYXRlU2VjdXJpdHlHcm91cDogQm9vbGVhbiA9IHRydWUpOiBhbnlbXSB7XG4gICAgICAgIGxldCB2cGMgPSB1bmRlZmluZWQ7XG4gICAgICAgIGxldCB2U3dpdGNoID0gdW5kZWZpbmVkO1xuICAgICAgICBsZXQgc2VjdXJpdHlHcm91cCA9IHVuZGVmaW5lZDtcbiAgICAgICAgbGV0IHZwY0lkOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGUgfCB1bmRlZmluZWQgPSB1bmRlZmluZWQ7XG4gICAgICAgIGxldCB2U3dpdGNoSWQ6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZSB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgbGV0IHNlY3VyaXR5R3JvdXBJZDogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkO1xuICAgICAgICBsZXQgaW5zdGFuY2UgPSB0aGlzLnJlc291cmNlIGFzIFJvc0luc3RhbmNlO1xuXG4gICAgICAgIGlmIChpbnN0YW5jZS52U3dpdGNoSWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgem9uZUlkID0gem9uZUlkIHx8IGluc3RhbmNlLnpvbmVJZDtcbiAgICAgICAgICAgIGlmICh6b25lSWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignem9uZUlkIGlzIHJlcXVpcmVkIHdoZW4gY3JlYXRpbmcgYSBWU3dpdGNoLicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGluc3RhbmNlLnZwY0lkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAoKHZwY0NpZHJCbG9jayA9PT0gdW5kZWZpbmVkKSAhPT0gKHZTd2l0Y2hDaWRyQmxvY2sgPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdCb3RoIHZwY0NpZHJCbG9jayBhbmQgdlN3aXRjaENpZHJCbG9jayBtdXN0IGJlIHNwZWNpZmllZCBvciBuZWl0aGVyLicpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2cGNDaWRyQmxvY2sgPSB2cGNDaWRyQmxvY2sgfHwgJzE5Mi4xNjguMC4wLzE2JztcbiAgICAgICAgICAgICAgICB2cGMgPSBuZXcgVnBjKHRoaXMuc2NvcGUsIGBBdXRvQ3JlYXRlZFZwY0ZvciR7dGhpcy5pZH1gLCB7XG4gICAgICAgICAgICAgICAgICAgIGNpZHJCbG9jazogdnBjQ2lkckJsb2NrLFxuICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogJ1RoaXMgaXMgYXV0byBjcmVhdGVkIGJ5IFJPUy1DREsuJyxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB2cGNJZCA9IHZwYy5hdHRyVnBjSWQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZwY0lkID0gaW5zdGFuY2UudnBjSWRcbiAgICAgICAgICAgICAgICBpZiAodlN3aXRjaENpZHJCbG9jayA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigndlN3aXRjaENpZHJCbG9jayBpcyBtYW5kYXRvcnkgd2hlbiBnaXZpbmcgYSBWcGMgYW5kIGNyZWF0aW5nIGEgVlN3aXRjaC4nKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2U3dpdGNoQ2lkckJsb2NrID0gdlN3aXRjaENpZHJCbG9jayB8fCAnMTkyLjE2OC4wLjAvMjQnO1xuICAgICAgICAgICAgdlN3aXRjaCA9IG5ldyBWU3dpdGNoKHRoaXMuc2NvcGUsIGBBdXRvQ3JlYXRlZFZTd2l0Y2hGb3Ike3RoaXMuaWR9YCwge1xuICAgICAgICAgICAgICAgIHZwY0lkOiB2cGNJZCxcbiAgICAgICAgICAgICAgICBjaWRyQmxvY2s6IHZTd2l0Y2hDaWRyQmxvY2ssXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICdUaGlzIGlzIGF1dG8gY3JlYXRlZCBieSBST1MtQ0RLLicsXG4gICAgICAgICAgICAgICAgem9uZUlkOiB6b25lSWQsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHZTd2l0Y2hJZCA9IHZTd2l0Y2guYXR0clZTd2l0Y2hJZDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZTd2l0Y2hJZCA9IGluc3RhbmNlLnZTd2l0Y2hJZDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh3aGV0aGVyQ3JlYXRlU2VjdXJpdHlHcm91cCAmJiBpbnN0YW5jZS5zZWN1cml0eUdyb3VwSWQgPT09IHVuZGVmaW5lZCAmJiBpbnN0YW5jZS5zZWN1cml0eUdyb3VwSWRzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHNlY3VyaXR5R3JvdXAgPSBuZXcgU2VjdXJpdHlHcm91cCh0aGlzLnNjb3BlLCBgQXV0b0NyZWF0ZWRTZWN1cml0eUdyb3VwRm9yJHt0aGlzLmlkfWAsIHtcbiAgICAgICAgICAgICAgICB2cGNJZDogdnBjSWQsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICdUaGlzIGlzIGF1dG8gY3JlYXRlZCBieSBST1MtQ0RLLicsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHNlY3VyaXR5R3JvdXBJZCA9IHNlY3VyaXR5R3JvdXAuYXR0clNlY3VyaXR5R3JvdXBJZDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNlY3VyaXR5R3JvdXBJZCA9IGluc3RhbmNlLnNlY3VyaXR5R3JvdXBJZDtcbiAgICAgICAgfVxuXG4gICAgICAgIGluc3RhbmNlLnZwY0lkID0gdnBjSWRcbiAgICAgICAgaW5zdGFuY2UudlN3aXRjaElkID0gdlN3aXRjaElkXG4gICAgICAgIGluc3RhbmNlLnNlY3VyaXR5R3JvdXBJZCA9IHNlY3VyaXR5R3JvdXBJZDtcblxuICAgICAgICByZXR1cm4gW3ZwYywgdlN3aXRjaCwgc2VjdXJpdHlHcm91cF07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkIG9uZSBvciBtb3JlIHNlY3VyaXR5IGdyb3VwcyB0byBhbiBFQ1MgaW5zdGFuY2UuXG4gICAgICogQHBhcmFtIHNlY3VyaXR5R3JvdXBzIFNlY3VyaXR5IGdyb3VwcyBvciBzZWN1cml0eSBncm91cCBJRHMuXG4gICAgICovXG4gICAgcHVibGljIGFkZFNlY3VyaXR5R3JvdXBzKC4uLnNlY3VyaXR5R3JvdXBzOiAoU2VjdXJpdHlHcm91cCB8IHN0cmluZylbXSkge1xuICAgICAgICBsZXQgaW5zdGFuY2UgPSB0aGlzLnJlc291cmNlIGFzIFJvc0luc3RhbmNlO1xuICAgICAgICBsZXQgb3JpZ2luYWxTZWN1cml0eUdyb3VwSWRzID0gaW5zdGFuY2Uuc2VjdXJpdHlHcm91cElkcztcbiAgICAgICAgbGV0IG5ld1NlY3VyaXR5R3JvdXBJZHM6IEFycmF5PHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZT4gfCByb3MuSVJlc29sdmFibGUgPSBbXTtcbiAgICAgICAgaWYgKGluc3RhbmNlLnNlY3VyaXR5R3JvdXBJZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBuZXdTZWN1cml0eUdyb3VwSWRzLnB1c2goaW5zdGFuY2Uuc2VjdXJpdHlHcm91cElkKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBzZWN1cml0eUdyb3VwIG9mIHNlY3VyaXR5R3JvdXBzKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHNlY3VyaXR5R3JvdXAgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgbmV3U2VjdXJpdHlHcm91cElkcy5wdXNoKHNlY3VyaXR5R3JvdXApO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBuZXdTZWN1cml0eUdyb3VwSWRzLnB1c2goc2VjdXJpdHlHcm91cC5hdHRyU2VjdXJpdHlHcm91cElkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAocm9zLmlzUmVzb2x2YWJsZU9iamVjdChvcmlnaW5hbFNlY3VyaXR5R3JvdXBJZHMpKSB7XG4gICAgICAgICAgICBuZXdTZWN1cml0eUdyb3VwSWRzID0gcm9zLkZuLmxpc3RNZXJnZShbb3JpZ2luYWxTZWN1cml0eUdyb3VwSWRzLCBuZXdTZWN1cml0eUdyb3VwSWRzXSk7XG4gICAgICAgIH0gZWxzZSBpZiAob3JpZ2luYWxTZWN1cml0eUdyb3VwSWRzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIG5ld1NlY3VyaXR5R3JvdXBJZHMgPSBvcmlnaW5hbFNlY3VyaXR5R3JvdXBJZHMuY29uY2F0KG5ld1NlY3VyaXR5R3JvdXBJZHMpO1xuICAgICAgICB9XG5cbiAgICAgICAgaW5zdGFuY2Uuc2VjdXJpdHlHcm91cElkID0gdW5kZWZpbmVkO1xuICAgICAgICBpbnN0YW5jZS5zZWN1cml0eUdyb3VwSWRzID0gbmV3U2VjdXJpdHlHcm91cElkcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGQgb25lIG9yIG1vcmUgY29tbWFuZHMgdG8gdGhlIHVzZXJkYXRhIG9mIGFuIEVDUyBpbnN0YW5jZS5cbiAgICAgKiBAcGFyYW0gY29tbWFuZHMgQ29tbWFuZHMgdG8gYmUgYWRkZWQuXG4gICAgICovXG4gICAgcHVibGljIGFkZFVzZXJEYXRhQ29tbWFuZHMoLi4uY29tbWFuZHM6IChzdHJpbmcgfCByb3MuSVJlc29sdmFibGUpW10pOiB2b2lkIHtcbiAgICAgICAgbGV0IGluc3RhbmNlID0gdGhpcy5yZXNvdXJjZSBhcyBSb3NJbnN0YW5jZTtcbiAgICAgICAgbGV0IGNvbW1hbmRzQXNTdHJpbmc6IChzdHJpbmcgfCByb3MuSVJlc29sdmFibGUpW10gPSBbXTtcbiAgICAgICAgaWYgKGluc3RhbmNlLnVzZXJEYXRhICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNvbW1hbmRzQXNTdHJpbmcucHVzaChpbnN0YW5jZS51c2VyRGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgY29tbWFuZCBvZiBjb21tYW5kcykge1xuICAgICAgICAgICAgaWYgKHJvcy5pc1Jlc29sdmFibGVPYmplY3QoY29tbWFuZCkpIHtcbiAgICAgICAgICAgICAgICBjb21tYW5kID0gY29tbWFuZC50b1N0cmluZygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29tbWFuZHNBc1N0cmluZy5wdXNoKGNvbW1hbmQpO1xuICAgICAgICB9XG4gICAgICAgIGluc3RhbmNlLnVzZXJEYXRhID0gcm9zLkZuLmpvaW4oJ1xcbicsIGNvbW1hbmRzQXNTdHJpbmcpO1xuICAgIH1cbn1cbiJdfQ==