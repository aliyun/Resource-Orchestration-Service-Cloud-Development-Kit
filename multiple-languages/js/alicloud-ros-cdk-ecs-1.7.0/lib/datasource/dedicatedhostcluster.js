"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DedicatedHostCluster = exports.DedicatedHostClusterProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ecs_generated_1 = require("./ecs.generated");
Object.defineProperty(exports, "DedicatedHostClusterProperty", { enumerable: true, get: function () { return ecs_generated_1.RosDedicatedHostCluster; } });
/**
 * This class encapsulates and extends the ROS resource type `DATASOURCE::ECS::DedicatedHostCluster`, which is used to query the information about a dedicated host cluster.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosDedicatedHostCluster`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/datasource-ecs-dedicatedhostcluster
 */
class DedicatedHostCluster extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosDedicatedHostCluster = new ecs_generated_1.RosDedicatedHostCluster(this, id, {
            dedicatedHostClusterId: props.dedicatedHostClusterId,
            refreshOptions: props.refreshOptions === undefined || props.refreshOptions === null ? 'Never' : props.refreshOptions,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosDedicatedHostCluster;
        this.attrDedicatedHostClusterId = rosDedicatedHostCluster.attrDedicatedHostClusterId;
        this.attrDedicatedHostClusterName = rosDedicatedHostCluster.attrDedicatedHostClusterName;
        this.attrDescription = rosDedicatedHostCluster.attrDescription;
        this.attrResourceGroupId = rosDedicatedHostCluster.attrResourceGroupId;
        this.attrTags = rosDedicatedHostCluster.attrTags;
        this.attrZoneId = rosDedicatedHostCluster.attrZoneId;
    }
}
exports.DedicatedHostCluster = DedicatedHostCluster;
//# sourceMappingURL=data:application/json;base64,