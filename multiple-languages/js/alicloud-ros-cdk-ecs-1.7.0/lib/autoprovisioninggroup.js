"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AutoProvisioningGroup = exports.AutoProvisioningGroupProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ecs_generated_1 = require("./ecs.generated");
Object.defineProperty(exports, "AutoProvisioningGroupProperty", { enumerable: true, get: function () { return ecs_generated_1.RosAutoProvisioningGroup; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::ECS::AutoProvisioningGroup`, which is used to create an auto provisioning group.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosAutoProvisioningGroup`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-ecs-autoprovisioninggroup
 */
class AutoProvisioningGroup extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosAutoProvisioningGroup = new ecs_generated_1.RosAutoProvisioningGroup(this, id, {
            description: props.description,
            resourceGroupId: props.resourceGroupId,
            checkExecutionStatus: props.checkExecutionStatus,
            autoProvisioningGroupType: props.autoProvisioningGroupType,
            defaultTargetCapacityType: props.defaultTargetCapacityType,
            launchConfiguration: props.launchConfiguration,
            spotInstancePoolsToUseCount: props.spotInstancePoolsToUseCount,
            validFrom: props.validFrom,
            maxSpotPrice: props.maxSpotPrice,
            spotAllocationStrategy: props.spotAllocationStrategy,
            terminateInstances: props.terminateInstances,
            payAsYouGoAllocationStrategy: props.payAsYouGoAllocationStrategy,
            totalTargetCapacity: props.totalTargetCapacity,
            resourcePoolOptions: props.resourcePoolOptions,
            autoProvisioningGroupName: props.autoProvisioningGroupName,
            excessCapacityTerminationPolicy: props.excessCapacityTerminationPolicy,
            dataDiskConfig: props.dataDiskConfig,
            launchTemplateConfig: props.launchTemplateConfig,
            launchTemplateId: props.launchTemplateId,
            payAsYouGoTargetCapacity: props.payAsYouGoTargetCapacity,
            spotInstanceInterruptionBehavior: props.spotInstanceInterruptionBehavior,
            validUntil: props.validUntil,
            terminateInstancesWithExpiration: props.terminateInstancesWithExpiration,
            spotTargetCapacity: props.spotTargetCapacity,
            minTargetCapacity: props.minTargetCapacity,
            launchTemplateVersion: props.launchTemplateVersion,
            systemDiskConfig: props.systemDiskConfig,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosAutoProvisioningGroup;
        this.attrAutoProvisioningGroupId = rosAutoProvisioningGroup.attrAutoProvisioningGroupId;
        this.attrAutoProvisioningGroupName = rosAutoProvisioningGroup.attrAutoProvisioningGroupName;
    }
}
exports.AutoProvisioningGroup = AutoProvisioningGroup;
//# sourceMappingURL=data:application/json;base64,