"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CapacityReservation = exports.CapacityReservationProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ecs_generated_1 = require("./ecs.generated");
Object.defineProperty(exports, "CapacityReservationProperty", { enumerable: true, get: function () { return ecs_generated_1.RosCapacityReservation; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::ECS::CapacityReservation`, which is used to create a capacity reservation.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosCapacityReservation`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-ecs-capacityreservation
 */
class CapacityReservation extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosCapacityReservation = new ecs_generated_1.RosCapacityReservation(this, id, {
            instanceAmount: props.instanceAmount,
            description: props.description,
            privatePoolOptions: props.privatePoolOptions,
            zoneId: props.zoneId,
            resourceGroupId: props.resourceGroupId,
            endTime: props.endTime,
            endTimeType: props.endTimeType,
            instanceType: props.instanceType,
            tags: props.tags,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosCapacityReservation;
        this.attrPrivatePoolOptionsId = rosCapacityReservation.attrPrivatePoolOptionsId;
    }
}
exports.CapacityReservation = CapacityReservation;
//# sourceMappingURL=data:application/json;base64,