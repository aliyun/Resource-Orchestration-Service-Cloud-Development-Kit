"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AddressBooks = exports.AddressBooksProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const cloudfw_generated_1 = require("./cloudfw.generated");
Object.defineProperty(exports, "AddressBooksProperty", { enumerable: true, get: function () { return cloudfw_generated_1.RosAddressBooks; } });
/**
 * This class encapsulates and extends the ROS resource type `DATASOURCE::CLOUDFW::AddressBooks`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosAddressBooks`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/datasource-cloudfw-addressbooks
 */
class AddressBooks extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props = {}, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosAddressBooks = new cloudfw_generated_1.RosAddressBooks(this, id, {
            groupType: props.groupType,
            lang: props.lang,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosAddressBooks;
        this.attrAddressBooks = rosAddressBooks.attrAddressBooks;
        this.attrGroupUuids = rosAddressBooks.attrGroupUuids;
    }
}
exports.AddressBooks = AddressBooks;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRkcmVzc2Jvb2tzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYWRkcmVzc2Jvb2tzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDhDQUE4QztBQUM5QywyREFBc0Q7QUFFMUIscUdBRm5CLG1DQUFlLE9BRXdCO0FBeUJoRDs7OztHQUlHO0FBQ0gsTUFBYSxZQUFhLFNBQVEsR0FBRyxDQUFDLFFBQVE7SUFZMUM7Ozs7T0FJRztJQUNILFlBQVksS0FBb0IsRUFBRSxFQUFVLEVBQUUsUUFBMkIsRUFBRSxFQUFFLG1DQUEyQyxJQUFJO1FBQ3hILEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFakIsTUFBTSxlQUFlLEdBQUcsSUFBSSxtQ0FBZSxDQUFDLElBQUksRUFBRSxFQUFFLEVBQUc7WUFDbkQsU0FBUyxFQUFFLEtBQUssQ0FBQyxTQUFTO1lBQzFCLElBQUksRUFBRSxLQUFLLENBQUMsSUFBSTtTQUNuQixFQUFFLGdDQUFnQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztRQUNwRixJQUFJLENBQUMsUUFBUSxHQUFHLGVBQWUsQ0FBQztRQUNoQyxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsZUFBZSxDQUFDLGdCQUFnQixDQUFDO1FBQ3pELElBQUksQ0FBQyxjQUFjLEdBQUcsZUFBZSxDQUFDLGNBQWMsQ0FBQztJQUN6RCxDQUFDO0NBQ0o7QUE1QkQsb0NBNEJDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcm9zIGZyb20gJ0BhbGljbG91ZC9yb3MtY2RrLWNvcmUnO1xuaW1wb3J0IHsgUm9zQWRkcmVzc0Jvb2tzIH0gZnJvbSAnLi9jbG91ZGZ3LmdlbmVyYXRlZCc7XG4vLyBHZW5lcmF0ZWQgZnJvbSB0aGUgQWxpQ2xvdWQgUk9TIFJlc291cmNlIFNwZWNpZmljYXRpb25cbmV4cG9ydCB7IFJvc0FkZHJlc3NCb29rcyBhcyBBZGRyZXNzQm9va3NQcm9wZXJ0eSB9O1xuXG4vKipcbiAqIFByb3BlcnRpZXMgZm9yIGRlZmluaW5nIGEgYEFkZHJlc3NCb29rc2AuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2RhdGFzb3VyY2UtY2xvdWRmdy1hZGRyZXNzYm9va3NcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBBZGRyZXNzQm9va3NQcm9wcyB7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBncm91cFR5cGU6IEFkZHJlc3MgQm9vaywgaXQgY2FuIGJlIHNldCB0byBpbmNsdWRlOlxuICAgICAqIC0gKippcCoqOiBhbiBJUCBhZGRyZXNzIGJvb2tcbiAgICAgKiAtICoqZG9tYWluKio6IGRvbWFpbiBuYW1lIGFkZHJlc3MgYm9va1xuICAgICAqIC0gKipwb3J0Kio6IHBvcnQgQWRkcmVzcyBCb29rXG4gICAgICogLSAqKnRhZyoqOkVDUyB0YWcgYWRkcmVzcyBib29rLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGdyb3VwVHlwZT86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGxhbmc6IFRoZSBsYW5ndWFnZSB0eXBlIG9mIHRoZSByZWNlaXZlZCBtZXNzYWdlLlxuICAgICAqIC0gKip6aCoqIChkZWZhdWx0KTogQ2hpbmVzZS5cbiAgICAgKiAtICoqZW4qKjogRW5nbGlzaC5cbiAgICAgKi9cbiAgICByZWFkb25seSBsYW5nPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xufVxuXG4vKipcbiAqIFRoaXMgY2xhc3MgZW5jYXBzdWxhdGVzIGFuZCBleHRlbmRzIHRoZSBST1MgcmVzb3VyY2UgdHlwZSBgREFUQVNPVVJDRTo6Q0xPVURGVzo6QWRkcmVzc0Jvb2tzYC5cbiAqIEBOb3RlIFRoaXMgY2xhc3MgbWF5IGhhdmUgc29tZSBuZXcgZnVuY3Rpb25zIHRvIGZhY2lsaXRhdGUgZGV2ZWxvcG1lbnQsIHNvIGl0IGlzIHJlY29tbWVuZGVkIHRvIHVzZSB0aGlzIGNsYXNzIGluc3RlYWQgb2YgYFJvc0FkZHJlc3NCb29rc2Bmb3IgYSBtb3JlIGNvbnZlbmllbnQgZGV2ZWxvcG1lbnQgZXhwZXJpZW5jZS5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvZGF0YXNvdXJjZS1jbG91ZGZ3LWFkZHJlc3Nib29rc1xuICovXG5leHBvcnQgY2xhc3MgQWRkcmVzc0Jvb2tzIGV4dGVuZHMgcm9zLlJlc291cmNlIHtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBBZGRyZXNzQm9va3M6IFRoZSBsaXN0IG9mIGFkZHJlc3MgYm9va3MuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJBZGRyZXNzQm9va3M6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBHcm91cFV1aWRzOiBUaGUgbGlzdCBvZiBncm91cCB1dWlkcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckdyb3VwVXVpZHM6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFBhcmFtIHNjb3BlIC0gc2NvcGUgaW4gd2hpY2ggdGhpcyByZXNvdXJjZSBpcyBkZWZpbmVkXG4gICAgICogUGFyYW0gaWQgICAgLSBzY29wZWQgaWQgb2YgdGhlIHJlc291cmNlXG4gICAgICogUGFyYW0gcHJvcHMgLSByZXNvdXJjZSBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IHJvcy5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBBZGRyZXNzQm9va3NQcm9wcyA9IHt9LCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDpib29sZWFuID0gdHJ1ZSkge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQpO1xuXG4gICAgICAgIGNvbnN0IHJvc0FkZHJlc3NCb29rcyA9IG5ldyBSb3NBZGRyZXNzQm9va3ModGhpcywgaWQsICB7XG4gICAgICAgICAgICBncm91cFR5cGU6IHByb3BzLmdyb3VwVHlwZSxcbiAgICAgICAgICAgIGxhbmc6IHByb3BzLmxhbmcsXG4gICAgICAgIH0sIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ICYmIHRoaXMuc3RhY2suZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQpO1xuICAgICAgICB0aGlzLnJlc291cmNlID0gcm9zQWRkcmVzc0Jvb2tzO1xuICAgICAgICB0aGlzLmF0dHJBZGRyZXNzQm9va3MgPSByb3NBZGRyZXNzQm9va3MuYXR0ckFkZHJlc3NCb29rcztcbiAgICAgICAgdGhpcy5hdHRyR3JvdXBVdWlkcyA9IHJvc0FkZHJlc3NCb29rcy5hdHRyR3JvdXBVdWlkcztcbiAgICB9XG59XG4iXX0=