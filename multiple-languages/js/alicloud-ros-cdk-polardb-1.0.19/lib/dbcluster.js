"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DBCluster = exports.DBClusterProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const polardb_generated_1 = require("./polardb.generated");
Object.defineProperty(exports, "DBClusterProperty", { enumerable: true, get: function () { return polardb_generated_1.RosDBCluster; } });
/**
 * A ROS resource type:  `ALIYUN::POLARDB::DBCluster`
 */
class DBCluster extends ros.Resource {
    /**
     * Create a new `ALIYUN::POLARDB::DBCluster`.
     *
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosDBCluster = new polardb_generated_1.RosDBCluster(this, id, {
            defaultTimeZone: props.defaultTimeZone,
            gdnId: props.gdnId,
            resourceGroupId: props.resourceGroupId,
            storagePayType: props.storagePayType,
            backupRetentionPolicyOnClusterDeletion: props.backupRetentionPolicyOnClusterDeletion,
            looseXEngine: props.looseXEngine,
            dbType: props.dbType,
            storageAutoScale: props.storageAutoScale,
            proxyClass: props.proxyClass,
            dbVersion: props.dbVersion,
            dbMinorVersion: props.dbMinorVersion,
            dbClusterParameters: props.dbClusterParameters,
            tags: props.tags,
            tdeStatus: props.tdeStatus,
            storageType: props.storageType,
            architecture: props.architecture,
            vSwitchId: props.vSwitchId,
            renewalStatus: props.renewalStatus === undefined || props.renewalStatus === null ? 'Normal' : props.renewalStatus,
            dbClusterDescription: props.dbClusterDescription,
            period: props.period,
            payType: props.payType,
            securityGroupIds: props.securityGroupIds,
            allowShutDown: props.allowShutDown,
            loosePolarLogBin: props.loosePolarLogBin,
            vpcId: props.vpcId,
            proxyType: props.proxyType,
            dbNodeNum: props.dbNodeNum,
            periodUnit: props.periodUnit,
            storageUpperBound: props.storageUpperBound,
            cloneDataPoint: props.cloneDataPoint === undefined || props.cloneDataPoint === null ? 'LATEST' : props.cloneDataPoint,
            hotStandbyCluster: props.hotStandbyCluster,
            sourceResourceId: props.sourceResourceId,
            scaleRoNumMin: props.scaleRoNumMin,
            clusterNetworkType: props.clusterNetworkType === undefined || props.clusterNetworkType === null ? 'VPC' : props.clusterNetworkType,
            securityIpList: props.securityIpList,
            maintainTime: props.maintainTime,
            standbyAz: props.standbyAz,
            lowerCaseTableNames: props.lowerCaseTableNames,
            autoRenewPeriod: props.autoRenewPeriod === undefined || props.autoRenewPeriod === null ? 1 : props.autoRenewPeriod,
            zoneId: props.zoneId,
            scaleRoNumMax: props.scaleRoNumMax,
            looseXEngineUseMemoryPct: props.looseXEngineUseMemoryPct,
            scaleMax: props.scaleMax,
            creationCategory: props.creationCategory,
            strictConsistency: props.strictConsistency,
            dbNodeClass: props.dbNodeClass,
            creationOption: props.creationOption === undefined || props.creationOption === null ? 'Normal' : props.creationOption,
            parameterGroupId: props.parameterGroupId,
            storageSpace: props.storageSpace,
            serverlessType: props.serverlessType,
            scaleMin: props.scaleMin,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosDBCluster;
        this.attrClusterConnectionString = rosDBCluster.attrClusterConnectionString;
        this.attrClusterEndpointId = rosDBCluster.attrClusterEndpointId;
        this.attrCustomConnectionStrings = rosDBCluster.attrCustomConnectionStrings;
        this.attrCustomEndpointIds = rosDBCluster.attrCustomEndpointIds;
        this.attrDbClusterId = rosDBCluster.attrDbClusterId;
        this.attrDbNodeIds = rosDBCluster.attrDbNodeIds;
        this.attrOrderId = rosDBCluster.attrOrderId;
        this.attrPrimaryConnectionString = rosDBCluster.attrPrimaryConnectionString;
        this.attrPrimaryConnectionStrings = rosDBCluster.attrPrimaryConnectionStrings;
        this.attrPrimaryEndpointId = rosDBCluster.attrPrimaryEndpointId;
        this.attrPrimaryEndpointIds = rosDBCluster.attrPrimaryEndpointIds;
    }
}
exports.DBCluster = DBCluster;
//# sourceMappingURL=data:application/json;base64,