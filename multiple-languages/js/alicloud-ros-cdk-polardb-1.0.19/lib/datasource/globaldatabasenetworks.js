"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GlobalDatabaseNetworks = exports.GlobalDatabaseNetworksProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const polardb_generated_1 = require("./polardb.generated");
Object.defineProperty(exports, "GlobalDatabaseNetworksProperty", { enumerable: true, get: function () { return polardb_generated_1.RosGlobalDatabaseNetworks; } });
/**
 * A ROS resource type:  `DATASOURCE::POLARDB::GlobalDatabaseNetworks`
 */
class GlobalDatabaseNetworks extends ros.Resource {
    /**
     * Create a new `DATASOURCE::POLARDB::GlobalDatabaseNetworks`.
     *
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props = {}, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosGlobalDatabaseNetworks = new polardb_generated_1.RosGlobalDatabaseNetworks(this, id, {
            dbClusterId: props.dbClusterId,
            gdnId: props.gdnId,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosGlobalDatabaseNetworks;
        this.attrGdnIds = rosGlobalDatabaseNetworks.attrGdnIds;
        this.attrGlobalDatabaseNetworks = rosGlobalDatabaseNetworks.attrGlobalDatabaseNetworks;
    }
}
exports.GlobalDatabaseNetworks = GlobalDatabaseNetworks;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2xvYmFsZGF0YWJhc2VuZXR3b3Jrcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImdsb2JhbGRhdGFiYXNlbmV0d29ya3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsOENBQThDO0FBQzlDLDJEQUFnRTtBQUUxQiwrR0FGN0IsNkNBQXlCLE9BRWtDO0FBa0JwRTs7R0FFRztBQUNILE1BQWEsc0JBQXVCLFNBQVEsR0FBRyxDQUFDLFFBQVE7SUFpQnBEOzs7Ozs7T0FNRztJQUNILFlBQVksS0FBb0IsRUFBRSxFQUFVLEVBQUUsUUFBcUMsRUFBRSxFQUFFLG1DQUEyQyxJQUFJO1FBQ2xJLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFakIsTUFBTSx5QkFBeUIsR0FBRyxJQUFJLDZDQUF5QixDQUFDLElBQUksRUFBRSxFQUFFLEVBQUc7WUFDdkUsV0FBVyxFQUFFLEtBQUssQ0FBQyxXQUFXO1lBQzlCLEtBQUssRUFBRSxLQUFLLENBQUMsS0FBSztTQUNyQixFQUFFLGdDQUFnQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztRQUNwRixJQUFJLENBQUMsUUFBUSxHQUFHLHlCQUF5QixDQUFDO1FBQzFDLElBQUksQ0FBQyxVQUFVLEdBQUcseUJBQXlCLENBQUMsVUFBVSxDQUFDO1FBQ3ZELElBQUksQ0FBQywwQkFBMEIsR0FBRyx5QkFBeUIsQ0FBQywwQkFBMEIsQ0FBQztJQUMzRixDQUFDO0NBQ0o7QUFuQ0Qsd0RBbUNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcm9zIGZyb20gJ0BhbGljbG91ZC9yb3MtY2RrLWNvcmUnO1xuaW1wb3J0IHsgUm9zR2xvYmFsRGF0YWJhc2VOZXR3b3JrcyB9IGZyb20gJy4vcG9sYXJkYi5nZW5lcmF0ZWQnO1xuLy8gR2VuZXJhdGVkIGZyb20gdGhlIEFsaUNsb3VkIFJPUyBSZXNvdXJjZSBTcGVjaWZpY2F0aW9uXG5leHBvcnQgeyBSb3NHbG9iYWxEYXRhYmFzZU5ldHdvcmtzIGFzIEdsb2JhbERhdGFiYXNlTmV0d29ya3NQcm9wZXJ0eSB9O1xuXG4vKipcbiAqIFByb3BlcnRpZXMgZm9yIGRlZmluaW5nIGEgYERBVEFTT1VSQ0U6OlBPTEFSREI6Okdsb2JhbERhdGFiYXNlTmV0d29ya3NgXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgR2xvYmFsRGF0YWJhc2VOZXR3b3Jrc1Byb3BzIHtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGRiQ2x1c3RlcklkOiBUaGUgSUQgb2YgdGhlIGNsdXN0ZXIuXG4gICAgICovXG4gICAgcmVhZG9ubHkgZGJDbHVzdGVySWQ/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBnZG5JZDogVGhlIElEIG9mIHRoZSBHRE4uXG4gICAgICovXG4gICAgcmVhZG9ubHkgZ2RuSWQ/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG59XG5cbi8qKlxuICogQSBST1MgcmVzb3VyY2UgdHlwZTogIGBEQVRBU09VUkNFOjpQT0xBUkRCOjpHbG9iYWxEYXRhYmFzZU5ldHdvcmtzYFxuICovXG5leHBvcnQgY2xhc3MgR2xvYmFsRGF0YWJhc2VOZXR3b3JrcyBleHRlbmRzIHJvcy5SZXNvdXJjZSB7XG5cbiAgICAvKipcbiAgICAgKiBBIGZhY3RvcnkgbWV0aG9kIHRoYXQgY3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzIGZyb20gYW4gb2JqZWN0XG4gICAgICogY29udGFpbmluZyB0aGUgcHJvcGVydGllcyBvZiB0aGlzIFJPUyByZXNvdXJjZSwgd2hpY2ggd2lsbCBiZSBhc3NpZ25lZCB0byBST1MgcmVzb3VyY2UuXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgR2RuSWRzOiBUaGUgbGlzdCBvZiBnZG4gSURzLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyR2RuSWRzOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgR2xvYmFsRGF0YWJhc2VOZXR3b3JrczogVGhlIGxpc3Qgb2YgZ2xvYmFsIGRhdGFiYXNlIG5ldHdvcmtzLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyR2xvYmFsRGF0YWJhc2VOZXR3b3Jrczogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IGBEQVRBU09VUkNFOjpQT0xBUkRCOjpHbG9iYWxEYXRhYmFzZU5ldHdvcmtzYC5cbiAgICAgKlxuICAgICAqIFBhcmFtIHNjb3BlIC0gc2NvcGUgaW4gd2hpY2ggdGhpcyByZXNvdXJjZSBpcyBkZWZpbmVkXG4gICAgICogUGFyYW0gaWQgICAgLSBzY29wZWQgaWQgb2YgdGhlIHJlc291cmNlXG4gICAgICogUGFyYW0gcHJvcHMgLSByZXNvdXJjZSBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IHJvcy5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBHbG9iYWxEYXRhYmFzZU5ldHdvcmtzUHJvcHMgPSB7fSwgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6Ym9vbGVhbiA9IHRydWUpIHtcbiAgICAgICAgc3VwZXIoc2NvcGUsIGlkKTtcblxuICAgICAgICBjb25zdCByb3NHbG9iYWxEYXRhYmFzZU5ldHdvcmtzID0gbmV3IFJvc0dsb2JhbERhdGFiYXNlTmV0d29ya3ModGhpcywgaWQsICB7XG4gICAgICAgICAgICBkYkNsdXN0ZXJJZDogcHJvcHMuZGJDbHVzdGVySWQsXG4gICAgICAgICAgICBnZG5JZDogcHJvcHMuZ2RuSWQsXG4gICAgICAgIH0sIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ICYmIHRoaXMuc3RhY2suZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQpO1xuICAgICAgICB0aGlzLnJlc291cmNlID0gcm9zR2xvYmFsRGF0YWJhc2VOZXR3b3JrcztcbiAgICAgICAgdGhpcy5hdHRyR2RuSWRzID0gcm9zR2xvYmFsRGF0YWJhc2VOZXR3b3Jrcy5hdHRyR2RuSWRzO1xuICAgICAgICB0aGlzLmF0dHJHbG9iYWxEYXRhYmFzZU5ldHdvcmtzID0gcm9zR2xvYmFsRGF0YWJhc2VOZXR3b3Jrcy5hdHRyR2xvYmFsRGF0YWJhc2VOZXR3b3JrcztcbiAgICB9XG59XG4iXX0=