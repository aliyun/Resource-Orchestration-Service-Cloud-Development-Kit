"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Group = exports.GroupProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const vs_generated_1 = require("./vs.generated");
Object.defineProperty(exports, "GroupProperty", { enumerable: true, get: function () { return vs_generated_1.RosGroup; } });
/**
 * A ROS resource type:  `ALIYUN::VS::Group`
 */
class Group extends ros.Resource {
    /**
     * Create a new `ALIYUN::VS::Group`.
     *
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosGroup = new vs_generated_1.RosGroup(this, id, {
            app: props.app,
            inProtocol: props.inProtocol,
            callback: props.callback,
            description: props.description,
            playDomain: props.playDomain,
            enabled: props.enabled,
            region: props.region,
            pushDomain: props.pushDomain,
            outProtocol: props.outProtocol,
            lazyPull: props.lazyPull,
            name: props.name,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosGroup;
        this.attrGbId = rosGroup.attrGbId;
        this.attrGbIp = rosGroup.attrGbIp;
        this.attrGbPort = rosGroup.attrGbPort;
        this.attrId = rosGroup.attrId;
    }
}
exports.Group = Group;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JvdXAuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJncm91cC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw4Q0FBOEM7QUFDOUMsaURBQTBDO0FBRXJCLDhGQUZaLHVCQUFRLE9BRWlCO0FBaUVsQzs7R0FFRztBQUNILE1BQWEsS0FBTSxTQUFRLEdBQUcsQ0FBQyxRQUFRO0lBMkJuQzs7Ozs7O09BTUc7SUFDSCxZQUFZLEtBQW9CLEVBQUUsRUFBVSxFQUFFLEtBQWlCLEVBQUUsbUNBQTJDLElBQUk7UUFDNUcsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUVqQixNQUFNLFFBQVEsR0FBRyxJQUFJLHVCQUFRLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRztZQUNyQyxHQUFHLEVBQUUsS0FBSyxDQUFDLEdBQUc7WUFDZCxVQUFVLEVBQUUsS0FBSyxDQUFDLFVBQVU7WUFDNUIsUUFBUSxFQUFFLEtBQUssQ0FBQyxRQUFRO1lBQ3hCLFdBQVcsRUFBRSxLQUFLLENBQUMsV0FBVztZQUM5QixVQUFVLEVBQUUsS0FBSyxDQUFDLFVBQVU7WUFDNUIsT0FBTyxFQUFFLEtBQUssQ0FBQyxPQUFPO1lBQ3RCLE1BQU0sRUFBRSxLQUFLLENBQUMsTUFBTTtZQUNwQixVQUFVLEVBQUUsS0FBSyxDQUFDLFVBQVU7WUFDNUIsV0FBVyxFQUFFLEtBQUssQ0FBQyxXQUFXO1lBQzlCLFFBQVEsRUFBRSxLQUFLLENBQUMsUUFBUTtZQUN4QixJQUFJLEVBQUUsS0FBSyxDQUFDLElBQUk7U0FDbkIsRUFBRSxnQ0FBZ0MsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7UUFDcEYsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7UUFDekIsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUMsUUFBUSxDQUFDO1FBQ2xDLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDLFFBQVEsQ0FBQztRQUNsQyxJQUFJLENBQUMsVUFBVSxHQUFHLFFBQVEsQ0FBQyxVQUFVLENBQUM7UUFDdEMsSUFBSSxDQUFDLE1BQU0sR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDO0lBQ2xDLENBQUM7Q0FDSjtBQXhERCxzQkF3REMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyByb3MgZnJvbSAnQGFsaWNsb3VkL3Jvcy1jZGstY29yZSc7XG5pbXBvcnQgeyBSb3NHcm91cCB9IGZyb20gJy4vdnMuZ2VuZXJhdGVkJztcbi8vIEdlbmVyYXRlZCBmcm9tIHRoZSBBbGlDbG91ZCBST1MgUmVzb3VyY2UgU3BlY2lmaWNhdGlvblxuZXhwb3J0IHsgUm9zR3JvdXAgYXMgR3JvdXBQcm9wZXJ0eSB9O1xuXG4vKipcbiAqIFByb3BlcnRpZXMgZm9yIGRlZmluaW5nIGEgYEFMSVlVTjo6VlM6Okdyb3VwYFxuICovXG5leHBvcnQgaW50ZXJmYWNlIEdyb3VwUHJvcHMge1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgaW5Qcm90b2NvbDogQWNjZXNzIHByb3RvY29sIHVzZWQgYnkgdGhlIHNwYWNlLlxuICAgICAqIFZhbHVlOiBnYjI4MTgxLCBydG1wXG4gICAgICovXG4gICAgcmVhZG9ubHkgaW5Qcm90b2NvbDogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgbmFtZTogU3BhY2UgbmFtZS5cbiAgICAgKi9cbiAgICByZWFkb25seSBuYW1lOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBvdXRQcm90b2NvbDogUGxheSBwcm90b2NvbCB1c2VkIGJ5IHRoZSBzcGFjZSwgbXVsdGl2YWx1ZWQgc2VwYXJhdGVkIGJ5IGNvbW1hcy5cbiAgICAgKiBWYWx1ZTogZmx2LCBobHMsIHJ0bXBcbiAgICAgKi9cbiAgICByZWFkb25seSBvdXRQcm90b2NvbDogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgcGxheURvbWFpbjogVXNlIG9mIHRoZSBkb21haW4gbmFtZSBzcGFjZSBicm9hZGNhc3Qgc3RyZWFtLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHBsYXlEb21haW46IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHB1c2hEb21haW46IFBsdWcgZmxvdyBkb21haW4gbmFtZSBzcGFjZSB0byB1c2UuIChPbmx5IGFjY2VzcyB0byB0aGUgc3BhY2UgcnRtcClcbiAgICAgKi9cbiAgICByZWFkb25seSBwdXNoRG9tYWluOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSByZWdpb246IFNwYWNlIGJlbG9uZ3MgdG8gdGhlIHJlZ2lvbiwgYXMgYSBzZXJ2aWNlIGNlbnRlci5cbiAgICAgKi9cbiAgICByZWFkb25seSByZWdpb246IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGFwcDogQXBwbGljYXRpb24gbmFtZSBzcGFjZSB1c2VkLCB0aGUgZGVmYXVsdCBsaXZlLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGFwcD86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGNhbGxiYWNrOiBVcGRhdGluZyB0aGUgc3BhY2UgY2FsbGJhY2sgZGV2aWNlIC8gZmxvdyBzdGF0ZVxuICAgICAqL1xuICAgIHJlYWRvbmx5IGNhbGxiYWNrPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgZGVzY3JpcHRpb246IFNwYWNlIGRlc2NyaXB0aW9uLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGRlc2NyaXB0aW9uPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgZW5hYmxlZDogU3BhY2UgaXMgZW5hYmxlZC5cbiAgICAgKi9cbiAgICByZWFkb25seSBlbmFibGVkPzogYm9vbGVhbiB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGxhenlQdWxsOiBXaGV0aGVyIHRvIGVuYWJsZSBvbi1kZW1hbmQgcHVsbCBmbG93LCBkZWZhdWx0IGZhbHNlXG4gICAgICovXG4gICAgcmVhZG9ubHkgbGF6eVB1bGw/OiBib29sZWFuIHwgcm9zLklSZXNvbHZhYmxlO1xufVxuXG4vKipcbiAqIEEgUk9TIHJlc291cmNlIHR5cGU6ICBgQUxJWVVOOjpWUzo6R3JvdXBgXG4gKi9cbmV4cG9ydCBjbGFzcyBHcm91cCBleHRlbmRzIHJvcy5SZXNvdXJjZSB7XG5cbiAgICAvKipcbiAgICAgKiBBIGZhY3RvcnkgbWV0aG9kIHRoYXQgY3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzIGZyb20gYW4gb2JqZWN0XG4gICAgICogY29udGFpbmluZyB0aGUgcHJvcGVydGllcyBvZiB0aGlzIFJPUyByZXNvdXJjZSwgd2hpY2ggd2lsbCBiZSBhc3NpZ25lZCB0byBST1MgcmVzb3VyY2UuXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgR2JJZDogR0IgSUQgc3BhY2UgcHJvdmlkZWQuIChBcHBsaWVzIG9ubHkgdG8gYWNjZXNzIHRoZSBzcGFjZSBtYXJrZWQgU3RhdGVzKVxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyR2JJZDogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIEdiSXA6IEdCIHNpZ25hbGluZyBzZXJ2ZXIgYWRkcmVzcyBzcGFjZSBwcm92aWRlZC4gKEFwcGxpZXMgb25seSB0byBhY2Nlc3MgdGhlIHNwYWNlIG1hcmtlZCBTdGF0ZXMpXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJHYklwOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgR2JQb3J0OiBHQiBQb3J0IHNwYWNlIHByb3ZpZGVkLiAoQXBwbGllcyBvbmx5IHRvIGFjY2VzcyB0aGUgc3BhY2UgbWFya2VkIFN0YXRlcylcbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckdiUG9ydDogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIElkOiBTcGFjZSBJRC5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0cklkOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgYEFMSVlVTjo6VlM6Okdyb3VwYC5cbiAgICAgKlxuICAgICAqIFBhcmFtIHNjb3BlIC0gc2NvcGUgaW4gd2hpY2ggdGhpcyByZXNvdXJjZSBpcyBkZWZpbmVkXG4gICAgICogUGFyYW0gaWQgICAgLSBzY29wZWQgaWQgb2YgdGhlIHJlc291cmNlXG4gICAgICogUGFyYW0gcHJvcHMgLSByZXNvdXJjZSBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IHJvcy5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBHcm91cFByb3BzLCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDpib29sZWFuID0gdHJ1ZSkge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQpO1xuXG4gICAgICAgIGNvbnN0IHJvc0dyb3VwID0gbmV3IFJvc0dyb3VwKHRoaXMsIGlkLCAge1xuICAgICAgICAgICAgYXBwOiBwcm9wcy5hcHAsXG4gICAgICAgICAgICBpblByb3RvY29sOiBwcm9wcy5pblByb3RvY29sLFxuICAgICAgICAgICAgY2FsbGJhY2s6IHByb3BzLmNhbGxiYWNrLFxuICAgICAgICAgICAgZGVzY3JpcHRpb246IHByb3BzLmRlc2NyaXB0aW9uLFxuICAgICAgICAgICAgcGxheURvbWFpbjogcHJvcHMucGxheURvbWFpbixcbiAgICAgICAgICAgIGVuYWJsZWQ6IHByb3BzLmVuYWJsZWQsXG4gICAgICAgICAgICByZWdpb246IHByb3BzLnJlZ2lvbixcbiAgICAgICAgICAgIHB1c2hEb21haW46IHByb3BzLnB1c2hEb21haW4sXG4gICAgICAgICAgICBvdXRQcm90b2NvbDogcHJvcHMub3V0UHJvdG9jb2wsXG4gICAgICAgICAgICBsYXp5UHVsbDogcHJvcHMubGF6eVB1bGwsXG4gICAgICAgICAgICBuYW1lOiBwcm9wcy5uYW1lLFxuICAgICAgICB9LCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCAmJiB0aGlzLnN0YWNrLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50KTtcbiAgICAgICAgdGhpcy5yZXNvdXJjZSA9IHJvc0dyb3VwO1xuICAgICAgICB0aGlzLmF0dHJHYklkID0gcm9zR3JvdXAuYXR0ckdiSWQ7XG4gICAgICAgIHRoaXMuYXR0ckdiSXAgPSByb3NHcm91cC5hdHRyR2JJcDtcbiAgICAgICAgdGhpcy5hdHRyR2JQb3J0ID0gcm9zR3JvdXAuYXR0ckdiUG9ydDtcbiAgICAgICAgdGhpcy5hdHRySWQgPSByb3NHcm91cC5hdHRySWQ7XG4gICAgfVxufVxuIl19