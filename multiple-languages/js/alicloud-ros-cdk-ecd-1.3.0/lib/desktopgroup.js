"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DesktopGroup = exports.DesktopGroupProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ecd_generated_1 = require("./ecd.generated");
Object.defineProperty(exports, "DesktopGroupProperty", { enumerable: true, get: function () { return ecd_generated_1.RosDesktopGroup; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::ECD::DesktopGroup`, which is used to create a cloud computer pool.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosDesktopGroup`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-ecd-desktopgroup
 */
class DesktopGroup extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosDesktopGroup = new ecd_generated_1.RosDesktopGroup(this, id, {
            connectDuration: props.connectDuration,
            desktopGroupName: props.desktopGroupName,
            autoRenew: props.autoRenew,
            volumeEncryptionEnabled: props.volumeEncryptionEnabled,
            allowBufferCount: props.allowBufferCount,
            groupVersion: props.groupVersion,
            keepDuration: props.keepDuration,
            idleDisconnectDuration: props.idleDisconnectDuration,
            maxDesktopsCount: props.maxDesktopsCount,
            resetType: props.resetType,
            minDesktopsCount: props.minDesktopsCount,
            comments: props.comments,
            policyGroupId: props.policyGroupId,
            endUserIds: props.endUserIds,
            period: props.period,
            defaultInitDesktopCount: props.defaultInitDesktopCount,
            autoPay: props.autoPay,
            officeSiteId: props.officeSiteId,
            bundleId: props.bundleId,
            stopDuration: props.stopDuration,
            chargeType: props.chargeType,
            volumeEncryptionKey: props.volumeEncryptionKey,
            allowAutoSetup: props.allowAutoSetup,
            buyDesktopsCount: props.buyDesktopsCount,
            periodUnit: props.periodUnit,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosDesktopGroup;
        this.attrDesktopGroupId = rosDesktopGroup.attrDesktopGroupId;
    }
}
exports.DesktopGroup = DesktopGroup;
//# sourceMappingURL=data:application/json;base64,