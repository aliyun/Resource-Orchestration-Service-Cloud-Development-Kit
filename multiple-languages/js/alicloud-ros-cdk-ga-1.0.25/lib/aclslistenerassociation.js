"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AclsListenerAssociation = exports.AclsListenerAssociationProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ga_generated_1 = require("./ga.generated");
Object.defineProperty(exports, "AclsListenerAssociationProperty", { enumerable: true, get: function () { return ga_generated_1.RosAclsListenerAssociation; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::GA::AclsListenerAssociation`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosAclsListenerAssociation`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-ga-aclslistenerassociation
 */
class AclsListenerAssociation extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosAclsListenerAssociation = new ga_generated_1.RosAclsListenerAssociation(this, id, {
            aclType: props.aclType,
            aclIds: props.aclIds,
            listenerId: props.listenerId,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosAclsListenerAssociation;
        this.attrAclIds = rosAclsListenerAssociation.attrAclIds;
        this.attrListenerId = rosAclsListenerAssociation.attrListenerId;
    }
}
exports.AclsListenerAssociation = AclsListenerAssociation;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNsc2xpc3RlbmVyYXNzb2NpYXRpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJhY2xzbGlzdGVuZXJhc3NvY2lhdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw4Q0FBOEM7QUFDOUMsaURBQTREO0FBRXJCLGdIQUY5Qix5Q0FBMEIsT0FFbUM7QUF5QnRFOzs7O0dBSUc7QUFDSCxNQUFhLHVCQUF3QixTQUFRLEdBQUcsQ0FBQyxRQUFRO0lBZ0JyRDs7OztPQUlHO0lBQ0gsWUFBWSxLQUFvQixFQUFFLEVBQVUsRUFBRSxLQUFtQyxFQUFFLG1DQUEyQyxJQUFJO1FBQzlILEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDakIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUM7UUFDYixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsZ0NBQWdDLEdBQUcsZ0NBQWdDLENBQUM7UUFFekUsTUFBTSwwQkFBMEIsR0FBRyxJQUFJLHlDQUEwQixDQUFDLElBQUksRUFBRSxFQUFFLEVBQUc7WUFDekUsT0FBTyxFQUFFLEtBQUssQ0FBQyxPQUFPO1lBQ3RCLE1BQU0sRUFBRSxLQUFLLENBQUMsTUFBTTtZQUNwQixVQUFVLEVBQUUsS0FBSyxDQUFDLFVBQVU7U0FDL0IsRUFBRSxnQ0FBZ0MsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7UUFDcEYsSUFBSSxDQUFDLFFBQVEsR0FBRywwQkFBMEIsQ0FBQztRQUMzQyxJQUFJLENBQUMsVUFBVSxHQUFHLDBCQUEwQixDQUFDLFVBQVUsQ0FBQztRQUN4RCxJQUFJLENBQUMsY0FBYyxHQUFHLDBCQUEwQixDQUFDLGNBQWMsQ0FBQztJQUNwRSxDQUFDO0NBQ0o7QUFyQ0QsMERBcUNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcm9zIGZyb20gJ0BhbGljbG91ZC9yb3MtY2RrLWNvcmUnO1xuaW1wb3J0IHsgUm9zQWNsc0xpc3RlbmVyQXNzb2NpYXRpb24gfSBmcm9tICcuL2dhLmdlbmVyYXRlZCc7XG4vLyBHZW5lcmF0ZWQgZnJvbSB0aGUgQWxpQ2xvdWQgUk9TIFJlc291cmNlIFNwZWNpZmljYXRpb25cbmV4cG9ydCB7IFJvc0FjbHNMaXN0ZW5lckFzc29jaWF0aW9uIGFzIEFjbHNMaXN0ZW5lckFzc29jaWF0aW9uUHJvcGVydHkgfTtcblxuLyoqXG4gKiBQcm9wZXJ0aWVzIGZvciBkZWZpbmluZyBhIGBBY2xzTGlzdGVuZXJBc3NvY2lhdGlvbmAuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2FsaXl1bi1nYS1hY2xzbGlzdGVuZXJhc3NvY2lhdGlvblxuICovXG5leHBvcnQgaW50ZXJmYWNlIEFjbHNMaXN0ZW5lckFzc29jaWF0aW9uUHJvcHMge1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgYWNsSWRzOiBUaGUgSUQgb2YgdGhlIEFDTC4gWW91IGNhbiBhc3NvY2lhdGUgdXAgdG8gdHdvIEFDTCBJRHMuXG4gICAgICovXG4gICAgcmVhZG9ubHkgYWNsSWRzOiBBcnJheTxzdHJpbmcgfCByb3MuSVJlc29sdmFibGU+IHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgYWNsVHlwZTogVGhlIHR5cGUgb2YgQUNMLiBWYWxpZCB2YWx1ZXM6d2hpdGU6IGEgd2hpdGVsaXN0LiBPbmx5IHJlcXVlc3RzIGZyb20gdGhlIElQIGFkZHJlc3NlcyBvciBDSURSIGJsb2NrcyBpbiB0aGUgQUNMIGFyZSBmb3J3YXJkZWQuIFdoaXRlbGlzdHMgYXBwbHkgdG8gc2NlbmFyaW9zIGluIHdoaWNoIHlvdSB3YW50IHRvIGFsbG93IG9ubHkgc3BlY2lmaWMgSVAgYWRkcmVzc2VzIHRvIGFjY2VzcyBhbiBhcHBsaWNhdGlvbi4gWW91ciBzZXJ2aWNlIG1heSBiZSBhZHZlcnNlbHkgYWZmZWN0ZWQgaWYgdGhlIHdoaXRlbGlzdCBpcyBub3QgcHJvcGVybHkgY29uZmlndXJlZC4gQWZ0ZXIgeW91IGNvbmZpZ3VyZSBhIHdoaXRlbGlzdCBmb3IgYSBsaXN0ZW5lciwgb25seSByZXF1ZXN0cyBmcm9tIHRoZSBJUCBhZGRyZXNzZXMgdGhhdCBhcmUgYWRkZWQgdG8gdGhlIHdoaXRlbGlzdCBhcmUgZm9yd2FyZGVkIGJ5IHRoZSBsaXN0ZW5lci4gSWYgdGhlIHdoaXRlbGlzdCBpcyBlbmFibGVkIGJ1dCBubyBJUCBhZGRyZXNzZXMgYXJlIGFkZGVkIHRvIGl0LCB0aGUgbGlzdGVuZXIgZG9lcyBub3QgZm9yd2FyZCByZXF1ZXN0cy5cbiAgICAgKiBibGFjazogYSBibGFja2xpc3QuIEFsbCByZXF1ZXN0cyBmcm9tIHRoZSBJUCBhZGRyZXNzZXMgb3IgQ0lEUiBibG9ja3MgaW4gdGhlIEFDTCBhcmUgZGVuaWVkLiBCbGFja2xpc3RzIGFwcGx5IHRvIHNjZW5hcmlvcyBpbiB3aGljaCB5b3Ugd2FudCB0byBkZW55IGFjY2VzcyBmcm9tIHNwZWNpZmljIElQIGFkZHJlc3NlcyB0byBhbiBhcHBsaWNhdGlvbi4gSWYgdGhlIGJsYWNrbGlzdCBpcyBlbmFibGVkIGJ1dCBubyBJUCBhZGRyZXNzZXMgYXJlIGFkZGVkIHRvIGl0LCB0aGUgbGlzdGVuZXIgZm9yd2FyZHMgYWxsIHJlcXVlc3RzLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGFjbFR5cGU6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGxpc3RlbmVySWQ6IFRoZSBJRCBvZiB0aGUgbGlzdGVuZXIuXG4gICAgICovXG4gICAgcmVhZG9ubHkgbGlzdGVuZXJJZDogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xufVxuXG4vKipcbiAqIFRoaXMgY2xhc3MgZW5jYXBzdWxhdGVzIGFuZCBleHRlbmRzIHRoZSBST1MgcmVzb3VyY2UgdHlwZSBgQUxJWVVOOjpHQTo6QWNsc0xpc3RlbmVyQXNzb2NpYXRpb25gLlxuICogQE5vdGUgVGhpcyBjbGFzcyBtYXkgaGF2ZSBzb21lIG5ldyBmdW5jdGlvbnMgdG8gZmFjaWxpdGF0ZSBkZXZlbG9wbWVudCwgc28gaXQgaXMgcmVjb21tZW5kZWQgdG8gdXNlIHRoaXMgY2xhc3MgaW5zdGVhZCBvZiBgUm9zQWNsc0xpc3RlbmVyQXNzb2NpYXRpb25gZm9yIGEgbW9yZSBjb252ZW5pZW50IGRldmVsb3BtZW50IGV4cGVyaWVuY2UuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2FsaXl1bi1nYS1hY2xzbGlzdGVuZXJhc3NvY2lhdGlvblxuICovXG5leHBvcnQgY2xhc3MgQWNsc0xpc3RlbmVyQXNzb2NpYXRpb24gZXh0ZW5kcyByb3MuUmVzb3VyY2Uge1xuICAgIHByb3RlY3RlZCBzY29wZTogcm9zLkNvbnN0cnVjdDtcbiAgICBwcm90ZWN0ZWQgaWQ6IHN0cmluZztcbiAgICBwcm90ZWN0ZWQgcHJvcHM6IEFjbHNMaXN0ZW5lckFzc29jaWF0aW9uUHJvcHM7XG4gICAgcHJvdGVjdGVkIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OiBib29sZWFuO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIEFjbElkczogVGhlIElEcyBvZiB0aGUgQUNMLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyQWNsSWRzOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgTGlzdGVuZXJJZDogVGhlIElEIG9mIHRoZSBsaXN0ZW5lci5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckxpc3RlbmVySWQ6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFBhcmFtIHNjb3BlIC0gc2NvcGUgaW4gd2hpY2ggdGhpcyByZXNvdXJjZSBpcyBkZWZpbmVkXG4gICAgICogUGFyYW0gaWQgICAgLSBzY29wZWQgaWQgb2YgdGhlIHJlc291cmNlXG4gICAgICogUGFyYW0gcHJvcHMgLSByZXNvdXJjZSBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IHJvcy5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBBY2xzTGlzdGVuZXJBc3NvY2lhdGlvblByb3BzLCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDpib29sZWFuID0gdHJ1ZSkge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQpO1xuICAgICAgICB0aGlzLnNjb3BlID0gc2NvcGU7XG4gICAgICAgIHRoaXMuaWQgPSBpZDtcbiAgICAgICAgdGhpcy5wcm9wcyA9IHByb3BzO1xuICAgICAgICB0aGlzLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ID0gZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ7XG5cbiAgICAgICAgY29uc3Qgcm9zQWNsc0xpc3RlbmVyQXNzb2NpYXRpb24gPSBuZXcgUm9zQWNsc0xpc3RlbmVyQXNzb2NpYXRpb24odGhpcywgaWQsICB7XG4gICAgICAgICAgICBhY2xUeXBlOiBwcm9wcy5hY2xUeXBlLFxuICAgICAgICAgICAgYWNsSWRzOiBwcm9wcy5hY2xJZHMsXG4gICAgICAgICAgICBsaXN0ZW5lcklkOiBwcm9wcy5saXN0ZW5lcklkLFxuICAgICAgICB9LCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCAmJiB0aGlzLnN0YWNrLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50KTtcbiAgICAgICAgdGhpcy5yZXNvdXJjZSA9IHJvc0FjbHNMaXN0ZW5lckFzc29jaWF0aW9uO1xuICAgICAgICB0aGlzLmF0dHJBY2xJZHMgPSByb3NBY2xzTGlzdGVuZXJBc3NvY2lhdGlvbi5hdHRyQWNsSWRzO1xuICAgICAgICB0aGlzLmF0dHJMaXN0ZW5lcklkID0gcm9zQWNsc0xpc3RlbmVyQXNzb2NpYXRpb24uYXR0ckxpc3RlbmVySWQ7XG4gICAgfVxufVxuIl19