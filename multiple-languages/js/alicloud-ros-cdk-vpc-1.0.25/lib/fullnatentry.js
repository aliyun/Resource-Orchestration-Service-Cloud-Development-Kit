"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FullNatEntry = exports.FullNatEntryProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const vpc_generated_1 = require("./vpc.generated");
Object.defineProperty(exports, "FullNatEntryProperty", { enumerable: true, get: function () { return vpc_generated_1.RosFullNatEntry; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::VPC::FullNatEntry`, which is used to add a FULLNAT entry to a FULLNAT table.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosFullNatEntry`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-vpc-fullnatentry
 */
class FullNatEntry extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosFullNatEntry = new vpc_generated_1.RosFullNatEntry(this, id, {
            natIp: props.natIp,
            fullNatEntryDescription: props.fullNatEntryDescription,
            accessIp: props.accessIp,
            fullNatTableId: props.fullNatTableId,
            fullNatEntryName: props.fullNatEntryName,
            natIpPort: props.natIpPort,
            ipProtocol: props.ipProtocol,
            accessPort: props.accessPort,
            networkInterfaceId: props.networkInterfaceId,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosFullNatEntry;
        this.attrFullNatEntryId = rosFullNatEntry.attrFullNatEntryId;
    }
}
exports.FullNatEntry = FullNatEntry;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnVsbG5hdGVudHJ5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZnVsbG5hdGVudHJ5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDhDQUE4QztBQUM5QyxtREFBa0Q7QUFFdEIscUdBRm5CLCtCQUFlLE9BRXdCO0FBeURoRDs7OztHQUlHO0FBQ0gsTUFBYSxZQUFhLFNBQVEsR0FBRyxDQUFDLFFBQVE7SUFXMUM7Ozs7T0FJRztJQUNILFlBQVksS0FBb0IsRUFBRSxFQUFVLEVBQUUsS0FBd0IsRUFBRSxtQ0FBMkMsSUFBSTtRQUNuSCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ2pCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQ2IsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLGdDQUFnQyxHQUFHLGdDQUFnQyxDQUFDO1FBRXpFLE1BQU0sZUFBZSxHQUFHLElBQUksK0JBQWUsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFHO1lBQ25ELEtBQUssRUFBRSxLQUFLLENBQUMsS0FBSztZQUNsQix1QkFBdUIsRUFBRSxLQUFLLENBQUMsdUJBQXVCO1lBQ3RELFFBQVEsRUFBRSxLQUFLLENBQUMsUUFBUTtZQUN4QixjQUFjLEVBQUUsS0FBSyxDQUFDLGNBQWM7WUFDcEMsZ0JBQWdCLEVBQUUsS0FBSyxDQUFDLGdCQUFnQjtZQUN4QyxTQUFTLEVBQUUsS0FBSyxDQUFDLFNBQVM7WUFDMUIsVUFBVSxFQUFFLEtBQUssQ0FBQyxVQUFVO1lBQzVCLFVBQVUsRUFBRSxLQUFLLENBQUMsVUFBVTtZQUM1QixrQkFBa0IsRUFBRSxLQUFLLENBQUMsa0JBQWtCO1NBQy9DLEVBQUUsZ0NBQWdDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO1FBQ3BGLElBQUksQ0FBQyxRQUFRLEdBQUcsZUFBZSxDQUFDO1FBQ2hDLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxlQUFlLENBQUMsa0JBQWtCLENBQUM7SUFDakUsQ0FBQztDQUNKO0FBckNELG9DQXFDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHJvcyBmcm9tICdAYWxpY2xvdWQvcm9zLWNkay1jb3JlJztcbmltcG9ydCB7IFJvc0Z1bGxOYXRFbnRyeSB9IGZyb20gJy4vdnBjLmdlbmVyYXRlZCc7XG4vLyBHZW5lcmF0ZWQgZnJvbSB0aGUgQWxpQ2xvdWQgUk9TIFJlc291cmNlIFNwZWNpZmljYXRpb25cbmV4cG9ydCB7IFJvc0Z1bGxOYXRFbnRyeSBhcyBGdWxsTmF0RW50cnlQcm9wZXJ0eSB9O1xuXG4vKipcbiAqIFByb3BlcnRpZXMgZm9yIGRlZmluaW5nIGEgYEZ1bGxOYXRFbnRyeWAuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2FsaXl1bi12cGMtZnVsbG5hdGVudHJ5XG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRnVsbE5hdEVudHJ5UHJvcHMge1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgYWNjZXNzSXA6IFRoZSBiYWNrZW5kIElQIGFkZHJlc3MgdG8gYmUgbW9kaWZpZWQgaW4gRlVMTE5BVCBhZGRyZXNzIHRyYW5zbGF0aW9uLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGFjY2Vzc0lwOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBhY2Nlc3NQb3J0OiBUaGUgYmFja2VuZCBwb3J0IHRvIGJlIG1vZGlmaWVkIGluIHRoZSBtYXBwaW5nIG9mIEZVTExOQVQgcG9ydC4gVmFsaWQgdmFsdWVzOiAxIHRvIDY1NTM1LlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGFjY2Vzc1BvcnQ6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGZ1bGxOYXRUYWJsZUlkOiBUaGUgSUQgb2YgdGhlIEZVTExOQVQgdGFibGUgdG8gd2hpY2ggdGhlIEZVTExOQVQgZW50cnkgYmVsb25ncy5cbiAgICAgKi9cbiAgICByZWFkb25seSBmdWxsTmF0VGFibGVJZDogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgaXBQcm90b2NvbDogVGhlIHByb3RvY29sIG9mIHRoZSBwYWNrZXRzIHRoYXQgYXJlIGZvcndhcmRlZCBieSB0aGUgcG9ydC4gVmFsaWQgdmFsdWVzOlxuICAgICAqIFRDUFxuICAgICAqIFVEUFxuICAgICAqL1xuICAgIHJlYWRvbmx5IGlwUHJvdG9jb2w6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IG5hdElwOiBUaGUgTkFUIElQIGFkZHJlc3MgdGhhdCBwcm92aWRlcyBhZGRyZXNzIHRyYW5zbGF0aW9uLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IG5hdElwOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBuYXRJcFBvcnQ6IFRoZSBmcm9udGVuZCBwb3J0IHRvIGJlIG1vZGlmaWVkIGluIHRoZSBtYXBwaW5nIG9mIEZVTExOQVQgcG9ydC4gVmFsaWQgdmFsdWVzOiAxIHRvIDY1NTM1LlxuICAgICAqL1xuICAgIHJlYWRvbmx5IG5hdElwUG9ydDogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgbmV0d29ya0ludGVyZmFjZUlkOiBUaGUgZWxhc3RpYyBuZXR3b3JrIGludGVyZmFjZSAoRU5JKSBJRC5cbiAgICAgKi9cbiAgICByZWFkb25seSBuZXR3b3JrSW50ZXJmYWNlSWQ6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGZ1bGxOYXRFbnRyeURlc2NyaXB0aW9uOiBUaGUgZGVzY3JpcHRpb24gb2YgdGhlIEZVTExOQVQgZW50cnkuXG4gICAgICogVGhpcyBwYXJhbWV0ZXIgaXMgb3B0aW9uYWwuIElmIHlvdSBlbnRlciBhIGRlc2NyaXB0aW9uLCB0aGUgZGVzY3JpcHRpb24gbXVzdCBiZSAyIHRvIDI1NiBjaGFyYWN0ZXJzIGluIGxlbmd0aCwgYW5kIGNhbm5vdCBzdGFydCB3aXRoIGh0dHA6XFwvXFwvIG9yIGh0dHBzOlxcL1xcLy5cbiAgICAgKi9cbiAgICByZWFkb25seSBmdWxsTmF0RW50cnlEZXNjcmlwdGlvbj86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGZ1bGxOYXRFbnRyeU5hbWU6IFRoZSBGVUxMTkFUIGVudHJ5IG5hbWUuIFRoZSBuYW1lIG11c3QgYmUgMiB0byAxMjggY2hhcmFjdGVycyBpbiBsZW5ndGguIEl0IG11c3Qgc3RhcnQgd2l0aCBhIGxldHRlciBidXQgY2Fubm90IHN0YXJ0IHdpdGggaHR0cDpcXC9cXC8gb3IgaHR0cHM6XFwvXFwvLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGZ1bGxOYXRFbnRyeU5hbWU/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG59XG5cbi8qKlxuICogVGhpcyBjbGFzcyBlbmNhcHN1bGF0ZXMgYW5kIGV4dGVuZHMgdGhlIFJPUyByZXNvdXJjZSB0eXBlIGBBTElZVU46OlZQQzo6RnVsbE5hdEVudHJ5YCwgd2hpY2ggaXMgdXNlZCB0byBhZGQgYSBGVUxMTkFUIGVudHJ5IHRvIGEgRlVMTE5BVCB0YWJsZS5cbiAqIEBOb3RlIFRoaXMgY2xhc3MgbWF5IGhhdmUgc29tZSBuZXcgZnVuY3Rpb25zIHRvIGZhY2lsaXRhdGUgZGV2ZWxvcG1lbnQsIHNvIGl0IGlzIHJlY29tbWVuZGVkIHRvIHVzZSB0aGlzIGNsYXNzIGluc3RlYWQgb2YgYFJvc0Z1bGxOYXRFbnRyeWBmb3IgYSBtb3JlIGNvbnZlbmllbnQgZGV2ZWxvcG1lbnQgZXhwZXJpZW5jZS5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvYWxpeXVuLXZwYy1mdWxsbmF0ZW50cnlcbiAqL1xuZXhwb3J0IGNsYXNzIEZ1bGxOYXRFbnRyeSBleHRlbmRzIHJvcy5SZXNvdXJjZSB7XG4gICAgcHJvdGVjdGVkIHNjb3BlOiByb3MuQ29uc3RydWN0O1xuICAgIHByb3RlY3RlZCBpZDogc3RyaW5nO1xuICAgIHByb3RlY3RlZCBwcm9wczogRnVsbE5hdEVudHJ5UHJvcHM7XG4gICAgcHJvdGVjdGVkIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OiBib29sZWFuO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIEZ1bGxOYXRFbnRyeUlkOiBUaGUgRlVMTE5BVCBlbnRyeSBJRC5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckZ1bGxOYXRFbnRyeUlkOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQYXJhbSBzY29wZSAtIHNjb3BlIGluIHdoaWNoIHRoaXMgcmVzb3VyY2UgaXMgZGVmaW5lZFxuICAgICAqIFBhcmFtIGlkICAgIC0gc2NvcGVkIGlkIG9mIHRoZSByZXNvdXJjZVxuICAgICAqIFBhcmFtIHByb3BzIC0gcmVzb3VyY2UgcHJvcGVydGllc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiByb3MuQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogRnVsbE5hdEVudHJ5UHJvcHMsIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OmJvb2xlYW4gPSB0cnVlKSB7XG4gICAgICAgIHN1cGVyKHNjb3BlLCBpZCk7XG4gICAgICAgIHRoaXMuc2NvcGUgPSBzY29wZTtcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xuICAgICAgICB0aGlzLnByb3BzID0gcHJvcHM7XG4gICAgICAgIHRoaXMuZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgPSBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDtcblxuICAgICAgICBjb25zdCByb3NGdWxsTmF0RW50cnkgPSBuZXcgUm9zRnVsbE5hdEVudHJ5KHRoaXMsIGlkLCAge1xuICAgICAgICAgICAgbmF0SXA6IHByb3BzLm5hdElwLFxuICAgICAgICAgICAgZnVsbE5hdEVudHJ5RGVzY3JpcHRpb246IHByb3BzLmZ1bGxOYXRFbnRyeURlc2NyaXB0aW9uLFxuICAgICAgICAgICAgYWNjZXNzSXA6IHByb3BzLmFjY2Vzc0lwLFxuICAgICAgICAgICAgZnVsbE5hdFRhYmxlSWQ6IHByb3BzLmZ1bGxOYXRUYWJsZUlkLFxuICAgICAgICAgICAgZnVsbE5hdEVudHJ5TmFtZTogcHJvcHMuZnVsbE5hdEVudHJ5TmFtZSxcbiAgICAgICAgICAgIG5hdElwUG9ydDogcHJvcHMubmF0SXBQb3J0LFxuICAgICAgICAgICAgaXBQcm90b2NvbDogcHJvcHMuaXBQcm90b2NvbCxcbiAgICAgICAgICAgIGFjY2Vzc1BvcnQ6IHByb3BzLmFjY2Vzc1BvcnQsXG4gICAgICAgICAgICBuZXR3b3JrSW50ZXJmYWNlSWQ6IHByb3BzLm5ldHdvcmtJbnRlcmZhY2VJZCxcbiAgICAgICAgfSwgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgJiYgdGhpcy5zdGFjay5lbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCk7XG4gICAgICAgIHRoaXMucmVzb3VyY2UgPSByb3NGdWxsTmF0RW50cnk7XG4gICAgICAgIHRoaXMuYXR0ckZ1bGxOYXRFbnRyeUlkID0gcm9zRnVsbE5hdEVudHJ5LmF0dHJGdWxsTmF0RW50cnlJZDtcbiAgICB9XG59XG4iXX0=