"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VpnGateway = exports.VpnGatewayProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const vpc_generated_1 = require("./vpc.generated");
Object.defineProperty(exports, "VpnGatewayProperty", { enumerable: true, get: function () { return vpc_generated_1.RosVpnGateway; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::VPC::VpnGateway`, which is used to create a VPN gateway.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosVpnGateway`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-vpc-vpngateway
 */
class VpnGateway extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosVpnGateway = new vpc_generated_1.RosVpnGateway(this, id, {
            enableIpsec: props.enableIpsec === undefined || props.enableIpsec === null ? true : props.enableIpsec,
            enableSsl: props.enableSsl === undefined || props.enableSsl === null ? false : props.enableSsl,
            vpnType: props.vpnType,
            sslConnections: props.sslConnections,
            disasterRecoveryVSwitchId: props.disasterRecoveryVSwitchId,
            description: props.description,
            instanceChargeType: props.instanceChargeType === undefined || props.instanceChargeType === null ? 'PREPAY' : props.instanceChargeType,
            vSwitchId: props.vSwitchId,
            period: props.period,
            autoPay: props.autoPay === undefined || props.autoPay === null ? true : props.autoPay,
            name: props.name,
            vpcId: props.vpcId,
            networkType: props.networkType,
            bandwidth: props.bandwidth,
            tags: props.tags,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosVpnGateway;
        this.attrDisasterRecoveryInternetIp = rosVpnGateway.attrDisasterRecoveryInternetIp;
        this.attrDisasterRecoveryVSwitchId = rosVpnGateway.attrDisasterRecoveryVSwitchId;
        this.attrInternetIp = rosVpnGateway.attrInternetIp;
        this.attrOrderId = rosVpnGateway.attrOrderId;
        this.attrSpec = rosVpnGateway.attrSpec;
        this.attrSslMaxConnections = rosVpnGateway.attrSslMaxConnections;
        this.attrSslVpnInternetIp = rosVpnGateway.attrSslVpnInternetIp;
        this.attrVSwitchId = rosVpnGateway.attrVSwitchId;
        this.attrVpcId = rosVpnGateway.attrVpcId;
        this.attrVpnGatewayId = rosVpnGateway.attrVpnGatewayId;
        this.attrVpnType = rosVpnGateway.attrVpnType;
    }
}
exports.VpnGateway = VpnGateway;
//# sourceMappingURL=data:application/json;base64,