"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Address = exports.AddressProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const vpc_generated_1 = require("./vpc.generated");
Object.defineProperty(exports, "AddressProperty", { enumerable: true, get: function () { return vpc_generated_1.RosAddress; } });
/**
 * This class encapsulates and extends the ROS resource type `DATASOURCE::EIP::Address`, which is used to query the information about a created elastic IP address (EIP).
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosAddress`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/datasource-eip-address
 */
class Address extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosAddress = new vpc_generated_1.RosAddress(this, id, {
            allocationId: props.allocationId,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosAddress;
        this.attrAddressName = rosAddress.attrAddressName;
        this.attrAllocationId = rosAddress.attrAllocationId;
        this.attrBandwidth = rosAddress.attrBandwidth;
        this.attrBandwidthPackageBandwidth = rosAddress.attrBandwidthPackageBandwidth;
        this.attrBandwidthPackageId = rosAddress.attrBandwidthPackageId;
        this.attrBandwidthPackageType = rosAddress.attrBandwidthPackageType;
        this.attrBusinessStatus = rosAddress.attrBusinessStatus;
        this.attrCreateTime = rosAddress.attrCreateTime;
        this.attrDeletionProtection = rosAddress.attrDeletionProtection;
        this.attrDescription = rosAddress.attrDescription;
        this.attrEipBandwidth = rosAddress.attrEipBandwidth;
        this.attrExpiredTime = rosAddress.attrExpiredTime;
        this.attrHasReservationData = rosAddress.attrHasReservationData;
        this.attrHdMonitorStatus = rosAddress.attrHdMonitorStatus;
        this.attrInstanceId = rosAddress.attrInstanceId;
        this.attrInstanceRegionId = rosAddress.attrInstanceRegionId;
        this.attrInstanceType = rosAddress.attrInstanceType;
        this.attrIpAddress = rosAddress.attrIpAddress;
        this.attrIsp = rosAddress.attrIsp;
        this.attrNetmode = rosAddress.attrNetmode;
        this.attrOperationLocks = rosAddress.attrOperationLocks;
        this.attrPaymentType = rosAddress.attrPaymentType;
        this.attrPublicIpAddressPoolId = rosAddress.attrPublicIpAddressPoolId;
        this.attrReservationActiveTime = rosAddress.attrReservationActiveTime;
        this.attrReservationBandwidth = rosAddress.attrReservationBandwidth;
        this.attrReservationInternetChargeType = rosAddress.attrReservationInternetChargeType;
        this.attrReservationOrderType = rosAddress.attrReservationOrderType;
        this.attrResourceGroupId = rosAddress.attrResourceGroupId;
        this.attrSecondLimited = rosAddress.attrSecondLimited;
        this.attrSecurityProtectionTypes = rosAddress.attrSecurityProtectionTypes;
        this.attrSegmentInstanceId = rosAddress.attrSegmentInstanceId;
        this.attrServiceManaged = rosAddress.attrServiceManaged;
        this.attrTags = rosAddress.attrTags;
    }
}
exports.Address = Address;
//# sourceMappingURL=data:application/json;base64,