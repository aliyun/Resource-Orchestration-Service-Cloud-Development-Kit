"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CommonBandwidthPackages = exports.CommonBandwidthPackagesProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const vpc_generated_1 = require("./vpc.generated");
Object.defineProperty(exports, "CommonBandwidthPackagesProperty", { enumerable: true, get: function () { return vpc_generated_1.RosCommonBandwidthPackages; } });
/**
 * This class encapsulates and extends the ROS resource type `DATASOURCE::VPC::CommonBandwidthPackages`, which is used to query the elastic IP address (EIP) bandwidth plans in a specified region.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosCommonBandwidthPackages`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/datasource-vpc-commonbandwidthpackages
 */
class CommonBandwidthPackages extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props = {}, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosCommonBandwidthPackages = new vpc_generated_1.RosCommonBandwidthPackages(this, id, {
            resourceGroupId: props.resourceGroupId,
            commonBandwidthPackageName: props.commonBandwidthPackageName,
            commonBandwidthPackageId: props.commonBandwidthPackageId,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosCommonBandwidthPackages;
        this.attrCommonBandwidthPackageIds = rosCommonBandwidthPackages.attrCommonBandwidthPackageIds;
        this.attrCommonBandwidthPackages = rosCommonBandwidthPackages.attrCommonBandwidthPackages;
    }
}
exports.CommonBandwidthPackages = CommonBandwidthPackages;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbW9uYmFuZHdpZHRocGFja2FnZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjb21tb25iYW5kd2lkdGhwYWNrYWdlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw4Q0FBOEM7QUFDOUMsbURBQTZEO0FBRXRCLGdIQUY5QiwwQ0FBMEIsT0FFbUM7QUF3QnRFOzs7O0dBSUc7QUFDSCxNQUFhLHVCQUF3QixTQUFRLEdBQUcsQ0FBQyxRQUFRO0lBZ0JyRDs7OztPQUlHO0lBQ0gsWUFBWSxLQUFvQixFQUFFLEVBQVUsRUFBRSxRQUFzQyxFQUFFLEVBQUUsbUNBQTJDLElBQUk7UUFDbkksS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNqQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUNiLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxnQ0FBZ0MsR0FBRyxnQ0FBZ0MsQ0FBQztRQUV6RSxNQUFNLDBCQUEwQixHQUFHLElBQUksMENBQTBCLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRztZQUN6RSxlQUFlLEVBQUUsS0FBSyxDQUFDLGVBQWU7WUFDdEMsMEJBQTBCLEVBQUUsS0FBSyxDQUFDLDBCQUEwQjtZQUM1RCx3QkFBd0IsRUFBRSxLQUFLLENBQUMsd0JBQXdCO1NBQzNELEVBQUUsZ0NBQWdDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO1FBQ3BGLElBQUksQ0FBQyxRQUFRLEdBQUcsMEJBQTBCLENBQUM7UUFDM0MsSUFBSSxDQUFDLDZCQUE2QixHQUFHLDBCQUEwQixDQUFDLDZCQUE2QixDQUFDO1FBQzlGLElBQUksQ0FBQywyQkFBMkIsR0FBRywwQkFBMEIsQ0FBQywyQkFBMkIsQ0FBQztJQUM5RixDQUFDO0NBQ0o7QUFyQ0QsMERBcUNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcm9zIGZyb20gJ0BhbGljbG91ZC9yb3MtY2RrLWNvcmUnO1xuaW1wb3J0IHsgUm9zQ29tbW9uQmFuZHdpZHRoUGFja2FnZXMgfSBmcm9tICcuL3ZwYy5nZW5lcmF0ZWQnO1xuLy8gR2VuZXJhdGVkIGZyb20gdGhlIEFsaUNsb3VkIFJPUyBSZXNvdXJjZSBTcGVjaWZpY2F0aW9uXG5leHBvcnQgeyBSb3NDb21tb25CYW5kd2lkdGhQYWNrYWdlcyBhcyBDb21tb25CYW5kd2lkdGhQYWNrYWdlc1Byb3BlcnR5IH07XG5cbi8qKlxuICogUHJvcGVydGllcyBmb3IgZGVmaW5pbmcgYSBgQ29tbW9uQmFuZHdpZHRoUGFja2FnZXNgLlxuICogU2VlIGh0dHBzOi8vd3d3LmFsaWJhYmFjbG91ZC5jb20vaGVscC9yb3MvZGV2ZWxvcGVyLXJlZmVyZW5jZS9kYXRhc291cmNlLXZwYy1jb21tb25iYW5kd2lkdGhwYWNrYWdlc1xuICovXG5leHBvcnQgaW50ZXJmYWNlIENvbW1vbkJhbmR3aWR0aFBhY2thZ2VzUHJvcHMge1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgY29tbW9uQmFuZHdpZHRoUGFja2FnZUlkOiBUaGUgSUQgb2YgdGhlIEludGVybmV0IHNoYXJlZCBiYW5kd2lkdGguXG4gICAgICovXG4gICAgcmVhZG9ubHkgY29tbW9uQmFuZHdpZHRoUGFja2FnZUlkPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgY29tbW9uQmFuZHdpZHRoUGFja2FnZU5hbWU6IFRoZSBuYW1lIG9mIHRoZSBJbnRlcm5ldCBTaGFyZWQgQmFuZHdpZHRoIGluc3RhbmNlLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGNvbW1vbkJhbmR3aWR0aFBhY2thZ2VOYW1lPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgcmVzb3VyY2VHcm91cElkOiBUaGUgSUQgb2YgdGhlIHJlc291cmNlIGdyb3VwLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHJlc291cmNlR3JvdXBJZD86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcbn1cblxuLyoqXG4gKiBUaGlzIGNsYXNzIGVuY2Fwc3VsYXRlcyBhbmQgZXh0ZW5kcyB0aGUgUk9TIHJlc291cmNlIHR5cGUgYERBVEFTT1VSQ0U6OlZQQzo6Q29tbW9uQmFuZHdpZHRoUGFja2FnZXNgLCB3aGljaCBpcyB1c2VkIHRvIHF1ZXJ5IHRoZSBlbGFzdGljIElQIGFkZHJlc3MgKEVJUCkgYmFuZHdpZHRoIHBsYW5zIGluIGEgc3BlY2lmaWVkIHJlZ2lvbi5cbiAqIEBOb3RlIFRoaXMgY2xhc3MgbWF5IGhhdmUgc29tZSBuZXcgZnVuY3Rpb25zIHRvIGZhY2lsaXRhdGUgZGV2ZWxvcG1lbnQsIHNvIGl0IGlzIHJlY29tbWVuZGVkIHRvIHVzZSB0aGlzIGNsYXNzIGluc3RlYWQgb2YgYFJvc0NvbW1vbkJhbmR3aWR0aFBhY2thZ2VzYGZvciBhIG1vcmUgY29udmVuaWVudCBkZXZlbG9wbWVudCBleHBlcmllbmNlLlxuICogU2VlIGh0dHBzOi8vd3d3LmFsaWJhYmFjbG91ZC5jb20vaGVscC9yb3MvZGV2ZWxvcGVyLXJlZmVyZW5jZS9kYXRhc291cmNlLXZwYy1jb21tb25iYW5kd2lkdGhwYWNrYWdlc1xuICovXG5leHBvcnQgY2xhc3MgQ29tbW9uQmFuZHdpZHRoUGFja2FnZXMgZXh0ZW5kcyByb3MuUmVzb3VyY2Uge1xuICAgIHByb3RlY3RlZCBzY29wZTogcm9zLkNvbnN0cnVjdDtcbiAgICBwcm90ZWN0ZWQgaWQ6IHN0cmluZztcbiAgICBwcm90ZWN0ZWQgcHJvcHM6IENvbW1vbkJhbmR3aWR0aFBhY2thZ2VzUHJvcHM7XG4gICAgcHJvdGVjdGVkIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OiBib29sZWFuO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIENvbW1vbkJhbmR3aWR0aFBhY2thZ2VJZHM6IFRoZSBsaXN0IG9mIGNvbW1vbiBiYW5kd2lkdGggcGFja2FnZSBJRHMuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJDb21tb25CYW5kd2lkdGhQYWNrYWdlSWRzOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgQ29tbW9uQmFuZHdpZHRoUGFja2FnZXM6IFRoZSBsaXN0IG9mIGNvbW1vbiBiYW5kd2lkdGggcGFja2FnZXMuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJDb21tb25CYW5kd2lkdGhQYWNrYWdlczogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUGFyYW0gc2NvcGUgLSBzY29wZSBpbiB3aGljaCB0aGlzIHJlc291cmNlIGlzIGRlZmluZWRcbiAgICAgKiBQYXJhbSBpZCAgICAtIHNjb3BlZCBpZCBvZiB0aGUgcmVzb3VyY2VcbiAgICAgKiBQYXJhbSBwcm9wcyAtIHJlc291cmNlIHByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihzY29wZTogcm9zLkNvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IENvbW1vbkJhbmR3aWR0aFBhY2thZ2VzUHJvcHMgPSB7fSwgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6Ym9vbGVhbiA9IHRydWUpIHtcbiAgICAgICAgc3VwZXIoc2NvcGUsIGlkKTtcbiAgICAgICAgdGhpcy5zY29wZSA9IHNjb3BlO1xuICAgICAgICB0aGlzLmlkID0gaWQ7XG4gICAgICAgIHRoaXMucHJvcHMgPSBwcm9wcztcbiAgICAgICAgdGhpcy5lbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCA9IGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50O1xuXG4gICAgICAgIGNvbnN0IHJvc0NvbW1vbkJhbmR3aWR0aFBhY2thZ2VzID0gbmV3IFJvc0NvbW1vbkJhbmR3aWR0aFBhY2thZ2VzKHRoaXMsIGlkLCAge1xuICAgICAgICAgICAgcmVzb3VyY2VHcm91cElkOiBwcm9wcy5yZXNvdXJjZUdyb3VwSWQsXG4gICAgICAgICAgICBjb21tb25CYW5kd2lkdGhQYWNrYWdlTmFtZTogcHJvcHMuY29tbW9uQmFuZHdpZHRoUGFja2FnZU5hbWUsXG4gICAgICAgICAgICBjb21tb25CYW5kd2lkdGhQYWNrYWdlSWQ6IHByb3BzLmNvbW1vbkJhbmR3aWR0aFBhY2thZ2VJZCxcbiAgICAgICAgfSwgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgJiYgdGhpcy5zdGFjay5lbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCk7XG4gICAgICAgIHRoaXMucmVzb3VyY2UgPSByb3NDb21tb25CYW5kd2lkdGhQYWNrYWdlcztcbiAgICAgICAgdGhpcy5hdHRyQ29tbW9uQmFuZHdpZHRoUGFja2FnZUlkcyA9IHJvc0NvbW1vbkJhbmR3aWR0aFBhY2thZ2VzLmF0dHJDb21tb25CYW5kd2lkdGhQYWNrYWdlSWRzO1xuICAgICAgICB0aGlzLmF0dHJDb21tb25CYW5kd2lkdGhQYWNrYWdlcyA9IHJvc0NvbW1vbkJhbmR3aWR0aFBhY2thZ2VzLmF0dHJDb21tb25CYW5kd2lkdGhQYWNrYWdlcztcbiAgICB9XG59XG4iXX0=