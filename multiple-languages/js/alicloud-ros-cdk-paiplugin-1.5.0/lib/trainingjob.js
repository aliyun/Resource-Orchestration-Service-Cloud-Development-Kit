"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TrainingJob = exports.TrainingJobProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const paiplugin_generated_1 = require("./paiplugin.generated");
Object.defineProperty(exports, "TrainingJobProperty", { enumerable: true, get: function () { return paiplugin_generated_1.RosTrainingJob; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::PAIPlugin::TrainingJob`, which is used to create a training job.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosTrainingJob`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-paiplugin-trainingjob
 */
class TrainingJob extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosTrainingJob = new paiplugin_generated_1.RosTrainingJob(this, id, {
            dataPath: props.dataPath,
            campaignId: props.campaignId,
            userConfig: props.userConfig,
            algorithm: props.algorithm,
            waitForTrainingFinish: props.waitForTrainingFinish === undefined || props.waitForTrainingFinish === null ? true : props.waitForTrainingFinish,
            remark: props.remark,
            name: props.name,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosTrainingJob;
        this.attrTrainingJobId = rosTrainingJob.attrTrainingJobId;
    }
}
exports.TrainingJob = TrainingJob;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhaW5pbmdqb2IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ0cmFpbmluZ2pvYi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw4Q0FBOEM7QUFDOUMsK0RBQXVEO0FBRTVCLG9HQUZsQixvQ0FBYyxPQUV1QjtBQTRDOUM7Ozs7R0FJRztBQUNILE1BQWEsV0FBWSxTQUFRLEdBQUcsQ0FBQyxRQUFRO0lBV3pDOzs7O09BSUc7SUFDSCxZQUFZLEtBQW9CLEVBQUUsRUFBVSxFQUFFLEtBQXVCLEVBQUUsbUNBQTJDLElBQUk7UUFDbEgsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNqQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUNiLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxnQ0FBZ0MsR0FBRyxnQ0FBZ0MsQ0FBQztRQUV6RSxNQUFNLGNBQWMsR0FBRyxJQUFJLG9DQUFjLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRztZQUNqRCxRQUFRLEVBQUUsS0FBSyxDQUFDLFFBQVE7WUFDeEIsVUFBVSxFQUFFLEtBQUssQ0FBQyxVQUFVO1lBQzVCLFVBQVUsRUFBRSxLQUFLLENBQUMsVUFBVTtZQUM1QixTQUFTLEVBQUUsS0FBSyxDQUFDLFNBQVM7WUFDMUIscUJBQXFCLEVBQUUsS0FBSyxDQUFDLHFCQUFxQixLQUFLLFNBQVMsSUFBSSxLQUFLLENBQUMscUJBQXFCLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxxQkFBcUI7WUFDN0ksTUFBTSxFQUFFLEtBQUssQ0FBQyxNQUFNO1lBQ3BCLElBQUksRUFBRSxLQUFLLENBQUMsSUFBSTtTQUNuQixFQUFFLGdDQUFnQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztRQUNwRixJQUFJLENBQUMsUUFBUSxHQUFHLGNBQWMsQ0FBQztRQUMvQixJQUFJLENBQUMsaUJBQWlCLEdBQUcsY0FBYyxDQUFDLGlCQUFpQixDQUFDO0lBQzlELENBQUM7Q0FDSjtBQW5DRCxrQ0FtQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyByb3MgZnJvbSAnQGFsaWNsb3VkL3Jvcy1jZGstY29yZSc7XG5pbXBvcnQgeyBSb3NUcmFpbmluZ0pvYiB9IGZyb20gJy4vcGFpcGx1Z2luLmdlbmVyYXRlZCc7XG4vLyBHZW5lcmF0ZWQgZnJvbSB0aGUgQWxpQ2xvdWQgUk9TIFJlc291cmNlIFNwZWNpZmljYXRpb25cbmV4cG9ydCB7IFJvc1RyYWluaW5nSm9iIGFzIFRyYWluaW5nSm9iUHJvcGVydHkgfTtcblxuLyoqXG4gKiBQcm9wZXJ0aWVzIGZvciBkZWZpbmluZyBhIGBUcmFpbmluZ0pvYmAuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2FsaXl1bi1wYWlwbHVnaW4tdHJhaW5pbmdqb2JcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBUcmFpbmluZ0pvYlByb3BzIHtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGFsZ29yaXRobTogVGhlIGFsZ29yaXRobSB1c2VkIGluIHRyYWluaW5nLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGFsZ29yaXRobTogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgY2FtcGFpZ25JZDogVGhlIHJlbGF0ZWQgY2FtcGFpZ24gSWQuXG4gICAgICovXG4gICAgcmVhZG9ubHkgY2FtcGFpZ25JZDogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgZGF0YVBhdGg6IFRoZSB0cmFpbmluZyBkYXRhIHBhdGggaW4gT1NTIGJ1Y2tldC5cbiAgICAgKi9cbiAgICByZWFkb25seSBkYXRhUGF0aDogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgbmFtZTogVGhlIG5hbWUgb2YgdHJhaW5pbmcgam9iLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IG5hbWU6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHVzZXJDb25maWc6IFVzZXIgY29uZmlndXJhdGlvbiBpcyB1c2VkIHRvIHNldCBwYXJhbWV0ZXJzIHN1Y2ggYXMgc3RhcnRfZGF0ZSBhbmQgZW5kX2RhdGUgdG8gZGVsaW5lYXRlIHRoZSB0aW1lIHJhbmdlIG9mIG1vZGVsaW5nIGRhdGEuXG4gICAgICovXG4gICAgcmVhZG9ubHkgdXNlckNvbmZpZzogeyBba2V5OiBzdHJpbmddOiAoYW55IHwgcm9zLklSZXNvbHZhYmxlKSB9IHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgcmVtYXJrOiBUaGUgcmVtYXJrIG9mIHRyYWluaW5nIGpvYi5cbiAgICAgKi9cbiAgICByZWFkb25seSByZW1hcms/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSB3YWl0Rm9yVHJhaW5pbmdGaW5pc2g6IFdoZXRoZXIgcmVzb3VyY2UgY3JlYXRpb24gd2FpdHMgZm9yIHRoZSB0cmFpbmluZyB0YXNrIHRvIGNvbXBsZXRlLlRoZSBsb25nZXN0IHdhaXRpbmcgdGltZSBpcyA0MCBtaW51dGVzXG4gICAgICovXG4gICAgcmVhZG9ubHkgd2FpdEZvclRyYWluaW5nRmluaXNoPzogYm9vbGVhbiB8IHJvcy5JUmVzb2x2YWJsZTtcbn1cblxuLyoqXG4gKiBUaGlzIGNsYXNzIGVuY2Fwc3VsYXRlcyBhbmQgZXh0ZW5kcyB0aGUgUk9TIHJlc291cmNlIHR5cGUgYEFMSVlVTjo6UEFJUGx1Z2luOjpUcmFpbmluZ0pvYmAsIHdoaWNoIGlzIHVzZWQgdG8gY3JlYXRlIGEgdHJhaW5pbmcgam9iLlxuICogQE5vdGUgVGhpcyBjbGFzcyBtYXkgaGF2ZSBzb21lIG5ldyBmdW5jdGlvbnMgdG8gZmFjaWxpdGF0ZSBkZXZlbG9wbWVudCwgc28gaXQgaXMgcmVjb21tZW5kZWQgdG8gdXNlIHRoaXMgY2xhc3MgaW5zdGVhZCBvZiBgUm9zVHJhaW5pbmdKb2JgZm9yIGEgbW9yZSBjb252ZW5pZW50IGRldmVsb3BtZW50IGV4cGVyaWVuY2UuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2FsaXl1bi1wYWlwbHVnaW4tdHJhaW5pbmdqb2JcbiAqL1xuZXhwb3J0IGNsYXNzIFRyYWluaW5nSm9iIGV4dGVuZHMgcm9zLlJlc291cmNlIHtcbiAgICBwcm90ZWN0ZWQgc2NvcGU6IHJvcy5Db25zdHJ1Y3Q7XG4gICAgcHJvdGVjdGVkIGlkOiBzdHJpbmc7XG4gICAgcHJvdGVjdGVkIHByb3BzOiBUcmFpbmluZ0pvYlByb3BzO1xuICAgIHByb3RlY3RlZCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBUcmFpbmluZ0pvYklkOiBUaGUgdHJhaW5pbmcgam9iIGlkLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyVHJhaW5pbmdKb2JJZDogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUGFyYW0gc2NvcGUgLSBzY29wZSBpbiB3aGljaCB0aGlzIHJlc291cmNlIGlzIGRlZmluZWRcbiAgICAgKiBQYXJhbSBpZCAgICAtIHNjb3BlZCBpZCBvZiB0aGUgcmVzb3VyY2VcbiAgICAgKiBQYXJhbSBwcm9wcyAtIHJlc291cmNlIHByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihzY29wZTogcm9zLkNvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IFRyYWluaW5nSm9iUHJvcHMsIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OmJvb2xlYW4gPSB0cnVlKSB7XG4gICAgICAgIHN1cGVyKHNjb3BlLCBpZCk7XG4gICAgICAgIHRoaXMuc2NvcGUgPSBzY29wZTtcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xuICAgICAgICB0aGlzLnByb3BzID0gcHJvcHM7XG4gICAgICAgIHRoaXMuZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgPSBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDtcblxuICAgICAgICBjb25zdCByb3NUcmFpbmluZ0pvYiA9IG5ldyBSb3NUcmFpbmluZ0pvYih0aGlzLCBpZCwgIHtcbiAgICAgICAgICAgIGRhdGFQYXRoOiBwcm9wcy5kYXRhUGF0aCxcbiAgICAgICAgICAgIGNhbXBhaWduSWQ6IHByb3BzLmNhbXBhaWduSWQsXG4gICAgICAgICAgICB1c2VyQ29uZmlnOiBwcm9wcy51c2VyQ29uZmlnLFxuICAgICAgICAgICAgYWxnb3JpdGhtOiBwcm9wcy5hbGdvcml0aG0sXG4gICAgICAgICAgICB3YWl0Rm9yVHJhaW5pbmdGaW5pc2g6IHByb3BzLndhaXRGb3JUcmFpbmluZ0ZpbmlzaCA9PT0gdW5kZWZpbmVkIHx8IHByb3BzLndhaXRGb3JUcmFpbmluZ0ZpbmlzaCA9PT0gbnVsbCA/IHRydWUgOiBwcm9wcy53YWl0Rm9yVHJhaW5pbmdGaW5pc2gsXG4gICAgICAgICAgICByZW1hcms6IHByb3BzLnJlbWFyayxcbiAgICAgICAgICAgIG5hbWU6IHByb3BzLm5hbWUsXG4gICAgICAgIH0sIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ICYmIHRoaXMuc3RhY2suZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQpO1xuICAgICAgICB0aGlzLnJlc291cmNlID0gcm9zVHJhaW5pbmdKb2I7XG4gICAgICAgIHRoaXMuYXR0clRyYWluaW5nSm9iSWQgPSByb3NUcmFpbmluZ0pvYi5hdHRyVHJhaW5pbmdKb2JJZDtcbiAgICB9XG59XG4iXX0=