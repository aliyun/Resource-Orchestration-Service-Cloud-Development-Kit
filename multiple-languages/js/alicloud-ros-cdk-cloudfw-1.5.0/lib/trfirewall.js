"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TrFirewall = exports.TrFirewallProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const cloudfw_generated_1 = require("./cloudfw.generated");
Object.defineProperty(exports, "TrFirewallProperty", { enumerable: true, get: function () { return cloudfw_generated_1.RosTrFirewall; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::CLOUDFW::TrFirewall`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosTrFirewall`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-cloudfw-trfirewall
 */
class TrFirewall extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosTrFirewall = new cloudfw_generated_1.RosTrFirewall(this, id, {
            routeMode: props.routeMode,
            regionNo: props.regionNo,
            firewallDescription: props.firewallDescription,
            trAttachmentMasterZone: props.trAttachmentMasterZone,
            firewallVpcId: props.firewallVpcId,
            firewallSubnetCidr: props.firewallSubnetCidr,
            firewallVpcCidr: props.firewallVpcCidr,
            firewallName: props.firewallName,
            trAttachmentMasterCidr: props.trAttachmentMasterCidr,
            firewallVswitchId: props.firewallVswitchId,
            cenId: props.cenId,
            trAttachmentSlaveCidr: props.trAttachmentSlaveCidr,
            trAttachmentSlaveZone: props.trAttachmentSlaveZone,
            transitRouterId: props.transitRouterId,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosTrFirewall;
        this.attrFirewallId = rosTrFirewall.attrFirewallId;
    }
}
exports.TrFirewall = TrFirewall;
//# sourceMappingURL=data:application/json;base64,