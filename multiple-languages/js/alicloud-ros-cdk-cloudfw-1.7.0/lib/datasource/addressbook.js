"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AddressBook = exports.AddressBookProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const cloudfw_generated_1 = require("./cloudfw.generated");
Object.defineProperty(exports, "AddressBookProperty", { enumerable: true, get: function () { return cloudfw_generated_1.RosAddressBook; } });
/**
 * This class encapsulates and extends the ROS resource type `DATASOURCE::CLOUDFW::AddressBook`, which is used to query the information about an address book for access control in Cloud Firewall.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosAddressBook`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/datasource-cloudfw-addressbook
 */
class AddressBook extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosAddressBook = new cloudfw_generated_1.RosAddressBook(this, id, {
            groupUuid: props.groupUuid,
            refreshOptions: props.refreshOptions === undefined || props.refreshOptions === null ? 'Never' : props.refreshOptions,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosAddressBook;
        this.attrAddressList = rosAddressBook.attrAddressList;
        this.attrAddressListCount = rosAddressBook.attrAddressListCount;
        this.attrAutoAddTagEcs = rosAddressBook.attrAutoAddTagEcs;
        this.attrDescription = rosAddressBook.attrDescription;
        this.attrGroupName = rosAddressBook.attrGroupName;
        this.attrGroupType = rosAddressBook.attrGroupType;
        this.attrGroupUuid = rosAddressBook.attrGroupUuid;
        this.attrReferenceCount = rosAddressBook.attrReferenceCount;
        this.attrTagRelation = rosAddressBook.attrTagRelation;
        this.attrTags = rosAddressBook.attrTags;
    }
}
exports.AddressBook = AddressBook;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRkcmVzc2Jvb2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJhZGRyZXNzYm9vay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw4Q0FBOEM7QUFDOUMsMkRBQXFEO0FBRTFCLG9HQUZsQixrQ0FBYyxPQUV1QjtBQThFOUM7Ozs7R0FJRztBQUNILE1BQWEsV0FBWSxTQUFRLEdBQUcsQ0FBQyxRQUFRO0lBd0R6Qzs7OztPQUlHO0lBQ0gsWUFBWSxLQUFvQixFQUFFLEVBQVUsRUFBRSxLQUF1QixFQUFFLG1DQUEyQyxJQUFJO1FBQ2xILEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDakIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUM7UUFDYixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsZ0NBQWdDLEdBQUcsZ0NBQWdDLENBQUM7UUFFekUsTUFBTSxjQUFjLEdBQUcsSUFBSSxrQ0FBYyxDQUFDLElBQUksRUFBRSxFQUFFLEVBQUc7WUFDakQsU0FBUyxFQUFFLEtBQUssQ0FBQyxTQUFTO1lBQzFCLGNBQWMsRUFBRSxLQUFLLENBQUMsY0FBYyxLQUFLLFNBQVMsSUFBSSxLQUFLLENBQUMsY0FBYyxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsY0FBYztTQUN2SCxFQUFFLGdDQUFnQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztRQUNwRixJQUFJLENBQUMsUUFBUSxHQUFHLGNBQWMsQ0FBQztRQUMvQixJQUFJLENBQUMsZUFBZSxHQUFHLGNBQWMsQ0FBQyxlQUFlLENBQUM7UUFDdEQsSUFBSSxDQUFDLG9CQUFvQixHQUFHLGNBQWMsQ0FBQyxvQkFBb0IsQ0FBQztRQUNoRSxJQUFJLENBQUMsaUJBQWlCLEdBQUcsY0FBYyxDQUFDLGlCQUFpQixDQUFDO1FBQzFELElBQUksQ0FBQyxlQUFlLEdBQUcsY0FBYyxDQUFDLGVBQWUsQ0FBQztRQUN0RCxJQUFJLENBQUMsYUFBYSxHQUFHLGNBQWMsQ0FBQyxhQUFhLENBQUM7UUFDbEQsSUFBSSxDQUFDLGFBQWEsR0FBRyxjQUFjLENBQUMsYUFBYSxDQUFDO1FBQ2xELElBQUksQ0FBQyxhQUFhLEdBQUcsY0FBYyxDQUFDLGFBQWEsQ0FBQztRQUNsRCxJQUFJLENBQUMsa0JBQWtCLEdBQUcsY0FBYyxDQUFDLGtCQUFrQixDQUFDO1FBQzVELElBQUksQ0FBQyxlQUFlLEdBQUcsY0FBYyxDQUFDLGVBQWUsQ0FBQztRQUN0RCxJQUFJLENBQUMsUUFBUSxHQUFHLGNBQWMsQ0FBQyxRQUFRLENBQUM7SUFDNUMsQ0FBQztDQUNKO0FBcEZELGtDQW9GQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHJvcyBmcm9tICdAYWxpY2xvdWQvcm9zLWNkay1jb3JlJztcbmltcG9ydCB7IFJvc0FkZHJlc3NCb29rIH0gZnJvbSAnLi9jbG91ZGZ3LmdlbmVyYXRlZCc7XG4vLyBHZW5lcmF0ZWQgZnJvbSB0aGUgQWxpQ2xvdWQgUk9TIFJlc291cmNlIFNwZWNpZmljYXRpb25cbmV4cG9ydCB7IFJvc0FkZHJlc3NCb29rIGFzIEFkZHJlc3NCb29rUHJvcGVydHkgfTtcblxuLyoqXG4gKiBQcm9wZXJ0aWVzIGZvciBkZWZpbmluZyBhIGBBZGRyZXNzQm9va2AuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2RhdGFzb3VyY2UtY2xvdWRmdy1hZGRyZXNzYm9va1xuICovXG5leHBvcnQgaW50ZXJmYWNlIEFkZHJlc3NCb29rUHJvcHMge1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgZ3JvdXBVdWlkOiBUaGUgVVVJRCBvZiB0aGUgYWRkcmVzcyBib29rLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGdyb3VwVXVpZDogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgcmVmcmVzaE9wdGlvbnM6IFRoZSByZWZyZXNoIHN0cmF0ZWd5IGZvciB0aGUgZGF0YXNvdXJjZSByZXNvdXJjZSB3aGVuIHRoZSBzdGFjayBpcyB1cGRhdGVkLiBWYWxpZCB2YWx1ZXM6XG4gICAgICogLSBOZXZlcjogTmV2ZXIgcmVmcmVzaCB0aGUgZGF0YXNvdXJjZSByZXNvdXJjZSB3aGVuIHRoZSBzdGFjayBpcyB1cGRhdGVkLlxuICAgICAqIC0gQWx3YXlzOiBBbHdheXMgcmVmcmVzaCB0aGUgZGF0YXNvdXJjZSByZXNvdXJjZSB3aGVuIHRoZSBzdGFjayBpcyB1cGRhdGVkLlxuICAgICAqIERlZmF1bHQgaXMgTmV2ZXIuXG4gICAgICovXG4gICAgcmVhZG9ubHkgcmVmcmVzaE9wdGlvbnM/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG59XG5cbi8qKlxuICogUmVwcmVzZW50cyBhIGBBZGRyZXNzQm9va2AuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSUFkZHJlc3NCb29rIGV4dGVuZHMgcm9zLklSZXNvdXJjZSB7XG4gICAgcmVhZG9ubHkgcHJvcHM6IEFkZHJlc3NCb29rUHJvcHM7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgQWRkcmVzc0xpc3Q6IFRoZSBhZGRyZXNzZXMgaW4gdGhlIGFkZHJlc3MgYm9vay5cbiAgICAgKi9cbiAgICByZWFkb25seSBhdHRyQWRkcmVzc0xpc3Q6IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBBZGRyZXNzTGlzdENvdW50OiBUaGUgbnVtYmVyIG9mIGFkZHJlc3NlcyBpbiB0aGUgYWRkcmVzcyBib29rLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGF0dHJBZGRyZXNzTGlzdENvdW50OiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgQXV0b0FkZFRhZ0VjczogSW5kaWNhdGVzIHdoZXRoZXIgdGhlIHB1YmxpYyBJUCBhZGRyZXNzZXMgb2YgRUNTIGluc3RhbmNlcyBhcmUgYXV0b21hdGljYWxseSBhZGRlZCB0byB0aGUgYWRkcmVzcyBib29rIGlmIHRoZSBpbnN0YW5jZXMgbWF0Y2ggdGhlIHNwZWNpZmllZCB0YWdzLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGF0dHJBdXRvQWRkVGFnRWNzOiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgRGVzY3JpcHRpb246IFRoZSBkZXNjcmlwdGlvbiBvZiB0aGUgYWRkcmVzcyBib29rLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGF0dHJEZXNjcmlwdGlvbjogcm9zLklSZXNvbHZhYmxlIHwgc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIEdyb3VwTmFtZTogVGhlIG5hbWUgb2YgdGhlIGFkZHJlc3MgYm9vay5cbiAgICAgKi9cbiAgICByZWFkb25seSBhdHRyR3JvdXBOYW1lOiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgR3JvdXBUeXBlOiBUaGUgdHlwZSBvZiB0aGUgYWRkcmVzcyBib29rLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGF0dHJHcm91cFR5cGU6IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBHcm91cFV1aWQ6IFRoZSBVVUlEIG9mIHRoZSBhZGRyZXNzIGJvb2suXG4gICAgICovXG4gICAgcmVhZG9ubHkgYXR0ckdyb3VwVXVpZDogcm9zLklSZXNvbHZhYmxlIHwgc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIFJlZmVyZW5jZUNvdW50OiBUaGUgbnVtYmVyIG9mIHRpbWVzIHRoYXQgdGhlIGFkZHJlc3MgYm9vayBpcyByZWZlcmVuY2VkLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGF0dHJSZWZlcmVuY2VDb3VudDogcm9zLklSZXNvbHZhYmxlIHwgc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIFRhZ1JlbGF0aW9uOiBUaGUgbG9naWNhbCByZWxhdGlvbnNoaXAgYW1vbmcgRUNTIHRhZ3MuXG4gICAgICovXG4gICAgcmVhZG9ubHkgYXR0clRhZ1JlbGF0aW9uOiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgVGFnczogVGhlIGRldGFpbHMgYWJvdXQgdGhlIEVDUyB0YWdzIHRoYXQgY2FuIGJlIGF1dG9tYXRpY2FsbHkgYWRkZWQgdG8gdGhlIGFkZHJlc3MgYm9vay5cbiAgICAgKi9cbiAgICByZWFkb25seSBhdHRyVGFnczogcm9zLklSZXNvbHZhYmxlIHwgc3RyaW5nO1xufVxuLyoqXG4gKiBUaGlzIGNsYXNzIGVuY2Fwc3VsYXRlcyBhbmQgZXh0ZW5kcyB0aGUgUk9TIHJlc291cmNlIHR5cGUgYERBVEFTT1VSQ0U6OkNMT1VERlc6OkFkZHJlc3NCb29rYCwgd2hpY2ggaXMgdXNlZCB0byBxdWVyeSB0aGUgaW5mb3JtYXRpb24gYWJvdXQgYW4gYWRkcmVzcyBib29rIGZvciBhY2Nlc3MgY29udHJvbCBpbiBDbG91ZCBGaXJld2FsbC5cbiAqIEBOb3RlIFRoaXMgY2xhc3MgbWF5IGhhdmUgc29tZSBuZXcgZnVuY3Rpb25zIHRvIGZhY2lsaXRhdGUgZGV2ZWxvcG1lbnQsIHNvIGl0IGlzIHJlY29tbWVuZGVkIHRvIHVzZSB0aGlzIGNsYXNzIGluc3RlYWQgb2YgYFJvc0FkZHJlc3NCb29rYGZvciBhIG1vcmUgY29udmVuaWVudCBkZXZlbG9wbWVudCBleHBlcmllbmNlLlxuICogU2VlIGh0dHBzOi8vd3d3LmFsaWJhYmFjbG91ZC5jb20vaGVscC9yb3MvZGV2ZWxvcGVyLXJlZmVyZW5jZS9kYXRhc291cmNlLWNsb3VkZnctYWRkcmVzc2Jvb2tcbiAqL1xuZXhwb3J0IGNsYXNzIEFkZHJlc3NCb29rIGV4dGVuZHMgcm9zLlJlc291cmNlIGltcGxlbWVudHMgSUFkZHJlc3NCb29rIHtcbiAgICBwcm90ZWN0ZWQgc2NvcGU6IHJvcy5Db25zdHJ1Y3Q7XG4gICAgcHJvdGVjdGVkIGlkOiBzdHJpbmc7XG4gICAgcHVibGljIHJlYWRvbmx5IHByb3BzOiBBZGRyZXNzQm9va1Byb3BzO1xuICAgIHByb3RlY3RlZCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBBZGRyZXNzTGlzdDogVGhlIGFkZHJlc3NlcyBpbiB0aGUgYWRkcmVzcyBib29rLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyQWRkcmVzc0xpc3Q6IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBBZGRyZXNzTGlzdENvdW50OiBUaGUgbnVtYmVyIG9mIGFkZHJlc3NlcyBpbiB0aGUgYWRkcmVzcyBib29rLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyQWRkcmVzc0xpc3RDb3VudDogcm9zLklSZXNvbHZhYmxlIHwgc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIEF1dG9BZGRUYWdFY3M6IEluZGljYXRlcyB3aGV0aGVyIHRoZSBwdWJsaWMgSVAgYWRkcmVzc2VzIG9mIEVDUyBpbnN0YW5jZXMgYXJlIGF1dG9tYXRpY2FsbHkgYWRkZWQgdG8gdGhlIGFkZHJlc3MgYm9vayBpZiB0aGUgaW5zdGFuY2VzIG1hdGNoIHRoZSBzcGVjaWZpZWQgdGFncy5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckF1dG9BZGRUYWdFY3M6IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBEZXNjcmlwdGlvbjogVGhlIGRlc2NyaXB0aW9uIG9mIHRoZSBhZGRyZXNzIGJvb2suXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJEZXNjcmlwdGlvbjogcm9zLklSZXNvbHZhYmxlIHwgc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIEdyb3VwTmFtZTogVGhlIG5hbWUgb2YgdGhlIGFkZHJlc3MgYm9vay5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckdyb3VwTmFtZTogcm9zLklSZXNvbHZhYmxlIHwgc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIEdyb3VwVHlwZTogVGhlIHR5cGUgb2YgdGhlIGFkZHJlc3MgYm9vay5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckdyb3VwVHlwZTogcm9zLklSZXNvbHZhYmxlIHwgc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIEdyb3VwVXVpZDogVGhlIFVVSUQgb2YgdGhlIGFkZHJlc3MgYm9vay5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckdyb3VwVXVpZDogcm9zLklSZXNvbHZhYmxlIHwgc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIFJlZmVyZW5jZUNvdW50OiBUaGUgbnVtYmVyIG9mIHRpbWVzIHRoYXQgdGhlIGFkZHJlc3MgYm9vayBpcyByZWZlcmVuY2VkLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyUmVmZXJlbmNlQ291bnQ6IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBUYWdSZWxhdGlvbjogVGhlIGxvZ2ljYWwgcmVsYXRpb25zaGlwIGFtb25nIEVDUyB0YWdzLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyVGFnUmVsYXRpb246IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBUYWdzOiBUaGUgZGV0YWlscyBhYm91dCB0aGUgRUNTIHRhZ3MgdGhhdCBjYW4gYmUgYXV0b21hdGljYWxseSBhZGRlZCB0byB0aGUgYWRkcmVzcyBib29rLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyVGFnczogcm9zLklSZXNvbHZhYmxlIHwgc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogUGFyYW0gc2NvcGUgLSBzY29wZSBpbiB3aGljaCB0aGlzIHJlc291cmNlIGlzIGRlZmluZWRcbiAgICAgKiBQYXJhbSBpZCAgICAtIHNjb3BlZCBpZCBvZiB0aGUgcmVzb3VyY2VcbiAgICAgKiBQYXJhbSBwcm9wcyAtIHJlc291cmNlIHByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihzY29wZTogcm9zLkNvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IEFkZHJlc3NCb29rUHJvcHMsIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OmJvb2xlYW4gPSB0cnVlKSB7XG4gICAgICAgIHN1cGVyKHNjb3BlLCBpZCk7XG4gICAgICAgIHRoaXMuc2NvcGUgPSBzY29wZTtcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xuICAgICAgICB0aGlzLnByb3BzID0gcHJvcHM7XG4gICAgICAgIHRoaXMuZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgPSBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDtcblxuICAgICAgICBjb25zdCByb3NBZGRyZXNzQm9vayA9IG5ldyBSb3NBZGRyZXNzQm9vayh0aGlzLCBpZCwgIHtcbiAgICAgICAgICAgIGdyb3VwVXVpZDogcHJvcHMuZ3JvdXBVdWlkLFxuICAgICAgICAgICAgcmVmcmVzaE9wdGlvbnM6IHByb3BzLnJlZnJlc2hPcHRpb25zID09PSB1bmRlZmluZWQgfHwgcHJvcHMucmVmcmVzaE9wdGlvbnMgPT09IG51bGwgPyAnTmV2ZXInIDogcHJvcHMucmVmcmVzaE9wdGlvbnMsXG4gICAgICAgIH0sIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ICYmIHRoaXMuc3RhY2suZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQpO1xuICAgICAgICB0aGlzLnJlc291cmNlID0gcm9zQWRkcmVzc0Jvb2s7XG4gICAgICAgIHRoaXMuYXR0ckFkZHJlc3NMaXN0ID0gcm9zQWRkcmVzc0Jvb2suYXR0ckFkZHJlc3NMaXN0O1xuICAgICAgICB0aGlzLmF0dHJBZGRyZXNzTGlzdENvdW50ID0gcm9zQWRkcmVzc0Jvb2suYXR0ckFkZHJlc3NMaXN0Q291bnQ7XG4gICAgICAgIHRoaXMuYXR0ckF1dG9BZGRUYWdFY3MgPSByb3NBZGRyZXNzQm9vay5hdHRyQXV0b0FkZFRhZ0VjcztcbiAgICAgICAgdGhpcy5hdHRyRGVzY3JpcHRpb24gPSByb3NBZGRyZXNzQm9vay5hdHRyRGVzY3JpcHRpb247XG4gICAgICAgIHRoaXMuYXR0ckdyb3VwTmFtZSA9IHJvc0FkZHJlc3NCb29rLmF0dHJHcm91cE5hbWU7XG4gICAgICAgIHRoaXMuYXR0ckdyb3VwVHlwZSA9IHJvc0FkZHJlc3NCb29rLmF0dHJHcm91cFR5cGU7XG4gICAgICAgIHRoaXMuYXR0ckdyb3VwVXVpZCA9IHJvc0FkZHJlc3NCb29rLmF0dHJHcm91cFV1aWQ7XG4gICAgICAgIHRoaXMuYXR0clJlZmVyZW5jZUNvdW50ID0gcm9zQWRkcmVzc0Jvb2suYXR0clJlZmVyZW5jZUNvdW50O1xuICAgICAgICB0aGlzLmF0dHJUYWdSZWxhdGlvbiA9IHJvc0FkZHJlc3NCb29rLmF0dHJUYWdSZWxhdGlvbjtcbiAgICAgICAgdGhpcy5hdHRyVGFncyA9IHJvc0FkZHJlc3NCb29rLmF0dHJUYWdzO1xuICAgIH1cbn1cbiJdfQ==