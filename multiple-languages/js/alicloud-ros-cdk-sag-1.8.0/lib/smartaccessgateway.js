"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SmartAccessGateway = exports.SmartAccessGatewayProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const sag_generated_1 = require("./sag.generated");
Object.defineProperty(exports, "SmartAccessGatewayProperty", { enumerable: true, get: function () { return sag_generated_1.RosSmartAccessGateway; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::SAG::SmartAccessGateway`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosSmartAccessGateway`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-sag-smartaccessgateway
 */
class SmartAccessGateway extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosSmartAccessGateway = new sag_generated_1.RosSmartAccessGateway(this, id, {
            receiverCountry: props.receiverCountry,
            description: props.description,
            receiverZip: props.receiverZip,
            buyerMessage: props.buyerMessage,
            cidrBlock: props.cidrBlock,
            receiverTown: props.receiverTown,
            hardWareSpec: props.hardWareSpec,
            name: props.name,
            receiverPhone: props.receiverPhone,
            receiverCity: props.receiverCity,
            routingStrategy: props.routingStrategy,
            securityLockThreshold: props.securityLockThreshold,
            receiverAddress: props.receiverAddress,
            alreadyHaveSag: props.alreadyHaveSag,
            haType: props.haType,
            period: props.period,
            maxBandWidth: props.maxBandWidth,
            autoPay: props.autoPay,
            receiverMobile: props.receiverMobile,
            receiverDistrict: props.receiverDistrict,
            activate: props.activate,
            chargeType: props.chargeType,
            receiverState: props.receiverState,
            receiverName: props.receiverName,
            receiverEmail: props.receiverEmail,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosSmartAccessGateway;
        this.attrOrderId = rosSmartAccessGateway.attrOrderId;
        this.attrSmartAgId = rosSmartAccessGateway.attrSmartAgId;
    }
}
exports.SmartAccessGateway = SmartAccessGateway;
//# sourceMappingURL=data:application/json;base64,