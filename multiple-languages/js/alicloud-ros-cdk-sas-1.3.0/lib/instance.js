"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Instance = exports.InstanceProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const sas_generated_1 = require("./sas.generated");
Object.defineProperty(exports, "InstanceProperty", { enumerable: true, get: function () { return sas_generated_1.RosInstance; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::SAS::Instance`, which is used to purchase Security Center.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosInstance`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-sas-instance
 */
class Instance extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosInstance = new sas_generated_1.RosInstance(this, id, {
            quotaForApplicationProtection: props.quotaForApplicationProtection,
            threatAnalysis: props.threatAnalysis,
            quotaForMaliciousFileDetectionSdk: props.quotaForMaliciousFileDetectionSdk,
            containerImageScan: props.containerImageScan,
            threatAnalysisLogStorageCapacity: props.threatAnalysisLogStorageCapacity,
            autoRenew: props.autoRenew === undefined || props.autoRenew === null ? false : props.autoRenew,
            maliciousFileDetectionSdk: props.maliciousFileDetectionSdk,
            vCore: props.vCore,
            period: props.period,
            vulnerabilityFixing: props.vulnerabilityFixing,
            quotaForCloudHoneypot: props.quotaForCloudHoneypot,
            quotaForWebTamperProofing: props.quotaForWebTamperProofing,
            autoPay: props.autoPay === undefined || props.autoPay === null ? true : props.autoPay,
            edition: props.edition,
            configurationAssessment: props.configurationAssessment,
            logAnalysis: props.logAnalysis,
            protectedServers: props.protectedServers,
            cloudHoneypot: props.cloudHoneypot,
            webTamperProtection: props.webTamperProtection,
            quotaForConfigurationAssessment: props.quotaForConfigurationAssessment,
            quotaForVulnerabilityFixing: props.quotaForVulnerabilityFixing,
            antiRansomware: props.antiRansomware,
            periodUnit: props.periodUnit,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosInstance;
        this.attrInstanceId = rosInstance.attrInstanceId;
    }
}
exports.Instance = Instance;
//# sourceMappingURL=data:application/json;base64,