"use strict";
// Generated from the AliCloud ROS Resource Specification
Object.defineProperty(exports, "__esModule", { value: true });
exports.RosSlbBinding = exports.RosNamespace = exports.RosIngress = exports.RosConfigMap = exports.RosApplication = void 0;
const ros = require("@alicloud/ros-cdk-core");
/**
 * Determine whether the given properties match those of a `RosApplicationProps`
 *
 * @param properties - the TypeScript properties of a `RosApplicationProps`
 *
 * @returns the result of the validation.
 */
function RosApplicationPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('timezone', ros.validateString)(properties.timezone));
    errors.collect(ros.propertyValidator('phpConfig', ros.validateString)(properties.phpConfig));
    errors.collect(ros.propertyValidator('mountDesc', ros.validateString)(properties.mountDesc));
    errors.collect(ros.propertyValidator('microRegistrationConfig', ros.validateString)(properties.microRegistrationConfig));
    errors.collect(ros.propertyValidator('liveness', ros.validateString)(properties.liveness));
    errors.collect(ros.propertyValidator('warStartOptions', ros.validateString)(properties.warStartOptions));
    errors.collect(ros.propertyValidator('memory', ros.requiredValidator)(properties.memory));
    if (properties.memory && (typeof properties.memory) !== 'object') {
        errors.collect(ros.propertyValidator('memory', ros.validateRange)({
            data: properties.memory,
            min: 1,
            max: undefined,
        }));
    }
    errors.collect(ros.propertyValidator('memory', ros.validateNumber)(properties.memory));
    errors.collect(ros.propertyValidator('webContainer', ros.validateString)(properties.webContainer));
    errors.collect(ros.propertyValidator('cpu', ros.requiredValidator)(properties.cpu));
    if (properties.cpu && (typeof properties.cpu) !== 'object') {
        errors.collect(ros.propertyValidator('cpu', ros.validateRange)({
            data: properties.cpu,
            min: 1,
            max: undefined,
        }));
    }
    errors.collect(ros.propertyValidator('cpu', ros.validateNumber)(properties.cpu));
    errors.collect(ros.propertyValidator('nasConfigs', ros.validateString)(properties.nasConfigs));
    errors.collect(ros.propertyValidator('jarStartArgs', ros.validateString)(properties.jarStartArgs));
    errors.collect(ros.propertyValidator('preStop', ros.validateString)(properties.preStop));
    errors.collect(ros.propertyValidator('phpArmsConfigLocation', ros.validateString)(properties.phpArmsConfigLocation));
    errors.collect(ros.propertyValidator('packageType', ros.requiredValidator)(properties.packageType));
    errors.collect(ros.propertyValidator('packageType', ros.validateString)(properties.packageType));
    errors.collect(ros.propertyValidator('autoConfig', ros.validateBoolean)(properties.autoConfig));
    if (properties.tags && (Array.isArray(properties.tags) || (typeof properties.tags) === 'string')) {
        errors.collect(ros.propertyValidator('tags', ros.validateLength)({
            data: properties.tags.length,
            min: undefined,
            max: 20,
        }));
    }
    errors.collect(ros.propertyValidator('tags', ros.listValidator(RosApplication_TagsPropertyValidator))(properties.tags));
    errors.collect(ros.propertyValidator('python', ros.validateString)(properties.python));
    errors.collect(ros.propertyValidator('ossAkSecret', ros.validateString)(properties.ossAkSecret));
    errors.collect(ros.propertyValidator('vSwitchId', ros.validateString)(properties.vSwitchId));
    errors.collect(ros.propertyValidator('imageUrl', ros.validateString)(properties.imageUrl));
    errors.collect(ros.propertyValidator('postStart', ros.validateString)(properties.postStart));
    errors.collect(ros.propertyValidator('baseAppId', ros.validateString)(properties.baseAppId));
    errors.collect(ros.propertyValidator('configMapMountDesc', ros.validateString)(properties.configMapMountDesc));
    errors.collect(ros.propertyValidator('vpcId', ros.validateString)(properties.vpcId));
    if (properties.enableEbpf && (typeof properties.enableEbpf) !== 'object') {
        errors.collect(ros.propertyValidator('enableEbpf', ros.validateAllowedValues)({
            data: properties.enableEbpf,
            allowedValues: ["true", "false"],
        }));
    }
    errors.collect(ros.propertyValidator('enableEbpf', ros.validateString)(properties.enableEbpf));
    errors.collect(ros.propertyValidator('edasContainerVersion', ros.validateString)(properties.edasContainerVersion));
    errors.collect(ros.propertyValidator('serviceTags', ros.validateString)(properties.serviceTags));
    errors.collect(ros.propertyValidator('namespaceId', ros.requiredValidator)(properties.namespaceId));
    errors.collect(ros.propertyValidator('namespaceId', ros.validateString)(properties.namespaceId));
    errors.collect(ros.propertyValidator('tomcatConfig', ros.validateString)(properties.tomcatConfig));
    if (properties.appDescription && (Array.isArray(properties.appDescription) || (typeof properties.appDescription) === 'string')) {
        errors.collect(ros.propertyValidator('appDescription', ros.validateLength)({
            data: properties.appDescription.length,
            min: undefined,
            max: 1024,
        }));
    }
    errors.collect(ros.propertyValidator('appDescription', ros.validateString)(properties.appDescription));
    errors.collect(ros.propertyValidator('nasId', ros.validateString)(properties.nasId));
    errors.collect(ros.propertyValidator('pythonModules', ros.validateString)(properties.pythonModules));
    errors.collect(ros.propertyValidator('acrInstanceId', ros.validateString)(properties.acrInstanceId));
    errors.collect(ros.propertyValidator('kafkaConfigs', ros.validateString)(properties.kafkaConfigs));
    errors.collect(ros.propertyValidator('slsConfigs', ros.validateString)(properties.slsConfigs));
    errors.collect(ros.propertyValidator('ossAkId', ros.validateString)(properties.ossAkId));
    errors.collect(ros.propertyValidator('ossMountDescs', ros.listValidator(ros.validateAny))(properties.ossMountDescs));
    errors.collect(ros.propertyValidator('deploy', ros.validateBoolean)(properties.deploy));
    errors.collect(ros.propertyValidator('packageVersion', ros.validateString)(properties.packageVersion));
    errors.collect(ros.propertyValidator('appName', ros.requiredValidator)(properties.appName));
    errors.collect(ros.propertyValidator('appName', ros.validateString)(properties.appName));
    errors.collect(ros.propertyValidator('jdk', ros.validateString)(properties.jdk));
    errors.collect(ros.propertyValidator('readiness', ros.validateString)(properties.readiness));
    if (properties.microRegistration && (typeof properties.microRegistration) !== 'object') {
        errors.collect(ros.propertyValidator('microRegistration', ros.validateAllowedValues)({
            data: properties.microRegistration,
            allowedValues: ["0", "1", "2"],
        }));
    }
    errors.collect(ros.propertyValidator('microRegistration', ros.validateString)(properties.microRegistration));
    errors.collect(ros.propertyValidator('php', ros.validateString)(properties.php));
    errors.collect(ros.propertyValidator('commandArgs', ros.validateString)(properties.commandArgs));
    errors.collect(ros.propertyValidator('acrAssumeRoleArn', ros.validateString)(properties.acrAssumeRoleArn));
    errors.collect(ros.propertyValidator('saeVersion', ros.validateString)(properties.saeVersion));
    if (properties.terminationGracePeriodSeconds && (typeof properties.terminationGracePeriodSeconds) !== 'object') {
        errors.collect(ros.propertyValidator('terminationGracePeriodSeconds', ros.validateRange)({
            data: properties.terminationGracePeriodSeconds,
            min: 1,
            max: 300,
        }));
    }
    errors.collect(ros.propertyValidator('terminationGracePeriodSeconds', ros.validateNumber)(properties.terminationGracePeriodSeconds));
    errors.collect(ros.propertyValidator('envs', ros.validateString)(properties.envs));
    errors.collect(ros.propertyValidator('securityGroupId', ros.validateString)(properties.securityGroupId));
    errors.collect(ros.propertyValidator('pvtzDiscoverySvc', ros.validateString)(properties.pvtzDiscoverySvc));
    errors.collect(ros.propertyValidator('jarStartOptions', ros.validateString)(properties.jarStartOptions));
    errors.collect(ros.propertyValidator('imagePullSecrets', ros.validateString)(properties.imagePullSecrets));
    errors.collect(ros.propertyValidator('mountHost', ros.validateString)(properties.mountHost));
    errors.collect(ros.propertyValidator('replicas', ros.requiredValidator)(properties.replicas));
    errors.collect(ros.propertyValidator('replicas', ros.validateNumber)(properties.replicas));
    errors.collect(ros.propertyValidator('customHostAlias', ros.validateString)(properties.customHostAlias));
    errors.collect(ros.propertyValidator('appSource', ros.validateString)(properties.appSource));
    errors.collect(ros.propertyValidator('associateEip', ros.validateBoolean)(properties.associateEip));
    errors.collect(ros.propertyValidator('command', ros.validateString)(properties.command));
    errors.collect(ros.propertyValidator('packageUrl', ros.validateString)(properties.packageUrl));
    errors.collect(ros.propertyValidator('phpConfigLocation', ros.validateString)(properties.phpConfigLocation));
    if (properties.programmingLanguage && (typeof properties.programmingLanguage) !== 'object') {
        errors.collect(ros.propertyValidator('programmingLanguage', ros.validateAllowedValues)({
            data: properties.programmingLanguage,
            allowedValues: ["java", "php", "other"],
        }));
    }
    errors.collect(ros.propertyValidator('programmingLanguage', ros.validateString)(properties.programmingLanguage));
    return errors.wrap('supplied properties not correct for "RosApplicationProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::SAE::Application` resource
 *
 * @param properties - the TypeScript properties of a `RosApplicationProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::SAE::Application` resource.
 */
// @ts-ignore TS6133
function rosApplicationPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosApplicationPropsValidator(properties).assertSuccess();
    }
    return {
        'AppName': ros.stringToRosTemplate(properties.appName),
        'Cpu': ros.numberToRosTemplate(properties.cpu),
        'Memory': ros.numberToRosTemplate(properties.memory),
        'NamespaceId': ros.stringToRosTemplate(properties.namespaceId),
        'PackageType': ros.stringToRosTemplate(properties.packageType),
        'Replicas': ros.numberToRosTemplate(properties.replicas),
        'AcrAssumeRoleArn': ros.stringToRosTemplate(properties.acrAssumeRoleArn),
        'AcrInstanceId': ros.stringToRosTemplate(properties.acrInstanceId),
        'AppDescription': ros.stringToRosTemplate(properties.appDescription),
        'AppSource': ros.stringToRosTemplate(properties.appSource),
        'AssociateEip': ros.booleanToRosTemplate(properties.associateEip),
        'AutoConfig': ros.booleanToRosTemplate(properties.autoConfig),
        'BaseAppId': ros.stringToRosTemplate(properties.baseAppId),
        'Command': ros.stringToRosTemplate(properties.command),
        'CommandArgs': ros.stringToRosTemplate(properties.commandArgs),
        'ConfigMapMountDesc': ros.stringToRosTemplate(properties.configMapMountDesc),
        'CustomHostAlias': ros.stringToRosTemplate(properties.customHostAlias),
        'Deploy': ros.booleanToRosTemplate(properties.deploy),
        'EdasContainerVersion': ros.stringToRosTemplate(properties.edasContainerVersion),
        'EnableEbpf': ros.stringToRosTemplate(properties.enableEbpf),
        'Envs': ros.stringToRosTemplate(properties.envs),
        'ImagePullSecrets': ros.stringToRosTemplate(properties.imagePullSecrets),
        'ImageUrl': ros.stringToRosTemplate(properties.imageUrl),
        'JarStartArgs': ros.stringToRosTemplate(properties.jarStartArgs),
        'JarStartOptions': ros.stringToRosTemplate(properties.jarStartOptions),
        'Jdk': ros.stringToRosTemplate(properties.jdk),
        'KafkaConfigs': ros.stringToRosTemplate(properties.kafkaConfigs),
        'Liveness': ros.stringToRosTemplate(properties.liveness),
        'MicroRegistration': ros.stringToRosTemplate(properties.microRegistration),
        'MicroRegistrationConfig': ros.stringToRosTemplate(properties.microRegistrationConfig),
        'MountDesc': ros.stringToRosTemplate(properties.mountDesc),
        'MountHost': ros.stringToRosTemplate(properties.mountHost),
        'NasConfigs': ros.stringToRosTemplate(properties.nasConfigs),
        'NasId': ros.stringToRosTemplate(properties.nasId),
        'OssAkId': ros.stringToRosTemplate(properties.ossAkId),
        'OssAkSecret': ros.stringToRosTemplate(properties.ossAkSecret),
        'OssMountDescs': ros.listMapper(ros.objectToRosTemplate)(properties.ossMountDescs),
        'PackageUrl': ros.stringToRosTemplate(properties.packageUrl),
        'PackageVersion': ros.stringToRosTemplate(properties.packageVersion),
        'Php': ros.stringToRosTemplate(properties.php),
        'PhpArmsConfigLocation': ros.stringToRosTemplate(properties.phpArmsConfigLocation),
        'PhpConfig': ros.stringToRosTemplate(properties.phpConfig),
        'PhpConfigLocation': ros.stringToRosTemplate(properties.phpConfigLocation),
        'PostStart': ros.stringToRosTemplate(properties.postStart),
        'PreStop': ros.stringToRosTemplate(properties.preStop),
        'ProgrammingLanguage': ros.stringToRosTemplate(properties.programmingLanguage),
        'PvtzDiscoverySvc': ros.stringToRosTemplate(properties.pvtzDiscoverySvc),
        'Python': ros.stringToRosTemplate(properties.python),
        'PythonModules': ros.stringToRosTemplate(properties.pythonModules),
        'Readiness': ros.stringToRosTemplate(properties.readiness),
        'SaeVersion': ros.stringToRosTemplate(properties.saeVersion),
        'SecurityGroupId': ros.stringToRosTemplate(properties.securityGroupId),
        'ServiceTags': ros.stringToRosTemplate(properties.serviceTags),
        'SlsConfigs': ros.stringToRosTemplate(properties.slsConfigs),
        'Tags': ros.listMapper(rosApplicationTagsPropertyToRosTemplate)(properties.tags),
        'TerminationGracePeriodSeconds': ros.numberToRosTemplate(properties.terminationGracePeriodSeconds),
        'Timezone': ros.stringToRosTemplate(properties.timezone),
        'TomcatConfig': ros.stringToRosTemplate(properties.tomcatConfig),
        'VpcId': ros.stringToRosTemplate(properties.vpcId),
        'VSwitchId': ros.stringToRosTemplate(properties.vSwitchId),
        'WarStartOptions': ros.stringToRosTemplate(properties.warStartOptions),
        'WebContainer': ros.stringToRosTemplate(properties.webContainer),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::SAE::Application`, which is used to create an application in Serverless App Engine (SAE).
 * @Note This class does not contain additional functions, so it is recommended to use the `Application` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-sae-application
 */
class RosApplication extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosApplication.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrAppId = this.getAtt('AppId');
        this.attrChangeOrderId = this.getAtt('ChangeOrderId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.appName = props.appName;
        this.cpu = props.cpu;
        this.memory = props.memory;
        this.namespaceId = props.namespaceId;
        this.packageType = props.packageType;
        this.replicas = props.replicas;
        this.acrAssumeRoleArn = props.acrAssumeRoleArn;
        this.acrInstanceId = props.acrInstanceId;
        this.appDescription = props.appDescription;
        this.appSource = props.appSource;
        this.associateEip = props.associateEip;
        this.autoConfig = props.autoConfig;
        this.baseAppId = props.baseAppId;
        this.command = props.command;
        this.commandArgs = props.commandArgs;
        this.configMapMountDesc = props.configMapMountDesc;
        this.customHostAlias = props.customHostAlias;
        this.deploy = props.deploy;
        this.edasContainerVersion = props.edasContainerVersion;
        this.enableEbpf = props.enableEbpf;
        this.envs = props.envs;
        this.imagePullSecrets = props.imagePullSecrets;
        this.imageUrl = props.imageUrl;
        this.jarStartArgs = props.jarStartArgs;
        this.jarStartOptions = props.jarStartOptions;
        this.jdk = props.jdk;
        this.kafkaConfigs = props.kafkaConfigs;
        this.liveness = props.liveness;
        this.microRegistration = props.microRegistration;
        this.microRegistrationConfig = props.microRegistrationConfig;
        this.mountDesc = props.mountDesc;
        this.mountHost = props.mountHost;
        this.nasConfigs = props.nasConfigs;
        this.nasId = props.nasId;
        this.ossAkId = props.ossAkId;
        this.ossAkSecret = props.ossAkSecret;
        this.ossMountDescs = props.ossMountDescs;
        this.packageUrl = props.packageUrl;
        this.packageVersion = props.packageVersion;
        this.php = props.php;
        this.phpArmsConfigLocation = props.phpArmsConfigLocation;
        this.phpConfig = props.phpConfig;
        this.phpConfigLocation = props.phpConfigLocation;
        this.postStart = props.postStart;
        this.preStop = props.preStop;
        this.programmingLanguage = props.programmingLanguage;
        this.pvtzDiscoverySvc = props.pvtzDiscoverySvc;
        this.python = props.python;
        this.pythonModules = props.pythonModules;
        this.readiness = props.readiness;
        this.saeVersion = props.saeVersion;
        this.securityGroupId = props.securityGroupId;
        this.serviceTags = props.serviceTags;
        this.slsConfigs = props.slsConfigs;
        this.tags = props.tags;
        this.terminationGracePeriodSeconds = props.terminationGracePeriodSeconds;
        this.timezone = props.timezone;
        this.tomcatConfig = props.tomcatConfig;
        this.vpcId = props.vpcId;
        this.vSwitchId = props.vSwitchId;
        this.warStartOptions = props.warStartOptions;
        this.webContainer = props.webContainer;
    }
    get rosProperties() {
        return {
            appName: this.appName,
            cpu: this.cpu,
            memory: this.memory,
            namespaceId: this.namespaceId,
            packageType: this.packageType,
            replicas: this.replicas,
            acrAssumeRoleArn: this.acrAssumeRoleArn,
            acrInstanceId: this.acrInstanceId,
            appDescription: this.appDescription,
            appSource: this.appSource,
            associateEip: this.associateEip,
            autoConfig: this.autoConfig,
            baseAppId: this.baseAppId,
            command: this.command,
            commandArgs: this.commandArgs,
            configMapMountDesc: this.configMapMountDesc,
            customHostAlias: this.customHostAlias,
            deploy: this.deploy,
            edasContainerVersion: this.edasContainerVersion,
            enableEbpf: this.enableEbpf,
            envs: this.envs,
            imagePullSecrets: this.imagePullSecrets,
            imageUrl: this.imageUrl,
            jarStartArgs: this.jarStartArgs,
            jarStartOptions: this.jarStartOptions,
            jdk: this.jdk,
            kafkaConfigs: this.kafkaConfigs,
            liveness: this.liveness,
            microRegistration: this.microRegistration,
            microRegistrationConfig: this.microRegistrationConfig,
            mountDesc: this.mountDesc,
            mountHost: this.mountHost,
            nasConfigs: this.nasConfigs,
            nasId: this.nasId,
            ossAkId: this.ossAkId,
            ossAkSecret: this.ossAkSecret,
            ossMountDescs: this.ossMountDescs,
            packageUrl: this.packageUrl,
            packageVersion: this.packageVersion,
            php: this.php,
            phpArmsConfigLocation: this.phpArmsConfigLocation,
            phpConfig: this.phpConfig,
            phpConfigLocation: this.phpConfigLocation,
            postStart: this.postStart,
            preStop: this.preStop,
            programmingLanguage: this.programmingLanguage,
            pvtzDiscoverySvc: this.pvtzDiscoverySvc,
            python: this.python,
            pythonModules: this.pythonModules,
            readiness: this.readiness,
            saeVersion: this.saeVersion,
            securityGroupId: this.securityGroupId,
            serviceTags: this.serviceTags,
            slsConfigs: this.slsConfigs,
            tags: this.tags,
            terminationGracePeriodSeconds: this.terminationGracePeriodSeconds,
            timezone: this.timezone,
            tomcatConfig: this.tomcatConfig,
            vpcId: this.vpcId,
            vSwitchId: this.vSwitchId,
            warStartOptions: this.warStartOptions,
            webContainer: this.webContainer,
        };
    }
    renderProperties(props) {
        return rosApplicationPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosApplication = RosApplication;
/**
 * The resource type name for this resource class.
 */
RosApplication.ROS_RESOURCE_TYPE_NAME = "ALIYUN::SAE::Application";
/**
 * Determine whether the given properties match those of a `TagsProperty`
 *
 * @param properties - the TypeScript properties of a `TagsProperty`
 *
 * @returns the result of the validation.
 */
function RosApplication_TagsPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('value', ros.validateString)(properties.value));
    errors.collect(ros.propertyValidator('key', ros.requiredValidator)(properties.key));
    errors.collect(ros.propertyValidator('key', ros.validateString)(properties.key));
    return errors.wrap('supplied properties not correct for "TagsProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::SAE::Application.Tags` resource
 *
 * @param properties - the TypeScript properties of a `TagsProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::SAE::Application.Tags` resource.
 */
// @ts-ignore TS6133
function rosApplicationTagsPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosApplication_TagsPropertyValidator(properties).assertSuccess();
    return {
        'Value': ros.stringToRosTemplate(properties.value),
        'Key': ros.stringToRosTemplate(properties.key),
    };
}
/**
 * Determine whether the given properties match those of a `RosConfigMapProps`
 *
 * @param properties - the TypeScript properties of a `RosConfigMapProps`
 *
 * @returns the result of the validation.
 */
function RosConfigMapPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('description', ros.validateString)(properties.description));
    errors.collect(ros.propertyValidator('data', ros.requiredValidator)(properties.data));
    errors.collect(ros.propertyValidator('data', ros.hashValidator(ros.validateAny))(properties.data));
    errors.collect(ros.propertyValidator('namespaceId', ros.requiredValidator)(properties.namespaceId));
    errors.collect(ros.propertyValidator('namespaceId', ros.validateString)(properties.namespaceId));
    errors.collect(ros.propertyValidator('name', ros.requiredValidator)(properties.name));
    errors.collect(ros.propertyValidator('name', ros.validateString)(properties.name));
    return errors.wrap('supplied properties not correct for "RosConfigMapProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::SAE::ConfigMap` resource
 *
 * @param properties - the TypeScript properties of a `RosConfigMapProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::SAE::ConfigMap` resource.
 */
// @ts-ignore TS6133
function rosConfigMapPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosConfigMapPropsValidator(properties).assertSuccess();
    }
    return {
        'Data': ros.hashMapper(ros.objectToRosTemplate)(properties.data),
        'Name': ros.stringToRosTemplate(properties.name),
        'NamespaceId': ros.stringToRosTemplate(properties.namespaceId),
        'Description': ros.stringToRosTemplate(properties.description),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::SAE::ConfigMap`.
 * @Note This class does not contain additional functions, so it is recommended to use the `ConfigMap` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-sae-configmap
 */
class RosConfigMap extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosConfigMap.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrConfigMapId = this.getAtt('ConfigMapId');
        this.attrNamespaceId = this.getAtt('NamespaceId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.data = props.data;
        this.name = props.name;
        this.namespaceId = props.namespaceId;
        this.description = props.description;
    }
    get rosProperties() {
        return {
            data: this.data,
            name: this.name,
            namespaceId: this.namespaceId,
            description: this.description,
        };
    }
    renderProperties(props) {
        return rosConfigMapPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosConfigMap = RosConfigMap;
/**
 * The resource type name for this resource class.
 */
RosConfigMap.ROS_RESOURCE_TYPE_NAME = "ALIYUN::SAE::ConfigMap";
/**
 * Determine whether the given properties match those of a `RosIngressProps`
 *
 * @param properties - the TypeScript properties of a `RosIngressProps`
 *
 * @returns the result of the validation.
 */
function RosIngressPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('defaultRule', ros.requiredValidator)(properties.defaultRule));
    errors.collect(ros.propertyValidator('defaultRule', RosIngress_DefaultRulePropertyValidator)(properties.defaultRule));
    errors.collect(ros.propertyValidator('slbId', ros.requiredValidator)(properties.slbId));
    errors.collect(ros.propertyValidator('slbId', ros.validateString)(properties.slbId));
    errors.collect(ros.propertyValidator('listenerPort', ros.requiredValidator)(properties.listenerPort));
    if (properties.listenerPort && (typeof properties.listenerPort) !== 'object') {
        errors.collect(ros.propertyValidator('listenerPort', ros.validateRange)({
            data: properties.listenerPort,
            min: 0,
            max: 65535,
        }));
    }
    errors.collect(ros.propertyValidator('listenerPort', ros.validateNumber)(properties.listenerPort));
    errors.collect(ros.propertyValidator('description', ros.requiredValidator)(properties.description));
    if (properties.description && (typeof properties.description) !== 'object') {
        errors.collect(ros.propertyValidator('description', ros.validateAllowedPattern)({
            data: properties.description,
            reg: /^[a-z0-9]([a-z0-9.-]{0,61}[a-z0-9])?$/
        }));
    }
    errors.collect(ros.propertyValidator('description', ros.validateString)(properties.description));
    if (properties.certIds && (Array.isArray(properties.certIds) || (typeof properties.certIds) === 'string')) {
        errors.collect(ros.propertyValidator('certIds', ros.validateLength)({
            data: properties.certIds.length,
            min: 1,
            max: 10,
        }));
    }
    errors.collect(ros.propertyValidator('certIds', ros.listValidator(ros.validateString))(properties.certIds));
    errors.collect(ros.propertyValidator('certId', ros.validateString)(properties.certId));
    errors.collect(ros.propertyValidator('loadBalanceType', ros.validateString)(properties.loadBalanceType));
    errors.collect(ros.propertyValidator('namespaceId', ros.requiredValidator)(properties.namespaceId));
    errors.collect(ros.propertyValidator('namespaceId', ros.validateString)(properties.namespaceId));
    if (properties.listenerProtocol && (typeof properties.listenerProtocol) !== 'object') {
        errors.collect(ros.propertyValidator('listenerProtocol', ros.validateAllowedValues)({
            data: properties.listenerProtocol,
            allowedValues: ["HTTP", "HTTPS"],
        }));
    }
    errors.collect(ros.propertyValidator('listenerProtocol', ros.validateString)(properties.listenerProtocol));
    errors.collect(ros.propertyValidator('rules', ros.requiredValidator)(properties.rules));
    if (properties.rules && (Array.isArray(properties.rules) || (typeof properties.rules) === 'string')) {
        errors.collect(ros.propertyValidator('rules', ros.validateLength)({
            data: properties.rules.length,
            min: 1,
            max: 10,
        }));
    }
    errors.collect(ros.propertyValidator('rules', ros.listValidator(RosIngress_RulesPropertyValidator))(properties.rules));
    return errors.wrap('supplied properties not correct for "RosIngressProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::SAE::Ingress` resource
 *
 * @param properties - the TypeScript properties of a `RosIngressProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::SAE::Ingress` resource.
 */
// @ts-ignore TS6133
function rosIngressPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosIngressPropsValidator(properties).assertSuccess();
    }
    return {
        'DefaultRule': rosIngressDefaultRulePropertyToRosTemplate(properties.defaultRule),
        'Description': ros.stringToRosTemplate(properties.description),
        'ListenerPort': ros.numberToRosTemplate(properties.listenerPort),
        'NamespaceId': ros.stringToRosTemplate(properties.namespaceId),
        'Rules': ros.listMapper(rosIngressRulesPropertyToRosTemplate)(properties.rules),
        'SlbId': ros.stringToRosTemplate(properties.slbId),
        'CertId': ros.stringToRosTemplate(properties.certId),
        'CertIds': ros.listMapper(ros.stringToRosTemplate)(properties.certIds),
        'ListenerProtocol': ros.stringToRosTemplate(properties.listenerProtocol),
        'LoadBalanceType': ros.stringToRosTemplate(properties.loadBalanceType),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::SAE::Ingress`.
 * @Note This class does not contain additional functions, so it is recommended to use the `Ingress` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-sae-ingress
 */
class RosIngress extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosIngress.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrIngressId = this.getAtt('IngressId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.defaultRule = props.defaultRule;
        this.description = props.description;
        this.listenerPort = props.listenerPort;
        this.namespaceId = props.namespaceId;
        this.rules = props.rules;
        this.slbId = props.slbId;
        this.certId = props.certId;
        this.certIds = props.certIds;
        this.listenerProtocol = props.listenerProtocol;
        this.loadBalanceType = props.loadBalanceType;
    }
    get rosProperties() {
        return {
            defaultRule: this.defaultRule,
            description: this.description,
            listenerPort: this.listenerPort,
            namespaceId: this.namespaceId,
            rules: this.rules,
            slbId: this.slbId,
            certId: this.certId,
            certIds: this.certIds,
            listenerProtocol: this.listenerProtocol,
            loadBalanceType: this.loadBalanceType,
        };
    }
    renderProperties(props) {
        return rosIngressPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosIngress = RosIngress;
/**
 * The resource type name for this resource class.
 */
RosIngress.ROS_RESOURCE_TYPE_NAME = "ALIYUN::SAE::Ingress";
/**
 * Determine whether the given properties match those of a `DefaultRuleProperty`
 *
 * @param properties - the TypeScript properties of a `DefaultRuleProperty`
 *
 * @returns the result of the validation.
 */
function RosIngress_DefaultRulePropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    if (properties.backendProtocol && (typeof properties.backendProtocol) !== 'object') {
        errors.collect(ros.propertyValidator('backendProtocol', ros.validateAllowedValues)({
            data: properties.backendProtocol,
            allowedValues: ["http", "https", "grpc"],
        }));
    }
    errors.collect(ros.propertyValidator('backendProtocol', ros.validateString)(properties.backendProtocol));
    errors.collect(ros.propertyValidator('appId', ros.requiredValidator)(properties.appId));
    errors.collect(ros.propertyValidator('appId', ros.validateString)(properties.appId));
    errors.collect(ros.propertyValidator('containerPort', ros.requiredValidator)(properties.containerPort));
    if (properties.containerPort && (typeof properties.containerPort) !== 'object') {
        errors.collect(ros.propertyValidator('containerPort', ros.validateRange)({
            data: properties.containerPort,
            min: 0,
            max: 65535,
        }));
    }
    errors.collect(ros.propertyValidator('containerPort', ros.validateNumber)(properties.containerPort));
    return errors.wrap('supplied properties not correct for "DefaultRuleProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::SAE::Ingress.DefaultRule` resource
 *
 * @param properties - the TypeScript properties of a `DefaultRuleProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::SAE::Ingress.DefaultRule` resource.
 */
// @ts-ignore TS6133
function rosIngressDefaultRulePropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosIngress_DefaultRulePropertyValidator(properties).assertSuccess();
    return {
        'BackendProtocol': ros.stringToRosTemplate(properties.backendProtocol),
        'AppId': ros.stringToRosTemplate(properties.appId),
        'ContainerPort': ros.numberToRosTemplate(properties.containerPort),
    };
}
/**
 * Determine whether the given properties match those of a `RulesProperty`
 *
 * @param properties - the TypeScript properties of a `RulesProperty`
 *
 * @returns the result of the validation.
 */
function RosIngress_RulesPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('path', ros.requiredValidator)(properties.path));
    errors.collect(ros.propertyValidator('path', ros.validateString)(properties.path));
    if (properties.backendProtocol && (typeof properties.backendProtocol) !== 'object') {
        errors.collect(ros.propertyValidator('backendProtocol', ros.validateAllowedValues)({
            data: properties.backendProtocol,
            allowedValues: ["http", "https", "grpc"],
        }));
    }
    errors.collect(ros.propertyValidator('backendProtocol', ros.validateString)(properties.backendProtocol));
    errors.collect(ros.propertyValidator('appId', ros.requiredValidator)(properties.appId));
    errors.collect(ros.propertyValidator('appId', ros.validateString)(properties.appId));
    errors.collect(ros.propertyValidator('rewritePath', ros.validateString)(properties.rewritePath));
    errors.collect(ros.propertyValidator('containerPort', ros.requiredValidator)(properties.containerPort));
    if (properties.containerPort && (typeof properties.containerPort) !== 'object') {
        errors.collect(ros.propertyValidator('containerPort', ros.validateRange)({
            data: properties.containerPort,
            min: 0,
            max: 65535,
        }));
    }
    errors.collect(ros.propertyValidator('containerPort', ros.validateNumber)(properties.containerPort));
    errors.collect(ros.propertyValidator('domain', ros.requiredValidator)(properties.domain));
    errors.collect(ros.propertyValidator('domain', ros.validateString)(properties.domain));
    return errors.wrap('supplied properties not correct for "RulesProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::SAE::Ingress.Rules` resource
 *
 * @param properties - the TypeScript properties of a `RulesProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::SAE::Ingress.Rules` resource.
 */
// @ts-ignore TS6133
function rosIngressRulesPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosIngress_RulesPropertyValidator(properties).assertSuccess();
    return {
        'Path': ros.stringToRosTemplate(properties.path),
        'BackendProtocol': ros.stringToRosTemplate(properties.backendProtocol),
        'AppId': ros.stringToRosTemplate(properties.appId),
        'RewritePath': ros.stringToRosTemplate(properties.rewritePath),
        'ContainerPort': ros.numberToRosTemplate(properties.containerPort),
        'Domain': ros.stringToRosTemplate(properties.domain),
    };
}
/**
 * Determine whether the given properties match those of a `RosNamespaceProps`
 *
 * @param properties - the TypeScript properties of a `RosNamespaceProps`
 *
 * @returns the result of the validation.
 */
function RosNamespacePropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('namespaceName', ros.requiredValidator)(properties.namespaceName));
    errors.collect(ros.propertyValidator('namespaceName', ros.validateString)(properties.namespaceName));
    errors.collect(ros.propertyValidator('namespaceId', ros.requiredValidator)(properties.namespaceId));
    errors.collect(ros.propertyValidator('namespaceId', ros.validateString)(properties.namespaceId));
    errors.collect(ros.propertyValidator('namespaceDescription', ros.validateString)(properties.namespaceDescription));
    return errors.wrap('supplied properties not correct for "RosNamespaceProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::SAE::Namespace` resource
 *
 * @param properties - the TypeScript properties of a `RosNamespaceProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::SAE::Namespace` resource.
 */
// @ts-ignore TS6133
function rosNamespacePropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosNamespacePropsValidator(properties).assertSuccess();
    }
    return {
        'NamespaceId': ros.stringToRosTemplate(properties.namespaceId),
        'NamespaceName': ros.stringToRosTemplate(properties.namespaceName),
        'NamespaceDescription': ros.stringToRosTemplate(properties.namespaceDescription),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::SAE::Namespace`, which is used to create a Namespace.
 * @Note This class does not contain additional functions, so it is recommended to use the `Namespace` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-sae-namespace
 */
class RosNamespace extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosNamespace.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrNamespaceId = this.getAtt('NamespaceId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.namespaceId = props.namespaceId;
        this.namespaceName = props.namespaceName;
        this.namespaceDescription = props.namespaceDescription;
    }
    get rosProperties() {
        return {
            namespaceId: this.namespaceId,
            namespaceName: this.namespaceName,
            namespaceDescription: this.namespaceDescription,
        };
    }
    renderProperties(props) {
        return rosNamespacePropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosNamespace = RosNamespace;
/**
 * The resource type name for this resource class.
 */
RosNamespace.ROS_RESOURCE_TYPE_NAME = "ALIYUN::SAE::Namespace";
/**
 * Determine whether the given properties match those of a `RosSlbBindingProps`
 *
 * @param properties - the TypeScript properties of a `RosSlbBindingProps`
 *
 * @returns the result of the validation.
 */
function RosSlbBindingPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('internetSlbId', ros.validateString)(properties.internetSlbId));
    errors.collect(ros.propertyValidator('appId', ros.requiredValidator)(properties.appId));
    errors.collect(ros.propertyValidator('appId', ros.validateString)(properties.appId));
    errors.collect(ros.propertyValidator('intranet', ros.validateString)(properties.intranet));
    errors.collect(ros.propertyValidator('intranetSlbId', ros.validateString)(properties.intranetSlbId));
    errors.collect(ros.propertyValidator('internet', ros.validateString)(properties.internet));
    return errors.wrap('supplied properties not correct for "RosSlbBindingProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::SAE::SlbBinding` resource
 *
 * @param properties - the TypeScript properties of a `RosSlbBindingProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::SAE::SlbBinding` resource.
 */
// @ts-ignore TS6133
function rosSlbBindingPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosSlbBindingPropsValidator(properties).assertSuccess();
    }
    return {
        'AppId': ros.stringToRosTemplate(properties.appId),
        'Internet': ros.stringToRosTemplate(properties.internet),
        'InternetSlbId': ros.stringToRosTemplate(properties.internetSlbId),
        'Intranet': ros.stringToRosTemplate(properties.intranet),
        'IntranetSlbId': ros.stringToRosTemplate(properties.intranetSlbId),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::SAE::SlbBinding`, which is used to bind an SLB instance to an application.
 * @Note This class does not contain additional functions, so it is recommended to use the `SlbBinding` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-sae-slbbinding
 */
class RosSlbBinding extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosSlbBinding.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrAppId = this.getAtt('AppId');
        this.attrChangeOrderId = this.getAtt('ChangeOrderId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.appId = props.appId;
        this.internet = props.internet;
        this.internetSlbId = props.internetSlbId;
        this.intranet = props.intranet;
        this.intranetSlbId = props.intranetSlbId;
    }
    get rosProperties() {
        return {
            appId: this.appId,
            internet: this.internet,
            internetSlbId: this.internetSlbId,
            intranet: this.intranet,
            intranetSlbId: this.intranetSlbId,
        };
    }
    renderProperties(props) {
        return rosSlbBindingPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosSlbBinding = RosSlbBinding;
/**
 * The resource type name for this resource class.
 */
RosSlbBinding.ROS_RESOURCE_TYPE_NAME = "ALIYUN::SAE::SlbBinding";
//# sourceMappingURL=data:application/json;base64,