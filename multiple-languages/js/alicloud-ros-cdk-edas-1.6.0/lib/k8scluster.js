"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.K8sCluster = exports.K8sClusterProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const edas_generated_1 = require("./edas.generated");
Object.defineProperty(exports, "K8sClusterProperty", { enumerable: true, get: function () { return edas_generated_1.RosK8sCluster; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::EDAS::K8sCluster`, which is used to create a cluster of Container Service for Kubernetes (ACK).
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosK8sCluster`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-edas-k8scluster
 */
class K8sCluster extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosK8sCluster = new edas_generated_1.RosK8sCluster(this, id, {
            enableAsm: props.enableAsm,
            namespaceId: props.namespaceId,
            csClusterId: props.csClusterId,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosK8sCluster;
        this.attrClusterId = rosK8sCluster.attrClusterId;
        this.attrClusterName = rosK8sCluster.attrClusterName;
        this.attrClusterType = rosK8sCluster.attrClusterType;
        this.attrCsClusterId = rosK8sCluster.attrCsClusterId;
        this.attrNetworkMode = rosK8sCluster.attrNetworkMode;
        this.attrNodeNum = rosK8sCluster.attrNodeNum;
        this.attrSubNetCidr = rosK8sCluster.attrSubNetCidr;
        this.attrVpcId = rosK8sCluster.attrVpcId;
        this.attrVswitchId = rosK8sCluster.attrVswitchId;
    }
}
exports.K8sCluster = K8sCluster;
//# sourceMappingURL=data:application/json;base64,