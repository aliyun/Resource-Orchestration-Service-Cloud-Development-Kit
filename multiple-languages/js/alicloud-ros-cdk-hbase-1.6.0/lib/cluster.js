"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Cluster = exports.ClusterProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const hbase_generated_1 = require("./hbase.generated");
Object.defineProperty(exports, "ClusterProperty", { enumerable: true, get: function () { return hbase_generated_1.RosCluster; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::HBase::Cluster`, which is used to create an ApsaraDB for HBase cluster.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosCluster`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-hbase-cluster
 */
class Cluster extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosCluster = new hbase_generated_1.RosCluster(this, id, {
            autoRenewPeriod: props.autoRenewPeriod,
            coldStorageSize: props.coldStorageSize,
            engineVersion: props.engineVersion,
            resourceGroupId: props.resourceGroupId,
            nodeCount: props.nodeCount,
            zoneId: props.zoneId,
            vSwitchId: props.vSwitchId,
            period: props.period,
            encryptionKey: props.encryptionKey,
            deletionProtection: props.deletionProtection,
            payType: props.payType,
            masterInstanceType: props.masterInstanceType,
            diskType: props.diskType,
            vpcId: props.vpcId,
            securityIpList: props.securityIpList,
            coreInstanceType: props.coreInstanceType,
            diskSize: props.diskSize,
            clusterName: props.clusterName,
            engine: props.engine,
            periodUnit: props.periodUnit,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosCluster;
        this.attrClusterId = rosCluster.attrClusterId;
        this.attrServiceConnAddrs = rosCluster.attrServiceConnAddrs;
        this.attrSlbConnAddrs = rosCluster.attrSlbConnAddrs;
        this.attrThriftConn = rosCluster.attrThriftConn;
        this.attrUiProxyConnAddrInfo = rosCluster.attrUiProxyConnAddrInfo;
        this.attrZkConnAddrs = rosCluster.attrZkConnAddrs;
    }
}
exports.Cluster = Cluster;
//# sourceMappingURL=data:application/json;base64,