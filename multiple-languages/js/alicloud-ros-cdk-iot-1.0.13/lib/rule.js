"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Rule = exports.RuleProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const iot_generated_1 = require("./iot.generated");
Object.defineProperty(exports, "RuleProperty", { enumerable: true, get: function () { return iot_generated_1.RosRule; } });
/**
 * A ROS resource type:  `ALIYUN::IOT::Rule`
 */
class Rule extends ros.Resource {
    /**
     * Create a new `ALIYUN::IOT::Rule`.
     *
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosRule = new iot_generated_1.RosRule(this, id, {
            topicType: props.topicType,
            iotInstanceId: props.iotInstanceId,
            resourceGroupId: props.resourceGroupId,
            ruleAction: props.ruleAction,
            shortTopic: props.shortTopic,
            select: props.select,
            startRule: props.startRule,
            dataType: props.dataType,
            ruleDesc: props.ruleDesc,
            where: props.where,
            productKey: props.productKey,
            name: props.name,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosRule;
        this.attrActionId = rosRule.attrActionId;
        this.attrRuleId = rosRule.attrRuleId;
    }
}
exports.Rule = Rule;
//# sourceMappingURL=data:application/json;base64,