"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImageLib = exports.ImageLibProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const aligreen_generated_1 = require("./aligreen.generated");
Object.defineProperty(exports, "ImageLibProperty", { enumerable: true, get: function () { return aligreen_generated_1.RosImageLib; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::Aligreen::ImageLib`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosImageLib`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-aligreen-imagelib
 */
class ImageLib extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosImageLib = new aligreen_generated_1.RosImageLib(this, id, {
            category: props.category,
            bizTypes: props.bizTypes,
            enable: props.enable,
            scene: props.scene,
            imageLibName: props.imageLibName,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosImageLib;
        this.attrBizTypes = rosImageLib.attrBizTypes;
        this.attrCategory = rosImageLib.attrCategory;
        this.attrEnable = rosImageLib.attrEnable;
        this.attrImageLibId = rosImageLib.attrImageLibId;
        this.attrImageLibName = rosImageLib.attrImageLibName;
        this.attrScene = rosImageLib.attrScene;
    }
}
exports.ImageLib = ImageLib;
//# sourceMappingURL=data:application/json;base64,