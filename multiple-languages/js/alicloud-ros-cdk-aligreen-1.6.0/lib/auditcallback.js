"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuditCallback = exports.AuditCallbackProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const aligreen_generated_1 = require("./aligreen.generated");
Object.defineProperty(exports, "AuditCallbackProperty", { enumerable: true, get: function () { return aligreen_generated_1.RosAuditCallback; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::Aligreen::AuditCallback`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosAuditCallback`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-aligreen-auditcallback
 */
class AuditCallback extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosAuditCallback = new aligreen_generated_1.RosAuditCallback(this, id, {
            cryptType: props.cryptType,
            callbackTypes: props.callbackTypes,
            auditCallbackName: props.auditCallbackName,
            url: props.url,
            callbackSuggestions: props.callbackSuggestions,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosAuditCallback;
        this.attrAuditCallbackName = rosAuditCallback.attrAuditCallbackName;
        this.attrCallbackSuggestions = rosAuditCallback.attrCallbackSuggestions;
        this.attrCallbackTypes = rosAuditCallback.attrCallbackTypes;
        this.attrCryptType = rosAuditCallback.attrCryptType;
        this.attrUrl = rosAuditCallback.attrUrl;
    }
}
exports.AuditCallback = AuditCallback;
//# sourceMappingURL=data:application/json;base64,