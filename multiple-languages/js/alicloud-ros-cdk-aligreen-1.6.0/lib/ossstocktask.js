"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OssStockTask = exports.OssStockTaskProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const aligreen_generated_1 = require("./aligreen.generated");
Object.defineProperty(exports, "OssStockTaskProperty", { enumerable: true, get: function () { return aligreen_generated_1.RosOssStockTask; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::Aligreen::OssStockTask`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosOssStockTask`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-aligreen-ossstocktask
 */
class OssStockTask extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosOssStockTask = new aligreen_generated_1.RosOssStockTask(this, id, {
            imageOpened: props.imageOpened,
            audioAntispamFreezeConfig: props.audioAntispamFreezeConfig,
            ossStockTaskName: props.ossStockTaskName,
            scanImageNoFileType: props.scanImageNoFileType,
            audioOpened: props.audioOpened,
            buckets: props.buckets,
            startDate: props.startDate,
            imageLiveFreezeConfig: props.imageLiveFreezeConfig,
            imageAutoFreezeOpened: props.imageAutoFreezeOpened,
            autoFreezeType: props.autoFreezeType,
            imageScenes: props.imageScenes,
            audioMaxSize: props.audioMaxSize,
            videoTerrorismFreezeConfig: props.videoTerrorismFreezeConfig,
            videoOpened: props.videoOpened,
            imageTerrorismFreezeConfig: props.imageTerrorismFreezeConfig,
            callbackId: props.callbackId,
            imageScanLimit: props.imageScanLimit,
            bizType: props.bizType,
            imageAdFreezeConfig: props.imageAdFreezeConfig,
            audioScenes: props.audioScenes,
            videoFrameInterval: props.videoFrameInterval,
            endDate: props.endDate,
            imagePornFreezeConfig: props.imagePornFreezeConfig,
            videoLiveFreezeConfig: props.videoLiveFreezeConfig,
            audioAutoFreezeOpened: props.audioAutoFreezeOpened,
            videoScanLimit: props.videoScanLimit,
            videoPornFreezeConfig: props.videoPornFreezeConfig,
            videoAutoFreezeOpened: props.videoAutoFreezeOpened,
            videoVoiceAntispamFreezeConfig: props.videoVoiceAntispamFreezeConfig,
            audioScanLimit: props.audioScanLimit,
            videoScenes: props.videoScenes,
            videoAdFreezeConfig: props.videoAdFreezeConfig,
            videoMaxFrames: props.videoMaxFrames,
            videoMaxSize: props.videoMaxSize,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosOssStockTask;
        this.attrAudioAntispamFreezeConfig = rosOssStockTask.attrAudioAntispamFreezeConfig;
        this.attrAudioAutoFreezeOpened = rosOssStockTask.attrAudioAutoFreezeOpened;
        this.attrAudioMaxSize = rosOssStockTask.attrAudioMaxSize;
        this.attrAudioOpened = rosOssStockTask.attrAudioOpened;
        this.attrAudioScanLimit = rosOssStockTask.attrAudioScanLimit;
        this.attrAudioScenes = rosOssStockTask.attrAudioScenes;
        this.attrAutoFreezeType = rosOssStockTask.attrAutoFreezeType;
        this.attrBizType = rosOssStockTask.attrBizType;
        this.attrBuckets = rosOssStockTask.attrBuckets;
        this.attrCallbackId = rosOssStockTask.attrCallbackId;
        this.attrEndDate = rosOssStockTask.attrEndDate;
        this.attrImageAdFreezeConfig = rosOssStockTask.attrImageAdFreezeConfig;
        this.attrImageAutoFreezeOpened = rosOssStockTask.attrImageAutoFreezeOpened;
        this.attrImageLiveFreezeConfig = rosOssStockTask.attrImageLiveFreezeConfig;
        this.attrImageOpened = rosOssStockTask.attrImageOpened;
        this.attrImagePornFreezeConfig = rosOssStockTask.attrImagePornFreezeConfig;
        this.attrImageScanLimit = rosOssStockTask.attrImageScanLimit;
        this.attrImageScenes = rosOssStockTask.attrImageScenes;
        this.attrImageTerrorismFreezeConfig = rosOssStockTask.attrImageTerrorismFreezeConfig;
        this.attrScanImageNoFileType = rosOssStockTask.attrScanImageNoFileType;
        this.attrStartDate = rosOssStockTask.attrStartDate;
        this.attrVideoAdFreezeConfig = rosOssStockTask.attrVideoAdFreezeConfig;
        this.attrVideoAutoFreezeOpened = rosOssStockTask.attrVideoAutoFreezeOpened;
        this.attrVideoFrameInterval = rosOssStockTask.attrVideoFrameInterval;
        this.attrVideoLiveFreezeConfig = rosOssStockTask.attrVideoLiveFreezeConfig;
        this.attrVideoMaxFrames = rosOssStockTask.attrVideoMaxFrames;
        this.attrVideoMaxSize = rosOssStockTask.attrVideoMaxSize;
        this.attrVideoOpened = rosOssStockTask.attrVideoOpened;
        this.attrVideoPornFreezeConfig = rosOssStockTask.attrVideoPornFreezeConfig;
        this.attrVideoScanLimit = rosOssStockTask.attrVideoScanLimit;
        this.attrVideoScenes = rosOssStockTask.attrVideoScenes;
        this.attrVideoTerrorismFreezeConfig = rosOssStockTask.attrVideoTerrorismFreezeConfig;
        this.attrVideoVoiceAntispamFreezeConfig = rosOssStockTask.attrVideoVoiceAntispamFreezeConfig;
    }
}
exports.OssStockTask = OssStockTask;
//# sourceMappingURL=data:application/json;base64,