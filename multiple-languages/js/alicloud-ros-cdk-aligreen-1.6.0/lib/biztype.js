"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BizType = exports.BizTypeProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const aligreen_generated_1 = require("./aligreen.generated");
Object.defineProperty(exports, "BizTypeProperty", { enumerable: true, get: function () { return aligreen_generated_1.RosBizType; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::Aligreen::BizType`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosBizType`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-aligreen-biztype
 */
class BizType extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosBizType = new aligreen_generated_1.RosBizType(this, id, {
            bizTypeImport: props.bizTypeImport,
            bizTypeName: props.bizTypeName,
            description: props.description,
            citeTemplate: props.citeTemplate,
            industryInfo: props.industryInfo,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosBizType;
        this.attrBizTypeName = rosBizType.attrBizTypeName;
        this.attrCiteTemplate = rosBizType.attrCiteTemplate;
        this.attrDescription = rosBizType.attrDescription;
        this.attrIndustryInfo = rosBizType.attrIndustryInfo;
    }
}
exports.BizType = BizType;
//# sourceMappingURL=data:application/json;base64,