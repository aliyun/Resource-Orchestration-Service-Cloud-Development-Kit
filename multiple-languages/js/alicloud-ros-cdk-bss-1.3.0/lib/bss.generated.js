"use strict";
// Generated from the AliCloud ROS Resource Specification
Object.defineProperty(exports, "__esModule", { value: true });
exports.RosWaitOrder = exports.RosResourcePackage = void 0;
const ros = require("@alicloud/ros-cdk-core");
/**
 * Determine whether the given properties match those of a `RosResourcePackageProps`
 *
 * @param properties - the TypeScript properties of a `RosResourcePackageProps`
 *
 * @returns the result of the validation.
 */
function RosResourcePackagePropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('productCode', ros.requiredValidator)(properties.productCode));
    errors.collect(ros.propertyValidator('productCode', ros.validateString)(properties.productCode));
    if (properties.pricingCycle && (typeof properties.pricingCycle) !== 'object') {
        errors.collect(ros.propertyValidator('pricingCycle', ros.validateAllowedValues)({
            data: properties.pricingCycle,
            allowedValues: ["Month", "Year"],
        }));
    }
    errors.collect(ros.propertyValidator('pricingCycle', ros.validateString)(properties.pricingCycle));
    errors.collect(ros.propertyValidator('packageType', ros.requiredValidator)(properties.packageType));
    errors.collect(ros.propertyValidator('packageType', ros.validateString)(properties.packageType));
    errors.collect(ros.propertyValidator('specification', ros.requiredValidator)(properties.specification));
    errors.collect(ros.propertyValidator('specification', ros.validateString)(properties.specification));
    errors.collect(ros.propertyValidator('duration', ros.requiredValidator)(properties.duration));
    errors.collect(ros.propertyValidator('duration', ros.validateNumber)(properties.duration));
    errors.collect(ros.propertyValidator('effectiveDate', ros.validateString)(properties.effectiveDate));
    return errors.wrap('supplied properties not correct for "RosResourcePackageProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::BSS::ResourcePackage` resource
 *
 * @param properties - the TypeScript properties of a `RosResourcePackageProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::BSS::ResourcePackage` resource.
 */
// @ts-ignore TS6133
function rosResourcePackagePropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosResourcePackagePropsValidator(properties).assertSuccess();
    }
    return {
        'Duration': ros.numberToRosTemplate(properties.duration),
        'PackageType': ros.stringToRosTemplate(properties.packageType),
        'ProductCode': ros.stringToRosTemplate(properties.productCode),
        'Specification': ros.stringToRosTemplate(properties.specification),
        'EffectiveDate': ros.stringToRosTemplate(properties.effectiveDate),
        'PricingCycle': ros.stringToRosTemplate(properties.pricingCycle),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::BSS::ResourcePackage`, which is used to create a resource plan.
 * @Note This class does not contain additional functions, so it is recommended to use the `ResourcePackage` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-bss-resourcepackage
 */
class RosResourcePackage extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosResourcePackage.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrInstanceId = this.getAtt('InstanceId');
        this.attrOrderId = this.getAtt('OrderId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.duration = props.duration;
        this.packageType = props.packageType;
        this.productCode = props.productCode;
        this.specification = props.specification;
        this.effectiveDate = props.effectiveDate;
        this.pricingCycle = props.pricingCycle;
    }
    get rosProperties() {
        return {
            duration: this.duration,
            packageType: this.packageType,
            productCode: this.productCode,
            specification: this.specification,
            effectiveDate: this.effectiveDate,
            pricingCycle: this.pricingCycle,
        };
    }
    renderProperties(props) {
        return rosResourcePackagePropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosResourcePackage = RosResourcePackage;
/**
 * The resource type name for this resource class.
 */
RosResourcePackage.ROS_RESOURCE_TYPE_NAME = "ALIYUN::BSS::ResourcePackage";
/**
 * Determine whether the given properties match those of a `RosWaitOrderProps`
 *
 * @param properties - the TypeScript properties of a `RosWaitOrderProps`
 *
 * @returns the result of the validation.
 */
function RosWaitOrderPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('cancelOnDelete', ros.validateBoolean)(properties.cancelOnDelete));
    errors.collect(ros.propertyValidator('orderIds', ros.requiredValidator)(properties.orderIds));
    if (properties.orderIds && (Array.isArray(properties.orderIds) || (typeof properties.orderIds) === 'string')) {
        errors.collect(ros.propertyValidator('orderIds', ros.validateLength)({
            data: properties.orderIds.length,
            min: 1,
            max: undefined,
        }));
    }
    errors.collect(ros.propertyValidator('orderIds', ros.listValidator(ros.validateAny))(properties.orderIds));
    errors.collect(ros.propertyValidator('waitForOrderProduced', ros.validateBoolean)(properties.waitForOrderProduced));
    return errors.wrap('supplied properties not correct for "RosWaitOrderProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::BSS::WaitOrder` resource
 *
 * @param properties - the TypeScript properties of a `RosWaitOrderProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::BSS::WaitOrder` resource.
 */
// @ts-ignore TS6133
function rosWaitOrderPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosWaitOrderPropsValidator(properties).assertSuccess();
    }
    return {
        'OrderIds': ros.listMapper(ros.objectToRosTemplate)(properties.orderIds),
        'CancelOnDelete': ros.booleanToRosTemplate(properties.cancelOnDelete),
        'WaitForOrderProduced': ros.booleanToRosTemplate(properties.waitForOrderProduced),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::BSS::WaitOrder`, which is used to wait for orders to be completed.
 * @Note This class does not contain additional functions, so it is recommended to use the `WaitOrder` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-bss-waitorder
 */
class RosWaitOrder extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosWaitOrder.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.orderIds = props.orderIds;
        this.cancelOnDelete = props.cancelOnDelete;
        this.waitForOrderProduced = props.waitForOrderProduced;
    }
    get rosProperties() {
        return {
            orderIds: this.orderIds,
            cancelOnDelete: this.cancelOnDelete,
            waitForOrderProduced: this.waitForOrderProduced,
        };
    }
    renderProperties(props) {
        return rosWaitOrderPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosWaitOrder = RosWaitOrder;
/**
 * The resource type name for this resource class.
 */
RosWaitOrder.ROS_RESOURCE_TYPE_NAME = "ALIYUN::BSS::WaitOrder";
//# sourceMappingURL=data:application/json;base64,