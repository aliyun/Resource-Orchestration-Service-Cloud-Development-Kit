"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Bucket = exports.BucketProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const oss_generated_1 = require("./oss.generated");
Object.defineProperty(exports, "BucketProperty", { enumerable: true, get: function () { return oss_generated_1.RosBucket; } });
// Generated from the AliCloud ROS Resource Specification
const os_1 = require("os");
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::OSS::Bucket`, which is used to create an Object Storage Service (OSS) bucket.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosBucket`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-oss-bucket
 */
class Bucket extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosBucket = new oss_generated_1.RosBucket(this, id, {
            policy: props.policy,
            enableOssHdfsService: props.enableOssHdfsService === undefined || props.enableOssHdfsService === null ? false : props.enableOssHdfsService,
            resourceGroupId: props.resourceGroupId,
            storageClass: props.storageClass,
            redundancyType: props.redundancyType === undefined || props.redundancyType === null ? 'LRS' : props.redundancyType,
            lifecycleConfiguration: props.lifecycleConfiguration,
            serverSideEncryptionConfiguration: props.serverSideEncryptionConfiguration,
            versioningConfiguration: props.versioningConfiguration,
            accessControl: props.accessControl === undefined || props.accessControl === null ? 'private' : props.accessControl,
            corsConfiguration: props.corsConfiguration,
            bucketName: props.bucketName,
            deletionForce: props.deletionForce === undefined || props.deletionForce === null ? false : props.deletionForce,
            loggingConfiguration: props.loggingConfiguration,
            websiteConfigurationV2: props.websiteConfigurationV2,
            refererConfiguration: props.refererConfiguration,
            tags: props.tags,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosBucket;
        this.attrDomainName = rosBucket.attrDomainName;
        this.attrInternalDomainName = rosBucket.attrInternalDomainName;
        this.attrName = rosBucket.attrName;
    }
    /**
     * Check whether the bucket exists.
     *
     * @param physicalName name of the bucket.
     */
    // public static async checkBucketExists(physicalName: string): Promise<boolean> {
    //     const config = await CdkToolkit.getConfig();
    //     let client_params;
    //     if (!config.accessKeyId || !config.accessKeySecret) {
    //         error("Please use 'ros-cdk config (-g)' or set environment to set your account configuration firstly!");
    //         exit(1);
    //     } else if (!config.securityToken) {
    //         client_params = {
    //             region: config.regionId,
    //             accessKeyId: config.accessKeyId,
    //             accessKeySecret: config.accessKeySecret
    //         };
    //     } else {
    //         client_params = {
    //             region: config.regionId,
    //             accessKeyId: config.accessKeyId,
    //             accessKeySecret: config.accessKeySecret,
    //             securityToken: config.securityToken
    //         };
    //     }
    //     const client = new ossClient(client_params);
    //     try {
    //         await client.getBucketInfo(physicalName);
    //     } catch (error) {
    //         if (error.name === 'NoSuchBucketError' || error.name === 'AccessDenied') {
    //             return true;
    //         } else {
    //             throw error;
    //         }
    //     }
    //     return false;
    // }
    /**
     * Thrown an exception if the given bucket name is not valid.
     *
     * @param physicalName name of the bucket.
     */
    static async validateBucketName(physicalName) {
        const bucketName = physicalName;
        if (!bucketName || ros.Token.isUnresolved(bucketName)) {
            // the name is a late-bound value, not a defined string,
            // so skip validation
            return;
        }
        const errors = [];
        // Rules codified from https://www.alibabacloud.com/help/oss/user-guide/bucket-naming-conventions
        if (bucketName.length < 3 || bucketName.length > 63) {
            errors.push('Bucket name must be at least 3 and no more than 63 characters');
        }
        const charsetMatch = bucketName.match(/[^a-z0-9-]/);
        if (charsetMatch) {
            errors.push('Bucket name must only contain lowercase characters and the symbols and dash (-) '
                + `(offset: ${charsetMatch.index})`);
        }
        if (!/[a-z0-9]/.test(bucketName.charAt(0))) {
            errors.push('Bucket name must start and end with a lowercase character or number '
                + '(offset: 0)');
        }
        if (!/[a-z0-9]/.test(bucketName.charAt(bucketName.length - 1))) {
            errors.push('Bucket name must start and end with a lowercase character or number '
                + `(offset: ${bucketName.length - 1})`);
        }
        // if (checkBucketExists) {
        //     const exists = await Bucket.checkBucketExists(physicalName);
        //     if (exists) {
        //         errors.push(`Bucket name ${bucketName} is already taken`);
        //     }
        // }
        if (errors.length > 0) {
            throw new Error(`Invalid OSS bucket name (value: ${bucketName})${os_1.EOL}${errors.join(os_1.EOL)}`);
        }
    }
}
exports.Bucket = Bucket;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVja2V0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYnVja2V0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDhDQUE4QztBQUM5QyxtREFBNEM7QUF1RHRCLCtGQXZEYix5QkFBUyxPQXVEa0I7QUF0RHBDLHlEQUF5RDtBQUN6RCwyQkFBdUI7QUFpSnZCOzs7O0dBSUc7QUFDSCxNQUFhLE1BQU8sU0FBUSxHQUFHLENBQUMsUUFBUTtJQXFCcEM7Ozs7T0FJRztJQUNILFlBQVksS0FBb0IsRUFBRSxFQUFVLEVBQUUsS0FBa0IsRUFBRSxtQ0FBMkMsSUFBSTtRQUM3RyxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ2pCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQ2IsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLGdDQUFnQyxHQUFHLGdDQUFnQyxDQUFDO1FBRXpFLE1BQU0sU0FBUyxHQUFHLElBQUkseUJBQVMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFHO1lBQ3ZDLE1BQU0sRUFBRSxLQUFLLENBQUMsTUFBTTtZQUNwQixvQkFBb0IsRUFBRSxLQUFLLENBQUMsb0JBQW9CLEtBQUssU0FBUyxJQUFJLEtBQUssQ0FBQyxvQkFBb0IsS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLG9CQUFvQjtZQUMxSSxlQUFlLEVBQUUsS0FBSyxDQUFDLGVBQWU7WUFDdEMsWUFBWSxFQUFFLEtBQUssQ0FBQyxZQUFZO1lBQ2hDLGNBQWMsRUFBRSxLQUFLLENBQUMsY0FBYyxLQUFLLFNBQVMsSUFBSSxLQUFLLENBQUMsY0FBYyxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsY0FBYztZQUNsSCxzQkFBc0IsRUFB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SSxDQUFDLHNFQUFzRTtrQkFDNUUsYUFBYSxDQUFDLENBQUM7U0FDeEI7UUFDRCxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUM1RCxNQUFNLENBQUMsSUFBSSxDQUFDLHNFQUFzRTtrQkFDNUUsWUFBWSxVQUFVLENBQUMsTUFBTSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDL0M7UUFFRCwyQkFBMkI7UUFDM0IsbUVBQW1FO1FBQ25FLG9CQUFvQjtRQUNwQixxRUFBcUU7UUFDckUsUUFBUTtRQUNSLElBQUk7UUFFSixJQUFJLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQ25CLE1BQU0sSUFBSSxLQUFLLENBQUMsbUNBQW1DLFVBQVUsSUFBSSxRQUFHLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFHLENBQUMsRUFBRSxDQUFDLENBQUM7U0FDOUY7SUFDTCxDQUFDO0NBQ0o7QUEzSUQsd0JBMklDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcm9zIGZyb20gJ0BhbGljbG91ZC9yb3MtY2RrLWNvcmUnO1xuaW1wb3J0IHsgUm9zQnVja2V0IH0gZnJvbSAnLi9vc3MuZ2VuZXJhdGVkJztcbi8vIEdlbmVyYXRlZCBmcm9tIHRoZSBBbGlDbG91ZCBST1MgUmVzb3VyY2UgU3BlY2lmaWNhdGlvblxuaW1wb3J0IHtFT0x9IGZyb20gXCJvc1wiO1xuXG4vLyBjb25zdCBvc3NDbGllbnQgPSByZXF1aXJlKCdhbGktb3NzJylcblxuXG4vKipcbiAqIEEgcmVmZXJlbmNlIHRvIGEgYnVja2V0IG91dHNpZGUgdGhpcyBzdGFja1xuICovXG5leHBvcnQgaW50ZXJmYWNlIEJ1Y2tldEF0dHJpYnV0ZXMge1xuXG4gICAgLyoqXG4gICAgICogVGhlIG5hbWUgb2YgdGhlIGJ1Y2tldC5cbiAgICAgKi9cbiAgICByZWFkb25seSBidWNrZXROYW1lPzogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGRvbWFpbiBuYW1lIG9mIHRoZSBidWNrZXQuXG4gICAgICpcbiAgICAgKiBAZGVmYXVsdCAtIEluZmVycmVkIGZyb20gYnVja2V0IG5hbWUgYW5kIHJlZ2lvblxuICAgICAqL1xuICAgIHJlYWRvbmx5IGJ1Y2tldERvbWFpbk5hbWU/OiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgd2Vic2l0ZSBVUkwgb2YgdGhlIGJ1Y2tldCAoaWYgc3RhdGljIHdlYiBob3N0aW5nIGlzIGVuYWJsZWQpLlxuICAgICAqXG4gICAgICogQGRlZmF1bHQgLSBJbmZlcnJlZCBmcm9tIGJ1Y2tldCBuYW1lIGFuZCByZWdpb25cbiAgICAgKi9cbiAgICByZWFkb25seSBidWNrZXRXZWJzaXRlVXJsPzogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGVuZHBvaW50IG9mIHRoZSBidWNrZXQuXG4gICAgICpcbiAgICAgKiBAZGVmYXVsdCAtIEluZmVycmVkIGZyb20gcmVnaW9uXG4gICAgICovXG4gICAgcmVhZG9ubHkgYnVja2V0RW5kcG9pbnQ/OiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBJZiB0aGlzIGJ1Y2tldCBoYXMgYmVlbiBjb25maWd1cmVkIGZvciBzdGF0aWMgd2Vic2l0ZSBob3N0aW5nLlxuICAgICAqXG4gICAgICogQGRlZmF1bHQgZmFsc2VcbiAgICAgKi9cbiAgICByZWFkb25seSBpc1dlYnNpdGU/OiBib29sZWFuO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHJlZ2lvbiB0aGlzIGV4aXN0aW5nIGJ1Y2tldCBpcyBpbi5cbiAgICAgKiBGZWF0dXJlcyB0aGF0IHJlcXVpcmUgdGhlIHJlZ2lvbiAoZS5nLiBgYnVja2V0V2Vic2l0ZVVybGApIHdvbid0IGZ1bGx5IHdvcmtcbiAgICAgKiBpZiB0aGUgcmVnaW9uIGNhbm5vdCBiZSBjb3JyZWN0bHkgaW5mZXJyZWQuXG4gICAgICpcbiAgICAgKiBAZGVmYXVsdCAtIGl0J3MgYXNzdW1lZCB0aGUgYnVja2V0IGlzIGluIHRoZSBzYW1lIHJlZ2lvbiBhcyB0aGUgc2NvcGUgaXQncyBiZWluZyBpbXBvcnRlZCBpbnRvXG4gICAgICovXG4gICAgcmVhZG9ubHkgcmVnaW9uPzogc3RyaW5nO1xufVxuXG5leHBvcnQgeyBSb3NCdWNrZXQgYXMgQnVja2V0UHJvcGVydHkgfTtcblxuLyoqXG4gKiBQcm9wZXJ0aWVzIGZvciBkZWZpbmluZyBhIGBCdWNrZXRgLlxuICogU2VlIGh0dHBzOi8vd3d3LmFsaWJhYmFjbG91ZC5jb20vaGVscC9yb3MvZGV2ZWxvcGVyLXJlZmVyZW5jZS9hbGl5dW4tb3NzLWJ1Y2tldFxuICovXG5leHBvcnQgaW50ZXJmYWNlIEJ1Y2tldFByb3BzIHtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGJ1Y2tldE5hbWU6IGJ1Y2tldCBuYW1lLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGJ1Y2tldE5hbWU6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGFjY2Vzc0NvbnRyb2w6IFRoZSBhY2Nlc3MgY29udHJvbCBsaXN0LlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGFjY2Vzc0NvbnRyb2w/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBjb3JzQ29uZmlndXJhdGlvbjogUnVsZXMgdGhhdCBkZWZpbmUgY3Jvc3Mtb3JpZ2luIHJlc291cmNlIHNoYXJpbmcgb2Ygb2JqZWN0cyBpbiB0aGlzIGJ1Y2tldC5cbiAgICAgKi9cbiAgICByZWFkb25seSBjb3JzQ29uZmlndXJhdGlvbj86IFJvc0J1Y2tldC5DT1JTQ29uZmlndXJhdGlvblByb3BlcnR5IHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgZGVsZXRpb25Gb3JjZTogV2hldGhlciBmb3JjZSBkZWxldGUgdGhlIHJlbGF0aXZlIG9iamVjdHMgaW4gdGhlIGJ1Y2tldC4gRGVmYXVsdCB2YWx1ZSBpcyBmYWxzZS5cbiAgICAgKi9cbiAgICByZWFkb25seSBkZWxldGlvbkZvcmNlPzogYm9vbGVhbiB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGVuYWJsZU9zc0hkZnNTZXJ2aWNlOiBXaGV0aGVyIGVuYWJsZSBPU1MtSERGUyBzZXJ2aWNlLiBcbiAgICAgKiAqKk5vdGUqKjogT25jZSBpdCdzIGVuYWJsZWQsIGl0IGNhbid0IGJlIGRpc2FibGVkIGFnYWluLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGVuYWJsZU9zc0hkZnNTZXJ2aWNlPzogYm9vbGVhbiB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGxpZmVjeWNsZUNvbmZpZ3VyYXRpb246IFJ1bGVzIHRoYXQgZGVmaW5lIGhvdyBvc3MgYnVja2V0IG1hbmFnZXMgb2JqZWN0cyBkdXJpbmcgdGhlaXIgbGlmZXRpbWUuXG4gICAgICovXG4gICAgcmVhZG9ubHkgbGlmZWN5Y2xlQ29uZmlndXJhdGlvbj86IFJvc0J1Y2tldC5MaWZlY3ljbGVDb25maWd1cmF0aW9uUHJvcGVydHkgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBsb2dnaW5nQ29uZmlndXJhdGlvbjogU2V0dGluZ3MgdGhhdCBkZWZpbmVzIHdoZXJlIGxvZ3MgYXJlIHN0b3JlZC5cbiAgICAgKi9cbiAgICByZWFkb25seSBsb2dnaW5nQ29uZmlndXJhdGlvbj86IFJvc0J1Y2tldC5Mb2dnaW5nQ29uZmlndXJhdGlvblByb3BlcnR5IHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgcG9saWN5OiBCdWNrZXQgcG9saWN5XG4gICAgICovXG4gICAgcmVhZG9ubHkgcG9saWN5PzogeyBba2V5OiBzdHJpbmddOiAoYW55IHwgcm9zLklSZXNvbHZhYmxlKSB9IHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgcmVkdW5kYW5jeVR5cGU6IFNwZWNpZmllcyB0aGUgZGF0YSBkaXNhc3RlciByZWNvdmVyeSB0eXBlIG9mIHRoZSBzdG9yYWdlIHNwYWNlLiBUaGUgdmFsdWUgcmFuZ2UgaXMgYXMgZm9sbG93czpcbiAgICAgKiBMUlMgKGRlZmF1bHQpOiBMb2NhbCByZWR1bmRhbnQgTFJTIHN0b3JlcyB5b3VyIGRhdGEgcmVkdW5kYW50bHkgb24gZGlmZmVyZW50IHN0b3JhZ2UgZGV2aWNlcyBpbiB0aGUgc2FtZSBhdmFpbGFiaWxpdHkgem9uZSwgYW5kIGNhbiBzdXBwb3J0IGRhdGEgbG9zcyBhbmQgbm9ybWFsIGFjY2VzcyBldmVuIHdoZW4gdHdvIHN0b3JhZ2UgZGV2aWNlcyBhcmUgZGFtYWdlZCBjb25jdXJyZW50bHkuXG4gICAgICogWlJTOiBJbnRyYS1jaXR5IHJlZHVuZGFudCBaUlMgYWRvcHRzIGEgZGF0YSByZWR1bmRhbmN5IHN0b3JhZ2UgbWVjaGFuaXNtIGluIG11bHRpcGxlIGF2YWlsYWJpbGl0eSB6b25lcyAoQVopLCBhbmQgc3RvcmVzIHVzZXIgZGF0YSByZWR1bmRhbnRseSBpbiBtdWx0aXBsZSBhdmFpbGFiaWxpdHkgem9uZXMgaW4gdGhlIHNhbWUgcmVnaW9uLiBXaGVuIGFuIGF2YWlsYWJpbGl0eSB6b25lIGlzIHVuYXZhaWxhYmxlLCBub3JtYWwgYWNjZXNzIHRvIGRhdGEgY2FuIHN0aWxsIGJlIGd1YXJhbnRlZWQuXG4gICAgICovXG4gICAgcmVhZG9ubHkgcmVkdW5kYW5jeVR5cGU/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSByZWZlcmVyQ29uZmlndXJhdGlvbjogdW5kZWZpbmVkXG4gICAgICovXG4gICAgcmVhZG9ubHkgcmVmZXJlckNvbmZpZ3VyYXRpb24/OiBSb3NCdWNrZXQuUmVmZXJlckNvbmZpZ3VyYXRpb25Qcm9wZXJ0eSB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHJlc291cmNlR3JvdXBJZDogVGhlIHJlc291cmNlIGdyb3VwIGlkLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHJlc291cmNlR3JvdXBJZD86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHNlcnZlclNpZGVFbmNyeXB0aW9uQ29uZmlndXJhdGlvbjogU3BlY2lmaWVzIHRoZSBidWNrZXQgdXNlZCB0byBzdG9yZSB0aGUgc2VydmVyLXNpZGUgZW5jcnlwdGlvbiBydWxlLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHNlcnZlclNpZGVFbmNyeXB0aW9uQ29uZmlndXJhdGlvbj86IFJvc0J1Y2tldC5TZXJ2ZXJTaWRlRW5jcnlwdGlvbkNvbmZpZ3VyYXRpb25Qcm9wZXJ0eSB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHN0b3JhZ2VDbGFzczogU3BlY2lmaWVzIHRoZSBzdG9yYWdlIGNsYXNzIG9mIHRoZSBidWNrZXQuIERlZmF1bHQgaXMgXCJTdGFuZGFyZFwiLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHN0b3JhZ2VDbGFzcz86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHRhZ3M6IEJ1Y2tldCB0YWdzIGluIGstdiBwYWlycyBmb3JtYXQuXG4gICAgICovXG4gICAgcmVhZG9ubHkgdGFncz86IHsgW2tleTogc3RyaW5nXTogKGFueSkgfTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHZlcnNpb25pbmdDb25maWd1cmF0aW9uOiBBIHN0YXRlIG9mIHZlcnNpb25pbmdcbiAgICAgKi9cbiAgICByZWFkb25seSB2ZXJzaW9uaW5nQ29uZmlndXJhdGlvbj86IFJvc0J1Y2tldC5WZXJzaW9uaW5nQ29uZmlndXJhdGlvblByb3BlcnR5IHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgd2Vic2l0ZUNvbmZpZ3VyYXRpb25WMjogV2Vic2l0ZSBjb25maWd1cmF0aW9uLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHdlYnNpdGVDb25maWd1cmF0aW9uVjI/OiBSb3NCdWNrZXQuV2Vic2l0ZUNvbmZpZ3VyYXRpb25WMlByb3BlcnR5IHwgcm9zLklSZXNvbHZhYmxlO1xufVxuXG4vKipcbiAqIFRoaXMgY2xhc3MgZW5jYXBzdWxhdGVzIGFuZCBleHRlbmRzIHRoZSBST1MgcmVzb3VyY2UgdHlwZSBgQUxJWVVOOjpPU1M6OkJ1Y2tldGAsIHdoaWNoIGlzIHVzZWQgdG8gY3JlYXRlIGFuIE9iamVjdCBTdG9yYWdlIFNlcnZpY2UgKE9TUykgYnVja2V0LlxuICogQE5vdGUgVGhpcyBjbGFzcyBtYXkgaGF2ZSBzb21lIG5ldyBmdW5jdGlvbnMgdG8gZmFjaWxpdGF0ZSBkZXZlbG9wbWVudCwgc28gaXQgaXMgcmVjb21tZW5kZWQgdG8gdXNlIHRoaXMgY2xhc3MgaW5zdGVhZCBvZiBgUm9zQnVja2V0YGZvciBhIG1vcmUgY29udmVuaWVudCBkZXZlbG9wbWVudCBleHBlcmllbmNlLlxuICogU2VlIGh0dHBzOi8vd3d3LmFsaWJhYmFjbG91ZC5jb20vaGVscC9yb3MvZGV2ZWxvcGVyLXJlZmVyZW5jZS9hbGl5dW4tb3NzLWJ1Y2tldFxuICovXG5leHBvcnQgY2xhc3MgQnVja2V0IGV4dGVuZHMgcm9zLlJlc291cmNlIHtcbiAgICBwcm90ZWN0ZWQgc2NvcGU6IHJvcy5Db25zdHJ1Y3Q7XG4gICAgcHJvdGVjdGVkIGlkOiBzdHJpbmc7XG4gICAgcHJvdGVjdGVkIHByb3BzOiBCdWNrZXRQcm9wcztcbiAgICBwcm90ZWN0ZWQgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6IGJvb2xlYW47XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgRG9tYWluTmFtZTogVGhlIHB1YmxpYyBETlMgbmFtZSBvZiB0aGUgc3BlY2lmaWVkIGJ1Y2tldC5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckRvbWFpbk5hbWU6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBJbnRlcm5hbERvbWFpbk5hbWU6IFRoZSBpbnRlcm5hbCBETlMgbmFtZSBvZiB0aGUgc3BlY2lmaWVkIGJ1Y2tldC5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckludGVybmFsRG9tYWluTmFtZTogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIE5hbWU6IFRoZSBuYW1lIG9mIEJ1Y2tldFxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyTmFtZTogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUGFyYW0gc2NvcGUgLSBzY29wZSBpbiB3aGljaCB0aGlzIHJlc291cmNlIGlzIGRlZmluZWRcbiAgICAgKiBQYXJhbSBpZCAgICAtIHNjb3BlZCBpZCBvZiB0aGUgcmVzb3VyY2VcbiAgICAgKiBQYXJhbSBwcm9wcyAtIHJlc291cmNlIHByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihzY29wZTogcm9zLkNvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IEJ1Y2tldFByb3BzLCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDpib29sZWFuID0gdHJ1ZSkge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQpO1xuICAgICAgICB0aGlzLnNjb3BlID0gc2NvcGU7XG4gICAgICAgIHRoaXMuaWQgPSBpZDtcbiAgICAgICAgdGhpcy5wcm9wcyA9IHByb3BzO1xuICAgICAgICB0aGlzLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ID0gZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ7XG5cbiAgICAgICAgY29uc3Qgcm9zQnVja2V0ID0gbmV3IFJvc0J1Y2tldCh0aGlzLCBpZCwgIHtcbiAgICAgICAgICAgIHBvbGljeTogcHJvcHMucG9saWN5LFxuICAgICAgICAgICAgZW5hYmxlT3NzSGRmc1NlcnZpY2U6IHByb3BzLmVuYWJsZU9zc0hkZnNTZXJ2aWNlID09PSB1bmRlZmluZWQgfHwgcHJvcHMuZW5hYmxlT3NzSGRmc1NlcnZpY2UgPT09IG51bGwgPyBmYWxzZSA6IHByb3BzLmVuYWJsZU9zc0hkZnNTZXJ2aWNlLFxuICAgICAgICAgICAgcmVzb3VyY2VHcm91cElkOiBwcm9wcy5yZXNvdXJjZUdyb3VwSWQsXG4gICAgICAgICAgICBzdG9yYWdlQ2xhc3M6IHByb3BzLnN0b3JhZ2VDbGFzcyxcbiAgICAgICAgICAgIHJlZHVuZGFuY3lUeXBlOiBwcm9wcy5yZWR1bmRhbmN5VHlwZSA9PT0gdW5kZWZpbmVkIHx8IHByb3BzLnJlZHVuZGFuY3lUeXBlID09PSBudWxsID8gJ0xSUycgOiBwcm9wcy5yZWR1bmRhbmN5VHlwZSxcbiAgICAgICAgICAgIGxpZmVjeWNsZUNvbmZpZ3VyYXRpb246IHByb3BzLmxpZmVjeWNsZUNvbmZpZ3VyYXRpb24sXG4gICAgICAgICAgICBzZXJ2ZXJTaWRlRW5jcnlwdGlvbkNvbmZpZ3VyYXRpb246IHByb3BzLnNlcnZlclNpZGVFbmNyeXB0aW9uQ29uZmlndXJhdGlvbixcbiAgICAgICAgICAgIHZlcnNpb25pbmdDb25maWd1cmF0aW9uOiBwcm9wcy52ZXJzaW9uaW5nQ29uZmlndXJhdGlvbixcbiAgICAgICAgICAgIGFjY2Vzc0NvbnRyb2w6IHByb3BzLmFjY2Vzc0NvbnRyb2wgPT09IHVuZGVmaW5lZCB8fCBwcm9wcy5hY2Nlc3NDb250cm9sID09PSBudWxsID8gJ3ByaXZhdGUnIDogcHJvcHMuYWNjZXNzQ29udHJvbCxcbiAgICAgICAgICAgIGNvcnNDb25maWd1cmF0aW9uOiBwcm9wcy5jb3JzQ29uZmlndXJhdGlvbixcbiAgICAgICAgICAgIGJ1Y2tldE5hbWU6IHByb3BzLmJ1Y2tldE5hbWUsXG4gICAgICAgICAgICBkZWxldGlvbkZvcmNlOiBwcm9wcy5kZWxldGlvbkZvcmNlID09PSB1bmRlZmluZWQgfHwgcHJvcHMuZGVsZXRpb25Gb3JjZSA9PT0gbnVsbCA/IGZhbHNlIDogcHJvcHMuZGVsZXRpb25Gb3JjZSxcbiAgICAgICAgICAgIGxvZ2dpbmdDb25maWd1cmF0aW9uOiBwcm9wcy5sb2dnaW5nQ29uZmlndXJhdGlvbixcbiAgICAgICAgICAgIHdlYnNpdGVDb25maWd1cmF0aW9uVjI6IHByb3BzLndlYnNpdGVDb25maWd1cmF0aW9uVjIsXG4gICAgICAgICAgICByZWZlcmVyQ29uZmlndXJhdGlvbjogcHJvcHMucmVmZXJlckNvbmZpZ3VyYXRpb24sXG4gICAgICAgICAgICB0YWdzOiBwcm9wcy50YWdzLFxuICAgICAgICB9LCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCAmJiB0aGlzLnN0YWNrLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50KTtcbiAgICAgICAgdGhpcy5yZXNvdXJjZSA9IHJvc0J1Y2tldDtcbiAgICAgICAgdGhpcy5hdHRyRG9tYWluTmFtZSA9IHJvc0J1Y2tldC5hdHRyRG9tYWluTmFtZTtcbiAgICAgICAgdGhpcy5hdHRySW50ZXJuYWxEb21haW5OYW1lID0gcm9zQnVja2V0LmF0dHJJbnRlcm5hbERvbWFpbk5hbWU7XG4gICAgICAgIHRoaXMuYXR0ck5hbWUgPSByb3NCdWNrZXQuYXR0ck5hbWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2sgd2hldGhlciB0aGUgYnVja2V0IGV4aXN0cy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBwaHlzaWNhbE5hbWUgbmFtZSBvZiB0aGUgYnVja2V0LlxuICAgICAqL1xuICAgIC8vIHB1YmxpYyBzdGF0aWMgYXN5bmMgY2hlY2tCdWNrZXRFeGlzdHMocGh5c2ljYWxOYW1lOiBzdHJpbmcpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICAvLyAgICAgY29uc3QgY29uZmlnID0gYXdhaXQgQ2RrVG9vbGtpdC5nZXRDb25maWcoKTtcbiAgICAvLyAgICAgbGV0IGNsaWVudF9wYXJhbXM7XG4gICAgLy8gICAgIGlmICghY29uZmlnLmFjY2Vzc0tleUlkIHx8ICFjb25maWcuYWNjZXNzS2V5U2VjcmV0KSB7XG4gICAgLy8gICAgICAgICBlcnJvcihcIlBsZWFzZSB1c2UgJ3Jvcy1jZGsgY29uZmlnICgtZyknIG9yIHNldCBlbnZpcm9ubWVudCB0byBzZXQgeW91ciBhY2NvdW50IGNvbmZpZ3VyYXRpb24gZmlyc3RseSFcIik7XG4gICAgLy8gICAgICAgICBleGl0KDEpO1xuICAgIC8vICAgICB9IGVsc2UgaWYgKCFjb25maWcuc2VjdXJpdHlUb2tlbikge1xuICAgIC8vICAgICAgICAgY2xpZW50X3BhcmFtcyA9IHtcbiAgICAvLyAgICAgICAgICAgICByZWdpb246IGNvbmZpZy5yZWdpb25JZCxcbiAgICAvLyAgICAgICAgICAgICBhY2Nlc3NLZXlJZDogY29uZmlnLmFjY2Vzc0tleUlkLFxuICAgIC8vICAgICAgICAgICAgIGFjY2Vzc0tleVNlY3JldDogY29uZmlnLmFjY2Vzc0tleVNlY3JldFxuICAgIC8vICAgICAgICAgfTtcbiAgICAvLyAgICAgfSBlbHNlIHtcbiAgICAvLyAgICAgICAgIGNsaWVudF9wYXJhbXMgPSB7XG4gICAgLy8gICAgICAgICAgICAgcmVnaW9uOiBjb25maWcucmVnaW9uSWQsXG4gICAgLy8gICAgICAgICAgICAgYWNjZXNzS2V5SWQ6IGNvbmZpZy5hY2Nlc3NLZXlJZCxcbiAgICAvLyAgICAgICAgICAgICBhY2Nlc3NLZXlTZWNyZXQ6IGNvbmZpZy5hY2Nlc3NLZXlTZWNyZXQsXG4gICAgLy8gICAgICAgICAgICAgc2VjdXJpdHlUb2tlbjogY29uZmlnLnNlY3VyaXR5VG9rZW5cbiAgICAvLyAgICAgICAgIH07XG4gICAgLy8gICAgIH1cbiAgICAvLyAgICAgY29uc3QgY2xpZW50ID0gbmV3IG9zc0NsaWVudChjbGllbnRfcGFyYW1zKTtcbiAgICAvLyAgICAgdHJ5IHtcbiAgICAvLyAgICAgICAgIGF3YWl0IGNsaWVudC5nZXRCdWNrZXRJbmZvKHBoeXNpY2FsTmFtZSk7XG4gICAgLy8gICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgLy8gICAgICAgICBpZiAoZXJyb3IubmFtZSA9PT0gJ05vU3VjaEJ1Y2tldEVycm9yJyB8fCBlcnJvci5uYW1lID09PSAnQWNjZXNzRGVuaWVkJykge1xuICAgIC8vICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgIC8vICAgICAgICAgfSBlbHNlIHtcbiAgICAvLyAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAvLyAgICAgICAgIH1cbiAgICAvLyAgICAgfVxuICAgIC8vICAgICByZXR1cm4gZmFsc2U7XG4gICAgLy8gfVxuXG4gICAgLyoqXG4gICAgICogVGhyb3duIGFuIGV4Y2VwdGlvbiBpZiB0aGUgZ2l2ZW4gYnVja2V0IG5hbWUgaXMgbm90IHZhbGlkLlxuICAgICAqXG4gICAgICogQHBhcmFtIHBoeXNpY2FsTmFtZSBuYW1lIG9mIHRoZSBidWNrZXQuXG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyBhc3luYyB2YWxpZGF0ZUJ1Y2tldE5hbWUocGh5c2ljYWxOYW1lOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgY29uc3QgYnVja2V0TmFtZSA9IHBoeXNpY2FsTmFtZTtcbiAgICAgICAgaWYgKCFidWNrZXROYW1lIHx8IHJvcy5Ub2tlbi5pc1VucmVzb2x2ZWQoYnVja2V0TmFtZSkpIHtcbiAgICAgICAgICAgIC8vIHRoZSBuYW1lIGlzIGEgbGF0ZS1ib3VuZCB2YWx1ZSwgbm90IGEgZGVmaW5lZCBzdHJpbmcsXG4gICAgICAgICAgICAvLyBzbyBza2lwIHZhbGlkYXRpb25cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGVycm9yczogc3RyaW5nW10gPSBbXTtcblxuICAgICAgICAvLyBSdWxlcyBjb2RpZmllZCBmcm9tIGh0dHBzOi8vd3d3LmFsaWJhYmFjbG91ZC5jb20vaGVscC9vc3MvdXNlci1ndWlkZS9idWNrZXQtbmFtaW5nLWNvbnZlbnRpb25zXG4gICAgICAgIGlmIChidWNrZXROYW1lLmxlbmd0aCA8IDMgfHwgYnVja2V0TmFtZS5sZW5ndGggPiA2Mykge1xuICAgICAgICAgICAgZXJyb3JzLnB1c2goJ0J1Y2tldCBuYW1lIG11c3QgYmUgYXQgbGVhc3QgMyBhbmQgbm8gbW9yZSB0aGFuIDYzIGNoYXJhY3RlcnMnKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjaGFyc2V0TWF0Y2ggPSBidWNrZXROYW1lLm1hdGNoKC9bXmEtejAtOS1dLyk7XG4gICAgICAgIGlmIChjaGFyc2V0TWF0Y2gpIHtcbiAgICAgICAgICAgIGVycm9ycy5wdXNoKCdCdWNrZXQgbmFtZSBtdXN0IG9ubHkgY29udGFpbiBsb3dlcmNhc2UgY2hhcmFjdGVycyBhbmQgdGhlIHN5bWJvbHMgYW5kIGRhc2ggKC0pICdcbiAgICAgICAgICAgICAgICArIGAob2Zmc2V0OiAke2NoYXJzZXRNYXRjaC5pbmRleH0pYCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCEvW2EtejAtOV0vLnRlc3QoYnVja2V0TmFtZS5jaGFyQXQoMCkpKSB7XG4gICAgICAgICAgICBlcnJvcnMucHVzaCgnQnVja2V0IG5hbWUgbXVzdCBzdGFydCBhbmQgZW5kIHdpdGggYSBsb3dlcmNhc2UgY2hhcmFjdGVyIG9yIG51bWJlciAnXG4gICAgICAgICAgICAgICAgKyAnKG9mZnNldDogMCknKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIS9bYS16MC05XS8udGVzdChidWNrZXROYW1lLmNoYXJBdChidWNrZXROYW1lLmxlbmd0aCAtIDEpKSkge1xuICAgICAgICAgICAgZXJyb3JzLnB1c2goJ0J1Y2tldCBuYW1lIG11c3Qgc3RhcnQgYW5kIGVuZCB3aXRoIGEgbG93ZXJjYXNlIGNoYXJhY3RlciBvciBudW1iZXIgJ1xuICAgICAgICAgICAgICAgICsgYChvZmZzZXQ6ICR7YnVja2V0TmFtZS5sZW5ndGggLSAxfSlgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGlmIChjaGVja0J1Y2tldEV4aXN0cykge1xuICAgICAgICAvLyAgICAgY29uc3QgZXhpc3RzID0gYXdhaXQgQnVja2V0LmNoZWNrQnVja2V0RXhpc3RzKHBoeXNpY2FsTmFtZSk7XG4gICAgICAgIC8vICAgICBpZiAoZXhpc3RzKSB7XG4gICAgICAgIC8vICAgICAgICAgZXJyb3JzLnB1c2goYEJ1Y2tldCBuYW1lICR7YnVja2V0TmFtZX0gaXMgYWxyZWFkeSB0YWtlbmApO1xuICAgICAgICAvLyAgICAgfVxuICAgICAgICAvLyB9XG5cbiAgICAgICAgaWYgKGVycm9ycy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgT1NTIGJ1Y2tldCBuYW1lICh2YWx1ZTogJHtidWNrZXROYW1lfSkke0VPTH0ke2Vycm9ycy5qb2luKEVPTCl9YCk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iXX0=