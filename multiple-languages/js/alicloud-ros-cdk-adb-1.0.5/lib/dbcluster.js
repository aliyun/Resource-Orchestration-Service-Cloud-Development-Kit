"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DBCluster = exports.DBClusterProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const adb_generated_1 = require("./adb.generated");
Object.defineProperty(exports, "DBClusterProperty", { enumerable: true, get: function () { return adb_generated_1.RosDBCluster; } });
/**
 * A ROS resource type:  `ALIYUN::ADB::DBCluster`
 */
class DBCluster extends ros.Resource {
    /**
     * Create a new `ALIYUN::ADB::DBCluster`.
     *
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosDBCluster = new adb_generated_1.RosDBCluster(this, id, {
            dbNodeStorage: props.dbNodeStorage,
            periodType: props.periodType,
            dbClusterCategory: props.dbClusterCategory,
            zoneId: props.zoneId,
            resourceGroupId: props.resourceGroupId,
            vpcId: props.vpcId,
            vSwitchId: props.vSwitchId,
            mode: props.mode,
            dbClusterDescription: props.dbClusterDescription,
            computeResource: props.computeResource,
            period: props.period,
            payType: props.payType,
            elasticIoResource: props.elasticIoResource,
            dbClusterVersion: props.dbClusterVersion === undefined || props.dbClusterVersion === null ? '3.0' : props.dbClusterVersion,
            dbNodeGroupCount: props.dbNodeGroupCount,
            executorCount: props.executorCount,
            dbClusterClass: props.dbClusterClass,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosDBCluster;
        this.attrConnectionString = rosDBCluster.attrConnectionString;
        this.attrDbClusterId = rosDBCluster.attrDbClusterId;
        this.attrOrderId = rosDBCluster.attrOrderId;
    }
}
exports.DBCluster = DBCluster;
//# sourceMappingURL=data:application/json;base64,