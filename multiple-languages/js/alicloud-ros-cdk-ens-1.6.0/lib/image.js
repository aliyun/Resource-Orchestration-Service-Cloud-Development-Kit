"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Image = exports.ImageProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ens_generated_1 = require("./ens.generated");
Object.defineProperty(exports, "ImageProperty", { enumerable: true, get: function () { return ens_generated_1.RosImage; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::ENS::Image`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosImage`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-ens-image
 */
class Image extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosImage = new ens_generated_1.RosImage(this, id, {
            imageName: props.imageName,
            instanceId: props.instanceId,
            deleteAfterImageUpload: props.deleteAfterImageUpload,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosImage;
        this.attrArchitecture = rosImage.attrArchitecture;
        this.attrComputeType = rosImage.attrComputeType;
        this.attrCreateTime = rosImage.attrCreateTime;
        this.attrImageId = rosImage.attrImageId;
        this.attrImageName = rosImage.attrImageName;
        this.attrImageOwnerAlias = rosImage.attrImageOwnerAlias;
        this.attrImageSize = rosImage.attrImageSize;
        this.attrInstanceId = rosImage.attrInstanceId;
        this.attrOsVersion = rosImage.attrOsVersion;
        this.attrPlatform = rosImage.attrPlatform;
        this.attrSnapshotId = rosImage.attrSnapshotId;
    }
}
exports.Image = Image;
//# sourceMappingURL=data:application/json;base64,