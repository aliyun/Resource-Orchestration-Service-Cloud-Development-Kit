"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Listener = exports.ListenerProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const nlb_generated_1 = require("./nlb.generated");
Object.defineProperty(exports, "ListenerProperty", { enumerable: true, get: function () { return nlb_generated_1.RosListener; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::NLB::Listener`, which is used to create a listener.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosListener`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-nlb-listener
 */
class Listener extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosListener = new nlb_generated_1.RosListener(this, id, {
            caEnabled: props.caEnabled,
            listenerPort: props.listenerPort,
            startPort: props.startPort,
            cps: props.cps,
            serverGroupId: props.serverGroupId,
            idleTimeout: props.idleTimeout,
            loadBalancerId: props.loadBalancerId,
            mss: props.mss,
            listenerProtocol: props.listenerProtocol,
            securityPolicyId: props.securityPolicyId,
            listenerDescription: props.listenerDescription,
            alpnPolicy: props.alpnPolicy,
            caCertificateIds: props.caCertificateIds,
            endPort: props.endPort,
            proxyProtocolEnabled: props.proxyProtocolEnabled,
            certificateIds: props.certificateIds,
            secSensorEnabled: props.secSensorEnabled,
            enable: props.enable,
            tags: props.tags,
            alpnEnabled: props.alpnEnabled,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosListener;
        this.attrListenerId = rosListener.attrListenerId;
        this.attrListenerPort = rosListener.attrListenerPort;
    }
}
exports.Listener = Listener;
//# sourceMappingURL=data:application/json;base64,