"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KeywordLib = exports.KeywordLibProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const aligreen_generated_1 = require("./aligreen.generated");
Object.defineProperty(exports, "KeywordLibProperty", { enumerable: true, get: function () { return aligreen_generated_1.RosKeywordLib; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::Aligreen::KeywordLib`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosKeywordLib`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-aligreen-keywordlib
 */
class KeywordLib extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosKeywordLib = new aligreen_generated_1.RosKeywordLib(this, id, {
            matchMode: props.matchMode,
            category: props.category,
            language: props.language,
            bizTypes: props.bizTypes,
            enable: props.enable,
            resourceType: props.resourceType,
            libType: props.libType,
            keywordLibName: props.keywordLibName,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosKeywordLib;
        this.attrBizTypes = rosKeywordLib.attrBizTypes;
        this.attrCategory = rosKeywordLib.attrCategory;
        this.attrEnable = rosKeywordLib.attrEnable;
        this.attrKeywordLibId = rosKeywordLib.attrKeywordLibId;
        this.attrKeywordLibName = rosKeywordLib.attrKeywordLibName;
        this.attrLanguage = rosKeywordLib.attrLanguage;
        this.attrLibType = rosKeywordLib.attrLibType;
        this.attrMatchMode = rosKeywordLib.attrMatchMode;
        this.attrResourceType = rosKeywordLib.attrResourceType;
    }
}
exports.KeywordLib = KeywordLib;
//# sourceMappingURL=data:application/json;base64,