"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Callback = exports.CallbackProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const aligreen_generated_1 = require("./aligreen.generated");
Object.defineProperty(exports, "CallbackProperty", { enumerable: true, get: function () { return aligreen_generated_1.RosCallback; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::Aligreen::Callback`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosCallback`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-aligreen-callback
 */
class Callback extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosCallback = new aligreen_generated_1.RosCallback(this, id, {
            callbackUrl: props.callbackUrl,
            cryptType: props.cryptType,
            callbackName: props.callbackName,
            callbackTypes: props.callbackTypes,
            callbackSuggestions: props.callbackSuggestions,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosCallback;
        this.attrCallbackId = rosCallback.attrCallbackId;
        this.attrCallbackName = rosCallback.attrCallbackName;
        this.attrCallbackSuggestions = rosCallback.attrCallbackSuggestions;
        this.attrCallbackTypes = rosCallback.attrCallbackTypes;
        this.attrCallbackUrl = rosCallback.attrCallbackUrl;
        this.attrCryptType = rosCallback.attrCryptType;
    }
}
exports.Callback = Callback;
//# sourceMappingURL=data:application/json;base64,