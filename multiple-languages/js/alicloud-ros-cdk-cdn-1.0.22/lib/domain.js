"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Domain = exports.DomainProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const cdn_generated_1 = require("./cdn.generated");
Object.defineProperty(exports, "DomainProperty", { enumerable: true, get: function () { return cdn_generated_1.RosDomain; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::CDN::Domain`, which is used to add a domain name to Alibaba Cloud CDN (CDN).
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosDomain`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-cdn-domain
 */
class Domain extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosDomain = new cdn_generated_1.RosDomain(this, id, {
            checkUrl: props.checkUrl,
            resourceGroupId: props.resourceGroupId,
            scope: props.scope,
            domainName: props.domainName,
            originServers: props.originServers,
            cdnType: props.cdnType,
            topLevelDomain: props.topLevelDomain,
            sources: props.sources,
            tags: props.tags,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosDomain;
        this.attrCname = rosDomain.attrCname;
        this.attrDomainName = rosDomain.attrDomainName;
    }
}
exports.Domain = Domain;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG9tYWluLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZG9tYWluLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDhDQUE4QztBQUM5QyxtREFBNEM7QUFFdEIsK0ZBRmIseUJBQVMsT0FFa0I7QUFzRHBDOzs7O0dBSUc7QUFDSCxNQUFhLE1BQU8sU0FBUSxHQUFHLENBQUMsUUFBUTtJQVlwQzs7OztPQUlHO0lBQ0gsWUFBWSxLQUFvQixFQUFFLEVBQVUsRUFBRSxLQUFrQixFQUFFLG1DQUEyQyxJQUFJO1FBQzdHLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFakIsTUFBTSxTQUFTLEdBQUcsSUFBSSx5QkFBUyxDQUFDLElBQUksRUFBRSxFQUFFLEVBQUc7WUFDdkMsUUFBUSxFQUFFLEtBQUssQ0FBQyxRQUFRO1lBQ3hCLGVBQWUsRUFBRSxLQUFLLENBQUMsZUFBZTtZQUN0QyxLQUFLLEVBQUUsS0FBSyxDQUFDLEtBQUs7WUFDbEIsVUFBVSxFQUFFLEtBQUssQ0FBQyxVQUFVO1lBQzVCLGFBQWEsRUFBRSxLQUFLLENBQUMsYUFBYTtZQUNsQyxPQUFPLEVBQUUsS0FBSyxDQUFDLE9BQU87WUFDdEIsY0FBYyxFQUFFLEtBQUssQ0FBQyxjQUFjO1lBQ3BDLE9BQU8sRUFBRSxLQUFLLENBQUMsT0FBTztZQUN0QixJQUFJLEVBQUUsS0FBSyxDQUFDLElBQUk7U0FDbkIsRUFBRSxnQ0FBZ0MsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7UUFDcEYsSUFBSSxDQUFDLFFBQVEsR0FBRyxTQUFTLENBQUM7UUFDMUIsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUMsU0FBUyxDQUFDO1FBQ3JDLElBQUksQ0FBQyxjQUFjLEdBQUcsU0FBUyxDQUFDLGNBQWMsQ0FBQztJQUNuRCxDQUFDO0NBQ0o7QUFuQ0Qsd0JBbUNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcm9zIGZyb20gJ0BhbGljbG91ZC9yb3MtY2RrLWNvcmUnO1xuaW1wb3J0IHsgUm9zRG9tYWluIH0gZnJvbSAnLi9jZG4uZ2VuZXJhdGVkJztcbi8vIEdlbmVyYXRlZCBmcm9tIHRoZSBBbGlDbG91ZCBST1MgUmVzb3VyY2UgU3BlY2lmaWNhdGlvblxuZXhwb3J0IHsgUm9zRG9tYWluIGFzIERvbWFpblByb3BlcnR5IH07XG5cbi8qKlxuICogUHJvcGVydGllcyBmb3IgZGVmaW5pbmcgYSBgRG9tYWluYC5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvYWxpeXVuLWNkbi1kb21haW5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBEb21haW5Qcm9wcyB7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBjZG5UeXBlOiBUaGUgYnVzaW5lc3MgdHlwZS4gVmFsaWQgdmFsdWVzOiB3ZWIsIGRvd25sb2FkLCB2aWRlbywgbGl2ZXN0cmVhbSwgYW5kIGh0dHBzZGVsaXZlcnkuIHdlYjogYWNjZWxlcmF0aW9uIG9mIGltYWdlcyBhbmQgc21hbGwgZmlsZXMgZG93bmxvYWQuIGRvd25sb2FkOiBhY2NlbGVyYXRpb24gb2YgbGFyZ2UgZmlsZSBkb3dubG9hZHMuIHZpZGVvOiBsaXZlIHN0cmVhbWluZyBhY2NlbGVyYXRpb24uIGh0dHBzZGVsaXZlcnk6IFNTTCBhY2NlbGVyYXRpb24gZm9yIEhUVFBTLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGNkblR5cGU6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGRvbWFpbk5hbWU6IFRoZSBDRE4gZG9tYWluIG5hbWUuIFdpbGRjYXJkIGRvbWFpbiBuYW1lcyB0aGF0IHN0YXJ0IHdpdGggcGVyaW9kcyAoLikgYXJlIHN1cHBvcnRlZC4gRm9yIGV4YW1wbGUsIC5hLmNvbS5cbiAgICAgKi9cbiAgICByZWFkb25seSBkb21haW5OYW1lOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBjaGVja1VybDogVGhlIHZhbGlkYXRpb24gb2YgdGhlIG9yaWdpbi5cbiAgICAgKi9cbiAgICByZWFkb25seSBjaGVja1VybD86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IG9yaWdpblNlcnZlcnM6IFRoZSBsaXN0IG9mIG9yaWdpbiBVUkxzLiBJdCBoYXMgdGhlIHNhbWUgZnVuY3Rpb24gYXMgU291cmNlcywgYnV0IGhhcyBhIGhpZ2hlciBwcmlvcml0eSB0aGFuIGl0LlxuICAgICAqL1xuICAgIHJlYWRvbmx5IG9yaWdpblNlcnZlcnM/OiBBcnJheTxSb3NEb21haW4uT3JpZ2luU2VydmVyc1Byb3BlcnR5IHwgcm9zLklSZXNvbHZhYmxlPiB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHJlc291cmNlR3JvdXBJZDogVGhlIElEIG9mIHRoZSByZXNvdXJjZSBncm91cC4gSWYgdGhpcyBpcyBsZWZ0IGJsYW5rLCB0aGUgc3lzdGVtIGF1dG9tYXRpY2FsbHkgZmlsbHMgaW4gdGhlIElEIG9mIHRoZSBkZWZhdWx0IHJlc291cmNlIGdyb3VwLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHJlc291cmNlR3JvdXBJZD86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHNjb3BlOiBWYWxpZCB2YWx1ZXM6IGRvbWVzdGljLCBvdmVyc2VhcywgYW5kIGdsb2JhbC4gRGVmYXVsdCB2YWx1ZTogZG9tZXN0aWMuIFRoZSBzZXR0aW5nIGlzIHN1cHBvcnRlZCBmb3IgdXNlcnMgb3V0c2lkZSBtYWlubGFuZCBDaGluYSwgdXNlcnMgaW4gbWFpbmxhbmQgQ2hpbmEgb2YgbGV2ZWwgMyBvciBhYm92ZS5cbiAgICAgKi9cbiAgICByZWFkb25seSBzY29wZT86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHNvdXJjZXM6IFRoZSBsaXN0IG9mIG9yaWdpbiBVUkxzLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHNvdXJjZXM/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSB0YWdzOiBUYWdzIHRvIGF0dGFjaCB0byBpbnN0YW5jZS4gTWF4IHN1cHBvcnQgMjAgdGFncyB0byBhZGQgZHVyaW5nIGNyZWF0ZSBpbnN0YW5jZS4gRWFjaCB0YWcgd2l0aCB0d28gcHJvcGVydGllcyBLZXkgYW5kIFZhbHVlLCBhbmQgS2V5IGlzIHJlcXVpcmVkLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHRhZ3M/OiBSb3NEb21haW4uVGFnc1Byb3BlcnR5W107XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSB0b3BMZXZlbERvbWFpbjogVGhlIHRvcC1sZXZlbCBkb21haW4sIHdoaWNoIGNhbiBvbmx5IGJlIGNvbmZpZ3VyZWQgYnkgdXNlcnMgb24gdGhlIHdoaXRlbGlzdC5cbiAgICAgKi9cbiAgICByZWFkb25seSB0b3BMZXZlbERvbWFpbj86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcbn1cblxuLyoqXG4gKiBUaGlzIGNsYXNzIGVuY2Fwc3VsYXRlcyBhbmQgZXh0ZW5kcyB0aGUgUk9TIHJlc291cmNlIHR5cGUgYEFMSVlVTjo6Q0ROOjpEb21haW5gLCB3aGljaCBpcyB1c2VkIHRvIGFkZCBhIGRvbWFpbiBuYW1lIHRvIEFsaWJhYmEgQ2xvdWQgQ0ROIChDRE4pLlxuICogQE5vdGUgVGhpcyBjbGFzcyBtYXkgaGF2ZSBzb21lIG5ldyBmdW5jdGlvbnMgdG8gZmFjaWxpdGF0ZSBkZXZlbG9wbWVudCwgc28gaXQgaXMgcmVjb21tZW5kZWQgdG8gdXNlIHRoaXMgY2xhc3MgaW5zdGVhZCBvZiBgUm9zRG9tYWluYGZvciBhIG1vcmUgY29udmVuaWVudCBkZXZlbG9wbWVudCBleHBlcmllbmNlLlxuICogU2VlIGh0dHBzOi8vd3d3LmFsaWJhYmFjbG91ZC5jb20vaGVscC9yb3MvZGV2ZWxvcGVyLXJlZmVyZW5jZS9hbGl5dW4tY2RuLWRvbWFpblxuICovXG5leHBvcnQgY2xhc3MgRG9tYWluIGV4dGVuZHMgcm9zLlJlc291cmNlIHtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBDbmFtZTogVGhlIENOQU1FIGdlbmVyYXRlZCBmb3IgdGhlIENETiBkb21haW4uWW91IG11c3QgYWRkIGEgQ05BTUUgcmVjb3JkIHdpdGggeW91ciBETlMgcHJvdmlkZXIgdG8gbWFwIHRoZSBDRE4gZG9tYWluIG5hbWUgdG8gdGhlIENOQU1FLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyQ25hbWU6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBEb21haW5OYW1lOiBUaGUgQ0ROIGRvbWFpbiBuYW1lLiBXaWxkY2FyZCBkb21haW4gbmFtZXMgdGhhdCBzdGFydCB3aXRoIHBlcmlvZHMgKC4pIGFyZSBzdXBwb3J0ZWQuIEZvciBleGFtcGxlLCAuYS5jb20uXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJEb21haW5OYW1lOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQYXJhbSBzY29wZSAtIHNjb3BlIGluIHdoaWNoIHRoaXMgcmVzb3VyY2UgaXMgZGVmaW5lZFxuICAgICAqIFBhcmFtIGlkICAgIC0gc2NvcGVkIGlkIG9mIHRoZSByZXNvdXJjZVxuICAgICAqIFBhcmFtIHByb3BzIC0gcmVzb3VyY2UgcHJvcGVydGllc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiByb3MuQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogRG9tYWluUHJvcHMsIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OmJvb2xlYW4gPSB0cnVlKSB7XG4gICAgICAgIHN1cGVyKHNjb3BlLCBpZCk7XG5cbiAgICAgICAgY29uc3Qgcm9zRG9tYWluID0gbmV3IFJvc0RvbWFpbih0aGlzLCBpZCwgIHtcbiAgICAgICAgICAgIGNoZWNrVXJsOiBwcm9wcy5jaGVja1VybCxcbiAgICAgICAgICAgIHJlc291cmNlR3JvdXBJZDogcHJvcHMucmVzb3VyY2VHcm91cElkLFxuICAgICAgICAgICAgc2NvcGU6IHByb3BzLnNjb3BlLFxuICAgICAgICAgICAgZG9tYWluTmFtZTogcHJvcHMuZG9tYWluTmFtZSxcbiAgICAgICAgICAgIG9yaWdpblNlcnZlcnM6IHByb3BzLm9yaWdpblNlcnZlcnMsXG4gICAgICAgICAgICBjZG5UeXBlOiBwcm9wcy5jZG5UeXBlLFxuICAgICAgICAgICAgdG9wTGV2ZWxEb21haW46IHByb3BzLnRvcExldmVsRG9tYWluLFxuICAgICAgICAgICAgc291cmNlczogcHJvcHMuc291cmNlcyxcbiAgICAgICAgICAgIHRhZ3M6IHByb3BzLnRhZ3MsXG4gICAgICAgIH0sIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ICYmIHRoaXMuc3RhY2suZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQpO1xuICAgICAgICB0aGlzLnJlc291cmNlID0gcm9zRG9tYWluO1xuICAgICAgICB0aGlzLmF0dHJDbmFtZSA9IHJvc0RvbWFpbi5hdHRyQ25hbWU7XG4gICAgICAgIHRoaXMuYXR0ckRvbWFpbk5hbWUgPSByb3NEb21haW4uYXR0ckRvbWFpbk5hbWU7XG4gICAgfVxufVxuIl19