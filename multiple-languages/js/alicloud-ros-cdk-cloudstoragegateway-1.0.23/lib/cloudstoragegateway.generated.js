"use strict";
// Generated from the AliCloud ROS Resource Specification
Object.defineProperty(exports, "__esModule", { value: true });
exports.RosStorageBundle = void 0;
const ros = require("@alicloud/ros-cdk-core");
/**
 * Determine whether the given properties match those of a `RosStorageBundleProps`
 *
 * @param properties - the TypeScript properties of a `RosStorageBundleProps`
 *
 * @returns the result of the validation.
 */
function RosStorageBundlePropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('description', ros.validateString)(properties.description));
    errors.collect(ros.propertyValidator('storageBundleName', ros.requiredValidator)(properties.storageBundleName));
    errors.collect(ros.propertyValidator('storageBundleName', ros.validateString)(properties.storageBundleName));
    return errors.wrap('supplied properties not correct for "RosStorageBundleProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::CloudStorageGateway::StorageBundle` resource
 *
 * @param properties - the TypeScript properties of a `RosStorageBundleProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::CloudStorageGateway::StorageBundle` resource.
 */
// @ts-ignore TS6133
function rosStorageBundlePropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosStorageBundlePropsValidator(properties).assertSuccess();
    }
    return {
        StorageBundleName: ros.stringToRosTemplate(properties.storageBundleName),
        Description: ros.stringToRosTemplate(properties.description),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::CloudStorageGateway::StorageBundle`.
 * @Note This class does not contain additional functions, so it is recommended to use the `StorageBundle` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-cloudstoragegateway-storagebundle
 */
class RosStorageBundle extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosStorageBundle.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrCreateTime = this.getAtt('CreateTime');
        this.attrDescription = this.getAtt('Description');
        this.attrStorageBundleId = this.getAtt('StorageBundleId');
        this.attrStorageBundleName = this.getAtt('StorageBundleName');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.storageBundleName = props.storageBundleName;
        this.description = props.description;
    }
    get rosProperties() {
        return {
            storageBundleName: this.storageBundleName,
            description: this.description,
        };
    }
    renderProperties(props) {
        return rosStorageBundlePropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosStorageBundle = RosStorageBundle;
/**
 * The resource type name for this resource class.
 */
RosStorageBundle.ROS_RESOURCE_TYPE_NAME = "ALIYUN::CloudStorageGateway::StorageBundle";
//# sourceMappingURL=data:application/json;base64,