"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResourcePackage = exports.ResourcePackageProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const bss_generated_1 = require("./bss.generated");
Object.defineProperty(exports, "ResourcePackageProperty", { enumerable: true, get: function () { return bss_generated_1.RosResourcePackage; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::BSS::ResourcePackage`, which is used to create a resource plan.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosResourcePackage`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-bss-resourcepackage
 */
class ResourcePackage extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosResourcePackage = new bss_generated_1.RosResourcePackage(this, id, {
            autoRenewPeriod: props.autoRenewPeriod === undefined || props.autoRenewPeriod === null ? 1 : props.autoRenewPeriod,
            productCode: props.productCode,
            pricingCycle: props.pricingCycle,
            autoRenew: props.autoRenew === undefined || props.autoRenew === null ? false : props.autoRenew,
            packageType: props.packageType,
            specification: props.specification,
            duration: props.duration,
            effectiveDate: props.effectiveDate,
            autoRenewPeriodUnit: props.autoRenewPeriodUnit === undefined || props.autoRenewPeriodUnit === null ? 'Month' : props.autoRenewPeriodUnit,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosResourcePackage;
        this.attrInstanceId = rosResourcePackage.attrInstanceId;
        this.attrOrderId = rosResourcePackage.attrOrderId;
    }
}
exports.ResourcePackage = ResourcePackage;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzb3VyY2VwYWNrYWdlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicmVzb3VyY2VwYWNrYWdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDhDQUE4QztBQUM5QyxtREFBcUQ7QUFFdEIsd0dBRnRCLGtDQUFrQixPQUUyQjtBQXlFdEQ7Ozs7R0FJRztBQUNILE1BQWEsZUFBZ0IsU0FBUSxHQUFHLENBQUMsUUFBUTtJQWdCN0M7Ozs7T0FJRztJQUNILFlBQVksS0FBb0IsRUFBRSxFQUFVLEVBQUUsS0FBMkIsRUFBRSxtQ0FBMkMsSUFBSTtRQUN0SCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ2pCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQ2IsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLGdDQUFnQyxHQUFHLGdDQUFnQyxDQUFDO1FBRXpFLE1BQU0sa0JBQWtCLEdBQUcsSUFBSSxrQ0FBa0IsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFHO1lBQ3pELGVBQWUsRUFBRSxLQUFLLENBQUMsZUFBZSxLQUFLLFNBQVMsSUFBSSxLQUFLLENBQUMsZUFBZSxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsZUFBZTtZQUNsSCxXQUFXLEVBQUUsS0FBSyxDQUFDLFdBQVc7WUFDOUIsWUFBWSxFQUFFLEtBQUssQ0FBQyxZQUFZO1lBQ2hDLFNBQVMsRUFBRSxLQUFLLENBQUMsU0FBUyxLQUFLLFNBQVMsSUFBSSxLQUFLLENBQUMsU0FBUyxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsU0FBUztZQUM5RixXQUFXLEVBQUUsS0FBSyxDQUFDLFdBQVc7WUFDOUIsYUFBYSxFQUFFLEtBQUssQ0FBQyxhQUFhO1lBQ2xDLFFBQVEsRUFBRSxLQUFLLENBQUMsUUFBUTtZQUN4QixhQUFhLEVBQUUsS0FBSyxDQUFDLGFBQWE7WUFDbEMsbUJBQW1CLEVBQUUsS0FBSyxDQUFDLG1CQUFtQixLQUFLLFNBQVMsSUFBSSxLQUFLLENBQUMsbUJBQW1CLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxtQkFBbUI7U0FDM0ksRUFBRSxnQ0FBZ0MsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7UUFDcEYsSUFBSSxDQUFDLFFBQVEsR0FBRyxrQkFBa0IsQ0FBQztRQUNuQyxJQUFJLENBQUMsY0FBYyxHQUFHLGtCQUFrQixDQUFDLGNBQWMsQ0FBQztRQUN4RCxJQUFJLENBQUMsV0FBVyxHQUFHLGtCQUFrQixDQUFDLFdBQVcsQ0FBQztJQUN0RCxDQUFDO0NBQ0o7QUEzQ0QsMENBMkNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcm9zIGZyb20gJ0BhbGljbG91ZC9yb3MtY2RrLWNvcmUnO1xuaW1wb3J0IHsgUm9zUmVzb3VyY2VQYWNrYWdlIH0gZnJvbSAnLi9ic3MuZ2VuZXJhdGVkJztcbi8vIEdlbmVyYXRlZCBmcm9tIHRoZSBBbGlDbG91ZCBST1MgUmVzb3VyY2UgU3BlY2lmaWNhdGlvblxuZXhwb3J0IHsgUm9zUmVzb3VyY2VQYWNrYWdlIGFzIFJlc291cmNlUGFja2FnZVByb3BlcnR5IH07XG5cbi8qKlxuICogUHJvcGVydGllcyBmb3IgZGVmaW5pbmcgYSBgUmVzb3VyY2VQYWNrYWdlYC5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvYWxpeXVuLWJzcy1yZXNvdXJjZXBhY2thZ2VcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBSZXNvdXJjZVBhY2thZ2VQcm9wcyB7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBkdXJhdGlvbjogVGhlIHZhbGlkaXR5IG9mIHRoZSBzcGVjaWZpZWQgcmVzb3VyY2UgcGFja2FnZS4gVGhlIHZhbHVlIGlzIHRoZSBzYW1lIGFzIHRoZSBWYWx1ZSBvZiBBdmFpbGFibGVEdXJhdGlvbiByZXR1cm5lZCBieSBEZXNjcmliZVJlc291cmNlUGFja2FnZVByb2R1Y3QuXG4gICAgICovXG4gICAgcmVhZG9ubHkgZHVyYXRpb246IG51bWJlciB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHBhY2thZ2VUeXBlOiBUaGUgdHlwZSBvZiB0aGUgc3BlY2lmaWVkIHJlc291cmNlIHBhY2thZ2UuIFRoZSB2YWx1ZSBpcyB0aGUgc2FtZSBhcyB0aGUgdmFsdWUgb2YgdGhlIENvZGUgdmFsdWUgb2YgdGhlIFJlc291cmNlUGFja2FnZSBvYmplY3QgcmV0dXJuZWQgYnkgRGVzY3JpYmVSZXNvdXJjZVBhY2thZ2VQcm9kdWN0LlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHBhY2thZ2VUeXBlOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBwcm9kdWN0Q29kZTogVGhlIGNvZGUgb2YgdGhlIHNwZWNpZmllZCBwcm9kdWN0LiBUaGUgdmFsdWUgaXMgdGhlIHNhbWUgYXMgdGhlIHZhbHVlIG9mIFByb2R1Y3RUeXBlIHJldHVybmVkIGJ5IFF1ZXJ5UHJvZHVjdExpc3QuXG4gICAgICovXG4gICAgcmVhZG9ubHkgcHJvZHVjdENvZGU6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHNwZWNpZmljYXRpb246IFRoZSBzaXplIG9mIHRoZSBzcGVjaWZpZWQgcmVzb3VyY2UgcGFja2FnZS4gVGhlIHZhbHVlIGlzIHRoZSBzYW1lIGFzIHRoZSBWYWx1ZSBvZiBTcGVjaWZpY2F0aW9uIHJldHVybmVkIGJ5IERlc2NyaWJlUmVzb3VyY2VQYWNrYWdlUHJvZHVjdC5cbiAgICAgKi9cbiAgICByZWFkb25seSBzcGVjaWZpY2F0aW9uOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBhdXRvUmVuZXc6IFdoZXRoZXIgdG8gYXV0b21hdGljYWxseSByZW5ldyB0aGUgcmVzb3VyY2UgcGFja2FnZS4gVGhlIHZhbHVlIGlzIHRydWUgb3IgZmFsc2UuIERlZmF1bHQgdmFsdWU6IGZhbHNlLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGF1dG9SZW5ldz86IGJvb2xlYW4gfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBhdXRvUmVuZXdQZXJpb2Q6IER1cmF0aW9uIG9mIHJlc291cmNlIHBhY2tzIHJlbmV3YWxzLiBWYWxpZCB2YWx1ZXM6XG4gICAgICogLSBXaGVuIEF1dG9SZW5ld1BlcmlvZFVuaXQgaXMgWWVhcjogMSwgMiwgMy4gXG4gICAgICogLSBXaGVuIEF1dG9SZW5ld1BlcmlvZFVuaXQgaXMgTW9udGg6IDEsIDIsIDMsIDYuXG4gICAgICogRGVmYXVsdCBpcyAxLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGF1dG9SZW5ld1BlcmlvZD86IG51bWJlciB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGF1dG9SZW5ld1BlcmlvZFVuaXQ6IFVuaXQgb2YgcmVzb3VyY2UgcGFjayByZW5ld2Fscy4gVmFsaWQgdmFsdWVzOiBNb250aCwgWWVhci4gRGVmYXVsdCBpcyBNb250aC5cbiAgICAgKi9cbiAgICByZWFkb25seSBhdXRvUmVuZXdQZXJpb2RVbml0Pzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgZWZmZWN0aXZlRGF0ZTogVGhlIGVmZmVjdGl2ZSBkYXRlIG9mIHRoZSBzcGVjaWZpZWQgcmVzb3VyY2UgcGFja2FnZS4gVGhlIHJlc291cmNlIHBhY2thZ2Ugd2lsbCB0YWtlIGVmZmVjdCBpbW1lZGlhdGVseSBpZiB0aGUgZWZmZWN0aXZlIGRhdGUgaXMgdW5zcGVjaWZpZWQuIFRoZSBkYXRlIGZvcm1hdCBmb2xsb3dzIHRoZSBJU084NjAxIHN0YW5kYXJkIGFuZCB1c2VzIFVUQyB0aW1lLiBGb3JtYXQ6IHl5eXktTU0tZGRUSEg6bW06c3NaXG4gICAgICovXG4gICAgcmVhZG9ubHkgZWZmZWN0aXZlRGF0ZT86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHByaWNpbmdDeWNsZTogVGhlIHZhbGlkaXR5IG9mIHRoZSBzcGVjaWZpZWQgcmVzb3VyY2UgcGFja2FnZS4gRGVmYXVsdCB2YWx1ZTogTW9udGguIFZhbGlkIHZhbHVlczogTW9udGgsIFllYXJcbiAgICAgKi9cbiAgICByZWFkb25seSBwcmljaW5nQ3ljbGU/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG59XG5cbi8qKlxuICogUmVwcmVzZW50cyBhIGBSZXNvdXJjZVBhY2thZ2VgLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIElSZXNvdXJjZVBhY2thZ2UgZXh0ZW5kcyByb3MuSVJlc291cmNlIHtcbiAgICByZWFkb25seSBwcm9wczogUmVzb3VyY2VQYWNrYWdlUHJvcHM7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgSW5zdGFuY2VJZDogVGhlIElEIG9mIHRoZSBzcGVjaWZpZWQgaW5zdGFuY2UuXG4gICAgICovXG4gICAgcmVhZG9ubHkgYXR0ckluc3RhbmNlSWQ6IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBPcmRlcklkOiBUaGUgSUQgb2YgdGhlIHNwZWNpZmllZCBvcmRlci5cbiAgICAgKi9cbiAgICByZWFkb25seSBhdHRyT3JkZXJJZDogcm9zLklSZXNvbHZhYmxlIHwgc3RyaW5nO1xufVxuLyoqXG4gKiBUaGlzIGNsYXNzIGVuY2Fwc3VsYXRlcyBhbmQgZXh0ZW5kcyB0aGUgUk9TIHJlc291cmNlIHR5cGUgYEFMSVlVTjo6QlNTOjpSZXNvdXJjZVBhY2thZ2VgLCB3aGljaCBpcyB1c2VkIHRvIGNyZWF0ZSBhIHJlc291cmNlIHBsYW4uXG4gKiBATm90ZSBUaGlzIGNsYXNzIG1heSBoYXZlIHNvbWUgbmV3IGZ1bmN0aW9ucyB0byBmYWNpbGl0YXRlIGRldmVsb3BtZW50LCBzbyBpdCBpcyByZWNvbW1lbmRlZCB0byB1c2UgdGhpcyBjbGFzcyBpbnN0ZWFkIG9mIGBSb3NSZXNvdXJjZVBhY2thZ2VgZm9yIGEgbW9yZSBjb252ZW5pZW50IGRldmVsb3BtZW50IGV4cGVyaWVuY2UuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2FsaXl1bi1ic3MtcmVzb3VyY2VwYWNrYWdlXG4gKi9cbmV4cG9ydCBjbGFzcyBSZXNvdXJjZVBhY2thZ2UgZXh0ZW5kcyByb3MuUmVzb3VyY2UgaW1wbGVtZW50cyBJUmVzb3VyY2VQYWNrYWdlIHtcbiAgICBwcm90ZWN0ZWQgc2NvcGU6IHJvcy5Db25zdHJ1Y3Q7XG4gICAgcHJvdGVjdGVkIGlkOiBzdHJpbmc7XG4gICAgcHVibGljIHJlYWRvbmx5IHByb3BzOiBSZXNvdXJjZVBhY2thZ2VQcm9wcztcbiAgICBwcm90ZWN0ZWQgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6IGJvb2xlYW47XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgSW5zdGFuY2VJZDogVGhlIElEIG9mIHRoZSBzcGVjaWZpZWQgaW5zdGFuY2UuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJJbnN0YW5jZUlkOiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgT3JkZXJJZDogVGhlIElEIG9mIHRoZSBzcGVjaWZpZWQgb3JkZXIuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJPcmRlcklkOiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBQYXJhbSBzY29wZSAtIHNjb3BlIGluIHdoaWNoIHRoaXMgcmVzb3VyY2UgaXMgZGVmaW5lZFxuICAgICAqIFBhcmFtIGlkICAgIC0gc2NvcGVkIGlkIG9mIHRoZSByZXNvdXJjZVxuICAgICAqIFBhcmFtIHByb3BzIC0gcmVzb3VyY2UgcHJvcGVydGllc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiByb3MuQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogUmVzb3VyY2VQYWNrYWdlUHJvcHMsIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OmJvb2xlYW4gPSB0cnVlKSB7XG4gICAgICAgIHN1cGVyKHNjb3BlLCBpZCk7XG4gICAgICAgIHRoaXMuc2NvcGUgPSBzY29wZTtcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xuICAgICAgICB0aGlzLnByb3BzID0gcHJvcHM7XG4gICAgICAgIHRoaXMuZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgPSBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDtcblxuICAgICAgICBjb25zdCByb3NSZXNvdXJjZVBhY2thZ2UgPSBuZXcgUm9zUmVzb3VyY2VQYWNrYWdlKHRoaXMsIGlkLCAge1xuICAgICAgICAgICAgYXV0b1JlbmV3UGVyaW9kOiBwcm9wcy5hdXRvUmVuZXdQZXJpb2QgPT09IHVuZGVmaW5lZCB8fCBwcm9wcy5hdXRvUmVuZXdQZXJpb2QgPT09IG51bGwgPyAxIDogcHJvcHMuYXV0b1JlbmV3UGVyaW9kLFxuICAgICAgICAgICAgcHJvZHVjdENvZGU6IHByb3BzLnByb2R1Y3RDb2RlLFxuICAgICAgICAgICAgcHJpY2luZ0N5Y2xlOiBwcm9wcy5wcmljaW5nQ3ljbGUsXG4gICAgICAgICAgICBhdXRvUmVuZXc6IHByb3BzLmF1dG9SZW5ldyA9PT0gdW5kZWZpbmVkIHx8IHByb3BzLmF1dG9SZW5ldyA9PT0gbnVsbCA/IGZhbHNlIDogcHJvcHMuYXV0b1JlbmV3LFxuICAgICAgICAgICAgcGFja2FnZVR5cGU6IHByb3BzLnBhY2thZ2VUeXBlLFxuICAgICAgICAgICAgc3BlY2lmaWNhdGlvbjogcHJvcHMuc3BlY2lmaWNhdGlvbixcbiAgICAgICAgICAgIGR1cmF0aW9uOiBwcm9wcy5kdXJhdGlvbixcbiAgICAgICAgICAgIGVmZmVjdGl2ZURhdGU6IHByb3BzLmVmZmVjdGl2ZURhdGUsXG4gICAgICAgICAgICBhdXRvUmVuZXdQZXJpb2RVbml0OiBwcm9wcy5hdXRvUmVuZXdQZXJpb2RVbml0ID09PSB1bmRlZmluZWQgfHwgcHJvcHMuYXV0b1JlbmV3UGVyaW9kVW5pdCA9PT0gbnVsbCA/ICdNb250aCcgOiBwcm9wcy5hdXRvUmVuZXdQZXJpb2RVbml0LFxuICAgICAgICB9LCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCAmJiB0aGlzLnN0YWNrLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50KTtcbiAgICAgICAgdGhpcy5yZXNvdXJjZSA9IHJvc1Jlc291cmNlUGFja2FnZTtcbiAgICAgICAgdGhpcy5hdHRySW5zdGFuY2VJZCA9IHJvc1Jlc291cmNlUGFja2FnZS5hdHRySW5zdGFuY2VJZDtcbiAgICAgICAgdGhpcy5hdHRyT3JkZXJJZCA9IHJvc1Jlc291cmNlUGFja2FnZS5hdHRyT3JkZXJJZDtcbiAgICB9XG59XG4iXX0=