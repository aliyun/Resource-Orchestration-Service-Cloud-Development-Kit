"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProtocolService = exports.ProtocolServiceProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const nas_generated_1 = require("./nas.generated");
Object.defineProperty(exports, "ProtocolServiceProperty", { enumerable: true, get: function () { return nas_generated_1.RosProtocolService; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::NAS::ProtocolService`, which is used to create a protocol service for a Cloud Paralleled File System (CPFS) file system.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosProtocolService`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-nas-protocolservice
 */
class ProtocolService extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosProtocolService = new nas_generated_1.RosProtocolService(this, id, {
            description: props.description,
            vpcId: props.vpcId,
            protocolType: props.protocolType === undefined || props.protocolType === null ? 'NFS' : props.protocolType,
            protocolSpec: props.protocolSpec === undefined || props.protocolSpec === null ? 'General' : props.protocolSpec,
            vSwitchId: props.vSwitchId,
            fileSystemId: props.fileSystemId,
            throughput: props.throughput,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosProtocolService;
        this.attrFileSystemId = rosProtocolService.attrFileSystemId;
        this.attrProtocolServiceId = rosProtocolService.attrProtocolServiceId;
    }
}
exports.ProtocolService = ProtocolService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvdG9jb2xzZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicHJvdG9jb2xzZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDhDQUE4QztBQUM5QyxtREFBcUQ7QUFFdEIsd0dBRnRCLGtDQUFrQixPQUUyQjtBQW9FdEQ7Ozs7R0FJRztBQUNILE1BQWEsZUFBZ0IsU0FBUSxHQUFHLENBQUMsUUFBUTtJQWdCN0M7Ozs7T0FJRztJQUNILFlBQVksS0FBb0IsRUFBRSxFQUFVLEVBQUUsS0FBMkIsRUFBRSxtQ0FBMkMsSUFBSTtRQUN0SCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ2pCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQ2IsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLGdDQUFnQyxHQUFHLGdDQUFnQyxDQUFDO1FBRXpFLE1BQU0sa0JBQWtCLEdBQUcsSUFBSSxrQ0FBa0IsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFHO1lBQ3pELFdBQVcsRUFBRSxLQUFLLENBQUMsV0FBVztZQUM5QixLQUFLLEVBQUUsS0FBSyxDQUFDLEtBQUs7WUFDbEIsWUFBWSxFQUFFLEtBQUssQ0FBQyxZQUFZLEtBQUssU0FBUyxJQUFJLEtBQUssQ0FBQyxZQUFZLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxZQUFZO1lBQzFHLFlBQVksRUFBRSxLQUFLLENBQUMsWUFBWSxLQUFLLFNBQVMsSUFBSSxLQUFLLENBQUMsWUFBWSxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsWUFBWTtZQUM5RyxTQUFTLEVBQUUsS0FBSyxDQUFDLFNBQVM7WUFDMUIsWUFBWSxFQUFFLEtBQUssQ0FBQyxZQUFZO1lBQ2hDLFVBQVUsRUFBRSxLQUFLLENBQUMsVUFBVTtTQUMvQixFQUFFLGdDQUFnQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztRQUNwRixJQUFJLENBQUMsUUFBUSxHQUFHLGtCQUFrQixDQUFDO1FBQ25DLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxrQkFBa0IsQ0FBQyxnQkFBZ0IsQ0FBQztRQUM1RCxJQUFJLENBQUMscUJBQXFCLEdBQUcsa0JBQWtCLENBQUMscUJBQXFCLENBQUM7SUFDMUUsQ0FBQztDQUNKO0FBekNELDBDQXlDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHJvcyBmcm9tICdAYWxpY2xvdWQvcm9zLWNkay1jb3JlJztcbmltcG9ydCB7IFJvc1Byb3RvY29sU2VydmljZSB9IGZyb20gJy4vbmFzLmdlbmVyYXRlZCc7XG4vLyBHZW5lcmF0ZWQgZnJvbSB0aGUgQWxpQ2xvdWQgUk9TIFJlc291cmNlIFNwZWNpZmljYXRpb25cbmV4cG9ydCB7IFJvc1Byb3RvY29sU2VydmljZSBhcyBQcm90b2NvbFNlcnZpY2VQcm9wZXJ0eSB9O1xuXG4vKipcbiAqIFByb3BlcnRpZXMgZm9yIGRlZmluaW5nIGEgYFByb3RvY29sU2VydmljZWAuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2FsaXl1bi1uYXMtcHJvdG9jb2xzZXJ2aWNlXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUHJvdG9jb2xTZXJ2aWNlUHJvcHMge1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgZmlsZVN5c3RlbUlkOiBGaWxlIHN5c3RlbSBJRC5cbiAgICAgKi9cbiAgICByZWFkb25seSBmaWxlU3lzdGVtSWQ6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHByb3RvY29sU3BlYzogVGhlIHNwZWMgb2YgcHJvdG9jb2wgc2VydmljZS4gRGVmYXVsdDogR2VuZXJhbC4gVmFsdWVzOiBHZW5lcmFsXG4gICAgICovXG4gICAgcmVhZG9ubHkgcHJvdG9jb2xTcGVjOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBwcm90b2NvbFR5cGU6IFRoZSBwcm90b2NvbCB0eXBlIG9mIGFncmVlbWVudCBzZXJ2aWNlLlxuICAgICAqIFJhbmdlczpcbiAgICAgKiBORlM6IEFncmVlbWVudCBzZXJ2aWNlIHN1cHBvcnRzIE5GUyBwcm90b2NvbCBhY2Nlc3MuXG4gICAgICogVGhlIGRlZmF1bHQgdmFsdWU6IE5GUy5cbiAgICAgKi9cbiAgICByZWFkb25seSBwcm90b2NvbFR5cGU6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHZwY0lkOiBUaGUgcHJvdG9jb2wgc2VydmljZSBWUENJRCBuZWVkcyB0byBiZSBjb25zaXN0ZW50IHdpdGggdGhlIGZpbGUgc3lzdGVtIFZQQy5cbiAgICAgKi9cbiAgICByZWFkb25seSB2cGNJZDogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgdlN3aXRjaElkOiBBZ3JlZW1lbnQgc2VydmljZSB2c3dpdGNoaWQuXG4gICAgICovXG4gICAgcmVhZG9ubHkgdlN3aXRjaElkOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBkZXNjcmlwdGlvbjogRGVzY3JpcHRpb24gb2YgcHJvdG9jb2wgc2VydmljZS5UaGUgY29uc29sZSBzaG93cyB0aGUgXCJwcm90b2NvbCBzZXJ2aWNlIG5hbWVcIi5cbiAgICAgKiBsaW1pdDpcbiAgICAgKiBUaGUgbGVuZ3RoIGlzIDIgdG8gMTI4IEVuZ2xpc2ggb3IgQ2hpbmVzZSBjaGFyYWN0ZXJzLlxuICAgICAqIFN0YXJ0IHdpdGggYSBsb3dlcmNhc2UgbGV0dGVyIG9yIENoaW5lc2UsIGFuZCB5b3UgY2Fubm90IHN0YXJ0IHdpdGggaHR0cDpcXC9cXC8gYW5kIGh0dHBzOiBcXC9cXC8uXG4gICAgICogSXQgY2FuIGNvbnRhaW4gbnVtYmVycywgaGFsZi1ob3JuIGNvbG9uICg6KSwgZG93biBsaW5lIChfKSBvciBzaG9ydCBsaW5lcyAoLSkuXG4gICAgICovXG4gICAgcmVhZG9ubHkgZGVzY3JpcHRpb24/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSB0aHJvdWdocHV0OiBUaGUgYmFuZHdpZHRoIG9mIHRoZSBhZ3JlZW1lbnQgc2VydmljZS5cbiAgICAgKiBVbml0OiBNQlxcL1MuXG4gICAgICovXG4gICAgcmVhZG9ubHkgdGhyb3VnaHB1dD86IG51bWJlciB8IHJvcy5JUmVzb2x2YWJsZTtcbn1cblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgYFByb3RvY29sU2VydmljZWAuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSVByb3RvY29sU2VydmljZSBleHRlbmRzIHJvcy5JUmVzb3VyY2Uge1xuICAgIHJlYWRvbmx5IHByb3BzOiBQcm90b2NvbFNlcnZpY2VQcm9wcztcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBGaWxlU3lzdGVtSWQ6IEZpbGUgc3lzdGVtIElELlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGF0dHJGaWxlU3lzdGVtSWQ6IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBQcm90b2NvbFNlcnZpY2VJZDogQWdyZWVtZW50IGNsdXN0ZXIgZ3JvdXAgSUQuXG4gICAgICovXG4gICAgcmVhZG9ubHkgYXR0clByb3RvY29sU2VydmljZUlkOiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG59XG4vKipcbiAqIFRoaXMgY2xhc3MgZW5jYXBzdWxhdGVzIGFuZCBleHRlbmRzIHRoZSBST1MgcmVzb3VyY2UgdHlwZSBgQUxJWVVOOjpOQVM6OlByb3RvY29sU2VydmljZWAsIHdoaWNoIGlzIHVzZWQgdG8gY3JlYXRlIGEgcHJvdG9jb2wgc2VydmljZSBmb3IgYSBDbG91ZCBQYXJhbGxlbGVkIEZpbGUgU3lzdGVtIChDUEZTKSBmaWxlIHN5c3RlbS5cbiAqIEBOb3RlIFRoaXMgY2xhc3MgbWF5IGhhdmUgc29tZSBuZXcgZnVuY3Rpb25zIHRvIGZhY2lsaXRhdGUgZGV2ZWxvcG1lbnQsIHNvIGl0IGlzIHJlY29tbWVuZGVkIHRvIHVzZSB0aGlzIGNsYXNzIGluc3RlYWQgb2YgYFJvc1Byb3RvY29sU2VydmljZWBmb3IgYSBtb3JlIGNvbnZlbmllbnQgZGV2ZWxvcG1lbnQgZXhwZXJpZW5jZS5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvYWxpeXVuLW5hcy1wcm90b2NvbHNlcnZpY2VcbiAqL1xuZXhwb3J0IGNsYXNzIFByb3RvY29sU2VydmljZSBleHRlbmRzIHJvcy5SZXNvdXJjZSBpbXBsZW1lbnRzIElQcm90b2NvbFNlcnZpY2Uge1xuICAgIHByb3RlY3RlZCBzY29wZTogcm9zLkNvbnN0cnVjdDtcbiAgICBwcm90ZWN0ZWQgaWQ6IHN0cmluZztcbiAgICBwdWJsaWMgcmVhZG9ubHkgcHJvcHM6IFByb3RvY29sU2VydmljZVByb3BzO1xuICAgIHByb3RlY3RlZCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBGaWxlU3lzdGVtSWQ6IEZpbGUgc3lzdGVtIElELlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyRmlsZVN5c3RlbUlkOiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgUHJvdG9jb2xTZXJ2aWNlSWQ6IEFncmVlbWVudCBjbHVzdGVyIGdyb3VwIElELlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyUHJvdG9jb2xTZXJ2aWNlSWQ6IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFBhcmFtIHNjb3BlIC0gc2NvcGUgaW4gd2hpY2ggdGhpcyByZXNvdXJjZSBpcyBkZWZpbmVkXG4gICAgICogUGFyYW0gaWQgICAgLSBzY29wZWQgaWQgb2YgdGhlIHJlc291cmNlXG4gICAgICogUGFyYW0gcHJvcHMgLSByZXNvdXJjZSBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IHJvcy5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBQcm90b2NvbFNlcnZpY2VQcm9wcywgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6Ym9vbGVhbiA9IHRydWUpIHtcbiAgICAgICAgc3VwZXIoc2NvcGUsIGlkKTtcbiAgICAgICAgdGhpcy5zY29wZSA9IHNjb3BlO1xuICAgICAgICB0aGlzLmlkID0gaWQ7XG4gICAgICAgIHRoaXMucHJvcHMgPSBwcm9wcztcbiAgICAgICAgdGhpcy5lbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCA9IGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50O1xuXG4gICAgICAgIGNvbnN0IHJvc1Byb3RvY29sU2VydmljZSA9IG5ldyBSb3NQcm90b2NvbFNlcnZpY2UodGhpcywgaWQsICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogcHJvcHMuZGVzY3JpcHRpb24sXG4gICAgICAgICAgICB2cGNJZDogcHJvcHMudnBjSWQsXG4gICAgICAgICAgICBwcm90b2NvbFR5cGU6IHByb3BzLnByb3RvY29sVHlwZSA9PT0gdW5kZWZpbmVkIHx8IHByb3BzLnByb3RvY29sVHlwZSA9PT0gbnVsbCA/ICdORlMnIDogcHJvcHMucHJvdG9jb2xUeXBlLFxuICAgICAgICAgICAgcHJvdG9jb2xTcGVjOiBwcm9wcy5wcm90b2NvbFNwZWMgPT09IHVuZGVmaW5lZCB8fCBwcm9wcy5wcm90b2NvbFNwZWMgPT09IG51bGwgPyAnR2VuZXJhbCcgOiBwcm9wcy5wcm90b2NvbFNwZWMsXG4gICAgICAgICAgICB2U3dpdGNoSWQ6IHByb3BzLnZTd2l0Y2hJZCxcbiAgICAgICAgICAgIGZpbGVTeXN0ZW1JZDogcHJvcHMuZmlsZVN5c3RlbUlkLFxuICAgICAgICAgICAgdGhyb3VnaHB1dDogcHJvcHMudGhyb3VnaHB1dCxcbiAgICAgICAgfSwgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgJiYgdGhpcy5zdGFjay5lbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCk7XG4gICAgICAgIHRoaXMucmVzb3VyY2UgPSByb3NQcm90b2NvbFNlcnZpY2U7XG4gICAgICAgIHRoaXMuYXR0ckZpbGVTeXN0ZW1JZCA9IHJvc1Byb3RvY29sU2VydmljZS5hdHRyRmlsZVN5c3RlbUlkO1xuICAgICAgICB0aGlzLmF0dHJQcm90b2NvbFNlcnZpY2VJZCA9IHJvc1Byb3RvY29sU2VydmljZS5hdHRyUHJvdG9jb2xTZXJ2aWNlSWQ7XG4gICAgfVxufVxuIl19