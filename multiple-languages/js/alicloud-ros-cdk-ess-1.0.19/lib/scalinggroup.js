"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ScalingGroup = exports.ScalingGroupProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ess_generated_1 = require("./ess.generated");
Object.defineProperty(exports, "ScalingGroupProperty", { enumerable: true, get: function () { return ess_generated_1.RosScalingGroup; } });
/**
 * A ROS resource type:  `ALIYUN::ESS::ScalingGroup`
 */
class ScalingGroup extends ros.Resource {
    /**
     * Create a new `ALIYUN::ESS::ScalingGroup`.
     *
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosScalingGroup = new ess_generated_1.RosScalingGroup(this, id, {
            spotInstanceRemedy: props.spotInstanceRemedy,
            compensateWithOnDemand: props.compensateWithOnDemand,
            notificationConfigurations: props.notificationConfigurations,
            onDemandPercentageAboveBaseCapacity: props.onDemandPercentageAboveBaseCapacity,
            desiredCapacity: props.desiredCapacity,
            allocationStrategy: props.allocationStrategy,
            onDemandBaseCapacity: props.onDemandBaseCapacity,
            standbyInstances: props.standbyInstances,
            launchTemplateOverrides: props.launchTemplateOverrides,
            removalPolicys: props.removalPolicys,
            spotAllocationStrategy: props.spotAllocationStrategy,
            tags: props.tags,
            scalingPolicy: props.scalingPolicy,
            vSwitchIds: props.vSwitchIds,
            instanceId: props.instanceId,
            vSwitchId: props.vSwitchId,
            loadBalancerIds: props.loadBalancerIds,
            spotInstancePools: props.spotInstancePools,
            groupDeletionProtection: props.groupDeletionProtection === undefined || props.groupDeletionProtection === null ? false : props.groupDeletionProtection,
            launchTemplateId: props.launchTemplateId,
            customPolicyArn: props.customPolicyArn,
            maxSize: props.maxSize,
            scalingGroupName: props.scalingGroupName,
            minSize: props.minSize,
            defaultCooldown: props.defaultCooldown,
            azBalance: props.azBalance,
            groupType: props.groupType,
            launchTemplateVersion: props.launchTemplateVersion,
            multiAzPolicy: props.multiAzPolicy,
            protectedInstances: props.protectedInstances,
            containerGroupId: props.containerGroupId,
            dbInstanceIds: props.dbInstanceIds,
            healthCheckType: props.healthCheckType,
            maxInstanceLifetime: props.maxInstanceLifetime,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosScalingGroup;
        this.attrScalingGroupId = rosScalingGroup.attrScalingGroupId;
        this.attrScalingGroupName = rosScalingGroup.attrScalingGroupName;
    }
}
exports.ScalingGroup = ScalingGroup;
//# sourceMappingURL=data:application/json;base64,