"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ScheduledTask = exports.ScheduledTaskProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ess_generated_1 = require("./ess.generated");
Object.defineProperty(exports, "ScheduledTaskProperty", { enumerable: true, get: function () { return ess_generated_1.RosScheduledTask; } });
/**
 * A ROS resource type:  `ALIYUN::ESS::ScheduledTask`
 */
class ScheduledTask extends ros.Resource {
    /**
     * Create a new `ALIYUN::ESS::ScheduledTask`.
     *
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosScheduledTask = new ess_generated_1.RosScheduledTask(this, id, {
            description: props.description,
            launchTime: props.launchTime,
            recurrenceType: props.recurrenceType,
            scheduledTaskName: props.scheduledTaskName,
            scheduledAction: props.scheduledAction,
            recurrenceEndTime: props.recurrenceEndTime,
            recurrenceValue: props.recurrenceValue,
            taskEnabled: props.taskEnabled,
            launchExpirationTime: props.launchExpirationTime,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosScheduledTask;
        this.attrScheduledTaskId = rosScheduledTask.attrScheduledTaskId;
    }
}
exports.ScheduledTask = ScheduledTask;
//# sourceMappingURL=data:application/json;base64,