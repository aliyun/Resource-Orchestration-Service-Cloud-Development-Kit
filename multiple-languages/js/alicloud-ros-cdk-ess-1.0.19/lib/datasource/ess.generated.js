"use strict";
// Generated from the AliCloud ROS Resource Specification
Object.defineProperty(exports, "__esModule", { value: true });
exports.RosScalingGroups = exports.RosScalingConfigurations = void 0;
const ros = require("@alicloud/ros-cdk-core");
/**
 * Determine whether the given properties match those of a `RosScalingConfigurationsProps`
 *
 * @param properties - the TypeScript properties of a `RosScalingConfigurationsProps`
 *
 * @returns the result of the validation.
 */
function RosScalingConfigurationsPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('scalingGroupId', ros.validateString)(properties.scalingGroupId));
    if (properties.scalingConfigurationIds && (Array.isArray(properties.scalingConfigurationIds) || (typeof properties.scalingConfigurationIds) === 'string')) {
        errors.collect(ros.propertyValidator('scalingConfigurationIds', ros.validateLength)({
            data: properties.scalingConfigurationIds.length,
            min: undefined,
            max: 10,
        }));
    }
    errors.collect(ros.propertyValidator('scalingConfigurationIds', ros.listValidator(ros.validateString))(properties.scalingConfigurationIds));
    if (properties.scalingConfigurationNames && (Array.isArray(properties.scalingConfigurationNames) || (typeof properties.scalingConfigurationNames) === 'string')) {
        errors.collect(ros.propertyValidator('scalingConfigurationNames', ros.validateLength)({
            data: properties.scalingConfigurationNames.length,
            min: undefined,
            max: 10,
        }));
    }
    errors.collect(ros.propertyValidator('scalingConfigurationNames', ros.listValidator(ros.validateString))(properties.scalingConfigurationNames));
    return errors.wrap('supplied properties not correct for "RosScalingConfigurationsProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `DATASOURCE::ESS::ScalingConfigurations` resource
 *
 * @param properties - the TypeScript properties of a `RosScalingConfigurationsProps`
 *
 * @returns the AliCloud ROS Resource properties of an `DATASOURCE::ESS::ScalingConfigurations` resource.
 */
// @ts-ignore TS6133
function rosScalingConfigurationsPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosScalingConfigurationsPropsValidator(properties).assertSuccess();
    }
    return {
        ScalingConfigurationIds: ros.listMapper(ros.stringToRosTemplate)(properties.scalingConfigurationIds),
        ScalingConfigurationNames: ros.listMapper(ros.stringToRosTemplate)(properties.scalingConfigurationNames),
        ScalingGroupId: ros.stringToRosTemplate(properties.scalingGroupId),
    };
}
/**
 * A ROS template type:  `DATASOURCE::ESS::ScalingConfigurations`
 */
class RosScalingConfigurations extends ros.RosResource {
    /**
     * Create a new `DATASOURCE::ESS::ScalingConfigurations`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosScalingConfigurations.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrScalingConfigurationIds = this.getAtt('ScalingConfigurationIds');
        this.attrScalingConfigurations = this.getAtt('ScalingConfigurations');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.scalingConfigurationIds = props.scalingConfigurationIds;
        this.scalingConfigurationNames = props.scalingConfigurationNames;
        this.scalingGroupId = props.scalingGroupId;
    }
    get rosProperties() {
        return {
            scalingConfigurationIds: this.scalingConfigurationIds,
            scalingConfigurationNames: this.scalingConfigurationNames,
            scalingGroupId: this.scalingGroupId,
        };
    }
    renderProperties(props) {
        return rosScalingConfigurationsPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosScalingConfigurations = RosScalingConfigurations;
/**
 * The resource type name for this resource class.
 */
RosScalingConfigurations.ROS_RESOURCE_TYPE_NAME = "DATASOURCE::ESS::ScalingConfigurations";
/**
 * Determine whether the given properties match those of a `RosScalingGroupsProps`
 *
 * @param properties - the TypeScript properties of a `RosScalingGroupsProps`
 *
 * @returns the result of the validation.
 */
function RosScalingGroupsPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    if (properties.scalingGroupNames && (Array.isArray(properties.scalingGroupNames) || (typeof properties.scalingGroupNames) === 'string')) {
        errors.collect(ros.propertyValidator('scalingGroupNames', ros.validateLength)({
            data: properties.scalingGroupNames.length,
            min: undefined,
            max: 20,
        }));
    }
    errors.collect(ros.propertyValidator('scalingGroupNames', ros.listValidator(ros.validateString))(properties.scalingGroupNames));
    errors.collect(ros.propertyValidator('groupType', ros.validateString)(properties.groupType));
    if (properties.scalingGroupIds && (Array.isArray(properties.scalingGroupIds) || (typeof properties.scalingGroupIds) === 'string')) {
        errors.collect(ros.propertyValidator('scalingGroupIds', ros.validateLength)({
            data: properties.scalingGroupIds.length,
            min: undefined,
            max: 20,
        }));
    }
    errors.collect(ros.propertyValidator('scalingGroupIds', ros.listValidator(ros.validateString))(properties.scalingGroupIds));
    return errors.wrap('supplied properties not correct for "RosScalingGroupsProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `DATASOURCE::ESS::ScalingGroups` resource
 *
 * @param properties - the TypeScript properties of a `RosScalingGroupsProps`
 *
 * @returns the AliCloud ROS Resource properties of an `DATASOURCE::ESS::ScalingGroups` resource.
 */
// @ts-ignore TS6133
function rosScalingGroupsPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosScalingGroupsPropsValidator(properties).assertSuccess();
    }
    return {
        GroupType: ros.stringToRosTemplate(properties.groupType),
        ScalingGroupIds: ros.listMapper(ros.stringToRosTemplate)(properties.scalingGroupIds),
        ScalingGroupNames: ros.listMapper(ros.stringToRosTemplate)(properties.scalingGroupNames),
    };
}
/**
 * A ROS template type:  `DATASOURCE::ESS::ScalingGroups`
 */
class RosScalingGroups extends ros.RosResource {
    /**
     * Create a new `DATASOURCE::ESS::ScalingGroups`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosScalingGroups.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrScalingGroupIds = this.getAtt('ScalingGroupIds');
        this.attrScalingGroups = this.getAtt('ScalingGroups');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.groupType = props.groupType;
        this.scalingGroupIds = props.scalingGroupIds;
        this.scalingGroupNames = props.scalingGroupNames;
    }
    get rosProperties() {
        return {
            groupType: this.groupType,
            scalingGroupIds: this.scalingGroupIds,
            scalingGroupNames: this.scalingGroupNames,
        };
    }
    renderProperties(props) {
        return rosScalingGroupsPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosScalingGroups = RosScalingGroups;
/**
 * The resource type name for this resource class.
 */
RosScalingGroups.ROS_RESOURCE_TYPE_NAME = "DATASOURCE::ESS::ScalingGroups";
//# sourceMappingURL=data:application/json;base64,