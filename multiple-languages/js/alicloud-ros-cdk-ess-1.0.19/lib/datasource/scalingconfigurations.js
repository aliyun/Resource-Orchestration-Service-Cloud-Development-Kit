"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ScalingConfigurations = exports.ScalingConfigurationsProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ess_generated_1 = require("./ess.generated");
Object.defineProperty(exports, "ScalingConfigurationsProperty", { enumerable: true, get: function () { return ess_generated_1.RosScalingConfigurations; } });
/**
 * A ROS resource type:  `DATASOURCE::ESS::ScalingConfigurations`
 */
class ScalingConfigurations extends ros.Resource {
    /**
     * Create a new `DATASOURCE::ESS::ScalingConfigurations`.
     *
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props = {}, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosScalingConfigurations = new ess_generated_1.RosScalingConfigurations(this, id, {
            scalingGroupId: props.scalingGroupId,
            scalingConfigurationIds: props.scalingConfigurationIds,
            scalingConfigurationNames: props.scalingConfigurationNames,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosScalingConfigurations;
        this.attrScalingConfigurationIds = rosScalingConfigurations.attrScalingConfigurationIds;
        this.attrScalingConfigurations = rosScalingConfigurations.attrScalingConfigurations;
    }
}
exports.ScalingConfigurations = ScalingConfigurations;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NhbGluZ2NvbmZpZ3VyYXRpb25zLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic2NhbGluZ2NvbmZpZ3VyYXRpb25zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDhDQUE4QztBQUM5QyxtREFBMkQ7QUFFdEIsOEdBRjVCLHdDQUF3QixPQUVpQztBQXVCbEU7O0dBRUc7QUFDSCxNQUFhLHFCQUFzQixTQUFRLEdBQUcsQ0FBQyxRQUFRO0lBaUJuRDs7Ozs7O09BTUc7SUFDSCxZQUFZLEtBQW9CLEVBQUUsRUFBVSxFQUFFLFFBQW9DLEVBQUUsRUFBRSxtQ0FBMkMsSUFBSTtRQUNqSSxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRWpCLE1BQU0sd0JBQXdCLEdBQUcsSUFBSSx3Q0FBd0IsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFHO1lBQ3JFLGNBQWMsRUFBRSxLQUFLLENBQUMsY0FBYztZQUNwQyx1QkFBdUIsRUFBRSxLQUFLLENBQUMsdUJBQXVCO1lBQ3RELHlCQUF5QixFQUFFLEtBQUssQ0FBQyx5QkFBeUI7U0FDN0QsRUFBRSxnQ0FBZ0MsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7UUFDcEYsSUFBSSxDQUFDLFFBQVEsR0FBRyx3QkFBd0IsQ0FBQztRQUN6QyxJQUFJLENBQUMsMkJBQTJCLEdBQUcsd0JBQXdCLENBQUMsMkJBQTJCLENBQUM7UUFDeEYsSUFBSSxDQUFDLHlCQUF5QixHQUFHLHdCQUF3QixDQUFDLHlCQUF5QixDQUFDO0lBQ3hGLENBQUM7Q0FDSjtBQXBDRCxzREFvQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyByb3MgZnJvbSAnQGFsaWNsb3VkL3Jvcy1jZGstY29yZSc7XG5pbXBvcnQgeyBSb3NTY2FsaW5nQ29uZmlndXJhdGlvbnMgfSBmcm9tICcuL2Vzcy5nZW5lcmF0ZWQnO1xuLy8gR2VuZXJhdGVkIGZyb20gdGhlIEFsaUNsb3VkIFJPUyBSZXNvdXJjZSBTcGVjaWZpY2F0aW9uXG5leHBvcnQgeyBSb3NTY2FsaW5nQ29uZmlndXJhdGlvbnMgYXMgU2NhbGluZ0NvbmZpZ3VyYXRpb25zUHJvcGVydHkgfTtcblxuLyoqXG4gKiBQcm9wZXJ0aWVzIGZvciBkZWZpbmluZyBhIGBEQVRBU09VUkNFOjpFU1M6OlNjYWxpbmdDb25maWd1cmF0aW9uc2BcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBTY2FsaW5nQ29uZmlndXJhdGlvbnNQcm9wcyB7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBzY2FsaW5nQ29uZmlndXJhdGlvbklkczogVGhlIElEIG9mIHNjYWxpbmcgY29uZmlndXJhdGlvbiB0aGF0IHlvdSB3YW50IHRvIHF1ZXJ5LiBWYWxpZCB2YWx1ZXMgOiAxIHRvIDEwLiBUaGUgSURzIG9mIGFjdGl2ZSBhbmQgaW5hY3RpdmUgc2NhbGluZyBjb25maWd1cmF0aW9ucyBhcmUgZGlzcGxheWVkIGluIHRoZSBxdWVyeSByZXN1bHRzLCBhbmQgY2FuIGJlIGRpZmZlcmVudGlhdGVkIGJ5IExpZmVjeWNsZVN0YXRlLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHNjYWxpbmdDb25maWd1cmF0aW9uSWRzPzogQXJyYXk8c3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlPiB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHNjYWxpbmdDb25maWd1cmF0aW9uTmFtZXM6IFRoZSBuYW1lIG9mIHNjYWxpbmcgY29uZmlndXJhdGlvbiB0aGF0IHlvdSB3YW50IHRvIHF1ZXJ5LiBWYWxpZCB2YWx1ZXMgOiAxIHRvIDEwLiBUaGUgbmFtZXMgb2YgaW5hY3RpdmUgc2NhbGluZyBjb25maWd1cmF0aW9ucyBhcmUgbm90IGRpc3BsYXllZCBpbiB0aGUgcXVlcnkgcmVzdWx0cywgYW5kIG5vIGVycm9yIGlzIHJlcG9ydGVkLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHNjYWxpbmdDb25maWd1cmF0aW9uTmFtZXM/OiBBcnJheTxzdHJpbmcgfCByb3MuSVJlc29sdmFibGU+IHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgc2NhbGluZ0dyb3VwSWQ6IFRoZSBJRCBvZiB0aGUgc2NhbGluZyBncm91cC4gWW91IGNhbiB1c2UgdGhlIElEIHRvIHF1ZXJ5IGFsbCBzY2FsaW5nIGNvbmZpZ3VyYXRpb25zIGluIHRoZSBzY2FsaW5nIGdyb3VwLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHNjYWxpbmdHcm91cElkPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xufVxuXG4vKipcbiAqIEEgUk9TIHJlc291cmNlIHR5cGU6ICBgREFUQVNPVVJDRTo6RVNTOjpTY2FsaW5nQ29uZmlndXJhdGlvbnNgXG4gKi9cbmV4cG9ydCBjbGFzcyBTY2FsaW5nQ29uZmlndXJhdGlvbnMgZXh0ZW5kcyByb3MuUmVzb3VyY2Uge1xuXG4gICAgLyoqXG4gICAgICogQSBmYWN0b3J5IG1ldGhvZCB0aGF0IGNyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgdGhpcyBjbGFzcyBmcm9tIGFuIG9iamVjdFxuICAgICAqIGNvbnRhaW5pbmcgdGhlIHByb3BlcnRpZXMgb2YgdGhpcyBST1MgcmVzb3VyY2UsIHdoaWNoIHdpbGwgYmUgYXNzaWduZWQgdG8gUk9TIHJlc291cmNlLlxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIFNjYWxpbmdDb25maWd1cmF0aW9uSWRzOiBUaGUgbGlzdCBvZiBzY2FsaW5nIGNvbmZpZ3VyYXRpb24gSURzLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyU2NhbGluZ0NvbmZpZ3VyYXRpb25JZHM6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBTY2FsaW5nQ29uZmlndXJhdGlvbnM6IFRoZSBsaXN0IG9mIHNjYWxpbmcgY29uZmlndXJhdGlvbnMuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJTY2FsaW5nQ29uZmlndXJhdGlvbnM6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBgREFUQVNPVVJDRTo6RVNTOjpTY2FsaW5nQ29uZmlndXJhdGlvbnNgLlxuICAgICAqXG4gICAgICogUGFyYW0gc2NvcGUgLSBzY29wZSBpbiB3aGljaCB0aGlzIHJlc291cmNlIGlzIGRlZmluZWRcbiAgICAgKiBQYXJhbSBpZCAgICAtIHNjb3BlZCBpZCBvZiB0aGUgcmVzb3VyY2VcbiAgICAgKiBQYXJhbSBwcm9wcyAtIHJlc291cmNlIHByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihzY29wZTogcm9zLkNvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IFNjYWxpbmdDb25maWd1cmF0aW9uc1Byb3BzID0ge30sIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OmJvb2xlYW4gPSB0cnVlKSB7XG4gICAgICAgIHN1cGVyKHNjb3BlLCBpZCk7XG5cbiAgICAgICAgY29uc3Qgcm9zU2NhbGluZ0NvbmZpZ3VyYXRpb25zID0gbmV3IFJvc1NjYWxpbmdDb25maWd1cmF0aW9ucyh0aGlzLCBpZCwgIHtcbiAgICAgICAgICAgIHNjYWxpbmdHcm91cElkOiBwcm9wcy5zY2FsaW5nR3JvdXBJZCxcbiAgICAgICAgICAgIHNjYWxpbmdDb25maWd1cmF0aW9uSWRzOiBwcm9wcy5zY2FsaW5nQ29uZmlndXJhdGlvbklkcyxcbiAgICAgICAgICAgIHNjYWxpbmdDb25maWd1cmF0aW9uTmFtZXM6IHByb3BzLnNjYWxpbmdDb25maWd1cmF0aW9uTmFtZXMsXG4gICAgICAgIH0sIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ICYmIHRoaXMuc3RhY2suZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQpO1xuICAgICAgICB0aGlzLnJlc291cmNlID0gcm9zU2NhbGluZ0NvbmZpZ3VyYXRpb25zO1xuICAgICAgICB0aGlzLmF0dHJTY2FsaW5nQ29uZmlndXJhdGlvbklkcyA9IHJvc1NjYWxpbmdDb25maWd1cmF0aW9ucy5hdHRyU2NhbGluZ0NvbmZpZ3VyYXRpb25JZHM7XG4gICAgICAgIHRoaXMuYXR0clNjYWxpbmdDb25maWd1cmF0aW9ucyA9IHJvc1NjYWxpbmdDb25maWd1cmF0aW9ucy5hdHRyU2NhbGluZ0NvbmZpZ3VyYXRpb25zO1xuICAgIH1cbn1cbiJdfQ==