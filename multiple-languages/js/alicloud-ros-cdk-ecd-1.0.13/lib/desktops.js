"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Desktops = exports.DesktopsProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ecd_generated_1 = require("./ecd.generated");
Object.defineProperty(exports, "DesktopsProperty", { enumerable: true, get: function () { return ecd_generated_1.RosDesktops; } });
/**
 * A ROS resource type:  `ALIYUN::ECD::Desktops`
 */
class Desktops extends ros.Resource {
    /**
     * Create a new `ALIYUN::ECD::Desktops`.
     *
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosDesktops = new ecd_generated_1.RosDesktops(this, id, {
            userAssignMode: props.userAssignMode,
            userName: props.userName,
            promotionId: props.promotionId,
            policyGroupId: props.policyGroupId,
            autoRenew: props.autoRenew,
            amount: props.amount,
            desktopName: props.desktopName,
            hostname: props.hostname,
            period: props.period,
            volumeEncryptionEnabled: props.volumeEncryptionEnabled,
            autoPay: props.autoPay,
            groupId: props.groupId,
            officeSiteId: props.officeSiteId,
            desktopNameSuffix: props.desktopNameSuffix,
            bundleId: props.bundleId,
            directoryId: props.directoryId,
            endUserId: props.endUserId,
            vpcId: props.vpcId,
            chargeType: props.chargeType,
            volumeEncryptionKey: props.volumeEncryptionKey,
            tags: props.tags,
            periodUnit: props.periodUnit,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosDesktops;
        this.attrDesktopId = rosDesktops.attrDesktopId;
        this.attrOrderId = rosDesktops.attrOrderId;
    }
}
exports.Desktops = Desktops;
//# sourceMappingURL=data:application/json;base64,