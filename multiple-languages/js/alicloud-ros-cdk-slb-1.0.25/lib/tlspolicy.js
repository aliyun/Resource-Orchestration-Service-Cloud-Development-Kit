"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TLSPolicy = exports.TLSPolicyProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const slb_generated_1 = require("./slb.generated");
Object.defineProperty(exports, "TLSPolicyProperty", { enumerable: true, get: function () { return slb_generated_1.RosTLSPolicy; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::SLB::TLSPolicy`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosTLSPolicy`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-slb-tlspolicy
 */
class TLSPolicy extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosTLSPolicy = new slb_generated_1.RosTLSPolicy(this, id, {
            ciphers: props.ciphers,
            tlsPolicyName: props.tlsPolicyName,
            tlsVersions: props.tlsVersions,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosTLSPolicy;
        this.attrCiphers = rosTLSPolicy.attrCiphers;
        this.attrCreateTime = rosTLSPolicy.attrCreateTime;
        this.attrInstanceId = rosTLSPolicy.attrInstanceId;
        this.attrTlsPolicyName = rosTLSPolicy.attrTlsPolicyName;
        this.attrTlsVersions = rosTLSPolicy.attrTlsVersions;
    }
}
exports.TLSPolicy = TLSPolicy;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGxzcG9saWN5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidGxzcG9saWN5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDhDQUE4QztBQUM5QyxtREFBK0M7QUFFdEIsa0dBRmhCLDRCQUFZLE9BRXFCO0FBeUQxQzs7OztHQUlHO0FBQ0gsTUFBYSxTQUFVLFNBQVEsR0FBRyxDQUFDLFFBQVE7SUErQnZDOzs7O09BSUc7SUFDSCxZQUFZLEtBQW9CLEVBQUUsRUFBVSxFQUFFLEtBQXFCLEVBQUUsbUNBQTJDLElBQUk7UUFDaEgsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNqQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUNiLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxnQ0FBZ0MsR0FBRyxnQ0FBZ0MsQ0FBQztRQUV6RSxNQUFNLFlBQVksR0FBRyxJQUFJLDRCQUFZLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRztZQUM3QyxPQUFPLEVBQUUsS0FBSyxDQUFDLE9BQU87WUFDdEIsYUFBYSxFQUFFLEtBQUssQ0FBQyxhQUFhO1lBQ2xDLFdBQVcsRUFBRSxLQUFLLENBQUMsV0FBVztTQUNqQyxFQUFFLGdDQUFnQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztRQUNwRixJQUFJLENBQUMsUUFBUSxHQUFHLFlBQVksQ0FBQztRQUM3QixJQUFJLENBQUMsV0FBVyxHQUFHLFlBQVksQ0FBQyxXQUFXLENBQUM7UUFDNUMsSUFBSSxDQUFDLGNBQWMsR0FBRyxZQUFZLENBQUMsY0FBYyxDQUFDO1FBQ2xELElBQUksQ0FBQyxjQUFjLEdBQUcsWUFBWSxDQUFDLGNBQWMsQ0FBQztRQUNsRCxJQUFJLENBQUMsaUJBQWlCLEdBQUcsWUFBWSxDQUFDLGlCQUFpQixDQUFDO1FBQ3hELElBQUksQ0FBQyxlQUFlLEdBQUcsWUFBWSxDQUFDLGVBQWUsQ0FBQztJQUN4RCxDQUFDO0NBQ0o7QUF2REQsOEJBdURDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcm9zIGZyb20gJ0BhbGljbG91ZC9yb3MtY2RrLWNvcmUnO1xuaW1wb3J0IHsgUm9zVExTUG9saWN5IH0gZnJvbSAnLi9zbGIuZ2VuZXJhdGVkJztcbi8vIEdlbmVyYXRlZCBmcm9tIHRoZSBBbGlDbG91ZCBST1MgUmVzb3VyY2UgU3BlY2lmaWNhdGlvblxuZXhwb3J0IHsgUm9zVExTUG9saWN5IGFzIFRMU1BvbGljeVByb3BlcnR5IH07XG5cbi8qKlxuICogUHJvcGVydGllcyBmb3IgZGVmaW5pbmcgYSBgVExTUG9saWN5YC5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvYWxpeXVuLXNsYi10bHNwb2xpY3lcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBUTFNQb2xpY3lQcm9wcyB7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBjaXBoZXJzOiBUaGUgc3VwcG9ydGVkIGNpcGhlciBzdWl0ZXMsIHdoaWNoIGFyZSBkZXRlcm1pbmVkIGJ5IHRoZSBUTFMgcHJvdG9jb2wgdmVyc2lvbi4gWW91IGNhbiBzcGVjaWZ5IGF0IG1vc3QgMzIgY2lwaGVyIHN1aXRlcy5UTFMgMS4wIGFuZCBUTFMgMS4xIHN1cHBvcnQgdGhlIGZvbGxvd2luZyBjaXBoZXIgc3VpdGVzOlxuICAgICAqIEVDREhFLUVDRFNBLUFFUzEyOC1TSEFcbiAgICAgKiBFQ0RIRS1FQ0RTQS1BRVMyNTYtU0hBXG4gICAgICogRUNESEUtUlNBLUFFUzEyOC1TSEFcbiAgICAgKiBFQ0RIRS1SU0EtQUVTMjU2LVNIQVxuICAgICAqIEFFUzEyOC1TSEFcbiAgICAgKiBBRVMyNTYtU0hBXG4gICAgICogREVTLUNCQzMtU0hBXG4gICAgICogVExTIDEuMiBzdXBwb3J0cyB0aGUgZm9sbG93aW5nIGNpcGhlciBzdWl0ZXM6XG4gICAgICogRUNESEUtRUNEU0EtQUVTMTI4LVNIQVxuICAgICAqIEVDREhFLUVDRFNBLUFFUzI1Ni1TSEFcbiAgICAgKiBFQ0RIRS1SU0EtQUVTMTI4LVNIQVxuICAgICAqIEVDREhFLVJTQS1BRVMyNTYtU0hBXG4gICAgICogQUVTMTI4LVNIQVxuICAgICAqIEFFUzI1Ni1TSEFcbiAgICAgKiBERVMtQ0JDMy1TSEFcbiAgICAgKiBFQ0RIRS1FQ0RTQS1BRVMxMjgtR0NNLVNIQTI1NlxuICAgICAqIEVDREhFLUVDRFNBLUFFUzI1Ni1HQ00tU0hBMzg0XG4gICAgICogRUNESEUtRUNEU0EtQUVTMTI4LVNIQTI1NlxuICAgICAqIEVDREhFLUVDRFNBLUFFUzI1Ni1TSEEzODRcbiAgICAgKiBFQ0RIRS1SU0EtQUVTMTI4LUdDTS1TSEEyNTZcbiAgICAgKiBFQ0RIRS1SU0EtQUVTMjU2LUdDTS1TSEEzODRcbiAgICAgKiBFQ0RIRS1SU0EtQUVTMTI4LVNIQTI1NlxuICAgICAqIEVDREhFLVJTQS1BRVMyNTYtU0hBMzg0XG4gICAgICogQUVTMTI4LUdDTS1TSEEyNTZcbiAgICAgKiBBRVMyNTYtR0NNLVNIQTM4NFxuICAgICAqIEFFUzEyOC1TSEEyNTZcbiAgICAgKiBBRVMyNTYtU0hBMjU2XG4gICAgICogVExTIDEuMyBzdXBwb3J0cyB0aGUgZm9sbG93aW5nIGNpcGhlciBzdWl0ZXM6XG4gICAgICogVExTX0FFU18xMjhfR0NNX1NIQTI1NlxuICAgICAqIFRMU19BRVNfMjU2X0dDTV9TSEEzODRcbiAgICAgKiBUTFNfQ0hBQ0hBMjBfUE9MWTEzMDVfU0hBMjU2XG4gICAgICogVExTX0FFU18xMjhfQ0NNX1NIQTI1NlxuICAgICAqIFRMU19BRVNfMTI4X0NDTV84X1NIQTI1NlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGNpcGhlcnM6IEFycmF5PHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZT4gfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSB0bHNQb2xpY3lOYW1lOiBUaGUgbmFtZSBvZiB0aGUgVExTIHBvbGljeS4gVGhlIG5hbWUgbXVzdCBiZSAxIHRvIDIwMCBjaGFyYWN0ZXJzIGluIGxlbmd0aCwgYW5kIGNhbiBjb250YWluIGxldHRlcnMsIGRpZ2l0cywgcGVyaW9kcyAoLiksIHVuZGVyc2NvcmVzIChfKSwgYW5kIGh5cGhlbnMgKC0pLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHRsc1BvbGljeU5hbWU6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHRsc1ZlcnNpb25zOiBUaGUgdmVyc2lvbiBvZiB0aGUgVExTIHByb3RvY29sLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHRsc1ZlcnNpb25zOiBBcnJheTxzdHJpbmcgfCByb3MuSVJlc29sdmFibGU+IHwgcm9zLklSZXNvbHZhYmxlO1xufVxuXG4vKipcbiAqIFRoaXMgY2xhc3MgZW5jYXBzdWxhdGVzIGFuZCBleHRlbmRzIHRoZSBST1MgcmVzb3VyY2UgdHlwZSBgQUxJWVVOOjpTTEI6OlRMU1BvbGljeWAuXG4gKiBATm90ZSBUaGlzIGNsYXNzIG1heSBoYXZlIHNvbWUgbmV3IGZ1bmN0aW9ucyB0byBmYWNpbGl0YXRlIGRldmVsb3BtZW50LCBzbyBpdCBpcyByZWNvbW1lbmRlZCB0byB1c2UgdGhpcyBjbGFzcyBpbnN0ZWFkIG9mIGBSb3NUTFNQb2xpY3lgZm9yIGEgbW9yZSBjb252ZW5pZW50IGRldmVsb3BtZW50IGV4cGVyaWVuY2UuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2FsaXl1bi1zbGItdGxzcG9saWN5XG4gKi9cbmV4cG9ydCBjbGFzcyBUTFNQb2xpY3kgZXh0ZW5kcyByb3MuUmVzb3VyY2Uge1xuICAgIHByb3RlY3RlZCBzY29wZTogcm9zLkNvbnN0cnVjdDtcbiAgICBwcm90ZWN0ZWQgaWQ6IHN0cmluZztcbiAgICBwcm90ZWN0ZWQgcHJvcHM6IFRMU1BvbGljeVByb3BzO1xuICAgIHByb3RlY3RlZCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBDaXBoZXJzOiBUaGUgc3VwcG9ydGVkIGNpcGhlciBzdWl0ZXMsIHdoaWNoIGFyZSBkZXRlcm1pbmVkIGJ5IHRoZSBUTFMgcHJvdG9jb2wgdmVyc2lvbi5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckNpcGhlcnM6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBDcmVhdGVUaW1lOiBDcmVhdGlvbiB0aW1lLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyQ3JlYXRlVGltZTogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIEluc3RhbmNlSWQ6IFRoZSBJRCBvZiB0aGUgcG9saWN5LlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRySW5zdGFuY2VJZDogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIFRMU1BvbGljeU5hbWU6IFRoZSBuYW1lIG9mIHRoZSBUTFMgcG9saWN5LlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyVGxzUG9saWN5TmFtZTogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIFRsc1ZlcnNpb25zOiBUaGUgdmVyc2lvbiBvZiB0aGUgVExTIHByb3RvY29sLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyVGxzVmVyc2lvbnM6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFBhcmFtIHNjb3BlIC0gc2NvcGUgaW4gd2hpY2ggdGhpcyByZXNvdXJjZSBpcyBkZWZpbmVkXG4gICAgICogUGFyYW0gaWQgICAgLSBzY29wZWQgaWQgb2YgdGhlIHJlc291cmNlXG4gICAgICogUGFyYW0gcHJvcHMgLSByZXNvdXJjZSBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IHJvcy5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBUTFNQb2xpY3lQcm9wcywgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6Ym9vbGVhbiA9IHRydWUpIHtcbiAgICAgICAgc3VwZXIoc2NvcGUsIGlkKTtcbiAgICAgICAgdGhpcy5zY29wZSA9IHNjb3BlO1xuICAgICAgICB0aGlzLmlkID0gaWQ7XG4gICAgICAgIHRoaXMucHJvcHMgPSBwcm9wcztcbiAgICAgICAgdGhpcy5lbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCA9IGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50O1xuXG4gICAgICAgIGNvbnN0IHJvc1RMU1BvbGljeSA9IG5ldyBSb3NUTFNQb2xpY3kodGhpcywgaWQsICB7XG4gICAgICAgICAgICBjaXBoZXJzOiBwcm9wcy5jaXBoZXJzLFxuICAgICAgICAgICAgdGxzUG9saWN5TmFtZTogcHJvcHMudGxzUG9saWN5TmFtZSxcbiAgICAgICAgICAgIHRsc1ZlcnNpb25zOiBwcm9wcy50bHNWZXJzaW9ucyxcbiAgICAgICAgfSwgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgJiYgdGhpcy5zdGFjay5lbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCk7XG4gICAgICAgIHRoaXMucmVzb3VyY2UgPSByb3NUTFNQb2xpY3k7XG4gICAgICAgIHRoaXMuYXR0ckNpcGhlcnMgPSByb3NUTFNQb2xpY3kuYXR0ckNpcGhlcnM7XG4gICAgICAgIHRoaXMuYXR0ckNyZWF0ZVRpbWUgPSByb3NUTFNQb2xpY3kuYXR0ckNyZWF0ZVRpbWU7XG4gICAgICAgIHRoaXMuYXR0ckluc3RhbmNlSWQgPSByb3NUTFNQb2xpY3kuYXR0ckluc3RhbmNlSWQ7XG4gICAgICAgIHRoaXMuYXR0clRsc1BvbGljeU5hbWUgPSByb3NUTFNQb2xpY3kuYXR0clRsc1BvbGljeU5hbWU7XG4gICAgICAgIHRoaXMuYXR0clRsc1ZlcnNpb25zID0gcm9zVExTUG9saWN5LmF0dHJUbHNWZXJzaW9ucztcbiAgICB9XG59XG4iXX0=