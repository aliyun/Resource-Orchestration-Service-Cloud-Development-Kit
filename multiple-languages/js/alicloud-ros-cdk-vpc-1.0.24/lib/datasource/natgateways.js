"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NatGateways = exports.NatGatewaysProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const vpc_generated_1 = require("./vpc.generated");
Object.defineProperty(exports, "NatGatewaysProperty", { enumerable: true, get: function () { return vpc_generated_1.RosNatGateways; } });
/**
 * This class encapsulates and extends the ROS resource type `DATASOURCE::VPC::NatGateways`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosNatGateways`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/datasource-vpc-natgateways
 */
class NatGateways extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props = {}, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosNatGateways = new vpc_generated_1.RosNatGateways(this, id, {
            status: props.status,
            vpcId: props.vpcId,
            zoneId: props.zoneId,
            resourceGroupId: props.resourceGroupId,
            instanceChargeType: props.instanceChargeType === undefined || props.instanceChargeType === null ? 'PostPaid' : props.instanceChargeType,
            networkType: props.networkType,
            natType: props.natType,
            natGatewayId: props.natGatewayId,
            name: props.name,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosNatGateways;
        this.attrNatGatewayIds = rosNatGateways.attrNatGatewayIds;
        this.attrNatGateways = rosNatGateways.attrNatGateways;
    }
}
exports.NatGateways = NatGateways;
//# sourceMappingURL=data:application/json;base64,