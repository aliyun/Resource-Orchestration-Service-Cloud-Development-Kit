"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AntiBruteForceRules = exports.AntiBruteForceRulesProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const threatdetection_generated_1 = require("./threatdetection.generated");
Object.defineProperty(exports, "AntiBruteForceRulesProperty", { enumerable: true, get: function () { return threatdetection_generated_1.RosAntiBruteForceRules; } });
/**
 * A ROS resource type:  `DATASOURCE::ThreatDetection::AntiBruteForceRules`
 */
class AntiBruteForceRules extends ros.Resource {
    /**
     * Create a new `DATASOURCE::ThreatDetection::AntiBruteForceRules`.
     *
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props = {}, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosAntiBruteForceRules = new threatdetection_generated_1.RosAntiBruteForceRules(this, id, {}, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        props;
        this.resource = rosAntiBruteForceRules;
        this.attrAntiBruteForceRuleIds = rosAntiBruteForceRules.attrAntiBruteForceRuleIds;
        this.attrAntiBruteForceRules = rosAntiBruteForceRules.attrAntiBruteForceRules;
    }
}
exports.AntiBruteForceRules = AntiBruteForceRules;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW50aWJydXRlZm9yY2VydWxlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImFudGlicnV0ZWZvcmNlcnVsZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsOENBQThDO0FBQzlDLDJFQUFxRTtBQUVsQyw0R0FGMUIsa0RBQXNCLE9BRStCO0FBUTlEOztHQUVHO0FBQ0gsTUFBYSxtQkFBb0IsU0FBUSxHQUFHLENBQUMsUUFBUTtJQWlCakQ7Ozs7OztPQU1HO0lBQ0gsWUFBWSxLQUFvQixFQUFFLEVBQVUsRUFBRSxRQUFrQyxFQUFFLEVBQUUsbUNBQTJDLElBQUk7UUFDL0gsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUVqQixNQUFNLHNCQUFzQixHQUFHLElBQUksa0RBQXNCLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRyxFQUNwRSxFQUFFLGdDQUFnQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztRQUNwRixLQUFLLENBQUM7UUFDTixJQUFJLENBQUMsUUFBUSxHQUFHLHNCQUFzQixDQUFDO1FBQ3ZDLElBQUksQ0FBQyx5QkFBeUIsR0FBRyxzQkFBc0IsQ0FBQyx5QkFBeUIsQ0FBQztRQUNsRixJQUFJLENBQUMsdUJBQXVCLEdBQUcsc0JBQXNCLENBQUMsdUJBQXVCLENBQUM7SUFDbEYsQ0FBQztDQUNKO0FBbENELGtEQWtDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHJvcyBmcm9tICdAYWxpY2xvdWQvcm9zLWNkay1jb3JlJztcbmltcG9ydCB7IFJvc0FudGlCcnV0ZUZvcmNlUnVsZXMgfSBmcm9tICcuL3RocmVhdGRldGVjdGlvbi5nZW5lcmF0ZWQnO1xuLy8gR2VuZXJhdGVkIGZyb20gdGhlIEFsaUNsb3VkIFJPUyBSZXNvdXJjZSBTcGVjaWZpY2F0aW9uXG5leHBvcnQgeyBSb3NBbnRpQnJ1dGVGb3JjZVJ1bGVzIGFzIEFudGlCcnV0ZUZvcmNlUnVsZXNQcm9wZXJ0eSB9O1xuXG4vKipcbiAqIFByb3BlcnRpZXMgZm9yIGRlZmluaW5nIGEgYERBVEFTT1VSQ0U6OlRocmVhdERldGVjdGlvbjo6QW50aUJydXRlRm9yY2VSdWxlc2BcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBBbnRpQnJ1dGVGb3JjZVJ1bGVzUHJvcHMge1xufVxuXG4vKipcbiAqIEEgUk9TIHJlc291cmNlIHR5cGU6ICBgREFUQVNPVVJDRTo6VGhyZWF0RGV0ZWN0aW9uOjpBbnRpQnJ1dGVGb3JjZVJ1bGVzYFxuICovXG5leHBvcnQgY2xhc3MgQW50aUJydXRlRm9yY2VSdWxlcyBleHRlbmRzIHJvcy5SZXNvdXJjZSB7XG5cbiAgICAvKipcbiAgICAgKiBBIGZhY3RvcnkgbWV0aG9kIHRoYXQgY3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzIGZyb20gYW4gb2JqZWN0XG4gICAgICogY29udGFpbmluZyB0aGUgcHJvcGVydGllcyBvZiB0aGlzIFJPUyByZXNvdXJjZSwgd2hpY2ggd2lsbCBiZSBhc3NpZ25lZCB0byBST1MgcmVzb3VyY2UuXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgQW50aUJydXRlRm9yY2VSdWxlSWRzOiBUaGUgbGlzdCBvZiBhbnRpIGJydXRlIGZvcmNlIHJ1bGUgSURzLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyQW50aUJydXRlRm9yY2VSdWxlSWRzOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgQW50aUJydXRlRm9yY2VSdWxlczogVGhlIGxpc3Qgb2YgYW50aSBicnV0ZSBmb3JjZSBydWxlcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckFudGlCcnV0ZUZvcmNlUnVsZXM6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBgREFUQVNPVVJDRTo6VGhyZWF0RGV0ZWN0aW9uOjpBbnRpQnJ1dGVGb3JjZVJ1bGVzYC5cbiAgICAgKlxuICAgICAqIFBhcmFtIHNjb3BlIC0gc2NvcGUgaW4gd2hpY2ggdGhpcyByZXNvdXJjZSBpcyBkZWZpbmVkXG4gICAgICogUGFyYW0gaWQgICAgLSBzY29wZWQgaWQgb2YgdGhlIHJlc291cmNlXG4gICAgICogUGFyYW0gcHJvcHMgLSByZXNvdXJjZSBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IHJvcy5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBBbnRpQnJ1dGVGb3JjZVJ1bGVzUHJvcHMgPSB7fSwgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6Ym9vbGVhbiA9IHRydWUpIHtcbiAgICAgICAgc3VwZXIoc2NvcGUsIGlkKTtcblxuICAgICAgICBjb25zdCByb3NBbnRpQnJ1dGVGb3JjZVJ1bGVzID0gbmV3IFJvc0FudGlCcnV0ZUZvcmNlUnVsZXModGhpcywgaWQsICB7XG4gICAgICAgIH0sIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ICYmIHRoaXMuc3RhY2suZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQpO1xuICAgICAgICBwcm9wcztcbiAgICAgICAgdGhpcy5yZXNvdXJjZSA9IHJvc0FudGlCcnV0ZUZvcmNlUnVsZXM7XG4gICAgICAgIHRoaXMuYXR0ckFudGlCcnV0ZUZvcmNlUnVsZUlkcyA9IHJvc0FudGlCcnV0ZUZvcmNlUnVsZXMuYXR0ckFudGlCcnV0ZUZvcmNlUnVsZUlkcztcbiAgICAgICAgdGhpcy5hdHRyQW50aUJydXRlRm9yY2VSdWxlcyA9IHJvc0FudGlCcnV0ZUZvcmNlUnVsZXMuYXR0ckFudGlCcnV0ZUZvcmNlUnVsZXM7XG4gICAgfVxufVxuIl19