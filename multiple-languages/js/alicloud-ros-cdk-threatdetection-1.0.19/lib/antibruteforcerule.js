"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AntiBruteForceRule = exports.AntiBruteForceRuleProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const threatdetection_generated_1 = require("./threatdetection.generated");
Object.defineProperty(exports, "AntiBruteForceRuleProperty", { enumerable: true, get: function () { return threatdetection_generated_1.RosAntiBruteForceRule; } });
/**
 * A ROS resource type:  `ALIYUN::ThreatDetection::AntiBruteForceRule`
 */
class AntiBruteForceRule extends ros.Resource {
    /**
     * Create a new `ALIYUN::ThreatDetection::AntiBruteForceRule`.
     *
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosAntiBruteForceRule = new threatdetection_generated_1.RosAntiBruteForceRule(this, id, {
            defaultRule: props.defaultRule,
            antiBruteForceRuleName: props.antiBruteForceRuleName,
            forbiddenTime: props.forbiddenTime,
            uuidList: props.uuidList,
            failCount: props.failCount,
            span: props.span,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosAntiBruteForceRule;
        this.attrAntiBruteForceRuleId = rosAntiBruteForceRule.attrAntiBruteForceRuleId;
        this.attrAntiBruteForceRuleName = rosAntiBruteForceRule.attrAntiBruteForceRuleName;
        this.attrDefaultRule = rosAntiBruteForceRule.attrDefaultRule;
        this.attrFailCount = rosAntiBruteForceRule.attrFailCount;
        this.attrForbiddenTime = rosAntiBruteForceRule.attrForbiddenTime;
        this.attrSpan = rosAntiBruteForceRule.attrSpan;
        this.attrUuidList = rosAntiBruteForceRule.attrUuidList;
    }
}
exports.AntiBruteForceRule = AntiBruteForceRule;
//# sourceMappingURL=data:application/json;base64,