"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Exchange = exports.ExchangeProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const amqp_generated_1 = require("./amqp.generated");
Object.defineProperty(exports, "ExchangeProperty", { enumerable: true, get: function () { return amqp_generated_1.RosExchange; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::AMQP::Exchange`, which is used to create an exchange.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosExchange`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-amqp-exchange
 */
class Exchange extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosExchange = new amqp_generated_1.RosExchange(this, id, {
            instanceId: props.instanceId,
            alternateExchange: props.alternateExchange,
            internal: props.internal,
            virtualHost: props.virtualHost,
            autoDeleteState: props.autoDeleteState,
            exchangeName: props.exchangeName,
            exchangeType: props.exchangeType,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosExchange;
        this.attrExchangeName = rosExchange.attrExchangeName;
    }
}
exports.Exchange = Exchange;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhjaGFuZ2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJleGNoYW5nZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw4Q0FBOEM7QUFDOUMscURBQStDO0FBRXZCLGlHQUZmLDRCQUFXLE9BRW9CO0FBb0R4Qzs7OztHQUlHO0FBQ0gsTUFBYSxRQUFTLFNBQVEsR0FBRyxDQUFDLFFBQVE7SUFPdEM7Ozs7T0FJRztJQUNILFlBQVksS0FBb0IsRUFBRSxFQUFVLEVBQUUsS0FBb0IsRUFBRSxtQ0FBMkMsSUFBSTtRQUMvRyxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRWpCLE1BQU0sV0FBVyxHQUFHLElBQUksNEJBQVcsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFHO1lBQzNDLFVBQVUsRUFBRSxLQUFLLENBQUMsVUFBVTtZQUM1QixpQkFBaUIsRUFBRSxLQUFLLENBQUMsaUJBQWlCO1lBQzFDLFFBQVEsRUFBRSxLQUFLLENBQUMsUUFBUTtZQUN4QixXQUFXLEVBQUUsS0FBSyxDQUFDLFdBQVc7WUFDOUIsZUFBZSxFQUFFLEtBQUssQ0FBQyxlQUFlO1lBQ3RDLFlBQVksRUFBRSxLQUFLLENBQUMsWUFBWTtZQUNoQyxZQUFZLEVBQUUsS0FBSyxDQUFDLFlBQVk7U0FDbkMsRUFBRSxnQ0FBZ0MsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7UUFDcEYsSUFBSSxDQUFDLFFBQVEsR0FBRyxXQUFXLENBQUM7UUFDNUIsSUFBSSxDQUFDLGdCQUFnQixHQUFHLFdBQVcsQ0FBQyxnQkFBZ0IsQ0FBQztJQUN6RCxDQUFDO0NBQ0o7QUEzQkQsNEJBMkJDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcm9zIGZyb20gJ0BhbGljbG91ZC9yb3MtY2RrLWNvcmUnO1xuaW1wb3J0IHsgUm9zRXhjaGFuZ2UgfSBmcm9tICcuL2FtcXAuZ2VuZXJhdGVkJztcbi8vIEdlbmVyYXRlZCBmcm9tIHRoZSBBbGlDbG91ZCBST1MgUmVzb3VyY2UgU3BlY2lmaWNhdGlvblxuZXhwb3J0IHsgUm9zRXhjaGFuZ2UgYXMgRXhjaGFuZ2VQcm9wZXJ0eSB9O1xuXG4vKipcbiAqIFByb3BlcnRpZXMgZm9yIGRlZmluaW5nIGEgYEV4Y2hhbmdlYC5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvYWxpeXVuLWFtcXAtZXhjaGFuZ2VcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBFeGNoYW5nZVByb3BzIHtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGF1dG9EZWxldGVTdGF0ZTogU3BlY2lmaWVzIHdoZXRoZXIgdGhlIEF1dG8gRGVsZXRlIGF0dHJpYnV0ZSBpcyBjb25maWd1cmVkLiBWYWxpZCB2YWx1ZXM6XG4gICAgICogdHJ1ZTogVGhlIEF1dG8gRGVsZXRlIGF0dHJpYnV0ZSBpcyBjb25maWd1cmVkLiBJZiB0aGUgbGFzdCBxdWV1ZSB0aGF0IGlzIGJvdW5kIHRvIGFuIGV4Y2hhbmdlIGlzIHVuYm91bmQsIHRoZSBleGNoYW5nZSBpcyBhdXRvbWF0aWNhbGx5IGRlbGV0ZWQuXG4gICAgICogZmFsc2U6IFRoZSBBdXRvIERlbGV0ZSBhdHRyaWJ1dGUgaXMgbm90IGNvbmZpZ3VyZWQuIElmIHRoZSBsYXN0IHF1ZXVlIHRoYXQgaXMgYm91bmQgdG8gYW4gZXhjaGFuZ2UgaXMgdW5ib3VuZCwgdGhlIGV4Y2hhbmdlIGlzIG5vdCBhdXRvbWF0aWNhbGx5IGRlbGV0ZWQuXG4gICAgICovXG4gICAgcmVhZG9ubHkgYXV0b0RlbGV0ZVN0YXRlOiBib29sZWFuIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgZXhjaGFuZ2VOYW1lOiBUaGUgbmFtZSBvZiB0aGUgZXhjaGFuZ2UuXG4gICAgICovXG4gICAgcmVhZG9ubHkgZXhjaGFuZ2VOYW1lOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBleGNoYW5nZVR5cGU6IFRoZSB0eXBlIG9mIHRoZSBleGNoYW5nZS4gVmFsaWQgdmFsdWVzOlxuICAgICAqIEZBTk9VVDogQW4gZXhjaGFuZ2Ugb2YgdGhpcyB0eXBlIHJvdXRlcyBhbGwgdGhlIHJlY2VpdmVkIG1lc3NhZ2VzIHRvIGFsbCB0aGUgcXVldWVzIGJvdW5kIHRvIHRoaXMgZXhjaGFuZ2UuIFlvdSBjYW4gdXNlIGEgZmFub3V0IGV4Y2hhbmdlIHRvIGJyb2FkY2FzdCBtZXNzYWdlcy5cbiAgICAgKiBESVJFQ1Q6IEFuIGV4Y2hhbmdlIG9mIHRoaXMgdHlwZSByb3V0ZXMgYSBtZXNzYWdlIHRvIHRoZSBxdWV1ZSB3aG9zZSBiaW5kaW5nIGtleSBpcyBleGFjdGx5IHRoZSBzYW1lIGFzIHRoZSByb3V0aW5nIGtleSBvZiB0aGUgbWVzc2FnZS5cbiAgICAgKiBUT1BJQzogVGhpcyB0eXBlIGlzIHNpbWlsYXIgdG8gdGhlIGRpcmVjdCBleGNoYW5nZSB0eXBlLiBBbiBleGNoYW5nZSBvZiB0aGlzIHR5cGUgcm91dGVzIGEgbWVzc2FnZSB0byBvbmUgb3IgbW9yZSBxdWV1ZXMgYmFzZWQgb24gdGhlIGZ1enp5IG1hdGNoIG9yIG11bHRpLWNvbmRpdGlvbiBtYXRjaCByZXN1bHQgYmV0d2VlbiB0aGUgcm91dGluZyBrZXkgb2YgdGhlIG1lc3NhZ2UgYW5kIHRoZSBiaW5kaW5nIGtleXMgb2YgdGhlIGN1cnJlbnQgZXhjaGFuZ2UuXG4gICAgICogSEVBREVSUzogSGVhZGVycyBFeGNoYW5nZSB1c2VzIHRoZSBIZWFkZXJzIHByb3BlcnR5IGluc3RlYWQgb2YgUm91dGluZyBLZXkgZm9yIHJvdXRpbmcgbWF0Y2hpbmcuIFdoZW4gYmluZGluZyBIZWFkZXJzIEV4Y2hhbmdlIGFuZCBRdWV1ZSwgc2V0IHRoZSBrZXktdmFsdWUgcGFpciBvZiB0aGUgYmluZGluZyBwcm9wZXJ0eTsgd2hlbiBzZW5kaW5nIGEgbWVzc2FnZSB0byB0aGUgSGVhZGVycyBFeGNoYW5nZSwgc2V0IHRoZSBtZXNzYWdlJ3MgSGVhZGVycyBwcm9wZXJ0eSBrZXktdmFsdWUgcGFpciBhbmQgdXNlIHRoZSBtZXNzYWdlIEhlYWRlcnMgVGhlIG1lc3NhZ2UgaXMgcm91dGVkIHRvIHRoZSBib3VuZCBRdWV1ZSBieSBjb21wYXJpbmcgdGhlIGF0dHJpYnV0ZSBrZXktdmFsdWUgcGFpciBhbmQgdGhlIGJvdW5kIGF0dHJpYnV0ZSBrZXktdmFsdWUgcGFpci5cbiAgICAgKi9cbiAgICByZWFkb25seSBleGNoYW5nZVR5cGU6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGluc3RhbmNlSWQ6IEluc3RhbmNlSWRcbiAgICAgKi9cbiAgICByZWFkb25seSBpbnN0YW5jZUlkOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBpbnRlcm5hbDogU3BlY2lmaWVzIHdoZXRoZXIgYW4gZXhjaGFuZ2UgaXMgYW4gaW50ZXJuYWwgZXhjaGFuZ2UuIFZhbGlkIHZhbHVlczpcbiAgICAgKiBmYWxzZTogVGhlIGV4Y2hhbmdlIGlzIG5vdCBhbiBpbnRlcm5hbCBleGNoYW5nZS5cbiAgICAgKiB0cnVlOiBUaGUgZXhjaGFuZ2UgaXMgYW4gaW50ZXJuYWwgZXhjaGFuZ2UuXG4gICAgICovXG4gICAgcmVhZG9ubHkgaW50ZXJuYWw6IGJvb2xlYW4gfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSB2aXJ0dWFsSG9zdDogVGhlIG5hbWUgb2YgdGhlIHZpcnR1YWwgaG9zdC5cbiAgICAgKi9cbiAgICByZWFkb25seSB2aXJ0dWFsSG9zdDogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgYWx0ZXJuYXRlRXhjaGFuZ2U6IFRoZSBhbHRlcm5hdGUgZXhjaGFuZ2UuIEFuIGFsdGVybmF0ZSBleGNoYW5nZSBpcyBjb25maWd1cmVkIGZvciBhbiBleGlzdGluZyBleGNoYW5nZS4gSXQgaXMgdXNlZCB0byByZWNlaXZlIG1lc3NhZ2VzIHRoYXQgZmFpbCB0byBiZSByb3V0ZWQgdG8gcXVldWVzIGZyb20gdGhlIGV4aXN0aW5nIGV4Y2hhbmdlLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGFsdGVybmF0ZUV4Y2hhbmdlPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xufVxuXG4vKipcbiAqIFRoaXMgY2xhc3MgZW5jYXBzdWxhdGVzIGFuZCBleHRlbmRzIHRoZSBST1MgcmVzb3VyY2UgdHlwZSBgQUxJWVVOOjpBTVFQOjpFeGNoYW5nZWAsIHdoaWNoIGlzIHVzZWQgdG8gY3JlYXRlIGFuIGV4Y2hhbmdlLlxuICogQE5vdGUgVGhpcyBjbGFzcyBtYXkgaGF2ZSBzb21lIG5ldyBmdW5jdGlvbnMgdG8gZmFjaWxpdGF0ZSBkZXZlbG9wbWVudCwgc28gaXQgaXMgcmVjb21tZW5kZWQgdG8gdXNlIHRoaXMgY2xhc3MgaW5zdGVhZCBvZiBgUm9zRXhjaGFuZ2VgZm9yIGEgbW9yZSBjb252ZW5pZW50IGRldmVsb3BtZW50IGV4cGVyaWVuY2UuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2FsaXl1bi1hbXFwLWV4Y2hhbmdlXG4gKi9cbmV4cG9ydCBjbGFzcyBFeGNoYW5nZSBleHRlbmRzIHJvcy5SZXNvdXJjZSB7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgRXhjaGFuZ2VOYW1lOiBUaGUgbmFtZSBvZiB0aGUgZXhjaGFuZ2UuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJFeGNoYW5nZU5hbWU6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFBhcmFtIHNjb3BlIC0gc2NvcGUgaW4gd2hpY2ggdGhpcyByZXNvdXJjZSBpcyBkZWZpbmVkXG4gICAgICogUGFyYW0gaWQgICAgLSBzY29wZWQgaWQgb2YgdGhlIHJlc291cmNlXG4gICAgICogUGFyYW0gcHJvcHMgLSByZXNvdXJjZSBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IHJvcy5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBFeGNoYW5nZVByb3BzLCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDpib29sZWFuID0gdHJ1ZSkge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQpO1xuXG4gICAgICAgIGNvbnN0IHJvc0V4Y2hhbmdlID0gbmV3IFJvc0V4Y2hhbmdlKHRoaXMsIGlkLCAge1xuICAgICAgICAgICAgaW5zdGFuY2VJZDogcHJvcHMuaW5zdGFuY2VJZCxcbiAgICAgICAgICAgIGFsdGVybmF0ZUV4Y2hhbmdlOiBwcm9wcy5hbHRlcm5hdGVFeGNoYW5nZSxcbiAgICAgICAgICAgIGludGVybmFsOiBwcm9wcy5pbnRlcm5hbCxcbiAgICAgICAgICAgIHZpcnR1YWxIb3N0OiBwcm9wcy52aXJ0dWFsSG9zdCxcbiAgICAgICAgICAgIGF1dG9EZWxldGVTdGF0ZTogcHJvcHMuYXV0b0RlbGV0ZVN0YXRlLFxuICAgICAgICAgICAgZXhjaGFuZ2VOYW1lOiBwcm9wcy5leGNoYW5nZU5hbWUsXG4gICAgICAgICAgICBleGNoYW5nZVR5cGU6IHByb3BzLmV4Y2hhbmdlVHlwZSxcbiAgICAgICAgfSwgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgJiYgdGhpcy5zdGFjay5lbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCk7XG4gICAgICAgIHRoaXMucmVzb3VyY2UgPSByb3NFeGNoYW5nZTtcbiAgICAgICAgdGhpcy5hdHRyRXhjaGFuZ2VOYW1lID0gcm9zRXhjaGFuZ2UuYXR0ckV4Y2hhbmdlTmFtZTtcbiAgICB9XG59XG4iXX0=