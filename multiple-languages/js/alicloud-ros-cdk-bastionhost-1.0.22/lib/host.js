"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Host = exports.HostProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const bastionhost_generated_1 = require("./bastionhost.generated");
Object.defineProperty(exports, "HostProperty", { enumerable: true, get: function () { return bastionhost_generated_1.RosHost; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::BastionHost::Host`, which is used to create a host for O&M in a bastion host.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosHost`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-bastionhost-host
 */
class Host extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosHost = new bastionhost_generated_1.RosHost(this, id, {
            comment: props.comment,
            activeAddressType: props.activeAddressType,
            hostPrivateAddress: props.hostPrivateAddress,
            instanceRegionId: props.instanceRegionId,
            hostPublicAddress: props.hostPublicAddress,
            instanceId: props.instanceId,
            osType: props.osType,
            sourceInstanceId: props.sourceInstanceId,
            hostName: props.hostName,
            source: props.source,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosHost;
        this.attrHostId = rosHost.attrHostId;
    }
}
exports.Host = Host;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaG9zdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImhvc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsOENBQThDO0FBQzlDLG1FQUFrRDtBQUU5Qiw2RkFGWCwrQkFBTyxPQUVnQjtBQXVFaEM7Ozs7R0FJRztBQUNILE1BQWEsSUFBSyxTQUFRLEdBQUcsQ0FBQyxRQUFRO0lBT2xDOzs7O09BSUc7SUFDSCxZQUFZLEtBQW9CLEVBQUUsRUFBVSxFQUFFLEtBQWdCLEVBQUUsbUNBQTJDLElBQUk7UUFDM0csS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUVqQixNQUFNLE9BQU8sR0FBRyxJQUFJLCtCQUFPLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRztZQUNuQyxPQUFPLEVBQUUsS0FBSyxDQUFDLE9BQU87WUFDdEIsaUJBQWlCLEVBQUUsS0FBSyxDQUFDLGlCQUFpQjtZQUMxQyxrQkFBa0IsRUFBRSxLQUFLLENBQUMsa0JBQWtCO1lBQzVDLGdCQUFnQixFQUFFLEtBQUssQ0FBQyxnQkFBZ0I7WUFDeEMsaUJBQWlCLEVBQUUsS0FBSyxDQUFDLGlCQUFpQjtZQUMxQyxVQUFVLEVBQUUsS0FBSyxDQUFDLFVBQVU7WUFDNUIsTUFBTSxFQUFFLEtBQUssQ0FBQyxNQUFNO1lBQ3BCLGdCQUFnQixFQUFFLEtBQUssQ0FBQyxnQkFBZ0I7WUFDeEMsUUFBUSxFQUFFLEtBQUssQ0FBQyxRQUFRO1lBQ3hCLE1BQU0sRUFBRSxLQUFLLENBQUMsTUFBTTtTQUN2QixFQUFFLGdDQUFnQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztRQUNwRixJQUFJLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQztRQUN4QixJQUFJLENBQUMsVUFBVSxHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUM7SUFDekMsQ0FBQztDQUNKO0FBOUJELG9CQThCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHJvcyBmcm9tICdAYWxpY2xvdWQvcm9zLWNkay1jb3JlJztcbmltcG9ydCB7IFJvc0hvc3QgfSBmcm9tICcuL2Jhc3Rpb25ob3N0LmdlbmVyYXRlZCc7XG4vLyBHZW5lcmF0ZWQgZnJvbSB0aGUgQWxpQ2xvdWQgUk9TIFJlc291cmNlIFNwZWNpZmljYXRpb25cbmV4cG9ydCB7IFJvc0hvc3QgYXMgSG9zdFByb3BlcnR5IH07XG5cbi8qKlxuICogUHJvcGVydGllcyBmb3IgZGVmaW5pbmcgYSBgSG9zdGAuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2FsaXl1bi1iYXN0aW9uaG9zdC1ob3N0XG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSG9zdFByb3BzIHtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGFjdGl2ZUFkZHJlc3NUeXBlOiBUaGUgZW5kcG9pbnQgdHlwZSBvZiB0aGUgaG9zdCB0aGF0IHlvdSB3YW50IHRvIGNyZWF0ZS4gVmFsaWQgdmFsdWVzOlxuICAgICAqIFB1YmxpYzogYSBwdWJsaWMgZW5kcG9pbnRcbiAgICAgKiBQcml2YXRlOiBhbiBpbnRlcm5hbCBlbmRwb2ludFxuICAgICAqL1xuICAgIHJlYWRvbmx5IGFjdGl2ZUFkZHJlc3NUeXBlOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBob3N0TmFtZTogVGhlIG5hbWUgb2YgdGhlIGhvc3QgdGhhdCB5b3Ugd2FudCB0byBjcmVhdGUuIFRoZSBuYW1lIGNhbiBiZSB1cCB0byAxMjggY2hhcmFjdGVycyBpbiBsZW5ndGguXG4gICAgICovXG4gICAgcmVhZG9ubHkgaG9zdE5hbWU6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGluc3RhbmNlSWQ6IFRoZSBJRCBvZiB0aGUgQmFzdGlvbmhvc3QgaW5zdGFuY2Ugd2hlcmUgeW91IHdhbnQgdG8gY3JlYXRlIHRoZSBob3N0LlxuICAgICAqIE5vdGU6IFlvdSBjYW4gY2FsbCB0aGUgRGVzY3JpYmVJbnN0YW5jZXMgb3BlcmF0aW9uIHRvIHF1ZXJ5IHRoZSBJRCBvZiB0aGUgQmFzdGlvbmhvc3QgaW5zdGFuY2UuXG4gICAgICovXG4gICAgcmVhZG9ubHkgaW5zdGFuY2VJZDogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgb3NUeXBlOiBUaGUgb3BlcmF0aW5nIHN5c3RlbSBvZiB0aGUgaG9zdCB0aGF0IHlvdSB3YW50IHRvIGNyZWF0ZS4gVmFsaWQgdmFsdWVzOlxuICAgICAqIC0gTGludXhcbiAgICAgKiAtIFdpbmRvd3NcbiAgICAgKi9cbiAgICByZWFkb25seSBvc1R5cGU6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHNvdXJjZTogVGhlIHNvdXJjZSBvZiB0aGUgaG9zdCB0aGF0IHlvdSB3YW50IHRvIGNyZWF0ZS4gVmFsaWQgdmFsdWVzOlxuICAgICAqIC0gTG9jYWw6IGFuIG9uLXByZW1pc2VzIGhvc3RcbiAgICAgKiAtIEVjczogYW4gRWxhc3RpYyBDb21wdXRlIFNlcnZpY2UgKEVDUykgaW5zdGFuY2VcbiAgICAgKiAtIFJkczogYSBob3N0IGluIGEgZGVkaWNhdGVkIGNsdXN0ZXJcbiAgICAgKi9cbiAgICByZWFkb25seSBzb3VyY2U6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGNvbW1lbnQ6IFRoZSBkZXNjcmlwdGlvbiBvZiB0aGUgaG9zdCB0aGF0IHlvdSB3YW50IHRvIGNyZWF0ZS4gVGhlIHZhbHVlIGNhbiBiZSB1cCB0byA1MDAgY2hhcmFjdGVycy5cbiAgICAgKi9cbiAgICByZWFkb25seSBjb21tZW50Pzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgaG9zdFByaXZhdGVBZGRyZXNzOiBUaGUgaW50ZXJuYWwgZW5kcG9pbnQgb2YgdGhlIGhvc3QgdGhhdCB5b3Ugd2FudCB0byBjcmVhdGUuIFlvdSBjYW4gc2V0IHRoaXMgcGFyYW1ldGVyIHRvIGEgZG9tYWluIG5hbWUgb3IgYW4gSVAgYWRkcmVzcy5cbiAgICAgKiBOb3RlOiBUaGlzIHBhcmFtZXRlciBpcyByZXF1aXJlZCBpZiB0aGUgQWN0aXZlQWRkcmVzc1R5cGUgcGFyYW1ldGVyIGlzIHNldCB0byBQcml2YXRlLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGhvc3RQcml2YXRlQWRkcmVzcz86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGhvc3RQdWJsaWNBZGRyZXNzOiBUaGUgcHVibGljIGVuZHBvaW50IG9mIHRoZSBob3N0IHRoYXQgeW91IHdhbnQgdG8gY3JlYXRlLiBZb3UgY2FuIHNldCB0aGlzIHBhcmFtZXRlciB0byBhIGRvbWFpbiBuYW1lIG9yIGFuIElQIGFkZHJlc3MuXG4gICAgICogTm90ZTogVGhpcyBwYXJhbWV0ZXIgaXMgcmVxdWlyZWQgaWYgdGhlIEFjdGl2ZUFkZHJlc3NUeXBlIHBhcmFtZXRlciBpcyBzZXQgdG8gUHVibGljLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGhvc3RQdWJsaWNBZGRyZXNzPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgaW5zdGFuY2VSZWdpb25JZDogVGhlIElEIG9mIHRoZSByZWdpb24gd2hlcmUgdGhlIEVDUyBpbnN0YW5jZSBvciBkZWRpY2F0ZWQgY2x1c3RlciBob3N0IHRoYXQgeW91IHdhbnQgdG8gY3JlYXRlIHJlc2lkZXMuXG4gICAgICogTm90ZTogVGhpcyBwYXJhbWV0ZXIgaXMgcmVxdWlyZWQgaWYgdGhlIFNvdXJjZSBwYXJhbWV0ZXIgaXMgc2V0IHRvIEVjcyBvciBSZHMuXG4gICAgICovXG4gICAgcmVhZG9ubHkgaW5zdGFuY2VSZWdpb25JZD86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHNvdXJjZUluc3RhbmNlSWQ6IFRoZSBJRCBvZiB0aGUgRUNTIGluc3RhbmNlIG9yIGRlZGljYXRlZCBjbHVzdGVyIGhvc3QgdGhhdCB5b3Ugd2FudCB0byBjcmVhdGUuXG4gICAgICogTm90ZSBUaGlzIHBhcmFtZXRlciBpcyByZXF1aXJlZCBpZiB0aGUgU291cmNlIHBhcmFtZXRlciBpcyBzZXQgdG8gRWNzIG9yIFJkcy5cbiAgICAgKi9cbiAgICByZWFkb25seSBzb3VyY2VJbnN0YW5jZUlkPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xufVxuXG4vKipcbiAqIFRoaXMgY2xhc3MgZW5jYXBzdWxhdGVzIGFuZCBleHRlbmRzIHRoZSBST1MgcmVzb3VyY2UgdHlwZSBgQUxJWVVOOjpCYXN0aW9uSG9zdDo6SG9zdGAsIHdoaWNoIGlzIHVzZWQgdG8gY3JlYXRlIGEgaG9zdCBmb3IgTyZNIGluIGEgYmFzdGlvbiBob3N0LlxuICogQE5vdGUgVGhpcyBjbGFzcyBtYXkgaGF2ZSBzb21lIG5ldyBmdW5jdGlvbnMgdG8gZmFjaWxpdGF0ZSBkZXZlbG9wbWVudCwgc28gaXQgaXMgcmVjb21tZW5kZWQgdG8gdXNlIHRoaXMgY2xhc3MgaW5zdGVhZCBvZiBgUm9zSG9zdGBmb3IgYSBtb3JlIGNvbnZlbmllbnQgZGV2ZWxvcG1lbnQgZXhwZXJpZW5jZS5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvYWxpeXVuLWJhc3Rpb25ob3N0LWhvc3RcbiAqL1xuZXhwb3J0IGNsYXNzIEhvc3QgZXh0ZW5kcyByb3MuUmVzb3VyY2Uge1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIEhvc3RJZDogVGhlIElEIG9mIHRoZSBob3N0IHRoYXQgd2FzIGNyZWF0ZWQuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJIb3N0SWQ6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFBhcmFtIHNjb3BlIC0gc2NvcGUgaW4gd2hpY2ggdGhpcyByZXNvdXJjZSBpcyBkZWZpbmVkXG4gICAgICogUGFyYW0gaWQgICAgLSBzY29wZWQgaWQgb2YgdGhlIHJlc291cmNlXG4gICAgICogUGFyYW0gcHJvcHMgLSByZXNvdXJjZSBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IHJvcy5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBIb3N0UHJvcHMsIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OmJvb2xlYW4gPSB0cnVlKSB7XG4gICAgICAgIHN1cGVyKHNjb3BlLCBpZCk7XG5cbiAgICAgICAgY29uc3Qgcm9zSG9zdCA9IG5ldyBSb3NIb3N0KHRoaXMsIGlkLCAge1xuICAgICAgICAgICAgY29tbWVudDogcHJvcHMuY29tbWVudCxcbiAgICAgICAgICAgIGFjdGl2ZUFkZHJlc3NUeXBlOiBwcm9wcy5hY3RpdmVBZGRyZXNzVHlwZSxcbiAgICAgICAgICAgIGhvc3RQcml2YXRlQWRkcmVzczogcHJvcHMuaG9zdFByaXZhdGVBZGRyZXNzLFxuICAgICAgICAgICAgaW5zdGFuY2VSZWdpb25JZDogcHJvcHMuaW5zdGFuY2VSZWdpb25JZCxcbiAgICAgICAgICAgIGhvc3RQdWJsaWNBZGRyZXNzOiBwcm9wcy5ob3N0UHVibGljQWRkcmVzcyxcbiAgICAgICAgICAgIGluc3RhbmNlSWQ6IHByb3BzLmluc3RhbmNlSWQsXG4gICAgICAgICAgICBvc1R5cGU6IHByb3BzLm9zVHlwZSxcbiAgICAgICAgICAgIHNvdXJjZUluc3RhbmNlSWQ6IHByb3BzLnNvdXJjZUluc3RhbmNlSWQsXG4gICAgICAgICAgICBob3N0TmFtZTogcHJvcHMuaG9zdE5hbWUsXG4gICAgICAgICAgICBzb3VyY2U6IHByb3BzLnNvdXJjZSxcbiAgICAgICAgfSwgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgJiYgdGhpcy5zdGFjay5lbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCk7XG4gICAgICAgIHRoaXMucmVzb3VyY2UgPSByb3NIb3N0O1xuICAgICAgICB0aGlzLmF0dHJIb3N0SWQgPSByb3NIb3N0LmF0dHJIb3N0SWQ7XG4gICAgfVxufVxuIl19