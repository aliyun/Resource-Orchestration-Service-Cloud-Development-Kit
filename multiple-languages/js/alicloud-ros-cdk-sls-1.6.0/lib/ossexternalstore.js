"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OssExternalStore = exports.OssExternalStoreProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const sls_generated_1 = require("./sls.generated");
Object.defineProperty(exports, "OssExternalStoreProperty", { enumerable: true, get: function () { return sls_generated_1.RosOssExternalStore; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::SLS::OssExternalStore`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosOssExternalStore`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-sls-ossexternalstore
 */
class OssExternalStore extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosOssExternalStore = new sls_generated_1.RosOssExternalStore(this, id, {
            storeType: props.storeType,
            project: props.project,
            endpoint: props.endpoint,
            bucket: props.bucket,
            accessId: props.accessId,
            objects: props.objects,
            columns: props.columns,
            accessKey: props.accessKey,
            externalStoreName: props.externalStoreName,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosOssExternalStore;
        this.attrExternalStoreName = rosOssExternalStore.attrExternalStoreName;
        this.attrProject = rosOssExternalStore.attrProject;
    }
}
exports.OssExternalStore = OssExternalStore;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3NzZXh0ZXJuYWxzdG9yZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm9zc2V4dGVybmFsc3RvcmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsOENBQThDO0FBQzlDLG1EQUFzRDtBQUV0Qix5R0FGdkIsbUNBQW1CLE9BRTRCO0FBc0V4RDs7OztHQUlHO0FBQ0gsTUFBYSxnQkFBaUIsU0FBUSxHQUFHLENBQUMsUUFBUTtJQWdCOUM7Ozs7T0FJRztJQUNILFlBQVksS0FBb0IsRUFBRSxFQUFVLEVBQUUsS0FBNEIsRUFBRSxtQ0FBMkMsSUFBSTtRQUN2SCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ2pCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQ2IsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLGdDQUFnQyxHQUFHLGdDQUFnQyxDQUFDO1FBRXpFLE1BQU0sbUJBQW1CLEdBQUcsSUFBSSxtQ0FBbUIsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFHO1lBQzNELFNBQVMsRUFBRSxLQUFLLENBQUMsU0FBUztZQUMxQixPQUFPLEVBQUUsS0FBSyxDQUFDLE9BQU87WUFDdEIsUUFBUSxFQUFFLEtBQUssQ0FBQyxRQUFRO1lBQ3hCLE1BQU0sRUFBRSxLQUFLLENBQUMsTUFBTTtZQUNwQixRQUFRLEVBQUUsS0FBSyxDQUFDLFFBQVE7WUFDeEIsT0FBTyxFQUFFLEtBQUssQ0FBQyxPQUFPO1lBQ3RCLE9BQU8sRUFBRSxLQUFLLENBQUMsT0FBTztZQUN0QixTQUFTLEVBQUUsS0FBSyxDQUFDLFNBQVM7WUFDMUIsaUJBQWlCLEVBQUUsS0FBSyxDQUFDLGlCQUFpQjtTQUM3QyxFQUFFLGdDQUFnQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztRQUNwRixJQUFJLENBQUMsUUFBUSxHQUFHLG1CQUFtQixDQUFDO1FBQ3BDLElBQUksQ0FBQyxxQkFBcUIsR0FBRyxtQkFBbUIsQ0FBQyxxQkFBcUIsQ0FBQztRQUN2RSxJQUFJLENBQUMsV0FBVyxHQUFHLG1CQUFtQixDQUFDLFdBQVcsQ0FBQztJQUN2RCxDQUFDO0NBQ0o7QUEzQ0QsNENBMkNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcm9zIGZyb20gJ0BhbGljbG91ZC9yb3MtY2RrLWNvcmUnO1xuaW1wb3J0IHsgUm9zT3NzRXh0ZXJuYWxTdG9yZSB9IGZyb20gJy4vc2xzLmdlbmVyYXRlZCc7XG4vLyBHZW5lcmF0ZWQgZnJvbSB0aGUgQWxpQ2xvdWQgUk9TIFJlc291cmNlIFNwZWNpZmljYXRpb25cbmV4cG9ydCB7IFJvc09zc0V4dGVybmFsU3RvcmUgYXMgT3NzRXh0ZXJuYWxTdG9yZVByb3BlcnR5IH07XG5cbi8qKlxuICogUHJvcGVydGllcyBmb3IgZGVmaW5pbmcgYSBgT3NzRXh0ZXJuYWxTdG9yZWAuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2FsaXl1bi1zbHMtb3NzZXh0ZXJuYWxzdG9yZVxuICovXG5leHBvcnQgaW50ZXJmYWNlIE9zc0V4dGVybmFsU3RvcmVQcm9wcyB7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBhY2Nlc3NJZDogVGhlIEFjY2Vzc0tleSBJRC5cbiAgICAgKi9cbiAgICByZWFkb25seSBhY2Nlc3NJZDogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgYWNjZXNzS2V5OiBUaGUgQWNjZXNzS2V5IHNlY3JldC5cbiAgICAgKi9cbiAgICByZWFkb25seSBhY2Nlc3NLZXk6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGJ1Y2tldDogVGhlIG5hbWUgb2YgdGhlIE9TUyBidWNrZXQuXG4gICAgICovXG4gICAgcmVhZG9ubHkgYnVja2V0OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBjb2x1bW5zOiBUaGUgYXNzb2NpYXRlZCBmaWVsZHMuXG4gICAgICovXG4gICAgcmVhZG9ubHkgY29sdW1uczogQXJyYXk8Um9zT3NzRXh0ZXJuYWxTdG9yZS5Db2x1bW5zUHJvcGVydHkgfCByb3MuSVJlc29sdmFibGU+IHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgZW5kcG9pbnQ6IFRoZSBPU1MgZW5kcG9pbnQuXG4gICAgICovXG4gICAgcmVhZG9ubHkgZW5kcG9pbnQ6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGV4dGVybmFsU3RvcmVOYW1lOiBUaGUgbmFtZSBvZiB0aGUgZXh0ZXJuYWwgc3RvcmUuXG4gICAgICovXG4gICAgcmVhZG9ubHkgZXh0ZXJuYWxTdG9yZU5hbWU6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IG9iamVjdHM6IFRoZSBhc3NvY2lhdGVkIE9TUyBvYmplY3RzLiBWYWxpZCB2YWx1ZXMgb2YgbjogMSB0byAxMDAuXG4gICAgICovXG4gICAgcmVhZG9ubHkgb2JqZWN0czogQXJyYXk8c3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlPiB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHByb2plY3Q6IEEgc2hvcnQgZGVzY3JpcHRpb24gb2Ygc3RydWN0XG4gICAgICovXG4gICAgcmVhZG9ubHkgcHJvamVjdDogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgc3RvcmVUeXBlOiBUaGUgdHlwZSBvZiB0aGUgZXh0ZXJuYWwgc3RvcmUuIFNldCB0aGUgdmFsdWUgdG8gb3NzLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHN0b3JlVHlwZTogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xufVxuXG4vKipcbiAqIFJlcHJlc2VudHMgYSBgT3NzRXh0ZXJuYWxTdG9yZWAuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSU9zc0V4dGVybmFsU3RvcmUgZXh0ZW5kcyByb3MuSVJlc291cmNlIHtcbiAgICByZWFkb25seSBwcm9wczogT3NzRXh0ZXJuYWxTdG9yZVByb3BzO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIEV4dGVybmFsU3RvcmVOYW1lOiBUaGUgbmFtZSBvZiB0aGUgZXh0ZXJuYWwgc3RvcmUuXG4gICAgICovXG4gICAgcmVhZG9ubHkgYXR0ckV4dGVybmFsU3RvcmVOYW1lOiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgUHJvamVjdDogVGhlIG5hbWUgb2YgdGhlIHByb2plY3QgdG8gd2hpY2ggdGhlIGV4dGVybmFsIHN0b3JlIGJlbG9uZ3MuXG4gICAgICovXG4gICAgcmVhZG9ubHkgYXR0clByb2plY3Q6IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcbn1cbi8qKlxuICogVGhpcyBjbGFzcyBlbmNhcHN1bGF0ZXMgYW5kIGV4dGVuZHMgdGhlIFJPUyByZXNvdXJjZSB0eXBlIGBBTElZVU46OlNMUzo6T3NzRXh0ZXJuYWxTdG9yZWAuXG4gKiBATm90ZSBUaGlzIGNsYXNzIG1heSBoYXZlIHNvbWUgbmV3IGZ1bmN0aW9ucyB0byBmYWNpbGl0YXRlIGRldmVsb3BtZW50LCBzbyBpdCBpcyByZWNvbW1lbmRlZCB0byB1c2UgdGhpcyBjbGFzcyBpbnN0ZWFkIG9mIGBSb3NPc3NFeHRlcm5hbFN0b3JlYGZvciBhIG1vcmUgY29udmVuaWVudCBkZXZlbG9wbWVudCBleHBlcmllbmNlLlxuICogU2VlIGh0dHBzOi8vd3d3LmFsaWJhYmFjbG91ZC5jb20vaGVscC9yb3MvZGV2ZWxvcGVyLXJlZmVyZW5jZS9hbGl5dW4tc2xzLW9zc2V4dGVybmFsc3RvcmVcbiAqL1xuZXhwb3J0IGNsYXNzIE9zc0V4dGVybmFsU3RvcmUgZXh0ZW5kcyByb3MuUmVzb3VyY2UgaW1wbGVtZW50cyBJT3NzRXh0ZXJuYWxTdG9yZSB7XG4gICAgcHJvdGVjdGVkIHNjb3BlOiByb3MuQ29uc3RydWN0O1xuICAgIHByb3RlY3RlZCBpZDogc3RyaW5nO1xuICAgIHB1YmxpYyByZWFkb25seSBwcm9wczogT3NzRXh0ZXJuYWxTdG9yZVByb3BzO1xuICAgIHByb3RlY3RlZCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBFeHRlcm5hbFN0b3JlTmFtZTogVGhlIG5hbWUgb2YgdGhlIGV4dGVybmFsIHN0b3JlLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyRXh0ZXJuYWxTdG9yZU5hbWU6IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBQcm9qZWN0OiBUaGUgbmFtZSBvZiB0aGUgcHJvamVjdCB0byB3aGljaCB0aGUgZXh0ZXJuYWwgc3RvcmUgYmVsb25ncy5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0clByb2plY3Q6IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFBhcmFtIHNjb3BlIC0gc2NvcGUgaW4gd2hpY2ggdGhpcyByZXNvdXJjZSBpcyBkZWZpbmVkXG4gICAgICogUGFyYW0gaWQgICAgLSBzY29wZWQgaWQgb2YgdGhlIHJlc291cmNlXG4gICAgICogUGFyYW0gcHJvcHMgLSByZXNvdXJjZSBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IHJvcy5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBPc3NFeHRlcm5hbFN0b3JlUHJvcHMsIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OmJvb2xlYW4gPSB0cnVlKSB7XG4gICAgICAgIHN1cGVyKHNjb3BlLCBpZCk7XG4gICAgICAgIHRoaXMuc2NvcGUgPSBzY29wZTtcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xuICAgICAgICB0aGlzLnByb3BzID0gcHJvcHM7XG4gICAgICAgIHRoaXMuZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgPSBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDtcblxuICAgICAgICBjb25zdCByb3NPc3NFeHRlcm5hbFN0b3JlID0gbmV3IFJvc09zc0V4dGVybmFsU3RvcmUodGhpcywgaWQsICB7XG4gICAgICAgICAgICBzdG9yZVR5cGU6IHByb3BzLnN0b3JlVHlwZSxcbiAgICAgICAgICAgIHByb2plY3Q6IHByb3BzLnByb2plY3QsXG4gICAgICAgICAgICBlbmRwb2ludDogcHJvcHMuZW5kcG9pbnQsXG4gICAgICAgICAgICBidWNrZXQ6IHByb3BzLmJ1Y2tldCxcbiAgICAgICAgICAgIGFjY2Vzc0lkOiBwcm9wcy5hY2Nlc3NJZCxcbiAgICAgICAgICAgIG9iamVjdHM6IHByb3BzLm9iamVjdHMsXG4gICAgICAgICAgICBjb2x1bW5zOiBwcm9wcy5jb2x1bW5zLFxuICAgICAgICAgICAgYWNjZXNzS2V5OiBwcm9wcy5hY2Nlc3NLZXksXG4gICAgICAgICAgICBleHRlcm5hbFN0b3JlTmFtZTogcHJvcHMuZXh0ZXJuYWxTdG9yZU5hbWUsXG4gICAgICAgIH0sIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ICYmIHRoaXMuc3RhY2suZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQpO1xuICAgICAgICB0aGlzLnJlc291cmNlID0gcm9zT3NzRXh0ZXJuYWxTdG9yZTtcbiAgICAgICAgdGhpcy5hdHRyRXh0ZXJuYWxTdG9yZU5hbWUgPSByb3NPc3NFeHRlcm5hbFN0b3JlLmF0dHJFeHRlcm5hbFN0b3JlTmFtZTtcbiAgICAgICAgdGhpcy5hdHRyUHJvamVjdCA9IHJvc09zc0V4dGVybmFsU3RvcmUuYXR0clByb2plY3Q7XG4gICAgfVxufVxuIl19