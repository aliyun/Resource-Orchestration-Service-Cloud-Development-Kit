"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InstanceGroupClone = exports.InstanceGroupCloneProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ecs_generated_1 = require("./ecs.generated");
Object.defineProperty(exports, "InstanceGroupCloneProperty", { enumerable: true, get: function () { return ecs_generated_1.RosInstanceGroupClone; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::ECS::InstanceGroupClone`, which is used to create clones of an Elastic Compute Service (ECS) instance.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosInstanceGroupClone`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-ecs-instancegroupclone
 */
class InstanceGroupClone extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosInstanceGroupClone = new ecs_generated_1.RosInstanceGroupClone(this, id, {
            resourceGroupId: props.resourceGroupId,
            systemDiskDescription: props.systemDiskDescription,
            systemDiskProvisionedIops: props.systemDiskProvisionedIops,
            sourceInstanceId: props.sourceInstanceId,
            systemDiskEncryptAlgorithm: props.systemDiskEncryptAlgorithm,
            ramRoleName: props.ramRoleName,
            imageId: props.imageId,
            imageOptions: props.imageOptions,
            systemDiskDiskName: props.systemDiskDiskName,
            tags: props.tags,
            systemDiskStorageClusterId: props.systemDiskStorageClusterId,
            backendServerWeight: props.backendServerWeight === undefined || props.backendServerWeight === null ? 100 : props.backendServerWeight,
            launchTemplateName: props.launchTemplateName,
            updatePolicy: props.updatePolicy === undefined || props.updatePolicy === null ? 'ForNewInstances' : props.updatePolicy,
            systemDiskKmsKeyId: props.systemDiskKmsKeyId,
            cpuOptions: props.cpuOptions,
            period: props.period === undefined || props.period === null ? 1 : props.period,
            launchTemplateId: props.launchTemplateId,
            deletionProtection: props.deletionProtection,
            securityGroupIds: props.securityGroupIds,
            instanceName: props.instanceName,
            deploymentSetId: props.deploymentSetId,
            internetMaxBandwidthOut: props.internetMaxBandwidthOut,
            uniqueSuffix: props.uniqueSuffix === undefined || props.uniqueSuffix === null ? false : props.uniqueSuffix,
            securityOptions: props.securityOptions,
            launchTemplateVersion: props.launchTemplateVersion,
            periodUnit: props.periodUnit === undefined || props.periodUnit === null ? 'Month' : props.periodUnit,
            autoReleaseTime: props.autoReleaseTime,
            description: props.description,
            diskMappings: props.diskMappings,
            autoRenew: props.autoRenew === undefined || props.autoRenew === null ? 'False' : props.autoRenew,
            ipv6Addresses: props.ipv6Addresses,
            systemDiskEncrypted: props.systemDiskEncrypted,
            maxAmount: props.maxAmount,
            systemDiskAutoSnapshotPolicyId: props.systemDiskAutoSnapshotPolicyId,
            ipv6AddressCount: props.ipv6AddressCount,
            spotPriceLimit: props.spotPriceLimit,
            hostNames: props.hostNames,
            spotStrategy: props.spotStrategy,
            passwordInherit: props.passwordInherit,
            password: props.password,
            autoRenewPeriod: props.autoRenewPeriod === undefined || props.autoRenewPeriod === null ? 1 : props.autoRenewPeriod,
            keyPairName: props.keyPairName,
            zoneId: props.zoneId,
            hpcClusterId: props.hpcClusterId,
            securityGroupId: props.securityGroupId,
            loadBalancerIdToAttach: props.loadBalancerIdToAttach,
            systemDiskCategory: props.systemDiskCategory === undefined || props.systemDiskCategory === null ? 'cloud_efficiency' : props.systemDiskCategory,
            eniMappings: props.eniMappings,
            systemDiskBurstingEnabled: props.systemDiskBurstingEnabled,
            networkOptions: props.networkOptions,
            networkInterfaceQueueNumber: props.networkInterfaceQueueNumber,
            internetMaxBandwidthIn: props.internetMaxBandwidthIn === undefined || props.internetMaxBandwidthIn === null ? 200 : props.internetMaxBandwidthIn,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosInstanceGroupClone;
        this.attrHostNames = rosInstanceGroupClone.attrHostNames;
        this.attrInnerIps = rosInstanceGroupClone.attrInnerIps;
        this.attrInstanceIds = rosInstanceGroupClone.attrInstanceIds;
        this.attrIpv6AddressIds = rosInstanceGroupClone.attrIpv6AddressIds;
        this.attrIpv6Addresses = rosInstanceGroupClone.attrIpv6Addresses;
        this.attrOrderId = rosInstanceGroupClone.attrOrderId;
        this.attrPrivateIps = rosInstanceGroupClone.attrPrivateIps;
        this.attrPublicIps = rosInstanceGroupClone.attrPublicIps;
        this.attrZoneIds = rosInstanceGroupClone.attrZoneIds;
    }
}
exports.InstanceGroupClone = InstanceGroupClone;
//# sourceMappingURL=data:application/json;base64,