"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClusterApplication = exports.ClusterApplicationProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const cs_generated_1 = require("./cs.generated");
Object.defineProperty(exports, "ClusterApplicationProperty", { enumerable: true, get: function () { return cs_generated_1.RosClusterApplication; } });
/**
 * A ROS resource type:  `ALIYUN::CS::ClusterApplication`
 */
class ClusterApplication extends ros.Resource {
    /**
     * Create a new `ALIYUN::CS::ClusterApplication`.
     *
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosClusterApplication = new cs_generated_1.RosClusterApplication(this, id, {
            yamlContent: props.yamlContent,
            clusterId: props.clusterId,
            defaultNamespace: props.defaultNamespace === undefined || props.defaultNamespace === null ? 'default' : props.defaultNamespace,
            defaultNamespaceDeletion: props.defaultNamespaceDeletion,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosClusterApplication;
        this.attrClusterId = rosClusterApplication.attrClusterId;
    }
}
exports.ClusterApplication = ClusterApplication;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2x1c3RlcmFwcGxpY2F0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY2x1c3RlcmFwcGxpY2F0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDhDQUE4QztBQUM5QyxpREFBdUQ7QUFFckIsMkdBRnpCLG9DQUFxQixPQUU4QjtBQTZCNUQ7O0dBRUc7QUFDSCxNQUFhLGtCQUFtQixTQUFRLEdBQUcsQ0FBQyxRQUFRO0lBWWhEOzs7Ozs7T0FNRztJQUNILFlBQVksS0FBb0IsRUFBRSxFQUFVLEVBQUUsS0FBOEIsRUFBRSxtQ0FBMkMsSUFBSTtRQUN6SCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRWpCLE1BQU0scUJBQXFCLEdBQUcsSUFBSSxvQ0FBcUIsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFHO1lBQy9ELFdBQVcsRUFBRSxLQUFLLENBQUMsV0FBVztZQUM5QixTQUFTLEVBQUUsS0FBSyxDQUFDLFNBQVM7WUFDMUIsZ0JBQWdCLEVBQUUsS0FBSyxDQUFDLGdCQUFnQixLQUFLLFNBQVMsSUFBSSxLQUFLLENBQUMsZ0JBQWdCLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxnQkFBZ0I7WUFDOUgsd0JBQXdCLEVBQUUsS0FBSyxDQUFDLHdCQUF3QjtTQUMzRCxFQUFFLGdDQUFnQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztRQUNwRixJQUFJLENBQUMsUUFBUSxHQUFHLHFCQUFxQixDQUFDO1FBQ3RDLElBQUksQ0FBQyxhQUFhLEdBQUcscUJBQXFCLENBQUMsYUFBYSxDQUFDO0lBQzdELENBQUM7Q0FDSjtBQS9CRCxnREErQkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyByb3MgZnJvbSAnQGFsaWNsb3VkL3Jvcy1jZGstY29yZSc7XG5pbXBvcnQgeyBSb3NDbHVzdGVyQXBwbGljYXRpb24gfSBmcm9tICcuL2NzLmdlbmVyYXRlZCc7XG4vLyBHZW5lcmF0ZWQgZnJvbSB0aGUgQWxpQ2xvdWQgUk9TIFJlc291cmNlIFNwZWNpZmljYXRpb25cbmV4cG9ydCB7IFJvc0NsdXN0ZXJBcHBsaWNhdGlvbiBhcyBDbHVzdGVyQXBwbGljYXRpb25Qcm9wZXJ0eSB9O1xuXG4vKipcbiAqIFByb3BlcnRpZXMgZm9yIGRlZmluaW5nIGEgYEFMSVlVTjo6Q1M6OkNsdXN0ZXJBcHBsaWNhdGlvbmBcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBDbHVzdGVyQXBwbGljYXRpb25Qcm9wcyB7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBjbHVzdGVySWQ6IFRoZSBJRCBvZiB0aGUga3ViZXJuZXRlcyBjbHVzdGVyLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGNsdXN0ZXJJZDogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgeWFtbENvbnRlbnQ6IFRoZSB5YW1sIGNvbnRlbnQgb2YgYXBwbGljYXRpb24uXG4gICAgICovXG4gICAgcmVhZG9ubHkgeWFtbENvbnRlbnQ6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGRlZmF1bHROYW1lc3BhY2U6IFRoZSBkZWZhdWx0IG5hbWVzcGFjZSBmb3IgdGhlIGFwcGxpY2F0aW9uLCBkZWZhdWx0IHZhbHVlIGlzIGRlZmF1bHQuXG4gICAgICogSWYgYSBuYW1lc3BhY2UgaXMgZGVmaW5lZCBpbiB5YW1sIG1ldGFkYXRhLCBpdHMgcHJpb3JpdHkgaXMgaGlnaGVyIHRoYW4gRGVmYXVsdE5hbWVzcGFjZS5cbiAgICAgKi9cbiAgICByZWFkb25seSBkZWZhdWx0TmFtZXNwYWNlPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgZGVmYXVsdE5hbWVzcGFjZURlbGV0aW9uOiBXaGV0aGVyIHRvIGRlbGV0ZSB0aGUgbmFtZXNwYWNlIHNwZWNpZmllZCBieSBEZWZhdWx0TmFtZXNwYWNlLiBJZiBEZWZhdWx0TmFtZXNwYWNlIGlzIGluICgnZGVmYXVsdCcsICdrdWJlLW5vZGUtbGVhc2UnLCAna3ViZS1wdWJsaWMnLCAna3ViZS1zeXN0ZW0nLCAnYXJtcy1wcm9tJyksIG5vIG1hdHRlciB3aGV0aGVyIERlZmF1bHROYW1lc3BhY2VEZWxldGlvbiBpcyB0cnVlIG9yIG5vdCwgaXQgd2lsbCBub3QgYmUgZGVsZXRlZC5cbiAgICAgKi9cbiAgICByZWFkb25seSBkZWZhdWx0TmFtZXNwYWNlRGVsZXRpb24/OiBib29sZWFuIHwgcm9zLklSZXNvbHZhYmxlO1xufVxuXG4vKipcbiAqIEEgUk9TIHJlc291cmNlIHR5cGU6ICBgQUxJWVVOOjpDUzo6Q2x1c3RlckFwcGxpY2F0aW9uYFxuICovXG5leHBvcnQgY2xhc3MgQ2x1c3RlckFwcGxpY2F0aW9uIGV4dGVuZHMgcm9zLlJlc291cmNlIHtcblxuICAgIC8qKlxuICAgICAqIEEgZmFjdG9yeSBtZXRob2QgdGhhdCBjcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIHRoaXMgY2xhc3MgZnJvbSBhbiBvYmplY3RcbiAgICAgKiBjb250YWluaW5nIHRoZSBwcm9wZXJ0aWVzIG9mIHRoaXMgUk9TIHJlc291cmNlLCB3aGljaCB3aWxsIGJlIGFzc2lnbmVkIHRvIFJPUyByZXNvdXJjZS5cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBDbHVzdGVySWQ6IFRoZSBJRCBvZiB0aGUgY2x1c3Rlci5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckNsdXN0ZXJJZDogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IGBBTElZVU46OkNTOjpDbHVzdGVyQXBwbGljYXRpb25gLlxuICAgICAqXG4gICAgICogUGFyYW0gc2NvcGUgLSBzY29wZSBpbiB3aGljaCB0aGlzIHJlc291cmNlIGlzIGRlZmluZWRcbiAgICAgKiBQYXJhbSBpZCAgICAtIHNjb3BlZCBpZCBvZiB0aGUgcmVzb3VyY2VcbiAgICAgKiBQYXJhbSBwcm9wcyAtIHJlc291cmNlIHByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihzY29wZTogcm9zLkNvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IENsdXN0ZXJBcHBsaWNhdGlvblByb3BzLCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDpib29sZWFuID0gdHJ1ZSkge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQpO1xuXG4gICAgICAgIGNvbnN0IHJvc0NsdXN0ZXJBcHBsaWNhdGlvbiA9IG5ldyBSb3NDbHVzdGVyQXBwbGljYXRpb24odGhpcywgaWQsICB7XG4gICAgICAgICAgICB5YW1sQ29udGVudDogcHJvcHMueWFtbENvbnRlbnQsXG4gICAgICAgICAgICBjbHVzdGVySWQ6IHByb3BzLmNsdXN0ZXJJZCxcbiAgICAgICAgICAgIGRlZmF1bHROYW1lc3BhY2U6IHByb3BzLmRlZmF1bHROYW1lc3BhY2UgPT09IHVuZGVmaW5lZCB8fCBwcm9wcy5kZWZhdWx0TmFtZXNwYWNlID09PSBudWxsID8gJ2RlZmF1bHQnIDogcHJvcHMuZGVmYXVsdE5hbWVzcGFjZSxcbiAgICAgICAgICAgIGRlZmF1bHROYW1lc3BhY2VEZWxldGlvbjogcHJvcHMuZGVmYXVsdE5hbWVzcGFjZURlbGV0aW9uLFxuICAgICAgICB9LCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCAmJiB0aGlzLnN0YWNrLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50KTtcbiAgICAgICAgdGhpcy5yZXNvdXJjZSA9IHJvc0NsdXN0ZXJBcHBsaWNhdGlvbjtcbiAgICAgICAgdGhpcy5hdHRyQ2x1c3RlcklkID0gcm9zQ2x1c3RlckFwcGxpY2F0aW9uLmF0dHJDbHVzdGVySWQ7XG4gICAgfVxufVxuIl19