"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Zone = exports.ZoneProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const pvtz_generated_1 = require("./pvtz.generated");
Object.defineProperty(exports, "ZoneProperty", { enumerable: true, get: function () { return pvtz_generated_1.RosZone; } });
/**
 * This class encapsulates and extends the ROS resource type `DATASOURCE::PVTZ::Zone`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosZone`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/datasource-pvtz-zone
 */
class Zone extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosZone = new pvtz_generated_1.RosZone(this, id, {
            zoneId: props.zoneId,
            refreshOptions: props.refreshOptions === undefined || props.refreshOptions === null ? 'Never' : props.refreshOptions,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosZone;
        this.attrBindVpcs = rosZone.attrBindVpcs;
        this.attrCreateTime = rosZone.attrCreateTime;
        this.attrCreateTimestamp = rosZone.attrCreateTimestamp;
        this.attrIsPtr = rosZone.attrIsPtr;
        this.attrProxyPattern = rosZone.attrProxyPattern;
        this.attrRecordCount = rosZone.attrRecordCount;
        this.attrRemark = rosZone.attrRemark;
        this.attrResourceGroupId = rosZone.attrResourceGroupId;
        this.attrSlaveDns = rosZone.attrSlaveDns;
        this.attrTags = rosZone.attrTags;
        this.attrUpdateTime = rosZone.attrUpdateTime;
        this.attrUpdateTimestamp = rosZone.attrUpdateTimestamp;
        this.attrZoneId = rosZone.attrZoneId;
        this.attrZoneName = rosZone.attrZoneName;
        this.attrZoneTag = rosZone.attrZoneTag;
        this.attrZoneType = rosZone.attrZoneType;
    }
}
exports.Zone = Zone;
//# sourceMappingURL=data:application/json;base64,