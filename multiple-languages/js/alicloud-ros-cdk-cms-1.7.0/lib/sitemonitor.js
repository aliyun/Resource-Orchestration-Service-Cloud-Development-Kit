"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SiteMonitor = exports.SiteMonitorProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const cms_generated_1 = require("./cms.generated");
Object.defineProperty(exports, "SiteMonitorProperty", { enumerable: true, get: function () { return cms_generated_1.RosSiteMonitor; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::CMS::SiteMonitor`, which is used to create a site monitoring task.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosSiteMonitor`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-cms-sitemonitor
 */
class SiteMonitor extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosSiteMonitor = new cms_generated_1.RosSiteMonitor(this, id, {
            address: props.address,
            optionsJson: props.optionsJson,
            taskName: props.taskName,
            taskType: props.taskType,
            ispCities: props.ispCities,
            interval: props.interval,
            alertIds: props.alertIds,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosSiteMonitor;
        this.attrTaskId = rosSiteMonitor.attrTaskId;
    }
}
exports.SiteMonitor = SiteMonitor;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2l0ZW1vbml0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJzaXRlbW9uaXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw4Q0FBOEM7QUFDOUMsbURBQWlEO0FBRXRCLG9HQUZsQiw4QkFBYyxPQUV1QjtBQWdFOUM7Ozs7R0FJRztBQUNILE1BQWEsV0FBWSxTQUFRLEdBQUcsQ0FBQyxRQUFRO0lBV3pDOzs7O09BSUc7SUFDSCxZQUFZLEtBQW9CLEVBQUUsRUFBVSxFQUFFLEtBQXVCLEVBQUUsbUNBQTJDLElBQUk7UUFDbEgsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNqQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUNiLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxnQ0FBZ0MsR0FBRyxnQ0FBZ0MsQ0FBQztRQUV6RSxNQUFNLGNBQWMsR0FBRyxJQUFJLDhCQUFjLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRztZQUNqRCxPQUFPLEVBQUUsS0FBSyxDQUFDLE9BQU87WUFDdEIsV0FBVyxFQUFFLEtBQUssQ0FBQyxXQUFXO1lBQzlCLFFBQVEsRUFBRSxLQUFLLENBQUMsUUFBUTtZQUN4QixRQUFRLEVBQUUsS0FBSyxDQUFDLFFBQVE7WUFDeEIsU0FBUyxFQUFFLEtBQUssQ0FBQyxTQUFTO1lBQzFCLFFBQVEsRUFBRSxLQUFLLENBQUMsUUFBUTtZQUN4QixRQUFRLEVBQUUsS0FBSyxDQUFDLFFBQVE7U0FDM0IsRUFBRSxnQ0FBZ0MsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7UUFDcEYsSUFBSSxDQUFDLFFBQVEsR0FBRyxjQUFjLENBQUM7UUFDL0IsSUFBSSxDQUFDLFVBQVUsR0FBRyxjQUFjLENBQUMsVUFBVSxDQUFDO0lBQ2hELENBQUM7Q0FDSjtBQW5DRCxrQ0FtQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyByb3MgZnJvbSAnQGFsaWNsb3VkL3Jvcy1jZGstY29yZSc7XG5pbXBvcnQgeyBSb3NTaXRlTW9uaXRvciB9IGZyb20gJy4vY21zLmdlbmVyYXRlZCc7XG4vLyBHZW5lcmF0ZWQgZnJvbSB0aGUgQWxpQ2xvdWQgUk9TIFJlc291cmNlIFNwZWNpZmljYXRpb25cbmV4cG9ydCB7IFJvc1NpdGVNb25pdG9yIGFzIFNpdGVNb25pdG9yUHJvcGVydHkgfTtcblxuLyoqXG4gKiBQcm9wZXJ0aWVzIGZvciBkZWZpbmluZyBhIGBTaXRlTW9uaXRvcmAuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2FsaXl1bi1jbXMtc2l0ZW1vbml0b3JcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBTaXRlTW9uaXRvclByb3BzIHtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGFkZHJlc3M6IFRoZSBVUkwgb3IgSVAgYWRkcmVzcyBtb25pdG9yZWQgYnkgdGhlIG1vbml0b3JpbmcgdGFzay5cbiAgICAgKi9cbiAgICByZWFkb25seSBhZGRyZXNzOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSB0YXNrTmFtZTogVGhlIG5hbWUgb2YgdGhlIHNpdGUgbW9uaXRvcmluZyB0YXNrLiBUaGUgbmFtZSBtdXN0IGJlIDQgdG8gMTAwIGNoYXJhY3RlcnMgaW4gbGVuZ3RoLlxuICAgICAqIEl0IGNhbiBjb250YWluIGxldHRlcnMsIGRpZ2l0cywgYW5kIHVuZGVyc2NvcmVzIChfKS5cbiAgICAgKi9cbiAgICByZWFkb25seSB0YXNrTmFtZTogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgdGFza1R5cGU6IFRoZSBwcm90b2NvbCB1c2VkIGJ5IHRoZSBzaXRlIG1vbml0b3JpbmcgdGFzay4gVmFsaWQgdmFsdWVzOiBIVFRQLCBIVFRQUywgUElORywgVENQLFxuICAgICAqIFVEUCwgRE5TLCBTTVRQLCBQT1AzLCBhbmQgRlRQLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHRhc2tUeXBlOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBhbGVydElkczpcbiAgICAgKi9cbiAgICByZWFkb25seSBhbGVydElkcz86IEFycmF5PHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZT4gfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBpbnRlcnZhbDogVGhlIGludGVydmFsIGF0IHdoaWNoIGRldGVjdGlvbiByZXF1ZXN0cyBhcmUgc2VudC4gVmFsaWQgdmFsdWVzOiAxLCA1LCBhbmQgMTUuIFVuaXQ6XG4gICAgICogbWludXRlcy4gRGVmYXVsdCB2YWx1ZTogMS5cbiAgICAgKi9cbiAgICByZWFkb25seSBpbnRlcnZhbD86IG51bWJlciB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGlzcENpdGllczogVGhlIGluZm9ybWF0aW9uIGFib3V0IGRldGVjdGlvbiBwb2ludHMsIHdoaWNoIGlzIHNwZWNpZmllZCBpbiBhIEpTT04gYXJyYXkuIEV4YW1wbGU6XG4gICAgICogW3tcImNpdHlcIjpcIjU0NlwiLFwiaXNwXCI6XCI0NjVcIn0se1wiY2l0eVwiOlwiNTcyXCIsXCJpc3BcIjpcIjQ2NVwifSx7XCJjaXR5XCI6XCI3MzhcIixcImlzcFwiOlwiNDY1XCJ9XS4gVGhlIHRocmVlIGNpdHkgY29kZXMgcmVwcmVzZW50IEJlaWppbmcsIEhhbmd6aG91LCBhbmQgUWluZ2Rhby5cbiAgICAgKiBOb3RlIFlvdSBjYW4gY2FsbCB0aGUgRGVzY3JpYmVTaXRlTW9uaXRvcklTUENpdHlMaXN0IEFQSSBvcGVyYXRpb24gdG8gcXVlcnkgdGhlIGRldGVjdGlvblxuICAgICAqIHBvaW50cyB0aGF0IGNhbiBiZSB1c2VkIHRvIGNyZWF0ZSBzaXRlIG1vbml0b3JpbmcgdGFza3MuIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbiAgICAgKiBEZXNjcmliZVNpdGVNb25pdG9ySVNQQ2l0eUxpc3QgLiBJZiB0aGlzIHBhcmFtZXRlciBpcyBub3Qgc3BlY2lmaWVkLCB0aGUgc3lzdGVtIHJhbmRvbWx5IHNlbGVjdHMgdGhyZWUgZGV0ZWN0aW9uXG4gICAgICogcG9pbnRzIGZvciBzaXRlIG1vbml0b3JpbmcuXG4gICAgICovXG4gICAgcmVhZG9ubHkgaXNwQ2l0aWVzPzogQXJyYXk8Um9zU2l0ZU1vbml0b3IuSXNwQ2l0aWVzUHJvcGVydHkgfCByb3MuSVJlc29sdmFibGU+IHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgb3B0aW9uc0pzb246IFRoZSBleHRlbmRlZCBvcHRpb25zIG9mIHRoZSBwcm90b2NvbCB0aGF0IGlzIHVzZWQgYnkgdGhlIHNpdGUgbW9uaXRvcmluZyB0YXNrLiBUaGVcbiAgICAgKiBvcHRpb25zIHZhcnkgYmFzZWQgb24gdGhlIHByb3RvY29sLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IG9wdGlvbnNKc29uPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xufVxuXG4vKipcbiAqIFJlcHJlc2VudHMgYSBgU2l0ZU1vbml0b3JgLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIElTaXRlTW9uaXRvciBleHRlbmRzIHJvcy5JUmVzb3VyY2Uge1xuICAgIHJlYWRvbmx5IHByb3BzOiBTaXRlTW9uaXRvclByb3BzO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIFRhc2tJZDogVGhlIElEIG9mIHRoZSBzaXRlIG1vbml0b3JpbmcgdGFzay5cbiAgICAgKi9cbiAgICByZWFkb25seSBhdHRyVGFza0lkOiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG59XG4vKipcbiAqIFRoaXMgY2xhc3MgZW5jYXBzdWxhdGVzIGFuZCBleHRlbmRzIHRoZSBST1MgcmVzb3VyY2UgdHlwZSBgQUxJWVVOOjpDTVM6OlNpdGVNb25pdG9yYCwgd2hpY2ggaXMgdXNlZCB0byBjcmVhdGUgYSBzaXRlIG1vbml0b3JpbmcgdGFzay5cbiAqIEBOb3RlIFRoaXMgY2xhc3MgbWF5IGhhdmUgc29tZSBuZXcgZnVuY3Rpb25zIHRvIGZhY2lsaXRhdGUgZGV2ZWxvcG1lbnQsIHNvIGl0IGlzIHJlY29tbWVuZGVkIHRvIHVzZSB0aGlzIGNsYXNzIGluc3RlYWQgb2YgYFJvc1NpdGVNb25pdG9yYGZvciBhIG1vcmUgY29udmVuaWVudCBkZXZlbG9wbWVudCBleHBlcmllbmNlLlxuICogU2VlIGh0dHBzOi8vd3d3LmFsaWJhYmFjbG91ZC5jb20vaGVscC9yb3MvZGV2ZWxvcGVyLXJlZmVyZW5jZS9hbGl5dW4tY21zLXNpdGVtb25pdG9yXG4gKi9cbmV4cG9ydCBjbGFzcyBTaXRlTW9uaXRvciBleHRlbmRzIHJvcy5SZXNvdXJjZSBpbXBsZW1lbnRzIElTaXRlTW9uaXRvciB7XG4gICAgcHJvdGVjdGVkIHNjb3BlOiByb3MuQ29uc3RydWN0O1xuICAgIHByb3RlY3RlZCBpZDogc3RyaW5nO1xuICAgIHB1YmxpYyByZWFkb25seSBwcm9wczogU2l0ZU1vbml0b3JQcm9wcztcbiAgICBwcm90ZWN0ZWQgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6IGJvb2xlYW47XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgVGFza0lkOiBUaGUgSUQgb2YgdGhlIHNpdGUgbW9uaXRvcmluZyB0YXNrLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyVGFza0lkOiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBQYXJhbSBzY29wZSAtIHNjb3BlIGluIHdoaWNoIHRoaXMgcmVzb3VyY2UgaXMgZGVmaW5lZFxuICAgICAqIFBhcmFtIGlkICAgIC0gc2NvcGVkIGlkIG9mIHRoZSByZXNvdXJjZVxuICAgICAqIFBhcmFtIHByb3BzIC0gcmVzb3VyY2UgcHJvcGVydGllc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiByb3MuQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogU2l0ZU1vbml0b3JQcm9wcywgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6Ym9vbGVhbiA9IHRydWUpIHtcbiAgICAgICAgc3VwZXIoc2NvcGUsIGlkKTtcbiAgICAgICAgdGhpcy5zY29wZSA9IHNjb3BlO1xuICAgICAgICB0aGlzLmlkID0gaWQ7XG4gICAgICAgIHRoaXMucHJvcHMgPSBwcm9wcztcbiAgICAgICAgdGhpcy5lbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCA9IGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50O1xuXG4gICAgICAgIGNvbnN0IHJvc1NpdGVNb25pdG9yID0gbmV3IFJvc1NpdGVNb25pdG9yKHRoaXMsIGlkLCAge1xuICAgICAgICAgICAgYWRkcmVzczogcHJvcHMuYWRkcmVzcyxcbiAgICAgICAgICAgIG9wdGlvbnNKc29uOiBwcm9wcy5vcHRpb25zSnNvbixcbiAgICAgICAgICAgIHRhc2tOYW1lOiBwcm9wcy50YXNrTmFtZSxcbiAgICAgICAgICAgIHRhc2tUeXBlOiBwcm9wcy50YXNrVHlwZSxcbiAgICAgICAgICAgIGlzcENpdGllczogcHJvcHMuaXNwQ2l0aWVzLFxuICAgICAgICAgICAgaW50ZXJ2YWw6IHByb3BzLmludGVydmFsLFxuICAgICAgICAgICAgYWxlcnRJZHM6IHByb3BzLmFsZXJ0SWRzLFxuICAgICAgICB9LCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCAmJiB0aGlzLnN0YWNrLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50KTtcbiAgICAgICAgdGhpcy5yZXNvdXJjZSA9IHJvc1NpdGVNb25pdG9yO1xuICAgICAgICB0aGlzLmF0dHJUYXNrSWQgPSByb3NTaXRlTW9uaXRvci5hdHRyVGFza0lkO1xuICAgIH1cbn1cbiJdfQ==