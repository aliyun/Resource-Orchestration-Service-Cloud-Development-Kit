"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ScalingRule = exports.ScalingRuleProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ess_generated_1 = require("./ess.generated");
Object.defineProperty(exports, "ScalingRuleProperty", { enumerable: true, get: function () { return ess_generated_1.RosScalingRule; } });
/**
 * This class encapsulates and extends the ROS resource type `DATASOURCE::ESS::ScalingRule`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosScalingRule`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/datasource-ess-scalingrule
 */
class ScalingRule extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosScalingRule = new ess_generated_1.RosScalingRule(this, id, {
            scalingRuleId: props.scalingRuleId,
            refreshOptions: props.refreshOptions === undefined || props.refreshOptions === null ? 'Never' : props.refreshOptions,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosScalingRule;
        this.attrAdjustmentType = rosScalingRule.attrAdjustmentType;
        this.attrAdjustmentValue = rosScalingRule.attrAdjustmentValue;
        this.attrAlarms = rosScalingRule.attrAlarms;
        this.attrCooldown = rosScalingRule.attrCooldown;
        this.attrDisableScaleIn = rosScalingRule.attrDisableScaleIn;
        this.attrEstimatedInstanceWarmup = rosScalingRule.attrEstimatedInstanceWarmup;
        this.attrInitialMaxSize = rosScalingRule.attrInitialMaxSize;
        this.attrMaxSize = rosScalingRule.attrMaxSize;
        this.attrMetricName = rosScalingRule.attrMetricName;
        this.attrMinAdjustmentMagnitude = rosScalingRule.attrMinAdjustmentMagnitude;
        this.attrMinSize = rosScalingRule.attrMinSize;
        this.attrPredictiveScalingMode = rosScalingRule.attrPredictiveScalingMode;
        this.attrPredictiveTaskBufferTime = rosScalingRule.attrPredictiveTaskBufferTime;
        this.attrPredictiveValueBehavior = rosScalingRule.attrPredictiveValueBehavior;
        this.attrPredictiveValueBuffer = rosScalingRule.attrPredictiveValueBuffer;
        this.attrScaleInEvaluationCount = rosScalingRule.attrScaleInEvaluationCount;
        this.attrScaleOutEvaluationCount = rosScalingRule.attrScaleOutEvaluationCount;
        this.attrScalingGroupId = rosScalingRule.attrScalingGroupId;
        this.attrScalingRuleAri = rosScalingRule.attrScalingRuleAri;
        this.attrScalingRuleId = rosScalingRule.attrScalingRuleId;
        this.attrScalingRuleName = rosScalingRule.attrScalingRuleName;
        this.attrScalingRuleType = rosScalingRule.attrScalingRuleType;
        this.attrStepAdjustments = rosScalingRule.attrStepAdjustments;
        this.attrTargetValue = rosScalingRule.attrTargetValue;
    }
}
exports.ScalingRule = ScalingRule;
//# sourceMappingURL=data:application/json;base64,