"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.App = exports.AppProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const elasticsearchserverless_generated_1 = require("./elasticsearchserverless.generated");
Object.defineProperty(exports, "AppProperty", { enumerable: true, get: function () { return elasticsearchserverless_generated_1.RosApp; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::ElasticSearchServerless::App`, which is used to create an Elasticsearch serverless application.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosApp`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-elasticsearchserverless-app
 */
class App extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosApp = new elasticsearchserverless_generated_1.RosApp(this, id, {
            appVersion: props.appVersion === undefined || props.appVersion === null ? '7.10' : props.appVersion,
            description: props.description,
            authentication: props.authentication,
            quotaInfo: props.quotaInfo,
            network: props.network,
            privateNetwork: props.privateNetwork,
            appName: props.appName,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosApp;
        this.attrInstanceId = rosApp.attrInstanceId;
        this.attrPrivateEsDomain = rosApp.attrPrivateEsDomain;
        this.attrPrivateKibanaDomain = rosApp.attrPrivateKibanaDomain;
        this.attrPublicEsDomain = rosApp.attrPublicEsDomain;
        this.attrPublicKibanaDomain = rosApp.attrPublicKibanaDomain;
    }
}
exports.App = App;
//# sourceMappingURL=data:application/json;base64,