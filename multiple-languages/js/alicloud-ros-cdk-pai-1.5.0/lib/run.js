"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Run = exports.RunProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const pai_generated_1 = require("./pai.generated");
Object.defineProperty(exports, "RunProperty", { enumerable: true, get: function () { return pai_generated_1.RosRun; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::PAI::Run`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosRun`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-pai-run
 */
class Run extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosRun = new pai_generated_1.RosRun(this, id, {
            experimentId: props.experimentId,
            sourceId: props.sourceId,
            sourceType: props.sourceType,
            runName: props.runName,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosRun;
        this.attrAccessibility = rosRun.attrAccessibility;
        this.attrCreateTime = rosRun.attrCreateTime;
        this.attrExperimentId = rosRun.attrExperimentId;
        this.attrGmtModifiedTime = rosRun.attrGmtModifiedTime;
        this.attrLabels = rosRun.attrLabels;
        this.attrMetrics = rosRun.attrMetrics;
        this.attrOwnerId = rosRun.attrOwnerId;
        this.attrParams = rosRun.attrParams;
        this.attrRunId = rosRun.attrRunId;
        this.attrRunName = rosRun.attrRunName;
        this.attrSourceId = rosRun.attrSourceId;
        this.attrSourceType = rosRun.attrSourceType;
        this.attrUserId = rosRun.attrUserId;
        this.attrWorkspaceId = rosRun.attrWorkspaceId;
    }
}
exports.Run = Run;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicnVuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicnVuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDhDQUE4QztBQUM5QyxtREFBeUM7QUFFdEIsNEZBRlYsc0JBQU0sT0FFZTtBQTZCOUI7Ozs7R0FJRztBQUNILE1BQWEsR0FBSSxTQUFRLEdBQUcsQ0FBQyxRQUFRO0lBNEVqQzs7OztPQUlHO0lBQ0gsWUFBWSxLQUFvQixFQUFFLEVBQVUsRUFBRSxLQUFlLEVBQUUsbUNBQTJDLElBQUk7UUFDMUcsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNqQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUNiLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxnQ0FBZ0MsR0FBRyxnQ0FBZ0MsQ0FBQztRQUV6RSxNQUFNLE1BQU0sR0FBRyxJQUFJLHNCQUFNLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRztZQUNqQyxZQUFZLEVBQUUsS0FBSyxDQUFDLFlBQVk7WUFDaEMsUUFBUSxFQUFFLEtBQUssQ0FBQyxRQUFRO1lBQ3hCLFVBQVUsRUFBRSxLQUFLLENBQUMsVUFBVTtZQUM1QixPQUFPLEVBQUUsS0FBSyxDQUFDLE9BQU87U0FDekIsRUFBRSxnQ0FBZ0MsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7UUFDcEYsSUFBSSxDQUFDLFFBQVEsR0FBRyxNQUFNLENBQUM7UUFDdkIsSUFBSSxDQUFDLGlCQUFpQixHQUFHLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQztRQUNsRCxJQUFJLENBQUMsY0FBYyxHQUFHLE1BQU0sQ0FBQyxjQUFjLENBQUM7UUFDNUMsSUFBSSxDQUFDLGdCQUFnQixHQUFHLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQztRQUNoRCxJQUFJLENBQUMsbUJBQW1CLEdBQUcsTUFBTSxDQUFDLG1CQUFtQixDQUFDO1FBQ3RELElBQUksQ0FBQyxVQUFVLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQztRQUNwQyxJQUFJLENBQUMsV0FBVyxHQUFHLE1BQU0sQ0FBQyxXQUFXLENBQUM7UUFDdEMsSUFBSSxDQUFDLFdBQVcsR0FBRyxNQUFNLENBQUMsV0FBVyxDQUFDO1FBQ3RDLElBQUksQ0FBQyxVQUFVLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQztRQUNwQyxJQUFJLENBQUMsU0FBUyxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUM7UUFDbEMsSUFBSSxDQUFDLFdBQVcsR0FBRyxNQUFNLENBQUMsV0FBVyxDQUFDO1FBQ3RDLElBQUksQ0FBQyxZQUFZLEdBQUcsTUFBTSxDQUFDLFlBQVksQ0FBQztRQUN4QyxJQUFJLENBQUMsY0FBYyxHQUFHLE1BQU0sQ0FBQyxjQUFjLENBQUM7UUFDNUMsSUFBSSxDQUFDLFVBQVUsR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDO1FBQ3BDLElBQUksQ0FBQyxlQUFlLEdBQUcsTUFBTSxDQUFDLGVBQWUsQ0FBQztJQUNsRCxDQUFDO0NBQ0o7QUE5R0Qsa0JBOEdDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcm9zIGZyb20gJ0BhbGljbG91ZC9yb3MtY2RrLWNvcmUnO1xuaW1wb3J0IHsgUm9zUnVuIH0gZnJvbSAnLi9wYWkuZ2VuZXJhdGVkJztcbi8vIEdlbmVyYXRlZCBmcm9tIHRoZSBBbGlDbG91ZCBST1MgUmVzb3VyY2UgU3BlY2lmaWNhdGlvblxuZXhwb3J0IHsgUm9zUnVuIGFzIFJ1blByb3BlcnR5IH07XG5cbi8qKlxuICogUHJvcGVydGllcyBmb3IgZGVmaW5pbmcgYSBgUnVuYC5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvYWxpeXVuLXBhaS1ydW5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBSdW5Qcm9wcyB7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBleHBlcmltZW50SWQ6IFJlc291cmNlIGF0dHJpYnV0ZSBmaWVsZCBvZiB0aGUgZXhwZXJpbWVudCBJRCB0byB3aGljaCBSdW4gYmVsb25ncy5cbiAgICAgKi9cbiAgICByZWFkb25seSBleHBlcmltZW50SWQ6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHJ1bk5hbWU6IFRoZSBuYW1lIG9mIHRoZSBSdW4uXG4gICAgICovXG4gICAgcmVhZG9ubHkgcnVuTmFtZT86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHNvdXJjZUlkOiBBdHRyaWJ1dGUgUmVzb3VyY2UgZmllbGQgcmVwcmVzZW50aW5nIHRoZSBzb3VyY2UgdGFzayBJRC5cbiAgICAgKi9cbiAgICByZWFkb25seSBzb3VyY2VJZD86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHNvdXJjZVR5cGU6IFJlc291cmNlIGF0dHJpYnV0ZSBmaWVsZHMgcmVwcmVzZW50aW5nIHRoZSBzb3VyY2UgdHlwZS5cbiAgICAgKi9cbiAgICByZWFkb25seSBzb3VyY2VUeXBlPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xufVxuXG4vKipcbiAqIFRoaXMgY2xhc3MgZW5jYXBzdWxhdGVzIGFuZCBleHRlbmRzIHRoZSBST1MgcmVzb3VyY2UgdHlwZSBgQUxJWVVOOjpQQUk6OlJ1bmAuXG4gKiBATm90ZSBUaGlzIGNsYXNzIG1heSBoYXZlIHNvbWUgbmV3IGZ1bmN0aW9ucyB0byBmYWNpbGl0YXRlIGRldmVsb3BtZW50LCBzbyBpdCBpcyByZWNvbW1lbmRlZCB0byB1c2UgdGhpcyBjbGFzcyBpbnN0ZWFkIG9mIGBSb3NSdW5gZm9yIGEgbW9yZSBjb252ZW5pZW50IGRldmVsb3BtZW50IGV4cGVyaWVuY2UuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2FsaXl1bi1wYWktcnVuXG4gKi9cbmV4cG9ydCBjbGFzcyBSdW4gZXh0ZW5kcyByb3MuUmVzb3VyY2Uge1xuICAgIHByb3RlY3RlZCBzY29wZTogcm9zLkNvbnN0cnVjdDtcbiAgICBwcm90ZWN0ZWQgaWQ6IHN0cmluZztcbiAgICBwcm90ZWN0ZWQgcHJvcHM6IFJ1blByb3BzO1xuICAgIHByb3RlY3RlZCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBBY2Nlc3NpYmlsaXR5OiBSZXNvdXJjZSBhdHRyaWJ1dGUgZmllbGRzIHJlcHJlc2VudGluZyB2aXNpYmlsaXR5LlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyQWNjZXNzaWJpbGl0eTogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIENyZWF0ZVRpbWU6IFRoZSBjcmVhdGlvbiB0aW1lIG9mIHRoZSBSdW4uXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJDcmVhdGVUaW1lOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgRXhwZXJpbWVudElkOiBSZXNvdXJjZSBhdHRyaWJ1dGUgZmllbGQgb2YgdGhlIGV4cGVyaW1lbnQgSUQgdG8gd2hpY2ggUnVuIGJlbG9uZ3MuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJFeHBlcmltZW50SWQ6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBHbXRNb2RpZmllZFRpbWU6IFJlc291cmNlIGF0dHJpYnV0ZSBmaWVsZHMgcmVwcmVzZW50aW5nIGVkaXQgdGltZS5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckdtdE1vZGlmaWVkVGltZTogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIExhYmVsczogUnVuIGF0dHJpYnV0ZSBmaWVsZCByZXByZXNlbnRpbmcgdGhlIHJ1biB0YWcuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJMYWJlbHM6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBNZXRyaWNzOiBSZXNvdXJjZSBhdHRyaWJ1dGUgZmllbGQgcmVwcmVzZW50aW5nIHRoZSBydW4gbWV0cmljLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyTWV0cmljczogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIE93bmVySWQ6IFJlc291cmNlIGF0dHJpYnV0ZSBmaWVsZCByZXByZXNlbnRpbmcgb3duZXIuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJPd25lcklkOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgUGFyYW1zOiBSZXNvdXJjZSBhdHRyaWJ1dGUgZmllbGQgcmVwcmVzZW50aW5nIHRoZSBydW4gcGFyYW1ldGVyLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyUGFyYW1zOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgUnVuSWQ6IFRoZSBJRCBvZiB0aGUgUnVuLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyUnVuSWQ6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBSdW5OYW1lOiBUaGUgbmFtZSBvZiB0aGUgUnVuLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyUnVuTmFtZTogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIFNvdXJjZUlkOiBBdHRyaWJ1dGUgUmVzb3VyY2UgZmllbGQgcmVwcmVzZW50aW5nIHRoZSBzb3VyY2UgdGFzayBJRC5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0clNvdXJjZUlkOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgU291cmNlVHlwZTogUnVuIGF0dHJpYnV0ZSBmaWVsZHMgcmVwcmVzZW50aW5nIHRoZSBzb3VyY2UgdHlwZS5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0clNvdXJjZVR5cGU6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBVc2VySWQ6IFJ1biBhdHRyaWJ1dGUgZmllbGQgcmVwcmVzZW50aW5nIGNyZWF0b3IgSUQuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJVc2VySWQ6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBXb3Jrc3BhY2VJZDogUmVzb3VyY2UgYXR0cmlidXRlIGZpZWxkIG9mIHRoZSB3b3Jrc3BhY2UgSUQgdG8gd2hpY2ggUnVuIGJlbG9uZ3MuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJXb3Jrc3BhY2VJZDogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUGFyYW0gc2NvcGUgLSBzY29wZSBpbiB3aGljaCB0aGlzIHJlc291cmNlIGlzIGRlZmluZWRcbiAgICAgKiBQYXJhbSBpZCAgICAtIHNjb3BlZCBpZCBvZiB0aGUgcmVzb3VyY2VcbiAgICAgKiBQYXJhbSBwcm9wcyAtIHJlc291cmNlIHByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihzY29wZTogcm9zLkNvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IFJ1blByb3BzLCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDpib29sZWFuID0gdHJ1ZSkge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQpO1xuICAgICAgICB0aGlzLnNjb3BlID0gc2NvcGU7XG4gICAgICAgIHRoaXMuaWQgPSBpZDtcbiAgICAgICAgdGhpcy5wcm9wcyA9IHByb3BzO1xuICAgICAgICB0aGlzLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ID0gZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ7XG5cbiAgICAgICAgY29uc3Qgcm9zUnVuID0gbmV3IFJvc1J1bih0aGlzLCBpZCwgIHtcbiAgICAgICAgICAgIGV4cGVyaW1lbnRJZDogcHJvcHMuZXhwZXJpbWVudElkLFxuICAgICAgICAgICAgc291cmNlSWQ6IHByb3BzLnNvdXJjZUlkLFxuICAgICAgICAgICAgc291cmNlVHlwZTogcHJvcHMuc291cmNlVHlwZSxcbiAgICAgICAgICAgIHJ1bk5hbWU6IHByb3BzLnJ1bk5hbWUsXG4gICAgICAgIH0sIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ICYmIHRoaXMuc3RhY2suZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQpO1xuICAgICAgICB0aGlzLnJlc291cmNlID0gcm9zUnVuO1xuICAgICAgICB0aGlzLmF0dHJBY2Nlc3NpYmlsaXR5ID0gcm9zUnVuLmF0dHJBY2Nlc3NpYmlsaXR5O1xuICAgICAgICB0aGlzLmF0dHJDcmVhdGVUaW1lID0gcm9zUnVuLmF0dHJDcmVhdGVUaW1lO1xuICAgICAgICB0aGlzLmF0dHJFeHBlcmltZW50SWQgPSByb3NSdW4uYXR0ckV4cGVyaW1lbnRJZDtcbiAgICAgICAgdGhpcy5hdHRyR210TW9kaWZpZWRUaW1lID0gcm9zUnVuLmF0dHJHbXRNb2RpZmllZFRpbWU7XG4gICAgICAgIHRoaXMuYXR0ckxhYmVscyA9IHJvc1J1bi5hdHRyTGFiZWxzO1xuICAgICAgICB0aGlzLmF0dHJNZXRyaWNzID0gcm9zUnVuLmF0dHJNZXRyaWNzO1xuICAgICAgICB0aGlzLmF0dHJPd25lcklkID0gcm9zUnVuLmF0dHJPd25lcklkO1xuICAgICAgICB0aGlzLmF0dHJQYXJhbXMgPSByb3NSdW4uYXR0clBhcmFtcztcbiAgICAgICAgdGhpcy5hdHRyUnVuSWQgPSByb3NSdW4uYXR0clJ1bklkO1xuICAgICAgICB0aGlzLmF0dHJSdW5OYW1lID0gcm9zUnVuLmF0dHJSdW5OYW1lO1xuICAgICAgICB0aGlzLmF0dHJTb3VyY2VJZCA9IHJvc1J1bi5hdHRyU291cmNlSWQ7XG4gICAgICAgIHRoaXMuYXR0clNvdXJjZVR5cGUgPSByb3NSdW4uYXR0clNvdXJjZVR5cGU7XG4gICAgICAgIHRoaXMuYXR0clVzZXJJZCA9IHJvc1J1bi5hdHRyVXNlcklkO1xuICAgICAgICB0aGlzLmF0dHJXb3Jrc3BhY2VJZCA9IHJvc1J1bi5hdHRyV29ya3NwYWNlSWQ7XG4gICAgfVxufVxuIl19