"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Experiment = exports.ExperimentProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const pai_generated_1 = require("./pai.generated");
Object.defineProperty(exports, "ExperimentProperty", { enumerable: true, get: function () { return pai_generated_1.RosExperiment; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::PAI::Experiment`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosExperiment`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-pai-experiment
 */
class Experiment extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosExperiment = new pai_generated_1.RosExperiment(this, id, {
            accessibility: props.accessibility,
            artifactUri: props.artifactUri,
            experimentName: props.experimentName,
            workspaceId: props.workspaceId,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosExperiment;
        this.attrAccessibility = rosExperiment.attrAccessibility;
        this.attrArtifactUri = rosExperiment.attrArtifactUri;
        this.attrCreateTime = rosExperiment.attrCreateTime;
        this.attrExperimentId = rosExperiment.attrExperimentId;
        this.attrExperimentName = rosExperiment.attrExperimentName;
        this.attrGmtModifiedTime = rosExperiment.attrGmtModifiedTime;
        this.attrLabels = rosExperiment.attrLabels;
        this.attrOwnerId = rosExperiment.attrOwnerId;
        this.attrTensorboardLogUri = rosExperiment.attrTensorboardLogUri;
        this.attrUserId = rosExperiment.attrUserId;
        this.attrWorkspaceId = rosExperiment.attrWorkspaceId;
    }
}
exports.Experiment = Experiment;
//# sourceMappingURL=data:application/json;base64,