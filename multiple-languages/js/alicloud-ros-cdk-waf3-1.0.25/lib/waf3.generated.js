"use strict";
// Generated from the AliCloud ROS Resource Specification
Object.defineProperty(exports, "__esModule", { value: true });
exports.RosInstance = void 0;
const ros = require("@alicloud/ros-cdk-core");
/**
 * Determine whether the given properties match those of a `RosInstanceProps`
 *
 * @param properties - the TypeScript properties of a `RosInstanceProps`
 *
 * @returns the result of the validation.
 */
function RosInstancePropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('ignoreExisting', ros.validateBoolean)(properties.ignoreExisting));
    errors.collect(ros.propertyValidator('intelligentLoadBalancing', ros.validateBoolean)(properties.intelligentLoadBalancing));
    errors.collect(ros.propertyValidator('autoRenew', ros.validateBoolean)(properties.autoRenew));
    if (properties.period && (typeof properties.period) !== 'object') {
        errors.collect(ros.propertyValidator('period', ros.validateAllowedValues)({
            data: properties.period,
            allowedValues: [1, 2, 3, 6],
        }));
    }
    errors.collect(ros.propertyValidator('period', ros.validateNumber)(properties.period));
    errors.collect(ros.propertyValidator('botWebProtection', ros.validateBoolean)(properties.botWebProtection));
    errors.collect(ros.propertyValidator('apiSecurity', ros.validateBoolean)(properties.apiSecurity));
    errors.collect(ros.propertyValidator('autoPay', ros.validateBoolean)(properties.autoPay));
    if (properties.trafficBillingProtectionThreshold && (typeof properties.trafficBillingProtectionThreshold) !== 'object') {
        errors.collect(ros.propertyValidator('trafficBillingProtectionThreshold', ros.validateRange)({
            data: properties.trafficBillingProtectionThreshold,
            min: 1000,
            max: 100000,
        }));
    }
    errors.collect(ros.propertyValidator('trafficBillingProtectionThreshold', ros.validateNumber)(properties.trafficBillingProtectionThreshold));
    errors.collect(ros.propertyValidator('payType', ros.requiredValidator)(properties.payType));
    if (properties.payType && (typeof properties.payType) !== 'object') {
        errors.collect(ros.propertyValidator('payType', ros.validateAllowedValues)({
            data: properties.payType,
            allowedValues: ["PayAsYouGo", "PostPaid", "PayOnDemand", "Postpaid", "PostPay", "Postpay", "POSTPAY", "POST", "Subscription", "PrePaid", "Prepaid", "PrePay", "Prepay", "PREPAY", "PRE"],
        }));
    }
    errors.collect(ros.propertyValidator('payType', ros.validateString)(properties.payType));
    if (properties.logStorage && (typeof properties.logStorage) !== 'object') {
        errors.collect(ros.propertyValidator('logStorage', ros.validateRange)({
            data: properties.logStorage,
            min: 3,
            max: 150,
        }));
    }
    errors.collect(ros.propertyValidator('logStorage', ros.validateNumber)(properties.logStorage));
    if (properties.elasticQps && (typeof properties.elasticQps) !== 'object') {
        errors.collect(ros.propertyValidator('elasticQps', ros.validateRange)({
            data: properties.elasticQps,
            min: 0,
            max: 60000,
        }));
    }
    errors.collect(ros.propertyValidator('elasticQps', ros.validateNumber)(properties.elasticQps));
    if (properties.domainsExtension && (typeof properties.domainsExtension) !== 'object') {
        errors.collect(ros.propertyValidator('domainsExtension', ros.validateRange)({
            data: properties.domainsExtension,
            min: 0,
            max: 5000,
        }));
    }
    errors.collect(ros.propertyValidator('domainsExtension', ros.validateNumber)(properties.domainsExtension));
    if (properties.wafVersion && (typeof properties.wafVersion) !== 'object') {
        errors.collect(ros.propertyValidator('wafVersion', ros.validateAllowedValues)({
            data: properties.wafVersion,
            allowedValues: ["Basic", "Pro", "Enterprise", "Ultimate"],
        }));
    }
    errors.collect(ros.propertyValidator('wafVersion', ros.validateString)(properties.wafVersion));
    if (properties.exclusiveIpAddress && (typeof properties.exclusiveIpAddress) !== 'object') {
        errors.collect(ros.propertyValidator('exclusiveIpAddress', ros.validateRange)({
            data: properties.exclusiveIpAddress,
            min: 0,
            max: 100,
        }));
    }
    errors.collect(ros.propertyValidator('exclusiveIpAddress', ros.validateNumber)(properties.exclusiveIpAddress));
    if (properties.additionalProtectionNodes && (typeof properties.additionalProtectionNodes) !== 'object') {
        errors.collect(ros.propertyValidator('additionalProtectionNodes', ros.validateRange)({
            data: properties.additionalProtectionNodes,
            min: 0,
            max: 500,
        }));
    }
    errors.collect(ros.propertyValidator('additionalProtectionNodes', ros.validateNumber)(properties.additionalProtectionNodes));
    errors.collect(ros.propertyValidator('region', ros.requiredValidator)(properties.region));
    if (properties.region && (typeof properties.region) !== 'object') {
        errors.collect(ros.propertyValidator('region', ros.validateAllowedValues)({
            data: properties.region,
            allowedValues: ["OutsideChineseMainland", "ChineseMainland"],
        }));
    }
    errors.collect(ros.propertyValidator('region', ros.validateString)(properties.region));
    if (properties.qpsExtension && (typeof properties.qpsExtension) !== 'object') {
        errors.collect(ros.propertyValidator('qpsExtension', ros.validateRange)({
            data: properties.qpsExtension,
            min: 0,
            max: 30000,
        }));
    }
    errors.collect(ros.propertyValidator('qpsExtension', ros.validateNumber)(properties.qpsExtension));
    errors.collect(ros.propertyValidator('fraudDetection', ros.validateBoolean)(properties.fraudDetection));
    errors.collect(ros.propertyValidator('botAppProtection', ros.validateBoolean)(properties.botAppProtection));
    errors.collect(ros.propertyValidator('logService', ros.validateBoolean)(properties.logService));
    if (properties.periodUnit && (typeof properties.periodUnit) !== 'object') {
        errors.collect(ros.propertyValidator('periodUnit', ros.validateAllowedValues)({
            data: properties.periodUnit,
            allowedValues: ["Month", "Year"],
        }));
    }
    errors.collect(ros.propertyValidator('periodUnit', ros.validateString)(properties.periodUnit));
    return errors.wrap('supplied properties not correct for "RosInstanceProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::WAF3::Instance` resource
 *
 * @param properties - the TypeScript properties of a `RosInstanceProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::WAF3::Instance` resource.
 */
// @ts-ignore TS6133
function rosInstancePropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosInstancePropsValidator(properties).assertSuccess();
    }
    return {
        PayType: ros.stringToRosTemplate(properties.payType),
        Region: ros.stringToRosTemplate(properties.region),
        AdditionalProtectionNodes: ros.numberToRosTemplate(properties.additionalProtectionNodes),
        ApiSecurity: ros.booleanToRosTemplate(properties.apiSecurity),
        AutoPay: ros.booleanToRosTemplate(properties.autoPay),
        AutoRenew: ros.booleanToRosTemplate(properties.autoRenew),
        BotAppProtection: ros.booleanToRosTemplate(properties.botAppProtection),
        BotWebProtection: ros.booleanToRosTemplate(properties.botWebProtection),
        DomainsExtension: ros.numberToRosTemplate(properties.domainsExtension),
        ElasticQps: ros.numberToRosTemplate(properties.elasticQps),
        ExclusiveIPAddress: ros.numberToRosTemplate(properties.exclusiveIpAddress),
        FraudDetection: ros.booleanToRosTemplate(properties.fraudDetection),
        IgnoreExisting: ros.booleanToRosTemplate(properties.ignoreExisting),
        IntelligentLoadBalancing: ros.booleanToRosTemplate(properties.intelligentLoadBalancing),
        LogService: ros.booleanToRosTemplate(properties.logService),
        LogStorage: ros.numberToRosTemplate(properties.logStorage),
        Period: ros.numberToRosTemplate(properties.period),
        PeriodUnit: ros.stringToRosTemplate(properties.periodUnit),
        QpsExtension: ros.numberToRosTemplate(properties.qpsExtension),
        TrafficBillingProtectionThreshold: ros.numberToRosTemplate(properties.trafficBillingProtectionThreshold),
        WafVersion: ros.stringToRosTemplate(properties.wafVersion),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::WAF3::Instance`, which is used to create a Web Application Firewall (WAF) 3.0 instance.
 * @Note This class does not contain additional functions, so it is recommended to use the `Instance` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-waf3-instance
 */
class RosInstance extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosInstance.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrInstanceId = this.getAtt('InstanceId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.payType = props.payType;
        this.region = props.region;
        this.additionalProtectionNodes = props.additionalProtectionNodes;
        this.apiSecurity = props.apiSecurity;
        this.autoPay = props.autoPay;
        this.autoRenew = props.autoRenew;
        this.botAppProtection = props.botAppProtection;
        this.botWebProtection = props.botWebProtection;
        this.domainsExtension = props.domainsExtension;
        this.elasticQps = props.elasticQps;
        this.exclusiveIpAddress = props.exclusiveIpAddress;
        this.fraudDetection = props.fraudDetection;
        this.ignoreExisting = props.ignoreExisting;
        this.intelligentLoadBalancing = props.intelligentLoadBalancing;
        this.logService = props.logService;
        this.logStorage = props.logStorage;
        this.period = props.period;
        this.periodUnit = props.periodUnit;
        this.qpsExtension = props.qpsExtension;
        this.trafficBillingProtectionThreshold = props.trafficBillingProtectionThreshold;
        this.wafVersion = props.wafVersion;
    }
    get rosProperties() {
        return {
            payType: this.payType,
            region: this.region,
            additionalProtectionNodes: this.additionalProtectionNodes,
            apiSecurity: this.apiSecurity,
            autoPay: this.autoPay,
            autoRenew: this.autoRenew,
            botAppProtection: this.botAppProtection,
            botWebProtection: this.botWebProtection,
            domainsExtension: this.domainsExtension,
            elasticQps: this.elasticQps,
            exclusiveIpAddress: this.exclusiveIpAddress,
            fraudDetection: this.fraudDetection,
            ignoreExisting: this.ignoreExisting,
            intelligentLoadBalancing: this.intelligentLoadBalancing,
            logService: this.logService,
            logStorage: this.logStorage,
            period: this.period,
            periodUnit: this.periodUnit,
            qpsExtension: this.qpsExtension,
            trafficBillingProtectionThreshold: this.trafficBillingProtectionThreshold,
            wafVersion: this.wafVersion,
        };
    }
    renderProperties(props) {
        return rosInstancePropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosInstance = RosInstance;
/**
 * The resource type name for this resource class.
 */
RosInstance.ROS_RESOURCE_TYPE_NAME = "ALIYUN::WAF3::Instance";
//# sourceMappingURL=data:application/json;base64,