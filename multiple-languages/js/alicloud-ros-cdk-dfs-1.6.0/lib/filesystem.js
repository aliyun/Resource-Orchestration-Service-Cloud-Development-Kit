"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileSystem = exports.FileSystemProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const dfs_generated_1 = require("./dfs.generated");
Object.defineProperty(exports, "FileSystemProperty", { enumerable: true, get: function () { return dfs_generated_1.RosFileSystem; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::DFS::FileSystem`, which is used to create a file system.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosFileSystem`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-dfs-filesystem
 */
class FileSystem extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosFileSystem = new dfs_generated_1.RosFileSystem(this, id, {
            spaceCapacity: props.spaceCapacity,
            description: props.description,
            storageType: props.storageType === undefined || props.storageType === null ? 'STANDARD' : props.storageType,
            zoneId: props.zoneId,
            partitionNumber: props.partitionNumber,
            protocolType: props.protocolType,
            dataRedundancyType: props.dataRedundancyType === undefined || props.dataRedundancyType === null ? 'LRS' : props.dataRedundancyType,
            fileSystemName: props.fileSystemName,
            provisionedThroughputInMiBps: props.provisionedThroughputInMiBps,
            throughputMode: props.throughputMode === undefined || props.throughputMode === null ? 'Standard' : props.throughputMode,
            storageSetName: props.storageSetName,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosFileSystem;
        this.attrFileSystemId = rosFileSystem.attrFileSystemId;
    }
}
exports.FileSystem = FileSystem;
//# sourceMappingURL=data:application/json;base64,