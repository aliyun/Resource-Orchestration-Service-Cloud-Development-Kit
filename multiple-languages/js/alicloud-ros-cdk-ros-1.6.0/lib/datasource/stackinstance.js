"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StackInstance = exports.StackInstanceProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ros_generated_1 = require("./ros.generated");
Object.defineProperty(exports, "StackInstanceProperty", { enumerable: true, get: function () { return ros_generated_1.RosStackInstance; } });
/**
 * This class encapsulates and extends the ROS resource type `DATASOURCE::ROS::StackInstance`, which is used to query the information about a stack instance that is associated with a stack group.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosStackInstance`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/datasource-ros-stackinstance
 */
class StackInstance extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosStackInstance = new ros_generated_1.RosStackInstance(this, id, {
            stackInstanceAccountId: props.stackInstanceAccountId,
            stackGroupName: props.stackGroupName,
            stackInstanceRegionId: props.stackInstanceRegionId,
            outputOption: props.outputOption,
            refreshOptions: props.refreshOptions === undefined || props.refreshOptions === null ? 'Never' : props.refreshOptions,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosStackInstance;
        this.attrAccountId = rosStackInstance.attrAccountId;
        this.attrDriftDetectionTime = rosStackInstance.attrDriftDetectionTime;
        this.attrOutputs = rosStackInstance.attrOutputs;
        this.attrParameterOverrides = rosStackInstance.attrParameterOverrides;
        this.attrRdFolderId = rosStackInstance.attrRdFolderId;
        this.attrRegionId = rosStackInstance.attrRegionId;
        this.attrStackDriftStatus = rosStackInstance.attrStackDriftStatus;
        this.attrStackGroupId = rosStackInstance.attrStackGroupId;
        this.attrStackGroupName = rosStackInstance.attrStackGroupName;
        this.attrStackId = rosStackInstance.attrStackId;
        this.attrStatus = rosStackInstance.attrStatus;
        this.attrStatusReason = rosStackInstance.attrStatusReason;
    }
}
exports.StackInstance = StackInstance;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhY2tpbnN0YW5jZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInN0YWNraW5zdGFuY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsOENBQThDO0FBQzlDLG1EQUFtRDtBQUV0QixzR0FGcEIsZ0NBQWdCLE9BRXlCO0FBMEdsRDs7OztHQUlHO0FBQ0gsTUFBYSxhQUFjLFNBQVEsR0FBRyxDQUFDLFFBQVE7SUFrRTNDOzs7O09BSUc7SUFDSCxZQUFZLEtBQW9CLEVBQUUsRUFBVSxFQUFFLEtBQXlCLEVBQUUsbUNBQTJDLElBQUk7UUFDcEgsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNqQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUNiLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxnQ0FBZ0MsR0FBRyxnQ0FBZ0MsQ0FBQztRQUV6RSxNQUFNLGdCQUFnQixHQUFHLElBQUksZ0NBQWdCLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRztZQUNyRCxzQkFBc0IsRUFBRSxLQUFLLENBQUMsc0JBQXNCO1lBQ3BELGNBQWMsRUFBRSxLQUFLLENBQUMsY0FBYztZQUNwQyxxQkFBcUIsRUFBRSxLQUFLLENBQUMscUJBQXFCO1lBQ2xELFlBQVksRUFBRSxLQUFLLENBQUMsWUFBWTtZQUNoQyxjQUFjLEVBQUUsS0FBSyxDQUFDLGNBQWMsS0FBSyxTQUFTLElBQUksS0FBSyxDQUFDLGNBQWMsS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLGNBQWM7U0FDdkgsRUFBRSxnQ0FBZ0MsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7UUFDcEYsSUFBSSxDQUFDLFFBQVEsR0FBRyxnQkFBZ0IsQ0FBQztRQUNqQyxJQUFJLENBQUMsYUFBYSxHQUFHLGdCQUFnQixDQUFDLGFBQWEsQ0FBQztRQUNwRCxJQUFJLENBQUMsc0JBQXNCLEdBQUcsZ0JBQWdCLENBQUMsc0JBQXNCLENBQUM7UUFDdEUsSUFBSSxDQUFDLFdBQVcsR0FBRyxnQkFBZ0IsQ0FBQyxXQUFXLENBQUM7UUFDaEQsSUFBSSxDQUFDLHNCQUFzQixHQUFHLGdCQUFnQixDQUFDLHNCQUFzQixDQUFDO1FBQ3RFLElBQUksQ0FBQyxjQUFjLEdBQUcsZ0JBQWdCLENBQUMsY0FBYyxDQUFDO1FBQ3RELElBQUksQ0FBQyxZQUFZLEdBQUcsZ0JBQWdCLENBQUMsWUFBWSxDQUFDO1FBQ2xELElBQUksQ0FBQyxvQkFBb0IsR0FBRyxnQkFBZ0IsQ0FBQyxvQkFBb0IsQ0FBQztRQUNsRSxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsZ0JBQWdCLENBQUMsZ0JBQWdCLENBQUM7UUFDMUQsSUFBSSxDQUFDLGtCQUFrQixHQUFHLGdCQUFnQixDQUFDLGtCQUFrQixDQUFDO1FBQzlELElBQUksQ0FBQyxXQUFXLEdBQUcsZ0JBQWdCLENBQUMsV0FBVyxDQUFDO1FBQ2hELElBQUksQ0FBQyxVQUFVLEdBQUcsZ0JBQWdCLENBQUMsVUFBVSxDQUFDO1FBQzlDLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxnQkFBZ0IsQ0FBQyxnQkFBZ0IsQ0FBQztJQUM5RCxDQUFDO0NBQ0o7QUFuR0Qsc0NBbUdDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcm9zIGZyb20gJ0BhbGljbG91ZC9yb3MtY2RrLWNvcmUnO1xuaW1wb3J0IHsgUm9zU3RhY2tJbnN0YW5jZSB9IGZyb20gJy4vcm9zLmdlbmVyYXRlZCc7XG4vLyBHZW5lcmF0ZWQgZnJvbSB0aGUgQWxpQ2xvdWQgUk9TIFJlc291cmNlIFNwZWNpZmljYXRpb25cbmV4cG9ydCB7IFJvc1N0YWNrSW5zdGFuY2UgYXMgU3RhY2tJbnN0YW5jZVByb3BlcnR5IH07XG5cbi8qKlxuICogUHJvcGVydGllcyBmb3IgZGVmaW5pbmcgYSBgU3RhY2tJbnN0YW5jZWAuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2RhdGFzb3VyY2Utcm9zLXN0YWNraW5zdGFuY2VcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBTdGFja0luc3RhbmNlUHJvcHMge1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgc3RhY2tHcm91cE5hbWU6IFJlc291cmNlIHN0YWNrIGdyb3VwIG5hbWUuIE5hbWVzIGFyZSB1bmlxdWUgd2l0aGluIGEgc2luZ2xlIHJlZ2lvbi5cbiAgICAgKiBUaGUgbGVuZ3RoIG11c3Qgbm90IGV4Y2VlZCAyNTUgY2hhcmFjdGVycywgbXVzdCBzdGFydCB3aXRoIGEgbnVtYmVyIG9yIGFuIEVuZ2xpc2ggbGV0dGVyLCBhbmQgY2FuIGNvbnRhaW4gbnVtYmVycywgRW5nbGlzaCBsZXR0ZXJzLCBkYXNoZXMgKC0pIGFuZCB1bmRlcnNjb3JlcyAoXylcbiAgICAgKi9cbiAgICByZWFkb25seSBzdGFja0dyb3VwTmFtZTogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgc3RhY2tJbnN0YW5jZUFjY291bnRJZDogVGhlIHRhcmdldCBhY2NvdW50IElEIHRvIHdoaWNoIHRoZSByZXNvdXJjZSBzdGFjayBiZWxvbmdzLiBcbiAgICAgKiBJbiB0aGUgc2VsZi1zZXJ2aWNlIG1hbmFnZW1lbnQgcGVybWlzc2lvbiBtb2RlLCB0aGUgYWNjb3VudCBpcyBhbiBBbGliYWJhIENsb3VkIGFjY291bnQuXG4gICAgICogSW4gc2VydmljZSBtYW5hZ2VtZW50IHBlcm1pc3Npb24gbW9kZSwgdGhpcyBhY2NvdW50IGlzIGEgbWVtYmVyIGFjY291bnQgb2YgdGhlIHJlc291cmNlIGRpcmVjdG9yeS5cbiAgICAgKi9cbiAgICByZWFkb25seSBzdGFja0luc3RhbmNlQWNjb3VudElkOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBzdGFja0luc3RhbmNlUmVnaW9uSWQ6IFRoZSByZWdpb24gdG8gd2hpY2ggdGhlIHJlc291cmNlIHN0YWNrIGJlbG9uZ3MuXG4gICAgICovXG4gICAgcmVhZG9ubHkgc3RhY2tJbnN0YW5jZVJlZ2lvbklkOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBvdXRwdXRPcHRpb246IFdoZXRoZXIgdG8gcmV0dXJuIHRoZSBPdXRwdXRzIHBhcmFtZXRlciByZXNvdXJjZSBzdGFjayBvdXRwdXQgbGlzdC5cbiAgICAgKi9cbiAgICByZWFkb25seSBvdXRwdXRPcHRpb24/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSByZWZyZXNoT3B0aW9uczogVGhlIHJlZnJlc2ggc3RyYXRlZ3kgZm9yIHRoZSBkYXRhc291cmNlIHJlc291cmNlIHdoZW4gdGhlIHN0YWNrIGlzIHVwZGF0ZWQuIFZhbGlkIHZhbHVlczpcbiAgICAgKiAtIE5ldmVyOiBOZXZlciByZWZyZXNoIHRoZSBkYXRhc291cmNlIHJlc291cmNlIHdoZW4gdGhlIHN0YWNrIGlzIHVwZGF0ZWQuXG4gICAgICogLSBBbHdheXM6IEFsd2F5cyByZWZyZXNoIHRoZSBkYXRhc291cmNlIHJlc291cmNlIHdoZW4gdGhlIHN0YWNrIGlzIHVwZGF0ZWQuXG4gICAgICogRGVmYXVsdCBpcyBOZXZlci5cbiAgICAgKi9cbiAgICByZWFkb25seSByZWZyZXNoT3B0aW9ucz86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcbn1cblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgYFN0YWNrSW5zdGFuY2VgLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIElTdGFja0luc3RhbmNlIGV4dGVuZHMgcm9zLklSZXNvdXJjZSB7XG4gICAgcmVhZG9ubHkgcHJvcHM6IFN0YWNrSW5zdGFuY2VQcm9wcztcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBBY2NvdW50SWQ6IFRoZSBhY2NvdW50IGlkIG9mIHRoZSBzdGFjay5cbiAgICAgKi9cbiAgICByZWFkb25seSBhdHRyQWNjb3VudElkOiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgRHJpZnREZXRlY3Rpb25UaW1lOiBUaGUgdGltZSB3aGVuIHRoZSByZXNvdXJjZSBzdGFjayBncm91cCBsYXN0IHN1Y2Nlc3NmdWxseSBjb21wbGV0ZWQgZGV2aWF0aW9uIGRldGVjdGlvbi5cbiAgICAgKi9cbiAgICByZWFkb25seSBhdHRyRHJpZnREZXRlY3Rpb25UaW1lOiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgT3V0cHV0czogVGhlIG91dHB1dHMgb2YgdGhlIHN0YWNrIGluc3RhbmNlXG4gICAgICovXG4gICAgcmVhZG9ubHkgYXR0ck91dHB1dHM6IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBQYXJhbWV0ZXJPdmVycmlkZXM6IE92ZXJyaWRlIHBhcmFtZXRlciBsaXN0LlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGF0dHJQYXJhbWV0ZXJPdmVycmlkZXM6IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBSZEZvbGRlcklkOiBUaGUgcmVzb3VyY2UgZm9sZGVyIElEIG9mIHRoZSByZXNvdXJjZSBkaXJlY3RvcnkuXG4gICAgICovXG4gICAgcmVhZG9ubHkgYXR0clJkRm9sZGVySWQ6IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBSZWdpb25JZDogVGhlIHJlZ2lvbiBpZCBvZiB0aGUgc3RhY2suXG4gICAgICovXG4gICAgcmVhZG9ubHkgYXR0clJlZ2lvbklkOiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgU3RhY2tEcmlmdFN0YXR1czogVGhlIHN0YXR1cyBvZiB0aGUgbGFzdCBzdWNjZXNzZnVsIGRldmlhdGlvbiBkZXRlY3Rpb24gb2YgdGhlIHJlc291cmNlIHN0YWNrIGdyb3VwLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGF0dHJTdGFja0RyaWZ0U3RhdHVzOiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgU3RhY2tHcm91cElkOiBUaGUgcmVzb3VyY2Ugc3RhY2sgZ3JvdXAgSUQuXG4gICAgICovXG4gICAgcmVhZG9ubHkgYXR0clN0YWNrR3JvdXBJZDogcm9zLklSZXNvbHZhYmxlIHwgc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIFN0YWNrR3JvdXBOYW1lOiBUaGUgcmVzb3VyY2Ugc3RhY2sgZ3JvdXAgbmFtZVxuICAgICAqL1xuICAgIHJlYWRvbmx5IGF0dHJTdGFja0dyb3VwTmFtZTogcm9zLklSZXNvbHZhYmxlIHwgc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIFN0YWNrSWQ6IFRoZSBzdGFjayBpZCBvZiBzdGFjayBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICByZWFkb25seSBhdHRyU3RhY2tJZDogcm9zLklSZXNvbHZhYmxlIHwgc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIFN0YXR1czogUmVzb3VyY2Ugc3RhY2sgc3RhdHVzLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGF0dHJTdGF0dXM6IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBTdGF0dXNSZWFzb246IFN0YXR1cyByZWFzb24gZGVzY3JpcHRpb24uXG4gICAgICovXG4gICAgcmVhZG9ubHkgYXR0clN0YXR1c1JlYXNvbjogcm9zLklSZXNvbHZhYmxlIHwgc3RyaW5nO1xufVxuLyoqXG4gKiBUaGlzIGNsYXNzIGVuY2Fwc3VsYXRlcyBhbmQgZXh0ZW5kcyB0aGUgUk9TIHJlc291cmNlIHR5cGUgYERBVEFTT1VSQ0U6OlJPUzo6U3RhY2tJbnN0YW5jZWAsIHdoaWNoIGlzIHVzZWQgdG8gcXVlcnkgdGhlIGluZm9ybWF0aW9uIGFib3V0IGEgc3RhY2sgaW5zdGFuY2UgdGhhdCBpcyBhc3NvY2lhdGVkIHdpdGggYSBzdGFjayBncm91cC5cbiAqIEBOb3RlIFRoaXMgY2xhc3MgbWF5IGhhdmUgc29tZSBuZXcgZnVuY3Rpb25zIHRvIGZhY2lsaXRhdGUgZGV2ZWxvcG1lbnQsIHNvIGl0IGlzIHJlY29tbWVuZGVkIHRvIHVzZSB0aGlzIGNsYXNzIGluc3RlYWQgb2YgYFJvc1N0YWNrSW5zdGFuY2VgZm9yIGEgbW9yZSBjb252ZW5pZW50IGRldmVsb3BtZW50IGV4cGVyaWVuY2UuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2RhdGFzb3VyY2Utcm9zLXN0YWNraW5zdGFuY2VcbiAqL1xuZXhwb3J0IGNsYXNzIFN0YWNrSW5zdGFuY2UgZXh0ZW5kcyByb3MuUmVzb3VyY2UgaW1wbGVtZW50cyBJU3RhY2tJbnN0YW5jZSB7XG4gICAgcHJvdGVjdGVkIHNjb3BlOiByb3MuQ29uc3RydWN0O1xuICAgIHByb3RlY3RlZCBpZDogc3RyaW5nO1xuICAgIHB1YmxpYyByZWFkb25seSBwcm9wczogU3RhY2tJbnN0YW5jZVByb3BzO1xuICAgIHByb3RlY3RlZCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBBY2NvdW50SWQ6IFRoZSBhY2NvdW50IGlkIG9mIHRoZSBzdGFjay5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckFjY291bnRJZDogcm9zLklSZXNvbHZhYmxlIHwgc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIERyaWZ0RGV0ZWN0aW9uVGltZTogVGhlIHRpbWUgd2hlbiB0aGUgcmVzb3VyY2Ugc3RhY2sgZ3JvdXAgbGFzdCBzdWNjZXNzZnVsbHkgY29tcGxldGVkIGRldmlhdGlvbiBkZXRlY3Rpb24uXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJEcmlmdERldGVjdGlvblRpbWU6IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBPdXRwdXRzOiBUaGUgb3V0cHV0cyBvZiB0aGUgc3RhY2sgaW5zdGFuY2VcbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ck91dHB1dHM6IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBQYXJhbWV0ZXJPdmVycmlkZXM6IE92ZXJyaWRlIHBhcmFtZXRlciBsaXN0LlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyUGFyYW1ldGVyT3ZlcnJpZGVzOiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgUmRGb2xkZXJJZDogVGhlIHJlc291cmNlIGZvbGRlciBJRCBvZiB0aGUgcmVzb3VyY2UgZGlyZWN0b3J5LlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyUmRGb2xkZXJJZDogcm9zLklSZXNvbHZhYmxlIHwgc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIFJlZ2lvbklkOiBUaGUgcmVnaW9uIGlkIG9mIHRoZSBzdGFjay5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0clJlZ2lvbklkOiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgU3RhY2tEcmlmdFN0YXR1czogVGhlIHN0YXR1cyBvZiB0aGUgbGFzdCBzdWNjZXNzZnVsIGRldmlhdGlvbiBkZXRlY3Rpb24gb2YgdGhlIHJlc291cmNlIHN0YWNrIGdyb3VwLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyU3RhY2tEcmlmdFN0YXR1czogcm9zLklSZXNvbHZhYmxlIHwgc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIFN0YWNrR3JvdXBJZDogVGhlIHJlc291cmNlIHN0YWNrIGdyb3VwIElELlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyU3RhY2tHcm91cElkOiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgU3RhY2tHcm91cE5hbWU6IFRoZSByZXNvdXJjZSBzdGFjayBncm91cCBuYW1lXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJTdGFja0dyb3VwTmFtZTogcm9zLklSZXNvbHZhYmxlIHwgc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIFN0YWNrSWQ6IFRoZSBzdGFjayBpZCBvZiBzdGFjayBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0clN0YWNrSWQ6IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBTdGF0dXM6IFJlc291cmNlIHN0YWNrIHN0YXR1cy5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0clN0YXR1czogcm9zLklSZXNvbHZhYmxlIHwgc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIFN0YXR1c1JlYXNvbjogU3RhdHVzIHJlYXNvbiBkZXNjcmlwdGlvbi5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0clN0YXR1c1JlYXNvbjogcm9zLklSZXNvbHZhYmxlIHwgc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogUGFyYW0gc2NvcGUgLSBzY29wZSBpbiB3aGljaCB0aGlzIHJlc291cmNlIGlzIGRlZmluZWRcbiAgICAgKiBQYXJhbSBpZCAgICAtIHNjb3BlZCBpZCBvZiB0aGUgcmVzb3VyY2VcbiAgICAgKiBQYXJhbSBwcm9wcyAtIHJlc291cmNlIHByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihzY29wZTogcm9zLkNvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IFN0YWNrSW5zdGFuY2VQcm9wcywgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6Ym9vbGVhbiA9IHRydWUpIHtcbiAgICAgICAgc3VwZXIoc2NvcGUsIGlkKTtcbiAgICAgICAgdGhpcy5zY29wZSA9IHNjb3BlO1xuICAgICAgICB0aGlzLmlkID0gaWQ7XG4gICAgICAgIHRoaXMucHJvcHMgPSBwcm9wcztcbiAgICAgICAgdGhpcy5lbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCA9IGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50O1xuXG4gICAgICAgIGNvbnN0IHJvc1N0YWNrSW5zdGFuY2UgPSBuZXcgUm9zU3RhY2tJbnN0YW5jZSh0aGlzLCBpZCwgIHtcbiAgICAgICAgICAgIHN0YWNrSW5zdGFuY2VBY2NvdW50SWQ6IHByb3BzLnN0YWNrSW5zdGFuY2VBY2NvdW50SWQsXG4gICAgICAgICAgICBzdGFja0dyb3VwTmFtZTogcHJvcHMuc3RhY2tHcm91cE5hbWUsXG4gICAgICAgICAgICBzdGFja0luc3RhbmNlUmVnaW9uSWQ6IHByb3BzLnN0YWNrSW5zdGFuY2VSZWdpb25JZCxcbiAgICAgICAgICAgIG91dHB1dE9wdGlvbjogcHJvcHMub3V0cHV0T3B0aW9uLFxuICAgICAgICAgICAgcmVmcmVzaE9wdGlvbnM6IHByb3BzLnJlZnJlc2hPcHRpb25zID09PSB1bmRlZmluZWQgfHwgcHJvcHMucmVmcmVzaE9wdGlvbnMgPT09IG51bGwgPyAnTmV2ZXInIDogcHJvcHMucmVmcmVzaE9wdGlvbnMsXG4gICAgICAgIH0sIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ICYmIHRoaXMuc3RhY2suZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQpO1xuICAgICAgICB0aGlzLnJlc291cmNlID0gcm9zU3RhY2tJbnN0YW5jZTtcbiAgICAgICAgdGhpcy5hdHRyQWNjb3VudElkID0gcm9zU3RhY2tJbnN0YW5jZS5hdHRyQWNjb3VudElkO1xuICAgICAgICB0aGlzLmF0dHJEcmlmdERldGVjdGlvblRpbWUgPSByb3NTdGFja0luc3RhbmNlLmF0dHJEcmlmdERldGVjdGlvblRpbWU7XG4gICAgICAgIHRoaXMuYXR0ck91dHB1dHMgPSByb3NTdGFja0luc3RhbmNlLmF0dHJPdXRwdXRzO1xuICAgICAgICB0aGlzLmF0dHJQYXJhbWV0ZXJPdmVycmlkZXMgPSByb3NTdGFja0luc3RhbmNlLmF0dHJQYXJhbWV0ZXJPdmVycmlkZXM7XG4gICAgICAgIHRoaXMuYXR0clJkRm9sZGVySWQgPSByb3NTdGFja0luc3RhbmNlLmF0dHJSZEZvbGRlcklkO1xuICAgICAgICB0aGlzLmF0dHJSZWdpb25JZCA9IHJvc1N0YWNrSW5zdGFuY2UuYXR0clJlZ2lvbklkO1xuICAgICAgICB0aGlzLmF0dHJTdGFja0RyaWZ0U3RhdHVzID0gcm9zU3RhY2tJbnN0YW5jZS5hdHRyU3RhY2tEcmlmdFN0YXR1cztcbiAgICAgICAgdGhpcy5hdHRyU3RhY2tHcm91cElkID0gcm9zU3RhY2tJbnN0YW5jZS5hdHRyU3RhY2tHcm91cElkO1xuICAgICAgICB0aGlzLmF0dHJTdGFja0dyb3VwTmFtZSA9IHJvc1N0YWNrSW5zdGFuY2UuYXR0clN0YWNrR3JvdXBOYW1lO1xuICAgICAgICB0aGlzLmF0dHJTdGFja0lkID0gcm9zU3RhY2tJbnN0YW5jZS5hdHRyU3RhY2tJZDtcbiAgICAgICAgdGhpcy5hdHRyU3RhdHVzID0gcm9zU3RhY2tJbnN0YW5jZS5hdHRyU3RhdHVzO1xuICAgICAgICB0aGlzLmF0dHJTdGF0dXNSZWFzb24gPSByb3NTdGFja0luc3RhbmNlLmF0dHJTdGF0dXNSZWFzb247XG4gICAgfVxufVxuIl19