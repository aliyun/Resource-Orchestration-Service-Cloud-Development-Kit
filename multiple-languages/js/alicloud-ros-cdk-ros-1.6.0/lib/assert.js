"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Assert = exports.AssertProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ros_generated_1 = require("./ros.generated");
Object.defineProperty(exports, "AssertProperty", { enumerable: true, get: function () { return ros_generated_1.RosAssert; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::ROS::Assert`, which is used to create an assertion. Assertions are used to evaluate conditions and support a variety of operation types. An assertion determines whether to terminate creation and return an error message when the assertion result is false.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosAssert`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-ros-assert
 */
class Assert extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosAssert = new ros_generated_1.RosAssert(this, id, {
            values: props.values,
            operation: props.operation === undefined || props.operation === null ? 'Equal' : props.operation,
            errorMessage: props.errorMessage,
            abortCreation: props.abortCreation === undefined || props.abortCreation === null ? true : props.abortCreation,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosAssert;
        this.attrFailureCause = rosAssert.attrFailureCause;
        this.attrResult = rosAssert.attrResult;
    }
}
exports.Assert = Assert;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzZXJ0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYXNzZXJ0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDhDQUE4QztBQUM5QyxtREFBNEM7QUFFdEIsK0ZBRmIseUJBQVMsT0FFa0I7QUFpRHBDOzs7O0dBSUc7QUFDSCxNQUFhLE1BQU8sU0FBUSxHQUFHLENBQUMsUUFBUTtJQWdCcEM7Ozs7T0FJRztJQUNILFlBQVksS0FBb0IsRUFBRSxFQUFVLEVBQUUsS0FBa0IsRUFBRSxtQ0FBMkMsSUFBSTtRQUM3RyxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ2pCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQ2IsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLGdDQUFnQyxHQUFHLGdDQUFnQyxDQUFDO1FBRXpFLE1BQU0sU0FBUyxHQUFHLElBQUkseUJBQVMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFHO1lBQ3ZDLE1BQU0sRUFBRSxLQUFLLENBQUMsTUFBTTtZQUNwQixTQUFTLEVBQUUsS0FBSyxDQUFDLFNBQVMsS0FBSyxTQUFTLElBQUksS0FBSyxDQUFDLFNBQVMsS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFNBQVM7WUFDaEcsWUFBWSxFQUFFLEtBQUssQ0FBQyxZQUFZO1lBQ2hDLGFBQWEsRUFBRSxLQUFLLENBQUMsYUFBYSxLQUFLLFNBQVMsSUFBSSxLQUFLLENBQUMsYUFBYSxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsYUFBYTtTQUNoSCxFQUFFLGdDQUFnQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztRQUNwRixJQUFJLENBQUMsUUFBUSxHQUFHLFNBQVMsQ0FBQztRQUMxQixJQUFJLENBQUMsZ0JBQWdCLEdBQUcsU0FBUyxDQUFDLGdCQUFnQixDQUFDO1FBQ25ELElBQUksQ0FBQyxVQUFVLEdBQUcsU0FBUyxDQUFDLFVBQVUsQ0FBQztJQUMzQyxDQUFDO0NBQ0o7QUF0Q0Qsd0JBc0NDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcm9zIGZyb20gJ0BhbGljbG91ZC9yb3MtY2RrLWNvcmUnO1xuaW1wb3J0IHsgUm9zQXNzZXJ0IH0gZnJvbSAnLi9yb3MuZ2VuZXJhdGVkJztcbi8vIEdlbmVyYXRlZCBmcm9tIHRoZSBBbGlDbG91ZCBST1MgUmVzb3VyY2UgU3BlY2lmaWNhdGlvblxuZXhwb3J0IHsgUm9zQXNzZXJ0IGFzIEFzc2VydFByb3BlcnR5IH07XG5cbi8qKlxuICogUHJvcGVydGllcyBmb3IgZGVmaW5pbmcgYSBgQXNzZXJ0YC5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvYWxpeXVuLXJvcy1hc3NlcnRcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBBc3NlcnRQcm9wcyB7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSB2YWx1ZXM6IEEgbGlzdCBvZiB2YWx1ZXMgdG8gYXNzZXJ0LiBUaGUgaXRlbXMgaW4gdGhlIGxpc3QgYXJlIGNvbXBhcmVkIGluIG9yZGVyLiBUaGUgcmFuZ2Ugb2YgbGVuZ3RoIGlzIG9uZSB0byB0aHJlZS4gXG4gICAgICogLSBUaHJlZSB2YWx1ZXMgYXJlIHN1cHBvcnRlZCBvbmx5IGlmIHRoZSBvcGVyYXRpb24gaXMgRXF1YWwgb3IgTm90RXF1YWwuXG4gICAgICogLSBPbmUgdmFsdWUgaXMgc3VwcG9ydGVkIG9ubHkgaWYgdGhlIG9wZXJhdGlvbiBpcyBOb3QuXG4gICAgICovXG4gICAgcmVhZG9ubHkgdmFsdWVzOiBBcnJheTxhbnkgfCByb3MuSVJlc29sdmFibGU+IHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgYWJvcnRDcmVhdGlvbjogV2hldGhlciB0byBhYm9ydCBjcmVhdGlvbiB3aGVuIHRoZSBhc3NlcnQgZmFpbHMuIERlZmF1bHQgaXMgVHJ1ZS5cbiAgICAgKi9cbiAgICByZWFkb25seSBhYm9ydENyZWF0aW9uPzogYm9vbGVhbiB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGVycm9yTWVzc2FnZTogVGhlIGVycm9yIG1lc3NhZ2UgdG8gYmUgcmV0dXJuZWQgd2hlbiB0aGUgYXNzZXJ0IGZhaWxzLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGVycm9yTWVzc2FnZT86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IG9wZXJhdGlvbjogVGhlIHR5cGUgb2YgYXNzZXJ0aW9uIHRvIG1ha2UuIFRoZSBzdXBwb3J0ZWQgb3BlcmF0aW9ucyBhcmU6XG4gICAgICogRXF1YWwsIE5vdEVxdWFsLCBHcmVhdGVyLCBHcmVhdGVyT3JFcXVhbCwgTGVzcywgTGVzc09yRXF1YWwsIENvbnRhaW4sIE5vdENvbnRhaW4sIEFuZCwgT3IsIE5vdC5cbiAgICAgKiBEZWZhdWx0IGlzIEVxdWFsLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IG9wZXJhdGlvbj86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcbn1cblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgYEFzc2VydGAuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSUFzc2VydCBleHRlbmRzIHJvcy5JUmVzb3VyY2Uge1xuICAgIHJlYWRvbmx5IHByb3BzOiBBc3NlcnRQcm9wcztcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBGYWlsdXJlQ2F1c2U6IFRoZSByZWFzb24gdGhlIGFzc2VydGlvbiBmYWlsZWRcbiAgICAgKi9cbiAgICByZWFkb25seSBhdHRyRmFpbHVyZUNhdXNlOiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgUmVzdWx0OiBUaGUgcmVzdWx0IG9mIHRoZSBhc3NlcnQuXG4gICAgICovXG4gICAgcmVhZG9ubHkgYXR0clJlc3VsdDogcm9zLklSZXNvbHZhYmxlIHwgc3RyaW5nO1xufVxuLyoqXG4gKiBUaGlzIGNsYXNzIGVuY2Fwc3VsYXRlcyBhbmQgZXh0ZW5kcyB0aGUgUk9TIHJlc291cmNlIHR5cGUgYEFMSVlVTjo6Uk9TOjpBc3NlcnRgLCB3aGljaCBpcyB1c2VkIHRvIGNyZWF0ZSBhbiBhc3NlcnRpb24uIEFzc2VydGlvbnMgYXJlIHVzZWQgdG8gZXZhbHVhdGUgY29uZGl0aW9ucyBhbmQgc3VwcG9ydCBhIHZhcmlldHkgb2Ygb3BlcmF0aW9uIHR5cGVzLiBBbiBhc3NlcnRpb24gZGV0ZXJtaW5lcyB3aGV0aGVyIHRvIHRlcm1pbmF0ZSBjcmVhdGlvbiBhbmQgcmV0dXJuIGFuIGVycm9yIG1lc3NhZ2Ugd2hlbiB0aGUgYXNzZXJ0aW9uIHJlc3VsdCBpcyBmYWxzZS5cbiAqIEBOb3RlIFRoaXMgY2xhc3MgbWF5IGhhdmUgc29tZSBuZXcgZnVuY3Rpb25zIHRvIGZhY2lsaXRhdGUgZGV2ZWxvcG1lbnQsIHNvIGl0IGlzIHJlY29tbWVuZGVkIHRvIHVzZSB0aGlzIGNsYXNzIGluc3RlYWQgb2YgYFJvc0Fzc2VydGBmb3IgYSBtb3JlIGNvbnZlbmllbnQgZGV2ZWxvcG1lbnQgZXhwZXJpZW5jZS5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvYWxpeXVuLXJvcy1hc3NlcnRcbiAqL1xuZXhwb3J0IGNsYXNzIEFzc2VydCBleHRlbmRzIHJvcy5SZXNvdXJjZSBpbXBsZW1lbnRzIElBc3NlcnQge1xuICAgIHByb3RlY3RlZCBzY29wZTogcm9zLkNvbnN0cnVjdDtcbiAgICBwcm90ZWN0ZWQgaWQ6IHN0cmluZztcbiAgICBwdWJsaWMgcmVhZG9ubHkgcHJvcHM6IEFzc2VydFByb3BzO1xuICAgIHByb3RlY3RlZCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBGYWlsdXJlQ2F1c2U6IFRoZSByZWFzb24gdGhlIGFzc2VydGlvbiBmYWlsZWRcbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckZhaWx1cmVDYXVzZTogcm9zLklSZXNvbHZhYmxlIHwgc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIFJlc3VsdDogVGhlIHJlc3VsdCBvZiB0aGUgYXNzZXJ0LlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyUmVzdWx0OiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBQYXJhbSBzY29wZSAtIHNjb3BlIGluIHdoaWNoIHRoaXMgcmVzb3VyY2UgaXMgZGVmaW5lZFxuICAgICAqIFBhcmFtIGlkICAgIC0gc2NvcGVkIGlkIG9mIHRoZSByZXNvdXJjZVxuICAgICAqIFBhcmFtIHByb3BzIC0gcmVzb3VyY2UgcHJvcGVydGllc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiByb3MuQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogQXNzZXJ0UHJvcHMsIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OmJvb2xlYW4gPSB0cnVlKSB7XG4gICAgICAgIHN1cGVyKHNjb3BlLCBpZCk7XG4gICAgICAgIHRoaXMuc2NvcGUgPSBzY29wZTtcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xuICAgICAgICB0aGlzLnByb3BzID0gcHJvcHM7XG4gICAgICAgIHRoaXMuZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgPSBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDtcblxuICAgICAgICBjb25zdCByb3NBc3NlcnQgPSBuZXcgUm9zQXNzZXJ0KHRoaXMsIGlkLCAge1xuICAgICAgICAgICAgdmFsdWVzOiBwcm9wcy52YWx1ZXMsXG4gICAgICAgICAgICBvcGVyYXRpb246IHByb3BzLm9wZXJhdGlvbiA9PT0gdW5kZWZpbmVkIHx8IHByb3BzLm9wZXJhdGlvbiA9PT0gbnVsbCA/ICdFcXVhbCcgOiBwcm9wcy5vcGVyYXRpb24sXG4gICAgICAgICAgICBlcnJvck1lc3NhZ2U6IHByb3BzLmVycm9yTWVzc2FnZSxcbiAgICAgICAgICAgIGFib3J0Q3JlYXRpb246IHByb3BzLmFib3J0Q3JlYXRpb24gPT09IHVuZGVmaW5lZCB8fCBwcm9wcy5hYm9ydENyZWF0aW9uID09PSBudWxsID8gdHJ1ZSA6IHByb3BzLmFib3J0Q3JlYXRpb24sXG4gICAgICAgIH0sIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ICYmIHRoaXMuc3RhY2suZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQpO1xuICAgICAgICB0aGlzLnJlc291cmNlID0gcm9zQXNzZXJ0O1xuICAgICAgICB0aGlzLmF0dHJGYWlsdXJlQ2F1c2UgPSByb3NBc3NlcnQuYXR0ckZhaWx1cmVDYXVzZTtcbiAgICAgICAgdGhpcy5hdHRyUmVzdWx0ID0gcm9zQXNzZXJ0LmF0dHJSZXN1bHQ7XG4gICAgfVxufVxuIl19