"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Desktops = exports.DesktopsProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ecd_generated_1 = require("./ecd.generated");
Object.defineProperty(exports, "DesktopsProperty", { enumerable: true, get: function () { return ecd_generated_1.RosDesktops; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::ECD::Desktops`, which is used to create one or more cloud desktops.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosDesktops`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-ecd-desktops
 */
class Desktops extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosDesktops = new ecd_generated_1.RosDesktops(this, id, {
            userAssignMode: props.userAssignMode,
            userName: props.userName,
            promotionId: props.promotionId,
            policyGroupId: props.policyGroupId,
            autoRenew: props.autoRenew,
            amount: props.amount,
            desktopName: props.desktopName,
            hostname: props.hostname,
            period: props.period,
            volumeEncryptionEnabled: props.volumeEncryptionEnabled,
            autoPay: props.autoPay,
            groupId: props.groupId,
            officeSiteId: props.officeSiteId,
            desktopNameSuffix: props.desktopNameSuffix,
            bundleId: props.bundleId,
            directoryId: props.directoryId,
            endUserId: props.endUserId,
            vpcId: props.vpcId,
            chargeType: props.chargeType,
            volumeEncryptionKey: props.volumeEncryptionKey,
            tags: props.tags,
            periodUnit: props.periodUnit,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosDesktops;
        this.attrDesktopId = rosDesktops.attrDesktopId;
        this.attrOrderId = rosDesktops.attrOrderId;
    }
}
exports.Desktops = Desktops;
//# sourceMappingURL=data:application/json;base64,