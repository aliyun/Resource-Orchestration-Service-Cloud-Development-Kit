"use strict";
// Generated from the AliCloud ROS Resource Specification
Object.defineProperty(exports, "__esModule", { value: true });
exports.RosSimpleOfficeSite = exports.RosDesktops = exports.RosBundle = void 0;
const ros = require("@alicloud/ros-cdk-core");
/**
 * Determine whether the given properties match those of a `RosBundleProps`
 *
 * @param properties - the TypeScript properties of a `RosBundleProps`
 *
 * @returns the result of the validation.
 */
function RosBundlePropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('description', ros.validateString)(properties.description));
    errors.collect(ros.propertyValidator('rootDiskSizeGib', ros.requiredValidator)(properties.rootDiskSizeGib));
    errors.collect(ros.propertyValidator('rootDiskSizeGib', ros.validateNumber)(properties.rootDiskSizeGib));
    if (properties.language && (typeof properties.language) !== 'object') {
        errors.collect(ros.propertyValidator('language', ros.validateAllowedValues)({
            data: properties.language,
            allowedValues: ["zh-CN", "zh-HK", "en-US", "ja-JP"],
        }));
    }
    errors.collect(ros.propertyValidator('language', ros.validateString)(properties.language));
    if (properties.rootDiskPerformanceLevel && (typeof properties.rootDiskPerformanceLevel) !== 'object') {
        errors.collect(ros.propertyValidator('rootDiskPerformanceLevel', ros.validateAllowedValues)({
            data: properties.rootDiskPerformanceLevel,
            allowedValues: ["PL0", "PL1", "PL2", "PL3"],
        }));
    }
    errors.collect(ros.propertyValidator('rootDiskPerformanceLevel', ros.validateString)(properties.rootDiskPerformanceLevel));
    errors.collect(ros.propertyValidator('desktopType', ros.requiredValidator)(properties.desktopType));
    errors.collect(ros.propertyValidator('desktopType', ros.validateString)(properties.desktopType));
    errors.collect(ros.propertyValidator('bundleName', ros.validateString)(properties.bundleName));
    errors.collect(ros.propertyValidator('imageId', ros.requiredValidator)(properties.imageId));
    errors.collect(ros.propertyValidator('imageId', ros.validateString)(properties.imageId));
    if (properties.userDiskPerformanceLevel && (typeof properties.userDiskPerformanceLevel) !== 'object') {
        errors.collect(ros.propertyValidator('userDiskPerformanceLevel', ros.validateAllowedValues)({
            data: properties.userDiskPerformanceLevel,
            allowedValues: ["PL0", "PL1", "PL2", "PL3"],
        }));
    }
    errors.collect(ros.propertyValidator('userDiskPerformanceLevel', ros.validateString)(properties.userDiskPerformanceLevel));
    errors.collect(ros.propertyValidator('userDiskSizeGib', ros.requiredValidator)(properties.userDiskSizeGib));
    if (properties.userDiskSizeGib && (Array.isArray(properties.userDiskSizeGib) || (typeof properties.userDiskSizeGib) === 'string')) {
        errors.collect(ros.propertyValidator('userDiskSizeGib', ros.validateLength)({
            data: properties.userDiskSizeGib.length,
            min: undefined,
            max: 1,
        }));
    }
    errors.collect(ros.propertyValidator('userDiskSizeGib', ros.listValidator(ros.validateNumber))(properties.userDiskSizeGib));
    return errors.wrap('supplied properties not correct for "RosBundleProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ECD::Bundle` resource
 *
 * @param properties - the TypeScript properties of a `RosBundleProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ECD::Bundle` resource.
 */
// @ts-ignore TS6133
function rosBundlePropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosBundlePropsValidator(properties).assertSuccess();
    }
    return {
        DesktopType: ros.stringToRosTemplate(properties.desktopType),
        ImageId: ros.stringToRosTemplate(properties.imageId),
        RootDiskSizeGib: ros.numberToRosTemplate(properties.rootDiskSizeGib),
        UserDiskSizeGib: ros.listMapper(ros.numberToRosTemplate)(properties.userDiskSizeGib),
        BundleName: ros.stringToRosTemplate(properties.bundleName),
        Description: ros.stringToRosTemplate(properties.description),
        Language: ros.stringToRosTemplate(properties.language),
        RootDiskPerformanceLevel: ros.stringToRosTemplate(properties.rootDiskPerformanceLevel),
        UserDiskPerformanceLevel: ros.stringToRosTemplate(properties.userDiskPerformanceLevel),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::ECD::Bundle`, which is used to create a custom desktop template.
 * @Note This class does not contain additional functions, so it is recommended to use the `Bundle` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-ecd-bundle
 */
class RosBundle extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosBundle.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrBundleId = this.getAtt('BundleId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.desktopType = props.desktopType;
        this.imageId = props.imageId;
        this.rootDiskSizeGib = props.rootDiskSizeGib;
        this.userDiskSizeGib = props.userDiskSizeGib;
        this.bundleName = props.bundleName;
        this.description = props.description;
        this.language = props.language;
        this.rootDiskPerformanceLevel = props.rootDiskPerformanceLevel;
        this.userDiskPerformanceLevel = props.userDiskPerformanceLevel;
    }
    get rosProperties() {
        return {
            desktopType: this.desktopType,
            imageId: this.imageId,
            rootDiskSizeGib: this.rootDiskSizeGib,
            userDiskSizeGib: this.userDiskSizeGib,
            bundleName: this.bundleName,
            description: this.description,
            language: this.language,
            rootDiskPerformanceLevel: this.rootDiskPerformanceLevel,
            userDiskPerformanceLevel: this.userDiskPerformanceLevel,
        };
    }
    renderProperties(props) {
        return rosBundlePropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosBundle = RosBundle;
/**
 * The resource type name for this resource class.
 */
RosBundle.ROS_RESOURCE_TYPE_NAME = "ALIYUN::ECD::Bundle";
/**
 * Determine whether the given properties match those of a `RosDesktopsProps`
 *
 * @param properties - the TypeScript properties of a `RosDesktopsProps`
 *
 * @returns the result of the validation.
 */
function RosDesktopsPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    if (properties.userAssignMode && (typeof properties.userAssignMode) !== 'object') {
        errors.collect(ros.propertyValidator('userAssignMode', ros.validateAllowedValues)({
            data: properties.userAssignMode,
            allowedValues: ["ALL", "PER_USER"],
        }));
    }
    errors.collect(ros.propertyValidator('userAssignMode', ros.validateString)(properties.userAssignMode));
    errors.collect(ros.propertyValidator('userName', ros.validateString)(properties.userName));
    errors.collect(ros.propertyValidator('promotionId', ros.validateString)(properties.promotionId));
    errors.collect(ros.propertyValidator('policyGroupId', ros.requiredValidator)(properties.policyGroupId));
    errors.collect(ros.propertyValidator('policyGroupId', ros.validateString)(properties.policyGroupId));
    errors.collect(ros.propertyValidator('autoRenew', ros.validateBoolean)(properties.autoRenew));
    if (properties.amount && (typeof properties.amount) !== 'object') {
        errors.collect(ros.propertyValidator('amount', ros.validateRange)({
            data: properties.amount,
            min: 1,
            max: 300,
        }));
    }
    errors.collect(ros.propertyValidator('amount', ros.validateNumber)(properties.amount));
    errors.collect(ros.propertyValidator('desktopName', ros.validateString)(properties.desktopName));
    errors.collect(ros.propertyValidator('hostname', ros.validateString)(properties.hostname));
    if (properties.period && (typeof properties.period) !== 'object') {
        errors.collect(ros.propertyValidator('period', ros.validateAllowedValues)({
            data: properties.period,
            allowedValues: [1, 2, 3, 4, 5, 6, 12, 24, 36, 48, 60],
        }));
    }
    errors.collect(ros.propertyValidator('period', ros.validateNumber)(properties.period));
    errors.collect(ros.propertyValidator('volumeEncryptionEnabled', ros.validateBoolean)(properties.volumeEncryptionEnabled));
    errors.collect(ros.propertyValidator('autoPay', ros.validateBoolean)(properties.autoPay));
    errors.collect(ros.propertyValidator('groupId', ros.validateString)(properties.groupId));
    errors.collect(ros.propertyValidator('officeSiteId', ros.requiredValidator)(properties.officeSiteId));
    errors.collect(ros.propertyValidator('officeSiteId', ros.validateString)(properties.officeSiteId));
    errors.collect(ros.propertyValidator('desktopNameSuffix', ros.validateBoolean)(properties.desktopNameSuffix));
    errors.collect(ros.propertyValidator('bundleId', ros.requiredValidator)(properties.bundleId));
    errors.collect(ros.propertyValidator('bundleId', ros.validateString)(properties.bundleId));
    errors.collect(ros.propertyValidator('directoryId', ros.validateString)(properties.directoryId));
    if (properties.endUserId && (Array.isArray(properties.endUserId) || (typeof properties.endUserId) === 'string')) {
        errors.collect(ros.propertyValidator('endUserId', ros.validateLength)({
            data: properties.endUserId.length,
            min: undefined,
            max: 100,
        }));
    }
    errors.collect(ros.propertyValidator('endUserId', ros.listValidator(ros.validateAny))(properties.endUserId));
    errors.collect(ros.propertyValidator('vpcId', ros.validateString)(properties.vpcId));
    if (properties.chargeType && (typeof properties.chargeType) !== 'object') {
        errors.collect(ros.propertyValidator('chargeType', ros.validateAllowedValues)({
            data: properties.chargeType,
            allowedValues: ["PayAsYouGo", "PostPaid", "PayOnDemand", "Postpaid", "PostPay", "Postpay", "POSTPAY", "POST", "Subscription", "PrePaid", "Prepaid", "PrePay", "Prepay", "PREPAY", "PRE"],
        }));
    }
    errors.collect(ros.propertyValidator('chargeType', ros.validateString)(properties.chargeType));
    errors.collect(ros.propertyValidator('volumeEncryptionKey', ros.validateString)(properties.volumeEncryptionKey));
    if (properties.tags && (Array.isArray(properties.tags) || (typeof properties.tags) === 'string')) {
        errors.collect(ros.propertyValidator('tags', ros.validateLength)({
            data: properties.tags.length,
            min: undefined,
            max: 20,
        }));
    }
    errors.collect(ros.propertyValidator('tags', ros.listValidator(RosDesktops_TagsPropertyValidator))(properties.tags));
    if (properties.periodUnit && (typeof properties.periodUnit) !== 'object') {
        errors.collect(ros.propertyValidator('periodUnit', ros.validateAllowedValues)({
            data: properties.periodUnit,
            allowedValues: ["month", "year", "Month", "Year"],
        }));
    }
    errors.collect(ros.propertyValidator('periodUnit', ros.validateString)(properties.periodUnit));
    return errors.wrap('supplied properties not correct for "RosDesktopsProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ECD::Desktops` resource
 *
 * @param properties - the TypeScript properties of a `RosDesktopsProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ECD::Desktops` resource.
 */
// @ts-ignore TS6133
function rosDesktopsPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosDesktopsPropsValidator(properties).assertSuccess();
    }
    return {
        BundleId: ros.stringToRosTemplate(properties.bundleId),
        OfficeSiteId: ros.stringToRosTemplate(properties.officeSiteId),
        PolicyGroupId: ros.stringToRosTemplate(properties.policyGroupId),
        Amount: ros.numberToRosTemplate(properties.amount),
        AutoPay: ros.booleanToRosTemplate(properties.autoPay),
        AutoRenew: ros.booleanToRosTemplate(properties.autoRenew),
        ChargeType: ros.stringToRosTemplate(properties.chargeType),
        DesktopName: ros.stringToRosTemplate(properties.desktopName),
        DesktopNameSuffix: ros.booleanToRosTemplate(properties.desktopNameSuffix),
        DirectoryId: ros.stringToRosTemplate(properties.directoryId),
        EndUserId: ros.listMapper(ros.objectToRosTemplate)(properties.endUserId),
        GroupId: ros.stringToRosTemplate(properties.groupId),
        Hostname: ros.stringToRosTemplate(properties.hostname),
        Period: ros.numberToRosTemplate(properties.period),
        PeriodUnit: ros.stringToRosTemplate(properties.periodUnit),
        PromotionId: ros.stringToRosTemplate(properties.promotionId),
        Tags: ros.listMapper(rosDesktopsTagsPropertyToRosTemplate)(properties.tags),
        UserAssignMode: ros.stringToRosTemplate(properties.userAssignMode),
        UserName: ros.stringToRosTemplate(properties.userName),
        VolumeEncryptionEnabled: ros.booleanToRosTemplate(properties.volumeEncryptionEnabled),
        VolumeEncryptionKey: ros.stringToRosTemplate(properties.volumeEncryptionKey),
        VpcId: ros.stringToRosTemplate(properties.vpcId),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::ECD::Desktops`, which is used to create one or more cloud desktops.
 * @Note This class does not contain additional functions, so it is recommended to use the `Desktops` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-ecd-desktops
 */
class RosDesktops extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosDesktops.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrDesktopId = this.getAtt('DesktopId');
        this.attrOrderId = this.getAtt('OrderId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.bundleId = props.bundleId;
        this.officeSiteId = props.officeSiteId;
        this.policyGroupId = props.policyGroupId;
        this.amount = props.amount;
        this.autoPay = props.autoPay;
        this.autoRenew = props.autoRenew;
        this.chargeType = props.chargeType;
        this.desktopName = props.desktopName;
        this.desktopNameSuffix = props.desktopNameSuffix;
        this.directoryId = props.directoryId;
        this.endUserId = props.endUserId;
        this.groupId = props.groupId;
        this.hostname = props.hostname;
        this.period = props.period;
        this.periodUnit = props.periodUnit;
        this.promotionId = props.promotionId;
        this.tags = props.tags;
        this.userAssignMode = props.userAssignMode;
        this.userName = props.userName;
        this.volumeEncryptionEnabled = props.volumeEncryptionEnabled;
        this.volumeEncryptionKey = props.volumeEncryptionKey;
        this.vpcId = props.vpcId;
    }
    get rosProperties() {
        return {
            bundleId: this.bundleId,
            officeSiteId: this.officeSiteId,
            policyGroupId: this.policyGroupId,
            amount: this.amount,
            autoPay: this.autoPay,
            autoRenew: this.autoRenew,
            chargeType: this.chargeType,
            desktopName: this.desktopName,
            desktopNameSuffix: this.desktopNameSuffix,
            directoryId: this.directoryId,
            endUserId: this.endUserId,
            groupId: this.groupId,
            hostname: this.hostname,
            period: this.period,
            periodUnit: this.periodUnit,
            promotionId: this.promotionId,
            tags: this.tags,
            userAssignMode: this.userAssignMode,
            userName: this.userName,
            volumeEncryptionEnabled: this.volumeEncryptionEnabled,
            volumeEncryptionKey: this.volumeEncryptionKey,
            vpcId: this.vpcId,
        };
    }
    renderProperties(props) {
        return rosDesktopsPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosDesktops = RosDesktops;
/**
 * The resource type name for this resource class.
 */
RosDesktops.ROS_RESOURCE_TYPE_NAME = "ALIYUN::ECD::Desktops";
/**
 * Determine whether the given properties match those of a `TagsProperty`
 *
 * @param properties - the TypeScript properties of a `TagsProperty`
 *
 * @returns the result of the validation.
 */
function RosDesktops_TagsPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('value', ros.validateString)(properties.value));
    errors.collect(ros.propertyValidator('key', ros.requiredValidator)(properties.key));
    errors.collect(ros.propertyValidator('key', ros.validateString)(properties.key));
    return errors.wrap('supplied properties not correct for "TagsProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ECD::Desktops.Tags` resource
 *
 * @param properties - the TypeScript properties of a `TagsProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ECD::Desktops.Tags` resource.
 */
// @ts-ignore TS6133
function rosDesktopsTagsPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosDesktops_TagsPropertyValidator(properties).assertSuccess();
    return {
        Value: ros.stringToRosTemplate(properties.value),
        Key: ros.stringToRosTemplate(properties.key),
    };
}
/**
 * Determine whether the given properties match those of a `RosSimpleOfficeSiteProps`
 *
 * @param properties - the TypeScript properties of a `RosSimpleOfficeSiteProps`
 *
 * @returns the result of the validation.
 */
function RosSimpleOfficeSitePropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('verifyCode', ros.validateString)(properties.verifyCode));
    errors.collect(ros.propertyValidator('needVerifyZeroDevice', ros.validateBoolean)(properties.needVerifyZeroDevice));
    errors.collect(ros.propertyValidator('cenOwnerId', ros.validateNumber)(properties.cenOwnerId));
    errors.collect(ros.propertyValidator('bandwidth', ros.validateNumber)(properties.bandwidth));
    errors.collect(ros.propertyValidator('vSwitchId', ros.validateString)(properties.vSwitchId));
    errors.collect(ros.propertyValidator('enableAdminAccess', ros.validateBoolean)(properties.enableAdminAccess));
    errors.collect(ros.propertyValidator('cloudBoxOfficeSite', ros.validateBoolean)(properties.cloudBoxOfficeSite));
    errors.collect(ros.propertyValidator('cenId', ros.validateString)(properties.cenId));
    errors.collect(ros.propertyValidator('officeSiteName', ros.validateString)(properties.officeSiteName));
    if (properties.desktopAccessType && (typeof properties.desktopAccessType) !== 'object') {
        errors.collect(ros.propertyValidator('desktopAccessType', ros.validateAllowedValues)({
            data: properties.desktopAccessType,
            allowedValues: ["VPC", "Internet", "Any"],
        }));
    }
    errors.collect(ros.propertyValidator('desktopAccessType', ros.validateString)(properties.desktopAccessType));
    errors.collect(ros.propertyValidator('cidrBlock', ros.validateString)(properties.cidrBlock));
    errors.collect(ros.propertyValidator('enableInternetAccess', ros.validateBoolean)(properties.enableInternetAccess));
    return errors.wrap('supplied properties not correct for "RosSimpleOfficeSiteProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ECD::SimpleOfficeSite` resource
 *
 * @param properties - the TypeScript properties of a `RosSimpleOfficeSiteProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ECD::SimpleOfficeSite` resource.
 */
// @ts-ignore TS6133
function rosSimpleOfficeSitePropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosSimpleOfficeSitePropsValidator(properties).assertSuccess();
    }
    return {
        Bandwidth: ros.numberToRosTemplate(properties.bandwidth),
        CenId: ros.stringToRosTemplate(properties.cenId),
        CenOwnerId: ros.numberToRosTemplate(properties.cenOwnerId),
        CidrBlock: ros.stringToRosTemplate(properties.cidrBlock),
        CloudBoxOfficeSite: ros.booleanToRosTemplate(properties.cloudBoxOfficeSite),
        DesktopAccessType: ros.stringToRosTemplate(properties.desktopAccessType),
        EnableAdminAccess: ros.booleanToRosTemplate(properties.enableAdminAccess),
        EnableInternetAccess: ros.booleanToRosTemplate(properties.enableInternetAccess),
        NeedVerifyZeroDevice: ros.booleanToRosTemplate(properties.needVerifyZeroDevice),
        OfficeSiteName: ros.stringToRosTemplate(properties.officeSiteName),
        VerifyCode: ros.stringToRosTemplate(properties.verifyCode),
        VSwitchId: ros.stringToRosTemplate(properties.vSwitchId),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::ECD::SimpleOfficeSite`, which is used to create a workspace of the convenience account type.
 * @Note This class does not contain additional functions, so it is recommended to use the `SimpleOfficeSite` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-ecd-simpleofficesite
 */
class RosSimpleOfficeSite extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosSimpleOfficeSite.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrOfficeSiteId = this.getAtt('OfficeSiteId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.bandwidth = props.bandwidth;
        this.cenId = props.cenId;
        this.cenOwnerId = props.cenOwnerId;
        this.cidrBlock = props.cidrBlock;
        this.cloudBoxOfficeSite = props.cloudBoxOfficeSite;
        this.desktopAccessType = props.desktopAccessType;
        this.enableAdminAccess = props.enableAdminAccess;
        this.enableInternetAccess = props.enableInternetAccess;
        this.needVerifyZeroDevice = props.needVerifyZeroDevice;
        this.officeSiteName = props.officeSiteName;
        this.verifyCode = props.verifyCode;
        this.vSwitchId = props.vSwitchId;
    }
    get rosProperties() {
        return {
            bandwidth: this.bandwidth,
            cenId: this.cenId,
            cenOwnerId: this.cenOwnerId,
            cidrBlock: this.cidrBlock,
            cloudBoxOfficeSite: this.cloudBoxOfficeSite,
            desktopAccessType: this.desktopAccessType,
            enableAdminAccess: this.enableAdminAccess,
            enableInternetAccess: this.enableInternetAccess,
            needVerifyZeroDevice: this.needVerifyZeroDevice,
            officeSiteName: this.officeSiteName,
            verifyCode: this.verifyCode,
            vSwitchId: this.vSwitchId,
        };
    }
    renderProperties(props) {
        return rosSimpleOfficeSitePropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosSimpleOfficeSite = RosSimpleOfficeSite;
/**
 * The resource type name for this resource class.
 */
RosSimpleOfficeSite.ROS_RESOURCE_TYPE_NAME = "ALIYUN::ECD::SimpleOfficeSite";
//# sourceMappingURL=data:application/json;base64,