"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DrdsDB = exports.DrdsDBProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const drds_generated_1 = require("./drds.generated");
Object.defineProperty(exports, "DrdsDBProperty", { enumerable: true, get: function () { return drds_generated_1.RosDrdsDB; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::DRDS::DrdsDB`, which is used to create a Distributed Relational Database Service (DRDS) instance.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosDrdsDB`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-drds-drdsdb
 */
class DrdsDB extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosDrdsDB = new drds_generated_1.RosDrdsDB(this, id, {
            dbInstType: props.dbInstType,
            type: props.type === undefined || props.type === null ? 'HORIZONTAL' : props.type,
            drdsInstanceId: props.drdsInstanceId,
            rdsInstance: props.rdsInstance,
            dbInstanceIsCreating: props.dbInstanceIsCreating,
            instDbName: props.instDbName,
            dbName: props.dbName,
            encode: props.encode,
            accountName: props.accountName,
            password: props.password,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosDrdsDB;
    }
}
exports.DrdsDB = DrdsDB;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJkc2RiLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZHJkc2RiLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDhDQUE4QztBQUM5QyxxREFBNkM7QUFFdkIsK0ZBRmIsMEJBQVMsT0FFa0I7QUFxRXBDOzs7O0dBSUc7QUFDSCxNQUFhLE1BQU8sU0FBUSxHQUFHLENBQUMsUUFBUTtJQU1wQzs7OztPQUlHO0lBQ0gsWUFBWSxLQUFvQixFQUFFLEVBQVUsRUFBRSxLQUFrQixFQUFFLG1DQUEyQyxJQUFJO1FBQzdHLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDakIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUM7UUFDYixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsZ0NBQWdDLEdBQUcsZ0NBQWdDLENBQUM7UUFFekUsTUFBTSxTQUFTLEdBQUcsSUFBSSwwQkFBUyxDQUFDLElBQUksRUFBRSxFQUFFLEVBQUc7WUFDdkMsVUFBVSxFQUFFLEtBQUssQ0FBQyxVQUFVO1lBQzVCLElBQUksRUFBRSxLQUFLLENBQUMsSUFBSSxLQUFLLFNBQVMsSUFBSSxLQUFLLENBQUMsSUFBSSxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSTtZQUNqRixjQUFjLEVBQUUsS0FBSyxDQUFDLGNBQWM7WUFDcEMsV0FBVyxFQUFFLEtBQUssQ0FBQyxXQUFXO1lBQzlCLG9CQUFvQixFQUFFLEtBQUssQ0FBQyxvQkFBb0I7WUFDaEQsVUFBVSxFQUFFLEtBQUssQ0FBQyxVQUFVO1lBQzVCLE1BQU0sRUFBRSxLQUFLLENBQUMsTUFBTTtZQUNwQixNQUFNLEVBQUUsS0FBSyxDQUFDLE1BQU07WUFDcEIsV0FBVyxFQUFFLEtBQUssQ0FBQyxXQUFXO1lBQzlCLFFBQVEsRUFBRSxLQUFLLENBQUMsUUFBUTtTQUMzQixFQUFFLGdDQUFnQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztRQUNwRixJQUFJLENBQUMsUUFBUSxHQUFHLFNBQVMsQ0FBQztJQUM5QixDQUFDO0NBQ0o7QUFoQ0Qsd0JBZ0NDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcm9zIGZyb20gJ0BhbGljbG91ZC9yb3MtY2RrLWNvcmUnO1xuaW1wb3J0IHsgUm9zRHJkc0RCIH0gZnJvbSAnLi9kcmRzLmdlbmVyYXRlZCc7XG4vLyBHZW5lcmF0ZWQgZnJvbSB0aGUgQWxpQ2xvdWQgUk9TIFJlc291cmNlIFNwZWNpZmljYXRpb25cbmV4cG9ydCB7IFJvc0RyZHNEQiBhcyBEcmRzREJQcm9wZXJ0eSB9O1xuXG4vKipcbiAqIFByb3BlcnRpZXMgZm9yIGRlZmluaW5nIGEgYERyZHNEQmAuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2FsaXl1bi1kcmRzLWRyZHNkYlxuICovXG5leHBvcnQgaW50ZXJmYWNlIERyZHNEQlByb3BzIHtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGRyZHNJbnN0YW5jZUlkOiBEUkRTIGluc3RhbmNlIElEXG4gICAgICovXG4gICAgcmVhZG9ubHkgZHJkc0luc3RhbmNlSWQ6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGFjY291bnROYW1lOiBJbiB0aGUgdmVydGljYWwgc3BsaXQgc2NlbmFyaW8sIGFuIGFjY291bnQgbmFtZSB3aXRoIGFjY2VzcyByaWdodHMgdG8gdGhlIGNvcnJlc3BvbmRpbmcgZGF0YWJhc2Ugb24gYWxsIFJEU3MuXG4gICAgICovXG4gICAgcmVhZG9ubHkgYWNjb3VudE5hbWU/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBkYkluc3RhbmNlSXNDcmVhdGluZzogQ2hlY2sgd2hldGhlciB0aGUgUkRTIGluc3RhbmNlIGlzIGJlaW5nIGNyZWF0ZWQuXG4gICAgICovXG4gICAgcmVhZG9ubHkgZGJJbnN0YW5jZUlzQ3JlYXRpbmc/OiBib29sZWFuIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgZGJJbnN0VHlwZTogVGhlIHR5cGUgb2YgdGhlIGF0dGFjaGVkIHN0b3JhZ2UuIFZhbGlkIHZhbHVlczpcbiAgICAgKiBSRFMgb3IgUE9MQVJEQlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGRiSW5zdFR5cGU/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBkYk5hbWU6IERhdGFiYXNlIE5hbWVcbiAgICAgKi9cbiAgICByZWFkb25seSBkYk5hbWU/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBlbmNvZGU6IEVuY29kaW5nIHVzZWQgYnkgdGhlIGRhdGFiYXNlXG4gICAgICovXG4gICAgcmVhZG9ubHkgZW5jb2RlPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgaW5zdERiTmFtZTpcbiAgICAgKi9cbiAgICByZWFkb25seSBpbnN0RGJOYW1lPzogQXJyYXk8Um9zRHJkc0RCLkluc3REYk5hbWVQcm9wZXJ0eSB8IHJvcy5JUmVzb2x2YWJsZT4gfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBwYXNzd29yZDogVGhlIGxvZ29uIHBhc3N3b3JkIG9mIHRoZSBkYXRhYmFzZSBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICByZWFkb25seSBwYXNzd29yZD86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHJkc0luc3RhbmNlOiBUaGlzIHByb3BlcnR5IGlzIHJlcXVpcmVkIG9ubHkgZm9yIHZlcnRpY2FsIHBhcnRpdGlvbmluZy5cbiAgICAgKi9cbiAgICByZWFkb25seSByZHNJbnN0YW5jZT86IEFycmF5PHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZT4gfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSB0eXBlOiBEYXRhYmFzZSBTaGFyZGluZyBtZXRob2QuIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgc2NhbGFiaWxpdHkgcHJpbmNpcGxlLiBWYWxpZCB2YWx1ZXM6XG4gICAgICogSE9SSVpPTlRBTDogaW5kaWNhdGVzIEhPUklaT05UQUwgcGFydGl0aW9uaW5nLCB3aGljaCBpcyBjb21tb25seSBrbm93biBhcyBkYXRhYmFzZVxuICAgICAqIGFuZCB0YWJsZSBzaGFyZGluZy5cbiAgICAgKiBWRVJUSUNBTDogaW5kaWNhdGVzIFZFUlRJQ0FMIHBhcnRpdGlvbmluZy5cbiAgICAgKi9cbiAgICByZWFkb25seSB0eXBlPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xufVxuXG4vKipcbiAqIFJlcHJlc2VudHMgYSBgRHJkc0RCYC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJRHJkc0RCIGV4dGVuZHMgcm9zLklSZXNvdXJjZSB7XG4gICAgcmVhZG9ubHkgcHJvcHM6IERyZHNEQlByb3BzO1xufVxuLyoqXG4gKiBUaGlzIGNsYXNzIGVuY2Fwc3VsYXRlcyBhbmQgZXh0ZW5kcyB0aGUgUk9TIHJlc291cmNlIHR5cGUgYEFMSVlVTjo6RFJEUzo6RHJkc0RCYCwgd2hpY2ggaXMgdXNlZCB0byBjcmVhdGUgYSBEaXN0cmlidXRlZCBSZWxhdGlvbmFsIERhdGFiYXNlIFNlcnZpY2UgKERSRFMpIGluc3RhbmNlLlxuICogQE5vdGUgVGhpcyBjbGFzcyBtYXkgaGF2ZSBzb21lIG5ldyBmdW5jdGlvbnMgdG8gZmFjaWxpdGF0ZSBkZXZlbG9wbWVudCwgc28gaXQgaXMgcmVjb21tZW5kZWQgdG8gdXNlIHRoaXMgY2xhc3MgaW5zdGVhZCBvZiBgUm9zRHJkc0RCYGZvciBhIG1vcmUgY29udmVuaWVudCBkZXZlbG9wbWVudCBleHBlcmllbmNlLlxuICogU2VlIGh0dHBzOi8vd3d3LmFsaWJhYmFjbG91ZC5jb20vaGVscC9yb3MvZGV2ZWxvcGVyLXJlZmVyZW5jZS9hbGl5dW4tZHJkcy1kcmRzZGJcbiAqL1xuZXhwb3J0IGNsYXNzIERyZHNEQiBleHRlbmRzIHJvcy5SZXNvdXJjZSBpbXBsZW1lbnRzIElEcmRzREIge1xuICAgIHByb3RlY3RlZCBzY29wZTogcm9zLkNvbnN0cnVjdDtcbiAgICBwcm90ZWN0ZWQgaWQ6IHN0cmluZztcbiAgICBwdWJsaWMgcmVhZG9ubHkgcHJvcHM6IERyZHNEQlByb3BzO1xuICAgIHByb3RlY3RlZCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIFBhcmFtIHNjb3BlIC0gc2NvcGUgaW4gd2hpY2ggdGhpcyByZXNvdXJjZSBpcyBkZWZpbmVkXG4gICAgICogUGFyYW0gaWQgICAgLSBzY29wZWQgaWQgb2YgdGhlIHJlc291cmNlXG4gICAgICogUGFyYW0gcHJvcHMgLSByZXNvdXJjZSBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IHJvcy5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBEcmRzREJQcm9wcywgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6Ym9vbGVhbiA9IHRydWUpIHtcbiAgICAgICAgc3VwZXIoc2NvcGUsIGlkKTtcbiAgICAgICAgdGhpcy5zY29wZSA9IHNjb3BlO1xuICAgICAgICB0aGlzLmlkID0gaWQ7XG4gICAgICAgIHRoaXMucHJvcHMgPSBwcm9wcztcbiAgICAgICAgdGhpcy5lbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCA9IGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50O1xuXG4gICAgICAgIGNvbnN0IHJvc0RyZHNEQiA9IG5ldyBSb3NEcmRzREIodGhpcywgaWQsICB7XG4gICAgICAgICAgICBkYkluc3RUeXBlOiBwcm9wcy5kYkluc3RUeXBlLFxuICAgICAgICAgICAgdHlwZTogcHJvcHMudHlwZSA9PT0gdW5kZWZpbmVkIHx8IHByb3BzLnR5cGUgPT09IG51bGwgPyAnSE9SSVpPTlRBTCcgOiBwcm9wcy50eXBlLFxuICAgICAgICAgICAgZHJkc0luc3RhbmNlSWQ6IHByb3BzLmRyZHNJbnN0YW5jZUlkLFxuICAgICAgICAgICAgcmRzSW5zdGFuY2U6IHByb3BzLnJkc0luc3RhbmNlLFxuICAgICAgICAgICAgZGJJbnN0YW5jZUlzQ3JlYXRpbmc6IHByb3BzLmRiSW5zdGFuY2VJc0NyZWF0aW5nLFxuICAgICAgICAgICAgaW5zdERiTmFtZTogcHJvcHMuaW5zdERiTmFtZSxcbiAgICAgICAgICAgIGRiTmFtZTogcHJvcHMuZGJOYW1lLFxuICAgICAgICAgICAgZW5jb2RlOiBwcm9wcy5lbmNvZGUsXG4gICAgICAgICAgICBhY2NvdW50TmFtZTogcHJvcHMuYWNjb3VudE5hbWUsXG4gICAgICAgICAgICBwYXNzd29yZDogcHJvcHMucGFzc3dvcmQsXG4gICAgICAgIH0sIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ICYmIHRoaXMuc3RhY2suZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQpO1xuICAgICAgICB0aGlzLnJlc291cmNlID0gcm9zRHJkc0RCO1xuICAgIH1cbn1cbiJdfQ==