"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServiceMesh = exports.ServiceMeshProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const asm_generated_1 = require("./asm.generated");
Object.defineProperty(exports, "ServiceMeshProperty", { enumerable: true, get: function () { return asm_generated_1.RosServiceMesh; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::ASM::ServiceMesh`, which is used to create an Alibaba Cloud Service Mesh (ASM) instance.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosServiceMesh`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-asm-servicemesh
 */
class ServiceMesh extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosServiceMesh = new asm_generated_1.RosServiceMesh(this, id, {
            opa: props.opa,
            enableAudit: props.enableAudit,
            istioVersion: props.istioVersion,
            apiServerPublicEip: props.apiServerPublicEip,
            localityLoadBalancing: props.localityLoadBalancing,
            telemetry: props.telemetry,
            outboundTrafficPolicy: props.outboundTrafficPolicy,
            auditProject: props.auditProject,
            traceSampling: props.traceSampling,
            name: props.name,
            proxy: props.proxy,
            vpcId: props.vpcId,
            pilotPublicEip: props.pilotPublicEip,
            includeIpRanges: props.includeIpRanges,
            vSwitches: props.vSwitches,
            tracing: props.tracing,
            customizedZipkin: props.customizedZipkin,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosServiceMesh;
        this.attrServiceMeshId = rosServiceMesh.attrServiceMeshId;
    }
}
exports.ServiceMesh = ServiceMesh;
//# sourceMappingURL=data:application/json;base64,