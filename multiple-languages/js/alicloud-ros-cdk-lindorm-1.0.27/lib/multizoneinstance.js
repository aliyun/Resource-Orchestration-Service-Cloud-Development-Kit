"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MultiZoneInstance = exports.MultiZoneInstanceProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const lindorm_generated_1 = require("./lindorm.generated");
Object.defineProperty(exports, "MultiZoneInstanceProperty", { enumerable: true, get: function () { return lindorm_generated_1.RosMultiZoneInstance; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::Lindorm::MultiZoneInstance`, which is used to create a multi-zone Lindorm instance.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosMultiZoneInstance`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-lindorm-multizoneinstance
 */
class MultiZoneInstance extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosMultiZoneInstance = new lindorm_generated_1.RosMultiZoneInstance(this, id, {
            standbyZoneId: props.standbyZoneId,
            resourceGroupId: props.resourceGroupId,
            instanceChargeType: props.instanceChargeType === undefined || props.instanceChargeType === null ? 'POSTPAY' : props.instanceChargeType,
            logDiskCategory: props.logDiskCategory,
            standbyVSwitchId: props.standbyVSwitchId,
            solrNum: props.solrNum,
            solrSpec: props.solrSpec,
            coreSpec: props.coreSpec,
            filestoreSpec: props.filestoreSpec,
            tsdbNum: props.tsdbNum,
            arbiterZoneId: props.arbiterZoneId,
            streamSpec: props.streamSpec,
            primaryZoneId: props.primaryZoneId,
            multiZoneCombination: props.multiZoneCombination,
            coreSingleStorage: props.coreSingleStorage,
            streamNum: props.streamNum,
            coldStorage: props.coldStorage,
            logSpec: props.logSpec,
            diskCategory: props.diskCategory,
            period: props.period,
            primaryVSwitchId: props.primaryVSwitchId,
            arbiterVSwitchId: props.arbiterVSwitchId,
            instanceName: props.instanceName,
            vpcId: props.vpcId,
            filestoreNum: props.filestoreNum,
            securityIpList: props.securityIpList,
            lindormSpec: props.lindormSpec,
            tsdbSpec: props.tsdbSpec,
            logSingleStorage: props.logSingleStorage,
            lindormNum: props.lindormNum,
            logNum: props.logNum,
            periodUnit: props.periodUnit,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosMultiZoneInstance;
        this.attrAuthInfos = rosMultiZoneInstance.attrAuthInfos;
        this.attrInstanceId = rosMultiZoneInstance.attrInstanceId;
        this.attrJdbcUrlList = rosMultiZoneInstance.attrJdbcUrlList;
    }
}
exports.MultiZoneInstance = MultiZoneInstance;
//# sourceMappingURL=data:application/json;base64,