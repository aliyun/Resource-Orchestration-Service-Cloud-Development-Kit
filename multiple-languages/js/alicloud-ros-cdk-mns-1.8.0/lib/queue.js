"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Queue = exports.QueueProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const mns_generated_1 = require("./mns.generated");
Object.defineProperty(exports, "QueueProperty", { enumerable: true, get: function () { return mns_generated_1.RosQueue; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::MNS::Queue`, which is used to create a queue to contain messages. Queues can be classified into standard and delayed queues.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosQueue`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-mns-queue
 */
class Queue extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosQueue = new mns_generated_1.RosQueue(this, id, {
            delaySeconds: props.delaySeconds === undefined || props.delaySeconds === null ? 0 : props.delaySeconds,
            pollingWaitSeconds: props.pollingWaitSeconds === undefined || props.pollingWaitSeconds === null ? 0 : props.pollingWaitSeconds,
            messageRetentionPeriod: props.messageRetentionPeriod === undefined || props.messageRetentionPeriod === null ? 345600 : props.messageRetentionPeriod,
            maximumMessageSize: props.maximumMessageSize === undefined || props.maximumMessageSize === null ? 65536 : props.maximumMessageSize,
            visibilityTimeout: props.visibilityTimeout === undefined || props.visibilityTimeout === null ? 30 : props.visibilityTimeout,
            queueName: props.queueName,
            loggingEnabled: props.loggingEnabled === undefined || props.loggingEnabled === null ? false : props.loggingEnabled,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosQueue;
        this.attrArnWithSlash = rosQueue.attrArnWithSlash;
        this.attrQueueName = rosQueue.attrQueueName;
        this.attrQueueUrl = rosQueue.attrQueueUrl;
    }
    static fromQueueArn(scope, id, attrArnWithSlash) {
        return Queue.fromQueueAttributes(scope, id, { attrArnWithSlash });
    }
    /**
     * Import an existing queue
     */
    static fromQueueAttributes(scope, id, attrs) {
        const stack = ros.Stack.of(scope);
        const parsedArn = stack.splitArn(attrs.attrArnWithSlash, ros.ArnFormat.SLASH_RESOURCE_SLASH_RESOURCE_NAME);
        const queueName = attrs.attrQueueName || parsedArn.resourceName;
        if (!queueName) {
            throw new Error('The Queue Name cannot be parsed from Arn. Please ensure that the Arn is in the correct format.');
        }
        const queueUrl = attrs.attrQueueUrl || `http://${parsedArn.account}.mns.${parsedArn.region}.aliyuncs.com/queues/${queueName}`;
        class Import extends ros.Resource {
            constructor() {
                super(...arguments);
                this.props = {
                    queueName: queueName,
                };
                this.attrArnWithSlash = attrs.attrArnWithSlash;
                this.attrQueueUrl = queueUrl;
                this.attrQueueName = queueName;
            }
        }
        return new Import(scope, id, {
            environmentFromArn: attrs.attrArnWithSlash,
        });
    }
}
exports.Queue = Queue;
//# sourceMappingURL=data:application/json;base64,