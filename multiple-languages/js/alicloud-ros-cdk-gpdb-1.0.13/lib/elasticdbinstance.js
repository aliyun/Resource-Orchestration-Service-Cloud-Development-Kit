"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ElasticDBInstance = exports.ElasticDBInstanceProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const gpdb_generated_1 = require("./gpdb.generated");
Object.defineProperty(exports, "ElasticDBInstanceProperty", { enumerable: true, get: function () { return gpdb_generated_1.RosElasticDBInstance; } });
/**
 * A ROS resource type:  `ALIYUN::GPDB::ElasticDBInstance`
 */
class ElasticDBInstance extends ros.Resource {
    /**
     * Create a new `ALIYUN::GPDB::ElasticDBInstance`.
     *
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosElasticDBInstance = new gpdb_generated_1.RosElasticDBInstance(this, id, {
            masterNodeNum: props.masterNodeNum,
            encryptionType: props.encryptionType,
            instanceSpec: props.instanceSpec,
            engineVersion: props.engineVersion,
            zoneId: props.zoneId,
            vpcId: props.vpcId,
            vSwitchId: props.vSwitchId,
            segNodeNum: props.segNodeNum,
            period: props.period,
            segStorageType: props.segStorageType,
            storageSize: props.storageSize,
            encryptionKey: props.encryptionKey,
            payType: props.payType === undefined || props.payType === null ? 'Postpaid' : props.payType,
            dbInstanceCategory: props.dbInstanceCategory,
            securityIpList: props.securityIpList,
            dbInstanceDescription: props.dbInstanceDescription,
            tags: props.tags,
            periodUnit: props.periodUnit === undefined || props.periodUnit === null ? 'Month' : props.periodUnit,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosElasticDBInstance;
        this.attrConnectionString = rosElasticDBInstance.attrConnectionString;
        this.attrDbInstanceId = rosElasticDBInstance.attrDbInstanceId;
        this.attrOrderId = rosElasticDBInstance.attrOrderId;
        this.attrPort = rosElasticDBInstance.attrPort;
    }
}
exports.ElasticDBInstance = ElasticDBInstance;
//# sourceMappingURL=data:application/json;base64,