"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServiceSource = exports.ServiceSourceProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const mse_generated_1 = require("./mse.generated");
Object.defineProperty(exports, "ServiceSourceProperty", { enumerable: true, get: function () { return mse_generated_1.RosServiceSource; } });
/**
 * A ROS resource type:  `ALIYUN::MSE::ServiceSource`
 */
class ServiceSource extends ros.Resource {
    /**
     * Create a new `ALIYUN::MSE::ServiceSource`.
     *
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosServiceSource = new mse_generated_1.RosServiceSource(this, id, {
            gatewayUniqueId: props.gatewayUniqueId,
            ingressOptions: props.ingressOptions,
            groupList: props.groupList,
            address: props.address,
            pathList: props.pathList,
            source: props.source,
            name: props.name,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosServiceSource;
        this.attrAddress = rosServiceSource.attrAddress;
        this.attrGatewayUniqueId = rosServiceSource.attrGatewayUniqueId;
        this.attrId = rosServiceSource.attrId;
        this.attrName = rosServiceSource.attrName;
    }
}
exports.ServiceSource = ServiceSource;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmljZXNvdXJjZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInNlcnZpY2Vzb3VyY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsOENBQThDO0FBQzlDLG1EQUFtRDtBQUV0QixzR0FGcEIsZ0NBQWdCLE9BRXlCO0FBa0RsRDs7R0FFRztBQUNILE1BQWEsYUFBYyxTQUFRLEdBQUcsQ0FBQyxRQUFRO0lBNkIzQzs7Ozs7O09BTUc7SUFDSCxZQUFZLEtBQW9CLEVBQUUsRUFBVSxFQUFFLEtBQXlCLEVBQUUsbUNBQTJDLElBQUk7UUFDcEgsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUVqQixNQUFNLGdCQUFnQixHQUFHLElBQUksZ0NBQWdCLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRztZQUNyRCxlQUFlLEVBQUUsS0FBSyxDQUFDLGVBQWU7WUFDdEMsY0FBYyxFQUFFLEtBQUssQ0FBQyxjQUFjO1lBQ3BDLFNBQVMsRUFBRSxLQUFLLENBQUMsU0FBUztZQUMxQixPQUFPLEVBQUUsS0FBSyxDQUFDLE9BQU87WUFDdEIsUUFBUSxFQUFFLEtBQUssQ0FBQyxRQUFRO1lBQ3hCLE1BQU0sRUFBRSxLQUFLLENBQUMsTUFBTTtZQUNwQixJQUFJLEVBQUUsS0FBSyxDQUFDLElBQUk7U0FDbkIsRUFBRSxnQ0FBZ0MsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7UUFDcEYsSUFBSSxDQUFDLFFBQVEsR0FBRyxnQkFBZ0IsQ0FBQztRQUNqQyxJQUFJLENBQUMsV0FBVyxHQUFHLGdCQUFnQixDQUFDLFdBQVcsQ0FBQztRQUNoRCxJQUFJLENBQUMsbUJBQW1CLEdBQUcsZ0JBQWdCLENBQUMsbUJBQW1CLENBQUM7UUFDaEUsSUFBSSxDQUFDLE1BQU0sR0FBRyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUM7UUFDdEMsSUFBSSxDQUFDLFFBQVEsR0FBRyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUM7SUFDOUMsQ0FBQztDQUNKO0FBdERELHNDQXNEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHJvcyBmcm9tICdAYWxpY2xvdWQvcm9zLWNkay1jb3JlJztcbmltcG9ydCB7IFJvc1NlcnZpY2VTb3VyY2UgfSBmcm9tICcuL21zZS5nZW5lcmF0ZWQnO1xuLy8gR2VuZXJhdGVkIGZyb20gdGhlIEFsaUNsb3VkIFJPUyBSZXNvdXJjZSBTcGVjaWZpY2F0aW9uXG5leHBvcnQgeyBSb3NTZXJ2aWNlU291cmNlIGFzIFNlcnZpY2VTb3VyY2VQcm9wZXJ0eSB9O1xuXG4vKipcbiAqIFByb3BlcnRpZXMgZm9yIGRlZmluaW5nIGEgYEFMSVlVTjo6TVNFOjpTZXJ2aWNlU291cmNlYFxuICovXG5leHBvcnQgaW50ZXJmYWNlIFNlcnZpY2VTb3VyY2VQcm9wcyB7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBnYXRld2F5VW5pcXVlSWQ6IFRoZSB1bmlxdWUgSUQgb2YgdGhlIGdhdGV3YXkuXG4gICAgICovXG4gICAgcmVhZG9ubHkgZ2F0ZXdheVVuaXF1ZUlkOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBuYW1lOiBUaGUgbmFtZS5cbiAgICAgKiBJZiBTb3VyY2U9SzhTLCB0aGlzIHBhcmFtZXRlciBzcGVjaWZpZXMgdGhlIG5hbWUgb2YgdGhlIEFDSyBjbHVzdGVyLlxuICAgICAqIElmIFNvdXJjZT1NU0UsIHRoaXMgcGFyYW1ldGVyIHNwZWNpZmllcyB0aGUgSUQgb2YgdGhlIE5hY29zIGluc3RhbmNlLlxuICAgICAqIElmIFNvdXJjZT1NU0VfWkssIHRoaXMgcGFyYW1ldGVyIHNwZWNpZmllcyB0aGUgSUQgb2YgdGhlIFpvb0tlZXBlciBpbnN0YW5jZS5cbiAgICAgKiBJZiBTb3VyY2U9RURBUywgdGhpcyBwYXJhbWV0ZXIgc3BlY2lmaWVzIHRoZSBJRCBvZiB0aGUgRURBUyBuYW1lc3BhY2UuXG4gICAgICogSWYgU291cmNlPVNBRSwgdGhpcyBwYXJhbWV0ZXIgc3BlY2lmaWVzIHRoZSBJRCBvZiB0aGUgU0FFIG5hbWVzcGFjZS5cbiAgICAgKi9cbiAgICByZWFkb25seSBuYW1lOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBzb3VyY2U6IFRoZSBzZXJ2aWNlIHNvdXJjZS4gVmFsaWQgdmFsdWVzOlxuICAgICAqIEs4UzogQUNLIGNsdXN0ZXJcbiAgICAgKiBNU0U6IE1TRSBOYWNvcyBpbnN0YW5jZVxuICAgICAqL1xuICAgIHJlYWRvbmx5IHNvdXJjZTogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgYWRkcmVzczogUmVnaXN0cmF0aW9uIEFkZHJlc3MuIElmIG5vdCBzcGVjaWZpZWQsIGl0IHdpbGwgYmUgYXV0b21hdGljYWxseSBnZW5lcmF0ZWQgYmFzZWQgb24gdGhlIHNlbGVjdGVkIGluc3RhbmNlLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGFkZHJlc3M/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBncm91cExpc3Q6IFRoZSBsaXN0IG9mIHNlcnZpY2UgZ3JvdXBzLiBUaGlzIGlzIHJlcXVpcmVkIHdoZW4gU291cmNlPUVEQVMuXG4gICAgICovXG4gICAgcmVhZG9ubHkgZ3JvdXBMaXN0PzogQXJyYXk8YW55IHwgcm9zLklSZXNvbHZhYmxlPiB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGluZ3Jlc3NPcHRpb25zOiBUaGUgSW5ncmVzcyBjb25maWd1cmF0aW9uLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGluZ3Jlc3NPcHRpb25zPzogUm9zU2VydmljZVNvdXJjZS5JbmdyZXNzT3B0aW9uc1Byb3BlcnR5IHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgcGF0aExpc3Q6IEFuIGFycmF5IG9mIHNlcnZpY2Ugcm9vdCBwYXRocy5cbiAgICAgKi9cbiAgICByZWFkb25seSBwYXRoTGlzdD86IEFycmF5PGFueSB8IHJvcy5JUmVzb2x2YWJsZT4gfCByb3MuSVJlc29sdmFibGU7XG59XG5cbi8qKlxuICogQSBST1MgcmVzb3VyY2UgdHlwZTogIGBBTElZVU46Ok1TRTo6U2VydmljZVNvdXJjZWBcbiAqL1xuZXhwb3J0IGNsYXNzIFNlcnZpY2VTb3VyY2UgZXh0ZW5kcyByb3MuUmVzb3VyY2Uge1xuXG4gICAgLyoqXG4gICAgICogQSBmYWN0b3J5IG1ldGhvZCB0aGF0IGNyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgdGhpcyBjbGFzcyBmcm9tIGFuIG9iamVjdFxuICAgICAqIGNvbnRhaW5pbmcgdGhlIHByb3BlcnRpZXMgb2YgdGhpcyBST1MgcmVzb3VyY2UsIHdoaWNoIHdpbGwgYmUgYXNzaWduZWQgdG8gUk9TIHJlc291cmNlLlxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIEFkZHJlc3M6IFJlZ2lzdHJhdGlvbiBBZGRyZXNzLiBJZiBub3Qgc3BlY2lmaWVkLCBpdCB3aWxsIGJlIGF1dG9tYXRpY2FsbHkgZ2VuZXJhdGVkIGJhc2VkIG9uIHRoZSBzZWxlY3RlZCBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckFkZHJlc3M6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBHYXRld2F5VW5pcXVlSWQ6IFRoZSB1bmlxdWUgSUQgb2YgdGhlIGdhdGV3YXkuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJHYXRld2F5VW5pcXVlSWQ6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBJZDogVGhlIElEIG9mIHNlcnZpY2Ugc291cmNlLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRySWQ6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBOYW1lOiBUaGUgbmFtZS5cbklmIFR5cGUgaXMgc2V0IHRvIEs4UywgdGhpcyBwYXJhbWV0ZXIgc3BlY2lmaWVzIHRoZSBuYW1lIG9mIHRoZSBBQ0sgY2x1c3Rlci5cbklmIFR5cGUgaXMgc2V0IHRvIE5BQ09TLCB0aGlzIHBhcmFtZXRlciBzcGVjaWZpZXMgdGhlIElEIG9mIHRoZSBOYWNvcyBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ck5hbWU6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBgQUxJWVVOOjpNU0U6OlNlcnZpY2VTb3VyY2VgLlxuICAgICAqXG4gICAgICogUGFyYW0gc2NvcGUgLSBzY29wZSBpbiB3aGljaCB0aGlzIHJlc291cmNlIGlzIGRlZmluZWRcbiAgICAgKiBQYXJhbSBpZCAgICAtIHNjb3BlZCBpZCBvZiB0aGUgcmVzb3VyY2VcbiAgICAgKiBQYXJhbSBwcm9wcyAtIHJlc291cmNlIHByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihzY29wZTogcm9zLkNvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IFNlcnZpY2VTb3VyY2VQcm9wcywgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6Ym9vbGVhbiA9IHRydWUpIHtcbiAgICAgICAgc3VwZXIoc2NvcGUsIGlkKTtcblxuICAgICAgICBjb25zdCByb3NTZXJ2aWNlU291cmNlID0gbmV3IFJvc1NlcnZpY2VTb3VyY2UodGhpcywgaWQsICB7XG4gICAgICAgICAgICBnYXRld2F5VW5pcXVlSWQ6IHByb3BzLmdhdGV3YXlVbmlxdWVJZCxcbiAgICAgICAgICAgIGluZ3Jlc3NPcHRpb25zOiBwcm9wcy5pbmdyZXNzT3B0aW9ucyxcbiAgICAgICAgICAgIGdyb3VwTGlzdDogcHJvcHMuZ3JvdXBMaXN0LFxuICAgICAgICAgICAgYWRkcmVzczogcHJvcHMuYWRkcmVzcyxcbiAgICAgICAgICAgIHBhdGhMaXN0OiBwcm9wcy5wYXRoTGlzdCxcbiAgICAgICAgICAgIHNvdXJjZTogcHJvcHMuc291cmNlLFxuICAgICAgICAgICAgbmFtZTogcHJvcHMubmFtZSxcbiAgICAgICAgfSwgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgJiYgdGhpcy5zdGFjay5lbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCk7XG4gICAgICAgIHRoaXMucmVzb3VyY2UgPSByb3NTZXJ2aWNlU291cmNlO1xuICAgICAgICB0aGlzLmF0dHJBZGRyZXNzID0gcm9zU2VydmljZVNvdXJjZS5hdHRyQWRkcmVzcztcbiAgICAgICAgdGhpcy5hdHRyR2F0ZXdheVVuaXF1ZUlkID0gcm9zU2VydmljZVNvdXJjZS5hdHRyR2F0ZXdheVVuaXF1ZUlkO1xuICAgICAgICB0aGlzLmF0dHJJZCA9IHJvc1NlcnZpY2VTb3VyY2UuYXR0cklkO1xuICAgICAgICB0aGlzLmF0dHJOYW1lID0gcm9zU2VydmljZVNvdXJjZS5hdHRyTmFtZTtcbiAgICB9XG59XG4iXX0=