"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BgpPeer = exports.BgpPeerProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const vpc_generated_1 = require("./vpc.generated");
Object.defineProperty(exports, "BgpPeerProperty", { enumerable: true, get: function () { return vpc_generated_1.RosBgpPeer; } });
/**
 * This class encapsulates and extends the ROS resource type `DATASOURCE::VPC::BgpPeer`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosBgpPeer`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/datasource-vpc-bgppeer
 */
class BgpPeer extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props = {}, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosBgpPeer = new vpc_generated_1.RosBgpPeer(this, id, {
            bgpPeerId: props.bgpPeerId,
            refreshOptions: props.refreshOptions === undefined || props.refreshOptions === null ? 'Never' : props.refreshOptions,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosBgpPeer;
        this.attrAdvertisedRouteCount = rosBgpPeer.attrAdvertisedRouteCount;
        this.attrAuthKey = rosBgpPeer.attrAuthKey;
        this.attrBfdMultiHop = rosBgpPeer.attrBfdMultiHop;
        this.attrBgpGroupId = rosBgpPeer.attrBgpGroupId;
        this.attrBgpPeerId = rosBgpPeer.attrBgpPeerId;
        this.attrBgpStatus = rosBgpPeer.attrBgpStatus;
        this.attrDescription = rosBgpPeer.attrDescription;
        this.attrEnableBfd = rosBgpPeer.attrEnableBfd;
        this.attrGmtModified = rosBgpPeer.attrGmtModified;
        this.attrHold = rosBgpPeer.attrHold;
        this.attrIpVersion = rosBgpPeer.attrIpVersion;
        this.attrIsFake = rosBgpPeer.attrIsFake;
        this.attrKeepalive = rosBgpPeer.attrKeepalive;
        this.attrLocalAsn = rosBgpPeer.attrLocalAsn;
        this.attrName = rosBgpPeer.attrName;
        this.attrPeerAsn = rosBgpPeer.attrPeerAsn;
        this.attrPeerIpAddress = rosBgpPeer.attrPeerIpAddress;
        this.attrReceivedRouteCount = rosBgpPeer.attrReceivedRouteCount;
        this.attrRouteLimit = rosBgpPeer.attrRouteLimit;
        this.attrRouterId = rosBgpPeer.attrRouterId;
        this.attrStatus = rosBgpPeer.attrStatus;
    }
}
exports.BgpPeer = BgpPeer;
//# sourceMappingURL=data:application/json;base64,