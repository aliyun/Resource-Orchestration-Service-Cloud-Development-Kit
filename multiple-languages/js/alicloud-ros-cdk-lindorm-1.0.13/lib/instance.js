"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Instance = exports.InstanceProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const lindorm_generated_1 = require("./lindorm.generated");
Object.defineProperty(exports, "InstanceProperty", { enumerable: true, get: function () { return lindorm_generated_1.RosInstance; } });
/**
 * A ROS resource type:  `ALIYUN::Lindorm::Instance`
 */
class Instance extends ros.Resource {
    /**
     * Create a new `ALIYUN::Lindorm::Instance`.
     *
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosInstance = new lindorm_generated_1.RosInstance(this, id, {
            streamSpec: props.streamSpec,
            instanceStorage: props.instanceStorage,
            resourceGroupId: props.resourceGroupId,
            zoneId: props.zoneId,
            instanceChargeType: props.instanceChargeType === undefined || props.instanceChargeType === null ? 'POSTPAY' : props.instanceChargeType,
            streamNum: props.streamNum,
            coldStorage: props.coldStorage,
            vSwitchId: props.vSwitchId,
            diskCategory: props.diskCategory,
            period: props.period,
            instanceName: props.instanceName,
            solrNum: props.solrNum,
            solrSpec: props.solrSpec,
            filestoreNum: props.filestoreNum,
            vpcId: props.vpcId,
            securityIpList: props.securityIpList,
            lindormSpec: props.lindormSpec,
            tsdbSpec: props.tsdbSpec,
            coreSpec: props.coreSpec,
            lindormNum: props.lindormNum,
            filestoreSpec: props.filestoreSpec,
            tsdbNum: props.tsdbNum,
            periodUnit: props.periodUnit,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosInstance;
        this.attrInstanceId = rosInstance.attrInstanceId;
        this.attrJdbcUrlList = rosInstance.attrJdbcUrlList;
    }
}
exports.Instance = Instance;
//# sourceMappingURL=data:application/json;base64,