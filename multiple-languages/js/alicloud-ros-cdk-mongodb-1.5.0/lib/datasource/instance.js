"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Instance = exports.InstanceProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const mongodb_generated_1 = require("./mongodb.generated");
Object.defineProperty(exports, "InstanceProperty", { enumerable: true, get: function () { return mongodb_generated_1.RosInstance; } });
/**
 * This class encapsulates and extends the ROS resource type `DATASOURCE::MONGODB::Instance`, which is used to query the information about an ApsaraDB for MongoDB instance.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosInstance`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/datasource-mongodb-instance
 */
class Instance extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosInstance = new mongodb_generated_1.RosInstance(this, id, {
            instanceId: props.instanceId,
            refreshOptions: props.refreshOptions === undefined || props.refreshOptions === null ? 'Never' : props.refreshOptions,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosInstance;
        this.attrAccountDescription = rosInstance.attrAccountDescription;
        this.attrAccountName = rosInstance.attrAccountName;
        this.attrAutoRenew = rosInstance.attrAutoRenew;
        this.attrAutoRenewDuration = rosInstance.attrAutoRenewDuration;
        this.attrBackupInterval = rosInstance.attrBackupInterval;
        this.attrBackupRetentionPeriod = rosInstance.attrBackupRetentionPeriod;
        this.attrCreateTime = rosInstance.attrCreateTime;
        this.attrDbInstanceClass = rosInstance.attrDbInstanceClass;
        this.attrDbInstanceDescription = rosInstance.attrDbInstanceDescription;
        this.attrDbInstanceReleaseProtection = rosInstance.attrDbInstanceReleaseProtection;
        this.attrDbInstanceType = rosInstance.attrDbInstanceType;
        this.attrDbInstanceStorage = rosInstance.attrDbInstanceStorage;
        this.attrEnableBackupLog = rosInstance.attrEnableBackupLog;
        this.attrEngine = rosInstance.attrEngine;
        this.attrEngineVersion = rosInstance.attrEngineVersion;
        this.attrExpireTime = rosInstance.attrExpireTime;
        this.attrHiddenZoneId = rosInstance.attrHiddenZoneId;
        this.attrInstanceId = rosInstance.attrInstanceId;
        this.attrKindCode = rosInstance.attrKindCode;
        this.attrLastDowngradeTime = rosInstance.attrLastDowngradeTime;
        this.attrLockMode = rosInstance.attrLockMode;
        this.attrLogBackupRetentionPeriod = rosInstance.attrLogBackupRetentionPeriod;
        this.attrMaintainEndTime = rosInstance.attrMaintainEndTime;
        this.attrMaintainStartTime = rosInstance.attrMaintainStartTime;
        this.attrMongosList = rosInstance.attrMongosList;
        this.attrNetworkAddresses = rosInstance.attrNetworkAddresses;
        this.attrNetworkType = rosInstance.attrNetworkType;
        this.attrParameters = rosInstance.attrParameters;
        this.attrPaymentType = rosInstance.attrPaymentType;
        this.attrPreferredBackupPeriod = rosInstance.attrPreferredBackupPeriod;
        this.attrPreferredBackupTime = rosInstance.attrPreferredBackupTime;
        this.attrProtocolType = rosInstance.attrProtocolType;
        this.attrReadonlyReplicas = rosInstance.attrReadonlyReplicas;
        this.attrReplicaSetsConnections = rosInstance.attrReplicaSetsConnections;
        this.attrReplicationFactor = rosInstance.attrReplicationFactor;
        this.attrResourceGroupId = rosInstance.attrResourceGroupId;
        this.attrSecondaryZoneId = rosInstance.attrSecondaryZoneId;
        this.attrSecurityGroupId = rosInstance.attrSecurityGroupId;
        this.attrSecurityIpList = rosInstance.attrSecurityIpList;
        this.attrSecurityIps = rosInstance.attrSecurityIps;
        this.attrShardList = rosInstance.attrShardList;
        this.attrSnapshotBackupType = rosInstance.attrSnapshotBackupType;
        this.attrSslExpiredTime = rosInstance.attrSslExpiredTime;
        this.attrSslStatus = rosInstance.attrSslStatus;
        this.attrStorageEngine = rosInstance.attrStorageEngine;
        this.attrTags = rosInstance.attrTags;
        this.attrTdeStatus = rosInstance.attrTdeStatus;
        this.attrVSwitchId = rosInstance.attrVSwitchId;
        this.attrVpcAuthMode = rosInstance.attrVpcAuthMode;
        this.attrVpcId = rosInstance.attrVpcId;
        this.attrZoneId = rosInstance.attrZoneId;
    }
}
exports.Instance = Instance;
//# sourceMappingURL=data:application/json;base64,