"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DbPlan = exports.DbPlanProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const hbr_generated_1 = require("./hbr.generated");
Object.defineProperty(exports, "DbPlanProperty", { enumerable: true, get: function () { return hbr_generated_1.RosDbPlan; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::HBR::DbPlan`, which is used to create a backup plan.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosDbPlan`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-hbr-dbplan
 */
class DbPlan extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosDbPlan = new hbr_generated_1.RosDbPlan(this, id, {
            options: props.options,
            instanceUuid: props.instanceUuid,
            sourceType: props.sourceType,
            vaultId: props.vaultId,
            source: props.source,
            continuousPlan: props.continuousPlan,
            incPlan: props.incPlan,
            maxRetrySeconds: props.maxRetrySeconds,
            hostUuid: props.hostUuid,
            cumulativePlan: props.cumulativePlan,
            fullPlan: props.fullPlan,
            logPlan: props.logPlan,
            maxRateLimit: props.maxRateLimit,
            dbPlanName: props.dbPlanName,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosDbPlan;
        this.attrContinuousPlan = rosDbPlan.attrContinuousPlan;
        this.attrContinuousUuid = rosDbPlan.attrContinuousUuid;
        this.attrCumulativePlan = rosDbPlan.attrCumulativePlan;
        this.attrCumulativeUuid = rosDbPlan.attrCumulativeUuid;
        this.attrDbPlanName = rosDbPlan.attrDbPlanName;
        this.attrFullPlan = rosDbPlan.attrFullPlan;
        this.attrFullUuid = rosDbPlan.attrFullUuid;
        this.attrHostUuid = rosDbPlan.attrHostUuid;
        this.attrIncPlan = rosDbPlan.attrIncPlan;
        this.attrIncUuid = rosDbPlan.attrIncUuid;
        this.attrInstanceUuid = rosDbPlan.attrInstanceUuid;
        this.attrLogPlan = rosDbPlan.attrLogPlan;
        this.attrLogUuid = rosDbPlan.attrLogUuid;
        this.attrMaxRateLimit = rosDbPlan.attrMaxRateLimit;
        this.attrMaxRetrySeconds = rosDbPlan.attrMaxRetrySeconds;
        this.attrOptions = rosDbPlan.attrOptions;
        this.attrPlanId = rosDbPlan.attrPlanId;
        this.attrSourceType = rosDbPlan.attrSourceType;
        this.attrTarget = rosDbPlan.attrTarget;
        this.attrVaultId = rosDbPlan.attrVaultId;
    }
}
exports.DbPlan = DbPlan;
//# sourceMappingURL=data:application/json;base64,