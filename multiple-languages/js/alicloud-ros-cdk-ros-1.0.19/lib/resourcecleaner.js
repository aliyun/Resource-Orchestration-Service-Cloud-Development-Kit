"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResourceCleaner = exports.ResourceCleanerProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ros_generated_1 = require("./ros.generated");
Object.defineProperty(exports, "ResourceCleanerProperty", { enumerable: true, get: function () { return ros_generated_1.RosResourceCleaner; } });
/**
 * A ROS resource type:  `ALIYUN::ROS::ResourceCleaner`
 */
class ResourceCleaner extends ros.Resource {
    /**
     * Create a new `ALIYUN::ROS::ResourceCleaner`.
     *
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosResourceCleaner = new ros_generated_1.RosResourceCleaner(this, id, {
            failureOption: props.failureOption === undefined || props.failureOption === null ? 'Normal' : props.failureOption,
            resourceFilters: props.resourceFilters,
            action: props.action,
            cleanUpAlgorithm: props.cleanUpAlgorithm === undefined || props.cleanUpAlgorithm === null ? 'ResourceDependency' : props.cleanUpAlgorithm,
            mode: props.mode === undefined || props.mode === null ? 'Loose' : props.mode,
            cleanUpRetryCount: props.cleanUpRetryCount === undefined || props.cleanUpRetryCount === null ? 1 : props.cleanUpRetryCount,
            resourceTypeOrder: props.resourceTypeOrder,
            resources: props.resources,
            cleanUpTimeout: props.cleanUpTimeout === undefined || props.cleanUpTimeout === null ? 3600 : props.cleanUpTimeout,
            disabledSideEffects: props.disabledSideEffects,
            excludedResources: props.excludedResources,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosResourceCleaner;
        this.attrCleanResult = rosResourceCleaner.attrCleanResult;
        this.attrNoCleanupResourceDetails = rosResourceCleaner.attrNoCleanupResourceDetails;
        this.attrNoCleanupResourcePartialDetails = rosResourceCleaner.attrNoCleanupResourcePartialDetails;
        this.attrResourceDetails = rosResourceCleaner.attrResourceDetails;
        this.attrResourcePartialDetails = rosResourceCleaner.attrResourcePartialDetails;
        this.attrResourceSummary = rosResourceCleaner.attrResourceSummary;
        this.attrScanErrors = rosResourceCleaner.attrScanErrors;
    }
}
exports.ResourceCleaner = ResourceCleaner;
//# sourceMappingURL=data:application/json;base64,