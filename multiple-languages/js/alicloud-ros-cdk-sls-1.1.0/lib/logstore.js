"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Logstore = exports.LogstoreProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const sls_generated_1 = require("./sls.generated");
Object.defineProperty(exports, "LogstoreProperty", { enumerable: true, get: function () { return sls_generated_1.RosLogstore; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::SLS::Logstore`, which is used to create a Logstore in a Log Service project.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosLogstore`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-sls-logstore
 */
class Logstore extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosLogstore = new sls_generated_1.RosLogstore(this, id, {
            logstoreName: props.logstoreName,
            preserveStorage: props.preserveStorage === undefined || props.preserveStorage === null ? false : props.preserveStorage,
            projectName: props.projectName,
            appendMeta: props.appendMeta === undefined || props.appendMeta === null ? false : props.appendMeta,
            maxSplitShard: props.maxSplitShard,
            autoSplit: props.autoSplit === undefined || props.autoSplit === null ? false : props.autoSplit,
            enableTracking: props.enableTracking === undefined || props.enableTracking === null ? false : props.enableTracking,
            encryptConf: props.encryptConf,
            ttl: props.ttl === undefined || props.ttl === null ? 30 : props.ttl,
            shardCount: props.shardCount === undefined || props.shardCount === null ? 2 : props.shardCount,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosLogstore;
        this.attrLogstoreName = rosLogstore.attrLogstoreName;
        this.attrProjectName = rosLogstore.attrProjectName;
    }
}
exports.Logstore = Logstore;
//# sourceMappingURL=data:application/json;base64,