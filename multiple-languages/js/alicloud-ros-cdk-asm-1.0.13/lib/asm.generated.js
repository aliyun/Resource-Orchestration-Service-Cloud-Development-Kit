"use strict";
// Generated from the AliCloud ROS Resource Specification
Object.defineProperty(exports, "__esModule", { value: true });
exports.RosServiceMesh = void 0;
const ros = require("@alicloud/ros-cdk-core");
/**
 * Determine whether the given properties match those of a `RosServiceMeshProps`
 *
 * @param properties - the TypeScript properties of a `RosServiceMeshProps`
 *
 * @returns the result of the validation.
 */
function RosServiceMeshPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('opa', RosServiceMesh_OPAPropertyValidator)(properties.opa));
    errors.collect(ros.propertyValidator('enableAudit', ros.validateBoolean)(properties.enableAudit));
    errors.collect(ros.propertyValidator('istioVersion', ros.validateString)(properties.istioVersion));
    errors.collect(ros.propertyValidator('apiServerPublicEip', ros.validateBoolean)(properties.apiServerPublicEip));
    errors.collect(ros.propertyValidator('localityLoadBalancing', ros.validateBoolean)(properties.localityLoadBalancing));
    errors.collect(ros.propertyValidator('telemetry', ros.validateBoolean)(properties.telemetry));
    errors.collect(ros.propertyValidator('outboundTrafficPolicy', ros.validateString)(properties.outboundTrafficPolicy));
    errors.collect(ros.propertyValidator('auditProject', ros.validateString)(properties.auditProject));
    errors.collect(ros.propertyValidator('traceSampling', ros.validateNumber)(properties.traceSampling));
    errors.collect(ros.propertyValidator('name', ros.validateString)(properties.name));
    errors.collect(ros.propertyValidator('proxy', RosServiceMesh_ProxyPropertyValidator)(properties.proxy));
    errors.collect(ros.propertyValidator('vpcId', ros.requiredValidator)(properties.vpcId));
    errors.collect(ros.propertyValidator('vpcId', ros.validateString)(properties.vpcId));
    errors.collect(ros.propertyValidator('pilotPublicEip', ros.validateBoolean)(properties.pilotPublicEip));
    errors.collect(ros.propertyValidator('includeIpRanges', ros.validateString)(properties.includeIpRanges));
    errors.collect(ros.propertyValidator('vSwitches', ros.requiredValidator)(properties.vSwitches));
    errors.collect(ros.propertyValidator('vSwitches', ros.listValidator(ros.validateAny))(properties.vSwitches));
    errors.collect(ros.propertyValidator('tracing', ros.validateBoolean)(properties.tracing));
    errors.collect(ros.propertyValidator('customizedZipkin', ros.validateBoolean)(properties.customizedZipkin));
    return errors.wrap('supplied properties not correct for "RosServiceMeshProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ASM::ServiceMesh` resource
 *
 * @param properties - the TypeScript properties of a `RosServiceMeshProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ASM::ServiceMesh` resource.
 */
// @ts-ignore TS6133
function rosServiceMeshPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosServiceMeshPropsValidator(properties).assertSuccess();
    }
    return {
        VpcId: ros.stringToRosTemplate(properties.vpcId),
        VSwitches: ros.listMapper(ros.objectToRosTemplate)(properties.vSwitches),
        ApiServerPublicEip: ros.booleanToRosTemplate(properties.apiServerPublicEip),
        AuditProject: ros.stringToRosTemplate(properties.auditProject),
        CustomizedZipkin: ros.booleanToRosTemplate(properties.customizedZipkin),
        EnableAudit: ros.booleanToRosTemplate(properties.enableAudit),
        IncludeIPRanges: ros.stringToRosTemplate(properties.includeIpRanges),
        IstioVersion: ros.stringToRosTemplate(properties.istioVersion),
        LocalityLoadBalancing: ros.booleanToRosTemplate(properties.localityLoadBalancing),
        Name: ros.stringToRosTemplate(properties.name),
        OPA: rosServiceMeshOPAPropertyToRosTemplate(properties.opa),
        OutboundTrafficPolicy: ros.stringToRosTemplate(properties.outboundTrafficPolicy),
        PilotPublicEip: ros.booleanToRosTemplate(properties.pilotPublicEip),
        Proxy: rosServiceMeshProxyPropertyToRosTemplate(properties.proxy),
        Telemetry: ros.booleanToRosTemplate(properties.telemetry),
        TraceSampling: ros.numberToRosTemplate(properties.traceSampling),
        Tracing: ros.booleanToRosTemplate(properties.tracing),
    };
}
/**
 * A ROS template type:  `ALIYUN::ASM::ServiceMesh`
 */
class RosServiceMesh extends ros.RosResource {
    /**
     * Create a new `ALIYUN::ASM::ServiceMesh`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosServiceMesh.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrServiceMeshId = this.getAtt('ServiceMeshId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.vpcId = props.vpcId;
        this.vSwitches = props.vSwitches;
        this.apiServerPublicEip = props.apiServerPublicEip;
        this.auditProject = props.auditProject;
        this.customizedZipkin = props.customizedZipkin;
        this.enableAudit = props.enableAudit;
        this.includeIpRanges = props.includeIpRanges;
        this.istioVersion = props.istioVersion;
        this.localityLoadBalancing = props.localityLoadBalancing;
        this.name = props.name;
        this.opa = props.opa;
        this.outboundTrafficPolicy = props.outboundTrafficPolicy;
        this.pilotPublicEip = props.pilotPublicEip;
        this.proxy = props.proxy;
        this.telemetry = props.telemetry;
        this.traceSampling = props.traceSampling;
        this.tracing = props.tracing;
    }
    get rosProperties() {
        return {
            vpcId: this.vpcId,
            vSwitches: this.vSwitches,
            apiServerPublicEip: this.apiServerPublicEip,
            auditProject: this.auditProject,
            customizedZipkin: this.customizedZipkin,
            enableAudit: this.enableAudit,
            includeIpRanges: this.includeIpRanges,
            istioVersion: this.istioVersion,
            localityLoadBalancing: this.localityLoadBalancing,
            name: this.name,
            opa: this.opa,
            outboundTrafficPolicy: this.outboundTrafficPolicy,
            pilotPublicEip: this.pilotPublicEip,
            proxy: this.proxy,
            telemetry: this.telemetry,
            traceSampling: this.traceSampling,
            tracing: this.tracing,
        };
    }
    renderProperties(props) {
        return rosServiceMeshPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosServiceMesh = RosServiceMesh;
/**
 * The resource type name for this resource class.
 */
RosServiceMesh.ROS_RESOURCE_TYPE_NAME = "ALIYUN::ASM::ServiceMesh";
/**
 * Determine whether the given properties match those of a `OPAProperty`
 *
 * @param properties - the TypeScript properties of a `OPAProperty`
 *
 * @returns the result of the validation.
 */
function RosServiceMesh_OPAPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('opaRequestCpu', ros.validateString)(properties.opaRequestCpu));
    errors.collect(ros.propertyValidator('openAgentPolicy', ros.validateBoolean)(properties.openAgentPolicy));
    errors.collect(ros.propertyValidator('opaLogLevel', ros.validateString)(properties.opaLogLevel));
    errors.collect(ros.propertyValidator('opaLimitCpu', ros.validateString)(properties.opaLimitCpu));
    errors.collect(ros.propertyValidator('opaLimitMemory', ros.validateString)(properties.opaLimitMemory));
    errors.collect(ros.propertyValidator('opaRequestMemory', ros.validateString)(properties.opaRequestMemory));
    return errors.wrap('supplied properties not correct for "OPAProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ASM::ServiceMesh.OPA` resource
 *
 * @param properties - the TypeScript properties of a `OPAProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ASM::ServiceMesh.OPA` resource.
 */
// @ts-ignore TS6133
function rosServiceMeshOPAPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosServiceMesh_OPAPropertyValidator(properties).assertSuccess();
    return {
        OPARequestCPU: ros.stringToRosTemplate(properties.opaRequestCpu),
        OpenAgentPolicy: ros.booleanToRosTemplate(properties.openAgentPolicy),
        OPALogLevel: ros.stringToRosTemplate(properties.opaLogLevel),
        OPALimitCPU: ros.stringToRosTemplate(properties.opaLimitCpu),
        OPALimitMemory: ros.stringToRosTemplate(properties.opaLimitMemory),
        OPARequestMemory: ros.stringToRosTemplate(properties.opaRequestMemory),
    };
}
/**
 * Determine whether the given properties match those of a `ProxyProperty`
 *
 * @param properties - the TypeScript properties of a `ProxyProperty`
 *
 * @returns the result of the validation.
 */
function RosServiceMesh_ProxyPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('clusterDomain', ros.validateString)(properties.clusterDomain));
    errors.collect(ros.propertyValidator('proxyLimitCpu', ros.validateString)(properties.proxyLimitCpu));
    errors.collect(ros.propertyValidator('proxyLimitMemory', ros.validateString)(properties.proxyLimitMemory));
    errors.collect(ros.propertyValidator('proxyRequestCpu', ros.validateString)(properties.proxyRequestCpu));
    errors.collect(ros.propertyValidator('proxyRequestMemory', ros.validateString)(properties.proxyRequestMemory));
    return errors.wrap('supplied properties not correct for "ProxyProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ASM::ServiceMesh.Proxy` resource
 *
 * @param properties - the TypeScript properties of a `ProxyProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ASM::ServiceMesh.Proxy` resource.
 */
// @ts-ignore TS6133
function rosServiceMeshProxyPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosServiceMesh_ProxyPropertyValidator(properties).assertSuccess();
    return {
        ClusterDomain: ros.stringToRosTemplate(properties.clusterDomain),
        ProxyLimitCPU: ros.stringToRosTemplate(properties.proxyLimitCpu),
        ProxyLimitMemory: ros.stringToRosTemplate(properties.proxyLimitMemory),
        ProxyRequestCPU: ros.stringToRosTemplate(properties.proxyRequestCpu),
        ProxyRequestMemory: ros.stringToRosTemplate(properties.proxyRequestMemory),
    };
}
//# sourceMappingURL=data:application/json;base64,