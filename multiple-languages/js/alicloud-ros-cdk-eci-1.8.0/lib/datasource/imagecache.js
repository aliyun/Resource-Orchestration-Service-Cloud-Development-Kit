"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImageCache = exports.ImageCacheProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const eci_generated_1 = require("./eci.generated");
Object.defineProperty(exports, "ImageCacheProperty", { enumerable: true, get: function () { return eci_generated_1.RosImageCache; } });
/**
 * This class encapsulates and extends the ROS resource type `DATASOURCE::ECI::ImageCache`, which is used to query the information about an image cache.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosImageCache`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/datasource-eci-imagecache
 */
class ImageCache extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosImageCache = new eci_generated_1.RosImageCache(this, id, {
            imageCacheId: props.imageCacheId,
            refreshOptions: props.refreshOptions === undefined || props.refreshOptions === null ? 'Never' : props.refreshOptions,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosImageCache;
        this.attrContainerGroupId = rosImageCache.attrContainerGroupId;
        this.attrCreateTime = rosImageCache.attrCreateTime;
        this.attrEliminationStrategy = rosImageCache.attrEliminationStrategy;
        this.attrEvents = rosImageCache.attrEvents;
        this.attrExpireDateTime = rosImageCache.attrExpireDateTime;
        this.attrFlashSnapshotId = rosImageCache.attrFlashSnapshotId;
        this.attrImageCacheId = rosImageCache.attrImageCacheId;
        this.attrImageCacheName = rosImageCache.attrImageCacheName;
        this.attrImageCacheSize = rosImageCache.attrImageCacheSize;
        this.attrImageCacheTags = rosImageCache.attrImageCacheTags;
        this.attrImages = rosImageCache.attrImages;
        this.attrProgress = rosImageCache.attrProgress;
        this.attrResourceGroupId = rosImageCache.attrResourceGroupId;
        this.attrSnapshotId = rosImageCache.attrSnapshotId;
    }
}
exports.ImageCache = ImageCache;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1hZ2VjYWNoZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImltYWdlY2FjaGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsOENBQThDO0FBQzlDLG1EQUFnRDtBQUV0QixtR0FGakIsNkJBQWEsT0FFc0I7QUFrRzVDOzs7O0dBSUc7QUFDSCxNQUFhLFVBQVcsU0FBUSxHQUFHLENBQUMsUUFBUTtJQTRFeEM7Ozs7T0FJRztJQUNILFlBQVksS0FBb0IsRUFBRSxFQUFVLEVBQUUsS0FBc0IsRUFBRSxtQ0FBMkMsSUFBSTtRQUNqSCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ2pCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQ2IsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLGdDQUFnQyxHQUFHLGdDQUFnQyxDQUFDO1FBRXpFLE1BQU0sYUFBYSxHQUFHLElBQUksNkJBQWEsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFHO1lBQy9DLFlBQVksRUFBRSxLQUFLLENBQUMsWUFBWTtZQUNoQyxjQUFjLEVBQUUsS0FBSyxDQUFDLGNBQWMsS0FBSyxTQUFTLElBQUksS0FBSyxDQUFDLGNBQWMsS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLGNBQWM7U0FDdkgsRUFBRSxnQ0FBZ0MsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7UUFDcEYsSUFBSSxDQUFDLFFBQVEsR0FBRyxhQUFhLENBQUM7UUFDOUIsSUFBSSxDQUFDLG9CQUFvQixHQUFHLGFBQWEsQ0FBQyxvQkFBb0IsQ0FBQztRQUMvRCxJQUFJLENBQUMsY0FBYyxHQUFHLGFBQWEsQ0FBQyxjQUFjLENBQUM7UUFDbkQsSUFBSSxDQUFDLHVCQUF1QixHQUFHLGFBQWEsQ0FBQyx1QkFBdUIsQ0FBQztRQUNyRSxJQUFJLENBQUMsVUFBVSxHQUFHLGFBQWEsQ0FBQyxVQUFVLENBQUM7UUFDM0MsSUFBSSxDQUFDLGtCQUFrQixHQUFHLGFBQWEsQ0FBQyxrQkFBa0IsQ0FBQztRQUMzRCxJQUFJLENBQUMsbUJBQW1CLEdBQUcsYUFBYSxDQUFDLG1CQUFtQixDQUFDO1FBQzdELElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxhQUFhLENBQUMsZ0JBQWdCLENBQUM7UUFDdkQsSUFBSSxDQUFDLGtCQUFrQixHQUFHLGFBQWEsQ0FBQyxrQkFBa0IsQ0FBQztRQUMzRCxJQUFJLENBQUMsa0JBQWtCLEdBQUcsYUFBYSxDQUFDLGtCQUFrQixDQUFDO1FBQzNELElBQUksQ0FBQyxrQkFBa0IsR0FBRyxhQUFhLENBQUMsa0JBQWtCLENBQUM7UUFDM0QsSUFBSSxDQUFDLFVBQVUsR0FBRyxhQUFhLENBQUMsVUFBVSxDQUFDO1FBQzNDLElBQUksQ0FBQyxZQUFZLEdBQUcsYUFBYSxDQUFDLFlBQVksQ0FBQztRQUMvQyxJQUFJLENBQUMsbUJBQW1CLEdBQUcsYUFBYSxDQUFDLG1CQUFtQixDQUFDO1FBQzdELElBQUksQ0FBQyxjQUFjLEdBQUcsYUFBYSxDQUFDLGNBQWMsQ0FBQztJQUN2RCxDQUFDO0NBQ0o7QUE1R0QsZ0NBNEdDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcm9zIGZyb20gJ0BhbGljbG91ZC9yb3MtY2RrLWNvcmUnO1xuaW1wb3J0IHsgUm9zSW1hZ2VDYWNoZSB9IGZyb20gJy4vZWNpLmdlbmVyYXRlZCc7XG4vLyBHZW5lcmF0ZWQgZnJvbSB0aGUgQWxpQ2xvdWQgUk9TIFJlc291cmNlIFNwZWNpZmljYXRpb25cbmV4cG9ydCB7IFJvc0ltYWdlQ2FjaGUgYXMgSW1hZ2VDYWNoZVByb3BlcnR5IH07XG5cbi8qKlxuICogUHJvcGVydGllcyBmb3IgZGVmaW5pbmcgYSBgSW1hZ2VDYWNoZWAuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2RhdGFzb3VyY2UtZWNpLWltYWdlY2FjaGVcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJbWFnZUNhY2hlUHJvcHMge1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgaW1hZ2VDYWNoZUlkOiBJbWFnZUNhY2hlSWQuXG4gICAgICovXG4gICAgcmVhZG9ubHkgaW1hZ2VDYWNoZUlkOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSByZWZyZXNoT3B0aW9uczogVGhlIHJlZnJlc2ggc3RyYXRlZ3kgZm9yIHRoZSBkYXRhc291cmNlIHJlc291cmNlIHdoZW4gdGhlIHN0YWNrIGlzIHVwZGF0ZWQuIFZhbGlkIHZhbHVlczpcbiAgICAgKiAtIE5ldmVyOiBOZXZlciByZWZyZXNoIHRoZSBkYXRhc291cmNlIHJlc291cmNlIHdoZW4gdGhlIHN0YWNrIGlzIHVwZGF0ZWQuXG4gICAgICogLSBBbHdheXM6IEFsd2F5cyByZWZyZXNoIHRoZSBkYXRhc291cmNlIHJlc291cmNlIHdoZW4gdGhlIHN0YWNrIGlzIHVwZGF0ZWQuXG4gICAgICogRGVmYXVsdCBpcyBOZXZlci5cbiAgICAgKi9cbiAgICByZWFkb25seSByZWZyZXNoT3B0aW9ucz86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcbn1cblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgYEltYWdlQ2FjaGVgLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIElJbWFnZUNhY2hlIGV4dGVuZHMgcm9zLklSZXNvdXJjZSB7XG4gICAgcmVhZG9ubHkgcHJvcHM6IEltYWdlQ2FjaGVQcm9wcztcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBDb250YWluZXJHcm91cElkOiBDb250YWluZXJHcm91cElkLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGF0dHJDb250YWluZXJHcm91cElkOiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgQ3JlYXRlVGltZTogQ3JlYXRlVGltZS5cbiAgICAgKi9cbiAgICByZWFkb25seSBhdHRyQ3JlYXRlVGltZTogcm9zLklSZXNvbHZhYmxlIHwgc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIEVsaW1pbmF0aW9uU3RyYXRlZ3k6IFRoZSBlbGltaW5hdGlvbiBzdHJhdGVneSBvZiB0aGUgbWlycm9yIGNhY2hlLiBUaGUgZGVmYXVsdCBpcyBlbXB0eSwgaW5kaWNhdGluZyB0aGF0IGl0IGhhcyBiZWVuIGtlcHQuXG4gICAgICovXG4gICAgcmVhZG9ubHkgYXR0ckVsaW1pbmF0aW9uU3RyYXRlZ3k6IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBFdmVudHM6IEV2ZW50cy5cbiAgICAgKi9cbiAgICByZWFkb25seSBhdHRyRXZlbnRzOiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgRXhwaXJlRGF0ZVRpbWU6IEV4cGlyZURhdGVUaW1lLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGF0dHJFeHBpcmVEYXRlVGltZTogcm9zLklSZXNvbHZhYmxlIHwgc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIEZsYXNoU25hcHNob3RJZDogRmxhc2hTbmFwc2hvdElkLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGF0dHJGbGFzaFNuYXBzaG90SWQ6IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBJbWFnZUNhY2hlSWQ6IEltYWdlQ2FjaGVJZC5cbiAgICAgKi9cbiAgICByZWFkb25seSBhdHRySW1hZ2VDYWNoZUlkOiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgSW1hZ2VDYWNoZU5hbWU6IEltYWdlQ2FjaGVOYW1lLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGF0dHJJbWFnZUNhY2hlTmFtZTogcm9zLklSZXNvbHZhYmxlIHwgc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIEltYWdlQ2FjaGVTaXplOiBJbWFnZUNhY2hlU2l6ZS5cbiAgICAgKi9cbiAgICByZWFkb25seSBhdHRySW1hZ2VDYWNoZVNpemU6IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBJbWFnZUNhY2hlVGFnczogVGFncy5cbiAgICAgKi9cbiAgICByZWFkb25seSBhdHRySW1hZ2VDYWNoZVRhZ3M6IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBJbWFnZXM6IEltYWdlcy5cbiAgICAgKi9cbiAgICByZWFkb25seSBhdHRySW1hZ2VzOiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgUHJvZ3Jlc3M6IFByb2dyZXNzLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGF0dHJQcm9ncmVzczogcm9zLklSZXNvbHZhYmxlIHwgc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIFJlc291cmNlR3JvdXBJZDogUmVzb3VyY2VHcm91cElkLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGF0dHJSZXNvdXJjZUdyb3VwSWQ6IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBTbmFwc2hvdElkOiBTbmFwc2hvdElkLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGF0dHJTbmFwc2hvdElkOiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG59XG4vKipcbiAqIFRoaXMgY2xhc3MgZW5jYXBzdWxhdGVzIGFuZCBleHRlbmRzIHRoZSBST1MgcmVzb3VyY2UgdHlwZSBgREFUQVNPVVJDRTo6RUNJOjpJbWFnZUNhY2hlYCwgd2hpY2ggaXMgdXNlZCB0byBxdWVyeSB0aGUgaW5mb3JtYXRpb24gYWJvdXQgYW4gaW1hZ2UgY2FjaGUuXG4gKiBATm90ZSBUaGlzIGNsYXNzIG1heSBoYXZlIHNvbWUgbmV3IGZ1bmN0aW9ucyB0byBmYWNpbGl0YXRlIGRldmVsb3BtZW50LCBzbyBpdCBpcyByZWNvbW1lbmRlZCB0byB1c2UgdGhpcyBjbGFzcyBpbnN0ZWFkIG9mIGBSb3NJbWFnZUNhY2hlYGZvciBhIG1vcmUgY29udmVuaWVudCBkZXZlbG9wbWVudCBleHBlcmllbmNlLlxuICogU2VlIGh0dHBzOi8vd3d3LmFsaWJhYmFjbG91ZC5jb20vaGVscC9yb3MvZGV2ZWxvcGVyLXJlZmVyZW5jZS9kYXRhc291cmNlLWVjaS1pbWFnZWNhY2hlXG4gKi9cbmV4cG9ydCBjbGFzcyBJbWFnZUNhY2hlIGV4dGVuZHMgcm9zLlJlc291cmNlIGltcGxlbWVudHMgSUltYWdlQ2FjaGUge1xuICAgIHByb3RlY3RlZCBzY29wZTogcm9zLkNvbnN0cnVjdDtcbiAgICBwcm90ZWN0ZWQgaWQ6IHN0cmluZztcbiAgICBwdWJsaWMgcmVhZG9ubHkgcHJvcHM6IEltYWdlQ2FjaGVQcm9wcztcbiAgICBwcm90ZWN0ZWQgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6IGJvb2xlYW47XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgQ29udGFpbmVyR3JvdXBJZDogQ29udGFpbmVyR3JvdXBJZC5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckNvbnRhaW5lckdyb3VwSWQ6IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBDcmVhdGVUaW1lOiBDcmVhdGVUaW1lLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyQ3JlYXRlVGltZTogcm9zLklSZXNvbHZhYmxlIHwgc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIEVsaW1pbmF0aW9uU3RyYXRlZ3k6IFRoZSBlbGltaW5hdGlvbiBzdHJhdGVneSBvZiB0aGUgbWlycm9yIGNhY2hlLiBUaGUgZGVmYXVsdCBpcyBlbXB0eSwgaW5kaWNhdGluZyB0aGF0IGl0IGhhcyBiZWVuIGtlcHQuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJFbGltaW5hdGlvblN0cmF0ZWd5OiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgRXZlbnRzOiBFdmVudHMuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJFdmVudHM6IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBFeHBpcmVEYXRlVGltZTogRXhwaXJlRGF0ZVRpbWUuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJFeHBpcmVEYXRlVGltZTogcm9zLklSZXNvbHZhYmxlIHwgc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIEZsYXNoU25hcHNob3RJZDogRmxhc2hTbmFwc2hvdElkLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyRmxhc2hTbmFwc2hvdElkOiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgSW1hZ2VDYWNoZUlkOiBJbWFnZUNhY2hlSWQuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJJbWFnZUNhY2hlSWQ6IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBJbWFnZUNhY2hlTmFtZTogSW1hZ2VDYWNoZU5hbWUuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJJbWFnZUNhY2hlTmFtZTogcm9zLklSZXNvbHZhYmxlIHwgc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIEltYWdlQ2FjaGVTaXplOiBJbWFnZUNhY2hlU2l6ZS5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckltYWdlQ2FjaGVTaXplOiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgSW1hZ2VDYWNoZVRhZ3M6IFRhZ3MuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJJbWFnZUNhY2hlVGFnczogcm9zLklSZXNvbHZhYmxlIHwgc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIEltYWdlczogSW1hZ2VzLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRySW1hZ2VzOiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgUHJvZ3Jlc3M6IFByb2dyZXNzLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyUHJvZ3Jlc3M6IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBSZXNvdXJjZUdyb3VwSWQ6IFJlc291cmNlR3JvdXBJZC5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0clJlc291cmNlR3JvdXBJZDogcm9zLklSZXNvbHZhYmxlIHwgc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIFNuYXBzaG90SWQ6IFNuYXBzaG90SWQuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJTbmFwc2hvdElkOiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBQYXJhbSBzY29wZSAtIHNjb3BlIGluIHdoaWNoIHRoaXMgcmVzb3VyY2UgaXMgZGVmaW5lZFxuICAgICAqIFBhcmFtIGlkICAgIC0gc2NvcGVkIGlkIG9mIHRoZSByZXNvdXJjZVxuICAgICAqIFBhcmFtIHByb3BzIC0gcmVzb3VyY2UgcHJvcGVydGllc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiByb3MuQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogSW1hZ2VDYWNoZVByb3BzLCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDpib29sZWFuID0gdHJ1ZSkge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQpO1xuICAgICAgICB0aGlzLnNjb3BlID0gc2NvcGU7XG4gICAgICAgIHRoaXMuaWQgPSBpZDtcbiAgICAgICAgdGhpcy5wcm9wcyA9IHByb3BzO1xuICAgICAgICB0aGlzLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ID0gZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ7XG5cbiAgICAgICAgY29uc3Qgcm9zSW1hZ2VDYWNoZSA9IG5ldyBSb3NJbWFnZUNhY2hlKHRoaXMsIGlkLCAge1xuICAgICAgICAgICAgaW1hZ2VDYWNoZUlkOiBwcm9wcy5pbWFnZUNhY2hlSWQsXG4gICAgICAgICAgICByZWZyZXNoT3B0aW9uczogcHJvcHMucmVmcmVzaE9wdGlvbnMgPT09IHVuZGVmaW5lZCB8fCBwcm9wcy5yZWZyZXNoT3B0aW9ucyA9PT0gbnVsbCA/ICdOZXZlcicgOiBwcm9wcy5yZWZyZXNoT3B0aW9ucyxcbiAgICAgICAgfSwgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgJiYgdGhpcy5zdGFjay5lbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCk7XG4gICAgICAgIHRoaXMucmVzb3VyY2UgPSByb3NJbWFnZUNhY2hlO1xuICAgICAgICB0aGlzLmF0dHJDb250YWluZXJHcm91cElkID0gcm9zSW1hZ2VDYWNoZS5hdHRyQ29udGFpbmVyR3JvdXBJZDtcbiAgICAgICAgdGhpcy5hdHRyQ3JlYXRlVGltZSA9IHJvc0ltYWdlQ2FjaGUuYXR0ckNyZWF0ZVRpbWU7XG4gICAgICAgIHRoaXMuYXR0ckVsaW1pbmF0aW9uU3RyYXRlZ3kgPSByb3NJbWFnZUNhY2hlLmF0dHJFbGltaW5hdGlvblN0cmF0ZWd5O1xuICAgICAgICB0aGlzLmF0dHJFdmVudHMgPSByb3NJbWFnZUNhY2hlLmF0dHJFdmVudHM7XG4gICAgICAgIHRoaXMuYXR0ckV4cGlyZURhdGVUaW1lID0gcm9zSW1hZ2VDYWNoZS5hdHRyRXhwaXJlRGF0ZVRpbWU7XG4gICAgICAgIHRoaXMuYXR0ckZsYXNoU25hcHNob3RJZCA9IHJvc0ltYWdlQ2FjaGUuYXR0ckZsYXNoU25hcHNob3RJZDtcbiAgICAgICAgdGhpcy5hdHRySW1hZ2VDYWNoZUlkID0gcm9zSW1hZ2VDYWNoZS5hdHRySW1hZ2VDYWNoZUlkO1xuICAgICAgICB0aGlzLmF0dHJJbWFnZUNhY2hlTmFtZSA9IHJvc0ltYWdlQ2FjaGUuYXR0ckltYWdlQ2FjaGVOYW1lO1xuICAgICAgICB0aGlzLmF0dHJJbWFnZUNhY2hlU2l6ZSA9IHJvc0ltYWdlQ2FjaGUuYXR0ckltYWdlQ2FjaGVTaXplO1xuICAgICAgICB0aGlzLmF0dHJJbWFnZUNhY2hlVGFncyA9IHJvc0ltYWdlQ2FjaGUuYXR0ckltYWdlQ2FjaGVUYWdzO1xuICAgICAgICB0aGlzLmF0dHJJbWFnZXMgPSByb3NJbWFnZUNhY2hlLmF0dHJJbWFnZXM7XG4gICAgICAgIHRoaXMuYXR0clByb2dyZXNzID0gcm9zSW1hZ2VDYWNoZS5hdHRyUHJvZ3Jlc3M7XG4gICAgICAgIHRoaXMuYXR0clJlc291cmNlR3JvdXBJZCA9IHJvc0ltYWdlQ2FjaGUuYXR0clJlc291cmNlR3JvdXBJZDtcbiAgICAgICAgdGhpcy5hdHRyU25hcHNob3RJZCA9IHJvc0ltYWdlQ2FjaGUuYXR0clNuYXBzaG90SWQ7XG4gICAgfVxufVxuIl19