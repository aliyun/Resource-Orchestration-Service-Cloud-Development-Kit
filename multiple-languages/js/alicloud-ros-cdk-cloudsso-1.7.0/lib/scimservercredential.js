"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SCIMServerCredential = exports.SCIMServerCredentialProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const cloudsso_generated_1 = require("./cloudsso.generated");
Object.defineProperty(exports, "SCIMServerCredentialProperty", { enumerable: true, get: function () { return cloudsso_generated_1.RosSCIMServerCredential; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::CloudSSO::SCIMServerCredential`, which is used to create a System for Cross-domain Identity Management (SCIM) credential.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosSCIMServerCredential`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-cloudsso-scimservercredential
 */
class SCIMServerCredential extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosSCIMServerCredential = new cloudsso_generated_1.RosSCIMServerCredential(this, id, {
            status: props.status === undefined || props.status === null ? 'Enabled' : props.status,
            directoryId: props.directoryId,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosSCIMServerCredential;
        this.attrCredentialId = rosSCIMServerCredential.attrCredentialId;
        this.attrCredentialSecret = rosSCIMServerCredential.attrCredentialSecret;
    }
}
exports.SCIMServerCredential = SCIMServerCredential;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NpbXNlcnZlcmNyZWRlbnRpYWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJzY2ltc2VydmVyY3JlZGVudGlhbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw4Q0FBOEM7QUFDOUMsNkRBQStEO0FBRTNCLDZHQUYzQiw0Q0FBdUIsT0FFZ0M7QUFzQ2hFOzs7O0dBSUc7QUFDSCxNQUFhLG9CQUFxQixTQUFRLEdBQUcsQ0FBQyxRQUFRO0lBZ0JsRDs7OztPQUlHO0lBQ0gsWUFBWSxLQUFvQixFQUFFLEVBQVUsRUFBRSxLQUFnQyxFQUFFLG1DQUEyQyxJQUFJO1FBQzNILEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDakIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUM7UUFDYixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsZ0NBQWdDLEdBQUcsZ0NBQWdDLENBQUM7UUFFekUsTUFBTSx1QkFBdUIsR0FBRyxJQUFJLDRDQUF1QixDQUFDLElBQUksRUFBRSxFQUFFLEVBQUc7WUFDbkUsTUFBTSxFQUFFLEtBQUssQ0FBQyxNQUFNLEtBQUssU0FBUyxJQUFJLEtBQUssQ0FBQyxNQUFNLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxNQUFNO1lBQ3RGLFdBQVcsRUFBRSxLQUFLLENBQUMsV0FBVztTQUNqQyxFQUFFLGdDQUFnQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztRQUNwRixJQUFJLENBQUMsUUFBUSxHQUFHLHVCQUF1QixDQUFDO1FBQ3hDLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyx1QkFBdUIsQ0FBQyxnQkFBZ0IsQ0FBQztRQUNqRSxJQUFJLENBQUMsb0JBQW9CLEdBQUcsdUJBQXVCLENBQUMsb0JBQW9CLENBQUM7SUFDN0UsQ0FBQztDQUNKO0FBcENELG9EQW9DQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHJvcyBmcm9tICdAYWxpY2xvdWQvcm9zLWNkay1jb3JlJztcbmltcG9ydCB7IFJvc1NDSU1TZXJ2ZXJDcmVkZW50aWFsIH0gZnJvbSAnLi9jbG91ZHNzby5nZW5lcmF0ZWQnO1xuLy8gR2VuZXJhdGVkIGZyb20gdGhlIEFsaUNsb3VkIFJPUyBSZXNvdXJjZSBTcGVjaWZpY2F0aW9uXG5leHBvcnQgeyBSb3NTQ0lNU2VydmVyQ3JlZGVudGlhbCBhcyBTQ0lNU2VydmVyQ3JlZGVudGlhbFByb3BlcnR5IH07XG5cbi8qKlxuICogUHJvcGVydGllcyBmb3IgZGVmaW5pbmcgYSBgU0NJTVNlcnZlckNyZWRlbnRpYWxgLlxuICogU2VlIGh0dHBzOi8vd3d3LmFsaWJhYmFjbG91ZC5jb20vaGVscC9yb3MvZGV2ZWxvcGVyLXJlZmVyZW5jZS9hbGl5dW4tY2xvdWRzc28tc2NpbXNlcnZlcmNyZWRlbnRpYWxcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBTQ0lNU2VydmVyQ3JlZGVudGlhbFByb3BzIHtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGRpcmVjdG9yeUlkOiBUaGUgSUQgb2YgdGhlIGRpcmVjdG9yeS5cbiAgICAgKi9cbiAgICByZWFkb25seSBkaXJlY3RvcnlJZDogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgc3RhdHVzOiBUaGUgbmV3IHN0YXR1cyBvZiB0aGUgU0NJTSBjcmVkZW50aWFsLiBWYWxpZCB2YWx1ZXM6XG4gICAgICogLSBFbmFibGVkOiBUaGUgU0NJTSBjcmVkZW50aWFsIGlzIGVuYWJsZWQuXG4gICAgICogLSBEaXNhYmxlZDogVGhlIFNDSU0gY3JlZGVudGlhbCBpcyBkaXNhYmxlZC5cbiAgICAgKiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyBFbmFibGVkLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHN0YXR1cz86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcbn1cblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgYFNDSU1TZXJ2ZXJDcmVkZW50aWFsYC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJU0NJTVNlcnZlckNyZWRlbnRpYWwgZXh0ZW5kcyByb3MuSVJlc291cmNlIHtcbiAgICByZWFkb25seSBwcm9wczogU0NJTVNlcnZlckNyZWRlbnRpYWxQcm9wcztcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBDcmVkZW50aWFsSWQ6IFRoZSBJRCBvZiB0aGUgU0NJTSBjcmVkZW50aWFsLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGF0dHJDcmVkZW50aWFsSWQ6IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBDcmVkZW50aWFsU2VjcmV0OiBUaGUgc2VjcmV0IG9mIHRoZSBTQ0lNIGNyZWRlbnRpYWwuXG4gICAgICovXG4gICAgcmVhZG9ubHkgYXR0ckNyZWRlbnRpYWxTZWNyZXQ6IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcbn1cbi8qKlxuICogVGhpcyBjbGFzcyBlbmNhcHN1bGF0ZXMgYW5kIGV4dGVuZHMgdGhlIFJPUyByZXNvdXJjZSB0eXBlIGBBTElZVU46OkNsb3VkU1NPOjpTQ0lNU2VydmVyQ3JlZGVudGlhbGAsIHdoaWNoIGlzIHVzZWQgdG8gY3JlYXRlIGEgU3lzdGVtIGZvciBDcm9zcy1kb21haW4gSWRlbnRpdHkgTWFuYWdlbWVudCAoU0NJTSkgY3JlZGVudGlhbC5cbiAqIEBOb3RlIFRoaXMgY2xhc3MgbWF5IGhhdmUgc29tZSBuZXcgZnVuY3Rpb25zIHRvIGZhY2lsaXRhdGUgZGV2ZWxvcG1lbnQsIHNvIGl0IGlzIHJlY29tbWVuZGVkIHRvIHVzZSB0aGlzIGNsYXNzIGluc3RlYWQgb2YgYFJvc1NDSU1TZXJ2ZXJDcmVkZW50aWFsYGZvciBhIG1vcmUgY29udmVuaWVudCBkZXZlbG9wbWVudCBleHBlcmllbmNlLlxuICogU2VlIGh0dHBzOi8vd3d3LmFsaWJhYmFjbG91ZC5jb20vaGVscC9yb3MvZGV2ZWxvcGVyLXJlZmVyZW5jZS9hbGl5dW4tY2xvdWRzc28tc2NpbXNlcnZlcmNyZWRlbnRpYWxcbiAqL1xuZXhwb3J0IGNsYXNzIFNDSU1TZXJ2ZXJDcmVkZW50aWFsIGV4dGVuZHMgcm9zLlJlc291cmNlIGltcGxlbWVudHMgSVNDSU1TZXJ2ZXJDcmVkZW50aWFsIHtcbiAgICBwcm90ZWN0ZWQgc2NvcGU6IHJvcy5Db25zdHJ1Y3Q7XG4gICAgcHJvdGVjdGVkIGlkOiBzdHJpbmc7XG4gICAgcHVibGljIHJlYWRvbmx5IHByb3BzOiBTQ0lNU2VydmVyQ3JlZGVudGlhbFByb3BzO1xuICAgIHByb3RlY3RlZCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBDcmVkZW50aWFsSWQ6IFRoZSBJRCBvZiB0aGUgU0NJTSBjcmVkZW50aWFsLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyQ3JlZGVudGlhbElkOiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgQ3JlZGVudGlhbFNlY3JldDogVGhlIHNlY3JldCBvZiB0aGUgU0NJTSBjcmVkZW50aWFsLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyQ3JlZGVudGlhbFNlY3JldDogcm9zLklSZXNvbHZhYmxlIHwgc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogUGFyYW0gc2NvcGUgLSBzY29wZSBpbiB3aGljaCB0aGlzIHJlc291cmNlIGlzIGRlZmluZWRcbiAgICAgKiBQYXJhbSBpZCAgICAtIHNjb3BlZCBpZCBvZiB0aGUgcmVzb3VyY2VcbiAgICAgKiBQYXJhbSBwcm9wcyAtIHJlc291cmNlIHByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihzY29wZTogcm9zLkNvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IFNDSU1TZXJ2ZXJDcmVkZW50aWFsUHJvcHMsIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OmJvb2xlYW4gPSB0cnVlKSB7XG4gICAgICAgIHN1cGVyKHNjb3BlLCBpZCk7XG4gICAgICAgIHRoaXMuc2NvcGUgPSBzY29wZTtcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xuICAgICAgICB0aGlzLnByb3BzID0gcHJvcHM7XG4gICAgICAgIHRoaXMuZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgPSBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDtcblxuICAgICAgICBjb25zdCByb3NTQ0lNU2VydmVyQ3JlZGVudGlhbCA9IG5ldyBSb3NTQ0lNU2VydmVyQ3JlZGVudGlhbCh0aGlzLCBpZCwgIHtcbiAgICAgICAgICAgIHN0YXR1czogcHJvcHMuc3RhdHVzID09PSB1bmRlZmluZWQgfHwgcHJvcHMuc3RhdHVzID09PSBudWxsID8gJ0VuYWJsZWQnIDogcHJvcHMuc3RhdHVzLFxuICAgICAgICAgICAgZGlyZWN0b3J5SWQ6IHByb3BzLmRpcmVjdG9yeUlkLFxuICAgICAgICB9LCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCAmJiB0aGlzLnN0YWNrLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50KTtcbiAgICAgICAgdGhpcy5yZXNvdXJjZSA9IHJvc1NDSU1TZXJ2ZXJDcmVkZW50aWFsO1xuICAgICAgICB0aGlzLmF0dHJDcmVkZW50aWFsSWQgPSByb3NTQ0lNU2VydmVyQ3JlZGVudGlhbC5hdHRyQ3JlZGVudGlhbElkO1xuICAgICAgICB0aGlzLmF0dHJDcmVkZW50aWFsU2VjcmV0ID0gcm9zU0NJTVNlcnZlckNyZWRlbnRpYWwuYXR0ckNyZWRlbnRpYWxTZWNyZXQ7XG4gICAgfVxufVxuIl19