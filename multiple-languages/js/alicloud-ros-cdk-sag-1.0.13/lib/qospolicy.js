"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.QosPolicy = exports.QosPolicyProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const sag_generated_1 = require("./sag.generated");
Object.defineProperty(exports, "QosPolicyProperty", { enumerable: true, get: function () { return sag_generated_1.RosQosPolicy; } });
/**
 * A ROS resource type:  `ALIYUN::SAG::QosPolicy`
 */
class QosPolicy extends ros.Resource {
    /**
     * Create a new `ALIYUN::SAG::QosPolicy`.
     *
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosQosPolicy = new sag_generated_1.RosQosPolicy(this, id, {
            description: props.description,
            endTime: props.endTime,
            sourcePortRange: props.sourcePortRange,
            sourceCidr: props.sourceCidr,
            priority: props.priority,
            startTime: props.startTime,
            destPortRange: props.destPortRange,
            dpiGroupIds: props.dpiGroupIds,
            name: props.name,
            destCidr: props.destCidr,
            dpiSignatureIds: props.dpiSignatureIds,
            qosId: props.qosId,
            ipProtocol: props.ipProtocol,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosQosPolicy;
        this.attrQosPolicyId = rosQosPolicy.attrQosPolicyId;
    }
}
exports.QosPolicy = QosPolicy;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicW9zcG9saWN5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicW9zcG9saWN5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDhDQUE4QztBQUM5QyxtREFBK0M7QUFFdEIsa0dBRmhCLDRCQUFZLE9BRXFCO0FBb0cxQzs7R0FFRztBQUNILE1BQWEsU0FBVSxTQUFRLEdBQUcsQ0FBQyxRQUFRO0lBWXZDOzs7Ozs7T0FNRztJQUNILFlBQVksS0FBb0IsRUFBRSxFQUFVLEVBQUUsS0FBcUIsRUFBRSxtQ0FBMkMsSUFBSTtRQUNoSCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRWpCLE1BQU0sWUFBWSxHQUFHLElBQUksNEJBQVksQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFHO1lBQzdDLFdBQVcsRUFBRSxLQUFLLENBQUMsV0FBVztZQUM5QixPQUFPLEVBQUUsS0FBSyxDQUFDLE9BQU87WUFDdEIsZUFBZSxFQUFFLEtBQUssQ0FBQyxlQUFlO1lBQ3RDLFVBQVUsRUFBRSxLQUFLLENBQUMsVUFBVTtZQUM1QixRQUFRLEVBQUUsS0FBSyxDQUFDLFFBQVE7WUFDeEIsU0FBUyxFQUFFLEtBQUssQ0FBQyxTQUFTO1lBQzFCLGFBQWEsRUFBRSxLQUFLLENBQUMsYUFBYTtZQUNsQyxXQUFXLEVBQUUsS0FBSyxDQUFDLFdBQVc7WUFDOUIsSUFBSSxFQUFFLEtBQUssQ0FBQyxJQUFJO1lBQ2hCLFFBQVEsRUFBRSxLQUFLLENBQUMsUUFBUTtZQUN4QixlQUFlLEVBQUUsS0FBSyxDQUFDLGVBQWU7WUFDdEMsS0FBSyxFQUFFLEtBQUssQ0FBQyxLQUFLO1lBQ2xCLFVBQVUsRUFBRSxLQUFLLENBQUMsVUFBVTtTQUMvQixFQUFFLGdDQUFnQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztRQUNwRixJQUFJLENBQUMsUUFBUSxHQUFHLFlBQVksQ0FBQztRQUM3QixJQUFJLENBQUMsZUFBZSxHQUFHLFlBQVksQ0FBQyxlQUFlLENBQUM7SUFDeEQsQ0FBQztDQUNKO0FBeENELDhCQXdDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHJvcyBmcm9tICdAYWxpY2xvdWQvcm9zLWNkay1jb3JlJztcbmltcG9ydCB7IFJvc1Fvc1BvbGljeSB9IGZyb20gJy4vc2FnLmdlbmVyYXRlZCc7XG4vLyBHZW5lcmF0ZWQgZnJvbSB0aGUgQWxpQ2xvdWQgUk9TIFJlc291cmNlIFNwZWNpZmljYXRpb25cbmV4cG9ydCB7IFJvc1Fvc1BvbGljeSBhcyBRb3NQb2xpY3lQcm9wZXJ0eSB9O1xuXG4vKipcbiAqIFByb3BlcnRpZXMgZm9yIGRlZmluaW5nIGEgYEFMSVlVTjo6U0FHOjpRb3NQb2xpY3lgXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUW9zUG9saWN5UHJvcHMge1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgZGVzdENpZHI6IFRoZSByYW5nZSBvZiB0aGUgZGVzdGluYXRpb24gSVAgYWRkcmVzc2VzLlxuICAgICAqIFNwZWNpZnkgdGhlIHZhbHVlIG9mIHRoaXMgcGFyYW1ldGVyIGluIENJRFIgbm90YXRpb24uIEV4YW1wbGU6IDE5Mi4xNjguMTAuMC8yNC5cbiAgICAgKi9cbiAgICByZWFkb25seSBkZXN0Q2lkcjogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgZGVzdFBvcnRSYW5nZTogVGhlIHJhbmdlIG9mIGRlc3RpbmF0aW9uIHBvcnRzLlxuICAgICAqIFZhbGlkIHZhbHVlczogMSB0byA2NTUzNSBhbmQgLTEuXG4gICAgICogU2V0IHRoaXMgcGFyYW1ldGVyIGluIG9uZSBvZiB0aGUgZm9sbG93aW5nIGZvcm1hdHM6XG4gICAgICogMS8yMDA6IGEgcG9ydCByYW5nZSBmcm9tIDEgdG8gMjAwXG4gICAgICogODAvODA6IHBvcnQgODBcbiAgICAgKiAtMS8tMTogYWxsIHBvcnRzXG4gICAgICovXG4gICAgcmVhZG9ubHkgZGVzdFBvcnRSYW5nZTogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgaXBQcm90b2NvbDogVGhlIHR5cGUgb2YgdGhlIHByb3RvY29sIHRoYXQgYXBwbGllcyB0byB0aGUgdHJhZmZpYyBjbGFzc2lmaWNhdGlvbiBydWxlLlxuICAgICAqIFRoZSBzdXBwb3J0ZWQgcHJvdG9jb2xzIHByb3ZpZGVkIGluIHRoaXMgdG9waWMgYXJlIGZvciByZWZlcmVuY2Ugb25seS4gVGhlIGFjdHVhbFxuICAgICAqIHByb3RvY29scyBpbiB0aGUgY29uc29sZSBzaGFsbCBwcmV2YWlsLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGlwUHJvdG9jb2w6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHByaW9yaXR5OiBUaGUgcHJpb3JpdHkgb2YgdGhlIHRyYWZmaWMgdGhyb3R0bGluZyBwb2xpY3kgdG8gd2hpY2ggdGhlIHRyYWZmaWMgY2xhc3NpZmljYXRpb25cbiAgICAgKiBydWxlIGJlbG9uZ3MuXG4gICAgICovXG4gICAgcmVhZG9ubHkgcHJpb3JpdHk6IG51bWJlciB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHFvc0lkOiBUaGUgSUQgb2YgdGhlIFFvUyBwb2xpY3kuXG4gICAgICovXG4gICAgcmVhZG9ubHkgcW9zSWQ6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHNvdXJjZUNpZHI6IFRoZSByYW5nZSBvZiB0aGUgc291cmNlIElQIGFkZHJlc3Nlcy5cbiAgICAgKiBTcGVjaWZ5IHRoZSB2YWx1ZSBvZiB0aGlzIHBhcmFtZXRlciBpbiBDSURSIG5vdGF0aW9uLiBFeGFtcGxlOiAxOTIuMTY4LjEuMC8yNC5cbiAgICAgKi9cbiAgICByZWFkb25seSBzb3VyY2VDaWRyOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBzb3VyY2VQb3J0UmFuZ2U6IFRoZSByYW5nZSBvZiBzb3VyY2UgcG9ydHMuXG4gICAgICogVmFsaWQgdmFsdWVzOiAxIHRvIDY1NTM1IGFuZCAtMS5cbiAgICAgKiBTZXQgdGhpcyBwYXJhbWV0ZXIgaW4gb25lIG9mIHRoZSBmb2xsb3dpbmcgZm9ybWF0czpcbiAgICAgKiAxLzIwMDogYSBwb3J0IHJhbmdlIGZyb20gMSB0byAyMDBcbiAgICAgKiA4MC84MDogcG9ydCA4MFxuICAgICAqIC0xLy0xOiBhbGwgcG9ydHNcbiAgICAgKi9cbiAgICByZWFkb25seSBzb3VyY2VQb3J0UmFuZ2U6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGRlc2NyaXB0aW9uOiBUaGUgZGVzY3JpcHRpb24gb2YgdGhlIHRyYWZmaWMgY2xhc3NpZmljYXRpb24gcnVsZS5cbiAgICAgKiBUaGUgZGVzY3JpcHRpb24gbXVzdCBiZSAxIHRvIDUxMiBjaGFyYWN0ZXJzIGluIGxlbmd0aCBhbmQgY2FuIGNvbnRhaW4gbGV0dGVycywgZGlnaXRzLFxuICAgICAqIHVuZGVyc2NvcmVzIChfKSwgYW5kIGh5cGhlbnMgKC0pLiBJdCBtdXN0IHN0YXJ0IHdpdGggYSBsZXR0ZXIuXG4gICAgICovXG4gICAgcmVhZG9ubHkgZGVzY3JpcHRpb24/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBkcGlHcm91cElkczogVGhlIElEIG9mIHRoZSBhcHBsaWNhdGlvbiBncm91cC5cbiAgICAgKiBZb3UgY2FuIGVudGVyIGF0IG1vc3QgMTAwIGFwcGxpY2F0aW9uIGdyb3VwIElEcyBhdCBhIHRpbWUuXG4gICAgICogWW91IGNhbiBjYWxsIHRoZSBMaXN0RHBpR3JvdXBzIG9wZXJhdGlvbiB0byBxdWVyeSBhcHBsaWNhdGlvbiBncm91cCBJRHMgYW5kIGluZm9ybWF0aW9uIGFib3V0IHRoZSBhcHBsaWNhdGlvbnMuXG4gICAgICovXG4gICAgcmVhZG9ubHkgZHBpR3JvdXBJZHM/OiBBcnJheTxzdHJpbmcgfCByb3MuSVJlc29sdmFibGU+IHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgZHBpU2lnbmF0dXJlSWRzOiBUaGUgSUQgb2YgdGhlIGFwcGxpY2F0aW9uLlxuICAgICAqIFlvdSBjYW4gZW50ZXIgYXQgbW9zdCAxMDAgYXBwbGljYXRpb24gSURzIGF0IGEgdGltZS5cbiAgICAgKiBZb3UgY2FuIGNhbGwgdGhlIExpc3REcGlTaWduYXR1cmVzIG9wZXJhdGlvbiB0byBxdWVyeSBhcHBsaWNhdGlvbiBJRHMgYW5kIGluZm9ybWF0aW9uIGFib3V0IHRoZSBhcHBsaWNhdGlvbnMuXG4gICAgICovXG4gICAgcmVhZG9ubHkgZHBpU2lnbmF0dXJlSWRzPzogQXJyYXk8c3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlPiB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGVuZFRpbWU6IFRoZSB0aW1lIHdoZW4gdGhlIHRyYWZmaWMgY2xhc3NpZmljYXRpb24gcnVsZSBiZWNvbWVzIGludmFsaWQuXG4gICAgICogU3BlY2lmeSB0aGUgdGltZSBpbiB0aGUgSVNPIDg2MDEgc3RhbmRhcmQgaW4gdGhlIFlZWVktTU0tRERUaGg6bW06c3MrMDgwMCBmb3JtYXQuXG4gICAgICogVGhlIHRpbWUgbXVzdCBiZSBpbiBVVEMrOC5cbiAgICAgKi9cbiAgICByZWFkb25seSBlbmRUaW1lPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgbmFtZTogVGhlIG5hbWUgb2YgdGhlIHRyYWZmaWMgY2xhc3NpZmljYXRpb24gcnVsZS5cbiAgICAgKiBUaGUgbmFtZSBtdXN0IGJlIDIgdG8gMTAwIGNoYXJhY3RlcnMgaW4gbGVuZ3RoLCBhbmQgY2FuIGNvbnRhaW4gZGlnaXRzLCB1bmRlcnNjb3Jlc1xuICAgICAqIChfKSwgYW5kIGh5cGhlbnMgKC0pLiBJdCBtdXN0IHN0YXJ0IHdpdGggYSBsZXR0ZXIuXG4gICAgICovXG4gICAgcmVhZG9ubHkgbmFtZT86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHN0YXJ0VGltZTogVGhlIHRpbWUgd2hlbiB0aGUgdHJhZmZpYyBjbGFzc2lmaWNhdGlvbiBydWxlIHRha2VzIGVmZmVjdC5cbiAgICAgKiBTcGVjaWZ5IHRoZSB0aW1lIGluIHRoZSBJU08gODYwMSBzdGFuZGFyZCBpbiB0aGUgWVlZWS1NTS1ERFRoaDptbTpzcyswODAwIGZvcm1hdC5cbiAgICAgKiBUaGUgdGltZSBtdXN0IGJlIGluIFVUQys4LlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHN0YXJ0VGltZT86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcbn1cblxuLyoqXG4gKiBBIFJPUyByZXNvdXJjZSB0eXBlOiAgYEFMSVlVTjo6U0FHOjpRb3NQb2xpY3lgXG4gKi9cbmV4cG9ydCBjbGFzcyBRb3NQb2xpY3kgZXh0ZW5kcyByb3MuUmVzb3VyY2Uge1xuXG4gICAgLyoqXG4gICAgICogQSBmYWN0b3J5IG1ldGhvZCB0aGF0IGNyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgdGhpcyBjbGFzcyBmcm9tIGFuIG9iamVjdFxuICAgICAqIGNvbnRhaW5pbmcgdGhlIHByb3BlcnRpZXMgb2YgdGhpcyBST1MgcmVzb3VyY2UsIHdoaWNoIHdpbGwgYmUgYXNzaWduZWQgdG8gUk9TIHJlc291cmNlLlxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIFFvc1BvbGljeUlkOiBUaGUgSUQgb2YgdGhlIHRyYWZmaWMgY2xhc3NpZmljYXRpb24gcnVsZS5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0clFvc1BvbGljeUlkOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgYEFMSVlVTjo6U0FHOjpRb3NQb2xpY3lgLlxuICAgICAqXG4gICAgICogUGFyYW0gc2NvcGUgLSBzY29wZSBpbiB3aGljaCB0aGlzIHJlc291cmNlIGlzIGRlZmluZWRcbiAgICAgKiBQYXJhbSBpZCAgICAtIHNjb3BlZCBpZCBvZiB0aGUgcmVzb3VyY2VcbiAgICAgKiBQYXJhbSBwcm9wcyAtIHJlc291cmNlIHByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihzY29wZTogcm9zLkNvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IFFvc1BvbGljeVByb3BzLCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDpib29sZWFuID0gdHJ1ZSkge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQpO1xuXG4gICAgICAgIGNvbnN0IHJvc1Fvc1BvbGljeSA9IG5ldyBSb3NRb3NQb2xpY3kodGhpcywgaWQsICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogcHJvcHMuZGVzY3JpcHRpb24sXG4gICAgICAgICAgICBlbmRUaW1lOiBwcm9wcy5lbmRUaW1lLFxuICAgICAgICAgICAgc291cmNlUG9ydFJhbmdlOiBwcm9wcy5zb3VyY2VQb3J0UmFuZ2UsXG4gICAgICAgICAgICBzb3VyY2VDaWRyOiBwcm9wcy5zb3VyY2VDaWRyLFxuICAgICAgICAgICAgcHJpb3JpdHk6IHByb3BzLnByaW9yaXR5LFxuICAgICAgICAgICAgc3RhcnRUaW1lOiBwcm9wcy5zdGFydFRpbWUsXG4gICAgICAgICAgICBkZXN0UG9ydFJhbmdlOiBwcm9wcy5kZXN0UG9ydFJhbmdlLFxuICAgICAgICAgICAgZHBpR3JvdXBJZHM6IHByb3BzLmRwaUdyb3VwSWRzLFxuICAgICAgICAgICAgbmFtZTogcHJvcHMubmFtZSxcbiAgICAgICAgICAgIGRlc3RDaWRyOiBwcm9wcy5kZXN0Q2lkcixcbiAgICAgICAgICAgIGRwaVNpZ25hdHVyZUlkczogcHJvcHMuZHBpU2lnbmF0dXJlSWRzLFxuICAgICAgICAgICAgcW9zSWQ6IHByb3BzLnFvc0lkLFxuICAgICAgICAgICAgaXBQcm90b2NvbDogcHJvcHMuaXBQcm90b2NvbCxcbiAgICAgICAgfSwgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgJiYgdGhpcy5zdGFjay5lbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCk7XG4gICAgICAgIHRoaXMucmVzb3VyY2UgPSByb3NRb3NQb2xpY3k7XG4gICAgICAgIHRoaXMuYXR0clFvc1BvbGljeUlkID0gcm9zUW9zUG9saWN5LmF0dHJRb3NQb2xpY3lJZDtcbiAgICB9XG59XG4iXX0=