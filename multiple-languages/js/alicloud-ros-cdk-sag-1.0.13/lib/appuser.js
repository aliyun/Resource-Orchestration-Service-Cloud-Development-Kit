"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppUser = exports.AppUserProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const sag_generated_1 = require("./sag.generated");
Object.defineProperty(exports, "AppUserProperty", { enumerable: true, get: function () { return sag_generated_1.RosAppUser; } });
/**
 * A ROS resource type:  `ALIYUN::SAG::AppUser`
 */
class AppUser extends ros.Resource {
    /**
     * Create a new `ALIYUN::SAG::AppUser`.
     *
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosAppUser = new sag_generated_1.RosAppUser(this, id, {
            userName: props.userName,
            userMail: props.userMail,
            bandwidth: props.bandwidth,
            smartAgId: props.smartAgId,
            clientIp: props.clientIp,
            disable: props.disable,
            password: props.password,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosAppUser;
        this.attrSmartAgId = rosAppUser.attrSmartAgId;
        this.attrUserName = rosAppUser.attrUserName;
    }
}
exports.AppUser = AppUser;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwdXNlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImFwcHVzZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsOENBQThDO0FBQzlDLG1EQUE2QztBQUV0QixnR0FGZCwwQkFBVSxPQUVtQjtBQW9EdEM7O0dBRUc7QUFDSCxNQUFhLE9BQVEsU0FBUSxHQUFHLENBQUMsUUFBUTtJQWlCckM7Ozs7OztPQU1HO0lBQ0gsWUFBWSxLQUFvQixFQUFFLEVBQVUsRUFBRSxLQUFtQixFQUFFLG1DQUEyQyxJQUFJO1FBQzlHLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFakIsTUFBTSxVQUFVLEdBQUcsSUFBSSwwQkFBVSxDQUFDLElBQUksRUFBRSxFQUFFLEVBQUc7WUFDekMsUUFBUSxFQUFFLEtBQUssQ0FBQyxRQUFRO1lBQ3hCLFFBQVEsRUFBRSxLQUFLLENBQUMsUUFBUTtZQUN4QixTQUFTLEVBQUUsS0FBSyxDQUFDLFNBQVM7WUFDMUIsU0FBUyxFQUFFLEtBQUssQ0FBQyxTQUFTO1lBQzFCLFFBQVEsRUFBRSxLQUFLLENBQUMsUUFBUTtZQUN4QixPQUFPLEVBQUUsS0FBSyxDQUFDLE9BQU87WUFDdEIsUUFBUSxFQUFFLEtBQUssQ0FBQyxRQUFRO1NBQzNCLEVBQUUsZ0NBQWdDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO1FBQ3BGLElBQUksQ0FBQyxRQUFRLEdBQUcsVUFBVSxDQUFDO1FBQzNCLElBQUksQ0FBQyxhQUFhLEdBQUcsVUFBVSxDQUFDLGFBQWEsQ0FBQztRQUM5QyxJQUFJLENBQUMsWUFBWSxHQUFHLFVBQVUsQ0FBQyxZQUFZLENBQUM7SUFDaEQsQ0FBQztDQUNKO0FBeENELDBCQXdDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHJvcyBmcm9tICdAYWxpY2xvdWQvcm9zLWNkay1jb3JlJztcbmltcG9ydCB7IFJvc0FwcFVzZXIgfSBmcm9tICcuL3NhZy5nZW5lcmF0ZWQnO1xuLy8gR2VuZXJhdGVkIGZyb20gdGhlIEFsaUNsb3VkIFJPUyBSZXNvdXJjZSBTcGVjaWZpY2F0aW9uXG5leHBvcnQgeyBSb3NBcHBVc2VyIGFzIEFwcFVzZXJQcm9wZXJ0eSB9O1xuXG4vKipcbiAqIFByb3BlcnRpZXMgZm9yIGRlZmluaW5nIGEgYEFMSVlVTjo6U0FHOjpBcHBVc2VyYFxuICovXG5leHBvcnQgaW50ZXJmYWNlIEFwcFVzZXJQcm9wcyB7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBiYW5kd2lkdGg6IFRoZSBiYW5kd2lkdGguIFVuaXQ6IEtiaXQvcy4gTWF4aW11bSBiYW5kd2lkdGg6IDIsMDAwIEtiaXQvcy5cbiAgICAgKi9cbiAgICByZWFkb25seSBiYW5kd2lkdGg6IG51bWJlciB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHNtYXJ0QWdJZDogVGhlIElEIG9mIHRoZSBTQUcgQVBQIGluc3RhbmNlLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHNtYXJ0QWdJZDogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgdXNlck1haWw6IFRoZSBlbWFpbCBhZGRyZXNzIG9mIHRoZSB1c2VyLiBUaGUgdXNlcm5hbWUgYW5kIHBhc3N3b3JkIGFyZSBzZW50IHRvIHRoZSBzcGVjaWZpZWRcbiAgICAgKiBlbWFpbCBhZGRyZXNzLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHVzZXJNYWlsOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBjbGllbnRJcDogQWZ0ZXIgdGhpcyBmZWF0dXJlIGlzIGVuYWJsZWQsIHlvdSBtdXN0IHNwZWNpZnkgdGhlIElQIGFkZHJlc3Mgb2YgU0FHIEFQUC4gSW4gdGhpc1xuICAgICAqIGNhc2UsIFNBRyBBUFAgY29ubmVjdHMgdG8gQWxpYmFiYSBDbG91ZCB0aHJvdWdoIHRoZSBzcGVjaWZpZWQgSVAgYWRkcmVzcy5cbiAgICAgKiBOb3RlIFRoZSBJUCBhZGRyZXNzIG11c3QgZmFsbCBpbnRvIHRoZSBDSURSIGJsb2NrIG9mIHRoZSBwcml2YXRlIG5ldHdvcmsuXG4gICAgICogQWZ0ZXIgdGhpcyBmZWF0dXJlIGlzIGRpc2FibGVkLCBhbiBJUCBhZGRyZXNzIHdpdGhpbiB0aGUgQ0lEUiBibG9jayBvZiB0aGUgcHJpdmF0ZVxuICAgICAqIG5ldHdvcmsgaXMgYXNzaWduZWQgdG8gU0FHIEFQUC4gRWFjaCBjb25uZWN0aW9uIHRvIEFsaWJhYmEgQ2xvdWQgdXNlcyBhIGRpZmZlcmVudFxuICAgICAqIElQIGFkZHJlc3MuXG4gICAgICovXG4gICAgcmVhZG9ubHkgY2xpZW50SXA/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBkaXNhYmxlOiBEaXNhYmxlIHVzZXIgb3Igbm90LlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGRpc2FibGU/OiBib29sZWFuIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgcGFzc3dvcmQ6IFRoZSBwYXNzd29yZCB1c2VkIHRvIGxvZyBvbiB0byBTQUcgQVBQLlxuICAgICAqIEZvciBhIGNsaWVudCBhY2NvdW50LCBpZiB5b3Ugc3BlY2lmeSB0aGUgdXNlcm5hbWUsIHlvdSBtdXN0IGFsc28gc3BlY2lmeSB0aGUgcGFzc3dvcmQuXG4gICAgICovXG4gICAgcmVhZG9ubHkgcGFzc3dvcmQ/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSB1c2VyTmFtZTogVGhlIHVzZXJuYW1lIG9mIHRoZSBjbGllbnQgYWNjb3VudC4gVXNlcm5hbWVzIG9mIGNsaWVudCBhY2NvdW50cyBhZGRlZCB0byB0aGUgc2FtZVxuICAgICAqIFNBRyBBUFAgaW5zdGFuY2UgbXVzdCBiZSB1bmlxdWUuXG4gICAgICogRm9yIGEgY2xpZW50IGFjY291bnQsIGlmIHlvdSBzcGVjaWZ5IHRoZSB1c2VybmFtZSwgeW91IG11c3QgYWxzbyBzcGVjaWZ5IHRoZSBwYXNzd29yZC5cbiAgICAgKi9cbiAgICByZWFkb25seSB1c2VyTmFtZT86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcbn1cblxuLyoqXG4gKiBBIFJPUyByZXNvdXJjZSB0eXBlOiAgYEFMSVlVTjo6U0FHOjpBcHBVc2VyYFxuICovXG5leHBvcnQgY2xhc3MgQXBwVXNlciBleHRlbmRzIHJvcy5SZXNvdXJjZSB7XG5cbiAgICAvKipcbiAgICAgKiBBIGZhY3RvcnkgbWV0aG9kIHRoYXQgY3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzIGZyb20gYW4gb2JqZWN0XG4gICAgICogY29udGFpbmluZyB0aGUgcHJvcGVydGllcyBvZiB0aGlzIFJPUyByZXNvdXJjZSwgd2hpY2ggd2lsbCBiZSBhc3NpZ25lZCB0byBST1MgcmVzb3VyY2UuXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgU21hcnRBR0lkOiBUaGUgSUQgb2YgdGhlIFNBRyBBUFAgaW5zdGFuY2UuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJTbWFydEFnSWQ6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBVc2VyTmFtZTogPGhlYXQuZW5naW5lLnByb3BlcnRpZXMuU2NoZW1hIG9iamVjdCBhdCAweDdmNDhmMDI4YTI5MD5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0clVzZXJOYW1lOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgYEFMSVlVTjo6U0FHOjpBcHBVc2VyYC5cbiAgICAgKlxuICAgICAqIFBhcmFtIHNjb3BlIC0gc2NvcGUgaW4gd2hpY2ggdGhpcyByZXNvdXJjZSBpcyBkZWZpbmVkXG4gICAgICogUGFyYW0gaWQgICAgLSBzY29wZWQgaWQgb2YgdGhlIHJlc291cmNlXG4gICAgICogUGFyYW0gcHJvcHMgLSByZXNvdXJjZSBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IHJvcy5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBBcHBVc2VyUHJvcHMsIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OmJvb2xlYW4gPSB0cnVlKSB7XG4gICAgICAgIHN1cGVyKHNjb3BlLCBpZCk7XG5cbiAgICAgICAgY29uc3Qgcm9zQXBwVXNlciA9IG5ldyBSb3NBcHBVc2VyKHRoaXMsIGlkLCAge1xuICAgICAgICAgICAgdXNlck5hbWU6IHByb3BzLnVzZXJOYW1lLFxuICAgICAgICAgICAgdXNlck1haWw6IHByb3BzLnVzZXJNYWlsLFxuICAgICAgICAgICAgYmFuZHdpZHRoOiBwcm9wcy5iYW5kd2lkdGgsXG4gICAgICAgICAgICBzbWFydEFnSWQ6IHByb3BzLnNtYXJ0QWdJZCxcbiAgICAgICAgICAgIGNsaWVudElwOiBwcm9wcy5jbGllbnRJcCxcbiAgICAgICAgICAgIGRpc2FibGU6IHByb3BzLmRpc2FibGUsXG4gICAgICAgICAgICBwYXNzd29yZDogcHJvcHMucGFzc3dvcmQsXG4gICAgICAgIH0sIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ICYmIHRoaXMuc3RhY2suZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQpO1xuICAgICAgICB0aGlzLnJlc291cmNlID0gcm9zQXBwVXNlcjtcbiAgICAgICAgdGhpcy5hdHRyU21hcnRBZ0lkID0gcm9zQXBwVXNlci5hdHRyU21hcnRBZ0lkO1xuICAgICAgICB0aGlzLmF0dHJVc2VyTmFtZSA9IHJvc0FwcFVzZXIuYXR0clVzZXJOYW1lO1xuICAgIH1cbn1cbiJdfQ==