"use strict";
// Generated from the AliCloud ROS Resource Specification
Object.defineProperty(exports, "__esModule", { value: true });
exports.RosStorage = exports.RosMessageCallback = exports.RosEditingProject = void 0;
const ros = require("@alicloud/ros-cdk-core");
/**
 * Determine whether the given properties match those of a `RosEditingProjectProps`
 *
 * @param properties - the TypeScript properties of a `RosEditingProjectProps`
 *
 * @returns the result of the validation.
 */
function RosEditingProjectPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('editingProjectName', ros.validateString)(properties.editingProjectName));
    errors.collect(ros.propertyValidator('timeline', ros.validateString)(properties.timeline));
    errors.collect(ros.propertyValidator('title', ros.requiredValidator)(properties.title));
    errors.collect(ros.propertyValidator('title', ros.validateString)(properties.title));
    return errors.wrap('supplied properties not correct for "RosEditingProjectProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::VOD::EditingProject` resource
 *
 * @param properties - the TypeScript properties of a `RosEditingProjectProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::VOD::EditingProject` resource.
 */
// @ts-ignore TS6133
function rosEditingProjectPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosEditingProjectPropsValidator(properties).assertSuccess();
    }
    return {
        'Title': ros.stringToRosTemplate(properties.title),
        'EditingProjectName': ros.stringToRosTemplate(properties.editingProjectName),
        'Timeline': ros.stringToRosTemplate(properties.timeline),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::VOD::EditingProject`, which is used to create an online editing project.
 * @Note This class does not contain additional functions, so it is recommended to use the `EditingProject` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-vod-editingproject
 */
class RosEditingProject extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosEditingProject.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrCreateTime = this.getAtt('CreateTime');
        this.attrEditingProjectId = this.getAtt('EditingProjectId');
        this.attrEditingProjectName = this.getAtt('EditingProjectName');
        this.attrModifiedTime = this.getAtt('ModifiedTime');
        this.attrTimeline = this.getAtt('Timeline');
        this.attrTitle = this.getAtt('Title');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.title = props.title;
        this.editingProjectName = props.editingProjectName;
        this.timeline = props.timeline;
    }
    get rosProperties() {
        return {
            title: this.title,
            editingProjectName: this.editingProjectName,
            timeline: this.timeline,
        };
    }
    renderProperties(props) {
        return rosEditingProjectPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosEditingProject = RosEditingProject;
/**
 * The resource type name for this resource class.
 */
RosEditingProject.ROS_RESOURCE_TYPE_NAME = "ALIYUN::VOD::EditingProject";
/**
 * Determine whether the given properties match those of a `RosMessageCallbackProps`
 *
 * @param properties - the TypeScript properties of a `RosMessageCallbackProps`
 *
 * @returns the result of the validation.
 */
function RosMessageCallbackPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('mnsEndpoint', ros.validateString)(properties.mnsEndpoint));
    errors.collect(ros.propertyValidator('callbackUrl', ros.validateString)(properties.callbackUrl));
    errors.collect(ros.propertyValidator('authSwitch', ros.validateString)(properties.authSwitch));
    errors.collect(ros.propertyValidator('appId', ros.validateString)(properties.appId));
    errors.collect(ros.propertyValidator('callbackType', ros.requiredValidator)(properties.callbackType));
    errors.collect(ros.propertyValidator('callbackType', ros.validateString)(properties.callbackType));
    errors.collect(ros.propertyValidator('eventTypeList', ros.validateString)(properties.eventTypeList));
    errors.collect(ros.propertyValidator('mnsQueueName', ros.validateString)(properties.mnsQueueName));
    errors.collect(ros.propertyValidator('authKey', ros.validateString)(properties.authKey));
    return errors.wrap('supplied properties not correct for "RosMessageCallbackProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::VOD::MessageCallback` resource
 *
 * @param properties - the TypeScript properties of a `RosMessageCallbackProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::VOD::MessageCallback` resource.
 */
// @ts-ignore TS6133
function rosMessageCallbackPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosMessageCallbackPropsValidator(properties).assertSuccess();
    }
    return {
        'CallbackType': ros.stringToRosTemplate(properties.callbackType),
        'AppId': ros.stringToRosTemplate(properties.appId),
        'AuthKey': ros.stringToRosTemplate(properties.authKey),
        'AuthSwitch': ros.stringToRosTemplate(properties.authSwitch),
        'CallbackUrl': ros.stringToRosTemplate(properties.callbackUrl),
        'EventTypeList': ros.stringToRosTemplate(properties.eventTypeList),
        'MnsEndpoint': ros.stringToRosTemplate(properties.mnsEndpoint),
        'MnsQueueName': ros.stringToRosTemplate(properties.mnsQueueName),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::VOD::MessageCallback`, which is used to configure the callback method, callback URL, and event types for an event notification.
 * @Note This class does not contain additional functions, so it is recommended to use the `MessageCallback` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-vod-messagecallback
 */
class RosMessageCallback extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosMessageCallback.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrAppId = this.getAtt('AppId');
        this.attrAuthKey = this.getAtt('AuthKey');
        this.attrAuthSwitch = this.getAtt('AuthSwitch');
        this.attrCallbackType = this.getAtt('CallbackType');
        this.attrCallbackUrl = this.getAtt('CallbackUrl');
        this.attrEventTypeList = this.getAtt('EventTypeList');
        this.attrMnsEndpoint = this.getAtt('MnsEndpoint');
        this.attrMnsQueueName = this.getAtt('MnsQueueName');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.callbackType = props.callbackType;
        this.appId = props.appId;
        this.authKey = props.authKey;
        this.authSwitch = props.authSwitch;
        this.callbackUrl = props.callbackUrl;
        this.eventTypeList = props.eventTypeList;
        this.mnsEndpoint = props.mnsEndpoint;
        this.mnsQueueName = props.mnsQueueName;
    }
    get rosProperties() {
        return {
            callbackType: this.callbackType,
            appId: this.appId,
            authKey: this.authKey,
            authSwitch: this.authSwitch,
            callbackUrl: this.callbackUrl,
            eventTypeList: this.eventTypeList,
            mnsEndpoint: this.mnsEndpoint,
            mnsQueueName: this.mnsQueueName,
        };
    }
    renderProperties(props) {
        return rosMessageCallbackPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosMessageCallback = RosMessageCallback;
/**
 * The resource type name for this resource class.
 */
RosMessageCallback.ROS_RESOURCE_TYPE_NAME = "ALIYUN::VOD::MessageCallback";
/**
 * Determine whether the given properties match those of a `RosStorageProps`
 *
 * @param properties - the TypeScript properties of a `RosStorageProps`
 *
 * @returns the result of the validation.
 */
function RosStoragePropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('storageType', ros.requiredValidator)(properties.storageType));
    errors.collect(ros.propertyValidator('storageType', ros.validateString)(properties.storageType));
    errors.collect(ros.propertyValidator('defaultUpload', ros.validateBoolean)(properties.defaultUpload));
    errors.collect(ros.propertyValidator('storageLocation', ros.requiredValidator)(properties.storageLocation));
    errors.collect(ros.propertyValidator('storageLocation', ros.validateString)(properties.storageLocation));
    return errors.wrap('supplied properties not correct for "RosStorageProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::VOD::Storage` resource
 *
 * @param properties - the TypeScript properties of a `RosStorageProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::VOD::Storage` resource.
 */
// @ts-ignore TS6133
function rosStoragePropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosStoragePropsValidator(properties).assertSuccess();
    }
    return {
        'StorageLocation': ros.stringToRosTemplate(properties.storageLocation),
        'StorageType': ros.stringToRosTemplate(properties.storageType),
        'DefaultUpload': ros.booleanToRosTemplate(properties.defaultUpload),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::VOD::Storage`, which is used to add an Object Storage Service (OSS) bucket in ApsaraVideo VOD (VOD).
 * @Note This class does not contain additional functions, so it is recommended to use the `Storage` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-vod-storage
 */
class RosStorage extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosStorage.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrCreateTime = this.getAtt('CreateTime');
        this.attrDefaultUpload = this.getAtt('DefaultUpload');
        this.attrGmtModified = this.getAtt('GmtModified');
        this.attrGroupId = this.getAtt('GroupId');
        this.attrResourceGroupId = this.getAtt('ResourceGroupId');
        this.attrStorageAcl = this.getAtt('StorageAcl');
        this.attrStorageLocation = this.getAtt('StorageLocation');
        this.attrStorageUsage = this.getAtt('StorageUsage');
        this.attrType = this.getAtt('Type');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.storageLocation = props.storageLocation;
        this.storageType = props.storageType;
        this.defaultUpload = props.defaultUpload;
    }
    get rosProperties() {
        return {
            storageLocation: this.storageLocation,
            storageType: this.storageType,
            defaultUpload: this.defaultUpload,
        };
    }
    renderProperties(props) {
        return rosStoragePropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosStorage = RosStorage;
/**
 * The resource type name for this resource class.
 */
RosStorage.ROS_RESOURCE_TYPE_NAME = "ALIYUN::VOD::Storage";
//# sourceMappingURL=data:application/json;base64,