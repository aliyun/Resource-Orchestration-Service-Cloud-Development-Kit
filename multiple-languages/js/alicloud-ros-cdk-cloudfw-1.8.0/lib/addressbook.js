"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AddressBook = exports.AddressBookProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const cloudfw_generated_1 = require("./cloudfw.generated");
Object.defineProperty(exports, "AddressBookProperty", { enumerable: true, get: function () { return cloudfw_generated_1.RosAddressBook; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::CLOUDFW::AddressBook`, which is used to create an address book that is used for access control. Address books include IP address books, Elastic Compute Service (ECS) tag-based address books, port address books, and domain address books.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosAddressBook`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-cloudfw-addressbook
 */
class AddressBook extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosAddressBook = new cloudfw_generated_1.RosAddressBook(this, id, {
            groupName: props.groupName,
            description: props.description,
            tagRelation: props.tagRelation,
            groupType: props.groupType,
            tagList: props.tagList,
            regionId: props.regionId === undefined || props.regionId === null ? 'cn-hangzhou' : props.regionId,
            autoAddTagEcs: props.autoAddTagEcs === undefined || props.autoAddTagEcs === null ? false : props.autoAddTagEcs,
            addressList: props.addressList,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosAddressBook;
        this.attrGroupUuid = rosAddressBook.attrGroupUuid;
    }
}
exports.AddressBook = AddressBook;
//# sourceMappingURL=data:application/json;base64,