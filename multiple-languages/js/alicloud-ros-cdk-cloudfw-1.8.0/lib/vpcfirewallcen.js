"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VpcFirewallCen = exports.VpcFirewallCenProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const cloudfw_generated_1 = require("./cloudfw.generated");
Object.defineProperty(exports, "VpcFirewallCenProperty", { enumerable: true, get: function () { return cloudfw_generated_1.RosVpcFirewallCen; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::CLOUDFW::VpcFirewallCen`, which is used to create a virtual private cloud (VPC) firewall.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosVpcFirewallCen`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-cloudfw-vpcfirewallcen
 */
class VpcFirewallCen extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosVpcFirewallCen = new cloudfw_generated_1.RosVpcFirewallCen(this, id, {
            memberUid: props.memberUid,
            networkInstanceId: props.networkInstanceId,
            firewallVSwitchCidrBlock: props.firewallVSwitchCidrBlock,
            vSwitchId: props.vSwitchId,
            cenId: props.cenId,
            firewallVpcZoneId: props.firewallVpcZoneId,
            firewallVpcCidrBlock: props.firewallVpcCidrBlock,
            vpcRegion: props.vpcRegion,
            vpcFirewallName: props.vpcFirewallName,
            firewallSwitch: props.firewallSwitch === undefined || props.firewallSwitch === null ? 'open' : props.firewallSwitch,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosVpcFirewallCen;
        this.attrVpcFirewallId = rosVpcFirewallCen.attrVpcFirewallId;
    }
}
exports.VpcFirewallCen = VpcFirewallCen;
//# sourceMappingURL=data:application/json;base64,