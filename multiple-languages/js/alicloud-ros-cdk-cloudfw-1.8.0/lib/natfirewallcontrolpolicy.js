"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NatFirewallControlPolicy = exports.NatFirewallControlPolicyProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const cloudfw_generated_1 = require("./cloudfw.generated");
Object.defineProperty(exports, "NatFirewallControlPolicyProperty", { enumerable: true, get: function () { return cloudfw_generated_1.RosNatFirewallControlPolicy; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::CLOUDFW::NatFirewallControlPolicy`, which is used to add an access control policy for a NAT firewall.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosNatFirewallControlPolicy`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-cloudfw-natfirewallcontrolpolicy
 */
class NatFirewallControlPolicy extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosNatFirewallControlPolicy = new cloudfw_generated_1.RosNatFirewallControlPolicy(this, id, {
            destination: props.destination,
            description: props.description,
            endTime: props.endTime,
            ipVersion: props.ipVersion === undefined || props.ipVersion === null ? 4 : props.ipVersion,
            sourceType: props.sourceType,
            destPort: props.destPort,
            applicationNameList: props.applicationNameList,
            startTime: props.startTime,
            aclAction: props.aclAction,
            destinationType: props.destinationType,
            direction: props.direction === undefined || props.direction === null ? 'out' : props.direction,
            source: props.source,
            destPortType: props.destPortType,
            proto: props.proto,
            repeatEndTime: props.repeatEndTime,
            domainResolveType: props.domainResolveType,
            repeatDays: props.repeatDays,
            repeatType: props.repeatType,
            repeatStartTime: props.repeatStartTime,
            natGatewayId: props.natGatewayId,
            release: props.release,
            newOrder: props.newOrder,
            destPortGroup: props.destPortGroup,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosNatFirewallControlPolicy;
        this.attrAclUuid = rosNatFirewallControlPolicy.attrAclUuid;
        this.attrDirection = rosNatFirewallControlPolicy.attrDirection;
        this.attrNatGatewayId = rosNatFirewallControlPolicy.attrNatGatewayId;
    }
}
exports.NatFirewallControlPolicy = NatFirewallControlPolicy;
//# sourceMappingURL=data:application/json;base64,