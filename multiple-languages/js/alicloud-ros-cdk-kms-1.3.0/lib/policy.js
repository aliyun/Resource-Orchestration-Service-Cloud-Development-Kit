"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Policy = exports.PolicyProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const kms_generated_1 = require("./kms.generated");
Object.defineProperty(exports, "PolicyProperty", { enumerable: true, get: function () { return kms_generated_1.RosPolicy; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::KMS::Policy`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosPolicy`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-kms-policy
 */
class Policy extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosPolicy = new kms_generated_1.RosPolicy(this, id, {
            description: props.description,
            accessControlRules: props.accessControlRules,
            policyName: props.policyName,
            permissions: props.permissions,
            kmsInstanceId: props.kmsInstanceId,
            resources: props.resources,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosPolicy;
        this.attrAccessControlRules = rosPolicy.attrAccessControlRules;
        this.attrDescription = rosPolicy.attrDescription;
        this.attrKmsInstanceId = rosPolicy.attrKmsInstanceId;
        this.attrPermissions = rosPolicy.attrPermissions;
        this.attrPolicyName = rosPolicy.attrPolicyName;
        this.attrResources = rosPolicy.attrResources;
    }
}
exports.Policy = Policy;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9saWN5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicG9saWN5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDhDQUE4QztBQUM5QyxtREFBNEM7QUFFdEIsK0ZBRmIseUJBQVMsT0FFa0I7QUEyQ3BDOzs7O0dBSUc7QUFDSCxNQUFhLE1BQU8sU0FBUSxHQUFHLENBQUMsUUFBUTtJQW9DcEM7Ozs7T0FJRztJQUNILFlBQVksS0FBb0IsRUFBRSxFQUFVLEVBQUUsS0FBa0IsRUFBRSxtQ0FBMkMsSUFBSTtRQUM3RyxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ2pCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQ2IsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLGdDQUFnQyxHQUFHLGdDQUFnQyxDQUFDO1FBRXpFLE1BQU0sU0FBUyxHQUFHLElBQUkseUJBQVMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFHO1lBQ3ZDLFdBQVcsRUFBRSxLQUFLLENBQUMsV0FBVztZQUM5QixrQkFBa0IsRUFBRSxLQUFLLENBQUMsa0JBQWtCO1lBQzVDLFVBQVUsRUFBRSxLQUFLLENBQUMsVUFBVTtZQUM1QixXQUFXLEVBQUUsS0FBSyxDQUFDLFdBQVc7WUFDOUIsYUFBYSxFQUFFLEtBQUssQ0FBQyxhQUFhO1lBQ2xDLFNBQVMsRUFBRSxLQUFLLENBQUMsU0FBUztTQUM3QixFQUFFLGdDQUFnQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztRQUNwRixJQUFJLENBQUMsUUFBUSxHQUFHLFNBQVMsQ0FBQztRQUMxQixJQUFJLENBQUMsc0JBQXNCLEdBQUcsU0FBUyxDQUFDLHNCQUFzQixDQUFDO1FBQy9ELElBQUksQ0FBQyxlQUFlLEdBQUcsU0FBUyxDQUFDLGVBQWUsQ0FBQztRQUNqRCxJQUFJLENBQUMsaUJBQWlCLEdBQUcsU0FBUyxDQUFDLGlCQUFpQixDQUFDO1FBQ3JELElBQUksQ0FBQyxlQUFlLEdBQUcsU0FBUyxDQUFDLGVBQWUsQ0FBQztRQUNqRCxJQUFJLENBQUMsY0FBYyxHQUFHLFNBQVMsQ0FBQyxjQUFjLENBQUM7UUFDL0MsSUFBSSxDQUFDLGFBQWEsR0FBRyxTQUFTLENBQUMsYUFBYSxDQUFDO0lBQ2pELENBQUM7Q0FDSjtBQWhFRCx3QkFnRUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyByb3MgZnJvbSAnQGFsaWNsb3VkL3Jvcy1jZGstY29yZSc7XG5pbXBvcnQgeyBSb3NQb2xpY3kgfSBmcm9tICcuL2ttcy5nZW5lcmF0ZWQnO1xuLy8gR2VuZXJhdGVkIGZyb20gdGhlIEFsaUNsb3VkIFJPUyBSZXNvdXJjZSBTcGVjaWZpY2F0aW9uXG5leHBvcnQgeyBSb3NQb2xpY3kgYXMgUG9saWN5UHJvcGVydHkgfTtcblxuLyoqXG4gKiBQcm9wZXJ0aWVzIGZvciBkZWZpbmluZyBhIGBQb2xpY3lgLlxuICogU2VlIGh0dHBzOi8vd3d3LmFsaWJhYmFjbG91ZC5jb20vaGVscC9yb3MvZGV2ZWxvcGVyLXJlZmVyZW5jZS9hbGl5dW4ta21zLXBvbGljeVxuICovXG5leHBvcnQgaW50ZXJmYWNlIFBvbGljeVByb3BzIHtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGFjY2Vzc0NvbnRyb2xSdWxlczogTmV0d29yayBSdWxlcyBpbmZvLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGFjY2Vzc0NvbnRyb2xSdWxlczogUm9zUG9saWN5LkFjY2Vzc0NvbnRyb2xSdWxlc1Byb3BlcnR5IHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkga21zSW5zdGFuY2VJZDogVGhlIHNjb3BlIG9mIHRoZSBwZXJtaXNzaW9uIHBvbGljeS4gWW91IG5lZWQgdG8gc3BlY2lmeSB0aGUgS01TIGluc3RhbmNlIHRoYXQgeW91IHdhbnQgdG8gYWNjZXNzLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGttc0luc3RhbmNlSWQ6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHBlcm1pc3Npb25zOiBUaGUgb3BlcmF0aW9ucyB0aGF0IGNhbiBiZSBwZXJmb3JtZWQuIFZhbGlkIHZhbHVlczpcbiAgICAgKiBSYmFjUGVybWlzc2lvblxcL1RlbXBsYXRlXFwvQ3J5cHRvU2VydmljZUtleVVzZXI6IGFsbG93cyB5b3UgdG8gcGVyZm9ybSBjcnlwdG9ncmFwaGljIG9wZXJhdGlvbnMuXG4gICAgICogUmJhY1Blcm1pc3Npb25cXC9UZW1wbGF0ZVxcL0NyeXB0b1NlcnZpY2VTZWNyZXRVc2VyOiBhbGxvd3MgeW91IHRvIHBlcmZvcm0gc2VjcmV0LXJlbGF0ZWQgb3BlcmF0aW9ucy5cbiAgICAgKi9cbiAgICByZWFkb25seSBwZXJtaXNzaW9uczogQXJyYXk8c3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlPiB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHBvbGljeU5hbWU6IFRoZSBuYW1lIG9mIHRoZSBwZXJtaXNzaW9uIHBvbGljeS5cbiAgICAgKi9cbiAgICByZWFkb25seSBwb2xpY3lOYW1lOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSByZXNvdXJjZXM6IFRoZSBrZXkgYW5kIHNlY3JldCB0aGF0IGFyZSBhbGxvd2VkIHRvIGFjY2Vzcy4gU3VwcG9ydHMgYSBtYXhpbXVtIG9mIDMwIGtleSBhbmQgc2VjcmV0LlxuICAgICAqIEtleTogRW50ZXIgYSBrZXkgaW4gdGhlIGtleVxcLyR7S2V5SWR9IGZvcm1hdC4gVG8gYWxsb3cgYWNjZXNzIHRvIGFsbCBrZXlzIG9mIGEgS01TIGluc3RhbmNlLCBlbnRlciBrZXlcXC8qLiBcbiAgICAgKiBTZWNyZXQ6IEVudGVyIGEgc2VjcmV0IGluIHRoZSBzZWNyZXRcXC8ke1NlY3JldE5hbWV9IGZvcm1hdC4gVG8gYWxsb3cgYWNjZXNzIHRvIGFsbCBzZWNyZXRzIG9mIGEgS01TIGluc3RhbmNlLCBlbnRlciBzZWNyZXRcXC8qLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHJlc291cmNlczogQXJyYXk8c3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlPiB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGRlc2NyaXB0aW9uOiBUaGUgZGVzY3JpcHRpb24gb2YgdGhlIHBlcm1pc3Npb24gcG9saWN5LlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGRlc2NyaXB0aW9uPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xufVxuXG4vKipcbiAqIFRoaXMgY2xhc3MgZW5jYXBzdWxhdGVzIGFuZCBleHRlbmRzIHRoZSBST1MgcmVzb3VyY2UgdHlwZSBgQUxJWVVOOjpLTVM6OlBvbGljeWAuXG4gKiBATm90ZSBUaGlzIGNsYXNzIG1heSBoYXZlIHNvbWUgbmV3IGZ1bmN0aW9ucyB0byBmYWNpbGl0YXRlIGRldmVsb3BtZW50LCBzbyBpdCBpcyByZWNvbW1lbmRlZCB0byB1c2UgdGhpcyBjbGFzcyBpbnN0ZWFkIG9mIGBSb3NQb2xpY3lgZm9yIGEgbW9yZSBjb252ZW5pZW50IGRldmVsb3BtZW50IGV4cGVyaWVuY2UuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2FsaXl1bi1rbXMtcG9saWN5XG4gKi9cbmV4cG9ydCBjbGFzcyBQb2xpY3kgZXh0ZW5kcyByb3MuUmVzb3VyY2Uge1xuICAgIHByb3RlY3RlZCBzY29wZTogcm9zLkNvbnN0cnVjdDtcbiAgICBwcm90ZWN0ZWQgaWQ6IHN0cmluZztcbiAgICBwcm90ZWN0ZWQgcHJvcHM6IFBvbGljeVByb3BzO1xuICAgIHByb3RlY3RlZCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBBY2Nlc3NDb250cm9sUnVsZXM6IE5ldHdvcmsgUnVsZXMgaW5mby5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckFjY2Vzc0NvbnRyb2xSdWxlczogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIERlc2NyaXB0aW9uOiBEZXNjcmlwdGlvbi5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckRlc2NyaXB0aW9uOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgS21zSW5zdGFuY2VJZDogVGhlIHNjb3BlIG9mIHRoZSBwZXJtaXNzaW9uIHBvbGljeS4gWW91IG5lZWQgdG8gc3BlY2lmeSB0aGUgS01TIGluc3RhbmNlIHRoYXQgeW91IHdhbnQgdG8gYWNjZXNzLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyS21zSW5zdGFuY2VJZDogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIFBlcm1pc3Npb25zOiBSYmFjUGVybWlzc2lvbiBUZW1wbGF0ZSwgc3VwcG9ydCBSYmFjUGVybWlzc2lvbi9UZW1wbGF0ZS9DcnlwdG9TZXJ2aWNlS2V5VXNlciBhbmQgUmJhY1Blcm1pc3Npb24vVGVtcGxhdGUvQ3J5cHRvU2VydmljZVNlY3JldFVzZXIuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJQZXJtaXNzaW9uczogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIFBvbGljeU5hbWU6IFRoZSBuYW1lIG9mIHRoZSBwZXJtaXNzaW9uIHBvbGljeS5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0clBvbGljeU5hbWU6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBSZXNvdXJjZXM6IFJlc291cmNlcyB0aGF0IGFsbG93ZWQgYWNjZXNzIGJ5IHRoaXMgcG9saWN5LlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyUmVzb3VyY2VzOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQYXJhbSBzY29wZSAtIHNjb3BlIGluIHdoaWNoIHRoaXMgcmVzb3VyY2UgaXMgZGVmaW5lZFxuICAgICAqIFBhcmFtIGlkICAgIC0gc2NvcGVkIGlkIG9mIHRoZSByZXNvdXJjZVxuICAgICAqIFBhcmFtIHByb3BzIC0gcmVzb3VyY2UgcHJvcGVydGllc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiByb3MuQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogUG9saWN5UHJvcHMsIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OmJvb2xlYW4gPSB0cnVlKSB7XG4gICAgICAgIHN1cGVyKHNjb3BlLCBpZCk7XG4gICAgICAgIHRoaXMuc2NvcGUgPSBzY29wZTtcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xuICAgICAgICB0aGlzLnByb3BzID0gcHJvcHM7XG4gICAgICAgIHRoaXMuZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgPSBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDtcblxuICAgICAgICBjb25zdCByb3NQb2xpY3kgPSBuZXcgUm9zUG9saWN5KHRoaXMsIGlkLCAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IHByb3BzLmRlc2NyaXB0aW9uLFxuICAgICAgICAgICAgYWNjZXNzQ29udHJvbFJ1bGVzOiBwcm9wcy5hY2Nlc3NDb250cm9sUnVsZXMsXG4gICAgICAgICAgICBwb2xpY3lOYW1lOiBwcm9wcy5wb2xpY3lOYW1lLFxuICAgICAgICAgICAgcGVybWlzc2lvbnM6IHByb3BzLnBlcm1pc3Npb25zLFxuICAgICAgICAgICAga21zSW5zdGFuY2VJZDogcHJvcHMua21zSW5zdGFuY2VJZCxcbiAgICAgICAgICAgIHJlc291cmNlczogcHJvcHMucmVzb3VyY2VzLFxuICAgICAgICB9LCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCAmJiB0aGlzLnN0YWNrLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50KTtcbiAgICAgICAgdGhpcy5yZXNvdXJjZSA9IHJvc1BvbGljeTtcbiAgICAgICAgdGhpcy5hdHRyQWNjZXNzQ29udHJvbFJ1bGVzID0gcm9zUG9saWN5LmF0dHJBY2Nlc3NDb250cm9sUnVsZXM7XG4gICAgICAgIHRoaXMuYXR0ckRlc2NyaXB0aW9uID0gcm9zUG9saWN5LmF0dHJEZXNjcmlwdGlvbjtcbiAgICAgICAgdGhpcy5hdHRyS21zSW5zdGFuY2VJZCA9IHJvc1BvbGljeS5hdHRyS21zSW5zdGFuY2VJZDtcbiAgICAgICAgdGhpcy5hdHRyUGVybWlzc2lvbnMgPSByb3NQb2xpY3kuYXR0clBlcm1pc3Npb25zO1xuICAgICAgICB0aGlzLmF0dHJQb2xpY3lOYW1lID0gcm9zUG9saWN5LmF0dHJQb2xpY3lOYW1lO1xuICAgICAgICB0aGlzLmF0dHJSZXNvdXJjZXMgPSByb3NQb2xpY3kuYXR0clJlc291cmNlcztcbiAgICB9XG59XG4iXX0=