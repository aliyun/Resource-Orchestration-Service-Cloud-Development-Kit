"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PermissionPolicyToAccessConfigurationAddition = exports.PermissionPolicyToAccessConfigurationAdditionProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const cloudsso_generated_1 = require("./cloudsso.generated");
Object.defineProperty(exports, "PermissionPolicyToAccessConfigurationAdditionProperty", { enumerable: true, get: function () { return cloudsso_generated_1.RosPermissionPolicyToAccessConfigurationAddition; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::CloudSSO::PermissionPolicyToAccessConfigurationAddition`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosPermissionPolicyToAccessConfigurationAddition`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-cloudsso-permissionpolicytoaccessconfigurationaddition
 */
class PermissionPolicyToAccessConfigurationAddition extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosPermissionPolicyToAccessConfigurationAddition = new cloudsso_generated_1.RosPermissionPolicyToAccessConfigurationAddition(this, id, {
            inlinePolicyDocument: props.inlinePolicyDocument,
            directoryId: props.directoryId,
            permissionPolicyName: props.permissionPolicyName,
            permissionPolicyType: props.permissionPolicyType,
            accessConfigurationId: props.accessConfigurationId,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosPermissionPolicyToAccessConfigurationAddition;
    }
}
exports.PermissionPolicyToAccessConfigurationAddition = PermissionPolicyToAccessConfigurationAddition;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVybWlzc2lvbnBvbGljeXRvYWNjZXNzY29uZmlndXJhdGlvbmFkZGl0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicGVybWlzc2lvbnBvbGljeXRvYWNjZXNzY29uZmlndXJhdGlvbmFkZGl0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDhDQUE4QztBQUM5Qyw2REFBd0Y7QUFFM0Isc0lBRnBELHFFQUFnRCxPQUV5RDtBQXdDbEg7Ozs7R0FJRztBQUNILE1BQWEsNkNBQThDLFNBQVEsR0FBRyxDQUFDLFFBQVE7SUFNM0U7Ozs7T0FJRztJQUNILFlBQVksS0FBb0IsRUFBRSxFQUFVLEVBQUUsS0FBeUQsRUFBRSxtQ0FBMkMsSUFBSTtRQUNwSixLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ2pCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQ2IsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLGdDQUFnQyxHQUFHLGdDQUFnQyxDQUFDO1FBRXpFLE1BQU0sZ0RBQWdELEdBQUcsSUFBSSxxRUFBZ0QsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFHO1lBQ3JILG9CQUFvQixFQUFFLEtBQUssQ0FBQyxvQkFBb0I7WUFDaEQsV0FBVyxFQUFFLEtBQUssQ0FBQyxXQUFXO1lBQzlCLG9CQUFvQixFQUFFLEtBQUssQ0FBQyxvQkFBb0I7WUFDaEQsb0JBQW9CLEVBQUUsS0FBSyxDQUFDLG9CQUFvQjtZQUNoRCxxQkFBcUIsRUFBRSxLQUFLLENBQUMscUJBQXFCO1NBQ3JELEVBQUUsZ0NBQWdDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO1FBQ3BGLElBQUksQ0FBQyxRQUFRLEdBQUcsZ0RBQWdELENBQUM7SUFDckUsQ0FBQztDQUNKO0FBM0JELHNHQTJCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHJvcyBmcm9tICdAYWxpY2xvdWQvcm9zLWNkay1jb3JlJztcbmltcG9ydCB7IFJvc1Blcm1pc3Npb25Qb2xpY3lUb0FjY2Vzc0NvbmZpZ3VyYXRpb25BZGRpdGlvbiB9IGZyb20gJy4vY2xvdWRzc28uZ2VuZXJhdGVkJztcbi8vIEdlbmVyYXRlZCBmcm9tIHRoZSBBbGlDbG91ZCBST1MgUmVzb3VyY2UgU3BlY2lmaWNhdGlvblxuZXhwb3J0IHsgUm9zUGVybWlzc2lvblBvbGljeVRvQWNjZXNzQ29uZmlndXJhdGlvbkFkZGl0aW9uIGFzIFBlcm1pc3Npb25Qb2xpY3lUb0FjY2Vzc0NvbmZpZ3VyYXRpb25BZGRpdGlvblByb3BlcnR5IH07XG5cbi8qKlxuICogUHJvcGVydGllcyBmb3IgZGVmaW5pbmcgYSBgUGVybWlzc2lvblBvbGljeVRvQWNjZXNzQ29uZmlndXJhdGlvbkFkZGl0aW9uYC5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvYWxpeXVuLWNsb3Vkc3NvLXBlcm1pc3Npb25wb2xpY3l0b2FjY2Vzc2NvbmZpZ3VyYXRpb25hZGRpdGlvblxuICovXG5leHBvcnQgaW50ZXJmYWNlIFBlcm1pc3Npb25Qb2xpY3lUb0FjY2Vzc0NvbmZpZ3VyYXRpb25BZGRpdGlvblByb3BzIHtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGFjY2Vzc0NvbmZpZ3VyYXRpb25JZDogVGhlIElEIG9mIHRoZSBhY2Nlc3MgY29uZmlndXJhdGlvbi5cbiAgICAgKi9cbiAgICByZWFkb25seSBhY2Nlc3NDb25maWd1cmF0aW9uSWQ6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGRpcmVjdG9yeUlkOiBUaGUgSUQgb2YgdGhlIGRpcmVjdG9yeS5cbiAgICAgKi9cbiAgICByZWFkb25seSBkaXJlY3RvcnlJZDogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgcGVybWlzc2lvblBvbGljeU5hbWU6IFRoZSBuYW1lIG9mIHRoZSBwZXJtaXNzaW9uIHBvbGljeS5cbiAgICAgKiAtIElmIHlvdSBzZXQgUGVybWlzc2lvblBvbGljeVR5cGUgdG8gU3lzdGVtLCB5b3UgbXVzdCBzZXQgdGhpcyBwYXJhbWV0ZXIgdG8gdGhlIG5hbWUgb2YgdGhlIHN5c3RlbSBwb2xpY3kuIFlvdSBjYW4gb2J0YWluIHRoZSBuYW1lIG9mIHRoZSBzeXN0ZW0gcG9saWN5IGZyb20gUkFNLlxuICAgICAqIC0gSWYgeW91IHNldCBQZXJtaXNzaW9uUG9saWN5VHlwZSB0byBJbmxpbmUsIHlvdSBtdXN0IHNldCB0aGlzIHBhcmFtZXRlciB0byB0aGUgbmFtZSBvZiB0aGUgaW5saW5lIHBvbGljeS4gQSBjdXN0b20gdmFsdWUgaXMgc3VwcG9ydGVkLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHBlcm1pc3Npb25Qb2xpY3lOYW1lOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBwZXJtaXNzaW9uUG9saWN5VHlwZTogVGhlIHR5cGUgb2YgdGhlIHBlcm1pc3Npb24gcG9saWN5LiBWYWxpZCB2YWx1ZXM6XG4gICAgICogLSBTeXN0ZW06IHN5c3RlbSBwb2xpY3kuIFJlc291cmNlIEFjY2VzcyBNYW5hZ2VtZW50IChSQU0pIHN5c3RlbSBwb2xpY2llcyBhcmUgcmV1c2VkLlxuICAgICAqIC0gSW5saW5lOiBpbmxpbmUgcG9saWN5LiBJbmxpbmUgcG9saWNpZXMgYXJlIGNyZWF0ZWQgYmFzZWQgb24gdGhlIFJBTSBwb2xpY3kgc3ludGF4IGFuZCBzdHJ1Y3R1cmUuXG4gICAgICovXG4gICAgcmVhZG9ubHkgcGVybWlzc2lvblBvbGljeVR5cGU6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGlubGluZVBvbGljeURvY3VtZW50OiBUaGUgY29uZmlndXJhdGlvbnMgb2YgdGhlIGlubGluZSBwb2xpY3kuXG4gICAgICogVGhlIHZhbHVlIGNhbiBiZSB1cCB0byA0LDA5NiBjaGFyYWN0ZXJzIGluIGxlbmd0aC5cbiAgICAgKiBJZiB5b3Ugc2V0IFBlcm1pc3Npb25Qb2xpY3lUeXBlIHRvIElubGluZSwgeW91IG11c3Qgc3BlY2lmeSB0aGlzIHBhcmFtZXRlci5cbiAgICAgKi9cbiAgICByZWFkb25seSBpbmxpbmVQb2xpY3lEb2N1bWVudD86IHsgW2tleTogc3RyaW5nXTogKGFueSB8IHJvcy5JUmVzb2x2YWJsZSkgfSB8IHJvcy5JUmVzb2x2YWJsZTtcbn1cblxuLyoqXG4gKiBUaGlzIGNsYXNzIGVuY2Fwc3VsYXRlcyBhbmQgZXh0ZW5kcyB0aGUgUk9TIHJlc291cmNlIHR5cGUgYEFMSVlVTjo6Q2xvdWRTU086OlBlcm1pc3Npb25Qb2xpY3lUb0FjY2Vzc0NvbmZpZ3VyYXRpb25BZGRpdGlvbmAuXG4gKiBATm90ZSBUaGlzIGNsYXNzIG1heSBoYXZlIHNvbWUgbmV3IGZ1bmN0aW9ucyB0byBmYWNpbGl0YXRlIGRldmVsb3BtZW50LCBzbyBpdCBpcyByZWNvbW1lbmRlZCB0byB1c2UgdGhpcyBjbGFzcyBpbnN0ZWFkIG9mIGBSb3NQZXJtaXNzaW9uUG9saWN5VG9BY2Nlc3NDb25maWd1cmF0aW9uQWRkaXRpb25gZm9yIGEgbW9yZSBjb252ZW5pZW50IGRldmVsb3BtZW50IGV4cGVyaWVuY2UuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2FsaXl1bi1jbG91ZHNzby1wZXJtaXNzaW9ucG9saWN5dG9hY2Nlc3Njb25maWd1cmF0aW9uYWRkaXRpb25cbiAqL1xuZXhwb3J0IGNsYXNzIFBlcm1pc3Npb25Qb2xpY3lUb0FjY2Vzc0NvbmZpZ3VyYXRpb25BZGRpdGlvbiBleHRlbmRzIHJvcy5SZXNvdXJjZSB7XG4gICAgcHJvdGVjdGVkIHNjb3BlOiByb3MuQ29uc3RydWN0O1xuICAgIHByb3RlY3RlZCBpZDogc3RyaW5nO1xuICAgIHByb3RlY3RlZCBwcm9wczogUGVybWlzc2lvblBvbGljeVRvQWNjZXNzQ29uZmlndXJhdGlvbkFkZGl0aW9uUHJvcHM7XG4gICAgcHJvdGVjdGVkIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OiBib29sZWFuO1xuXG4gICAgLyoqXG4gICAgICogUGFyYW0gc2NvcGUgLSBzY29wZSBpbiB3aGljaCB0aGlzIHJlc291cmNlIGlzIGRlZmluZWRcbiAgICAgKiBQYXJhbSBpZCAgICAtIHNjb3BlZCBpZCBvZiB0aGUgcmVzb3VyY2VcbiAgICAgKiBQYXJhbSBwcm9wcyAtIHJlc291cmNlIHByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihzY29wZTogcm9zLkNvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IFBlcm1pc3Npb25Qb2xpY3lUb0FjY2Vzc0NvbmZpZ3VyYXRpb25BZGRpdGlvblByb3BzLCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDpib29sZWFuID0gdHJ1ZSkge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQpO1xuICAgICAgICB0aGlzLnNjb3BlID0gc2NvcGU7XG4gICAgICAgIHRoaXMuaWQgPSBpZDtcbiAgICAgICAgdGhpcy5wcm9wcyA9IHByb3BzO1xuICAgICAgICB0aGlzLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ID0gZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ7XG5cbiAgICAgICAgY29uc3Qgcm9zUGVybWlzc2lvblBvbGljeVRvQWNjZXNzQ29uZmlndXJhdGlvbkFkZGl0aW9uID0gbmV3IFJvc1Blcm1pc3Npb25Qb2xpY3lUb0FjY2Vzc0NvbmZpZ3VyYXRpb25BZGRpdGlvbih0aGlzLCBpZCwgIHtcbiAgICAgICAgICAgIGlubGluZVBvbGljeURvY3VtZW50OiBwcm9wcy5pbmxpbmVQb2xpY3lEb2N1bWVudCxcbiAgICAgICAgICAgIGRpcmVjdG9yeUlkOiBwcm9wcy5kaXJlY3RvcnlJZCxcbiAgICAgICAgICAgIHBlcm1pc3Npb25Qb2xpY3lOYW1lOiBwcm9wcy5wZXJtaXNzaW9uUG9saWN5TmFtZSxcbiAgICAgICAgICAgIHBlcm1pc3Npb25Qb2xpY3lUeXBlOiBwcm9wcy5wZXJtaXNzaW9uUG9saWN5VHlwZSxcbiAgICAgICAgICAgIGFjY2Vzc0NvbmZpZ3VyYXRpb25JZDogcHJvcHMuYWNjZXNzQ29uZmlndXJhdGlvbklkLFxuICAgICAgICB9LCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCAmJiB0aGlzLnN0YWNrLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50KTtcbiAgICAgICAgdGhpcy5yZXNvdXJjZSA9IHJvc1Blcm1pc3Npb25Qb2xpY3lUb0FjY2Vzc0NvbmZpZ3VyYXRpb25BZGRpdGlvbjtcbiAgICB9XG59XG4iXX0=