"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SAMLIdentityProvider = exports.SAMLIdentityProviderProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const cloudsso_generated_1 = require("./cloudsso.generated");
Object.defineProperty(exports, "SAMLIdentityProviderProperty", { enumerable: true, get: function () { return cloudsso_generated_1.RosSAMLIdentityProvider; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::CloudSSO::SAMLIdentityProvider`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosSAMLIdentityProvider`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-cloudsso-samlidentityprovider
 */
class SAMLIdentityProvider extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosSAMLIdentityProvider = new cloudsso_generated_1.RosSAMLIdentityProvider(this, id, {
            entityId: props.entityId,
            ssoStatus: props.ssoStatus,
            directoryId: props.directoryId,
            encodedMetadataDocument: props.encodedMetadataDocument,
            wantRequestSigned: props.wantRequestSigned,
            loginUrl: props.loginUrl,
            x509Certificate: props.x509Certificate,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosSAMLIdentityProvider;
    }
}
exports.SAMLIdentityProvider = SAMLIdentityProvider;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2FtbGlkZW50aXR5cHJvdmlkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJzYW1saWRlbnRpdHlwcm92aWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw4Q0FBOEM7QUFDOUMsNkRBQStEO0FBRTNCLDZHQUYzQiw0Q0FBdUIsT0FFZ0M7QUFpRGhFOzs7O0dBSUc7QUFDSCxNQUFhLG9CQUFxQixTQUFRLEdBQUcsQ0FBQyxRQUFRO0lBTWxEOzs7O09BSUc7SUFDSCxZQUFZLEtBQW9CLEVBQUUsRUFBVSxFQUFFLEtBQWdDLEVBQUUsbUNBQTJDLElBQUk7UUFDM0gsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNqQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUNiLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxnQ0FBZ0MsR0FBRyxnQ0FBZ0MsQ0FBQztRQUV6RSxNQUFNLHVCQUF1QixHQUFHLElBQUksNENBQXVCLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRztZQUNuRSxRQUFRLEVBQUUsS0FBSyxDQUFDLFFBQVE7WUFDeEIsU0FBUyxFQUFFLEtBQUssQ0FBQyxTQUFTO1lBQzFCLFdBQVcsRUFBRSxLQUFLLENBQUMsV0FBVztZQUM5Qix1QkFBdUIsRUFBRSxLQUFLLENBQUMsdUJBQXVCO1lBQ3RELGlCQUFpQixFQUFFLEtBQUssQ0FBQyxpQkFBaUI7WUFDMUMsUUFBUSxFQUFFLEtBQUssQ0FBQyxRQUFRO1lBQ3hCLGVBQWUsRUFBRSxLQUFLLENBQUMsZUFBZTtTQUN6QyxFQUFFLGdDQUFnQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztRQUNwRixJQUFJLENBQUMsUUFBUSxHQUFHLHVCQUF1QixDQUFDO0lBQzVDLENBQUM7Q0FDSjtBQTdCRCxvREE2QkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyByb3MgZnJvbSAnQGFsaWNsb3VkL3Jvcy1jZGstY29yZSc7XG5pbXBvcnQgeyBSb3NTQU1MSWRlbnRpdHlQcm92aWRlciB9IGZyb20gJy4vY2xvdWRzc28uZ2VuZXJhdGVkJztcbi8vIEdlbmVyYXRlZCBmcm9tIHRoZSBBbGlDbG91ZCBST1MgUmVzb3VyY2UgU3BlY2lmaWNhdGlvblxuZXhwb3J0IHsgUm9zU0FNTElkZW50aXR5UHJvdmlkZXIgYXMgU0FNTElkZW50aXR5UHJvdmlkZXJQcm9wZXJ0eSB9O1xuXG4vKipcbiAqIFByb3BlcnRpZXMgZm9yIGRlZmluaW5nIGEgYFNBTUxJZGVudGl0eVByb3ZpZGVyYC5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvYWxpeXVuLWNsb3Vkc3NvLXNhbWxpZGVudGl0eXByb3ZpZGVyXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgU0FNTElkZW50aXR5UHJvdmlkZXJQcm9wcyB7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBkaXJlY3RvcnlJZDogVGhlIElEIG9mIHRoZSBkaXJlY3RvcnkuXG4gICAgICovXG4gICAgcmVhZG9ubHkgZGlyZWN0b3J5SWQ6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGVuY29kZWRNZXRhZGF0YURvY3VtZW50OiBUaGUgbWV0YWRhdGEgZmlsZSBvZiB0aGUgSWRQLiBUaGUgdmFsdWUgb2YgdGhpcyBwYXJhbWV0ZXIgaXMgQmFzZTY0LWVuY29kZWQuXG4gICAgICogVGhlIGZpbGUgaXMgcHJvdmlkZWQgYnkgdGhlIElkUCB0aGF0IHN1cHBvcnRzIFNBTUwgMi4wLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGVuY29kZWRNZXRhZGF0YURvY3VtZW50Pzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgZW50aXR5SWQ6IFRoZSBlbnRpdHkgSUQgb2YgdGhlIElkUC5cbiAgICAgKi9cbiAgICByZWFkb25seSBlbnRpdHlJZD86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGxvZ2luVXJsOiBUaGUgbG9nb24gVVJMIG9mIHRoZSBJZFAuXG4gICAgICovXG4gICAgcmVhZG9ubHkgbG9naW5Vcmw/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBzc29TdGF0dXM6IFRoZSBzdGF0dXMgb2YgU1NPIGxvZ29uLiBWYWxpZCB2YWx1ZXM6XG4gICAgICogLSBFbmFibGVkXG4gICAgICogLSBEaXNhYmxlZCAoZGVmYXVsdClcbiAgICAgKi9cbiAgICByZWFkb25seSBzc29TdGF0dXM/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSB3YW50UmVxdWVzdFNpZ25lZDogU3BlY2lmaWVzIHdoZXRoZXIgQ2xvdWRTU08gbmVlZHMgdG8gc2lnbiBTQU1MIHJlcXVlc3RzLiBUaGUgcmVxdWVzdHMgYXJlIHNlbnQgd2hlbiB1c2VycyBsb2cgb24gdG8gdGhlIENsb3VkU1NPIHVzZXIgcG9ydGFsIHRvIGluaXRpYXRlIFNBTUwtYmFzZWQgU1NPLiBWYWxpZCB2YWx1ZXM6XG4gICAgICogLSB0cnVlOiB5ZXNcbiAgICAgKiAtIGZhbHNlOiBubyAoZGVmYXVsdClcbiAgICAgKi9cbiAgICByZWFkb25seSB3YW50UmVxdWVzdFNpZ25lZD86IGJvb2xlYW4gfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSB4NTA5Q2VydGlmaWNhdGU6IFRoZSBYLjUwOSBjZXJ0aWZpY2F0ZSBuIHRoZSBQRU0gZm9ybWF0LiBJZiB5b3Ugc3BlY2lmeSB0aGlzIHBhcmFtZXRlciwgYWxsIGV4aXN0aW5nIGNlcnRpZmljYXRlcyBhcmUgcmVwbGFjZWQuXG4gICAgICovXG4gICAgcmVhZG9ubHkgeDUwOUNlcnRpZmljYXRlPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xufVxuXG4vKipcbiAqIFRoaXMgY2xhc3MgZW5jYXBzdWxhdGVzIGFuZCBleHRlbmRzIHRoZSBST1MgcmVzb3VyY2UgdHlwZSBgQUxJWVVOOjpDbG91ZFNTTzo6U0FNTElkZW50aXR5UHJvdmlkZXJgLlxuICogQE5vdGUgVGhpcyBjbGFzcyBtYXkgaGF2ZSBzb21lIG5ldyBmdW5jdGlvbnMgdG8gZmFjaWxpdGF0ZSBkZXZlbG9wbWVudCwgc28gaXQgaXMgcmVjb21tZW5kZWQgdG8gdXNlIHRoaXMgY2xhc3MgaW5zdGVhZCBvZiBgUm9zU0FNTElkZW50aXR5UHJvdmlkZXJgZm9yIGEgbW9yZSBjb252ZW5pZW50IGRldmVsb3BtZW50IGV4cGVyaWVuY2UuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2FsaXl1bi1jbG91ZHNzby1zYW1saWRlbnRpdHlwcm92aWRlclxuICovXG5leHBvcnQgY2xhc3MgU0FNTElkZW50aXR5UHJvdmlkZXIgZXh0ZW5kcyByb3MuUmVzb3VyY2Uge1xuICAgIHByb3RlY3RlZCBzY29wZTogcm9zLkNvbnN0cnVjdDtcbiAgICBwcm90ZWN0ZWQgaWQ6IHN0cmluZztcbiAgICBwcm90ZWN0ZWQgcHJvcHM6IFNBTUxJZGVudGl0eVByb3ZpZGVyUHJvcHM7XG4gICAgcHJvdGVjdGVkIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OiBib29sZWFuO1xuXG4gICAgLyoqXG4gICAgICogUGFyYW0gc2NvcGUgLSBzY29wZSBpbiB3aGljaCB0aGlzIHJlc291cmNlIGlzIGRlZmluZWRcbiAgICAgKiBQYXJhbSBpZCAgICAtIHNjb3BlZCBpZCBvZiB0aGUgcmVzb3VyY2VcbiAgICAgKiBQYXJhbSBwcm9wcyAtIHJlc291cmNlIHByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihzY29wZTogcm9zLkNvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IFNBTUxJZGVudGl0eVByb3ZpZGVyUHJvcHMsIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OmJvb2xlYW4gPSB0cnVlKSB7XG4gICAgICAgIHN1cGVyKHNjb3BlLCBpZCk7XG4gICAgICAgIHRoaXMuc2NvcGUgPSBzY29wZTtcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xuICAgICAgICB0aGlzLnByb3BzID0gcHJvcHM7XG4gICAgICAgIHRoaXMuZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgPSBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDtcblxuICAgICAgICBjb25zdCByb3NTQU1MSWRlbnRpdHlQcm92aWRlciA9IG5ldyBSb3NTQU1MSWRlbnRpdHlQcm92aWRlcih0aGlzLCBpZCwgIHtcbiAgICAgICAgICAgIGVudGl0eUlkOiBwcm9wcy5lbnRpdHlJZCxcbiAgICAgICAgICAgIHNzb1N0YXR1czogcHJvcHMuc3NvU3RhdHVzLFxuICAgICAgICAgICAgZGlyZWN0b3J5SWQ6IHByb3BzLmRpcmVjdG9yeUlkLFxuICAgICAgICAgICAgZW5jb2RlZE1ldGFkYXRhRG9jdW1lbnQ6IHByb3BzLmVuY29kZWRNZXRhZGF0YURvY3VtZW50LFxuICAgICAgICAgICAgd2FudFJlcXVlc3RTaWduZWQ6IHByb3BzLndhbnRSZXF1ZXN0U2lnbmVkLFxuICAgICAgICAgICAgbG9naW5Vcmw6IHByb3BzLmxvZ2luVXJsLFxuICAgICAgICAgICAgeDUwOUNlcnRpZmljYXRlOiBwcm9wcy54NTA5Q2VydGlmaWNhdGUsXG4gICAgICAgIH0sIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ICYmIHRoaXMuc3RhY2suZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQpO1xuICAgICAgICB0aGlzLnJlc291cmNlID0gcm9zU0FNTElkZW50aXR5UHJvdmlkZXI7XG4gICAgfVxufVxuIl19