"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MonitorGroup = exports.MonitorGroupProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const cms_generated_1 = require("./cms.generated");
Object.defineProperty(exports, "MonitorGroupProperty", { enumerable: true, get: function () { return cms_generated_1.RosMonitorGroup; } });
/**
 * This class encapsulates and extends the ROS resource type `DATASOURCE::CMS::MonitorGroup`, which is used to query the information about an application group.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosMonitorGroup`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/datasource-cms-monitorgroup
 */
class MonitorGroup extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosMonitorGroup = new cms_generated_1.RosMonitorGroup(this, id, {
            refreshOptions: props.refreshOptions === undefined || props.refreshOptions === null ? 'Never' : props.refreshOptions,
            groupId: props.groupId,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosMonitorGroup;
        this.attrBindUrl = rosMonitorGroup.attrBindUrl;
        this.attrContactGroups = rosMonitorGroup.attrContactGroups;
        this.attrCreateTime = rosMonitorGroup.attrCreateTime;
        this.attrDynamicTagRuleId = rosMonitorGroup.attrDynamicTagRuleId;
        this.attrGmtModified = rosMonitorGroup.attrGmtModified;
        this.attrGroupId = rosMonitorGroup.attrGroupId;
        this.attrMonitorGroupName = rosMonitorGroup.attrMonitorGroupName;
        this.attrServiceId = rosMonitorGroup.attrServiceId;
        this.attrTags = rosMonitorGroup.attrTags;
        this.attrTemplateIds = rosMonitorGroup.attrTemplateIds;
        this.attrType = rosMonitorGroup.attrType;
    }
}
exports.MonitorGroup = MonitorGroup;
//# sourceMappingURL=data:application/json;base64,