"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AlarmContact = exports.AlarmContactProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const cms_generated_1 = require("./cms.generated");
Object.defineProperty(exports, "AlarmContactProperty", { enumerable: true, get: function () { return cms_generated_1.RosAlarmContact; } });
/**
 * This class encapsulates and extends the ROS resource type `DATASOURCE::CMS::AlarmContact`, which is used to query the information about an alert contact.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosAlarmContact`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/datasource-cms-alarmcontact
 */
class AlarmContact extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosAlarmContact = new cms_generated_1.RosAlarmContact(this, id, {
            alarmContactName: props.alarmContactName,
            refreshOptions: props.refreshOptions === undefined || props.refreshOptions === null ? 'Never' : props.refreshOptions,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosAlarmContact;
        this.attrAlarmContactName = rosAlarmContact.attrAlarmContactName;
        this.attrChannelsAliIm = rosAlarmContact.attrChannelsAliIm;
        this.attrChannelsDingWebHook = rosAlarmContact.attrChannelsDingWebHook;
        this.attrChannelsMail = rosAlarmContact.attrChannelsMail;
        this.attrChannelsSms = rosAlarmContact.attrChannelsSms;
        this.attrChannelsStateAliIm = rosAlarmContact.attrChannelsStateAliIm;
        this.attrChannelsStateDingWebHook = rosAlarmContact.attrChannelsStateDingWebHook;
        this.attrChannelsStateMail = rosAlarmContact.attrChannelsStateMail;
        this.attrChannelsStateSms = rosAlarmContact.attrChannelsStateSms;
        this.attrContactGroups = rosAlarmContact.attrContactGroups;
        this.attrCreateTime = rosAlarmContact.attrCreateTime;
        this.attrDescribe = rosAlarmContact.attrDescribe;
        this.attrLang = rosAlarmContact.attrLang;
        this.attrUpdateTime = rosAlarmContact.attrUpdateTime;
    }
}
exports.AlarmContact = AlarmContact;
//# sourceMappingURL=data:application/json;base64,