"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DefaultPatchBaseline = exports.DefaultPatchBaselineProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const oos_generated_1 = require("./oos.generated");
Object.defineProperty(exports, "DefaultPatchBaselineProperty", { enumerable: true, get: function () { return oos_generated_1.RosDefaultPatchBaseline; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::OOS::DefaultPatchBaseline`, which is used to register a default patch baseline.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosDefaultPatchBaseline`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-oos-defaultpatchbaseline
 */
class DefaultPatchBaseline extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosDefaultPatchBaseline = new oos_generated_1.RosDefaultPatchBaseline(this, id, {
            patchBaselineName: props.patchBaselineName,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosDefaultPatchBaseline;
        this.attrApprovalRules = rosDefaultPatchBaseline.attrApprovalRules;
        this.attrCreatedBy = rosDefaultPatchBaseline.attrCreatedBy;
        this.attrCreatedDate = rosDefaultPatchBaseline.attrCreatedDate;
        this.attrDescription = rosDefaultPatchBaseline.attrDescription;
        this.attrOperationSystem = rosDefaultPatchBaseline.attrOperationSystem;
        this.attrPatchBaselineId = rosDefaultPatchBaseline.attrPatchBaselineId;
        this.attrPatchBaselineName = rosDefaultPatchBaseline.attrPatchBaselineName;
        this.attrShareType = rosDefaultPatchBaseline.attrShareType;
        this.attrUpdatedBy = rosDefaultPatchBaseline.attrUpdatedBy;
        this.attrUpdatedDate = rosDefaultPatchBaseline.attrUpdatedDate;
    }
}
exports.DefaultPatchBaseline = DefaultPatchBaseline;
//# sourceMappingURL=data:application/json;base64,