"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SynchronizationJob2 = exports.SynchronizationJob2Property = void 0;
const ros = require("@alicloud/ros-cdk-core");
const dts_generated_1 = require("./dts.generated");
Object.defineProperty(exports, "SynchronizationJob2Property", { enumerable: true, get: function () { return dts_generated_1.RosSynchronizationJob2; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::DTS::SynchronizationJob2`DATASOURCE::DTS::MigrationInstances is used to query information about Data Transmission Service (DTS) tasks.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosSynchronizationJob2`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-dts-synchronizationjob2
 */
class SynchronizationJob2 extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosSynchronizationJob2 = new dts_generated_1.RosSynchronizationJob2(this, id, {
            status: props.status,
            reserve: props.reserve,
            dataSynchronization: props.dataSynchronization,
            delayPhone: props.delayPhone,
            dedicatedClusterId: props.dedicatedClusterId,
            errorNotice: props.errorNotice,
            dtsJobName: props.dtsJobName,
            delayRuleTime: props.delayRuleTime,
            dtsInstanceId: props.dtsInstanceId,
            dbList: props.dbList,
            fileOssUrl: props.fileOssUrl,
            dataCheckConfigure: props.dataCheckConfigure,
            dtsBisLabel: props.dtsBisLabel,
            checkpoint: props.checkpoint,
            disasterRecoveryJob: props.disasterRecoveryJob,
            dtsJobId: props.dtsJobId,
            delayNotice: props.delayNotice,
            dataInitialization: props.dataInitialization,
            destinationEndpoint: props.destinationEndpoint,
            sourceEndpoint: props.sourceEndpoint,
            errorPhone: props.errorPhone,
            structureInitialization: props.structureInitialization,
            synchronizationDirection: props.synchronizationDirection,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosSynchronizationJob2;
        this.attrDtsInstanceId = rosSynchronizationJob2.attrDtsInstanceId;
        this.attrDtsJobId = rosSynchronizationJob2.attrDtsJobId;
        this.attrDtsJobName = rosSynchronizationJob2.attrDtsJobName;
    }
}
exports.SynchronizationJob2 = SynchronizationJob2;
//# sourceMappingURL=data:application/json;base64,