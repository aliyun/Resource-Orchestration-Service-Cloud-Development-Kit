"use strict";
// Generated from the AliCloud ROS Resource Specification
Object.defineProperty(exports, "__esModule", { value: true });
exports.RosSynchronizationJob2 = exports.RosSubscriptionJob2 = exports.RosMigrationJob2 = exports.RosInstance = exports.RosConsumerGroup = void 0;
const ros = require("@alicloud/ros-cdk-core");
/**
 * Determine whether the given properties match those of a `RosConsumerGroupProps`
 *
 * @param properties - the TypeScript properties of a `RosConsumerGroupProps`
 *
 * @returns the result of the validation.
 */
function RosConsumerGroupPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('consumerGroupPassword', ros.requiredValidator)(properties.consumerGroupPassword));
    errors.collect(ros.propertyValidator('consumerGroupPassword', ros.validateString)(properties.consumerGroupPassword));
    errors.collect(ros.propertyValidator('consumerGroupUserName', ros.requiredValidator)(properties.consumerGroupUserName));
    errors.collect(ros.propertyValidator('consumerGroupUserName', ros.validateString)(properties.consumerGroupUserName));
    errors.collect(ros.propertyValidator('consumerGroupName', ros.requiredValidator)(properties.consumerGroupName));
    errors.collect(ros.propertyValidator('consumerGroupName', ros.validateString)(properties.consumerGroupName));
    errors.collect(ros.propertyValidator('subscriptionInstanceId', ros.requiredValidator)(properties.subscriptionInstanceId));
    errors.collect(ros.propertyValidator('subscriptionInstanceId', ros.validateString)(properties.subscriptionInstanceId));
    return errors.wrap('supplied properties not correct for "RosConsumerGroupProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::DTS::ConsumerGroup` resource
 *
 * @param properties - the TypeScript properties of a `RosConsumerGroupProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::DTS::ConsumerGroup` resource.
 */
// @ts-ignore TS6133
function rosConsumerGroupPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosConsumerGroupPropsValidator(properties).assertSuccess();
    }
    return {
        ConsumerGroupName: ros.stringToRosTemplate(properties.consumerGroupName),
        ConsumerGroupPassword: ros.stringToRosTemplate(properties.consumerGroupPassword),
        ConsumerGroupUserName: ros.stringToRosTemplate(properties.consumerGroupUserName),
        SubscriptionInstanceId: ros.stringToRosTemplate(properties.subscriptionInstanceId),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::DTS::ConsumerGroup`.
 * @Note This class does not contain additional functions, so it is recommended to use the `ConsumerGroup` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-dts-consumergroup
 */
class RosConsumerGroup extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosConsumerGroup.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrConsumerGroupId = this.getAtt('ConsumerGroupID');
        this.attrConsumerGroupName = this.getAtt('ConsumerGroupName');
        this.attrSubscriptionInstanceId = this.getAtt('SubscriptionInstanceId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.consumerGroupName = props.consumerGroupName;
        this.consumerGroupPassword = props.consumerGroupPassword;
        this.consumerGroupUserName = props.consumerGroupUserName;
        this.subscriptionInstanceId = props.subscriptionInstanceId;
    }
    get rosProperties() {
        return {
            consumerGroupName: this.consumerGroupName,
            consumerGroupPassword: this.consumerGroupPassword,
            consumerGroupUserName: this.consumerGroupUserName,
            subscriptionInstanceId: this.subscriptionInstanceId,
        };
    }
    renderProperties(props) {
        return rosConsumerGroupPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosConsumerGroup = RosConsumerGroup;
/**
 * The resource type name for this resource class.
 */
RosConsumerGroup.ROS_RESOURCE_TYPE_NAME = "ALIYUN::DTS::ConsumerGroup";
/**
 * Determine whether the given properties match those of a `RosInstanceProps`
 *
 * @param properties - the TypeScript properties of a `RosInstanceProps`
 *
 * @returns the result of the validation.
 */
function RosInstancePropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('resourceGroupId', ros.validateString)(properties.resourceGroupId));
    errors.collect(ros.propertyValidator('feeType', ros.validateString)(properties.feeType));
    errors.collect(ros.propertyValidator('computeUnit', ros.validateNumber)(properties.computeUnit));
    if (properties.period && (typeof properties.period) !== 'object') {
        errors.collect(ros.propertyValidator('period', ros.validateAllowedValues)({
            data: properties.period,
            allowedValues: ["Month", "Year"],
        }));
    }
    errors.collect(ros.propertyValidator('period', ros.validateString)(properties.period));
    errors.collect(ros.propertyValidator('destinationRegion', ros.validateString)(properties.destinationRegion));
    errors.collect(ros.propertyValidator('instanceClass', ros.requiredValidator)(properties.instanceClass));
    if (properties.instanceClass && (typeof properties.instanceClass) !== 'object') {
        errors.collect(ros.propertyValidator('instanceClass', ros.validateAllowedValues)({
            data: properties.instanceClass,
            allowedValues: ["xxlarge", "xlarge", "large", "medium", "small", "micro"],
        }));
    }
    errors.collect(ros.propertyValidator('instanceClass', ros.validateString)(properties.instanceClass));
    errors.collect(ros.propertyValidator('sourceEndpointEngineName', ros.validateString)(properties.sourceEndpointEngineName));
    errors.collect(ros.propertyValidator('payType', ros.requiredValidator)(properties.payType));
    if (properties.payType && (typeof properties.payType) !== 'object') {
        errors.collect(ros.propertyValidator('payType', ros.validateAllowedValues)({
            data: properties.payType,
            allowedValues: ["PayAsYouGo", "PostPaid", "PayOnDemand", "Postpaid", "PostPay", "Postpay", "POSTPAY", "POST", "Subscription", "PrePaid", "Prepaid", "PrePay", "Prepay", "PREPAY", "PRE"],
        }));
    }
    errors.collect(ros.propertyValidator('payType', ros.validateString)(properties.payType));
    errors.collect(ros.propertyValidator('autoPay', ros.validateBoolean)(properties.autoPay));
    errors.collect(ros.propertyValidator('destinationEndpointEngineName', ros.validateString)(properties.destinationEndpointEngineName));
    errors.collect(ros.propertyValidator('sourceRegion', ros.validateString)(properties.sourceRegion));
    if (properties.du && (typeof properties.du) !== 'object') {
        errors.collect(ros.propertyValidator('du', ros.validateRange)({
            data: properties.du,
            min: 1,
            max: 100,
        }));
    }
    errors.collect(ros.propertyValidator('du', ros.validateNumber)(properties.du));
    errors.collect(ros.propertyValidator('type', ros.requiredValidator)(properties.type));
    if (properties.type && (typeof properties.type) !== 'object') {
        errors.collect(ros.propertyValidator('type', ros.validateAllowedValues)({
            data: properties.type,
            allowedValues: ["MIGRATION", "SYNC", "SUBSCRIBE"],
        }));
    }
    errors.collect(ros.propertyValidator('type', ros.validateString)(properties.type));
    errors.collect(ros.propertyValidator('databaseCount', ros.validateNumber)(properties.databaseCount));
    if (properties.usedTime && (typeof properties.usedTime) !== 'object') {
        errors.collect(ros.propertyValidator('usedTime', ros.validateAllowedValues)({
            data: properties.usedTime,
            allowedValues: [1, 2, 3, 4, 5, 6, 7, 8, 9],
        }));
    }
    errors.collect(ros.propertyValidator('usedTime', ros.validateNumber)(properties.usedTime));
    errors.collect(ros.propertyValidator('autoStart', ros.validateBoolean)(properties.autoStart));
    errors.collect(ros.propertyValidator('jobId', ros.validateString)(properties.jobId));
    if (properties.syncArchitecture && (typeof properties.syncArchitecture) !== 'object') {
        errors.collect(ros.propertyValidator('syncArchitecture', ros.validateAllowedValues)({
            data: properties.syncArchitecture,
            allowedValues: ["oneway", "bidirectional"],
        }));
    }
    errors.collect(ros.propertyValidator('syncArchitecture', ros.validateString)(properties.syncArchitecture));
    return errors.wrap('supplied properties not correct for "RosInstanceProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::DTS::Instance` resource
 *
 * @param properties - the TypeScript properties of a `RosInstanceProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::DTS::Instance` resource.
 */
// @ts-ignore TS6133
function rosInstancePropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosInstancePropsValidator(properties).assertSuccess();
    }
    return {
        InstanceClass: ros.stringToRosTemplate(properties.instanceClass),
        PayType: ros.stringToRosTemplate(properties.payType),
        Type: ros.stringToRosTemplate(properties.type),
        AutoPay: ros.booleanToRosTemplate(properties.autoPay),
        AutoStart: ros.booleanToRosTemplate(properties.autoStart),
        ComputeUnit: ros.numberToRosTemplate(properties.computeUnit),
        DatabaseCount: ros.numberToRosTemplate(properties.databaseCount),
        DestinationEndpointEngineName: ros.stringToRosTemplate(properties.destinationEndpointEngineName),
        DestinationRegion: ros.stringToRosTemplate(properties.destinationRegion),
        Du: ros.numberToRosTemplate(properties.du),
        FeeType: ros.stringToRosTemplate(properties.feeType),
        JobId: ros.stringToRosTemplate(properties.jobId),
        Period: ros.stringToRosTemplate(properties.period),
        ResourceGroupId: ros.stringToRosTemplate(properties.resourceGroupId),
        SourceEndpointEngineName: ros.stringToRosTemplate(properties.sourceEndpointEngineName),
        SourceRegion: ros.stringToRosTemplate(properties.sourceRegion),
        SyncArchitecture: ros.stringToRosTemplate(properties.syncArchitecture),
        UsedTime: ros.numberToRosTemplate(properties.usedTime),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::DTS::Instance`.
 * @Note This class does not contain additional functions, so it is recommended to use the `Instance` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-dts-instance
 */
class RosInstance extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosInstance.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrInstanceId = this.getAtt('InstanceId');
        this.attrJobId = this.getAtt('JobId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.instanceClass = props.instanceClass;
        this.payType = props.payType;
        this.type = props.type;
        this.autoPay = props.autoPay;
        this.autoStart = props.autoStart;
        this.computeUnit = props.computeUnit;
        this.databaseCount = props.databaseCount;
        this.destinationEndpointEngineName = props.destinationEndpointEngineName;
        this.destinationRegion = props.destinationRegion;
        this.du = props.du;
        this.feeType = props.feeType;
        this.jobId = props.jobId;
        this.period = props.period;
        this.resourceGroupId = props.resourceGroupId;
        this.sourceEndpointEngineName = props.sourceEndpointEngineName;
        this.sourceRegion = props.sourceRegion;
        this.syncArchitecture = props.syncArchitecture;
        this.usedTime = props.usedTime;
    }
    get rosProperties() {
        return {
            instanceClass: this.instanceClass,
            payType: this.payType,
            type: this.type,
            autoPay: this.autoPay,
            autoStart: this.autoStart,
            computeUnit: this.computeUnit,
            databaseCount: this.databaseCount,
            destinationEndpointEngineName: this.destinationEndpointEngineName,
            destinationRegion: this.destinationRegion,
            du: this.du,
            feeType: this.feeType,
            jobId: this.jobId,
            period: this.period,
            resourceGroupId: this.resourceGroupId,
            sourceEndpointEngineName: this.sourceEndpointEngineName,
            sourceRegion: this.sourceRegion,
            syncArchitecture: this.syncArchitecture,
            usedTime: this.usedTime,
        };
    }
    renderProperties(props) {
        return rosInstancePropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosInstance = RosInstance;
/**
 * The resource type name for this resource class.
 */
RosInstance.ROS_RESOURCE_TYPE_NAME = "ALIYUN::DTS::Instance";
/**
 * Determine whether the given properties match those of a `RosMigrationJob2Props`
 *
 * @param properties - the TypeScript properties of a `RosMigrationJob2Props`
 *
 * @returns the result of the validation.
 */
function RosMigrationJob2PropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    if (properties.status && (typeof properties.status) !== 'object') {
        errors.collect(ros.propertyValidator('status', ros.validateAllowedValues)({
            data: properties.status,
            allowedValues: ["Migrating", "Suspending", "Stopping"],
        }));
    }
    errors.collect(ros.propertyValidator('status', ros.validateString)(properties.status));
    errors.collect(ros.propertyValidator('reserve', ros.hashValidator(ros.validateAny))(properties.reserve));
    errors.collect(ros.propertyValidator('dataSynchronization', ros.requiredValidator)(properties.dataSynchronization));
    errors.collect(ros.propertyValidator('dataSynchronization', ros.validateBoolean)(properties.dataSynchronization));
    errors.collect(ros.propertyValidator('dedicatedClusterId', ros.validateString)(properties.dedicatedClusterId));
    errors.collect(ros.propertyValidator('delayPhone', ros.validateString)(properties.delayPhone));
    errors.collect(ros.propertyValidator('errorNotice', ros.validateBoolean)(properties.errorNotice));
    errors.collect(ros.propertyValidator('dtsJobName', ros.requiredValidator)(properties.dtsJobName));
    errors.collect(ros.propertyValidator('dtsJobName', ros.validateString)(properties.dtsJobName));
    errors.collect(ros.propertyValidator('delayRuleTime', ros.validateNumber)(properties.delayRuleTime));
    errors.collect(ros.propertyValidator('dtsInstanceId', ros.validateString)(properties.dtsInstanceId));
    errors.collect(ros.propertyValidator('dbList', ros.requiredValidator)(properties.dbList));
    errors.collect(ros.propertyValidator('dbList', ros.hashValidator(ros.validateAny))(properties.dbList));
    errors.collect(ros.propertyValidator('fileOssUrl', ros.validateString)(properties.fileOssUrl));
    errors.collect(ros.propertyValidator('dataCheckConfigure', RosMigrationJob2_DataCheckConfigurePropertyValidator)(properties.dataCheckConfigure));
    errors.collect(ros.propertyValidator('dtsBisLabel', ros.validateString)(properties.dtsBisLabel));
    errors.collect(ros.propertyValidator('checkpoint', ros.validateString)(properties.checkpoint));
    errors.collect(ros.propertyValidator('disasterRecoveryJob', ros.validateBoolean)(properties.disasterRecoveryJob));
    errors.collect(ros.propertyValidator('dtsJobId', ros.validateString)(properties.dtsJobId));
    errors.collect(ros.propertyValidator('delayNotice', ros.validateBoolean)(properties.delayNotice));
    errors.collect(ros.propertyValidator('dataInitialization', ros.requiredValidator)(properties.dataInitialization));
    errors.collect(ros.propertyValidator('dataInitialization', ros.validateBoolean)(properties.dataInitialization));
    errors.collect(ros.propertyValidator('destinationEndpoint', ros.requiredValidator)(properties.destinationEndpoint));
    errors.collect(ros.propertyValidator('destinationEndpoint', RosMigrationJob2_DestinationEndpointPropertyValidator)(properties.destinationEndpoint));
    errors.collect(ros.propertyValidator('sourceEndpoint', ros.requiredValidator)(properties.sourceEndpoint));
    errors.collect(ros.propertyValidator('sourceEndpoint', RosMigrationJob2_SourceEndpointPropertyValidator)(properties.sourceEndpoint));
    errors.collect(ros.propertyValidator('errorPhone', ros.validateString)(properties.errorPhone));
    errors.collect(ros.propertyValidator('structureInitialization', ros.requiredValidator)(properties.structureInitialization));
    errors.collect(ros.propertyValidator('structureInitialization', ros.validateBoolean)(properties.structureInitialization));
    return errors.wrap('supplied properties not correct for "RosMigrationJob2Props"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::DTS::MigrationJob2` resource
 *
 * @param properties - the TypeScript properties of a `RosMigrationJob2Props`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::DTS::MigrationJob2` resource.
 */
// @ts-ignore TS6133
function rosMigrationJob2PropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosMigrationJob2PropsValidator(properties).assertSuccess();
    }
    return {
        DataInitialization: ros.booleanToRosTemplate(properties.dataInitialization),
        DataSynchronization: ros.booleanToRosTemplate(properties.dataSynchronization),
        DbList: ros.hashMapper(ros.objectToRosTemplate)(properties.dbList),
        DestinationEndpoint: rosMigrationJob2DestinationEndpointPropertyToRosTemplate(properties.destinationEndpoint),
        DtsJobName: ros.stringToRosTemplate(properties.dtsJobName),
        SourceEndpoint: rosMigrationJob2SourceEndpointPropertyToRosTemplate(properties.sourceEndpoint),
        StructureInitialization: ros.booleanToRosTemplate(properties.structureInitialization),
        Checkpoint: ros.stringToRosTemplate(properties.checkpoint),
        DataCheckConfigure: rosMigrationJob2DataCheckConfigurePropertyToRosTemplate(properties.dataCheckConfigure),
        DedicatedClusterId: ros.stringToRosTemplate(properties.dedicatedClusterId),
        DelayNotice: ros.booleanToRosTemplate(properties.delayNotice),
        DelayPhone: ros.stringToRosTemplate(properties.delayPhone),
        DelayRuleTime: ros.numberToRosTemplate(properties.delayRuleTime),
        DisasterRecoveryJob: ros.booleanToRosTemplate(properties.disasterRecoveryJob),
        DtsBisLabel: ros.stringToRosTemplate(properties.dtsBisLabel),
        DtsInstanceId: ros.stringToRosTemplate(properties.dtsInstanceId),
        DtsJobId: ros.stringToRosTemplate(properties.dtsJobId),
        ErrorNotice: ros.booleanToRosTemplate(properties.errorNotice),
        ErrorPhone: ros.stringToRosTemplate(properties.errorPhone),
        FileOssUrl: ros.stringToRosTemplate(properties.fileOssUrl),
        Reserve: ros.hashMapper(ros.objectToRosTemplate)(properties.reserve),
        Status: ros.stringToRosTemplate(properties.status),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::DTS::MigrationJob2`.
 * @Note This class does not contain additional functions, so it is recommended to use the `MigrationJob2` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-dts-migrationjob2
 */
class RosMigrationJob2 extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosMigrationJob2.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrDtsInstanceId = this.getAtt('DtsInstanceId');
        this.attrDtsJobId = this.getAtt('DtsJobId');
        this.attrDtsJobName = this.getAtt('DtsJobName');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.dataInitialization = props.dataInitialization;
        this.dataSynchronization = props.dataSynchronization;
        this.dbList = props.dbList;
        this.destinationEndpoint = props.destinationEndpoint;
        this.dtsJobName = props.dtsJobName;
        this.sourceEndpoint = props.sourceEndpoint;
        this.structureInitialization = props.structureInitialization;
        this.checkpoint = props.checkpoint;
        this.dataCheckConfigure = props.dataCheckConfigure;
        this.dedicatedClusterId = props.dedicatedClusterId;
        this.delayNotice = props.delayNotice;
        this.delayPhone = props.delayPhone;
        this.delayRuleTime = props.delayRuleTime;
        this.disasterRecoveryJob = props.disasterRecoveryJob;
        this.dtsBisLabel = props.dtsBisLabel;
        this.dtsInstanceId = props.dtsInstanceId;
        this.dtsJobId = props.dtsJobId;
        this.errorNotice = props.errorNotice;
        this.errorPhone = props.errorPhone;
        this.fileOssUrl = props.fileOssUrl;
        this.reserve = props.reserve;
        this.status = props.status;
    }
    get rosProperties() {
        return {
            dataInitialization: this.dataInitialization,
            dataSynchronization: this.dataSynchronization,
            dbList: this.dbList,
            destinationEndpoint: this.destinationEndpoint,
            dtsJobName: this.dtsJobName,
            sourceEndpoint: this.sourceEndpoint,
            structureInitialization: this.structureInitialization,
            checkpoint: this.checkpoint,
            dataCheckConfigure: this.dataCheckConfigure,
            dedicatedClusterId: this.dedicatedClusterId,
            delayNotice: this.delayNotice,
            delayPhone: this.delayPhone,
            delayRuleTime: this.delayRuleTime,
            disasterRecoveryJob: this.disasterRecoveryJob,
            dtsBisLabel: this.dtsBisLabel,
            dtsInstanceId: this.dtsInstanceId,
            dtsJobId: this.dtsJobId,
            errorNotice: this.errorNotice,
            errorPhone: this.errorPhone,
            fileOssUrl: this.fileOssUrl,
            reserve: this.reserve,
            status: this.status,
        };
    }
    renderProperties(props) {
        return rosMigrationJob2PropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosMigrationJob2 = RosMigrationJob2;
/**
 * The resource type name for this resource class.
 */
RosMigrationJob2.ROS_RESOURCE_TYPE_NAME = "ALIYUN::DTS::MigrationJob2";
/**
 * Determine whether the given properties match those of a `DataCheckConfigureProperty`
 *
 * @param properties - the TypeScript properties of a `DataCheckConfigureProperty`
 *
 * @returns the result of the validation.
 */
function RosMigrationJob2_DataCheckConfigurePropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    if (properties.fullCheckMaxReadRps && (typeof properties.fullCheckMaxReadRps) !== 'object') {
        errors.collect(ros.propertyValidator('fullCheckMaxReadRps', ros.validateRange)({
            data: properties.fullCheckMaxReadRps,
            min: 0,
            max: 9007199254740991,
        }));
    }
    errors.collect(ros.propertyValidator('fullCheckMaxReadRps', ros.validateNumber)(properties.fullCheckMaxReadRps));
    errors.collect(ros.propertyValidator('dataCheckNoticePhone', ros.validateString)(properties.dataCheckNoticePhone));
    errors.collect(ros.propertyValidator('incrementalCheckDelayNotice', ros.validateBoolean)(properties.incrementalCheckDelayNotice));
    errors.collect(ros.propertyValidator('incrementalCheckDelayNoticeValue', ros.validateNumber)(properties.incrementalCheckDelayNoticeValue));
    if (properties.incrementalCheckDelayNoticePeriod && (typeof properties.incrementalCheckDelayNoticePeriod) !== 'object') {
        errors.collect(ros.propertyValidator('incrementalCheckDelayNoticePeriod', ros.validateAllowedValues)({
            data: properties.incrementalCheckDelayNoticePeriod,
            allowedValues: [1, 2, 3, 4],
        }));
    }
    errors.collect(ros.propertyValidator('incrementalCheckDelayNoticePeriod', ros.validateNumber)(properties.incrementalCheckDelayNoticePeriod));
    errors.collect(ros.propertyValidator('dataCheckDbList', ros.validateString)(properties.dataCheckDbList));
    if (properties.checkMaximumHourEnable && (typeof properties.checkMaximumHourEnable) !== 'object') {
        errors.collect(ros.propertyValidator('checkMaximumHourEnable', ros.validateAllowedValues)({
            data: properties.checkMaximumHourEnable,
            allowedValues: [0, 1],
        }));
    }
    errors.collect(ros.propertyValidator('checkMaximumHourEnable', ros.validateNumber)(properties.checkMaximumHourEnable));
    if (properties.fullCheckRatio && (typeof properties.fullCheckRatio) !== 'object') {
        errors.collect(ros.propertyValidator('fullCheckRatio', ros.validateRange)({
            data: properties.fullCheckRatio,
            min: 10,
            max: 100,
        }));
    }
    errors.collect(ros.propertyValidator('fullCheckRatio', ros.validateNumber)(properties.fullCheckRatio));
    if (properties.checkMaximumHour && (typeof properties.checkMaximumHour) !== 'object') {
        errors.collect(ros.propertyValidator('checkMaximumHour', ros.validateRange)({
            data: properties.checkMaximumHour,
            min: 1,
            max: 72,
        }));
    }
    errors.collect(ros.propertyValidator('checkMaximumHour', ros.validateNumber)(properties.checkMaximumHour));
    errors.collect(ros.propertyValidator('fullCheckFixData', ros.validateBoolean)(properties.fullCheckFixData));
    if (properties.fullCheckModel && (typeof properties.fullCheckModel) !== 'object') {
        errors.collect(ros.propertyValidator('fullCheckModel', ros.validateAllowedValues)({
            data: properties.fullCheckModel,
            allowedValues: [1, 2],
        }));
    }
    errors.collect(ros.propertyValidator('fullCheckModel', ros.validateNumber)(properties.fullCheckModel));
    errors.collect(ros.propertyValidator('incrementalCheckValidFailNoticeValue', ros.validateNumber)(properties.incrementalCheckValidFailNoticeValue));
    errors.collect(ros.propertyValidator('incrementalDataCheck', ros.validateBoolean)(properties.incrementalDataCheck));
    errors.collect(ros.propertyValidator('incrementalCheckValidFailNoticeTimes', ros.validateNumber)(properties.incrementalCheckValidFailNoticeTimes));
    if (properties.fullCheckMaxReadBps && (typeof properties.fullCheckMaxReadBps) !== 'object') {
        errors.collect(ros.propertyValidator('fullCheckMaxReadBps', ros.validateRange)({
            data: properties.fullCheckMaxReadBps,
            min: 0,
            max: 9007199254740991,
        }));
    }
    errors.collect(ros.propertyValidator('fullCheckMaxReadBps', ros.validateNumber)(properties.fullCheckMaxReadBps));
    errors.collect(ros.propertyValidator('fullCheckValidFailNotice', ros.validateBoolean)(properties.fullCheckValidFailNotice));
    errors.collect(ros.propertyValidator('fullCheckErrorNotice', ros.validateBoolean)(properties.fullCheckErrorNotice));
    if (properties.incrementalCheckValidFailNoticePeriod && (typeof properties.incrementalCheckValidFailNoticePeriod) !== 'object') {
        errors.collect(ros.propertyValidator('incrementalCheckValidFailNoticePeriod', ros.validateAllowedValues)({
            data: properties.incrementalCheckValidFailNoticePeriod,
            allowedValues: [1, 2, 3, 4],
        }));
    }
    errors.collect(ros.propertyValidator('incrementalCheckValidFailNoticePeriod', ros.validateNumber)(properties.incrementalCheckValidFailNoticePeriod));
    errors.collect(ros.propertyValidator('incrementalCheckDelayNoticeTimes', ros.validateNumber)(properties.incrementalCheckDelayNoticeTimes));
    errors.collect(ros.propertyValidator('fullCheckReferEndpoint', ros.validateString)(properties.fullCheckReferEndpoint));
    errors.collect(ros.propertyValidator('fullDataCheck', ros.validateBoolean)(properties.fullDataCheck));
    errors.collect(ros.propertyValidator('incrementalCheckValidFailNotice', ros.validateBoolean)(properties.incrementalCheckValidFailNotice));
    errors.collect(ros.propertyValidator('fullCheckNoticeValue', ros.validateNumber)(properties.fullCheckNoticeValue));
    errors.collect(ros.propertyValidator('incrementalCheckErrorNotice', ros.validateBoolean)(properties.incrementalCheckErrorNotice));
    return errors.wrap('supplied properties not correct for "DataCheckConfigureProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::DTS::MigrationJob2.DataCheckConfigure` resource
 *
 * @param properties - the TypeScript properties of a `DataCheckConfigureProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::DTS::MigrationJob2.DataCheckConfigure` resource.
 */
// @ts-ignore TS6133
function rosMigrationJob2DataCheckConfigurePropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosMigrationJob2_DataCheckConfigurePropertyValidator(properties).assertSuccess();
    return {
        fullCheckMaxReadRps: ros.numberToRosTemplate(properties.fullCheckMaxReadRps),
        dataCheckNoticePhone: ros.stringToRosTemplate(properties.dataCheckNoticePhone),
        incrementalCheckDelayNotice: ros.booleanToRosTemplate(properties.incrementalCheckDelayNotice),
        incrementalCheckDelayNoticeValue: ros.numberToRosTemplate(properties.incrementalCheckDelayNoticeValue),
        incrementalCheckDelayNoticePeriod: ros.numberToRosTemplate(properties.incrementalCheckDelayNoticePeriod),
        dataCheckDbList: ros.stringToRosTemplate(properties.dataCheckDbList),
        checkMaximumHourEnable: ros.numberToRosTemplate(properties.checkMaximumHourEnable),
        fullCheckRatio: ros.numberToRosTemplate(properties.fullCheckRatio),
        checkMaximumHour: ros.numberToRosTemplate(properties.checkMaximumHour),
        fullCheckFixData: ros.booleanToRosTemplate(properties.fullCheckFixData),
        fullCheckModel: ros.numberToRosTemplate(properties.fullCheckModel),
        incrementalCheckValidFailNoticeValue: ros.numberToRosTemplate(properties.incrementalCheckValidFailNoticeValue),
        incrementalDataCheck: ros.booleanToRosTemplate(properties.incrementalDataCheck),
        incrementalCheckValidFailNoticeTimes: ros.numberToRosTemplate(properties.incrementalCheckValidFailNoticeTimes),
        fullCheckMaxReadBps: ros.numberToRosTemplate(properties.fullCheckMaxReadBps),
        fullCheckValidFailNotice: ros.booleanToRosTemplate(properties.fullCheckValidFailNotice),
        fullCheckErrorNotice: ros.booleanToRosTemplate(properties.fullCheckErrorNotice),
        incrementalCheckValidFailNoticePeriod: ros.numberToRosTemplate(properties.incrementalCheckValidFailNoticePeriod),
        incrementalCheckDelayNoticeTimes: ros.numberToRosTemplate(properties.incrementalCheckDelayNoticeTimes),
        fullCheckReferEndpoint: ros.stringToRosTemplate(properties.fullCheckReferEndpoint),
        fullDataCheck: ros.booleanToRosTemplate(properties.fullDataCheck),
        incrementalCheckValidFailNotice: ros.booleanToRosTemplate(properties.incrementalCheckValidFailNotice),
        fullCheckNoticeValue: ros.numberToRosTemplate(properties.fullCheckNoticeValue),
        incrementalCheckErrorNotice: ros.booleanToRosTemplate(properties.incrementalCheckErrorNotice),
    };
}
/**
 * Determine whether the given properties match those of a `DestinationEndpointProperty`
 *
 * @param properties - the TypeScript properties of a `DestinationEndpointProperty`
 *
 * @returns the result of the validation.
 */
function RosMigrationJob2_DestinationEndpointPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('role', ros.validateString)(properties.role));
    errors.collect(ros.propertyValidator('oracleSid', ros.validateString)(properties.oracleSid));
    errors.collect(ros.propertyValidator('userName', ros.validateString)(properties.userName));
    errors.collect(ros.propertyValidator('ownerId', ros.validateString)(properties.ownerId));
    errors.collect(ros.propertyValidator('instanceId', ros.validateString)(properties.instanceId));
    errors.collect(ros.propertyValidator('ip', ros.validateString)(properties.ip));
    errors.collect(ros.propertyValidator('port', ros.validateString)(properties.port));
    errors.collect(ros.propertyValidator('databaseName', ros.validateString)(properties.databaseName));
    errors.collect(ros.propertyValidator('region', ros.validateString)(properties.region));
    errors.collect(ros.propertyValidator('instanceType', ros.requiredValidator)(properties.instanceType));
    errors.collect(ros.propertyValidator('instanceType', ros.validateString)(properties.instanceType));
    errors.collect(ros.propertyValidator('engineName', ros.validateString)(properties.engineName));
    errors.collect(ros.propertyValidator('password', ros.validateString)(properties.password));
    return errors.wrap('supplied properties not correct for "DestinationEndpointProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::DTS::MigrationJob2.DestinationEndpoint` resource
 *
 * @param properties - the TypeScript properties of a `DestinationEndpointProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::DTS::MigrationJob2.DestinationEndpoint` resource.
 */
// @ts-ignore TS6133
function rosMigrationJob2DestinationEndpointPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosMigrationJob2_DestinationEndpointPropertyValidator(properties).assertSuccess();
    return {
        Role: ros.stringToRosTemplate(properties.role),
        OracleSID: ros.stringToRosTemplate(properties.oracleSid),
        UserName: ros.stringToRosTemplate(properties.userName),
        OwnerID: ros.stringToRosTemplate(properties.ownerId),
        InstanceID: ros.stringToRosTemplate(properties.instanceId),
        IP: ros.stringToRosTemplate(properties.ip),
        Port: ros.stringToRosTemplate(properties.port),
        DatabaseName: ros.stringToRosTemplate(properties.databaseName),
        Region: ros.stringToRosTemplate(properties.region),
        InstanceType: ros.stringToRosTemplate(properties.instanceType),
        EngineName: ros.stringToRosTemplate(properties.engineName),
        Password: ros.stringToRosTemplate(properties.password),
    };
}
/**
 * Determine whether the given properties match those of a `SourceEndpointProperty`
 *
 * @param properties - the TypeScript properties of a `SourceEndpointProperty`
 *
 * @returns the result of the validation.
 */
function RosMigrationJob2_SourceEndpointPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('oracleSid', ros.validateString)(properties.oracleSid));
    errors.collect(ros.propertyValidator('userName', ros.validateString)(properties.userName));
    errors.collect(ros.propertyValidator('instanceId', ros.validateString)(properties.instanceId));
    errors.collect(ros.propertyValidator('ip', ros.validateString)(properties.ip));
    errors.collect(ros.propertyValidator('port', ros.validateString)(properties.port));
    errors.collect(ros.propertyValidator('vSwitchId', ros.validateString)(properties.vSwitchId));
    errors.collect(ros.propertyValidator('databaseName', ros.validateString)(properties.databaseName));
    errors.collect(ros.propertyValidator('engineName', ros.validateString)(properties.engineName));
    errors.collect(ros.propertyValidator('role', ros.validateString)(properties.role));
    errors.collect(ros.propertyValidator('ownerId', ros.validateString)(properties.ownerId));
    errors.collect(ros.propertyValidator('region', ros.validateString)(properties.region));
    errors.collect(ros.propertyValidator('instanceType', ros.requiredValidator)(properties.instanceType));
    errors.collect(ros.propertyValidator('instanceType', ros.validateString)(properties.instanceType));
    errors.collect(ros.propertyValidator('password', ros.validateString)(properties.password));
    return errors.wrap('supplied properties not correct for "SourceEndpointProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::DTS::MigrationJob2.SourceEndpoint` resource
 *
 * @param properties - the TypeScript properties of a `SourceEndpointProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::DTS::MigrationJob2.SourceEndpoint` resource.
 */
// @ts-ignore TS6133
function rosMigrationJob2SourceEndpointPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosMigrationJob2_SourceEndpointPropertyValidator(properties).assertSuccess();
    return {
        OracleSID: ros.stringToRosTemplate(properties.oracleSid),
        UserName: ros.stringToRosTemplate(properties.userName),
        InstanceID: ros.stringToRosTemplate(properties.instanceId),
        IP: ros.stringToRosTemplate(properties.ip),
        Port: ros.stringToRosTemplate(properties.port),
        VSwitchID: ros.stringToRosTemplate(properties.vSwitchId),
        DatabaseName: ros.stringToRosTemplate(properties.databaseName),
        EngineName: ros.stringToRosTemplate(properties.engineName),
        Role: ros.stringToRosTemplate(properties.role),
        OwnerID: ros.stringToRosTemplate(properties.ownerId),
        Region: ros.stringToRosTemplate(properties.region),
        InstanceType: ros.stringToRosTemplate(properties.instanceType),
        Password: ros.stringToRosTemplate(properties.password),
    };
}
/**
 * Determine whether the given properties match those of a `RosSubscriptionJob2Props`
 *
 * @param properties - the TypeScript properties of a `RosSubscriptionJob2Props`
 *
 * @returns the result of the validation.
 */
function RosSubscriptionJob2PropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    if (properties.status && (typeof properties.status) !== 'object') {
        errors.collect(ros.propertyValidator('status', ros.validateAllowedValues)({
            data: properties.status,
            allowedValues: ["Subscribing", "Suspending", "Stopping"],
        }));
    }
    errors.collect(ros.propertyValidator('status', ros.validateString)(properties.status));
    errors.collect(ros.propertyValidator('reserve', ros.hashValidator(ros.validateAny))(properties.reserve));
    errors.collect(ros.propertyValidator('delayPhone', ros.validateString)(properties.delayPhone));
    errors.collect(ros.propertyValidator('dedicatedClusterId', ros.validateString)(properties.dedicatedClusterId));
    errors.collect(ros.propertyValidator('errorNotice', ros.validateBoolean)(properties.errorNotice));
    errors.collect(ros.propertyValidator('dtsJobName', ros.requiredValidator)(properties.dtsJobName));
    errors.collect(ros.propertyValidator('dtsJobName', ros.validateString)(properties.dtsJobName));
    errors.collect(ros.propertyValidator('delayRuleTime', ros.validateNumber)(properties.delayRuleTime));
    errors.collect(ros.propertyValidator('dtsInstanceId', ros.validateString)(properties.dtsInstanceId));
    errors.collect(ros.propertyValidator('dbList', ros.requiredValidator)(properties.dbList));
    errors.collect(ros.propertyValidator('dbList', ros.hashValidator(ros.validateAny))(properties.dbList));
    errors.collect(ros.propertyValidator('dtsBisLabel', ros.validateString)(properties.dtsBisLabel));
    errors.collect(ros.propertyValidator('subscriptionDataType', RosSubscriptionJob2_SubscriptionDataTypePropertyValidator)(properties.subscriptionDataType));
    errors.collect(ros.propertyValidator('checkpoint', ros.validateString)(properties.checkpoint));
    errors.collect(ros.propertyValidator('delayNotice', ros.validateBoolean)(properties.delayNotice));
    errors.collect(ros.propertyValidator('dtsJobId', ros.validateString)(properties.dtsJobId));
    errors.collect(ros.propertyValidator('subscriptionInstance', ros.requiredValidator)(properties.subscriptionInstance));
    errors.collect(ros.propertyValidator('subscriptionInstance', RosSubscriptionJob2_SubscriptionInstancePropertyValidator)(properties.subscriptionInstance));
    errors.collect(ros.propertyValidator('sourceEndpoint', ros.requiredValidator)(properties.sourceEndpoint));
    errors.collect(ros.propertyValidator('sourceEndpoint', RosSubscriptionJob2_SourceEndpointPropertyValidator)(properties.sourceEndpoint));
    errors.collect(ros.propertyValidator('errorPhone', ros.validateString)(properties.errorPhone));
    return errors.wrap('supplied properties not correct for "RosSubscriptionJob2Props"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::DTS::SubscriptionJob2` resource
 *
 * @param properties - the TypeScript properties of a `RosSubscriptionJob2Props`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::DTS::SubscriptionJob2` resource.
 */
// @ts-ignore TS6133
function rosSubscriptionJob2PropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosSubscriptionJob2PropsValidator(properties).assertSuccess();
    }
    return {
        DbList: ros.hashMapper(ros.objectToRosTemplate)(properties.dbList),
        DtsJobName: ros.stringToRosTemplate(properties.dtsJobName),
        SourceEndpoint: rosSubscriptionJob2SourceEndpointPropertyToRosTemplate(properties.sourceEndpoint),
        SubscriptionInstance: rosSubscriptionJob2SubscriptionInstancePropertyToRosTemplate(properties.subscriptionInstance),
        Checkpoint: ros.stringToRosTemplate(properties.checkpoint),
        DedicatedClusterId: ros.stringToRosTemplate(properties.dedicatedClusterId),
        DelayNotice: ros.booleanToRosTemplate(properties.delayNotice),
        DelayPhone: ros.stringToRosTemplate(properties.delayPhone),
        DelayRuleTime: ros.numberToRosTemplate(properties.delayRuleTime),
        DtsBisLabel: ros.stringToRosTemplate(properties.dtsBisLabel),
        DtsInstanceId: ros.stringToRosTemplate(properties.dtsInstanceId),
        DtsJobId: ros.stringToRosTemplate(properties.dtsJobId),
        ErrorNotice: ros.booleanToRosTemplate(properties.errorNotice),
        ErrorPhone: ros.stringToRosTemplate(properties.errorPhone),
        Reserve: ros.hashMapper(ros.objectToRosTemplate)(properties.reserve),
        Status: ros.stringToRosTemplate(properties.status),
        SubscriptionDataType: rosSubscriptionJob2SubscriptionDataTypePropertyToRosTemplate(properties.subscriptionDataType),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::DTS::SubscriptionJob2`.
 * @Note This class does not contain additional functions, so it is recommended to use the `SubscriptionJob2` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-dts-subscriptionjob2
 */
class RosSubscriptionJob2 extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosSubscriptionJob2.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrDtsInstanceId = this.getAtt('DtsInstanceId');
        this.attrDtsJobId = this.getAtt('DtsJobId');
        this.attrDtsJobName = this.getAtt('DtsJobName');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.dbList = props.dbList;
        this.dtsJobName = props.dtsJobName;
        this.sourceEndpoint = props.sourceEndpoint;
        this.subscriptionInstance = props.subscriptionInstance;
        this.checkpoint = props.checkpoint;
        this.dedicatedClusterId = props.dedicatedClusterId;
        this.delayNotice = props.delayNotice;
        this.delayPhone = props.delayPhone;
        this.delayRuleTime = props.delayRuleTime;
        this.dtsBisLabel = props.dtsBisLabel;
        this.dtsInstanceId = props.dtsInstanceId;
        this.dtsJobId = props.dtsJobId;
        this.errorNotice = props.errorNotice;
        this.errorPhone = props.errorPhone;
        this.reserve = props.reserve;
        this.status = props.status;
        this.subscriptionDataType = props.subscriptionDataType;
    }
    get rosProperties() {
        return {
            dbList: this.dbList,
            dtsJobName: this.dtsJobName,
            sourceEndpoint: this.sourceEndpoint,
            subscriptionInstance: this.subscriptionInstance,
            checkpoint: this.checkpoint,
            dedicatedClusterId: this.dedicatedClusterId,
            delayNotice: this.delayNotice,
            delayPhone: this.delayPhone,
            delayRuleTime: this.delayRuleTime,
            dtsBisLabel: this.dtsBisLabel,
            dtsInstanceId: this.dtsInstanceId,
            dtsJobId: this.dtsJobId,
            errorNotice: this.errorNotice,
            errorPhone: this.errorPhone,
            reserve: this.reserve,
            status: this.status,
            subscriptionDataType: this.subscriptionDataType,
        };
    }
    renderProperties(props) {
        return rosSubscriptionJob2PropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosSubscriptionJob2 = RosSubscriptionJob2;
/**
 * The resource type name for this resource class.
 */
RosSubscriptionJob2.ROS_RESOURCE_TYPE_NAME = "ALIYUN::DTS::SubscriptionJob2";
/**
 * Determine whether the given properties match those of a `SourceEndpointProperty`
 *
 * @param properties - the TypeScript properties of a `SourceEndpointProperty`
 *
 * @returns the result of the validation.
 */
function RosSubscriptionJob2_SourceEndpointPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('oracleSid', ros.validateString)(properties.oracleSid));
    errors.collect(ros.propertyValidator('userName', ros.validateString)(properties.userName));
    errors.collect(ros.propertyValidator('instanceId', ros.validateString)(properties.instanceId));
    errors.collect(ros.propertyValidator('ip', ros.validateString)(properties.ip));
    errors.collect(ros.propertyValidator('port', ros.validateString)(properties.port));
    errors.collect(ros.propertyValidator('vSwitchId', ros.validateString)(properties.vSwitchId));
    errors.collect(ros.propertyValidator('databaseName', ros.validateString)(properties.databaseName));
    errors.collect(ros.propertyValidator('engineName', ros.validateString)(properties.engineName));
    errors.collect(ros.propertyValidator('role', ros.validateString)(properties.role));
    errors.collect(ros.propertyValidator('ownerId', ros.validateString)(properties.ownerId));
    errors.collect(ros.propertyValidator('region', ros.validateString)(properties.region));
    errors.collect(ros.propertyValidator('instanceType', ros.validateString)(properties.instanceType));
    errors.collect(ros.propertyValidator('password', ros.validateString)(properties.password));
    return errors.wrap('supplied properties not correct for "SourceEndpointProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::DTS::SubscriptionJob2.SourceEndpoint` resource
 *
 * @param properties - the TypeScript properties of a `SourceEndpointProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::DTS::SubscriptionJob2.SourceEndpoint` resource.
 */
// @ts-ignore TS6133
function rosSubscriptionJob2SourceEndpointPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosSubscriptionJob2_SourceEndpointPropertyValidator(properties).assertSuccess();
    return {
        OracleSID: ros.stringToRosTemplate(properties.oracleSid),
        UserName: ros.stringToRosTemplate(properties.userName),
        InstanceID: ros.stringToRosTemplate(properties.instanceId),
        IP: ros.stringToRosTemplate(properties.ip),
        Port: ros.stringToRosTemplate(properties.port),
        VSwitchID: ros.stringToRosTemplate(properties.vSwitchId),
        DatabaseName: ros.stringToRosTemplate(properties.databaseName),
        EngineName: ros.stringToRosTemplate(properties.engineName),
        Role: ros.stringToRosTemplate(properties.role),
        OwnerID: ros.stringToRosTemplate(properties.ownerId),
        Region: ros.stringToRosTemplate(properties.region),
        InstanceType: ros.stringToRosTemplate(properties.instanceType),
        Password: ros.stringToRosTemplate(properties.password),
    };
}
/**
 * Determine whether the given properties match those of a `SubscriptionDataTypeProperty`
 *
 * @param properties - the TypeScript properties of a `SubscriptionDataTypeProperty`
 *
 * @returns the result of the validation.
 */
function RosSubscriptionJob2_SubscriptionDataTypePropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('dml', ros.validateBoolean)(properties.dml));
    errors.collect(ros.propertyValidator('ddl', ros.validateBoolean)(properties.ddl));
    return errors.wrap('supplied properties not correct for "SubscriptionDataTypeProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::DTS::SubscriptionJob2.SubscriptionDataType` resource
 *
 * @param properties - the TypeScript properties of a `SubscriptionDataTypeProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::DTS::SubscriptionJob2.SubscriptionDataType` resource.
 */
// @ts-ignore TS6133
function rosSubscriptionJob2SubscriptionDataTypePropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosSubscriptionJob2_SubscriptionDataTypePropertyValidator(properties).assertSuccess();
    return {
        DML: ros.booleanToRosTemplate(properties.dml),
        DDL: ros.booleanToRosTemplate(properties.ddl),
    };
}
/**
 * Determine whether the given properties match those of a `SubscriptionInstanceProperty`
 *
 * @param properties - the TypeScript properties of a `SubscriptionInstanceProperty`
 *
 * @returns the result of the validation.
 */
function RosSubscriptionJob2_SubscriptionInstancePropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('vpcId', ros.validateString)(properties.vpcId));
    errors.collect(ros.propertyValidator('networkType', ros.requiredValidator)(properties.networkType));
    errors.collect(ros.propertyValidator('networkType', ros.validateString)(properties.networkType));
    errors.collect(ros.propertyValidator('vSwitchId', ros.validateString)(properties.vSwitchId));
    return errors.wrap('supplied properties not correct for "SubscriptionInstanceProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::DTS::SubscriptionJob2.SubscriptionInstance` resource
 *
 * @param properties - the TypeScript properties of a `SubscriptionInstanceProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::DTS::SubscriptionJob2.SubscriptionInstance` resource.
 */
// @ts-ignore TS6133
function rosSubscriptionJob2SubscriptionInstancePropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosSubscriptionJob2_SubscriptionInstancePropertyValidator(properties).assertSuccess();
    return {
        VPCId: ros.stringToRosTemplate(properties.vpcId),
        NetworkType: ros.stringToRosTemplate(properties.networkType),
        VSwitchId: ros.stringToRosTemplate(properties.vSwitchId),
    };
}
/**
 * Determine whether the given properties match those of a `RosSynchronizationJob2Props`
 *
 * @param properties - the TypeScript properties of a `RosSynchronizationJob2Props`
 *
 * @returns the result of the validation.
 */
function RosSynchronizationJob2PropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    if (properties.status && (typeof properties.status) !== 'object') {
        errors.collect(ros.propertyValidator('status', ros.validateAllowedValues)({
            data: properties.status,
            allowedValues: ["Synchronizing", "Suspending", "Stopping"],
        }));
    }
    errors.collect(ros.propertyValidator('status', ros.validateString)(properties.status));
    errors.collect(ros.propertyValidator('reserve', ros.hashValidator(ros.validateAny))(properties.reserve));
    errors.collect(ros.propertyValidator('dataSynchronization', ros.requiredValidator)(properties.dataSynchronization));
    errors.collect(ros.propertyValidator('dataSynchronization', ros.validateBoolean)(properties.dataSynchronization));
    errors.collect(ros.propertyValidator('delayPhone', ros.validateString)(properties.delayPhone));
    errors.collect(ros.propertyValidator('dedicatedClusterId', ros.validateString)(properties.dedicatedClusterId));
    errors.collect(ros.propertyValidator('errorNotice', ros.validateBoolean)(properties.errorNotice));
    errors.collect(ros.propertyValidator('dtsJobName', ros.requiredValidator)(properties.dtsJobName));
    errors.collect(ros.propertyValidator('dtsJobName', ros.validateString)(properties.dtsJobName));
    errors.collect(ros.propertyValidator('delayRuleTime', ros.validateNumber)(properties.delayRuleTime));
    errors.collect(ros.propertyValidator('dtsInstanceId', ros.validateString)(properties.dtsInstanceId));
    errors.collect(ros.propertyValidator('dbList', ros.requiredValidator)(properties.dbList));
    errors.collect(ros.propertyValidator('dbList', ros.hashValidator(ros.validateAny))(properties.dbList));
    errors.collect(ros.propertyValidator('fileOssUrl', ros.validateString)(properties.fileOssUrl));
    errors.collect(ros.propertyValidator('dataCheckConfigure', RosSynchronizationJob2_DataCheckConfigurePropertyValidator)(properties.dataCheckConfigure));
    errors.collect(ros.propertyValidator('dtsBisLabel', ros.validateString)(properties.dtsBisLabel));
    errors.collect(ros.propertyValidator('checkpoint', ros.validateString)(properties.checkpoint));
    errors.collect(ros.propertyValidator('disasterRecoveryJob', ros.validateBoolean)(properties.disasterRecoveryJob));
    errors.collect(ros.propertyValidator('dtsJobId', ros.validateString)(properties.dtsJobId));
    errors.collect(ros.propertyValidator('delayNotice', ros.validateBoolean)(properties.delayNotice));
    errors.collect(ros.propertyValidator('dataInitialization', ros.requiredValidator)(properties.dataInitialization));
    errors.collect(ros.propertyValidator('dataInitialization', ros.validateBoolean)(properties.dataInitialization));
    errors.collect(ros.propertyValidator('destinationEndpoint', ros.requiredValidator)(properties.destinationEndpoint));
    errors.collect(ros.propertyValidator('destinationEndpoint', RosSynchronizationJob2_DestinationEndpointPropertyValidator)(properties.destinationEndpoint));
    errors.collect(ros.propertyValidator('sourceEndpoint', ros.requiredValidator)(properties.sourceEndpoint));
    errors.collect(ros.propertyValidator('sourceEndpoint', RosSynchronizationJob2_SourceEndpointPropertyValidator)(properties.sourceEndpoint));
    errors.collect(ros.propertyValidator('errorPhone', ros.validateString)(properties.errorPhone));
    errors.collect(ros.propertyValidator('structureInitialization', ros.requiredValidator)(properties.structureInitialization));
    errors.collect(ros.propertyValidator('structureInitialization', ros.validateBoolean)(properties.structureInitialization));
    errors.collect(ros.propertyValidator('synchronizationDirection', ros.validateString)(properties.synchronizationDirection));
    return errors.wrap('supplied properties not correct for "RosSynchronizationJob2Props"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::DTS::SynchronizationJob2` resource
 *
 * @param properties - the TypeScript properties of a `RosSynchronizationJob2Props`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::DTS::SynchronizationJob2` resource.
 */
// @ts-ignore TS6133
function rosSynchronizationJob2PropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosSynchronizationJob2PropsValidator(properties).assertSuccess();
    }
    return {
        DataInitialization: ros.booleanToRosTemplate(properties.dataInitialization),
        DataSynchronization: ros.booleanToRosTemplate(properties.dataSynchronization),
        DbList: ros.hashMapper(ros.objectToRosTemplate)(properties.dbList),
        DestinationEndpoint: rosSynchronizationJob2DestinationEndpointPropertyToRosTemplate(properties.destinationEndpoint),
        DtsJobName: ros.stringToRosTemplate(properties.dtsJobName),
        SourceEndpoint: rosSynchronizationJob2SourceEndpointPropertyToRosTemplate(properties.sourceEndpoint),
        StructureInitialization: ros.booleanToRosTemplate(properties.structureInitialization),
        Checkpoint: ros.stringToRosTemplate(properties.checkpoint),
        DataCheckConfigure: rosSynchronizationJob2DataCheckConfigurePropertyToRosTemplate(properties.dataCheckConfigure),
        DedicatedClusterId: ros.stringToRosTemplate(properties.dedicatedClusterId),
        DelayNotice: ros.booleanToRosTemplate(properties.delayNotice),
        DelayPhone: ros.stringToRosTemplate(properties.delayPhone),
        DelayRuleTime: ros.numberToRosTemplate(properties.delayRuleTime),
        DisasterRecoveryJob: ros.booleanToRosTemplate(properties.disasterRecoveryJob),
        DtsBisLabel: ros.stringToRosTemplate(properties.dtsBisLabel),
        DtsInstanceId: ros.stringToRosTemplate(properties.dtsInstanceId),
        DtsJobId: ros.stringToRosTemplate(properties.dtsJobId),
        ErrorNotice: ros.booleanToRosTemplate(properties.errorNotice),
        ErrorPhone: ros.stringToRosTemplate(properties.errorPhone),
        FileOssUrl: ros.stringToRosTemplate(properties.fileOssUrl),
        Reserve: ros.hashMapper(ros.objectToRosTemplate)(properties.reserve),
        Status: ros.stringToRosTemplate(properties.status),
        SynchronizationDirection: ros.stringToRosTemplate(properties.synchronizationDirection),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::DTS::SynchronizationJob2`DATASOURCE::DTS::MigrationInstances is used to query information about Data Transmission Service (DTS) tasks.
 * @Note This class does not contain additional functions, so it is recommended to use the `SynchronizationJob2` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-dts-synchronizationjob2
 */
class RosSynchronizationJob2 extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosSynchronizationJob2.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrDtsInstanceId = this.getAtt('DtsInstanceId');
        this.attrDtsJobId = this.getAtt('DtsJobId');
        this.attrDtsJobName = this.getAtt('DtsJobName');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.dataInitialization = props.dataInitialization;
        this.dataSynchronization = props.dataSynchronization;
        this.dbList = props.dbList;
        this.destinationEndpoint = props.destinationEndpoint;
        this.dtsJobName = props.dtsJobName;
        this.sourceEndpoint = props.sourceEndpoint;
        this.structureInitialization = props.structureInitialization;
        this.checkpoint = props.checkpoint;
        this.dataCheckConfigure = props.dataCheckConfigure;
        this.dedicatedClusterId = props.dedicatedClusterId;
        this.delayNotice = props.delayNotice;
        this.delayPhone = props.delayPhone;
        this.delayRuleTime = props.delayRuleTime;
        this.disasterRecoveryJob = props.disasterRecoveryJob;
        this.dtsBisLabel = props.dtsBisLabel;
        this.dtsInstanceId = props.dtsInstanceId;
        this.dtsJobId = props.dtsJobId;
        this.errorNotice = props.errorNotice;
        this.errorPhone = props.errorPhone;
        this.fileOssUrl = props.fileOssUrl;
        this.reserve = props.reserve;
        this.status = props.status;
        this.synchronizationDirection = props.synchronizationDirection;
    }
    get rosProperties() {
        return {
            dataInitialization: this.dataInitialization,
            dataSynchronization: this.dataSynchronization,
            dbList: this.dbList,
            destinationEndpoint: this.destinationEndpoint,
            dtsJobName: this.dtsJobName,
            sourceEndpoint: this.sourceEndpoint,
            structureInitialization: this.structureInitialization,
            checkpoint: this.checkpoint,
            dataCheckConfigure: this.dataCheckConfigure,
            dedicatedClusterId: this.dedicatedClusterId,
            delayNotice: this.delayNotice,
            delayPhone: this.delayPhone,
            delayRuleTime: this.delayRuleTime,
            disasterRecoveryJob: this.disasterRecoveryJob,
            dtsBisLabel: this.dtsBisLabel,
            dtsInstanceId: this.dtsInstanceId,
            dtsJobId: this.dtsJobId,
            errorNotice: this.errorNotice,
            errorPhone: this.errorPhone,
            fileOssUrl: this.fileOssUrl,
            reserve: this.reserve,
            status: this.status,
            synchronizationDirection: this.synchronizationDirection,
        };
    }
    renderProperties(props) {
        return rosSynchronizationJob2PropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosSynchronizationJob2 = RosSynchronizationJob2;
/**
 * The resource type name for this resource class.
 */
RosSynchronizationJob2.ROS_RESOURCE_TYPE_NAME = "ALIYUN::DTS::SynchronizationJob2";
/**
 * Determine whether the given properties match those of a `DataCheckConfigureProperty`
 *
 * @param properties - the TypeScript properties of a `DataCheckConfigureProperty`
 *
 * @returns the result of the validation.
 */
function RosSynchronizationJob2_DataCheckConfigurePropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    if (properties.fullCheckMaxReadRps && (typeof properties.fullCheckMaxReadRps) !== 'object') {
        errors.collect(ros.propertyValidator('fullCheckMaxReadRps', ros.validateRange)({
            data: properties.fullCheckMaxReadRps,
            min: 0,
            max: 9007199254740991,
        }));
    }
    errors.collect(ros.propertyValidator('fullCheckMaxReadRps', ros.validateNumber)(properties.fullCheckMaxReadRps));
    errors.collect(ros.propertyValidator('dataCheckNoticePhone', ros.validateString)(properties.dataCheckNoticePhone));
    errors.collect(ros.propertyValidator('incrementalCheckDelayNotice', ros.validateBoolean)(properties.incrementalCheckDelayNotice));
    errors.collect(ros.propertyValidator('incrementalCheckDelayNoticeValue', ros.validateNumber)(properties.incrementalCheckDelayNoticeValue));
    if (properties.incrementalCheckDelayNoticePeriod && (typeof properties.incrementalCheckDelayNoticePeriod) !== 'object') {
        errors.collect(ros.propertyValidator('incrementalCheckDelayNoticePeriod', ros.validateAllowedValues)({
            data: properties.incrementalCheckDelayNoticePeriod,
            allowedValues: [1, 2, 3, 4],
        }));
    }
    errors.collect(ros.propertyValidator('incrementalCheckDelayNoticePeriod', ros.validateNumber)(properties.incrementalCheckDelayNoticePeriod));
    errors.collect(ros.propertyValidator('dataCheckDbList', ros.validateString)(properties.dataCheckDbList));
    if (properties.checkMaximumHourEnable && (typeof properties.checkMaximumHourEnable) !== 'object') {
        errors.collect(ros.propertyValidator('checkMaximumHourEnable', ros.validateAllowedValues)({
            data: properties.checkMaximumHourEnable,
            allowedValues: [0, 1],
        }));
    }
    errors.collect(ros.propertyValidator('checkMaximumHourEnable', ros.validateNumber)(properties.checkMaximumHourEnable));
    if (properties.fullCheckRatio && (typeof properties.fullCheckRatio) !== 'object') {
        errors.collect(ros.propertyValidator('fullCheckRatio', ros.validateRange)({
            data: properties.fullCheckRatio,
            min: 10,
            max: 100,
        }));
    }
    errors.collect(ros.propertyValidator('fullCheckRatio', ros.validateNumber)(properties.fullCheckRatio));
    if (properties.checkMaximumHour && (typeof properties.checkMaximumHour) !== 'object') {
        errors.collect(ros.propertyValidator('checkMaximumHour', ros.validateRange)({
            data: properties.checkMaximumHour,
            min: 1,
            max: 72,
        }));
    }
    errors.collect(ros.propertyValidator('checkMaximumHour', ros.validateNumber)(properties.checkMaximumHour));
    errors.collect(ros.propertyValidator('fullCheckFixData', ros.validateBoolean)(properties.fullCheckFixData));
    if (properties.fullCheckModel && (typeof properties.fullCheckModel) !== 'object') {
        errors.collect(ros.propertyValidator('fullCheckModel', ros.validateAllowedValues)({
            data: properties.fullCheckModel,
            allowedValues: [1, 2],
        }));
    }
    errors.collect(ros.propertyValidator('fullCheckModel', ros.validateNumber)(properties.fullCheckModel));
    errors.collect(ros.propertyValidator('incrementalCheckValidFailNoticeValue', ros.validateNumber)(properties.incrementalCheckValidFailNoticeValue));
    errors.collect(ros.propertyValidator('incrementalDataCheck', ros.validateBoolean)(properties.incrementalDataCheck));
    errors.collect(ros.propertyValidator('incrementalCheckValidFailNoticeTimes', ros.validateNumber)(properties.incrementalCheckValidFailNoticeTimes));
    if (properties.fullCheckMaxReadBps && (typeof properties.fullCheckMaxReadBps) !== 'object') {
        errors.collect(ros.propertyValidator('fullCheckMaxReadBps', ros.validateRange)({
            data: properties.fullCheckMaxReadBps,
            min: 0,
            max: 9007199254740991,
        }));
    }
    errors.collect(ros.propertyValidator('fullCheckMaxReadBps', ros.validateNumber)(properties.fullCheckMaxReadBps));
    errors.collect(ros.propertyValidator('fullCheckValidFailNotice', ros.validateBoolean)(properties.fullCheckValidFailNotice));
    errors.collect(ros.propertyValidator('fullCheckErrorNotice', ros.validateBoolean)(properties.fullCheckErrorNotice));
    if (properties.incrementalCheckValidFailNoticePeriod && (typeof properties.incrementalCheckValidFailNoticePeriod) !== 'object') {
        errors.collect(ros.propertyValidator('incrementalCheckValidFailNoticePeriod', ros.validateAllowedValues)({
            data: properties.incrementalCheckValidFailNoticePeriod,
            allowedValues: [1, 2, 3, 4],
        }));
    }
    errors.collect(ros.propertyValidator('incrementalCheckValidFailNoticePeriod', ros.validateNumber)(properties.incrementalCheckValidFailNoticePeriod));
    errors.collect(ros.propertyValidator('incrementalCheckDelayNoticeTimes', ros.validateNumber)(properties.incrementalCheckDelayNoticeTimes));
    errors.collect(ros.propertyValidator('fullCheckReferEndpoint', ros.validateString)(properties.fullCheckReferEndpoint));
    errors.collect(ros.propertyValidator('fullDataCheck', ros.validateBoolean)(properties.fullDataCheck));
    errors.collect(ros.propertyValidator('incrementalCheckValidFailNotice', ros.validateBoolean)(properties.incrementalCheckValidFailNotice));
    errors.collect(ros.propertyValidator('fullCheckNoticeValue', ros.validateNumber)(properties.fullCheckNoticeValue));
    errors.collect(ros.propertyValidator('incrementalCheckErrorNotice', ros.validateBoolean)(properties.incrementalCheckErrorNotice));
    return errors.wrap('supplied properties not correct for "DataCheckConfigureProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::DTS::SynchronizationJob2.DataCheckConfigure` resource
 *
 * @param properties - the TypeScript properties of a `DataCheckConfigureProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::DTS::SynchronizationJob2.DataCheckConfigure` resource.
 */
// @ts-ignore TS6133
function rosSynchronizationJob2DataCheckConfigurePropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosSynchronizationJob2_DataCheckConfigurePropertyValidator(properties).assertSuccess();
    return {
        fullCheckMaxReadRps: ros.numberToRosTemplate(properties.fullCheckMaxReadRps),
        dataCheckNoticePhone: ros.stringToRosTemplate(properties.dataCheckNoticePhone),
        incrementalCheckDelayNotice: ros.booleanToRosTemplate(properties.incrementalCheckDelayNotice),
        incrementalCheckDelayNoticeValue: ros.numberToRosTemplate(properties.incrementalCheckDelayNoticeValue),
        incrementalCheckDelayNoticePeriod: ros.numberToRosTemplate(properties.incrementalCheckDelayNoticePeriod),
        dataCheckDbList: ros.stringToRosTemplate(properties.dataCheckDbList),
        checkMaximumHourEnable: ros.numberToRosTemplate(properties.checkMaximumHourEnable),
        fullCheckRatio: ros.numberToRosTemplate(properties.fullCheckRatio),
        checkMaximumHour: ros.numberToRosTemplate(properties.checkMaximumHour),
        fullCheckFixData: ros.booleanToRosTemplate(properties.fullCheckFixData),
        fullCheckModel: ros.numberToRosTemplate(properties.fullCheckModel),
        incrementalCheckValidFailNoticeValue: ros.numberToRosTemplate(properties.incrementalCheckValidFailNoticeValue),
        incrementalDataCheck: ros.booleanToRosTemplate(properties.incrementalDataCheck),
        incrementalCheckValidFailNoticeTimes: ros.numberToRosTemplate(properties.incrementalCheckValidFailNoticeTimes),
        fullCheckMaxReadBps: ros.numberToRosTemplate(properties.fullCheckMaxReadBps),
        fullCheckValidFailNotice: ros.booleanToRosTemplate(properties.fullCheckValidFailNotice),
        fullCheckErrorNotice: ros.booleanToRosTemplate(properties.fullCheckErrorNotice),
        incrementalCheckValidFailNoticePeriod: ros.numberToRosTemplate(properties.incrementalCheckValidFailNoticePeriod),
        incrementalCheckDelayNoticeTimes: ros.numberToRosTemplate(properties.incrementalCheckDelayNoticeTimes),
        fullCheckReferEndpoint: ros.stringToRosTemplate(properties.fullCheckReferEndpoint),
        fullDataCheck: ros.booleanToRosTemplate(properties.fullDataCheck),
        incrementalCheckValidFailNotice: ros.booleanToRosTemplate(properties.incrementalCheckValidFailNotice),
        fullCheckNoticeValue: ros.numberToRosTemplate(properties.fullCheckNoticeValue),
        incrementalCheckErrorNotice: ros.booleanToRosTemplate(properties.incrementalCheckErrorNotice),
    };
}
/**
 * Determine whether the given properties match those of a `DestinationEndpointProperty`
 *
 * @param properties - the TypeScript properties of a `DestinationEndpointProperty`
 *
 * @returns the result of the validation.
 */
function RosSynchronizationJob2_DestinationEndpointPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('role', ros.validateString)(properties.role));
    errors.collect(ros.propertyValidator('oracleSid', ros.validateString)(properties.oracleSid));
    errors.collect(ros.propertyValidator('userName', ros.validateString)(properties.userName));
    errors.collect(ros.propertyValidator('ownerId', ros.validateString)(properties.ownerId));
    errors.collect(ros.propertyValidator('instanceId', ros.validateString)(properties.instanceId));
    errors.collect(ros.propertyValidator('ip', ros.validateString)(properties.ip));
    errors.collect(ros.propertyValidator('port', ros.validateString)(properties.port));
    errors.collect(ros.propertyValidator('databaseName', ros.validateString)(properties.databaseName));
    errors.collect(ros.propertyValidator('region', ros.validateString)(properties.region));
    errors.collect(ros.propertyValidator('instanceType', ros.requiredValidator)(properties.instanceType));
    errors.collect(ros.propertyValidator('instanceType', ros.validateString)(properties.instanceType));
    errors.collect(ros.propertyValidator('engineName', ros.validateString)(properties.engineName));
    errors.collect(ros.propertyValidator('password', ros.validateString)(properties.password));
    return errors.wrap('supplied properties not correct for "DestinationEndpointProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::DTS::SynchronizationJob2.DestinationEndpoint` resource
 *
 * @param properties - the TypeScript properties of a `DestinationEndpointProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::DTS::SynchronizationJob2.DestinationEndpoint` resource.
 */
// @ts-ignore TS6133
function rosSynchronizationJob2DestinationEndpointPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosSynchronizationJob2_DestinationEndpointPropertyValidator(properties).assertSuccess();
    return {
        Role: ros.stringToRosTemplate(properties.role),
        OracleSID: ros.stringToRosTemplate(properties.oracleSid),
        UserName: ros.stringToRosTemplate(properties.userName),
        OwnerID: ros.stringToRosTemplate(properties.ownerId),
        InstanceID: ros.stringToRosTemplate(properties.instanceId),
        IP: ros.stringToRosTemplate(properties.ip),
        Port: ros.stringToRosTemplate(properties.port),
        DatabaseName: ros.stringToRosTemplate(properties.databaseName),
        Region: ros.stringToRosTemplate(properties.region),
        InstanceType: ros.stringToRosTemplate(properties.instanceType),
        EngineName: ros.stringToRosTemplate(properties.engineName),
        Password: ros.stringToRosTemplate(properties.password),
    };
}
/**
 * Determine whether the given properties match those of a `SourceEndpointProperty`
 *
 * @param properties - the TypeScript properties of a `SourceEndpointProperty`
 *
 * @returns the result of the validation.
 */
function RosSynchronizationJob2_SourceEndpointPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('oracleSid', ros.validateString)(properties.oracleSid));
    errors.collect(ros.propertyValidator('userName', ros.validateString)(properties.userName));
    errors.collect(ros.propertyValidator('instanceId', ros.validateString)(properties.instanceId));
    errors.collect(ros.propertyValidator('ip', ros.validateString)(properties.ip));
    errors.collect(ros.propertyValidator('port', ros.validateString)(properties.port));
    errors.collect(ros.propertyValidator('vSwitchId', ros.validateString)(properties.vSwitchId));
    errors.collect(ros.propertyValidator('databaseName', ros.validateString)(properties.databaseName));
    errors.collect(ros.propertyValidator('engineName', ros.validateString)(properties.engineName));
    errors.collect(ros.propertyValidator('role', ros.validateString)(properties.role));
    errors.collect(ros.propertyValidator('ownerId', ros.validateString)(properties.ownerId));
    errors.collect(ros.propertyValidator('region', ros.validateString)(properties.region));
    errors.collect(ros.propertyValidator('instanceType', ros.requiredValidator)(properties.instanceType));
    errors.collect(ros.propertyValidator('instanceType', ros.validateString)(properties.instanceType));
    errors.collect(ros.propertyValidator('password', ros.validateString)(properties.password));
    return errors.wrap('supplied properties not correct for "SourceEndpointProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::DTS::SynchronizationJob2.SourceEndpoint` resource
 *
 * @param properties - the TypeScript properties of a `SourceEndpointProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::DTS::SynchronizationJob2.SourceEndpoint` resource.
 */
// @ts-ignore TS6133
function rosSynchronizationJob2SourceEndpointPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosSynchronizationJob2_SourceEndpointPropertyValidator(properties).assertSuccess();
    return {
        OracleSID: ros.stringToRosTemplate(properties.oracleSid),
        UserName: ros.stringToRosTemplate(properties.userName),
        InstanceID: ros.stringToRosTemplate(properties.instanceId),
        IP: ros.stringToRosTemplate(properties.ip),
        Port: ros.stringToRosTemplate(properties.port),
        VSwitchID: ros.stringToRosTemplate(properties.vSwitchId),
        DatabaseName: ros.stringToRosTemplate(properties.databaseName),
        EngineName: ros.stringToRosTemplate(properties.engineName),
        Role: ros.stringToRosTemplate(properties.role),
        OwnerID: ros.stringToRosTemplate(properties.ownerId),
        Region: ros.stringToRosTemplate(properties.region),
        InstanceType: ros.stringToRosTemplate(properties.instanceType),
        Password: ros.stringToRosTemplate(properties.password),
    };
}
//# sourceMappingURL=data:application/json;base64,