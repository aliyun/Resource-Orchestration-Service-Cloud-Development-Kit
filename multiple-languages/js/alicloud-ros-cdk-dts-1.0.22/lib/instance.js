"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Instance = exports.InstanceProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const dts_generated_1 = require("./dts.generated");
Object.defineProperty(exports, "InstanceProperty", { enumerable: true, get: function () { return dts_generated_1.RosInstance; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::DTS::Instance`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosInstance`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-dts-instance
 */
class Instance extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosInstance = new dts_generated_1.RosInstance(this, id, {
            resourceGroupId: props.resourceGroupId,
            feeType: props.feeType,
            computeUnit: props.computeUnit,
            period: props.period,
            destinationRegion: props.destinationRegion,
            instanceClass: props.instanceClass,
            sourceEndpointEngineName: props.sourceEndpointEngineName,
            payType: props.payType,
            autoPay: props.autoPay,
            destinationEndpointEngineName: props.destinationEndpointEngineName,
            sourceRegion: props.sourceRegion,
            du: props.du,
            type: props.type,
            databaseCount: props.databaseCount,
            usedTime: props.usedTime,
            autoStart: props.autoStart,
            jobId: props.jobId,
            syncArchitecture: props.syncArchitecture,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosInstance;
        this.attrInstanceId = rosInstance.attrInstanceId;
        this.attrJobId = rosInstance.attrJobId;
    }
}
exports.Instance = Instance;
//# sourceMappingURL=data:application/json;base64,