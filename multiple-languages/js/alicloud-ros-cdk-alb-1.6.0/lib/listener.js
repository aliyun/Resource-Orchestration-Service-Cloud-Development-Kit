"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Listener = exports.ListenerProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const alb_generated_1 = require("./alb.generated");
Object.defineProperty(exports, "ListenerProperty", { enumerable: true, get: function () { return alb_generated_1.RosListener; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::ALB::Listener`, which is used to create an HTTP, HTTPS, or Quick UDP Internet Connections (QUIC) listener.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosListener`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-alb-listener
 */
class Listener extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosListener = new alb_generated_1.RosListener(this, id, {
            caEnabled: props.caEnabled,
            listenerPort: props.listenerPort,
            requestTimeout: props.requestTimeout,
            http2Enabled: props.http2Enabled,
            defaultActions: props.defaultActions,
            certificates: props.certificates,
            idleTimeout: props.idleTimeout,
            loadBalancerId: props.loadBalancerId,
            listenerProtocol: props.listenerProtocol,
            quicConfig: props.quicConfig,
            gzipEnabled: props.gzipEnabled,
            securityPolicyId: props.securityPolicyId,
            listenerStatus: props.listenerStatus,
            listenerDescription: props.listenerDescription,
            xForwardedForConfig: props.xForwardedForConfig,
            caCertificates: props.caCertificates,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosListener;
        this.attrListenerId = rosListener.attrListenerId;
    }
}
exports.Listener = Listener;
//# sourceMappingURL=data:application/json;base64,