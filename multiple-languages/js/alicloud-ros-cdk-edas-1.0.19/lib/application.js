"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Application = exports.ApplicationProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const edas_generated_1 = require("./edas.generated");
Object.defineProperty(exports, "ApplicationProperty", { enumerable: true, get: function () { return edas_generated_1.RosApplication; } });
/**
 * A ROS resource type:  `ALIYUN::EDAS::Application`
 */
class Application extends ros.Resource {
    /**
     * Create a new `ALIYUN::EDAS::Application`.
     *
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosApplication = new edas_generated_1.RosApplication(this, id, {
            componentIds: props.componentIds,
            logicalRegionId: props.logicalRegionId,
            applicationName: props.applicationName,
            description: props.description,
            resourceGroupId: props.resourceGroupId,
            ecuInfo: props.ecuInfo,
            healthCheckUrl: props.healthCheckUrl,
            clusterId: props.clusterId,
            packageType: props.packageType === undefined || props.packageType === null ? 'war' : props.packageType,
            deployment: props.deployment,
            buildPackId: props.buildPackId,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosApplication;
        this.attrAppId = rosApplication.attrAppId;
        this.attrPort = rosApplication.attrPort;
    }
}
exports.Application = Application;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwbGljYXRpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJhcHBsaWNhdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw4Q0FBOEM7QUFDOUMscURBQWtEO0FBRXZCLG9HQUZsQiwrQkFBYyxPQUV1QjtBQW1FOUM7O0dBRUc7QUFDSCxNQUFhLFdBQVksU0FBUSxHQUFHLENBQUMsUUFBUTtJQWlCekM7Ozs7OztPQU1HO0lBQ0gsWUFBWSxLQUFvQixFQUFFLEVBQVUsRUFBRSxLQUF1QixFQUFFLG1DQUEyQyxJQUFJO1FBQ2xILEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFakIsTUFBTSxjQUFjLEdBQUcsSUFBSSwrQkFBYyxDQUFDLElBQUksRUFBRSxFQUFFLEVBQUc7WUFDakQsWUFBWSxFQUFFLEtBQUssQ0FBQyxZQUFZO1lBQ2hDLGVBQWUsRUFBRSxLQUFLLENBQUMsZUFBZTtZQUN0QyxlQUFlLEVBQUUsS0FBSyxDQUFDLGVBQWU7WUFDdEMsV0FBVyxFQUFFLEtBQUssQ0FBQyxXQUFXO1lBQzlCLGVBQWUsRUFBRSxLQUFLLENBQUMsZUFBZTtZQUN0QyxPQUFPLEVBQUUsS0FBSyxDQUFDLE9BQU87WUFDdEIsY0FBYyxFQUFFLEtBQUssQ0FBQyxjQUFjO1lBQ3BDLFNBQVMsRUFBRSxLQUFLLENBQUMsU0FBUztZQUMxQixXQUFXLEVBQUUsS0FBSyxDQUFDLFdBQVcsS0FBSyxTQUFTLElBQUksS0FBSyxDQUFDLFdBQVcsS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFdBQVc7WUFDdEcsVUFBVSxFQUFFLEtBQUssQ0FBQyxVQUFVO1lBQzVCLFdBQVcsRUFBRSxLQUFLLENBQUMsV0FBVztTQUNqQyxFQUFFLGdDQUFnQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztRQUNwRixJQUFJLENBQUMsUUFBUSxHQUFHLGNBQWMsQ0FBQztRQUMvQixJQUFJLENBQUMsU0FBUyxHQUFHLGNBQWMsQ0FBQyxTQUFTLENBQUM7UUFDMUMsSUFBSSxDQUFDLFFBQVEsR0FBRyxjQUFjLENBQUMsUUFBUSxDQUFDO0lBQzVDLENBQUM7Q0FDSjtBQTVDRCxrQ0E0Q0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyByb3MgZnJvbSAnQGFsaWNsb3VkL3Jvcy1jZGstY29yZSc7XG5pbXBvcnQgeyBSb3NBcHBsaWNhdGlvbiB9IGZyb20gJy4vZWRhcy5nZW5lcmF0ZWQnO1xuLy8gR2VuZXJhdGVkIGZyb20gdGhlIEFsaUNsb3VkIFJPUyBSZXNvdXJjZSBTcGVjaWZpY2F0aW9uXG5leHBvcnQgeyBSb3NBcHBsaWNhdGlvbiBhcyBBcHBsaWNhdGlvblByb3BlcnR5IH07XG5cbi8qKlxuICogUHJvcGVydGllcyBmb3IgZGVmaW5pbmcgYSBgQUxJWVVOOjpFREFTOjpBcHBsaWNhdGlvbmBcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBBcHBsaWNhdGlvblByb3BzIHtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGFwcGxpY2F0aW9uTmFtZTogVGhlIGFwcGxpY2F0aW9uIG5hbWUgKG9ubHkgYWxsb3cgdGhlIHVzZSBvZiBudW1iZXJzLCBsZXR0ZXJzLCAtLCBfLCB1cCB0byAzNiBjaGFyYWN0ZXJzKVxuICAgICAqL1xuICAgIHJlYWRvbmx5IGFwcGxpY2F0aW9uTmFtZTogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgY2x1c3RlcklkOiBDbHVzdGVyIElEIG9mIEVDUyBhcHBsaWNhdGlvblxuICAgICAqL1xuICAgIHJlYWRvbmx5IGNsdXN0ZXJJZDogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgYnVpbGRQYWNrSWQ6IEVEQVMtQ29udGFpbmVyIGNvbnN0cnVjdCBhIHBhY2tldCBudW1iZXIgKGF2YWlsYWJsZSB2ZXJzaW9uIGxpc3QgYWNxdWlyZWQgdGhyb3VnaCB0aGUgTGlzdEJ1aWxkUGFjayBBUEkgKENvbmZpZ0lkIG9mIHJlc3BvbnNlKSBvciBcImNvbnRhaW5lciB2ZXJzaW9uXCIgdGFibGUgXCJCdWlsZGluZyBwYWNrZXQgbnVtYmVyXCIgY29sdW1uIGFjcXVpc2l0aW9uKS4gV2hlbiBjcmVhdGluZyBIU0YgYXBwbGljYXRpb24sIHRoaXMgcGFyYW1ldGVyIG11c3QgYmUgc3BlY2lmaWVkXG4gICAgICovXG4gICAgcmVhZG9ubHkgYnVpbGRQYWNrSWQ/OiBudW1iZXIgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBjb21wb25lbnRJZHM6IEFwcGxpY2F0aW9uIGNvbXBvbmVudCBJRCAoYXZhaWxhYmxlIHRocm91Z2ggdGhlIHF1ZXJ5IGludGVyZmFjZSB0byBvYnRhaW4gYSBsaXN0IG9mIGNvbXBvbmVudHMgdG8gdGhlIGludGVyZmFjZSBMaXN0Q29tcG9uZW50cyksIHdoZW4gY3JlYXRpbmcgdGhlIGFwcGxpY2F0aW9uIHJ1bnRpbWUgZW52aXJvbm1lbnQgdXNpbmcgQXBhY2hlIFRvbWNhdCAod2FyIHBhY2tldCBmb3JtYXQgRHViYm9cbiAgICAgKiBBcHBsaWNhdGlvbiByZXF1aXJlZCkgb3Igc3RhbmRhcmQgSmF2YSBhcHBsaWNhdGlvbiAoamFyIHBhY2thZ2UgZm9ybWF0IFNwcmluZyBCb290IC8gU3ByaW5nIENsb3VkIGFwcGxpY2F0aW9ucyByZXF1aXJlKSB5b3UgbmVlZCB0byBzcGVjaWZ5IHdoZW4gdGhlIG9wZXJhdGluZyBlbnZpcm9ubWVudC4gQ29tbW9ubHkgdXNlZCBhcHBsaWNhdGlvbiBjb21wb25lbnQgSUQgYW5kIG1lYW5pbmc6XG4gICAgICogNCByZXByZXNlbnRzIEFwYWNoZSBUb21jYXQgNy4wLjkxLDcgcmVwcmVzZW50ZWQgQXBhY2hlIFRvbWNhdCA4LjUuNDIsNSByZXByZXNlbnRlZCBPcGVuSkRLIDEuOC54LCA2IHJlcHJlc2VudHMgT3BlbkpES1xuICAgICAqIDEuNy54XG4gICAgICovXG4gICAgcmVhZG9ubHkgY29tcG9uZW50SWRzPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgZGVwbG95bWVudDogRGVwbG95IGFwcGxpY2F0aW9uIGluZm9ybWF0aW9uIHRvIEVDUyBjbHVzdGVyc1xuICAgICAqL1xuICAgIHJlYWRvbmx5IGRlcGxveW1lbnQ/OiBSb3NBcHBsaWNhdGlvbi5EZXBsb3ltZW50UHJvcGVydHkgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBkZXNjcmlwdGlvbjogRGVzY3JpcHRpdmUgaW5mb3JtYXRpb25cbiAgICAgKi9cbiAgICByZWFkb25seSBkZXNjcmlwdGlvbj86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGVjdUluZm86IE1hY2hpbmUgY2FwYWNpdHkgaXMgbmVlZGVkIGVjdV9pZCAoRUNTIEV4YW1wbGVzIGludHJvZHVjaW5nIGFub3RoZXIgdW5pcXVlIGlkZW50aXR5IEVEQVMgRURBUyksIHRoZSBwbHVyYWxpdHkgb2YgXCIsXCIgc2VwYXJhdGVkIChieSBxdWVyeWluZyBMaXN0U2NhbGVPdXRFY3Ugd2hlcmVpbiBlY3VfaWRcbiAgICAgKiBJbnRlcmZhY2UgdG8gb2J0YWluKS5cbiAgICAgKi9cbiAgICByZWFkb25seSBlY3VJbmZvPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgaGVhbHRoQ2hlY2tVcmw6IEFwcGxpY2F0aW9uIEhlYWx0aCBDaGVjayBVUkxcbiAgICAgKi9cbiAgICByZWFkb25seSBoZWFsdGhDaGVja1VybD86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGxvZ2ljYWxSZWdpb25JZDogTmFtZXNwYWNlIElEXG4gICAgICovXG4gICAgcmVhZG9ubHkgbG9naWNhbFJlZ2lvbklkPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgcGFja2FnZVR5cGU6IEFwcGxpY2F0aW9uIHBhY2tldCBmb3JtYXQsIHBvc3NpYmxlIHZhbHVlczogd2FyIG9yIGphclxuICAgICAqL1xuICAgIHJlYWRvbmx5IHBhY2thZ2VUeXBlPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgcmVzb3VyY2VHcm91cElkOiBSZXNvdXJjZSBncm91cCBpZC5cbiAgICAgKi9cbiAgICByZWFkb25seSByZXNvdXJjZUdyb3VwSWQ/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG59XG5cbi8qKlxuICogQSBST1MgcmVzb3VyY2UgdHlwZTogIGBBTElZVU46OkVEQVM6OkFwcGxpY2F0aW9uYFxuICovXG5leHBvcnQgY2xhc3MgQXBwbGljYXRpb24gZXh0ZW5kcyByb3MuUmVzb3VyY2Uge1xuXG4gICAgLyoqXG4gICAgICogQSBmYWN0b3J5IG1ldGhvZCB0aGF0IGNyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgdGhpcyBjbGFzcyBmcm9tIGFuIG9iamVjdFxuICAgICAqIGNvbnRhaW5pbmcgdGhlIHByb3BlcnRpZXMgb2YgdGhpcyBST1MgcmVzb3VyY2UsIHdoaWNoIHdpbGwgYmUgYXNzaWduZWQgdG8gUk9TIHJlc291cmNlLlxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIEFwcElkOiBBcHBsaWNhdGlvbiBJZCwgYSB1bmlxdWUgaWRlbnRpZmllciBFREFTIGFwcGxpY2F0aW9uXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJBcHBJZDogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIFBvcnQ6IEFwcGxpY2F0aW9uIHBvcnRcbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0clBvcnQ6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBgQUxJWVVOOjpFREFTOjpBcHBsaWNhdGlvbmAuXG4gICAgICpcbiAgICAgKiBQYXJhbSBzY29wZSAtIHNjb3BlIGluIHdoaWNoIHRoaXMgcmVzb3VyY2UgaXMgZGVmaW5lZFxuICAgICAqIFBhcmFtIGlkICAgIC0gc2NvcGVkIGlkIG9mIHRoZSByZXNvdXJjZVxuICAgICAqIFBhcmFtIHByb3BzIC0gcmVzb3VyY2UgcHJvcGVydGllc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiByb3MuQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogQXBwbGljYXRpb25Qcm9wcywgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6Ym9vbGVhbiA9IHRydWUpIHtcbiAgICAgICAgc3VwZXIoc2NvcGUsIGlkKTtcblxuICAgICAgICBjb25zdCByb3NBcHBsaWNhdGlvbiA9IG5ldyBSb3NBcHBsaWNhdGlvbih0aGlzLCBpZCwgIHtcbiAgICAgICAgICAgIGNvbXBvbmVudElkczogcHJvcHMuY29tcG9uZW50SWRzLFxuICAgICAgICAgICAgbG9naWNhbFJlZ2lvbklkOiBwcm9wcy5sb2dpY2FsUmVnaW9uSWQsXG4gICAgICAgICAgICBhcHBsaWNhdGlvbk5hbWU6IHByb3BzLmFwcGxpY2F0aW9uTmFtZSxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBwcm9wcy5kZXNjcmlwdGlvbixcbiAgICAgICAgICAgIHJlc291cmNlR3JvdXBJZDogcHJvcHMucmVzb3VyY2VHcm91cElkLFxuICAgICAgICAgICAgZWN1SW5mbzogcHJvcHMuZWN1SW5mbyxcbiAgICAgICAgICAgIGhlYWx0aENoZWNrVXJsOiBwcm9wcy5oZWFsdGhDaGVja1VybCxcbiAgICAgICAgICAgIGNsdXN0ZXJJZDogcHJvcHMuY2x1c3RlcklkLFxuICAgICAgICAgICAgcGFja2FnZVR5cGU6IHByb3BzLnBhY2thZ2VUeXBlID09PSB1bmRlZmluZWQgfHwgcHJvcHMucGFja2FnZVR5cGUgPT09IG51bGwgPyAnd2FyJyA6IHByb3BzLnBhY2thZ2VUeXBlLFxuICAgICAgICAgICAgZGVwbG95bWVudDogcHJvcHMuZGVwbG95bWVudCxcbiAgICAgICAgICAgIGJ1aWxkUGFja0lkOiBwcm9wcy5idWlsZFBhY2tJZCxcbiAgICAgICAgfSwgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgJiYgdGhpcy5zdGFjay5lbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCk7XG4gICAgICAgIHRoaXMucmVzb3VyY2UgPSByb3NBcHBsaWNhdGlvbjtcbiAgICAgICAgdGhpcy5hdHRyQXBwSWQgPSByb3NBcHBsaWNhdGlvbi5hdHRyQXBwSWQ7XG4gICAgICAgIHRoaXMuYXR0clBvcnQgPSByb3NBcHBsaWNhdGlvbi5hdHRyUG9ydDtcbiAgICB9XG59XG4iXX0=