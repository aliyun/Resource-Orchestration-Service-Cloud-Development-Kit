"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MessageCallback = exports.MessageCallbackProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const vod_generated_1 = require("./vod.generated");
Object.defineProperty(exports, "MessageCallbackProperty", { enumerable: true, get: function () { return vod_generated_1.RosMessageCallback; } });
/**
 * This class encapsulates and extends the ROS resource type `DATASOURCE::VOD::MessageCallback`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosMessageCallback`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/datasource-vod-messagecallback
 */
class MessageCallback extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosMessageCallback = new vod_generated_1.RosMessageCallback(this, id, {
            appId: props.appId,
            refreshOptions: props.refreshOptions === undefined || props.refreshOptions === null ? 'Never' : props.refreshOptions,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosMessageCallback;
        this.attrAppId = rosMessageCallback.attrAppId;
        this.attrAuthKey = rosMessageCallback.attrAuthKey;
        this.attrAuthSwitch = rosMessageCallback.attrAuthSwitch;
        this.attrCallbackType = rosMessageCallback.attrCallbackType;
        this.attrCallbackUrl = rosMessageCallback.attrCallbackUrl;
        this.attrEventTypeList = rosMessageCallback.attrEventTypeList;
        this.attrMnsEndpoint = rosMessageCallback.attrMnsEndpoint;
        this.attrMnsQueueName = rosMessageCallback.attrMnsQueueName;
    }
}
exports.MessageCallback = MessageCallback;
//# sourceMappingURL=data:application/json;base64,