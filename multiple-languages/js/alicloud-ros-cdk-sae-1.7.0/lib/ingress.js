"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Ingress = exports.IngressProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const sae_generated_1 = require("./sae.generated");
Object.defineProperty(exports, "IngressProperty", { enumerable: true, get: function () { return sae_generated_1.RosIngress; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::SAE::Ingress`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosIngress`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-sae-ingress
 */
class Ingress extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosIngress = new sae_generated_1.RosIngress(this, id, {
            defaultRule: props.defaultRule,
            slbId: props.slbId,
            listenerPort: props.listenerPort,
            description: props.description,
            certIds: props.certIds,
            certId: props.certId,
            loadBalanceType: props.loadBalanceType,
            namespaceId: props.namespaceId,
            listenerProtocol: props.listenerProtocol,
            rules: props.rules,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosIngress;
        this.attrIngressId = rosIngress.attrIngressId;
    }
}
exports.Ingress = Ingress;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5ncmVzcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImluZ3Jlc3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsOENBQThDO0FBQzlDLG1EQUE2QztBQUV0QixnR0FGZCwwQkFBVSxPQUVtQjtBQXVFdEM7Ozs7R0FJRztBQUNILE1BQWEsT0FBUSxTQUFRLEdBQUcsQ0FBQyxRQUFRO0lBV3JDOzs7O09BSUc7SUFDSCxZQUFZLEtBQW9CLEVBQUUsRUFBVSxFQUFFLEtBQW1CLEVBQUUsbUNBQTJDLElBQUk7UUFDOUcsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNqQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUNiLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxnQ0FBZ0MsR0FBRyxnQ0FBZ0MsQ0FBQztRQUV6RSxNQUFNLFVBQVUsR0FBRyxJQUFJLDBCQUFVLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRztZQUN6QyxXQUFXLEVBQUUsS0FBSyxDQUFDLFdBQVc7WUFDOUIsS0FBSyxFQUFFLEtBQUssQ0FBQyxLQUFLO1lBQ2xCLFlBQVksRUFBRSxLQUFLLENBQUMsWUFBWTtZQUNoQyxXQUFXLEVBQUUsS0FBSyxDQUFDLFdBQVc7WUFDOUIsT0FBTyxFQUFFLEtBQUssQ0FBQyxPQUFPO1lBQ3RCLE1BQU0sRUFBRSxLQUFLLENBQUMsTUFBTTtZQUNwQixlQUFlLEVBQUUsS0FBSyxDQUFDLGVBQWU7WUFDdEMsV0FBVyxFQUFFLEtBQUssQ0FBQyxXQUFXO1lBQzlCLGdCQUFnQixFQUFFLEtBQUssQ0FBQyxnQkFBZ0I7WUFDeEMsS0FBSyxFQUFFLEtBQUssQ0FBQyxLQUFLO1NBQ3JCLEVBQUUsZ0NBQWdDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO1FBQ3BGLElBQUksQ0FBQyxRQUFRLEdBQUcsVUFBVSxDQUFDO1FBQzNCLElBQUksQ0FBQyxhQUFhLEdBQUcsVUFBVSxDQUFDLGFBQWEsQ0FBQztJQUNsRCxDQUFDO0NBQ0o7QUF0Q0QsMEJBc0NDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcm9zIGZyb20gJ0BhbGljbG91ZC9yb3MtY2RrLWNvcmUnO1xuaW1wb3J0IHsgUm9zSW5ncmVzcyB9IGZyb20gJy4vc2FlLmdlbmVyYXRlZCc7XG4vLyBHZW5lcmF0ZWQgZnJvbSB0aGUgQWxpQ2xvdWQgUk9TIFJlc291cmNlIFNwZWNpZmljYXRpb25cbmV4cG9ydCB7IFJvc0luZ3Jlc3MgYXMgSW5ncmVzc1Byb3BlcnR5IH07XG5cbi8qKlxuICogUHJvcGVydGllcyBmb3IgZGVmaW5pbmcgYSBgSW5ncmVzc2AuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2FsaXl1bi1zYWUtaW5ncmVzc1xuICovXG5leHBvcnQgaW50ZXJmYWNlIEluZ3Jlc3NQcm9wcyB7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBkZWZhdWx0UnVsZTogVGhlIGRlZmF1bHQgZm9yd2FyZGluZyBydWxlLiBZb3UgY2FuIHNwZWNpZnkgYSBwb3J0IGFuZCBhbiBhcHBsaWNhdGlvbiBpbiB0aGUgZGVmYXVsdCBmb3J3YXJkaW5nIHJ1bGUgdG8gZm9yd2FyZCB0cmFmZmljIGJhc2VkIG9uIHRoZSBJUCBhZGRyZXNzIG9mIHRoZSBhcHBsaWNhdGlvbi5cbiAgICAgKi9cbiAgICByZWFkb25seSBkZWZhdWx0UnVsZTogUm9zSW5ncmVzcy5EZWZhdWx0UnVsZVByb3BlcnR5IHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgZGVzY3JpcHRpb246IFRoZSBuYW1lIG9mIHRoZSByb3V0aW5nIHJ1bGUuXG4gICAgICovXG4gICAgcmVhZG9ubHkgZGVzY3JpcHRpb246IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGxpc3RlbmVyUG9ydDogVGhlIGxpc3RlbmVyIHBvcnQgb2YgdGhlIFNMQiBpbnN0YW5jZS4gWW91IG11c3Qgc3BlY2lmeSBhIHZhY2FudCBwb3J0LlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGxpc3RlbmVyUG9ydDogbnVtYmVyIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgbmFtZXNwYWNlSWQ6IFRoZSBJRCBvZiB0aGUgbmFtZXNwYWNlIHRvIHdoaWNoIHRoZSBhcHBsaWNhdGlvbiBiZWxvbmdzLiBZb3UgY2FuIHNwZWNpZnkgb25seSBvbmUgbmFtZXNwYWNlIElEIGVhY2ggdGltZSB5b3UgY2FsbCB0aGlzIG9wZXJhdGlvbi5cbiAgICAgKi9cbiAgICByZWFkb25seSBuYW1lc3BhY2VJZDogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgcnVsZXM6IFRoZSBmb3J3YXJkaW5nIHJ1bGVzLiBZb3UgY2FuIHNwZWNpZnkgYSBwb3J0IGFuZCBhbiBhcHBsaWNhdGlvbiBpbiBhIGZvcndhcmRpbmcgcnVsZSB0byBmb3J3YXJkIHRyYWZmaWMgYmFzZWQgb24gdGhlIHNwZWNpZmllZCBkb21haW4gbmFtZSBhbmQgcmVxdWVzdCBwYXRoLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHJ1bGVzOiBBcnJheTxSb3NJbmdyZXNzLlJ1bGVzUHJvcGVydHkgfCByb3MuSVJlc29sdmFibGU+IHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgc2xiSWQ6IFRoZSBTZXJ2ZXIgTG9hZCBCYWxhbmNlciAoU0xCKSBpbnN0YW5jZSB0aGF0IGlzIHVzZWQgYnkgdGhlIHJvdXRpbmcgcnVsZS5cbiAgICAgKi9cbiAgICByZWFkb25seSBzbGJJZDogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgY2VydElkOiBUaGUgSUQgb2YgdGhlIGNlcnRpZmljYXRlIHRoYXQgaXMgYXNzb2NpYXRlZCB3aXRoIHRoZSBDbGFzc2ljIExvYWQgQmFsYW5jZXIgKENMQikgaW5zdGFuY2UuXG4gICAgICogSWYgTG9hZEJhbGFuY2VUeXBlIGlzIHNldCB0byBjbGIsIHNwZWNpZnkgdGhpcyBwYXJhbWV0ZXIgdG8gY29uZmlndXJlIGEgY2VydGlmaWNhdGUgZm9yIHRoZSBIVFRQIGxpc3RlbmVyLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGNlcnRJZD86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGNlcnRJZHM6IFRoZSBJRHMgb2YgdGhlIGNlcnRpZmljYXRlcyB0aGF0IGFyZSBhc3NvY2lhdGVkIHdpdGggdGhlIEFwcGxpY2F0aW9uIExvYWQgQmFsYW5jZXIgKEFMQikgaW5zdGFuY2UuXG4gICAgICovXG4gICAgcmVhZG9ubHkgY2VydElkcz86IEFycmF5PHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZT4gfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBsaXN0ZW5lclByb3RvY29sOiBUaGUgcHJvdG9jb2wgdGhhdCBpcyB1c2VkIHRvIGZvcndhcmQgcmVxdWVzdHMuXG4gICAgICovXG4gICAgcmVhZG9ubHkgbGlzdGVuZXJQcm90b2NvbD86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGxvYWRCYWxhbmNlVHlwZTogVGhlIHR5cGUgb2YgdGhlIFNMQiBpbnN0YW5jZSBiYXNlZCBvbiB0aGUgcHJvY2Vzc2luZyBjYXBhYmlsaXRpZXMuIFRoZSBpbnN0YW5jZSB0eXBlIGNhbiBiZSBzcGVjaWZpZWQgb25seSB3aGVuIHlvdSBjcmVhdGUgYSByb3V0aW5nIHJ1bGUuIFlvdSBjYW5ub3QgY2hhbmdlIHRoZSBpbnN0YW5jZSB0eXBlIHdoZW4geW91IHVwZGF0ZSB0aGUgcm91dGluZyBydWxlLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGxvYWRCYWxhbmNlVHlwZT86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcbn1cblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgYEluZ3Jlc3NgLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIElJbmdyZXNzIGV4dGVuZHMgcm9zLklSZXNvdXJjZSB7XG4gICAgcmVhZG9ubHkgcHJvcHM6IEluZ3Jlc3NQcm9wcztcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBJbmdyZXNzSWQ6IFRoZSBJRCBvZiB0aGUgcm91dGluZyBydWxlLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGF0dHJJbmdyZXNzSWQ6IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcbn1cbi8qKlxuICogVGhpcyBjbGFzcyBlbmNhcHN1bGF0ZXMgYW5kIGV4dGVuZHMgdGhlIFJPUyByZXNvdXJjZSB0eXBlIGBBTElZVU46OlNBRTo6SW5ncmVzc2AuXG4gKiBATm90ZSBUaGlzIGNsYXNzIG1heSBoYXZlIHNvbWUgbmV3IGZ1bmN0aW9ucyB0byBmYWNpbGl0YXRlIGRldmVsb3BtZW50LCBzbyBpdCBpcyByZWNvbW1lbmRlZCB0byB1c2UgdGhpcyBjbGFzcyBpbnN0ZWFkIG9mIGBSb3NJbmdyZXNzYGZvciBhIG1vcmUgY29udmVuaWVudCBkZXZlbG9wbWVudCBleHBlcmllbmNlLlxuICogU2VlIGh0dHBzOi8vd3d3LmFsaWJhYmFjbG91ZC5jb20vaGVscC9yb3MvZGV2ZWxvcGVyLXJlZmVyZW5jZS9hbGl5dW4tc2FlLWluZ3Jlc3NcbiAqL1xuZXhwb3J0IGNsYXNzIEluZ3Jlc3MgZXh0ZW5kcyByb3MuUmVzb3VyY2UgaW1wbGVtZW50cyBJSW5ncmVzcyB7XG4gICAgcHJvdGVjdGVkIHNjb3BlOiByb3MuQ29uc3RydWN0O1xuICAgIHByb3RlY3RlZCBpZDogc3RyaW5nO1xuICAgIHB1YmxpYyByZWFkb25seSBwcm9wczogSW5ncmVzc1Byb3BzO1xuICAgIHByb3RlY3RlZCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBJbmdyZXNzSWQ6IFRoZSBJRCBvZiB0aGUgcm91dGluZyBydWxlLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRySW5ncmVzc0lkOiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBQYXJhbSBzY29wZSAtIHNjb3BlIGluIHdoaWNoIHRoaXMgcmVzb3VyY2UgaXMgZGVmaW5lZFxuICAgICAqIFBhcmFtIGlkICAgIC0gc2NvcGVkIGlkIG9mIHRoZSByZXNvdXJjZVxuICAgICAqIFBhcmFtIHByb3BzIC0gcmVzb3VyY2UgcHJvcGVydGllc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiByb3MuQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogSW5ncmVzc1Byb3BzLCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDpib29sZWFuID0gdHJ1ZSkge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQpO1xuICAgICAgICB0aGlzLnNjb3BlID0gc2NvcGU7XG4gICAgICAgIHRoaXMuaWQgPSBpZDtcbiAgICAgICAgdGhpcy5wcm9wcyA9IHByb3BzO1xuICAgICAgICB0aGlzLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ID0gZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ7XG5cbiAgICAgICAgY29uc3Qgcm9zSW5ncmVzcyA9IG5ldyBSb3NJbmdyZXNzKHRoaXMsIGlkLCAge1xuICAgICAgICAgICAgZGVmYXVsdFJ1bGU6IHByb3BzLmRlZmF1bHRSdWxlLFxuICAgICAgICAgICAgc2xiSWQ6IHByb3BzLnNsYklkLFxuICAgICAgICAgICAgbGlzdGVuZXJQb3J0OiBwcm9wcy5saXN0ZW5lclBvcnQsXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogcHJvcHMuZGVzY3JpcHRpb24sXG4gICAgICAgICAgICBjZXJ0SWRzOiBwcm9wcy5jZXJ0SWRzLFxuICAgICAgICAgICAgY2VydElkOiBwcm9wcy5jZXJ0SWQsXG4gICAgICAgICAgICBsb2FkQmFsYW5jZVR5cGU6IHByb3BzLmxvYWRCYWxhbmNlVHlwZSxcbiAgICAgICAgICAgIG5hbWVzcGFjZUlkOiBwcm9wcy5uYW1lc3BhY2VJZCxcbiAgICAgICAgICAgIGxpc3RlbmVyUHJvdG9jb2w6IHByb3BzLmxpc3RlbmVyUHJvdG9jb2wsXG4gICAgICAgICAgICBydWxlczogcHJvcHMucnVsZXMsXG4gICAgICAgIH0sIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ICYmIHRoaXMuc3RhY2suZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQpO1xuICAgICAgICB0aGlzLnJlc291cmNlID0gcm9zSW5ncmVzcztcbiAgICAgICAgdGhpcy5hdHRySW5ncmVzc0lkID0gcm9zSW5ncmVzcy5hdHRySW5ncmVzc0lkO1xuICAgIH1cbn1cbiJdfQ==