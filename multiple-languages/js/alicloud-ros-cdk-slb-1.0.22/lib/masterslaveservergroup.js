"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MasterSlaveServerGroup = exports.MasterSlaveServerGroupProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const slb_generated_1 = require("./slb.generated");
Object.defineProperty(exports, "MasterSlaveServerGroupProperty", { enumerable: true, get: function () { return slb_generated_1.RosMasterSlaveServerGroup; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::SLB::MasterSlaveServerGroup`, which is used to create a primary/secondary server group.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosMasterSlaveServerGroup`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-slb-masterslaveservergroup
 */
class MasterSlaveServerGroup extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosMasterSlaveServerGroup = new slb_generated_1.RosMasterSlaveServerGroup(this, id, {
            loadBalancerId: props.loadBalancerId,
            masterSlaveServerGroupName: props.masterSlaveServerGroupName,
            masterSlaveBackendServers: props.masterSlaveBackendServers,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosMasterSlaveServerGroup;
        this.attrMasterSlaveServerGroupId = rosMasterSlaveServerGroup.attrMasterSlaveServerGroupId;
    }
}
exports.MasterSlaveServerGroup = MasterSlaveServerGroup;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFzdGVyc2xhdmVzZXJ2ZXJncm91cC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm1hc3RlcnNsYXZlc2VydmVyZ3JvdXAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsOENBQThDO0FBQzlDLG1EQUE0RDtBQUV0QiwrR0FGN0IseUNBQXlCLE9BRWtDO0FBeUJwRTs7OztHQUlHO0FBQ0gsTUFBYSxzQkFBdUIsU0FBUSxHQUFHLENBQUMsUUFBUTtJQU9wRDs7OztPQUlHO0lBQ0gsWUFBWSxLQUFvQixFQUFFLEVBQVUsRUFBRSxLQUFrQyxFQUFFLG1DQUEyQyxJQUFJO1FBQzdILEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFakIsTUFBTSx5QkFBeUIsR0FBRyxJQUFJLHlDQUF5QixDQUFDLElBQUksRUFBRSxFQUFFLEVBQUc7WUFDdkUsY0FBYyxFQUFFLEtBQUssQ0FBQyxjQUFjO1lBQ3BDLDBCQUEwQixFQUFFLEtBQUssQ0FBQywwQkFBMEI7WUFDNUQseUJBQXlCLEVBQUUsS0FBSyxDQUFDLHlCQUF5QjtTQUM3RCxFQUFFLGdDQUFnQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztRQUNwRixJQUFJLENBQUMsUUFBUSxHQUFHLHlCQUF5QixDQUFDO1FBQzFDLElBQUksQ0FBQyw0QkFBNEIsR0FBRyx5QkFBeUIsQ0FBQyw0QkFBNEIsQ0FBQztJQUMvRixDQUFDO0NBQ0o7QUF2QkQsd0RBdUJDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcm9zIGZyb20gJ0BhbGljbG91ZC9yb3MtY2RrLWNvcmUnO1xuaW1wb3J0IHsgUm9zTWFzdGVyU2xhdmVTZXJ2ZXJHcm91cCB9IGZyb20gJy4vc2xiLmdlbmVyYXRlZCc7XG4vLyBHZW5lcmF0ZWQgZnJvbSB0aGUgQWxpQ2xvdWQgUk9TIFJlc291cmNlIFNwZWNpZmljYXRpb25cbmV4cG9ydCB7IFJvc01hc3RlclNsYXZlU2VydmVyR3JvdXAgYXMgTWFzdGVyU2xhdmVTZXJ2ZXJHcm91cFByb3BlcnR5IH07XG5cbi8qKlxuICogUHJvcGVydGllcyBmb3IgZGVmaW5pbmcgYSBgTWFzdGVyU2xhdmVTZXJ2ZXJHcm91cGAuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2FsaXl1bi1zbGItbWFzdGVyc2xhdmVzZXJ2ZXJncm91cFxuICovXG5leHBvcnQgaW50ZXJmYWNlIE1hc3RlclNsYXZlU2VydmVyR3JvdXBQcm9wcyB7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBsb2FkQmFsYW5jZXJJZDogVGhlIElEIG9mIHRoZSBTZXJ2ZXIgTG9hZCBCYWxhbmNlciBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICByZWFkb25seSBsb2FkQmFsYW5jZXJJZDogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgbWFzdGVyU2xhdmVCYWNrZW5kU2VydmVyczogQSBsaXN0IG9mIGFjdGl2ZVxcL3N0YW5kYnkgc2VydmVyIGdyb3VwLlxuICAgICAqIEFuIGFjdGl2ZVxcL3N0YW5kYnkgc2VydmVyIGdyb3VwIGNhbiBvbmx5IGNvbnRhaW4gdHdvIGJhY2tlbmQgc2VydmVycy5cbiAgICAgKi9cbiAgICByZWFkb25seSBtYXN0ZXJTbGF2ZUJhY2tlbmRTZXJ2ZXJzOiBBcnJheTxSb3NNYXN0ZXJTbGF2ZVNlcnZlckdyb3VwLk1hc3RlclNsYXZlQmFja2VuZFNlcnZlcnNQcm9wZXJ0eSB8IHJvcy5JUmVzb2x2YWJsZT4gfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBtYXN0ZXJTbGF2ZVNlcnZlckdyb3VwTmFtZTogVGhlIG5hbWUgb2YgdGhlIGFjdGl2ZVxcL3N0YW5kYnkgc2VydmVyIGdyb3VwLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IG1hc3RlclNsYXZlU2VydmVyR3JvdXBOYW1lPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xufVxuXG4vKipcbiAqIFRoaXMgY2xhc3MgZW5jYXBzdWxhdGVzIGFuZCBleHRlbmRzIHRoZSBST1MgcmVzb3VyY2UgdHlwZSBgQUxJWVVOOjpTTEI6Ok1hc3RlclNsYXZlU2VydmVyR3JvdXBgLCB3aGljaCBpcyB1c2VkIHRvIGNyZWF0ZSBhIHByaW1hcnkvc2Vjb25kYXJ5IHNlcnZlciBncm91cC5cbiAqIEBOb3RlIFRoaXMgY2xhc3MgbWF5IGhhdmUgc29tZSBuZXcgZnVuY3Rpb25zIHRvIGZhY2lsaXRhdGUgZGV2ZWxvcG1lbnQsIHNvIGl0IGlzIHJlY29tbWVuZGVkIHRvIHVzZSB0aGlzIGNsYXNzIGluc3RlYWQgb2YgYFJvc01hc3RlclNsYXZlU2VydmVyR3JvdXBgZm9yIGEgbW9yZSBjb252ZW5pZW50IGRldmVsb3BtZW50IGV4cGVyaWVuY2UuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2FsaXl1bi1zbGItbWFzdGVyc2xhdmVzZXJ2ZXJncm91cFxuICovXG5leHBvcnQgY2xhc3MgTWFzdGVyU2xhdmVTZXJ2ZXJHcm91cCBleHRlbmRzIHJvcy5SZXNvdXJjZSB7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgTWFzdGVyU2xhdmVTZXJ2ZXJHcm91cElkOiBBY3RpdmUvc3RhbmRieSBzZXJ2ZXIgZ3JvdXAgSUQuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJNYXN0ZXJTbGF2ZVNlcnZlckdyb3VwSWQ6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFBhcmFtIHNjb3BlIC0gc2NvcGUgaW4gd2hpY2ggdGhpcyByZXNvdXJjZSBpcyBkZWZpbmVkXG4gICAgICogUGFyYW0gaWQgICAgLSBzY29wZWQgaWQgb2YgdGhlIHJlc291cmNlXG4gICAgICogUGFyYW0gcHJvcHMgLSByZXNvdXJjZSBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IHJvcy5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBNYXN0ZXJTbGF2ZVNlcnZlckdyb3VwUHJvcHMsIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OmJvb2xlYW4gPSB0cnVlKSB7XG4gICAgICAgIHN1cGVyKHNjb3BlLCBpZCk7XG5cbiAgICAgICAgY29uc3Qgcm9zTWFzdGVyU2xhdmVTZXJ2ZXJHcm91cCA9IG5ldyBSb3NNYXN0ZXJTbGF2ZVNlcnZlckdyb3VwKHRoaXMsIGlkLCAge1xuICAgICAgICAgICAgbG9hZEJhbGFuY2VySWQ6IHByb3BzLmxvYWRCYWxhbmNlcklkLFxuICAgICAgICAgICAgbWFzdGVyU2xhdmVTZXJ2ZXJHcm91cE5hbWU6IHByb3BzLm1hc3RlclNsYXZlU2VydmVyR3JvdXBOYW1lLFxuICAgICAgICAgICAgbWFzdGVyU2xhdmVCYWNrZW5kU2VydmVyczogcHJvcHMubWFzdGVyU2xhdmVCYWNrZW5kU2VydmVycyxcbiAgICAgICAgfSwgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgJiYgdGhpcy5zdGFjay5lbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCk7XG4gICAgICAgIHRoaXMucmVzb3VyY2UgPSByb3NNYXN0ZXJTbGF2ZVNlcnZlckdyb3VwO1xuICAgICAgICB0aGlzLmF0dHJNYXN0ZXJTbGF2ZVNlcnZlckdyb3VwSWQgPSByb3NNYXN0ZXJTbGF2ZVNlcnZlckdyb3VwLmF0dHJNYXN0ZXJTbGF2ZVNlcnZlckdyb3VwSWQ7XG4gICAgfVxufVxuIl19