"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DedicatedHostGroup = exports.DedicatedHostGroupProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const cddc_generated_1 = require("./cddc.generated");
Object.defineProperty(exports, "DedicatedHostGroupProperty", { enumerable: true, get: function () { return cddc_generated_1.RosDedicatedHostGroup; } });
/**
 * This class encapsulates and extends the ROS resource type `DATASOURCE::CDDC::DedicatedHostGroup`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosDedicatedHostGroup`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/datasource-cddc-dedicatedhostgroup
 */
class DedicatedHostGroup extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosDedicatedHostGroup = new cddc_generated_1.RosDedicatedHostGroup(this, id, {
            dedicatedHostGroupId: props.dedicatedHostGroupId,
            refreshOptions: props.refreshOptions === undefined || props.refreshOptions === null ? 'Never' : props.refreshOptions,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosDedicatedHostGroup;
        this.attrAllocationPolicy = rosDedicatedHostGroup.attrAllocationPolicy;
        this.attrBastionInstanceId = rosDedicatedHostGroup.attrBastionInstanceId;
        this.attrCategory = rosDedicatedHostGroup.attrCategory;
        this.attrCpuAllocateRation = rosDedicatedHostGroup.attrCpuAllocateRation;
        this.attrCpuAllocatedAmount = rosDedicatedHostGroup.attrCpuAllocatedAmount;
        this.attrCpuAllocationRatio = rosDedicatedHostGroup.attrCpuAllocationRatio;
        this.attrCreateTime = rosDedicatedHostGroup.attrCreateTime;
        this.attrDedicatedHostCountGroupByHostType = rosDedicatedHostGroup.attrDedicatedHostCountGroupByHostType;
        this.attrDedicatedHostGroupDesc = rosDedicatedHostGroup.attrDedicatedHostGroupDesc;
        this.attrDedicatedHostGroupId = rosDedicatedHostGroup.attrDedicatedHostGroupId;
        this.attrDeployType = rosDedicatedHostGroup.attrDeployType;
        this.attrDiskAllocateRation = rosDedicatedHostGroup.attrDiskAllocateRation;
        this.attrDiskAllocatedAmount = rosDedicatedHostGroup.attrDiskAllocatedAmount;
        this.attrDiskAllocationRatio = rosDedicatedHostGroup.attrDiskAllocationRatio;
        this.attrDiskUsedAmount = rosDedicatedHostGroup.attrDiskUsedAmount;
        this.attrDiskUtility = rosDedicatedHostGroup.attrDiskUtility;
        this.attrEngine = rosDedicatedHostGroup.attrEngine;
        this.attrHostNumber = rosDedicatedHostGroup.attrHostNumber;
        this.attrHostReplacePolicy = rosDedicatedHostGroup.attrHostReplacePolicy;
        this.attrInstanceNumber = rosDedicatedHostGroup.attrInstanceNumber;
        this.attrMemAllocateRation = rosDedicatedHostGroup.attrMemAllocateRation;
        this.attrMemAllocatedAmount = rosDedicatedHostGroup.attrMemAllocatedAmount;
        this.attrMemAllocationRatio = rosDedicatedHostGroup.attrMemAllocationRatio;
        this.attrMemUsedAmount = rosDedicatedHostGroup.attrMemUsedAmount;
        this.attrMemUtility = rosDedicatedHostGroup.attrMemUtility;
        this.attrOpenPermission = rosDedicatedHostGroup.attrOpenPermission;
        this.attrText = rosDedicatedHostGroup.attrText;
        this.attrVpcId = rosDedicatedHostGroup.attrVpcId;
        this.attrZoneIdList = rosDedicatedHostGroup.attrZoneIdList;
    }
}
exports.DedicatedHostGroup = DedicatedHostGroup;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVkaWNhdGVkaG9zdGdyb3VwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZGVkaWNhdGVkaG9zdGdyb3VwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDhDQUE4QztBQUM5QyxxREFBeUQ7QUFFdkIsMkdBRnpCLHNDQUFxQixPQUU4QjtBQTZLNUQ7Ozs7R0FJRztBQUNILE1BQWEsa0JBQW1CLFNBQVEsR0FBRyxDQUFDLFFBQVE7SUF1SmhEOzs7O09BSUc7SUFDSCxZQUFZLEtBQW9CLEVBQUUsRUFBVSxFQUFFLEtBQThCLEVBQUUsbUNBQTJDLElBQUk7UUFDekgsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNqQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUNiLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxnQ0FBZ0MsR0FBRyxnQ0FBZ0MsQ0FBQztRQUV6RSxNQUFNLHFCQUFxQixHQUFHLElBQUksc0NBQXFCLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRztZQUMvRCxvQkFBb0IsRUFBRSxLQUFLLENBQUMsb0JBQW9CO1lBQ2hELGNBQWMsRUFBRSxLQUFLLENBQUMsY0FBYyxLQUFLLFNBQVMsSUFBSSxLQUFLLENBQUMsY0FBYyxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsY0FBYztTQUN2SCxFQUFFLGdDQUFnQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztRQUNwRixJQUFJLENBQUMsUUFBUSxHQUFHLHFCQUFxQixDQUFDO1FBQ3RDLElBQUksQ0FBQyxvQkFBb0IsR0FBRyxxQkFBcUIsQ0FBQyxvQkFBb0IsQ0FBQztRQUN2RSxJQUFJLENBQUMscUJBQXFCLEdBQUcscUJBQXFCLENBQUMscUJBQXFCLENBQUM7UUFDekUsSUFBSSxDQUFDLFlBQVksR0FBRyxxQkFBcUIsQ0FBQyxZQUFZLENBQUM7UUFDdkQsSUFBSSxDQUFDLHFCQUFxQixHQUFHLHFCQUFxQixDQUFDLHFCQUFxQixDQUFDO1FBQ3pFLElBQUksQ0FBQyxzQkFBc0IsR0FBRyxxQkFBcUIsQ0FBQyxzQkFBc0IsQ0FBQztRQUMzRSxJQUFJLENBQUMsc0JBQXNCLEdBQUcscUJBQXFCLENBQUMsc0JBQXNCLENBQUM7UUFDM0UsSUFBSSxDQUFDLGNBQWMsR0FBRyxxQkFBcUIsQ0FBQyxjQUFjLENBQUM7UUFDM0QsSUFBSSxDQUFDLHFDQUFxQyxHQUFHLHFCQUFxQixDQUFDLHFDQUFxQyxDQUFDO1FBQ3pHLElBQUksQ0FBQywwQkFBMEIsR0FBRyxxQkFBcUIsQ0FBQywwQkFBMEIsQ0FBQztRQUNuRixJQUFJLENBQUMsd0JBQXdCLEdBQUcscUJBQXFCLENBQUMsd0JBQXdCLENBQUM7UUFDL0UsSUFBSSxDQUFDLGNBQWMsR0FBRyxxQkFBcUIsQ0FBQyxjQUFjLENBQUM7UUFDM0QsSUFBSSxDQUFDLHNCQUFzQixHQUFHLHFCQUFxQixDQUFDLHNCQUFzQixDQUFDO1FBQzNFLElBQUksQ0FBQyx1QkFBdUIsR0FBRyxxQkFBcUIsQ0FBQyx1QkFBdUIsQ0FBQztRQUM3RSxJQUFJLENBQUMsdUJBQXVCLEdBQUcscUJBQXFCLENBQUMsdUJBQXVCLENBQUM7UUFDN0UsSUFBSSxDQUFDLGtCQUFrQixHQUFHLHFCQUFxQixDQUFDLGtCQUFrQixDQUFDO1FBQ25FLElBQUksQ0FBQyxlQUFlLEdBQUcscUJBQXFCLENBQUMsZUFBZSxDQUFDO1FBQzdELElBQUksQ0FBQyxVQUFVLEdBQUcscUJBQXFCLENBQUMsVUFBVSxDQUFDO1FBQ25ELElBQUksQ0FBQyxjQUFjLEdBQUcscUJBQXFCLENBQUMsY0FBYyxDQUFDO1FBQzNELElBQUksQ0FBQyxxQkFBcUIsR0FBRyxxQkFBcUIsQ0FBQyxxQkFBcUIsQ0FBQztRQUN6RSxJQUFJLENBQUMsa0JBQWtCLEdBQUcscUJBQXFCLENBQUMsa0JBQWtCLENBQUM7UUFDbkUsSUFBSSxDQUFDLHFCQUFxQixHQUFHLHFCQUFxQixDQUFDLHFCQUFxQixDQUFDO1FBQ3pFLElBQUksQ0FBQyxzQkFBc0IsR0FBRyxxQkFBcUIsQ0FBQyxzQkFBc0IsQ0FBQztRQUMzRSxJQUFJLENBQUMsc0JBQXNCLEdBQUcscUJBQXFCLENBQUMsc0JBQXNCLENBQUM7UUFDM0UsSUFBSSxDQUFDLGlCQUFpQixHQUFHLHFCQUFxQixDQUFDLGlCQUFpQixDQUFDO1FBQ2pFLElBQUksQ0FBQyxjQUFjLEdBQUcscUJBQXFCLENBQUMsY0FBYyxDQUFDO1FBQzNELElBQUksQ0FBQyxrQkFBa0IsR0FBRyxxQkFBcUIsQ0FBQyxrQkFBa0IsQ0FBQztRQUNuRSxJQUFJLENBQUMsUUFBUSxHQUFHLHFCQUFxQixDQUFDLFFBQVEsQ0FBQztRQUMvQyxJQUFJLENBQUMsU0FBUyxHQUFHLHFCQUFxQixDQUFDLFNBQVMsQ0FBQztRQUNqRCxJQUFJLENBQUMsY0FBYyxHQUFHLHFCQUFxQixDQUFDLGNBQWMsQ0FBQztJQUMvRCxDQUFDO0NBQ0o7QUF0TUQsZ0RBc01DIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcm9zIGZyb20gJ0BhbGljbG91ZC9yb3MtY2RrLWNvcmUnO1xuaW1wb3J0IHsgUm9zRGVkaWNhdGVkSG9zdEdyb3VwIH0gZnJvbSAnLi9jZGRjLmdlbmVyYXRlZCc7XG4vLyBHZW5lcmF0ZWQgZnJvbSB0aGUgQWxpQ2xvdWQgUk9TIFJlc291cmNlIFNwZWNpZmljYXRpb25cbmV4cG9ydCB7IFJvc0RlZGljYXRlZEhvc3RHcm91cCBhcyBEZWRpY2F0ZWRIb3N0R3JvdXBQcm9wZXJ0eSB9O1xuXG4vKipcbiAqIFByb3BlcnRpZXMgZm9yIGRlZmluaW5nIGEgYERlZGljYXRlZEhvc3RHcm91cGAuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2RhdGFzb3VyY2UtY2RkYy1kZWRpY2F0ZWRob3N0Z3JvdXBcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBEZWRpY2F0ZWRIb3N0R3JvdXBQcm9wcyB7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBkZWRpY2F0ZWRIb3N0R3JvdXBJZDogRGVkaWNhdGVkIEhvc3QgR3JvdXAgSUQuXG4gICAgICovXG4gICAgcmVhZG9ubHkgZGVkaWNhdGVkSG9zdEdyb3VwSWQ6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHJlZnJlc2hPcHRpb25zOiBUaGUgcmVmcmVzaCBzdHJhdGVneSBmb3IgdGhlIGRhdGFzb3VyY2UgcmVzb3VyY2Ugd2hlbiB0aGUgc3RhY2sgaXMgdXBkYXRlZC4gVmFsaWQgdmFsdWVzOlxuICAgICAqIC0gTmV2ZXI6IE5ldmVyIHJlZnJlc2ggdGhlIGRhdGFzb3VyY2UgcmVzb3VyY2Ugd2hlbiB0aGUgc3RhY2sgaXMgdXBkYXRlZC5cbiAgICAgKiAtIEFsd2F5czogQWx3YXlzIHJlZnJlc2ggdGhlIGRhdGFzb3VyY2UgcmVzb3VyY2Ugd2hlbiB0aGUgc3RhY2sgaXMgdXBkYXRlZC5cbiAgICAgKiBEZWZhdWx0IGlzIE5ldmVyLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHJlZnJlc2hPcHRpb25zPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xufVxuXG4vKipcbiAqIFJlcHJlc2VudHMgYSBgRGVkaWNhdGVkSG9zdEdyb3VwYC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJRGVkaWNhdGVkSG9zdEdyb3VwIGV4dGVuZHMgcm9zLklSZXNvdXJjZSB7XG4gICAgcmVhZG9ubHkgcHJvcHM6IERlZGljYXRlZEhvc3RHcm91cFByb3BzO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIEFsbG9jYXRpb25Qb2xpY3k6IEFsbG9jYXRpb24gUG9saWN5LlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGF0dHJBbGxvY2F0aW9uUG9saWN5OiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgQmFzdGlvbkluc3RhbmNlSWQ6IEJhc3Rpb25JbnN0YW5jZUlkLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGF0dHJCYXN0aW9uSW5zdGFuY2VJZDogcm9zLklSZXNvbHZhYmxlIHwgc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIENhdGVnb3J5OiBUaGUgZGVkaWNhdGVkIGNsdXN0ZXIgZmFtaWx5IHRvIHdoaWNoIHRoZSBob3N0IGJlbG9uZ3MuXG4gICAgICovXG4gICAgcmVhZG9ubHkgYXR0ckNhdGVnb3J5OiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgQ3B1QWxsb2NhdGVSYXRpb246IENwdUFsbG9jYXRlUmF0aW9uLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGF0dHJDcHVBbGxvY2F0ZVJhdGlvbjogcm9zLklSZXNvbHZhYmxlIHwgc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIENwdUFsbG9jYXRlZEFtb3VudDogQ3B1QWxsb2NhdGVkQW1vdW50LlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGF0dHJDcHVBbGxvY2F0ZWRBbW91bnQ6IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBDcHVBbGxvY2F0aW9uUmF0aW86IENwdSBBbGxvY2F0aW9uIFJhdGlvLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGF0dHJDcHVBbGxvY2F0aW9uUmF0aW86IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBDcmVhdGVUaW1lOiBDcmVhdGUgVGltZS5cbiAgICAgKi9cbiAgICByZWFkb25seSBhdHRyQ3JlYXRlVGltZTogcm9zLklSZXNvbHZhYmxlIHwgc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIERlZGljYXRlZEhvc3RDb3VudEdyb3VwQnlIb3N0VHlwZTogRGVkaWNhdGVkSG9zdENvdW50R3JvdXBCeUhvc3RUeXBlLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGF0dHJEZWRpY2F0ZWRIb3N0Q291bnRHcm91cEJ5SG9zdFR5cGU6IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBEZWRpY2F0ZWRIb3N0R3JvdXBEZXNjOiBEZWRpY2F0ZWQgSG9zdCBHcm91cCBEZXNjcmlwdGlvbi5cbiAgICAgKi9cbiAgICByZWFkb25seSBhdHRyRGVkaWNhdGVkSG9zdEdyb3VwRGVzYzogcm9zLklSZXNvbHZhYmxlIHwgc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIERlZGljYXRlZEhvc3RHcm91cElkOiBEZWRpY2F0ZWQgSG9zdCBHcm91cCBJRC5cbiAgICAgKi9cbiAgICByZWFkb25seSBhdHRyRGVkaWNhdGVkSG9zdEdyb3VwSWQ6IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBEZXBsb3lUeXBlOiBEZXBsb3lUeXBlLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGF0dHJEZXBsb3lUeXBlOiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgRGlza0FsbG9jYXRlUmF0aW9uOiBEaXNrQWxsb2NhdGVSYXRpb24uXG4gICAgICovXG4gICAgcmVhZG9ubHkgYXR0ckRpc2tBbGxvY2F0ZVJhdGlvbjogcm9zLklSZXNvbHZhYmxlIHwgc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIERpc2tBbGxvY2F0ZWRBbW91bnQ6IERpc2tBbGxvY2F0ZWRBbW91bnQuXG4gICAgICovXG4gICAgcmVhZG9ubHkgYXR0ckRpc2tBbGxvY2F0ZWRBbW91bnQ6IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBEaXNrQWxsb2NhdGlvblJhdGlvOiBEaXNrIEFsbG9jYXRpb24gUmF0aW8uXG4gICAgICovXG4gICAgcmVhZG9ubHkgYXR0ckRpc2tBbGxvY2F0aW9uUmF0aW86IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBEaXNrVXNlZEFtb3VudDogRGlza1VzZWRBbW91bnQuXG4gICAgICovXG4gICAgcmVhZG9ubHkgYXR0ckRpc2tVc2VkQW1vdW50OiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgRGlza1V0aWxpdHk6IERpc2tVdGlsaXR5LlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGF0dHJEaXNrVXRpbGl0eTogcm9zLklSZXNvbHZhYmxlIHwgc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIEVuZ2luZTogRGF0YWJhc2UgRW5naW5lIFR5cGUuXG4gICAgICovXG4gICAgcmVhZG9ubHkgYXR0ckVuZ2luZTogcm9zLklSZXNvbHZhYmxlIHwgc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIEhvc3ROdW1iZXI6IFRvdGFsIEhvc3QgTnVtYmVyLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGF0dHJIb3N0TnVtYmVyOiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgSG9zdFJlcGxhY2VQb2xpY3k6IEhvc3QgUmVwbGFjZSBQb2xpY3kuXG4gICAgICovXG4gICAgcmVhZG9ubHkgYXR0ckhvc3RSZXBsYWNlUG9saWN5OiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgSW5zdGFuY2VOdW1iZXI6IFRvdGFsIEluc3RhbmNlIE51bWJlci5cbiAgICAgKi9cbiAgICByZWFkb25seSBhdHRySW5zdGFuY2VOdW1iZXI6IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBNZW1BbGxvY2F0ZVJhdGlvbjogTWVtQWxsb2NhdGVSYXRpb24uXG4gICAgICovXG4gICAgcmVhZG9ubHkgYXR0ck1lbUFsbG9jYXRlUmF0aW9uOiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgTWVtQWxsb2NhdGVkQW1vdW50OiBNZW1BbGxvY2F0ZWRBbW91bnQuXG4gICAgICovXG4gICAgcmVhZG9ubHkgYXR0ck1lbUFsbG9jYXRlZEFtb3VudDogcm9zLklSZXNvbHZhYmxlIHwgc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIE1lbUFsbG9jYXRpb25SYXRpbzogTWVtb3J5IEFsbG9jYXRpb24gUmF0aW8uXG4gICAgICovXG4gICAgcmVhZG9ubHkgYXR0ck1lbUFsbG9jYXRpb25SYXRpbzogcm9zLklSZXNvbHZhYmxlIHwgc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIE1lbVVzZWRBbW91bnQ6IE1lbVVzZWRBbW91bnQuXG4gICAgICovXG4gICAgcmVhZG9ubHkgYXR0ck1lbVVzZWRBbW91bnQ6IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBNZW1VdGlsaXR5OiBNZW1VdGlsaXR5LlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGF0dHJNZW1VdGlsaXR5OiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgT3BlblBlcm1pc3Npb246IFdoZXRoZXIgT3BlbiBPUyBQZXJtaXNzaW9uLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGF0dHJPcGVuUGVybWlzc2lvbjogcm9zLklSZXNvbHZhYmxlIHwgc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIFRleHQ6IFRleHQuXG4gICAgICovXG4gICAgcmVhZG9ubHkgYXR0clRleHQ6IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBWcGNJZDogVlBDIElELlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGF0dHJWcGNJZDogcm9zLklSZXNvbHZhYmxlIHwgc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIFpvbmVJZExpc3Q6IFpvbmVJRExpc3QuXG4gICAgICovXG4gICAgcmVhZG9ubHkgYXR0clpvbmVJZExpc3Q6IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcbn1cbi8qKlxuICogVGhpcyBjbGFzcyBlbmNhcHN1bGF0ZXMgYW5kIGV4dGVuZHMgdGhlIFJPUyByZXNvdXJjZSB0eXBlIGBEQVRBU09VUkNFOjpDRERDOjpEZWRpY2F0ZWRIb3N0R3JvdXBgLlxuICogQE5vdGUgVGhpcyBjbGFzcyBtYXkgaGF2ZSBzb21lIG5ldyBmdW5jdGlvbnMgdG8gZmFjaWxpdGF0ZSBkZXZlbG9wbWVudCwgc28gaXQgaXMgcmVjb21tZW5kZWQgdG8gdXNlIHRoaXMgY2xhc3MgaW5zdGVhZCBvZiBgUm9zRGVkaWNhdGVkSG9zdEdyb3VwYGZvciBhIG1vcmUgY29udmVuaWVudCBkZXZlbG9wbWVudCBleHBlcmllbmNlLlxuICogU2VlIGh0dHBzOi8vd3d3LmFsaWJhYmFjbG91ZC5jb20vaGVscC9yb3MvZGV2ZWxvcGVyLXJlZmVyZW5jZS9kYXRhc291cmNlLWNkZGMtZGVkaWNhdGVkaG9zdGdyb3VwXG4gKi9cbmV4cG9ydCBjbGFzcyBEZWRpY2F0ZWRIb3N0R3JvdXAgZXh0ZW5kcyByb3MuUmVzb3VyY2UgaW1wbGVtZW50cyBJRGVkaWNhdGVkSG9zdEdyb3VwIHtcbiAgICBwcm90ZWN0ZWQgc2NvcGU6IHJvcy5Db25zdHJ1Y3Q7XG4gICAgcHJvdGVjdGVkIGlkOiBzdHJpbmc7XG4gICAgcHVibGljIHJlYWRvbmx5IHByb3BzOiBEZWRpY2F0ZWRIb3N0R3JvdXBQcm9wcztcbiAgICBwcm90ZWN0ZWQgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6IGJvb2xlYW47XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgQWxsb2NhdGlvblBvbGljeTogQWxsb2NhdGlvbiBQb2xpY3kuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJBbGxvY2F0aW9uUG9saWN5OiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgQmFzdGlvbkluc3RhbmNlSWQ6IEJhc3Rpb25JbnN0YW5jZUlkLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyQmFzdGlvbkluc3RhbmNlSWQ6IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBDYXRlZ29yeTogVGhlIGRlZGljYXRlZCBjbHVzdGVyIGZhbWlseSB0byB3aGljaCB0aGUgaG9zdCBiZWxvbmdzLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyQ2F0ZWdvcnk6IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBDcHVBbGxvY2F0ZVJhdGlvbjogQ3B1QWxsb2NhdGVSYXRpb24uXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJDcHVBbGxvY2F0ZVJhdGlvbjogcm9zLklSZXNvbHZhYmxlIHwgc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIENwdUFsbG9jYXRlZEFtb3VudDogQ3B1QWxsb2NhdGVkQW1vdW50LlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyQ3B1QWxsb2NhdGVkQW1vdW50OiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgQ3B1QWxsb2NhdGlvblJhdGlvOiBDcHUgQWxsb2NhdGlvbiBSYXRpby5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckNwdUFsbG9jYXRpb25SYXRpbzogcm9zLklSZXNvbHZhYmxlIHwgc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIENyZWF0ZVRpbWU6IENyZWF0ZSBUaW1lLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyQ3JlYXRlVGltZTogcm9zLklSZXNvbHZhYmxlIHwgc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIERlZGljYXRlZEhvc3RDb3VudEdyb3VwQnlIb3N0VHlwZTogRGVkaWNhdGVkSG9zdENvdW50R3JvdXBCeUhvc3RUeXBlLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyRGVkaWNhdGVkSG9zdENvdW50R3JvdXBCeUhvc3RUeXBlOiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgRGVkaWNhdGVkSG9zdEdyb3VwRGVzYzogRGVkaWNhdGVkIEhvc3QgR3JvdXAgRGVzY3JpcHRpb24uXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJEZWRpY2F0ZWRIb3N0R3JvdXBEZXNjOiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgRGVkaWNhdGVkSG9zdEdyb3VwSWQ6IERlZGljYXRlZCBIb3N0IEdyb3VwIElELlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyRGVkaWNhdGVkSG9zdEdyb3VwSWQ6IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBEZXBsb3lUeXBlOiBEZXBsb3lUeXBlLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyRGVwbG95VHlwZTogcm9zLklSZXNvbHZhYmxlIHwgc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIERpc2tBbGxvY2F0ZVJhdGlvbjogRGlza0FsbG9jYXRlUmF0aW9uLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyRGlza0FsbG9jYXRlUmF0aW9uOiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgRGlza0FsbG9jYXRlZEFtb3VudDogRGlza0FsbG9jYXRlZEFtb3VudC5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckRpc2tBbGxvY2F0ZWRBbW91bnQ6IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBEaXNrQWxsb2NhdGlvblJhdGlvOiBEaXNrIEFsbG9jYXRpb24gUmF0aW8uXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJEaXNrQWxsb2NhdGlvblJhdGlvOiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgRGlza1VzZWRBbW91bnQ6IERpc2tVc2VkQW1vdW50LlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyRGlza1VzZWRBbW91bnQ6IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBEaXNrVXRpbGl0eTogRGlza1V0aWxpdHkuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJEaXNrVXRpbGl0eTogcm9zLklSZXNvbHZhYmxlIHwgc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIEVuZ2luZTogRGF0YWJhc2UgRW5naW5lIFR5cGUuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJFbmdpbmU6IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBIb3N0TnVtYmVyOiBUb3RhbCBIb3N0IE51bWJlci5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckhvc3ROdW1iZXI6IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBIb3N0UmVwbGFjZVBvbGljeTogSG9zdCBSZXBsYWNlIFBvbGljeS5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckhvc3RSZXBsYWNlUG9saWN5OiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgSW5zdGFuY2VOdW1iZXI6IFRvdGFsIEluc3RhbmNlIE51bWJlci5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckluc3RhbmNlTnVtYmVyOiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgTWVtQWxsb2NhdGVSYXRpb246IE1lbUFsbG9jYXRlUmF0aW9uLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyTWVtQWxsb2NhdGVSYXRpb246IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBNZW1BbGxvY2F0ZWRBbW91bnQ6IE1lbUFsbG9jYXRlZEFtb3VudC5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ck1lbUFsbG9jYXRlZEFtb3VudDogcm9zLklSZXNvbHZhYmxlIHwgc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIE1lbUFsbG9jYXRpb25SYXRpbzogTWVtb3J5IEFsbG9jYXRpb24gUmF0aW8uXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJNZW1BbGxvY2F0aW9uUmF0aW86IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBNZW1Vc2VkQW1vdW50OiBNZW1Vc2VkQW1vdW50LlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyTWVtVXNlZEFtb3VudDogcm9zLklSZXNvbHZhYmxlIHwgc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIE1lbVV0aWxpdHk6IE1lbVV0aWxpdHkuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJNZW1VdGlsaXR5OiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgT3BlblBlcm1pc3Npb246IFdoZXRoZXIgT3BlbiBPUyBQZXJtaXNzaW9uLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyT3BlblBlcm1pc3Npb246IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBUZXh0OiBUZXh0LlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyVGV4dDogcm9zLklSZXNvbHZhYmxlIHwgc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIFZwY0lkOiBWUEMgSUQuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJWcGNJZDogcm9zLklSZXNvbHZhYmxlIHwgc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIFpvbmVJZExpc3Q6IFpvbmVJRExpc3QuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJab25lSWRMaXN0OiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBQYXJhbSBzY29wZSAtIHNjb3BlIGluIHdoaWNoIHRoaXMgcmVzb3VyY2UgaXMgZGVmaW5lZFxuICAgICAqIFBhcmFtIGlkICAgIC0gc2NvcGVkIGlkIG9mIHRoZSByZXNvdXJjZVxuICAgICAqIFBhcmFtIHByb3BzIC0gcmVzb3VyY2UgcHJvcGVydGllc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiByb3MuQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogRGVkaWNhdGVkSG9zdEdyb3VwUHJvcHMsIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OmJvb2xlYW4gPSB0cnVlKSB7XG4gICAgICAgIHN1cGVyKHNjb3BlLCBpZCk7XG4gICAgICAgIHRoaXMuc2NvcGUgPSBzY29wZTtcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xuICAgICAgICB0aGlzLnByb3BzID0gcHJvcHM7XG4gICAgICAgIHRoaXMuZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgPSBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDtcblxuICAgICAgICBjb25zdCByb3NEZWRpY2F0ZWRIb3N0R3JvdXAgPSBuZXcgUm9zRGVkaWNhdGVkSG9zdEdyb3VwKHRoaXMsIGlkLCAge1xuICAgICAgICAgICAgZGVkaWNhdGVkSG9zdEdyb3VwSWQ6IHByb3BzLmRlZGljYXRlZEhvc3RHcm91cElkLFxuICAgICAgICAgICAgcmVmcmVzaE9wdGlvbnM6IHByb3BzLnJlZnJlc2hPcHRpb25zID09PSB1bmRlZmluZWQgfHwgcHJvcHMucmVmcmVzaE9wdGlvbnMgPT09IG51bGwgPyAnTmV2ZXInIDogcHJvcHMucmVmcmVzaE9wdGlvbnMsXG4gICAgICAgIH0sIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ICYmIHRoaXMuc3RhY2suZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQpO1xuICAgICAgICB0aGlzLnJlc291cmNlID0gcm9zRGVkaWNhdGVkSG9zdEdyb3VwO1xuICAgICAgICB0aGlzLmF0dHJBbGxvY2F0aW9uUG9saWN5ID0gcm9zRGVkaWNhdGVkSG9zdEdyb3VwLmF0dHJBbGxvY2F0aW9uUG9saWN5O1xuICAgICAgICB0aGlzLmF0dHJCYXN0aW9uSW5zdGFuY2VJZCA9IHJvc0RlZGljYXRlZEhvc3RHcm91cC5hdHRyQmFzdGlvbkluc3RhbmNlSWQ7XG4gICAgICAgIHRoaXMuYXR0ckNhdGVnb3J5ID0gcm9zRGVkaWNhdGVkSG9zdEdyb3VwLmF0dHJDYXRlZ29yeTtcbiAgICAgICAgdGhpcy5hdHRyQ3B1QWxsb2NhdGVSYXRpb24gPSByb3NEZWRpY2F0ZWRIb3N0R3JvdXAuYXR0ckNwdUFsbG9jYXRlUmF0aW9uO1xuICAgICAgICB0aGlzLmF0dHJDcHVBbGxvY2F0ZWRBbW91bnQgPSByb3NEZWRpY2F0ZWRIb3N0R3JvdXAuYXR0ckNwdUFsbG9jYXRlZEFtb3VudDtcbiAgICAgICAgdGhpcy5hdHRyQ3B1QWxsb2NhdGlvblJhdGlvID0gcm9zRGVkaWNhdGVkSG9zdEdyb3VwLmF0dHJDcHVBbGxvY2F0aW9uUmF0aW87XG4gICAgICAgIHRoaXMuYXR0ckNyZWF0ZVRpbWUgPSByb3NEZWRpY2F0ZWRIb3N0R3JvdXAuYXR0ckNyZWF0ZVRpbWU7XG4gICAgICAgIHRoaXMuYXR0ckRlZGljYXRlZEhvc3RDb3VudEdyb3VwQnlIb3N0VHlwZSA9IHJvc0RlZGljYXRlZEhvc3RHcm91cC5hdHRyRGVkaWNhdGVkSG9zdENvdW50R3JvdXBCeUhvc3RUeXBlO1xuICAgICAgICB0aGlzLmF0dHJEZWRpY2F0ZWRIb3N0R3JvdXBEZXNjID0gcm9zRGVkaWNhdGVkSG9zdEdyb3VwLmF0dHJEZWRpY2F0ZWRIb3N0R3JvdXBEZXNjO1xuICAgICAgICB0aGlzLmF0dHJEZWRpY2F0ZWRIb3N0R3JvdXBJZCA9IHJvc0RlZGljYXRlZEhvc3RHcm91cC5hdHRyRGVkaWNhdGVkSG9zdEdyb3VwSWQ7XG4gICAgICAgIHRoaXMuYXR0ckRlcGxveVR5cGUgPSByb3NEZWRpY2F0ZWRIb3N0R3JvdXAuYXR0ckRlcGxveVR5cGU7XG4gICAgICAgIHRoaXMuYXR0ckRpc2tBbGxvY2F0ZVJhdGlvbiA9IHJvc0RlZGljYXRlZEhvc3RHcm91cC5hdHRyRGlza0FsbG9jYXRlUmF0aW9uO1xuICAgICAgICB0aGlzLmF0dHJEaXNrQWxsb2NhdGVkQW1vdW50ID0gcm9zRGVkaWNhdGVkSG9zdEdyb3VwLmF0dHJEaXNrQWxsb2NhdGVkQW1vdW50O1xuICAgICAgICB0aGlzLmF0dHJEaXNrQWxsb2NhdGlvblJhdGlvID0gcm9zRGVkaWNhdGVkSG9zdEdyb3VwLmF0dHJEaXNrQWxsb2NhdGlvblJhdGlvO1xuICAgICAgICB0aGlzLmF0dHJEaXNrVXNlZEFtb3VudCA9IHJvc0RlZGljYXRlZEhvc3RHcm91cC5hdHRyRGlza1VzZWRBbW91bnQ7XG4gICAgICAgIHRoaXMuYXR0ckRpc2tVdGlsaXR5ID0gcm9zRGVkaWNhdGVkSG9zdEdyb3VwLmF0dHJEaXNrVXRpbGl0eTtcbiAgICAgICAgdGhpcy5hdHRyRW5naW5lID0gcm9zRGVkaWNhdGVkSG9zdEdyb3VwLmF0dHJFbmdpbmU7XG4gICAgICAgIHRoaXMuYXR0ckhvc3ROdW1iZXIgPSByb3NEZWRpY2F0ZWRIb3N0R3JvdXAuYXR0ckhvc3ROdW1iZXI7XG4gICAgICAgIHRoaXMuYXR0ckhvc3RSZXBsYWNlUG9saWN5ID0gcm9zRGVkaWNhdGVkSG9zdEdyb3VwLmF0dHJIb3N0UmVwbGFjZVBvbGljeTtcbiAgICAgICAgdGhpcy5hdHRySW5zdGFuY2VOdW1iZXIgPSByb3NEZWRpY2F0ZWRIb3N0R3JvdXAuYXR0ckluc3RhbmNlTnVtYmVyO1xuICAgICAgICB0aGlzLmF0dHJNZW1BbGxvY2F0ZVJhdGlvbiA9IHJvc0RlZGljYXRlZEhvc3RHcm91cC5hdHRyTWVtQWxsb2NhdGVSYXRpb247XG4gICAgICAgIHRoaXMuYXR0ck1lbUFsbG9jYXRlZEFtb3VudCA9IHJvc0RlZGljYXRlZEhvc3RHcm91cC5hdHRyTWVtQWxsb2NhdGVkQW1vdW50O1xuICAgICAgICB0aGlzLmF0dHJNZW1BbGxvY2F0aW9uUmF0aW8gPSByb3NEZWRpY2F0ZWRIb3N0R3JvdXAuYXR0ck1lbUFsbG9jYXRpb25SYXRpbztcbiAgICAgICAgdGhpcy5hdHRyTWVtVXNlZEFtb3VudCA9IHJvc0RlZGljYXRlZEhvc3RHcm91cC5hdHRyTWVtVXNlZEFtb3VudDtcbiAgICAgICAgdGhpcy5hdHRyTWVtVXRpbGl0eSA9IHJvc0RlZGljYXRlZEhvc3RHcm91cC5hdHRyTWVtVXRpbGl0eTtcbiAgICAgICAgdGhpcy5hdHRyT3BlblBlcm1pc3Npb24gPSByb3NEZWRpY2F0ZWRIb3N0R3JvdXAuYXR0ck9wZW5QZXJtaXNzaW9uO1xuICAgICAgICB0aGlzLmF0dHJUZXh0ID0gcm9zRGVkaWNhdGVkSG9zdEdyb3VwLmF0dHJUZXh0O1xuICAgICAgICB0aGlzLmF0dHJWcGNJZCA9IHJvc0RlZGljYXRlZEhvc3RHcm91cC5hdHRyVnBjSWQ7XG4gICAgICAgIHRoaXMuYXR0clpvbmVJZExpc3QgPSByb3NEZWRpY2F0ZWRIb3N0R3JvdXAuYXR0clpvbmVJZExpc3Q7XG4gICAgfVxufVxuIl19