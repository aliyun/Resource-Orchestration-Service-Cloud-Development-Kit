"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Cluster2 = exports.Cluster2Property = void 0;
const ros = require("@alicloud/ros-cdk-core");
const emr_generated_1 = require("./emr.generated");
Object.defineProperty(exports, "Cluster2Property", { enumerable: true, get: function () { return emr_generated_1.RosCluster2; } });
/**
 * A ROS resource type:  `ALIYUN::EMR::Cluster2`
 */
class Cluster2 extends ros.Resource {
    /**
     * Create a new `ALIYUN::EMR::Cluster2`.
     *
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosCluster2 = new emr_generated_1.RosCluster2(this, id, {
            applications: props.applications,
            resourceGroupId: props.resourceGroupId,
            applicationConfigs: props.applicationConfigs,
            clusterType: props.clusterType,
            nodeGroups: props.nodeGroups,
            releaseVersion: props.releaseVersion,
            bootstrapScripts: props.bootstrapScripts,
            subscriptionConfig: props.subscriptionConfig,
            deployMode: props.deployMode,
            securityMode: props.securityMode,
            nodeAttributes: props.nodeAttributes,
            clusterName: props.clusterName,
            paymentType: props.paymentType,
            tags: props.tags,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosCluster2;
        this.attrClusterId = rosCluster2.attrClusterId;
    }
}
exports.Cluster2 = Cluster2;
//# sourceMappingURL=data:application/json;base64,