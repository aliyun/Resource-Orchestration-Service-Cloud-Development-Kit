"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NetworkInterfacePermission = exports.NetworkInterfacePermissionProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ecs_generated_1 = require("./ecs.generated");
Object.defineProperty(exports, "NetworkInterfacePermissionProperty", { enumerable: true, get: function () { return ecs_generated_1.RosNetworkInterfacePermission; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::ECS::NetworkInterfacePermission`, which is used to grant an account the permission to attach an elastic network interface (ENI) to an instance.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosNetworkInterfacePermission`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-ecs-networkinterfacepermission
 */
class NetworkInterfacePermission extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosNetworkInterfacePermission = new ecs_generated_1.RosNetworkInterfacePermission(this, id, {
            accountId: props.accountId,
            permission: props.permission === undefined || props.permission === null ? 'InstanceAttach' : props.permission,
            networkInterfaceId: props.networkInterfaceId,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosNetworkInterfacePermission;
        this.attrNetworkInterfacePermissionId = rosNetworkInterfacePermission.attrNetworkInterfacePermissionId;
    }
}
exports.NetworkInterfacePermission = NetworkInterfacePermission;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmV0d29ya2ludGVyZmFjZXBlcm1pc3Npb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJuZXR3b3JraW50ZXJmYWNlcGVybWlzc2lvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw4Q0FBOEM7QUFDOUMsbURBQWdFO0FBRXRCLG1IQUZqQyw2Q0FBNkIsT0FFc0M7QUFtQzVFOzs7O0dBSUc7QUFDSCxNQUFhLDBCQUEyQixTQUFRLEdBQUcsQ0FBQyxRQUFRO0lBV3hEOzs7O09BSUc7SUFDSCxZQUFZLEtBQW9CLEVBQUUsRUFBVSxFQUFFLEtBQXNDLEVBQUUsbUNBQTJDLElBQUk7UUFDakksS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNqQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUNiLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxnQ0FBZ0MsR0FBRyxnQ0FBZ0MsQ0FBQztRQUV6RSxNQUFNLDZCQUE2QixHQUFHLElBQUksNkNBQTZCLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRztZQUMvRSxTQUFTLEVBQUUsS0FBSyxDQUFDLFNBQVM7WUFDMUIsVUFBVSxFQUFFLEtBQUssQ0FBQyxVQUFVLEtBQUssU0FBUyxJQUFJLEtBQUssQ0FBQyxVQUFVLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFVBQVU7WUFDN0csa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGtCQUFrQjtTQUMvQyxFQUFFLGdDQUFnQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztRQUNwRixJQUFJLENBQUMsUUFBUSxHQUFHLDZCQUE2QixDQUFDO1FBQzlDLElBQUksQ0FBQyxnQ0FBZ0MsR0FBRyw2QkFBNkIsQ0FBQyxnQ0FBZ0MsQ0FBQztJQUMzRyxDQUFDO0NBQ0o7QUEvQkQsZ0VBK0JDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcm9zIGZyb20gJ0BhbGljbG91ZC9yb3MtY2RrLWNvcmUnO1xuaW1wb3J0IHsgUm9zTmV0d29ya0ludGVyZmFjZVBlcm1pc3Npb24gfSBmcm9tICcuL2Vjcy5nZW5lcmF0ZWQnO1xuLy8gR2VuZXJhdGVkIGZyb20gdGhlIEFsaUNsb3VkIFJPUyBSZXNvdXJjZSBTcGVjaWZpY2F0aW9uXG5leHBvcnQgeyBSb3NOZXR3b3JrSW50ZXJmYWNlUGVybWlzc2lvbiBhcyBOZXR3b3JrSW50ZXJmYWNlUGVybWlzc2lvblByb3BlcnR5IH07XG5cbi8qKlxuICogUHJvcGVydGllcyBmb3IgZGVmaW5pbmcgYSBgTmV0d29ya0ludGVyZmFjZVBlcm1pc3Npb25gLlxuICogU2VlIGh0dHBzOi8vd3d3LmFsaWJhYmFjbG91ZC5jb20vaGVscC9yb3MvZGV2ZWxvcGVyLXJlZmVyZW5jZS9hbGl5dW4tZWNzLW5ldHdvcmtpbnRlcmZhY2VwZXJtaXNzaW9uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgTmV0d29ya0ludGVyZmFjZVBlcm1pc3Npb25Qcm9wcyB7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBhY2NvdW50SWQ6IHRoZSBhY2NvdW50IGlkXG4gICAgICovXG4gICAgcmVhZG9ubHkgYWNjb3VudElkOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBuZXR3b3JrSW50ZXJmYWNlSWQ6IE5ldHdvcmsgaW50ZXJmYWNlIGlkXG4gICAgICovXG4gICAgcmVhZG9ubHkgbmV0d29ya0ludGVyZmFjZUlkOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBwZXJtaXNzaW9uOiB0aGUgcGVybWlzc2lvblxuICAgICAqL1xuICAgIHJlYWRvbmx5IHBlcm1pc3Npb246IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcbn1cblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgYE5ldHdvcmtJbnRlcmZhY2VQZXJtaXNzaW9uYC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJTmV0d29ya0ludGVyZmFjZVBlcm1pc3Npb24gZXh0ZW5kcyByb3MuSVJlc291cmNlIHtcbiAgICByZWFkb25seSBwcm9wczogTmV0d29ya0ludGVyZmFjZVBlcm1pc3Npb25Qcm9wcztcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBOZXR3b3JrSW50ZXJmYWNlUGVybWlzc2lvbklkOiB0aGUgbmV0d29yayBpbnRlcmZhY2UgcGVybWlzc2lvbiBpZFxuICAgICAqL1xuICAgIHJlYWRvbmx5IGF0dHJOZXR3b3JrSW50ZXJmYWNlUGVybWlzc2lvbklkOiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG59XG4vKipcbiAqIFRoaXMgY2xhc3MgZW5jYXBzdWxhdGVzIGFuZCBleHRlbmRzIHRoZSBST1MgcmVzb3VyY2UgdHlwZSBgQUxJWVVOOjpFQ1M6Ok5ldHdvcmtJbnRlcmZhY2VQZXJtaXNzaW9uYCwgd2hpY2ggaXMgdXNlZCB0byBncmFudCBhbiBhY2NvdW50IHRoZSBwZXJtaXNzaW9uIHRvIGF0dGFjaCBhbiBlbGFzdGljIG5ldHdvcmsgaW50ZXJmYWNlIChFTkkpIHRvIGFuIGluc3RhbmNlLlxuICogQE5vdGUgVGhpcyBjbGFzcyBtYXkgaGF2ZSBzb21lIG5ldyBmdW5jdGlvbnMgdG8gZmFjaWxpdGF0ZSBkZXZlbG9wbWVudCwgc28gaXQgaXMgcmVjb21tZW5kZWQgdG8gdXNlIHRoaXMgY2xhc3MgaW5zdGVhZCBvZiBgUm9zTmV0d29ya0ludGVyZmFjZVBlcm1pc3Npb25gZm9yIGEgbW9yZSBjb252ZW5pZW50IGRldmVsb3BtZW50IGV4cGVyaWVuY2UuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2FsaXl1bi1lY3MtbmV0d29ya2ludGVyZmFjZXBlcm1pc3Npb25cbiAqL1xuZXhwb3J0IGNsYXNzIE5ldHdvcmtJbnRlcmZhY2VQZXJtaXNzaW9uIGV4dGVuZHMgcm9zLlJlc291cmNlIGltcGxlbWVudHMgSU5ldHdvcmtJbnRlcmZhY2VQZXJtaXNzaW9uIHtcbiAgICBwcm90ZWN0ZWQgc2NvcGU6IHJvcy5Db25zdHJ1Y3Q7XG4gICAgcHJvdGVjdGVkIGlkOiBzdHJpbmc7XG4gICAgcHVibGljIHJlYWRvbmx5IHByb3BzOiBOZXR3b3JrSW50ZXJmYWNlUGVybWlzc2lvblByb3BzO1xuICAgIHByb3RlY3RlZCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBOZXR3b3JrSW50ZXJmYWNlUGVybWlzc2lvbklkOiB0aGUgbmV0d29yayBpbnRlcmZhY2UgcGVybWlzc2lvbiBpZFxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyTmV0d29ya0ludGVyZmFjZVBlcm1pc3Npb25JZDogcm9zLklSZXNvbHZhYmxlIHwgc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogUGFyYW0gc2NvcGUgLSBzY29wZSBpbiB3aGljaCB0aGlzIHJlc291cmNlIGlzIGRlZmluZWRcbiAgICAgKiBQYXJhbSBpZCAgICAtIHNjb3BlZCBpZCBvZiB0aGUgcmVzb3VyY2VcbiAgICAgKiBQYXJhbSBwcm9wcyAtIHJlc291cmNlIHByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihzY29wZTogcm9zLkNvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IE5ldHdvcmtJbnRlcmZhY2VQZXJtaXNzaW9uUHJvcHMsIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OmJvb2xlYW4gPSB0cnVlKSB7XG4gICAgICAgIHN1cGVyKHNjb3BlLCBpZCk7XG4gICAgICAgIHRoaXMuc2NvcGUgPSBzY29wZTtcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xuICAgICAgICB0aGlzLnByb3BzID0gcHJvcHM7XG4gICAgICAgIHRoaXMuZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgPSBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDtcblxuICAgICAgICBjb25zdCByb3NOZXR3b3JrSW50ZXJmYWNlUGVybWlzc2lvbiA9IG5ldyBSb3NOZXR3b3JrSW50ZXJmYWNlUGVybWlzc2lvbih0aGlzLCBpZCwgIHtcbiAgICAgICAgICAgIGFjY291bnRJZDogcHJvcHMuYWNjb3VudElkLFxuICAgICAgICAgICAgcGVybWlzc2lvbjogcHJvcHMucGVybWlzc2lvbiA9PT0gdW5kZWZpbmVkIHx8IHByb3BzLnBlcm1pc3Npb24gPT09IG51bGwgPyAnSW5zdGFuY2VBdHRhY2gnIDogcHJvcHMucGVybWlzc2lvbixcbiAgICAgICAgICAgIG5ldHdvcmtJbnRlcmZhY2VJZDogcHJvcHMubmV0d29ya0ludGVyZmFjZUlkLFxuICAgICAgICB9LCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCAmJiB0aGlzLnN0YWNrLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50KTtcbiAgICAgICAgdGhpcy5yZXNvdXJjZSA9IHJvc05ldHdvcmtJbnRlcmZhY2VQZXJtaXNzaW9uO1xuICAgICAgICB0aGlzLmF0dHJOZXR3b3JrSW50ZXJmYWNlUGVybWlzc2lvbklkID0gcm9zTmV0d29ya0ludGVyZmFjZVBlcm1pc3Npb24uYXR0ck5ldHdvcmtJbnRlcmZhY2VQZXJtaXNzaW9uSWQ7XG4gICAgfVxufVxuIl19