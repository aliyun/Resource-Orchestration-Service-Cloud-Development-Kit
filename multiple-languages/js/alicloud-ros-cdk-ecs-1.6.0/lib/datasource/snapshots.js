"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Snapshots = exports.SnapshotsProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ecs_generated_1 = require("./ecs.generated");
Object.defineProperty(exports, "SnapshotsProperty", { enumerable: true, get: function () { return ecs_generated_1.RosSnapshots; } });
/**
 * This class encapsulates and extends the ROS resource type `DATASOURCE::ECS::Snapshots`, which is used to query all snapshots of an Elastic Compute Service (ECS) instance or a disk.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosSnapshots`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/datasource-ecs-snapshots
 */
class Snapshots extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props = {}, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosSnapshots = new ecs_generated_1.RosSnapshots(this, id, {
            status: props.status,
            usage: props.usage,
            category: props.category,
            kmsKeyId: props.kmsKeyId,
            resourceGroupId: props.resourceGroupId,
            instanceId: props.instanceId,
            encrypted: props.encrypted,
            snapshotLinkId: props.snapshotLinkId,
            snapshotIds: props.snapshotIds,
            snapshotName: props.snapshotName,
            refreshOptions: props.refreshOptions === undefined || props.refreshOptions === null ? 'Never' : props.refreshOptions,
            filters: props.filters,
            snapshotType: props.snapshotType,
            sourceDiskType: props.sourceDiskType,
            tags: props.tags,
            diskId: props.diskId,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosSnapshots;
        this.attrSnapshotIds = rosSnapshots.attrSnapshotIds;
        this.attrSnapshots = rosSnapshots.attrSnapshots;
    }
}
exports.Snapshots = Snapshots;
//# sourceMappingURL=data:application/json;base64,