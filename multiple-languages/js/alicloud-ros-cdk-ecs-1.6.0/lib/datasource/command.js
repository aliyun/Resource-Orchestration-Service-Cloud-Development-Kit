"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Command = exports.CommandProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ecs_generated_1 = require("./ecs.generated");
Object.defineProperty(exports, "CommandProperty", { enumerable: true, get: function () { return ecs_generated_1.RosCommand; } });
/**
 * This class encapsulates and extends the ROS resource type `DATASOURCE::ECS::Command`, which is used to query an available command that is manually created.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosCommand`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/datasource-ecs-command
 */
class Command extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosCommand = new ecs_generated_1.RosCommand(this, id, {
            commandId: props.commandId,
            refreshOptions: props.refreshOptions === undefined || props.refreshOptions === null ? 'Never' : props.refreshOptions,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosCommand;
        this.attrCommandContent = rosCommand.attrCommandContent;
        this.attrCommandId = rosCommand.attrCommandId;
        this.attrCommandName = rosCommand.attrCommandName;
        this.attrCreateTime = rosCommand.attrCreateTime;
        this.attrDescription = rosCommand.attrDescription;
        this.attrEnableParameter = rosCommand.attrEnableParameter;
        this.attrParameterNames = rosCommand.attrParameterNames;
        this.attrTags = rosCommand.attrTags;
        this.attrTimeout = rosCommand.attrTimeout;
        this.attrType = rosCommand.attrType;
        this.attrWorkingDir = rosCommand.attrWorkingDir;
    }
}
exports.Command = Command;
//# sourceMappingURL=data:application/json;base64,