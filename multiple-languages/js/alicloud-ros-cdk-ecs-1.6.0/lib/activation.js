"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Activation = exports.ActivationProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ecs_generated_1 = require("./ecs.generated");
Object.defineProperty(exports, "ActivationProperty", { enumerable: true, get: function () { return ecs_generated_1.RosActivation; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::ECS::Activation`, which is used to create an activation code.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosActivation`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-ecs-activation
 */
class Activation extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props = {}, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosActivation = new ecs_generated_1.RosActivation(this, id, {
            instanceName: props.instanceName,
            instanceCount: props.instanceCount,
            description: props.description,
            resourceGroupId: props.resourceGroupId,
            timeToLiveInHours: props.timeToLiveInHours,
            ipAddressRange: props.ipAddressRange,
            tags: props.tags,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosActivation;
        this.attrActivationCode = rosActivation.attrActivationCode;
        this.attrActivationId = rosActivation.attrActivationId;
        this.attrDeregisteredCount = rosActivation.attrDeregisteredCount;
        this.attrRegisteredCount = rosActivation.attrRegisteredCount;
    }
}
exports.Activation = Activation;
//# sourceMappingURL=data:application/json;base64,