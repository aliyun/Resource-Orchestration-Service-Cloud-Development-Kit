"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DeploymentSet = exports.DeploymentSetProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ecs_generated_1 = require("./ecs.generated");
Object.defineProperty(exports, "DeploymentSetProperty", { enumerable: true, get: function () { return ecs_generated_1.RosDeploymentSet; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::ECS::DeploymentSet`, which is used to create a deployment set in a region.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosDeploymentSet`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-ecs-deploymentset
 */
class DeploymentSet extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props = {}, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosDeploymentSet = new ecs_generated_1.RosDeploymentSet(this, id, {
            onUnableToRedeployFailedInstance: props.onUnableToRedeployFailedInstance,
            description: props.description,
            groupCount: props.groupCount,
            strategy: props.strategy,
            deploymentSetName: props.deploymentSetName,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosDeploymentSet;
        this.attrDeploymentSetId = rosDeploymentSet.attrDeploymentSetId;
    }
}
exports.DeploymentSet = DeploymentSet;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVwbG95bWVudHNldC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImRlcGxveW1lbnRzZXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsOENBQThDO0FBQzlDLG1EQUFtRDtBQUV0QixzR0FGcEIsZ0NBQWdCLE9BRXlCO0FBeURsRDs7OztHQUlHO0FBQ0gsTUFBYSxhQUFjLFNBQVEsR0FBRyxDQUFDLFFBQVE7SUFXM0M7Ozs7T0FJRztJQUNILFlBQVksS0FBb0IsRUFBRSxFQUFVLEVBQUUsUUFBNEIsRUFBRSxFQUFFLG1DQUEyQyxJQUFJO1FBQ3pILEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDakIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUM7UUFDYixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsZ0NBQWdDLEdBQUcsZ0NBQWdDLENBQUM7UUFFekUsTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLGdDQUFnQixDQUFDLElBQUksRUFBRSxFQUFFLEVBQUc7WUFDckQsZ0NBQWdDLEVBQUUsS0FBSyxDQUFDLGdDQUFnQztZQUN4RSxXQUFXLEVBQUUsS0FBSyxDQUFDLFdBQVc7WUFDOUIsVUFBVSxFQUFFLEtBQUssQ0FBQyxVQUFVO1lBQzVCLFFBQVEsRUFBRSxLQUFLLENBQUMsUUFBUTtZQUN4QixpQkFBaUIsRUFBRSxLQUFLLENBQUMsaUJBQWlCO1NBQzdDLEVBQUUsZ0NBQWdDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO1FBQ3BGLElBQUksQ0FBQyxRQUFRLEdBQUcsZ0JBQWdCLENBQUM7UUFDakMsSUFBSSxDQUFDLG1CQUFtQixHQUFHLGdCQUFnQixDQUFDLG1CQUFtQixDQUFDO0lBQ3BFLENBQUM7Q0FDSjtBQWpDRCxzQ0FpQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyByb3MgZnJvbSAnQGFsaWNsb3VkL3Jvcy1jZGstY29yZSc7XG5pbXBvcnQgeyBSb3NEZXBsb3ltZW50U2V0IH0gZnJvbSAnLi9lY3MuZ2VuZXJhdGVkJztcbi8vIEdlbmVyYXRlZCBmcm9tIHRoZSBBbGlDbG91ZCBST1MgUmVzb3VyY2UgU3BlY2lmaWNhdGlvblxuZXhwb3J0IHsgUm9zRGVwbG95bWVudFNldCBhcyBEZXBsb3ltZW50U2V0UHJvcGVydHkgfTtcblxuLyoqXG4gKiBQcm9wZXJ0aWVzIGZvciBkZWZpbmluZyBhIGBEZXBsb3ltZW50U2V0YC5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvYWxpeXVuLWVjcy1kZXBsb3ltZW50c2V0XG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRGVwbG95bWVudFNldFByb3BzIHtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGRlcGxveW1lbnRTZXROYW1lOiBUaGUgbmFtZSBvZiB0aGUgZGVwbG95bWVudCBzZXQuIEl0IG11c3QgYmUgMiB0byAxMjggY2hhcmFjdGVycyBpbiBsZW5ndGguIEl0IG11c3RcbiAgICAgKiBzdGFydCB3aXRoIGEgbGV0dGVyIGFuZCBjYW5ub3Qgc3RhcnQgd2l0aCBodHRwOlxcL1xcLyBvciBodHRwczpcXC9cXC8uIEl0IGNhbiBjb250YWluIGxldHRlcnMsXG4gICAgICogZGlnaXRzLCBjb2xvbnMgKDopLCB1bmRlcnNjb3JlcyAoXyksIGFuZCBoeXBoZW5zICgtKS5cbiAgICAgKi9cbiAgICByZWFkb25seSBkZXBsb3ltZW50U2V0TmFtZT86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGRlc2NyaXB0aW9uOiBUaGUgZGVzY3JpcHRpb24gb2YgdGhlIGRlcGxveW1lbnQgc2V0LiBJdCBtdXN0IGJlIDIgdG8gMjU2IGNoYXJhY3RlcnMgaW4gbGVuZ3RoLiBJdFxuICAgICAqIGNhbm5vdCBzdGFydCB3aXRoIGh0dHA6XFwvXFwvIG9yIGh0dHBzOlxcL1xcLy5cbiAgICAgKi9cbiAgICByZWFkb25seSBkZXNjcmlwdGlvbj86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGdyb3VwQ291bnQ6IFNldCB0aGUgbnVtYmVyIG9mIGdyb3VwcyBmb3IgdGhlIGRlcGxveW1lbnQgc2V0IGdyb3VwIGhpZ2ggYXZhaWxhYmlsaXR5IHBvbGljeS4gVmFsdWUgcmFuZ2U6IDF+Ny5cbiAgICAgKiBEZWZhdWx0IHZhbHVlOiAzLlxuICAgICAqIFRoaXMgcGFyYW1ldGVyIG9ubHkgdGFrZXMgZWZmZWN0IHdoZW4gU3RyYXRlZ3k9QXZhaWxhYmlsaXR5R3JvdXAuXG4gICAgICovXG4gICAgcmVhZG9ubHkgZ3JvdXBDb3VudD86IG51bWJlciB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IG9uVW5hYmxlVG9SZWRlcGxveUZhaWxlZEluc3RhbmNlOiBUaGUgZW1lcmdlbmN5IHNvbHV0aW9uIHRvIHJlZGVwbG95IGZhaWxlZCBpbnN0YW5jZXMgaW4gdGhlIGRlcGxveW1lbnQgc2V0LiBWYWxpZCB2YWx1ZXM6XG4gICAgICogQ2FuY2VsTWVtYmVyc2hpcEFuZFN0YXJ0OiByZXN0YXJ0cyB0aGUgaW5zdGFuY2VzIGltbWVkaWF0ZWx5IGFmdGVyIHRoZXkgYXJlIHNodXQgZG93blxuICAgICAqIGFuZCBtaWdyYXRlZCB0byBvdGhlciBkZXBsb3ltZW50IHNldHMuIFRoaXMgaXMgdGhlIGRlZmF1bHQgdmFsdWUuXG4gICAgICogS2VlcFN0b3BwZWQ6IGtlZXBzIHRoZSBpbnN0YW5jZXMgc2h1dCBkb3duIGFuZCByZXN0YXJ0cyB0aGVtIGFmdGVyIHRoZSBkZXBsb3ltZW50XG4gICAgICogc2V0IGlzIHJlcGxlbmlzaGVkLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IG9uVW5hYmxlVG9SZWRlcGxveUZhaWxlZEluc3RhbmNlPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgc3RyYXRlZ3k6IERlcGxveW1lbnQgc3RyYXRlZ3kuIFJhbmdlczpcbiAgICAgKiBBdmFpbGFiaWxpdHk6IEhpZ2ggYXZhaWxhYmlsaXR5IHN0cmF0ZWd5LlxuICAgICAqIEF2YWlsYWJpbGl0eUdyb3VwOiBEZXBsb3ltZW50IGdyb3VwIGhpZ2ggYXZhaWxhYmlsaXR5IHN0cmF0ZWd5LlxuICAgICAqIExvd0xhdGVuY3k6IE5ldHdvcmsgbG93IGxhdGVuY3kgc3RyYXRlZ3kuXG4gICAgICovXG4gICAgcmVhZG9ubHkgc3RyYXRlZ3k/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG59XG5cbi8qKlxuICogUmVwcmVzZW50cyBhIGBEZXBsb3ltZW50U2V0YC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJRGVwbG95bWVudFNldCBleHRlbmRzIHJvcy5JUmVzb3VyY2Uge1xuICAgIHJlYWRvbmx5IHByb3BzOiBEZXBsb3ltZW50U2V0UHJvcHM7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgRGVwbG95bWVudFNldElkOiBUaGUgSUQgb2YgdGhlIGRlcGxveW1lbnQgc2V0LlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGF0dHJEZXBsb3ltZW50U2V0SWQ6IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcbn1cbi8qKlxuICogVGhpcyBjbGFzcyBlbmNhcHN1bGF0ZXMgYW5kIGV4dGVuZHMgdGhlIFJPUyByZXNvdXJjZSB0eXBlIGBBTElZVU46OkVDUzo6RGVwbG95bWVudFNldGAsIHdoaWNoIGlzIHVzZWQgdG8gY3JlYXRlIGEgZGVwbG95bWVudCBzZXQgaW4gYSByZWdpb24uXG4gKiBATm90ZSBUaGlzIGNsYXNzIG1heSBoYXZlIHNvbWUgbmV3IGZ1bmN0aW9ucyB0byBmYWNpbGl0YXRlIGRldmVsb3BtZW50LCBzbyBpdCBpcyByZWNvbW1lbmRlZCB0byB1c2UgdGhpcyBjbGFzcyBpbnN0ZWFkIG9mIGBSb3NEZXBsb3ltZW50U2V0YGZvciBhIG1vcmUgY29udmVuaWVudCBkZXZlbG9wbWVudCBleHBlcmllbmNlLlxuICogU2VlIGh0dHBzOi8vd3d3LmFsaWJhYmFjbG91ZC5jb20vaGVscC9yb3MvZGV2ZWxvcGVyLXJlZmVyZW5jZS9hbGl5dW4tZWNzLWRlcGxveW1lbnRzZXRcbiAqL1xuZXhwb3J0IGNsYXNzIERlcGxveW1lbnRTZXQgZXh0ZW5kcyByb3MuUmVzb3VyY2UgaW1wbGVtZW50cyBJRGVwbG95bWVudFNldCB7XG4gICAgcHJvdGVjdGVkIHNjb3BlOiByb3MuQ29uc3RydWN0O1xuICAgIHByb3RlY3RlZCBpZDogc3RyaW5nO1xuICAgIHB1YmxpYyByZWFkb25seSBwcm9wczogRGVwbG95bWVudFNldFByb3BzO1xuICAgIHByb3RlY3RlZCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBEZXBsb3ltZW50U2V0SWQ6IFRoZSBJRCBvZiB0aGUgZGVwbG95bWVudCBzZXQuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJEZXBsb3ltZW50U2V0SWQ6IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFBhcmFtIHNjb3BlIC0gc2NvcGUgaW4gd2hpY2ggdGhpcyByZXNvdXJjZSBpcyBkZWZpbmVkXG4gICAgICogUGFyYW0gaWQgICAgLSBzY29wZWQgaWQgb2YgdGhlIHJlc291cmNlXG4gICAgICogUGFyYW0gcHJvcHMgLSByZXNvdXJjZSBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IHJvcy5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBEZXBsb3ltZW50U2V0UHJvcHMgPSB7fSwgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6Ym9vbGVhbiA9IHRydWUpIHtcbiAgICAgICAgc3VwZXIoc2NvcGUsIGlkKTtcbiAgICAgICAgdGhpcy5zY29wZSA9IHNjb3BlO1xuICAgICAgICB0aGlzLmlkID0gaWQ7XG4gICAgICAgIHRoaXMucHJvcHMgPSBwcm9wcztcbiAgICAgICAgdGhpcy5lbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCA9IGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50O1xuXG4gICAgICAgIGNvbnN0IHJvc0RlcGxveW1lbnRTZXQgPSBuZXcgUm9zRGVwbG95bWVudFNldCh0aGlzLCBpZCwgIHtcbiAgICAgICAgICAgIG9uVW5hYmxlVG9SZWRlcGxveUZhaWxlZEluc3RhbmNlOiBwcm9wcy5vblVuYWJsZVRvUmVkZXBsb3lGYWlsZWRJbnN0YW5jZSxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBwcm9wcy5kZXNjcmlwdGlvbixcbiAgICAgICAgICAgIGdyb3VwQ291bnQ6IHByb3BzLmdyb3VwQ291bnQsXG4gICAgICAgICAgICBzdHJhdGVneTogcHJvcHMuc3RyYXRlZ3ksXG4gICAgICAgICAgICBkZXBsb3ltZW50U2V0TmFtZTogcHJvcHMuZGVwbG95bWVudFNldE5hbWUsXG4gICAgICAgIH0sIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ICYmIHRoaXMuc3RhY2suZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQpO1xuICAgICAgICB0aGlzLnJlc291cmNlID0gcm9zRGVwbG95bWVudFNldDtcbiAgICAgICAgdGhpcy5hdHRyRGVwbG95bWVudFNldElkID0gcm9zRGVwbG95bWVudFNldC5hdHRyRGVwbG95bWVudFNldElkO1xuICAgIH1cbn1cbiJdfQ==