"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SSHKeyPair = exports.SSHKeyPairProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ecs_generated_1 = require("./ecs.generated");
Object.defineProperty(exports, "SSHKeyPairProperty", { enumerable: true, get: function () { return ecs_generated_1.RosSSHKeyPair; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::ECS::SSHKeyPair`, which is used to create an SSH key pair or import an existing SSH key pair to access an Elastic Compute Service (ECS) instance.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosSSHKeyPair`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-ecs-sshkeypair
 */
class SSHKeyPair extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosSSHKeyPair = new ecs_generated_1.RosSSHKeyPair(this, id, {
            keyPairName: props.keyPairName,
            resourceGroupId: props.resourceGroupId,
            publicKeyBody: props.publicKeyBody,
            tags: props.tags,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosSSHKeyPair;
        this.attrKeyPairFingerPrint = rosSSHKeyPair.attrKeyPairFingerPrint;
        this.attrKeyPairName = rosSSHKeyPair.attrKeyPairName;
        this.attrPrivateKeyBody = rosSSHKeyPair.attrPrivateKeyBody;
    }
}
exports.SSHKeyPair = SSHKeyPair;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3Noa2V5cGFpci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInNzaGtleXBhaXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsOENBQThDO0FBQzlDLG1EQUFnRDtBQUV0QixtR0FGakIsNkJBQWEsT0FFc0I7QUFrRDVDOzs7O0dBSUc7QUFDSCxNQUFhLFVBQVcsU0FBUSxHQUFHLENBQUMsUUFBUTtJQXFCeEM7Ozs7T0FJRztJQUNILFlBQVksS0FBb0IsRUFBRSxFQUFVLEVBQUUsS0FBc0IsRUFBRSxtQ0FBMkMsSUFBSTtRQUNqSCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ2pCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQ2IsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLGdDQUFnQyxHQUFHLGdDQUFnQyxDQUFDO1FBRXpFLE1BQU0sYUFBYSxHQUFHLElBQUksNkJBQWEsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFHO1lBQy9DLFdBQVcsRUFBRSxLQUFLLENBQUMsV0FBVztZQUM5QixlQUFlLEVBQUUsS0FBSyxDQUFDLGVBQWU7WUFDdEMsYUFBYSxFQUFFLEtBQUssQ0FBQyxhQUFhO1lBQ2xDLElBQUksRUFBRSxLQUFLLENBQUMsSUFBSTtTQUNuQixFQUFFLGdDQUFnQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztRQUNwRixJQUFJLENBQUMsUUFBUSxHQUFHLGFBQWEsQ0FBQztRQUM5QixJQUFJLENBQUMsc0JBQXNCLEdBQUcsYUFBYSxDQUFDLHNCQUFzQixDQUFDO1FBQ25FLElBQUksQ0FBQyxlQUFlLEdBQUcsYUFBYSxDQUFDLGVBQWUsQ0FBQztRQUNyRCxJQUFJLENBQUMsa0JBQWtCLEdBQUcsYUFBYSxDQUFDLGtCQUFrQixDQUFDO0lBQy9ELENBQUM7Q0FDSjtBQTVDRCxnQ0E0Q0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyByb3MgZnJvbSAnQGFsaWNsb3VkL3Jvcy1jZGstY29yZSc7XG5pbXBvcnQgeyBSb3NTU0hLZXlQYWlyIH0gZnJvbSAnLi9lY3MuZ2VuZXJhdGVkJztcbi8vIEdlbmVyYXRlZCBmcm9tIHRoZSBBbGlDbG91ZCBST1MgUmVzb3VyY2UgU3BlY2lmaWNhdGlvblxuZXhwb3J0IHsgUm9zU1NIS2V5UGFpciBhcyBTU0hLZXlQYWlyUHJvcGVydHkgfTtcblxuLyoqXG4gKiBQcm9wZXJ0aWVzIGZvciBkZWZpbmluZyBhIGBTU0hLZXlQYWlyYC5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvYWxpeXVuLWVjcy1zc2hrZXlwYWlyXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgU1NIS2V5UGFpclByb3BzIHtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGtleVBhaXJOYW1lOiBTU0gga2V5IHBhaXIgbmFtZS4gSXQgbXVzdCBiZSB1bmlxdWUuIFsyLCAxMjhdIGNoYXJhY3RlcnMuIEFsbCBjaGFyYWN0ZXIgc2V0cyBhcmUgc3VwcG9ydGVkLiBEbyBub3Qgc3RhcnQgd2l0aCBhIHNwZWNpYWwgY2hhcmFjdGVyLCBkaWdpdCwgaHR0cDpcXC9cXC8sIG9yIGh0dHBzOlxcL1xcLy4gSXQgY2FuIGNvbnRhaW4gZGlnaXRzLCBcIi5cIiwgXCJfXCIsIG9yIFwiLVwiLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGtleVBhaXJOYW1lOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBwdWJsaWNLZXlCb2R5OiBTU0ggUHVibGljIGtleS4gSWYgUHVibGljS2V5Qm9keSBpcyBzcGVjaWZpZWQsIGV4aXN0ZWQgcHVibGljIGtleSBib2R5IHdpbGwgYmUgaW1wb3J0ZWQgaW5zdGVhZCBvZiBjcmVhdGluZyBuZXcgU1NIIGtleSBwYWlyLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHB1YmxpY0tleUJvZHk/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSByZXNvdXJjZUdyb3VwSWQ6IFJlc291cmNlIGdyb3VwIGlkLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHJlc291cmNlR3JvdXBJZD86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHRhZ3M6IFRhZ3MgdG8gYXR0YWNoIHRvIGluc3RhbmNlLiBNYXggc3VwcG9ydCAyMCB0YWdzIHRvIGFkZCBkdXJpbmcgY3JlYXRlIGluc3RhbmNlLiBFYWNoIHRhZyB3aXRoIHR3byBwcm9wZXJ0aWVzIEtleSBhbmQgVmFsdWUsIGFuZCBLZXkgaXMgcmVxdWlyZWQuXG4gICAgICovXG4gICAgcmVhZG9ubHkgdGFncz86IFJvc1NTSEtleVBhaXIuVGFnc1Byb3BlcnR5W107XG59XG5cbi8qKlxuICogUmVwcmVzZW50cyBhIGBTU0hLZXlQYWlyYC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJU1NIS2V5UGFpciBleHRlbmRzIHJvcy5JUmVzb3VyY2Uge1xuICAgIHJlYWRvbmx5IHByb3BzOiBTU0hLZXlQYWlyUHJvcHM7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgS2V5UGFpckZpbmdlclByaW50OiBUaGUgZmluZ2VycHJpbnQgb2YgdGhlIGtleSBwYWlyLiBUaGUgcHVibGljIGtleSBmaW5nZXJwcmludCBmb3JtYXQgZGVmaW5lZCBpbiBSRkM0NzE2OiBNRDUgbWVzc2FnZSBkaWdlc3QgYWxnb3JpdGhtLiBSZWZlciB0byBodHRwOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmM0NzE2LlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGF0dHJLZXlQYWlyRmluZ2VyUHJpbnQ6IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBLZXlQYWlyTmFtZTogU1NIIEtleSBwYWlyIG5hbWUuXG4gICAgICovXG4gICAgcmVhZG9ubHkgYXR0cktleVBhaXJOYW1lOiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgUHJpdmF0ZUtleUJvZHk6IFRoZSBwcml2YXRlIGtleSBvZiB0aGUga2V5IHBhaXIuIENvbnRlbnQgb2YgdGhlIFJTQSBwcml2YXRlIGtleSBpbiB0aGUgUEtDUyM4IGZvcm1hdCBvZiB0aGUgdW5lbmNyeXB0ZWQgUEVNIGVuY29kaW5nLiBSZWZlciB0bzogaHR0cHM6Ly93d3cub3BlbnNzbC5vcmcvZG9jcy9hcHBzL3BrY3M4Lmh0bWwuVXNlciBvbmx5IGNhbiBnZXQgdGhlIHByaXZhdGUga2V5IG9uZSB0aW1lIHdoZW4gYW5kIG9ubHkgd2hlbiBTU0gga2V5IHBhaXIgaXMgY3JlYXRlZC5cbiAgICAgKi9cbiAgICByZWFkb25seSBhdHRyUHJpdmF0ZUtleUJvZHk6IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcbn1cbi8qKlxuICogVGhpcyBjbGFzcyBlbmNhcHN1bGF0ZXMgYW5kIGV4dGVuZHMgdGhlIFJPUyByZXNvdXJjZSB0eXBlIGBBTElZVU46OkVDUzo6U1NIS2V5UGFpcmAsIHdoaWNoIGlzIHVzZWQgdG8gY3JlYXRlIGFuIFNTSCBrZXkgcGFpciBvciBpbXBvcnQgYW4gZXhpc3RpbmcgU1NIIGtleSBwYWlyIHRvIGFjY2VzcyBhbiBFbGFzdGljIENvbXB1dGUgU2VydmljZSAoRUNTKSBpbnN0YW5jZS5cbiAqIEBOb3RlIFRoaXMgY2xhc3MgbWF5IGhhdmUgc29tZSBuZXcgZnVuY3Rpb25zIHRvIGZhY2lsaXRhdGUgZGV2ZWxvcG1lbnQsIHNvIGl0IGlzIHJlY29tbWVuZGVkIHRvIHVzZSB0aGlzIGNsYXNzIGluc3RlYWQgb2YgYFJvc1NTSEtleVBhaXJgZm9yIGEgbW9yZSBjb252ZW5pZW50IGRldmVsb3BtZW50IGV4cGVyaWVuY2UuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2FsaXl1bi1lY3Mtc3Noa2V5cGFpclxuICovXG5leHBvcnQgY2xhc3MgU1NIS2V5UGFpciBleHRlbmRzIHJvcy5SZXNvdXJjZSBpbXBsZW1lbnRzIElTU0hLZXlQYWlyIHtcbiAgICBwcm90ZWN0ZWQgc2NvcGU6IHJvcy5Db25zdHJ1Y3Q7XG4gICAgcHJvdGVjdGVkIGlkOiBzdHJpbmc7XG4gICAgcHVibGljIHJlYWRvbmx5IHByb3BzOiBTU0hLZXlQYWlyUHJvcHM7XG4gICAgcHJvdGVjdGVkIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OiBib29sZWFuO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIEtleVBhaXJGaW5nZXJQcmludDogVGhlIGZpbmdlcnByaW50IG9mIHRoZSBrZXkgcGFpci4gVGhlIHB1YmxpYyBrZXkgZmluZ2VycHJpbnQgZm9ybWF0IGRlZmluZWQgaW4gUkZDNDcxNjogTUQ1IG1lc3NhZ2UgZGlnZXN0IGFsZ29yaXRobS4gUmVmZXIgdG8gaHR0cDovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjNDcxNi5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0cktleVBhaXJGaW5nZXJQcmludDogcm9zLklSZXNvbHZhYmxlIHwgc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIEtleVBhaXJOYW1lOiBTU0ggS2V5IHBhaXIgbmFtZS5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0cktleVBhaXJOYW1lOiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgUHJpdmF0ZUtleUJvZHk6IFRoZSBwcml2YXRlIGtleSBvZiB0aGUga2V5IHBhaXIuIENvbnRlbnQgb2YgdGhlIFJTQSBwcml2YXRlIGtleSBpbiB0aGUgUEtDUyM4IGZvcm1hdCBvZiB0aGUgdW5lbmNyeXB0ZWQgUEVNIGVuY29kaW5nLiBSZWZlciB0bzogaHR0cHM6Ly93d3cub3BlbnNzbC5vcmcvZG9jcy9hcHBzL3BrY3M4Lmh0bWwuVXNlciBvbmx5IGNhbiBnZXQgdGhlIHByaXZhdGUga2V5IG9uZSB0aW1lIHdoZW4gYW5kIG9ubHkgd2hlbiBTU0gga2V5IHBhaXIgaXMgY3JlYXRlZC5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0clByaXZhdGVLZXlCb2R5OiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBQYXJhbSBzY29wZSAtIHNjb3BlIGluIHdoaWNoIHRoaXMgcmVzb3VyY2UgaXMgZGVmaW5lZFxuICAgICAqIFBhcmFtIGlkICAgIC0gc2NvcGVkIGlkIG9mIHRoZSByZXNvdXJjZVxuICAgICAqIFBhcmFtIHByb3BzIC0gcmVzb3VyY2UgcHJvcGVydGllc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiByb3MuQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogU1NIS2V5UGFpclByb3BzLCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDpib29sZWFuID0gdHJ1ZSkge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQpO1xuICAgICAgICB0aGlzLnNjb3BlID0gc2NvcGU7XG4gICAgICAgIHRoaXMuaWQgPSBpZDtcbiAgICAgICAgdGhpcy5wcm9wcyA9IHByb3BzO1xuICAgICAgICB0aGlzLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ID0gZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ7XG5cbiAgICAgICAgY29uc3Qgcm9zU1NIS2V5UGFpciA9IG5ldyBSb3NTU0hLZXlQYWlyKHRoaXMsIGlkLCAge1xuICAgICAgICAgICAga2V5UGFpck5hbWU6IHByb3BzLmtleVBhaXJOYW1lLFxuICAgICAgICAgICAgcmVzb3VyY2VHcm91cElkOiBwcm9wcy5yZXNvdXJjZUdyb3VwSWQsXG4gICAgICAgICAgICBwdWJsaWNLZXlCb2R5OiBwcm9wcy5wdWJsaWNLZXlCb2R5LFxuICAgICAgICAgICAgdGFnczogcHJvcHMudGFncyxcbiAgICAgICAgfSwgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgJiYgdGhpcy5zdGFjay5lbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCk7XG4gICAgICAgIHRoaXMucmVzb3VyY2UgPSByb3NTU0hLZXlQYWlyO1xuICAgICAgICB0aGlzLmF0dHJLZXlQYWlyRmluZ2VyUHJpbnQgPSByb3NTU0hLZXlQYWlyLmF0dHJLZXlQYWlyRmluZ2VyUHJpbnQ7XG4gICAgICAgIHRoaXMuYXR0cktleVBhaXJOYW1lID0gcm9zU1NIS2V5UGFpci5hdHRyS2V5UGFpck5hbWU7XG4gICAgICAgIHRoaXMuYXR0clByaXZhdGVLZXlCb2R5ID0gcm9zU1NIS2V5UGFpci5hdHRyUHJpdmF0ZUtleUJvZHk7XG4gICAgfVxufVxuIl19