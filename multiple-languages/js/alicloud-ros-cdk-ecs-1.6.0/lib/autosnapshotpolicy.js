"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AutoSnapshotPolicy = exports.AutoSnapshotPolicyProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ecs_generated_1 = require("./ecs.generated");
Object.defineProperty(exports, "AutoSnapshotPolicyProperty", { enumerable: true, get: function () { return ecs_generated_1.RosAutoSnapshotPolicy; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::ECS::AutoSnapshotPolicy`, which is used to create an automatic snapshot policy.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosAutoSnapshotPolicy`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-ecs-autosnapshotpolicy
 */
class AutoSnapshotPolicy extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosAutoSnapshotPolicy = new ecs_generated_1.RosAutoSnapshotPolicy(this, id, {
            timePoints: props.timePoints,
            diskIds: props.diskIds,
            targetCopyRegions: props.targetCopyRegions,
            resourceGroupId: props.resourceGroupId,
            enableCrossRegionCopy: props.enableCrossRegionCopy,
            copyEncryptionConfiguration: props.copyEncryptionConfiguration,
            retentionDays: props.retentionDays,
            repeatWeekdays: props.repeatWeekdays,
            autoSnapshotPolicyName: props.autoSnapshotPolicyName,
            tags: props.tags,
            copiedSnapshotsRetentionDays: props.copiedSnapshotsRetentionDays,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosAutoSnapshotPolicy;
        this.attrAutoSnapshotPolicyId = rosAutoSnapshotPolicy.attrAutoSnapshotPolicyId;
    }
}
exports.AutoSnapshotPolicy = AutoSnapshotPolicy;
//# sourceMappingURL=data:application/json;base64,