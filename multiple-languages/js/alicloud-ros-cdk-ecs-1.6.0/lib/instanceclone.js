"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InstanceClone = exports.InstanceCloneProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ecs_generated_1 = require("./ecs.generated");
Object.defineProperty(exports, "InstanceCloneProperty", { enumerable: true, get: function () { return ecs_generated_1.RosInstanceClone; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::ECS::InstanceClone`, which is used to clone an Elastic Compute Service (ECS) instance.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosInstanceClone`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-ecs-instanceclone
 */
class InstanceClone extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosInstanceClone = new ecs_generated_1.RosInstanceClone(this, id, {
            backendServerWeight: props.backendServerWeight === undefined || props.backendServerWeight === null ? 100 : props.backendServerWeight,
            keyPairName: props.keyPairName,
            description: props.description,
            diskMappings: props.diskMappings,
            resourceGroupId: props.resourceGroupId,
            zoneId: props.zoneId,
            instanceChargeType: props.instanceChargeType === undefined || props.instanceChargeType === null ? 'PostPaid' : props.instanceChargeType,
            securityGroupId: props.securityGroupId,
            period: props.period === undefined || props.period === null ? 1 : props.period,
            deletionProtection: props.deletionProtection,
            sourceInstanceId: props.sourceInstanceId,
            loadBalancerIdToAttach: props.loadBalancerIdToAttach,
            instanceName: props.instanceName,
            ramRoleName: props.ramRoleName,
            internetMaxBandwidthIn: props.internetMaxBandwidthIn === undefined || props.internetMaxBandwidthIn === null ? 200 : props.internetMaxBandwidthIn,
            imageId: props.imageId,
            spotPriceLimit: props.spotPriceLimit,
            tags: props.tags,
            spotStrategy: props.spotStrategy,
            password: props.password,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosInstanceClone;
        this.attrHostName = rosInstanceClone.attrHostName;
        this.attrInnerIp = rosInstanceClone.attrInnerIp;
        this.attrInstanceId = rosInstanceClone.attrInstanceId;
        this.attrPrimaryNetworkInterfaceId = rosInstanceClone.attrPrimaryNetworkInterfaceId;
        this.attrPrivateIp = rosInstanceClone.attrPrivateIp;
        this.attrPublicIp = rosInstanceClone.attrPublicIp;
        this.attrSecurityGroupIds = rosInstanceClone.attrSecurityGroupIds;
        this.attrZoneId = rosInstanceClone.attrZoneId;
    }
}
exports.InstanceClone = InstanceClone;
//# sourceMappingURL=data:application/json;base64,