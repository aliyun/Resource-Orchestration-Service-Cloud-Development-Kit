"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CopyImage = exports.CopyImageProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ecs_generated_1 = require("./ecs.generated");
Object.defineProperty(exports, "CopyImageProperty", { enumerable: true, get: function () { return ecs_generated_1.RosCopyImage; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::ECS::CopyImage`, which is used to copy a custom image from one region to another region.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosCopyImage`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-ecs-copyimage
 */
class CopyImage extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosCopyImage = new ecs_generated_1.RosCopyImage(this, id, {
            sourceRegionId: props.sourceRegionId,
            kmsKeyId: props.kmsKeyId,
            resourceGroupId: props.resourceGroupId,
            allowCopyInSameRegion: props.allowCopyInSameRegion,
            destinationRegionId: props.destinationRegionId,
            encrypted: props.encrypted,
            imageId: props.imageId,
            destinationDescription: props.destinationDescription,
            tag: props.tag,
            destinationImageName: props.destinationImageName,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosCopyImage;
        this.attrDestinationRegionId = rosCopyImage.attrDestinationRegionId;
        this.attrImageId = rosCopyImage.attrImageId;
        this.attrSourceRegionId = rosCopyImage.attrSourceRegionId;
    }
}
exports.CopyImage = CopyImage;
//# sourceMappingURL=data:application/json;base64,