"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LifecycleHook = exports.LifecycleHookProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ess_generated_1 = require("./ess.generated");
Object.defineProperty(exports, "LifecycleHookProperty", { enumerable: true, get: function () { return ess_generated_1.RosLifecycleHook; } });
/**
 * A ROS resource type:  `ALIYUN::ESS::LifecycleHook`
 */
class LifecycleHook extends ros.Resource {
    /**
     * Create a new `ALIYUN::ESS::LifecycleHook`.
     *
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosLifecycleHook = new ess_generated_1.RosLifecycleHook(this, id, {
            lifecycleHookName: props.lifecycleHookName,
            notificationArn: props.notificationArn,
            scalingGroupId: props.scalingGroupId,
            lifecycleTransition: props.lifecycleTransition,
            heartbeatTimeout: props.heartbeatTimeout,
            notificationMetadata: props.notificationMetadata,
            defaultResult: props.defaultResult,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosLifecycleHook;
        this.attrLifecycleHookId = rosLifecycleHook.attrLifecycleHookId;
    }
}
exports.LifecycleHook = LifecycleHook;
//# sourceMappingURL=data:application/json;base64,