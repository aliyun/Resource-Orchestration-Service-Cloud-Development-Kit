"use strict";
// Generated from the AliCloud ROS Resource Specification
Object.defineProperty(exports, "__esModule", { value: true });
exports.RosServerGroup = exports.RosSecurityPolicy = exports.RosSecurityGroupAttachment = exports.RosRule = exports.RosLoadBalancer = exports.RosListener = exports.RosHealthCheckTemplate = exports.RosBackendServerAttachment = exports.RosAdditionalCertificateAssociation = exports.RosAclAssociation = exports.RosAcl = exports.RosAScript = void 0;
const ros = require("@alicloud/ros-cdk-core");
/**
 * Determine whether the given properties match those of a `RosAScriptProps`
 *
 * @param properties - the TypeScript properties of a `RosAScriptProps`
 *
 * @returns the result of the validation.
 */
function RosAScriptPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('scriptContent', ros.requiredValidator)(properties.scriptContent));
    errors.collect(ros.propertyValidator('scriptContent', ros.validateString)(properties.scriptContent));
    errors.collect(ros.propertyValidator('aScriptName', ros.requiredValidator)(properties.aScriptName));
    if (properties.aScriptName && (typeof properties.aScriptName) !== 'object') {
        errors.collect(ros.propertyValidator('aScriptName', ros.validateAllowedPattern)({
            data: properties.aScriptName,
            reg: /^[a-zA-Z][.-_a-zA-Z0-9]{1,127}$/
        }));
    }
    errors.collect(ros.propertyValidator('aScriptName', ros.validateString)(properties.aScriptName));
    errors.collect(ros.propertyValidator('enabled', ros.validateBoolean)(properties.enabled));
    errors.collect(ros.propertyValidator('extAttributeEnabled', ros.validateBoolean)(properties.extAttributeEnabled));
    if (properties.extAttributes && (Array.isArray(properties.extAttributes) || (typeof properties.extAttributes) === 'string')) {
        errors.collect(ros.propertyValidator('extAttributes', ros.validateLength)({
            data: properties.extAttributes.length,
            min: undefined,
            max: 20,
        }));
    }
    errors.collect(ros.propertyValidator('extAttributes', ros.listValidator(RosAScript_ExtAttributesPropertyValidator))(properties.extAttributes));
    errors.collect(ros.propertyValidator('listenerId', ros.requiredValidator)(properties.listenerId));
    errors.collect(ros.propertyValidator('listenerId', ros.validateString)(properties.listenerId));
    return errors.wrap('supplied properties not correct for "RosAScriptProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ALB::AScript` resource
 *
 * @param properties - the TypeScript properties of a `RosAScriptProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ALB::AScript` resource.
 */
// @ts-ignore TS6133
function rosAScriptPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosAScriptPropsValidator(properties).assertSuccess();
    }
    return {
        'AScriptName': ros.stringToRosTemplate(properties.aScriptName),
        'ListenerId': ros.stringToRosTemplate(properties.listenerId),
        'ScriptContent': ros.stringToRosTemplate(properties.scriptContent),
        'Enabled': ros.booleanToRosTemplate(properties.enabled),
        'ExtAttributeEnabled': ros.booleanToRosTemplate(properties.extAttributeEnabled),
        'ExtAttributes': ros.listMapper(rosAScriptExtAttributesPropertyToRosTemplate)(properties.extAttributes),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::ALB::AScript`, which is used to create an AScript rule.
 * @Note This class does not contain additional functions, so it is recommended to use the `AScript` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-alb-ascript
 */
class RosAScript extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosAScript.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrAScriptId = this.getAtt('AScriptId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.aScriptName = props.aScriptName;
        this.listenerId = props.listenerId;
        this.scriptContent = props.scriptContent;
        this.enabled = props.enabled;
        this.extAttributeEnabled = props.extAttributeEnabled;
        this.extAttributes = props.extAttributes;
    }
    get rosProperties() {
        return {
            aScriptName: this.aScriptName,
            listenerId: this.listenerId,
            scriptContent: this.scriptContent,
            enabled: this.enabled,
            extAttributeEnabled: this.extAttributeEnabled,
            extAttributes: this.extAttributes,
        };
    }
    renderProperties(props) {
        return rosAScriptPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosAScript = RosAScript;
/**
 * The resource type name for this resource class.
 */
RosAScript.ROS_RESOURCE_TYPE_NAME = "ALIYUN::ALB::AScript";
/**
 * Determine whether the given properties match those of a `ExtAttributesProperty`
 *
 * @param properties - the TypeScript properties of a `ExtAttributesProperty`
 *
 * @returns the result of the validation.
 */
function RosAScript_ExtAttributesPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('attributeKey', ros.validateString)(properties.attributeKey));
    if (properties.attributeValue && (Array.isArray(properties.attributeValue) || (typeof properties.attributeValue) === 'string')) {
        errors.collect(ros.propertyValidator('attributeValue', ros.validateLength)({
            data: properties.attributeValue.length,
            min: 1,
            max: 128,
        }));
    }
    errors.collect(ros.propertyValidator('attributeValue', ros.validateString)(properties.attributeValue));
    return errors.wrap('supplied properties not correct for "ExtAttributesProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ALB::AScript.ExtAttributes` resource
 *
 * @param properties - the TypeScript properties of a `ExtAttributesProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ALB::AScript.ExtAttributes` resource.
 */
// @ts-ignore TS6133
function rosAScriptExtAttributesPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosAScript_ExtAttributesPropertyValidator(properties).assertSuccess();
    return {
        'AttributeKey': ros.stringToRosTemplate(properties.attributeKey),
        'AttributeValue': ros.stringToRosTemplate(properties.attributeValue),
    };
}
/**
 * Determine whether the given properties match those of a `RosAclProps`
 *
 * @param properties - the TypeScript properties of a `RosAclProps`
 *
 * @returns the result of the validation.
 */
function RosAclPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    if (properties.aclEntries && (Array.isArray(properties.aclEntries) || (typeof properties.aclEntries) === 'string')) {
        errors.collect(ros.propertyValidator('aclEntries', ros.validateLength)({
            data: properties.aclEntries.length,
            min: undefined,
            max: 1000,
        }));
    }
    errors.collect(ros.propertyValidator('aclEntries', ros.listValidator(RosAcl_AclEntriesPropertyValidator))(properties.aclEntries));
    errors.collect(ros.propertyValidator('resourceGroupId', ros.validateString)(properties.resourceGroupId));
    if (properties.aclName && (Array.isArray(properties.aclName) || (typeof properties.aclName) === 'string')) {
        errors.collect(ros.propertyValidator('aclName', ros.validateLength)({
            data: properties.aclName.length,
            min: 2,
            max: 128,
        }));
    }
    errors.collect(ros.propertyValidator('aclName', ros.validateString)(properties.aclName));
    return errors.wrap('supplied properties not correct for "RosAclProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ALB::Acl` resource
 *
 * @param properties - the TypeScript properties of a `RosAclProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ALB::Acl` resource.
 */
// @ts-ignore TS6133
function rosAclPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosAclPropsValidator(properties).assertSuccess();
    }
    return {
        'AclEntries': ros.listMapper(rosAclAclEntriesPropertyToRosTemplate)(properties.aclEntries),
        'AclName': ros.stringToRosTemplate(properties.aclName),
        'ResourceGroupId': ros.stringToRosTemplate(properties.resourceGroupId),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::ALB::Acl`, which is used to create an access control list (ACL).
 * @Note This class does not contain additional functions, so it is recommended to use the `Acl` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-alb-acl
 */
class RosAcl extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosAcl.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrAclId = this.getAtt('AclId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.aclEntries = props.aclEntries;
        this.aclName = props.aclName;
        this.resourceGroupId = props.resourceGroupId;
    }
    get rosProperties() {
        return {
            aclEntries: this.aclEntries,
            aclName: this.aclName,
            resourceGroupId: this.resourceGroupId,
        };
    }
    renderProperties(props) {
        return rosAclPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosAcl = RosAcl;
/**
 * The resource type name for this resource class.
 */
RosAcl.ROS_RESOURCE_TYPE_NAME = "ALIYUN::ALB::Acl";
/**
 * Determine whether the given properties match those of a `AclEntriesProperty`
 *
 * @param properties - the TypeScript properties of a `AclEntriesProperty`
 *
 * @returns the result of the validation.
 */
function RosAcl_AclEntriesPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('entry', ros.requiredValidator)(properties.entry));
    errors.collect(ros.propertyValidator('entry', ros.validateString)(properties.entry));
    if (properties.description && (Array.isArray(properties.description) || (typeof properties.description) === 'string')) {
        errors.collect(ros.propertyValidator('description', ros.validateLength)({
            data: properties.description.length,
            min: 2,
            max: 256,
        }));
    }
    errors.collect(ros.propertyValidator('description', ros.validateString)(properties.description));
    return errors.wrap('supplied properties not correct for "AclEntriesProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ALB::Acl.AclEntries` resource
 *
 * @param properties - the TypeScript properties of a `AclEntriesProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ALB::Acl.AclEntries` resource.
 */
// @ts-ignore TS6133
function rosAclAclEntriesPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosAcl_AclEntriesPropertyValidator(properties).assertSuccess();
    return {
        'Entry': ros.stringToRosTemplate(properties.entry),
        'Description': ros.stringToRosTemplate(properties.description),
    };
}
/**
 * Determine whether the given properties match those of a `RosAclAssociationProps`
 *
 * @param properties - the TypeScript properties of a `RosAclAssociationProps`
 *
 * @returns the result of the validation.
 */
function RosAclAssociationPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('aclType', ros.requiredValidator)(properties.aclType));
    if (properties.aclType && (typeof properties.aclType) !== 'object') {
        errors.collect(ros.propertyValidator('aclType', ros.validateAllowedValues)({
            data: properties.aclType,
            allowedValues: ["White", "Black"],
        }));
    }
    errors.collect(ros.propertyValidator('aclType', ros.validateString)(properties.aclType));
    errors.collect(ros.propertyValidator('aclIds', ros.requiredValidator)(properties.aclIds));
    if (properties.aclIds && (Array.isArray(properties.aclIds) || (typeof properties.aclIds) === 'string')) {
        errors.collect(ros.propertyValidator('aclIds', ros.validateLength)({
            data: properties.aclIds.length,
            min: 1,
            max: 3,
        }));
    }
    errors.collect(ros.propertyValidator('aclIds', ros.listValidator(ros.validateString))(properties.aclIds));
    errors.collect(ros.propertyValidator('listenerId', ros.requiredValidator)(properties.listenerId));
    errors.collect(ros.propertyValidator('listenerId', ros.validateString)(properties.listenerId));
    return errors.wrap('supplied properties not correct for "RosAclAssociationProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ALB::AclAssociation` resource
 *
 * @param properties - the TypeScript properties of a `RosAclAssociationProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ALB::AclAssociation` resource.
 */
// @ts-ignore TS6133
function rosAclAssociationPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosAclAssociationPropsValidator(properties).assertSuccess();
    }
    return {
        'AclIds': ros.listMapper(ros.stringToRosTemplate)(properties.aclIds),
        'AclType': ros.stringToRosTemplate(properties.aclType),
        'ListenerId': ros.stringToRosTemplate(properties.listenerId),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::ALB::AclAssociation`, which is used to associate access control lists (ACLs) with a listener.
 * @Note This class does not contain additional functions, so it is recommended to use the `AclAssociation` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-alb-aclassociation
 */
class RosAclAssociation extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosAclAssociation.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrListenerId = this.getAtt('ListenerId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.aclIds = props.aclIds;
        this.aclType = props.aclType;
        this.listenerId = props.listenerId;
    }
    get rosProperties() {
        return {
            aclIds: this.aclIds,
            aclType: this.aclType,
            listenerId: this.listenerId,
        };
    }
    renderProperties(props) {
        return rosAclAssociationPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosAclAssociation = RosAclAssociation;
/**
 * The resource type name for this resource class.
 */
RosAclAssociation.ROS_RESOURCE_TYPE_NAME = "ALIYUN::ALB::AclAssociation";
/**
 * Determine whether the given properties match those of a `RosAdditionalCertificateAssociationProps`
 *
 * @param properties - the TypeScript properties of a `RosAdditionalCertificateAssociationProps`
 *
 * @returns the result of the validation.
 */
function RosAdditionalCertificateAssociationPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('certificates', ros.requiredValidator)(properties.certificates));
    if (properties.certificates && (Array.isArray(properties.certificates) || (typeof properties.certificates) === 'string')) {
        errors.collect(ros.propertyValidator('certificates', ros.validateLength)({
            data: properties.certificates.length,
            min: 1,
            max: 300,
        }));
    }
    errors.collect(ros.propertyValidator('certificates', ros.listValidator(RosAdditionalCertificateAssociation_CertificatesPropertyValidator))(properties.certificates));
    errors.collect(ros.propertyValidator('listenerId', ros.requiredValidator)(properties.listenerId));
    errors.collect(ros.propertyValidator('listenerId', ros.validateString)(properties.listenerId));
    return errors.wrap('supplied properties not correct for "RosAdditionalCertificateAssociationProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ALB::AdditionalCertificateAssociation` resource
 *
 * @param properties - the TypeScript properties of a `RosAdditionalCertificateAssociationProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ALB::AdditionalCertificateAssociation` resource.
 */
// @ts-ignore TS6133
function rosAdditionalCertificateAssociationPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosAdditionalCertificateAssociationPropsValidator(properties).assertSuccess();
    }
    return {
        'Certificates': ros.listMapper(rosAdditionalCertificateAssociationCertificatesPropertyToRosTemplate)(properties.certificates),
        'ListenerId': ros.stringToRosTemplate(properties.listenerId),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::ALB::AdditionalCertificateAssociation`, which is used to add additional certificates to a listener.
 * @Note This class does not contain additional functions, so it is recommended to use the `AdditionalCertificateAssociation` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-alb-additionalcertificateassociation
 */
class RosAdditionalCertificateAssociation extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosAdditionalCertificateAssociation.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrListenerId = this.getAtt('ListenerId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.certificates = props.certificates;
        this.listenerId = props.listenerId;
    }
    get rosProperties() {
        return {
            certificates: this.certificates,
            listenerId: this.listenerId,
        };
    }
    renderProperties(props) {
        return rosAdditionalCertificateAssociationPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosAdditionalCertificateAssociation = RosAdditionalCertificateAssociation;
/**
 * The resource type name for this resource class.
 */
RosAdditionalCertificateAssociation.ROS_RESOURCE_TYPE_NAME = "ALIYUN::ALB::AdditionalCertificateAssociation";
/**
 * Determine whether the given properties match those of a `CertificatesProperty`
 *
 * @param properties - the TypeScript properties of a `CertificatesProperty`
 *
 * @returns the result of the validation.
 */
function RosAdditionalCertificateAssociation_CertificatesPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('certificateId', ros.requiredValidator)(properties.certificateId));
    errors.collect(ros.propertyValidator('certificateId', ros.validateString)(properties.certificateId));
    return errors.wrap('supplied properties not correct for "CertificatesProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ALB::AdditionalCertificateAssociation.Certificates` resource
 *
 * @param properties - the TypeScript properties of a `CertificatesProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ALB::AdditionalCertificateAssociation.Certificates` resource.
 */
// @ts-ignore TS6133
function rosAdditionalCertificateAssociationCertificatesPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosAdditionalCertificateAssociation_CertificatesPropertyValidator(properties).assertSuccess();
    return {
        'CertificateId': ros.stringToRosTemplate(properties.certificateId),
    };
}
/**
 * Determine whether the given properties match those of a `RosBackendServerAttachmentProps`
 *
 * @param properties - the TypeScript properties of a `RosBackendServerAttachmentProps`
 *
 * @returns the result of the validation.
 */
function RosBackendServerAttachmentPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('serverGroupId', ros.requiredValidator)(properties.serverGroupId));
    errors.collect(ros.propertyValidator('serverGroupId', ros.validateString)(properties.serverGroupId));
    errors.collect(ros.propertyValidator('servers', ros.requiredValidator)(properties.servers));
    if (properties.servers && (Array.isArray(properties.servers) || (typeof properties.servers) === 'string')) {
        errors.collect(ros.propertyValidator('servers', ros.validateLength)({
            data: properties.servers.length,
            min: undefined,
            max: 1000,
        }));
    }
    errors.collect(ros.propertyValidator('servers', ros.listValidator(RosBackendServerAttachment_ServersPropertyValidator))(properties.servers));
    return errors.wrap('supplied properties not correct for "RosBackendServerAttachmentProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ALB::BackendServerAttachment` resource
 *
 * @param properties - the TypeScript properties of a `RosBackendServerAttachmentProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ALB::BackendServerAttachment` resource.
 */
// @ts-ignore TS6133
function rosBackendServerAttachmentPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosBackendServerAttachmentPropsValidator(properties).assertSuccess();
    }
    return {
        'ServerGroupId': ros.stringToRosTemplate(properties.serverGroupId),
        'Servers': ros.listMapper(rosBackendServerAttachmentServersPropertyToRosTemplate)(properties.servers),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::ALB::BackendServerAttachment`, which is used to add backend servers to a server group.
 * @Note This class does not contain additional functions, so it is recommended to use the `BackendServerAttachment` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-alb-backendserverattachment
 */
class RosBackendServerAttachment extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosBackendServerAttachment.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrServerGroupId = this.getAtt('ServerGroupId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.serverGroupId = props.serverGroupId;
        this.servers = props.servers;
    }
    get rosProperties() {
        return {
            serverGroupId: this.serverGroupId,
            servers: this.servers,
        };
    }
    renderProperties(props) {
        return rosBackendServerAttachmentPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosBackendServerAttachment = RosBackendServerAttachment;
/**
 * The resource type name for this resource class.
 */
RosBackendServerAttachment.ROS_RESOURCE_TYPE_NAME = "ALIYUN::ALB::BackendServerAttachment";
/**
 * Determine whether the given properties match those of a `ServersProperty`
 *
 * @param properties - the TypeScript properties of a `ServersProperty`
 *
 * @returns the result of the validation.
 */
function RosBackendServerAttachment_ServersPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('serverType', ros.requiredValidator)(properties.serverType));
    if (properties.serverType && (typeof properties.serverType) !== 'object') {
        errors.collect(ros.propertyValidator('serverType', ros.validateAllowedValues)({
            data: properties.serverType,
            allowedValues: ["Eci", "Ecs", "Eni", "Ip", "Fc"],
        }));
    }
    errors.collect(ros.propertyValidator('serverType', ros.validateString)(properties.serverType));
    errors.collect(ros.propertyValidator('description', ros.validateString)(properties.description));
    errors.collect(ros.propertyValidator('serverId', ros.requiredValidator)(properties.serverId));
    errors.collect(ros.propertyValidator('serverId', ros.validateString)(properties.serverId));
    errors.collect(ros.propertyValidator('serverIp', ros.validateString)(properties.serverIp));
    errors.collect(ros.propertyValidator('remoteIpEnabled', ros.validateBoolean)(properties.remoteIpEnabled));
    errors.collect(ros.propertyValidator('port', ros.validateNumber)(properties.port));
    errors.collect(ros.propertyValidator('weight', ros.validateNumber)(properties.weight));
    return errors.wrap('supplied properties not correct for "ServersProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ALB::BackendServerAttachment.Servers` resource
 *
 * @param properties - the TypeScript properties of a `ServersProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ALB::BackendServerAttachment.Servers` resource.
 */
// @ts-ignore TS6133
function rosBackendServerAttachmentServersPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosBackendServerAttachment_ServersPropertyValidator(properties).assertSuccess();
    return {
        'ServerType': ros.stringToRosTemplate(properties.serverType),
        'Description': ros.stringToRosTemplate(properties.description),
        'ServerId': ros.stringToRosTemplate(properties.serverId),
        'ServerIp': ros.stringToRosTemplate(properties.serverIp),
        'RemoteIpEnabled': ros.booleanToRosTemplate(properties.remoteIpEnabled),
        'Port': ros.numberToRosTemplate(properties.port),
        'Weight': ros.numberToRosTemplate(properties.weight),
    };
}
/**
 * Determine whether the given properties match those of a `RosHealthCheckTemplateProps`
 *
 * @param properties - the TypeScript properties of a `RosHealthCheckTemplateProps`
 *
 * @returns the result of the validation.
 */
function RosHealthCheckTemplatePropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('healthCheckInterval', ros.validateNumber)(properties.healthCheckInterval));
    errors.collect(ros.propertyValidator('healthCheckConnectPort', ros.validateNumber)(properties.healthCheckConnectPort));
    if (properties.healthCheckCodes && (Array.isArray(properties.healthCheckCodes) || (typeof properties.healthCheckCodes) === 'string')) {
        errors.collect(ros.propertyValidator('healthCheckCodes', ros.validateLength)({
            data: properties.healthCheckCodes.length,
            min: undefined,
            max: 20,
        }));
    }
    errors.collect(ros.propertyValidator('healthCheckCodes', ros.listValidator(ros.validateString))(properties.healthCheckCodes));
    errors.collect(ros.propertyValidator('unhealthyThreshold', ros.validateNumber)(properties.unhealthyThreshold));
    if (properties.healthCheckMethod && (typeof properties.healthCheckMethod) !== 'object') {
        errors.collect(ros.propertyValidator('healthCheckMethod', ros.validateAllowedValues)({
            data: properties.healthCheckMethod,
            allowedValues: ["HEAD", "GET", "POST"],
        }));
    }
    errors.collect(ros.propertyValidator('healthCheckMethod', ros.validateString)(properties.healthCheckMethod));
    errors.collect(ros.propertyValidator('healthCheckPath', ros.validateString)(properties.healthCheckPath));
    errors.collect(ros.propertyValidator('healthCheckTemplateName', ros.requiredValidator)(properties.healthCheckTemplateName));
    errors.collect(ros.propertyValidator('healthCheckTemplateName', ros.validateString)(properties.healthCheckTemplateName));
    errors.collect(ros.propertyValidator('healthCheckHost', ros.validateString)(properties.healthCheckHost));
    errors.collect(ros.propertyValidator('healthyThreshold', ros.validateNumber)(properties.healthyThreshold));
    if (properties.healthCheckProtocol && (typeof properties.healthCheckProtocol) !== 'object') {
        errors.collect(ros.propertyValidator('healthCheckProtocol', ros.validateAllowedValues)({
            data: properties.healthCheckProtocol,
            allowedValues: ["HTTP", "TCP", "gRPC"],
        }));
    }
    errors.collect(ros.propertyValidator('healthCheckProtocol', ros.validateString)(properties.healthCheckProtocol));
    errors.collect(ros.propertyValidator('healthCheckTimeout', ros.validateNumber)(properties.healthCheckTimeout));
    return errors.wrap('supplied properties not correct for "RosHealthCheckTemplateProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ALB::HealthCheckTemplate` resource
 *
 * @param properties - the TypeScript properties of a `RosHealthCheckTemplateProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ALB::HealthCheckTemplate` resource.
 */
// @ts-ignore TS6133
function rosHealthCheckTemplatePropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosHealthCheckTemplatePropsValidator(properties).assertSuccess();
    }
    return {
        'HealthCheckTemplateName': ros.stringToRosTemplate(properties.healthCheckTemplateName),
        'HealthCheckCodes': ros.listMapper(ros.stringToRosTemplate)(properties.healthCheckCodes),
        'HealthCheckConnectPort': ros.numberToRosTemplate(properties.healthCheckConnectPort),
        'HealthCheckHost': ros.stringToRosTemplate(properties.healthCheckHost),
        'HealthCheckInterval': ros.numberToRosTemplate(properties.healthCheckInterval),
        'HealthCheckMethod': ros.stringToRosTemplate(properties.healthCheckMethod),
        'HealthCheckPath': ros.stringToRosTemplate(properties.healthCheckPath),
        'HealthCheckProtocol': ros.stringToRosTemplate(properties.healthCheckProtocol),
        'HealthCheckTimeout': ros.numberToRosTemplate(properties.healthCheckTimeout),
        'HealthyThreshold': ros.numberToRosTemplate(properties.healthyThreshold),
        'UnhealthyThreshold': ros.numberToRosTemplate(properties.unhealthyThreshold),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::ALB::HealthCheckTemplate`, which is used to create a health check template.
 * @Note This class does not contain additional functions, so it is recommended to use the `HealthCheckTemplate` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-alb-healthchecktemplate
 */
class RosHealthCheckTemplate extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosHealthCheckTemplate.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrHealthCheckTemplateId = this.getAtt('HealthCheckTemplateId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.healthCheckTemplateName = props.healthCheckTemplateName;
        this.healthCheckCodes = props.healthCheckCodes;
        this.healthCheckConnectPort = props.healthCheckConnectPort;
        this.healthCheckHost = props.healthCheckHost;
        this.healthCheckInterval = props.healthCheckInterval;
        this.healthCheckMethod = props.healthCheckMethod;
        this.healthCheckPath = props.healthCheckPath;
        this.healthCheckProtocol = props.healthCheckProtocol;
        this.healthCheckTimeout = props.healthCheckTimeout;
        this.healthyThreshold = props.healthyThreshold;
        this.unhealthyThreshold = props.unhealthyThreshold;
    }
    get rosProperties() {
        return {
            healthCheckTemplateName: this.healthCheckTemplateName,
            healthCheckCodes: this.healthCheckCodes,
            healthCheckConnectPort: this.healthCheckConnectPort,
            healthCheckHost: this.healthCheckHost,
            healthCheckInterval: this.healthCheckInterval,
            healthCheckMethod: this.healthCheckMethod,
            healthCheckPath: this.healthCheckPath,
            healthCheckProtocol: this.healthCheckProtocol,
            healthCheckTimeout: this.healthCheckTimeout,
            healthyThreshold: this.healthyThreshold,
            unhealthyThreshold: this.unhealthyThreshold,
        };
    }
    renderProperties(props) {
        return rosHealthCheckTemplatePropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosHealthCheckTemplate = RosHealthCheckTemplate;
/**
 * The resource type name for this resource class.
 */
RosHealthCheckTemplate.ROS_RESOURCE_TYPE_NAME = "ALIYUN::ALB::HealthCheckTemplate";
/**
 * Determine whether the given properties match those of a `RosListenerProps`
 *
 * @param properties - the TypeScript properties of a `RosListenerProps`
 *
 * @returns the result of the validation.
 */
function RosListenerPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('caEnabled', ros.validateBoolean)(properties.caEnabled));
    errors.collect(ros.propertyValidator('listenerPort', ros.requiredValidator)(properties.listenerPort));
    if (properties.listenerPort && (typeof properties.listenerPort) !== 'object') {
        errors.collect(ros.propertyValidator('listenerPort', ros.validateRange)({
            data: properties.listenerPort,
            min: 1,
            max: 65535,
        }));
    }
    errors.collect(ros.propertyValidator('listenerPort', ros.validateNumber)(properties.listenerPort));
    if (properties.requestTimeout && (typeof properties.requestTimeout) !== 'object') {
        errors.collect(ros.propertyValidator('requestTimeout', ros.validateRange)({
            data: properties.requestTimeout,
            min: 1,
            max: 900,
        }));
    }
    errors.collect(ros.propertyValidator('requestTimeout', ros.validateNumber)(properties.requestTimeout));
    errors.collect(ros.propertyValidator('http2Enabled', ros.validateBoolean)(properties.http2Enabled));
    errors.collect(ros.propertyValidator('defaultActions', ros.requiredValidator)(properties.defaultActions));
    errors.collect(ros.propertyValidator('defaultActions', ros.listValidator(RosListener_DefaultActionsPropertyValidator))(properties.defaultActions));
    errors.collect(ros.propertyValidator('certificates', ros.listValidator(RosListener_CertificatesPropertyValidator))(properties.certificates));
    if (properties.idleTimeout && (typeof properties.idleTimeout) !== 'object') {
        errors.collect(ros.propertyValidator('idleTimeout', ros.validateRange)({
            data: properties.idleTimeout,
            min: 1,
            max: 3600,
        }));
    }
    errors.collect(ros.propertyValidator('idleTimeout', ros.validateNumber)(properties.idleTimeout));
    errors.collect(ros.propertyValidator('loadBalancerId', ros.requiredValidator)(properties.loadBalancerId));
    errors.collect(ros.propertyValidator('loadBalancerId', ros.validateString)(properties.loadBalancerId));
    errors.collect(ros.propertyValidator('listenerProtocol', ros.requiredValidator)(properties.listenerProtocol));
    if (properties.listenerProtocol && (typeof properties.listenerProtocol) !== 'object') {
        errors.collect(ros.propertyValidator('listenerProtocol', ros.validateAllowedValues)({
            data: properties.listenerProtocol,
            allowedValues: ["HTTP", "HTTPS", "QUIC"],
        }));
    }
    errors.collect(ros.propertyValidator('listenerProtocol', ros.validateString)(properties.listenerProtocol));
    errors.collect(ros.propertyValidator('quicConfig', RosListener_QuicConfigPropertyValidator)(properties.quicConfig));
    errors.collect(ros.propertyValidator('gzipEnabled', ros.validateBoolean)(properties.gzipEnabled));
    errors.collect(ros.propertyValidator('securityPolicyId', ros.validateString)(properties.securityPolicyId));
    if (properties.listenerStatus && (typeof properties.listenerStatus) !== 'object') {
        errors.collect(ros.propertyValidator('listenerStatus', ros.validateAllowedValues)({
            data: properties.listenerStatus,
            allowedValues: ["Running", "Stopped"],
        }));
    }
    errors.collect(ros.propertyValidator('listenerStatus', ros.validateString)(properties.listenerStatus));
    if (properties.listenerDescription && (Array.isArray(properties.listenerDescription) || (typeof properties.listenerDescription) === 'string')) {
        errors.collect(ros.propertyValidator('listenerDescription', ros.validateLength)({
            data: properties.listenerDescription.length,
            min: 2,
            max: 256,
        }));
    }
    errors.collect(ros.propertyValidator('listenerDescription', ros.validateString)(properties.listenerDescription));
    errors.collect(ros.propertyValidator('xForwardedForConfig', RosListener_XForwardedForConfigPropertyValidator)(properties.xForwardedForConfig));
    errors.collect(ros.propertyValidator('caCertificates', ros.listValidator(RosListener_CaCertificatesPropertyValidator))(properties.caCertificates));
    errors.collect(ros.propertyValidator('logConfig', RosListener_LogConfigPropertyValidator)(properties.logConfig));
    return errors.wrap('supplied properties not correct for "RosListenerProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ALB::Listener` resource
 *
 * @param properties - the TypeScript properties of a `RosListenerProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ALB::Listener` resource.
 */
// @ts-ignore TS6133
function rosListenerPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosListenerPropsValidator(properties).assertSuccess();
    }
    return {
        'DefaultActions': ros.listMapper(rosListenerDefaultActionsPropertyToRosTemplate)(properties.defaultActions),
        'ListenerPort': ros.numberToRosTemplate(properties.listenerPort),
        'ListenerProtocol': ros.stringToRosTemplate(properties.listenerProtocol),
        'LoadBalancerId': ros.stringToRosTemplate(properties.loadBalancerId),
        'CaCertificates': ros.listMapper(rosListenerCaCertificatesPropertyToRosTemplate)(properties.caCertificates),
        'CaEnabled': ros.booleanToRosTemplate(properties.caEnabled),
        'Certificates': ros.listMapper(rosListenerCertificatesPropertyToRosTemplate)(properties.certificates),
        'GzipEnabled': ros.booleanToRosTemplate(properties.gzipEnabled),
        'Http2Enabled': ros.booleanToRosTemplate(properties.http2Enabled),
        'IdleTimeout': ros.numberToRosTemplate(properties.idleTimeout),
        'ListenerDescription': ros.stringToRosTemplate(properties.listenerDescription),
        'ListenerStatus': ros.stringToRosTemplate(properties.listenerStatus),
        'LogConfig': rosListenerLogConfigPropertyToRosTemplate(properties.logConfig),
        'QuicConfig': rosListenerQuicConfigPropertyToRosTemplate(properties.quicConfig),
        'RequestTimeout': ros.numberToRosTemplate(properties.requestTimeout),
        'SecurityPolicyId': ros.stringToRosTemplate(properties.securityPolicyId),
        'XForwardedForConfig': rosListenerXForwardedForConfigPropertyToRosTemplate(properties.xForwardedForConfig),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::ALB::Listener`, which is used to create an HTTP, HTTPS, or Quick UDP Internet Connections (QUIC) listener.
 * @Note This class does not contain additional functions, so it is recommended to use the `Listener` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-alb-listener
 */
class RosListener extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosListener.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrListenerId = this.getAtt('ListenerId');
        this.attrLoadBalancerId = this.getAtt('LoadBalancerId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.defaultActions = props.defaultActions;
        this.listenerPort = props.listenerPort;
        this.listenerProtocol = props.listenerProtocol;
        this.loadBalancerId = props.loadBalancerId;
        this.caCertificates = props.caCertificates;
        this.caEnabled = props.caEnabled;
        this.certificates = props.certificates;
        this.gzipEnabled = props.gzipEnabled;
        this.http2Enabled = props.http2Enabled;
        this.idleTimeout = props.idleTimeout;
        this.listenerDescription = props.listenerDescription;
        this.listenerStatus = props.listenerStatus;
        this.logConfig = props.logConfig;
        this.quicConfig = props.quicConfig;
        this.requestTimeout = props.requestTimeout;
        this.securityPolicyId = props.securityPolicyId;
        this.xForwardedForConfig = props.xForwardedForConfig;
    }
    get rosProperties() {
        return {
            defaultActions: this.defaultActions,
            listenerPort: this.listenerPort,
            listenerProtocol: this.listenerProtocol,
            loadBalancerId: this.loadBalancerId,
            caCertificates: this.caCertificates,
            caEnabled: this.caEnabled,
            certificates: this.certificates,
            gzipEnabled: this.gzipEnabled,
            http2Enabled: this.http2Enabled,
            idleTimeout: this.idleTimeout,
            listenerDescription: this.listenerDescription,
            listenerStatus: this.listenerStatus,
            logConfig: this.logConfig,
            quicConfig: this.quicConfig,
            requestTimeout: this.requestTimeout,
            securityPolicyId: this.securityPolicyId,
            xForwardedForConfig: this.xForwardedForConfig,
        };
    }
    renderProperties(props) {
        return rosListenerPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosListener = RosListener;
/**
 * The resource type name for this resource class.
 */
RosListener.ROS_RESOURCE_TYPE_NAME = "ALIYUN::ALB::Listener";
/**
 * Determine whether the given properties match those of a `AccessLogTracingConfigProperty`
 *
 * @param properties - the TypeScript properties of a `AccessLogTracingConfigProperty`
 *
 * @returns the result of the validation.
 */
function RosListener_AccessLogTracingConfigPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    if (properties.tracingType && (typeof properties.tracingType) !== 'object') {
        errors.collect(ros.propertyValidator('tracingType', ros.validateAllowedValues)({
            data: properties.tracingType,
            allowedValues: ["Zipkin"],
        }));
    }
    errors.collect(ros.propertyValidator('tracingType', ros.validateString)(properties.tracingType));
    if (properties.tracingSample && (typeof properties.tracingSample) !== 'object') {
        errors.collect(ros.propertyValidator('tracingSample', ros.validateRange)({
            data: properties.tracingSample,
            min: 1,
            max: 10000,
        }));
    }
    errors.collect(ros.propertyValidator('tracingSample', ros.validateNumber)(properties.tracingSample));
    errors.collect(ros.propertyValidator('tracingEnabled', ros.validateBoolean)(properties.tracingEnabled));
    return errors.wrap('supplied properties not correct for "AccessLogTracingConfigProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ALB::Listener.AccessLogTracingConfig` resource
 *
 * @param properties - the TypeScript properties of a `AccessLogTracingConfigProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ALB::Listener.AccessLogTracingConfig` resource.
 */
// @ts-ignore TS6133
function rosListenerAccessLogTracingConfigPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosListener_AccessLogTracingConfigPropertyValidator(properties).assertSuccess();
    return {
        'TracingType': ros.stringToRosTemplate(properties.tracingType),
        'TracingSample': ros.numberToRosTemplate(properties.tracingSample),
        'TracingEnabled': ros.booleanToRosTemplate(properties.tracingEnabled),
    };
}
/**
 * Determine whether the given properties match those of a `CaCertificatesProperty`
 *
 * @param properties - the TypeScript properties of a `CaCertificatesProperty`
 *
 * @returns the result of the validation.
 */
function RosListener_CaCertificatesPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('certificateId', ros.validateString)(properties.certificateId));
    return errors.wrap('supplied properties not correct for "CaCertificatesProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ALB::Listener.CaCertificates` resource
 *
 * @param properties - the TypeScript properties of a `CaCertificatesProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ALB::Listener.CaCertificates` resource.
 */
// @ts-ignore TS6133
function rosListenerCaCertificatesPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosListener_CaCertificatesPropertyValidator(properties).assertSuccess();
    return {
        'CertificateId': ros.stringToRosTemplate(properties.certificateId),
    };
}
/**
 * Determine whether the given properties match those of a `CertificatesProperty`
 *
 * @param properties - the TypeScript properties of a `CertificatesProperty`
 *
 * @returns the result of the validation.
 */
function RosListener_CertificatesPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('certificateId', ros.validateString)(properties.certificateId));
    return errors.wrap('supplied properties not correct for "CertificatesProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ALB::Listener.Certificates` resource
 *
 * @param properties - the TypeScript properties of a `CertificatesProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ALB::Listener.Certificates` resource.
 */
// @ts-ignore TS6133
function rosListenerCertificatesPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosListener_CertificatesPropertyValidator(properties).assertSuccess();
    return {
        'CertificateId': ros.stringToRosTemplate(properties.certificateId),
    };
}
/**
 * Determine whether the given properties match those of a `DefaultActionsProperty`
 *
 * @param properties - the TypeScript properties of a `DefaultActionsProperty`
 *
 * @returns the result of the validation.
 */
function RosListener_DefaultActionsPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('type', ros.requiredValidator)(properties.type));
    errors.collect(ros.propertyValidator('type', ros.validateString)(properties.type));
    errors.collect(ros.propertyValidator('forwardGroupConfig', ros.requiredValidator)(properties.forwardGroupConfig));
    errors.collect(ros.propertyValidator('forwardGroupConfig', RosListener_ForwardGroupConfigPropertyValidator)(properties.forwardGroupConfig));
    return errors.wrap('supplied properties not correct for "DefaultActionsProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ALB::Listener.DefaultActions` resource
 *
 * @param properties - the TypeScript properties of a `DefaultActionsProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ALB::Listener.DefaultActions` resource.
 */
// @ts-ignore TS6133
function rosListenerDefaultActionsPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosListener_DefaultActionsPropertyValidator(properties).assertSuccess();
    return {
        'Type': ros.stringToRosTemplate(properties.type),
        'ForwardGroupConfig': rosListenerForwardGroupConfigPropertyToRosTemplate(properties.forwardGroupConfig),
    };
}
/**
 * Determine whether the given properties match those of a `ForwardGroupConfigProperty`
 *
 * @param properties - the TypeScript properties of a `ForwardGroupConfigProperty`
 *
 * @returns the result of the validation.
 */
function RosListener_ForwardGroupConfigPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('serverGroupTuples', ros.requiredValidator)(properties.serverGroupTuples));
    errors.collect(ros.propertyValidator('serverGroupTuples', ros.listValidator(RosListener_ServerGroupTuplesPropertyValidator))(properties.serverGroupTuples));
    return errors.wrap('supplied properties not correct for "ForwardGroupConfigProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ALB::Listener.ForwardGroupConfig` resource
 *
 * @param properties - the TypeScript properties of a `ForwardGroupConfigProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ALB::Listener.ForwardGroupConfig` resource.
 */
// @ts-ignore TS6133
function rosListenerForwardGroupConfigPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosListener_ForwardGroupConfigPropertyValidator(properties).assertSuccess();
    return {
        'ServerGroupTuples': ros.listMapper(rosListenerServerGroupTuplesPropertyToRosTemplate)(properties.serverGroupTuples),
    };
}
/**
 * Determine whether the given properties match those of a `LogConfigProperty`
 *
 * @param properties - the TypeScript properties of a `LogConfigProperty`
 *
 * @returns the result of the validation.
 */
function RosListener_LogConfigPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('accessLogRecordCustomizedHeadersEnabled', ros.validateBoolean)(properties.accessLogRecordCustomizedHeadersEnabled));
    errors.collect(ros.propertyValidator('accessLogTracingConfig', RosListener_AccessLogTracingConfigPropertyValidator)(properties.accessLogTracingConfig));
    return errors.wrap('supplied properties not correct for "LogConfigProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ALB::Listener.LogConfig` resource
 *
 * @param properties - the TypeScript properties of a `LogConfigProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ALB::Listener.LogConfig` resource.
 */
// @ts-ignore TS6133
function rosListenerLogConfigPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosListener_LogConfigPropertyValidator(properties).assertSuccess();
    return {
        'AccessLogRecordCustomizedHeadersEnabled': ros.booleanToRosTemplate(properties.accessLogRecordCustomizedHeadersEnabled),
        'AccessLogTracingConfig': rosListenerAccessLogTracingConfigPropertyToRosTemplate(properties.accessLogTracingConfig),
    };
}
/**
 * Determine whether the given properties match those of a `QuicConfigProperty`
 *
 * @param properties - the TypeScript properties of a `QuicConfigProperty`
 *
 * @returns the result of the validation.
 */
function RosListener_QuicConfigPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('quicListenerId', ros.validateString)(properties.quicListenerId));
    errors.collect(ros.propertyValidator('quicUpgradeEnabled', ros.validateBoolean)(properties.quicUpgradeEnabled));
    return errors.wrap('supplied properties not correct for "QuicConfigProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ALB::Listener.QuicConfig` resource
 *
 * @param properties - the TypeScript properties of a `QuicConfigProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ALB::Listener.QuicConfig` resource.
 */
// @ts-ignore TS6133
function rosListenerQuicConfigPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosListener_QuicConfigPropertyValidator(properties).assertSuccess();
    return {
        'QuicListenerId': ros.stringToRosTemplate(properties.quicListenerId),
        'QuicUpgradeEnabled': ros.booleanToRosTemplate(properties.quicUpgradeEnabled),
    };
}
/**
 * Determine whether the given properties match those of a `ServerGroupTuplesProperty`
 *
 * @param properties - the TypeScript properties of a `ServerGroupTuplesProperty`
 *
 * @returns the result of the validation.
 */
function RosListener_ServerGroupTuplesPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('serverGroupId', ros.requiredValidator)(properties.serverGroupId));
    errors.collect(ros.propertyValidator('serverGroupId', ros.validateString)(properties.serverGroupId));
    return errors.wrap('supplied properties not correct for "ServerGroupTuplesProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ALB::Listener.ServerGroupTuples` resource
 *
 * @param properties - the TypeScript properties of a `ServerGroupTuplesProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ALB::Listener.ServerGroupTuples` resource.
 */
// @ts-ignore TS6133
function rosListenerServerGroupTuplesPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosListener_ServerGroupTuplesPropertyValidator(properties).assertSuccess();
    return {
        'ServerGroupId': ros.stringToRosTemplate(properties.serverGroupId),
    };
}
/**
 * Determine whether the given properties match those of a `XForwardedForConfigProperty`
 *
 * @param properties - the TypeScript properties of a `XForwardedForConfigProperty`
 *
 * @returns the result of the validation.
 */
function RosListener_XForwardedForConfigPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('xForwardedForClientSourceIpsEnabled', ros.validateBoolean)(properties.xForwardedForClientSourceIpsEnabled));
    if (properties.xForwardedForClientCertFingerprintAlias && (typeof properties.xForwardedForClientCertFingerprintAlias) !== 'object') {
        errors.collect(ros.propertyValidator('xForwardedForClientCertFingerprintAlias', ros.validateAllowedPattern)({
            data: properties.xForwardedForClientCertFingerprintAlias,
            reg: /[-a-z0-9_]{2,40}/
        }));
    }
    errors.collect(ros.propertyValidator('xForwardedForClientCertFingerprintAlias', ros.validateString)(properties.xForwardedForClientCertFingerprintAlias));
    errors.collect(ros.propertyValidator('xForwardedForClientCertFingerprintEnabled', ros.validateBoolean)(properties.xForwardedForClientCertFingerprintEnabled));
    errors.collect(ros.propertyValidator('xForwardedForHostEnabled', ros.validateBoolean)(properties.xForwardedForHostEnabled));
    errors.collect(ros.propertyValidator('xForwardedForClientSourceIpsTrusted', ros.validateString)(properties.xForwardedForClientSourceIpsTrusted));
    if (properties.xForwardedForClientCertIssuerDnAlias && (typeof properties.xForwardedForClientCertIssuerDnAlias) !== 'object') {
        errors.collect(ros.propertyValidator('xForwardedForClientCertIssuerDnAlias', ros.validateAllowedPattern)({
            data: properties.xForwardedForClientCertIssuerDnAlias,
            reg: /[-a-z0-9_]{2,40}/
        }));
    }
    errors.collect(ros.propertyValidator('xForwardedForClientCertIssuerDnAlias', ros.validateString)(properties.xForwardedForClientCertIssuerDnAlias));
    if (properties.xForwardedForClientCertClientVerifyAlias && (typeof properties.xForwardedForClientCertClientVerifyAlias) !== 'object') {
        errors.collect(ros.propertyValidator('xForwardedForClientCertClientVerifyAlias', ros.validateAllowedPattern)({
            data: properties.xForwardedForClientCertClientVerifyAlias,
            reg: /[-a-z0-9_]{2,40}/
        }));
    }
    errors.collect(ros.propertyValidator('xForwardedForClientCertClientVerifyAlias', ros.validateString)(properties.xForwardedForClientCertClientVerifyAlias));
    errors.collect(ros.propertyValidator('xForwardedForSlbIdEnabled', ros.validateBoolean)(properties.xForwardedForSlbIdEnabled));
    errors.collect(ros.propertyValidator('xForwardedForClientCertSubjectDnEnabled', ros.validateBoolean)(properties.xForwardedForClientCertSubjectDnEnabled));
    if (properties.xForwardedForClientCertSubjectDnAlias && (typeof properties.xForwardedForClientCertSubjectDnAlias) !== 'object') {
        errors.collect(ros.propertyValidator('xForwardedForClientCertSubjectDnAlias', ros.validateAllowedPattern)({
            data: properties.xForwardedForClientCertSubjectDnAlias,
            reg: /[-a-z0-9_]{2,40}/
        }));
    }
    errors.collect(ros.propertyValidator('xForwardedForClientCertSubjectDnAlias', ros.validateString)(properties.xForwardedForClientCertSubjectDnAlias));
    errors.collect(ros.propertyValidator('xForwardedForProtoEnabled', ros.validateBoolean)(properties.xForwardedForProtoEnabled));
    errors.collect(ros.propertyValidator('xForwardedForClientSrcPortEnabled', ros.validateBoolean)(properties.xForwardedForClientSrcPortEnabled));
    errors.collect(ros.propertyValidator('xForwardedForSlbPortEnabled', ros.validateBoolean)(properties.xForwardedForSlbPortEnabled));
    errors.collect(ros.propertyValidator('xForwardedForEnabled', ros.validateBoolean)(properties.xForwardedForEnabled));
    if (properties.xForwardedForProcessingMode && (typeof properties.xForwardedForProcessingMode) !== 'object') {
        errors.collect(ros.propertyValidator('xForwardedForProcessingMode', ros.validateAllowedValues)({
            data: properties.xForwardedForProcessingMode,
            allowedValues: ["append", "remove"],
        }));
    }
    errors.collect(ros.propertyValidator('xForwardedForProcessingMode', ros.validateString)(properties.xForwardedForProcessingMode));
    errors.collect(ros.propertyValidator('xForwardedForClientCertIssuerDnEnabled', ros.validateBoolean)(properties.xForwardedForClientCertIssuerDnEnabled));
    errors.collect(ros.propertyValidator('xForwardedForClientCertClientVerifyEnabled', ros.validateBoolean)(properties.xForwardedForClientCertClientVerifyEnabled));
    return errors.wrap('supplied properties not correct for "XForwardedForConfigProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ALB::Listener.XForwardedForConfig` resource
 *
 * @param properties - the TypeScript properties of a `XForwardedForConfigProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ALB::Listener.XForwardedForConfig` resource.
 */
// @ts-ignore TS6133
function rosListenerXForwardedForConfigPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosListener_XForwardedForConfigPropertyValidator(properties).assertSuccess();
    return {
        'XForwardedForClientSourceIpsEnabled': ros.booleanToRosTemplate(properties.xForwardedForClientSourceIpsEnabled),
        'XForwardedForClientCertFingerprintAlias': ros.stringToRosTemplate(properties.xForwardedForClientCertFingerprintAlias),
        'XForwardedForClientCertFingerprintEnabled': ros.booleanToRosTemplate(properties.xForwardedForClientCertFingerprintEnabled),
        'XForwardedForHostEnabled': ros.booleanToRosTemplate(properties.xForwardedForHostEnabled),
        'XForwardedForClientSourceIpsTrusted': ros.stringToRosTemplate(properties.xForwardedForClientSourceIpsTrusted),
        'XForwardedForClientCertIssuerDNAlias': ros.stringToRosTemplate(properties.xForwardedForClientCertIssuerDnAlias),
        'XForwardedForClientCertClientVerifyAlias': ros.stringToRosTemplate(properties.xForwardedForClientCertClientVerifyAlias),
        'XForwardedForSLBIdEnabled': ros.booleanToRosTemplate(properties.xForwardedForSlbIdEnabled),
        'XForwardedForClientCertSubjectDNEnabled': ros.booleanToRosTemplate(properties.xForwardedForClientCertSubjectDnEnabled),
        'XForwardedForClientCertSubjectDNAlias': ros.stringToRosTemplate(properties.xForwardedForClientCertSubjectDnAlias),
        'XForwardedForProtoEnabled': ros.booleanToRosTemplate(properties.xForwardedForProtoEnabled),
        'XForwardedForClientSrcPortEnabled': ros.booleanToRosTemplate(properties.xForwardedForClientSrcPortEnabled),
        'XForwardedForSLBPortEnabled': ros.booleanToRosTemplate(properties.xForwardedForSlbPortEnabled),
        'XForwardedForEnabled': ros.booleanToRosTemplate(properties.xForwardedForEnabled),
        'XForwardedForProcessingMode': ros.stringToRosTemplate(properties.xForwardedForProcessingMode),
        'XForwardedForClientCertIssuerDNEnabled': ros.booleanToRosTemplate(properties.xForwardedForClientCertIssuerDnEnabled),
        'XForwardedForClientCertClientVerifyEnabled': ros.booleanToRosTemplate(properties.xForwardedForClientCertClientVerifyEnabled),
    };
}
/**
 * Determine whether the given properties match those of a `RosLoadBalancerProps`
 *
 * @param properties - the TypeScript properties of a `RosLoadBalancerProps`
 *
 * @returns the result of the validation.
 */
function RosLoadBalancerPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('loadBalancerEdition', ros.requiredValidator)(properties.loadBalancerEdition));
    if (properties.loadBalancerEdition && (typeof properties.loadBalancerEdition) !== 'object') {
        errors.collect(ros.propertyValidator('loadBalancerEdition', ros.validateAllowedValues)({
            data: properties.loadBalancerEdition,
            allowedValues: ["Basic", "Standard", "StandardWithWaf"],
        }));
    }
    errors.collect(ros.propertyValidator('loadBalancerEdition', ros.validateString)(properties.loadBalancerEdition));
    if (properties.addressIpVersion && (typeof properties.addressIpVersion) !== 'object') {
        errors.collect(ros.propertyValidator('addressIpVersion', ros.validateAllowedValues)({
            data: properties.addressIpVersion,
            allowedValues: ["IPv4", "Ipv4", "DualStack"],
        }));
    }
    errors.collect(ros.propertyValidator('addressIpVersion', ros.validateString)(properties.addressIpVersion));
    errors.collect(ros.propertyValidator('resourceGroupId', ros.validateString)(properties.resourceGroupId));
    errors.collect(ros.propertyValidator('loadBalancerBillingConfig', ros.requiredValidator)(properties.loadBalancerBillingConfig));
    errors.collect(ros.propertyValidator('loadBalancerBillingConfig', RosLoadBalancer_LoadBalancerBillingConfigPropertyValidator)(properties.loadBalancerBillingConfig));
    errors.collect(ros.propertyValidator('zoneMappings', ros.requiredValidator)(properties.zoneMappings));
    if (properties.zoneMappings && (Array.isArray(properties.zoneMappings) || (typeof properties.zoneMappings) === 'string')) {
        errors.collect(ros.propertyValidator('zoneMappings', ros.validateLength)({
            data: properties.zoneMappings.length,
            min: 1,
            max: 10,
        }));
    }
    errors.collect(ros.propertyValidator('zoneMappings', ros.listValidator(RosLoadBalancer_ZoneMappingsPropertyValidator))(properties.zoneMappings));
    errors.collect(ros.propertyValidator('modificationProtectionConfig', RosLoadBalancer_ModificationProtectionConfigPropertyValidator)(properties.modificationProtectionConfig));
    if (properties.securityGroupIds && (Array.isArray(properties.securityGroupIds) || (typeof properties.securityGroupIds) === 'string')) {
        errors.collect(ros.propertyValidator('securityGroupIds', ros.validateLength)({
            data: properties.securityGroupIds.length,
            min: 0,
            max: 9,
        }));
    }
    errors.collect(ros.propertyValidator('securityGroupIds', ros.listValidator(ros.validateString))(properties.securityGroupIds));
    errors.collect(ros.propertyValidator('loadBalancerName', ros.requiredValidator)(properties.loadBalancerName));
    errors.collect(ros.propertyValidator('loadBalancerName', ros.validateString)(properties.loadBalancerName));
    errors.collect(ros.propertyValidator('accessLogConfig', RosLoadBalancer_AccessLogConfigPropertyValidator)(properties.accessLogConfig));
    errors.collect(ros.propertyValidator('vpcId', ros.requiredValidator)(properties.vpcId));
    errors.collect(ros.propertyValidator('vpcId', ros.validateString)(properties.vpcId));
    errors.collect(ros.propertyValidator('bandwidthPackageId', ros.validateString)(properties.bandwidthPackageId));
    errors.collect(ros.propertyValidator('addressType', ros.requiredValidator)(properties.addressType));
    if (properties.addressType && (typeof properties.addressType) !== 'object') {
        errors.collect(ros.propertyValidator('addressType', ros.validateAllowedValues)({
            data: properties.addressType,
            allowedValues: ["Internet", "Intranet"],
        }));
    }
    errors.collect(ros.propertyValidator('addressType', ros.validateString)(properties.addressType));
    if (properties.addressAllocatedMode && (typeof properties.addressAllocatedMode) !== 'object') {
        errors.collect(ros.propertyValidator('addressAllocatedMode', ros.validateAllowedValues)({
            data: properties.addressAllocatedMode,
            allowedValues: ["Fixed", "Dynamic"],
        }));
    }
    errors.collect(ros.propertyValidator('addressAllocatedMode', ros.validateString)(properties.addressAllocatedMode));
    errors.collect(ros.propertyValidator('deletionProtectionEnabled', ros.validateBoolean)(properties.deletionProtectionEnabled));
    if (properties.tags && (Array.isArray(properties.tags) || (typeof properties.tags) === 'string')) {
        errors.collect(ros.propertyValidator('tags', ros.validateLength)({
            data: properties.tags.length,
            min: undefined,
            max: 20,
        }));
    }
    errors.collect(ros.propertyValidator('tags', ros.listValidator(RosLoadBalancer_TagsPropertyValidator))(properties.tags));
    return errors.wrap('supplied properties not correct for "RosLoadBalancerProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ALB::LoadBalancer` resource
 *
 * @param properties - the TypeScript properties of a `RosLoadBalancerProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ALB::LoadBalancer` resource.
 */
// @ts-ignore TS6133
function rosLoadBalancerPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosLoadBalancerPropsValidator(properties).assertSuccess();
    }
    return {
        'AddressType': ros.stringToRosTemplate(properties.addressType),
        'LoadBalancerBillingConfig': rosLoadBalancerLoadBalancerBillingConfigPropertyToRosTemplate(properties.loadBalancerBillingConfig),
        'LoadBalancerEdition': ros.stringToRosTemplate(properties.loadBalancerEdition),
        'LoadBalancerName': ros.stringToRosTemplate(properties.loadBalancerName),
        'VpcId': ros.stringToRosTemplate(properties.vpcId),
        'ZoneMappings': ros.listMapper(rosLoadBalancerZoneMappingsPropertyToRosTemplate)(properties.zoneMappings),
        'AccessLogConfig': rosLoadBalancerAccessLogConfigPropertyToRosTemplate(properties.accessLogConfig),
        'AddressAllocatedMode': ros.stringToRosTemplate(properties.addressAllocatedMode),
        'AddressIpVersion': ros.stringToRosTemplate(properties.addressIpVersion),
        'BandwidthPackageId': ros.stringToRosTemplate(properties.bandwidthPackageId),
        'DeletionProtectionEnabled': ros.booleanToRosTemplate(properties.deletionProtectionEnabled),
        'ModificationProtectionConfig': rosLoadBalancerModificationProtectionConfigPropertyToRosTemplate(properties.modificationProtectionConfig),
        'ResourceGroupId': ros.stringToRosTemplate(properties.resourceGroupId),
        'SecurityGroupIds': ros.listMapper(ros.stringToRosTemplate)(properties.securityGroupIds),
        'Tags': ros.listMapper(rosLoadBalancerTagsPropertyToRosTemplate)(properties.tags),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::ALB::LoadBalancer`, which is used to create an Application Load Balancer (ALB) instance.
 * @Note This class does not contain additional functions, so it is recommended to use the `LoadBalancer` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-alb-loadbalancer
 */
class RosLoadBalancer extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosLoadBalancer.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrAddressType = this.getAtt('AddressType');
        this.attrArn = this.getAtt('Arn');
        this.attrDnsName = this.getAtt('DNSName');
        this.attrLoadBalancerEdition = this.getAtt('LoadBalancerEdition');
        this.attrLoadBalancerId = this.getAtt('LoadBalancerId');
        this.attrVpcId = this.getAtt('VpcId');
        this.attrZoneMappings = this.getAtt('ZoneMappings');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.addressType = props.addressType;
        this.loadBalancerBillingConfig = props.loadBalancerBillingConfig;
        this.loadBalancerEdition = props.loadBalancerEdition;
        this.loadBalancerName = props.loadBalancerName;
        this.vpcId = props.vpcId;
        this.zoneMappings = props.zoneMappings;
        this.accessLogConfig = props.accessLogConfig;
        this.addressAllocatedMode = props.addressAllocatedMode;
        this.addressIpVersion = props.addressIpVersion;
        this.bandwidthPackageId = props.bandwidthPackageId;
        this.deletionProtectionEnabled = props.deletionProtectionEnabled;
        this.modificationProtectionConfig = props.modificationProtectionConfig;
        this.resourceGroupId = props.resourceGroupId;
        this.securityGroupIds = props.securityGroupIds;
        this.tags = props.tags;
    }
    get rosProperties() {
        return {
            addressType: this.addressType,
            loadBalancerBillingConfig: this.loadBalancerBillingConfig,
            loadBalancerEdition: this.loadBalancerEdition,
            loadBalancerName: this.loadBalancerName,
            vpcId: this.vpcId,
            zoneMappings: this.zoneMappings,
            accessLogConfig: this.accessLogConfig,
            addressAllocatedMode: this.addressAllocatedMode,
            addressIpVersion: this.addressIpVersion,
            bandwidthPackageId: this.bandwidthPackageId,
            deletionProtectionEnabled: this.deletionProtectionEnabled,
            modificationProtectionConfig: this.modificationProtectionConfig,
            resourceGroupId: this.resourceGroupId,
            securityGroupIds: this.securityGroupIds,
            tags: this.tags,
        };
    }
    renderProperties(props) {
        return rosLoadBalancerPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosLoadBalancer = RosLoadBalancer;
/**
 * The resource type name for this resource class.
 */
RosLoadBalancer.ROS_RESOURCE_TYPE_NAME = "ALIYUN::ALB::LoadBalancer";
/**
 * Determine whether the given properties match those of a `AccessLogConfigProperty`
 *
 * @param properties - the TypeScript properties of a `AccessLogConfigProperty`
 *
 * @returns the result of the validation.
 */
function RosLoadBalancer_AccessLogConfigPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('logStore', ros.requiredValidator)(properties.logStore));
    errors.collect(ros.propertyValidator('logStore', ros.validateString)(properties.logStore));
    errors.collect(ros.propertyValidator('enable', ros.validateBoolean)(properties.enable));
    errors.collect(ros.propertyValidator('logProject', ros.requiredValidator)(properties.logProject));
    errors.collect(ros.propertyValidator('logProject', ros.validateString)(properties.logProject));
    return errors.wrap('supplied properties not correct for "AccessLogConfigProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ALB::LoadBalancer.AccessLogConfig` resource
 *
 * @param properties - the TypeScript properties of a `AccessLogConfigProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ALB::LoadBalancer.AccessLogConfig` resource.
 */
// @ts-ignore TS6133
function rosLoadBalancerAccessLogConfigPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosLoadBalancer_AccessLogConfigPropertyValidator(properties).assertSuccess();
    return {
        'LogStore': ros.stringToRosTemplate(properties.logStore),
        'Enable': ros.booleanToRosTemplate(properties.enable),
        'LogProject': ros.stringToRosTemplate(properties.logProject),
    };
}
/**
 * Determine whether the given properties match those of a `LoadBalancerAddressesProperty`
 *
 * @param properties - the TypeScript properties of a `LoadBalancerAddressesProperty`
 *
 * @returns the result of the validation.
 */
function RosLoadBalancer_LoadBalancerAddressesPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('intranetAddress', ros.validateString)(properties.intranetAddress));
    errors.collect(ros.propertyValidator('allocationId', ros.requiredValidator)(properties.allocationId));
    errors.collect(ros.propertyValidator('allocationId', ros.validateString)(properties.allocationId));
    errors.collect(ros.propertyValidator('eipType', ros.validateString)(properties.eipType));
    return errors.wrap('supplied properties not correct for "LoadBalancerAddressesProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ALB::LoadBalancer.LoadBalancerAddresses` resource
 *
 * @param properties - the TypeScript properties of a `LoadBalancerAddressesProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ALB::LoadBalancer.LoadBalancerAddresses` resource.
 */
// @ts-ignore TS6133
function rosLoadBalancerLoadBalancerAddressesPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosLoadBalancer_LoadBalancerAddressesPropertyValidator(properties).assertSuccess();
    return {
        'IntranetAddress': ros.stringToRosTemplate(properties.intranetAddress),
        'AllocationId': ros.stringToRosTemplate(properties.allocationId),
        'EipType': ros.stringToRosTemplate(properties.eipType),
    };
}
/**
 * Determine whether the given properties match those of a `LoadBalancerBillingConfigProperty`
 *
 * @param properties - the TypeScript properties of a `LoadBalancerBillingConfigProperty`
 *
 * @returns the result of the validation.
 */
function RosLoadBalancer_LoadBalancerBillingConfigPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('payType', ros.requiredValidator)(properties.payType));
    errors.collect(ros.propertyValidator('payType', ros.validateString)(properties.payType));
    return errors.wrap('supplied properties not correct for "LoadBalancerBillingConfigProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ALB::LoadBalancer.LoadBalancerBillingConfig` resource
 *
 * @param properties - the TypeScript properties of a `LoadBalancerBillingConfigProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ALB::LoadBalancer.LoadBalancerBillingConfig` resource.
 */
// @ts-ignore TS6133
function rosLoadBalancerLoadBalancerBillingConfigPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosLoadBalancer_LoadBalancerBillingConfigPropertyValidator(properties).assertSuccess();
    return {
        'PayType': ros.stringToRosTemplate(properties.payType),
    };
}
/**
 * Determine whether the given properties match those of a `ModificationProtectionConfigProperty`
 *
 * @param properties - the TypeScript properties of a `ModificationProtectionConfigProperty`
 *
 * @returns the result of the validation.
 */
function RosLoadBalancer_ModificationProtectionConfigPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('status', ros.requiredValidator)(properties.status));
    errors.collect(ros.propertyValidator('status', ros.validateString)(properties.status));
    errors.collect(ros.propertyValidator('reason', ros.validateString)(properties.reason));
    return errors.wrap('supplied properties not correct for "ModificationProtectionConfigProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ALB::LoadBalancer.ModificationProtectionConfig` resource
 *
 * @param properties - the TypeScript properties of a `ModificationProtectionConfigProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ALB::LoadBalancer.ModificationProtectionConfig` resource.
 */
// @ts-ignore TS6133
function rosLoadBalancerModificationProtectionConfigPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosLoadBalancer_ModificationProtectionConfigPropertyValidator(properties).assertSuccess();
    return {
        'Status': ros.stringToRosTemplate(properties.status),
        'Reason': ros.stringToRosTemplate(properties.reason),
    };
}
/**
 * Determine whether the given properties match those of a `TagsProperty`
 *
 * @param properties - the TypeScript properties of a `TagsProperty`
 *
 * @returns the result of the validation.
 */
function RosLoadBalancer_TagsPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('value', ros.validateString)(properties.value));
    errors.collect(ros.propertyValidator('key', ros.requiredValidator)(properties.key));
    errors.collect(ros.propertyValidator('key', ros.validateString)(properties.key));
    return errors.wrap('supplied properties not correct for "TagsProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ALB::LoadBalancer.Tags` resource
 *
 * @param properties - the TypeScript properties of a `TagsProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ALB::LoadBalancer.Tags` resource.
 */
// @ts-ignore TS6133
function rosLoadBalancerTagsPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosLoadBalancer_TagsPropertyValidator(properties).assertSuccess();
    return {
        'Value': ros.stringToRosTemplate(properties.value),
        'Key': ros.stringToRosTemplate(properties.key),
    };
}
/**
 * Determine whether the given properties match those of a `ZoneMappingsProperty`
 *
 * @param properties - the TypeScript properties of a `ZoneMappingsProperty`
 *
 * @returns the result of the validation.
 */
function RosLoadBalancer_ZoneMappingsPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('intranetAddress', ros.validateString)(properties.intranetAddress));
    errors.collect(ros.propertyValidator('zoneId', ros.requiredValidator)(properties.zoneId));
    errors.collect(ros.propertyValidator('zoneId', ros.validateString)(properties.zoneId));
    errors.collect(ros.propertyValidator('vSwitchId', ros.requiredValidator)(properties.vSwitchId));
    errors.collect(ros.propertyValidator('vSwitchId', ros.validateString)(properties.vSwitchId));
    errors.collect(ros.propertyValidator('allocationId', ros.validateString)(properties.allocationId));
    errors.collect(ros.propertyValidator('eipType', ros.validateString)(properties.eipType));
    if (properties.loadBalancerAddresses && (Array.isArray(properties.loadBalancerAddresses) || (typeof properties.loadBalancerAddresses) === 'string')) {
        errors.collect(ros.propertyValidator('loadBalancerAddresses', ros.validateLength)({
            data: properties.loadBalancerAddresses.length,
            min: undefined,
            max: 1,
        }));
    }
    errors.collect(ros.propertyValidator('loadBalancerAddresses', ros.listValidator(RosLoadBalancer_LoadBalancerAddressesPropertyValidator))(properties.loadBalancerAddresses));
    return errors.wrap('supplied properties not correct for "ZoneMappingsProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ALB::LoadBalancer.ZoneMappings` resource
 *
 * @param properties - the TypeScript properties of a `ZoneMappingsProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ALB::LoadBalancer.ZoneMappings` resource.
 */
// @ts-ignore TS6133
function rosLoadBalancerZoneMappingsPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosLoadBalancer_ZoneMappingsPropertyValidator(properties).assertSuccess();
    return {
        'IntranetAddress': ros.stringToRosTemplate(properties.intranetAddress),
        'ZoneId': ros.stringToRosTemplate(properties.zoneId),
        'VSwitchId': ros.stringToRosTemplate(properties.vSwitchId),
        'AllocationId': ros.stringToRosTemplate(properties.allocationId),
        'EipType': ros.stringToRosTemplate(properties.eipType),
        'LoadBalancerAddresses': ros.listMapper(rosLoadBalancerLoadBalancerAddressesPropertyToRosTemplate)(properties.loadBalancerAddresses),
    };
}
/**
 * Determine whether the given properties match those of a `RosRuleProps`
 *
 * @param properties - the TypeScript properties of a `RosRuleProps`
 *
 * @returns the result of the validation.
 */
function RosRulePropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('ruleActions', ros.requiredValidator)(properties.ruleActions));
    if (properties.ruleActions && (Array.isArray(properties.ruleActions) || (typeof properties.ruleActions) === 'string')) {
        errors.collect(ros.propertyValidator('ruleActions', ros.validateLength)({
            data: properties.ruleActions.length,
            min: undefined,
            max: 5,
        }));
    }
    errors.collect(ros.propertyValidator('ruleActions', ros.listValidator(RosRule_RuleActionsPropertyValidator))(properties.ruleActions));
    errors.collect(ros.propertyValidator('priority', ros.requiredValidator)(properties.priority));
    if (properties.priority && (typeof properties.priority) !== 'object') {
        errors.collect(ros.propertyValidator('priority', ros.validateRange)({
            data: properties.priority,
            min: 1,
            max: 10000,
        }));
    }
    errors.collect(ros.propertyValidator('priority', ros.validateNumber)(properties.priority));
    errors.collect(ros.propertyValidator('ruleConditions', ros.requiredValidator)(properties.ruleConditions));
    if (properties.ruleConditions && (Array.isArray(properties.ruleConditions) || (typeof properties.ruleConditions) === 'string')) {
        errors.collect(ros.propertyValidator('ruleConditions', ros.validateLength)({
            data: properties.ruleConditions.length,
            min: undefined,
            max: 10,
        }));
    }
    errors.collect(ros.propertyValidator('ruleConditions', ros.listValidator(RosRule_RuleConditionsPropertyValidator))(properties.ruleConditions));
    if (properties.direction && (typeof properties.direction) !== 'object') {
        errors.collect(ros.propertyValidator('direction', ros.validateAllowedValues)({
            data: properties.direction,
            allowedValues: ["Request", "Response"],
        }));
    }
    errors.collect(ros.propertyValidator('direction', ros.validateString)(properties.direction));
    errors.collect(ros.propertyValidator('ruleName', ros.requiredValidator)(properties.ruleName));
    errors.collect(ros.propertyValidator('ruleName', ros.validateString)(properties.ruleName));
    errors.collect(ros.propertyValidator('listenerId', ros.requiredValidator)(properties.listenerId));
    errors.collect(ros.propertyValidator('listenerId', ros.validateString)(properties.listenerId));
    return errors.wrap('supplied properties not correct for "RosRuleProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ALB::Rule` resource
 *
 * @param properties - the TypeScript properties of a `RosRuleProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ALB::Rule` resource.
 */
// @ts-ignore TS6133
function rosRulePropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosRulePropsValidator(properties).assertSuccess();
    }
    return {
        'ListenerId': ros.stringToRosTemplate(properties.listenerId),
        'Priority': ros.numberToRosTemplate(properties.priority),
        'RuleActions': ros.listMapper(rosRuleRuleActionsPropertyToRosTemplate)(properties.ruleActions),
        'RuleConditions': ros.listMapper(rosRuleRuleConditionsPropertyToRosTemplate)(properties.ruleConditions),
        'RuleName': ros.stringToRosTemplate(properties.ruleName),
        'Direction': ros.stringToRosTemplate(properties.direction),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::ALB::Rule`ALIYUN::Config::Rule is used to create a forwarding rule.
 * @Note This class does not contain additional functions, so it is recommended to use the `Rule` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-alb-rule
 */
class RosRule extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosRule.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrListenerId = this.getAtt('ListenerId');
        this.attrRuleId = this.getAtt('RuleId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.listenerId = props.listenerId;
        this.priority = props.priority;
        this.ruleActions = props.ruleActions;
        this.ruleConditions = props.ruleConditions;
        this.ruleName = props.ruleName;
        this.direction = props.direction;
    }
    get rosProperties() {
        return {
            listenerId: this.listenerId,
            priority: this.priority,
            ruleActions: this.ruleActions,
            ruleConditions: this.ruleConditions,
            ruleName: this.ruleName,
            direction: this.direction,
        };
    }
    renderProperties(props) {
        return rosRulePropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosRule = RosRule;
/**
 * The resource type name for this resource class.
 */
RosRule.ROS_RESOURCE_TYPE_NAME = "ALIYUN::ALB::Rule";
/**
 * Determine whether the given properties match those of a `CookieConfigProperty`
 *
 * @param properties - the TypeScript properties of a `CookieConfigProperty`
 *
 * @returns the result of the validation.
 */
function RosRule_CookieConfigPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('values', ros.listValidator(RosRule_ValuesPropertyValidator))(properties.values));
    return errors.wrap('supplied properties not correct for "CookieConfigProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ALB::Rule.CookieConfig` resource
 *
 * @param properties - the TypeScript properties of a `CookieConfigProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ALB::Rule.CookieConfig` resource.
 */
// @ts-ignore TS6133
function rosRuleCookieConfigPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosRule_CookieConfigPropertyValidator(properties).assertSuccess();
    return {
        'Values': ros.listMapper(rosRuleValuesPropertyToRosTemplate)(properties.values),
    };
}
/**
 * Determine whether the given properties match those of a `CorsConfigProperty`
 *
 * @param properties - the TypeScript properties of a `CorsConfigProperty`
 *
 * @returns the result of the validation.
 */
function RosRule_CorsConfigPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    if (properties.allowCredentials && (typeof properties.allowCredentials) !== 'object') {
        errors.collect(ros.propertyValidator('allowCredentials', ros.validateAllowedValues)({
            data: properties.allowCredentials,
            allowedValues: ["on", "off"],
        }));
    }
    errors.collect(ros.propertyValidator('allowCredentials', ros.validateString)(properties.allowCredentials));
    errors.collect(ros.propertyValidator('exposeHeaders', ros.listValidator(ros.validateString))(properties.exposeHeaders));
    errors.collect(ros.propertyValidator('allowOrigin', ros.listValidator(ros.validateString))(properties.allowOrigin));
    errors.collect(ros.propertyValidator('allowHeaders', ros.listValidator(ros.validateString))(properties.allowHeaders));
    errors.collect(ros.propertyValidator('maxAge', ros.validateNumber)(properties.maxAge));
    errors.collect(ros.propertyValidator('allowMethods', ros.listValidator(ros.validateString))(properties.allowMethods));
    return errors.wrap('supplied properties not correct for "CorsConfigProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ALB::Rule.CorsConfig` resource
 *
 * @param properties - the TypeScript properties of a `CorsConfigProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ALB::Rule.CorsConfig` resource.
 */
// @ts-ignore TS6133
function rosRuleCorsConfigPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosRule_CorsConfigPropertyValidator(properties).assertSuccess();
    return {
        'AllowCredentials': ros.stringToRosTemplate(properties.allowCredentials),
        'ExposeHeaders': ros.listMapper(ros.stringToRosTemplate)(properties.exposeHeaders),
        'AllowOrigin': ros.listMapper(ros.stringToRosTemplate)(properties.allowOrigin),
        'AllowHeaders': ros.listMapper(ros.stringToRosTemplate)(properties.allowHeaders),
        'MaxAge': ros.numberToRosTemplate(properties.maxAge),
        'AllowMethods': ros.listMapper(ros.stringToRosTemplate)(properties.allowMethods),
    };
}
/**
 * Determine whether the given properties match those of a `FixedResponseConfigProperty`
 *
 * @param properties - the TypeScript properties of a `FixedResponseConfigProperty`
 *
 * @returns the result of the validation.
 */
function RosRule_FixedResponseConfigPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('httpCode', ros.validateString)(properties.httpCode));
    if (properties.contentType && (typeof properties.contentType) !== 'object') {
        errors.collect(ros.propertyValidator('contentType', ros.validateAllowedValues)({
            data: properties.contentType,
            allowedValues: ["text/plain", "text/css", "text/html", "application/javascript", "application/json"],
        }));
    }
    errors.collect(ros.propertyValidator('contentType', ros.validateString)(properties.contentType));
    errors.collect(ros.propertyValidator('content', ros.validateString)(properties.content));
    return errors.wrap('supplied properties not correct for "FixedResponseConfigProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ALB::Rule.FixedResponseConfig` resource
 *
 * @param properties - the TypeScript properties of a `FixedResponseConfigProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ALB::Rule.FixedResponseConfig` resource.
 */
// @ts-ignore TS6133
function rosRuleFixedResponseConfigPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosRule_FixedResponseConfigPropertyValidator(properties).assertSuccess();
    return {
        'HttpCode': ros.stringToRosTemplate(properties.httpCode),
        'ContentType': ros.stringToRosTemplate(properties.contentType),
        'Content': ros.stringToRosTemplate(properties.content),
    };
}
/**
 * Determine whether the given properties match those of a `ForwardGroupConfigProperty`
 *
 * @param properties - the TypeScript properties of a `ForwardGroupConfigProperty`
 *
 * @returns the result of the validation.
 */
function RosRule_ForwardGroupConfigPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('serverGroupStickySession', RosRule_ServerGroupStickySessionPropertyValidator)(properties.serverGroupStickySession));
    errors.collect(ros.propertyValidator('serverGroupTuples', ros.listValidator(RosRule_ServerGroupTuplesPropertyValidator))(properties.serverGroupTuples));
    return errors.wrap('supplied properties not correct for "ForwardGroupConfigProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ALB::Rule.ForwardGroupConfig` resource
 *
 * @param properties - the TypeScript properties of a `ForwardGroupConfigProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ALB::Rule.ForwardGroupConfig` resource.
 */
// @ts-ignore TS6133
function rosRuleForwardGroupConfigPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosRule_ForwardGroupConfigPropertyValidator(properties).assertSuccess();
    return {
        'ServerGroupStickySession': rosRuleServerGroupStickySessionPropertyToRosTemplate(properties.serverGroupStickySession),
        'ServerGroupTuples': ros.listMapper(rosRuleServerGroupTuplesPropertyToRosTemplate)(properties.serverGroupTuples),
    };
}
/**
 * Determine whether the given properties match those of a `HeaderConfigProperty`
 *
 * @param properties - the TypeScript properties of a `HeaderConfigProperty`
 *
 * @returns the result of the validation.
 */
function RosRule_HeaderConfigPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('values', ros.listValidator(ros.validateString))(properties.values));
    if (properties.key && (typeof properties.key) !== 'object') {
        errors.collect(ros.propertyValidator('key', ros.validateAllowedPattern)({
            data: properties.key,
            reg: /[-a-z0-9_]{1,40}/
        }));
    }
    errors.collect(ros.propertyValidator('key', ros.validateString)(properties.key));
    return errors.wrap('supplied properties not correct for "HeaderConfigProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ALB::Rule.HeaderConfig` resource
 *
 * @param properties - the TypeScript properties of a `HeaderConfigProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ALB::Rule.HeaderConfig` resource.
 */
// @ts-ignore TS6133
function rosRuleHeaderConfigPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosRule_HeaderConfigPropertyValidator(properties).assertSuccess();
    return {
        'Values': ros.listMapper(ros.stringToRosTemplate)(properties.values),
        'Key': ros.stringToRosTemplate(properties.key),
    };
}
/**
 * Determine whether the given properties match those of a `HostConfigProperty`
 *
 * @param properties - the TypeScript properties of a `HostConfigProperty`
 *
 * @returns the result of the validation.
 */
function RosRule_HostConfigPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('values', ros.listValidator(ros.validateString))(properties.values));
    return errors.wrap('supplied properties not correct for "HostConfigProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ALB::Rule.HostConfig` resource
 *
 * @param properties - the TypeScript properties of a `HostConfigProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ALB::Rule.HostConfig` resource.
 */
// @ts-ignore TS6133
function rosRuleHostConfigPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosRule_HostConfigPropertyValidator(properties).assertSuccess();
    return {
        'Values': ros.listMapper(ros.stringToRosTemplate)(properties.values),
    };
}
/**
 * Determine whether the given properties match those of a `InsertHeaderConfigProperty`
 *
 * @param properties - the TypeScript properties of a `InsertHeaderConfigProperty`
 *
 * @returns the result of the validation.
 */
function RosRule_InsertHeaderConfigPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    if (properties.valueType && (typeof properties.valueType) !== 'object') {
        errors.collect(ros.propertyValidator('valueType', ros.validateAllowedValues)({
            data: properties.valueType,
            allowedValues: ["ReferenceHeader", "SystemDefined", "UserDefined"],
        }));
    }
    errors.collect(ros.propertyValidator('valueType', ros.validateString)(properties.valueType));
    errors.collect(ros.propertyValidator('value', ros.validateString)(properties.value));
    if (properties.key && (typeof properties.key) !== 'object') {
        errors.collect(ros.propertyValidator('key', ros.validateAllowedPattern)({
            data: properties.key,
            reg: /[-a-z0-9_]{1,40}/
        }));
    }
    errors.collect(ros.propertyValidator('key', ros.validateString)(properties.key));
    return errors.wrap('supplied properties not correct for "InsertHeaderConfigProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ALB::Rule.InsertHeaderConfig` resource
 *
 * @param properties - the TypeScript properties of a `InsertHeaderConfigProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ALB::Rule.InsertHeaderConfig` resource.
 */
// @ts-ignore TS6133
function rosRuleInsertHeaderConfigPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosRule_InsertHeaderConfigPropertyValidator(properties).assertSuccess();
    return {
        'ValueType': ros.stringToRosTemplate(properties.valueType),
        'Value': ros.stringToRosTemplate(properties.value),
        'Key': ros.stringToRosTemplate(properties.key),
    };
}
/**
 * Determine whether the given properties match those of a `MethodConfigProperty`
 *
 * @param properties - the TypeScript properties of a `MethodConfigProperty`
 *
 * @returns the result of the validation.
 */
function RosRule_MethodConfigPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('values', ros.listValidator(ros.validateString))(properties.values));
    return errors.wrap('supplied properties not correct for "MethodConfigProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ALB::Rule.MethodConfig` resource
 *
 * @param properties - the TypeScript properties of a `MethodConfigProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ALB::Rule.MethodConfig` resource.
 */
// @ts-ignore TS6133
function rosRuleMethodConfigPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosRule_MethodConfigPropertyValidator(properties).assertSuccess();
    return {
        'Values': ros.listMapper(ros.stringToRosTemplate)(properties.values),
    };
}
/**
 * Determine whether the given properties match those of a `MirrorGroupConfigProperty`
 *
 * @param properties - the TypeScript properties of a `MirrorGroupConfigProperty`
 *
 * @returns the result of the validation.
 */
function RosRule_MirrorGroupConfigPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('serverGroupTuples', ros.requiredValidator)(properties.serverGroupTuples));
    errors.collect(ros.propertyValidator('serverGroupTuples', ros.listValidator(RosRule_MirrorGroupConfigServerGroupTuplesPropertyValidator))(properties.serverGroupTuples));
    return errors.wrap('supplied properties not correct for "MirrorGroupConfigProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ALB::Rule.MirrorGroupConfig` resource
 *
 * @param properties - the TypeScript properties of a `MirrorGroupConfigProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ALB::Rule.MirrorGroupConfig` resource.
 */
// @ts-ignore TS6133
function rosRuleMirrorGroupConfigPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosRule_MirrorGroupConfigPropertyValidator(properties).assertSuccess();
    return {
        'ServerGroupTuples': ros.listMapper(rosRuleMirrorGroupConfigServerGroupTuplesPropertyToRosTemplate)(properties.serverGroupTuples),
    };
}
/**
 * Determine whether the given properties match those of a `MirrorGroupConfigServerGroupTuplesProperty`
 *
 * @param properties - the TypeScript properties of a `MirrorGroupConfigServerGroupTuplesProperty`
 *
 * @returns the result of the validation.
 */
function RosRule_MirrorGroupConfigServerGroupTuplesPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('serverGroupId', ros.requiredValidator)(properties.serverGroupId));
    errors.collect(ros.propertyValidator('serverGroupId', ros.validateString)(properties.serverGroupId));
    return errors.wrap('supplied properties not correct for "MirrorGroupConfigServerGroupTuplesProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ALB::Rule.MirrorGroupConfigServerGroupTuples` resource
 *
 * @param properties - the TypeScript properties of a `MirrorGroupConfigServerGroupTuplesProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ALB::Rule.MirrorGroupConfigServerGroupTuples` resource.
 */
// @ts-ignore TS6133
function rosRuleMirrorGroupConfigServerGroupTuplesPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosRule_MirrorGroupConfigServerGroupTuplesPropertyValidator(properties).assertSuccess();
    return {
        'ServerGroupId': ros.stringToRosTemplate(properties.serverGroupId),
    };
}
/**
 * Determine whether the given properties match those of a `PathConfigProperty`
 *
 * @param properties - the TypeScript properties of a `PathConfigProperty`
 *
 * @returns the result of the validation.
 */
function RosRule_PathConfigPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('values', ros.listValidator(ros.validateString))(properties.values));
    return errors.wrap('supplied properties not correct for "PathConfigProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ALB::Rule.PathConfig` resource
 *
 * @param properties - the TypeScript properties of a `PathConfigProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ALB::Rule.PathConfig` resource.
 */
// @ts-ignore TS6133
function rosRulePathConfigPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosRule_PathConfigPropertyValidator(properties).assertSuccess();
    return {
        'Values': ros.listMapper(ros.stringToRosTemplate)(properties.values),
    };
}
/**
 * Determine whether the given properties match those of a `QueryStringConfigProperty`
 *
 * @param properties - the TypeScript properties of a `QueryStringConfigProperty`
 *
 * @returns the result of the validation.
 */
function RosRule_QueryStringConfigPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('values', ros.listValidator(RosRule_QueryStringConfigValuesPropertyValidator))(properties.values));
    return errors.wrap('supplied properties not correct for "QueryStringConfigProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ALB::Rule.QueryStringConfig` resource
 *
 * @param properties - the TypeScript properties of a `QueryStringConfigProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ALB::Rule.QueryStringConfig` resource.
 */
// @ts-ignore TS6133
function rosRuleQueryStringConfigPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosRule_QueryStringConfigPropertyValidator(properties).assertSuccess();
    return {
        'Values': ros.listMapper(rosRuleQueryStringConfigValuesPropertyToRosTemplate)(properties.values),
    };
}
/**
 * Determine whether the given properties match those of a `QueryStringConfigValuesProperty`
 *
 * @param properties - the TypeScript properties of a `QueryStringConfigValuesProperty`
 *
 * @returns the result of the validation.
 */
function RosRule_QueryStringConfigValuesPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('value', ros.validateString)(properties.value));
    errors.collect(ros.propertyValidator('key', ros.validateString)(properties.key));
    return errors.wrap('supplied properties not correct for "QueryStringConfigValuesProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ALB::Rule.QueryStringConfigValues` resource
 *
 * @param properties - the TypeScript properties of a `QueryStringConfigValuesProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ALB::Rule.QueryStringConfigValues` resource.
 */
// @ts-ignore TS6133
function rosRuleQueryStringConfigValuesPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosRule_QueryStringConfigValuesPropertyValidator(properties).assertSuccess();
    return {
        'Value': ros.stringToRosTemplate(properties.value),
        'Key': ros.stringToRosTemplate(properties.key),
    };
}
/**
 * Determine whether the given properties match those of a `RedirectConfigProperty`
 *
 * @param properties - the TypeScript properties of a `RedirectConfigProperty`
 *
 * @returns the result of the validation.
 */
function RosRule_RedirectConfigPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('path', ros.validateString)(properties.path));
    if (properties.httpCode && (typeof properties.httpCode) !== 'object') {
        errors.collect(ros.propertyValidator('httpCode', ros.validateAllowedValues)({
            data: properties.httpCode,
            allowedValues: [301, 302, 303, 307, 308],
        }));
    }
    errors.collect(ros.propertyValidator('httpCode', ros.validateNumber)(properties.httpCode));
    errors.collect(ros.propertyValidator('query', ros.validateString)(properties.query));
    errors.collect(ros.propertyValidator('port', ros.validateString)(properties.port));
    errors.collect(ros.propertyValidator('host', ros.validateString)(properties.host));
    errors.collect(ros.propertyValidator('protocol', ros.validateString)(properties.protocol));
    return errors.wrap('supplied properties not correct for "RedirectConfigProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ALB::Rule.RedirectConfig` resource
 *
 * @param properties - the TypeScript properties of a `RedirectConfigProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ALB::Rule.RedirectConfig` resource.
 */
// @ts-ignore TS6133
function rosRuleRedirectConfigPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosRule_RedirectConfigPropertyValidator(properties).assertSuccess();
    return {
        'Path': ros.stringToRosTemplate(properties.path),
        'HttpCode': ros.numberToRosTemplate(properties.httpCode),
        'Query': ros.stringToRosTemplate(properties.query),
        'Port': ros.stringToRosTemplate(properties.port),
        'Host': ros.stringToRosTemplate(properties.host),
        'Protocol': ros.stringToRosTemplate(properties.protocol),
    };
}
/**
 * Determine whether the given properties match those of a `RemoveHeaderConfigProperty`
 *
 * @param properties - the TypeScript properties of a `RemoveHeaderConfigProperty`
 *
 * @returns the result of the validation.
 */
function RosRule_RemoveHeaderConfigPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    if (properties.key && (typeof properties.key) !== 'object') {
        errors.collect(ros.propertyValidator('key', ros.validateAllowedPattern)({
            data: properties.key,
            reg: /[-a-zA-Z0-9_]{1,40}/
        }));
    }
    errors.collect(ros.propertyValidator('key', ros.validateString)(properties.key));
    return errors.wrap('supplied properties not correct for "RemoveHeaderConfigProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ALB::Rule.RemoveHeaderConfig` resource
 *
 * @param properties - the TypeScript properties of a `RemoveHeaderConfigProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ALB::Rule.RemoveHeaderConfig` resource.
 */
// @ts-ignore TS6133
function rosRuleRemoveHeaderConfigPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosRule_RemoveHeaderConfigPropertyValidator(properties).assertSuccess();
    return {
        'Key': ros.stringToRosTemplate(properties.key),
    };
}
/**
 * Determine whether the given properties match those of a `ResponseHeaderConfigProperty`
 *
 * @param properties - the TypeScript properties of a `ResponseHeaderConfigProperty`
 *
 * @returns the result of the validation.
 */
function RosRule_ResponseHeaderConfigPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    if (properties.values && (Array.isArray(properties.values) || (typeof properties.values) === 'string')) {
        errors.collect(ros.propertyValidator('values', ros.validateLength)({
            data: properties.values.length,
            min: undefined,
            max: 20,
        }));
    }
    errors.collect(ros.propertyValidator('values', ros.listValidator(ros.validateString))(properties.values));
    errors.collect(ros.propertyValidator('key', ros.validateString)(properties.key));
    return errors.wrap('supplied properties not correct for "ResponseHeaderConfigProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ALB::Rule.ResponseHeaderConfig` resource
 *
 * @param properties - the TypeScript properties of a `ResponseHeaderConfigProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ALB::Rule.ResponseHeaderConfig` resource.
 */
// @ts-ignore TS6133
function rosRuleResponseHeaderConfigPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosRule_ResponseHeaderConfigPropertyValidator(properties).assertSuccess();
    return {
        'Values': ros.listMapper(ros.stringToRosTemplate)(properties.values),
        'Key': ros.stringToRosTemplate(properties.key),
    };
}
/**
 * Determine whether the given properties match those of a `ResponseStatusCodeConfigProperty`
 *
 * @param properties - the TypeScript properties of a `ResponseStatusCodeConfigProperty`
 *
 * @returns the result of the validation.
 */
function RosRule_ResponseStatusCodeConfigPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    if (properties.values && (Array.isArray(properties.values) || (typeof properties.values) === 'string')) {
        errors.collect(ros.propertyValidator('values', ros.validateLength)({
            data: properties.values.length,
            min: undefined,
            max: 5,
        }));
    }
    errors.collect(ros.propertyValidator('values', ros.listValidator(ros.validateString))(properties.values));
    return errors.wrap('supplied properties not correct for "ResponseStatusCodeConfigProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ALB::Rule.ResponseStatusCodeConfig` resource
 *
 * @param properties - the TypeScript properties of a `ResponseStatusCodeConfigProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ALB::Rule.ResponseStatusCodeConfig` resource.
 */
// @ts-ignore TS6133
function rosRuleResponseStatusCodeConfigPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosRule_ResponseStatusCodeConfigPropertyValidator(properties).assertSuccess();
    return {
        'Values': ros.listMapper(ros.stringToRosTemplate)(properties.values),
    };
}
/**
 * Determine whether the given properties match those of a `RewriteConfigProperty`
 *
 * @param properties - the TypeScript properties of a `RewriteConfigProperty`
 *
 * @returns the result of the validation.
 */
function RosRule_RewriteConfigPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('path', ros.validateString)(properties.path));
    errors.collect(ros.propertyValidator('query', ros.validateString)(properties.query));
    errors.collect(ros.propertyValidator('host', ros.validateString)(properties.host));
    return errors.wrap('supplied properties not correct for "RewriteConfigProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ALB::Rule.RewriteConfig` resource
 *
 * @param properties - the TypeScript properties of a `RewriteConfigProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ALB::Rule.RewriteConfig` resource.
 */
// @ts-ignore TS6133
function rosRuleRewriteConfigPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosRule_RewriteConfigPropertyValidator(properties).assertSuccess();
    return {
        'Path': ros.stringToRosTemplate(properties.path),
        'Query': ros.stringToRosTemplate(properties.query),
        'Host': ros.stringToRosTemplate(properties.host),
    };
}
/**
 * Determine whether the given properties match those of a `RuleActionsProperty`
 *
 * @param properties - the TypeScript properties of a `RuleActionsProperty`
 *
 * @returns the result of the validation.
 */
function RosRule_RuleActionsPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('order', ros.requiredValidator)(properties.order));
    if (properties.order && (typeof properties.order) !== 'object') {
        errors.collect(ros.propertyValidator('order', ros.validateRange)({
            data: properties.order,
            min: 1,
            max: 50000,
        }));
    }
    errors.collect(ros.propertyValidator('order', ros.validateNumber)(properties.order));
    errors.collect(ros.propertyValidator('fixedResponseConfig', RosRule_FixedResponseConfigPropertyValidator)(properties.fixedResponseConfig));
    errors.collect(ros.propertyValidator('type', ros.requiredValidator)(properties.type));
    if (properties.type && (typeof properties.type) !== 'object') {
        errors.collect(ros.propertyValidator('type', ros.validateAllowedValues)({
            data: properties.type,
            allowedValues: ["ForwardGroup", "Redirect", "FixedResponse", "Rewrite", "InsertHeader", "RemoveHeader", "TrafficLimit", "TrafficMirror", "Cors"],
        }));
    }
    errors.collect(ros.propertyValidator('type', ros.validateString)(properties.type));
    errors.collect(ros.propertyValidator('redirectConfig', RosRule_RedirectConfigPropertyValidator)(properties.redirectConfig));
    errors.collect(ros.propertyValidator('corsConfig', RosRule_CorsConfigPropertyValidator)(properties.corsConfig));
    errors.collect(ros.propertyValidator('forwardGroupConfig', RosRule_ForwardGroupConfigPropertyValidator)(properties.forwardGroupConfig));
    errors.collect(ros.propertyValidator('removeHeaderConfig', RosRule_RemoveHeaderConfigPropertyValidator)(properties.removeHeaderConfig));
    errors.collect(ros.propertyValidator('insertHeaderConfig', RosRule_InsertHeaderConfigPropertyValidator)(properties.insertHeaderConfig));
    errors.collect(ros.propertyValidator('rewriteConfig', RosRule_RewriteConfigPropertyValidator)(properties.rewriteConfig));
    errors.collect(ros.propertyValidator('trafficLimitConfig', RosRule_TrafficLimitConfigPropertyValidator)(properties.trafficLimitConfig));
    errors.collect(ros.propertyValidator('trafficMirrorConfig', RosRule_TrafficMirrorConfigPropertyValidator)(properties.trafficMirrorConfig));
    return errors.wrap('supplied properties not correct for "RuleActionsProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ALB::Rule.RuleActions` resource
 *
 * @param properties - the TypeScript properties of a `RuleActionsProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ALB::Rule.RuleActions` resource.
 */
// @ts-ignore TS6133
function rosRuleRuleActionsPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosRule_RuleActionsPropertyValidator(properties).assertSuccess();
    return {
        'Order': ros.numberToRosTemplate(properties.order),
        'FixedResponseConfig': rosRuleFixedResponseConfigPropertyToRosTemplate(properties.fixedResponseConfig),
        'Type': ros.stringToRosTemplate(properties.type),
        'RedirectConfig': rosRuleRedirectConfigPropertyToRosTemplate(properties.redirectConfig),
        'CorsConfig': rosRuleCorsConfigPropertyToRosTemplate(properties.corsConfig),
        'ForwardGroupConfig': rosRuleForwardGroupConfigPropertyToRosTemplate(properties.forwardGroupConfig),
        'RemoveHeaderConfig': rosRuleRemoveHeaderConfigPropertyToRosTemplate(properties.removeHeaderConfig),
        'InsertHeaderConfig': rosRuleInsertHeaderConfigPropertyToRosTemplate(properties.insertHeaderConfig),
        'RewriteConfig': rosRuleRewriteConfigPropertyToRosTemplate(properties.rewriteConfig),
        'TrafficLimitConfig': rosRuleTrafficLimitConfigPropertyToRosTemplate(properties.trafficLimitConfig),
        'TrafficMirrorConfig': rosRuleTrafficMirrorConfigPropertyToRosTemplate(properties.trafficMirrorConfig),
    };
}
/**
 * Determine whether the given properties match those of a `RuleConditionsProperty`
 *
 * @param properties - the TypeScript properties of a `RuleConditionsProperty`
 *
 * @returns the result of the validation.
 */
function RosRule_RuleConditionsPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('methodConfig', RosRule_MethodConfigPropertyValidator)(properties.methodConfig));
    errors.collect(ros.propertyValidator('pathConfig', RosRule_PathConfigPropertyValidator)(properties.pathConfig));
    errors.collect(ros.propertyValidator('type', ros.requiredValidator)(properties.type));
    if (properties.type && (typeof properties.type) !== 'object') {
        errors.collect(ros.propertyValidator('type', ros.validateAllowedValues)({
            data: properties.type,
            allowedValues: ["Cookie", "Header", "Host", "Method", "Path", "QueryString", "SourceIp", "ResponseHeader", "ResponseStatusCode"],
        }));
    }
    errors.collect(ros.propertyValidator('type', ros.validateString)(properties.type));
    errors.collect(ros.propertyValidator('responseHeaderConfig', RosRule_ResponseHeaderConfigPropertyValidator)(properties.responseHeaderConfig));
    errors.collect(ros.propertyValidator('queryStringConfig', RosRule_QueryStringConfigPropertyValidator)(properties.queryStringConfig));
    errors.collect(ros.propertyValidator('hostConfig', RosRule_HostConfigPropertyValidator)(properties.hostConfig));
    errors.collect(ros.propertyValidator('cookieConfig', RosRule_CookieConfigPropertyValidator)(properties.cookieConfig));
    errors.collect(ros.propertyValidator('responseStatusCodeConfig', RosRule_ResponseStatusCodeConfigPropertyValidator)(properties.responseStatusCodeConfig));
    errors.collect(ros.propertyValidator('headerConfig', RosRule_HeaderConfigPropertyValidator)(properties.headerConfig));
    errors.collect(ros.propertyValidator('sourceIpConfig', RosRule_SourceIpConfigPropertyValidator)(properties.sourceIpConfig));
    return errors.wrap('supplied properties not correct for "RuleConditionsProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ALB::Rule.RuleConditions` resource
 *
 * @param properties - the TypeScript properties of a `RuleConditionsProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ALB::Rule.RuleConditions` resource.
 */
// @ts-ignore TS6133
function rosRuleRuleConditionsPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosRule_RuleConditionsPropertyValidator(properties).assertSuccess();
    return {
        'MethodConfig': rosRuleMethodConfigPropertyToRosTemplate(properties.methodConfig),
        'PathConfig': rosRulePathConfigPropertyToRosTemplate(properties.pathConfig),
        'Type': ros.stringToRosTemplate(properties.type),
        'ResponseHeaderConfig': rosRuleResponseHeaderConfigPropertyToRosTemplate(properties.responseHeaderConfig),
        'QueryStringConfig': rosRuleQueryStringConfigPropertyToRosTemplate(properties.queryStringConfig),
        'HostConfig': rosRuleHostConfigPropertyToRosTemplate(properties.hostConfig),
        'CookieConfig': rosRuleCookieConfigPropertyToRosTemplate(properties.cookieConfig),
        'ResponseStatusCodeConfig': rosRuleResponseStatusCodeConfigPropertyToRosTemplate(properties.responseStatusCodeConfig),
        'HeaderConfig': rosRuleHeaderConfigPropertyToRosTemplate(properties.headerConfig),
        'SourceIpConfig': rosRuleSourceIpConfigPropertyToRosTemplate(properties.sourceIpConfig),
    };
}
/**
 * Determine whether the given properties match those of a `ServerGroupStickySessionProperty`
 *
 * @param properties - the TypeScript properties of a `ServerGroupStickySessionProperty`
 *
 * @returns the result of the validation.
 */
function RosRule_ServerGroupStickySessionPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    if (properties.timeout && (typeof properties.timeout) !== 'object') {
        errors.collect(ros.propertyValidator('timeout', ros.validateRange)({
            data: properties.timeout,
            min: 1,
            max: 86400,
        }));
    }
    errors.collect(ros.propertyValidator('timeout', ros.validateNumber)(properties.timeout));
    errors.collect(ros.propertyValidator('enabled', ros.validateBoolean)(properties.enabled));
    return errors.wrap('supplied properties not correct for "ServerGroupStickySessionProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ALB::Rule.ServerGroupStickySession` resource
 *
 * @param properties - the TypeScript properties of a `ServerGroupStickySessionProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ALB::Rule.ServerGroupStickySession` resource.
 */
// @ts-ignore TS6133
function rosRuleServerGroupStickySessionPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosRule_ServerGroupStickySessionPropertyValidator(properties).assertSuccess();
    return {
        'Timeout': ros.numberToRosTemplate(properties.timeout),
        'Enabled': ros.booleanToRosTemplate(properties.enabled),
    };
}
/**
 * Determine whether the given properties match those of a `ServerGroupTuplesProperty`
 *
 * @param properties - the TypeScript properties of a `ServerGroupTuplesProperty`
 *
 * @returns the result of the validation.
 */
function RosRule_ServerGroupTuplesPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('serverGroupId', ros.validateString)(properties.serverGroupId));
    if (properties.weight && (typeof properties.weight) !== 'object') {
        errors.collect(ros.propertyValidator('weight', ros.validateRange)({
            data: properties.weight,
            min: 1,
            max: 100,
        }));
    }
    errors.collect(ros.propertyValidator('weight', ros.validateNumber)(properties.weight));
    return errors.wrap('supplied properties not correct for "ServerGroupTuplesProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ALB::Rule.ServerGroupTuples` resource
 *
 * @param properties - the TypeScript properties of a `ServerGroupTuplesProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ALB::Rule.ServerGroupTuples` resource.
 */
// @ts-ignore TS6133
function rosRuleServerGroupTuplesPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosRule_ServerGroupTuplesPropertyValidator(properties).assertSuccess();
    return {
        'ServerGroupId': ros.stringToRosTemplate(properties.serverGroupId),
        'Weight': ros.numberToRosTemplate(properties.weight),
    };
}
/**
 * Determine whether the given properties match those of a `SourceIpConfigProperty`
 *
 * @param properties - the TypeScript properties of a `SourceIpConfigProperty`
 *
 * @returns the result of the validation.
 */
function RosRule_SourceIpConfigPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    if (properties.values && (Array.isArray(properties.values) || (typeof properties.values) === 'string')) {
        errors.collect(ros.propertyValidator('values', ros.validateLength)({
            data: properties.values.length,
            min: undefined,
            max: 5,
        }));
    }
    errors.collect(ros.propertyValidator('values', ros.listValidator(ros.validateString))(properties.values));
    return errors.wrap('supplied properties not correct for "SourceIpConfigProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ALB::Rule.SourceIpConfig` resource
 *
 * @param properties - the TypeScript properties of a `SourceIpConfigProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ALB::Rule.SourceIpConfig` resource.
 */
// @ts-ignore TS6133
function rosRuleSourceIpConfigPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosRule_SourceIpConfigPropertyValidator(properties).assertSuccess();
    return {
        'Values': ros.listMapper(ros.stringToRosTemplate)(properties.values),
    };
}
/**
 * Determine whether the given properties match those of a `TrafficLimitConfigProperty`
 *
 * @param properties - the TypeScript properties of a `TrafficLimitConfigProperty`
 *
 * @returns the result of the validation.
 */
function RosRule_TrafficLimitConfigPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    if (properties.perIpQps && (typeof properties.perIpQps) !== 'object') {
        errors.collect(ros.propertyValidator('perIpQps', ros.validateRange)({
            data: properties.perIpQps,
            min: 1,
            max: 100000,
        }));
    }
    errors.collect(ros.propertyValidator('perIpQps', ros.validateNumber)(properties.perIpQps));
    errors.collect(ros.propertyValidator('qps', ros.requiredValidator)(properties.qps));
    if (properties.qps && (typeof properties.qps) !== 'object') {
        errors.collect(ros.propertyValidator('qps', ros.validateRange)({
            data: properties.qps,
            min: 1,
            max: 100000,
        }));
    }
    errors.collect(ros.propertyValidator('qps', ros.validateNumber)(properties.qps));
    return errors.wrap('supplied properties not correct for "TrafficLimitConfigProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ALB::Rule.TrafficLimitConfig` resource
 *
 * @param properties - the TypeScript properties of a `TrafficLimitConfigProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ALB::Rule.TrafficLimitConfig` resource.
 */
// @ts-ignore TS6133
function rosRuleTrafficLimitConfigPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosRule_TrafficLimitConfigPropertyValidator(properties).assertSuccess();
    return {
        'PerIpQps': ros.numberToRosTemplate(properties.perIpQps),
        'QPS': ros.numberToRosTemplate(properties.qps),
    };
}
/**
 * Determine whether the given properties match those of a `TrafficMirrorConfigProperty`
 *
 * @param properties - the TypeScript properties of a `TrafficMirrorConfigProperty`
 *
 * @returns the result of the validation.
 */
function RosRule_TrafficMirrorConfigPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('mirrorGroupConfig', ros.requiredValidator)(properties.mirrorGroupConfig));
    errors.collect(ros.propertyValidator('mirrorGroupConfig', RosRule_MirrorGroupConfigPropertyValidator)(properties.mirrorGroupConfig));
    errors.collect(ros.propertyValidator('targetType', ros.requiredValidator)(properties.targetType));
    errors.collect(ros.propertyValidator('targetType', ros.validateString)(properties.targetType));
    return errors.wrap('supplied properties not correct for "TrafficMirrorConfigProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ALB::Rule.TrafficMirrorConfig` resource
 *
 * @param properties - the TypeScript properties of a `TrafficMirrorConfigProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ALB::Rule.TrafficMirrorConfig` resource.
 */
// @ts-ignore TS6133
function rosRuleTrafficMirrorConfigPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosRule_TrafficMirrorConfigPropertyValidator(properties).assertSuccess();
    return {
        'MirrorGroupConfig': rosRuleMirrorGroupConfigPropertyToRosTemplate(properties.mirrorGroupConfig),
        'TargetType': ros.stringToRosTemplate(properties.targetType),
    };
}
/**
 * Determine whether the given properties match those of a `ValuesProperty`
 *
 * @param properties - the TypeScript properties of a `ValuesProperty`
 *
 * @returns the result of the validation.
 */
function RosRule_ValuesPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('value', ros.validateString)(properties.value));
    errors.collect(ros.propertyValidator('key', ros.validateString)(properties.key));
    return errors.wrap('supplied properties not correct for "ValuesProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ALB::Rule.Values` resource
 *
 * @param properties - the TypeScript properties of a `ValuesProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ALB::Rule.Values` resource.
 */
// @ts-ignore TS6133
function rosRuleValuesPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosRule_ValuesPropertyValidator(properties).assertSuccess();
    return {
        'Value': ros.stringToRosTemplate(properties.value),
        'Key': ros.stringToRosTemplate(properties.key),
    };
}
/**
 * Determine whether the given properties match those of a `RosSecurityGroupAttachmentProps`
 *
 * @param properties - the TypeScript properties of a `RosSecurityGroupAttachmentProps`
 *
 * @returns the result of the validation.
 */
function RosSecurityGroupAttachmentPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('loadBalancerId', ros.requiredValidator)(properties.loadBalancerId));
    errors.collect(ros.propertyValidator('loadBalancerId', ros.validateString)(properties.loadBalancerId));
    if (properties.securityGroupIds && (Array.isArray(properties.securityGroupIds) || (typeof properties.securityGroupIds) === 'string')) {
        errors.collect(ros.propertyValidator('securityGroupIds', ros.validateLength)({
            data: properties.securityGroupIds.length,
            min: 0,
            max: 4,
        }));
    }
    errors.collect(ros.propertyValidator('securityGroupIds', ros.listValidator(ros.validateString))(properties.securityGroupIds));
    return errors.wrap('supplied properties not correct for "RosSecurityGroupAttachmentProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ALB::SecurityGroupAttachment` resource
 *
 * @param properties - the TypeScript properties of a `RosSecurityGroupAttachmentProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ALB::SecurityGroupAttachment` resource.
 */
// @ts-ignore TS6133
function rosSecurityGroupAttachmentPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosSecurityGroupAttachmentPropsValidator(properties).assertSuccess();
    }
    return {
        'LoadBalancerId': ros.stringToRosTemplate(properties.loadBalancerId),
        'SecurityGroupIds': ros.listMapper(ros.stringToRosTemplate)(properties.securityGroupIds),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::ALB::SecurityGroupAttachment`, which is used to associate created security groups with an Application Load Balancer (ALB) instance.
 * @Note This class does not contain additional functions, so it is recommended to use the `SecurityGroupAttachment` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-alb-securitygroupattachment
 */
class RosSecurityGroupAttachment extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosSecurityGroupAttachment.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.loadBalancerId = props.loadBalancerId;
        this.securityGroupIds = props.securityGroupIds;
    }
    get rosProperties() {
        return {
            loadBalancerId: this.loadBalancerId,
            securityGroupIds: this.securityGroupIds,
        };
    }
    renderProperties(props) {
        return rosSecurityGroupAttachmentPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosSecurityGroupAttachment = RosSecurityGroupAttachment;
/**
 * The resource type name for this resource class.
 */
RosSecurityGroupAttachment.ROS_RESOURCE_TYPE_NAME = "ALIYUN::ALB::SecurityGroupAttachment";
/**
 * Determine whether the given properties match those of a `RosSecurityPolicyProps`
 *
 * @param properties - the TypeScript properties of a `RosSecurityPolicyProps`
 *
 * @returns the result of the validation.
 */
function RosSecurityPolicyPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('ciphers', ros.requiredValidator)(properties.ciphers));
    if (properties.ciphers && (Array.isArray(properties.ciphers) || (typeof properties.ciphers) === 'string')) {
        errors.collect(ros.propertyValidator('ciphers', ros.validateLength)({
            data: properties.ciphers.length,
            min: 1,
            max: 20,
        }));
    }
    errors.collect(ros.propertyValidator('ciphers', ros.listValidator(ros.validateString))(properties.ciphers));
    errors.collect(ros.propertyValidator('resourceGroupId', ros.validateString)(properties.resourceGroupId));
    errors.collect(ros.propertyValidator('tlsVersions', ros.requiredValidator)(properties.tlsVersions));
    if (properties.tlsVersions && (Array.isArray(properties.tlsVersions) || (typeof properties.tlsVersions) === 'string')) {
        errors.collect(ros.propertyValidator('tlsVersions', ros.validateLength)({
            data: properties.tlsVersions.length,
            min: 1,
            max: 5,
        }));
    }
    errors.collect(ros.propertyValidator('tlsVersions', ros.listValidator(ros.validateString))(properties.tlsVersions));
    errors.collect(ros.propertyValidator('securityPolicyName', ros.requiredValidator)(properties.securityPolicyName));
    errors.collect(ros.propertyValidator('securityPolicyName', ros.validateString)(properties.securityPolicyName));
    return errors.wrap('supplied properties not correct for "RosSecurityPolicyProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ALB::SecurityPolicy` resource
 *
 * @param properties - the TypeScript properties of a `RosSecurityPolicyProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ALB::SecurityPolicy` resource.
 */
// @ts-ignore TS6133
function rosSecurityPolicyPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosSecurityPolicyPropsValidator(properties).assertSuccess();
    }
    return {
        'Ciphers': ros.listMapper(ros.stringToRosTemplate)(properties.ciphers),
        'SecurityPolicyName': ros.stringToRosTemplate(properties.securityPolicyName),
        'TLSVersions': ros.listMapper(ros.stringToRosTemplate)(properties.tlsVersions),
        'ResourceGroupId': ros.stringToRosTemplate(properties.resourceGroupId),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::ALB::SecurityPolicy`, which is used to create a custom security policy.
 * @Note This class does not contain additional functions, so it is recommended to use the `SecurityPolicy` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-alb-securitypolicy
 */
class RosSecurityPolicy extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosSecurityPolicy.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrSecurityPolicyId = this.getAtt('SecurityPolicyId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.ciphers = props.ciphers;
        this.securityPolicyName = props.securityPolicyName;
        this.tlsVersions = props.tlsVersions;
        this.resourceGroupId = props.resourceGroupId;
    }
    get rosProperties() {
        return {
            ciphers: this.ciphers,
            securityPolicyName: this.securityPolicyName,
            tlsVersions: this.tlsVersions,
            resourceGroupId: this.resourceGroupId,
        };
    }
    renderProperties(props) {
        return rosSecurityPolicyPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosSecurityPolicy = RosSecurityPolicy;
/**
 * The resource type name for this resource class.
 */
RosSecurityPolicy.ROS_RESOURCE_TYPE_NAME = "ALIYUN::ALB::SecurityPolicy";
/**
 * Determine whether the given properties match those of a `RosServerGroupProps`
 *
 * @param properties - the TypeScript properties of a `RosServerGroupProps`
 *
 * @returns the result of the validation.
 */
function RosServerGroupPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('connectionDrainConfig', RosServerGroup_ConnectionDrainConfigPropertyValidator)(properties.connectionDrainConfig));
    errors.collect(ros.propertyValidator('resourceGroupId', ros.validateString)(properties.resourceGroupId));
    errors.collect(ros.propertyValidator('uchConfig', RosServerGroup_UchConfigPropertyValidator)(properties.uchConfig));
    errors.collect(ros.propertyValidator('upstreamKeepaliveEnabled', ros.validateBoolean)(properties.upstreamKeepaliveEnabled));
    if (properties.scheduler && (typeof properties.scheduler) !== 'object') {
        errors.collect(ros.propertyValidator('scheduler', ros.validateAllowedValues)({
            data: properties.scheduler,
            allowedValues: ["Sch", "Wlc", "Wrr", "Uch"],
        }));
    }
    errors.collect(ros.propertyValidator('scheduler', ros.validateString)(properties.scheduler));
    errors.collect(ros.propertyValidator('stickySessionConfig', RosServerGroup_StickySessionConfigPropertyValidator)(properties.stickySessionConfig));
    if (properties.serverGroupType && (typeof properties.serverGroupType) !== 'object') {
        errors.collect(ros.propertyValidator('serverGroupType', ros.validateAllowedValues)({
            data: properties.serverGroupType,
            allowedValues: ["Ip", "Instance", "Fc"],
        }));
    }
    errors.collect(ros.propertyValidator('serverGroupType', ros.validateString)(properties.serverGroupType));
    errors.collect(ros.propertyValidator('crossZoneEnabled', ros.validateBoolean)(properties.crossZoneEnabled));
    errors.collect(ros.propertyValidator('ipv6Enabled', ros.validateBoolean)(properties.ipv6Enabled));
    errors.collect(ros.propertyValidator('slowStartConfig', RosServerGroup_SlowStartConfigPropertyValidator)(properties.slowStartConfig));
    errors.collect(ros.propertyValidator('vpcId', ros.validateString)(properties.vpcId));
    errors.collect(ros.propertyValidator('serviceName', ros.validateString)(properties.serviceName));
    errors.collect(ros.propertyValidator('healthCheckConfig', ros.requiredValidator)(properties.healthCheckConfig));
    errors.collect(ros.propertyValidator('healthCheckConfig', RosServerGroup_HealthCheckConfigPropertyValidator)(properties.healthCheckConfig));
    if (properties.protocol && (typeof properties.protocol) !== 'object') {
        errors.collect(ros.propertyValidator('protocol', ros.validateAllowedValues)({
            data: properties.protocol,
            allowedValues: ["HTTPS", "HTTP", "gRPC", "GRPC"],
        }));
    }
    errors.collect(ros.propertyValidator('protocol', ros.validateString)(properties.protocol));
    if (properties.tags && (Array.isArray(properties.tags) || (typeof properties.tags) === 'string')) {
        errors.collect(ros.propertyValidator('tags', ros.validateLength)({
            data: properties.tags.length,
            min: undefined,
            max: 20,
        }));
    }
    errors.collect(ros.propertyValidator('tags', ros.listValidator(RosServerGroup_TagsPropertyValidator))(properties.tags));
    errors.collect(ros.propertyValidator('serverGroupName', ros.requiredValidator)(properties.serverGroupName));
    errors.collect(ros.propertyValidator('serverGroupName', ros.validateString)(properties.serverGroupName));
    return errors.wrap('supplied properties not correct for "RosServerGroupProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ALB::ServerGroup` resource
 *
 * @param properties - the TypeScript properties of a `RosServerGroupProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ALB::ServerGroup` resource.
 */
// @ts-ignore TS6133
function rosServerGroupPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosServerGroupPropsValidator(properties).assertSuccess();
    }
    return {
        'HealthCheckConfig': rosServerGroupHealthCheckConfigPropertyToRosTemplate(properties.healthCheckConfig),
        'ServerGroupName': ros.stringToRosTemplate(properties.serverGroupName),
        'ConnectionDrainConfig': rosServerGroupConnectionDrainConfigPropertyToRosTemplate(properties.connectionDrainConfig),
        'CrossZoneEnabled': ros.booleanToRosTemplate(properties.crossZoneEnabled),
        'Ipv6Enabled': ros.booleanToRosTemplate(properties.ipv6Enabled),
        'Protocol': ros.stringToRosTemplate(properties.protocol),
        'ResourceGroupId': ros.stringToRosTemplate(properties.resourceGroupId),
        'Scheduler': ros.stringToRosTemplate(properties.scheduler),
        'ServerGroupType': ros.stringToRosTemplate(properties.serverGroupType),
        'ServiceName': ros.stringToRosTemplate(properties.serviceName),
        'SlowStartConfig': rosServerGroupSlowStartConfigPropertyToRosTemplate(properties.slowStartConfig),
        'StickySessionConfig': rosServerGroupStickySessionConfigPropertyToRosTemplate(properties.stickySessionConfig),
        'Tags': ros.listMapper(rosServerGroupTagsPropertyToRosTemplate)(properties.tags),
        'UchConfig': rosServerGroupUchConfigPropertyToRosTemplate(properties.uchConfig),
        'UpstreamKeepaliveEnabled': ros.booleanToRosTemplate(properties.upstreamKeepaliveEnabled),
        'VpcId': ros.stringToRosTemplate(properties.vpcId),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::ALB::ServerGroup`, which is used to create a server group.
 * @Note This class does not contain additional functions, so it is recommended to use the `ServerGroup` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-alb-servergroup
 */
class RosServerGroup extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosServerGroup.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrArn = this.getAtt('Arn');
        this.attrServerGroupId = this.getAtt('ServerGroupId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.healthCheckConfig = props.healthCheckConfig;
        this.serverGroupName = props.serverGroupName;
        this.connectionDrainConfig = props.connectionDrainConfig;
        this.crossZoneEnabled = props.crossZoneEnabled;
        this.ipv6Enabled = props.ipv6Enabled;
        this.protocol = props.protocol;
        this.resourceGroupId = props.resourceGroupId;
        this.scheduler = props.scheduler;
        this.serverGroupType = props.serverGroupType;
        this.serviceName = props.serviceName;
        this.slowStartConfig = props.slowStartConfig;
        this.stickySessionConfig = props.stickySessionConfig;
        this.tags = props.tags;
        this.uchConfig = props.uchConfig;
        this.upstreamKeepaliveEnabled = props.upstreamKeepaliveEnabled;
        this.vpcId = props.vpcId;
    }
    get rosProperties() {
        return {
            healthCheckConfig: this.healthCheckConfig,
            serverGroupName: this.serverGroupName,
            connectionDrainConfig: this.connectionDrainConfig,
            crossZoneEnabled: this.crossZoneEnabled,
            ipv6Enabled: this.ipv6Enabled,
            protocol: this.protocol,
            resourceGroupId: this.resourceGroupId,
            scheduler: this.scheduler,
            serverGroupType: this.serverGroupType,
            serviceName: this.serviceName,
            slowStartConfig: this.slowStartConfig,
            stickySessionConfig: this.stickySessionConfig,
            tags: this.tags,
            uchConfig: this.uchConfig,
            upstreamKeepaliveEnabled: this.upstreamKeepaliveEnabled,
            vpcId: this.vpcId,
        };
    }
    renderProperties(props) {
        return rosServerGroupPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosServerGroup = RosServerGroup;
/**
 * The resource type name for this resource class.
 */
RosServerGroup.ROS_RESOURCE_TYPE_NAME = "ALIYUN::ALB::ServerGroup";
/**
 * Determine whether the given properties match those of a `ConnectionDrainConfigProperty`
 *
 * @param properties - the TypeScript properties of a `ConnectionDrainConfigProperty`
 *
 * @returns the result of the validation.
 */
function RosServerGroup_ConnectionDrainConfigPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('connectionDrainEnabled', ros.requiredValidator)(properties.connectionDrainEnabled));
    errors.collect(ros.propertyValidator('connectionDrainEnabled', ros.validateBoolean)(properties.connectionDrainEnabled));
    errors.collect(ros.propertyValidator('connectionDrainTimeout', ros.requiredValidator)(properties.connectionDrainTimeout));
    if (properties.connectionDrainTimeout && (typeof properties.connectionDrainTimeout) !== 'object') {
        errors.collect(ros.propertyValidator('connectionDrainTimeout', ros.validateRange)({
            data: properties.connectionDrainTimeout,
            min: 0,
            max: 900,
        }));
    }
    errors.collect(ros.propertyValidator('connectionDrainTimeout', ros.validateNumber)(properties.connectionDrainTimeout));
    return errors.wrap('supplied properties not correct for "ConnectionDrainConfigProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ALB::ServerGroup.ConnectionDrainConfig` resource
 *
 * @param properties - the TypeScript properties of a `ConnectionDrainConfigProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ALB::ServerGroup.ConnectionDrainConfig` resource.
 */
// @ts-ignore TS6133
function rosServerGroupConnectionDrainConfigPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosServerGroup_ConnectionDrainConfigPropertyValidator(properties).assertSuccess();
    return {
        'ConnectionDrainEnabled': ros.booleanToRosTemplate(properties.connectionDrainEnabled),
        'ConnectionDrainTimeout': ros.numberToRosTemplate(properties.connectionDrainTimeout),
    };
}
/**
 * Determine whether the given properties match those of a `HealthCheckConfigProperty`
 *
 * @param properties - the TypeScript properties of a `HealthCheckConfigProperty`
 *
 * @returns the result of the validation.
 */
function RosServerGroup_HealthCheckConfigPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('healthCheckInterval', ros.validateNumber)(properties.healthCheckInterval));
    errors.collect(ros.propertyValidator('healthCheckConnectPort', ros.validateNumber)(properties.healthCheckConnectPort));
    errors.collect(ros.propertyValidator('healthCheckCodes', ros.listValidator(ros.validateString))(properties.healthCheckCodes));
    errors.collect(ros.propertyValidator('unhealthyThreshold', ros.validateNumber)(properties.unhealthyThreshold));
    errors.collect(ros.propertyValidator('healthCheckMethod', ros.validateString)(properties.healthCheckMethod));
    errors.collect(ros.propertyValidator('healthCheckPath', ros.validateString)(properties.healthCheckPath));
    errors.collect(ros.propertyValidator('healthCheckHost', ros.validateString)(properties.healthCheckHost));
    errors.collect(ros.propertyValidator('healthyThreshold', ros.validateNumber)(properties.healthyThreshold));
    if (properties.healthCheckProtocol && (typeof properties.healthCheckProtocol) !== 'object') {
        errors.collect(ros.propertyValidator('healthCheckProtocol', ros.validateAllowedValues)({
            data: properties.healthCheckProtocol,
            allowedValues: ["HTTPS", "HTTP", "gRPC", "GRPC"],
        }));
    }
    errors.collect(ros.propertyValidator('healthCheckProtocol', ros.validateString)(properties.healthCheckProtocol));
    if (properties.healthCheckHttpVersion && (typeof properties.healthCheckHttpVersion) !== 'object') {
        errors.collect(ros.propertyValidator('healthCheckHttpVersion', ros.validateAllowedValues)({
            data: properties.healthCheckHttpVersion,
            allowedValues: ["HTTP1.0", "HTTP1.1"],
        }));
    }
    errors.collect(ros.propertyValidator('healthCheckHttpVersion', ros.validateString)(properties.healthCheckHttpVersion));
    errors.collect(ros.propertyValidator('healthCheckEnabled', ros.requiredValidator)(properties.healthCheckEnabled));
    errors.collect(ros.propertyValidator('healthCheckEnabled', ros.validateBoolean)(properties.healthCheckEnabled));
    errors.collect(ros.propertyValidator('healthCheckTimeout', ros.validateNumber)(properties.healthCheckTimeout));
    return errors.wrap('supplied properties not correct for "HealthCheckConfigProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ALB::ServerGroup.HealthCheckConfig` resource
 *
 * @param properties - the TypeScript properties of a `HealthCheckConfigProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ALB::ServerGroup.HealthCheckConfig` resource.
 */
// @ts-ignore TS6133
function rosServerGroupHealthCheckConfigPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosServerGroup_HealthCheckConfigPropertyValidator(properties).assertSuccess();
    return {
        'HealthCheckInterval': ros.numberToRosTemplate(properties.healthCheckInterval),
        'HealthCheckConnectPort': ros.numberToRosTemplate(properties.healthCheckConnectPort),
        'HealthCheckCodes': ros.listMapper(ros.stringToRosTemplate)(properties.healthCheckCodes),
        'UnhealthyThreshold': ros.numberToRosTemplate(properties.unhealthyThreshold),
        'HealthCheckMethod': ros.stringToRosTemplate(properties.healthCheckMethod),
        'HealthCheckPath': ros.stringToRosTemplate(properties.healthCheckPath),
        'HealthCheckHost': ros.stringToRosTemplate(properties.healthCheckHost),
        'HealthyThreshold': ros.numberToRosTemplate(properties.healthyThreshold),
        'HealthCheckProtocol': ros.stringToRosTemplate(properties.healthCheckProtocol),
        'HealthCheckHttpVersion': ros.stringToRosTemplate(properties.healthCheckHttpVersion),
        'HealthCheckEnabled': ros.booleanToRosTemplate(properties.healthCheckEnabled),
        'HealthCheckTimeout': ros.numberToRosTemplate(properties.healthCheckTimeout),
    };
}
/**
 * Determine whether the given properties match those of a `SlowStartConfigProperty`
 *
 * @param properties - the TypeScript properties of a `SlowStartConfigProperty`
 *
 * @returns the result of the validation.
 */
function RosServerGroup_SlowStartConfigPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('slowStartEnabled', ros.requiredValidator)(properties.slowStartEnabled));
    errors.collect(ros.propertyValidator('slowStartEnabled', ros.validateBoolean)(properties.slowStartEnabled));
    errors.collect(ros.propertyValidator('slowStartDuration', ros.requiredValidator)(properties.slowStartDuration));
    if (properties.slowStartDuration && (typeof properties.slowStartDuration) !== 'object') {
        errors.collect(ros.propertyValidator('slowStartDuration', ros.validateRange)({
            data: properties.slowStartDuration,
            min: 30,
            max: 900,
        }));
    }
    errors.collect(ros.propertyValidator('slowStartDuration', ros.validateNumber)(properties.slowStartDuration));
    return errors.wrap('supplied properties not correct for "SlowStartConfigProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ALB::ServerGroup.SlowStartConfig` resource
 *
 * @param properties - the TypeScript properties of a `SlowStartConfigProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ALB::ServerGroup.SlowStartConfig` resource.
 */
// @ts-ignore TS6133
function rosServerGroupSlowStartConfigPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosServerGroup_SlowStartConfigPropertyValidator(properties).assertSuccess();
    return {
        'SlowStartEnabled': ros.booleanToRosTemplate(properties.slowStartEnabled),
        'SlowStartDuration': ros.numberToRosTemplate(properties.slowStartDuration),
    };
}
/**
 * Determine whether the given properties match those of a `StickySessionConfigProperty`
 *
 * @param properties - the TypeScript properties of a `StickySessionConfigProperty`
 *
 * @returns the result of the validation.
 */
function RosServerGroup_StickySessionConfigPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('cookie', ros.validateString)(properties.cookie));
    errors.collect(ros.propertyValidator('cookieTimeout', ros.validateNumber)(properties.cookieTimeout));
    if (properties.stickySessionType && (typeof properties.stickySessionType) !== 'object') {
        errors.collect(ros.propertyValidator('stickySessionType', ros.validateAllowedValues)({
            data: properties.stickySessionType,
            allowedValues: ["Server", "Insert"],
        }));
    }
    errors.collect(ros.propertyValidator('stickySessionType', ros.validateString)(properties.stickySessionType));
    errors.collect(ros.propertyValidator('stickySessionEnabled', ros.validateBoolean)(properties.stickySessionEnabled));
    return errors.wrap('supplied properties not correct for "StickySessionConfigProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ALB::ServerGroup.StickySessionConfig` resource
 *
 * @param properties - the TypeScript properties of a `StickySessionConfigProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ALB::ServerGroup.StickySessionConfig` resource.
 */
// @ts-ignore TS6133
function rosServerGroupStickySessionConfigPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosServerGroup_StickySessionConfigPropertyValidator(properties).assertSuccess();
    return {
        'Cookie': ros.stringToRosTemplate(properties.cookie),
        'CookieTimeout': ros.numberToRosTemplate(properties.cookieTimeout),
        'StickySessionType': ros.stringToRosTemplate(properties.stickySessionType),
        'StickySessionEnabled': ros.booleanToRosTemplate(properties.stickySessionEnabled),
    };
}
/**
 * Determine whether the given properties match those of a `TagsProperty`
 *
 * @param properties - the TypeScript properties of a `TagsProperty`
 *
 * @returns the result of the validation.
 */
function RosServerGroup_TagsPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('value', ros.validateString)(properties.value));
    errors.collect(ros.propertyValidator('key', ros.requiredValidator)(properties.key));
    errors.collect(ros.propertyValidator('key', ros.validateString)(properties.key));
    return errors.wrap('supplied properties not correct for "TagsProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ALB::ServerGroup.Tags` resource
 *
 * @param properties - the TypeScript properties of a `TagsProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ALB::ServerGroup.Tags` resource.
 */
// @ts-ignore TS6133
function rosServerGroupTagsPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosServerGroup_TagsPropertyValidator(properties).assertSuccess();
    return {
        'Value': ros.stringToRosTemplate(properties.value),
        'Key': ros.stringToRosTemplate(properties.key),
    };
}
/**
 * Determine whether the given properties match those of a `UchConfigProperty`
 *
 * @param properties - the TypeScript properties of a `UchConfigProperty`
 *
 * @returns the result of the validation.
 */
function RosServerGroup_UchConfigPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('type', ros.requiredValidator)(properties.type));
    if (properties.type && (typeof properties.type) !== 'object') {
        errors.collect(ros.propertyValidator('type', ros.validateAllowedValues)({
            data: properties.type,
            allowedValues: ["QueryString"],
        }));
    }
    errors.collect(ros.propertyValidator('type', ros.validateString)(properties.type));
    errors.collect(ros.propertyValidator('value', ros.requiredValidator)(properties.value));
    errors.collect(ros.propertyValidator('value', ros.validateString)(properties.value));
    return errors.wrap('supplied properties not correct for "UchConfigProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ALB::ServerGroup.UchConfig` resource
 *
 * @param properties - the TypeScript properties of a `UchConfigProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ALB::ServerGroup.UchConfig` resource.
 */
// @ts-ignore TS6133
function rosServerGroupUchConfigPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosServerGroup_UchConfigPropertyValidator(properties).assertSuccess();
    return {
        'Type': ros.stringToRosTemplate(properties.type),
        'Value': ros.stringToRosTemplate(properties.value),
    };
}
//# sourceMappingURL=data:application/json;base64,