"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BackendServerAttachment = exports.BackendServerAttachmentProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const alb_generated_1 = require("./alb.generated");
Object.defineProperty(exports, "BackendServerAttachmentProperty", { enumerable: true, get: function () { return alb_generated_1.RosBackendServerAttachment; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::ALB::BackendServerAttachment`, which is used to add backend servers to a server group.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosBackendServerAttachment`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-alb-backendserverattachment
 */
class BackendServerAttachment extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosBackendServerAttachment = new alb_generated_1.RosBackendServerAttachment(this, id, {
            serverGroupId: props.serverGroupId,
            servers: props.servers,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosBackendServerAttachment;
        this.attrServerGroupId = rosBackendServerAttachment.attrServerGroupId;
    }
}
exports.BackendServerAttachment = BackendServerAttachment;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFja2VuZHNlcnZlcmF0dGFjaG1lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJiYWNrZW5kc2VydmVyYXR0YWNobWVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw4Q0FBOEM7QUFDOUMsbURBQTZEO0FBRXRCLGdIQUY5QiwwQ0FBMEIsT0FFbUM7QUErQnRFOzs7O0dBSUc7QUFDSCxNQUFhLHVCQUF3QixTQUFRLEdBQUcsQ0FBQyxRQUFRO0lBV3JEOzs7O09BSUc7SUFDSCxZQUFZLEtBQW9CLEVBQUUsRUFBVSxFQUFFLEtBQW1DLEVBQUUsbUNBQTJDLElBQUk7UUFDOUgsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNqQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUNiLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxnQ0FBZ0MsR0FBRyxnQ0FBZ0MsQ0FBQztRQUV6RSxNQUFNLDBCQUEwQixHQUFHLElBQUksMENBQTBCLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRztZQUN6RSxhQUFhLEVBQUUsS0FBSyxDQUFDLGFBQWE7WUFDbEMsT0FBTyxFQUFFLEtBQUssQ0FBQyxPQUFPO1NBQ3pCLEVBQUUsZ0NBQWdDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO1FBQ3BGLElBQUksQ0FBQyxRQUFRLEdBQUcsMEJBQTBCLENBQUM7UUFDM0MsSUFBSSxDQUFDLGlCQUFpQixHQUFHLDBCQUEwQixDQUFDLGlCQUFpQixDQUFDO0lBQzFFLENBQUM7Q0FDSjtBQTlCRCwwREE4QkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyByb3MgZnJvbSAnQGFsaWNsb3VkL3Jvcy1jZGstY29yZSc7XG5pbXBvcnQgeyBSb3NCYWNrZW5kU2VydmVyQXR0YWNobWVudCB9IGZyb20gJy4vYWxiLmdlbmVyYXRlZCc7XG4vLyBHZW5lcmF0ZWQgZnJvbSB0aGUgQWxpQ2xvdWQgUk9TIFJlc291cmNlIFNwZWNpZmljYXRpb25cbmV4cG9ydCB7IFJvc0JhY2tlbmRTZXJ2ZXJBdHRhY2htZW50IGFzIEJhY2tlbmRTZXJ2ZXJBdHRhY2htZW50UHJvcGVydHkgfTtcblxuLyoqXG4gKiBQcm9wZXJ0aWVzIGZvciBkZWZpbmluZyBhIGBCYWNrZW5kU2VydmVyQXR0YWNobWVudGAuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2FsaXl1bi1hbGItYmFja2VuZHNlcnZlcmF0dGFjaG1lbnRcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBCYWNrZW5kU2VydmVyQXR0YWNobWVudFByb3BzIHtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHNlcnZlckdyb3VwSWQ6IFRoZSBJRCBvZiB0aGUgc2VydmVyIGdyb3VwLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHNlcnZlckdyb3VwSWQ6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHNlcnZlcnM6IFRoZSBiYWNrZW5kIHNlcnZlcnMgdGhhdCB5b3Ugd2FudCB0byBhZGQgdG8gdGhlIHNlcnZlciBncm91cC4gWW91IGNhbiBzcGVjaWZ5IHVwIHRvXG4gICAgICogNDAgc2VydmVycyBpbiBlYWNoIGNhbGwuXG4gICAgICovXG4gICAgcmVhZG9ubHkgc2VydmVyczogQXJyYXk8Um9zQmFja2VuZFNlcnZlckF0dGFjaG1lbnQuU2VydmVyc1Byb3BlcnR5IHwgcm9zLklSZXNvbHZhYmxlPiB8IHJvcy5JUmVzb2x2YWJsZTtcbn1cblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgYEJhY2tlbmRTZXJ2ZXJBdHRhY2htZW50YC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJQmFja2VuZFNlcnZlckF0dGFjaG1lbnQgZXh0ZW5kcyByb3MuSVJlc291cmNlIHtcbiAgICByZWFkb25seSBwcm9wczogQmFja2VuZFNlcnZlckF0dGFjaG1lbnRQcm9wcztcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBTZXJ2ZXJHcm91cElkOiBUaGUgSUQgb2YgdGhlIHNlcnZlciBncm91cC5cbiAgICAgKi9cbiAgICByZWFkb25seSBhdHRyU2VydmVyR3JvdXBJZDogcm9zLklSZXNvbHZhYmxlIHwgc3RyaW5nO1xufVxuLyoqXG4gKiBUaGlzIGNsYXNzIGVuY2Fwc3VsYXRlcyBhbmQgZXh0ZW5kcyB0aGUgUk9TIHJlc291cmNlIHR5cGUgYEFMSVlVTjo6QUxCOjpCYWNrZW5kU2VydmVyQXR0YWNobWVudGAsIHdoaWNoIGlzIHVzZWQgdG8gYWRkIGJhY2tlbmQgc2VydmVycyB0byBhIHNlcnZlciBncm91cC5cbiAqIEBOb3RlIFRoaXMgY2xhc3MgbWF5IGhhdmUgc29tZSBuZXcgZnVuY3Rpb25zIHRvIGZhY2lsaXRhdGUgZGV2ZWxvcG1lbnQsIHNvIGl0IGlzIHJlY29tbWVuZGVkIHRvIHVzZSB0aGlzIGNsYXNzIGluc3RlYWQgb2YgYFJvc0JhY2tlbmRTZXJ2ZXJBdHRhY2htZW50YGZvciBhIG1vcmUgY29udmVuaWVudCBkZXZlbG9wbWVudCBleHBlcmllbmNlLlxuICogU2VlIGh0dHBzOi8vd3d3LmFsaWJhYmFjbG91ZC5jb20vaGVscC9yb3MvZGV2ZWxvcGVyLXJlZmVyZW5jZS9hbGl5dW4tYWxiLWJhY2tlbmRzZXJ2ZXJhdHRhY2htZW50XG4gKi9cbmV4cG9ydCBjbGFzcyBCYWNrZW5kU2VydmVyQXR0YWNobWVudCBleHRlbmRzIHJvcy5SZXNvdXJjZSBpbXBsZW1lbnRzIElCYWNrZW5kU2VydmVyQXR0YWNobWVudCB7XG4gICAgcHJvdGVjdGVkIHNjb3BlOiByb3MuQ29uc3RydWN0O1xuICAgIHByb3RlY3RlZCBpZDogc3RyaW5nO1xuICAgIHB1YmxpYyByZWFkb25seSBwcm9wczogQmFja2VuZFNlcnZlckF0dGFjaG1lbnRQcm9wcztcbiAgICBwcm90ZWN0ZWQgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6IGJvb2xlYW47XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgU2VydmVyR3JvdXBJZDogVGhlIElEIG9mIHRoZSBzZXJ2ZXIgZ3JvdXAuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJTZXJ2ZXJHcm91cElkOiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBQYXJhbSBzY29wZSAtIHNjb3BlIGluIHdoaWNoIHRoaXMgcmVzb3VyY2UgaXMgZGVmaW5lZFxuICAgICAqIFBhcmFtIGlkICAgIC0gc2NvcGVkIGlkIG9mIHRoZSByZXNvdXJjZVxuICAgICAqIFBhcmFtIHByb3BzIC0gcmVzb3VyY2UgcHJvcGVydGllc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiByb3MuQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogQmFja2VuZFNlcnZlckF0dGFjaG1lbnRQcm9wcywgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6Ym9vbGVhbiA9IHRydWUpIHtcbiAgICAgICAgc3VwZXIoc2NvcGUsIGlkKTtcbiAgICAgICAgdGhpcy5zY29wZSA9IHNjb3BlO1xuICAgICAgICB0aGlzLmlkID0gaWQ7XG4gICAgICAgIHRoaXMucHJvcHMgPSBwcm9wcztcbiAgICAgICAgdGhpcy5lbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCA9IGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50O1xuXG4gICAgICAgIGNvbnN0IHJvc0JhY2tlbmRTZXJ2ZXJBdHRhY2htZW50ID0gbmV3IFJvc0JhY2tlbmRTZXJ2ZXJBdHRhY2htZW50KHRoaXMsIGlkLCAge1xuICAgICAgICAgICAgc2VydmVyR3JvdXBJZDogcHJvcHMuc2VydmVyR3JvdXBJZCxcbiAgICAgICAgICAgIHNlcnZlcnM6IHByb3BzLnNlcnZlcnMsXG4gICAgICAgIH0sIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ICYmIHRoaXMuc3RhY2suZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQpO1xuICAgICAgICB0aGlzLnJlc291cmNlID0gcm9zQmFja2VuZFNlcnZlckF0dGFjaG1lbnQ7XG4gICAgICAgIHRoaXMuYXR0clNlcnZlckdyb3VwSWQgPSByb3NCYWNrZW5kU2VydmVyQXR0YWNobWVudC5hdHRyU2VydmVyR3JvdXBJZDtcbiAgICB9XG59XG4iXX0=