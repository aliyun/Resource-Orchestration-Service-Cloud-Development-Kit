"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BackupPlan = exports.BackupPlanProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const dbs_generated_1 = require("./dbs.generated");
Object.defineProperty(exports, "BackupPlanProperty", { enumerable: true, get: function () { return dbs_generated_1.RosBackupPlan; } });
/**
 * This class encapsulates and extends the ROS resource type `DATASOURCE::DBS::BackupPlan`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosBackupPlan`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/datasource-dbs-backupplan
 */
class BackupPlan extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosBackupPlan = new dbs_generated_1.RosBackupPlan(this, id, {
            backupPlanId: props.backupPlanId,
            refreshOptions: props.refreshOptions === undefined || props.refreshOptions === null ? 'Never' : props.refreshOptions,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosBackupPlan;
        this.attrBackupGatewayId = rosBackupPlan.attrBackupGatewayId;
        this.attrBackupMethod = rosBackupPlan.attrBackupMethod;
        this.attrBackupObjects = rosBackupPlan.attrBackupObjects;
        this.attrBackupPeriod = rosBackupPlan.attrBackupPeriod;
        this.attrBackupPlanId = rosBackupPlan.attrBackupPlanId;
        this.attrBackupPlanName = rosBackupPlan.attrBackupPlanName;
        this.attrBackupRetentionPeriod = rosBackupPlan.attrBackupRetentionPeriod;
        this.attrBackupStartTime = rosBackupPlan.attrBackupStartTime;
        this.attrBackupStorageType = rosBackupPlan.attrBackupStorageType;
        this.attrCreateTime = rosBackupPlan.attrCreateTime;
        this.attrCrossAliyunId = rosBackupPlan.attrCrossAliyunId;
        this.attrCrossRoleName = rosBackupPlan.attrCrossRoleName;
        this.attrDatabaseType = rosBackupPlan.attrDatabaseType;
        this.attrDuplicationArchivePeriod = rosBackupPlan.attrDuplicationArchivePeriod;
        this.attrDuplicationInfrequentAccessPeriod = rosBackupPlan.attrDuplicationInfrequentAccessPeriod;
        this.attrEnableBackupLog = rosBackupPlan.attrEnableBackupLog;
        this.attrInstanceClass = rosBackupPlan.attrInstanceClass;
        this.attrOssBucketName = rosBackupPlan.attrOssBucketName;
        this.attrPaymentType = rosBackupPlan.attrPaymentType;
        this.attrResourceGroupId = rosBackupPlan.attrResourceGroupId;
        this.attrSourceEndpointDatabaseName = rosBackupPlan.attrSourceEndpointDatabaseName;
        this.attrSourceEndpointInstanceId = rosBackupPlan.attrSourceEndpointInstanceId;
        this.attrSourceEndpointInstanceType = rosBackupPlan.attrSourceEndpointInstanceType;
        this.attrSourceEndpointRegion = rosBackupPlan.attrSourceEndpointRegion;
        this.attrSourceEndpointSid = rosBackupPlan.attrSourceEndpointSid;
        this.attrSourceEndpointUserName = rosBackupPlan.attrSourceEndpointUserName;
    }
}
exports.BackupPlan = BackupPlan;
//# sourceMappingURL=data:application/json;base64,