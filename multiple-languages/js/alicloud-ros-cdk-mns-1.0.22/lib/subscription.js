"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Subscription = exports.SubscriptionProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const mns_generated_1 = require("./mns.generated");
Object.defineProperty(exports, "SubscriptionProperty", { enumerable: true, get: function () { return mns_generated_1.RosSubscription; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::MNS::Subscription`, which is used to subscribe an endpoint to an Alibaba Cloud Message Service (MNS) topic. For a subscription to be created, the owner of the endpoint must confirm the subscription.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosSubscription`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-mns-subscription
 */
class Subscription extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosSubscription = new mns_generated_1.RosSubscription(this, id, {
            endpoint: props.endpoint,
            notifyStrategy: props.notifyStrategy === undefined || props.notifyStrategy === null ? 'BACKOFF_RETRY' : props.notifyStrategy,
            notifyContentFormat: props.notifyContentFormat === undefined || props.notifyContentFormat === null ? 'XML' : props.notifyContentFormat,
            filterTag: props.filterTag,
            subscriptionName: props.subscriptionName,
            topicName: props.topicName,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosSubscription;
        this.attrSubscriptionName = rosSubscription.attrSubscriptionName;
        this.attrSubscriptionUrl = rosSubscription.attrSubscriptionUrl;
        this.attrTopicName = rosSubscription.attrTopicName;
    }
}
exports.Subscription = Subscription;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3Vic2NyaXB0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic3Vic2NyaXB0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDhDQUE4QztBQUM5QyxtREFBa0Q7QUFFdEIscUdBRm5CLCtCQUFlLE9BRXdCO0FBK0NoRDs7OztHQUlHO0FBQ0gsTUFBYSxZQUFhLFNBQVEsR0FBRyxDQUFDLFFBQVE7SUFpQjFDOzs7O09BSUc7SUFDSCxZQUFZLEtBQW9CLEVBQUUsRUFBVSxFQUFFLEtBQXdCLEVBQUUsbUNBQTJDLElBQUk7UUFDbkgsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUVqQixNQUFNLGVBQWUsR0FBRyxJQUFJLCtCQUFlLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRztZQUNuRCxRQUFRLEVBQUUsS0FBSyxDQUFDLFFBQVE7WUFDeEIsY0FBYyxFQUFFLEtBQUssQ0FBQyxjQUFjLEtBQUssU0FBUyxJQUFJLEtBQUssQ0FBQyxjQUFjLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxjQUFjO1lBQzVILG1CQUFtQixFQUFFLEtBQUssQ0FBQyxtQkFBbUIsS0FBSyxTQUFTLElBQUksS0FBSyxDQUFDLG1CQUFtQixLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsbUJBQW1CO1lBQ3RJLFNBQVMsRUFBRSxLQUFLLENBQUMsU0FBUztZQUMxQixnQkFBZ0IsRUFBRSxLQUFLLENBQUMsZ0JBQWdCO1lBQ3hDLFNBQVMsRUFBRSxLQUFLLENBQUMsU0FBUztTQUM3QixFQUFFLGdDQUFnQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztRQUNwRixJQUFJLENBQUMsUUFBUSxHQUFHLGVBQWUsQ0FBQztRQUNoQyxJQUFJLENBQUMsb0JBQW9CLEdBQUcsZUFBZSxDQUFDLG9CQUFvQixDQUFDO1FBQ2pFLElBQUksQ0FBQyxtQkFBbUIsR0FBRyxlQUFlLENBQUMsbUJBQW1CLENBQUM7UUFDL0QsSUFBSSxDQUFDLGFBQWEsR0FBRyxlQUFlLENBQUMsYUFBYSxDQUFDO0lBQ3ZELENBQUM7Q0FDSjtBQXRDRCxvQ0FzQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyByb3MgZnJvbSAnQGFsaWNsb3VkL3Jvcy1jZGstY29yZSc7XG5pbXBvcnQgeyBSb3NTdWJzY3JpcHRpb24gfSBmcm9tICcuL21ucy5nZW5lcmF0ZWQnO1xuLy8gR2VuZXJhdGVkIGZyb20gdGhlIEFsaUNsb3VkIFJPUyBSZXNvdXJjZSBTcGVjaWZpY2F0aW9uXG5leHBvcnQgeyBSb3NTdWJzY3JpcHRpb24gYXMgU3Vic2NyaXB0aW9uUHJvcGVydHkgfTtcblxuLyoqXG4gKiBQcm9wZXJ0aWVzIGZvciBkZWZpbmluZyBhIGBTdWJzY3JpcHRpb25gLlxuICogU2VlIGh0dHBzOi8vd3d3LmFsaWJhYmFjbG91ZC5jb20vaGVscC9yb3MvZGV2ZWxvcGVyLXJlZmVyZW5jZS9hbGl5dW4tbW5zLXN1YnNjcmlwdGlvblxuICovXG5leHBvcnQgaW50ZXJmYWNlIFN1YnNjcmlwdGlvblByb3BzIHtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGVuZHBvaW50OiBUZXJtaW5hbCBhZGRyZXNzIG9mIHRoZSBtZXNzYWdlIHJlY2lwaWVudCBmb3IgdGhlIGNyZWF0ZWQgc3Vic2NyaXB0aW9uLlxuICAgICAqIEN1cnJlbnRseSwgZm91ciB0eXBlcyBvZiBlbmRwb2ludHMgYXJlIHN1cHBvcnRlZDogXG4gICAgICogMS4gSHR0cEVuZHBvaW50LCB3aGljaCBtdXN0IGJlIHByZWZpeGVkIHdpdGggXCJodHRwOlxcL1xcL1wiOyBcbiAgICAgKiAyLiBRdWV1ZUVuZHBvaW50LCBpbiB0aGUgZm9ybWF0IG9mIGFjczptbnM6e1JFR0lPTn06e0FjY291bnRJRH06cXVldWVzXFwve1F1ZXVlTmFtZX07IFxuICAgICAqIDMuIE1haWxFbmRwb2ludCwgaW4gdGhlIGZvcm1hdCBvZiBtYWlsOmRpcmVjdG1haWw6e01haWxBZGRyZXNzfTsgXG4gICAgICogNC4gU21zRW5kcG9pbnQsIGluIHRoZSBmb3JtYXQgb2Ygc21zOmRpcmVjdHNtczphbm9ueW1vdXMgb3Igc21zOmRpcmVjdHNtczp7UGhvbmV9LlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGVuZHBvaW50OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBzdWJzY3JpcHRpb25OYW1lOiBTdWJzY3JpcHRpb24gbmFtZVxuICAgICAqL1xuICAgIHJlYWRvbmx5IHN1YnNjcmlwdGlvbk5hbWU6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHRvcGljTmFtZTogVG9waWMgbmFtZVxuICAgICAqL1xuICAgIHJlYWRvbmx5IHRvcGljTmFtZTogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgZmlsdGVyVGFnOiBNZXNzYWdlIGZpbHRlciB0YWcgaW4gdGhlIGNyZWF0ZWQgc3Vic2NyaXB0aW9uIChPbmx5IG1lc3NhZ2VzIHdpdGggY29uc2lzdGVudCB0YWdzIGFyZSBwdXNoZWQuKVxuICAgICAqIFRoZSB2YWx1ZSBpcyBhIHN0cmluZyBvZiBubyBtb3JlIHRoYW4gMTYgY2hhcmFjdGVycy4gVGhlIGRlZmF1bHQgdmFsdWUgaXMgbm8gbWVzc2FnZSBmaWx0ZXIuXG4gICAgICovXG4gICAgcmVhZG9ubHkgZmlsdGVyVGFnPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgbm90aWZ5Q29udGVudEZvcm1hdDogRm9ybWF0IG9mIHRoZSBtZXNzYWdlIGNvbnRlbnQgcHVzaGVkIHRvIHRoZSBlbmRwb2ludC5cbiAgICAgKiBYTUwsIEpTT04sIG9yIFNJTVBMSUZJRUQ7IGRlZmF1bHQgdmFsdWU6IFhNTC4gRm9yIGRldGFpbHMgYWJvdXQgbWVzc2FnZSBmb3JtYXRzLCByZWZlciB0byBCYXNpYyBDb25jZXB0c1xcL05vdGlmeUNvbnRlbnRGb3JtYXQuXG4gICAgICovXG4gICAgcmVhZG9ubHkgbm90aWZ5Q29udGVudEZvcm1hdD86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IG5vdGlmeVN0cmF0ZWd5OiBSZXRyeSBwb2xpY3kgdGhhdCB3aWxsIGJlIGFwcGxpZWQgd2hlbiBhbiBlcnJvciBvY2N1cnMgZHVyaW5nIG1lc3NhZ2UgcHVzaCB0byB0aGUgZW5kcG9pbnQuXG4gICAgICogQkFDS09GRl9SRVRSWSBvciBFWFBPTkVOVElBTF9ERUNBWV9SRVRSWTsgZGVmYXVsdCB2YWx1ZTogQkFDS09GRl9SRVRSWS4gRm9yIGRldGFpbHMgYWJvdXQgcmV0cnkgcG9saWNpZXMsIHJlZmVyIHRvIEJhc2ljIENvbmNlcHRzXFwvTm90aWZ5U3RyYXRlZ3kuXG4gICAgICovXG4gICAgcmVhZG9ubHkgbm90aWZ5U3RyYXRlZ3k/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG59XG5cbi8qKlxuICogVGhpcyBjbGFzcyBlbmNhcHN1bGF0ZXMgYW5kIGV4dGVuZHMgdGhlIFJPUyByZXNvdXJjZSB0eXBlIGBBTElZVU46Ok1OUzo6U3Vic2NyaXB0aW9uYCwgd2hpY2ggaXMgdXNlZCB0byBzdWJzY3JpYmUgYW4gZW5kcG9pbnQgdG8gYW4gQWxpYmFiYSBDbG91ZCBNZXNzYWdlIFNlcnZpY2UgKE1OUykgdG9waWMuIEZvciBhIHN1YnNjcmlwdGlvbiB0byBiZSBjcmVhdGVkLCB0aGUgb3duZXIgb2YgdGhlIGVuZHBvaW50IG11c3QgY29uZmlybSB0aGUgc3Vic2NyaXB0aW9uLlxuICogQE5vdGUgVGhpcyBjbGFzcyBtYXkgaGF2ZSBzb21lIG5ldyBmdW5jdGlvbnMgdG8gZmFjaWxpdGF0ZSBkZXZlbG9wbWVudCwgc28gaXQgaXMgcmVjb21tZW5kZWQgdG8gdXNlIHRoaXMgY2xhc3MgaW5zdGVhZCBvZiBgUm9zU3Vic2NyaXB0aW9uYGZvciBhIG1vcmUgY29udmVuaWVudCBkZXZlbG9wbWVudCBleHBlcmllbmNlLlxuICogU2VlIGh0dHBzOi8vd3d3LmFsaWJhYmFjbG91ZC5jb20vaGVscC9yb3MvZGV2ZWxvcGVyLXJlZmVyZW5jZS9hbGl5dW4tbW5zLXN1YnNjcmlwdGlvblxuICovXG5leHBvcnQgY2xhc3MgU3Vic2NyaXB0aW9uIGV4dGVuZHMgcm9zLlJlc291cmNlIHtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBTdWJzY3JpcHRpb25OYW1lOiBTdWJzY3JpcHRpb24gbmFtZVxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyU3Vic2NyaXB0aW9uTmFtZTogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIFN1YnNjcmlwdGlvblVybDogVVJMIG9mIGNyZWF0ZWQgc3Vic2NyaXB0aW9uXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJTdWJzY3JpcHRpb25Vcmw6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBUb3BpY05hbWU6IFRvcGljIG5hbWVcbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0clRvcGljTmFtZTogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUGFyYW0gc2NvcGUgLSBzY29wZSBpbiB3aGljaCB0aGlzIHJlc291cmNlIGlzIGRlZmluZWRcbiAgICAgKiBQYXJhbSBpZCAgICAtIHNjb3BlZCBpZCBvZiB0aGUgcmVzb3VyY2VcbiAgICAgKiBQYXJhbSBwcm9wcyAtIHJlc291cmNlIHByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihzY29wZTogcm9zLkNvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IFN1YnNjcmlwdGlvblByb3BzLCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDpib29sZWFuID0gdHJ1ZSkge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQpO1xuXG4gICAgICAgIGNvbnN0IHJvc1N1YnNjcmlwdGlvbiA9IG5ldyBSb3NTdWJzY3JpcHRpb24odGhpcywgaWQsICB7XG4gICAgICAgICAgICBlbmRwb2ludDogcHJvcHMuZW5kcG9pbnQsXG4gICAgICAgICAgICBub3RpZnlTdHJhdGVneTogcHJvcHMubm90aWZ5U3RyYXRlZ3kgPT09IHVuZGVmaW5lZCB8fCBwcm9wcy5ub3RpZnlTdHJhdGVneSA9PT0gbnVsbCA/ICdCQUNLT0ZGX1JFVFJZJyA6IHByb3BzLm5vdGlmeVN0cmF0ZWd5LFxuICAgICAgICAgICAgbm90aWZ5Q29udGVudEZvcm1hdDogcHJvcHMubm90aWZ5Q29udGVudEZvcm1hdCA9PT0gdW5kZWZpbmVkIHx8IHByb3BzLm5vdGlmeUNvbnRlbnRGb3JtYXQgPT09IG51bGwgPyAnWE1MJyA6IHByb3BzLm5vdGlmeUNvbnRlbnRGb3JtYXQsXG4gICAgICAgICAgICBmaWx0ZXJUYWc6IHByb3BzLmZpbHRlclRhZyxcbiAgICAgICAgICAgIHN1YnNjcmlwdGlvbk5hbWU6IHByb3BzLnN1YnNjcmlwdGlvbk5hbWUsXG4gICAgICAgICAgICB0b3BpY05hbWU6IHByb3BzLnRvcGljTmFtZSxcbiAgICAgICAgfSwgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgJiYgdGhpcy5zdGFjay5lbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCk7XG4gICAgICAgIHRoaXMucmVzb3VyY2UgPSByb3NTdWJzY3JpcHRpb247XG4gICAgICAgIHRoaXMuYXR0clN1YnNjcmlwdGlvbk5hbWUgPSByb3NTdWJzY3JpcHRpb24uYXR0clN1YnNjcmlwdGlvbk5hbWU7XG4gICAgICAgIHRoaXMuYXR0clN1YnNjcmlwdGlvblVybCA9IHJvc1N1YnNjcmlwdGlvbi5hdHRyU3Vic2NyaXB0aW9uVXJsO1xuICAgICAgICB0aGlzLmF0dHJUb3BpY05hbWUgPSByb3NTdWJzY3JpcHRpb24uYXR0clRvcGljTmFtZTtcbiAgICB9XG59XG4iXX0=