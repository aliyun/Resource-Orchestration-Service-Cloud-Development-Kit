"use strict";
// Generated from the AliCloud ROS Resource Specification
Object.defineProperty(exports, "__esModule", { value: true });
exports.RosSecret = exports.RosKey = exports.RosInstance = exports.RosAlias = void 0;
const ros = require("@alicloud/ros-cdk-core");
/**
 * Determine whether the given properties match those of a `RosAliasProps`
 *
 * @param properties - the TypeScript properties of a `RosAliasProps`
 *
 * @returns the result of the validation.
 */
function RosAliasPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('aliasName', ros.requiredValidator)(properties.aliasName));
    if (properties.aliasName && (Array.isArray(properties.aliasName) || (typeof properties.aliasName) === 'string')) {
        errors.collect(ros.propertyValidator('aliasName', ros.validateLength)({
            data: properties.aliasName.length,
            min: 1,
            max: 255,
        }));
    }
    errors.collect(ros.propertyValidator('aliasName', ros.validateString)(properties.aliasName));
    errors.collect(ros.propertyValidator('keyId', ros.requiredValidator)(properties.keyId));
    errors.collect(ros.propertyValidator('keyId', ros.validateString)(properties.keyId));
    return errors.wrap('supplied properties not correct for "RosAliasProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::KMS::Alias` resource
 *
 * @param properties - the TypeScript properties of a `RosAliasProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::KMS::Alias` resource.
 */
// @ts-ignore TS6133
function rosAliasPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosAliasPropsValidator(properties).assertSuccess();
    }
    return {
        AliasName: ros.stringToRosTemplate(properties.aliasName),
        KeyId: ros.stringToRosTemplate(properties.keyId),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::KMS::Alias`, which is used to create an alias for a Customer Master Key (CMK).
 * @Note This class does not contain additional functions, so it is recommended to use the `Alias` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-kms-alias
 */
class RosAlias extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosAlias.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.aliasName = props.aliasName;
        this.keyId = props.keyId;
    }
    get rosProperties() {
        return {
            aliasName: this.aliasName,
            keyId: this.keyId,
        };
    }
    renderProperties(props) {
        return rosAliasPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosAlias = RosAlias;
/**
 * The resource type name for this resource class.
 */
RosAlias.ROS_RESOURCE_TYPE_NAME = "ALIYUN::KMS::Alias";
/**
 * Determine whether the given properties match those of a `RosInstanceProps`
 *
 * @param properties - the TypeScript properties of a `RosInstanceProps`
 *
 * @returns the result of the validation.
 */
function RosInstancePropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    if (properties.vpcNum && (typeof properties.vpcNum) !== 'object') {
        errors.collect(ros.propertyValidator('vpcNum', ros.validateRange)({
            data: properties.vpcNum,
            min: 1,
            max: 1000,
        }));
    }
    errors.collect(ros.propertyValidator('vpcNum', ros.validateNumber)(properties.vpcNum));
    errors.collect(ros.propertyValidator('log', ros.validateBoolean)(properties.log));
    if (properties.keyNum && (typeof properties.keyNum) !== 'object') {
        errors.collect(ros.propertyValidator('keyNum', ros.validateRange)({
            data: properties.keyNum,
            min: 100,
            max: 100000,
        }));
    }
    errors.collect(ros.propertyValidator('keyNum', ros.validateNumber)(properties.keyNum));
    if (properties.instanceChargeType && (typeof properties.instanceChargeType) !== 'object') {
        errors.collect(ros.propertyValidator('instanceChargeType', ros.validateAllowedValues)({
            data: properties.instanceChargeType,
            allowedValues: ["PayAsYouGo", "PostPaid", "PayOnDemand", "Postpaid", "PostPay", "Postpay", "POSTPAY", "POST", "Subscription", "PrePaid", "Prepaid", "PrePay", "Prepay", "PREPAY", "PRE"],
        }));
    }
    errors.collect(ros.propertyValidator('instanceChargeType', ros.validateString)(properties.instanceChargeType));
    errors.collect(ros.propertyValidator('connection', RosInstance_ConnectionPropertyValidator)(properties.connection));
    if (properties.renewPeriod && (typeof properties.renewPeriod) !== 'object') {
        errors.collect(ros.propertyValidator('renewPeriod', ros.validateRange)({
            data: properties.renewPeriod,
            min: 1,
            max: 36,
        }));
    }
    errors.collect(ros.propertyValidator('renewPeriod', ros.validateNumber)(properties.renewPeriod));
    if (properties.period && (typeof properties.period) !== 'object') {
        errors.collect(ros.propertyValidator('period', ros.validateAllowedValues)({
            data: properties.period,
            allowedValues: [1, 2, 3, 6, 12, 24, 36],
        }));
    }
    errors.collect(ros.propertyValidator('period', ros.validateNumber)(properties.period));
    if (properties.secretNum && (typeof properties.secretNum) !== 'object') {
        errors.collect(ros.propertyValidator('secretNum', ros.validateRange)({
            data: properties.secretNum,
            min: 0,
            max: 100000,
        }));
    }
    errors.collect(ros.propertyValidator('secretNum', ros.validateNumber)(properties.secretNum));
    errors.collect(ros.propertyValidator('productVersion', ros.requiredValidator)(properties.productVersion));
    if (properties.productVersion && (typeof properties.productVersion) !== 'object') {
        errors.collect(ros.propertyValidator('productVersion', ros.validateAllowedValues)({
            data: properties.productVersion,
            allowedValues: ["software", "software-small", "hardware", "hardware-small"],
        }));
    }
    errors.collect(ros.propertyValidator('productVersion', ros.validateString)(properties.productVersion));
    if (properties.logStorage && (typeof properties.logStorage) !== 'object') {
        errors.collect(ros.propertyValidator('logStorage', ros.validateRange)({
            data: properties.logStorage,
            min: 1000,
            max: 500000,
        }));
    }
    errors.collect(ros.propertyValidator('logStorage', ros.validateNumber)(properties.logStorage));
    if (properties.renewStatus && (typeof properties.renewStatus) !== 'object') {
        errors.collect(ros.propertyValidator('renewStatus', ros.validateAllowedValues)({
            data: properties.renewStatus,
            allowedValues: ["AutoRenewal", "ManualRenewal"],
        }));
    }
    errors.collect(ros.propertyValidator('renewStatus', ros.validateString)(properties.renewStatus));
    if (properties.spec && (typeof properties.spec) !== 'object') {
        errors.collect(ros.propertyValidator('spec', ros.validateAllowedValues)({
            data: properties.spec,
            allowedValues: [200, 1000, 2000, 4000],
        }));
    }
    errors.collect(ros.propertyValidator('spec', ros.validateNumber)(properties.spec));
    if (properties.periodUnit && (typeof properties.periodUnit) !== 'object') {
        errors.collect(ros.propertyValidator('periodUnit', ros.validateAllowedValues)({
            data: properties.periodUnit,
            allowedValues: ["Month", "Year"],
        }));
    }
    errors.collect(ros.propertyValidator('periodUnit', ros.validateString)(properties.periodUnit));
    return errors.wrap('supplied properties not correct for "RosInstanceProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::KMS::Instance` resource
 *
 * @param properties - the TypeScript properties of a `RosInstanceProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::KMS::Instance` resource.
 */
// @ts-ignore TS6133
function rosInstancePropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosInstancePropsValidator(properties).assertSuccess();
    }
    return {
        ProductVersion: ros.stringToRosTemplate(properties.productVersion),
        Connection: rosInstanceConnectionPropertyToRosTemplate(properties.connection),
        InstanceChargeType: ros.stringToRosTemplate(properties.instanceChargeType),
        KeyNum: ros.numberToRosTemplate(properties.keyNum),
        Log: ros.booleanToRosTemplate(properties.log),
        LogStorage: ros.numberToRosTemplate(properties.logStorage),
        Period: ros.numberToRosTemplate(properties.period),
        PeriodUnit: ros.stringToRosTemplate(properties.periodUnit),
        RenewPeriod: ros.numberToRosTemplate(properties.renewPeriod),
        RenewStatus: ros.stringToRosTemplate(properties.renewStatus),
        SecretNum: ros.numberToRosTemplate(properties.secretNum),
        Spec: ros.numberToRosTemplate(properties.spec),
        VpcNum: ros.numberToRosTemplate(properties.vpcNum),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::KMS::Instance`.
 * @Note This class does not contain additional functions, so it is recommended to use the `Instance` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-kms-instance
 */
class RosInstance extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosInstance.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrInstanceId = this.getAtt('InstanceId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.productVersion = props.productVersion;
        this.connection = props.connection;
        this.instanceChargeType = props.instanceChargeType;
        this.keyNum = props.keyNum;
        this.log = props.log;
        this.logStorage = props.logStorage;
        this.period = props.period;
        this.periodUnit = props.periodUnit;
        this.renewPeriod = props.renewPeriod;
        this.renewStatus = props.renewStatus;
        this.secretNum = props.secretNum;
        this.spec = props.spec;
        this.vpcNum = props.vpcNum;
    }
    get rosProperties() {
        return {
            productVersion: this.productVersion,
            connection: this.connection,
            instanceChargeType: this.instanceChargeType,
            keyNum: this.keyNum,
            log: this.log,
            logStorage: this.logStorage,
            period: this.period,
            periodUnit: this.periodUnit,
            renewPeriod: this.renewPeriod,
            renewStatus: this.renewStatus,
            secretNum: this.secretNum,
            spec: this.spec,
            vpcNum: this.vpcNum,
        };
    }
    renderProperties(props) {
        return rosInstancePropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosInstance = RosInstance;
/**
 * The resource type name for this resource class.
 */
RosInstance.ROS_RESOURCE_TYPE_NAME = "ALIYUN::KMS::Instance";
/**
 * Determine whether the given properties match those of a `ConnectionProperty`
 *
 * @param properties - the TypeScript properties of a `ConnectionProperty`
 *
 * @returns the result of the validation.
 */
function RosInstance_ConnectionPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('vpcId', ros.requiredValidator)(properties.vpcId));
    errors.collect(ros.propertyValidator('vpcId', ros.validateString)(properties.vpcId));
    errors.collect(ros.propertyValidator('vSwitchIds', ros.requiredValidator)(properties.vSwitchIds));
    if (properties.vSwitchIds && (Array.isArray(properties.vSwitchIds) || (typeof properties.vSwitchIds) === 'string')) {
        errors.collect(ros.propertyValidator('vSwitchIds', ros.validateLength)({
            data: properties.vSwitchIds.length,
            min: 1,
            max: 1,
        }));
    }
    errors.collect(ros.propertyValidator('vSwitchIds', ros.listValidator(ros.validateString))(properties.vSwitchIds));
    errors.collect(ros.propertyValidator('zoneIds', ros.requiredValidator)(properties.zoneIds));
    if (properties.zoneIds && (Array.isArray(properties.zoneIds) || (typeof properties.zoneIds) === 'string')) {
        errors.collect(ros.propertyValidator('zoneIds', ros.validateLength)({
            data: properties.zoneIds.length,
            min: 2,
            max: 2,
        }));
    }
    errors.collect(ros.propertyValidator('zoneIds', ros.listValidator(ros.validateString))(properties.zoneIds));
    return errors.wrap('supplied properties not correct for "ConnectionProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::KMS::Instance.Connection` resource
 *
 * @param properties - the TypeScript properties of a `ConnectionProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::KMS::Instance.Connection` resource.
 */
// @ts-ignore TS6133
function rosInstanceConnectionPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosInstance_ConnectionPropertyValidator(properties).assertSuccess();
    return {
        VpcId: ros.stringToRosTemplate(properties.vpcId),
        VSwitchIds: ros.listMapper(ros.stringToRosTemplate)(properties.vSwitchIds),
        ZoneIds: ros.listMapper(ros.stringToRosTemplate)(properties.zoneIds),
    };
}
/**
 * Determine whether the given properties match those of a `RosKeyProps`
 *
 * @param properties - the TypeScript properties of a `RosKeyProps`
 *
 * @returns the result of the validation.
 */
function RosKeyPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('policy', ros.hashValidator(ros.validateAny))(properties.policy));
    errors.collect(ros.propertyValidator('protectionLevel', ros.validateString)(properties.protectionLevel));
    if (properties.description && (Array.isArray(properties.description) || (typeof properties.description) === 'string')) {
        errors.collect(ros.propertyValidator('description', ros.validateLength)({
            data: properties.description.length,
            min: 0,
            max: 8192,
        }));
    }
    errors.collect(ros.propertyValidator('description', ros.validateString)(properties.description));
    errors.collect(ros.propertyValidator('rotationInterval', ros.validateString)(properties.rotationInterval));
    errors.collect(ros.propertyValidator('enableAutomaticRotation', ros.validateBoolean)(properties.enableAutomaticRotation));
    if (properties.pendingWindowInDays && (typeof properties.pendingWindowInDays) !== 'object') {
        errors.collect(ros.propertyValidator('pendingWindowInDays', ros.validateRange)({
            data: properties.pendingWindowInDays,
            min: 7,
            max: 366,
        }));
    }
    errors.collect(ros.propertyValidator('pendingWindowInDays', ros.validateNumber)(properties.pendingWindowInDays));
    errors.collect(ros.propertyValidator('keySpec', ros.validateString)(properties.keySpec));
    errors.collect(ros.propertyValidator('enable', ros.validateBoolean)(properties.enable));
    errors.collect(ros.propertyValidator('keyUsage', ros.validateString)(properties.keyUsage));
    errors.collect(ros.propertyValidator('dkmsInstanceId', ros.validateString)(properties.dkmsInstanceId));
    return errors.wrap('supplied properties not correct for "RosKeyProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::KMS::Key` resource
 *
 * @param properties - the TypeScript properties of a `RosKeyProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::KMS::Key` resource.
 */
// @ts-ignore TS6133
function rosKeyPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosKeyPropsValidator(properties).assertSuccess();
    }
    return {
        Description: ros.stringToRosTemplate(properties.description),
        DKMSInstanceId: ros.stringToRosTemplate(properties.dkmsInstanceId),
        Enable: ros.booleanToRosTemplate(properties.enable),
        EnableAutomaticRotation: ros.booleanToRosTemplate(properties.enableAutomaticRotation),
        KeySpec: ros.stringToRosTemplate(properties.keySpec),
        KeyUsage: ros.stringToRosTemplate(properties.keyUsage),
        PendingWindowInDays: ros.numberToRosTemplate(properties.pendingWindowInDays),
        Policy: ros.hashMapper(ros.objectToRosTemplate)(properties.policy),
        ProtectionLevel: ros.stringToRosTemplate(properties.protectionLevel),
        RotationInterval: ros.stringToRosTemplate(properties.rotationInterval),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::KMS::Key`, which is used to create a customer master key (CMK).
 * @Note This class does not contain additional functions, so it is recommended to use the `Key` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-kms-key
 */
class RosKey extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosKey.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrKeyId = this.getAtt('KeyId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.description = props.description;
        this.dkmsInstanceId = props.dkmsInstanceId;
        this.enable = props.enable;
        this.enableAutomaticRotation = props.enableAutomaticRotation;
        this.keySpec = props.keySpec;
        this.keyUsage = props.keyUsage;
        this.pendingWindowInDays = props.pendingWindowInDays;
        this.policy = props.policy;
        this.protectionLevel = props.protectionLevel;
        this.rotationInterval = props.rotationInterval;
    }
    get rosProperties() {
        return {
            description: this.description,
            dkmsInstanceId: this.dkmsInstanceId,
            enable: this.enable,
            enableAutomaticRotation: this.enableAutomaticRotation,
            keySpec: this.keySpec,
            keyUsage: this.keyUsage,
            pendingWindowInDays: this.pendingWindowInDays,
            policy: this.policy,
            protectionLevel: this.protectionLevel,
            rotationInterval: this.rotationInterval,
        };
    }
    renderProperties(props) {
        return rosKeyPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosKey = RosKey;
/**
 * The resource type name for this resource class.
 */
RosKey.ROS_RESOURCE_TYPE_NAME = "ALIYUN::KMS::Key";
/**
 * Determine whether the given properties match those of a `RosSecretProps`
 *
 * @param properties - the TypeScript properties of a `RosSecretProps`
 *
 * @returns the result of the validation.
 */
function RosSecretPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('versionId', ros.requiredValidator)(properties.versionId));
    errors.collect(ros.propertyValidator('versionId', ros.validateString)(properties.versionId));
    errors.collect(ros.propertyValidator('description', ros.validateString)(properties.description));
    errors.collect(ros.propertyValidator('rotationInterval', ros.validateString)(properties.rotationInterval));
    errors.collect(ros.propertyValidator('secretType', ros.validateString)(properties.secretType));
    if (properties.secretDataType && (typeof properties.secretDataType) !== 'object') {
        errors.collect(ros.propertyValidator('secretDataType', ros.validateAllowedValues)({
            data: properties.secretDataType,
            allowedValues: ["text", "binary"],
        }));
    }
    errors.collect(ros.propertyValidator('secretDataType', ros.validateString)(properties.secretDataType));
    errors.collect(ros.propertyValidator('dkmsInstanceId', ros.validateString)(properties.dkmsInstanceId));
    if (properties.versionStages && (Array.isArray(properties.versionStages) || (typeof properties.versionStages) === 'string')) {
        errors.collect(ros.propertyValidator('versionStages', ros.validateLength)({
            data: properties.versionStages.length,
            min: 1,
            max: 7,
        }));
    }
    errors.collect(ros.propertyValidator('versionStages', ros.listValidator(ros.validateString))(properties.versionStages));
    errors.collect(ros.propertyValidator('secretName', ros.requiredValidator)(properties.secretName));
    errors.collect(ros.propertyValidator('secretName', ros.validateString)(properties.secretName));
    errors.collect(ros.propertyValidator('enableAutomaticRotation', ros.validateBoolean)(properties.enableAutomaticRotation));
    errors.collect(ros.propertyValidator('extendedConfig', ros.hashValidator(ros.validateAny))(properties.extendedConfig));
    errors.collect(ros.propertyValidator('secretData', ros.requiredValidator)(properties.secretData));
    errors.collect(ros.propertyValidator('secretData', ros.validateString)(properties.secretData));
    errors.collect(ros.propertyValidator('encryptionKeyId', ros.validateString)(properties.encryptionKeyId));
    errors.collect(ros.propertyValidator('recoveryWindowInDays', ros.validateNumber)(properties.recoveryWindowInDays));
    errors.collect(ros.propertyValidator('forceDeleteWithoutRecovery', ros.validateBoolean)(properties.forceDeleteWithoutRecovery));
    return errors.wrap('supplied properties not correct for "RosSecretProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::KMS::Secret` resource
 *
 * @param properties - the TypeScript properties of a `RosSecretProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::KMS::Secret` resource.
 */
// @ts-ignore TS6133
function rosSecretPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosSecretPropsValidator(properties).assertSuccess();
    }
    return {
        SecretData: ros.stringToRosTemplate(properties.secretData),
        SecretName: ros.stringToRosTemplate(properties.secretName),
        VersionId: ros.stringToRosTemplate(properties.versionId),
        Description: ros.stringToRosTemplate(properties.description),
        DKMSInstanceId: ros.stringToRosTemplate(properties.dkmsInstanceId),
        EnableAutomaticRotation: ros.booleanToRosTemplate(properties.enableAutomaticRotation),
        EncryptionKeyId: ros.stringToRosTemplate(properties.encryptionKeyId),
        ExtendedConfig: ros.hashMapper(ros.objectToRosTemplate)(properties.extendedConfig),
        ForceDeleteWithoutRecovery: ros.booleanToRosTemplate(properties.forceDeleteWithoutRecovery),
        RecoveryWindowInDays: ros.numberToRosTemplate(properties.recoveryWindowInDays),
        RotationInterval: ros.stringToRosTemplate(properties.rotationInterval),
        SecretDataType: ros.stringToRosTemplate(properties.secretDataType),
        SecretType: ros.stringToRosTemplate(properties.secretType),
        VersionStages: ros.listMapper(ros.stringToRosTemplate)(properties.versionStages),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::KMS::Secret`, which is used to create a secret and store the initial version of the secret.
 * @Note This class does not contain additional functions, so it is recommended to use the `Secret` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-kms-secret
 */
class RosSecret extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosSecret.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrArn = this.getAtt('Arn');
        this.attrSecretName = this.getAtt('SecretName');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.secretData = props.secretData;
        this.secretName = props.secretName;
        this.versionId = props.versionId;
        this.description = props.description;
        this.dkmsInstanceId = props.dkmsInstanceId;
        this.enableAutomaticRotation = props.enableAutomaticRotation;
        this.encryptionKeyId = props.encryptionKeyId;
        this.extendedConfig = props.extendedConfig;
        this.forceDeleteWithoutRecovery = props.forceDeleteWithoutRecovery;
        this.recoveryWindowInDays = props.recoveryWindowInDays;
        this.rotationInterval = props.rotationInterval;
        this.secretDataType = props.secretDataType;
        this.secretType = props.secretType;
        this.versionStages = props.versionStages;
    }
    get rosProperties() {
        return {
            secretData: this.secretData,
            secretName: this.secretName,
            versionId: this.versionId,
            description: this.description,
            dkmsInstanceId: this.dkmsInstanceId,
            enableAutomaticRotation: this.enableAutomaticRotation,
            encryptionKeyId: this.encryptionKeyId,
            extendedConfig: this.extendedConfig,
            forceDeleteWithoutRecovery: this.forceDeleteWithoutRecovery,
            recoveryWindowInDays: this.recoveryWindowInDays,
            rotationInterval: this.rotationInterval,
            secretDataType: this.secretDataType,
            secretType: this.secretType,
            versionStages: this.versionStages,
        };
    }
    renderProperties(props) {
        return rosSecretPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosSecret = RosSecret;
/**
 * The resource type name for this resource class.
 */
RosSecret.ROS_RESOURCE_TYPE_NAME = "ALIYUN::KMS::Secret";
//# sourceMappingURL=data:application/json;base64,