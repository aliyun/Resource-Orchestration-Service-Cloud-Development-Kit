"use strict";
// Generated from the AliCloud ROS Resource Specification
Object.defineProperty(exports, "__esModule", { value: true });
exports.RosUser = void 0;
const ros = require("@alicloud/ros-cdk-core");
/**
 * Determine whether the given properties match those of a `RosUserProps`
 *
 * @param properties - the TypeScript properties of a `RosUserProps`
 *
 * @returns the result of the validation.
 */
function RosUserPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('orgId', ros.validateString)(properties.orgId));
    if (properties.ownerType && (typeof properties.ownerType) !== 'object') {
        errors.collect(ros.propertyValidator('ownerType', ros.validateAllowedValues)({
            data: properties.ownerType,
            allowedValues: ["Normal", "CreateFromManager"],
        }));
    }
    errors.collect(ros.propertyValidator('ownerType', ros.validateString)(properties.ownerType));
    errors.collect(ros.propertyValidator('endUserId', ros.requiredValidator)(properties.endUserId));
    errors.collect(ros.propertyValidator('endUserId', ros.validateString)(properties.endUserId));
    errors.collect(ros.propertyValidator('email', ros.validateString)(properties.email));
    errors.collect(ros.propertyValidator('phone', ros.validateString)(properties.phone));
    errors.collect(ros.propertyValidator('remark', ros.validateString)(properties.remark));
    errors.collect(ros.propertyValidator('password', ros.validateString)(properties.password));
    return errors.wrap('supplied properties not correct for "RosUserProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::EdsUser::User` resource
 *
 * @param properties - the TypeScript properties of a `RosUserProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::EdsUser::User` resource.
 */
// @ts-ignore TS6133
function rosUserPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosUserPropsValidator(properties).assertSuccess();
    }
    return {
        'EndUserId': ros.stringToRosTemplate(properties.endUserId),
        'Email': ros.stringToRosTemplate(properties.email),
        'OrgId': ros.stringToRosTemplate(properties.orgId),
        'OwnerType': ros.stringToRosTemplate(properties.ownerType),
        'Password': ros.stringToRosTemplate(properties.password),
        'Phone': ros.stringToRosTemplate(properties.phone),
        'Remark': ros.stringToRosTemplate(properties.remark),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::EdsUser::User`, which is used to create a convenience user.
 * @Note This class does not contain additional functions, so it is recommended to use the `User` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-edsuser-user
 */
class RosUser extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosUser.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrEndUserId = this.getAtt('EndUserId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.endUserId = props.endUserId;
        this.email = props.email;
        this.orgId = props.orgId;
        this.ownerType = props.ownerType;
        this.password = props.password;
        this.phone = props.phone;
        this.remark = props.remark;
    }
    get rosProperties() {
        return {
            endUserId: this.endUserId,
            email: this.email,
            orgId: this.orgId,
            ownerType: this.ownerType,
            password: this.password,
            phone: this.phone,
            remark: this.remark,
        };
    }
    renderProperties(props) {
        return rosUserPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosUser = RosUser;
/**
 * The resource type name for this resource class.
 */
RosUser.ROS_RESOURCE_TYPE_NAME = "ALIYUN::EdsUser::User";
//# sourceMappingURL=data:application/json;base64,