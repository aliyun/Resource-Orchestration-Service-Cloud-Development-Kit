"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Service = exports.ServiceProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const apig_generated_1 = require("./apig.generated");
Object.defineProperty(exports, "ServiceProperty", { enumerable: true, get: function () { return apig_generated_1.RosService; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::APIG::Service`, which is used to create a service.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosService`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-apig-service
 */
class Service extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosService = new apig_generated_1.RosService(this, id, {
            groupName: props.groupName,
            addresses: props.addresses,
            resourceGroupId: props.resourceGroupId,
            serviceName: props.serviceName,
            sourceType: props.sourceType,
            qualifier: props.qualifier,
            gatewayId: props.gatewayId,
            namespace: props.namespace,
            aiServiceConfig: props.aiServiceConfig,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosService;
        this.attrAddresses = rosService.attrAddresses;
        this.attrAiServiceConfig = rosService.attrAiServiceConfig;
        this.attrGatewayId = rosService.attrGatewayId;
        this.attrGroupName = rosService.attrGroupName;
        this.attrNamespace = rosService.attrNamespace;
        this.attrQualifier = rosService.attrQualifier;
        this.attrResourceGroupId = rosService.attrResourceGroupId;
        this.attrServiceId = rosService.attrServiceId;
        this.attrServiceName = rosService.attrServiceName;
    }
}
exports.Service = Service;
//# sourceMappingURL=data:application/json;base64,