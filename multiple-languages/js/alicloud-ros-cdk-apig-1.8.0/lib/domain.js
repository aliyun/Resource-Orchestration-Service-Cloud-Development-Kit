"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Domain = exports.DomainProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const apig_generated_1 = require("./apig.generated");
Object.defineProperty(exports, "DomainProperty", { enumerable: true, get: function () { return apig_generated_1.RosDomain; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::APIG::Domain`, which is used to create a domain name.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosDomain`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-apig-domain
 */
class Domain extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosDomain = new apig_generated_1.RosDomain(this, id, {
            tlsCipherSuitesConfig: props.tlsCipherSuitesConfig,
            resourceGroupId: props.resourceGroupId,
            domainName: props.domainName,
            forceHttps: props.forceHttps,
            tlsMax: props.tlsMax,
            certIdentifier: props.certIdentifier,
            tlsMin: props.tlsMin,
            http2Option: props.http2Option,
            protocol: props.protocol,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosDomain;
        this.attrCertIdentifier = rosDomain.attrCertIdentifier;
        this.attrDomainId = rosDomain.attrDomainId;
        this.attrDomainName = rosDomain.attrDomainName;
        this.attrForceHttps = rosDomain.attrForceHttps;
        this.attrHttp2Option = rosDomain.attrHttp2Option;
        this.attrProtocol = rosDomain.attrProtocol;
        this.attrResourceGroupId = rosDomain.attrResourceGroupId;
        this.attrTlsCipherSuitesConfig = rosDomain.attrTlsCipherSuitesConfig;
        this.attrTlsMax = rosDomain.attrTlsMax;
        this.attrTlsMin = rosDomain.attrTlsMin;
    }
}
exports.Domain = Domain;
//# sourceMappingURL=data:application/json;base64,