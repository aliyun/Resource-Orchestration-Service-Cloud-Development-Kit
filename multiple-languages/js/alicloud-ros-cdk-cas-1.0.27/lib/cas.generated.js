"use strict";
// Generated from the AliCloud ROS Resource Specification
Object.defineProperty(exports, "__esModule", { value: true });
exports.RosSslCertificate = exports.RosOrder = exports.RosCertificate = void 0;
const ros = require("@alicloud/ros-cdk-core");
/**
 * Determine whether the given properties match those of a `RosCertificateProps`
 *
 * @param properties - the TypeScript properties of a `RosCertificateProps`
 *
 * @returns the result of the validation.
 */
function RosCertificatePropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('sourceIp', ros.validateString)(properties.sourceIp));
    errors.collect(ros.propertyValidator('lang', ros.validateString)(properties.lang));
    errors.collect(ros.propertyValidator('cert', ros.requiredValidator)(properties.cert));
    errors.collect(ros.propertyValidator('cert', ros.validateString)(properties.cert));
    errors.collect(ros.propertyValidator('key', ros.requiredValidator)(properties.key));
    errors.collect(ros.propertyValidator('key', ros.validateString)(properties.key));
    errors.collect(ros.propertyValidator('name', ros.requiredValidator)(properties.name));
    errors.collect(ros.propertyValidator('name', ros.validateString)(properties.name));
    return errors.wrap('supplied properties not correct for "RosCertificateProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::CAS::Certificate` resource
 *
 * @param properties - the TypeScript properties of a `RosCertificateProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::CAS::Certificate` resource.
 */
// @ts-ignore TS6133
function rosCertificatePropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosCertificatePropsValidator(properties).assertSuccess();
    }
    return {
        Cert: ros.stringToRosTemplate(properties.cert),
        Key: ros.stringToRosTemplate(properties.key),
        Name: ros.stringToRosTemplate(properties.name),
        Lang: ros.stringToRosTemplate(properties.lang),
        SourceIp: ros.stringToRosTemplate(properties.sourceIp),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::CAS::Certificate`, which is used to add a certificate.
 * @Note This class does not contain additional functions, so it is recommended to use the `Certificate` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-cas-certificate
 */
class RosCertificate extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosCertificate.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrCertId = this.getAtt('CertId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.cert = props.cert;
        this.key = props.key;
        this.name = props.name;
        this.lang = props.lang;
        this.sourceIp = props.sourceIp;
    }
    get rosProperties() {
        return {
            cert: this.cert,
            key: this.key,
            name: this.name,
            lang: this.lang,
            sourceIp: this.sourceIp,
        };
    }
    renderProperties(props) {
        return rosCertificatePropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosCertificate = RosCertificate;
/**
 * The resource type name for this resource class.
 */
RosCertificate.ROS_RESOURCE_TYPE_NAME = "ALIYUN::CAS::Certificate";
/**
 * Determine whether the given properties match those of a `RosOrderProps`
 *
 * @param properties - the TypeScript properties of a `RosOrderProps`
 *
 * @returns the result of the validation.
 */
function RosOrderPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    if (properties.domainCnt && (typeof properties.domainCnt) !== 'object') {
        errors.collect(ros.propertyValidator('domainCnt', ros.validateRange)({
            data: properties.domainCnt,
            min: 1,
            max: 500,
        }));
    }
    errors.collect(ros.propertyValidator('domainCnt', ros.validateNumber)(properties.domainCnt));
    if (properties.domainType && (typeof properties.domainType) !== 'object') {
        errors.collect(ros.propertyValidator('domainType', ros.validateAllowedValues)({
            data: properties.domainType,
            allowedValues: ["all", "one", "multiple"],
        }));
    }
    errors.collect(ros.propertyValidator('domainType', ros.validateString)(properties.domainType));
    if (properties.service && (typeof properties.service) !== 'object') {
        errors.collect(ros.propertyValidator('service', ros.validateAllowedValues)({
            data: properties.service,
            allowedValues: ["VipProduct", "NoNeed", "ExpeditedProduct", "DeployProduct", "SM2DeployProduct"],
        }));
    }
    errors.collect(ros.propertyValidator('service', ros.validateString)(properties.service));
    if (properties.period && (typeof properties.period) !== 'object') {
        errors.collect(ros.propertyValidator('period', ros.validateRange)({
            data: properties.period,
            min: 1,
            max: 3,
        }));
    }
    errors.collect(ros.propertyValidator('period', ros.validateNumber)(properties.period));
    errors.collect(ros.propertyValidator('certType', ros.requiredValidator)(properties.certType));
    if (properties.certType && (typeof properties.certType) !== 'object') {
        errors.collect(ros.propertyValidator('certType', ros.validateAllowedValues)({
            data: properties.certType,
            allowedValues: ["DV", "OV", "EV"],
        }));
    }
    errors.collect(ros.propertyValidator('certType', ros.validateString)(properties.certType));
    errors.collect(ros.propertyValidator('certBrand', ros.requiredValidator)(properties.certBrand));
    if (properties.certBrand && (typeof properties.certBrand) !== 'object') {
        errors.collect(ros.propertyValidator('certBrand', ros.validateAllowedValues)({
            data: properties.certBrand,
            allowedValues: ["Rapid", "Globalsign", "vTrus", "Wosign", "Digicert", "Digicert pro", "Geotrust", "CFCA"],
        }));
    }
    errors.collect(ros.propertyValidator('certBrand', ros.validateString)(properties.certBrand));
    return errors.wrap('supplied properties not correct for "RosOrderProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::CAS::Order` resource
 *
 * @param properties - the TypeScript properties of a `RosOrderProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::CAS::Order` resource.
 */
// @ts-ignore TS6133
function rosOrderPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosOrderPropsValidator(properties).assertSuccess();
    }
    return {
        CertBrand: ros.stringToRosTemplate(properties.certBrand),
        CertType: ros.stringToRosTemplate(properties.certType),
        DomainCnt: ros.numberToRosTemplate(properties.domainCnt),
        DomainType: ros.stringToRosTemplate(properties.domainType),
        Period: ros.numberToRosTemplate(properties.period),
        Service: ros.stringToRosTemplate(properties.service),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::CAS::Order`.
 * @Note This class does not contain additional functions, so it is recommended to use the `Order` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-cas-order
 */
class RosOrder extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosOrder.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.certBrand = props.certBrand;
        this.certType = props.certType;
        this.domainCnt = props.domainCnt;
        this.domainType = props.domainType;
        this.period = props.period;
        this.service = props.service;
    }
    get rosProperties() {
        return {
            certBrand: this.certBrand,
            certType: this.certType,
            domainCnt: this.domainCnt,
            domainType: this.domainType,
            period: this.period,
            service: this.service,
        };
    }
    renderProperties(props) {
        return rosOrderPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosOrder = RosOrder;
/**
 * The resource type name for this resource class.
 */
RosOrder.ROS_RESOURCE_TYPE_NAME = "ALIYUN::CAS::Order";
/**
 * Determine whether the given properties match those of a `RosSslCertificateProps`
 *
 * @param properties - the TypeScript properties of a `RosSslCertificateProps`
 *
 * @returns the result of the validation.
 */
function RosSslCertificatePropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    if (properties.domains && (Array.isArray(properties.domains) || (typeof properties.domains) === 'string')) {
        errors.collect(ros.propertyValidator('domains', ros.validateLength)({
            data: properties.domains.length,
            min: 1,
            max: 5,
        }));
    }
    errors.collect(ros.propertyValidator('domains', ros.listValidator(ros.validateString))(properties.domains));
    errors.collect(ros.propertyValidator('companyName', ros.validateString)(properties.companyName));
    if (properties.domainType && (typeof properties.domainType) !== 'object') {
        errors.collect(ros.propertyValidator('domainType', ros.validateAllowedValues)({
            data: properties.domainType,
            allowedValues: ["all", "one", "multiple"],
        }));
    }
    errors.collect(ros.propertyValidator('domainType', ros.validateString)(properties.domainType));
    errors.collect(ros.propertyValidator('email', ros.validateString)(properties.email));
    errors.collect(ros.propertyValidator('csr', ros.validateString)(properties.csr));
    errors.collect(ros.propertyValidator('username', ros.validateString)(properties.username));
    errors.collect(ros.propertyValidator('productCode', ros.validateString)(properties.productCode));
    errors.collect(ros.propertyValidator('phone', ros.validateString)(properties.phone));
    if (properties.certType && (typeof properties.certType) !== 'object') {
        errors.collect(ros.propertyValidator('certType', ros.validateAllowedValues)({
            data: properties.certType,
            allowedValues: ["DV", "OV", "EV"],
        }));
    }
    errors.collect(ros.propertyValidator('certType', ros.validateString)(properties.certType));
    if (properties.certBrand && (typeof properties.certBrand) !== 'object') {
        errors.collect(ros.propertyValidator('certBrand', ros.validateAllowedValues)({
            data: properties.certBrand,
            allowedValues: ["Rapid", "Globalsign", "vTrus", "Wosign", "Digicert", "Digicert pro", "Geotrust", "CFCA"],
        }));
    }
    errors.collect(ros.propertyValidator('certBrand', ros.validateString)(properties.certBrand));
    if (properties.validateType && (typeof properties.validateType) !== 'object') {
        errors.collect(ros.propertyValidator('validateType', ros.validateAllowedValues)({
            data: properties.validateType,
            allowedValues: ["DNS", "FILE"],
        }));
    }
    errors.collect(ros.propertyValidator('validateType', ros.validateString)(properties.validateType));
    return errors.wrap('supplied properties not correct for "RosSslCertificateProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::CAS::SslCertificate` resource
 *
 * @param properties - the TypeScript properties of a `RosSslCertificateProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::CAS::SslCertificate` resource.
 */
// @ts-ignore TS6133
function rosSslCertificatePropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosSslCertificatePropsValidator(properties).assertSuccess();
    }
    return {
        CertBrand: ros.stringToRosTemplate(properties.certBrand),
        CertType: ros.stringToRosTemplate(properties.certType),
        CompanyName: ros.stringToRosTemplate(properties.companyName),
        Csr: ros.stringToRosTemplate(properties.csr),
        Domains: ros.listMapper(ros.stringToRosTemplate)(properties.domains),
        DomainType: ros.stringToRosTemplate(properties.domainType),
        Email: ros.stringToRosTemplate(properties.email),
        Phone: ros.stringToRosTemplate(properties.phone),
        ProductCode: ros.stringToRosTemplate(properties.productCode),
        Username: ros.stringToRosTemplate(properties.username),
        ValidateType: ros.stringToRosTemplate(properties.validateType),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `ALIYUN::CAS::SslCertificate`.
 * @Note This class does not contain additional functions, so it is recommended to use the `SslCertificate` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-cas-sslcertificate
 */
class RosSslCertificate extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosSslCertificate.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrCertificateId = this.getAtt('CertificateId');
        this.attrOrderId = this.getAtt('OrderId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.certBrand = props.certBrand;
        this.certType = props.certType;
        this.companyName = props.companyName;
        this.csr = props.csr;
        this.domains = props.domains;
        this.domainType = props.domainType;
        this.email = props.email;
        this.phone = props.phone;
        this.productCode = props.productCode;
        this.username = props.username;
        this.validateType = props.validateType;
    }
    get rosProperties() {
        return {
            certBrand: this.certBrand,
            certType: this.certType,
            companyName: this.companyName,
            csr: this.csr,
            domains: this.domains,
            domainType: this.domainType,
            email: this.email,
            phone: this.phone,
            productCode: this.productCode,
            username: this.username,
            validateType: this.validateType,
        };
    }
    renderProperties(props) {
        return rosSslCertificatePropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosSslCertificate = RosSslCertificate;
/**
 * The resource type name for this resource class.
 */
RosSslCertificate.ROS_RESOURCE_TYPE_NAME = "ALIYUN::CAS::SslCertificate";
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FzLmdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNhcy5nZW5lcmF0ZWQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLHlEQUF5RDs7O0FBRXpELDhDQUE4QztBQWtDOUM7Ozs7OztHQU1HO0FBQ0gsU0FBUyw0QkFBNEIsQ0FBQyxVQUFlO0lBQ2pELElBQUksQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxFQUFFO1FBQUUsT0FBTyxHQUFHLENBQUMsa0JBQWtCLENBQUM7S0FBRTtJQUNuRSxNQUFNLE1BQU0sR0FBRyxJQUFJLEdBQUcsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO0lBQzNDLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLFVBQVUsRUFBRSxHQUFHLENBQUMsY0FBYyxDQUFDLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7SUFDM0YsTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUJBQWlCLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUNuRixNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLGlCQUFpQixDQUFDLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDdEYsTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUJBQWlCLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUNuRixNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLGlCQUFpQixDQUFDLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDcEYsTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUJBQWlCLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUNqRixNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLGlCQUFpQixDQUFDLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDdEYsTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUJBQWlCLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUNuRixPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsMkRBQTJELENBQUMsQ0FBQztBQUNwRixDQUFDO0FBRUQ7Ozs7OztHQU1HO0FBQ0gsb0JBQW9CO0FBQ3BCLFNBQVMsZ0NBQWdDLENBQUMsVUFBZSxFQUFFLGdDQUF5QztJQUNoRyxJQUFJLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsRUFBRTtRQUFFLE9BQU8sVUFBVSxDQUFDO0tBQUU7SUFDdkQsSUFBRyxnQ0FBZ0MsRUFBRTtRQUNqQyw0QkFBNEIsQ0FBQyxVQUFVLENBQUMsQ0FBQyxhQUFhLEVBQUUsQ0FBQztLQUM1RDtJQUNELE9BQU87UUFDTCxJQUFJLEVBQUUsR0FBRyxDQUFDLG1CQUFtQixDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUM7UUFDOUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDO1FBQzVDLElBQUksRUFBRSxHQUFHLENBQUMsbUJBQW1CLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQztRQUM5QyxJQUFJLEVBQUUsR0FBRyxDQUFDLG1CQUFtQixDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUM7UUFDOUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDO0tBQ3ZELENBQUM7QUFDTixDQUFDO0FBRUQ7Ozs7R0FJRztBQUNILE1BQWEsY0FBZSxTQUFRLEdBQUcsQ0FBQyxXQUFXO0lBdUMvQzs7OztPQUlHO0lBQ0gsWUFBWSxLQUFvQixFQUFFLEVBQVUsRUFBRSxLQUEwQixFQUFFLGdDQUF5QztRQUMvRyxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxjQUFjLENBQUMsc0JBQXNCLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7UUFDckYsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBRXhDLElBQUksQ0FBQyxnQ0FBZ0MsR0FBRyxnQ0FBZ0MsQ0FBQztRQUN6RSxJQUFJLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUM7UUFDdkIsSUFBSSxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDO1FBQ3JCLElBQUksQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQztRQUN2QixJQUFJLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUM7UUFDdkIsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDO0lBQ25DLENBQUM7SUFHRCxJQUFjLGFBQWE7UUFDdkIsT0FBTztZQUNILElBQUksRUFBRSxJQUFJLENBQUMsSUFBSTtZQUNmLEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBRztZQUNiLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSTtZQUNmLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSTtZQUNmLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUTtTQUMxQixDQUFDO0lBQ04sQ0FBQztJQUNTLGdCQUFnQixDQUFDLEtBQTJCO1FBQ2xELE9BQU8sZ0NBQWdDLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO0lBQzFGLENBQUM7O0FBcEVMLHdDQXFFQztBQXBFRzs7R0FFRztBQUNvQixxQ0FBc0IsR0FBRywwQkFBMEIsQ0FBQztBQStHL0U7Ozs7OztHQU1HO0FBQ0gsU0FBUyxzQkFBc0IsQ0FBQyxVQUFlO0lBQzNDLElBQUksQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxFQUFFO1FBQUUsT0FBTyxHQUFHLENBQUMsa0JBQWtCLENBQUM7S0FBRTtJQUNuRSxNQUFNLE1BQU0sR0FBRyxJQUFJLEdBQUcsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO0lBQzNDLElBQUcsVUFBVSxDQUFDLFNBQVMsSUFBSSxDQUFDLE9BQU8sVUFBVSxDQUFDLFNBQVMsQ0FBQyxLQUFLLFFBQVEsRUFBRTtRQUNuRSxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxXQUFXLEVBQUUsR0FBRyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBQ2pFLElBQUksRUFBRSxVQUFVLENBQUMsU0FBUztZQUMxQixHQUFHLEVBQUUsQ0FBQztZQUNOLEdBQUcsRUFBRSxHQUFHO1NBQ1QsQ0FBQyxDQUFDLENBQUM7S0FDVDtJQUNELE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLFdBQVcsRUFBRSxHQUFHLENBQUMsY0FBYyxDQUFDLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7SUFDN0YsSUFBRyxVQUFVLENBQUMsVUFBVSxJQUFJLENBQUMsT0FBTyxVQUFVLENBQUMsVUFBVSxDQUFDLEtBQUssUUFBUSxFQUFFO1FBQ3JFLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLFlBQVksRUFBRSxHQUFHLENBQUMscUJBQXFCLENBQUMsQ0FBQztZQUM1RSxJQUFJLEVBQUUsVUFBVSxDQUFDLFVBQVU7WUFDM0IsYUFBYSxFQUFFLENBQUMsS0FBSyxFQUFDLEtBQUssRUFBQyxVQUFVLENBQUM7U0FDeEMsQ0FBQyxDQUFDLENBQUM7S0FDUDtJQUNELE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLFlBQVksRUFBRSxHQUFHLENBQUMsY0FBYyxDQUFDLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7SUFDL0YsSUFBRyxVQUFVLENBQUMsT0FBTyxJQUFJLENBQUMsT0FBTyxVQUFVLENBQUMsT0FBTyxDQUFDLEtBQUssUUFBUSxFQUFFO1FBQy9ELE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLFNBQVMsRUFBRSxHQUFHLENBQUMscUJBQXFCLENBQUMsQ0FBQztZQUN6RSxJQUFJLEVBQUUsVUFBVSxDQUFDLE9BQU87WUFDeEIsYUFBYSxFQUFFLENBQUMsWUFBWSxFQUFDLFFBQVEsRUFBQyxrQkFBa0IsRUFBQyxlQUFlLEVBQUMsa0JBQWtCLENBQUM7U0FDN0YsQ0FBQyxDQUFDLENBQUM7S0FDUDtJQUNELE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLFNBQVMsRUFBRSxHQUFHLENBQUMsY0FBYyxDQUFDLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFDekYsSUFBRyxVQUFVLENBQUMsTUFBTSxJQUFJLENBQUMsT0FBTyxVQUFVLENBQUMsTUFBTSxDQUFDLEtBQUssUUFBUSxFQUFFO1FBQzdELE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLFFBQVEsRUFBRSxHQUFHLENBQUMsYUFBYSxDQUFDLENBQUM7WUFDOUQsSUFBSSxFQUFFLFVBQVUsQ0FBQyxNQUFNO1lBQ3ZCLEdBQUcsRUFBRSxDQUFDO1lBQ04sR0FBRyxFQUFFLENBQUM7U0FDUCxDQUFDLENBQUMsQ0FBQztLQUNUO0lBQ0QsTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUJBQWlCLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUN2RixNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxVQUFVLEVBQUUsR0FBRyxDQUFDLGlCQUFpQixDQUFDLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7SUFDOUYsSUFBRyxVQUFVLENBQUMsUUFBUSxJQUFJLENBQUMsT0FBTyxVQUFVLENBQUMsUUFBUSxDQUFDLEtBQUssUUFBUSxFQUFFO1FBQ2pFLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLFVBQVUsRUFBRSxHQUFHLENBQUMscUJBQXFCLENBQUMsQ0FBQztZQUMxRSxJQUFJLEVBQUUsVUFBVSxDQUFDLFFBQVE7WUFDekIsYUFBYSxFQUFFLENBQUMsSUFBSSxFQUFDLElBQUksRUFBQyxJQUFJLENBQUM7U0FDaEMsQ0FBQyxDQUFDLENBQUM7S0FDUDtJQUNELE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLFVBQVUsRUFBRSxHQUFHLENBQUMsY0FBYyxDQUFDLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7SUFDM0YsTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUJBQWlCLENBQUMsV0FBVyxFQUFFLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO0lBQ2hHLElBQUcsVUFBVSxDQUFDLFNBQVMsSUFBSSxDQUFDLE9BQU8sVUFBVSxDQUFDLFNBQVMsQ0FBQyxLQUFLLFFBQVEsRUFBRTtRQUNuRSxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxXQUFXLEVBQUUsR0FBRyxDQUFDLHFCQUFxQixDQUFDLENBQUM7WUFDM0UsSUFBSSxFQUFFLFVBQVUsQ0FBQyxTQUFTO1lBQzFCLGFBQWEsRUFBRSxDQUFDLE9BQU8sRUFBQyxZQUFZLEVBQUMsT0FBTyxFQUFDLFFBQVEsRUFBQyxVQUFVLEVBQUMsY0FBYyxFQUFDLFVBQVUsRUFBQyxNQUFNLENBQUM7U0FDbkcsQ0FBQyxDQUFDLENBQUM7S0FDUDtJQUNELE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLFdBQVcsRUFBRSxHQUFHLENBQUMsY0FBYyxDQUFDLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7SUFDN0YsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLHFEQUFxRCxDQUFDLENBQUM7QUFDOUUsQ0FBQztBQUVEOzs7Ozs7R0FNRztBQUNILG9CQUFvQjtBQUNwQixTQUFTLDBCQUEwQixDQUFDLFVBQWUsRUFBRSxnQ0FBeUM7SUFDMUYsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLEVBQUU7UUFBRSxPQUFPLFVBQVUsQ0FBQztLQUFFO0lBQ3ZELElBQUcsZ0NBQWdDLEVBQUU7UUFDakMsc0JBQXNCLENBQUMsVUFBVSxDQUFDLENBQUMsYUFBYSxFQUFFLENBQUM7S0FDdEQ7SUFDRCxPQUFPO1FBQ0wsU0FBUyxFQUFFLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDO1FBQ3hELFFBQVEsRUFBRSxHQUFHLENBQUMsbUJBQW1CLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQztRQUN0RCxTQUFTLEVBQUUsR0FBRyxDQUFDLG1CQUFtQixDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUM7UUFDeEQsVUFBVSxFQUFFLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDO1FBQzFELE1BQU0sRUFBRSxHQUFHLENBQUMsbUJBQW1CLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQztRQUNsRCxPQUFPLEVBQUUsR0FBRyxDQUFDLG1CQUFtQixDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUM7S0FDckQsQ0FBQztBQUNOLENBQUM7QUFFRDs7OztHQUlHO0FBQ0gsTUFBYSxRQUFTLFNBQVEsR0FBRyxDQUFDLFdBQVc7SUE4Q3pDOzs7O09BSUc7SUFDSCxZQUFZLEtBQW9CLEVBQUUsRUFBVSxFQUFFLEtBQW9CLEVBQUUsZ0NBQXlDO1FBQ3pHLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLFFBQVEsQ0FBQyxzQkFBc0IsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUUvRSxJQUFJLENBQUMsZ0NBQWdDLEdBQUcsZ0NBQWdDLENBQUM7UUFDekUsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFDO1FBQ2pDLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQztRQUMvQixJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUM7UUFDakMsSUFBSSxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUMsVUFBVSxDQUFDO1FBQ25DLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQztRQUMzQixJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUM7SUFDakMsQ0FBQztJQUdELElBQWMsYUFBYTtRQUN2QixPQUFPO1lBQ0gsU0FBUyxFQUFFLElBQUksQ0FBQyxTQUFTO1lBQ3pCLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUTtZQUN2QixTQUFTLEVBQUUsSUFBSSxDQUFDLFNBQVM7WUFDekIsVUFBVSxFQUFFLElBQUksQ0FBQyxVQUFVO1lBQzNCLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTTtZQUNuQixPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU87U0FDeEIsQ0FBQztJQUNOLENBQUM7SUFDUyxnQkFBZ0IsQ0FBQyxLQUEyQjtRQUNsRCxPQUFPLDBCQUEwQixDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztJQUNwRixDQUFDOztBQTVFTCw0QkE2RUM7QUE1RUc7O0dBRUc7QUFDb0IsK0JBQXNCLEdBQUcsb0JBQW9CLENBQUM7QUFxS3pFOzs7Ozs7R0FNRztBQUNILFNBQVMsK0JBQStCLENBQUMsVUFBZTtJQUNwRCxJQUFJLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsRUFBRTtRQUFFLE9BQU8sR0FBRyxDQUFDLGtCQUFrQixDQUFDO0tBQUU7SUFDbkUsTUFBTSxNQUFNLEdBQUcsSUFBSSxHQUFHLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztJQUMzQyxJQUFHLFVBQVUsQ0FBQyxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sVUFBVSxDQUFDLE9BQU8sQ0FBQyxLQUFLLFFBQVEsQ0FBQyxFQUFFO1FBQ3RHLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLFNBQVMsRUFBRSxHQUFHLENBQUMsY0FBYyxDQUFDLENBQUM7WUFDaEUsSUFBSSxFQUFFLFVBQVUsQ0FBQyxPQUFPLENBQUMsTUFBTTtZQUMvQixHQUFHLEVBQUUsQ0FBQztZQUNOLEdBQUcsRUFBRSxDQUFDO1NBQ1AsQ0FBQyxDQUFDLENBQUM7S0FDVDtJQUNELE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLFNBQVMsRUFBRSxHQUFHLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQzVHLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLGFBQWEsRUFBRSxHQUFHLENBQUMsY0FBYyxDQUFDLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7SUFDakcsSUFBRyxVQUFVLENBQUMsVUFBVSxJQUFJLENBQUMsT0FBTyxVQUFVLENBQUMsVUFBVSxDQUFDLEtBQUssUUFBUSxFQUFFO1FBQ3JFLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLFlBQVksRUFBRSxHQUFHLENBQUMscUJBQXFCLENBQUMsQ0FBQztZQUM1RSxJQUFJLEVBQUUsVUFBVSxDQUFDLFVBQVU7WUFDM0IsYUFBYSxFQUFFLENBQUMsS0FBSyxFQUFDLEtBQUssRUFBQyxVQUFVLENBQUM7U0FDeEMsQ0FBQyxDQUFDLENBQUM7S0FDUDtJQUNELE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLFlBQVksRUFBRSxHQUFHLENBQUMsY0FBYyxDQUFDLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7SUFDL0YsTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUJBQWlCLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUNyRixNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLGNBQWMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ2pGLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLFVBQVUsRUFBRSxHQUFHLENBQUMsY0FBYyxDQUFDLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7SUFDM0YsTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUJBQWlCLENBQUMsYUFBYSxFQUFFLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztJQUNqRyxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLGNBQWMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQ3JGLElBQUcsVUFBVSxDQUFDLFFBQVEsSUFBSSxDQUFDLE9BQU8sVUFBVSxDQUFDLFFBQVEsQ0FBQyxLQUFLLFFBQVEsRUFBRTtRQUNqRSxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxVQUFVLEVBQUUsR0FBRyxDQUFDLHFCQUFxQixDQUFDLENBQUM7WUFDMUUsSUFBSSxFQUFFLFVBQVUsQ0FBQyxRQUFRO1lBQ3pCLGFBQWEsRUFBRSxDQUFDLElBQUksRUFBQyxJQUFJLEVBQUMsSUFBSSxDQUFDO1NBQ2hDLENBQUMsQ0FBQyxDQUFDO0tBQ1A7SUFDRCxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxVQUFVLEVBQUUsR0FBRyxDQUFDLGNBQWMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO0lBQzNGLElBQUcsVUFBVSxDQUFDLFNBQVMsSUFBSSxDQUFDLE9BQU8sVUFBVSxDQUFDLFNBQVMsQ0FBQyxLQUFLLFFBQVEsRUFBRTtRQUNuRSxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxXQUFXLEVBQUUsR0FBRyxDQUFDLHFCQUFxQixDQUFDLENBQUM7WUFDM0UsSUFBSSxFQUFFLFVBQVUsQ0FBQyxTQUFTO1lBQzFCLGFBQWEsRUFBRSxDQUFDLE9BQU8sRUFBQyxZQUFZLEVBQUMsT0FBTyxFQUFDLFFBQVEsRUFBQyxVQUFVLEVBQUMsY0FBYyxFQUFDLFVBQVUsRUFBQyxNQUFNLENBQUM7U0FDbkcsQ0FBQyxDQUFDLENBQUM7S0FDUDtJQUNELE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLFdBQVcsRUFBRSxHQUFHLENBQUMsY0FBYyxDQUFDLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7SUFDN0YsSUFBRyxVQUFVLENBQUMsWUFBWSxJQUFJLENBQUMsT0FBTyxVQUFVLENBQUMsWUFBWSxDQUFDLEtBQUssUUFBUSxFQUFFO1FBQ3pFLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLGNBQWMsRUFBRSxHQUFHLENBQUMscUJBQXFCLENBQUMsQ0FBQztZQUM5RSxJQUFJLEVBQUUsVUFBVSxDQUFDLFlBQVk7WUFDN0IsYUFBYSxFQUFFLENBQUMsS0FBSyxFQUFDLE1BQU0sQ0FBQztTQUM5QixDQUFDLENBQUMsQ0FBQztLQUNQO0lBQ0QsTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUJBQWlCLENBQUMsY0FBYyxFQUFFLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztJQUNuRyxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsOERBQThELENBQUMsQ0FBQztBQUN2RixDQUFDO0FBRUQ7Ozs7OztHQU1HO0FBQ0gsb0JBQW9CO0FBQ3BCLFNBQVMsbUNBQW1DLENBQUMsVUFBZSxFQUFFLGdDQUF5QztJQUNuRyxJQUFJLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsRUFBRTtRQUFFLE9BQU8sVUFBVSxDQUFDO0tBQUU7SUFDdkQsSUFBRyxnQ0FBZ0MsRUFBRTtRQUNqQywrQkFBK0IsQ0FBQyxVQUFVLENBQUMsQ0FBQyxhQUFhLEVBQUUsQ0FBQztLQUMvRDtJQUNELE9BQU87UUFDTCxTQUFTLEVBQUUsR0FBRyxDQUFDLG1CQUFtQixDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUM7UUFDeEQsUUFBUSxFQUFFLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDO1FBQ3RELFdBQVcsRUFBRSxHQUFHLENBQUMsbUJBQW1CLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQztRQUM1RCxHQUFHLEVBQUUsR0FBRyxDQUFDLG1CQUFtQixDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUM7UUFDNUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLG1CQUFtQixDQUFDLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQztRQUNwRSxVQUFVLEVBQUUsR0FBRyxDQUFDLG1CQUFtQixDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUM7UUFDMUQsS0FBSyxFQUFFLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDO1FBQ2hELEtBQUssRUFBRSxHQUFHLENBQUMsbUJBQW1CLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQztRQUNoRCxXQUFXLEVBQUUsR0FBRyxDQUFDLG1CQUFtQixDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUM7UUFDNUQsUUFBUSxFQUFFLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDO1FBQ3RELFlBQVksRUFBRSxHQUFHLENBQUMsbUJBQW1CLENBQUMsVUFBVSxDQUFDLFlBQVksQ0FBQztLQUMvRCxDQUFDO0FBQ04sQ0FBQztBQUVEOzs7O0dBSUc7QUFDSCxNQUFhLGlCQUFrQixTQUFRLEdBQUcsQ0FBQyxXQUFXO0lBc0dsRDs7OztPQUlHO0lBQ0gsWUFBWSxLQUFvQixFQUFFLEVBQVUsRUFBRSxLQUE2QixFQUFFLGdDQUF5QztRQUNsSCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxpQkFBaUIsQ0FBQyxzQkFBc0IsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUN4RixJQUFJLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUN0RCxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7UUFFMUMsSUFBSSxDQUFDLGdDQUFnQyxHQUFHLGdDQUFnQyxDQUFDO1FBQ3pFLElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQztRQUNqQyxJQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQyxRQUFRLENBQUM7UUFDL0IsSUFBSSxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUMsV0FBVyxDQUFDO1FBQ3JDLElBQUksQ0FBQyxHQUFHLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQztRQUNyQixJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUM7UUFDN0IsSUFBSSxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUMsVUFBVSxDQUFDO1FBQ25DLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQztRQUN6QixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUM7UUFDekIsSUFBSSxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUMsV0FBVyxDQUFDO1FBQ3JDLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQztRQUMvQixJQUFJLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQyxZQUFZLENBQUM7SUFDM0MsQ0FBQztJQUdELElBQWMsYUFBYTtRQUN2QixPQUFPO1lBQ0gsU0FBUyxFQUFFLElBQUksQ0FBQyxTQUFTO1lBQ3pCLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUTtZQUN2QixXQUFXLEVBQUUsSUFBSSxDQUFDLFdBQVc7WUFDN0IsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHO1lBQ2IsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPO1lBQ3JCLFVBQVUsRUFBRSxJQUFJLENBQUMsVUFBVTtZQUMzQixLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUs7WUFDakIsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLO1lBQ2pCLFdBQVcsRUFBRSxJQUFJLENBQUMsV0FBVztZQUM3QixRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVE7WUFDdkIsWUFBWSxFQUFFLElBQUksQ0FBQyxZQUFZO1NBQ2xDLENBQUM7SUFDTixDQUFDO0lBQ1MsZ0JBQWdCLENBQUMsS0FBMkI7UUFDbEQsT0FBTyxtQ0FBbUMsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLGdDQUFnQyxDQUFDLENBQUM7SUFDN0YsQ0FBQzs7QUFoSkwsOENBaUpDO0FBaEpHOztHQUVHO0FBQ29CLHdDQUFzQixHQUFHLDZCQUE2QixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gR2VuZXJhdGVkIGZyb20gdGhlIEFsaUNsb3VkIFJPUyBSZXNvdXJjZSBTcGVjaWZpY2F0aW9uXG5cbmltcG9ydCAqIGFzIHJvcyBmcm9tICdAYWxpY2xvdWQvcm9zLWNkay1jb3JlJztcblxuLyoqXG4gKiBQcm9wZXJ0aWVzIGZvciBkZWZpbmluZyBhIGBSb3NDZXJ0aWZpY2F0ZWAuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2FsaXl1bi1jYXMtY2VydGlmaWNhdGVcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBSb3NDZXJ0aWZpY2F0ZVByb3BzIHtcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBjZXJ0OiBTcGVjaWZ5IHRoZSBjb250ZW50IG9mIHRoZSBjZXJ0aWZpY2F0ZS4gVG8gdXNlIHRoZSBQRU0gZW5jb2RpbmcgZm9ybWF0LlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGNlcnQ6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBrZXk6IFNwZWNpZnkgdGhlIGNlcnRpZmljYXRlIHByaXZhdGUga2V5IGNvbnRlbnQuIFRvIHVzZSB0aGUgUEVNIGVuY29kaW5nIGZvcm1hdC5cbiAgICAgKi9cbiAgICByZWFkb25seSBrZXk6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBuYW1lOiBDdXN0b20gY2VydGlmaWNhdGUgbmFtZS4gVGhlIGNlcnRpZmljYXRlIG5hbWUgdW5kZXIgYSB1c2VyIGNhbm5vdCBiZSBkdXBsaWNhdGVkLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IG5hbWU6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBsYW5nOiBTcGVjaWZpZXMgdGhlIGxhbmd1YWdlIHR5cGUgZm9yIHJlcXVlc3RpbmcgYW5kIHJlY2VpdmluZyBtZXNzYWdlcy5cbiAgICAgKi9cbiAgICByZWFkb25seSBsYW5nPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IHNvdXJjZUlwOiBTcGVjaWZpZXMgdGhlIHNvdXJjZSBJUCBhZGRyZXNzIG9mIHRoZSByZXF1ZXN0LlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHNvdXJjZUlwPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xufVxuXG4vKipcbiAqIERldGVybWluZSB3aGV0aGVyIHRoZSBnaXZlbiBwcm9wZXJ0aWVzIG1hdGNoIHRob3NlIG9mIGEgYFJvc0NlcnRpZmljYXRlUHJvcHNgXG4gKlxuICogQHBhcmFtIHByb3BlcnRpZXMgLSB0aGUgVHlwZVNjcmlwdCBwcm9wZXJ0aWVzIG9mIGEgYFJvc0NlcnRpZmljYXRlUHJvcHNgXG4gKlxuICogQHJldHVybnMgdGhlIHJlc3VsdCBvZiB0aGUgdmFsaWRhdGlvbi5cbiAqL1xuZnVuY3Rpb24gUm9zQ2VydGlmaWNhdGVQcm9wc1ZhbGlkYXRvcihwcm9wZXJ0aWVzOiBhbnkpOiByb3MuVmFsaWRhdGlvblJlc3VsdCB7XG4gICAgaWYgKCFyb3MuY2FuSW5zcGVjdChwcm9wZXJ0aWVzKSkgeyByZXR1cm4gcm9zLlZBTElEQVRJT05fU1VDQ0VTUzsgfVxuICAgIGNvbnN0IGVycm9ycyA9IG5ldyByb3MuVmFsaWRhdGlvblJlc3VsdHMoKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ3NvdXJjZUlwJywgcm9zLnZhbGlkYXRlU3RyaW5nKShwcm9wZXJ0aWVzLnNvdXJjZUlwKSk7XG4gICAgZXJyb3JzLmNvbGxlY3Qocm9zLnByb3BlcnR5VmFsaWRhdG9yKCdsYW5nJywgcm9zLnZhbGlkYXRlU3RyaW5nKShwcm9wZXJ0aWVzLmxhbmcpKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ2NlcnQnLCByb3MucmVxdWlyZWRWYWxpZGF0b3IpKHByb3BlcnRpZXMuY2VydCkpO1xuICAgIGVycm9ycy5jb2xsZWN0KHJvcy5wcm9wZXJ0eVZhbGlkYXRvcignY2VydCcsIHJvcy52YWxpZGF0ZVN0cmluZykocHJvcGVydGllcy5jZXJ0KSk7XG4gICAgZXJyb3JzLmNvbGxlY3Qocm9zLnByb3BlcnR5VmFsaWRhdG9yKCdrZXknLCByb3MucmVxdWlyZWRWYWxpZGF0b3IpKHByb3BlcnRpZXMua2V5KSk7XG4gICAgZXJyb3JzLmNvbGxlY3Qocm9zLnByb3BlcnR5VmFsaWRhdG9yKCdrZXknLCByb3MudmFsaWRhdGVTdHJpbmcpKHByb3BlcnRpZXMua2V5KSk7XG4gICAgZXJyb3JzLmNvbGxlY3Qocm9zLnByb3BlcnR5VmFsaWRhdG9yKCduYW1lJywgcm9zLnJlcXVpcmVkVmFsaWRhdG9yKShwcm9wZXJ0aWVzLm5hbWUpKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ25hbWUnLCByb3MudmFsaWRhdGVTdHJpbmcpKHByb3BlcnRpZXMubmFtZSkpO1xuICAgIHJldHVybiBlcnJvcnMud3JhcCgnc3VwcGxpZWQgcHJvcGVydGllcyBub3QgY29ycmVjdCBmb3IgXCJSb3NDZXJ0aWZpY2F0ZVByb3BzXCInKTtcbn1cblxuLyoqXG4gKiBSZW5kZXJzIHRoZSBBbGlDbG91ZCBST1MgUmVzb3VyY2UgcHJvcGVydGllcyBvZiBhbiBgQUxJWVVOOjpDQVM6OkNlcnRpZmljYXRlYCByZXNvdXJjZVxuICpcbiAqIEBwYXJhbSBwcm9wZXJ0aWVzIC0gdGhlIFR5cGVTY3JpcHQgcHJvcGVydGllcyBvZiBhIGBSb3NDZXJ0aWZpY2F0ZVByb3BzYFxuICpcbiAqIEByZXR1cm5zIHRoZSBBbGlDbG91ZCBST1MgUmVzb3VyY2UgcHJvcGVydGllcyBvZiBhbiBgQUxJWVVOOjpDQVM6OkNlcnRpZmljYXRlYCByZXNvdXJjZS5cbiAqL1xuLy8gQHRzLWlnbm9yZSBUUzYxMzNcbmZ1bmN0aW9uIHJvc0NlcnRpZmljYXRlUHJvcHNUb1Jvc1RlbXBsYXRlKHByb3BlcnRpZXM6IGFueSwgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6IGJvb2xlYW4pOiBhbnkge1xuICAgIGlmICghcm9zLmNhbkluc3BlY3QocHJvcGVydGllcykpIHsgcmV0dXJuIHByb3BlcnRpZXM7IH1cbiAgICBpZihlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCkge1xuICAgICAgICBSb3NDZXJ0aWZpY2F0ZVByb3BzVmFsaWRhdG9yKHByb3BlcnRpZXMpLmFzc2VydFN1Y2Nlc3MoKTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIENlcnQ6IHJvcy5zdHJpbmdUb1Jvc1RlbXBsYXRlKHByb3BlcnRpZXMuY2VydCksXG4gICAgICBLZXk6IHJvcy5zdHJpbmdUb1Jvc1RlbXBsYXRlKHByb3BlcnRpZXMua2V5KSxcbiAgICAgIE5hbWU6IHJvcy5zdHJpbmdUb1Jvc1RlbXBsYXRlKHByb3BlcnRpZXMubmFtZSksXG4gICAgICBMYW5nOiByb3Muc3RyaW5nVG9Sb3NUZW1wbGF0ZShwcm9wZXJ0aWVzLmxhbmcpLFxuICAgICAgU291cmNlSXA6IHJvcy5zdHJpbmdUb1Jvc1RlbXBsYXRlKHByb3BlcnRpZXMuc291cmNlSXApLFxuICAgIH07XG59XG5cbi8qKlxuICogVGhpcyBjbGFzcyBpcyBhIGJhc2UgZW5jYXBzdWxhdGlvbiBhcm91bmQgdGhlIFJPUyByZXNvdXJjZSB0eXBlIGBBTElZVU46OkNBUzo6Q2VydGlmaWNhdGVgLCB3aGljaCBpcyB1c2VkIHRvIGFkZCBhIGNlcnRpZmljYXRlLlxuICogQE5vdGUgVGhpcyBjbGFzcyBkb2VzIG5vdCBjb250YWluIGFkZGl0aW9uYWwgZnVuY3Rpb25zLCBzbyBpdCBpcyByZWNvbW1lbmRlZCB0byB1c2UgdGhlIGBDZXJ0aWZpY2F0ZWAgY2xhc3MgaW5zdGVhZCBvZiB0aGlzIGNsYXNzIGZvciBhIG1vcmUgY29udmVuaWVudCBkZXZlbG9wbWVudCBleHBlcmllbmNlLlxuICogU2VlIGh0dHBzOi8vd3d3LmFsaWJhYmFjbG91ZC5jb20vaGVscC9yb3MvZGV2ZWxvcGVyLXJlZmVyZW5jZS9hbGl5dW4tY2FzLWNlcnRpZmljYXRlXG4gKi9cbmV4cG9ydCBjbGFzcyBSb3NDZXJ0aWZpY2F0ZSBleHRlbmRzIHJvcy5Sb3NSZXNvdXJjZSB7XG4gICAgLyoqXG4gICAgICogVGhlIHJlc291cmNlIHR5cGUgbmFtZSBmb3IgdGhpcyByZXNvdXJjZSBjbGFzcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IFJPU19SRVNPVVJDRV9UWVBFX05BTUUgPSBcIkFMSVlVTjo6Q0FTOjpDZXJ0aWZpY2F0ZVwiO1xuXG4gICAgLyoqXG4gICAgICogQEF0dHJpYnV0ZSBDZXJ0SWQ6IENlcnRpZmljYXRlIElELlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyQ2VydElkOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICBwdWJsaWMgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6IGJvb2xlYW47XG5cblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBjZXJ0OiBTcGVjaWZ5IHRoZSBjb250ZW50IG9mIHRoZSBjZXJ0aWZpY2F0ZS4gVG8gdXNlIHRoZSBQRU0gZW5jb2RpbmcgZm9ybWF0LlxuICAgICAqL1xuICAgIHB1YmxpYyBjZXJ0OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkga2V5OiBTcGVjaWZ5IHRoZSBjZXJ0aWZpY2F0ZSBwcml2YXRlIGtleSBjb250ZW50LiBUbyB1c2UgdGhlIFBFTSBlbmNvZGluZyBmb3JtYXQuXG4gICAgICovXG4gICAgcHVibGljIGtleTogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IG5hbWU6IEN1c3RvbSBjZXJ0aWZpY2F0ZSBuYW1lLiBUaGUgY2VydGlmaWNhdGUgbmFtZSB1bmRlciBhIHVzZXIgY2Fubm90IGJlIGR1cGxpY2F0ZWQuXG4gICAgICovXG4gICAgcHVibGljIG5hbWU6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBsYW5nOiBTcGVjaWZpZXMgdGhlIGxhbmd1YWdlIHR5cGUgZm9yIHJlcXVlc3RpbmcgYW5kIHJlY2VpdmluZyBtZXNzYWdlcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgbGFuZzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlIHwgdW5kZWZpbmVkO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IHNvdXJjZUlwOiBTcGVjaWZpZXMgdGhlIHNvdXJjZSBJUCBhZGRyZXNzIG9mIHRoZSByZXF1ZXN0LlxuICAgICAqL1xuICAgIHB1YmxpYyBzb3VyY2VJcDogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlIHwgdW5kZWZpbmVkO1xuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHNjb3BlIC0gc2NvcGUgaW4gd2hpY2ggdGhpcyByZXNvdXJjZSBpcyBkZWZpbmVkXG4gICAgICogQHBhcmFtIGlkICAgIC0gc2NvcGVkIGlkIG9mIHRoZSByZXNvdXJjZVxuICAgICAqIEBwYXJhbSBwcm9wcyAtIHJlc291cmNlIHByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihzY29wZTogcm9zLkNvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IFJvc0NlcnRpZmljYXRlUHJvcHMsIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OiBib29sZWFuKSB7XG4gICAgICAgIHN1cGVyKHNjb3BlLCBpZCwgeyB0eXBlOiBSb3NDZXJ0aWZpY2F0ZS5ST1NfUkVTT1VSQ0VfVFlQRV9OQU1FLCBwcm9wZXJ0aWVzOiBwcm9wcyB9KTtcbiAgICAgICAgdGhpcy5hdHRyQ2VydElkID0gdGhpcy5nZXRBdHQoJ0NlcnRJZCcpO1xuXG4gICAgICAgIHRoaXMuZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgPSBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDtcbiAgICAgICAgdGhpcy5jZXJ0ID0gcHJvcHMuY2VydDtcbiAgICAgICAgdGhpcy5rZXkgPSBwcm9wcy5rZXk7XG4gICAgICAgIHRoaXMubmFtZSA9IHByb3BzLm5hbWU7XG4gICAgICAgIHRoaXMubGFuZyA9IHByb3BzLmxhbmc7XG4gICAgICAgIHRoaXMuc291cmNlSXAgPSBwcm9wcy5zb3VyY2VJcDtcbiAgICB9XG5cblxuICAgIHByb3RlY3RlZCBnZXQgcm9zUHJvcGVydGllcygpOiB7IFtrZXk6IHN0cmluZ106IGFueSB9ICB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjZXJ0OiB0aGlzLmNlcnQsXG4gICAgICAgICAgICBrZXk6IHRoaXMua2V5LFxuICAgICAgICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgICAgICAgbGFuZzogdGhpcy5sYW5nLFxuICAgICAgICAgICAgc291cmNlSXA6IHRoaXMuc291cmNlSXAsXG4gICAgICAgIH07XG4gICAgfVxuICAgIHByb3RlY3RlZCByZW5kZXJQcm9wZXJ0aWVzKHByb3BzOiB7W2tleTogc3RyaW5nXTogYW55fSk6IHsgW2tleTogc3RyaW5nXTogYW55IH0gIHtcbiAgICAgICAgcmV0dXJuIHJvc0NlcnRpZmljYXRlUHJvcHNUb1Jvc1RlbXBsYXRlKHByb3BzLCB0aGlzLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50KTtcbiAgICB9XG59XG5cbi8qKlxuICogUHJvcGVydGllcyBmb3IgZGVmaW5pbmcgYSBgUm9zT3JkZXJgLlxuICogU2VlIGh0dHBzOi8vd3d3LmFsaWJhYmFjbG91ZC5jb20vaGVscC9yb3MvZGV2ZWxvcGVyLXJlZmVyZW5jZS9hbGl5dW4tY2FzLW9yZGVyXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUm9zT3JkZXJQcm9wcyB7XG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgY2VydEJyYW5kOiBDZXJ0aWZpY2F0ZSBicmFuZC4gVmFsaWQgdmFsdWVzOiBSYXBpZCwgR2xvYmFsc2lnbiwgdlRydXMsIFdvc2lnbiwgRGlnaWNlcnQsIERpZ2ljZXJ0IHBybywgR2VvdHJ1c3QsIENGQ0EuXG4gICAgICovXG4gICAgcmVhZG9ubHkgY2VydEJyYW5kOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgY2VydFR5cGU6IENlcnRpZmljYXRlIHR5cGUuIFZhbGlkIHZhbHVlczogRFYsIE9WLCBFVi5cbiAgICAgKi9cbiAgICByZWFkb25seSBjZXJ0VHlwZTogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IGRvbWFpbkNudDogTnVtYmVyIG9mIGRvbWFpbnMgdG8gYmUgaW5jbHVkZWQgaW4gdGhlIGNlcnRpZmljYXRlLiBWYWxpZCB2YWx1ZXM6IDEtNTAwLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGRvbWFpbkNudD86IG51bWJlciB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBkb21haW5UeXBlOiBEb21haW4gdHlwZS4gVmFsaWQgdmFsdWVzOiBvbmUsIGFsbCwgbXVsdGlwbGUuXG4gICAgICovXG4gICAgcmVhZG9ubHkgZG9tYWluVHlwZT86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBwZXJpb2Q6IFNlcnZpY2UgdGltZSBvZiB0aGUgY2VydGlmaWNhdGUsIGluIHllYXIuIFZhbGlkIHZhbHVlczogMSwgMiwgMy5cbiAgICAgKiBOb3RlOiBTdGFydGluZyBTZXB0ZW1iZXIgMSwgMjAyMCwgY2VydGlmaWNhdGVzIGlzc3VlZCBieSBjYXMgYXJvdW5kIHRoZSB3b3JsZCB3aWxsIGJlIHZhbGlkIGZvciBhIG1heGltdW0gb2YgMSB5ZWFyLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHBlcmlvZD86IG51bWJlciB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBzZXJ2aWNlOiBXaGV0aGVyIGVuYWJsZSBvdGhlciBzZXJ2aWNlLiBWYWxpZCB2YWx1ZXM6XG4gICAgICogLSBOb05lZWQ6IERvIG5vdCBhcHBseSBmb3IgYW55IHNlcnZpY2VzLlxuICAgICAqIC0gRXhwZWRpdGVkUHJvZHVjdDogUmVxdWVzdCBhc3Npc3RhbmNlIHNlcnZpY2VzLlxuICAgICAqIC0gRGVwbG95UHJvZHVjdDogRGVwbG95IHNlcnZpY2VzLlxuICAgICAqIC0gU00yRGVwbG95UHJvZHVjdDogRGVwbG95IHNlcnZpY2VzIHdpdGggU00yIGVuY3J5cHRpb24uXG4gICAgICogLSBWaXBQcm9kdWN0OiBSZXF1ZXN0IGFzc2lzdGFuY2UgYW5kIGRlcGxveW1lbnQgc2VydmljZXMuXG4gICAgICogKipOb3RlOioqIFRoaXMgcGFyYW1ldGVyIGlzIG5vdCBzdXBwb3J0ZWQgYnkgaW50ZXJuYXRpb25hbCBzdGF0aW9ucy5cbiAgICAgKi9cbiAgICByZWFkb25seSBzZXJ2aWNlPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xufVxuXG4vKipcbiAqIERldGVybWluZSB3aGV0aGVyIHRoZSBnaXZlbiBwcm9wZXJ0aWVzIG1hdGNoIHRob3NlIG9mIGEgYFJvc09yZGVyUHJvcHNgXG4gKlxuICogQHBhcmFtIHByb3BlcnRpZXMgLSB0aGUgVHlwZVNjcmlwdCBwcm9wZXJ0aWVzIG9mIGEgYFJvc09yZGVyUHJvcHNgXG4gKlxuICogQHJldHVybnMgdGhlIHJlc3VsdCBvZiB0aGUgdmFsaWRhdGlvbi5cbiAqL1xuZnVuY3Rpb24gUm9zT3JkZXJQcm9wc1ZhbGlkYXRvcihwcm9wZXJ0aWVzOiBhbnkpOiByb3MuVmFsaWRhdGlvblJlc3VsdCB7XG4gICAgaWYgKCFyb3MuY2FuSW5zcGVjdChwcm9wZXJ0aWVzKSkgeyByZXR1cm4gcm9zLlZBTElEQVRJT05fU1VDQ0VTUzsgfVxuICAgIGNvbnN0IGVycm9ycyA9IG5ldyByb3MuVmFsaWRhdGlvblJlc3VsdHMoKTtcbiAgICBpZihwcm9wZXJ0aWVzLmRvbWFpbkNudCAmJiAodHlwZW9mIHByb3BlcnRpZXMuZG9tYWluQ250KSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgZXJyb3JzLmNvbGxlY3Qocm9zLnByb3BlcnR5VmFsaWRhdG9yKCdkb21haW5DbnQnLCByb3MudmFsaWRhdGVSYW5nZSkoe1xuICAgICAgICAgICAgZGF0YTogcHJvcGVydGllcy5kb21haW5DbnQsXG4gICAgICAgICAgICBtaW46IDEsXG4gICAgICAgICAgICBtYXg6IDUwMCxcbiAgICAgICAgICB9KSk7XG4gICAgfVxuICAgIGVycm9ycy5jb2xsZWN0KHJvcy5wcm9wZXJ0eVZhbGlkYXRvcignZG9tYWluQ250Jywgcm9zLnZhbGlkYXRlTnVtYmVyKShwcm9wZXJ0aWVzLmRvbWFpbkNudCkpO1xuICAgIGlmKHByb3BlcnRpZXMuZG9tYWluVHlwZSAmJiAodHlwZW9mIHByb3BlcnRpZXMuZG9tYWluVHlwZSkgIT09ICdvYmplY3QnKSB7XG4gICAgICAgIGVycm9ycy5jb2xsZWN0KHJvcy5wcm9wZXJ0eVZhbGlkYXRvcignZG9tYWluVHlwZScsIHJvcy52YWxpZGF0ZUFsbG93ZWRWYWx1ZXMpKHtcbiAgICAgICAgICBkYXRhOiBwcm9wZXJ0aWVzLmRvbWFpblR5cGUsXG4gICAgICAgICAgYWxsb3dlZFZhbHVlczogW1wiYWxsXCIsXCJvbmVcIixcIm11bHRpcGxlXCJdLFxuICAgICAgICB9KSk7XG4gICAgfVxuICAgIGVycm9ycy5jb2xsZWN0KHJvcy5wcm9wZXJ0eVZhbGlkYXRvcignZG9tYWluVHlwZScsIHJvcy52YWxpZGF0ZVN0cmluZykocHJvcGVydGllcy5kb21haW5UeXBlKSk7XG4gICAgaWYocHJvcGVydGllcy5zZXJ2aWNlICYmICh0eXBlb2YgcHJvcGVydGllcy5zZXJ2aWNlKSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgZXJyb3JzLmNvbGxlY3Qocm9zLnByb3BlcnR5VmFsaWRhdG9yKCdzZXJ2aWNlJywgcm9zLnZhbGlkYXRlQWxsb3dlZFZhbHVlcykoe1xuICAgICAgICAgIGRhdGE6IHByb3BlcnRpZXMuc2VydmljZSxcbiAgICAgICAgICBhbGxvd2VkVmFsdWVzOiBbXCJWaXBQcm9kdWN0XCIsXCJOb05lZWRcIixcIkV4cGVkaXRlZFByb2R1Y3RcIixcIkRlcGxveVByb2R1Y3RcIixcIlNNMkRlcGxveVByb2R1Y3RcIl0sXG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgZXJyb3JzLmNvbGxlY3Qocm9zLnByb3BlcnR5VmFsaWRhdG9yKCdzZXJ2aWNlJywgcm9zLnZhbGlkYXRlU3RyaW5nKShwcm9wZXJ0aWVzLnNlcnZpY2UpKTtcbiAgICBpZihwcm9wZXJ0aWVzLnBlcmlvZCAmJiAodHlwZW9mIHByb3BlcnRpZXMucGVyaW9kKSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgZXJyb3JzLmNvbGxlY3Qocm9zLnByb3BlcnR5VmFsaWRhdG9yKCdwZXJpb2QnLCByb3MudmFsaWRhdGVSYW5nZSkoe1xuICAgICAgICAgICAgZGF0YTogcHJvcGVydGllcy5wZXJpb2QsXG4gICAgICAgICAgICBtaW46IDEsXG4gICAgICAgICAgICBtYXg6IDMsXG4gICAgICAgICAgfSkpO1xuICAgIH1cbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ3BlcmlvZCcsIHJvcy52YWxpZGF0ZU51bWJlcikocHJvcGVydGllcy5wZXJpb2QpKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ2NlcnRUeXBlJywgcm9zLnJlcXVpcmVkVmFsaWRhdG9yKShwcm9wZXJ0aWVzLmNlcnRUeXBlKSk7XG4gICAgaWYocHJvcGVydGllcy5jZXJ0VHlwZSAmJiAodHlwZW9mIHByb3BlcnRpZXMuY2VydFR5cGUpICE9PSAnb2JqZWN0Jykge1xuICAgICAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ2NlcnRUeXBlJywgcm9zLnZhbGlkYXRlQWxsb3dlZFZhbHVlcykoe1xuICAgICAgICAgIGRhdGE6IHByb3BlcnRpZXMuY2VydFR5cGUsXG4gICAgICAgICAgYWxsb3dlZFZhbHVlczogW1wiRFZcIixcIk9WXCIsXCJFVlwiXSxcbiAgICAgICAgfSkpO1xuICAgIH1cbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ2NlcnRUeXBlJywgcm9zLnZhbGlkYXRlU3RyaW5nKShwcm9wZXJ0aWVzLmNlcnRUeXBlKSk7XG4gICAgZXJyb3JzLmNvbGxlY3Qocm9zLnByb3BlcnR5VmFsaWRhdG9yKCdjZXJ0QnJhbmQnLCByb3MucmVxdWlyZWRWYWxpZGF0b3IpKHByb3BlcnRpZXMuY2VydEJyYW5kKSk7XG4gICAgaWYocHJvcGVydGllcy5jZXJ0QnJhbmQgJiYgKHR5cGVvZiBwcm9wZXJ0aWVzLmNlcnRCcmFuZCkgIT09ICdvYmplY3QnKSB7XG4gICAgICAgIGVycm9ycy5jb2xsZWN0KHJvcy5wcm9wZXJ0eVZhbGlkYXRvcignY2VydEJyYW5kJywgcm9zLnZhbGlkYXRlQWxsb3dlZFZhbHVlcykoe1xuICAgICAgICAgIGRhdGE6IHByb3BlcnRpZXMuY2VydEJyYW5kLFxuICAgICAgICAgIGFsbG93ZWRWYWx1ZXM6IFtcIlJhcGlkXCIsXCJHbG9iYWxzaWduXCIsXCJ2VHJ1c1wiLFwiV29zaWduXCIsXCJEaWdpY2VydFwiLFwiRGlnaWNlcnQgcHJvXCIsXCJHZW90cnVzdFwiLFwiQ0ZDQVwiXSxcbiAgICAgICAgfSkpO1xuICAgIH1cbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ2NlcnRCcmFuZCcsIHJvcy52YWxpZGF0ZVN0cmluZykocHJvcGVydGllcy5jZXJ0QnJhbmQpKTtcbiAgICByZXR1cm4gZXJyb3JzLndyYXAoJ3N1cHBsaWVkIHByb3BlcnRpZXMgbm90IGNvcnJlY3QgZm9yIFwiUm9zT3JkZXJQcm9wc1wiJyk7XG59XG5cbi8qKlxuICogUmVuZGVycyB0aGUgQWxpQ2xvdWQgUk9TIFJlc291cmNlIHByb3BlcnRpZXMgb2YgYW4gYEFMSVlVTjo6Q0FTOjpPcmRlcmAgcmVzb3VyY2VcbiAqXG4gKiBAcGFyYW0gcHJvcGVydGllcyAtIHRoZSBUeXBlU2NyaXB0IHByb3BlcnRpZXMgb2YgYSBgUm9zT3JkZXJQcm9wc2BcbiAqXG4gKiBAcmV0dXJucyB0aGUgQWxpQ2xvdWQgUk9TIFJlc291cmNlIHByb3BlcnRpZXMgb2YgYW4gYEFMSVlVTjo6Q0FTOjpPcmRlcmAgcmVzb3VyY2UuXG4gKi9cbi8vIEB0cy1pZ25vcmUgVFM2MTMzXG5mdW5jdGlvbiByb3NPcmRlclByb3BzVG9Sb3NUZW1wbGF0ZShwcm9wZXJ0aWVzOiBhbnksIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OiBib29sZWFuKTogYW55IHtcbiAgICBpZiAoIXJvcy5jYW5JbnNwZWN0KHByb3BlcnRpZXMpKSB7IHJldHVybiBwcm9wZXJ0aWVzOyB9XG4gICAgaWYoZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQpIHtcbiAgICAgICAgUm9zT3JkZXJQcm9wc1ZhbGlkYXRvcihwcm9wZXJ0aWVzKS5hc3NlcnRTdWNjZXNzKCk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICBDZXJ0QnJhbmQ6IHJvcy5zdHJpbmdUb1Jvc1RlbXBsYXRlKHByb3BlcnRpZXMuY2VydEJyYW5kKSxcbiAgICAgIENlcnRUeXBlOiByb3Muc3RyaW5nVG9Sb3NUZW1wbGF0ZShwcm9wZXJ0aWVzLmNlcnRUeXBlKSxcbiAgICAgIERvbWFpbkNudDogcm9zLm51bWJlclRvUm9zVGVtcGxhdGUocHJvcGVydGllcy5kb21haW5DbnQpLFxuICAgICAgRG9tYWluVHlwZTogcm9zLnN0cmluZ1RvUm9zVGVtcGxhdGUocHJvcGVydGllcy5kb21haW5UeXBlKSxcbiAgICAgIFBlcmlvZDogcm9zLm51bWJlclRvUm9zVGVtcGxhdGUocHJvcGVydGllcy5wZXJpb2QpLFxuICAgICAgU2VydmljZTogcm9zLnN0cmluZ1RvUm9zVGVtcGxhdGUocHJvcGVydGllcy5zZXJ2aWNlKSxcbiAgICB9O1xufVxuXG4vKipcbiAqIFRoaXMgY2xhc3MgaXMgYSBiYXNlIGVuY2Fwc3VsYXRpb24gYXJvdW5kIHRoZSBST1MgcmVzb3VyY2UgdHlwZSBgQUxJWVVOOjpDQVM6Ok9yZGVyYC5cbiAqIEBOb3RlIFRoaXMgY2xhc3MgZG9lcyBub3QgY29udGFpbiBhZGRpdGlvbmFsIGZ1bmN0aW9ucywgc28gaXQgaXMgcmVjb21tZW5kZWQgdG8gdXNlIHRoZSBgT3JkZXJgIGNsYXNzIGluc3RlYWQgb2YgdGhpcyBjbGFzcyBmb3IgYSBtb3JlIGNvbnZlbmllbnQgZGV2ZWxvcG1lbnQgZXhwZXJpZW5jZS5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvYWxpeXVuLWNhcy1vcmRlclxuICovXG5leHBvcnQgY2xhc3MgUm9zT3JkZXIgZXh0ZW5kcyByb3MuUm9zUmVzb3VyY2Uge1xuICAgIC8qKlxuICAgICAqIFRoZSByZXNvdXJjZSB0eXBlIG5hbWUgZm9yIHRoaXMgcmVzb3VyY2UgY2xhc3MuXG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyByZWFkb25seSBST1NfUkVTT1VSQ0VfVFlQRV9OQU1FID0gXCJBTElZVU46OkNBUzo6T3JkZXJcIjtcblxuICAgIHB1YmxpYyBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDogYm9vbGVhbjtcblxuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IGNlcnRCcmFuZDogQ2VydGlmaWNhdGUgYnJhbmQuIFZhbGlkIHZhbHVlczogUmFwaWQsIEdsb2JhbHNpZ24sIHZUcnVzLCBXb3NpZ24sIERpZ2ljZXJ0LCBEaWdpY2VydCBwcm8sIEdlb3RydXN0LCBDRkNBLlxuICAgICAqL1xuICAgIHB1YmxpYyBjZXJ0QnJhbmQ6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBjZXJ0VHlwZTogQ2VydGlmaWNhdGUgdHlwZS4gVmFsaWQgdmFsdWVzOiBEViwgT1YsIEVWLlxuICAgICAqL1xuICAgIHB1YmxpYyBjZXJ0VHlwZTogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IGRvbWFpbkNudDogTnVtYmVyIG9mIGRvbWFpbnMgdG8gYmUgaW5jbHVkZWQgaW4gdGhlIGNlcnRpZmljYXRlLiBWYWxpZCB2YWx1ZXM6IDEtNTAwLlxuICAgICAqL1xuICAgIHB1YmxpYyBkb21haW5DbnQ6IG51bWJlciB8IHJvcy5JUmVzb2x2YWJsZSB8IHVuZGVmaW5lZDtcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBkb21haW5UeXBlOiBEb21haW4gdHlwZS4gVmFsaWQgdmFsdWVzOiBvbmUsIGFsbCwgbXVsdGlwbGUuXG4gICAgICovXG4gICAgcHVibGljIGRvbWFpblR5cGU6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZSB8IHVuZGVmaW5lZDtcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBwZXJpb2Q6IFNlcnZpY2UgdGltZSBvZiB0aGUgY2VydGlmaWNhdGUsIGluIHllYXIuIFZhbGlkIHZhbHVlczogMSwgMiwgMy5cbiAgICAgKiBOb3RlOiBTdGFydGluZyBTZXB0ZW1iZXIgMSwgMjAyMCwgY2VydGlmaWNhdGVzIGlzc3VlZCBieSBjYXMgYXJvdW5kIHRoZSB3b3JsZCB3aWxsIGJlIHZhbGlkIGZvciBhIG1heGltdW0gb2YgMSB5ZWFyLlxuICAgICAqL1xuICAgIHB1YmxpYyBwZXJpb2Q6IG51bWJlciB8IHJvcy5JUmVzb2x2YWJsZSB8IHVuZGVmaW5lZDtcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBzZXJ2aWNlOiBXaGV0aGVyIGVuYWJsZSBvdGhlciBzZXJ2aWNlLiBWYWxpZCB2YWx1ZXM6XG4gICAgICogLSBOb05lZWQ6IERvIG5vdCBhcHBseSBmb3IgYW55IHNlcnZpY2VzLlxuICAgICAqIC0gRXhwZWRpdGVkUHJvZHVjdDogUmVxdWVzdCBhc3Npc3RhbmNlIHNlcnZpY2VzLlxuICAgICAqIC0gRGVwbG95UHJvZHVjdDogRGVwbG95IHNlcnZpY2VzLlxuICAgICAqIC0gU00yRGVwbG95UHJvZHVjdDogRGVwbG95IHNlcnZpY2VzIHdpdGggU00yIGVuY3J5cHRpb24uXG4gICAgICogLSBWaXBQcm9kdWN0OiBSZXF1ZXN0IGFzc2lzdGFuY2UgYW5kIGRlcGxveW1lbnQgc2VydmljZXMuXG4gICAgICogKipOb3RlOioqIFRoaXMgcGFyYW1ldGVyIGlzIG5vdCBzdXBwb3J0ZWQgYnkgaW50ZXJuYXRpb25hbCBzdGF0aW9ucy5cbiAgICAgKi9cbiAgICBwdWJsaWMgc2VydmljZTogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlIHwgdW5kZWZpbmVkO1xuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHNjb3BlIC0gc2NvcGUgaW4gd2hpY2ggdGhpcyByZXNvdXJjZSBpcyBkZWZpbmVkXG4gICAgICogQHBhcmFtIGlkICAgIC0gc2NvcGVkIGlkIG9mIHRoZSByZXNvdXJjZVxuICAgICAqIEBwYXJhbSBwcm9wcyAtIHJlc291cmNlIHByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihzY29wZTogcm9zLkNvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IFJvc09yZGVyUHJvcHMsIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OiBib29sZWFuKSB7XG4gICAgICAgIHN1cGVyKHNjb3BlLCBpZCwgeyB0eXBlOiBSb3NPcmRlci5ST1NfUkVTT1VSQ0VfVFlQRV9OQU1FLCBwcm9wZXJ0aWVzOiBwcm9wcyB9KTtcblxuICAgICAgICB0aGlzLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ID0gZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ7XG4gICAgICAgIHRoaXMuY2VydEJyYW5kID0gcHJvcHMuY2VydEJyYW5kO1xuICAgICAgICB0aGlzLmNlcnRUeXBlID0gcHJvcHMuY2VydFR5cGU7XG4gICAgICAgIHRoaXMuZG9tYWluQ250ID0gcHJvcHMuZG9tYWluQ250O1xuICAgICAgICB0aGlzLmRvbWFpblR5cGUgPSBwcm9wcy5kb21haW5UeXBlO1xuICAgICAgICB0aGlzLnBlcmlvZCA9IHByb3BzLnBlcmlvZDtcbiAgICAgICAgdGhpcy5zZXJ2aWNlID0gcHJvcHMuc2VydmljZTtcbiAgICB9XG5cblxuICAgIHByb3RlY3RlZCBnZXQgcm9zUHJvcGVydGllcygpOiB7IFtrZXk6IHN0cmluZ106IGFueSB9ICB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjZXJ0QnJhbmQ6IHRoaXMuY2VydEJyYW5kLFxuICAgICAgICAgICAgY2VydFR5cGU6IHRoaXMuY2VydFR5cGUsXG4gICAgICAgICAgICBkb21haW5DbnQ6IHRoaXMuZG9tYWluQ250LFxuICAgICAgICAgICAgZG9tYWluVHlwZTogdGhpcy5kb21haW5UeXBlLFxuICAgICAgICAgICAgcGVyaW9kOiB0aGlzLnBlcmlvZCxcbiAgICAgICAgICAgIHNlcnZpY2U6IHRoaXMuc2VydmljZSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcHJvdGVjdGVkIHJlbmRlclByb3BlcnRpZXMocHJvcHM6IHtba2V5OiBzdHJpbmddOiBhbnl9KTogeyBba2V5OiBzdHJpbmddOiBhbnkgfSAge1xuICAgICAgICByZXR1cm4gcm9zT3JkZXJQcm9wc1RvUm9zVGVtcGxhdGUocHJvcHMsIHRoaXMuZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBQcm9wZXJ0aWVzIGZvciBkZWZpbmluZyBhIGBSb3NTc2xDZXJ0aWZpY2F0ZWAuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2FsaXl1bi1jYXMtc3NsY2VydGlmaWNhdGVcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBSb3NTc2xDZXJ0aWZpY2F0ZVByb3BzIHtcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBjZXJ0QnJhbmQ6IENlcnRpZmljYXRlIGJyYW5kLiBWYWxpZCB2YWx1ZXM6IFJhcGlkLCBHbG9iYWxzaWduLCB2VHJ1cywgV29zaWduLCBEaWdpY2VydCwgRGlnaWNlcnQgcHJvLCBHZW90cnVzdCwgQ0ZDQS5cbiAgICAgKiAqKk5vdGU6KiogVGhpcyBwYXJhbWV0ZXIgbXVzdCBiZSBzcGVjaWZpZWQgYWxvbmcgd2l0aCBvciB3aXRob3V0IHRoZSBDZXJ0VHlwZSBhbmQgRG9tYWluVHlwIHBhcmFtZXRlcnMuXG4gICAgICovXG4gICAgcmVhZG9ubHkgY2VydEJyYW5kPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IGNlcnRUeXBlOiBDZXJ0aWZpY2F0ZSB0eXBlLiBWYWxpZCB2YWx1ZXM6IERWLCBPViwgRVYuXG4gICAgICogKipOb3RlOioqIFRoaXMgcGFyYW1ldGVyIG11c3QgYmUgc3BlY2lmaWVkIGFsb25nIHdpdGggb3Igd2l0aG91dCB0aGUgRG9tYWluVHlwZSBhbmQgQ2VydEJyYW5kIHBhcmFtZXRlcnMuXG4gICAgICovXG4gICAgcmVhZG9ubHkgY2VydFR5cGU/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgY29tcGFueU5hbWU6IFRoZSBuYW1lIG9mIHRoZSBjZXJ0aWZpY2F0ZSBhcHBsaWNhdGlvbiBjb21wYW55LlxuICAgICAqICoqTm90ZSoqOiBUaGlzIHBhcmFtZXRlciBpcyBvbmx5IGFwcGxpY2FibGUgd2hlbiBhcHBseWluZyBmb3IgT1YgY2VydGlmaWNhdGVzLlxuICAgICAqIFdoZW4gYXBwbHlpbmcgZm9yIE9WIGNlcnRpZmljYXRlLCBpZiB5b3Ugc2V0IHRoZSBjb21wYW55IG5hbWUgaGVyZSwgaXQgbWVhbnMgdGhhdCB0aGUgY29ycmVzcG9uZGluZyBjb21wYW55IGluZm9ybWF0aW9uIGluIHRoZSBpbmZvcm1hdGlvbiBtYW5hZ2VtZW50IG1vZHVsZSBpcyB1c2VkOyBJZiB5b3UgZG8gbm90IHNldCB0aGlzIHBhcmFtZXRlciwgaXQgaW5kaWNhdGVzIHRoYXQgdGhlIGxhdGVzdCBjb21wYW55IGluZm9ybWF0aW9uIGFkZGVkIGlzIHNlbGVjdGVkIGZyb20gdGhlIGluZm9ybWF0aW9uIG1hbmFnZW1lbnQgbW9kdWxlLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGNvbXBhbnlOYW1lPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IGNzcjogVGhlIGNvbnRlbnRzIG9mIGEgbWFudWFsbHkgZ2VuZXJhdGVkIENTUiBmaWxlIGZvciBhIGRvbWFpbiBuYW1lIHVzaW5nIHRoZSBPcGVuU1NMIG9yIEtleXRvb2wgdG9vbHMuIFRoZSBDU1Iga2V5IHR5cGUgbXVzdCBiZSBSU0Egb3IgRUNDLCBhbmQgdGhlIFJTQSBrZXkgbGVuZ3RoIG11c3QgYmUgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIDIwNDguIElmIHRoaXMgcGFyYW1ldGVyIGlzIG5vdCBzZXQsIHRoZSBDU1IgaXMgYXV0b21hdGljYWxseSBjcmVhdGVkIGZvciB5b3UgYnkgdGhlIFNTTCBjZXJ0aWZpY2F0ZSBzZXJ2aWNlLlxuICAgICAqIEEgQ1NSIChDZXJ0aWZpY2F0ZSBTaWduaW5nIFJlcXVlc3QpIGlzIGEgY2VydGlmaWNhdGUgc2lnbmluZyByZXF1ZXN0IGZpbGUgdGhhdCBjb250YWlucyBpbmZvcm1hdGlvbiBhYm91dCB5b3VyIHNlcnZlciBhbmQgeW91ciBjb21wYW55LiBXaGVuIHlvdSBhcHBseSBmb3IgYSBjZXJ0aWZpY2F0ZSwgeW91IHdpbGwgbmVlZCB0byBzdWJtaXQgdGhlIENTUiBmaWxlIG9mIHlvdXIgY2VydGlmaWNhdGUgdG8gdGhlIENBIGNlcnRpZmljYXRpb24gYXV0aG9yaXR5IGZvciByZXZpZXcuIEFmdGVyIHRoZSBDQSBjZW50ZXIgc2lnbnMgdGhlIENTUiBmaWxlIHdpdGggdGhlIHJvb3QgY2VydGlmaWNhdGUncyBwcml2YXRlIGtleSwgaXQgd2lsbCBnZW5lcmF0ZSB0aGUgY2VydGlmaWNhdGUgcHVibGljIGtleSBmaWxlICh0aGF0IGlzLCB0aGUgU1NMIGNlcnRpZmljYXRlIGlzc3VlZCB0byB5b3UpLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGNzcj86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBkb21haW5zOiBUaGUgZG9tYWluIHRvIGJpbmQgdGhlIGNlcnRpZmljYXRlIHRvLiBUaGUgc3BlY2lmaWMgcmVxdWlyZW1lbnRzIGFyZSBhcyBmb2xsb3dzOlxuICAgICAqIC0gU3VwcG9ydHMgc2luZ2xlIG9yIHdpbGRjYXJkIGRvbWFpbnMgKGUuZy4sICouYWxpeXVuZG9jLmNvbSkuXG4gICAgICogLSBNdWx0aXBsZSBkb21haW5zIGFyZSBzdXBwb3J0ZWQuIFlvdSBjYW4gc2V0IHVwIHRvIDUgZG9tYWlucy5cbiAgICAgKiAtIElmIHlvdSBzZXQgbW9yZSB0aGFuIG9uZSBkb21haW4gbmFtZSwgdGhlIG11bHRpcGxlIGRvbWFpbnMgY2FuIG9ubHkgYmUgc2luZ2xlIGRvbWFpbiBuYW1lIG9yIHdpbGRjYXJkIGRvbWFpbiBuYW1lLCBub3QgYm90aCBzaW5nbGUgZG9tYWluIG5hbWUgYW5kIHdpbGRjYXJkIGRvbWFpbiBuYW1lLlxuICAgICAqICoqTm90ZToqKiBUaGlzIGlzIHJlcXVpcmVkIHdoZW4gdGhlIGNlcnRpZmljYXRlIGlzIGJvdW5kIHRvIG1vcmUgdGhhbiBvbmUgaG9zdG5hbWUuIFRoaXMgcGFyYW1ldGVyIGlzIG5vdCBhbGxvd2VkIHRvIGJlIGVtcHR5IGF0IHRoZSBzYW1lIHRpbWUgYXMgdGhlIENzciBwYXJhbWV0ZXIuIElmIHlvdSBzZXQgYm90aCB0aGlzIHBhcmFtZXRlciBhbmQgdGhlIENzciBwYXJhbWV0ZXIsIHRha2UgdGhlIENOIGZpZWxkIHZhbHVlIGluIHRoZSBDc3IgYXMgdGhlIGRvbWFpbiBuYW1lIGZvciB0aGUgY2VydGlmaWNhdGUgdG8gYmluZCB0by5cbiAgICAgKi9cbiAgICByZWFkb25seSBkb21haW5zPzogQXJyYXk8c3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlPiB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBkb21haW5UeXBlOiBEb21haW4gdHlwZS4gVmFsaWQgdmFsdWVzOiBvbmUsIGFsbCwgbXVsdGlwbGUuXG4gICAgICogKipOb3RlOioqIFRoaXMgcGFyYW1ldGVyIG11c3QgYmUgc3BlY2lmaWVkIGFsb25nIHdpdGggb3Igd2l0aG91dCB0aGUgQ2VydFR5cGUgYW5kIENlcnRCcmFuZCBwYXJhbWV0ZXJzLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGRvbWFpblR5cGU/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgZW1haWw6IFRoZSBhcHBsaWNhbnQncyBlbWFpbC5cbiAgICAgKi9cbiAgICByZWFkb25seSBlbWFpbD86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBwaG9uZTogVGhlIGFwcGxpY2FudCdzIG1vYmlsZSBwaG9uZSBudW1iZXIuIEEgQ0Egb2ZmaWNpYWwgbWF5IGNvbnRhY3QgeW91IGF0IHRoaXMgbnVtYmVyIHRvIHZlcmlmeSB5b3VyIGNlcnRpZmljYXRlIHJlcXVlc3QuXG4gICAgICovXG4gICAgcmVhZG9ubHkgcGhvbmU/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgcHJvZHVjdENvZGU6IFNwZWNpZmljYXRpb24gb2YgdGhlIGNlcnRpZmljYXRlIHRvIGFwcGx5IGZvci4gVmFsdWU6XG4gICAgICogLSBkaWdpY2VydC1mcmVlLTEtZnJlZSAoZGVmYXVsdCkgOiBUaGlzIGluZGljYXRlcyBEaWdpQ2VydCBEViBzaW5nbGUtZG9tYWluIGNlcnRpZmljYXRlcyAoZnJlZSAzLW1vbnRoIGNlcnRpZmljYXRlcykuXG4gICAgICogLSBzeW1hbnRlYy1mcmVlIDEtZnJlZTogU3RhbmRzIGZvciBEaWdpQ2VydCBEViBmcmVlIHNpbmdsZS1kb21haW4gY2VydGlmaWNhdGUgKDEteWVhciBmcmVlIGNlcnRpZmljYXRlKS5cbiAgICAgKiAtIHN5bWFudGVjLWR2LTEtc3RhcnRlcjogVGhpcyByZXByZXNlbnRzIHRoZSBEaWdpQ2VydCBEViB3aWxkY2FyZCBkb21haW4gbmFtZSBjZXJ0aWZpY2F0ZS5cbiAgICAgKiAtIHN5bWFudGVjLW92LTEtcGVyc29uYWw6IFRoaXMgc3RhbmRzIGZvciBEaWdpQ2VydCBPViBzaW5nbGUtZG9tYWluIGNlcnRpZmljYXRlXG4gICAgICogLSBzeW1hbnRlYy1vdi13LXBlcnNvbmFsOiBUaGlzIHN0YW5kcyBmb3IgRGlnaUNlcnQgT1Ygd2lsZGNhcmQgZG9tYWluIG5hbWUgY2VydGlmaWNhdGUuXG4gICAgICogLSBnZW90cnVzdC1kdi0xLXN0YXJ0ZXI6IFRoaXMgcmVwcmVzZW50cyB0aGUgR2VvVHJ1c3QgRFYgc2luZ2xlLWRvbWFpbiBjZXJ0aWZpY2F0ZS5cbiAgICAgKiAtIGdlb3RydXN0LWR2LXctc3RhcnRlcjogVGhpcyByZXByZXNlbnRzIHRoZSBHZW9UcnVzdCBEViB3aWxkY2FyZCBkb21haW4gbmFtZSBjZXJ0aWZpY2F0ZS5cbiAgICAgKiAtIGdlb3RydXN0LW92LTEtcGVyc29uYWw6IFRoaXMgc3RhbmRzIGZvciBHZW9UcnVzdCBPViBzaW5nbGUtZG9tYWluIGNlcnRpZmljYXRlLlxuICAgICAqIC0gZ2VvdHJ1c3Qtb3Ytdy1wZXJzb25hbDogVGhpcyByZXByZXNlbnRzIHRoZSBHZW9UcnVzdCBPViB3aWxkY2FyZCBkb21haW4gbmFtZSBjZXJ0aWZpY2F0ZS5cbiAgICAgKiAtIGdsb2JhbHNpZ24tZHYtMS1wZXJzb25hbDogVGhpcyBzdGFuZHMgZm9yIEdsb2JhbFNpZ24gRFYgc2luZ2xlLWRvbWFpbiBjZXJ0aWZpY2F0ZS5cbiAgICAgKiAtIGdsb2JhbHNpZ24tZHYtdy1hZHZhbmNlZDogVGhpcyBzdGFuZHMgZm9yIEdsb2JhbFNpZ24gRFYgd2lsZGNhcmQgZG9tYWluIG5hbWUgY2VydGlmaWNhdGUuXG4gICAgICogLSBnbG9iYWxzaWduLW92LTEtcGVyc29uYWw6IFRoaXMgc3RhbmRzIGZvciBHbG9iYWxTaWduIE9WIHNpbmdsZS1kb21haW4gY2VydGlmaWNhdGUuXG4gICAgICogLSBnbG9iYWxzaWduLW92LXctYWR2YW5jZWQ6IFRoaXMgcmVwcmVzZW50cyB0aGUgR2xvYmFsU2lnbiBPViB3aWxkY2FyZCBkb21haW4gbmFtZSBjZXJ0aWZpY2F0ZS5cbiAgICAgKiAtIGNmY2Etb3YtMS1wZXJzb25hbDogVGhpcyBzdGFuZHMgZm9yIENGQ0EgT1Ygc2luZ2xlIGRvbWFpbiBjZXJ0aWZpY2F0ZVxuICAgICAqIC0gY2ZjYS1ldi13LWFkdmFuY2VkOiBUaGlzIHN0YW5kcyBmb3IgQ0ZDQSBPViB3aWxkY2FyZCBkb21haW4gbmFtZSBjZXJ0aWZpY2F0ZS5cbiAgICAgKiAqKk5vdGU6KiogSWYgeW91IHNwZWNpZnkgdGhpcyBwYXJhbWV0ZXIsIHlvdSBkbyBub3QgbmVlZCB0byBzcGVjaWZ5IHRoZSBEb21haW5UeXBlLCBDZXJ0VHlwZSwgYW5kIENlcnRCcmFuZCBwYXJhbWV0ZXJzOyBvdGhlcndpc2UsIHRoaXMgcGFyYW1ldGVyIHdpbGwgcHJldmFpbC5cbiAgICAgKi9cbiAgICByZWFkb25seSBwcm9kdWN0Q29kZT86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSB1c2VybmFtZTogVGhlIGFwcGxpY2FudCdzIG5hbWUuXG4gICAgICovXG4gICAgcmVhZG9ubHkgdXNlcm5hbWU/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgdmFsaWRhdGVUeXBlOiBIb3cgZG9tYWluIG93bmVyc2hpcCBpcyB2ZXJpZmllZC4gVmFsaWQgdmFsdWVzOlxuICAgICAqIC0gRE5TOiBETlMgdmFsaWRhdGlvbiBUaGUgb3duZXJzaGlwIG9mIHRoZSBkb21haW4gbmFtZSBpcyB2ZXJpZmllZCBieSBhZGRpbmcgYSBUWFQgdHlwZSBETlMgcmVjb3JkIHRvIHRoZSBkb21haW4gbmFtZSdzIEROUyBtYW5hZ2VtZW50IHBsYXRmb3JtLiBZb3UgbmVlZCBhZG1pbmlzdHJhdGl2ZSBwZXJtaXNzaW9uIGZvciBkb21haW4gcmVzb2x1dGlvbiB0byBjb21wbGV0ZSB2YWxpZGF0aW9uLlxuICAgICAqIC0gRklMRTogRmlsZSB2YWxpZGF0aW9uIE93bmVyc2hpcCBvZiBhIGRvbWFpbiBuYW1lIGlzIHZlcmlmaWVkIGJ5IGNyZWF0aW5nIGEgc3BlY2lmaWVkIGZpbGUgb24gdGhlIGRvbWFpbiBuYW1lIHNlcnZlci4gWW91IG5lZWQgYWRtaW5pc3RyYXRvciBhY2Nlc3MgdG8geW91ciBkb21haW4gbmFtZSBzZXJ2ZXIgdG8gY29tcGxldGUgdmFsaWRhdGlvbi5cbiAgICAgKi9cbiAgICByZWFkb25seSB2YWxpZGF0ZVR5cGU/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIHdoZXRoZXIgdGhlIGdpdmVuIHByb3BlcnRpZXMgbWF0Y2ggdGhvc2Ugb2YgYSBgUm9zU3NsQ2VydGlmaWNhdGVQcm9wc2BcbiAqXG4gKiBAcGFyYW0gcHJvcGVydGllcyAtIHRoZSBUeXBlU2NyaXB0IHByb3BlcnRpZXMgb2YgYSBgUm9zU3NsQ2VydGlmaWNhdGVQcm9wc2BcbiAqXG4gKiBAcmV0dXJucyB0aGUgcmVzdWx0IG9mIHRoZSB2YWxpZGF0aW9uLlxuICovXG5mdW5jdGlvbiBSb3NTc2xDZXJ0aWZpY2F0ZVByb3BzVmFsaWRhdG9yKHByb3BlcnRpZXM6IGFueSk6IHJvcy5WYWxpZGF0aW9uUmVzdWx0IHtcbiAgICBpZiAoIXJvcy5jYW5JbnNwZWN0KHByb3BlcnRpZXMpKSB7IHJldHVybiByb3MuVkFMSURBVElPTl9TVUNDRVNTOyB9XG4gICAgY29uc3QgZXJyb3JzID0gbmV3IHJvcy5WYWxpZGF0aW9uUmVzdWx0cygpO1xuICAgIGlmKHByb3BlcnRpZXMuZG9tYWlucyAmJiAoQXJyYXkuaXNBcnJheShwcm9wZXJ0aWVzLmRvbWFpbnMpIHx8ICh0eXBlb2YgcHJvcGVydGllcy5kb21haW5zKSA9PT0gJ3N0cmluZycpKSB7XG4gICAgICAgIGVycm9ycy5jb2xsZWN0KHJvcy5wcm9wZXJ0eVZhbGlkYXRvcignZG9tYWlucycsIHJvcy52YWxpZGF0ZUxlbmd0aCkoe1xuICAgICAgICAgICAgZGF0YTogcHJvcGVydGllcy5kb21haW5zLmxlbmd0aCxcbiAgICAgICAgICAgIG1pbjogMSxcbiAgICAgICAgICAgIG1heDogNSxcbiAgICAgICAgICB9KSk7XG4gICAgfVxuICAgIGVycm9ycy5jb2xsZWN0KHJvcy5wcm9wZXJ0eVZhbGlkYXRvcignZG9tYWlucycsIHJvcy5saXN0VmFsaWRhdG9yKHJvcy52YWxpZGF0ZVN0cmluZykpKHByb3BlcnRpZXMuZG9tYWlucykpO1xuICAgIGVycm9ycy5jb2xsZWN0KHJvcy5wcm9wZXJ0eVZhbGlkYXRvcignY29tcGFueU5hbWUnLCByb3MudmFsaWRhdGVTdHJpbmcpKHByb3BlcnRpZXMuY29tcGFueU5hbWUpKTtcbiAgICBpZihwcm9wZXJ0aWVzLmRvbWFpblR5cGUgJiYgKHR5cGVvZiBwcm9wZXJ0aWVzLmRvbWFpblR5cGUpICE9PSAnb2JqZWN0Jykge1xuICAgICAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ2RvbWFpblR5cGUnLCByb3MudmFsaWRhdGVBbGxvd2VkVmFsdWVzKSh7XG4gICAgICAgICAgZGF0YTogcHJvcGVydGllcy5kb21haW5UeXBlLFxuICAgICAgICAgIGFsbG93ZWRWYWx1ZXM6IFtcImFsbFwiLFwib25lXCIsXCJtdWx0aXBsZVwiXSxcbiAgICAgICAgfSkpO1xuICAgIH1cbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ2RvbWFpblR5cGUnLCByb3MudmFsaWRhdGVTdHJpbmcpKHByb3BlcnRpZXMuZG9tYWluVHlwZSkpO1xuICAgIGVycm9ycy5jb2xsZWN0KHJvcy5wcm9wZXJ0eVZhbGlkYXRvcignZW1haWwnLCByb3MudmFsaWRhdGVTdHJpbmcpKHByb3BlcnRpZXMuZW1haWwpKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ2NzcicsIHJvcy52YWxpZGF0ZVN0cmluZykocHJvcGVydGllcy5jc3IpKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ3VzZXJuYW1lJywgcm9zLnZhbGlkYXRlU3RyaW5nKShwcm9wZXJ0aWVzLnVzZXJuYW1lKSk7XG4gICAgZXJyb3JzLmNvbGxlY3Qocm9zLnByb3BlcnR5VmFsaWRhdG9yKCdwcm9kdWN0Q29kZScsIHJvcy52YWxpZGF0ZVN0cmluZykocHJvcGVydGllcy5wcm9kdWN0Q29kZSkpO1xuICAgIGVycm9ycy5jb2xsZWN0KHJvcy5wcm9wZXJ0eVZhbGlkYXRvcigncGhvbmUnLCByb3MudmFsaWRhdGVTdHJpbmcpKHByb3BlcnRpZXMucGhvbmUpKTtcbiAgICBpZihwcm9wZXJ0aWVzLmNlcnRUeXBlICYmICh0eXBlb2YgcHJvcGVydGllcy5jZXJ0VHlwZSkgIT09ICdvYmplY3QnKSB7XG4gICAgICAgIGVycm9ycy5jb2xsZWN0KHJvcy5wcm9wZXJ0eVZhbGlkYXRvcignY2VydFR5cGUnLCByb3MudmFsaWRhdGVBbGxvd2VkVmFsdWVzKSh7XG4gICAgICAgICAgZGF0YTogcHJvcGVydGllcy5jZXJ0VHlwZSxcbiAgICAgICAgICBhbGxvd2VkVmFsdWVzOiBbXCJEVlwiLFwiT1ZcIixcIkVWXCJdLFxuICAgICAgICB9KSk7XG4gICAgfVxuICAgIGVycm9ycy5jb2xsZWN0KHJvcy5wcm9wZXJ0eVZhbGlkYXRvcignY2VydFR5cGUnLCByb3MudmFsaWRhdGVTdHJpbmcpKHByb3BlcnRpZXMuY2VydFR5cGUpKTtcbiAgICBpZihwcm9wZXJ0aWVzLmNlcnRCcmFuZCAmJiAodHlwZW9mIHByb3BlcnRpZXMuY2VydEJyYW5kKSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgZXJyb3JzLmNvbGxlY3Qocm9zLnByb3BlcnR5VmFsaWRhdG9yKCdjZXJ0QnJhbmQnLCByb3MudmFsaWRhdGVBbGxvd2VkVmFsdWVzKSh7XG4gICAgICAgICAgZGF0YTogcHJvcGVydGllcy5jZXJ0QnJhbmQsXG4gICAgICAgICAgYWxsb3dlZFZhbHVlczogW1wiUmFwaWRcIixcIkdsb2JhbHNpZ25cIixcInZUcnVzXCIsXCJXb3NpZ25cIixcIkRpZ2ljZXJ0XCIsXCJEaWdpY2VydCBwcm9cIixcIkdlb3RydXN0XCIsXCJDRkNBXCJdLFxuICAgICAgICB9KSk7XG4gICAgfVxuICAgIGVycm9ycy5jb2xsZWN0KHJvcy5wcm9wZXJ0eVZhbGlkYXRvcignY2VydEJyYW5kJywgcm9zLnZhbGlkYXRlU3RyaW5nKShwcm9wZXJ0aWVzLmNlcnRCcmFuZCkpO1xuICAgIGlmKHByb3BlcnRpZXMudmFsaWRhdGVUeXBlICYmICh0eXBlb2YgcHJvcGVydGllcy52YWxpZGF0ZVR5cGUpICE9PSAnb2JqZWN0Jykge1xuICAgICAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ3ZhbGlkYXRlVHlwZScsIHJvcy52YWxpZGF0ZUFsbG93ZWRWYWx1ZXMpKHtcbiAgICAgICAgICBkYXRhOiBwcm9wZXJ0aWVzLnZhbGlkYXRlVHlwZSxcbiAgICAgICAgICBhbGxvd2VkVmFsdWVzOiBbXCJETlNcIixcIkZJTEVcIl0sXG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgZXJyb3JzLmNvbGxlY3Qocm9zLnByb3BlcnR5VmFsaWRhdG9yKCd2YWxpZGF0ZVR5cGUnLCByb3MudmFsaWRhdGVTdHJpbmcpKHByb3BlcnRpZXMudmFsaWRhdGVUeXBlKSk7XG4gICAgcmV0dXJuIGVycm9ycy53cmFwKCdzdXBwbGllZCBwcm9wZXJ0aWVzIG5vdCBjb3JyZWN0IGZvciBcIlJvc1NzbENlcnRpZmljYXRlUHJvcHNcIicpO1xufVxuXG4vKipcbiAqIFJlbmRlcnMgdGhlIEFsaUNsb3VkIFJPUyBSZXNvdXJjZSBwcm9wZXJ0aWVzIG9mIGFuIGBBTElZVU46OkNBUzo6U3NsQ2VydGlmaWNhdGVgIHJlc291cmNlXG4gKlxuICogQHBhcmFtIHByb3BlcnRpZXMgLSB0aGUgVHlwZVNjcmlwdCBwcm9wZXJ0aWVzIG9mIGEgYFJvc1NzbENlcnRpZmljYXRlUHJvcHNgXG4gKlxuICogQHJldHVybnMgdGhlIEFsaUNsb3VkIFJPUyBSZXNvdXJjZSBwcm9wZXJ0aWVzIG9mIGFuIGBBTElZVU46OkNBUzo6U3NsQ2VydGlmaWNhdGVgIHJlc291cmNlLlxuICovXG4vLyBAdHMtaWdub3JlIFRTNjEzM1xuZnVuY3Rpb24gcm9zU3NsQ2VydGlmaWNhdGVQcm9wc1RvUm9zVGVtcGxhdGUocHJvcGVydGllczogYW55LCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDogYm9vbGVhbik6IGFueSB7XG4gICAgaWYgKCFyb3MuY2FuSW5zcGVjdChwcm9wZXJ0aWVzKSkgeyByZXR1cm4gcHJvcGVydGllczsgfVxuICAgIGlmKGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50KSB7XG4gICAgICAgIFJvc1NzbENlcnRpZmljYXRlUHJvcHNWYWxpZGF0b3IocHJvcGVydGllcykuYXNzZXJ0U3VjY2VzcygpO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgQ2VydEJyYW5kOiByb3Muc3RyaW5nVG9Sb3NUZW1wbGF0ZShwcm9wZXJ0aWVzLmNlcnRCcmFuZCksXG4gICAgICBDZXJ0VHlwZTogcm9zLnN0cmluZ1RvUm9zVGVtcGxhdGUocHJvcGVydGllcy5jZXJ0VHlwZSksXG4gICAgICBDb21wYW55TmFtZTogcm9zLnN0cmluZ1RvUm9zVGVtcGxhdGUocHJvcGVydGllcy5jb21wYW55TmFtZSksXG4gICAgICBDc3I6IHJvcy5zdHJpbmdUb1Jvc1RlbXBsYXRlKHByb3BlcnRpZXMuY3NyKSxcbiAgICAgIERvbWFpbnM6IHJvcy5saXN0TWFwcGVyKHJvcy5zdHJpbmdUb1Jvc1RlbXBsYXRlKShwcm9wZXJ0aWVzLmRvbWFpbnMpLFxuICAgICAgRG9tYWluVHlwZTogcm9zLnN0cmluZ1RvUm9zVGVtcGxhdGUocHJvcGVydGllcy5kb21haW5UeXBlKSxcbiAgICAgIEVtYWlsOiByb3Muc3RyaW5nVG9Sb3NUZW1wbGF0ZShwcm9wZXJ0aWVzLmVtYWlsKSxcbiAgICAgIFBob25lOiByb3Muc3RyaW5nVG9Sb3NUZW1wbGF0ZShwcm9wZXJ0aWVzLnBob25lKSxcbiAgICAgIFByb2R1Y3RDb2RlOiByb3Muc3RyaW5nVG9Sb3NUZW1wbGF0ZShwcm9wZXJ0aWVzLnByb2R1Y3RDb2RlKSxcbiAgICAgIFVzZXJuYW1lOiByb3Muc3RyaW5nVG9Sb3NUZW1wbGF0ZShwcm9wZXJ0aWVzLnVzZXJuYW1lKSxcbiAgICAgIFZhbGlkYXRlVHlwZTogcm9zLnN0cmluZ1RvUm9zVGVtcGxhdGUocHJvcGVydGllcy52YWxpZGF0ZVR5cGUpLFxuICAgIH07XG59XG5cbi8qKlxuICogVGhpcyBjbGFzcyBpcyBhIGJhc2UgZW5jYXBzdWxhdGlvbiBhcm91bmQgdGhlIFJPUyByZXNvdXJjZSB0eXBlIGBBTElZVU46OkNBUzo6U3NsQ2VydGlmaWNhdGVgLlxuICogQE5vdGUgVGhpcyBjbGFzcyBkb2VzIG5vdCBjb250YWluIGFkZGl0aW9uYWwgZnVuY3Rpb25zLCBzbyBpdCBpcyByZWNvbW1lbmRlZCB0byB1c2UgdGhlIGBTc2xDZXJ0aWZpY2F0ZWAgY2xhc3MgaW5zdGVhZCBvZiB0aGlzIGNsYXNzIGZvciBhIG1vcmUgY29udmVuaWVudCBkZXZlbG9wbWVudCBleHBlcmllbmNlLlxuICogU2VlIGh0dHBzOi8vd3d3LmFsaWJhYmFjbG91ZC5jb20vaGVscC9yb3MvZGV2ZWxvcGVyLXJlZmVyZW5jZS9hbGl5dW4tY2FzLXNzbGNlcnRpZmljYXRlXG4gKi9cbmV4cG9ydCBjbGFzcyBSb3NTc2xDZXJ0aWZpY2F0ZSBleHRlbmRzIHJvcy5Sb3NSZXNvdXJjZSB7XG4gICAgLyoqXG4gICAgICogVGhlIHJlc291cmNlIHR5cGUgbmFtZSBmb3IgdGhpcyByZXNvdXJjZSBjbGFzcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IFJPU19SRVNPVVJDRV9UWVBFX05BTUUgPSBcIkFMSVlVTjo6Q0FTOjpTc2xDZXJ0aWZpY2F0ZVwiO1xuXG4gICAgLyoqXG4gICAgICogQEF0dHJpYnV0ZSBDZXJ0aWZpY2F0ZUlkOiBUaGUgSUQgb2YgdGhlIGNlcnRpZmljYXRlIGlzc3VlZCB0byB5b3UuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJDZXJ0aWZpY2F0ZUlkOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBAQXR0cmlidXRlIE9yZGVySWQ6IFRoZSBJRCBvZiB0aGUgY2VydGlmaWNhdGUgb3JkZXIuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJPcmRlcklkOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICBwdWJsaWMgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6IGJvb2xlYW47XG5cblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBjZXJ0QnJhbmQ6IENlcnRpZmljYXRlIGJyYW5kLiBWYWxpZCB2YWx1ZXM6IFJhcGlkLCBHbG9iYWxzaWduLCB2VHJ1cywgV29zaWduLCBEaWdpY2VydCwgRGlnaWNlcnQgcHJvLCBHZW90cnVzdCwgQ0ZDQS5cbiAgICAgKiAqKk5vdGU6KiogVGhpcyBwYXJhbWV0ZXIgbXVzdCBiZSBzcGVjaWZpZWQgYWxvbmcgd2l0aCBvciB3aXRob3V0IHRoZSBDZXJ0VHlwZSBhbmQgRG9tYWluVHlwIHBhcmFtZXRlcnMuXG4gICAgICovXG4gICAgcHVibGljIGNlcnRCcmFuZDogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlIHwgdW5kZWZpbmVkO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IGNlcnRUeXBlOiBDZXJ0aWZpY2F0ZSB0eXBlLiBWYWxpZCB2YWx1ZXM6IERWLCBPViwgRVYuXG4gICAgICogKipOb3RlOioqIFRoaXMgcGFyYW1ldGVyIG11c3QgYmUgc3BlY2lmaWVkIGFsb25nIHdpdGggb3Igd2l0aG91dCB0aGUgRG9tYWluVHlwZSBhbmQgQ2VydEJyYW5kIHBhcmFtZXRlcnMuXG4gICAgICovXG4gICAgcHVibGljIGNlcnRUeXBlOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGUgfCB1bmRlZmluZWQ7XG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgY29tcGFueU5hbWU6IFRoZSBuYW1lIG9mIHRoZSBjZXJ0aWZpY2F0ZSBhcHBsaWNhdGlvbiBjb21wYW55LlxuICAgICAqICoqTm90ZSoqOiBUaGlzIHBhcmFtZXRlciBpcyBvbmx5IGFwcGxpY2FibGUgd2hlbiBhcHBseWluZyBmb3IgT1YgY2VydGlmaWNhdGVzLlxuICAgICAqIFdoZW4gYXBwbHlpbmcgZm9yIE9WIGNlcnRpZmljYXRlLCBpZiB5b3Ugc2V0IHRoZSBjb21wYW55IG5hbWUgaGVyZSwgaXQgbWVhbnMgdGhhdCB0aGUgY29ycmVzcG9uZGluZyBjb21wYW55IGluZm9ybWF0aW9uIGluIHRoZSBpbmZvcm1hdGlvbiBtYW5hZ2VtZW50IG1vZHVsZSBpcyB1c2VkOyBJZiB5b3UgZG8gbm90IHNldCB0aGlzIHBhcmFtZXRlciwgaXQgaW5kaWNhdGVzIHRoYXQgdGhlIGxhdGVzdCBjb21wYW55IGluZm9ybWF0aW9uIGFkZGVkIGlzIHNlbGVjdGVkIGZyb20gdGhlIGluZm9ybWF0aW9uIG1hbmFnZW1lbnQgbW9kdWxlLlxuICAgICAqL1xuICAgIHB1YmxpYyBjb21wYW55TmFtZTogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlIHwgdW5kZWZpbmVkO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IGNzcjogVGhlIGNvbnRlbnRzIG9mIGEgbWFudWFsbHkgZ2VuZXJhdGVkIENTUiBmaWxlIGZvciBhIGRvbWFpbiBuYW1lIHVzaW5nIHRoZSBPcGVuU1NMIG9yIEtleXRvb2wgdG9vbHMuIFRoZSBDU1Iga2V5IHR5cGUgbXVzdCBiZSBSU0Egb3IgRUNDLCBhbmQgdGhlIFJTQSBrZXkgbGVuZ3RoIG11c3QgYmUgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIDIwNDguIElmIHRoaXMgcGFyYW1ldGVyIGlzIG5vdCBzZXQsIHRoZSBDU1IgaXMgYXV0b21hdGljYWxseSBjcmVhdGVkIGZvciB5b3UgYnkgdGhlIFNTTCBjZXJ0aWZpY2F0ZSBzZXJ2aWNlLlxuICAgICAqIEEgQ1NSIChDZXJ0aWZpY2F0ZSBTaWduaW5nIFJlcXVlc3QpIGlzIGEgY2VydGlmaWNhdGUgc2lnbmluZyByZXF1ZXN0IGZpbGUgdGhhdCBjb250YWlucyBpbmZvcm1hdGlvbiBhYm91dCB5b3VyIHNlcnZlciBhbmQgeW91ciBjb21wYW55LiBXaGVuIHlvdSBhcHBseSBmb3IgYSBjZXJ0aWZpY2F0ZSwgeW91IHdpbGwgbmVlZCB0byBzdWJtaXQgdGhlIENTUiBmaWxlIG9mIHlvdXIgY2VydGlmaWNhdGUgdG8gdGhlIENBIGNlcnRpZmljYXRpb24gYXV0aG9yaXR5IGZvciByZXZpZXcuIEFmdGVyIHRoZSBDQSBjZW50ZXIgc2lnbnMgdGhlIENTUiBmaWxlIHdpdGggdGhlIHJvb3QgY2VydGlmaWNhdGUncyBwcml2YXRlIGtleSwgaXQgd2lsbCBnZW5lcmF0ZSB0aGUgY2VydGlmaWNhdGUgcHVibGljIGtleSBmaWxlICh0aGF0IGlzLCB0aGUgU1NMIGNlcnRpZmljYXRlIGlzc3VlZCB0byB5b3UpLlxuICAgICAqL1xuICAgIHB1YmxpYyBjc3I6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZSB8IHVuZGVmaW5lZDtcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBkb21haW5zOiBUaGUgZG9tYWluIHRvIGJpbmQgdGhlIGNlcnRpZmljYXRlIHRvLiBUaGUgc3BlY2lmaWMgcmVxdWlyZW1lbnRzIGFyZSBhcyBmb2xsb3dzOlxuICAgICAqIC0gU3VwcG9ydHMgc2luZ2xlIG9yIHdpbGRjYXJkIGRvbWFpbnMgKGUuZy4sICouYWxpeXVuZG9jLmNvbSkuXG4gICAgICogLSBNdWx0aXBsZSBkb21haW5zIGFyZSBzdXBwb3J0ZWQuIFlvdSBjYW4gc2V0IHVwIHRvIDUgZG9tYWlucy5cbiAgICAgKiAtIElmIHlvdSBzZXQgbW9yZSB0aGFuIG9uZSBkb21haW4gbmFtZSwgdGhlIG11bHRpcGxlIGRvbWFpbnMgY2FuIG9ubHkgYmUgc2luZ2xlIGRvbWFpbiBuYW1lIG9yIHdpbGRjYXJkIGRvbWFpbiBuYW1lLCBub3QgYm90aCBzaW5nbGUgZG9tYWluIG5hbWUgYW5kIHdpbGRjYXJkIGRvbWFpbiBuYW1lLlxuICAgICAqICoqTm90ZToqKiBUaGlzIGlzIHJlcXVpcmVkIHdoZW4gdGhlIGNlcnRpZmljYXRlIGlzIGJvdW5kIHRvIG1vcmUgdGhhbiBvbmUgaG9zdG5hbWUuIFRoaXMgcGFyYW1ldGVyIGlzIG5vdCBhbGxvd2VkIHRvIGJlIGVtcHR5IGF0IHRoZSBzYW1lIHRpbWUgYXMgdGhlIENzciBwYXJhbWV0ZXIuIElmIHlvdSBzZXQgYm90aCB0aGlzIHBhcmFtZXRlciBhbmQgdGhlIENzciBwYXJhbWV0ZXIsIHRha2UgdGhlIENOIGZpZWxkIHZhbHVlIGluIHRoZSBDc3IgYXMgdGhlIGRvbWFpbiBuYW1lIGZvciB0aGUgY2VydGlmaWNhdGUgdG8gYmluZCB0by5cbiAgICAgKi9cbiAgICBwdWJsaWMgZG9tYWluczogQXJyYXk8c3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlPiB8IHJvcy5JUmVzb2x2YWJsZSB8IHVuZGVmaW5lZDtcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBkb21haW5UeXBlOiBEb21haW4gdHlwZS4gVmFsaWQgdmFsdWVzOiBvbmUsIGFsbCwgbXVsdGlwbGUuXG4gICAgICogKipOb3RlOioqIFRoaXMgcGFyYW1ldGVyIG11c3QgYmUgc3BlY2lmaWVkIGFsb25nIHdpdGggb3Igd2l0aG91dCB0aGUgQ2VydFR5cGUgYW5kIENlcnRCcmFuZCBwYXJhbWV0ZXJzLlxuICAgICAqL1xuICAgIHB1YmxpYyBkb21haW5UeXBlOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGUgfCB1bmRlZmluZWQ7XG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgZW1haWw6IFRoZSBhcHBsaWNhbnQncyBlbWFpbC5cbiAgICAgKi9cbiAgICBwdWJsaWMgZW1haWw6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZSB8IHVuZGVmaW5lZDtcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBwaG9uZTogVGhlIGFwcGxpY2FudCdzIG1vYmlsZSBwaG9uZSBudW1iZXIuIEEgQ0Egb2ZmaWNpYWwgbWF5IGNvbnRhY3QgeW91IGF0IHRoaXMgbnVtYmVyIHRvIHZlcmlmeSB5b3VyIGNlcnRpZmljYXRlIHJlcXVlc3QuXG4gICAgICovXG4gICAgcHVibGljIHBob25lOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGUgfCB1bmRlZmluZWQ7XG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgcHJvZHVjdENvZGU6IFNwZWNpZmljYXRpb24gb2YgdGhlIGNlcnRpZmljYXRlIHRvIGFwcGx5IGZvci4gVmFsdWU6XG4gICAgICogLSBkaWdpY2VydC1mcmVlLTEtZnJlZSAoZGVmYXVsdCkgOiBUaGlzIGluZGljYXRlcyBEaWdpQ2VydCBEViBzaW5nbGUtZG9tYWluIGNlcnRpZmljYXRlcyAoZnJlZSAzLW1vbnRoIGNlcnRpZmljYXRlcykuXG4gICAgICogLSBzeW1hbnRlYy1mcmVlIDEtZnJlZTogU3RhbmRzIGZvciBEaWdpQ2VydCBEViBmcmVlIHNpbmdsZS1kb21haW4gY2VydGlmaWNhdGUgKDEteWVhciBmcmVlIGNlcnRpZmljYXRlKS5cbiAgICAgKiAtIHN5bWFudGVjLWR2LTEtc3RhcnRlcjogVGhpcyByZXByZXNlbnRzIHRoZSBEaWdpQ2VydCBEViB3aWxkY2FyZCBkb21haW4gbmFtZSBjZXJ0aWZpY2F0ZS5cbiAgICAgKiAtIHN5bWFudGVjLW92LTEtcGVyc29uYWw6IFRoaXMgc3RhbmRzIGZvciBEaWdpQ2VydCBPViBzaW5nbGUtZG9tYWluIGNlcnRpZmljYXRlXG4gICAgICogLSBzeW1hbnRlYy1vdi13LXBlcnNvbmFsOiBUaGlzIHN0YW5kcyBmb3IgRGlnaUNlcnQgT1Ygd2lsZGNhcmQgZG9tYWluIG5hbWUgY2VydGlmaWNhdGUuXG4gICAgICogLSBnZW90cnVzdC1kdi0xLXN0YXJ0ZXI6IFRoaXMgcmVwcmVzZW50cyB0aGUgR2VvVHJ1c3QgRFYgc2luZ2xlLWRvbWFpbiBjZXJ0aWZpY2F0ZS5cbiAgICAgKiAtIGdlb3RydXN0LWR2LXctc3RhcnRlcjogVGhpcyByZXByZXNlbnRzIHRoZSBHZW9UcnVzdCBEViB3aWxkY2FyZCBkb21haW4gbmFtZSBjZXJ0aWZpY2F0ZS5cbiAgICAgKiAtIGdlb3RydXN0LW92LTEtcGVyc29uYWw6IFRoaXMgc3RhbmRzIGZvciBHZW9UcnVzdCBPViBzaW5nbGUtZG9tYWluIGNlcnRpZmljYXRlLlxuICAgICAqIC0gZ2VvdHJ1c3Qtb3Ytdy1wZXJzb25hbDogVGhpcyByZXByZXNlbnRzIHRoZSBHZW9UcnVzdCBPViB3aWxkY2FyZCBkb21haW4gbmFtZSBjZXJ0aWZpY2F0ZS5cbiAgICAgKiAtIGdsb2JhbHNpZ24tZHYtMS1wZXJzb25hbDogVGhpcyBzdGFuZHMgZm9yIEdsb2JhbFNpZ24gRFYgc2luZ2xlLWRvbWFpbiBjZXJ0aWZpY2F0ZS5cbiAgICAgKiAtIGdsb2JhbHNpZ24tZHYtdy1hZHZhbmNlZDogVGhpcyBzdGFuZHMgZm9yIEdsb2JhbFNpZ24gRFYgd2lsZGNhcmQgZG9tYWluIG5hbWUgY2VydGlmaWNhdGUuXG4gICAgICogLSBnbG9iYWxzaWduLW92LTEtcGVyc29uYWw6IFRoaXMgc3RhbmRzIGZvciBHbG9iYWxTaWduIE9WIHNpbmdsZS1kb21haW4gY2VydGlmaWNhdGUuXG4gICAgICogLSBnbG9iYWxzaWduLW92LXctYWR2YW5jZWQ6IFRoaXMgcmVwcmVzZW50cyB0aGUgR2xvYmFsU2lnbiBPViB3aWxkY2FyZCBkb21haW4gbmFtZSBjZXJ0aWZpY2F0ZS5cbiAgICAgKiAtIGNmY2Etb3YtMS1wZXJzb25hbDogVGhpcyBzdGFuZHMgZm9yIENGQ0EgT1Ygc2luZ2xlIGRvbWFpbiBjZXJ0aWZpY2F0ZVxuICAgICAqIC0gY2ZjYS1ldi13LWFkdmFuY2VkOiBUaGlzIHN0YW5kcyBmb3IgQ0ZDQSBPViB3aWxkY2FyZCBkb21haW4gbmFtZSBjZXJ0aWZpY2F0ZS5cbiAgICAgKiAqKk5vdGU6KiogSWYgeW91IHNwZWNpZnkgdGhpcyBwYXJhbWV0ZXIsIHlvdSBkbyBub3QgbmVlZCB0byBzcGVjaWZ5IHRoZSBEb21haW5UeXBlLCBDZXJ0VHlwZSwgYW5kIENlcnRCcmFuZCBwYXJhbWV0ZXJzOyBvdGhlcndpc2UsIHRoaXMgcGFyYW1ldGVyIHdpbGwgcHJldmFpbC5cbiAgICAgKi9cbiAgICBwdWJsaWMgcHJvZHVjdENvZGU6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZSB8IHVuZGVmaW5lZDtcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSB1c2VybmFtZTogVGhlIGFwcGxpY2FudCdzIG5hbWUuXG4gICAgICovXG4gICAgcHVibGljIHVzZXJuYW1lOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGUgfCB1bmRlZmluZWQ7XG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgdmFsaWRhdGVUeXBlOiBIb3cgZG9tYWluIG93bmVyc2hpcCBpcyB2ZXJpZmllZC4gVmFsaWQgdmFsdWVzOlxuICAgICAqIC0gRE5TOiBETlMgdmFsaWRhdGlvbiBUaGUgb3duZXJzaGlwIG9mIHRoZSBkb21haW4gbmFtZSBpcyB2ZXJpZmllZCBieSBhZGRpbmcgYSBUWFQgdHlwZSBETlMgcmVjb3JkIHRvIHRoZSBkb21haW4gbmFtZSdzIEROUyBtYW5hZ2VtZW50IHBsYXRmb3JtLiBZb3UgbmVlZCBhZG1pbmlzdHJhdGl2ZSBwZXJtaXNzaW9uIGZvciBkb21haW4gcmVzb2x1dGlvbiB0byBjb21wbGV0ZSB2YWxpZGF0aW9uLlxuICAgICAqIC0gRklMRTogRmlsZSB2YWxpZGF0aW9uIE93bmVyc2hpcCBvZiBhIGRvbWFpbiBuYW1lIGlzIHZlcmlmaWVkIGJ5IGNyZWF0aW5nIGEgc3BlY2lmaWVkIGZpbGUgb24gdGhlIGRvbWFpbiBuYW1lIHNlcnZlci4gWW91IG5lZWQgYWRtaW5pc3RyYXRvciBhY2Nlc3MgdG8geW91ciBkb21haW4gbmFtZSBzZXJ2ZXIgdG8gY29tcGxldGUgdmFsaWRhdGlvbi5cbiAgICAgKi9cbiAgICBwdWJsaWMgdmFsaWRhdGVUeXBlOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGUgfCB1bmRlZmluZWQ7XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gc2NvcGUgLSBzY29wZSBpbiB3aGljaCB0aGlzIHJlc291cmNlIGlzIGRlZmluZWRcbiAgICAgKiBAcGFyYW0gaWQgICAgLSBzY29wZWQgaWQgb2YgdGhlIHJlc291cmNlXG4gICAgICogQHBhcmFtIHByb3BzIC0gcmVzb3VyY2UgcHJvcGVydGllc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiByb3MuQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogUm9zU3NsQ2VydGlmaWNhdGVQcm9wcywgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6IGJvb2xlYW4pIHtcbiAgICAgICAgc3VwZXIoc2NvcGUsIGlkLCB7IHR5cGU6IFJvc1NzbENlcnRpZmljYXRlLlJPU19SRVNPVVJDRV9UWVBFX05BTUUsIHByb3BlcnRpZXM6IHByb3BzIH0pO1xuICAgICAgICB0aGlzLmF0dHJDZXJ0aWZpY2F0ZUlkID0gdGhpcy5nZXRBdHQoJ0NlcnRpZmljYXRlSWQnKTtcbiAgICAgICAgdGhpcy5hdHRyT3JkZXJJZCA9IHRoaXMuZ2V0QXR0KCdPcmRlcklkJyk7XG5cbiAgICAgICAgdGhpcy5lbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCA9IGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50O1xuICAgICAgICB0aGlzLmNlcnRCcmFuZCA9IHByb3BzLmNlcnRCcmFuZDtcbiAgICAgICAgdGhpcy5jZXJ0VHlwZSA9IHByb3BzLmNlcnRUeXBlO1xuICAgICAgICB0aGlzLmNvbXBhbnlOYW1lID0gcHJvcHMuY29tcGFueU5hbWU7XG4gICAgICAgIHRoaXMuY3NyID0gcHJvcHMuY3NyO1xuICAgICAgICB0aGlzLmRvbWFpbnMgPSBwcm9wcy5kb21haW5zO1xuICAgICAgICB0aGlzLmRvbWFpblR5cGUgPSBwcm9wcy5kb21haW5UeXBlO1xuICAgICAgICB0aGlzLmVtYWlsID0gcHJvcHMuZW1haWw7XG4gICAgICAgIHRoaXMucGhvbmUgPSBwcm9wcy5waG9uZTtcbiAgICAgICAgdGhpcy5wcm9kdWN0Q29kZSA9IHByb3BzLnByb2R1Y3RDb2RlO1xuICAgICAgICB0aGlzLnVzZXJuYW1lID0gcHJvcHMudXNlcm5hbWU7XG4gICAgICAgIHRoaXMudmFsaWRhdGVUeXBlID0gcHJvcHMudmFsaWRhdGVUeXBlO1xuICAgIH1cblxuXG4gICAgcHJvdGVjdGVkIGdldCByb3NQcm9wZXJ0aWVzKCk6IHsgW2tleTogc3RyaW5nXTogYW55IH0gIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGNlcnRCcmFuZDogdGhpcy5jZXJ0QnJhbmQsXG4gICAgICAgICAgICBjZXJ0VHlwZTogdGhpcy5jZXJ0VHlwZSxcbiAgICAgICAgICAgIGNvbXBhbnlOYW1lOiB0aGlzLmNvbXBhbnlOYW1lLFxuICAgICAgICAgICAgY3NyOiB0aGlzLmNzcixcbiAgICAgICAgICAgIGRvbWFpbnM6IHRoaXMuZG9tYWlucyxcbiAgICAgICAgICAgIGRvbWFpblR5cGU6IHRoaXMuZG9tYWluVHlwZSxcbiAgICAgICAgICAgIGVtYWlsOiB0aGlzLmVtYWlsLFxuICAgICAgICAgICAgcGhvbmU6IHRoaXMucGhvbmUsXG4gICAgICAgICAgICBwcm9kdWN0Q29kZTogdGhpcy5wcm9kdWN0Q29kZSxcbiAgICAgICAgICAgIHVzZXJuYW1lOiB0aGlzLnVzZXJuYW1lLFxuICAgICAgICAgICAgdmFsaWRhdGVUeXBlOiB0aGlzLnZhbGlkYXRlVHlwZSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcHJvdGVjdGVkIHJlbmRlclByb3BlcnRpZXMocHJvcHM6IHtba2V5OiBzdHJpbmddOiBhbnl9KTogeyBba2V5OiBzdHJpbmddOiBhbnkgfSAge1xuICAgICAgICByZXR1cm4gcm9zU3NsQ2VydGlmaWNhdGVQcm9wc1RvUm9zVGVtcGxhdGUocHJvcHMsIHRoaXMuZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQpO1xuICAgIH1cbn1cbiJdfQ==