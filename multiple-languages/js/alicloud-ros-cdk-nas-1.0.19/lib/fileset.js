"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Fileset = exports.FilesetProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const nas_generated_1 = require("./nas.generated");
Object.defineProperty(exports, "FilesetProperty", { enumerable: true, get: function () { return nas_generated_1.RosFileset; } });
/**
 * A ROS resource type:  `ALIYUN::NAS::Fileset`
 */
class Fileset extends ros.Resource {
    /**
     * Create a new `ALIYUN::NAS::Fileset`.
     *
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosFileset = new nas_generated_1.RosFileset(this, id, {
            fileSystemPath: props.fileSystemPath,
            description: props.description,
            fileSystemId: props.fileSystemId,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosFileset;
        this.attrFileSystemId = rosFileset.attrFileSystemId;
        this.attrFileSystemPath = rosFileset.attrFileSystemPath;
        this.attrFsetId = rosFileset.attrFsetId;
    }
}
exports.Fileset = Fileset;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZXNldC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImZpbGVzZXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsOENBQThDO0FBQzlDLG1EQUE2QztBQUV0QixnR0FGZCwwQkFBVSxPQUVtQjtBQTZCdEM7O0dBRUc7QUFDSCxNQUFhLE9BQVEsU0FBUSxHQUFHLENBQUMsUUFBUTtJQXNCckM7Ozs7OztPQU1HO0lBQ0gsWUFBWSxLQUFvQixFQUFFLEVBQVUsRUFBRSxLQUFtQixFQUFFLG1DQUEyQyxJQUFJO1FBQzlHLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFakIsTUFBTSxVQUFVLEdBQUcsSUFBSSwwQkFBVSxDQUFDLElBQUksRUFBRSxFQUFFLEVBQUc7WUFDekMsY0FBYyxFQUFFLEtBQUssQ0FBQyxjQUFjO1lBQ3BDLFdBQVcsRUFBRSxLQUFLLENBQUMsV0FBVztZQUM5QixZQUFZLEVBQUUsS0FBSyxDQUFDLFlBQVk7U0FDbkMsRUFBRSxnQ0FBZ0MsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7UUFDcEYsSUFBSSxDQUFDLFFBQVEsR0FBRyxVQUFVLENBQUM7UUFDM0IsSUFBSSxDQUFDLGdCQUFnQixHQUFHLFVBQVUsQ0FBQyxnQkFBZ0IsQ0FBQztRQUNwRCxJQUFJLENBQUMsa0JBQWtCLEdBQUcsVUFBVSxDQUFDLGtCQUFrQixDQUFDO1FBQ3hELElBQUksQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDLFVBQVUsQ0FBQztJQUM1QyxDQUFDO0NBQ0o7QUExQ0QsMEJBMENDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcm9zIGZyb20gJ0BhbGljbG91ZC9yb3MtY2RrLWNvcmUnO1xuaW1wb3J0IHsgUm9zRmlsZXNldCB9IGZyb20gJy4vbmFzLmdlbmVyYXRlZCc7XG4vLyBHZW5lcmF0ZWQgZnJvbSB0aGUgQWxpQ2xvdWQgUk9TIFJlc291cmNlIFNwZWNpZmljYXRpb25cbmV4cG9ydCB7IFJvc0ZpbGVzZXQgYXMgRmlsZXNldFByb3BlcnR5IH07XG5cbi8qKlxuICogUHJvcGVydGllcyBmb3IgZGVmaW5pbmcgYSBgQUxJWVVOOjpOQVM6OkZpbGVzZXRgXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRmlsZXNldFByb3BzIHtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGZpbGVTeXN0ZW1JZDogRmlsZSBzeXN0ZW0gSUQuXG4gICAgICovXG4gICAgcmVhZG9ubHkgZmlsZVN5c3RlbUlkOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBmaWxlU3lzdGVtUGF0aDogVGhlIGFic29sdXRlIHBhdGggb2YgRmlsZXNldCB0byBiZSBjcmVhdGVkLlxuICAgICAqIFRoZSBwYXJlbnQgY2F0YWxvZyBvZiBzcGVjaWZpZWQgdGhlIGRpcmVjdG9yeSBtdXN0IGJlIGEgZGlyZWN0b3J5IGluIHRoZSBmaWxlIHN5c3RlbS5cbiAgICAgKiBUaGUgbGVuZ3RoIGlzIDIgdG8gMTAyNCBjaGFyYWN0ZXJzLlxuICAgICAqIFNwZWNpZnkgdGhlIGRpcmVjdG9yeSBtdXN0IHN0YXJ0IHdpdGggcG9zaXRpdmUgKC8pLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGZpbGVTeXN0ZW1QYXRoOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBkZXNjcmlwdGlvbjogRmlsZXNldCBkZXNjcmlwdGlvbiBpbmZvcm1hdGlvbi5cbiAgICAgKiBUaGUgbGVuZ3RoIGlzIDIgdG8gMTI4IEVuZ2xpc2ggb3IgQ2hpbmVzZSBjaGFyYWN0ZXJzLlxuICAgICAqIFN0YXJ0IHdpdGggYSBsb3dlcmNhc2UgbGV0dGVyIG9yIENoaW5lc2UsIGFuZCB5b3UgY2Fubm90IHN0YXJ0IHdpdGggaHR0cDovLyBhbmQgaHR0cHM6IC8vLlxuICAgICAqIEl0IGNhbiBjb250YWluIG51bWJlcnMsIGhhbGYtaG9ybiBjb2xvbiAoOiksIGRvd24gbGluZSAoXykgb3Igc2hvcnQgbGluZXMgKC0pLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGRlc2NyaXB0aW9uPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xufVxuXG4vKipcbiAqIEEgUk9TIHJlc291cmNlIHR5cGU6ICBgQUxJWVVOOjpOQVM6OkZpbGVzZXRgXG4gKi9cbmV4cG9ydCBjbGFzcyBGaWxlc2V0IGV4dGVuZHMgcm9zLlJlc291cmNlIHtcblxuICAgIC8qKlxuICAgICAqIEEgZmFjdG9yeSBtZXRob2QgdGhhdCBjcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIHRoaXMgY2xhc3MgZnJvbSBhbiBvYmplY3RcbiAgICAgKiBjb250YWluaW5nIHRoZSBwcm9wZXJ0aWVzIG9mIHRoaXMgUk9TIHJlc291cmNlLCB3aGljaCB3aWxsIGJlIGFzc2lnbmVkIHRvIFJPUyByZXNvdXJjZS5cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBGaWxlU3lzdGVtSWQ6IEZpbGUgc3lzdGVtIElELlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyRmlsZVN5c3RlbUlkOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgRmlsZVN5c3RlbVBhdGg6IEZpbGUgc3lzdGVtIHBhdGguXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJGaWxlU3lzdGVtUGF0aDogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIEZzZXRJZDogRmlsZXNldCBJRC5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckZzZXRJZDogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IGBBTElZVU46Ok5BUzo6RmlsZXNldGAuXG4gICAgICpcbiAgICAgKiBQYXJhbSBzY29wZSAtIHNjb3BlIGluIHdoaWNoIHRoaXMgcmVzb3VyY2UgaXMgZGVmaW5lZFxuICAgICAqIFBhcmFtIGlkICAgIC0gc2NvcGVkIGlkIG9mIHRoZSByZXNvdXJjZVxuICAgICAqIFBhcmFtIHByb3BzIC0gcmVzb3VyY2UgcHJvcGVydGllc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiByb3MuQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogRmlsZXNldFByb3BzLCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDpib29sZWFuID0gdHJ1ZSkge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQpO1xuXG4gICAgICAgIGNvbnN0IHJvc0ZpbGVzZXQgPSBuZXcgUm9zRmlsZXNldCh0aGlzLCBpZCwgIHtcbiAgICAgICAgICAgIGZpbGVTeXN0ZW1QYXRoOiBwcm9wcy5maWxlU3lzdGVtUGF0aCxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBwcm9wcy5kZXNjcmlwdGlvbixcbiAgICAgICAgICAgIGZpbGVTeXN0ZW1JZDogcHJvcHMuZmlsZVN5c3RlbUlkLFxuICAgICAgICB9LCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCAmJiB0aGlzLnN0YWNrLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50KTtcbiAgICAgICAgdGhpcy5yZXNvdXJjZSA9IHJvc0ZpbGVzZXQ7XG4gICAgICAgIHRoaXMuYXR0ckZpbGVTeXN0ZW1JZCA9IHJvc0ZpbGVzZXQuYXR0ckZpbGVTeXN0ZW1JZDtcbiAgICAgICAgdGhpcy5hdHRyRmlsZVN5c3RlbVBhdGggPSByb3NGaWxlc2V0LmF0dHJGaWxlU3lzdGVtUGF0aDtcbiAgICAgICAgdGhpcy5hdHRyRnNldElkID0gcm9zRmlsZXNldC5hdHRyRnNldElkO1xuICAgIH1cbn1cbiJdfQ==