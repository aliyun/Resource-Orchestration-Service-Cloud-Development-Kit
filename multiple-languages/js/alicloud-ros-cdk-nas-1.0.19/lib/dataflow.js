"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataFlow = exports.DataFlowProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const nas_generated_1 = require("./nas.generated");
Object.defineProperty(exports, "DataFlowProperty", { enumerable: true, get: function () { return nas_generated_1.RosDataFlow; } });
/**
 * A ROS resource type:  `ALIYUN::NAS::DataFlow`
 */
class DataFlow extends ros.Resource {
    /**
     * Create a new `ALIYUN::NAS::DataFlow`.
     *
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosDataFlow = new nas_generated_1.RosDataFlow(this, id, {
            fsetId: props.fsetId,
            sourceStorage: props.sourceStorage,
            description: props.description,
            sourceSecurityType: props.sourceSecurityType,
            fileSystemId: props.fileSystemId,
            throughput: props.throughput,
            autoRefreshs: props.autoRefreshs,
            autoRefreshPolicy: props.autoRefreshPolicy,
            autoRefreshInterval: props.autoRefreshInterval === undefined || props.autoRefreshInterval === null ? 10 : props.autoRefreshInterval,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosDataFlow;
        this.attrDataFlowId = rosDataFlow.attrDataFlowId;
        this.attrFileSystemId = rosDataFlow.attrFileSystemId;
    }
}
exports.DataFlow = DataFlow;
//# sourceMappingURL=data:application/json;base64,