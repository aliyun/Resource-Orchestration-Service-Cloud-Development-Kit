"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProtocolMountTarget = exports.ProtocolMountTargetProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const nas_generated_1 = require("./nas.generated");
Object.defineProperty(exports, "ProtocolMountTargetProperty", { enumerable: true, get: function () { return nas_generated_1.RosProtocolMountTarget; } });
/**
 * A ROS resource type:  `ALIYUN::NAS::ProtocolMountTarget`
 */
class ProtocolMountTarget extends ros.Resource {
    /**
     * Create a new `ALIYUN::NAS::ProtocolMountTarget`.
     *
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosProtocolMountTarget = new nas_generated_1.RosProtocolMountTarget(this, id, {
            fsetId: props.fsetId,
            path: props.path,
            description: props.description,
            vpcId: props.vpcId,
            vSwitchId: props.vSwitchId,
            accessGroupName: props.accessGroupName,
            fileSystemId: props.fileSystemId,
            protocolServiceId: props.protocolServiceId,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosProtocolMountTarget;
        this.attrExportId = rosProtocolMountTarget.attrExportId;
        this.attrFileSystemId = rosProtocolMountTarget.attrFileSystemId;
        this.attrProtocolMountTargetDomain = rosProtocolMountTarget.attrProtocolMountTargetDomain;
        this.attrProtocolServiceId = rosProtocolMountTarget.attrProtocolServiceId;
    }
}
exports.ProtocolMountTarget = ProtocolMountTarget;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvdG9jb2xtb3VudHRhcmdldC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInByb3RvY29sbW91bnR0YXJnZXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsOENBQThDO0FBQzlDLG1EQUF5RDtBQUV0Qiw0R0FGMUIsc0NBQXNCLE9BRStCO0FBaUU5RDs7R0FFRztBQUNILE1BQWEsbUJBQW9CLFNBQVEsR0FBRyxDQUFDLFFBQVE7SUEyQmpEOzs7Ozs7T0FNRztJQUNILFlBQVksS0FBb0IsRUFBRSxFQUFVLEVBQUUsS0FBK0IsRUFBRSxtQ0FBMkMsSUFBSTtRQUMxSCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRWpCLE1BQU0sc0JBQXNCLEdBQUcsSUFBSSxzQ0FBc0IsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFHO1lBQ2pFLE1BQU0sRUFBRSxLQUFLLENBQUMsTUFBTTtZQUNwQixJQUFJLEVBQUUsS0FBSyxDQUFDLElBQUk7WUFDaEIsV0FBVyxFQUFFLEtBQUssQ0FBQyxXQUFXO1lBQzlCLEtBQUssRUFBRSxLQUFLLENBQUMsS0FBSztZQUNsQixTQUFTLEVBQUUsS0FBSyxDQUFDLFNBQVM7WUFDMUIsZUFBZSxFQUFFLEtBQUssQ0FBQyxlQUFlO1lBQ3RDLFlBQVksRUFBRSxLQUFLLENBQUMsWUFBWTtZQUNoQyxpQkFBaUIsRUFBRSxLQUFLLENBQUMsaUJBQWlCO1NBQzdDLEVBQUUsZ0NBQWdDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO1FBQ3BGLElBQUksQ0FBQyxRQUFRLEdBQUcsc0JBQXNCLENBQUM7UUFDdkMsSUFBSSxDQUFDLFlBQVksR0FBRyxzQkFBc0IsQ0FBQyxZQUFZLENBQUM7UUFDeEQsSUFBSSxDQUFDLGdCQUFnQixHQUFHLHNCQUFzQixDQUFDLGdCQUFnQixDQUFDO1FBQ2hFLElBQUksQ0FBQyw2QkFBNkIsR0FBRyxzQkFBc0IsQ0FBQyw2QkFBNkIsQ0FBQztRQUMxRixJQUFJLENBQUMscUJBQXFCLEdBQUcsc0JBQXNCLENBQUMscUJBQXFCLENBQUM7SUFDOUUsQ0FBQztDQUNKO0FBckRELGtEQXFEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHJvcyBmcm9tICdAYWxpY2xvdWQvcm9zLWNkay1jb3JlJztcbmltcG9ydCB7IFJvc1Byb3RvY29sTW91bnRUYXJnZXQgfSBmcm9tICcuL25hcy5nZW5lcmF0ZWQnO1xuLy8gR2VuZXJhdGVkIGZyb20gdGhlIEFsaUNsb3VkIFJPUyBSZXNvdXJjZSBTcGVjaWZpY2F0aW9uXG5leHBvcnQgeyBSb3NQcm90b2NvbE1vdW50VGFyZ2V0IGFzIFByb3RvY29sTW91bnRUYXJnZXRQcm9wZXJ0eSB9O1xuXG4vKipcbiAqIFByb3BlcnRpZXMgZm9yIGRlZmluaW5nIGEgYEFMSVlVTjo6TkFTOjpQcm90b2NvbE1vdW50VGFyZ2V0YFxuICovXG5leHBvcnQgaW50ZXJmYWNlIFByb3RvY29sTW91bnRUYXJnZXRQcm9wcyB7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBmaWxlU3lzdGVtSWQ6IEZpbGUgc3lzdGVtIElELlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGZpbGVTeXN0ZW1JZDogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgcHJvdG9jb2xTZXJ2aWNlSWQ6IEFncmVlbWVudCBzZXJ2aWNlIElELlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHByb3RvY29sU2VydmljZUlkOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSB2cGNJZDogUHJvcGVyIG5ldHdvcmsgSUQgZXhwb3J0ZWQgYnkgdGhlIHByb3RvY29sIHNlcnZpY2UuXG4gICAgICovXG4gICAgcmVhZG9ubHkgdnBjSWQ6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHZTd2l0Y2hJZDogU3dpdGNoIElEIGV4cG9ydGVkIGJ5IHRoZSBwcm90b2NvbCBzZXJ2aWNlLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHZTd2l0Y2hJZDogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgYWNjZXNzR3JvdXBOYW1lOiBUaGUgbmFtZSBvZiB0aGUgcGVybWlzc2lvbnMgZ3JvdXAuXG4gICAgICogRGVmYXVsdCB2YWx1ZTogREVGQVVMVF9WUENfR1JPVVBfTkFNRVxuICAgICAqL1xuICAgIHJlYWRvbmx5IGFjY2Vzc0dyb3VwTmFtZT86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGRlc2NyaXB0aW9uOiBEZXNjcmlwdGlvbiBvZiB0aGUgcHJvdG9jb2wgc2VydmljZSB0byBleHBvcnQgdGhlIGRpcmVjdG9yeS5UaGUgY29uc29sZSBpcyBkaXNwbGF5ZWQgYXMgdGhlIGV4cG9ydCBkaXJlY3RvcnkgbmFtZS5cbiAgICAgKiBsaW1pdDpcbiAgICAgKiBUaGUgbGVuZ3RoIGlzIDIgdG8gMTI4IEVuZ2xpc2ggb3IgQ2hpbmVzZSBjaGFyYWN0ZXJzLlxuICAgICAqIFN0YXJ0IHdpdGggYSBsb3dlcmNhc2UgbGV0dGVyIG9yIENoaW5lc2UsIGFuZCB5b3UgY2Fubm90IHN0YXJ0IHdpdGggaHR0cDovLyBhbmQgaHR0cHM6IC8vLlxuICAgICAqIEl0IGNhbiBjb250YWluIG51bWJlcnMsIGhhbGYtaG9ybiBjb2xvbiAoOiksIGRvd24gbGluZSAoXykgb3Igc2hvcnQgbGluZXMgKC0pLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGRlc2NyaXB0aW9uPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgZnNldElkOiBGaWxlc2V0IElEIG5lZWRzIHRvIGJlIGV4cG9ydGVkLlxuICAgICAqIGxpbWl0OlxuICAgICAqIFRoZSBGaWxlc2V0IG11c3QgZXhpc3QuXG4gICAgICogQSBGaWxlc2V0IGFsbG93cyBvbmx5IG9uZSBleHBvcnQgZGlyZWN0b3J5LlxuICAgICAqIEZpbGVzZXQgYW5kIFBhdGggY2FuIG9ubHkgc3BlY2lmeSBvbmUuXG4gICAgICovXG4gICAgcmVhZG9ubHkgZnNldElkPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgcGF0aDogVGhlIHBhdGggb2YgdGhlIENQRlMgZGlyZWN0b3J5IHRoYXQgbmVlZHMgdG8gYmUgZXhwb3J0ZWQuXG4gICAgICogbGltaXQ6XG4gICAgICogVGhpcyBkaXJlY3RvcnkgbXVzdCBiZSBleGlzdGluZyBkaXJlY3Rvcnkgb24gQ1BGUy5cbiAgICAgKiBUaGUgc2FtZSBkaXJlY3RvcnkgYWxsb3dzIG9ubHkgb25lIGV4cG9ydC5cbiAgICAgKiBGaWxlc2V0IGFuZCBQYXRoIGNhbiBvbmx5IHNwZWNpZnkgb25lLlxuICAgICAqIEZvcm1hdDpcbiAgICAgKiBUaGUgbGVuZ3RoIGlzIDEgdG8gMTAyNCBjaGFyYWN0ZXJzLlxuICAgICAqIFVzZSBVVEYtOCBlbmNvZGluZy5cbiAgICAgKiBJdCBtdXN0IHN0YXJ0IHdpdGggdGhlIHBvc2l0aXZlIG9ibGlxdWUgbGluZSAoLyksIGFuZCB0aGUgcm9vdCBkaXJlY3RvcnkgbXVzdCBiZS8uXG4gICAgICovXG4gICAgcmVhZG9ubHkgcGF0aD86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcbn1cblxuLyoqXG4gKiBBIFJPUyByZXNvdXJjZSB0eXBlOiAgYEFMSVlVTjo6TkFTOjpQcm90b2NvbE1vdW50VGFyZ2V0YFxuICovXG5leHBvcnQgY2xhc3MgUHJvdG9jb2xNb3VudFRhcmdldCBleHRlbmRzIHJvcy5SZXNvdXJjZSB7XG5cbiAgICAvKipcbiAgICAgKiBBIGZhY3RvcnkgbWV0aG9kIHRoYXQgY3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzIGZyb20gYW4gb2JqZWN0XG4gICAgICogY29udGFpbmluZyB0aGUgcHJvcGVydGllcyBvZiB0aGlzIFJPUyByZXNvdXJjZSwgd2hpY2ggd2lsbCBiZSBhc3NpZ25lZCB0byBST1MgcmVzb3VyY2UuXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgRXhwb3J0SWQ6IFRoZSBwcm90b2NvbCBzZXJ2aWNlIGV4cG9ydHMgZGlyZWN0b3J5IElELlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyRXhwb3J0SWQ6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBGaWxlU3lzdGVtSWQ6IEZpbGUgc3lzdGVtIElELlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyRmlsZVN5c3RlbUlkOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgUHJvdG9jb2xNb3VudFRhcmdldERvbWFpbjogVGhlIHByb3RvY29sIG1vdW50IHRhcmdldCBkb21haW4uXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJQcm90b2NvbE1vdW50VGFyZ2V0RG9tYWluOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgUHJvdG9jb2xTZXJ2aWNlSWQ6IFByb3RvY29sIHNlcnZpY2UgSUQuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJQcm90b2NvbFNlcnZpY2VJZDogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IGBBTElZVU46Ok5BUzo6UHJvdG9jb2xNb3VudFRhcmdldGAuXG4gICAgICpcbiAgICAgKiBQYXJhbSBzY29wZSAtIHNjb3BlIGluIHdoaWNoIHRoaXMgcmVzb3VyY2UgaXMgZGVmaW5lZFxuICAgICAqIFBhcmFtIGlkICAgIC0gc2NvcGVkIGlkIG9mIHRoZSByZXNvdXJjZVxuICAgICAqIFBhcmFtIHByb3BzIC0gcmVzb3VyY2UgcHJvcGVydGllc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiByb3MuQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogUHJvdG9jb2xNb3VudFRhcmdldFByb3BzLCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDpib29sZWFuID0gdHJ1ZSkge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQpO1xuXG4gICAgICAgIGNvbnN0IHJvc1Byb3RvY29sTW91bnRUYXJnZXQgPSBuZXcgUm9zUHJvdG9jb2xNb3VudFRhcmdldCh0aGlzLCBpZCwgIHtcbiAgICAgICAgICAgIGZzZXRJZDogcHJvcHMuZnNldElkLFxuICAgICAgICAgICAgcGF0aDogcHJvcHMucGF0aCxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBwcm9wcy5kZXNjcmlwdGlvbixcbiAgICAgICAgICAgIHZwY0lkOiBwcm9wcy52cGNJZCxcbiAgICAgICAgICAgIHZTd2l0Y2hJZDogcHJvcHMudlN3aXRjaElkLFxuICAgICAgICAgICAgYWNjZXNzR3JvdXBOYW1lOiBwcm9wcy5hY2Nlc3NHcm91cE5hbWUsXG4gICAgICAgICAgICBmaWxlU3lzdGVtSWQ6IHByb3BzLmZpbGVTeXN0ZW1JZCxcbiAgICAgICAgICAgIHByb3RvY29sU2VydmljZUlkOiBwcm9wcy5wcm90b2NvbFNlcnZpY2VJZCxcbiAgICAgICAgfSwgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgJiYgdGhpcy5zdGFjay5lbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCk7XG4gICAgICAgIHRoaXMucmVzb3VyY2UgPSByb3NQcm90b2NvbE1vdW50VGFyZ2V0O1xuICAgICAgICB0aGlzLmF0dHJFeHBvcnRJZCA9IHJvc1Byb3RvY29sTW91bnRUYXJnZXQuYXR0ckV4cG9ydElkO1xuICAgICAgICB0aGlzLmF0dHJGaWxlU3lzdGVtSWQgPSByb3NQcm90b2NvbE1vdW50VGFyZ2V0LmF0dHJGaWxlU3lzdGVtSWQ7XG4gICAgICAgIHRoaXMuYXR0clByb3RvY29sTW91bnRUYXJnZXREb21haW4gPSByb3NQcm90b2NvbE1vdW50VGFyZ2V0LmF0dHJQcm90b2NvbE1vdW50VGFyZ2V0RG9tYWluO1xuICAgICAgICB0aGlzLmF0dHJQcm90b2NvbFNlcnZpY2VJZCA9IHJvc1Byb3RvY29sTW91bnRUYXJnZXQuYXR0clByb3RvY29sU2VydmljZUlkO1xuICAgIH1cbn1cbiJdfQ==