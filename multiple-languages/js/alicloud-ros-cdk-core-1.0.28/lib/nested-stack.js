"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NestedStack = void 0;
const construct_compat_1 = require("./construct-compat");
const stack_1 = require("./stack");
const token_1 = require("./token");
const lazy_1 = require("./lazy");
const ros_fn_1 = require("./ros-fn");
const ros_pseudo_1 = require("./ros-pseudo");
const ros_stack_1 = require("./ros-stack");
const ros_element_1 = require("./ros-element");
const NESTED_STACK_SYMBOL = Symbol.for("ros-cdk-core.NestedStack");
class NestedStack extends stack_1.Stack {
    constructor(scope, id, props = {}) {
        super(scope, id);
        let stackProps = {
            parameters: lazy_1.Lazy.anyValue({
                produce: () => Object.keys(this.parameters).length > 0 ? this.parameters : undefined,
            }),
            timeoutMins: props.timeout,
        };
        if (props.templateUrl) {
            stackProps.templateUrl = props.templateUrl;
        }
        else {
            stackProps.templateBody = lazy_1.Lazy.stringValue({
                produce: () => this.templateBody,
            });
        }
        const parentScope = new construct_compat_1.Construct(scope, id + ".NestedStack");
        this.resource = new ros_stack_1.RosStack(parentScope, `${id}`, stackProps);
        this._contextualStackName = this.contextualAttribute(ros_pseudo_1.RosPseudo.stackName, token_1.Token.asString(ros_fn_1.Fn.select(1, ros_fn_1.Fn.split("/", this.resource.ref))));
        this._contextualStackId = this.contextualAttribute(ros_pseudo_1.RosPseudo.stackId, this.resource.ref);
        Object.defineProperty(this, NESTED_STACK_SYMBOL, { value: true });
        this.parameters = props.parameters || {};
    }
    static isNestedStack(x) {
        return x != null && typeof x === "object" && NESTED_STACK_SYMBOL in x;
    }
    /**
     * @internal
     */
    _toRosTemplate() {
        const template = {};
        const elements = rosElements(this);
        if (elements.length === 0)
            return;
        const fragments = elements.map((e) => this.resolve(e._toRosTemplate()));
        for (const fragment of fragments) {
            merge(template, fragment);
        }
        this.templateBody = this.resolve(template);
        return this.templateBody;
    }
    get stackName() {
        return this._contextualStackName;
    }
    get stackId() {
        return this._contextualStackId;
    }
    setParameter(name, value) {
        this.parameters[name] = value;
    }
    getAtt(attributeName) {
        return token_1.Token.asString(this.resource.getAtt("Outputs." + attributeName));
    }
    contextualAttribute(innerValue, outerValue) {
        return token_1.Token.asString({
            resolve: (context) => {
                if (stack_1.Stack.of(context.scope) === this) {
                    return innerValue;
                }
                else {
                    return outerValue;
                }
            },
        });
    }
}
exports.NestedStack = NestedStack;
function rosElements(node, into = []) {
    if (ros_element_1.RosElement.isRosElement(node)) {
        into.push(node);
    }
    for (const child of node.node.children) {
        // Don't recurse into a substack
        if (stack_1.Stack.isStack(child)) {
            continue;
        }
        rosElements(child, into);
    }
    return into;
}
function merge(template, fragment) {
    for (const section of Object.keys(fragment)) {
        const src = fragment[section];
        // create top-level section if it doesn't exist
        const dest = template[section];
        if (!dest) {
            template[section] = src;
        }
        else {
            template[section] = mergeSection(section, dest, src);
        }
    }
}
function mergeSection(section, val1, val2) {
    switch (section) {
        case "Description":
            return `${val1}\n${val2}`;
        case "Resources":
        case "Conditions":
        case "Parameters":
        case "Outputs":
        case "Mappings":
        case "Metadata":
            return mergeObjectsWithoutDuplicates(section, val1, val2);
        default:
            throw new Error(`CDK doesn't know how to merge two instances of the template section '${section}' - ` +
                "please remove one of them from your code");
    }
}
function mergeObjectsWithoutDuplicates(section, dest, src) {
    if (typeof dest !== "object") {
        throw new Error(`Expecting ${JSON.stringify(dest)} to be an object`);
    }
    if (typeof src !== "object") {
        throw new Error(`Expecting ${JSON.stringify(src)} to be an object`);
    }
    // add all entities from source section to destination section
    for (const id of Object.keys(src)) {
        if (id in dest) {
            throw new Error(`section '${section}' already contains '${id}'`);
        }
        dest[id] = src[id];
    }
    return dest;
}
//# sourceMappingURL=data:application/json;base64,