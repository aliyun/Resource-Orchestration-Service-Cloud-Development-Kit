"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LoginProfile = exports.LoginProfileProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ram_generated_1 = require("./ram.generated");
Object.defineProperty(exports, "LoginProfileProperty", { enumerable: true, get: function () { return ram_generated_1.RosLoginProfile; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::RAM::LoginProfile`, which is used to create logon configurations for a Resource Access Management (RAM) user.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosLoginProfile`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-ram-loginprofile
 */
class LoginProfile extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosLoginProfile = new ram_generated_1.RosLoginProfile(this, id, {
            status: props.status,
            passwordResetRequired: props.passwordResetRequired,
            userPrincipalName: props.userPrincipalName,
            generateRandomPassword: props.generateRandomPassword,
            mfaBindRequired: props.mfaBindRequired,
            password: props.password,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosLoginProfile;
        this.attrPassword = rosLoginProfile.attrPassword;
    }
}
exports.LoginProfile = LoginProfile;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9naW5wcm9maWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibG9naW5wcm9maWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDhDQUE4QztBQUM5QyxtREFBa0Q7QUFFdEIscUdBRm5CLCtCQUFlLE9BRXdCO0FBc0RoRDs7OztHQUlHO0FBQ0gsTUFBYSxZQUFhLFNBQVEsR0FBRyxDQUFDLFFBQVE7SUFXMUM7Ozs7T0FJRztJQUNILFlBQVksS0FBb0IsRUFBRSxFQUFVLEVBQUUsS0FBd0IsRUFBRSxtQ0FBMkMsSUFBSTtRQUNuSCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ2pCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQ2IsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLGdDQUFnQyxHQUFHLGdDQUFnQyxDQUFDO1FBRXpFLE1BQU0sZUFBZSxHQUFHLElBQUksK0JBQWUsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFHO1lBQ25ELE1BQU0sRUFBRSxLQUFLLENBQUMsTUFBTTtZQUNwQixxQkFBcUIsRUFBRSxLQUFLLENBQUMscUJBQXFCO1lBQ2xELGlCQUFpQixFQUFFLEtBQUssQ0FBQyxpQkFBaUI7WUFDMUMsc0JBQXNCLEVBQUUsS0FBSyxDQUFDLHNCQUFzQjtZQUNwRCxlQUFlLEVBQUUsS0FBSyxDQUFDLGVBQWU7WUFDdEMsUUFBUSxFQUFFLEtBQUssQ0FBQyxRQUFRO1NBQzNCLEVBQUUsZ0NBQWdDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO1FBQ3BGLElBQUksQ0FBQyxRQUFRLEdBQUcsZUFBZSxDQUFDO1FBQ2hDLElBQUksQ0FBQyxZQUFZLEdBQUcsZUFBZSxDQUFDLFlBQVksQ0FBQztJQUNyRCxDQUFDO0NBQ0o7QUFsQ0Qsb0NBa0NDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcm9zIGZyb20gJ0BhbGljbG91ZC9yb3MtY2RrLWNvcmUnO1xuaW1wb3J0IHsgUm9zTG9naW5Qcm9maWxlIH0gZnJvbSAnLi9yYW0uZ2VuZXJhdGVkJztcbi8vIEdlbmVyYXRlZCBmcm9tIHRoZSBBbGlDbG91ZCBST1MgUmVzb3VyY2UgU3BlY2lmaWNhdGlvblxuZXhwb3J0IHsgUm9zTG9naW5Qcm9maWxlIGFzIExvZ2luUHJvZmlsZVByb3BlcnR5IH07XG5cbi8qKlxuICogUHJvcGVydGllcyBmb3IgZGVmaW5pbmcgYSBgTG9naW5Qcm9maWxlYC5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvYWxpeXVuLXJhbS1sb2dpbnByb2ZpbGVcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBMb2dpblByb2ZpbGVQcm9wcyB7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSB1c2VyUHJpbmNpcGFsTmFtZTogVGhlIGxvZ2luIG5hbWUgb2YgdGhlIFJBTSB1c2VyLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHVzZXJQcmluY2lwYWxOYW1lOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBnZW5lcmF0ZVJhbmRvbVBhc3N3b3JkOiBXaGV0aGVyIHRvIGdlbmVyYXRlIGEgcmFuZG9tIHBhc3N3b3JkIGZvciB0aGUgUkFNIHVzZXIuXG4gICAgICovXG4gICAgcmVhZG9ubHkgZ2VuZXJhdGVSYW5kb21QYXNzd29yZD86IGJvb2xlYW4gfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBtZmFCaW5kUmVxdWlyZWQ6IFdoZXRoZXIgdG8gZm9yY2UgUkFNIHVzZXJzIHRvIGVuYWJsZSBtdWx0aS1mYWN0b3IgYXV0aGVudGljYXRpb24uIFZhbGlkIHZhbHVlczpcbiAgICAgKiAtIHRydWU6IFRoaXMgaXMgcmVxdWlyZWQuIFJBTSB1c2VycyBtdXN0IGJpbmQgdGhlIG11bHRpZmFjdG9yIGF1dGhlbnRpY2F0aW9uIGRldmljZSB0aGUgbmV4dCB0aW1lIHRoZXkgbG9nIGluLlxuICAgICAqIC0gZmFsc2UgKGRlZmF1bHQpIDogVGhpcyBpcyBub3QgcmVxdWlyZWQuXG4gICAgICovXG4gICAgcmVhZG9ubHkgbWZhQmluZFJlcXVpcmVkPzogYm9vbGVhbiB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHBhc3N3b3JkOiBUaGUgcGFzc3dvcmQgb2YgdGhlIFJBTSB1c2VyLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHBhc3N3b3JkPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgcGFzc3dvcmRSZXNldFJlcXVpcmVkOiBXaGV0aGVyIFJBTSB1c2VycyBtdXN0IHJlc2V0IHRoZWlyIHBhc3N3b3JkIHRoZSBuZXh0IHRpbWUgdGhleSBsb2cgaW4uXG4gICAgICovXG4gICAgcmVhZG9ubHkgcGFzc3dvcmRSZXNldFJlcXVpcmVkPzogYm9vbGVhbiB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHN0YXR1czogRW5hYmxlIG9yIGRpc2FibGUgY29uc29sZSBwYXNzd29yZCBsb2dpbi4gVmFsaWQgdmFsdWVzOlxuICAgICAqIC0gQWN0aXZhdGUgKGRlZmF1bHQpOiBFbmFibGUuXG4gICAgICogLSBJbmFjdGl2YXRlOiBEaXNhYmxlLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHN0YXR1cz86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcbn1cblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgYExvZ2luUHJvZmlsZWAuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSUxvZ2luUHJvZmlsZSBleHRlbmRzIHJvcy5JUmVzb3VyY2Uge1xuICAgIHJlYWRvbmx5IHByb3BzOiBMb2dpblByb2ZpbGVQcm9wcztcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBQYXNzd29yZDogVGhlIHBhc3N3b3JkIG9mIHRoZSBSQU0gdXNlci5cbiAgICAgKi9cbiAgICByZWFkb25seSBhdHRyUGFzc3dvcmQ6IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcbn1cbi8qKlxuICogVGhpcyBjbGFzcyBlbmNhcHN1bGF0ZXMgYW5kIGV4dGVuZHMgdGhlIFJPUyByZXNvdXJjZSB0eXBlIGBBTElZVU46OlJBTTo6TG9naW5Qcm9maWxlYCwgd2hpY2ggaXMgdXNlZCB0byBjcmVhdGUgbG9nb24gY29uZmlndXJhdGlvbnMgZm9yIGEgUmVzb3VyY2UgQWNjZXNzIE1hbmFnZW1lbnQgKFJBTSkgdXNlci5cbiAqIEBOb3RlIFRoaXMgY2xhc3MgbWF5IGhhdmUgc29tZSBuZXcgZnVuY3Rpb25zIHRvIGZhY2lsaXRhdGUgZGV2ZWxvcG1lbnQsIHNvIGl0IGlzIHJlY29tbWVuZGVkIHRvIHVzZSB0aGlzIGNsYXNzIGluc3RlYWQgb2YgYFJvc0xvZ2luUHJvZmlsZWBmb3IgYSBtb3JlIGNvbnZlbmllbnQgZGV2ZWxvcG1lbnQgZXhwZXJpZW5jZS5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvYWxpeXVuLXJhbS1sb2dpbnByb2ZpbGVcbiAqL1xuZXhwb3J0IGNsYXNzIExvZ2luUHJvZmlsZSBleHRlbmRzIHJvcy5SZXNvdXJjZSBpbXBsZW1lbnRzIElMb2dpblByb2ZpbGUge1xuICAgIHByb3RlY3RlZCBzY29wZTogcm9zLkNvbnN0cnVjdDtcbiAgICBwcm90ZWN0ZWQgaWQ6IHN0cmluZztcbiAgICBwdWJsaWMgcmVhZG9ubHkgcHJvcHM6IExvZ2luUHJvZmlsZVByb3BzO1xuICAgIHByb3RlY3RlZCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBQYXNzd29yZDogVGhlIHBhc3N3b3JkIG9mIHRoZSBSQU0gdXNlci5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0clBhc3N3b3JkOiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBQYXJhbSBzY29wZSAtIHNjb3BlIGluIHdoaWNoIHRoaXMgcmVzb3VyY2UgaXMgZGVmaW5lZFxuICAgICAqIFBhcmFtIGlkICAgIC0gc2NvcGVkIGlkIG9mIHRoZSByZXNvdXJjZVxuICAgICAqIFBhcmFtIHByb3BzIC0gcmVzb3VyY2UgcHJvcGVydGllc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiByb3MuQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogTG9naW5Qcm9maWxlUHJvcHMsIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OmJvb2xlYW4gPSB0cnVlKSB7XG4gICAgICAgIHN1cGVyKHNjb3BlLCBpZCk7XG4gICAgICAgIHRoaXMuc2NvcGUgPSBzY29wZTtcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xuICAgICAgICB0aGlzLnByb3BzID0gcHJvcHM7XG4gICAgICAgIHRoaXMuZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgPSBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDtcblxuICAgICAgICBjb25zdCByb3NMb2dpblByb2ZpbGUgPSBuZXcgUm9zTG9naW5Qcm9maWxlKHRoaXMsIGlkLCAge1xuICAgICAgICAgICAgc3RhdHVzOiBwcm9wcy5zdGF0dXMsXG4gICAgICAgICAgICBwYXNzd29yZFJlc2V0UmVxdWlyZWQ6IHByb3BzLnBhc3N3b3JkUmVzZXRSZXF1aXJlZCxcbiAgICAgICAgICAgIHVzZXJQcmluY2lwYWxOYW1lOiBwcm9wcy51c2VyUHJpbmNpcGFsTmFtZSxcbiAgICAgICAgICAgIGdlbmVyYXRlUmFuZG9tUGFzc3dvcmQ6IHByb3BzLmdlbmVyYXRlUmFuZG9tUGFzc3dvcmQsXG4gICAgICAgICAgICBtZmFCaW5kUmVxdWlyZWQ6IHByb3BzLm1mYUJpbmRSZXF1aXJlZCxcbiAgICAgICAgICAgIHBhc3N3b3JkOiBwcm9wcy5wYXNzd29yZCxcbiAgICAgICAgfSwgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgJiYgdGhpcy5zdGFjay5lbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCk7XG4gICAgICAgIHRoaXMucmVzb3VyY2UgPSByb3NMb2dpblByb2ZpbGU7XG4gICAgICAgIHRoaXMuYXR0clBhc3N3b3JkID0gcm9zTG9naW5Qcm9maWxlLmF0dHJQYXNzd29yZDtcbiAgICB9XG59XG4iXX0=