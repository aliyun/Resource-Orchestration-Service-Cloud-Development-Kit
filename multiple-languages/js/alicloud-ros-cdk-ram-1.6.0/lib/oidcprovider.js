"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OIDCProvider = exports.OIDCProviderProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ram_generated_1 = require("./ram.generated");
Object.defineProperty(exports, "OIDCProviderProperty", { enumerable: true, get: function () { return ram_generated_1.RosOIDCProvider; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::RAM::OIDCProvider`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosOIDCProvider`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-ram-oidcprovider
 */
class OIDCProvider extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosOIDCProvider = new ram_generated_1.RosOIDCProvider(this, id, {
            description: props.description,
            oidcProviderName: props.oidcProviderName,
            fingerprints: props.fingerprints,
            issuerUrl: props.issuerUrl,
            issuanceLimitTime: props.issuanceLimitTime,
            clientIds: props.clientIds,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosOIDCProvider;
        this.attrOidcProviderName = rosOIDCProvider.attrOidcProviderName;
    }
}
exports.OIDCProvider = OIDCProvider;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib2lkY3Byb3ZpZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsib2lkY3Byb3ZpZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDhDQUE4QztBQUM5QyxtREFBa0Q7QUFFdEIscUdBRm5CLCtCQUFlLE9BRXdCO0FBeURoRDs7OztHQUlHO0FBQ0gsTUFBYSxZQUFhLFNBQVEsR0FBRyxDQUFDLFFBQVE7SUFhMUM7Ozs7T0FJRztJQUNILFlBQVksS0FBb0IsRUFBRSxFQUFVLEVBQUUsS0FBd0IsRUFBRSxtQ0FBMkMsSUFBSTtRQUNuSCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ2pCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQ2IsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLGdDQUFnQyxHQUFHLGdDQUFnQyxDQUFDO1FBRXpFLE1BQU0sZUFBZSxHQUFHLElBQUksK0JBQWUsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFHO1lBQ25ELFdBQVcsRUFBRSxLQUFLLENBQUMsV0FBVztZQUM5QixnQkFBZ0IsRUFBRSxLQUFLLENBQUMsZ0JBQWdCO1lBQ3hDLFlBQVksRUFBRSxLQUFLLENBQUMsWUFBWTtZQUNoQyxTQUFTLEVBQUUsS0FBSyxDQUFDLFNBQVM7WUFDMUIsaUJBQWlCLEVBQUUsS0FBSyxDQUFDLGlCQUFpQjtZQUMxQyxTQUFTLEVBQUUsS0FBSyxDQUFDLFNBQVM7U0FDN0IsRUFBRSxnQ0FBZ0MsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7UUFDcEYsSUFBSSxDQUFDLFFBQVEsR0FBRyxlQUFlLENBQUM7UUFDaEMsSUFBSSxDQUFDLG9CQUFvQixHQUFHLGVBQWUsQ0FBQyxvQkFBb0IsQ0FBQztJQUNyRSxDQUFDO0NBQ0o7QUFwQ0Qsb0NBb0NDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcm9zIGZyb20gJ0BhbGljbG91ZC9yb3MtY2RrLWNvcmUnO1xuaW1wb3J0IHsgUm9zT0lEQ1Byb3ZpZGVyIH0gZnJvbSAnLi9yYW0uZ2VuZXJhdGVkJztcbi8vIEdlbmVyYXRlZCBmcm9tIHRoZSBBbGlDbG91ZCBST1MgUmVzb3VyY2UgU3BlY2lmaWNhdGlvblxuZXhwb3J0IHsgUm9zT0lEQ1Byb3ZpZGVyIGFzIE9JRENQcm92aWRlclByb3BlcnR5IH07XG5cbi8qKlxuICogUHJvcGVydGllcyBmb3IgZGVmaW5pbmcgYSBgT0lEQ1Byb3ZpZGVyYC5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvYWxpeXVuLXJhbS1vaWRjcHJvdmlkZXJcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBPSURDUHJvdmlkZXJQcm9wcyB7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBmaW5nZXJwcmludHM6IFRoZSBsaXN0IG9mIHRoZSBmaW5nZXJwcmludHMsIG1heCBsZW5ndGggaXMgNVxuICAgICAqL1xuICAgIHJlYWRvbmx5IGZpbmdlcnByaW50czogQXJyYXk8c3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlPiB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGlzc3VlclVybDogVGhlIFVSTCBvZiB0aGUgaXNzdWVyLCB3aGljaCBpcyBwcm92aWRlZCBieSB0aGUgZXh0ZXJuYWwgSWRQLiBUaGUgVVJMIG9mIHRoZSBpc3N1ZXIgbXVzdCBiZSB1bmlxdWUgd2l0aGluIGFuIEFsaWJhYmEgQ2xvdWQgYWNjb3VudC5cbiAgICAgKiBUaGUgVVJMIG9mIHRoZSBpc3N1ZXIgbXVzdCBzdGFydCB3aXRoIGh0dHBzIGFuZCBiZSBpbiB0aGUgdmFsaWQgVVJMIGZvcm1hdC4gVGhlIFVSTCBjYW5ub3QgY29udGFpbiBxdWVyeSBwYXJhbWV0ZXJzIHRoYXQgZm9sbG93IGEgcXVlc3Rpb24gbWFyayAoPykgb3IgbG9nb24gaW5mb3JtYXRpb24gdGhhdCBpcyBpZGVudGlmaWVkIGJ5IGF0IHNpZ25zIChAKS4gVGhlIFVSTCBjYW5ub3QgYmUgYSBmcmFnbWVudCBVUkwgdGhhdCBjb250YWlucyBudW1iZXIgc2lnbnMgKCMpLlxuICAgICAqIFRoZSBVUkwgY2FuIGJlIHVwIHRvIDI1NSBjaGFyYWN0ZXJzIGluIGxlbmd0aC5cbiAgICAgKi9cbiAgICByZWFkb25seSBpc3N1ZXJVcmw6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IG9pZGNQcm92aWRlck5hbWU6IFRoZSBuYW1lIG9mIHRoZSBPSURDIElkUC5cbiAgICAgKiBUaGUgbmFtZSBjYW4gY29udGFpbiBsZXR0ZXJzLCBkaWdpdHMsIGFuZCBzcGVjaWFsIGNoYXJhY3RlcnMgYW5kIGNhbm5vdCBzdGFydCBvciBlbmQgd2l0aCB0aGUgc3BlY2lhbCBjaGFyYWN0ZXJzLiBUaGUgc3BlY2lhbCBjaGFyYWN0ZXJzIGFyZSBwZXJpb2RzLCAoLiksIGh5cGhlbnMgKC0pLCBhbmQgdW5kZXJzY29yZXMgKF8pLmBgXG4gICAgICogVGhlIG5hbWUgY2FuIGJlIHVwIHRvIDEyOCBjaGFyYWN0ZXJzIGluIGxlbmd0aC5cbiAgICAgKi9cbiAgICByZWFkb25seSBvaWRjUHJvdmlkZXJOYW1lOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBjbGllbnRJZHM6IFRoZSBsaXN0IG9mIHRoZSBjbGllbnQgSURzLCBtYXggbGVuZ3RoIGlzIDIwXG4gICAgICovXG4gICAgcmVhZG9ubHkgY2xpZW50SWRzPzogQXJyYXk8c3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlPiB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGRlc2NyaXB0aW9uOiBUaGUgZGVzY3JpcHRpb24gb2YgdGhlIE9JREMgSWRQLlxuICAgICAqIFRoZSBkZXNjcmlwdGlvbiBjYW4gYmUgdXAgdG8gMjU2IGNoYXJhY3RlcnMgaW4gbGVuZ3RoLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGRlc2NyaXB0aW9uPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgaXNzdWFuY2VMaW1pdFRpbWU6IFRoZSBlYXJsaWVzdCB0aW1lIHdoZW4gYW4gZXh0ZXJuYWwgSWRQIGNhbiBpc3N1ZSBhbiBJRCB0b2tlbi4gSWYgdGhlIHZhbHVlIG9mIHRoZSBpYXQgZmllbGQgaW4gdGhlIElEIHRva2VuIGlzIGxhdGVyIHRoYW4gdGhlIGN1cnJlbnQgdGltZSwgdGhlIHJlcXVlc3QgaXMgcmVqZWN0ZWQuIFVuaXQ6IGhvdXJzLiBWYWxpZCB2YWx1ZXM6IDEgdG8gMTY4LlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGlzc3VhbmNlTGltaXRUaW1lPzogbnVtYmVyIHwgcm9zLklSZXNvbHZhYmxlO1xufVxuXG4vKipcbiAqIFJlcHJlc2VudHMgYSBgT0lEQ1Byb3ZpZGVyYC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJT0lEQ1Byb3ZpZGVyIGV4dGVuZHMgcm9zLklSZXNvdXJjZSB7XG4gICAgcmVhZG9ubHkgcHJvcHM6IE9JRENQcm92aWRlclByb3BzO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIE9JRENQcm92aWRlck5hbWU6IFRoZSBuYW1lIG9mIHRoZSBPSURDIElkUC5cblRoZSBuYW1lIGNhbiBjb250YWluIGxldHRlcnMsIGRpZ2l0cywgYW5kIHNwZWNpYWwgY2hhcmFjdGVycyBhbmQgY2Fubm90IHN0YXJ0IG9yIGVuZCB3aXRoIHRoZSBzcGVjaWFsIGNoYXJhY3RlcnMuIFRoZSBzcGVjaWFsIGNoYXJhY3RlcnMgYXJlIHBlcmlvZHMsICguKSwgaHlwaGVucyAoLSksIGFuZCB1bmRlcnNjb3JlcyAoXykuYGBcblRoZSBuYW1lIGNhbiBiZSB1cCB0byAxMjggY2hhcmFjdGVycyBpbiBsZW5ndGguXG4gICAgICovXG4gICAgcmVhZG9ubHkgYXR0ck9pZGNQcm92aWRlck5hbWU6IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcbn1cbi8qKlxuICogVGhpcyBjbGFzcyBlbmNhcHN1bGF0ZXMgYW5kIGV4dGVuZHMgdGhlIFJPUyByZXNvdXJjZSB0eXBlIGBBTElZVU46OlJBTTo6T0lEQ1Byb3ZpZGVyYC5cbiAqIEBOb3RlIFRoaXMgY2xhc3MgbWF5IGhhdmUgc29tZSBuZXcgZnVuY3Rpb25zIHRvIGZhY2lsaXRhdGUgZGV2ZWxvcG1lbnQsIHNvIGl0IGlzIHJlY29tbWVuZGVkIHRvIHVzZSB0aGlzIGNsYXNzIGluc3RlYWQgb2YgYFJvc09JRENQcm92aWRlcmBmb3IgYSBtb3JlIGNvbnZlbmllbnQgZGV2ZWxvcG1lbnQgZXhwZXJpZW5jZS5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvYWxpeXVuLXJhbS1vaWRjcHJvdmlkZXJcbiAqL1xuZXhwb3J0IGNsYXNzIE9JRENQcm92aWRlciBleHRlbmRzIHJvcy5SZXNvdXJjZSBpbXBsZW1lbnRzIElPSURDUHJvdmlkZXIge1xuICAgIHByb3RlY3RlZCBzY29wZTogcm9zLkNvbnN0cnVjdDtcbiAgICBwcm90ZWN0ZWQgaWQ6IHN0cmluZztcbiAgICBwdWJsaWMgcmVhZG9ubHkgcHJvcHM6IE9JRENQcm92aWRlclByb3BzO1xuICAgIHByb3RlY3RlZCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBPSURDUHJvdmlkZXJOYW1lOiBUaGUgbmFtZSBvZiB0aGUgT0lEQyBJZFAuXG5UaGUgbmFtZSBjYW4gY29udGFpbiBsZXR0ZXJzLCBkaWdpdHMsIGFuZCBzcGVjaWFsIGNoYXJhY3RlcnMgYW5kIGNhbm5vdCBzdGFydCBvciBlbmQgd2l0aCB0aGUgc3BlY2lhbCBjaGFyYWN0ZXJzLiBUaGUgc3BlY2lhbCBjaGFyYWN0ZXJzIGFyZSBwZXJpb2RzLCAoLiksIGh5cGhlbnMgKC0pLCBhbmQgdW5kZXJzY29yZXMgKF8pLmBgXG5UaGUgbmFtZSBjYW4gYmUgdXAgdG8gMTI4IGNoYXJhY3RlcnMgaW4gbGVuZ3RoLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyT2lkY1Byb3ZpZGVyTmFtZTogcm9zLklSZXNvbHZhYmxlIHwgc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogUGFyYW0gc2NvcGUgLSBzY29wZSBpbiB3aGljaCB0aGlzIHJlc291cmNlIGlzIGRlZmluZWRcbiAgICAgKiBQYXJhbSBpZCAgICAtIHNjb3BlZCBpZCBvZiB0aGUgcmVzb3VyY2VcbiAgICAgKiBQYXJhbSBwcm9wcyAtIHJlc291cmNlIHByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihzY29wZTogcm9zLkNvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IE9JRENQcm92aWRlclByb3BzLCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDpib29sZWFuID0gdHJ1ZSkge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQpO1xuICAgICAgICB0aGlzLnNjb3BlID0gc2NvcGU7XG4gICAgICAgIHRoaXMuaWQgPSBpZDtcbiAgICAgICAgdGhpcy5wcm9wcyA9IHByb3BzO1xuICAgICAgICB0aGlzLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ID0gZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ7XG5cbiAgICAgICAgY29uc3Qgcm9zT0lEQ1Byb3ZpZGVyID0gbmV3IFJvc09JRENQcm92aWRlcih0aGlzLCBpZCwgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBwcm9wcy5kZXNjcmlwdGlvbixcbiAgICAgICAgICAgIG9pZGNQcm92aWRlck5hbWU6IHByb3BzLm9pZGNQcm92aWRlck5hbWUsXG4gICAgICAgICAgICBmaW5nZXJwcmludHM6IHByb3BzLmZpbmdlcnByaW50cyxcbiAgICAgICAgICAgIGlzc3VlclVybDogcHJvcHMuaXNzdWVyVXJsLFxuICAgICAgICAgICAgaXNzdWFuY2VMaW1pdFRpbWU6IHByb3BzLmlzc3VhbmNlTGltaXRUaW1lLFxuICAgICAgICAgICAgY2xpZW50SWRzOiBwcm9wcy5jbGllbnRJZHMsXG4gICAgICAgIH0sIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ICYmIHRoaXMuc3RhY2suZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQpO1xuICAgICAgICB0aGlzLnJlc291cmNlID0gcm9zT0lEQ1Byb3ZpZGVyO1xuICAgICAgICB0aGlzLmF0dHJPaWRjUHJvdmlkZXJOYW1lID0gcm9zT0lEQ1Byb3ZpZGVyLmF0dHJPaWRjUHJvdmlkZXJOYW1lO1xuICAgIH1cbn1cbiJdfQ==