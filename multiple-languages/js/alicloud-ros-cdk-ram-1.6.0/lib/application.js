"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Application = exports.ApplicationProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ram_generated_1 = require("./ram.generated");
Object.defineProperty(exports, "ApplicationProperty", { enumerable: true, get: function () { return ram_generated_1.RosApplication; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::RAM::Application`, which is used to create an application.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosApplication`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-ram-application
 */
class Application extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosApplication = new ram_generated_1.RosApplication(this, id, {
            predefinedScopes: props.predefinedScopes,
            secretRequired: props.secretRequired,
            displayName: props.displayName,
            isMultiTenant: props.isMultiTenant,
            accessTokenValidity: props.accessTokenValidity,
            redirectUris: props.redirectUris,
            refreshTokenValidity: props.refreshTokenValidity,
            appType: props.appType,
            requiredScopes: props.requiredScopes,
            appName: props.appName,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosApplication;
        this.attrAppId = rosApplication.attrAppId;
        this.attrAppName = rosApplication.attrAppName;
    }
}
exports.Application = Application;
//# sourceMappingURL=data:application/json;base64,