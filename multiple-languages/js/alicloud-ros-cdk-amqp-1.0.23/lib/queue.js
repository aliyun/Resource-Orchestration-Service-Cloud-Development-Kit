"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Queue = exports.QueueProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const amqp_generated_1 = require("./amqp.generated");
Object.defineProperty(exports, "QueueProperty", { enumerable: true, get: function () { return amqp_generated_1.RosQueue; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::AMQP::Queue`, which is used to create a queue.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosQueue`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-amqp-queue
 */
class Queue extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosQueue = new amqp_generated_1.RosQueue(this, id, {
            deadLetterExchange: props.deadLetterExchange,
            maximumPriority: props.maximumPriority,
            instanceId: props.instanceId,
            exclusiveState: props.exclusiveState,
            deadLetterRoutingKey: props.deadLetterRoutingKey,
            virtualHost: props.virtualHost,
            maxLength: props.maxLength,
            autoDeleteState: props.autoDeleteState,
            queueName: props.queueName,
            messageTtl: props.messageTtl,
            autoExpireState: props.autoExpireState,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosQueue;
        this.attrQueueName = rosQueue.attrQueueName;
    }
}
exports.Queue = Queue;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVldWUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJxdWV1ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw4Q0FBOEM7QUFDOUMscURBQTRDO0FBRXZCLDhGQUZaLHlCQUFRLE9BRWlCO0FBMkVsQzs7OztHQUlHO0FBQ0gsTUFBYSxLQUFNLFNBQVEsR0FBRyxDQUFDLFFBQVE7SUFXbkM7Ozs7T0FJRztJQUNILFlBQVksS0FBb0IsRUFBRSxFQUFVLEVBQUUsS0FBaUIsRUFBRSxtQ0FBMkMsSUFBSTtRQUM1RyxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ2pCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQ2IsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLGdDQUFnQyxHQUFHLGdDQUFnQyxDQUFDO1FBRXpFLE1BQU0sUUFBUSxHQUFHLElBQUkseUJBQVEsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFHO1lBQ3JDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxrQkFBa0I7WUFDNUMsZUFBZSxFQUFFLEtBQUssQ0FBQyxlQUFlO1lBQ3RDLFVBQVUsRUFBRSxLQUFLLENBQUMsVUFBVTtZQUM1QixjQUFjLEVBQUUsS0FBSyxDQUFDLGNBQWM7WUFDcEMsb0JBQW9CLEVBQUUsS0FBSyxDQUFDLG9CQUFvQjtZQUNoRCxXQUFXLEVBQUUsS0FBSyxDQUFDLFdBQVc7WUFDOUIsU0FBUyxFQUFFLEtBQUssQ0FBQyxTQUFTO1lBQzFCLGVBQWUsRUFBRSxLQUFLLENBQUMsZUFBZTtZQUN0QyxTQUFTLEVBQUUsS0FBSyxDQUFDLFNBQVM7WUFDMUIsVUFBVSxFQUFFLEtBQUssQ0FBQyxVQUFVO1lBQzVCLGVBQWUsRUFBRSxLQUFLLENBQUMsZUFBZTtTQUN6QyxFQUFFLGdDQUFnQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztRQUNwRixJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztRQUN6QixJQUFJLENBQUMsYUFBYSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUM7SUFDaEQsQ0FBQztDQUNKO0FBdkNELHNCQXVDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHJvcyBmcm9tICdAYWxpY2xvdWQvcm9zLWNkay1jb3JlJztcbmltcG9ydCB7IFJvc1F1ZXVlIH0gZnJvbSAnLi9hbXFwLmdlbmVyYXRlZCc7XG4vLyBHZW5lcmF0ZWQgZnJvbSB0aGUgQWxpQ2xvdWQgUk9TIFJlc291cmNlIFNwZWNpZmljYXRpb25cbmV4cG9ydCB7IFJvc1F1ZXVlIGFzIFF1ZXVlUHJvcGVydHkgfTtcblxuLyoqXG4gKiBQcm9wZXJ0aWVzIGZvciBkZWZpbmluZyBhIGBRdWV1ZWAuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2FsaXl1bi1hbXFwLXF1ZXVlXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUXVldWVQcm9wcyB7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBpbnN0YW5jZUlkOiBJbnN0YW5jZUlkXG4gICAgICovXG4gICAgcmVhZG9ubHkgaW5zdGFuY2VJZDogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgcXVldWVOYW1lOiBUaGUgbmFtZSBvZiB0aGUgcXVldWUuXG4gICAgICovXG4gICAgcmVhZG9ubHkgcXVldWVOYW1lOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSB2aXJ0dWFsSG9zdDogVGhlIG5hbWUgb2YgdGhlIHZpcnR1YWwgaG9zdC5cbiAgICAgKi9cbiAgICByZWFkb25seSB2aXJ0dWFsSG9zdDogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgYXV0b0RlbGV0ZVN0YXRlOiBTcGVjaWZpZXMgd2hldGhlciB0aGUgQXV0byBEZWxldGUgYXR0cmlidXRlIGlzIGNvbmZpZ3VyZWQuIFZhbGlkIHZhbHVlczpcbiAgICAgKiB0cnVlOiBUaGUgQXV0byBEZWxldGUgYXR0cmlidXRlIGlzIGNvbmZpZ3VyZWQuIFRoZSBxdWV1ZSBpcyBhdXRvbWF0aWNhbGx5IGRlbGV0ZWQgYWZ0ZXIgdGhlIGxhc3Qgc3Vic2NyaXB0aW9uIGZyb20gY29uc3VtZXJzIHRvIHRoaXMgcXVldWUgaXMgY2FuY2VsZWQuXG4gICAgICogZmFsc2U6IFRoZSBBdXRvIERlbGV0ZSBhdHRyaWJ1dGUgaXMgbm90IGNvbmZpZ3VyZWQuXG4gICAgICovXG4gICAgcmVhZG9ubHkgYXV0b0RlbGV0ZVN0YXRlPzogYm9vbGVhbiB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGF1dG9FeHBpcmVTdGF0ZTogVGhlIHZhbGlkaXR5IHBlcmlvZCBhZnRlciB3aGljaCB0aGUgcXVldWUgaXMgYXV0b21hdGljYWxseSBkZWxldGVkLlxuICAgICAqIElmIHRoZSBxdWV1ZSBpcyBub3QgYWNjZXNzZWQgd2l0aGluIGEgc3BlY2lmaWVkIHBlcmlvZCBvZiB0aW1lLCBpdCBpcyBhdXRvbWF0aWNhbGx5IGRlbGV0ZWQuXG4gICAgICovXG4gICAgcmVhZG9ubHkgYXV0b0V4cGlyZVN0YXRlPzogbnVtYmVyIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgZGVhZExldHRlckV4Y2hhbmdlOiBUaGUgZGVhZC1sZXR0ZXIgZXhjaGFuZ2UuIEEgZGVhZC1sZXR0ZXIgZXhjaGFuZ2UgaXMgdXNlZCB0byByZWNlaXZlIHJlamVjdGVkIG1lc3NhZ2VzLiBcbiAgICAgKiBJZiBhIGNvbnN1bWVyIHJlamVjdHMgYSBtZXNzYWdlIHRoYXQgY2Fubm90IGJlIHJldHJpZWQsIHRoaXMgbWVzc2FnZSBpcyByb3V0ZWQgdG8gYSBzcGVjaWZpZWQgZGVhZC1sZXR0ZXIgZXhjaGFuZ2UuIFxuICAgICAqIFRoZW4sIHRoZSBkZWFkLWxldHRlciBleGNoYW5nZSByb3V0ZXMgdGhlIG1lc3NhZ2UgdG8gdGhlIHF1ZXVlIHRoYXQgaXMgYm91bmQgdG8gdGhlIGRlYWQtbGV0dGVyIGV4Y2hhbmdlLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGRlYWRMZXR0ZXJFeGNoYW5nZT86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGRlYWRMZXR0ZXJSb3V0aW5nS2V5OiBUaGUgZGVhZCBsZXR0ZXIgcm91dGluZyBrZXkuXG4gICAgICovXG4gICAgcmVhZG9ubHkgZGVhZExldHRlclJvdXRpbmdLZXk/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBleGNsdXNpdmVTdGF0ZTogU3BlY2lmaWVzIHdoZXRoZXIgdGhlIHF1ZXVlIGlzIGFuIGV4Y2x1c2l2ZSBxdWV1ZS4gVmFsaWQgdmFsdWVzOlxuICAgICAqIHRydWU6IFRoZSBxdWV1ZSBpcyBhbiBleGNsdXNpdmUgcXVldWUuIEl0IGNhbiBiZSB1c2VkIG9ubHkgZm9yIHRoZSBjb25uZWN0aW9uIHRoYXQgZGVjbGFyZXMgdGhlIGV4Y2x1c2l2ZSBxdWV1ZS4gQWZ0ZXIgdGhlIGNvbm5lY3Rpb24gaXMgY2xvc2VkLCB0aGUgZXhjbHVzaXZlIHF1ZXVlIGlzIGF1dG9tYXRpY2FsbHkgZGVsZXRlZC5cbiAgICAgKiBmYWxzZTogVGhlIEF1dG8gRGVsZXRlIGF0dHJpYnV0ZSBpcyBub3QgY29uZmlndXJlZC5cbiAgICAgKi9cbiAgICByZWFkb25seSBleGNsdXNpdmVTdGF0ZT86IGJvb2xlYW4gfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBtYXhpbXVtUHJpb3JpdHk6IFRoZSBwcmlvcml0eSBmdW5jdGlvbiBpcyBub3Qgc3VwcG9ydGVkLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IG1heGltdW1Qcmlvcml0eT86IG51bWJlciB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IG1heExlbmd0aDogVGhlIG1heGltdW0gbnVtYmVyIG9mIG1lc3NhZ2VzIHRoYXQgY2FuIGJlIHN0b3JlZCBpbiB0aGUgcXVldWUuIFxuICAgICAqIElmIHRoaXMgdGhyZXNob2xkIGlzIGV4Y2VlZGVkLCB0aGUgZWFybGllc3QgbWVzc2FnZXMgdGhhdCBhcmUgcm91dGVkIHRvIHRoZSBxdWV1ZSBhcmUgZGlzY2FyZGVkLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IG1heExlbmd0aD86IG51bWJlciB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IG1lc3NhZ2VUdGw6IFRoZSBtZXNzYWdlIFRUTCBvZiB0aGUgcXVldWVcbiAgICAgKiBJZiBhIG1lc3NhZ2UgaXMgcmV0YWluZWQgaW4gdGhlIFF1ZXVlIGxvbmdlciB0aGFuIHRoZSBjb25maWd1cmVkIG1lc3NhZ2UgbGlmZXRpbWUsIHRoZSBtZXNzYWdlIGV4cGlyZXMuXG4gICAgICogVGhlIHZhbHVlIG9mIG1lc3NhZ2UgbGlmZXRpbWUgbXVzdCBiZSBhIG5vbi1uZWdhdGl2ZSBpbnRlZ2VyLCB1cCB0byAxIGRheS5cbiAgICAgKiBUaGUgdW5pdCBpcyBtaWxsaXNlY29uZHNcbiAgICAgKi9cbiAgICByZWFkb25seSBtZXNzYWdlVHRsPzogbnVtYmVyIHwgcm9zLklSZXNvbHZhYmxlO1xufVxuXG4vKipcbiAqIFRoaXMgY2xhc3MgZW5jYXBzdWxhdGVzIGFuZCBleHRlbmRzIHRoZSBST1MgcmVzb3VyY2UgdHlwZSBgQUxJWVVOOjpBTVFQOjpRdWV1ZWAsIHdoaWNoIGlzIHVzZWQgdG8gY3JlYXRlIGEgcXVldWUuXG4gKiBATm90ZSBUaGlzIGNsYXNzIG1heSBoYXZlIHNvbWUgbmV3IGZ1bmN0aW9ucyB0byBmYWNpbGl0YXRlIGRldmVsb3BtZW50LCBzbyBpdCBpcyByZWNvbW1lbmRlZCB0byB1c2UgdGhpcyBjbGFzcyBpbnN0ZWFkIG9mIGBSb3NRdWV1ZWBmb3IgYSBtb3JlIGNvbnZlbmllbnQgZGV2ZWxvcG1lbnQgZXhwZXJpZW5jZS5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvYWxpeXVuLWFtcXAtcXVldWVcbiAqL1xuZXhwb3J0IGNsYXNzIFF1ZXVlIGV4dGVuZHMgcm9zLlJlc291cmNlIHtcbiAgICBwcm90ZWN0ZWQgc2NvcGU6IHJvcy5Db25zdHJ1Y3Q7XG4gICAgcHJvdGVjdGVkIGlkOiBzdHJpbmc7XG4gICAgcHJvdGVjdGVkIHByb3BzOiBRdWV1ZVByb3BzO1xuICAgIHByb3RlY3RlZCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBRdWV1ZU5hbWU6IFRoZSBuYW1lIG9mIHRoZSBxdWV1ZS5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0clF1ZXVlTmFtZTogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUGFyYW0gc2NvcGUgLSBzY29wZSBpbiB3aGljaCB0aGlzIHJlc291cmNlIGlzIGRlZmluZWRcbiAgICAgKiBQYXJhbSBpZCAgICAtIHNjb3BlZCBpZCBvZiB0aGUgcmVzb3VyY2VcbiAgICAgKiBQYXJhbSBwcm9wcyAtIHJlc291cmNlIHByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihzY29wZTogcm9zLkNvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IFF1ZXVlUHJvcHMsIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OmJvb2xlYW4gPSB0cnVlKSB7XG4gICAgICAgIHN1cGVyKHNjb3BlLCBpZCk7XG4gICAgICAgIHRoaXMuc2NvcGUgPSBzY29wZTtcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xuICAgICAgICB0aGlzLnByb3BzID0gcHJvcHM7XG4gICAgICAgIHRoaXMuZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgPSBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDtcblxuICAgICAgICBjb25zdCByb3NRdWV1ZSA9IG5ldyBSb3NRdWV1ZSh0aGlzLCBpZCwgIHtcbiAgICAgICAgICAgIGRlYWRMZXR0ZXJFeGNoYW5nZTogcHJvcHMuZGVhZExldHRlckV4Y2hhbmdlLFxuICAgICAgICAgICAgbWF4aW11bVByaW9yaXR5OiBwcm9wcy5tYXhpbXVtUHJpb3JpdHksXG4gICAgICAgICAgICBpbnN0YW5jZUlkOiBwcm9wcy5pbnN0YW5jZUlkLFxuICAgICAgICAgICAgZXhjbHVzaXZlU3RhdGU6IHByb3BzLmV4Y2x1c2l2ZVN0YXRlLFxuICAgICAgICAgICAgZGVhZExldHRlclJvdXRpbmdLZXk6IHByb3BzLmRlYWRMZXR0ZXJSb3V0aW5nS2V5LFxuICAgICAgICAgICAgdmlydHVhbEhvc3Q6IHByb3BzLnZpcnR1YWxIb3N0LFxuICAgICAgICAgICAgbWF4TGVuZ3RoOiBwcm9wcy5tYXhMZW5ndGgsXG4gICAgICAgICAgICBhdXRvRGVsZXRlU3RhdGU6IHByb3BzLmF1dG9EZWxldGVTdGF0ZSxcbiAgICAgICAgICAgIHF1ZXVlTmFtZTogcHJvcHMucXVldWVOYW1lLFxuICAgICAgICAgICAgbWVzc2FnZVR0bDogcHJvcHMubWVzc2FnZVR0bCxcbiAgICAgICAgICAgIGF1dG9FeHBpcmVTdGF0ZTogcHJvcHMuYXV0b0V4cGlyZVN0YXRlLFxuICAgICAgICB9LCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCAmJiB0aGlzLnN0YWNrLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50KTtcbiAgICAgICAgdGhpcy5yZXNvdXJjZSA9IHJvc1F1ZXVlO1xuICAgICAgICB0aGlzLmF0dHJRdWV1ZU5hbWUgPSByb3NRdWV1ZS5hdHRyUXVldWVOYW1lO1xuICAgIH1cbn1cbiJdfQ==