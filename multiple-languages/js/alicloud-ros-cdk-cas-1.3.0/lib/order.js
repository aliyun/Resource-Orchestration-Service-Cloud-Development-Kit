"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Order = exports.OrderProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const cas_generated_1 = require("./cas.generated");
Object.defineProperty(exports, "OrderProperty", { enumerable: true, get: function () { return cas_generated_1.RosOrder; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::CAS::Order`, which is used to create a certificate order.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosOrder`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-cas-order
 */
class Order extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosOrder = new cas_generated_1.RosOrder(this, id, {
            domainCnt: props.domainCnt === undefined || props.domainCnt === null ? 1 : props.domainCnt,
            domainType: props.domainType === undefined || props.domainType === null ? 'one' : props.domainType,
            service: props.service === undefined || props.service === null ? 'NoNeed' : props.service,
            period: props.period === undefined || props.period === null ? 1 : props.period,
            certType: props.certType,
            certBrand: props.certBrand,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosOrder;
    }
}
exports.Order = Order;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3JkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJvcmRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw4Q0FBOEM7QUFDOUMsbURBQTJDO0FBRXRCLDhGQUZaLHdCQUFRLE9BRWlCO0FBOENsQzs7OztHQUlHO0FBQ0gsTUFBYSxLQUFNLFNBQVEsR0FBRyxDQUFDLFFBQVE7SUFNbkM7Ozs7T0FJRztJQUNILFlBQVksS0FBb0IsRUFBRSxFQUFVLEVBQUUsS0FBaUIsRUFBRSxtQ0FBMkMsSUFBSTtRQUM1RyxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ2pCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQ2IsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLGdDQUFnQyxHQUFHLGdDQUFnQyxDQUFDO1FBRXpFLE1BQU0sUUFBUSxHQUFHLElBQUksd0JBQVEsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFHO1lBQ3JDLFNBQVMsRUFBRSxLQUFLLENBQUMsU0FBUyxLQUFLLFNBQVMsSUFBSSxLQUFLLENBQUMsU0FBUyxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsU0FBUztZQUMxRixVQUFVLEVBQUUsS0FBSyxDQUFDLFVBQVUsS0FBSyxTQUFTLElBQUksS0FBSyxDQUFDLFVBQVUsS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFVBQVU7WUFDbEcsT0FBTyxFQUFFLEtBQUssQ0FBQyxPQUFPLEtBQUssU0FBUyxJQUFJLEtBQUssQ0FBQyxPQUFPLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPO1lBQ3pGLE1BQU0sRUFBRSxLQUFLLENBQUMsTUFBTSxLQUFLLFNBQVMsSUFBSSxLQUFLLENBQUMsTUFBTSxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTTtZQUM5RSxRQUFRLEVBQUUsS0FBSyxDQUFDLFFBQVE7WUFDeEIsU0FBUyxFQUFFLEtBQUssQ0FBQyxTQUFTO1NBQzdCLEVBQUUsZ0NBQWdDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO1FBQ3BGLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO0lBQzdCLENBQUM7Q0FDSjtBQTVCRCxzQkE0QkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyByb3MgZnJvbSAnQGFsaWNsb3VkL3Jvcy1jZGstY29yZSc7XG5pbXBvcnQgeyBSb3NPcmRlciB9IGZyb20gJy4vY2FzLmdlbmVyYXRlZCc7XG4vLyBHZW5lcmF0ZWQgZnJvbSB0aGUgQWxpQ2xvdWQgUk9TIFJlc291cmNlIFNwZWNpZmljYXRpb25cbmV4cG9ydCB7IFJvc09yZGVyIGFzIE9yZGVyUHJvcGVydHkgfTtcblxuLyoqXG4gKiBQcm9wZXJ0aWVzIGZvciBkZWZpbmluZyBhIGBPcmRlcmAuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2FsaXl1bi1jYXMtb3JkZXJcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBPcmRlclByb3BzIHtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGNlcnRCcmFuZDogQ2VydGlmaWNhdGUgYnJhbmQuIFZhbGlkIHZhbHVlczogUmFwaWQsIEdsb2JhbHNpZ24sIHZUcnVzLCBXb3NpZ24sIERpZ2ljZXJ0LCBEaWdpY2VydCBwcm8sIEdlb3RydXN0LCBDRkNBLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGNlcnRCcmFuZDogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgY2VydFR5cGU6IENlcnRpZmljYXRlIHR5cGUuIFZhbGlkIHZhbHVlczogRFYsIE9WLCBFVi5cbiAgICAgKi9cbiAgICByZWFkb25seSBjZXJ0VHlwZTogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgZG9tYWluQ250OiBOdW1iZXIgb2YgZG9tYWlucyB0byBiZSBpbmNsdWRlZCBpbiB0aGUgY2VydGlmaWNhdGUuIFZhbGlkIHZhbHVlczogMS01MDAuXG4gICAgICovXG4gICAgcmVhZG9ubHkgZG9tYWluQ250PzogbnVtYmVyIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgZG9tYWluVHlwZTogRG9tYWluIHR5cGUuIFZhbGlkIHZhbHVlczogb25lLCBhbGwsIG11bHRpcGxlLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGRvbWFpblR5cGU/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBwZXJpb2Q6IFNlcnZpY2UgdGltZSBvZiB0aGUgY2VydGlmaWNhdGUsIGluIHllYXIuIFZhbGlkIHZhbHVlczogMSwgMiwgMy5cbiAgICAgKiBOb3RlOiBTdGFydGluZyBTZXB0ZW1iZXIgMSwgMjAyMCwgY2VydGlmaWNhdGVzIGlzc3VlZCBieSBjYXMgYXJvdW5kIHRoZSB3b3JsZCB3aWxsIGJlIHZhbGlkIGZvciBhIG1heGltdW0gb2YgMSB5ZWFyLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHBlcmlvZD86IG51bWJlciB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHNlcnZpY2U6IFdoZXRoZXIgZW5hYmxlIG90aGVyIHNlcnZpY2UuIFZhbGlkIHZhbHVlczpcbiAgICAgKiAtIE5vTmVlZDogRG8gbm90IGFwcGx5IGZvciBhbnkgc2VydmljZXMuXG4gICAgICogLSBFeHBlZGl0ZWRQcm9kdWN0OiBSZXF1ZXN0IGFzc2lzdGFuY2Ugc2VydmljZXMuXG4gICAgICogLSBEZXBsb3lQcm9kdWN0OiBEZXBsb3kgc2VydmljZXMuXG4gICAgICogLSBTTTJEZXBsb3lQcm9kdWN0OiBEZXBsb3kgc2VydmljZXMgd2l0aCBTTTIgZW5jcnlwdGlvbi5cbiAgICAgKiAtIFZpcFByb2R1Y3Q6IFJlcXVlc3QgYXNzaXN0YW5jZSBhbmQgZGVwbG95bWVudCBzZXJ2aWNlcy5cbiAgICAgKiAqKk5vdGU6KiogVGhpcyBwYXJhbWV0ZXIgaXMgbm90IHN1cHBvcnRlZCBieSBpbnRlcm5hdGlvbmFsIHN0YXRpb25zLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHNlcnZpY2U/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG59XG5cbi8qKlxuICogVGhpcyBjbGFzcyBlbmNhcHN1bGF0ZXMgYW5kIGV4dGVuZHMgdGhlIFJPUyByZXNvdXJjZSB0eXBlIGBBTElZVU46OkNBUzo6T3JkZXJgLCB3aGljaCBpcyB1c2VkIHRvIGNyZWF0ZSBhIGNlcnRpZmljYXRlIG9yZGVyLlxuICogQE5vdGUgVGhpcyBjbGFzcyBtYXkgaGF2ZSBzb21lIG5ldyBmdW5jdGlvbnMgdG8gZmFjaWxpdGF0ZSBkZXZlbG9wbWVudCwgc28gaXQgaXMgcmVjb21tZW5kZWQgdG8gdXNlIHRoaXMgY2xhc3MgaW5zdGVhZCBvZiBgUm9zT3JkZXJgZm9yIGEgbW9yZSBjb252ZW5pZW50IGRldmVsb3BtZW50IGV4cGVyaWVuY2UuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2FsaXl1bi1jYXMtb3JkZXJcbiAqL1xuZXhwb3J0IGNsYXNzIE9yZGVyIGV4dGVuZHMgcm9zLlJlc291cmNlIHtcbiAgICBwcm90ZWN0ZWQgc2NvcGU6IHJvcy5Db25zdHJ1Y3Q7XG4gICAgcHJvdGVjdGVkIGlkOiBzdHJpbmc7XG4gICAgcHJvdGVjdGVkIHByb3BzOiBPcmRlclByb3BzO1xuICAgIHByb3RlY3RlZCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIFBhcmFtIHNjb3BlIC0gc2NvcGUgaW4gd2hpY2ggdGhpcyByZXNvdXJjZSBpcyBkZWZpbmVkXG4gICAgICogUGFyYW0gaWQgICAgLSBzY29wZWQgaWQgb2YgdGhlIHJlc291cmNlXG4gICAgICogUGFyYW0gcHJvcHMgLSByZXNvdXJjZSBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IHJvcy5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBPcmRlclByb3BzLCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDpib29sZWFuID0gdHJ1ZSkge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQpO1xuICAgICAgICB0aGlzLnNjb3BlID0gc2NvcGU7XG4gICAgICAgIHRoaXMuaWQgPSBpZDtcbiAgICAgICAgdGhpcy5wcm9wcyA9IHByb3BzO1xuICAgICAgICB0aGlzLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ID0gZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ7XG5cbiAgICAgICAgY29uc3Qgcm9zT3JkZXIgPSBuZXcgUm9zT3JkZXIodGhpcywgaWQsICB7XG4gICAgICAgICAgICBkb21haW5DbnQ6IHByb3BzLmRvbWFpbkNudCA9PT0gdW5kZWZpbmVkIHx8IHByb3BzLmRvbWFpbkNudCA9PT0gbnVsbCA/IDEgOiBwcm9wcy5kb21haW5DbnQsXG4gICAgICAgICAgICBkb21haW5UeXBlOiBwcm9wcy5kb21haW5UeXBlID09PSB1bmRlZmluZWQgfHwgcHJvcHMuZG9tYWluVHlwZSA9PT0gbnVsbCA/ICdvbmUnIDogcHJvcHMuZG9tYWluVHlwZSxcbiAgICAgICAgICAgIHNlcnZpY2U6IHByb3BzLnNlcnZpY2UgPT09IHVuZGVmaW5lZCB8fCBwcm9wcy5zZXJ2aWNlID09PSBudWxsID8gJ05vTmVlZCcgOiBwcm9wcy5zZXJ2aWNlLFxuICAgICAgICAgICAgcGVyaW9kOiBwcm9wcy5wZXJpb2QgPT09IHVuZGVmaW5lZCB8fCBwcm9wcy5wZXJpb2QgPT09IG51bGwgPyAxIDogcHJvcHMucGVyaW9kLFxuICAgICAgICAgICAgY2VydFR5cGU6IHByb3BzLmNlcnRUeXBlLFxuICAgICAgICAgICAgY2VydEJyYW5kOiBwcm9wcy5jZXJ0QnJhbmQsXG4gICAgICAgIH0sIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ICYmIHRoaXMuc3RhY2suZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQpO1xuICAgICAgICB0aGlzLnJlc291cmNlID0gcm9zT3JkZXI7XG4gICAgfVxufVxuIl19