"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebRule = exports.WebRuleProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ddospro_generated_1 = require("./ddospro.generated");
Object.defineProperty(exports, "WebRuleProperty", { enumerable: true, get: function () { return ddospro_generated_1.RosWebRule; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::DDoSPro::WebRule`, which is used to create a forwarding rule for a website.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosWebRule`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-ddospro-webrule
 */
class WebRule extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosWebRule = new ddospro_generated_1.RosWebRule(this, id, {
            rsType: props.rsType,
            resourceGroupId: props.resourceGroupId,
            defenseId: props.defenseId,
            domain: props.domain,
            instanceIds: props.instanceIds,
            rules: props.rules,
            httpsExt: props.httpsExt,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosWebRule;
        this.attrDomain = rosWebRule.attrDomain;
    }
}
exports.WebRule = WebRule;
//# sourceMappingURL=data:application/json;base64,