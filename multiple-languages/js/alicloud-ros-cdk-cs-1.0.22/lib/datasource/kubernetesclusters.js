"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KubernetesClusters = exports.KubernetesClustersProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const cs_generated_1 = require("./cs.generated");
Object.defineProperty(exports, "KubernetesClustersProperty", { enumerable: true, get: function () { return cs_generated_1.RosKubernetesClusters; } });
/**
 * This class encapsulates and extends the ROS resource type `DATASOURCE::CS::KubernetesClusters`, which is used to query Container Service for Kubernetes (ACK) clusters.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosKubernetesClusters`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/datasource-cs-kubernetesclusters
 */
class KubernetesClusters extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props = {}, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosKubernetesClusters = new cs_generated_1.RosKubernetesClusters(this, id, {
            clusterSpec: props.clusterSpec,
            clusterType: props.clusterType,
            profile: props.profile,
            name: props.name,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosKubernetesClusters;
        this.attrClusterIds = rosKubernetesClusters.attrClusterIds;
        this.attrClusters = rosKubernetesClusters.attrClusters;
    }
}
exports.KubernetesClusters = KubernetesClusters;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia3ViZXJuZXRlc2NsdXN0ZXJzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsia3ViZXJuZXRlc2NsdXN0ZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDhDQUE4QztBQUM5QyxpREFBdUQ7QUFFckIsMkdBRnpCLG9DQUFxQixPQUU4QjtBQXlDNUQ7Ozs7R0FJRztBQUNILE1BQWEsa0JBQW1CLFNBQVEsR0FBRyxDQUFDLFFBQVE7SUFZaEQ7Ozs7T0FJRztJQUNILFlBQVksS0FBb0IsRUFBRSxFQUFVLEVBQUUsUUFBaUMsRUFBRSxFQUFFLG1DQUEyQyxJQUFJO1FBQzlILEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFakIsTUFBTSxxQkFBcUIsR0FBRyxJQUFJLG9DQUFxQixDQUFDLElBQUksRUFBRSxFQUFFLEVBQUc7WUFDL0QsV0FBVyxFQUFFLEtBQUssQ0FBQyxXQUFXO1lBQzlCLFdBQVcsRUFBRSxLQUFLLENBQUMsV0FBVztZQUM5QixPQUFPLEVBQUUsS0FBSyxDQUFDLE9BQU87WUFDdEIsSUFBSSxFQUFFLEtBQUssQ0FBQyxJQUFJO1NBQ25CLEVBQUUsZ0NBQWdDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO1FBQ3BGLElBQUksQ0FBQyxRQUFRLEdBQUcscUJBQXFCLENBQUM7UUFDdEMsSUFBSSxDQUFDLGNBQWMsR0FBRyxxQkFBcUIsQ0FBQyxjQUFjLENBQUM7UUFDM0QsSUFBSSxDQUFDLFlBQVksR0FBRyxxQkFBcUIsQ0FBQyxZQUFZLENBQUM7SUFDM0QsQ0FBQztDQUNKO0FBOUJELGdEQThCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHJvcyBmcm9tICdAYWxpY2xvdWQvcm9zLWNkay1jb3JlJztcbmltcG9ydCB7IFJvc0t1YmVybmV0ZXNDbHVzdGVycyB9IGZyb20gJy4vY3MuZ2VuZXJhdGVkJztcbi8vIEdlbmVyYXRlZCBmcm9tIHRoZSBBbGlDbG91ZCBST1MgUmVzb3VyY2UgU3BlY2lmaWNhdGlvblxuZXhwb3J0IHsgUm9zS3ViZXJuZXRlc0NsdXN0ZXJzIGFzIEt1YmVybmV0ZXNDbHVzdGVyc1Byb3BlcnR5IH07XG5cbi8qKlxuICogUHJvcGVydGllcyBmb3IgZGVmaW5pbmcgYSBgS3ViZXJuZXRlc0NsdXN0ZXJzYC5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvZGF0YXNvdXJjZS1jcy1rdWJlcm5ldGVzY2x1c3RlcnNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBLdWJlcm5ldGVzQ2x1c3RlcnNQcm9wcyB7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBjbHVzdGVyU3BlYzogVGhlIHNwZWNpZmljYXRpb24gb2YgdGhlIGNsdXN0ZXIuIElmIHlvdSBzZXQgdGhlIGNsdXN0ZXIgdHlwZSB0byBNYW5hZ2VkS3ViZXJuZXRlcywgeW91IGNhbiB1c2UgY2x1c3RlciBzcGVjaWZpY2F0aW9ucyB0byBkaXN0aW5ndWlzaCBjbHVzdGVycy4gVmFsaWQgdmFsdWVzOlxuICAgICAqIGFjay5wcm8uc21hbGw6IHByb2Zlc3Npb25hbCBtYW5hZ2VkIEt1YmVybmV0ZXMgY2x1c3RlclxuICAgICAqIGFjay5zdGFuZGFyZDogc3RhbmRhcmQgbWFuYWdlZCBLdWJlcm5ldGVzIGNsdXN0ZXJcbiAgICAgKiBCeSBkZWZhdWx0LCB0aGlzIHBhcmFtZXRlciBpcyBlbXB0eS4gVGhpcyBpbmRpY2F0ZXMgdGhhdCB0aGUgcGFyYW1ldGVyIGlzIG5vdCB1c2VkIHRvIGZpbHRlciBjbHVzdGVycy5cbiAgICAgKi9cbiAgICByZWFkb25seSBjbHVzdGVyU3BlYz86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGNsdXN0ZXJUeXBlOiBUaGUgdHlwZSBvZiB0aGUgY2x1c3Rlci4gVmFsaWQgdmFsdWVzOlxuICAgICAqIEt1YmVybmV0ZXM6IGRlZGljYXRlZCBLdWJlcm5ldGVzIGNsdXN0ZXJcbiAgICAgKiBNYW5hZ2VkS3ViZXJuZXRlczogbWFuYWdlZCBLdWJlcm5ldGVzIGNsdXN0ZXIsIHNlcnZlcmxlc3MgS3ViZXJuZXRlcyAoQVNLKSBjbHVzdGVyLCBvciBlZGdlIEt1YmVybmV0ZXMgY2x1c3RlclxuICAgICAqIEFzazogQVNLIGNsdXN0ZXJcbiAgICAgKiBFeHRlcm5hbEt1YmVybmV0ZXM6IHJlZ2lzdGVyZWQgZXh0ZXJuYWwgY2x1c3RlclxuICAgICAqIFdoZW4geW91IHF1ZXJ5IGFuIEFTSyBjbHVzdGVyLCB0aGUgdmFsdWUgc3BlY2lmaWVkIHdoZW4gdGhlIGNsdXN0ZXIgd2FzIGNyZWF0ZWQgaXMgcmV0dXJuZWQuXG4gICAgICovXG4gICAgcmVhZG9ubHkgY2x1c3RlclR5cGU/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBuYW1lOiBUaGUgbmFtZSBvZiB0aGUgY2x1c3Rlci5UaGUgbmFtZSBtdXN0IGJlIDEgdG8gNjMgY2hhcmFjdGVycyBpbiBsZW5ndGgsIGFuZCBjYW4gY29udGFpbiBkaWdpdHMsIGxldHRlcnMsIGFuZCBoeXBoZW5zICgtKS4gSXQgY2Fubm90IHN0YXJ0IHdpdGggYSBoeXBoZW4gKC0pLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IG5hbWU/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBwcm9maWxlOiBUaGUgaWRlbnRpZmllciBvZiB0aGUgY2x1c3Rlci4gSWYgeW91IHNldCB0aGUgY2x1c3RlciB0eXBlIHRvIE1hbmFnZWRLdWJlcm5ldGVzLCB5b3UgY2FuIHVzZSBjbHVzdGVyIGlkZW50aWZpZXJzIHRvIGRpc3Rpbmd1aXNoIGNsdXN0ZXJzLiBWYWxpZCB2YWx1ZXM6XG4gICAgICogRGVmYXVsdDogbWFuYWdlZCBLdWJlcm5ldGVzIGNsdXN0ZXJcbiAgICAgKiBTZXJ2ZXJsZXNzOiBBU0sgY2x1c3RlclxuICAgICAqIEVkZ2U6IGVkZ2UgS3ViZXJuZXRlcyBjbHVzdGVyXG4gICAgICogQnkgZGVmYXVsdCwgdGhpcyBwYXJhbWV0ZXIgaXMgZW1wdHkuIFRoaXMgaW5kaWNhdGVzIHRoYXQgdGhlIHBhcmFtZXRlciBpcyBub3QgdXNlZCB0byBmaWx0ZXIgY2x1c3RlcnMuXG4gICAgICovXG4gICAgcmVhZG9ubHkgcHJvZmlsZT86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcbn1cblxuLyoqXG4gKiBUaGlzIGNsYXNzIGVuY2Fwc3VsYXRlcyBhbmQgZXh0ZW5kcyB0aGUgUk9TIHJlc291cmNlIHR5cGUgYERBVEFTT1VSQ0U6OkNTOjpLdWJlcm5ldGVzQ2x1c3RlcnNgLCB3aGljaCBpcyB1c2VkIHRvIHF1ZXJ5IENvbnRhaW5lciBTZXJ2aWNlIGZvciBLdWJlcm5ldGVzIChBQ0spIGNsdXN0ZXJzLlxuICogQE5vdGUgVGhpcyBjbGFzcyBtYXkgaGF2ZSBzb21lIG5ldyBmdW5jdGlvbnMgdG8gZmFjaWxpdGF0ZSBkZXZlbG9wbWVudCwgc28gaXQgaXMgcmVjb21tZW5kZWQgdG8gdXNlIHRoaXMgY2xhc3MgaW5zdGVhZCBvZiBgUm9zS3ViZXJuZXRlc0NsdXN0ZXJzYGZvciBhIG1vcmUgY29udmVuaWVudCBkZXZlbG9wbWVudCBleHBlcmllbmNlLlxuICogU2VlIGh0dHBzOi8vd3d3LmFsaWJhYmFjbG91ZC5jb20vaGVscC9yb3MvZGV2ZWxvcGVyLXJlZmVyZW5jZS9kYXRhc291cmNlLWNzLWt1YmVybmV0ZXNjbHVzdGVyc1xuICovXG5leHBvcnQgY2xhc3MgS3ViZXJuZXRlc0NsdXN0ZXJzIGV4dGVuZHMgcm9zLlJlc291cmNlIHtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBDbHVzdGVySWRzOiBUaGUgbGlzdCBvZiBjbHVzdGVyIElEcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckNsdXN0ZXJJZHM6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBDbHVzdGVyczogVGhlIGxpc3Qgb2YgY2x1c3RlcnMuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJDbHVzdGVyczogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUGFyYW0gc2NvcGUgLSBzY29wZSBpbiB3aGljaCB0aGlzIHJlc291cmNlIGlzIGRlZmluZWRcbiAgICAgKiBQYXJhbSBpZCAgICAtIHNjb3BlZCBpZCBvZiB0aGUgcmVzb3VyY2VcbiAgICAgKiBQYXJhbSBwcm9wcyAtIHJlc291cmNlIHByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihzY29wZTogcm9zLkNvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IEt1YmVybmV0ZXNDbHVzdGVyc1Byb3BzID0ge30sIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OmJvb2xlYW4gPSB0cnVlKSB7XG4gICAgICAgIHN1cGVyKHNjb3BlLCBpZCk7XG5cbiAgICAgICAgY29uc3Qgcm9zS3ViZXJuZXRlc0NsdXN0ZXJzID0gbmV3IFJvc0t1YmVybmV0ZXNDbHVzdGVycyh0aGlzLCBpZCwgIHtcbiAgICAgICAgICAgIGNsdXN0ZXJTcGVjOiBwcm9wcy5jbHVzdGVyU3BlYyxcbiAgICAgICAgICAgIGNsdXN0ZXJUeXBlOiBwcm9wcy5jbHVzdGVyVHlwZSxcbiAgICAgICAgICAgIHByb2ZpbGU6IHByb3BzLnByb2ZpbGUsXG4gICAgICAgICAgICBuYW1lOiBwcm9wcy5uYW1lLFxuICAgICAgICB9LCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCAmJiB0aGlzLnN0YWNrLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50KTtcbiAgICAgICAgdGhpcy5yZXNvdXJjZSA9IHJvc0t1YmVybmV0ZXNDbHVzdGVycztcbiAgICAgICAgdGhpcy5hdHRyQ2x1c3RlcklkcyA9IHJvc0t1YmVybmV0ZXNDbHVzdGVycy5hdHRyQ2x1c3RlcklkcztcbiAgICAgICAgdGhpcy5hdHRyQ2x1c3RlcnMgPSByb3NLdWJlcm5ldGVzQ2x1c3RlcnMuYXR0ckNsdXN0ZXJzO1xuICAgIH1cbn1cbiJdfQ==