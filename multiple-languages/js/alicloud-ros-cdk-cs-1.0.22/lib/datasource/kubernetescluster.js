"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KubernetesCluster = exports.KubernetesClusterProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const cs_generated_1 = require("./cs.generated");
Object.defineProperty(exports, "KubernetesClusterProperty", { enumerable: true, get: function () { return cs_generated_1.RosKubernetesCluster; } });
/**
 * This class encapsulates and extends the ROS resource type `DATASOURCE::CS::KubernetesCluster`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosKubernetesCluster`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/datasource-cs-kubernetescluster
 */
class KubernetesCluster extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props = {}, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosKubernetesCluster = new cs_generated_1.RosKubernetesCluster(this, id, {
            clusterId: props.clusterId,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosKubernetesCluster;
        this.attrClusterId = rosKubernetesCluster.attrClusterId;
        this.attrClusterSpec = rosKubernetesCluster.attrClusterSpec;
        this.attrClusterType = rosKubernetesCluster.attrClusterType;
        this.attrCreated = rosKubernetesCluster.attrCreated;
        this.attrCurrentVersion = rosKubernetesCluster.attrCurrentVersion;
        this.attrDeletionProtection = rosKubernetesCluster.attrDeletionProtection;
        this.attrDockerVersion = rosKubernetesCluster.attrDockerVersion;
        this.attrExternalLoadbalancerId = rosKubernetesCluster.attrExternalLoadbalancerId;
        this.attrInitVersion = rosKubernetesCluster.attrInitVersion;
        this.attrMaintenanceWindow = rosKubernetesCluster.attrMaintenanceWindow;
        this.attrMasterUrl = rosKubernetesCluster.attrMasterUrl;
        this.attrMetaData = rosKubernetesCluster.attrMetaData;
        this.attrName = rosKubernetesCluster.attrName;
        this.attrNetworkMode = rosKubernetesCluster.attrNetworkMode;
        this.attrNextVersion = rosKubernetesCluster.attrNextVersion;
        this.attrParameters = rosKubernetesCluster.attrParameters;
        this.attrPrivateZone = rosKubernetesCluster.attrPrivateZone;
        this.attrProfile = rosKubernetesCluster.attrProfile;
        this.attrRegionId = rosKubernetesCluster.attrRegionId;
        this.attrResourceGroupId = rosKubernetesCluster.attrResourceGroupId;
        this.attrSecurityGroupId = rosKubernetesCluster.attrSecurityGroupId;
        this.attrSize = rosKubernetesCluster.attrSize;
        this.attrState = rosKubernetesCluster.attrState;
        this.attrSubnetCidr = rosKubernetesCluster.attrSubnetCidr;
        this.attrTags = rosKubernetesCluster.attrTags;
        this.attrUpdated = rosKubernetesCluster.attrUpdated;
        this.attrVSwitchId = rosKubernetesCluster.attrVSwitchId;
        this.attrVpcId = rosKubernetesCluster.attrVpcId;
        this.attrWorkerRamRoleName = rosKubernetesCluster.attrWorkerRamRoleName;
        this.attrZoneId = rosKubernetesCluster.attrZoneId;
    }
}
exports.KubernetesCluster = KubernetesCluster;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia3ViZXJuZXRlc2NsdXN0ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJrdWJlcm5ldGVzY2x1c3Rlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw4Q0FBOEM7QUFDOUMsaURBQXNEO0FBRXJCLDBHQUZ4QixtQ0FBb0IsT0FFNkI7QUFjMUQ7Ozs7R0FJRztBQUNILE1BQWEsaUJBQWtCLFNBQVEsR0FBRyxDQUFDLFFBQVE7SUF5TC9DOzs7O09BSUc7SUFDSCxZQUFZLEtBQW9CLEVBQUUsRUFBVSxFQUFFLFFBQWdDLEVBQUUsRUFBRSxtQ0FBMkMsSUFBSTtRQUM3SCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRWpCLE1BQU0sb0JBQW9CLEdBQUcsSUFBSSxtQ0FBb0IsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFHO1lBQzdELFNBQVMsRUFBRSxLQUFLLENBQUMsU0FBUztTQUM3QixFQUFFLGdDQUFnQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztRQUNwRixJQUFJLENBQUMsUUFBUSxHQUFHLG9CQUFvQixDQUFDO1FBQ3JDLElBQUksQ0FBQyxhQUFhLEdBQUcsb0JBQW9CLENBQUMsYUFBYSxDQUFDO1FBQ3hELElBQUksQ0FBQyxlQUFlLEdBQUcsb0JBQW9CLENBQUMsZUFBZSxDQUFDO1FBQzVELElBQUksQ0FBQyxlQUFlLEdBQUcsb0JBQW9CLENBQUMsZUFBZSxDQUFDO1FBQzVELElBQUksQ0FBQyxXQUFXLEdBQUcsb0JBQW9CLENBQUMsV0FBVyxDQUFDO1FBQ3BELElBQUksQ0FBQyxrQkFBa0IsR0FBRyxvQkFBb0IsQ0FBQyxrQkFBa0IsQ0FBQztRQUNsRSxJQUFJLENBQUMsc0JBQXNCLEdBQUcsb0JBQW9CLENBQUMsc0JBQXNCLENBQUM7UUFDMUUsSUFBSSxDQUFDLGlCQUFpQixHQUFHLG9CQUFvQixDQUFDLGlCQUFpQixDQUFDO1FBQ2hFLElBQUksQ0FBQywwQkFBMEIsR0FBRyxvQkFBb0IsQ0FBQywwQkFBMEIsQ0FBQztRQUNsRixJQUFJLENBQUMsZUFBZSxHQUFHLG9CQUFvQixDQUFDLGVBQWUsQ0FBQztRQUM1RCxJQUFJLENBQUMscUJBQXFCLEdBQUcsb0JBQW9CLENBQUMscUJBQXFCLENBQUM7UUFDeEUsSUFBSSxDQUFDLGFBQWEsR0FBRyxvQkFBb0IsQ0FBQyxhQUFhLENBQUM7UUFDeEQsSUFBSSxDQUFDLFlBQVksR0FBRyxvQkFBb0IsQ0FBQyxZQUFZLENBQUM7UUFDdEQsSUFBSSxDQUFDLFFBQVEsR0FBRyxvQkFBb0IsQ0FBQyxRQUFRLENBQUM7UUFDOUMsSUFBSSxDQUFDLGVBQWUsR0FBRyxvQkFBb0IsQ0FBQyxlQUFlLENBQUM7UUFDNUQsSUFBSSxDQUFDLGVBQWUsR0FBRyxvQkFBb0IsQ0FBQyxlQUFlLENBQUM7UUFDNUQsSUFBSSxDQUFDLGNBQWMsR0FBRyxvQkFBb0IsQ0FBQyxjQUFjLENBQUM7UUFDMUQsSUFBSSxDQUFDLGVBQWUsR0FBRyxvQkFBb0IsQ0FBQyxlQUFlLENBQUM7UUFDNUQsSUFBSSxDQUFDLFdBQVcsR0FBRyxvQkFBb0IsQ0FBQyxXQUFXLENBQUM7UUFDcEQsSUFBSSxDQUFDLFlBQVksR0FBRyxvQkFBb0IsQ0FBQyxZQUFZLENBQUM7UUFDdEQsSUFBSSxDQUFDLG1CQUFtQixHQUFHLG9CQUFvQixDQUFDLG1CQUFtQixDQUFDO1FBQ3BFLElBQUksQ0FBQyxtQkFBbUIsR0FBRyxvQkFBb0IsQ0FBQyxtQkFBbUIsQ0FBQztRQUNwRSxJQUFJLENBQUMsUUFBUSxHQUFHLG9CQUFvQixDQUFDLFFBQVEsQ0FBQztRQUM5QyxJQUFJLENBQUMsU0FBUyxHQUFHLG9CQUFvQixDQUFDLFNBQVMsQ0FBQztRQUNoRCxJQUFJLENBQUMsY0FBYyxHQUFHLG9CQUFvQixDQUFDLGNBQWMsQ0FBQztRQUMxRCxJQUFJLENBQUMsUUFBUSxHQUFHLG9CQUFvQixDQUFDLFFBQVEsQ0FBQztRQUM5QyxJQUFJLENBQUMsV0FBVyxHQUFHLG9CQUFvQixDQUFDLFdBQVcsQ0FBQztRQUNwRCxJQUFJLENBQUMsYUFBYSxHQUFHLG9CQUFvQixDQUFDLGFBQWEsQ0FBQztRQUN4RCxJQUFJLENBQUMsU0FBUyxHQUFHLG9CQUFvQixDQUFDLFNBQVMsQ0FBQztRQUNoRCxJQUFJLENBQUMscUJBQXFCLEdBQUcsb0JBQW9CLENBQUMscUJBQXFCLENBQUM7UUFDeEUsSUFBSSxDQUFDLFVBQVUsR0FBRyxvQkFBb0IsQ0FBQyxVQUFVLENBQUM7SUFDdEQsQ0FBQztDQUNKO0FBcE9ELDhDQW9PQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHJvcyBmcm9tICdAYWxpY2xvdWQvcm9zLWNkay1jb3JlJztcbmltcG9ydCB7IFJvc0t1YmVybmV0ZXNDbHVzdGVyIH0gZnJvbSAnLi9jcy5nZW5lcmF0ZWQnO1xuLy8gR2VuZXJhdGVkIGZyb20gdGhlIEFsaUNsb3VkIFJPUyBSZXNvdXJjZSBTcGVjaWZpY2F0aW9uXG5leHBvcnQgeyBSb3NLdWJlcm5ldGVzQ2x1c3RlciBhcyBLdWJlcm5ldGVzQ2x1c3RlclByb3BlcnR5IH07XG5cbi8qKlxuICogUHJvcGVydGllcyBmb3IgZGVmaW5pbmcgYSBgS3ViZXJuZXRlc0NsdXN0ZXJgLlxuICogU2VlIGh0dHBzOi8vd3d3LmFsaWJhYmFjbG91ZC5jb20vaGVscC9yb3MvZGV2ZWxvcGVyLXJlZmVyZW5jZS9kYXRhc291cmNlLWNzLWt1YmVybmV0ZXNjbHVzdGVyXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgS3ViZXJuZXRlc0NsdXN0ZXJQcm9wcyB7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBjbHVzdGVySWQ6IENsdXN0ZXIgaW5zdGFuY2UgSUQuXG4gICAgICovXG4gICAgcmVhZG9ubHkgY2x1c3RlcklkPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xufVxuXG4vKipcbiAqIFRoaXMgY2xhc3MgZW5jYXBzdWxhdGVzIGFuZCBleHRlbmRzIHRoZSBST1MgcmVzb3VyY2UgdHlwZSBgREFUQVNPVVJDRTo6Q1M6Okt1YmVybmV0ZXNDbHVzdGVyYC5cbiAqIEBOb3RlIFRoaXMgY2xhc3MgbWF5IGhhdmUgc29tZSBuZXcgZnVuY3Rpb25zIHRvIGZhY2lsaXRhdGUgZGV2ZWxvcG1lbnQsIHNvIGl0IGlzIHJlY29tbWVuZGVkIHRvIHVzZSB0aGlzIGNsYXNzIGluc3RlYWQgb2YgYFJvc0t1YmVybmV0ZXNDbHVzdGVyYGZvciBhIG1vcmUgY29udmVuaWVudCBkZXZlbG9wbWVudCBleHBlcmllbmNlLlxuICogU2VlIGh0dHBzOi8vd3d3LmFsaWJhYmFjbG91ZC5jb20vaGVscC9yb3MvZGV2ZWxvcGVyLXJlZmVyZW5jZS9kYXRhc291cmNlLWNzLWt1YmVybmV0ZXNjbHVzdGVyXG4gKi9cbmV4cG9ydCBjbGFzcyBLdWJlcm5ldGVzQ2x1c3RlciBleHRlbmRzIHJvcy5SZXNvdXJjZSB7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgQ2x1c3RlcklkOiBDbHVzdGVyIGluc3RhbmNlIElELlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyQ2x1c3RlcklkOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgQ2x1c3RlclNwZWM6IFRoZSB0eXBlIG9mIHRoZSBtYW5hZ2VkIEt1YmVybmV0ZXMgY2x1c3Rlci4gVGhpcyBwYXJhbWV0ZXIgaXMgcmV0dXJuZWQgZm9yIGEgbWFuYWdlZCBLdWJlcm5ldGVzIGNsdXN0ZXIuIFZhbGlkIHZhbHVlczpcbi0gYWNrLnByby5zbWFsbDogcHJvZmVzc2lvbmFsIG1hbmFnZWQgS3ViZXJuZXRlcyBjbHVzdGVyLlxuLSBhY2suc3RhbmRhcmQ6IHN0YW5kYXJkIG1hbmFnZWQgS3ViZXJuZXRlcyBjbHVzdGVyLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyQ2x1c3RlclNwZWM6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBDbHVzdGVyVHlwZTogVGhlIHR5cGUgb2YgdGhlIGNsdXN0ZXIuIFZhbGlkIHZhbHVlczpcbi0gS3ViZXJuZXRlczogZGVkaWNhdGVkIEt1YmVybmV0ZXMgY2x1c3RlclxuLSBNYW5hZ2VkS3ViZXJuZXRlczogbWFuYWdlZCBLdWJlcm5ldGVzIGNsdXN0ZXJcbi0gQXNrOiBBU0sgY2x1c3RlclxuLSBFeHRlcm5hbEt1YmVybmV0ZXM6IHJlZ2lzdGVyZWQgZXh0ZXJuYWwgS3ViZXJuZXRlcyBjbHVzdGVyXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJDbHVzdGVyVHlwZTogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIENyZWF0ZWQ6IFRoZSB0aW1lIHdoZW4gdGhlIGNsdXN0ZXIgd2FzIGNyZWF0ZWQuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJDcmVhdGVkOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgQ3VycmVudFZlcnNpb246IFRoZSBjdXJyZW50IEt1YmVybmV0ZXMgdmVyc2lvbiBvZiB0aGUgY2x1c3Rlci4gRm9yIG1vcmUgaW5mb3JtYXRpb24gYWJvdXQgdGhlIEt1YmVybmV0ZXMgdmVyc2lvbnMgc3VwcG9ydGVkIGJ5IEFDSywgc2VlIFJlbGVhc2Ugbm90ZXMgZm9yIEt1YmVybmV0ZXMgdmVyc2lvbnMuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJDdXJyZW50VmVyc2lvbjogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIERlbGV0aW9uUHJvdGVjdGlvbjogSW5kaWNhdGVzIHdoZXRoZXIgZGVsZXRpb24gcHJvdGVjdGlvbiBpcyBlbmFibGVkLiBJZiBkZWxldGlvbiBwcm90ZWN0aW9uIGlzIGVuYWJsZWQsIHRoZSBjbHVzdGVyIGNhbm5vdCBiZSBkZWxldGVkIGluIHRoZSBBQ0sgY29uc29sZSBvciBieSBjYWxsaW5nIHRoZSBBUEkuIFZhbGlkIHZhbHVlczpcbi0gdHJ1ZTogRGVsZXRpb24gcHJvdGVjdGlvbiBpcyBlbmFibGVkLiBZb3UgY2Fubm90IGRlbGV0ZSB0aGUgY2x1c3RlciBpbiB0aGUgQUNLIGNvbnNvbGUgb3IgYnkgY2FsbGluZyB0aGUgQVBJLlxuLSBmYWxzZTogRGVsZXRpb24gcHJvdGVjdGlvbiBpcyBub3QgZW5hYmxlZC4gWW91IGNhbiBkZWxldGUgdGhlIGNsdXN0ZXIgaW4gdGhlIEFDSyBjb25zb2xlIG9yIGJ5IGNhbGxpbmcgdGhlIEFQSS5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckRlbGV0aW9uUHJvdGVjdGlvbjogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIERvY2tlclZlcnNpb246IFRoZSBEb2NrZXIgdmVyc2lvbiB0aGF0IGlzIHVzZWQgYnkgdGhlIGNsdXN0ZXIuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJEb2NrZXJWZXJzaW9uOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgRXh0ZXJuYWxMb2FkYmFsYW5jZXJJZDogVGhlIElEIG9mIHRoZSBTZXJ2ZXIgTG9hZCBCYWxhbmNlciAoU0xCKSBpbnN0YW5jZSB0aGF0IGlzIHVzZWQgZm9yIHRoZSBJbmdyZXNzIG9mIHRoZSBjbHVzdGVyLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyRXh0ZXJuYWxMb2FkYmFsYW5jZXJJZDogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIEluaXRWZXJzaW9uOiBUaGUgS3ViZXJuZXRlcyB2ZXJzaW9uIHRoYXQgaXMgaW5pdGlhbGx5IHVzZWQgYnkgdGhlIGNsdXN0ZXIuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJJbml0VmVyc2lvbjogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIE1haW50ZW5hbmNlV2luZG93OiBUaGUgbWFpbnRlbmFuY2Ugd2luZG93IG9mIHRoZSBjbHVzdGVyLiBUaGlzIGZlYXR1cmUgaXMgYXZhaWxhYmxlIGluIG9ubHkgcHJvZmVzc2lvbmFsIG1hbmFnZWQgS3ViZXJuZXRlcyBjbHVzdGVycy5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ck1haW50ZW5hbmNlV2luZG93OiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgTWFzdGVyVXJsOiBUaGUgYWRkcmVzcyBvZiB0aGUgY2x1c3Rlci4gSXQgaW5jbHVkZXMgYW4gaW50ZXJuYWwgZW5kcG9pbnQgYW5kIGEgcHVibGljIGVuZHBvaW50LlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyTWFzdGVyVXJsOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgTWV0YURhdGE6IFRoZSBtZXRhZGF0YSBvZiB0aGUgY2x1c3Rlci5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ck1ldGFEYXRhOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgTmFtZTogVGhlIG5hbWUgb2YgdGhlIGNsdXN0ZXIuIFRoZSBuYW1lIG11c3QgYmUgMSB0byA2MyBjaGFyYWN0ZXJzIGluIGxlbmd0aCwgYW5kIGNhbiBjb250YWluIGRpZ2l0cywgbGV0dGVycywgYW5kIGh5cGhlbnMgKC0pLiBJdCBjYW5ub3Qgc3RhcnQgd2l0aCBhIGh5cGhlbiAoLSkuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJOYW1lOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgTmV0d29ya01vZGU6IFRoZSBuZXR3b3JrIG1vZGUgb2YgdGhlIGNsdXN0ZXIuIFZhbGlkIHZhbHVlczogXG4tIGNsYXNzaWM6IHRoZSBjbGFzc2ljIG5ldHdvcmsgXG4tIHZwYzogdmlydHVhbCBwcml2YXRlIGNsb3VkIChWUEMpIFxuLSBvdmVybGF5OiBvdmVybGF5IG5ldHdvcmtcbi0gY2FsaWNvOiBuZXR3b3JrIHBvd2VyZWQgYnkgQ2FsaWNvXG5EZWZhdWx0IHZhbHVlOiB2cGMuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJOZXR3b3JrTW9kZTogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIE5leHRWZXJzaW9uOiBUaGUgS3ViZXJuZXRlcyB2ZXJzaW9uIHRvIHdoaWNoIHRoZSBjbHVzdGVyIGNhbiBiZSB1cGdyYWRlZC5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ck5leHRWZXJzaW9uOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgUGFyYW1ldGVyczogQSBjb2xsZWN0aW9uIG9mIGNsdXN0ZXIgUk9TIHBhcmFtZXRlcnMuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJQYXJhbWV0ZXJzOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgUHJpdmF0ZVpvbmU6IEluZGljYXRlcyB3aGV0aGVyIEFsaWJhYmEgQ2xvdWQgRE5TIFByaXZhdGVab25lIGlzIGVuYWJsZWQuXG4tIHRydWU6IGluZGljYXRlcyB0aGF0IEFsaWJhYmEgQ2xvdWQgRE5TIFByaXZhdGVab25lIGlzIGVuYWJsZWQuLSBmYWxzZTogaW5kaWNhdGVzIHRoYXQgQWxpYmFiYSBDbG91ZCBETlMgUHJpdmF0ZVpvbmUgaXMgbm90IGVuYWJsZWQuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJQcml2YXRlWm9uZTogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIFByb2ZpbGU6IEluZGljYXRlcyB0aGUgc2NlbmFyaW8gaW4gd2hpY2ggdGhlIGNsdXN0ZXIgaXMgdXNlZC4gVmFsaWQgdmFsdWVzOlxuLSBEZWZhdWx0OiBpbmRpY2F0ZXMgdGhhdCB0aGUgY2x1c3RlciBpcyB1c2VkIGluIG5vbi1lZGdlIGNvbXB1dGluZyBzY2VuYXJpb3MuXG4tIEVkZ2U6IGluZGljYXRlcyB0aGF0IHRoZSBBQ0sgY2x1c3RlciBpcyB1c2VkIGluIGVkZ2UgY29tcHV0aW5nIHNjZW5hcmlvcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0clByb2ZpbGU6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBSZWdpb25JZDogVGhlIElEIG9mIHRoZSByZWdpb24gd2hlcmUgdGhlIGNsdXN0ZXIgaXMgZGVwbG95ZWQuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJSZWdpb25JZDogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIFJlc291cmNlR3JvdXBJZDogVGhlIElEIG9mIHRoZSByZXNvdXJjZSBncm91cCB0byB3aGljaCB0aGUgY2x1c3RlciBiZWxvbmdzLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyUmVzb3VyY2VHcm91cElkOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgU2VjdXJpdHlHcm91cElkOiBUaGUgSUQgb2YgdGhlIHNlY3VyaXR5IGdyb3VwIHRvIHdoaWNoIHRoZSBpbnN0YW5jZXMgb2YgdGhlIGNsdXN0ZXIgYmVsb25nLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyU2VjdXJpdHlHcm91cElkOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgU2l6ZTogVGhlIG51bWJlciBvZiBub2RlcyBpbiB0aGUgY2x1c3Rlci4gTWFzdGVyIG5vZGVzIGFuZCB3b3JrZXIgbm9kZXMgYXJlIGluY2x1ZGVkLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyU2l6ZTogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIFN0YXRlOiBUaGUgc3RhdGUgb2YgdGhlIGNsdXN0ZXIuIFZhbGlkIHZhbHVlczpcbi0gaW5pdGlhbDogVGhlIGNsdXN0ZXIgaXMgYmVpbmcgY3JlYXRlZC5cbi0gZmFpbGVkOiBUaGUgY2x1c3RlciBmYWlsZWQgdG8gYmUgY3JlYXRlZC5cbi0gcnVubmluZzogVGhlIGNsdXN0ZXIgaXMgcnVubmluZy5cbi0gdXBkYXRpbmc6IFRoZSBjbHVzdGVyIGlzIGJlaW5nIHVwZ3JhZGVkLlxuLSB1cGRhdGluZ19mYWlsZWQ6IFRoZSBjbHVzdGVyIGZhaWxlZCB0byBiZSB1cGdyYWRlZC5cbi0gc2NhbGluZzogVGhlIGNsdXN0ZXIgaXMgYmVpbmcgc2NhbGVkLlxuLSB3YWl0aW5nOiBUaGUgcmVnaXN0ZXJlZCBjbHVzdGVyIGlzIHdhaXRpbmcgZm9yIGNvbm5lY3RpbmcuXG4tIGRpc2Nvbm5lY3RlZDogVGhlIHJlZ2lzdGVyZWRjbHVzdGVyIGlzIGRpc2Nvbm5lY3RlZC5cbi0gc3RvcHBlZDogVGhlIGNsdXN0ZXIgaXMgc3RvcHBlZC5cbi0gZGVsZXRpbmc6IFRoZSBjbHVzdGVyIGlzIGJlaW5nIGRlbGV0ZWQuXG4tIGRlbGV0ZWQ6IFRoZSBjbHVzdGVyIGlzIGRlbGV0ZWQuXG4tIGRlbGV0ZV9mYWlsZWQ6IFRoZSBjbHVzdGVyIGZhaWxlZCB0byBiZSBkZWxldGVkLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyU3RhdGU6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBTdWJuZXRDaWRyOiBUaGUgcG9kIENJRFIgYmxvY2suIEl0IG11c3QgYmUgYSB2YWxpZCBhbmQgcHJpdmF0ZSBDSURSIGJsb2NrLCBhbmQgbXVzdCBiZSBvbmUgb2YgdGhlIGZvbGxvd2luZyBDSURSIGJsb2NrcyBvciB0aGVpciBzdWJuZXRzOlxuLSAxMC4wLjAuMC84XG4tIDE3Mi4xNi0zMS4wLjAvMTItMTZcbi0gMTkyLjE2OC4wLjAvMTZcblRoZSBwb2QgQ0lEUiBibG9jayBjYW5ub3Qgb3ZlcmxhcCB3aXRoIHRoYXQgb2YgdGhlIFZQQyBvciB0aG9zZSBvZiB0aGUgQUNLIGNsdXN0ZXJzIHRoYXQgYXJlIGRlcGxveWVkIGluIHRoZSBWUEMuIEZvciBtb3JlIGluZm9ybWF0aW9uIGFib3V0IHRoZSBuZXR3b3JrIHNlZ21lbnRhdGlvbiBvZiBBQ0sgY2x1c3RlcnMsIHNlZSBQbGFuIENJRFIgYmxvY2tzIGZvciBBQ0sgY2x1c3RlcnMgaW4gYSBWUEMuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJTdWJuZXRDaWRyOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgVGFnczogVGhlIGxhYmVscyBvZiB0aGUgY2x1c3Rlci5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0clRhZ3M6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBVcGRhdGVkOiBUaGUgdGltZSB3aGVuIHRoZSBjbHVzdGVyIHdhcyB1cGRhdGVkLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyVXBkYXRlZDogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIFZTd2l0Y2hJZDogVGhlIElEcyBvZiB0aGUgdlN3aXRjaGVzLiBZb3UgY2FuIHNlbGVjdCBvbmUgdG8gdGhyZWUgdlN3aXRjaGVzIHdoZW4geW91IGNyZWF0ZSBhbiBBQ0sgY2x1c3Rlci4gdlN3aXRjaGVzIGluIGRpZmZlcmVudCB6b25lcyBhcmUgcmVjb21tZW5kZWQgdG8gZW5zdXJlIGhpZ2ggYXZhaWxhYmlsaXR5LlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyVlN3aXRjaElkOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgVnBjSWQ6IFRoZSBJRCBvZiB0aGUgVlBDIHdoZXJlIHRoZSBjbHVzdGVyIGlzIGRlcGxveWVkLiBUaGlzIHBhcmFtZXRlciBpcyByZXF1aXJlZCB3aGVuIHlvdSBjcmVhdGUgYW4gQUNLIGNsdXN0ZXIuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJWcGNJZDogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIFdvcmtlclJhbVJvbGVOYW1lOiBUaGUgbmFtZSBvZiB0aGUgd29ya2VyIFJBTSByb2xlLiBcblRoZSBSQU0gcm9sZSBpcyBhc3NpZ25lZCB0byB0aGUgd29ya2VyIG5vZGVzIG9mIHRoZSBjbHVzdGVyIGFuZCBhbGxvd3MgdGhlIHdvcmtlciBub2RlcyB0byBtYW5hZ2UgRWxhc3RpYyBDb21wdXRlIFNlcnZpY2UgKEVDUykgaW5zdGFuY2VzLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyV29ya2VyUmFtUm9sZU5hbWU6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBab25lSWQ6IFRoZSBJRCBvZiB0aGUgem9uZSB3aGVyZSB0aGUgY2x1c3RlciBpcyBkZXBsb3llZC5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0clpvbmVJZDogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUGFyYW0gc2NvcGUgLSBzY29wZSBpbiB3aGljaCB0aGlzIHJlc291cmNlIGlzIGRlZmluZWRcbiAgICAgKiBQYXJhbSBpZCAgICAtIHNjb3BlZCBpZCBvZiB0aGUgcmVzb3VyY2VcbiAgICAgKiBQYXJhbSBwcm9wcyAtIHJlc291cmNlIHByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihzY29wZTogcm9zLkNvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IEt1YmVybmV0ZXNDbHVzdGVyUHJvcHMgPSB7fSwgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6Ym9vbGVhbiA9IHRydWUpIHtcbiAgICAgICAgc3VwZXIoc2NvcGUsIGlkKTtcblxuICAgICAgICBjb25zdCByb3NLdWJlcm5ldGVzQ2x1c3RlciA9IG5ldyBSb3NLdWJlcm5ldGVzQ2x1c3Rlcih0aGlzLCBpZCwgIHtcbiAgICAgICAgICAgIGNsdXN0ZXJJZDogcHJvcHMuY2x1c3RlcklkLFxuICAgICAgICB9LCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCAmJiB0aGlzLnN0YWNrLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50KTtcbiAgICAgICAgdGhpcy5yZXNvdXJjZSA9IHJvc0t1YmVybmV0ZXNDbHVzdGVyO1xuICAgICAgICB0aGlzLmF0dHJDbHVzdGVySWQgPSByb3NLdWJlcm5ldGVzQ2x1c3Rlci5hdHRyQ2x1c3RlcklkO1xuICAgICAgICB0aGlzLmF0dHJDbHVzdGVyU3BlYyA9IHJvc0t1YmVybmV0ZXNDbHVzdGVyLmF0dHJDbHVzdGVyU3BlYztcbiAgICAgICAgdGhpcy5hdHRyQ2x1c3RlclR5cGUgPSByb3NLdWJlcm5ldGVzQ2x1c3Rlci5hdHRyQ2x1c3RlclR5cGU7XG4gICAgICAgIHRoaXMuYXR0ckNyZWF0ZWQgPSByb3NLdWJlcm5ldGVzQ2x1c3Rlci5hdHRyQ3JlYXRlZDtcbiAgICAgICAgdGhpcy5hdHRyQ3VycmVudFZlcnNpb24gPSByb3NLdWJlcm5ldGVzQ2x1c3Rlci5hdHRyQ3VycmVudFZlcnNpb247XG4gICAgICAgIHRoaXMuYXR0ckRlbGV0aW9uUHJvdGVjdGlvbiA9IHJvc0t1YmVybmV0ZXNDbHVzdGVyLmF0dHJEZWxldGlvblByb3RlY3Rpb247XG4gICAgICAgIHRoaXMuYXR0ckRvY2tlclZlcnNpb24gPSByb3NLdWJlcm5ldGVzQ2x1c3Rlci5hdHRyRG9ja2VyVmVyc2lvbjtcbiAgICAgICAgdGhpcy5hdHRyRXh0ZXJuYWxMb2FkYmFsYW5jZXJJZCA9IHJvc0t1YmVybmV0ZXNDbHVzdGVyLmF0dHJFeHRlcm5hbExvYWRiYWxhbmNlcklkO1xuICAgICAgICB0aGlzLmF0dHJJbml0VmVyc2lvbiA9IHJvc0t1YmVybmV0ZXNDbHVzdGVyLmF0dHJJbml0VmVyc2lvbjtcbiAgICAgICAgdGhpcy5hdHRyTWFpbnRlbmFuY2VXaW5kb3cgPSByb3NLdWJlcm5ldGVzQ2x1c3Rlci5hdHRyTWFpbnRlbmFuY2VXaW5kb3c7XG4gICAgICAgIHRoaXMuYXR0ck1hc3RlclVybCA9IHJvc0t1YmVybmV0ZXNDbHVzdGVyLmF0dHJNYXN0ZXJVcmw7XG4gICAgICAgIHRoaXMuYXR0ck1ldGFEYXRhID0gcm9zS3ViZXJuZXRlc0NsdXN0ZXIuYXR0ck1ldGFEYXRhO1xuICAgICAgICB0aGlzLmF0dHJOYW1lID0gcm9zS3ViZXJuZXRlc0NsdXN0ZXIuYXR0ck5hbWU7XG4gICAgICAgIHRoaXMuYXR0ck5ldHdvcmtNb2RlID0gcm9zS3ViZXJuZXRlc0NsdXN0ZXIuYXR0ck5ldHdvcmtNb2RlO1xuICAgICAgICB0aGlzLmF0dHJOZXh0VmVyc2lvbiA9IHJvc0t1YmVybmV0ZXNDbHVzdGVyLmF0dHJOZXh0VmVyc2lvbjtcbiAgICAgICAgdGhpcy5hdHRyUGFyYW1ldGVycyA9IHJvc0t1YmVybmV0ZXNDbHVzdGVyLmF0dHJQYXJhbWV0ZXJzO1xuICAgICAgICB0aGlzLmF0dHJQcml2YXRlWm9uZSA9IHJvc0t1YmVybmV0ZXNDbHVzdGVyLmF0dHJQcml2YXRlWm9uZTtcbiAgICAgICAgdGhpcy5hdHRyUHJvZmlsZSA9IHJvc0t1YmVybmV0ZXNDbHVzdGVyLmF0dHJQcm9maWxlO1xuICAgICAgICB0aGlzLmF0dHJSZWdpb25JZCA9IHJvc0t1YmVybmV0ZXNDbHVzdGVyLmF0dHJSZWdpb25JZDtcbiAgICAgICAgdGhpcy5hdHRyUmVzb3VyY2VHcm91cElkID0gcm9zS3ViZXJuZXRlc0NsdXN0ZXIuYXR0clJlc291cmNlR3JvdXBJZDtcbiAgICAgICAgdGhpcy5hdHRyU2VjdXJpdHlHcm91cElkID0gcm9zS3ViZXJuZXRlc0NsdXN0ZXIuYXR0clNlY3VyaXR5R3JvdXBJZDtcbiAgICAgICAgdGhpcy5hdHRyU2l6ZSA9IHJvc0t1YmVybmV0ZXNDbHVzdGVyLmF0dHJTaXplO1xuICAgICAgICB0aGlzLmF0dHJTdGF0ZSA9IHJvc0t1YmVybmV0ZXNDbHVzdGVyLmF0dHJTdGF0ZTtcbiAgICAgICAgdGhpcy5hdHRyU3VibmV0Q2lkciA9IHJvc0t1YmVybmV0ZXNDbHVzdGVyLmF0dHJTdWJuZXRDaWRyO1xuICAgICAgICB0aGlzLmF0dHJUYWdzID0gcm9zS3ViZXJuZXRlc0NsdXN0ZXIuYXR0clRhZ3M7XG4gICAgICAgIHRoaXMuYXR0clVwZGF0ZWQgPSByb3NLdWJlcm5ldGVzQ2x1c3Rlci5hdHRyVXBkYXRlZDtcbiAgICAgICAgdGhpcy5hdHRyVlN3aXRjaElkID0gcm9zS3ViZXJuZXRlc0NsdXN0ZXIuYXR0clZTd2l0Y2hJZDtcbiAgICAgICAgdGhpcy5hdHRyVnBjSWQgPSByb3NLdWJlcm5ldGVzQ2x1c3Rlci5hdHRyVnBjSWQ7XG4gICAgICAgIHRoaXMuYXR0cldvcmtlclJhbVJvbGVOYW1lID0gcm9zS3ViZXJuZXRlc0NsdXN0ZXIuYXR0cldvcmtlclJhbVJvbGVOYW1lO1xuICAgICAgICB0aGlzLmF0dHJab25lSWQgPSByb3NLdWJlcm5ldGVzQ2x1c3Rlci5hdHRyWm9uZUlkO1xuICAgIH1cbn1cbiJdfQ==