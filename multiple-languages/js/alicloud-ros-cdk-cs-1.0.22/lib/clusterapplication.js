"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClusterApplication = exports.ClusterApplicationProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const cs_generated_1 = require("./cs.generated");
Object.defineProperty(exports, "ClusterApplicationProperty", { enumerable: true, get: function () { return cs_generated_1.RosClusterApplication; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::CS::ClusterApplication`, which is used to deploy a container application.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosClusterApplication`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-cs-clusterapplication
 */
class ClusterApplication extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosClusterApplication = new cs_generated_1.RosClusterApplication(this, id, {
            rolePolicy: props.rolePolicy === undefined || props.rolePolicy === null ? 'EnsureAdminRoleAndBinding' : props.rolePolicy,
            clusterId: props.clusterId,
            yamlContent: props.yamlContent,
            defaultNamespace: props.defaultNamespace === undefined || props.defaultNamespace === null ? 'default' : props.defaultNamespace,
            stage: props.stage === undefined || props.stage === null ? 'All' : props.stage,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosClusterApplication;
        this.attrClusterId = rosClusterApplication.attrClusterId;
    }
}
exports.ClusterApplication = ClusterApplication;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2x1c3RlcmFwcGxpY2F0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY2x1c3RlcmFwcGxpY2F0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDhDQUE4QztBQUM5QyxpREFBdUQ7QUFFckIsMkdBRnpCLG9DQUFxQixPQUU4QjtBQTBDNUQ7Ozs7R0FJRztBQUNILE1BQWEsa0JBQW1CLFNBQVEsR0FBRyxDQUFDLFFBQVE7SUFPaEQ7Ozs7T0FJRztJQUNILFlBQVksS0FBb0IsRUFBRSxFQUFVLEVBQUUsS0FBOEIsRUFBRSxtQ0FBMkMsSUFBSTtRQUN6SCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRWpCLE1BQU0scUJBQXFCLEdBQUcsSUFBSSxvQ0FBcUIsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFHO1lBQy9ELFVBQVUsRUFBRSxLQUFLLENBQUMsVUFBVSxLQUFLLFNBQVMsSUFBSSxLQUFLLENBQUMsVUFBVSxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsMkJBQTJCLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxVQUFVO1lBQ3hILFNBQVMsRUFBRSxLQUFLLENBQUMsU0FBUztZQUMxQixXQUFXLEVBQUUsS0FBSyxDQUFDLFdBQVc7WUFDOUIsZ0JBQWdCLEVBQUUsS0FBSyxDQUFDLGdCQUFnQixLQUFLLFNBQVMsSUFBSSxLQUFLLENBQUMsZ0JBQWdCLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxnQkFBZ0I7WUFDOUgsS0FBSyxFQUFFLEtBQUssQ0FBQyxLQUFLLEtBQUssU0FBUyxJQUFJLEtBQUssQ0FBQyxLQUFLLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLO1NBQ2pGLEVBQUUsZ0NBQWdDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO1FBQ3BGLElBQUksQ0FBQyxRQUFRLEdBQUcscUJBQXFCLENBQUM7UUFDdEMsSUFBSSxDQUFDLGFBQWEsR0FBRyxxQkFBcUIsQ0FBQyxhQUFhLENBQUM7SUFDN0QsQ0FBQztDQUNKO0FBekJELGdEQXlCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHJvcyBmcm9tICdAYWxpY2xvdWQvcm9zLWNkay1jb3JlJztcbmltcG9ydCB7IFJvc0NsdXN0ZXJBcHBsaWNhdGlvbiB9IGZyb20gJy4vY3MuZ2VuZXJhdGVkJztcbi8vIEdlbmVyYXRlZCBmcm9tIHRoZSBBbGlDbG91ZCBST1MgUmVzb3VyY2UgU3BlY2lmaWNhdGlvblxuZXhwb3J0IHsgUm9zQ2x1c3RlckFwcGxpY2F0aW9uIGFzIENsdXN0ZXJBcHBsaWNhdGlvblByb3BlcnR5IH07XG5cbi8qKlxuICogUHJvcGVydGllcyBmb3IgZGVmaW5pbmcgYSBgQ2x1c3RlckFwcGxpY2F0aW9uYC5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvYWxpeXVuLWNzLWNsdXN0ZXJhcHBsaWNhdGlvblxuICovXG5leHBvcnQgaW50ZXJmYWNlIENsdXN0ZXJBcHBsaWNhdGlvblByb3BzIHtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGNsdXN0ZXJJZDogVGhlIElEIG9mIHRoZSBrdWJlcm5ldGVzIGNsdXN0ZXIuXG4gICAgICovXG4gICAgcmVhZG9ubHkgY2x1c3RlcklkOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSB5YW1sQ29udGVudDogVGhlIHlhbWwgY29udGVudCBvZiBhcHBsaWNhdGlvbi5cbiAgICAgKi9cbiAgICByZWFkb25seSB5YW1sQ29udGVudDogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgZGVmYXVsdE5hbWVzcGFjZTogVGhlIGRlZmF1bHQgbmFtZXNwYWNlIGZvciB0aGUgYXBwbGljYXRpb24sIGRlZmF1bHQgdmFsdWUgaXMgZGVmYXVsdC5cbiAgICAgKiBJZiBhIG5hbWVzcGFjZSBpcyBkZWZpbmVkIGluIHlhbWwgbWV0YWRhdGEsIGl0cyBwcmlvcml0eSBpcyBoaWdoZXIgdGhhbiBEZWZhdWx0TmFtZXNwYWNlLlxuICAgICAqIElmIHRoZSBEZWZhdWx0TmFtZXNwYWNlIGRvZXMgbm90IGV4aXN0LCBST1Mgd2lsbCBhdXRvbWF0aWNhbGx5IGNyZWF0ZSBpdCBhbmQgZGVsZXRlIGl0IGR1cmluZyB0aGUgZGVsZXRpb24gcGhhc2UuXG4gICAgICovXG4gICAgcmVhZG9ubHkgZGVmYXVsdE5hbWVzcGFjZT86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHJvbGVQb2xpY3k6IEJlZm9yZSBkZXBsb3lpbmcgdGhlIGFwcGxpY2F0aW9uLCBjaGVjayB0aGUgcG9saWNpZXMgYXNzb2NpYXRlZCB3aXRoIHRoZSByb2xlcyBvZiB0aGUgY3VycmVudCB1c2VyLiBWYWxpZCB2YWx1ZXM6XG4gICAgICogLSBFbnN1cmVBZG1pblJvbGVBbmRCaW5kaW5nOiBBdXRvbWF0aWNhbGx5IGNyZWF0ZSBhIHJvbGUgbmFtZWQgXCJyb3M6YXBwbGljYXRpb24tYWRtaW46JHt1c2VyLWlkfVwiIHdpdGggYWRtaW5pc3RyYXRvciBwZXJtaXNzaW9ucyBhbmQgYmluZCBpdCB0byB0aGUgY3VycmVudCB1c2VyLlxuICAgICAqIC0gTm9uZTogRG8gbm90aGluZy5cbiAgICAgKiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyBFbnN1cmVBZG1pblJvbGVBbmRCaW5kaW5nLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHJvbGVQb2xpY3k/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBzdGFnZTogQXQgd2hhdCBzdGFnZSB0byBydW4uIFZhbGlkIHZhbHVlczpcbiAgICAgKiAtIEFsbDogYWxsIHN0YWdlcywgaW5jbHVkaW5nIGNyZWF0ZSwgdXBkYXRlLCBhbmQgZGVsZXRlLlxuICAgICAqIC0gRGVsZXRlOiB0aGUgZGVsZXRlIHN0YWdlLiBUaGlzIG1lYW5zIHRoYXQgb25seSBpbiB0aGUgZGVsZXRpb24gc3RhZ2Ugb2YgdGhpcyByZXNvdXJjZSB3aWxsIGFwcGx5IHlhbWwgdG8gdGhlIGNsdXN0ZXIuXG4gICAgICogVGhlIGRlZmF1bHQgaXMgQWxsLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHN0YWdlPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xufVxuXG4vKipcbiAqIFRoaXMgY2xhc3MgZW5jYXBzdWxhdGVzIGFuZCBleHRlbmRzIHRoZSBST1MgcmVzb3VyY2UgdHlwZSBgQUxJWVVOOjpDUzo6Q2x1c3RlckFwcGxpY2F0aW9uYCwgd2hpY2ggaXMgdXNlZCB0byBkZXBsb3kgYSBjb250YWluZXIgYXBwbGljYXRpb24uXG4gKiBATm90ZSBUaGlzIGNsYXNzIG1heSBoYXZlIHNvbWUgbmV3IGZ1bmN0aW9ucyB0byBmYWNpbGl0YXRlIGRldmVsb3BtZW50LCBzbyBpdCBpcyByZWNvbW1lbmRlZCB0byB1c2UgdGhpcyBjbGFzcyBpbnN0ZWFkIG9mIGBSb3NDbHVzdGVyQXBwbGljYXRpb25gZm9yIGEgbW9yZSBjb252ZW5pZW50IGRldmVsb3BtZW50IGV4cGVyaWVuY2UuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2FsaXl1bi1jcy1jbHVzdGVyYXBwbGljYXRpb25cbiAqL1xuZXhwb3J0IGNsYXNzIENsdXN0ZXJBcHBsaWNhdGlvbiBleHRlbmRzIHJvcy5SZXNvdXJjZSB7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgQ2x1c3RlcklkOiBUaGUgSUQgb2YgdGhlIGNsdXN0ZXIuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJDbHVzdGVySWQ6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFBhcmFtIHNjb3BlIC0gc2NvcGUgaW4gd2hpY2ggdGhpcyByZXNvdXJjZSBpcyBkZWZpbmVkXG4gICAgICogUGFyYW0gaWQgICAgLSBzY29wZWQgaWQgb2YgdGhlIHJlc291cmNlXG4gICAgICogUGFyYW0gcHJvcHMgLSByZXNvdXJjZSBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IHJvcy5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBDbHVzdGVyQXBwbGljYXRpb25Qcm9wcywgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6Ym9vbGVhbiA9IHRydWUpIHtcbiAgICAgICAgc3VwZXIoc2NvcGUsIGlkKTtcblxuICAgICAgICBjb25zdCByb3NDbHVzdGVyQXBwbGljYXRpb24gPSBuZXcgUm9zQ2x1c3RlckFwcGxpY2F0aW9uKHRoaXMsIGlkLCAge1xuICAgICAgICAgICAgcm9sZVBvbGljeTogcHJvcHMucm9sZVBvbGljeSA9PT0gdW5kZWZpbmVkIHx8IHByb3BzLnJvbGVQb2xpY3kgPT09IG51bGwgPyAnRW5zdXJlQWRtaW5Sb2xlQW5kQmluZGluZycgOiBwcm9wcy5yb2xlUG9saWN5LFxuICAgICAgICAgICAgY2x1c3RlcklkOiBwcm9wcy5jbHVzdGVySWQsXG4gICAgICAgICAgICB5YW1sQ29udGVudDogcHJvcHMueWFtbENvbnRlbnQsXG4gICAgICAgICAgICBkZWZhdWx0TmFtZXNwYWNlOiBwcm9wcy5kZWZhdWx0TmFtZXNwYWNlID09PSB1bmRlZmluZWQgfHwgcHJvcHMuZGVmYXVsdE5hbWVzcGFjZSA9PT0gbnVsbCA/ICdkZWZhdWx0JyA6IHByb3BzLmRlZmF1bHROYW1lc3BhY2UsXG4gICAgICAgICAgICBzdGFnZTogcHJvcHMuc3RhZ2UgPT09IHVuZGVmaW5lZCB8fCBwcm9wcy5zdGFnZSA9PT0gbnVsbCA/ICdBbGwnIDogcHJvcHMuc3RhZ2UsXG4gICAgICAgIH0sIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ICYmIHRoaXMuc3RhY2suZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQpO1xuICAgICAgICB0aGlzLnJlc291cmNlID0gcm9zQ2x1c3RlckFwcGxpY2F0aW9uO1xuICAgICAgICB0aGlzLmF0dHJDbHVzdGVySWQgPSByb3NDbHVzdGVyQXBwbGljYXRpb24uYXR0ckNsdXN0ZXJJZDtcbiAgICB9XG59XG4iXX0=