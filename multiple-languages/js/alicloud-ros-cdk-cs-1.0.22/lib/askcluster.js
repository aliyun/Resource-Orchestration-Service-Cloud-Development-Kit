"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ASKCluster = exports.ASKClusterProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const cs_generated_1 = require("./cs.generated");
Object.defineProperty(exports, "ASKClusterProperty", { enumerable: true, get: function () { return cs_generated_1.RosASKCluster; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::CS::ASKCluster`, which is used to create a Serverless Kubernetes (ASK) cluster.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosASKCluster`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-cs-askcluster
 */
class ASKCluster extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosASKCluster = new cs_generated_1.RosASKCluster(this, id, {
            kubernetesVersion: props.kubernetesVersion,
            endpointPublicAccess: props.endpointPublicAccess === undefined || props.endpointPublicAccess === null ? true : props.endpointPublicAccess,
            zoneId: props.zoneId,
            resourceGroupId: props.resourceGroupId,
            vSwitchIds: props.vSwitchIds,
            securityGroupId: props.securityGroupId,
            addons: props.addons,
            deletionProtection: props.deletionProtection,
            clusterSpec: props.clusterSpec === undefined || props.clusterSpec === null ? 'ack.pro.small' : props.clusterSpec,
            name: props.name,
            timeZone: props.timeZone,
            serviceDiscoveryTypes: props.serviceDiscoveryTypes,
            vpcId: props.vpcId,
            serviceCidr: props.serviceCidr === undefined || props.serviceCidr === null ? '172.19.0.0/20' : props.serviceCidr,
            snatEntry: props.snatEntry === undefined || props.snatEntry === null ? false : props.snatEntry,
            tags: props.tags,
            privateZone: props.privateZone,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosASKCluster;
        this.attrApiServerSlbId = rosASKCluster.attrApiServerSlbId;
        this.attrClusterId = rosASKCluster.attrClusterId;
        this.attrDefaultUserKubeConfig = rosASKCluster.attrDefaultUserKubeConfig;
        this.attrNodes = rosASKCluster.attrNodes;
        this.attrPrivateUserKubConfig = rosASKCluster.attrPrivateUserKubConfig;
        this.attrScalingConfigurationId = rosASKCluster.attrScalingConfigurationId;
        this.attrScalingGroupId = rosASKCluster.attrScalingGroupId;
        this.attrScalingRuleId = rosASKCluster.attrScalingRuleId;
        this.attrTaskId = rosASKCluster.attrTaskId;
        this.attrWorkerRamRoleName = rosASKCluster.attrWorkerRamRoleName;
    }
}
exports.ASKCluster = ASKCluster;
//# sourceMappingURL=data:application/json;base64,