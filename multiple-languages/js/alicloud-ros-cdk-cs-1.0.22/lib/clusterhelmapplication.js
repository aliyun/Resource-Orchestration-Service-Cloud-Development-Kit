"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClusterHelmApplication = exports.ClusterHelmApplicationProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const cs_generated_1 = require("./cs.generated");
Object.defineProperty(exports, "ClusterHelmApplicationProperty", { enumerable: true, get: function () { return cs_generated_1.RosClusterHelmApplication; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::CS::ClusterHelmApplication`, which is used to deploy an application by using Helm.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosClusterHelmApplication`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-cs-clusterhelmapplication
 */
class ClusterHelmApplication extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosClusterHelmApplication = new cs_generated_1.RosClusterHelmApplication(this, id, {
            rolePolicy: props.rolePolicy === undefined || props.rolePolicy === null ? 'EnsureAdminRoleAndBinding' : props.rolePolicy,
            credential: props.credential,
            chartValues: props.chartValues,
            clusterId: props.clusterId,
            chartUrl: props.chartUrl,
            namespace: props.namespace === undefined || props.namespace === null ? 'default' : props.namespace,
            name: props.name,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosClusterHelmApplication;
        this.attrClusterId = rosClusterHelmApplication.attrClusterId;
    }
}
exports.ClusterHelmApplication = ClusterHelmApplication;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2x1c3RlcmhlbG1hcHBsaWNhdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNsdXN0ZXJoZWxtYXBwbGljYXRpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsOENBQThDO0FBQzlDLGlEQUEyRDtBQUVyQiwrR0FGN0Isd0NBQXlCLE9BRWtDO0FBZ0RwRTs7OztHQUlHO0FBQ0gsTUFBYSxzQkFBdUIsU0FBUSxHQUFHLENBQUMsUUFBUTtJQU9wRDs7OztPQUlHO0lBQ0gsWUFBWSxLQUFvQixFQUFFLEVBQVUsRUFBRSxLQUFrQyxFQUFFLG1DQUEyQyxJQUFJO1FBQzdILEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFakIsTUFBTSx5QkFBeUIsR0FBRyxJQUFJLHdDQUF5QixDQUFDLElBQUksRUFBRSxFQUFFLEVBQUc7WUFDdkUsVUFBVSxFQUFFLEtBQUssQ0FBQyxVQUFVLEtBQUssU0FBUyxJQUFJLEtBQUssQ0FBQyxVQUFVLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQywyQkFBMkIsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFVBQVU7WUFDeEgsVUFBVSxFQUFFLEtBQUssQ0FBQyxVQUFVO1lBQzVCLFdBQVcsRUFBRSxLQUFLLENBQUMsV0FBVztZQUM5QixTQUFTLEVBQUUsS0FBSyxDQUFDLFNBQVM7WUFDMUIsUUFBUSxFQUFFLEtBQUssQ0FBQyxRQUFRO1lBQ3hCLFNBQVMsRUFBRSxLQUFLLENBQUMsU0FBUyxLQUFLLFNBQVMsSUFBSSxLQUFLLENBQUMsU0FBUyxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsU0FBUztZQUNsRyxJQUFJLEVBQUUsS0FBSyxDQUFDLElBQUk7U0FDbkIsRUFBRSxnQ0FBZ0MsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7UUFDcEYsSUFBSSxDQUFDLFFBQVEsR0FBRyx5QkFBeUIsQ0FBQztRQUMxQyxJQUFJLENBQUMsYUFBYSxHQUFHLHlCQUF5QixDQUFDLGFBQWEsQ0FBQztJQUNqRSxDQUFDO0NBQ0o7QUEzQkQsd0RBMkJDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcm9zIGZyb20gJ0BhbGljbG91ZC9yb3MtY2RrLWNvcmUnO1xuaW1wb3J0IHsgUm9zQ2x1c3RlckhlbG1BcHBsaWNhdGlvbiB9IGZyb20gJy4vY3MuZ2VuZXJhdGVkJztcbi8vIEdlbmVyYXRlZCBmcm9tIHRoZSBBbGlDbG91ZCBST1MgUmVzb3VyY2UgU3BlY2lmaWNhdGlvblxuZXhwb3J0IHsgUm9zQ2x1c3RlckhlbG1BcHBsaWNhdGlvbiBhcyBDbHVzdGVySGVsbUFwcGxpY2F0aW9uUHJvcGVydHkgfTtcblxuLyoqXG4gKiBQcm9wZXJ0aWVzIGZvciBkZWZpbmluZyBhIGBDbHVzdGVySGVsbUFwcGxpY2F0aW9uYC5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvYWxpeXVuLWNzLWNsdXN0ZXJoZWxtYXBwbGljYXRpb25cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBDbHVzdGVySGVsbUFwcGxpY2F0aW9uUHJvcHMge1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgY2hhcnRVcmw6IFRoZSBVUkwgb2YgY2hhcnQuIFN1cHBvcnRzIEhUVFAgb3IgSFRUUFMuXG4gICAgICovXG4gICAgcmVhZG9ubHkgY2hhcnRVcmw6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGNsdXN0ZXJJZDogVGhlIElEIG9mIHRoZSBrdWJlcm5ldGVzIGNsdXN0ZXIuXG4gICAgICovXG4gICAgcmVhZG9ubHkgY2x1c3RlcklkOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBuYW1lOiBUaGUgbmFtZSBmb3IgaGVsbSByZWxlYXNlLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IG5hbWU6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGNoYXJ0VmFsdWVzOiBDaGFydCBjdXN0b20gdmFsdWVzLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGNoYXJ0VmFsdWVzPzogeyBba2V5OiBzdHJpbmddOiAoYW55IHwgcm9zLklSZXNvbHZhYmxlKSB9IHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgY3JlZGVudGlhbDogVGhlIGNyZWRlbnRpYWwgb2YgQUNSIHJlcG8uIE9ubHkgdGFrZSBlZmZlY3RzIHdoZW4gQ2hhcnRVcmwgaXMgdGhlIGFkZHJlc3Mgb2YgQUNSIHJlcG8uXG4gICAgICovXG4gICAgcmVhZG9ubHkgY3JlZGVudGlhbD86IFJvc0NsdXN0ZXJIZWxtQXBwbGljYXRpb24uQ3JlZGVudGlhbFByb3BlcnR5IHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgbmFtZXNwYWNlOiBOYW1lc3BhY2UgdG8gdXNlIHdpdGggaGVsbS4gRGVmYXVsdCBpcyBkZWZhdWx0LlxuICAgICAqIElmIHRoZSBOYW1lc3BhY2UgZG9lcyBub3QgZXhpc3QsIFJPUyB3aWxsIGF1dG9tYXRpY2FsbHkgY3JlYXRlIGl0IGFuZCBkZWxldGUgaXQgZHVyaW5nIHRoZSBkZWxldGlvbiBwaGFzZS5cbiAgICAgKi9cbiAgICByZWFkb25seSBuYW1lc3BhY2U/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSByb2xlUG9saWN5OiBCZWZvcmUgZGVwbG95aW5nIHRoZSBhcHBsaWNhdGlvbiwgY2hlY2sgdGhlIHBvbGljaWVzIGFzc29jaWF0ZWQgd2l0aCB0aGUgcm9sZXMgb2YgdGhlIGN1cnJlbnQgdXNlci4gVmFsaWQgdmFsdWVzOlxuICAgICAqIC0gRW5zdXJlQWRtaW5Sb2xlQW5kQmluZGluZzogQXV0b21hdGljYWxseSBjcmVhdGUgYSByb2xlIG5hbWVkIFwicm9zOmFwcGxpY2F0aW9uLWFkbWluOiR7dXNlci1pZH1cIiB3aXRoIGFkbWluaXN0cmF0b3IgcGVybWlzc2lvbnMgYW5kIGJpbmQgaXQgdG8gdGhlIGN1cnJlbnQgdXNlci5cbiAgICAgKiAtIE5vbmU6IERvIG5vdGhpbmcuXG4gICAgICogVGhlIGRlZmF1bHQgdmFsdWUgaXMgRW5zdXJlQWRtaW5Sb2xlQW5kQmluZGluZy5cbiAgICAgKi9cbiAgICByZWFkb25seSByb2xlUG9saWN5Pzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xufVxuXG4vKipcbiAqIFRoaXMgY2xhc3MgZW5jYXBzdWxhdGVzIGFuZCBleHRlbmRzIHRoZSBST1MgcmVzb3VyY2UgdHlwZSBgQUxJWVVOOjpDUzo6Q2x1c3RlckhlbG1BcHBsaWNhdGlvbmAsIHdoaWNoIGlzIHVzZWQgdG8gZGVwbG95IGFuIGFwcGxpY2F0aW9uIGJ5IHVzaW5nIEhlbG0uXG4gKiBATm90ZSBUaGlzIGNsYXNzIG1heSBoYXZlIHNvbWUgbmV3IGZ1bmN0aW9ucyB0byBmYWNpbGl0YXRlIGRldmVsb3BtZW50LCBzbyBpdCBpcyByZWNvbW1lbmRlZCB0byB1c2UgdGhpcyBjbGFzcyBpbnN0ZWFkIG9mIGBSb3NDbHVzdGVySGVsbUFwcGxpY2F0aW9uYGZvciBhIG1vcmUgY29udmVuaWVudCBkZXZlbG9wbWVudCBleHBlcmllbmNlLlxuICogU2VlIGh0dHBzOi8vd3d3LmFsaWJhYmFjbG91ZC5jb20vaGVscC9yb3MvZGV2ZWxvcGVyLXJlZmVyZW5jZS9hbGl5dW4tY3MtY2x1c3RlcmhlbG1hcHBsaWNhdGlvblxuICovXG5leHBvcnQgY2xhc3MgQ2x1c3RlckhlbG1BcHBsaWNhdGlvbiBleHRlbmRzIHJvcy5SZXNvdXJjZSB7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgQ2x1c3RlcklkOiBUaGUgSUQgb2YgdGhlIGNsdXN0ZXIuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJDbHVzdGVySWQ6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFBhcmFtIHNjb3BlIC0gc2NvcGUgaW4gd2hpY2ggdGhpcyByZXNvdXJjZSBpcyBkZWZpbmVkXG4gICAgICogUGFyYW0gaWQgICAgLSBzY29wZWQgaWQgb2YgdGhlIHJlc291cmNlXG4gICAgICogUGFyYW0gcHJvcHMgLSByZXNvdXJjZSBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IHJvcy5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBDbHVzdGVySGVsbUFwcGxpY2F0aW9uUHJvcHMsIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OmJvb2xlYW4gPSB0cnVlKSB7XG4gICAgICAgIHN1cGVyKHNjb3BlLCBpZCk7XG5cbiAgICAgICAgY29uc3Qgcm9zQ2x1c3RlckhlbG1BcHBsaWNhdGlvbiA9IG5ldyBSb3NDbHVzdGVySGVsbUFwcGxpY2F0aW9uKHRoaXMsIGlkLCAge1xuICAgICAgICAgICAgcm9sZVBvbGljeTogcHJvcHMucm9sZVBvbGljeSA9PT0gdW5kZWZpbmVkIHx8IHByb3BzLnJvbGVQb2xpY3kgPT09IG51bGwgPyAnRW5zdXJlQWRtaW5Sb2xlQW5kQmluZGluZycgOiBwcm9wcy5yb2xlUG9saWN5LFxuICAgICAgICAgICAgY3JlZGVudGlhbDogcHJvcHMuY3JlZGVudGlhbCxcbiAgICAgICAgICAgIGNoYXJ0VmFsdWVzOiBwcm9wcy5jaGFydFZhbHVlcyxcbiAgICAgICAgICAgIGNsdXN0ZXJJZDogcHJvcHMuY2x1c3RlcklkLFxuICAgICAgICAgICAgY2hhcnRVcmw6IHByb3BzLmNoYXJ0VXJsLFxuICAgICAgICAgICAgbmFtZXNwYWNlOiBwcm9wcy5uYW1lc3BhY2UgPT09IHVuZGVmaW5lZCB8fCBwcm9wcy5uYW1lc3BhY2UgPT09IG51bGwgPyAnZGVmYXVsdCcgOiBwcm9wcy5uYW1lc3BhY2UsXG4gICAgICAgICAgICBuYW1lOiBwcm9wcy5uYW1lLFxuICAgICAgICB9LCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCAmJiB0aGlzLnN0YWNrLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50KTtcbiAgICAgICAgdGhpcy5yZXNvdXJjZSA9IHJvc0NsdXN0ZXJIZWxtQXBwbGljYXRpb247XG4gICAgICAgIHRoaXMuYXR0ckNsdXN0ZXJJZCA9IHJvc0NsdXN0ZXJIZWxtQXBwbGljYXRpb24uYXR0ckNsdXN0ZXJJZDtcbiAgICB9XG59XG4iXX0=