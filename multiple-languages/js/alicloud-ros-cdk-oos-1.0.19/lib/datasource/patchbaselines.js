"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PatchBaselines = exports.PatchBaselinesProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const oos_generated_1 = require("./oos.generated");
Object.defineProperty(exports, "PatchBaselinesProperty", { enumerable: true, get: function () { return oos_generated_1.RosPatchBaselines; } });
/**
 * A ROS resource type:  `DATASOURCE::OOS::PatchBaselines`
 */
class PatchBaselines extends ros.Resource {
    /**
     * Create a new `DATASOURCE::OOS::PatchBaselines`.
     *
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props = {}, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosPatchBaselines = new oos_generated_1.RosPatchBaselines(this, id, {
            patchBaselineName: props.patchBaselineName,
            operationSystem: props.operationSystem,
            shareType: props.shareType,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosPatchBaselines;
        this.attrPatchBaselineNames = rosPatchBaselines.attrPatchBaselineNames;
        this.attrPatchBaselines = rosPatchBaselines.attrPatchBaselines;
    }
}
exports.PatchBaselines = PatchBaselines;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGF0Y2hiYXNlbGluZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJwYXRjaGJhc2VsaW5lcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw4Q0FBOEM7QUFDOUMsbURBQW9EO0FBRXRCLHVHQUZyQixpQ0FBaUIsT0FFMEI7QUF1QnBEOztHQUVHO0FBQ0gsTUFBYSxjQUFlLFNBQVEsR0FBRyxDQUFDLFFBQVE7SUFpQjVDOzs7Ozs7T0FNRztJQUNILFlBQVksS0FBb0IsRUFBRSxFQUFVLEVBQUUsUUFBNkIsRUFBRSxFQUFFLG1DQUEyQyxJQUFJO1FBQzFILEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFakIsTUFBTSxpQkFBaUIsR0FBRyxJQUFJLGlDQUFpQixDQUFDLElBQUksRUFBRSxFQUFFLEVBQUc7WUFDdkQsaUJBQWlCLEVBQUUsS0FBSyxDQUFDLGlCQUFpQjtZQUMxQyxlQUFlLEVBQUUsS0FBSyxDQUFDLGVBQWU7WUFDdEMsU0FBUyxFQUFFLEtBQUssQ0FBQyxTQUFTO1NBQzdCLEVBQUUsZ0NBQWdDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO1FBQ3BGLElBQUksQ0FBQyxRQUFRLEdBQUcsaUJBQWlCLENBQUM7UUFDbEMsSUFBSSxDQUFDLHNCQUFzQixHQUFHLGlCQUFpQixDQUFDLHNCQUFzQixDQUFDO1FBQ3ZFLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxpQkFBaUIsQ0FBQyxrQkFBa0IsQ0FBQztJQUNuRSxDQUFDO0NBQ0o7QUFwQ0Qsd0NBb0NDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcm9zIGZyb20gJ0BhbGljbG91ZC9yb3MtY2RrLWNvcmUnO1xuaW1wb3J0IHsgUm9zUGF0Y2hCYXNlbGluZXMgfSBmcm9tICcuL29vcy5nZW5lcmF0ZWQnO1xuLy8gR2VuZXJhdGVkIGZyb20gdGhlIEFsaUNsb3VkIFJPUyBSZXNvdXJjZSBTcGVjaWZpY2F0aW9uXG5leHBvcnQgeyBSb3NQYXRjaEJhc2VsaW5lcyBhcyBQYXRjaEJhc2VsaW5lc1Byb3BlcnR5IH07XG5cbi8qKlxuICogUHJvcGVydGllcyBmb3IgZGVmaW5pbmcgYSBgREFUQVNPVVJDRTo6T09TOjpQYXRjaEJhc2VsaW5lc2BcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBQYXRjaEJhc2VsaW5lc1Byb3BzIHtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IG9wZXJhdGlvblN5c3RlbTogT3BlcmF0aW5nIHN5c3RlbSB0eXBlLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IG9wZXJhdGlvblN5c3RlbT86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHBhdGNoQmFzZWxpbmVOYW1lOiBUaGUgbmFtZSBvZiB0aGUgcGF0Y2ggYmFzZWxpbmUuXG4gICAgICovXG4gICAgcmVhZG9ubHkgcGF0Y2hCYXNlbGluZU5hbWU/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBzaGFyZVR5cGU6IFBhdGNoIGJhc2VsaW5lIHNoYXJpbmcgdHlwZS5cbiAgICAgKi9cbiAgICByZWFkb25seSBzaGFyZVR5cGU/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG59XG5cbi8qKlxuICogQSBST1MgcmVzb3VyY2UgdHlwZTogIGBEQVRBU09VUkNFOjpPT1M6OlBhdGNoQmFzZWxpbmVzYFxuICovXG5leHBvcnQgY2xhc3MgUGF0Y2hCYXNlbGluZXMgZXh0ZW5kcyByb3MuUmVzb3VyY2Uge1xuXG4gICAgLyoqXG4gICAgICogQSBmYWN0b3J5IG1ldGhvZCB0aGF0IGNyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgdGhpcyBjbGFzcyBmcm9tIGFuIG9iamVjdFxuICAgICAqIGNvbnRhaW5pbmcgdGhlIHByb3BlcnRpZXMgb2YgdGhpcyBST1MgcmVzb3VyY2UsIHdoaWNoIHdpbGwgYmUgYXNzaWduZWQgdG8gUk9TIHJlc291cmNlLlxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIFBhdGNoQmFzZWxpbmVOYW1lczogVGhlIGxpc3Qgb2YgcGF0Y2ggYmFzZWxpbmUgbmFtZXMuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJQYXRjaEJhc2VsaW5lTmFtZXM6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBQYXRjaEJhc2VsaW5lczogVGhlIGxpc3Qgb2YgcGF0Y2ggYmFzZWxpbmVzLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyUGF0Y2hCYXNlbGluZXM6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBgREFUQVNPVVJDRTo6T09TOjpQYXRjaEJhc2VsaW5lc2AuXG4gICAgICpcbiAgICAgKiBQYXJhbSBzY29wZSAtIHNjb3BlIGluIHdoaWNoIHRoaXMgcmVzb3VyY2UgaXMgZGVmaW5lZFxuICAgICAqIFBhcmFtIGlkICAgIC0gc2NvcGVkIGlkIG9mIHRoZSByZXNvdXJjZVxuICAgICAqIFBhcmFtIHByb3BzIC0gcmVzb3VyY2UgcHJvcGVydGllc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiByb3MuQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogUGF0Y2hCYXNlbGluZXNQcm9wcyA9IHt9LCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDpib29sZWFuID0gdHJ1ZSkge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQpO1xuXG4gICAgICAgIGNvbnN0IHJvc1BhdGNoQmFzZWxpbmVzID0gbmV3IFJvc1BhdGNoQmFzZWxpbmVzKHRoaXMsIGlkLCAge1xuICAgICAgICAgICAgcGF0Y2hCYXNlbGluZU5hbWU6IHByb3BzLnBhdGNoQmFzZWxpbmVOYW1lLFxuICAgICAgICAgICAgb3BlcmF0aW9uU3lzdGVtOiBwcm9wcy5vcGVyYXRpb25TeXN0ZW0sXG4gICAgICAgICAgICBzaGFyZVR5cGU6IHByb3BzLnNoYXJlVHlwZSxcbiAgICAgICAgfSwgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgJiYgdGhpcy5zdGFjay5lbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCk7XG4gICAgICAgIHRoaXMucmVzb3VyY2UgPSByb3NQYXRjaEJhc2VsaW5lcztcbiAgICAgICAgdGhpcy5hdHRyUGF0Y2hCYXNlbGluZU5hbWVzID0gcm9zUGF0Y2hCYXNlbGluZXMuYXR0clBhdGNoQmFzZWxpbmVOYW1lcztcbiAgICAgICAgdGhpcy5hdHRyUGF0Y2hCYXNlbGluZXMgPSByb3NQYXRjaEJhc2VsaW5lcy5hdHRyUGF0Y2hCYXNlbGluZXM7XG4gICAgfVxufVxuIl19