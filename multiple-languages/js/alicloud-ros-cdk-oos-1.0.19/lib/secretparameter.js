"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SecretParameter = exports.SecretParameterProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const oos_generated_1 = require("./oos.generated");
Object.defineProperty(exports, "SecretParameterProperty", { enumerable: true, get: function () { return oos_generated_1.RosSecretParameter; } });
/**
 * A ROS resource type:  `ALIYUN::OOS::SecretParameter`
 */
class SecretParameter extends ros.Resource {
    /**
     * Create a new `ALIYUN::OOS::SecretParameter`.
     *
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosSecretParameter = new oos_generated_1.RosSecretParameter(this, id, {
            description: props.description,
            constraints: props.constraints,
            resourceGroupId: props.resourceGroupId,
            secretParameterName: props.secretParameterName,
            value: props.value,
            keyId: props.keyId,
            tags: props.tags,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosSecretParameter;
        this.attrConstraints = rosSecretParameter.attrConstraints;
        this.attrCreateTime = rosSecretParameter.attrCreateTime;
        this.attrCreatedBy = rosSecretParameter.attrCreatedBy;
        this.attrDescription = rosSecretParameter.attrDescription;
        this.attrKeyId = rosSecretParameter.attrKeyId;
        this.attrParameterVersion = rosSecretParameter.attrParameterVersion;
        this.attrResourceGroupId = rosSecretParameter.attrResourceGroupId;
        this.attrSecretParameterId = rosSecretParameter.attrSecretParameterId;
        this.attrSecretParameterName = rosSecretParameter.attrSecretParameterName;
        this.attrShareType = rosSecretParameter.attrShareType;
        this.attrTags = rosSecretParameter.attrTags;
        this.attrType = rosSecretParameter.attrType;
        this.attrUpdatedBy = rosSecretParameter.attrUpdatedBy;
        this.attrUpdatedDate = rosSecretParameter.attrUpdatedDate;
    }
}
exports.SecretParameter = SecretParameter;
//# sourceMappingURL=data:application/json;base64,