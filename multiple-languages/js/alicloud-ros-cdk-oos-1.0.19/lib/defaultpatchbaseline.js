"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DefaultPatchBaseline = exports.DefaultPatchBaselineProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const oos_generated_1 = require("./oos.generated");
Object.defineProperty(exports, "DefaultPatchBaselineProperty", { enumerable: true, get: function () { return oos_generated_1.RosDefaultPatchBaseline; } });
/**
 * A ROS resource type:  `ALIYUN::OOS::DefaultPatchBaseline`
 */
class DefaultPatchBaseline extends ros.Resource {
    /**
     * Create a new `ALIYUN::OOS::DefaultPatchBaseline`.
     *
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosDefaultPatchBaseline = new oos_generated_1.RosDefaultPatchBaseline(this, id, {
            patchBaselineName: props.patchBaselineName,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosDefaultPatchBaseline;
        this.attrApprovalRules = rosDefaultPatchBaseline.attrApprovalRules;
        this.attrCreatedBy = rosDefaultPatchBaseline.attrCreatedBy;
        this.attrCreatedDate = rosDefaultPatchBaseline.attrCreatedDate;
        this.attrDescription = rosDefaultPatchBaseline.attrDescription;
        this.attrOperationSystem = rosDefaultPatchBaseline.attrOperationSystem;
        this.attrPatchBaselineId = rosDefaultPatchBaseline.attrPatchBaselineId;
        this.attrPatchBaselineName = rosDefaultPatchBaseline.attrPatchBaselineName;
        this.attrShareType = rosDefaultPatchBaseline.attrShareType;
        this.attrUpdatedBy = rosDefaultPatchBaseline.attrUpdatedBy;
        this.attrUpdatedDate = rosDefaultPatchBaseline.attrUpdatedDate;
    }
}
exports.DefaultPatchBaseline = DefaultPatchBaseline;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVmYXVsdHBhdGNoYmFzZWxpbmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJkZWZhdWx0cGF0Y2hiYXNlbGluZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw4Q0FBOEM7QUFDOUMsbURBQTBEO0FBRXRCLDZHQUYzQix1Q0FBdUIsT0FFZ0M7QUFhaEU7O0dBRUc7QUFDSCxNQUFhLG9CQUFxQixTQUFRLEdBQUcsQ0FBQyxRQUFRO0lBeURsRDs7Ozs7O09BTUc7SUFDSCxZQUFZLEtBQW9CLEVBQUUsRUFBVSxFQUFFLEtBQWdDLEVBQUUsbUNBQTJDLElBQUk7UUFDM0gsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUVqQixNQUFNLHVCQUF1QixHQUFHLElBQUksdUNBQXVCLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRztZQUNuRSxpQkFBaUIsRUFBRSxLQUFLLENBQUMsaUJBQWlCO1NBQzdDLEVBQUUsZ0NBQWdDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO1FBQ3BGLElBQUksQ0FBQyxRQUFRLEdBQUcsdUJBQXVCLENBQUM7UUFDeEMsSUFBSSxDQUFDLGlCQUFpQixHQUFHLHVCQUF1QixDQUFDLGlCQUFpQixDQUFDO1FBQ25FLElBQUksQ0FBQyxhQUFhLEdBQUcsdUJBQXVCLENBQUMsYUFBYSxDQUFDO1FBQzNELElBQUksQ0FBQyxlQUFlLEdBQUcsdUJBQXVCLENBQUMsZUFBZSxDQUFDO1FBQy9ELElBQUksQ0FBQyxlQUFlLEdBQUcsdUJBQXVCLENBQUMsZUFBZSxDQUFDO1FBQy9ELElBQUksQ0FBQyxtQkFBbUIsR0FBRyx1QkFBdUIsQ0FBQyxtQkFBbUIsQ0FBQztRQUN2RSxJQUFJLENBQUMsbUJBQW1CLEdBQUcsdUJBQXVCLENBQUMsbUJBQW1CLENBQUM7UUFDdkUsSUFBSSxDQUFDLHFCQUFxQixHQUFHLHVCQUF1QixDQUFDLHFCQUFxQixDQUFDO1FBQzNFLElBQUksQ0FBQyxhQUFhLEdBQUcsdUJBQXVCLENBQUMsYUFBYSxDQUFDO1FBQzNELElBQUksQ0FBQyxhQUFhLEdBQUcsdUJBQXVCLENBQUMsYUFBYSxDQUFDO1FBQzNELElBQUksQ0FBQyxlQUFlLEdBQUcsdUJBQXVCLENBQUMsZUFBZSxDQUFDO0lBQ25FLENBQUM7Q0FDSjtBQWxGRCxvREFrRkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyByb3MgZnJvbSAnQGFsaWNsb3VkL3Jvcy1jZGstY29yZSc7XG5pbXBvcnQgeyBSb3NEZWZhdWx0UGF0Y2hCYXNlbGluZSB9IGZyb20gJy4vb29zLmdlbmVyYXRlZCc7XG4vLyBHZW5lcmF0ZWQgZnJvbSB0aGUgQWxpQ2xvdWQgUk9TIFJlc291cmNlIFNwZWNpZmljYXRpb25cbmV4cG9ydCB7IFJvc0RlZmF1bHRQYXRjaEJhc2VsaW5lIGFzIERlZmF1bHRQYXRjaEJhc2VsaW5lUHJvcGVydHkgfTtcblxuLyoqXG4gKiBQcm9wZXJ0aWVzIGZvciBkZWZpbmluZyBhIGBBTElZVU46Ok9PUzo6RGVmYXVsdFBhdGNoQmFzZWxpbmVgXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRGVmYXVsdFBhdGNoQmFzZWxpbmVQcm9wcyB7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBwYXRjaEJhc2VsaW5lTmFtZTogVGhlIG5hbWUgb2YgdGhlIHBhdGNoIGJhc2VsaW5lLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHBhdGNoQmFzZWxpbmVOYW1lOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG59XG5cbi8qKlxuICogQSBST1MgcmVzb3VyY2UgdHlwZTogIGBBTElZVU46Ok9PUzo6RGVmYXVsdFBhdGNoQmFzZWxpbmVgXG4gKi9cbmV4cG9ydCBjbGFzcyBEZWZhdWx0UGF0Y2hCYXNlbGluZSBleHRlbmRzIHJvcy5SZXNvdXJjZSB7XG5cbiAgICAvKipcbiAgICAgKiBBIGZhY3RvcnkgbWV0aG9kIHRoYXQgY3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzIGZyb20gYW4gb2JqZWN0XG4gICAgICogY29udGFpbmluZyB0aGUgcHJvcGVydGllcyBvZiB0aGlzIFJPUyByZXNvdXJjZSwgd2hpY2ggd2lsbCBiZSBhc3NpZ25lZCB0byBST1MgcmVzb3VyY2UuXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgQXBwcm92YWxSdWxlczogVGhlIHJ1bGVzIG9mIHNjYW5uaW5nIGFuZCBpbnN0YWxsaW5nIHBhdGNoZXMgZm9yIHRoZSBzcGVjaWZpZWQgb3BlcmF0aW5nIHN5c3RlbS5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckFwcHJvdmFsUnVsZXM6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBDcmVhdGVkQnk6IFRoZSBjcmVhdG9yIG9mIHRoZSBwYXRjaCBiYXNlbGluZS5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckNyZWF0ZWRCeTogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIENyZWF0ZWREYXRlOiBUaGUgdGltZSB3aGVuIHRoZSBwYXRjaCBiYXNlbGluZSB3YXMgY3JlYXRlZC5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckNyZWF0ZWREYXRlOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgRGVzY3JpcHRpb246IFRoZSBkZXNjcmlwdGlvbiBvZiB0aGUgcGF0Y2ggYmFzZWxpbmUuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJEZXNjcmlwdGlvbjogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIE9wZXJhdGlvblN5c3RlbTogVGhlIHR5cGUgb2YgdGhlIG9wZXJhdGluZyBzeXN0ZW0uXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJPcGVyYXRpb25TeXN0ZW06IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBQYXRjaEJhc2VsaW5lSWQ6IFRoZSBJRCBvZiB0aGUgcGF0Y2ggYmFzZWxpbmUuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJQYXRjaEJhc2VsaW5lSWQ6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBQYXRjaEJhc2VsaW5lTmFtZTogVGhlIG5hbWUgb2YgdGhlIHBhdGNoIGJhc2VsaW5lLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyUGF0Y2hCYXNlbGluZU5hbWU6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBTaGFyZVR5cGU6IFRoZSBzaGFyZSB0eXBlIG9mIHRoZSBwYXRjaCBiYXNlbGluZS5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0clNoYXJlVHlwZTogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIFVwZGF0ZWRCeTogVGhlIHVzZXIgd2hvIGxhc3QgbW9kaWZpZWQgdGhlIHBhdGNoIGJhc2VsaW5lLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyVXBkYXRlZEJ5OiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgVXBkYXRlZERhdGU6IFRoZSB0aW1lIHdoZW4gdGhlIHBhdGNoIGJhc2VsaW5lIHdhcyBsYXN0IG1vZGlmaWVkLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyVXBkYXRlZERhdGU6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBgQUxJWVVOOjpPT1M6OkRlZmF1bHRQYXRjaEJhc2VsaW5lYC5cbiAgICAgKlxuICAgICAqIFBhcmFtIHNjb3BlIC0gc2NvcGUgaW4gd2hpY2ggdGhpcyByZXNvdXJjZSBpcyBkZWZpbmVkXG4gICAgICogUGFyYW0gaWQgICAgLSBzY29wZWQgaWQgb2YgdGhlIHJlc291cmNlXG4gICAgICogUGFyYW0gcHJvcHMgLSByZXNvdXJjZSBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IHJvcy5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBEZWZhdWx0UGF0Y2hCYXNlbGluZVByb3BzLCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDpib29sZWFuID0gdHJ1ZSkge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQpO1xuXG4gICAgICAgIGNvbnN0IHJvc0RlZmF1bHRQYXRjaEJhc2VsaW5lID0gbmV3IFJvc0RlZmF1bHRQYXRjaEJhc2VsaW5lKHRoaXMsIGlkLCAge1xuICAgICAgICAgICAgcGF0Y2hCYXNlbGluZU5hbWU6IHByb3BzLnBhdGNoQmFzZWxpbmVOYW1lLFxuICAgICAgICB9LCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCAmJiB0aGlzLnN0YWNrLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50KTtcbiAgICAgICAgdGhpcy5yZXNvdXJjZSA9IHJvc0RlZmF1bHRQYXRjaEJhc2VsaW5lO1xuICAgICAgICB0aGlzLmF0dHJBcHByb3ZhbFJ1bGVzID0gcm9zRGVmYXVsdFBhdGNoQmFzZWxpbmUuYXR0ckFwcHJvdmFsUnVsZXM7XG4gICAgICAgIHRoaXMuYXR0ckNyZWF0ZWRCeSA9IHJvc0RlZmF1bHRQYXRjaEJhc2VsaW5lLmF0dHJDcmVhdGVkQnk7XG4gICAgICAgIHRoaXMuYXR0ckNyZWF0ZWREYXRlID0gcm9zRGVmYXVsdFBhdGNoQmFzZWxpbmUuYXR0ckNyZWF0ZWREYXRlO1xuICAgICAgICB0aGlzLmF0dHJEZXNjcmlwdGlvbiA9IHJvc0RlZmF1bHRQYXRjaEJhc2VsaW5lLmF0dHJEZXNjcmlwdGlvbjtcbiAgICAgICAgdGhpcy5hdHRyT3BlcmF0aW9uU3lzdGVtID0gcm9zRGVmYXVsdFBhdGNoQmFzZWxpbmUuYXR0ck9wZXJhdGlvblN5c3RlbTtcbiAgICAgICAgdGhpcy5hdHRyUGF0Y2hCYXNlbGluZUlkID0gcm9zRGVmYXVsdFBhdGNoQmFzZWxpbmUuYXR0clBhdGNoQmFzZWxpbmVJZDtcbiAgICAgICAgdGhpcy5hdHRyUGF0Y2hCYXNlbGluZU5hbWUgPSByb3NEZWZhdWx0UGF0Y2hCYXNlbGluZS5hdHRyUGF0Y2hCYXNlbGluZU5hbWU7XG4gICAgICAgIHRoaXMuYXR0clNoYXJlVHlwZSA9IHJvc0RlZmF1bHRQYXRjaEJhc2VsaW5lLmF0dHJTaGFyZVR5cGU7XG4gICAgICAgIHRoaXMuYXR0clVwZGF0ZWRCeSA9IHJvc0RlZmF1bHRQYXRjaEJhc2VsaW5lLmF0dHJVcGRhdGVkQnk7XG4gICAgICAgIHRoaXMuYXR0clVwZGF0ZWREYXRlID0gcm9zRGVmYXVsdFBhdGNoQmFzZWxpbmUuYXR0clVwZGF0ZWREYXRlO1xuICAgIH1cbn1cbiJdfQ==