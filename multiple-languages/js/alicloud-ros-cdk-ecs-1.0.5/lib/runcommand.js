"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RunCommand = exports.RunCommandProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ecs_generated_1 = require("./ecs.generated");
Object.defineProperty(exports, "RunCommandProperty", { enumerable: true, get: function () { return ecs_generated_1.RosRunCommand; } });
/**
 * A ROS resource type:  `ALIYUN::ECS::RunCommand`
 */
class RunCommand extends ros.Resource {
    /**
     * Create a new `ALIYUN::ECS::RunCommand`.
     *
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosRunCommand = new ecs_generated_1.RosRunCommand(this, id, {
            parameters: props.parameters,
            description: props.description,
            timeout: props.timeout,
            timed: props.timed,
            contentEncoding: props.contentEncoding,
            name: props.name,
            workingDir: props.workingDir,
            commandContent: props.commandContent,
            type: props.type,
            frequency: props.frequency,
            enableParameter: props.enableParameter,
            instanceIds: props.instanceIds,
            keepCommand: props.keepCommand,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosRunCommand;
        this.attrCommandId = rosRunCommand.attrCommandId;
        this.attrInvokeId = rosRunCommand.attrInvokeId;
    }
}
exports.RunCommand = RunCommand;
//# sourceMappingURL=data:application/json;base64,