"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AutoSnapshotPolicy = exports.AutoSnapshotPolicyProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ecs_generated_1 = require("./ecs.generated");
Object.defineProperty(exports, "AutoSnapshotPolicyProperty", { enumerable: true, get: function () { return ecs_generated_1.RosAutoSnapshotPolicy; } });
/**
 * A ROS resource type:  `ALIYUN::ECS::AutoSnapshotPolicy`
 */
class AutoSnapshotPolicy extends ros.Resource {
    /**
     * Create a new `ALIYUN::ECS::AutoSnapshotPolicy`.
     *
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosAutoSnapshotPolicy = new ecs_generated_1.RosAutoSnapshotPolicy(this, id, {
            timePoints: props.timePoints,
            diskIds: props.diskIds,
            retentionDays: props.retentionDays,
            repeatWeekdays: props.repeatWeekdays,
            autoSnapshotPolicyName: props.autoSnapshotPolicyName,
            tags: props.tags,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosAutoSnapshotPolicy;
        this.attrAutoSnapshotPolicyId = rosAutoSnapshotPolicy.attrAutoSnapshotPolicyId;
    }
}
exports.AutoSnapshotPolicy = AutoSnapshotPolicy;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0b3NuYXBzaG90cG9saWN5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYXV0b3NuYXBzaG90cG9saWN5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDhDQUE4QztBQUM5QyxtREFBd0Q7QUFFdEIsMkdBRnpCLHFDQUFxQixPQUU4QjtBQWlENUQ7O0dBRUc7QUFDSCxNQUFhLGtCQUFtQixTQUFRLEdBQUcsQ0FBQyxRQUFRO0lBWWhEOzs7Ozs7T0FNRztJQUNILFlBQVksS0FBb0IsRUFBRSxFQUFVLEVBQUUsS0FBOEIsRUFBRSxtQ0FBMkMsSUFBSTtRQUN6SCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRWpCLE1BQU0scUJBQXFCLEdBQUcsSUFBSSxxQ0FBcUIsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFHO1lBQy9ELFVBQVUsRUFBRSxLQUFLLENBQUMsVUFBVTtZQUM1QixPQUFPLEVBQUUsS0FBSyxDQUFDLE9BQU87WUFDdEIsYUFBYSxFQUFFLEtBQUssQ0FBQyxhQUFhO1lBQ2xDLGNBQWMsRUFBRSxLQUFLLENBQUMsY0FBYztZQUNwQyxzQkFBc0IsRUFBRSxLQUFLLENBQUMsc0JBQXNCO1lBQ3BELElBQUksRUFBRSxLQUFLLENBQUMsSUFBSTtTQUNuQixFQUFFLGdDQUFnQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztRQUNwRixJQUFJLENBQUMsUUFBUSxHQUFHLHFCQUFxQixDQUFDO1FBQ3RDLElBQUksQ0FBQyx3QkFBd0IsR0FBRyxxQkFBcUIsQ0FBQyx3QkFBd0IsQ0FBQztJQUNuRixDQUFDO0NBQ0o7QUFqQ0QsZ0RBaUNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcm9zIGZyb20gJ0BhbGljbG91ZC9yb3MtY2RrLWNvcmUnO1xuaW1wb3J0IHsgUm9zQXV0b1NuYXBzaG90UG9saWN5IH0gZnJvbSAnLi9lY3MuZ2VuZXJhdGVkJztcbi8vIEdlbmVyYXRlZCBmcm9tIHRoZSBBbGlDbG91ZCBST1MgUmVzb3VyY2UgU3BlY2lmaWNhdGlvblxuZXhwb3J0IHsgUm9zQXV0b1NuYXBzaG90UG9saWN5IGFzIEF1dG9TbmFwc2hvdFBvbGljeVByb3BlcnR5IH07XG5cbi8qKlxuICogUHJvcGVydGllcyBmb3IgZGVmaW5pbmcgYSBgQUxJWVVOOjpFQ1M6OkF1dG9TbmFwc2hvdFBvbGljeWBcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBBdXRvU25hcHNob3RQb2xpY3lQcm9wcyB7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSByZXBlYXRXZWVrZGF5czogVGhlIGF1dG9tYXRpYyBzbmFwc2hvdCByZXBldGl0aW9uIGRhdGVzLiBUaGUgdW5pdCBvZiBtZWFzdXJlbWVudCBpcyBkYXkgYW5kIHRoZSByZXBlYXRpbmcgY3ljbGUgaXMgYSB3ZWVrLiBWYWx1ZSByYW5nZTogWzEsIDddLCB3aGljaCByZXByZXNlbnRzIGRheXMgc3RhcnRpbmcgZnJvbSBNb25kYXkgdG8gU3VuZGF5LCBmb3IgZXhhbXBsZSAxIGluZGljYXRlcyBNb25kYXkuIFdoZW4geW91IHdhbnQgdG8gc2NoZWR1bGUgbXVsdGlwbGUgYXV0b21hdGljIHNuYXBzaG90IHRhc2tzIGZvciBhIGRpc2sgaW4gYSB3ZWVrLCB5b3UgY2FuIHNldCB0aGUgUmVwZWF0V2Vla2RheXMgdG8gYW4gYXJyYXkuXG4gICAgICogQSBtYXhpbXVtIG9mIHNldmVuIHRpbWUgcG9pbnRzIGNhbiBiZSBzZWxlY3RlZC5cbiAgICAgKiBUaGUgZm9ybWF0IGlzIGEgbGlzdCBvZiBbMSwgMiwgLi4uLCA3XSBhbmQgdGhlIHRpbWUgcG9pbnRzIGFyZSBzZXBhcmF0ZWQgYnkgY29tbWFzICgsKS5cbiAgICAgKi9cbiAgICByZWFkb25seSByZXBlYXRXZWVrZGF5czogQXJyYXk8bnVtYmVyIHwgcm9zLklSZXNvbHZhYmxlPiB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHJldGVudGlvbkRheXM6IFRoZSBzbmFwc2hvdCByZXRlbnRpb24gdGltZSwgYW5kIHRoZSB1bml0IG9mIG1lYXN1cmVtZW50IGlzIGRheS4gT3B0aW9uYWwgdmFsdWVzOlxuICAgICAqIC0xOiBUaGUgYXV0b21hdGljIHNuYXBzaG90cyBhcmUgcmV0YWluZWQgcGVybWFuZW50bHkuXG4gICAgICogWzEsIDY1NTM2XTogVGhlIG51bWJlciBvZiBkYXlzIHJldGFpbmVkLlxuICAgICAqIERlZmF1bHQgdmFsdWU6IC0xLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHJldGVudGlvbkRheXM6IG51bWJlciB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHRpbWVQb2ludHM6IFRoZSBhdXRvbWF0aWMgc25hcHNob3QgY3JlYXRpb24gc2NoZWR1bGUsIGFuZCB0aGUgdW5pdCBvZiBtZWFzdXJlbWVudCBpcyBob3VyLiBWYWx1ZSByYW5nZTogWzAsIDIzXSwgd2hpY2ggcmVwcmVzZW50cyBmcm9tIDAwOjAwIHRvIDI0OjAwLCBmb3IgZXhhbXBsZSAxIGluZGljYXRlcyAwMTowMC4gV2hlbiB5b3Ugd2FudCB0byBzY2hlZHVsZSBtdWx0aXBsZSBhdXRvbWF0aWMgc25hcHNob3QgdGFza3MgZm9yIGEgZGlzayBpbiBhIGRheSwgeW91IGNhbiBzZXQgdGhlIFRpbWVQb2ludHMgdG8gYW4gYXJyYXkuXG4gICAgICogQSBtYXhpbXVtIG9mIDI0IHRpbWUgcG9pbnRzIGNhbiBiZSBzZWxlY3RlZC5cbiAgICAgKiBUaGUgZm9ybWF0IGlzIGEgbGlzdCBvZiBbMCwgMSwgLi4uLCAyM10gYW5kIHRoZSB0aW1lIHBvaW50cyBhcmUgc2VwYXJhdGVkIGJ5IGNvbW1hcyAoLCkuXG4gICAgICovXG4gICAgcmVhZG9ubHkgdGltZVBvaW50czogQXJyYXk8YW55IHwgcm9zLklSZXNvbHZhYmxlPiB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGF1dG9TbmFwc2hvdFBvbGljeU5hbWU6IFRoZSBuYW1lIG9mIHRoZSBhdXRvbWF0aWMgc25hcHNob3QgcG9saWN5LlxuICAgICAqIEl0IGNhbiBjb25zaXN0IG9mIFsyLCAxMjhdIEVuZ2xpc2ggb3IgQ2hpbmVzZSBjaGFyYWN0ZXJzLlxuICAgICAqIE11c3QgYmVnaW4gd2l0aCBhbiB1cHBlcmNhc2Ugb3IgbG93ZXJjYXNlIGxldHRlciBvciBhIENoaW5lc2UgY2hhcmFjdGVyLiBDYW4gY29udGFpbiBudW1iZXJzLCBwZXJpb2RzICguKSwgY29sb25zICg6KSwgdW5kZXJzY29yZXMgKF8pLCBhbmQgaHlwaGVucyAoLSkuXG4gICAgICogQ2Fubm90IHN0YXJ0IHdpdGggaHR0cDovLyBvciBodHRwczovLy5cbiAgICAgKiBEZWZhdWx0IHZhbHVlOiBudWxsLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGF1dG9TbmFwc2hvdFBvbGljeU5hbWU/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBkaXNrSWRzOiBUaGUgZGlzayBJRC4gV2hlbiB5b3Ugd2FudCB0byBhcHBseSB0aGUgYXV0b21hdGljIHNuYXBzaG90IHBvbGljeSB0byBtdWx0aXBsZSBkaXNrcywgeW91IGNhbiBzZXQgdGhlIERpc2tJZHMgdG8gYW4gYXJyYXkuIFRoZSBmb3JtYXQgaXMgbGlzdCBvZiBbXCJkLXh4eHh4eHh4eFwiLCBcImQteXl5eXl5eXl5XCIsIC4uLiwgXCJkLXp6enp6enp6elwiXSBhbmQgdGhlIElEcyBhcmUgc2VwYXJhdGVkIGJ5IGNvbW1hcyAoLCkuXG4gICAgICovXG4gICAgcmVhZG9ubHkgZGlza0lkcz86IEFycmF5PHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZT4gfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSB0YWdzOiBUYWdzIHRvIGF0dGFjaCB0byBpbnN0YW5jZS4gTWF4IHN1cHBvcnQgMjAgdGFncyB0byBhZGQgZHVyaW5nIGNyZWF0ZSBpbnN0YW5jZS4gRWFjaCB0YWcgd2l0aCB0d28gcHJvcGVydGllcyBLZXkgYW5kIFZhbHVlLCBhbmQgS2V5IGlzIHJlcXVpcmVkLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHRhZ3M/OiBSb3NBdXRvU25hcHNob3RQb2xpY3kuVGFnc1Byb3BlcnR5W107XG59XG5cbi8qKlxuICogQSBST1MgcmVzb3VyY2UgdHlwZTogIGBBTElZVU46OkVDUzo6QXV0b1NuYXBzaG90UG9saWN5YFxuICovXG5leHBvcnQgY2xhc3MgQXV0b1NuYXBzaG90UG9saWN5IGV4dGVuZHMgcm9zLlJlc291cmNlIHtcblxuICAgIC8qKlxuICAgICAqIEEgZmFjdG9yeSBtZXRob2QgdGhhdCBjcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIHRoaXMgY2xhc3MgZnJvbSBhbiBvYmplY3RcbiAgICAgKiBjb250YWluaW5nIHRoZSBwcm9wZXJ0aWVzIG9mIHRoaXMgUk9TIHJlc291cmNlLCB3aGljaCB3aWxsIGJlIGFzc2lnbmVkIHRvIFJPUyByZXNvdXJjZS5cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBBdXRvU25hcHNob3RQb2xpY3lJZDogVGhlIGF1dG9tYXRpYyBzbmFwc2hvdCBwb2xpY3kgSUQuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJBdXRvU25hcHNob3RQb2xpY3lJZDogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IGBBTElZVU46OkVDUzo6QXV0b1NuYXBzaG90UG9saWN5YC5cbiAgICAgKlxuICAgICAqIFBhcmFtIHNjb3BlIC0gc2NvcGUgaW4gd2hpY2ggdGhpcyByZXNvdXJjZSBpcyBkZWZpbmVkXG4gICAgICogUGFyYW0gaWQgICAgLSBzY29wZWQgaWQgb2YgdGhlIHJlc291cmNlXG4gICAgICogUGFyYW0gcHJvcHMgLSByZXNvdXJjZSBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IHJvcy5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBBdXRvU25hcHNob3RQb2xpY3lQcm9wcywgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6Ym9vbGVhbiA9IHRydWUpIHtcbiAgICAgICAgc3VwZXIoc2NvcGUsIGlkKTtcblxuICAgICAgICBjb25zdCByb3NBdXRvU25hcHNob3RQb2xpY3kgPSBuZXcgUm9zQXV0b1NuYXBzaG90UG9saWN5KHRoaXMsIGlkLCAge1xuICAgICAgICAgICAgdGltZVBvaW50czogcHJvcHMudGltZVBvaW50cyxcbiAgICAgICAgICAgIGRpc2tJZHM6IHByb3BzLmRpc2tJZHMsXG4gICAgICAgICAgICByZXRlbnRpb25EYXlzOiBwcm9wcy5yZXRlbnRpb25EYXlzLFxuICAgICAgICAgICAgcmVwZWF0V2Vla2RheXM6IHByb3BzLnJlcGVhdFdlZWtkYXlzLFxuICAgICAgICAgICAgYXV0b1NuYXBzaG90UG9saWN5TmFtZTogcHJvcHMuYXV0b1NuYXBzaG90UG9saWN5TmFtZSxcbiAgICAgICAgICAgIHRhZ3M6IHByb3BzLnRhZ3MsXG4gICAgICAgIH0sIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ICYmIHRoaXMuc3RhY2suZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQpO1xuICAgICAgICB0aGlzLnJlc291cmNlID0gcm9zQXV0b1NuYXBzaG90UG9saWN5O1xuICAgICAgICB0aGlzLmF0dHJBdXRvU25hcHNob3RQb2xpY3lJZCA9IHJvc0F1dG9TbmFwc2hvdFBvbGljeS5hdHRyQXV0b1NuYXBzaG90UG9saWN5SWQ7XG4gICAgfVxufVxuIl19