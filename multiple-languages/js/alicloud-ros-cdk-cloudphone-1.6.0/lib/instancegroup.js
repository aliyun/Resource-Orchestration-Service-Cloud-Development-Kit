"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InstanceGroup = exports.InstanceGroupProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const cloudphone_generated_1 = require("./cloudphone.generated");
Object.defineProperty(exports, "InstanceGroupProperty", { enumerable: true, get: function () { return cloudphone_generated_1.RosInstanceGroup; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::CloudPhone::InstanceGroup`, which is used to create and start cloud phones.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosInstanceGroup`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-cloudphone-instancegroup
 */
class InstanceGroup extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosInstanceGroup = new cloudphone_generated_1.RosInstanceGroup(this, id, {
            keyPairName: props.keyPairName,
            description: props.description,
            amount: props.amount,
            securityGroupId: props.securityGroupId,
            autoRenew: props.autoRenew,
            vSwitchId: props.vSwitchId,
            period: props.period,
            autoPay: props.autoPay,
            instanceName: props.instanceName,
            eipBandwidth: props.eipBandwidth,
            chargeType: props.chargeType,
            imageId: props.imageId,
            vncPassword: props.vncPassword,
            tag: props.tag,
            instanceType: props.instanceType,
            periodUnit: props.periodUnit === undefined || props.periodUnit === null ? 'Month' : props.periodUnit,
            resolution: props.resolution,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosInstanceGroup;
        this.attrInstanceIds = rosInstanceGroup.attrInstanceIds;
        this.attrOrderId = rosInstanceGroup.attrOrderId;
        this.attrPrivateIps = rosInstanceGroup.attrPrivateIps;
        this.attrTradePrice = rosInstanceGroup.attrTradePrice;
    }
}
exports.InstanceGroup = InstanceGroup;
//# sourceMappingURL=data:application/json;base64,