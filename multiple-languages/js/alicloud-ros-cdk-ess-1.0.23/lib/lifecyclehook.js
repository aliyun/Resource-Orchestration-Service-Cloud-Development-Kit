"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LifecycleHook = exports.LifecycleHookProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ess_generated_1 = require("./ess.generated");
Object.defineProperty(exports, "LifecycleHookProperty", { enumerable: true, get: function () { return ess_generated_1.RosLifecycleHook; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::ESS::LifecycleHook`, which is used to create a lifecycle hook for a scaling group.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosLifecycleHook`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-ess-lifecyclehook
 */
class LifecycleHook extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosLifecycleHook = new ess_generated_1.RosLifecycleHook(this, id, {
            lifecycleHookName: props.lifecycleHookName,
            notificationArn: props.notificationArn,
            scalingGroupId: props.scalingGroupId,
            lifecycleTransition: props.lifecycleTransition,
            heartbeatTimeout: props.heartbeatTimeout,
            notificationMetadata: props.notificationMetadata,
            defaultResult: props.defaultResult,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosLifecycleHook;
        this.attrLifecycleHookId = rosLifecycleHook.attrLifecycleHookId;
        this.attrScalingGroupId = rosLifecycleHook.attrScalingGroupId;
    }
}
exports.LifecycleHook = LifecycleHook;
//# sourceMappingURL=data:application/json;base64,