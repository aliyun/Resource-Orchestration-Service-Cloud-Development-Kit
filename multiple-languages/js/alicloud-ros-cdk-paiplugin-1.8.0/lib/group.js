"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Group = exports.GroupProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const paiplugin_generated_1 = require("./paiplugin.generated");
Object.defineProperty(exports, "GroupProperty", { enumerable: true, get: function () { return paiplugin_generated_1.RosGroup; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::PAIPlugin::Group`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosGroup`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-paiplugin-group
 */
class Group extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosGroup = new paiplugin_generated_1.RosGroup(this, id, {
            project: props.project,
            table: props.table,
            inferenceJobId: props.inferenceJobId,
            filter: props.filter,
            column: props.column,
            phoneNumber: props.phoneNumber,
            text: props.text,
            algorithm: props.algorithm,
            uri: props.uri,
            source: props.source,
            remark: props.remark,
            name: props.name,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosGroup;
        this.attrAmount = rosGroup.attrAmount;
        this.attrCreatedTime = rosGroup.attrCreatedTime;
        this.attrId = rosGroup.attrId;
        this.attrName = rosGroup.attrName;
    }
}
exports.Group = Group;
//# sourceMappingURL=data:application/json;base64,