"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Secret = exports.SecretProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const kms_generated_1 = require("./kms.generated");
Object.defineProperty(exports, "SecretProperty", { enumerable: true, get: function () { return kms_generated_1.RosSecret; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::KMS::Secret`, which is used to create a secret and store the initial version of the secret.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosSecret`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-kms-secret
 */
class Secret extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosSecret = new kms_generated_1.RosSecret(this, id, {
            versionId: props.versionId,
            description: props.description,
            rotationInterval: props.rotationInterval,
            secretType: props.secretType,
            secretDataType: props.secretDataType,
            dkmsInstanceId: props.dkmsInstanceId,
            versionStages: props.versionStages,
            secretName: props.secretName,
            enableAutomaticRotation: props.enableAutomaticRotation,
            extendedConfig: props.extendedConfig,
            secretData: props.secretData,
            encryptionKeyId: props.encryptionKeyId,
            recoveryWindowInDays: props.recoveryWindowInDays === undefined || props.recoveryWindowInDays === null ? 30 : props.recoveryWindowInDays,
            forceDeleteWithoutRecovery: props.forceDeleteWithoutRecovery === undefined || props.forceDeleteWithoutRecovery === null ? false : props.forceDeleteWithoutRecovery,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosSecret;
        this.attrArn = rosSecret.attrArn;
        this.attrSecretName = rosSecret.attrSecretName;
    }
}
exports.Secret = Secret;
//# sourceMappingURL=data:application/json;base64,