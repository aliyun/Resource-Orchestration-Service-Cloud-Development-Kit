"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ForwardEntry = exports.ForwardEntryProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const vpc_generated_1 = require("./vpc.generated");
Object.defineProperty(exports, "ForwardEntryProperty", { enumerable: true, get: function () { return vpc_generated_1.RosForwardEntry; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::VPC::ForwardEntry`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosForwardEntry`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-vpc-forwardentry
 */
class ForwardEntry extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosForwardEntry = new vpc_generated_1.RosForwardEntry(this, id, {
            externalPort: props.externalPort,
            externalIp: props.externalIp,
            ipProtocol: props.ipProtocol,
            portBreak: props.portBreak,
            internalPort: props.internalPort,
            forwardEntryName: props.forwardEntryName,
            internalIp: props.internalIp,
            forwardTableId: props.forwardTableId,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosForwardEntry;
        this.attrForwardEntryId = rosForwardEntry.attrForwardEntryId;
    }
}
exports.ForwardEntry = ForwardEntry;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9yd2FyZGVudHJ5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZm9yd2FyZGVudHJ5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDhDQUE4QztBQUM5QyxtREFBa0Q7QUFFdEIscUdBRm5CLCtCQUFlLE9BRXdCO0FBNERoRDs7OztHQUlHO0FBQ0gsTUFBYSxZQUFhLFNBQVEsR0FBRyxDQUFDLFFBQVE7SUFXMUM7Ozs7T0FJRztJQUNILFlBQVksS0FBb0IsRUFBRSxFQUFVLEVBQUUsS0FBd0IsRUFBRSxtQ0FBMkMsSUFBSTtRQUNuSCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ2pCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQ2IsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLGdDQUFnQyxHQUFHLGdDQUFnQyxDQUFDO1FBRXpFLE1BQU0sZUFBZSxHQUFHLElBQUksK0JBQWUsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFHO1lBQ25ELFlBQVksRUFBRSxLQUFLLENBQUMsWUFBWTtZQUNoQyxVQUFVLEVBQUUsS0FBSyxDQUFDLFVBQVU7WUFDNUIsVUFBVSxFQUFFLEtBQUssQ0FBQyxVQUFVO1lBQzVCLFNBQVMsRUFBRSxLQUFLLENBQUMsU0FBUztZQUMxQixZQUFZLEVBQUUsS0FBSyxDQUFDLFlBQVk7WUFDaEMsZ0JBQWdCLEVBQUUsS0FBSyxDQUFDLGdCQUFnQjtZQUN4QyxVQUFVLEVBQUUsS0FBSyxDQUFDLFVBQVU7WUFDNUIsY0FBYyxFQUFFLEtBQUssQ0FBQyxjQUFjO1NBQ3ZDLEVBQUUsZ0NBQWdDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO1FBQ3BGLElBQUksQ0FBQyxRQUFRLEdBQUcsZUFBZSxDQUFDO1FBQ2hDLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxlQUFlLENBQUMsa0JBQWtCLENBQUM7SUFDakUsQ0FBQztDQUNKO0FBcENELG9DQW9DQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHJvcyBmcm9tICdAYWxpY2xvdWQvcm9zLWNkay1jb3JlJztcbmltcG9ydCB7IFJvc0ZvcndhcmRFbnRyeSB9IGZyb20gJy4vdnBjLmdlbmVyYXRlZCc7XG4vLyBHZW5lcmF0ZWQgZnJvbSB0aGUgQWxpQ2xvdWQgUk9TIFJlc291cmNlIFNwZWNpZmljYXRpb25cbmV4cG9ydCB7IFJvc0ZvcndhcmRFbnRyeSBhcyBGb3J3YXJkRW50cnlQcm9wZXJ0eSB9O1xuXG4vKipcbiAqIFByb3BlcnRpZXMgZm9yIGRlZmluaW5nIGEgYEZvcndhcmRFbnRyeWAuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2FsaXl1bi12cGMtZm9yd2FyZGVudHJ5XG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRm9yd2FyZEVudHJ5UHJvcHMge1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgZXh0ZXJuYWxJcDogU291cmNlIElQLCBtdXN0IGJlbG9uZ3MgdG8gYmFuZHdpZHRoIHBhY2thZ2UgaW50ZXJuZXQgSVBcbiAgICAgKi9cbiAgICByZWFkb25seSBleHRlcm5hbElwOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBleHRlcm5hbFBvcnQ6IFNvdXJjZSBwb3J0LCBub3cgc3VwcG9ydCBbMS02NTUzNV18QW55fHhcXC95XG4gICAgICovXG4gICAgcmVhZG9ubHkgZXh0ZXJuYWxQb3J0OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBmb3J3YXJkVGFibGVJZDogQ3JlYXRlIGZvcndhcmQgZW50cnkgaW4gc3BlY2lmaWVkIGZvcndhcmQgdGFibGUuXG4gICAgICovXG4gICAgcmVhZG9ubHkgZm9yd2FyZFRhYmxlSWQ6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGludGVybmFsSXA6IERlc3RpbmF0aW9uIElQLCBtdXN0IGJlbG9uZyB0byBWUEMgcHJpdmF0ZSBJUFxuICAgICAqL1xuICAgIHJlYWRvbmx5IGludGVybmFsSXA6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGludGVybmFsUG9ydDogRGVzdGluYXRpb24gcG9ydCwgbm93IHN1cHBvcnQgWzEtNjU1MzVdfEFueXx4XFwveVxuICAgICAqL1xuICAgIHJlYWRvbmx5IGludGVybmFsUG9ydDogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgaXBQcm90b2NvbDogU3VwcG9ydGVkIHByb3RvY29sLCBOb3cgc3VwcG9ydCAnVENQfFVEUHxBbnknXG4gICAgICovXG4gICAgcmVhZG9ubHkgaXBQcm90b2NvbDogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgZm9yd2FyZEVudHJ5TmFtZTogdGhlIG5hbWUgb2YgdGhlIEROQVQgcnVsZSBpcyAyLTEyOCBjaGFyYWN0ZXJzIGxvbmcgYW5kIG11c3Qgc3RhcnQgd2l0aCBhIGxldHRlciBvciBDaGluZXNlLCBidXQgY2Fubm90IGJlZ2luIHdpdGggSFRUUDpcXC9cXC8gb3IgaHR0cHM6XFwvXFwvLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGZvcndhcmRFbnRyeU5hbWU/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBwb3J0QnJlYWs6IFNwZWNpZmllcyB3aGV0aGVyIHRvIHJlbW92ZSBsaW1pdHMgb24gdGhlIHBvcnQgcmFuZ2UuXG4gICAgICovXG4gICAgcmVhZG9ubHkgcG9ydEJyZWFrPzogYm9vbGVhbiB8IHJvcy5JUmVzb2x2YWJsZTtcbn1cblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgYEZvcndhcmRFbnRyeWAuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSUZvcndhcmRFbnRyeSBleHRlbmRzIHJvcy5JUmVzb3VyY2Uge1xuICAgIHJlYWRvbmx5IHByb3BzOiBGb3J3YXJkRW50cnlQcm9wcztcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBGb3J3YXJkRW50cnlJZDogVGhlIGlkIG9mIGNyZWF0ZWQgZm9yd2FyZCBlbnRyeS5cbiAgICAgKi9cbiAgICByZWFkb25seSBhdHRyRm9yd2FyZEVudHJ5SWQ6IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcbn1cbi8qKlxuICogVGhpcyBjbGFzcyBlbmNhcHN1bGF0ZXMgYW5kIGV4dGVuZHMgdGhlIFJPUyByZXNvdXJjZSB0eXBlIGBBTElZVU46OlZQQzo6Rm9yd2FyZEVudHJ5YC5cbiAqIEBOb3RlIFRoaXMgY2xhc3MgbWF5IGhhdmUgc29tZSBuZXcgZnVuY3Rpb25zIHRvIGZhY2lsaXRhdGUgZGV2ZWxvcG1lbnQsIHNvIGl0IGlzIHJlY29tbWVuZGVkIHRvIHVzZSB0aGlzIGNsYXNzIGluc3RlYWQgb2YgYFJvc0ZvcndhcmRFbnRyeWBmb3IgYSBtb3JlIGNvbnZlbmllbnQgZGV2ZWxvcG1lbnQgZXhwZXJpZW5jZS5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvYWxpeXVuLXZwYy1mb3J3YXJkZW50cnlcbiAqL1xuZXhwb3J0IGNsYXNzIEZvcndhcmRFbnRyeSBleHRlbmRzIHJvcy5SZXNvdXJjZSBpbXBsZW1lbnRzIElGb3J3YXJkRW50cnkge1xuICAgIHByb3RlY3RlZCBzY29wZTogcm9zLkNvbnN0cnVjdDtcbiAgICBwcm90ZWN0ZWQgaWQ6IHN0cmluZztcbiAgICBwdWJsaWMgcmVhZG9ubHkgcHJvcHM6IEZvcndhcmRFbnRyeVByb3BzO1xuICAgIHByb3RlY3RlZCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBGb3J3YXJkRW50cnlJZDogVGhlIGlkIG9mIGNyZWF0ZWQgZm9yd2FyZCBlbnRyeS5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckZvcndhcmRFbnRyeUlkOiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBQYXJhbSBzY29wZSAtIHNjb3BlIGluIHdoaWNoIHRoaXMgcmVzb3VyY2UgaXMgZGVmaW5lZFxuICAgICAqIFBhcmFtIGlkICAgIC0gc2NvcGVkIGlkIG9mIHRoZSByZXNvdXJjZVxuICAgICAqIFBhcmFtIHByb3BzIC0gcmVzb3VyY2UgcHJvcGVydGllc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiByb3MuQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogRm9yd2FyZEVudHJ5UHJvcHMsIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OmJvb2xlYW4gPSB0cnVlKSB7XG4gICAgICAgIHN1cGVyKHNjb3BlLCBpZCk7XG4gICAgICAgIHRoaXMuc2NvcGUgPSBzY29wZTtcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xuICAgICAgICB0aGlzLnByb3BzID0gcHJvcHM7XG4gICAgICAgIHRoaXMuZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgPSBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDtcblxuICAgICAgICBjb25zdCByb3NGb3J3YXJkRW50cnkgPSBuZXcgUm9zRm9yd2FyZEVudHJ5KHRoaXMsIGlkLCAge1xuICAgICAgICAgICAgZXh0ZXJuYWxQb3J0OiBwcm9wcy5leHRlcm5hbFBvcnQsXG4gICAgICAgICAgICBleHRlcm5hbElwOiBwcm9wcy5leHRlcm5hbElwLFxuICAgICAgICAgICAgaXBQcm90b2NvbDogcHJvcHMuaXBQcm90b2NvbCxcbiAgICAgICAgICAgIHBvcnRCcmVhazogcHJvcHMucG9ydEJyZWFrLFxuICAgICAgICAgICAgaW50ZXJuYWxQb3J0OiBwcm9wcy5pbnRlcm5hbFBvcnQsXG4gICAgICAgICAgICBmb3J3YXJkRW50cnlOYW1lOiBwcm9wcy5mb3J3YXJkRW50cnlOYW1lLFxuICAgICAgICAgICAgaW50ZXJuYWxJcDogcHJvcHMuaW50ZXJuYWxJcCxcbiAgICAgICAgICAgIGZvcndhcmRUYWJsZUlkOiBwcm9wcy5mb3J3YXJkVGFibGVJZCxcbiAgICAgICAgfSwgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgJiYgdGhpcy5zdGFjay5lbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCk7XG4gICAgICAgIHRoaXMucmVzb3VyY2UgPSByb3NGb3J3YXJkRW50cnk7XG4gICAgICAgIHRoaXMuYXR0ckZvcndhcmRFbnRyeUlkID0gcm9zRm9yd2FyZEVudHJ5LmF0dHJGb3J3YXJkRW50cnlJZDtcbiAgICB9XG59XG4iXX0=