"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TrafficMirrorFilter = exports.TrafficMirrorFilterProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const vpc_generated_1 = require("./vpc.generated");
Object.defineProperty(exports, "TrafficMirrorFilterProperty", { enumerable: true, get: function () { return vpc_generated_1.RosTrafficMirrorFilter; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::VPC::TrafficMirrorFilter`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosTrafficMirrorFilter`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-vpc-trafficmirrorfilter
 */
class TrafficMirrorFilter extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props = {}, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosTrafficMirrorFilter = new vpc_generated_1.RosTrafficMirrorFilter(this, id, {
            trafficMirrorFilterDescription: props.trafficMirrorFilterDescription,
            egressRules: props.egressRules,
            trafficMirrorFilterName: props.trafficMirrorFilterName,
            ingressRules: props.ingressRules,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosTrafficMirrorFilter;
        this.attrEgressRules = rosTrafficMirrorFilter.attrEgressRules;
        this.attrIngressRules = rosTrafficMirrorFilter.attrIngressRules;
        this.attrTrafficMirrorFilterDescription = rosTrafficMirrorFilter.attrTrafficMirrorFilterDescription;
        this.attrTrafficMirrorFilterId = rosTrafficMirrorFilter.attrTrafficMirrorFilterId;
        this.attrTrafficMirrorFilterName = rosTrafficMirrorFilter.attrTrafficMirrorFilterName;
    }
}
exports.TrafficMirrorFilter = TrafficMirrorFilter;
//# sourceMappingURL=data:application/json;base64,