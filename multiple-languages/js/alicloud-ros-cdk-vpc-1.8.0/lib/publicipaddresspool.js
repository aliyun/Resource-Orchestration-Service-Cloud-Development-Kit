"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PublicIpAddressPool = exports.PublicIpAddressPoolProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const vpc_generated_1 = require("./vpc.generated");
Object.defineProperty(exports, "PublicIpAddressPoolProperty", { enumerable: true, get: function () { return vpc_generated_1.RosPublicIpAddressPool; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::VPC::PublicIpAddressPool`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosPublicIpAddressPool`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-vpc-publicipaddresspool
 */
class PublicIpAddressPool extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props = {}, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosPublicIpAddressPool = new vpc_generated_1.RosPublicIpAddressPool(this, id, {
            description: props.description,
            resourceGroupId: props.resourceGroupId,
            isp: props.isp,
            securityProtectionTypes: props.securityProtectionTypes,
            bizType: props.bizType,
            tags: props.tags,
            zones: props.zones,
            name: props.name,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosPublicIpAddressPool;
        this.attrPublicIpAddressPoolId = rosPublicIpAddressPool.attrPublicIpAddressPoolId;
    }
}
exports.PublicIpAddressPool = PublicIpAddressPool;
//# sourceMappingURL=data:application/json;base64,