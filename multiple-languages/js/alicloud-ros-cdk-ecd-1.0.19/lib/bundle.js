"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Bundle = exports.BundleProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ecd_generated_1 = require("./ecd.generated");
Object.defineProperty(exports, "BundleProperty", { enumerable: true, get: function () { return ecd_generated_1.RosBundle; } });
/**
 * A ROS resource type:  `ALIYUN::ECD::Bundle`
 */
class Bundle extends ros.Resource {
    /**
     * Create a new `ALIYUN::ECD::Bundle`.
     *
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosBundle = new ecd_generated_1.RosBundle(this, id, {
            description: props.description,
            rootDiskSizeGib: props.rootDiskSizeGib,
            language: props.language,
            rootDiskPerformanceLevel: props.rootDiskPerformanceLevel,
            desktopType: props.desktopType,
            bundleName: props.bundleName,
            imageId: props.imageId,
            userDiskPerformanceLevel: props.userDiskPerformanceLevel,
            userDiskSizeGib: props.userDiskSizeGib,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosBundle;
        this.attrBundleId = rosBundle.attrBundleId;
    }
}
exports.Bundle = Bundle;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYnVuZGxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDhDQUE4QztBQUM5QyxtREFBNEM7QUFFdEIsK0ZBRmIseUJBQVMsT0FFa0I7QUFzRXBDOztHQUVHO0FBQ0gsTUFBYSxNQUFPLFNBQVEsR0FBRyxDQUFDLFFBQVE7SUFZcEM7Ozs7OztPQU1HO0lBQ0gsWUFBWSxLQUFvQixFQUFFLEVBQVUsRUFBRSxLQUFrQixFQUFFLG1DQUEyQyxJQUFJO1FBQzdHLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFakIsTUFBTSxTQUFTLEdBQUcsSUFBSSx5QkFBUyxDQUFDLElBQUksRUFBRSxFQUFFLEVBQUc7WUFDdkMsV0FBVyxFQUFFLEtBQUssQ0FBQyxXQUFXO1lBQzlCLGVBQWUsRUFBRSxLQUFLLENBQUMsZUFBZTtZQUN0QyxRQUFRLEVBQUUsS0FBSyxDQUFDLFFBQVE7WUFDeEIsd0JBQXdCLEVBQUUsS0FBSyxDQUFDLHdCQUF3QjtZQUN4RCxXQUFXLEVBQUUsS0FBSyxDQUFDLFdBQVc7WUFDOUIsVUFBVSxFQUFFLEtBQUssQ0FBQyxVQUFVO1lBQzVCLE9BQU8sRUFBRSxLQUFLLENBQUMsT0FBTztZQUN0Qix3QkFBd0IsRUFBRSxLQUFLLENBQUMsd0JBQXdCO1lBQ3hELGVBQWUsRUFBRSxLQUFLLENBQUMsZUFBZTtTQUN6QyxFQUFFLGdDQUFnQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztRQUNwRixJQUFJLENBQUMsUUFBUSxHQUFHLFNBQVMsQ0FBQztRQUMxQixJQUFJLENBQUMsWUFBWSxHQUFHLFNBQVMsQ0FBQyxZQUFZLENBQUM7SUFDL0MsQ0FBQztDQUNKO0FBcENELHdCQW9DQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHJvcyBmcm9tICdAYWxpY2xvdWQvcm9zLWNkay1jb3JlJztcbmltcG9ydCB7IFJvc0J1bmRsZSB9IGZyb20gJy4vZWNkLmdlbmVyYXRlZCc7XG4vLyBHZW5lcmF0ZWQgZnJvbSB0aGUgQWxpQ2xvdWQgUk9TIFJlc291cmNlIFNwZWNpZmljYXRpb25cbmV4cG9ydCB7IFJvc0J1bmRsZSBhcyBCdW5kbGVQcm9wZXJ0eSB9O1xuXG4vKipcbiAqIFByb3BlcnRpZXMgZm9yIGRlZmluaW5nIGEgYEFMSVlVTjo6RUNEOjpCdW5kbGVgXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQnVuZGxlUHJvcHMge1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgZGVza3RvcFR5cGU6IERlc2t0b3Agc3BlY2lmaWNhdGlvbnMuWW91IGNhbiBjYWxsIERlc2NyaWJ1bmRsZXMgdG8gcXVlcnkgdGhlIGRlc2t0b3AgYnVuZGxlIGFuZCBnZXQgdGhlIGN1cnJlbnRseSBzdXBwb3J0ZWQgZGVza3RvcCBzcGVjaWZpY2F0aW9uIGZyb20gdGhlIHJldHVybmVkIGRlc2t0b3BUeXBlLlxuICAgICAqIEV4cGxhaW4gdGhhdCBvcmRpbmFyeSBtaXJyb3JzIGNhbm5vdCBjaG9vc2UgdGhlIEdQVSBzcGVjaWZpY2F0aW9ucywgYW5kIHRoZSBHUFUgdHlwZSBtaXJyb3IgY2FuIG9ubHkgY2hvb3NlIHRoZSBHUFUgc3BlY2lmaWNhdGlvbi5cbiAgICAgKi9cbiAgICByZWFkb25seSBkZXNrdG9wVHlwZTogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgaW1hZ2VJZDogVGhlIElEIG9mIHRoZSBpbWFnZS5cbiAgICAgKi9cbiAgICByZWFkb25seSBpbWFnZUlkOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSByb290RGlza1NpemVHaWI6IFRoZSByb290IGRpc2sgc2l6ZSBnaWIuXG4gICAgICovXG4gICAgcmVhZG9ubHkgcm9vdERpc2tTaXplR2liOiBudW1iZXIgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSB1c2VyRGlza1NpemVHaWI6IFRoZSBzaXplIG9mIHRoZSBkYXRhIGRpc2suIEN1cnJlbnRseSwgb25seSBvbmUgZGF0YSBkaXNrIGNhbiBiZSBzZXQuIFVuaXQ6IEdpQi5cbiAgICAgKiAtIFRoZSBzaXplIG9mIHRoZSBkYXRhIGRpc2sgdGhhdCBzdXBwb3J0cyB0aGUgc2V0dGluZyBjb3JyZXNwb25kcyB0byB0aGUgc3BlY2lmaWNhdGlvbi5cbiAgICAgKiAtIFRoZSBkYXRhIGRpc2sgc2l6ZSAodXNlcl9kaXNrX3NpemVfZ2liKSBzZXQgaW4gdGhlIHRlbXBsYXRlIG11c3QgYmUgZ3JlYXRlciB0aGFuIHRoZSBkYXRhIGRpc2sgc2l6ZSAoZGF0YV9kaXNrX3NpemUpIGluIHRoZSBtaXJyb3IuXG4gICAgICovXG4gICAgcmVhZG9ubHkgdXNlckRpc2tTaXplR2liOiBBcnJheTxudW1iZXIgfCByb3MuSVJlc29sdmFibGU+IHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgYnVuZGxlTmFtZTogVGhlIG5hbWUgb2YgdGhlIGJ1bmRsZS5cbiAgICAgKi9cbiAgICByZWFkb25seSBidW5kbGVOYW1lPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgZGVzY3JpcHRpb246IFRoZSBkZXNjcmlwdGlvbiBvZiB0aGUgYnVuZGxlLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGRlc2NyaXB0aW9uPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgbGFuZ3VhZ2U6IFRoZSBsYW5ndWFnZS4gVmFsaWQgdmFsdWVzOlxuICAgICAqIHpoLUNOOiBTaW1wbGlmaWVkIENoaW5lc2VcbiAgICAgKiB6aC1ISzogVHJhZGl0aW9uYWwgQ2hpbmVzZSAoSG9uZyBLb25nKVxuICAgICAqIGVuLVVTOiBFbmdsaXNoXG4gICAgICogamEtSlA6IEphcGFuZXNlXG4gICAgICovXG4gICAgcmVhZG9ubHkgbGFuZ3VhZ2U/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSByb290RGlza1BlcmZvcm1hbmNlTGV2ZWw6IFRoZSByb290IGRpc2sgcGVyZm9ybWFuY2UgbGV2ZWwuIFZhbGlkIHZhbHVlczpcbiAgICAgKiBQTDBcbiAgICAgKiBQTDFcbiAgICAgKiBQTDJcbiAgICAgKiBQTDNcbiAgICAgKlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHJvb3REaXNrUGVyZm9ybWFuY2VMZXZlbD86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHVzZXJEaXNrUGVyZm9ybWFuY2VMZXZlbDogVGhlIHVzZXIgZGlzayBwZXJmb3JtYW5jZSBsZXZlbC5WYWxpZCB2YWx1ZXM6XG4gICAgICogUEwwXG4gICAgICogUEwxXG4gICAgICogUEwyXG4gICAgICogUEwzXG4gICAgICpcbiAgICAgKi9cbiAgICByZWFkb25seSB1c2VyRGlza1BlcmZvcm1hbmNlTGV2ZWw/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG59XG5cbi8qKlxuICogQSBST1MgcmVzb3VyY2UgdHlwZTogIGBBTElZVU46OkVDRDo6QnVuZGxlYFxuICovXG5leHBvcnQgY2xhc3MgQnVuZGxlIGV4dGVuZHMgcm9zLlJlc291cmNlIHtcblxuICAgIC8qKlxuICAgICAqIEEgZmFjdG9yeSBtZXRob2QgdGhhdCBjcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIHRoaXMgY2xhc3MgZnJvbSBhbiBvYmplY3RcbiAgICAgKiBjb250YWluaW5nIHRoZSBwcm9wZXJ0aWVzIG9mIHRoaXMgUk9TIHJlc291cmNlLCB3aGljaCB3aWxsIGJlIGFzc2lnbmVkIHRvIFJPUyByZXNvdXJjZS5cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBCdW5kbGVJZDogRGVza3RvcCBidW5kbGUgSUQuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJCdW5kbGVJZDogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IGBBTElZVU46OkVDRDo6QnVuZGxlYC5cbiAgICAgKlxuICAgICAqIFBhcmFtIHNjb3BlIC0gc2NvcGUgaW4gd2hpY2ggdGhpcyByZXNvdXJjZSBpcyBkZWZpbmVkXG4gICAgICogUGFyYW0gaWQgICAgLSBzY29wZWQgaWQgb2YgdGhlIHJlc291cmNlXG4gICAgICogUGFyYW0gcHJvcHMgLSByZXNvdXJjZSBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IHJvcy5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBCdW5kbGVQcm9wcywgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6Ym9vbGVhbiA9IHRydWUpIHtcbiAgICAgICAgc3VwZXIoc2NvcGUsIGlkKTtcblxuICAgICAgICBjb25zdCByb3NCdW5kbGUgPSBuZXcgUm9zQnVuZGxlKHRoaXMsIGlkLCAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IHByb3BzLmRlc2NyaXB0aW9uLFxuICAgICAgICAgICAgcm9vdERpc2tTaXplR2liOiBwcm9wcy5yb290RGlza1NpemVHaWIsXG4gICAgICAgICAgICBsYW5ndWFnZTogcHJvcHMubGFuZ3VhZ2UsXG4gICAgICAgICAgICByb290RGlza1BlcmZvcm1hbmNlTGV2ZWw6IHByb3BzLnJvb3REaXNrUGVyZm9ybWFuY2VMZXZlbCxcbiAgICAgICAgICAgIGRlc2t0b3BUeXBlOiBwcm9wcy5kZXNrdG9wVHlwZSxcbiAgICAgICAgICAgIGJ1bmRsZU5hbWU6IHByb3BzLmJ1bmRsZU5hbWUsXG4gICAgICAgICAgICBpbWFnZUlkOiBwcm9wcy5pbWFnZUlkLFxuICAgICAgICAgICAgdXNlckRpc2tQZXJmb3JtYW5jZUxldmVsOiBwcm9wcy51c2VyRGlza1BlcmZvcm1hbmNlTGV2ZWwsXG4gICAgICAgICAgICB1c2VyRGlza1NpemVHaWI6IHByb3BzLnVzZXJEaXNrU2l6ZUdpYixcbiAgICAgICAgfSwgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgJiYgdGhpcy5zdGFjay5lbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCk7XG4gICAgICAgIHRoaXMucmVzb3VyY2UgPSByb3NCdW5kbGU7XG4gICAgICAgIHRoaXMuYXR0ckJ1bmRsZUlkID0gcm9zQnVuZGxlLmF0dHJCdW5kbGVJZDtcbiAgICB9XG59XG4iXX0=