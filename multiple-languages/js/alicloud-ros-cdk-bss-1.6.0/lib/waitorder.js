"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WaitOrder = exports.WaitOrderProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const bss_generated_1 = require("./bss.generated");
Object.defineProperty(exports, "WaitOrderProperty", { enumerable: true, get: function () { return bss_generated_1.RosWaitOrder; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::BSS::WaitOrder`, which is used to wait for orders to be completed.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosWaitOrder`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-bss-waitorder
 */
class WaitOrder extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosWaitOrder = new bss_generated_1.RosWaitOrder(this, id, {
            cancelOnDelete: props.cancelOnDelete === undefined || props.cancelOnDelete === null ? true : props.cancelOnDelete,
            orderIds: props.orderIds,
            waitForOrderProduced: props.waitForOrderProduced === undefined || props.waitForOrderProduced === null ? false : props.waitForOrderProduced,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosWaitOrder;
    }
}
exports.WaitOrder = WaitOrder;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2FpdG9yZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsid2FpdG9yZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDhDQUE4QztBQUM5QyxtREFBK0M7QUFFdEIsa0dBRmhCLDRCQUFZLE9BRXFCO0FBK0IxQzs7OztHQUlHO0FBQ0gsTUFBYSxTQUFVLFNBQVEsR0FBRyxDQUFDLFFBQVE7SUFNdkM7Ozs7T0FJRztJQUNILFlBQVksS0FBb0IsRUFBRSxFQUFVLEVBQUUsS0FBcUIsRUFBRSxtQ0FBMkMsSUFBSTtRQUNoSCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ2pCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQ2IsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLGdDQUFnQyxHQUFHLGdDQUFnQyxDQUFDO1FBRXpFLE1BQU0sWUFBWSxHQUFHLElBQUksNEJBQVksQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFHO1lBQzdDLGNBQWMsRUFBRSxLQUFLLENBQUMsY0FBYyxLQUFLLFNBQVMsSUFBSSxLQUFLLENBQUMsY0FBYyxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsY0FBYztZQUNqSCxRQUFRLEVBQUUsS0FBSyxDQUFDLFFBQVE7WUFDeEIsb0JBQW9CLEVBQUUsS0FBSyxDQUFDLG9CQUFvQixLQUFLLFNBQVMsSUFBSSxLQUFLLENBQUMsb0JBQW9CLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxvQkFBb0I7U0FDN0ksRUFBRSxnQ0FBZ0MsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7UUFDcEYsSUFBSSxDQUFDLFFBQVEsR0FBRyxZQUFZLENBQUM7SUFDakMsQ0FBQztDQUNKO0FBekJELDhCQXlCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHJvcyBmcm9tICdAYWxpY2xvdWQvcm9zLWNkay1jb3JlJztcbmltcG9ydCB7IFJvc1dhaXRPcmRlciB9IGZyb20gJy4vYnNzLmdlbmVyYXRlZCc7XG4vLyBHZW5lcmF0ZWQgZnJvbSB0aGUgQWxpQ2xvdWQgUk9TIFJlc291cmNlIFNwZWNpZmljYXRpb25cbmV4cG9ydCB7IFJvc1dhaXRPcmRlciBhcyBXYWl0T3JkZXJQcm9wZXJ0eSB9O1xuXG4vKipcbiAqIFByb3BlcnRpZXMgZm9yIGRlZmluaW5nIGEgYFdhaXRPcmRlcmAuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2FsaXl1bi1ic3Mtd2FpdG9yZGVyXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgV2FpdE9yZGVyUHJvcHMge1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgb3JkZXJJZHM6IEEgbGlzdCBvZiBvcmRlciBpZHMuXG4gICAgICovXG4gICAgcmVhZG9ubHkgb3JkZXJJZHM6IEFycmF5PGFueSB8IHJvcy5JUmVzb2x2YWJsZT4gfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBjYW5jZWxPbkRlbGV0ZTogQ2FuY2VsIG9yZGVyIHdoZXJlIGRlbGV0ZSB0aGUgcmVzb3VyY2UuIElnbm9yZSB0aGUgcGFpZCBvcmRlci4gRGVmYXVsdCB0cnVlXG4gICAgICovXG4gICAgcmVhZG9ubHkgY2FuY2VsT25EZWxldGU/OiBib29sZWFuIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgd2FpdEZvck9yZGVyUHJvZHVjZWQ6IFdhaXQgdXRpbCBhbGwgb3JkZXJzIHJlbGF0ZWQgUk9TIHJlc291cmNlcyBhcmUgcHJvZHVjZWQuIFxuICAgICAqIFN1cHBvcnQgQUxJWVVOOjpFQ1M6OlByZXBheUluc3RhbmNlLCBBTElZVU46OlJEUzo6UHJlcGF5REJJbnN0YW5jZSwgQUxJWVVOOjpSRURJUzo6UHJlcGF5SW5zdGFuY2UsIEFMSVlVTjo6U0xCOjpMb2FkQmFsYW5jZXIsIEFMSVlVTjo6VlBDOjpFSVAsIEFMSVlVTjo6VlBDOjpWcG5HYXRld2F5LlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHdhaXRGb3JPcmRlclByb2R1Y2VkPzogYm9vbGVhbiB8IHJvcy5JUmVzb2x2YWJsZTtcbn1cblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgYFdhaXRPcmRlcmAuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSVdhaXRPcmRlciBleHRlbmRzIHJvcy5JUmVzb3VyY2Uge1xuICAgIHJlYWRvbmx5IHByb3BzOiBXYWl0T3JkZXJQcm9wcztcbn1cbi8qKlxuICogVGhpcyBjbGFzcyBlbmNhcHN1bGF0ZXMgYW5kIGV4dGVuZHMgdGhlIFJPUyByZXNvdXJjZSB0eXBlIGBBTElZVU46OkJTUzo6V2FpdE9yZGVyYCwgd2hpY2ggaXMgdXNlZCB0byB3YWl0IGZvciBvcmRlcnMgdG8gYmUgY29tcGxldGVkLlxuICogQE5vdGUgVGhpcyBjbGFzcyBtYXkgaGF2ZSBzb21lIG5ldyBmdW5jdGlvbnMgdG8gZmFjaWxpdGF0ZSBkZXZlbG9wbWVudCwgc28gaXQgaXMgcmVjb21tZW5kZWQgdG8gdXNlIHRoaXMgY2xhc3MgaW5zdGVhZCBvZiBgUm9zV2FpdE9yZGVyYGZvciBhIG1vcmUgY29udmVuaWVudCBkZXZlbG9wbWVudCBleHBlcmllbmNlLlxuICogU2VlIGh0dHBzOi8vd3d3LmFsaWJhYmFjbG91ZC5jb20vaGVscC9yb3MvZGV2ZWxvcGVyLXJlZmVyZW5jZS9hbGl5dW4tYnNzLXdhaXRvcmRlclxuICovXG5leHBvcnQgY2xhc3MgV2FpdE9yZGVyIGV4dGVuZHMgcm9zLlJlc291cmNlIGltcGxlbWVudHMgSVdhaXRPcmRlciB7XG4gICAgcHJvdGVjdGVkIHNjb3BlOiByb3MuQ29uc3RydWN0O1xuICAgIHByb3RlY3RlZCBpZDogc3RyaW5nO1xuICAgIHB1YmxpYyByZWFkb25seSBwcm9wczogV2FpdE9yZGVyUHJvcHM7XG4gICAgcHJvdGVjdGVkIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OiBib29sZWFuO1xuXG4gICAgLyoqXG4gICAgICogUGFyYW0gc2NvcGUgLSBzY29wZSBpbiB3aGljaCB0aGlzIHJlc291cmNlIGlzIGRlZmluZWRcbiAgICAgKiBQYXJhbSBpZCAgICAtIHNjb3BlZCBpZCBvZiB0aGUgcmVzb3VyY2VcbiAgICAgKiBQYXJhbSBwcm9wcyAtIHJlc291cmNlIHByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihzY29wZTogcm9zLkNvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IFdhaXRPcmRlclByb3BzLCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDpib29sZWFuID0gdHJ1ZSkge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQpO1xuICAgICAgICB0aGlzLnNjb3BlID0gc2NvcGU7XG4gICAgICAgIHRoaXMuaWQgPSBpZDtcbiAgICAgICAgdGhpcy5wcm9wcyA9IHByb3BzO1xuICAgICAgICB0aGlzLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ID0gZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ7XG5cbiAgICAgICAgY29uc3Qgcm9zV2FpdE9yZGVyID0gbmV3IFJvc1dhaXRPcmRlcih0aGlzLCBpZCwgIHtcbiAgICAgICAgICAgIGNhbmNlbE9uRGVsZXRlOiBwcm9wcy5jYW5jZWxPbkRlbGV0ZSA9PT0gdW5kZWZpbmVkIHx8IHByb3BzLmNhbmNlbE9uRGVsZXRlID09PSBudWxsID8gdHJ1ZSA6IHByb3BzLmNhbmNlbE9uRGVsZXRlLFxuICAgICAgICAgICAgb3JkZXJJZHM6IHByb3BzLm9yZGVySWRzLFxuICAgICAgICAgICAgd2FpdEZvck9yZGVyUHJvZHVjZWQ6IHByb3BzLndhaXRGb3JPcmRlclByb2R1Y2VkID09PSB1bmRlZmluZWQgfHwgcHJvcHMud2FpdEZvck9yZGVyUHJvZHVjZWQgPT09IG51bGwgPyBmYWxzZSA6IHByb3BzLndhaXRGb3JPcmRlclByb2R1Y2VkLFxuICAgICAgICB9LCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCAmJiB0aGlzLnN0YWNrLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50KTtcbiAgICAgICAgdGhpcy5yZXNvdXJjZSA9IHJvc1dhaXRPcmRlcjtcbiAgICB9XG59XG4iXX0=