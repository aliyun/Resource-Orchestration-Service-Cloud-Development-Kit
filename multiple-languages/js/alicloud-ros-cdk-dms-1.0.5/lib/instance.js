"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Instance = exports.InstanceProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const dms_generated_1 = require("./dms.generated");
Object.defineProperty(exports, "InstanceProperty", { enumerable: true, get: function () { return dms_generated_1.RosInstance; } });
/**
 * A ROS resource type:  `ALIYUN::DMS::Instance`
 */
class Instance extends ros.Resource {
    /**
     * Create a new `ALIYUN::DMS::Instance`.
     *
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosInstance = new dms_generated_1.RosInstance(this, id, {
            instanceSource: props.instanceSource,
            databasePassword: props.databasePassword,
            port: props.port,
            host: props.host,
            exportTimeout: props.exportTimeout,
            safeRule: props.safeRule,
            ddlOnline: props.ddlOnline,
            envType: props.envType,
            tid: props.tid,
            useDsql: props.useDsql,
            sid: props.sid,
            ecsInstanceId: props.ecsInstanceId,
            vpcId: props.vpcId,
            dbaUid: props.dbaUid,
            ecsRegion: props.ecsRegion,
            networkType: props.networkType,
            instanceAlias: props.instanceAlias,
            databaseUser: props.databaseUser,
            instanceType: props.instanceType,
            dataLinkName: props.dataLinkName,
            queryTimeout: props.queryTimeout,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosInstance;
        this.attrHost = rosInstance.attrHost;
        this.attrInstanceId = rosInstance.attrInstanceId;
        this.attrPort = rosInstance.attrPort;
    }
}
exports.Instance = Instance;
//# sourceMappingURL=data:application/json;base64,