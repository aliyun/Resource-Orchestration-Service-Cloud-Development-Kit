"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DbAgent = exports.DbAgentProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const hbr_generated_1 = require("./hbr.generated");
Object.defineProperty(exports, "DbAgentProperty", { enumerable: true, get: function () { return hbr_generated_1.RosDbAgent; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::HBR::DbAgent`, which is used to install a Cloud Backup backup client for a database.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosDbAgent`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-hbr-dbagent
 */
class DbAgent extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosDbAgent = new hbr_generated_1.RosDbAgent(this, id, {
            crossAccountUserId: props.crossAccountUserId,
            crossAccountRoleName: props.crossAccountRoleName,
            crossAccountType: props.crossAccountType,
            instanceInfo: props.instanceInfo,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosDbAgent;
        this.attrInstanceIds = rosDbAgent.attrInstanceIds;
        this.attrTaskId = rosDbAgent.attrTaskId;
        this.attrUniBackupInstanceDetails = rosDbAgent.attrUniBackupInstanceDetails;
        this.attrUniBackupInstances = rosDbAgent.attrUniBackupInstances;
    }
}
exports.DbAgent = DbAgent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGJhZ2VudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImRiYWdlbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsOENBQThDO0FBQzlDLG1EQUE2QztBQUV0QixnR0FGZCwwQkFBVSxPQUVtQjtBQXVEdEM7Ozs7R0FJRztBQUNILE1BQWEsT0FBUSxTQUFRLEdBQUcsQ0FBQyxRQUFRO0lBMEJyQzs7OztPQUlHO0lBQ0gsWUFBWSxLQUFvQixFQUFFLEVBQVUsRUFBRSxLQUFtQixFQUFFLG1DQUEyQyxJQUFJO1FBQzlHLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDakIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUM7UUFDYixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsZ0NBQWdDLEdBQUcsZ0NBQWdDLENBQUM7UUFFekUsTUFBTSxVQUFVLEdBQUcsSUFBSSwwQkFBVSxDQUFDLElBQUksRUFBRSxFQUFFLEVBQUc7WUFDekMsa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGtCQUFrQjtZQUM1QyxvQkFBb0IsRUFBRSxLQUFLLENBQUMsb0JBQW9CO1lBQ2hELGdCQUFnQixFQUFFLEtBQUssQ0FBQyxnQkFBZ0I7WUFDeEMsWUFBWSxFQUFFLEtBQUssQ0FBQyxZQUFZO1NBQ25DLEVBQUUsZ0NBQWdDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO1FBQ3BGLElBQUksQ0FBQyxRQUFRLEdBQUcsVUFBVSxDQUFDO1FBQzNCLElBQUksQ0FBQyxlQUFlLEdBQUcsVUFBVSxDQUFDLGVBQWUsQ0FBQztRQUNsRCxJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQyxVQUFVLENBQUM7UUFDeEMsSUFBSSxDQUFDLDRCQUE0QixHQUFHLFVBQVUsQ0FBQyw0QkFBNEIsQ0FBQztRQUM1RSxJQUFJLENBQUMsc0JBQXNCLEdBQUcsVUFBVSxDQUFDLHNCQUFzQixDQUFDO0lBQ3BFLENBQUM7Q0FDSjtBQWxERCwwQkFrREMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyByb3MgZnJvbSAnQGFsaWNsb3VkL3Jvcy1jZGstY29yZSc7XG5pbXBvcnQgeyBSb3NEYkFnZW50IH0gZnJvbSAnLi9oYnIuZ2VuZXJhdGVkJztcbi8vIEdlbmVyYXRlZCBmcm9tIHRoZSBBbGlDbG91ZCBST1MgUmVzb3VyY2UgU3BlY2lmaWNhdGlvblxuZXhwb3J0IHsgUm9zRGJBZ2VudCBhcyBEYkFnZW50UHJvcGVydHkgfTtcblxuLyoqXG4gKiBQcm9wZXJ0aWVzIGZvciBkZWZpbmluZyBhIGBEYkFnZW50YC5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvYWxpeXVuLWhici1kYmFnZW50XG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRGJBZ2VudFByb3BzIHtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGluc3RhbmNlSW5mbzogSW5zdGFuY2UgaW5mb3NcbiAgICAgKi9cbiAgICByZWFkb25seSBpbnN0YW5jZUluZm86IEFycmF5PFJvc0RiQWdlbnQuSW5zdGFuY2VJbmZvUHJvcGVydHkgfCByb3MuSVJlc29sdmFibGU+IHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgY3Jvc3NBY2NvdW50Um9sZU5hbWU6IFRoZSBSQU0gcm9sZSBuYW1lIHRoYXQgdGhlIG9yaWdpbmFsIGFjY291bnQgY3JlYXRlZCBmb3IgY3Jvc3MtYWNjb3VudCBiYWNrdXAgb3BlcmF0aW9ucy5cbiAgICAgKi9cbiAgICByZWFkb25seSBjcm9zc0FjY291bnRSb2xlTmFtZT86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGNyb3NzQWNjb3VudFR5cGU6IFRoZSB0eXBlIG9mIGNyb3NzLWFjY291bnQgYmFja3VwLiBTdXBwb3J0ZWQgdmFsdWVzOiBTRUxGX0FDQ09VTlQ6IGJhY2t1cCB3aXRoaW4gdGhlIHNhbWUgYWNjb3VudDsgQ1JPU1NfQUNDT1VOVDogY3Jvc3MtYWNjb3VudCBiYWNrdXAuIEV4YW1wbGU6IENST1NTX0FDQ09VTlRcbiAgICAgKi9cbiAgICByZWFkb25seSBjcm9zc0FjY291bnRUeXBlPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgY3Jvc3NBY2NvdW50VXNlcklkOiBUaGUgdXNlciBJRCBvZiB0aGUgb3JpZ2luYWwgYWNjb3VudCBmb3IgY3Jvc3MtYWNjb3VudCBiYWNrdXAgb3BlcmF0aW9ucy5cbiAgICAgKi9cbiAgICByZWFkb25seSBjcm9zc0FjY291bnRVc2VySWQ/OiBudW1iZXIgfCByb3MuSVJlc29sdmFibGU7XG59XG5cbi8qKlxuICogUmVwcmVzZW50cyBhIGBEYkFnZW50YC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJRGJBZ2VudCBleHRlbmRzIHJvcy5JUmVzb3VyY2Uge1xuICAgIHJlYWRvbmx5IHByb3BzOiBEYkFnZW50UHJvcHM7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgSW5zdGFuY2VJZHM6IFVuaSBiYWNrdXAgYWdlbnQgaW5zdGFuY2UgaWRzXG4gICAgICovXG4gICAgcmVhZG9ubHkgYXR0ckluc3RhbmNlSWRzOiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgVGFza0lkOiBVbmkgYmFja3VwIGFnZW50IGluc3RhbGwgdGFzayBpZC5cbiAgICAgKi9cbiAgICByZWFkb25seSBhdHRyVGFza0lkOiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgVW5pQmFja3VwSW5zdGFuY2VEZXRhaWxzOiBVbmkgYmFja3VwIGFnZW50IGluc3RhbmNlIGluZm8gZGV0YWlsc1xuICAgICAqL1xuICAgIHJlYWRvbmx5IGF0dHJVbmlCYWNrdXBJbnN0YW5jZURldGFpbHM6IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBVbmlCYWNrdXBJbnN0YW5jZXM6IFVuaSBiYWNrdXAgYWdlbnQgaW5zdGFuY2UgaW5mb1xuICAgICAqL1xuICAgIHJlYWRvbmx5IGF0dHJVbmlCYWNrdXBJbnN0YW5jZXM6IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcbn1cbi8qKlxuICogVGhpcyBjbGFzcyBlbmNhcHN1bGF0ZXMgYW5kIGV4dGVuZHMgdGhlIFJPUyByZXNvdXJjZSB0eXBlIGBBTElZVU46OkhCUjo6RGJBZ2VudGAsIHdoaWNoIGlzIHVzZWQgdG8gaW5zdGFsbCBhIENsb3VkIEJhY2t1cCBiYWNrdXAgY2xpZW50IGZvciBhIGRhdGFiYXNlLlxuICogQE5vdGUgVGhpcyBjbGFzcyBtYXkgaGF2ZSBzb21lIG5ldyBmdW5jdGlvbnMgdG8gZmFjaWxpdGF0ZSBkZXZlbG9wbWVudCwgc28gaXQgaXMgcmVjb21tZW5kZWQgdG8gdXNlIHRoaXMgY2xhc3MgaW5zdGVhZCBvZiBgUm9zRGJBZ2VudGBmb3IgYSBtb3JlIGNvbnZlbmllbnQgZGV2ZWxvcG1lbnQgZXhwZXJpZW5jZS5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvYWxpeXVuLWhici1kYmFnZW50XG4gKi9cbmV4cG9ydCBjbGFzcyBEYkFnZW50IGV4dGVuZHMgcm9zLlJlc291cmNlIGltcGxlbWVudHMgSURiQWdlbnQge1xuICAgIHByb3RlY3RlZCBzY29wZTogcm9zLkNvbnN0cnVjdDtcbiAgICBwcm90ZWN0ZWQgaWQ6IHN0cmluZztcbiAgICBwdWJsaWMgcmVhZG9ubHkgcHJvcHM6IERiQWdlbnRQcm9wcztcbiAgICBwcm90ZWN0ZWQgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6IGJvb2xlYW47XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgSW5zdGFuY2VJZHM6IFVuaSBiYWNrdXAgYWdlbnQgaW5zdGFuY2UgaWRzXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJJbnN0YW5jZUlkczogcm9zLklSZXNvbHZhYmxlIHwgc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIFRhc2tJZDogVW5pIGJhY2t1cCBhZ2VudCBpbnN0YWxsIHRhc2sgaWQuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJUYXNrSWQ6IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBVbmlCYWNrdXBJbnN0YW5jZURldGFpbHM6IFVuaSBiYWNrdXAgYWdlbnQgaW5zdGFuY2UgaW5mbyBkZXRhaWxzXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJVbmlCYWNrdXBJbnN0YW5jZURldGFpbHM6IHJvcy5JUmVzb2x2YWJsZSB8IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBVbmlCYWNrdXBJbnN0YW5jZXM6IFVuaSBiYWNrdXAgYWdlbnQgaW5zdGFuY2UgaW5mb1xuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyVW5pQmFja3VwSW5zdGFuY2VzOiByb3MuSVJlc29sdmFibGUgfCBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBQYXJhbSBzY29wZSAtIHNjb3BlIGluIHdoaWNoIHRoaXMgcmVzb3VyY2UgaXMgZGVmaW5lZFxuICAgICAqIFBhcmFtIGlkICAgIC0gc2NvcGVkIGlkIG9mIHRoZSByZXNvdXJjZVxuICAgICAqIFBhcmFtIHByb3BzIC0gcmVzb3VyY2UgcHJvcGVydGllc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiByb3MuQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogRGJBZ2VudFByb3BzLCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDpib29sZWFuID0gdHJ1ZSkge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQpO1xuICAgICAgICB0aGlzLnNjb3BlID0gc2NvcGU7XG4gICAgICAgIHRoaXMuaWQgPSBpZDtcbiAgICAgICAgdGhpcy5wcm9wcyA9IHByb3BzO1xuICAgICAgICB0aGlzLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ID0gZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ7XG5cbiAgICAgICAgY29uc3Qgcm9zRGJBZ2VudCA9IG5ldyBSb3NEYkFnZW50KHRoaXMsIGlkLCAge1xuICAgICAgICAgICAgY3Jvc3NBY2NvdW50VXNlcklkOiBwcm9wcy5jcm9zc0FjY291bnRVc2VySWQsXG4gICAgICAgICAgICBjcm9zc0FjY291bnRSb2xlTmFtZTogcHJvcHMuY3Jvc3NBY2NvdW50Um9sZU5hbWUsXG4gICAgICAgICAgICBjcm9zc0FjY291bnRUeXBlOiBwcm9wcy5jcm9zc0FjY291bnRUeXBlLFxuICAgICAgICAgICAgaW5zdGFuY2VJbmZvOiBwcm9wcy5pbnN0YW5jZUluZm8sXG4gICAgICAgIH0sIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ICYmIHRoaXMuc3RhY2suZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQpO1xuICAgICAgICB0aGlzLnJlc291cmNlID0gcm9zRGJBZ2VudDtcbiAgICAgICAgdGhpcy5hdHRySW5zdGFuY2VJZHMgPSByb3NEYkFnZW50LmF0dHJJbnN0YW5jZUlkcztcbiAgICAgICAgdGhpcy5hdHRyVGFza0lkID0gcm9zRGJBZ2VudC5hdHRyVGFza0lkO1xuICAgICAgICB0aGlzLmF0dHJVbmlCYWNrdXBJbnN0YW5jZURldGFpbHMgPSByb3NEYkFnZW50LmF0dHJVbmlCYWNrdXBJbnN0YW5jZURldGFpbHM7XG4gICAgICAgIHRoaXMuYXR0clVuaUJhY2t1cEluc3RhbmNlcyA9IHJvc0RiQWdlbnQuYXR0clVuaUJhY2t1cEluc3RhbmNlcztcbiAgICB9XG59XG4iXX0=