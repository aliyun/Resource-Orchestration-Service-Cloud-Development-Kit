"use strict";
// Generated from the AliCloud ROS Resource Specification
Object.defineProperty(exports, "__esModule", { value: true });
exports.RosDrdsInstances = exports.RosDrdsDBs = exports.RosAccounts = void 0;
const ros = require("@alicloud/ros-cdk-core");
/**
 * Determine whether the given properties match those of a `RosAccountsProps`
 *
 * @param properties - the TypeScript properties of a `RosAccountsProps`
 *
 * @returns the result of the validation.
 */
function RosAccountsPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('instanceId', ros.validateString)(properties.instanceId));
    return errors.wrap('supplied properties not correct for "RosAccountsProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `DATASOURCE::DRDS::Accounts` resource
 *
 * @param properties - the TypeScript properties of a `RosAccountsProps`
 *
 * @returns the AliCloud ROS Resource properties of an `DATASOURCE::DRDS::Accounts` resource.
 */
// @ts-ignore TS6133
function rosAccountsPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosAccountsPropsValidator(properties).assertSuccess();
    }
    return {
        InstanceId: ros.stringToRosTemplate(properties.instanceId),
    };
}
/**
 * A ROS template type:  `DATASOURCE::DRDS::Accounts`
 */
class RosAccounts extends ros.RosResource {
    /**
     * Create a new `DATASOURCE::DRDS::Accounts`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosAccounts.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrAccounts = this.getAtt('Accounts');
        this.attrDrdsAccountNames = this.getAtt('DrdsAccountNames');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.instanceId = props.instanceId;
    }
    get rosProperties() {
        return {
            instanceId: this.instanceId,
        };
    }
    renderProperties(props) {
        return rosAccountsPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosAccounts = RosAccounts;
/**
 * The resource type name for this resource class.
 */
RosAccounts.ROS_RESOURCE_TYPE_NAME = "DATASOURCE::DRDS::Accounts";
/**
 * Determine whether the given properties match those of a `RosDrdsDBsProps`
 *
 * @param properties - the TypeScript properties of a `RosDrdsDBsProps`
 *
 * @returns the result of the validation.
 */
function RosDrdsDBsPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('instanceId', ros.requiredValidator)(properties.instanceId));
    errors.collect(ros.propertyValidator('instanceId', ros.validateString)(properties.instanceId));
    return errors.wrap('supplied properties not correct for "RosDrdsDBsProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `DATASOURCE::DRDS::DrdsDBs` resource
 *
 * @param properties - the TypeScript properties of a `RosDrdsDBsProps`
 *
 * @returns the AliCloud ROS Resource properties of an `DATASOURCE::DRDS::DrdsDBs` resource.
 */
// @ts-ignore TS6133
function rosDrdsDBsPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosDrdsDBsPropsValidator(properties).assertSuccess();
    }
    return {
        InstanceId: ros.stringToRosTemplate(properties.instanceId),
    };
}
/**
 * A ROS template type:  `DATASOURCE::DRDS::DrdsDBs`
 */
class RosDrdsDBs extends ros.RosResource {
    /**
     * Create a new `DATASOURCE::DRDS::DrdsDBs`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosDrdsDBs.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrDatabases = this.getAtt('Databases');
        this.attrDrdsDatabaseNames = this.getAtt('DrdsDatabaseNames');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.instanceId = props.instanceId;
    }
    get rosProperties() {
        return {
            instanceId: this.instanceId,
        };
    }
    renderProperties(props) {
        return rosDrdsDBsPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosDrdsDBs = RosDrdsDBs;
/**
 * The resource type name for this resource class.
 */
RosDrdsDBs.ROS_RESOURCE_TYPE_NAME = "DATASOURCE::DRDS::DrdsDBs";
/**
 * Determine whether the given properties match those of a `RosDrdsInstancesProps`
 *
 * @param properties - the TypeScript properties of a `RosDrdsInstancesProps`
 *
 * @returns the result of the validation.
 */
function RosDrdsInstancesPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    if (properties.type && (typeof properties.type) !== 'object') {
        errors.collect(ros.propertyValidator('type', ros.validateAllowedValues)({
            data: properties.type,
            allowedValues: ["0", "1"],
        }));
    }
    errors.collect(ros.propertyValidator('type', ros.validateString)(properties.type));
    errors.collect(ros.propertyValidator('description', ros.validateString)(properties.description));
    errors.collect(ros.propertyValidator('resourceGroupId', ros.validateString)(properties.resourceGroupId));
    return errors.wrap('supplied properties not correct for "RosDrdsInstancesProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `DATASOURCE::DRDS::DrdsInstances` resource
 *
 * @param properties - the TypeScript properties of a `RosDrdsInstancesProps`
 *
 * @returns the AliCloud ROS Resource properties of an `DATASOURCE::DRDS::DrdsInstances` resource.
 */
// @ts-ignore TS6133
function rosDrdsInstancesPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosDrdsInstancesPropsValidator(properties).assertSuccess();
    }
    return {
        Description: ros.stringToRosTemplate(properties.description),
        ResourceGroupId: ros.stringToRosTemplate(properties.resourceGroupId),
        Type: ros.stringToRosTemplate(properties.type),
    };
}
/**
 * A ROS template type:  `DATASOURCE::DRDS::DrdsInstances`
 */
class RosDrdsInstances extends ros.RosResource {
    /**
     * Create a new `DATASOURCE::DRDS::DrdsInstances`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosDrdsInstances.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrInstanceIds = this.getAtt('InstanceIds');
        this.attrInstances = this.getAtt('Instances');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.description = props.description;
        this.resourceGroupId = props.resourceGroupId;
        this.type = props.type;
    }
    get rosProperties() {
        return {
            description: this.description,
            resourceGroupId: this.resourceGroupId,
            type: this.type,
        };
    }
    renderProperties(props) {
        return rosDrdsInstancesPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosDrdsInstances = RosDrdsInstances;
/**
 * The resource type name for this resource class.
 */
RosDrdsInstances.ROS_RESOURCE_TYPE_NAME = "DATASOURCE::DRDS::DrdsInstances";
//# sourceMappingURL=data:application/json;base64,