"use strict";
// Generated from the AliCloud ROS Resource Specification
Object.defineProperty(exports, "__esModule", { value: true });
exports.RosVaults = exports.RosVault = void 0;
const ros = require("@alicloud/ros-cdk-core");
/**
 * Determine whether the given properties match those of a `RosVaultProps`
 *
 * @param properties - the TypeScript properties of a `RosVaultProps`
 *
 * @returns the result of the validation.
 */
function RosVaultPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('vaultId', ros.requiredValidator)(properties.vaultId));
    errors.collect(ros.propertyValidator('vaultId', ros.validateString)(properties.vaultId));
    if (properties.refreshOptions && (typeof properties.refreshOptions) !== 'object') {
        errors.collect(ros.propertyValidator('refreshOptions', ros.validateAllowedValues)({
            data: properties.refreshOptions,
            allowedValues: ["Always", "Never"],
        }));
    }
    errors.collect(ros.propertyValidator('refreshOptions', ros.validateString)(properties.refreshOptions));
    return errors.wrap('supplied properties not correct for "RosVaultProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `DATASOURCE::HBR::Vault` resource
 *
 * @param properties - the TypeScript properties of a `RosVaultProps`
 *
 * @returns the AliCloud ROS Resource properties of an `DATASOURCE::HBR::Vault` resource.
 */
// @ts-ignore TS6133
function rosVaultPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosVaultPropsValidator(properties).assertSuccess();
    }
    return {
        'VaultId': ros.stringToRosTemplate(properties.vaultId),
        'RefreshOptions': ros.stringToRosTemplate(properties.refreshOptions),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `DATASOURCE::HBR::Vault`.
 * @Note This class does not contain additional functions, so it is recommended to use the `Vault` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/datasource-hbr-vault
 */
class RosVault extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosVault.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrBackupPlanStatistics = this.getAtt('BackupPlanStatistics');
        this.attrBytesDone = this.getAtt('BytesDone');
        this.attrCreateTime = this.getAtt('CreateTime');
        this.attrDedup = this.getAtt('Dedup');
        this.attrDescription = this.getAtt('Description');
        this.attrIndexAvailable = this.getAtt('IndexAvailable');
        this.attrIndexLevel = this.getAtt('IndexLevel');
        this.attrIndexUpdateTime = this.getAtt('IndexUpdateTime');
        this.attrLatestReplicationTime = this.getAtt('LatestReplicationTime');
        this.attrPaymentType = this.getAtt('PaymentType');
        this.attrRedundancyType = this.getAtt('RedundancyType');
        this.attrReplication = this.getAtt('Replication');
        this.attrReplicationProgress = this.getAtt('ReplicationProgress');
        this.attrReplicationSourceRegionId = this.getAtt('ReplicationSourceRegionId');
        this.attrReplicationSourceVaultId = this.getAtt('ReplicationSourceVaultId');
        this.attrResourceGroupId = this.getAtt('ResourceGroupId');
        this.attrRetention = this.getAtt('Retention');
        this.attrSearchEnabled = this.getAtt('SearchEnabled');
        this.attrSourceTypes = this.getAtt('SourceTypes');
        this.attrStorageSize = this.getAtt('StorageSize');
        this.attrTags = this.getAtt('Tags');
        this.attrTrialInfo = this.getAtt('TrialInfo');
        this.attrUpdatedTime = this.getAtt('UpdatedTime');
        this.attrVaultId = this.getAtt('VaultId');
        this.attrVaultName = this.getAtt('VaultName');
        this.attrVaultStatusMessage = this.getAtt('VaultStatusMessage');
        this.attrVaultStorageClass = this.getAtt('VaultStorageClass');
        this.attrVaultType = this.getAtt('VaultType');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.vaultId = props.vaultId;
        this.refreshOptions = props.refreshOptions;
    }
    get rosProperties() {
        return {
            vaultId: this.vaultId,
            refreshOptions: this.refreshOptions,
        };
    }
    renderProperties(props) {
        return rosVaultPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosVault = RosVault;
/**
 * The resource type name for this resource class.
 */
RosVault.ROS_RESOURCE_TYPE_NAME = "DATASOURCE::HBR::Vault";
/**
 * Determine whether the given properties match those of a `RosVaultsProps`
 *
 * @param properties - the TypeScript properties of a `RosVaultsProps`
 *
 * @returns the result of the validation.
 */
function RosVaultsPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('vaultType', ros.validateString)(properties.vaultType));
    errors.collect(ros.propertyValidator('vaultId', ros.validateString)(properties.vaultId));
    if (properties.refreshOptions && (typeof properties.refreshOptions) !== 'object') {
        errors.collect(ros.propertyValidator('refreshOptions', ros.validateAllowedValues)({
            data: properties.refreshOptions,
            allowedValues: ["Always", "Never"],
        }));
    }
    errors.collect(ros.propertyValidator('refreshOptions', ros.validateString)(properties.refreshOptions));
    return errors.wrap('supplied properties not correct for "RosVaultsProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `DATASOURCE::HBR::Vaults` resource
 *
 * @param properties - the TypeScript properties of a `RosVaultsProps`
 *
 * @returns the AliCloud ROS Resource properties of an `DATASOURCE::HBR::Vaults` resource.
 */
// @ts-ignore TS6133
function rosVaultsPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosVaultsPropsValidator(properties).assertSuccess();
    }
    return {
        'RefreshOptions': ros.stringToRosTemplate(properties.refreshOptions),
        'VaultId': ros.stringToRosTemplate(properties.vaultId),
        'VaultType': ros.stringToRosTemplate(properties.vaultType),
    };
}
/**
 * This class is a base encapsulation around the ROS resource type `DATASOURCE::HBR::Vaults`, which is used to query the basic information about backup vaults.
 * @Note This class does not contain additional functions, so it is recommended to use the `Vaults` class instead of this class for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/datasource-hbr-vaults
 */
class RosVaults extends ros.RosResource {
    /**
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosVaults.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrVaultIds = this.getAtt('VaultIds');
        this.attrVaults = this.getAtt('Vaults');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.refreshOptions = props.refreshOptions;
        this.vaultId = props.vaultId;
        this.vaultType = props.vaultType;
    }
    get rosProperties() {
        return {
            refreshOptions: this.refreshOptions,
            vaultId: this.vaultId,
            vaultType: this.vaultType,
        };
    }
    renderProperties(props) {
        return rosVaultsPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosVaults = RosVaults;
/**
 * The resource type name for this resource class.
 */
RosVaults.ROS_RESOURCE_TYPE_NAME = "DATASOURCE::HBR::Vaults";
//# sourceMappingURL=data:application/json;base64,