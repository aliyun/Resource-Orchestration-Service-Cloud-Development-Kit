"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CompliancePack = exports.CompliancePackProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const config_generated_1 = require("./config.generated");
Object.defineProperty(exports, "CompliancePackProperty", { enumerable: true, get: function () { return config_generated_1.RosCompliancePack; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::Config::CompliancePack`, which is used to create a compliance package.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosCompliancePack`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-config-compliancepack
 */
class CompliancePack extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosCompliancePack = new config_generated_1.RosCompliancePack(this, id, {
            configRuleIds: props.configRuleIds,
            description: props.description,
            compliancePackName: props.compliancePackName,
            configRules: props.configRules,
            compliancePackTemplateId: props.compliancePackTemplateId,
            riskLevel: props.riskLevel,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosCompliancePack;
        this.attrAccountId = rosCompliancePack.attrAccountId;
        this.attrCompliancePackId = rosCompliancePack.attrCompliancePackId;
        this.attrCompliancePackName = rosCompliancePack.attrCompliancePackName;
        this.attrCompliancePackTemplateId = rosCompliancePack.attrCompliancePackTemplateId;
        this.attrDescription = rosCompliancePack.attrDescription;
        this.attrRiskLevel = rosCompliancePack.attrRiskLevel;
    }
}
exports.CompliancePack = CompliancePack;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcGxpYW5jZXBhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjb21wbGlhbmNlcGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw4Q0FBOEM7QUFDOUMseURBQXVEO0FBRXpCLHVHQUZyQixvQ0FBaUIsT0FFMEI7QUF1Q3BEOzs7O0dBSUc7QUFDSCxNQUFhLGNBQWUsU0FBUSxHQUFHLENBQUMsUUFBUTtJQW9DNUM7Ozs7T0FJRztJQUNILFlBQVksS0FBb0IsRUFBRSxFQUFVLEVBQUUsS0FBMEIsRUFBRSxtQ0FBMkMsSUFBSTtRQUNySCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ2pCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQ2IsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLGdDQUFnQyxHQUFHLGdDQUFnQyxDQUFDO1FBRXpFLE1BQU0saUJBQWlCLEdBQUcsSUFBSSxvQ0FBaUIsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFHO1lBQ3ZELGFBQWEsRUFBRSxLQUFLLENBQUMsYUFBYTtZQUNsQyxXQUFXLEVBQUUsS0FBSyxDQUFDLFdBQVc7WUFDOUIsa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGtCQUFrQjtZQUM1QyxXQUFXLEVBQUUsS0FBSyxDQUFDLFdBQVc7WUFDOUIsd0JBQXdCLEVBQUUsS0FBSyxDQUFDLHdCQUF3QjtZQUN4RCxTQUFTLEVBQUUsS0FBSyxDQUFDLFNBQVM7U0FDN0IsRUFBRSxnQ0FBZ0MsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7UUFDcEYsSUFBSSxDQUFDLFFBQVEsR0FBRyxpQkFBaUIsQ0FBQztRQUNsQyxJQUFJLENBQUMsYUFBYSxHQUFHLGlCQUFpQixDQUFDLGFBQWEsQ0FBQztRQUNyRCxJQUFJLENBQUMsb0JBQW9CLEdBQUcsaUJBQWlCLENBQUMsb0JBQW9CLENBQUM7UUFDbkUsSUFBSSxDQUFDLHNCQUFzQixHQUFHLGlCQUFpQixDQUFDLHNCQUFzQixDQUFDO1FBQ3ZFLElBQUksQ0FBQyw0QkFBNEIsR0FBRyxpQkFBaUIsQ0FBQyw0QkFBNEIsQ0FBQztRQUNuRixJQUFJLENBQUMsZUFBZSxHQUFHLGlCQUFpQixDQUFDLGVBQWUsQ0FBQztRQUN6RCxJQUFJLENBQUMsYUFBYSxHQUFHLGlCQUFpQixDQUFDLGFBQWEsQ0FBQztJQUN6RCxDQUFDO0NBQ0o7QUFoRUQsd0NBZ0VDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcm9zIGZyb20gJ0BhbGljbG91ZC9yb3MtY2RrLWNvcmUnO1xuaW1wb3J0IHsgUm9zQ29tcGxpYW5jZVBhY2sgfSBmcm9tICcuL2NvbmZpZy5nZW5lcmF0ZWQnO1xuLy8gR2VuZXJhdGVkIGZyb20gdGhlIEFsaUNsb3VkIFJPUyBSZXNvdXJjZSBTcGVjaWZpY2F0aW9uXG5leHBvcnQgeyBSb3NDb21wbGlhbmNlUGFjayBhcyBDb21wbGlhbmNlUGFja1Byb3BlcnR5IH07XG5cbi8qKlxuICogUHJvcGVydGllcyBmb3IgZGVmaW5pbmcgYSBgQ29tcGxpYW5jZVBhY2tgLlxuICogU2VlIGh0dHBzOi8vd3d3LmFsaWJhYmFjbG91ZC5jb20vaGVscC9yb3MvZGV2ZWxvcGVyLXJlZmVyZW5jZS9hbGl5dW4tY29uZmlnLWNvbXBsaWFuY2VwYWNrXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQ29tcGxpYW5jZVBhY2tQcm9wcyB7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBjb21wbGlhbmNlUGFja05hbWU6IENvbXBsaWFuY2UgUGFja2FnZSBOYW1lXG4gICAgICovXG4gICAgcmVhZG9ubHkgY29tcGxpYW5jZVBhY2tOYW1lOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBjb25maWdSdWxlczpcbiAgICAgKi9cbiAgICByZWFkb25seSBjb25maWdSdWxlczogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgcmlza0xldmVsOiBSaXMgTGV2ZWwsIHZhbGlkIHZhbHVlczogMSB8IDIgfCAzXG4gICAgICovXG4gICAgcmVhZG9ubHkgcmlza0xldmVsOiBudW1iZXIgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBjb21wbGlhbmNlUGFja1RlbXBsYXRlSWQ6IENvbXBsaWFuY2UgUGFja2FnZSBUZW1wbGF0ZSBJZFxuICAgICAqL1xuICAgIHJlYWRvbmx5IGNvbXBsaWFuY2VQYWNrVGVtcGxhdGVJZD86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGNvbmZpZ1J1bGVJZHM6IENvbXBsaWFuY2UgUGFja2FnZSBydWxlIElEIGxpc3RcbiAgICAgKi9cbiAgICByZWFkb25seSBjb25maWdSdWxlSWRzPzogQXJyYXk8Um9zQ29tcGxpYW5jZVBhY2suQ29uZmlnUnVsZUlkc1Byb3BlcnR5IHwgcm9zLklSZXNvbHZhYmxlPiB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGRlc2NyaXB0aW9uOiBEZXNjcmlwdGlvblxuICAgICAqL1xuICAgIHJlYWRvbmx5IGRlc2NyaXB0aW9uPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xufVxuXG4vKipcbiAqIFRoaXMgY2xhc3MgZW5jYXBzdWxhdGVzIGFuZCBleHRlbmRzIHRoZSBST1MgcmVzb3VyY2UgdHlwZSBgQUxJWVVOOjpDb25maWc6OkNvbXBsaWFuY2VQYWNrYCwgd2hpY2ggaXMgdXNlZCB0byBjcmVhdGUgYSBjb21wbGlhbmNlIHBhY2thZ2UuXG4gKiBATm90ZSBUaGlzIGNsYXNzIG1heSBoYXZlIHNvbWUgbmV3IGZ1bmN0aW9ucyB0byBmYWNpbGl0YXRlIGRldmVsb3BtZW50LCBzbyBpdCBpcyByZWNvbW1lbmRlZCB0byB1c2UgdGhpcyBjbGFzcyBpbnN0ZWFkIG9mIGBSb3NDb21wbGlhbmNlUGFja2Bmb3IgYSBtb3JlIGNvbnZlbmllbnQgZGV2ZWxvcG1lbnQgZXhwZXJpZW5jZS5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvYWxpeXVuLWNvbmZpZy1jb21wbGlhbmNlcGFja1xuICovXG5leHBvcnQgY2xhc3MgQ29tcGxpYW5jZVBhY2sgZXh0ZW5kcyByb3MuUmVzb3VyY2Uge1xuICAgIHByb3RlY3RlZCBzY29wZTogcm9zLkNvbnN0cnVjdDtcbiAgICBwcm90ZWN0ZWQgaWQ6IHN0cmluZztcbiAgICBwcm90ZWN0ZWQgcHJvcHM6IENvbXBsaWFuY2VQYWNrUHJvcHM7XG4gICAgcHJvdGVjdGVkIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OiBib29sZWFuO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIEFjY291bnRJZDogQWxpeXVuIFVzZXIgSWRcbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckFjY291bnRJZDogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIENvbXBsaWFuY2VQYWNrSWQ6IENvbXBsaWFuY2UgUGFja2FnZSBJRFxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyQ29tcGxpYW5jZVBhY2tJZDogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIENvbXBsaWFuY2VQYWNrTmFtZTogQ29tcGxpYW5jZSBQYWNrYWdlIE5hbWVcbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckNvbXBsaWFuY2VQYWNrTmFtZTogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIENvbXBsaWFuY2VQYWNrVGVtcGxhdGVJZDogQ29tcGxpYW5jZSBQYWNrYWdlIFRlbXBsYXRlIElkXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJDb21wbGlhbmNlUGFja1RlbXBsYXRlSWQ6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBEZXNjcmlwdGlvbjogRGVzY3JpcHRpb25cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckRlc2NyaXB0aW9uOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgUmlza0xldmVsOiBSaXMgTGV2ZWwsIHZhbGlkIHZhbHVlczogMSB8IDIgfCAzXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJSaXNrTGV2ZWw6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFBhcmFtIHNjb3BlIC0gc2NvcGUgaW4gd2hpY2ggdGhpcyByZXNvdXJjZSBpcyBkZWZpbmVkXG4gICAgICogUGFyYW0gaWQgICAgLSBzY29wZWQgaWQgb2YgdGhlIHJlc291cmNlXG4gICAgICogUGFyYW0gcHJvcHMgLSByZXNvdXJjZSBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IHJvcy5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBDb21wbGlhbmNlUGFja1Byb3BzLCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDpib29sZWFuID0gdHJ1ZSkge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQpO1xuICAgICAgICB0aGlzLnNjb3BlID0gc2NvcGU7XG4gICAgICAgIHRoaXMuaWQgPSBpZDtcbiAgICAgICAgdGhpcy5wcm9wcyA9IHByb3BzO1xuICAgICAgICB0aGlzLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ID0gZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ7XG5cbiAgICAgICAgY29uc3Qgcm9zQ29tcGxpYW5jZVBhY2sgPSBuZXcgUm9zQ29tcGxpYW5jZVBhY2sodGhpcywgaWQsICB7XG4gICAgICAgICAgICBjb25maWdSdWxlSWRzOiBwcm9wcy5jb25maWdSdWxlSWRzLFxuICAgICAgICAgICAgZGVzY3JpcHRpb246IHByb3BzLmRlc2NyaXB0aW9uLFxuICAgICAgICAgICAgY29tcGxpYW5jZVBhY2tOYW1lOiBwcm9wcy5jb21wbGlhbmNlUGFja05hbWUsXG4gICAgICAgICAgICBjb25maWdSdWxlczogcHJvcHMuY29uZmlnUnVsZXMsXG4gICAgICAgICAgICBjb21wbGlhbmNlUGFja1RlbXBsYXRlSWQ6IHByb3BzLmNvbXBsaWFuY2VQYWNrVGVtcGxhdGVJZCxcbiAgICAgICAgICAgIHJpc2tMZXZlbDogcHJvcHMucmlza0xldmVsLFxuICAgICAgICB9LCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCAmJiB0aGlzLnN0YWNrLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50KTtcbiAgICAgICAgdGhpcy5yZXNvdXJjZSA9IHJvc0NvbXBsaWFuY2VQYWNrO1xuICAgICAgICB0aGlzLmF0dHJBY2NvdW50SWQgPSByb3NDb21wbGlhbmNlUGFjay5hdHRyQWNjb3VudElkO1xuICAgICAgICB0aGlzLmF0dHJDb21wbGlhbmNlUGFja0lkID0gcm9zQ29tcGxpYW5jZVBhY2suYXR0ckNvbXBsaWFuY2VQYWNrSWQ7XG4gICAgICAgIHRoaXMuYXR0ckNvbXBsaWFuY2VQYWNrTmFtZSA9IHJvc0NvbXBsaWFuY2VQYWNrLmF0dHJDb21wbGlhbmNlUGFja05hbWU7XG4gICAgICAgIHRoaXMuYXR0ckNvbXBsaWFuY2VQYWNrVGVtcGxhdGVJZCA9IHJvc0NvbXBsaWFuY2VQYWNrLmF0dHJDb21wbGlhbmNlUGFja1RlbXBsYXRlSWQ7XG4gICAgICAgIHRoaXMuYXR0ckRlc2NyaXB0aW9uID0gcm9zQ29tcGxpYW5jZVBhY2suYXR0ckRlc2NyaXB0aW9uO1xuICAgICAgICB0aGlzLmF0dHJSaXNrTGV2ZWwgPSByb3NDb21wbGlhbmNlUGFjay5hdHRyUmlza0xldmVsO1xuICAgIH1cbn1cbiJdfQ==