"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Rule = exports.RuleProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const config_generated_1 = require("./config.generated");
Object.defineProperty(exports, "RuleProperty", { enumerable: true, get: function () { return config_generated_1.RosRule; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::Config::Rule`, which is used to create or modify a rule.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosRule`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-config-rule
 */
class Rule extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosRule = new config_generated_1.RosRule(this, id, {
            tagKeyScope: props.tagKeyScope,
            tagValueScope: props.tagValueScope,
            description: props.description,
            excludeResourceIdsScope: props.excludeResourceIdsScope,
            tagKeyLogicScope: props.tagKeyLogicScope,
            sourceOwner: props.sourceOwner,
            sourceIdentifier: props.sourceIdentifier,
            maximumExecutionFrequency: props.maximumExecutionFrequency,
            regionIdsScope: props.regionIdsScope,
            configRuleTriggerTypes: props.configRuleTriggerTypes,
            resourceGroupIdsScope: props.resourceGroupIdsScope,
            riskLevel: props.riskLevel,
            resourceTypesScope: props.resourceTypesScope,
            ruleName: props.ruleName,
            inputParameters: props.inputParameters,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosRule;
        this.attrConfigRuleArn = rosRule.attrConfigRuleArn;
        this.attrConfigRuleId = rosRule.attrConfigRuleId;
        this.attrConfigRuleTriggerTypes = rosRule.attrConfigRuleTriggerTypes;
        this.attrDescription = rosRule.attrDescription;
        this.attrEventSource = rosRule.attrEventSource;
        this.attrExcludeResourceIdsScope = rosRule.attrExcludeResourceIdsScope;
        this.attrInputParameters = rosRule.attrInputParameters;
        this.attrMaximumExecutionFrequency = rosRule.attrMaximumExecutionFrequency;
        this.attrRegionIdsScope = rosRule.attrRegionIdsScope;
        this.attrResourceGroupIdsScope = rosRule.attrResourceGroupIdsScope;
        this.attrResourceTypesScope = rosRule.attrResourceTypesScope;
        this.attrRiskLevel = rosRule.attrRiskLevel;
        this.attrRuleName = rosRule.attrRuleName;
        this.attrSourceIdentifier = rosRule.attrSourceIdentifier;
        this.attrSourceOwner = rosRule.attrSourceOwner;
        this.attrTagKeyScope = rosRule.attrTagKeyScope;
        this.attrTagValueScope = rosRule.attrTagValueScope;
    }
}
exports.Rule = Rule;
//# sourceMappingURL=data:application/json;base64,