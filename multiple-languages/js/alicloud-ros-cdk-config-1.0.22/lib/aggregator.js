"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Aggregator = exports.AggregatorProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const config_generated_1 = require("./config.generated");
Object.defineProperty(exports, "AggregatorProperty", { enumerable: true, get: function () { return config_generated_1.RosAggregator; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::Config::Aggregator`.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosAggregator`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-config-aggregator
 */
class Aggregator extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosAggregator = new config_generated_1.RosAggregator(this, id, {
            aggregatorName: props.aggregatorName,
            description: props.description,
            aggregatorAccounts: props.aggregatorAccounts,
            aggregatorType: props.aggregatorType,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosAggregator;
        this.attrAggregatorId = rosAggregator.attrAggregatorId;
    }
}
exports.Aggregator = Aggregator;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWdncmVnYXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImFnZ3JlZ2F0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsOENBQThDO0FBQzlDLHlEQUFtRDtBQUV6QixtR0FGakIsZ0NBQWEsT0FFc0I7QUE4QjVDOzs7O0dBSUc7QUFDSCxNQUFhLFVBQVcsU0FBUSxHQUFHLENBQUMsUUFBUTtJQU94Qzs7OztPQUlHO0lBQ0gsWUFBWSxLQUFvQixFQUFFLEVBQVUsRUFBRSxLQUFzQixFQUFFLG1DQUEyQyxJQUFJO1FBQ2pILEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFakIsTUFBTSxhQUFhLEdBQUcsSUFBSSxnQ0FBYSxDQUFDLElBQUksRUFBRSxFQUFFLEVBQUc7WUFDL0MsY0FBYyxFQUFFLEtBQUssQ0FBQyxjQUFjO1lBQ3BDLFdBQVcsRUFBRSxLQUFLLENBQUMsV0FBVztZQUM5QixrQkFBa0IsRUFBRSxLQUFLLENBQUMsa0JBQWtCO1lBQzVDLGNBQWMsRUFBRSxLQUFLLENBQUMsY0FBYztTQUN2QyxFQUFFLGdDQUFnQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztRQUNwRixJQUFJLENBQUMsUUFBUSxHQUFHLGFBQWEsQ0FBQztRQUM5QixJQUFJLENBQUMsZ0JBQWdCLEdBQUcsYUFBYSxDQUFDLGdCQUFnQixDQUFDO0lBQzNELENBQUM7Q0FDSjtBQXhCRCxnQ0F3QkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyByb3MgZnJvbSAnQGFsaWNsb3VkL3Jvcy1jZGstY29yZSc7XG5pbXBvcnQgeyBSb3NBZ2dyZWdhdG9yIH0gZnJvbSAnLi9jb25maWcuZ2VuZXJhdGVkJztcbi8vIEdlbmVyYXRlZCBmcm9tIHRoZSBBbGlDbG91ZCBST1MgUmVzb3VyY2UgU3BlY2lmaWNhdGlvblxuZXhwb3J0IHsgUm9zQWdncmVnYXRvciBhcyBBZ2dyZWdhdG9yUHJvcGVydHkgfTtcblxuLyoqXG4gKiBQcm9wZXJ0aWVzIGZvciBkZWZpbmluZyBhIGBBZ2dyZWdhdG9yYC5cbiAqIFNlZSBodHRwczovL3d3dy5hbGliYWJhY2xvdWQuY29tL2hlbHAvcm9zL2RldmVsb3Blci1yZWZlcmVuY2UvYWxpeXVuLWNvbmZpZy1hZ2dyZWdhdG9yXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQWdncmVnYXRvclByb3BzIHtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGFnZ3JlZ2F0b3JOYW1lOiBUaGUgbmFtZSBvZiBhZ2dyZWdhdG9yLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGFnZ3JlZ2F0b3JOYW1lOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBkZXNjcmlwdGlvbjogVGhlIGRlc2NyaXB0aW9uIG9mIGFnZ3JlZ2F0b3IuXG4gICAgICovXG4gICAgcmVhZG9ubHkgZGVzY3JpcHRpb246IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGFnZ3JlZ2F0b3JBY2NvdW50czogVGhlIG1lbWJlciBhY2NvdW50IGluIGFnZ3JlZ2F0b3IuV2hlbiB0aGUgQWdncmVnYXRvclR5cGUgaXMgUkQsIHRoaXMgcGFyYW1ldGVyIGNhbiBiZSBlbXB0eSwgd2hpY2ggbWVhbnMgdGhhdCBhbGwgYWNjb3VudHMgaW4gdGhlIHJlc291cmNlIGRpcmVjdG9yeSB3aWxsIGJlIGFkZGVkIHRvIHRoZSBnbG9iYWwgYWNjb3VudCBncm91cC5cbiAgICAgKi9cbiAgICByZWFkb25seSBhZ2dyZWdhdG9yQWNjb3VudHM/OiBBcnJheTxSb3NBZ2dyZWdhdG9yLkFnZ3JlZ2F0b3JBY2NvdW50c1Byb3BlcnR5IHwgcm9zLklSZXNvbHZhYmxlPiB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGFnZ3JlZ2F0b3JUeXBlOiBBY2NvdW50IGdyb3VwIHR5cGUuIFZhbHVlOlxuICAgICAqIFJEOiBHbG9iYWwgYWNjb3VudCBncm91cC5DVVNUT006IEN1c3RvbSBhY2NvdW50IGdyb3VwIChkZWZhdWx0IHZhbHVlKS5cbiAgICAgKi9cbiAgICByZWFkb25seSBhZ2dyZWdhdG9yVHlwZT86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcbn1cblxuLyoqXG4gKiBUaGlzIGNsYXNzIGVuY2Fwc3VsYXRlcyBhbmQgZXh0ZW5kcyB0aGUgUk9TIHJlc291cmNlIHR5cGUgYEFMSVlVTjo6Q29uZmlnOjpBZ2dyZWdhdG9yYC5cbiAqIEBOb3RlIFRoaXMgY2xhc3MgbWF5IGhhdmUgc29tZSBuZXcgZnVuY3Rpb25zIHRvIGZhY2lsaXRhdGUgZGV2ZWxvcG1lbnQsIHNvIGl0IGlzIHJlY29tbWVuZGVkIHRvIHVzZSB0aGlzIGNsYXNzIGluc3RlYWQgb2YgYFJvc0FnZ3JlZ2F0b3JgZm9yIGEgbW9yZSBjb252ZW5pZW50IGRldmVsb3BtZW50IGV4cGVyaWVuY2UuXG4gKiBTZWUgaHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3Jvcy9kZXZlbG9wZXItcmVmZXJlbmNlL2FsaXl1bi1jb25maWctYWdncmVnYXRvclxuICovXG5leHBvcnQgY2xhc3MgQWdncmVnYXRvciBleHRlbmRzIHJvcy5SZXNvdXJjZSB7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgQWdncmVnYXRvcklkOiBUaGUgSUQgb2YgdGhlIGFnZ3JlZ2F0b3IuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJBZ2dyZWdhdG9ySWQ6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFBhcmFtIHNjb3BlIC0gc2NvcGUgaW4gd2hpY2ggdGhpcyByZXNvdXJjZSBpcyBkZWZpbmVkXG4gICAgICogUGFyYW0gaWQgICAgLSBzY29wZWQgaWQgb2YgdGhlIHJlc291cmNlXG4gICAgICogUGFyYW0gcHJvcHMgLSByZXNvdXJjZSBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IHJvcy5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBBZ2dyZWdhdG9yUHJvcHMsIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OmJvb2xlYW4gPSB0cnVlKSB7XG4gICAgICAgIHN1cGVyKHNjb3BlLCBpZCk7XG5cbiAgICAgICAgY29uc3Qgcm9zQWdncmVnYXRvciA9IG5ldyBSb3NBZ2dyZWdhdG9yKHRoaXMsIGlkLCAge1xuICAgICAgICAgICAgYWdncmVnYXRvck5hbWU6IHByb3BzLmFnZ3JlZ2F0b3JOYW1lLFxuICAgICAgICAgICAgZGVzY3JpcHRpb246IHByb3BzLmRlc2NyaXB0aW9uLFxuICAgICAgICAgICAgYWdncmVnYXRvckFjY291bnRzOiBwcm9wcy5hZ2dyZWdhdG9yQWNjb3VudHMsXG4gICAgICAgICAgICBhZ2dyZWdhdG9yVHlwZTogcHJvcHMuYWdncmVnYXRvclR5cGUsXG4gICAgICAgIH0sIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ICYmIHRoaXMuc3RhY2suZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQpO1xuICAgICAgICB0aGlzLnJlc291cmNlID0gcm9zQWdncmVnYXRvcjtcbiAgICAgICAgdGhpcy5hdHRyQWdncmVnYXRvcklkID0gcm9zQWdncmVnYXRvci5hdHRyQWdncmVnYXRvcklkO1xuICAgIH1cbn1cbiJdfQ==