"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DiskReplicaPair = exports.DiskReplicaPairProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ebs_generated_1 = require("./ebs.generated");
Object.defineProperty(exports, "DiskReplicaPairProperty", { enumerable: true, get: function () { return ebs_generated_1.RosDiskReplicaPair; } });
/**
 * A ROS resource type:  `ALIYUN::EBS::DiskReplicaPair`
 */
class DiskReplicaPair extends ros.Resource {
    /**
     * Create a new `ALIYUN::EBS::DiskReplicaPair`.
     *
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosDiskReplicaPair = new ebs_generated_1.RosDiskReplicaPair(this, id, {
            diskReplicaPairName: props.diskReplicaPairName,
            description: props.description,
            destinationDiskId: props.destinationDiskId,
            resourceGroupId: props.resourceGroupId,
            period: props.period,
            rpo: props.rpo,
            destinationRegionId: props.destinationRegionId,
            bandwidth: props.bandwidth,
            destinationZoneId: props.destinationZoneId,
            paymentType: props.paymentType,
            sourceZoneId: props.sourceZoneId,
            tags: props.tags,
            periodUnit: props.periodUnit,
            diskId: props.diskId,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosDiskReplicaPair;
        this.attrBandwidth = rosDiskReplicaPair.attrBandwidth;
        this.attrCreateTime = rosDiskReplicaPair.attrCreateTime;
        this.attrDescription = rosDiskReplicaPair.attrDescription;
        this.attrDestinationDiskId = rosDiskReplicaPair.attrDestinationDiskId;
        this.attrDestinationRegionId = rosDiskReplicaPair.attrDestinationRegionId;
        this.attrDestinationZoneId = rosDiskReplicaPair.attrDestinationZoneId;
        this.attrDiskId = rosDiskReplicaPair.attrDiskId;
        this.attrDiskReplicaPairName = rosDiskReplicaPair.attrDiskReplicaPairName;
        this.attrPaymentType = rosDiskReplicaPair.attrPaymentType;
        this.attrRpo = rosDiskReplicaPair.attrRpo;
        this.attrReplicaPairId = rosDiskReplicaPair.attrReplicaPairId;
        this.attrResourceGroupId = rosDiskReplicaPair.attrResourceGroupId;
        this.attrSourceZoneId = rosDiskReplicaPair.attrSourceZoneId;
        this.attrTags = rosDiskReplicaPair.attrTags;
    }
}
exports.DiskReplicaPair = DiskReplicaPair;
//# sourceMappingURL=data:application/json;base64,