"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ScalingGroupEnable = exports.ScalingGroupEnableProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ess_generated_1 = require("./ess.generated");
Object.defineProperty(exports, "ScalingGroupEnableProperty", { enumerable: true, get: function () { return ess_generated_1.RosScalingGroupEnable; } });
/**
 * This class encapsulates and extends the ROS resource type `ALIYUN::ESS::ScalingGroupEnable`, which is used to enable a scaling group.
 * @Note This class may have some new functions to facilitate development, so it is recommended to use this class instead of `RosScalingGroupEnable`for a more convenient development experience.
 * See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-ess-scalinggroupenable
 */
class ScalingGroupEnable extends ros.Resource {
    /**
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        const rosScalingGroupEnable = new ess_generated_1.RosScalingGroupEnable(this, id, {
            attachOptions: props.attachOptions,
            detachOptions: props.detachOptions,
            scalingRuleArisExecuteVersion: props.scalingRuleArisExecuteVersion,
            scalingGroupId: props.scalingGroupId,
            scalingRuleAris: props.scalingRuleAris,
            removeInstanceIds: props.removeInstanceIds,
            scalingConfigurationId: props.scalingConfigurationId,
            instanceIds: props.instanceIds,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosScalingGroupEnable;
        this.attrLifecycleState = rosScalingGroupEnable.attrLifecycleState;
        this.attrScalingGroupId = rosScalingGroupEnable.attrScalingGroupId;
        this.attrScalingInstanceDetails = rosScalingGroupEnable.attrScalingInstanceDetails;
        this.attrScalingInstances = rosScalingGroupEnable.attrScalingInstances;
        this.attrScalingRuleArisExecuteErrorInfo = rosScalingGroupEnable.attrScalingRuleArisExecuteErrorInfo;
        this.attrScalingRuleArisExecuteResultInstancesAdded = rosScalingGroupEnable.attrScalingRuleArisExecuteResultInstancesAdded;
        this.attrScalingRuleArisExecuteResultInstancesRemoved = rosScalingGroupEnable.attrScalingRuleArisExecuteResultInstancesRemoved;
        this.attrScalingRuleArisExecuteResultNumberOfAddedInstances = rosScalingGroupEnable.attrScalingRuleArisExecuteResultNumberOfAddedInstances;
    }
}
exports.ScalingGroupEnable = ScalingGroupEnable;
//# sourceMappingURL=data:application/json;base64,